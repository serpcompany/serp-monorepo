[
  {
    "owner": "dotnet",
    "repo": "entityframework.docs",
    "content": "TITLE: Adding a Migration using Visual Studio Package Manager Console\nDESCRIPTION: This command adds a new migration to the project using the Visual Studio Package Manager Console.  Replace 'AddBlogCreatedTimestamp' with a descriptive name for the migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Migration AddBlogCreatedTimestamp\n```\n\n----------------------------------------\n\nTITLE: Saving Data with EF Core in C#\nDESCRIPTION: This C# snippet illustrates how to save data to a database using Entity Framework Core.  It initializes a new `BloggingContext`, adds a new `Blog` with a specified URL, and then calls `SaveChanges()` to persist the changes to the database.  This example requires the `Intro.Model` namespace and the `BloggingContext` to be defined.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/index.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Intro.Model;\n\nnamespace Intro\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            using (var db = new BloggingContext())\n            {\n                // Create\n                Console.WriteLine(\"Inserting a new blog\");\n                db.Add(new Blog { Url = \"http://blogs.msdn.com/adonet\" });\n                db.SaveChanges();\n\n                // Read\n                Console.WriteLine(\"Querying for a blog\");\n                var blog = db.Blogs\n                    .OrderBy(b => b.BlogId)\n                    .First();\n\n                // Update\n                Console.WriteLine(\"Updating the blog and adding a post\");\n                blog.Url = \"https://devblogs.microsoft.com/dotnet\";\n                blog.Posts.Add(new Post { Title = \"Hello World\", Content = \"I wrote an app using EF Core!\" });\n                db.SaveChanges();\n\n                // Delete\n                Console.WriteLine(\"Delete the blog\");\n                db.Remove(blog);\n                db.SaveChanges();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a new migration using dotnet CLI\nDESCRIPTION: This command adds a new migration to the project.  It uses 'dotnet ef migrations add <MigrationName>' to create a new migration file based on the changes made to the model.  Dependencies: .NET SDK, Entity Framework Core tools installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_18\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add SecondMigration\n```\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add Number3\n```\n\n----------------------------------------\n\nTITLE: Saving a Customer with Address in C#\nDESCRIPTION: This code creates a new `Customer` instance, sets its `Name` and `Address`, adds it to the context, and saves the changes to the database. This demonstrates how the complex type `Address` is used inline within the `Customer` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar customer = new Customer\n{\n    Name = \"Willow\",\n    Address = new() { Line1 = \"Barking Gate\", City = \"Walpole St Peter\", Country = \"UK\", PostCode = \"PE14 7AV\" }\n};\n\ncontext.Add(customer);\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying with Partition Key Comparison (C#)\nDESCRIPTION: This code snippet demonstrates how EF Core 9 can automatically recognize partition key comparisons in LINQ queries for Azure Cosmos DB and optimize query execution by targeting specific partitions, improving performance and reducing RU charges.\nIt assumes that `context.Sessions` is an `IQueryable<Session>` and the `Session` entity has a property named `PartitionKey`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar sessions = await context.Sessions\n    .Where(b => b.PartitionKey == \"someValue\" && b.Username.StartsWith(\"x\"))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Scaffold specific tables with .NET CLI\nDESCRIPTION: This command uses the .NET CLI to scaffold entity types only for the 'Artist' and 'Album' tables.  The `--table` option is used to specify each table individually. The connection string and provider need to be specified as well (omitted for brevity).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold ... --table Artist --table Album\n```\n\n----------------------------------------\n\nTITLE: Encrypt Property Values in EF Core\nDESCRIPTION: This code snippet demonstrates how to use a value converter to encrypt and decrypt property values in EF Core. In this simplified example, it uses string reversal as a substitute for a real encryption algorithm to transform the Password property of the User entity before storing it in the database and after retrieving it.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<User>().Property(e => e.Password).HasConversion(\n                    v => new string(v.Reverse().ToArray()),\n                    v => new string(v.Reverse().ToArray()));\n```\n\n----------------------------------------\n\nTITLE: Primary Key Configuration - Fluent API - C#\nDESCRIPTION: Configures a single property as the primary key of an entity using the Fluent API. The 'HasKey' method within the 'OnModelCreating' method is used to specify the primary key for the 'Car' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\ninternal class CarContext : DbContext\n{\n    public DbSet<Car> Cars { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Car>().HasKey(c => c.LicensePlate);\n    }\n}\n\ninternal class Car\n{\n    public string LicensePlate { get; set; }\n\n    public string Make { get; set; }\n    public string Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination with Continuation Tokens\nDESCRIPTION: This C# snippet demonstrates how to paginate through query results using the `ToPageAsync` extension method and continuation tokens. This approach is more efficient and cost-effective compared to using `Skip` and `Take` for pagination in Azure Cosmos DB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\nvar firstPage = await context.Posts\n    .OrderBy(p => p.Id)\n    .ToPageAsync(pageSize: 10, continuationToken: null);\n\nvar continuationToken = firstPage.ContinuationToken;\nforeach (var post in page.Values)\n{\n    // Display/send the posts to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Related Entity - EF Core - C#\nDESCRIPTION: This snippet demonstrates how to add a related entity to the database by referencing it from the navigation property of an entity that is already being tracked by the context. The new post entity is automatically discovered and inserted into the database when it's added to the Posts collection of an existing Blog entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/related-data.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BloggingContext();\nvar blog = context.Blogs.First();\nblog.Posts.Add(new Post { Title = \"Fourth post\" });\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Perform Vector Similarity Search with LINQ - C#\nDESCRIPTION: This code snippet shows how to perform vector similarity search using the EF.Functions.VectorDistance() function within a LINQ query. It generates another vector, then queries the Blogs collection, ordering the results by the distance between the Blog's Vector property and the generated vector. Finally, it takes the top 5 most similar blogs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/vector-search.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nfloat[] anotherVector = /* generate vector data from text, image, etc. */\nvar blogs = await context.Blogs\n    .OrderBy(s => EF.Functions.VectorDistance(s.Vector, anotherVector))\n    .Take(5)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Add DbContext to ASP.NET Core DI container\nDESCRIPTION: Registers the ApplicationDbContext as a scoped service in the ASP.NET Core app service provider (dependency injection container). Configures the context to use the SQL Server database provider, reading the connection string from the ASP.NET Core configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddDbContext<ApplicationDbContext>(\n    options => options.UseSqlServer(\"name=DefaultConnection\"));\n```\n\n----------------------------------------\n\nTITLE: IEntityTypeConfiguration Implementation - C#\nDESCRIPTION: This code snippet demonstrates how to implement the `IEntityTypeConfiguration<T>` interface to encapsulate the configuration for a specific entity type.  The `Configure` method is used to define the configuration for the `Blog` entity, setting the maximum length of the `Url` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\n\nnamespace EntityTypeConfiguration.Models\n{\n    public class BlogEntityTypeConfiguration : IEntityTypeConfiguration<Blog>\n    {\n        public void Configure(EntityTypeBuilder<Blog> builder)\n        {\n            builder.Property(b => b.Url).HasMaxLength(200);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Similarity Search with LINQ\nDESCRIPTION: This C# snippet illustrates how to perform vector similarity search using `EF.Functions.VectorDistance()` in a LINQ query. It orders the results by the distance between the `Vector` property and a given vector, and then takes the top 5 closest matches.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\nvar blogs = await context.Blogs\n    .OrderBy(s => EF.Functions.VectorDistance(s.Vector, vector))\n    .Take(5)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Column Names with Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to configure the name of the column in the database using the Fluent API in Entity Framework Core. It utilizes the `HasColumnName` method within the `OnModelCreating` override to specify the column name. This configuration overrides the default convention. It requires the `DbContext` and `OnModelCreating` override to configure the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property(b => b.Title)\n        .HasColumnName(\"blog_title\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many Navigation (EF Core 6)\nDESCRIPTION: This code snippet demonstrates how to configure a many-to-many relationship between `Cat` and `Human` entities using just navigation properties in EF Core 6.  EF Core creates a shadow join entity. No dependencies are needed beyond standard EF Core setup.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_137\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Cat>()\n    .HasMany(e => e.Humans)\n    .WithMany(e => e.Cats);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Primary Key using Fluent API - EF6 - C#\nDESCRIPTION: This example demonstrates how to configure a composite primary key using the `HasKey` method with an anonymous type. The `DepartmentID` and `Name` properties are combined to form the composite primary key for the `Department` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>().HasKey(t => new { t.DepartmentID, t.Name });\n```\n\n----------------------------------------\n\nTITLE: Pass Connection String via Constructor\nDESCRIPTION: Demonstrates passing the connection string via the DbContext constructor.  The connection string is stored in a private field and used within the OnConfiguring method. This approach allows for more flexible configuration of the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApplicationDbContext : DbContext\n{\n    private readonly string _connectionString;\n\n    public ApplicationDbContext(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(_connectionString);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Insert with SaveChanges in EF Core\nDESCRIPTION: This C# code snippet demonstrates how to add a new `Blog` entity to the context and persist it to the database using `SaveChangesAsync`.  This shows a simple insert operation using EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.AddAsync(new Blog { Name = \"MyBlog\" });\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Simplified JSON ID Example\nDESCRIPTION: This JSON snippet demonstrates how EF Core 9.0 stores the `id` property, containing only the key value, which is the natural way to map to JSON and makes it easier for external tools and systems to interact with EF-generated JSON documents.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1099,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unique Index - Data Annotations - C#\nDESCRIPTION: This code snippet shows how to create a unique index using Data Annotations in EF Core. The `[Index]` attribute's `IsUnique` property is set to `true` to enforce uniqueness on the indexed column. Attempting to insert duplicate values in the specified column set will result in an exception.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[Index(nameof(Email), IsUnique = true)]\npublic class User\n{\n    public string Email { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max Length with ConfigurationSource in EF Core\nDESCRIPTION: This code snippet shows how to set the `ConfigurationSource` when using the convention builder in EF Core. Setting `fromDataAnnotation` to `true` configures the property as being configured via data annotation, which allows explicit configuration in `OnModelCreating` to override it, while preventing non-mapping attribute conventions from doing so.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nproperty.Builder.HasMaxLength(512, fromDataAnnotation: true);\n```\n\n----------------------------------------\n\nTITLE: Explicitly Create DbContextOptions for WebApp\nDESCRIPTION: Shows how to explicitly create a DbContextOptions object using DbContextOptionsBuilder and then pass it to the DbContext constructor. This allows a DbContext configured for dependency injection (as used in ASP.NET Core web apps) to also be constructed explicitly for testing or other scenarios.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar contextOptions = new DbContextOptionsBuilder<ApplicationDbContext>()\n    .UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test\")\n    .Options;\n\nusing var context = new ApplicationDbContext(contextOptions);\n```\n\n----------------------------------------\n\nTITLE: Optimized Subqueries - SQL Server (EF Core 7)\nDESCRIPTION: This SQL code demonstrates the optimized query translation in EF Core 7. It eliminates the direct reference to the outer query's table in the subquery's WHERE clause by using a derived table. The subquery filter uses the grouping key directly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_112\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [t].[Key] AS [Month], COALESCE(SUM([t].[Amount]), 0.0) AS [Total], (\n    SELECT COALESCE(SUM([p].[Amount]), 0.0)\n    FROM [Payments] AS [p]\n    WHERE DATEPART(month, [p].[History]) = [t].[Key]) AS [Payment]\nFROM (\n    SELECT [i].[Amount], DATEPART(month, [i].[History]) AS [Key]\n    FROM [Invoices] AS [i]\n) AS [t]\nGROUP BY [t].[Key]\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContextOptions with UseSeeding in EF Core (C#)\nDESCRIPTION: Demonstrates how to configure DbContextOptions with the UseSeeding method to seed the database with initial data when using EF Core. This method provides a clear location for data seeding code and leverages migration locking to prevent concurrency issues during EnsureCreated, Migrate, and database update commands. The snippet shows the recommended way to perform data seeding with EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/data-seeding.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\noptions.UseSeeding(builder =>\n{\n    builder.HasData(\n        new Country { Id = 1, Name = \"USA\" },\n        new Country { Id = 2, Name = \"Canada\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Model Managed Data: Seeding Country Data in EF Core (C#)\nDESCRIPTION: Shows how to configure managed data for an entity type, in this case, 'Country,' as part of the model configuration using EF Core. This approach allows EF Core migrations to automatically compute insert, update, or delete operations needed to upgrade the database to a new model version.  The example illustrates adding data within the OnModelCreating method of the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/data-seeding.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Country>().HasData(\n    new Country { Id = 1, Name = \"USA\" },\n    new Country { Id = 2, Name = \"Canada\" });\n```\n\n----------------------------------------\n\nTITLE: Register DbContext with Scoped Factory - C#\nDESCRIPTION: Arranges for a context to be injected from the Scoped factory. This allows controllers and other components to automatically receive a context instance with the correct tenant ID. Depends on the scoped `IDbContextFactory<WeatherForecastContext>`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddDbContext<WeatherForecastContext>(sp =>\n{\n    var factory = sp.GetRequiredService<IDbContextFactory<WeatherForecastContext>>();\n    return factory.CreateDbContext();\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking a New Entity as Added using EntityEntry C#\nDESCRIPTION: This code demonstrates how to start tracking a new, detached entity as `Added` using `EntityEntry.State`. First, a new `Blog` instance is created.  Then, `context.Entry(newBlog).State = EntityState.Added` is used to mark the entity for insertion into the database. Requires `Microsoft.EntityFrameworkCore` namespace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar newBlog = new Blog();\nDebug.Assert(context.Entry(newBlog).State == EntityState.Detached);\n\ncontext.Entry(newBlog).State = EntityState.Added;\nDebug.Assert(context.Entry(newBlog).State == EntityState.Added);\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext and Entities\nDESCRIPTION: This command generates a DbContext and entity types for a database. It uses the specified connection string and provider to reverse engineer the database schema. The output files are placed in the Models folder.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_9\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold \"Server=(localdb)\\mssqllocaldb;Database=Blogging;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -o Models\n```\n\n----------------------------------------\n\nTITLE: Self-Contained Type Configuration for Code First in EF Core 2.0 (C#)\nDESCRIPTION: This code demonstrates how to encapsulate the code-first configuration of a specific entity type by implementing the `IEntityTypeConfiguration` interface. The `CustomerConfiguration` class configures the `Customer` entity, setting the primary key to `AlternateKey` and limiting the `Name` property to a maximum length of 200. The configuration is applied in `OnModelCreating` using `builder.ApplyConfiguration`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nclass CustomerConfiguration : IEntityTypeConfiguration<Customer>\n{\n    public void Configure(EntityTypeBuilder<Customer> builder)\n    {\n        builder.HasKey(c => c.AlternateKey);\n        builder.Property(c => c.Name).HasMaxLength(200);\n    }\n}\n\n...\n// OnModelCreating\nbuilder.ApplyConfiguration(new CustomerConfiguration());\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Many-to-Many Relationship\nDESCRIPTION: This SQL code defines the database schema for a many-to-many relationship between Posts and Tags, including the Posts table, the Tags table, and the PostTag join table with foreign key constraints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"Posts\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Posts\" PRIMARY KEY AUTOINCREMENT);\n\nCREATE TABLE \"Tags\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Tags\" PRIMARY KEY AUTOINCREMENT);\n\nCREATE TABLE \"PostTag\" (\n    \"PostsId\" INTEGER NOT NULL,\n    \"TagsId\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostsId\", \"TagsId\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostsId\" FOREIGN KEY (\"PostsId\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagsId\" FOREIGN KEY (\"TagsId\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Enable DbContext Pooling with Dependency Injection in ASP.NET Core - C#\nDESCRIPTION: Replaces `AddDbContext` with `AddDbContextPool` to enable context pooling in an ASP.NET Core application. The `poolSize` parameter sets the maximum number of context instances retained by the pool.  This approach is useful for high-performance scenarios where frequent context creation and disposal can impact performance. It requires Microsoft.Extensions.DependencyInjection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddDbContextPool<BloggingContext>(options => options.UseSqlServer(connectionString));\n```\n\n----------------------------------------\n\nTITLE: Concurrency Check using ExecuteUpdate in C#\nDESCRIPTION: This C# code snippet demonstrates how to perform a concurrency check using `ExecuteUpdateAsync` in Entity Framework Core. It updates a `Blog` entity only if its `Id` and `ConcurrencyToken` match the provided values. The number of updated rows is then checked to determine if the update was successful or if a concurrency conflict occurred. If no rows are updated, an exception is thrown.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\n// (load the ID and concurrency token for a Blog in the database)\n\nvar numUpdated = await context.Blogs\n    .Where(b => b.Id == id && b.ConcurrencyToken == concurrencyToken)\n    .ExecuteUpdateAsync(/* ... */);\nif (numUpdated == 0)\n{\n    throw new Exception(\"Update failed!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Insert with SaveChanges in EF Core\nDESCRIPTION: This C# code snippet demonstrates how to add multiple `Blog` entities to the context within a loop and then persist them to the database using `SaveChangesAsync`. This demonstrates inserting multiple rows at once.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nfor (var i = 0; i < 4; i++)\n{\n    await context.AddAsync(new Blog { Name = \"Foo\" + i });\n}\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Eagerly Loading Related Data - EF6 - C#\nDESCRIPTION: This code demonstrates how to eagerly load related entities using the Include method in Entity Framework 6.  It shows examples of loading all posts related to each blog and loading only posts related to a specific blog. It also uses both lambda expressions and strings to specify the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/related-data.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Load all blogs and related posts.\n    var blogs1 = context.Blogs\n                        .Include(b => b.Posts)\n                        .ToList();\n\n    // Load one blog and its related posts.\n    var blog1 = context.Blogs\n                       .Where(b => b.Name == \"ADO.NET Blog\")\n                       .Include(b => b.Posts)\n                       .FirstOrDefault();\n\n    // Load all blogs and related posts\n    // using a string to specify the relationship.\n    var blogs2 = context.Blogs\n                        .Include(\"Posts\")\n                        .ToList();\n\n    // Load one blog and its related posts\n    // using a string to specify the relationship.\n    var blog2 = context.Blogs\n                       .Where(b => b.Name == \"ADO.NET Blog\")\n                       .Include(\"Posts\")\n                       .FirstOrDefault();\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor injection of connection string factory (C#)\nDESCRIPTION: This code demonstrates how to inject a service (ITenantConnectionStringFactory) into the DbContext constructor to provide a tenant-specific connection string. This allows dynamic connection string resolution for multi-tenant applications.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomerContext : DbContext\n{\n    private readonly ITenantConnectionStringFactory _connectionStringFactory;\n\n    public CustomerContext(\n        DbContextOptions<CustomerContext> options,\n        ITenantConnectionStringFactory connectionStringFactory)\n        : base(options)\n    {\n        _connectionStringFactory = connectionStringFactory;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Collation in EF Core (SQL Server)\nDESCRIPTION: This code snippet demonstrates how to configure the default database collation for a SQL Server database within the `OnModelCreating` method of your EF Core model. It sets the database to use a case-sensitive collation, ensuring all text operations within the database adhere to the specified case sensitivity.  This is typically done during the database creation process managed by EF Core migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/collations-and-case-sensitivity.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\noptions.UseSqlServer(b => b.HasCollation(\"SQL_Latin1_General_CP1_CS_AS\"));\n```\n\n----------------------------------------\n\nTITLE: Required and Optional Properties with NRT - C#\nDESCRIPTION: This code snippet shows how nullable reference types (NRT) affect the configuration of required and optional properties. With NRT enabled, `string` is configured as required and `string?` is configured as optional.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public int CustomerId { get; set; }\n    public string FirstName { get; set; } = null!;\n    public string? MiddleName { get; set; }\n    public string LastName { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IModelFinalizingConvention in C#\nDESCRIPTION: This code defines a convention implementing the IModelFinalizingConvention interface. It runs after all other model building is complete, ensuring the final model state is used. The convention iterates through all entity types, finds discriminator properties (of type string), and sets their maximum length to 24. This approach is more robust against later configuration changes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class DiscriminatorLengthConvention2 : IModelFinalizingConvention\n{\n    public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context)\n    {\n        foreach (var entityType in modelBuilder.Metadata.GetEntityTypes()\n                     .Where(entityType => entityType.BaseType == null))\n        {\n            var discriminatorProperty = entityType.FindDiscriminatorProperty();\n            if (discriminatorProperty != null\n                && discriminatorProperty.ClrType == typeof(string))\n            {\n                discriminatorProperty.Builder.HasMaxLength(24);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Existing Property Value with ExecuteUpdateAsync - C#\nDESCRIPTION: This snippet demonstrates referencing the existing property value to update the Rating of blogs with a rating less than 3, incrementing it by one.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\nawait context.Blogs\n    .Where(b => b.Rating < 3)\n    .ExecuteUpdateAsync(setters => setters.SetProperty(b => b.Rating, b => b.Rating + 1));\n```\n\n----------------------------------------\n\nTITLE: Configure Value Object Key Conversions in EF Core\nDESCRIPTION: Configures value converters in EF Core to map the BlogKey and PostKey value objects to their underlying integer representation in the database. This allows EF Core to correctly persist and retrieve entities with value object keys.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    var blogKeyConverter = new ValueConverter<BlogKey, int>(\n        v => v.Id,\n        v => new BlogKey(v));\n\n    modelBuilder.Entity<Blog>().Property(e => e.Id).HasConversion(blogKeyConverter);\n\n    modelBuilder.Entity<Post>(\n        b =>\n            {\n                b.Property(e => e.Id).HasConversion(v => v.Id, v => new PostKey(v));\n                b.Property(e => e.BlogId).HasConversion(blogKeyConverter);\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Properties with Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to exclude a property from being mapped to a column in the database using the Fluent API in Entity Framework Core. This is done by calling `Ignore()` on the `PropertyBuilder` for the entity. It requires the `DbContext` and `OnModelCreating` override to configure the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Ignore(b => b.FullName);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tagged Query Command Interceptor (C#)\nDESCRIPTION: Defines an `IDbCommandInterceptor` that modifies SQL commands based on the presence of a specific tag. It checks if the command text starts with the defined tag, and if so, appends an `OPTION (ROBUST PLAN)` hint to the SQL query. The interceptor handles both synchronous and asynchronous execution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class TaggedQueryCommandInterceptor : DbCommandInterceptor\n{\n    public override InterceptionResult<DbDataReader> ReaderExecuting(\n        DbCommand command,\n        CommandEventData eventData,\n        InterceptionResult<DbDataReader> result)\n    {\n        ManipulateCommand(command);\n\n        return result;\n    }\n\n    public override ValueTask<InterceptionResult<DbDataReader>> ReaderExecutingAsync(\n        DbCommand command,\n        CommandEventData eventData,\n        InterceptionResult<DbDataReader> result,\n        CancellationToken cancellationToken = default)\n    {\n        ManipulateCommand(command);\n\n        return ValueTask.FromResult(result);\n    }\n\n    private static void ManipulateCommand(DbCommand command)\n    {\n        if (command.CommandText.StartsWith(\"-- Use hint: robust plan\", StringComparison.Ordinal))\n        {\n            command.CommandText += \" OPTION (ROBUST PLAN)\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Join Entity with All Navigations C#\nDESCRIPTION: Defines the Post, Tag, and PostTag classes with navigations in both directions (to and from the join entity). This allows navigation from Post to Tag, Tag to Post, Post to PostTag, Tag to PostTag, PostTag to Post, and PostTag to Tag.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostId { get; set; }\n    public int TagId { get; set; }\n    public Post Post { get; set; } = null!;\n    public Tag Tag { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many with Shadow FK and Navigation to Principal\nDESCRIPTION: This C# code explicitly configures a one-to-many relationship using the `OnModelCreating` method in Entity Framework Core. It defines the foreign key column name using `HasForeignKey` and enforces the relationship with `IsRequired()`. Requires an instance of `ModelBuilder`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany(e => e.Posts)\n                    .WithOne()\n                    .HasForeignKey(\"BlogId\")\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: Deleting Principal Parent Entities C#\nDESCRIPTION: This C# code snippet demonstrates deleting a parent blog entity in EF Core, which will also delete associated child post entities due to the required relationship configuration. It attaches a blog with associated posts, marks the blog as deleted, and then saves the changes, resulting in the deletion of both the blog and its posts.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace ChangeTrackingInEFCore\n{\n    public static class ExplicitKeysRequiredSamples\n    {\n        public static void DeletingPrincipalParentEntities()\n        {\n            using var context = new BlogsContext();\n            var blog = context.Blogs.Include(e => e.Posts).Single(e => e.Id == 1);\n\n            // Attach a blog and associated posts\n            context.Attach(blog);\n\n            // Mark one post as Deleted\n            context.Remove(blog);\n\n            Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n\n            context.SaveChanges();\n\n            Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Many-to-Many Relationship with Custom Join Table C#\nDESCRIPTION: This code configures a many-to-many relationship between the Course and Instructor types with a custom join table. It specifies the join table name as CourseInstructor and the column names as CourseID and InstructorID using the Map method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()\n    .HasMany(t => t.Instructors)\n    .WithMany(t => t.Courses)\n    .Map(m =>\n    {\n        m.ToTable(\"CourseInstructor\");\n        m.MapLeftKey(\"CourseID\");\n        m.MapRightKey(\"InstructorID\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Key in Join Entity (C#)\nDESCRIPTION: This snippet configures the many-to-many relationship and adds a primary key to the join table using the UsingEntity method.  It uses an indexer property and HasKey to define the 'Id' column as the primary key for the join table without an explicit entity class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity(\n            j =>\n            {\n                j.IndexerProperty<int>(\"Id\");\n                j.HasKey(\"Id\");\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Split Queries in EF Core 5.0 (C#)\nDESCRIPTION: Illustrates how to enable split queries in EF Core 5.0 to improve performance when querying related collections.  `AsSplitQuery` operator is used within a LINQ query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar artists = await context.Artists\n    .Include(e => e.Albums)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Accessing All Entity Members in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to access all members (properties and navigations) of an entity and display their metadata and current values.  It iterates through the members using `context.Entry(blog).Members` and prints information about each member's name, type, and current value.  This provides a unified way to inspect both properties and navigations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var memberEntry in context.Entry(blog).Members)\n{\n    Console.WriteLine(\n        $\"Member {memberEntry.Metadata.Name} is of type {memberEntry.Metadata.ClrType.ShortDisplayName()} and has value {memberEntry.CurrentValue}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configure DbContext Factory in ConfigureServices - C#\nDESCRIPTION: This snippet demonstrates how to register a DbContext factory in the ConfigureServices method using AddDbContextFactory. It configures the ApplicationDbContext to use SQL Server with a specified connection string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddDbContextFactory<ApplicationDbContext>(options =>\n    options.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test\"));\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities with Include - C#\nDESCRIPTION: This code snippet demonstrates how to use the `Include` method in EF Core to load related entities (Posts and Contributors) of a Blog.  This approach can lead to a cartesian explosion if there are multiple collection navigations at the same level, causing performance issues.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await ctx.Blogs\n    .Include(b => b.Posts)\n    .Include(b => b.Contributors)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Reference Navigation Example - C#\nDESCRIPTION: This C# code snippet demonstrates a reference navigation property 'TheBlog' within an entity. Reference navigations represent the 'one' side of one-to-many and one-to-one relationships. The setter is required, although it doesn't have to be public, and it should not be initialized with a non-null value by default.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic Blog TheBlog { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Required One-to-Many - C#\nDESCRIPTION: Defines a standard one-to-many relationship between Blog and Post where the relationship is required. This means that a Post must always belong to a Blog. This is achieved through the `BlogId` property on the Post entity and the `Blog` navigation property, along with the `Posts` collection navigation property in the Blog entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();  // Collection navigation containing dependents\n}\n\n// Dependent (child)\npublic class Post\n{\n    public int Id { get; set; }\n    public int BlogId { get; set; }                              // Required foreign key property\n    public Blog Blog { get; set; } = null!;                      // Required reference navigation to principal\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Key Convention - KeyId - C#\nDESCRIPTION: Demonstrates the primary key convention in EF Core, where a property named 'Id' or '<type name>Id' is automatically configured as the primary key. Highlights the 'Blog' class with 'BlogId' and 'Post' class with 'Id' as primary keys.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n\n    public List<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: MigrationBuilder Extension for Custom Operation in C#\nDESCRIPTION: This C# code defines an extension method on `MigrationBuilder` that allows adding a `CreateUserOperation` to the list of operations. It creates a new `CreateUserOperation` instance with the provided name and password and adds it to the `MigrationBuilder.Operations` collection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/operations.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Migrations.Operations;\n\npublic static class MigrationBuilderExtensions\n{\n    public static MigrationBuilder CreateUser(\n        this MigrationBuilder migrationBuilder,\n        string name,\n        string password)\n    {\n        migrationBuilder.Operations.Add(\n            new CreateUserOperation { Name = name, Password = password });\n\n        return migrationBuilder;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Use PooledDbContextFactory (C#)\nDESCRIPTION: This code shows how to use the PooledDbContextFactory to create and pool DbContext instances. Instances are returned to the pool when they are disposed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_152\n\nLANGUAGE: C#\nCODE:\n```\nfor (var i = 0; i < 2; i++)\n{\n    using var context1 = factory.CreateDbContext();\n    Console.WriteLine($\"Created DbContext with ID {context1.ContextId}\");\n\n    using var context2 = factory.CreateDbContext();\n    Console.WriteLine($\"Created DbContext with ID {context2.ContextId}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Migration Customization: Custom Insert Operation in EF Core (C#)\nDESCRIPTION: Demonstrates how to manually add custom operations, such as inserting data, to a migration to work around limitations of the HasData method. This approach allows for more flexibility in data seeding during migrations, especially when dealing with scenarios that require database connections or external API calls. This snippet shows an example of adding an InsertData call directly to the migration's Up method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/data-seeding.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void Up(MigrationBuilder migrationBuilder)\n{\n    migrationBuilder.InsertData(\n        table: \"Countries\",\n        columns: new[] { \"Id\", \"Name\" },\n        values: new object[] { 3, \"Germany\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Migration using .NET Core CLI\nDESCRIPTION: This command adds a new migration to the project using the .NET Core CLI. Replace 'AddBlogCreatedTimestamp' with a descriptive name for the migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add AddBlogCreatedTimestamp\n```\n\n----------------------------------------\n\nTITLE: Executing Stored Procedure with Named Parameter - C#\nDESCRIPTION: This code shows the execution of a stored procedure using a named parameter. A `SqlParameter` object is created and passed as a parameter value within the `FromSql` method. This approach enhances readability and clarity, especially for stored procedures with optional parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar user = new SqlParameter(\"user\", \"johndoe\");\n\nvar blogs = await context.Blogs\n    .FromSql($\"EXECUTE dbo.GetMostPopularBlogsForUser @filterByUser={user}\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Apply shadow ID configuration to all entities in EF Core\nDESCRIPTION: This code snippet applies the shadow ID configuration to all entity types in the model with a single call.  This is a convenient way to revert to the EF Core 8 behavior regarding JSON `id` property mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.HasShadowIds();\n```\n\n----------------------------------------\n\nTITLE: Caching Interception Demo - Main Method\nDESCRIPTION: This C# code snippet demonstrates a caching interceptor in Entity Framework Core.  It initializes a database with messages, queries for a message (which is cached), inserts a new message, shows how the cached message is used until the cache expires, and then queries the database again.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// 1. Initialize the database with some daily messages.\nusing (var context = new DailyMessageContext())\n{\n    await context.Database.EnsureDeletedAsync();\n    await context.Database.EnsureCreatedAsync();\n\n    context.AddRange(\n        new DailyMessage { Message = \"Remember: All builds are GA; no builds are RTM.\" },\n        new DailyMessage { Message = \"Keep calm and drink tea\" });\n\n    await context.SaveChangesAsync();\n}\n\n// 2. Query for the most recent daily message. It will be cached for 10 seconds.\nusing (var context = new DailyMessageContext())\n{\n    Console.WriteLine(await GetDailyMessage(context));\n}\n\n// 3. Insert a new daily message.\nusing (var context = new DailyMessageContext())\n{\n    context.Add(new DailyMessage { Message = \"Free beer for unicorns\" });\n\n    await context.SaveChangesAsync();\n}\n\n// 4. Cached message is used until cache expires.\nusing (var context = new DailyMessageContext())\n{\n    Console.WriteLine(await GetDailyMessage(context));\n}\n\n// 5. Pretend it's the next day.\nThread.Sleep(10000);\n\n// 6. Cache is expired, so the last message will noe be queried again.\nusing (var context = new DailyMessageContext())\n{\n    Console.WriteLine(await GetDailyMessage(context));\n}\n\n#region GetDailyMessage\nasync Task<string> GetDailyMessage(DailyMessageContext context)\n    => (await context.DailyMessages.TagWith(\"Get_Daily_Message\").OrderBy(e => e.Id).LastAsync()).Message;\n#endregion\n```\n\n----------------------------------------\n\nTITLE: Nullable Reference Types Example (C#)\nDESCRIPTION: This code illustrates how EF Core handles nullable reference types introduced in C# 8.0. Properties declared as string? are treated as optional, while properties of type string are treated as required when mapping to database columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/index.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string? MiddleName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Query, Insert, Update, Delete with EF Core\nDESCRIPTION: This C# code snippet demonstrates querying a blog and its related posts from the database, updating the blog's name, inserting a new post, and marking an existing post for deletion.  It uses Entity Framework Core to track these changes and then persists them to the database using SaveChanges.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/index.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n            var blog = context.Blogs.Include(e => e.Posts).First(e => e.Name == \".NET Blog\");\n\n            // Modify property values\n            blog.Name = \".NET Blog (Updated!)\";\n\n            // Insert a new Post\n            blog.Posts.Add(new Post\n            {\n                Title = \"What’s next for System.Text.Json?\",\n                Content = \".NET 5.0 was released recently and has come with many...\"\n            });\n\n            // Mark an existing Post as Deleted\n            var postToDelete = blog.Posts.Single(e => e.Title == \"Announcing F# 5\");\n            context.Remove(postToDelete);\n\n            context.ChangeTracker.DetectChanges();\n            Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n\n            context.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Install SQL Server Provider with .NET Core CLI\nDESCRIPTION: This command installs the Microsoft.EntityFrameworkCore.SqlServer NuGet package using the .NET Core CLI. This package is required to use Entity Framework Core with Microsoft SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/index.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Inserting explicit values into IDENTITY columns in EF Core\nDESCRIPTION: This code snippet shows how to enable IDENTITY_INSERT in SQL Server before saving changes to allow inserting explicit values into an IDENTITY column. It uses a try-finally block to ensure that IDENTITY_INSERT is disabled after the operation, regardless of success or failure.  It depends on Entity Framework Core and a DbContext configured with a connection to a SQL Server database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/value-generation.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    context.Database.OpenConnection();\n    try\n    {\n        context.Database.ExecuteSqlRaw(\"SET IDENTITY_INSERT dbo.Blogs ON\");\n\n        context.Blogs.Add(new Blog { BlogId = -1, Url = \"http://example.com\" });\n        context.SaveChanges();\n\n        context.Database.ExecuteSqlRaw(\"SET IDENTITY_INSERT dbo.Blogs OFF\");\n    }\n    finally\n    {\n        context.Database.CloseConnection();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Temporal Table Configuration\nDESCRIPTION: This code snippet shows how to customize the period start and end column names, as well as the history table name, when configuring a temporal table in EF Core. It utilizes the 'HasPeriodStart', 'HasPeriodEnd', and 'UseHistoryTable' methods within the IsTemporal configuration block to achieve this.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Employee>()\n    .ToTable(\n        \"Employees\",\n        b => b.IsTemporal(\n            b =>\n            {\n                b.HasPeriodStart(\"ValidFrom\");\n                b.HasPeriodEnd(\"ValidTo\");\n                b.UseHistoryTable(\"EmployeeHistoricalData\");\n            }));\n```\n\n----------------------------------------\n\nTITLE: Using External DbTransaction with EF Core\nDESCRIPTION: This code demonstrates how to use an external DbTransaction (e.g., from ADO.NET) with Entity Framework Core. It creates a SqlConnection and SqlTransaction, performs an ADO.NET operation using SqlClient, then enlists the EF Core context in the same transaction using DbContext.Database.UseTransaction.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/transactions.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing (var connection = new SqlConnection(\"Server=(localdb)\\mssqllocaldb;Database=ExternalTransactions;Trusted_Connection=True;MultipleActiveResultSets=true\"))\n{\n    connection.Open();\n\n    using (var transaction = connection.BeginTransaction())\n    {\n        try\n        {\n            var command = connection.CreateCommand();\n            command.Transaction = transaction;\n            command.CommandText = \"UPDATE Blogs SET Name = 'My Blog' WHERE Id = 1\";\n            command.ExecuteNonQuery();\n\n            var options = new DbContextOptionsBuilder<BloggingContext>()\n                .UseSqlServer(connection)\n                .Options;\n\n            using (var context = new BloggingContext(options))\n            {\n                context.Database.UseTransaction(transaction);\n\n                var blog = context.Blogs.Single(b => b.Id == 2);\n                blog.Name = \"Another Blog\";\n                context.SaveChanges();\n            }\n\n            transaction.Commit();\n        }\n        catch (Exception)\n        {\n            // TODO: Handle failure\n            transaction.Rollback();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Basic Query with User-Defined Function (C#)\nDESCRIPTION: This C# code demonstrates how to execute a query that uses the mapped user-defined function.  It retrieves blogs where the result of the `CommentedPostCountForBlog` function is greater than 1.  This shows how the CLR method is used in a LINQ query, which EF Core then translates into SQL that calls the user-defined function.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = context.Blogs\n    .Where(b => context.CommentedPostCountForBlog(b.BlogId) > 1)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: LINQ Query with Contains Operator in C#\nDESCRIPTION: This code snippet demonstrates a LINQ query using the `Contains` operator.  It showcases the usage of `Contains` with a parameterized value list to filter blogs by their names. The snippet requires `context.Blogs` which is assumed to be a `DbSet<Blog>` and `ToArrayAsync()` to execute the query asynchronously.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar names = new[] { \"Blog1\", \"Blog2\" };\n\nvar blogs = await context.Blogs\n    .Where(b => names.Contains(b.Name))\n    .ToArrayAsync();\n```\n\n----------------------------------------\n\nTITLE: Use ApplicationDbContext in ASP.NET Core controllers\nDESCRIPTION: Shows how to inject ApplicationDbContext into an ASP.NET Core controller using constructor injection.  The ApplicationDbContext instance is created for each request, passed to the controller to perform a unit-of-work, and then disposed when the request ends.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyController\n{\n    private readonly ApplicationDbContext _context;\n\n    public MyController(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing Example C#\nDESCRIPTION: This code snippet demonstrates a simple query in EF Core where the proper use of indexes can significantly impact performance. It is important to analyze the query plan to ensure indexes are being utilized.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Consider the following query:\nvar blogs = context.Blogs.Where(b => b.Url.Contains(\"dotnet\")).ToList();\n```\n\n----------------------------------------\n\nTITLE: Basic Many-to-Many Relationship C#\nDESCRIPTION: Defines a basic many-to-many relationship between `Post` and `Tag` entities using collection navigations. This example showcases the default convention-based configuration where EF Core automatically creates a join table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Property Required with Data Annotations - C#\nDESCRIPTION: This code snippet demonstrates how to explicitly configure a property as required using the `[Required]` data annotation in Entity Framework Core.  This overrides the default convention. The dependency is System.ComponentModel.DataAnnotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    [Required]\n    public string Title { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data with SaveChanges - EF Core\nDESCRIPTION: Illustrates how to update an existing entity that is tracked by the context using SaveChanges. Changes made to tracked entities are automatically detected and persisted during the SaveChanges call. Requires a DbContext and a tracked entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/basic.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nConsole.WriteLine(\"Updating the blog and adding a post\");\n\nvar blog = context.Blogs.First();\nblog.Url = \"https://devblogs.microsoft.com/dotnet\";\nblog.Posts.Add(new Post { Title = \"Hello World\", Content = \"I wrote an app using EF Core!\" });\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Deleting Blogs with Rating Below Threshold using ExecuteDelete (C#)\nDESCRIPTION: This code snippet demonstrates how to delete blogs with a rating below a certain threshold using the ExecuteDelete method in Entity Framework Core. This method allows for efficient bulk deletion using a single SQL DELETE statement generated from LINQ operators. It does not involve loading entities into the change tracker, improving performance for large-scale deletions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/index.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Blogs.Where(b => b.Rating < 3).ExecuteDelete();\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with SaveChanges - EF Core\nDESCRIPTION: Shows how to delete an entity instance from the database using the Remove method and SaveChanges. If the entity exists in the database, it will be deleted; otherwise, it will be removed from the context. Requires a DbContext and a DbSet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/basic.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nConsole.WriteLine(\"Delete the blog\");\ncontext.Remove(blog);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Define Foo2 Entity with Nullable Integer Property\nDESCRIPTION: Defines the Foo2 entity with a nullable integer property Count. This approach resolves the issue of the CLR default (0) being indistinguishable from no value being set.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class Foo2\n{\n    public int Id { get; set; }\n    public int? Count { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Migrations Assembly in Startup.cs (C#)\nDESCRIPTION: Configures the migrations assembly in the Startup.cs file of the main web application project. This ensures that Entity Framework Core knows where to find the migration files located in the separate migrations project. Requires a reference to the DbContext project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/projects.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddDbContext<ApplicationDbContext>(options =>\n    options.UseSqlServer(\n        Configuration.GetConnectionString(\"DefaultConnection\"),\n        b => b.MigrationsAssembly(\"WebApplication1.Migrations\")));\n```\n\n----------------------------------------\n\nTITLE: Executing Stored Procedure with FromSql - C#\nDESCRIPTION: This code snippet shows how to execute a stored procedure named `dbo.GetMostPopularBlogs` using `FromSql`. The results are then converted to a list of `Blog` entities asynchronously.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = await context.Blogs\n    .FromSql($\"EXECUTE dbo.GetMostPopularBlogs\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Adding New Migration using .NET Core CLI (dotnetcli)\nDESCRIPTION: Adds a new migration to the specified migrations project using the .NET Core CLI.  The `--project` parameter specifies the target project where the migration should be added. Requires the Entity Framework Core tools to be installed globally or locally.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/projects.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add NewMigration --project WebApplication1.Migrations\n```\n\n----------------------------------------\n\nTITLE: Adding New Migration using Visual Studio (powershell)\nDESCRIPTION: Adds a new migration to the specified migrations project using the Visual Studio Package Manager Console.  The `-Project` parameter specifies the target project where the migration should be added.  Requires the Entity Framework Core tools to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/projects.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Migration NewMigration -Project WebApplication1.Migrations\n```\n\n----------------------------------------\n\nTITLE: Update Entity Using SetValues with Dictionary - C#\nDESCRIPTION: This snippet demonstrates using `SetValues` with a dictionary to update an entity's properties. The dictionary contains name/value pairs that correspond to the entity's properties. The entity is first queried and tracked.  This method allows for flexible updates with dynamic property values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdateFromHttpPost5(Dictionary<string, object> propertyValues)\n{\n    using var context = new BlogsContext();\n\n    var trackedBlog = context.Blogs.Find(propertyValues[\"Id\"]);\n\n    context.Entry(trackedBlog).CurrentValues.SetValues(propertyValues);\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Application-Managed Concurrency Token with Fluent API - C#\nDESCRIPTION: Configures the Version property as a concurrency token using the Fluent API. The IsConcurrencyToken() method indicates that the property should be used for optimistic concurrency checks.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Person>()\n        .Property(p => p.Version)\n        .IsConcurrencyToken();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data with SaveChanges - EF Core\nDESCRIPTION: Demonstrates how to add a new entity instance to the database using the Add method and SaveChanges. The data is inserted into the database when SaveChanges is called. Requires DbContext and DbSet from Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/basic.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nConsole.WriteLine(\"Inserting a new blog\");\ncontext.Add(new Blog { Url = \"http://blogs.msdn.com/adonet\" });\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Update Application-Managed Concurrency Token - C#\nDESCRIPTION: Demonstrates updating a Person's FirstName and updating the Version property with a new Guid before saving changes.  The application is responsible for generating and assigning new values to the concurrency token.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar person = await context.People.SingleAsync(b => b.FirstName == \"John\");\nperson.FirstName = \"Paul\";\nperson.Version = Guid.NewGuid();\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Updating Shared Address Property C#\nDESCRIPTION: This C# snippet demonstrates how modifying a shared address instance affects multiple entities. It changes the `Line1` property of the customer's address, which is also used in order's billing and shipping addresses, resulting in updates to all three in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\ncustomer.Address.Line1 = \"Peacock Lodge\";\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Deleting an Owner without Loading the Blog (C#)\nDESCRIPTION: This C# snippet attempts to delete an owner without first loading the associated blog. This will result in an exception due to foreign key constraint violation in the database, because client-side cascade delete is configured. The constraint violation happens because EF Core is configured to do a client side cascade, but isn't managing the blog's deletion prior to the owner deletion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n                var owner = context.People.Single(e => e.Name == \"ajcvickers\");\n\n                context.Remove(owner);\n            \n                context.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many From Principal with No Navigation to Dependents\nDESCRIPTION: This C# code configures a one-to-many relationship in Entity Framework Core using `OnModelCreating`. It starts configuration from the `Blog` entity (principal), explicitly specifying `Post` as the related entity using `HasMany<Post>()`. The `WithOne()` call establishes the relationship and `HasForeignKey` specifies the foreign key property. Requires an instance of `ModelBuilder`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany<Post>()\n                    .WithOne(e => e.Blog)\n                    .HasForeignKey(e => e.BlogId)\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContextOptions in OnConfiguring - C#\nDESCRIPTION: This snippet shows how to configure the DbContextOptions in the OnConfiguring method of a DbContext. It configures the ApplicationDbContext to use SQL Server with a specified connection string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApplicationDbContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lookup Tracked Entity by Unique Foreign Key (EF Core)\nDESCRIPTION: This code demonstrates how to lookup a tracked entity by a unique foreign key using the `FindEntry` method on the `LocalView`. The name of the property representing the foreign key must be specified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nvar blogAtSiteEntry = context.Blogs.Local.FindEntry(nameof(Blog.SiteUri), new Uri(\"https://www.bricelam.net/\"))!;\n```\n\n----------------------------------------\n\nTITLE: Required one-to-many relationship - C#\nDESCRIPTION: This C# code defines a required one-to-many relationship between `Blog` and `Post` entities using convention. A `Blog` can have many `Posts`, and each `Post` must belong to a `Blog`. The `Post.BlogId` property is a non-nullable foreign key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Principal (parent)\npublic class Blog\n{\n    public int Id { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();  // Collection navigation containing dependents\n}\n\n// Dependent (child)\npublic class Post\n{\n    public int Id { get; set; }\n    public int BlogId { get; set; }                              // Required foreign key property\n    public Blog Blog { get; set; } = null!;                      // Required reference navigation to principal\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Many-to-Many - C#\nDESCRIPTION: This C# code defines entity classes for Post and Tag, without an explicit join entity.  EF Core automatically creates and manages the join entity transparently, mapping a many-to-many relationship using conventions. This simplifies the model by hiding the join entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Full Explicit Many-to-Many Configuration C#\nDESCRIPTION: Shows a complete explicit configuration of the many-to-many relationship, including the use of `UsingEntity` to fully define the join table and its foreign keys. This gives the developer fine-grained control over the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity(\n            \"PostTag\",\n            r => r.HasOne(typeof(Tag)).WithMany().HasForeignKey(\"TagsId\").HasPrincipalKey(nameof(Tag.Id)),\n            l => l.HasOne(typeof(Post)).WithMany().HasForeignKey(\"PostsId\").HasPrincipalKey(nameof(Post.Id)),\n            j => j.HasKey(\"PostsId\", \"TagsId\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many with Explicit Navigations C#\nDESCRIPTION: Explicitly configures navigations in both directions using the UsingEntity method and lambda expressions to specify the relationships between Post, Tag, and PostTag.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>(\n            r => r.HasOne<Tag>(e => e.Tag).WithMany(e => e.PostTags),\n            l => l.HasOne<Post>(e => e.Post).WithMany(e => e.PostTags));\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Collation in EF Core Query\nDESCRIPTION: This C# code snippet demonstrates how to explicitly specify a collation within an EF Core query using `EF.Functions.Collate`. It forces a case-sensitive comparison on the 'Name' property, regardless of the database or column collation settings. This is useful when a specific query needs different collation rules.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/collations-and-case-sensitivity.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar customer = context.Customers\n    .Where(c => EF.Functions.Collate(c.Name, \"SQL_Latin1_General_CP1_CS_AS\") == \"John\")\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Full Mapping with Join Entity - C#\nDESCRIPTION: This C# code defines entity classes for Post, Tag, and PostTag (join entity) and includes skip navigations to directly access related Tags from Post and Posts from Tag. This demonstrates a full mapping with the join entity and skip navigations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<PostTag> PostTags { get; } = new();\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<PostTag> PostTags { get; } = new();\n    public List<Post> Posts { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostsId { get; set; }\n    public int TagsId { get; set; }\n    public Post Post { get; set; } = null!;\n    public Tag Tag { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Enum to String Conversion - EF Core\nDESCRIPTION: This code snippet demonstrates how to explicitly configure a value conversion for an enum property to store its values as strings in the database using `OnModelCreating`. It converts `EquineBeast` to string for database storage and back to `EquineBeast` when reading from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<Rider>()\n        .Property(e => e.Mount)\n        .HasConversion(\n            v => v.ToString(),\n            v => (EquineBeast)Enum.Parse(typeof(EquineBeast), v));\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Unidirectional Many-to-Many (C#)\nDESCRIPTION: Configures a unidirectional many-to-many relationship between Post and Tag entities using the HasMany and WithMany methods.  No argument is passed to WithMany because there is no navigation property on the Tag entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model with EF Core in C#\nDESCRIPTION: This C# code snippet demonstrates how to define an entity model using Entity Framework Core.  It defines a `Blog` class with properties like `BlogId`, `Url`, and a collection of `Post` objects.  The `Post` class includes properties like `PostId`, `Title`, `Content`, and the relationship to the `Blog` class via the `BlogId` foreign key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\n\nnamespace Intro.Model\n{\n    public class Blog\n    {\n        public int BlogId { get; set; }\n        public string Url { get; set; }\n\n        public List<Post> Posts { get; set; }\n    }\n\n    public class Post\n    {\n        public int PostId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n        public int BlogId { get; set; }\n        public Blog Blog { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vector Property in EF Core Model - C#\nDESCRIPTION: This code snippet configures a float array property as a vector in an EF Core model. It uses the IsVector() method to specify the distance function (Cosine) and the number of dimensions (1536) for the vector. This configuration is done within the OnModelCreating method of the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/vector-search.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    ...\n\n    public float[] Vector { get; set; }\n}\n\npublic class BloggingContext\n{\n    ...\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Blog>()\n            .Property(b => b.Embeddings)\n            .IsVector(DistanceFunction.Cosine, dimensions: 1536);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Key Constraint Name Configuration - Fluent API - C#\nDESCRIPTION: Demonstrates how to configure the name of the primary key constraint using the Fluent API. The 'HasKey' method followed by 'HasName' is used to specify the primary key constraint name for the 'Car' entity to 'PK_Cars'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\ninternal class CarContext : DbContext\n{\n    public DbSet<Car> Cars { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Car>().HasKey(c => c.LicensePlate).HasName(\"PK_Cars\");\n    }\n}\n\ninternal class Car\n{\n    public string LicensePlate { get; set; }\n\n    public string Make { get; set; }\n    public string Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many without Cascade Delete (C#)\nDESCRIPTION: This snippet demonstrates how to configure a many-to-many relationship to prevent cascading deletes.  It uses the UsingEntity method to specify the join entity, and then uses HasOne(...).WithMany().OnDelete(DeleteBehavior.Restrict) to set the delete behavior to Restrict for both sides of the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity(\n            r => r.HasOne(typeof(Tag)).WithMany().OnDelete(DeleteBehavior.Restrict),\n            l => l.HasOne(typeof(Post)).WithMany().OnDelete(DeleteBehavior.Restrict));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with mixed sort order - Data Annotations - C#\nDESCRIPTION: This code shows how to create an index with mixed sort orders using Data Annotations in EF Core.  The `[Index]` attribute's `IsDescending` parameter allows for column-by-column order control. This feature is being introduced in EF Core 7.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[Index(nameof(LastName), IsDescending = true)]\n[Index(nameof(FirstName))]\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max String Length Convention in EF Core\nDESCRIPTION: This code demonstrates how to set a default maximum length for all string properties in an Entity Framework Core model using a custom convention. It iterates through all string properties and sets their maximum length to 512. This convention implements the IModelFinalizingConvention interface.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class MaxStringLengthConvention : IModelFinalizingConvention\n{\n    public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context)\n    {\n        foreach (var property in modelBuilder.Metadata.GetEntityTypes()\n                     .SelectMany(\n                         entityType => entityType.GetDeclaredProperties()\n                             .Where(\n                                 property => property.ClrType == typeof(string))))\n        {\n            property.Builder.HasMaxLength(512);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ambient Transactions (System.Transactions)\nDESCRIPTION: This code demonstrates how to use ambient transactions from System.Transactions with Entity Framework Core. It creates a TransactionScope and performs operations within it. EF Core enlists in the ambient transaction if one is present. Requires System.Transactions and a database provider that supports System.Transactions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/transactions.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing (new TransactionScope())\n{\n    using (var context = new BloggingContext())\n    {\n        try\n        {\n            context.Blogs.Add(new Blog { Name = \"My new Blog #1\" });\n            context.SaveChanges();\n\n            context.Blogs.Add(new Blog { Name = \"My new Blog #2\" });\n            context.SaveChanges();\n\n            context.Blogs.Where(b => b.Name.StartsWith(\"My\")).ToList();\n\n            // Complete the transaction\n            Transaction.Current.Complete();\n        }\n        catch (Exception)\n        {\n            // TODO: Handle failure\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations Programmatically\nDESCRIPTION: This code snippet shows how to apply migrations programmatically within an ASP.NET application during startup. It retrieves the `ApplicationDbContext` from the service provider and calls `Database.MigrateAsync()` to apply pending migrations.  Dependencies: Microsoft.EntityFrameworkCore NuGet package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task Main(string[] args)\n{\n    var host = CreateHostBuilder(args).Build();\n\n    using (var scope = host.Services.CreateScope())\n    {\n        var db = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();\n        await db.Database.MigrateAsync();\n    }\n\n    host.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required FK by Property - EF Core\nDESCRIPTION: This code snippet shows how to configure a foreign key property as required by directly configuring the property itself using `IsRequired`.  This approach achieves the same result as calling `IsRequired` on the relationship configuration, making the foreign key column non-nullable in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .Property(e => e.BlogId)\n    .IsRequired();\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Value Object (Money) in C#\nDESCRIPTION: This code defines a `Money` struct as a value object, containing an amount and a currency. It includes a constructor, `ToString` override for display, and properties for amount and currency.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct Money\n{\n    [JsonConstructor]\n    public Money(decimal amount, Currency currency)\n    {\n        Amount = amount;\n        Currency = currency;\n    }\n\n    public override string ToString()\n        => (Currency == Currency.UsDollars ? \"$\" : \"£\") + Amount;\n\n    public decimal Amount { get; }\n    public Currency Currency { get; }\n}\n\npublic enum Currency\n{\n    UsDollars,\n    PoundsStirling\n}\n```\n\n----------------------------------------\n\nTITLE: Update All Blogs C#\nDESCRIPTION: This code snippet demonstrates how to update the Name property of all blogs using ExecuteUpdateAsync. It appends \" *Featured!*\" to the existing name. Requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Blogs.ExecuteUpdateAsync(\n    s => s.SetProperty(b => b.Name, b => b.Name + \" *Featured!*\"));\n```\n\n----------------------------------------\n\nTITLE: Define Join Entity with Navigations C#\nDESCRIPTION: Defines the Post, Tag, and PostTag classes, including navigations to the PostTag entity. This allows direct access to the join entity from both the Post and Tag entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostId { get; set; }\n    public int TagId { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Join Table with Payload Property (SQL)\nDESCRIPTION: Creates a PostTag table with PostId, TagId, and CreatedOn columns. PostId and TagId are primary keys and foreign keys referencing the Posts and Tags tables, respectively. A default value (CURRENT_TIMESTAMP) is set for the CreatedOn column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_31\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"PostTag\" (\n    \"PostId\" INTEGER NOT NULL,\n    \"TagId\" INTEGER NOT NULL,\n    \"CreatedOn\" TEXT NOT NULL DEFAULT (CURRENT_TIMESTAMP),\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostId\", \"TagId\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostId\" FOREIGN KEY (\"PostId\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagId\" FOREIGN KEY (\"TagId\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many From Dependent with No Navigation to Dependents\nDESCRIPTION: This C# code configures a one-to-many relationship using `OnModelCreating` in Entity Framework Core, starting from the dependent `Post` entity. It specifies that `Post` has one `Blog`, using `WithMany()` without arguments to indicate no navigation property exists on `Blog`. Requires an instance of `ModelBuilder`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Post>()\n                    .HasOne(e => e.Blog)\n                    .WithMany()\n                    .HasForeignKey(e => e.BlogId)\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: Deleting Blogs with ExecuteDeleteAsync - C#\nDESCRIPTION: This snippet demonstrates deleting blogs using the ExecuteDeleteAsync method. It uses LINQ to filter blogs with a rating less than 3 and then deletes them directly from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nawait context.Blogs.Where(b => b.Rating < 3).ExecuteDeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Conversion for a Collection of Primitives in C#\nDESCRIPTION: This code configures the value conversion for the `Tags` property of the `Post` entity. It uses `System.Text.Json` to serialize and deserialize the collection of strings. Additionally, it employs a `ValueComparer` for proper change tracking since `ICollection<string>` is a mutable reference type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .Property(e => e.Tags)\n    .HasConversion(\n        v => JsonSerializer.Serialize(v, null),\n        v => JsonSerializer.Deserialize<List<string>>(v, null),\n        new ValueComparer<ICollection<string>>(\n            (c1, c2) => c1.SequenceEqual(c2),\n            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),\n            c => (ICollection<string>)c.ToList()));\n```\n\n----------------------------------------\n\nTITLE: Configuring UseHierarchyId with UseSqlServer\nDESCRIPTION: This code snippet demonstrates how to enable the HierarchyId feature in EF Core when configuring the SqlServer database provider. The `UseHierarchyId()` extension method is called as part of the `UseSqlServer` configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UseSqlServer(\n    connectionString,\n    x => x.UseHierarchyId());\n```\n\n----------------------------------------\n\nTITLE: Configure DateTimeKind Preservation in EF Core (Version 1)\nDESCRIPTION: Configures a value converter in EF Core to preserve the DateTime.Kind flag when storing DateTime values in the database by converting to a long (ticks).  This allows DateTime values with different Kind flags to be stored and retrieved.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .Property(e => e.PostedOn)\n    .HasConversion<long>();\n```\n\n----------------------------------------\n\nTITLE: Product and Category Entities C#\nDESCRIPTION: Defines `Product` and `Category` entity classes, utilizing the `ProductId` and `CategoryId` types. This ensures that category IDs cannot be accidentally assigned to products, and vice versa, enhancing type safety in the domain model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_173\n\nLANGUAGE: C#\nCODE:\n```\npublic class Product\n{\n    public Product(string name) => Name = name;\n    public ProductId Id { get; set; }\n    public string Name { get; set; }\n    public CategoryId CategoryId { get; set; }\n    public Category Category { get; set; } = null!;\n}\n\npublic class Category\n{\n    public Category(string name) => Name = name;\n    public CategoryId Id { get; set; }\n    public string Name { get; set; }\n    public List<Product> Products { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Composing with LINQ and FromSql - C#\nDESCRIPTION: This example demonstrates how to compose LINQ operators on top of a SQL query initiated by `FromSql`. EF Core treats the SQL as a subquery and applies the additional filtering and sorting in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar searchTerm = \"Lorem ipsum\";\n\nvar blogs = await context.Blogs\n    .FromSql($\"SELECT * FROM dbo.SearchBlogs({searchTerm})\")\n    .Where(b => b.Rating > 3)\n    .OrderByDescending(b => b.Rating)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SaveChanges Batching in EF Core\nDESCRIPTION: This C# code snippet demonstrates how EF Core batches multiple database updates (inserts and updates) into a single roundtrip when SaveChanges is called, improving performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-updating.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Performance/Other/Program.cs#SaveChangesBatching)]\n```\n\n----------------------------------------\n\nTITLE: Update Old Posts C#\nDESCRIPTION: This C# code updates the Title and Content of all posts published before 2022 using ExecuteUpdateAsync. It appends the publication year to the title and a message to the content. Requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Posts\n    .Where(p => p.PublishedOn.Year < 2022)\n    .ExecuteUpdateAsync(s => s\n        .SetProperty(b => b.Title, b => b.Title + \" (\" + b.PublishedOn.Year + \")\")\n        .SetProperty(b => b.Content, b => b.Content + \" ( This content was published in \" + b.PublishedOn.Year + \")\"));\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Single Include - C#\nDESCRIPTION: This code snippet demonstrates how to use the `Include` method to eagerly load related data. In this example, blogs are returned with their `Posts` property populated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Inserting or Updating with Find\nDESCRIPTION: This snippet demonstrates inserting or updating an entity when keys are not auto-generated. It uses `Find` to check if the entity exists. If it doesn't, it's added; otherwise, existing values are updated using `SetValues`. Requires a DbContext and an entity with a non-auto-generated key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static void InsertOrUpdateSingleEntityWithFind(BloggingContext context, Blog blog)\n{\n    var existingBlog = context.Blogs.Find(blog.BlogId);\n    if (existingBlog == null)\n    {\n        context.Add(blog);\n    }\n    else\n    {\n        context.Entry(existingBlog).CurrentValues.SetValues(blog);\n    }\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Required One-to-One Dependents in EF Core 5.0 (C#)\nDESCRIPTION: Demonstrates how to configure a navigation property to an owned entity as a required dependent in EF Core 5.0. This ensures that the owned entity is not optional and that its properties are treated as required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Person>(b =>\n    {\n        b.OwnsOne(e => e.HomeAddress,\n            b =>\n            {\n                b.Property(e => e.City).IsRequired();\n                b.Property(e => e.Postcode).IsRequired();\n            });\n        b.Navigation(e => e.HomeAddress).IsRequired();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Generation on Add with Fluent API in EF Core\nDESCRIPTION: This C# code snippet demonstrates how to configure a property to have its value generated on add using the Fluent API in EF Core. The ValueGeneratedOnAdd method specifies that the database provider should generate a value for the property when a new entity is added.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(b => b.Guid)\n    .ValueGeneratedOnAdd();\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Filtered Include - C#\nDESCRIPTION: This code snippet demonstrates how to apply filtering and sorting operations to included collection navigations using `Where`, `OrderBy`, etc.  It loads Blogs and their Posts, filtered to only include posts with a rating greater than 5.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts.Where(p => p.Rating > 5))\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Projecting Shipping Address C#\nDESCRIPTION: This code shows how to project a complex type, specifically the `ShippingAddress` from an `Order`. This extracts just the properties of the complex type from the query result. Requires `Microsoft.EntityFrameworkCore` package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nvar shippingAddress = await context.Orders\n    .Where(e => e.Id == orderId)\n    .Select(e => e.ShippingAddress)\n    .SingleAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Data with LINQ and EF Core in C#\nDESCRIPTION: This C# code snippet demonstrates how to query data using LINQ (Language Integrated Query) with Entity Framework Core. It shows how to retrieve blogs from the database that have a URL containing the string \"dotnet\".  It assumes a `BloggingContext` class exists, representing the database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Linq;\nusing Intro.Model;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Intro\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            using (var db = new BloggingContext())\n            {\n                // Create\n                Console.WriteLine(\"Inserting a new blog\");\n                db.Add(new Blog { Url = \"http://blogs.msdn.com/adonet\" });\n                db.SaveChanges();\n\n                // Read\n                Console.WriteLine(\"Querying for a blog\");\n                var blog = db.Blogs\n                    .OrderBy(b => b.BlogId)\n                    .First();\n\n                // Update\n                Console.WriteLine(\"Updating the blog and adding a post\");\n                blog.Url = \"https://devblogs.microsoft.com/dotnet\";\n                blog.Posts.Add(new Post { Title = \"Hello World\", Content = \"I wrote an app using EF Core!\" });\n                db.SaveChanges();\n\n                // Delete\n                Console.WriteLine(\"Delete the blog\");\n                db.Remove(blog);\n                db.SaveChanges();\n            }\n        }\n    }\n\n    public class BloggingContext : DbContext\n    {\n        public DbSet<Blog> Blogs { get; set; }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder options)\n            => options.UseSqlite(\"Data Source=blogging.db\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install SQL Server Provider with PowerShell\nDESCRIPTION: This command installs the Microsoft.EntityFrameworkCore.SqlServer NuGet package using the NuGet Package Manager Console in Visual Studio. This package is essential for utilizing Entity Framework Core with Microsoft SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/index.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext with Directory Options - PowerShell\nDESCRIPTION: This command scaffolds a DbContext and entity types using the Entity Framework Core PowerShell commands. It uses the `-ContextDir` option to specify a directory for the DbContext class and the `-OutputDir` option for the entity type classes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext ... -ContextDir Data -OutputDir Models\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many with Navigations C#\nDESCRIPTION: Configures the many-to-many relationship with navigations to the join entity.  Uses the UsingEntity method to define the join entity as PostTag.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>();\n}\n```\n\n----------------------------------------\n\nTITLE: Count != 0 Optimization (C#)\nDESCRIPTION: This C# code demonstrates how EF Core 9 optimizes queries using `Count > 0` by translating them to use `EXISTS`, which is more efficient.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nvar blogsWithPost = await context.Blogs\n    .Where(b => b.Posts.Count > 0)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Table in EF Core (Simple)\nDESCRIPTION: This code snippet demonstrates how to configure an entity to be a temporal table with default settings using the model builder in EF Core. It uses the IsTemporal() method to mark the table as temporal.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Employee>()\n    .ToTable(\"Employees\", b => b.IsTemporal());\n```\n\n----------------------------------------\n\nTITLE: Updating Blogs with ExecuteUpdateAsync - C#\nDESCRIPTION: This snippet updates the IsVisible property of blogs with a rating less than 3 to false using ExecuteUpdateAsync. It uses LINQ to filter the blogs and SetProperty to specify the property to update and its new value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nawait context.Blogs\n    .Where(b => b.Rating < 3)\n    .ExecuteUpdateAsync(setters => setters.SetProperty(b => b.IsVisible, false));\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query with FromSql - C#\nDESCRIPTION: This code snippet demonstrates a basic SQL query using `FromSql` to retrieve all blogs from the `dbo.Blogs` table. It uses `ToListAsync` to execute the query asynchronously and return a list of `Blog` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = await context.Blogs\n    .FromSql($\"SELECT * FROM dbo.Blogs\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating Audit Messages with DbContext in C#\nDESCRIPTION: This code snippet shows how to create audit messages by inspecting the changes in the DbContext using ChangeTracker. It iterates through each entry in the ChangeTracker, identifies the entity state (Added, Modified, Deleted), and creates a corresponding audit message using Aggregate to build the message string.  It returns a SaveChangesAudit object with the audit messages. The AuditId is a new Guid and the StartTime is DateTime.UtcNow.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static SaveChangesAudit CreateAudit(DbContext context)\n{\n    context.ChangeTracker.DetectChanges();\n\n    var audit = new SaveChangesAudit\n    {\n        AuditId = Guid.NewGuid(),\n        StartTime = DateTime.UtcNow\n    };\n\n    foreach (var entry in context.ChangeTracker.Entries())\n    {\n        var auditMessage = entry.State switch\n        {\n            EntityState.Deleted => CreateDeletedMessage(entry),\n            EntityState.Modified => CreateModifiedMessage(entry),\n            EntityState.Added => CreateAddedMessage(entry),\n            _ => null\n        };\n\n        if (auditMessage != null)\n        {\n            audit.Entities.Add(new EntityAudit { State = entry.State, AuditMessage = auditMessage });\n        }\n    }\n\n    return audit;\n\n    string CreateAddedMessage(EntityEntry entry)\n        => entry.Properties.Aggregate(\n            $\"Inserting {entry.Metadata.DisplayName()} with \",\n            (auditString, property) => auditString + $\"{property.Metadata.Name}: '{property.CurrentValue}' \");\n\n    string CreateModifiedMessage(EntityEntry entry)\n        => entry.Properties.Where(property => property.IsModified || property.Metadata.IsPrimaryKey()).Aggregate(\n            $\"Updating {entry.Metadata.DisplayName()} with \",\n            (auditString, property) => auditString + $\"{property.Metadata.Name}: '{property.CurrentValue}' \");\n\n    string CreateDeletedMessage(EntityEntry entry)\n        => entry.Properties.Where(property => property.Metadata.IsPrimaryKey()).Aggregate(\n            $\"Deleting {entry.Metadata.DisplayName()} with \",\n            (auditString, property) => auditString + $\"{property.Metadata.Name}: '{property.CurrentValue}' \");\n}\n```\n\n----------------------------------------\n\nTITLE: Model Managed Data: Seeding Many-to-Many Relationship in EF Core (C#)\nDESCRIPTION: Illustrates how to configure data for many-to-many navigations by explicitly configuring the join entity, 'LanguageCountry.' It handles scenarios where the entity type has properties in shadow state by using an anonymous class to provide the required values. This enables proper seeding of data in many-to-many relationships managed by EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/data-seeding.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity(\"LanguageCountry\").HasData(\n    new { LanguageId = 1, CountryId = 1 },\n    new { LanguageId = 2, CountryId = 2 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Cascade Delete (C#)\nDESCRIPTION: This C# snippet demonstrates how to configure a relationship for cascade delete only on the client-side (EF Core) and not in the database. This is achieved using `OnDelete(DeleteBehavior.ClientCascade)` in the `OnModelCreating` method. This avoids database errors due to cascade cycles while maintaining the cascade behavior within the application's domain logic.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder\n                .Entity<Blog>()\n                .HasOne(e => e.Owner)\n                .WithOne(e => e.OwnedBlog)\n                .OnDelete(DeleteBehavior.ClientCascade);\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many Relationship in OnModelCreating in C#\nDESCRIPTION: This C# code configures a many-to-many relationship between `Post` and `Tag` entities using the `PostTag` join entity within the `OnModelCreating` method of the EF Core context. It specifies the relationship using `HasMany`, `WithMany`, and `UsingEntity` to define the join entity and its relationships to the `Post` and `Tag` entities. It ensures that both skip navigations and explicit navigations use the same underlying many-to-many relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(p => p.Tags)\n        .WithMany(p => p.Posts)\n        .UsingEntity<PostTag>(\n            j => j.HasOne(t => t.Tag).WithMany(p => p.PostTags),\n            j => j.HasOne(t => t.Post).WithMany(p => p.PostTags));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Length with Data Annotations - C#\nDESCRIPTION: This code snippet shows how to configure the maximum length of a string property using the `[MaxLength]` data annotation in Entity Framework Core. This is used to define the column type and size in the database. The dependency is System.ComponentModel.DataAnnotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    [MaxLength(500)]\n    public string Title { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: EF Core Converter Instance with Facets (C#)\nDESCRIPTION: This example shows how to explicitly create a value converter and configure column facets.  It converts an `EquineBeast` enum to a string, setting the max length and Unicode flag on the resulting database column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar converter = new ValueConverter<EquineBeast, string>(\n    v => v.ToString(),\n    v => (EquineBeast)Enum.Parse(typeof(EquineBeast), v));\n\nmodelBuilder\n    .Entity<Rider>()\n    .Property(e => e.Mount)\n    .HasConversion(converter)\n    .HasMaxLength(20)\n    .IsUnicode(false);\n```\n\n----------------------------------------\n\nTITLE: Monitoring EF Core counters with dotnet-counters\nDESCRIPTION: This command attaches dotnet-counters to a running .NET process and displays EF Core event counters in real-time. Replace <PID> with the actual process ID of your application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/metrics.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndotnet counters monitor Microsoft.EntityFrameworkCore -p <PID>\n```\n\n----------------------------------------\n\nTITLE: Filtered Include C#\nDESCRIPTION: Demonstrates the usage of filtered include to eagerly load related entities with specific conditions. This avoids additional roundtrips to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar goodBlogs = context.Blogs\n    .Include(b => b.Posts.Where(p => p.Rating > 3))\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Example of the Query Executed in Azure Cosmos DB\nDESCRIPTION: This is an example of the query that gets executed when partition keys are extracted from the LINQ query. The TenantId and UserId comparisons have been lifted out to target a specific partition and the SessionId and Username comparisons are applied as filters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nExecuted ReadNext (166.6985 ms, 2.8 RU) ActivityId='312da0d2-095c-4e73-afab-27072b5ad33c', Container='test', Partition='[\"Microsoft\",\"99a410d7-e467-4CC5-92DE-148F3FC53F4C\"]', Parameters=[]\nSELECT VALUE c\nFROM root c\nWHERE ((c[\"SessionId\"] > 0) AND CONTAINS(c[\"Username\"], \"a\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Key using Fluent API - EF6 - C#\nDESCRIPTION: This snippet configures the `InstructorID` property as the primary key for the `OfficeAssignment` entity using the `HasKey` method.  This overrides the default conventions and explicitly defines which property should be used as the primary key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<OfficeAssignment>().HasKey(t => t.InstructorID);\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Definition\nDESCRIPTION: This SQL code defines a table schema with a VARCHAR column.  The column length and data type reflect the configurations done through the EF Core model builder.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Rider] (\n    [Id] int NOT NULL IDENTITY,\n    [Mount] varchar(20) NOT NULL,\n    CONSTRAINT [PK_Rider] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Inserting New Entities with Explicit Keys in EF Core\nDESCRIPTION: This code snippet demonstrates how to insert a new blog entity with explicitly set key values into the database using Entity Framework Core. The `Add` method is used to start tracking the new entity, and `SaveChanges` persists the changes to the database. The `Id` property is explicitly set before adding the entity to the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Add(\n    new Blog\n    {\n        Id = 1,\n        Name = \".NET Blog\",\n    });\n```\n\n----------------------------------------\n\nTITLE: Table Splitting Usage C#\nDESCRIPTION: Demonstrates how to save and query entities involved in table splitting using `TableSplittingContext`.  It creates and adds both `Order` and `DetailedOrder` instances to the context and then saves changes to the database, followed by a query that retrieves them.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new TableSplittingContext())\n{\n    context.Database.EnsureDeleted();\n    context.Database.EnsureCreated();\n\n    var order = new Order { Id = 1, Status = \"Pending\" };\n    var detailedOrder = new DetailedOrder { Id = 1, Status = \"Pending\", Details = \"Some details\" };\n\n    context.Orders.Add(order);\n    context.DetailedOrders.Add(detailedOrder);\n    context.SaveChanges();\n\n    var orderFromDb = context.Orders.Find(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Get Page of Customers with Dynamic Sorting C#\nDESCRIPTION: This method retrieves a page of customers from the database, allowing dynamic sorting based on a specified property. It uses EF.Property to specify the sort property and applies Skip and Take for pagination. It's important to note that sorting by non-indexed columns may result in slow query performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nTask<List<Customer>> GetPageOfCustomers(string sortProperty, int page)\n        {\n            using var context = new CustomerContext();\n\n            return context.Customers\n                .OrderBy(e => EF.Property<object>(e, sortProperty))\n                .Skip(page * 20).Take(20).ToListAsync();\n        }\n```\n\n----------------------------------------\n\nTITLE: Initializing DbContext and Handling Form Events in C#\nDESCRIPTION: This code snippet shows how to initialize a DbContext for Entity Framework Core in a Windows Forms application. It includes overriding the OnLoad and OnClosing methods to create the database if it doesn't exist, load categories, and dispose of the DbContext when the form closes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/winforms.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing System.ComponentModel;\n\nnamespace GetStartedWinForms\n{\n    public partial class MainForm : Form\n    {\n        private ProductsContext? dbContext;\n\n        public MainForm()\n        {\n            InitializeComponent();\n        }\n\n        protected override void OnLoad(EventArgs e)\n        {\n            base.OnLoad(e);\n\n            this.dbContext = new ProductsContext();\n\n            // Uncomment the line below to start fresh with a new database.\n            // this.dbContext.Database.EnsureDeleted();\n            this.dbContext.Database.EnsureCreated();\n\n            this.dbContext.Categories.Load();\n\n            this.categoryBindingSource.DataSource = dbContext.Categories.Local.ToBindingList();\n        }\n\n        protected override void OnClosing(CancelEventArgs e)\n        {\n            base.OnClosing(e);\n\n            this.dbContext?.Dispose();\n            this.dbContext = null;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating with Navigation Properties using Select and ExecuteUpdateAsync - C#\nDESCRIPTION: This snippet shows how to update the rating of blogs based on the average rating of their posts using Select to project the average rating and then ExecuteUpdateAsync to apply the update.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\nawait context.Blogs\n    .Select(b => new { Blog = b, NewRating = b.Posts.Average(p => p.Rating) })\n    .ExecuteUpdateAsync(setters => setters.SetProperty(b => b.Blog.Rating, b => b.NewRating));\n```\n\n----------------------------------------\n\nTITLE: Disabling Change Tracking with AsNoTracking - C#\nDESCRIPTION: This example demonstrates how to disable change tracking for a SQL query using `AsNoTracking`. This can improve performance if the results are only used for read-only purposes and don't need to be tracked by the EF Core change tracker.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar searchTerm = \"Lorem ipsum\";\n\nvar blogs = await context.Blogs\n    .FromSql($\"SELECT * FROM dbo.SearchBlogs({searchTerm})\")\n    .AsNoTracking()\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining Animal, Cat, and Dog Classes - C#\nDESCRIPTION: Defines the Animal, Cat, and Dog classes used in the inheritance mapping examples. Animal is the base class with Id and Breed properties. Cat and Dog inherit from Animal, adding EducationalLevel and FavoriteToy properties respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class Animal\n{\n    public int Id { get; set; }\n    public string Breed { get; set; } = null!;\n}\n\npublic class Cat : Animal\n{\n    public string? EducationalLevel { get; set; }\n}\n\npublic class Dog : Animal\n{\n    public string? FavoriteToy { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Required Attribute on Dependent Navigation with Shadow FK in EF Core\nDESCRIPTION: This snippet demonstrates the effect of using `[Required]` on the dependent navigation property (`Blog`) when the foreign key property (`BlogId`) is in shadow state (not explicitly defined in the `Post` class). This will make the shadow property non-nullable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/mapping-attributes.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public string Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    [Required]\n    public Blog Blog { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many with Shared Join Entity Type\nDESCRIPTION: Configures the many-to-many relationships between `Post` and `Tag`, and `Blog` and `Author` using the shared-type entity `JoinType`. It specifies the table names and foreign key constraints for each relationship. The code also sets a default value for the `CreatedOn` property in the join tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<JoinType>(\n            \"PostTag\",\n            r => r.HasOne<Tag>().WithMany(e => e.PostTags).HasForeignKey(e => e.Id1),\n            l => l.HasOne<Post>().WithMany(e => e.PostTags).HasForeignKey(e => e.Id2),\n            j => j.Property(e => e.CreatedOn).HasDefaultValueSql(\"CURRENT_TIMESTAMP\"));\n\n    modelBuilder.Entity<Blog>()\n        .HasMany(e => e.Authors)\n        .WithMany(e => e.Blogs)\n        .UsingEntity<JoinType>(\n            \"BlogAuthor\",\n            r => r.HasOne<Author>().WithMany(e => e.BlogAuthors).HasForeignKey(e => e.Id1),\n            l => l.HasOne<Blog>().WithMany(e => e.BlogAuthors).HasForeignKey(e => e.Id2),\n            j => j.Property(e => e.CreatedOn).HasDefaultValueSql(\"CURRENT_TIMESTAMP\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Navigation with Add Method - C#\nDESCRIPTION: This C# code shows a pattern for a collection navigation with an exposed IEnumerable<Post> property and a method for adding posts.  The backing field allows EF to track changes. This approach allows controlled modification of the collection while providing a read-only view.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    private readonly List<Post> _posts = new();\n\n    public int Id { get; set; }\n\n    public IEnumerable<Post> Posts => _posts;\n\n    public void AddPost(Post post) => _posts.Add(post);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many with Join Class C#\nDESCRIPTION: Configures a many-to-many relationship between Post and Tag using the PostTag class as the join entity in EF Core's OnModelCreating method. The UsingEntity method is used to specify the join entity type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>();\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Existing Entities with Explicit Keys - C#\nDESCRIPTION: This snippet demonstrates how to attach an existing `Blog` entity to the EF Core `DbContext` using explicit key values. The `Attach` method is used to start tracking the entity in the `Unchanged` state. This method is useful for re-attaching entities that were previously detached, such as those received from a web client. Calling `SaveChanges` at this point will have no effect since the entity is marked as `Unchanged`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Attach(\n    new Blog\n    {\n        Id = 1,\n        Name = \".NET Blog\",\n    });\n```\n\n----------------------------------------\n\nTITLE: Multiple Operations with SaveChanges - EF Core\nDESCRIPTION: Demonstrates how to combine multiple Add, Update, and Remove operations into a single SaveChanges call. SaveChanges is transactional for most database providers, ensuring that all operations either succeed or fail together. Requires a DbContext and multiple entity operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/basic.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nConsole.WriteLine(\"Adding two blogs\");\ncontext.AddRange(\n    new Blog { Url = \"http://blogs.msdn.com/adonet\" },\n    new Blog { Url = \"http://blogs.msdn.com/visualstudio\" });\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Keyset Pagination with Multiple Keys in EF Core\nDESCRIPTION: This code snippet demonstrates keyset pagination using multiple keys (Date and ID in this case) to ensure accurate and consistent pagination results.  This is important when a single key may not be unique. Adding multiple ordering keys ensures the next page picks off exactly where the previous one ended. Additional clauses can be added as more ordering keys are added.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/pagination.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar lastDate = DateTime.Now.AddDays(-1);\nvar lastId = 55;\nvar pageSize = 10;\n\nvar posts = await context.Posts\n    .OrderBy(p => p.Date)\n    .ThenBy(p => p.Id)\n    .Where(p => p.Date > lastDate || (p.Date == lastDate && p.Id > lastId))\n    .Take(pageSize)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Adding Raw SQL for Stored Procedure in EF Core Migration (C#)\nDESCRIPTION: This C# code snippet demonstrates how to add raw SQL to create a stored procedure in an EF Core migration.  The `migrationBuilder.Sql` method is used to execute the `CREATE PROCEDURE` statement. This example specifically targets SQL Server.  The SQL is wrapped in `EXEC` as recommended by the documentation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nmigrationBuilder.Sql(\n@\"\n    EXEC ('CREATE PROCEDURE getFullName\n        @LastName nvarchar(50),\n        @FirstName nvarchar(50)\n    AS\n        RETURN @LastName + @FirstName;')\");\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Property Value (Non-Generic) - C#\nDESCRIPTION: This code snippet demonstrates how to get and set the current value of a property using the non-generic `Property` method when the entity type is unknown.  It retrieves a blog entity and then sets its 'Name' property to a new value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nobject blog = context.Blogs.Single(e => e.Id == 1);\n\nobject currentValue = context.Entry(blog).Property(\"Name\").CurrentValue;\ncontext.Entry(blog).Property(\"Name\").CurrentValue = \"1unicorn2\";\n```\n\n----------------------------------------\n\nTITLE: Eager Initialization of Collection Navigation - C#\nDESCRIPTION: This C# snippet demonstrates eagerly initializing a collection navigation property 'Posts'. This ensures that the collection is always available, avoiding null reference exceptions when accessing it. The collection is instantiated when the Blog object is created.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure DbContext with connection string in Program.cs\nDESCRIPTION: Configures the DbContext in `Program.cs` by reading the connection string from the configuration using `GetConnectionString`.  The 'BloggingContext' name is used to look up the connection string.  It requires the `Microsoft.Extensions.Configuration` namespace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-strings.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar conString = builder.Configuration.GetConnectionString(\"BloggingContext\") ??\n     throw new InvalidOperationException(\"Connection string 'BloggingContext'\" +\n    \" not found.\");\nbuilder.Services.AddDbContext<BloggingContext>(options =>\n    options.UseSqlServer(conString));\n```\n\n----------------------------------------\n\nTITLE: Querying for Entity to Determine New Status\nDESCRIPTION: This snippet demonstrates how to query for an existing entity in the database using the `Find` method of a `DbSet`.  If `Find` returns null, then the entity doesn't exist and is considered new. It assumes a `Blog` entity with a primary key property `BlogId`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool IsItNewQuery(BloggingContext context, int id)\n{\n    return context.Blogs.Find(id) == null;\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding a table from migrations using Fluent API\nDESCRIPTION: This C# code snippet demonstrates how to exclude an entity type (table) from EF Core migrations using Fluent API.  The `ExcludeFromMigrations` method prevents the table from being created or updated by migrations for the specified DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[](../../../../samples/core/Modeling/EntityTypes/FluentAPI/TableExcludeFromMigrations.cs#TableExcludeFromMigrations)]\n```\n\n----------------------------------------\n\nTITLE: Disable Lazy-Loading for Specific Navigation (EF Core)\nDESCRIPTION: This code shows how to configure a specific navigation property (`Post.Author`) to prevent lazy-loading using the `EnableLazyLoading(false)` method in the model builder.  This allows you to selectively disable lazy loading on certain navigations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Post>()\n    .Navigation(p => p.Author)\n    .EnableLazyLoading(false);\n```\n\n----------------------------------------\n\nTITLE: Configure Fixed Length Strings in EF Core\nDESCRIPTION: This code snippet demonstrates how to configure value converters and comparers to handle fixed-length strings in EF Core. It defines a value converter to trim padding when reading key values and a value comparer for case-insensitive ASCII key comparison. It's used to configure the Id properties of Blog and Post entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                var converter = new ValueConverter<string, string>(\n                    v => v,\n                    v => v.Trim());\n                \n                var comparer = new ValueComparer<string>(\n                    (l, r) => string.Equals(l, r, StringComparison.OrdinalIgnoreCase),\n                    v => v.ToUpper().GetHashCode(),\n                    v => v);\n\n                modelBuilder.Entity<Blog>()\n                    .Property(e => e.Id)\n                    .HasColumnType(\"char(20)\")\n                    .HasConversion(converter, comparer);\n\n                modelBuilder.Entity<Post>(\n                    b =>\n                        {\n                            b.Property(e => e.Id).HasColumnType(\"char(20)\").HasConversion(converter, comparer);\n                            b.Property(e => e.BlogId).HasColumnType(\"char(20)\").HasConversion(converter, comparer);\n                        });\n            }\n```\n\n----------------------------------------\n\nTITLE: Enable Lazy Loading - EF6 - C#\nDESCRIPTION: This code defines a Blog entity with a virtual Posts property to enable lazy loading in Entity Framework 6. The Posts collection will be automatically loaded when the property is accessed.  Requires Entity Framework and POCO entity types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/related-data.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n    public string Url { get; set; }\n    public string Tags { get; set; }\n\n    public virtual ICollection<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Queries with Parameterization in EF Core\nDESCRIPTION: This code shows how to parameterize a LINQ query to improve caching. By using a parameter instead of a constant, EF Core can compile the query only once and reuse the same query plan, even when the parameter value changes. This leads to better performance and reduces the load on the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BloggingContext();\n\nvar postTitle = \"post1\";\nvar post1 = context.Posts.FirstOrDefault(b => b.Name == postTitle);\n\npostTitle = \"post2\";\nvar post2 = context.Posts.FirstOrDefault(b => b.Name == postTitle);\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Named Foreign Key Columns Alternate Config C#\nDESCRIPTION: Illustrates an alternate approach to naming foreign key columns in the join table by mapping existing properties to different column names using `HasColumnName`. This achieves the same result as the previous example but with a different configuration style.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity(\n        j =>\n        {\n            j.Property(\"PostsId\").HasColumnName(\"PostForeignKey\");\n            j.Property(\"TagsId\").HasColumnName(\"TagForeignKey\");\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: SQL for ExecuteUpdate with Complex Type Properties\nDESCRIPTION: This SQL code demonstrates how ExecuteUpdate updates each column mapped to the complex type.  It sets the individual columns for City, Country, Line1, Line2, and PostCode to the corresponding values from the provided address. This highlights how EF9 simplifies updating complex type properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [s]\nSET [s].[StoreAddress_City] = @__complex_type_newAddress_0_City,\n    [s].[StoreAddress_Country] = @__complex_type_newAddress_0_Country,\n    [s].[StoreAddress_Line1] = @__complex_type_newAddress_0_Line1,\n    [s].[StoreAddress_Line2] = NULL,\n    [s].[StoreAddress_PostCode] = @__complex_type_newAddress_0_PostCode\nFROM [Stores] AS [s]\nWHERE [s].[Region] = N'Germany'\n```\n\n----------------------------------------\n\nTITLE: Defining Customer and Order Entities in C#\nDESCRIPTION: This code defines `Customer` and `Order` entities that use the `Address` complex type. A `Customer` has a required `Name` and `Address`, and a collection of `Orders`. An `Order` has `Contents` and both `ShippingAddress` and `BillingAddress` of type `Address`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public required string Name { get; set; }\n    public required Address Address { get; set; }\n    public List<Order> Orders { get; } = new();\n}\n\npublic class Order\n{\n    public int Id { get; set; }\n    public required string Contents { get; set; }\n    public required Address ShippingAddress { get; set; }\n    public required Address BillingAddress { get; set; }\n    public Customer Customer { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Case-Insensitive String Comparison in EF Core\nDESCRIPTION: Configures a value comparer in EF Core to enforce case-insensitive string comparisons for the Blog.Id, Post.Id, and Post.BlogId properties. This ensures that foreign key relationships work correctly even when the casing of string keys differs in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    var comparer = new ValueComparer<string>(\n        (l, r) => string.Equals(l, r, StringComparison.OrdinalIgnoreCase),\n        v => v.ToUpper().GetHashCode(),\n        v => v);\n\n    modelBuilder.Entity<Blog>()\n        .Property(e => e.Id)\n        .Metadata.SetValueComparer(comparer);\n\n    modelBuilder.Entity<Post>(\n        b =>\n            {\n                b.Property(e => e.Id).Metadata.SetValueComparer(comparer);\n                b.Property(e => e.BlogId).Metadata.SetValueComparer(comparer);\n            });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Precision and Scale with Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to configure the precision and scale of a decimal property using the Fluent API in Entity Framework Core. The `HasPrecision` method on the `PropertyBuilder` is used to define the precision and scale. It requires the `DbContext` and `OnModelCreating` override to configure the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Product>()\n        .Property(p => p.Price)\n        .HasPrecision(14, 2);\n\n    modelBuilder.Entity<Product>()\n        .Property(p => p.LastUpdated)\n        .HasPrecision(3);\n}\n```\n\n----------------------------------------\n\nTITLE: Update Tags on Old Posts C#\nDESCRIPTION: This code snippet updates the Text property of all tags associated with old posts (published before 2022) using ExecuteUpdateAsync. It appends \" (old)\" to the existing text. Requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Tags\n    .Where(t => t.Posts.All(e => e.PublishedOn.Year < 2022))\n    .ExecuteUpdateAsync(s => s.SetProperty(t => t.Text, t => t.Text + \" (old)\"));\n```\n\n----------------------------------------\n\nTITLE: stringValue.FirstOrDefault .NET to SQL translation\nDESCRIPTION: Illustrates how stringValue.FirstOrDefault() in .NET maps to LEFT(@stringValue, 1) in SQL when working with Entity Framework Core and Cosmos DB. It effectively retrieves the first character of a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_26\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.FirstOrDefault()\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[LEFT(@stringValue, 1)](/azure/cosmos-db/nosql/query/left)\n```\n\n----------------------------------------\n\nTITLE: Update Data with Concurrency Check - C#\nDESCRIPTION: Demonstrates updating a Person's FirstName and saving changes. EF Core includes the Version property in the WHERE clause of the UPDATE statement to ensure that the row hasn't been modified concurrently.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar person = await context.People.SingleAsync(b => b.FirstName == \"John\");\nperson.FirstName = \"Paul\";\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Registering a Stateless Interceptor (C#)\nDESCRIPTION: Demonstrates registering a stateless interceptor in EF Core.  A single, static instance of the interceptor is created and then registered with the DbContext. This is useful when the interceptor does not maintain any state between calls.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate static readonly TaggedQueryCommandInterceptor _interceptor\n    = new TaggedQueryCommandInterceptor();\n\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.AddInterceptors(_interceptor);\n```\n\n----------------------------------------\n\nTITLE: Register LoggerFactory with DbContextOptionsBuilder\nDESCRIPTION: This code snippet shows how to register the LoggerFactory with the DbContextOptionsBuilder. It overrides the OnConfiguring method of the DbContext to use the LoggerFactory and configure a SQL Server connection string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/extensions-logging.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseLoggerFactory(MyLoggerFactory)\n        .UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=EFLogging;ConnectRetryCount=0\");\n```\n\n----------------------------------------\n\nTITLE: Define Join Entity Class C#\nDESCRIPTION: Defines the Post, Tag, and PostTag classes to represent a many-to-many relationship between Posts and Tags using a join entity. The PostTag class contains properties for PostId and TagId, representing the foreign keys to the Post and Tag tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostId { get; set; }\n    public int TagId { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Offset Pagination with EF Core\nDESCRIPTION: This code snippet demonstrates offset-based pagination using the `Skip` and `Take` LINQ operators in EF Core. It retrieves a specific page of results from a database table. It's important to note the potential performance issues and data inconsistencies with this approach, especially with large datasets or concurrent updates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/pagination.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar page = 3;\nvar pageSize = 10;\n\nvar posts = await context.Posts\n    .OrderBy(p => p.PostId)\n    .Skip((page - 1) * pageSize)\n    .Take(pageSize)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: In-Memory Provider Setup C#\nDESCRIPTION: This code snippet demonstrates a typical test class constructor that sets up and seeds a new in-memory database before each test using the in-memory provider. It initializes a `DbContext` with the in-memory provider and adds seed data to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-without-the-database.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// This code snippet is intentionally left blank. It is referencing external code.\n// Please view the source code to understand how the constructor is implemented.\n```\n\n----------------------------------------\n\nTITLE: Setting Column Data Types with Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to specify the exact data type for a column using the Fluent API in Entity Framework Core. The `HasColumnType` method is called on the `PropertyBuilder` to specify the desired data type, for example, `varchar(200)` for the `Url` property. It requires the `DbContext` and `OnModelCreating` override to configure the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .Property(p => p.Url)\n        .HasColumnType(\"varchar(200)\");\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Change Detection in SaveChanges - C#\nDESCRIPTION: This C# code overrides the SaveChanges method to disable automatic change detection within a try/finally block. This improves performance by preventing redundant change detection when calling the base SaveChanges method, especially when dealing with a large number of entities. It uses ChangeTracker.AutoDetectChangesEnabled to control automatic detection. It's important to reset AutoDetectChangesEnabled in the finally block to ensure it is re-enabled even if SaveChanges fails.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic override int SaveChanges()\n{\n    foreach (var entityEntry in ChangeTracker.Entries<PostTag>()) // Detects changes automatically\n    {\n        if (entityEntry.State == EntityState.Added)\n        {\n            entityEntry.Entity.TaggedBy = \"ajcvickers\";\n            entityEntry.Entity.TaggedOn = DateTime.Now;\n        }\n    }\n\n    try\n    {\n        ChangeTracker.AutoDetectChangesEnabled = false;\n        return base.SaveChanges(); // Avoid automatically detecting changes again here\n    }\n    finally\n    {\n        ChangeTracker.AutoDetectChangesEnabled = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with EF Core and C#\nDESCRIPTION: This snippet demonstrates how to filter data from a database table using Entity Framework Core and LINQ. It queries the database context to retrieve entities that match specific criteria, such as a particular property value. The code uses the `Where()` method to filter the entities based on a condition.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/index.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Querying/Overview/Program.cs#Filtering)]\n```\n\n----------------------------------------\n\nTITLE: Setting default value for Status - C#\nDESCRIPTION: This configuration sets the default value for the `Status` property to \"Hidden\". If no value is explicitly provided, the database will use this default value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_118\n\nLANGUAGE: csharp\nCODE:\n```\nb.Property(e => e.Status).HasDefaultValue(\"Hidden\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many Join Entity C# (DbContext)\nDESCRIPTION: This code configures the join entity and navigations for many-to-many relationships in the `DbContext`. It uses the `OnModelCreatingPartial` method to configure the relationship between `Post`, `Tag`, and `PostTag` entities. This allows the explicit join entity to be used, similar to previous versions of EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class DailyContext\n{\n    partial void OnModelCreatingPartial(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Post>(entity =>\n        {\n            entity.HasMany(d => d.Tags)\n                .WithMany(p => p.Posts)\n                .UsingEntity<PostTag>(\n                    l => l.HasOne<Tag>(e => e.Tags).WithMany(e => e.PostTags).HasForeignKey(e => e.TagsId),\n                    r => r.HasOne<Post>(e => e.Posts).WithMany(e => e.PostTags).HasForeignKey(e => e.PostsId),\n                    j =>\n                    {\n                        j.HasKey(\"PostsId\", \"TagsId\");\n                        j.ToTable(\"PostTag\");\n                    });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Principal/Parent (Blog) in C#\nDESCRIPTION: This code snippet demonstrates deleting a `Blog` entity, which triggers cascade deletes of its associated `Post` entities because the relationship is configured as required by convention.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blog = context.Blogs.OrderBy(e => e.Name).Include(e => e.Posts).First();\n\ncontext.Remove(blog);\n            \ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by City C#\nDESCRIPTION: This code demonstrates how to use a member of a complex type (`ShippingAddress.City`) in a `WHERE` clause to filter the `Orders`. Requires `Microsoft.EntityFrameworkCore` package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nvar city = \"Walpole St Peter\";\nvar walpoleOrders = await context.Orders.Where(e => e.ShippingAddress.City == city).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Updating Blog URL using SaveChanges in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates updating the URL of a blog using Entity Framework Core's change tracking mechanism and the SaveChanges method. It queries a specific blog, modifies its URL property, and persists the changes to the database. The code utilizes the BloggingContext and assumes the existence of a Blog entity with a Url property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/index.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = await context.Blogs.SingleAsync(b => b.Url == \"http://example.com\");\n    blog.Url = \"http://example.com/blog\";\n    await context.SaveChangesAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Backing Field with Data Annotations - C#\nDESCRIPTION: This code snippet shows how to configure a backing field for a property using Data Annotations in Entity Framework Core. The `[BackingField]` attribute specifies that the `_validatedUrl` field is the backing field for the `Url` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/backing-field.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n\n    private string _validatedUrl;\n    [BackingField(nameof(_validatedUrl))]\n    public string Url\n    {\n        get => _validatedUrl;\n        set => _validatedUrl = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BookConfiguration IEntityTypeConfiguration C#\nDESCRIPTION: Demonstrates using IEntityTypeConfiguration to configure an entity type's properties.  This interface allows separation of concerns for model building. Requires Microsoft.EntityFrameworkCore.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\npublic class BookConfiguration : IEntityTypeConfiguration<Book>\n{\n    public void Configure(EntityTypeBuilder<Book> builder)\n    {\n        builder\n            .Property(e => e.Isbn)\n            .IsUnicode(false)\n            .HasMaxLength(22);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Entities with Generated Keys in EF Core\nDESCRIPTION: This code snippet shows how to insert a new blog and its associated posts using automatically generated key values in Entity Framework Core. The `Id` properties are not explicitly set, allowing EF Core to generate temporary key values until `SaveChanges` is called, at which point the database-generated keys are retrieved.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Add(\n    new Blog\n    {\n        Name = \".NET Blog\",\n        Posts =\n        {\n            new Post\n            {\n                Title = \"Announcing the Release of EF Core 5.0\",\n                Content = \"Announcing the release of EF Core 5.0, a full featured cross-platform...\"\n            },\n            new Post\n            {\n                Title = \"Announcing F# 5\",\n                Content = \"F# 5 is the latest version of F#, the functional programming language...\"\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for Many-to-Many Relationship SQL\nDESCRIPTION: Defines tables for Posts, Tags, and a PostTag join table to represent a many-to-many relationship. This SQL code sets up the database schema necessary for the EF Core scaffolding to automatically generate the many-to-many mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_47\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Tags] (\n  [Id] int NOT NULL IDENTITY,\n  [Name] nvarchar(max) NOT NULL,\n  [Description] nvarchar(max) NULL,\n  CONSTRAINT [PK_Tags] PRIMARY KEY ([Id]));\n\nCREATE TABLE [Posts] (\n    [Id] int NOT NULL IDENTITY,\n    [Title] nvarchar(max) NOT NULL,\n    [Contents] nvarchar(max) NOT NULL,\n    [PostedOn] datetime2 NOT NULL,\n    [UpdatedOn] datetime2 NULL,\n    CONSTRAINT [PK_Posts] PRIMARY KEY ([Id]));\n\nCREATE TABLE [PostTag] (\n    [PostsId] int NOT NULL,\n    [TagsId] int NOT NULL,\n    CONSTRAINT [PK_PostTag] PRIMARY KEY ([PostsId], [TagsId]),\n    CONSTRAINT [FK_PostTag_Posts_TagsId] FOREIGN KEY ([TagsId]) REFERENCES [Tags] ([Id]) ON DELETE CASCADE,\n    CONSTRAINT [FK_PostTag_Tags_PostsId] FOREIGN KEY ([PostsId]) REFERENCES [Posts] ([Id]) ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Change Tracking Example - C#\nDESCRIPTION: Example showing how change tracking interacts with ExecuteUpdateAsync and SaveChanges. It highlights potential inconsistencies when mixing both approaches.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\n// 1. Query the blog with the name `SomeBlog`. Since EF queries are tracking by default, the Blog is now tracked by EF's change tracker.\nvar blog = await context.Blogs.SingleAsync(b => b.Name == \"SomeBlog\");\n\n// 2. Increase the rating of all blogs in the database by one. This executes immediately.\nawait context.Blogs.ExecuteUpdateAsync(setters => setters.SetProperty(b => b.Rating, b => b.Rating + 1));\n\n// 3. Increase the rating of `SomeBlog` by two. This modifies the .NET `Rating` property and is not yet persisted to the database.\nblog.Rating += 2;\n\n// 4. Persist tracked changes to the database.\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with Shared Address in C#\nDESCRIPTION: This code adds a new order to an existing customer, using the customer's address for both the billing and shipping address.  The same `Address` instance is assigned to both properties to demonstrate instance sharing of complex types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ncustomer.Orders.Add(\n    new Order { Contents = \"Tesco Tasty Treats\", BillingAddress = customer.Address, ShippingAddress = customer.Address, });\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying a Table-Valued Function (C#)\nDESCRIPTION: This C# code demonstrates how to query a table-valued function (TVF) using the mapped CLR method. It calls the `PostsWithPopularComments` method with a specified `likeThreshold` and orders the results by rating. EF Core translates this query into SQL that calls the TVF with the provided parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nvar posts = context.PostsWithPopularComments(likeThreshold: 3)\n    .OrderBy(p => p.Rating)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: DbContext Initialization via OnConfiguring\nDESCRIPTION: Illustrates creating a DbContext instance using the 'new' keyword in C#. Configuration is performed by overriding the OnConfiguring method to configure the database connection.  In this example, the connection string is hardcoded.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApplicationDbContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Migration Bundle - .NET Core CLI\nDESCRIPTION: This command generates a migration bundle using the .NET Core CLI. Migration bundles are single-file executables that can be used to apply migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_12\n\nLANGUAGE: .NET Core CLI\nCODE:\n```\ndotnet ef migrations bundle\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Entities Graph with Explicit Keys - C#\nDESCRIPTION: This example demonstrates updating an existing blog along with its associated posts, using explicit keys. The entire graph of entities is marked as `Modified`, and calling `SaveChanges` will update all entities in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Update(\n    new Blog\n    {\n        Id = 1,\n        Name = \".NET Blog\",\n        Posts = \n        {\n            new Post\n            {\n                Id = 1,\n                Title = \"Announcing the Release of EF Core 5.0\",\n                Content = \"Announcing the release of EF Core 5.0, a full featured cross-platform...\"\n            },\n            new Post\n            {\n                Id = 2,\n                Title = \"Announcing F# 5\",\n                Content = \"F# 5 is the latest version of F#, the functional programming language...\"\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring optional one-to-many from principal - C#\nDESCRIPTION: This C# code configures an optional one-to-many relationship between `Blog` and `Post` entities using the `ModelBuilder` in `OnModelCreating`. It starts the configuration from the principal end (`Blog`) using `HasMany` and `WithOne` to define the relationship, setting the foreign key and making it optional.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasMany(e => e.Posts)\n        .WithOne(e => e.Blog)\n        .HasForeignKey(e => e.BlogId)\n        .IsRequired(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping rowversion to long/ulong properties in EF Core 8\nDESCRIPTION: This snippet demonstrates how to map `rowversion` columns in SQL Server to `long` or `ulong` properties in EF Core 8 using the `IsRowVersion()` method during model building. This provides a more suitable data type for handling optimistic concurrency.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(e => e.RowVersion)\n    .IsRowVersion();\n```\n\n----------------------------------------\n\nTITLE: Abstract DbContext with Non-Generic DbContextOptions (C#)\nDESCRIPTION: This code snippet illustrates how to define an abstract DbContext base class with a protected constructor that takes a non-generic DbContextOptions. This allows multiple concrete subclasses to call this base constructor using their different generic DbContextOptions<TContext> instances. It requires the Microsoft.EntityFrameworkCore package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class ApplicationDbContextBase : DbContext\n{\n    protected ApplicationDbContextBase(DbContextOptions contextOptions)\n        : base(contextOptions)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean Property to Int\nDESCRIPTION: This snippet configures an Entity Framework Core model to convert a boolean property (IsActive) to an integer column in the database, representing true as 1 and false as 0. It uses the `.HasConversion<int>()` method to specify the conversion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<User>()\n    .Property(e => e.IsActive)\n    .HasConversion<int>();\n```\n\n----------------------------------------\n\nTITLE: EF Core Optimize Command\nDESCRIPTION: Shows how to use the `dotnet ef dbcontext optimize` command-line tool to generate a compiled model for EF Core. This command improves application startup time by pre-compiling the model. Running this command more than once will trigger a new build.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_71\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext optimize\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with Raw SQL - EF6 - C#\nDESCRIPTION: Executes a raw SQL query against the database to retrieve blog entities. The returned entities are tracked by the context, similar to LINQ queries. The query is executed when the results are enumerated using ToList().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/raw-sql.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blogs = context.Blogs.SqlQuery(\"SELECT * FROM dbo.Blogs\").ToList();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sub-Document in JSON Column using EF Core\nDESCRIPTION: This C# code shows how to update a sub-document within a JSON column using EF Core.  It retrieves an author and modifies the 'Address' property within the 'Contact' JSON column. EF Core will use `JSON_MODIFY` to update only the sub-document, which is more efficient than updating the entire document.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nvar brice = await context.Authors.SingleAsync(author => author.Name.StartsWith(\"Brice\"));\n\nbrice.Contact.Address = new(\"4 Riverside\", \"Trimbridge\", \"TB1 5ZS\", \"UK\");\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Default No-Tracking Behavior in DbContext\nDESCRIPTION: This code shows how to configure the default query tracking behavior to be no-tracking within the `OnConfiguring` method of a derived `DbContext`. This affects all queries unless explicitly set to tracking with `AsTracking()`. The `optionsBuilder` is used to configure the `UseQueryTrackingBehavior` option.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .UseSqlite(\"Data Source=blogging.db\")\n        .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EF Model with DateOnly/TimeOnly properties in C#\nDESCRIPTION: This C# code defines an EF Core model with DateOnly and TimeOnly properties representing school-related data, including school information, terms, and opening hours.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\npublic class School\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = null!;\n    public DateOnly Founded { get; set; }\n    public List<Term> Terms { get; } = new();\n    public List<OpeningHours> OpeningHours { get; } = new();\n}\n\npublic class Term\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = null!;\n    public DateOnly FirstDay { get; set; }\n    public DateOnly LastDay { get; set; }\n    public School School { get; set; } = null!;\n}\n\n[Owned]\npublic class OpeningHours\n{\n    public OpeningHours(DayOfWeek dayOfWeek, TimeOnly? opensAt, TimeOnly? closesAt)\n    {\n        DayOfWeek = dayOfWeek;\n        OpensAt = opensAt;\n        ClosesAt = closesAt;\n    }\n\n    public DayOfWeek DayOfWeek { get; private set; }\n    public TimeOnly? OpensAt { get; set; }\n    public TimeOnly? ClosesAt { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-Many Classes with Payload and Join Navigations (C#)\nDESCRIPTION: Defines the Post, Tag, and PostTag classes to represent a many-to-many relationship with a payload property (CreatedOn).  Post and Tag classes have navigations to each other and to the PostTag join class. The PostTag class includes PostId, TagId and CreatedOn properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostId { get; set; }\n    public int TagId { get; set; }\n    public DateTime CreatedOn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SaveChangesAsync in EF Core\nDESCRIPTION: This code snippet demonstrates how to use `SaveChangesAsync` instead of `SaveChanges` in EF Core to perform database I/O asynchronously, preventing thread blocking. This is essential for responsive UI applications and increased throughput in web applications. Requires importing the appropriate EF Core namespaces.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/async.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Miscellaneous/Async/Program.cs#SaveChangesAsync)]\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many with Primary Key in Join Entity (C#)\nDESCRIPTION: This snippet defines the Post and Tag entity classes, representing a many-to-many relationship. This example does not include a separate class for the join table; instead, the configuration adds a primary key to the join table implicitly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Vector Data into Azure Cosmos DB - C#\nDESCRIPTION: This code snippet demonstrates how to insert vector data into an Azure Cosmos DB collection using EF Core. It first generates vector data (e.g., from text or an image), then adds a new Blog entity with the vector data to the context, and finally saves the changes to the database using SaveChangesAsync().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/vector-search.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nfloat[] vector = /* generate vector data from text, image, etc. */\ncontext.Add(new Blog { Vector = vector });\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Single ThenInclude - C#\nDESCRIPTION: This code snippet demonstrates how to drill down through relationships to include multiple levels of related data using the `ThenInclude` method.  All blogs, their related posts, and the author of each post are loaded.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts)\n        .ThenInclude(p => p.Author)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: OwnsOne with String Configuration C#\nDESCRIPTION: Demonstrates configuring an owned entity when the navigation property is private, using the string version of the `OwnsOne` method in `OnModelCreating`. It specifies that the `ShippingAddress` property of the `Order` entity is an owned entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Modeling.OwnedEntities\n{\n    public class OwnedEntityContext : DbContext\n    {\n        public DbSet<Order> Orders { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Order>(builder =>\n            {\n                builder.OwnsOne(\"ShippingAddress\");\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Relationships - EF Core - C#\nDESCRIPTION: This snippet shows how to change the relationship between entities by modifying the navigation property. When the Blog navigation property of a Post is updated to reference a new Blog entity, the foreign key in the database will be updated accordingly.  The new blog entity will also be added since it is a new entity referenced by the tracked post entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/related-data.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BloggingContext();\nvar blog = new Blog { Url = \"http://sample.com/blog_one\" };\nvar post = context.Posts.First();\npost.Blog = blog;\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Data using Contains Function\nDESCRIPTION: This code snippet demonstrates how to query spatial data using the `Contains` function in LINQ with EF Core and NetTopologySuite. It retrieves countries that contain a given location. Requires a DbContext and entities configured with spatial properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/spatial.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar nsw = new Point(143.2100, -33.9200) { SRID = 4326 };\n\nusing (var context = new WideWorldImportersContext())\n{\n    var countries = context.Countries\n        .Where(c => c.Border.Contains(nsw))\n        .ToList();\n\n    Console.WriteLine($\"Countries containing NSW: {countries.Count}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Set Column Comment using Fluent API in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to set a comment on a database column using the Fluent API in EF Core. It utilizes the `HasComment` method within the `OnModelCreating` method of the DbContext. This allows adding a text comment directly to the database column for schema documentation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>().Property(b => b.Url).HasComment(\"The URL of the blog\");\n```\n\n----------------------------------------\n\nTITLE: Passing a Single Parameter to Stored Procedure - C#\nDESCRIPTION: This snippet passes a single parameter (`user`) to a stored procedure `dbo.GetMostPopularBlogsForUser`.  The parameter value is interpolated into the SQL string, and EF Core handles it as a `DbParameter` to prevent SQL injection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar user = \"johndoe\";\n\nvar blogs = await context.Blogs\n    .FromSql($\"EXECUTE dbo.GetMostPopularBlogsForUser {user}\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Adding an initial migration via Visual Studio\nDESCRIPTION: This command adds a migration named 'InitialCreate' using the Package Manager Console in Visual Studio. The EF Core tools need to be installed for this command to work. This action generates files required to create the initial database schema based on the current data model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Migration InitialCreate\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Splitting with EF Core\nDESCRIPTION: This C# code configures entity splitting for the Customer entity type. It maps the Customer entity to the Customers, PhoneNumbers, and Addresses tables using the SplitToTable method.  Different primary key column names are specified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_167\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Customer>(\n                entityBuilder =>\n                {\n                    entityBuilder\n                        .ToTable(\"Customers\")\n                        .SplitToTable(\n                            \"PhoneNumbers\",\n                            tableBuilder =>\n                            {\n                                tableBuilder.Property(customer => customer.Id).HasColumnName(\"CustomerId\");\n                                tableBuilder.Property(customer => customer.PhoneNumber);\n                            })\n                        .SplitToTable(\n                            \"Addresses\",\n                            tableBuilder =>\n                            {\n                                tableBuilder.Property(customer => customer.Id).HasColumnName(\"CustomerId\");\n                                tableBuilder.Property(customer => customer.Street);\n                                tableBuilder.Property(customer => customer.City);\n                                tableBuilder.Property(customer => customer.PostCode);\n                                tableBuilder.Property(customer => customer.Country);\n                            });\n                });\n```\n\n----------------------------------------\n\nTITLE: Simple Immutable Struct Definition\nDESCRIPTION: This code defines a simple immutable struct `SomeImmutableStruct` with two properties: `Id` (an integer) and `SomeText` (a string). EF Core automatically generates memberwise comparisons for structs. It might still be beneficial to override Equals and GetHashCode for other non-EF reasons.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-comparers.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct SomeImmutableStruct\n{\n    public SomeImmutableStruct(int id, string someText)\n    {\n        Id = id;\n        SomeText = someText;\n    }\n\n    public int Id { get; }\n    public string SomeText { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Posts collection to the Blog class in C#\nDESCRIPTION: This C# code modifies the `Blog` class to include a collection of `Post` objects, representing the posts associated with a blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public string Name { get; set; }\n    public virtual Uri SiteUri { get; set; }\n\n    public ICollection<Post> Posts { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Use DbContext Pooling without Dependency Injection - C#\nDESCRIPTION: Demonstrates how to use context pooling without dependency injection by initializing a `PooledDbContextFactory` and requesting context instances from it. The `poolSize` parameter sets the maximum number of context instances retained by the pool. Requires Microsoft.EntityFrameworkCore and creating a DbContextFactory.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar options = new DbContextOptionsBuilder<BloggingContext>()\n    .UseSqlServer(\"<connection string>\")\n    .Options;\n\nusing var factory = new PooledDbContextFactory<BloggingContext>(options);\n\nusing (var context = factory.CreateDbContext())\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Generation on Add or Update with Fluent API in EF Core\nDESCRIPTION: This C# code snippet demonstrates how to configure a property to have its value generated on add or update using the Fluent API in EF Core. The ValueGeneratedOnAddOrUpdate method is used to specify that the database provider should generate a value for the property when a new entity is added or an existing entity is updated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(b => b.LastUpdated)\n    .ValueGeneratedOnAddOrUpdate();\n```\n\n----------------------------------------\n\nTITLE: Making a Property Required with Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to explicitly configure a property as required using the Fluent API in Entity Framework Core. The `IsRequired` method on the `PropertyBuilder` is used to specify that the property is required. This overrides the default convention. It requires the `DbContext` and `OnModelCreating` override to configure the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property(b => b.Title)\n        .IsRequired();\n}\n```\n\n----------------------------------------\n\nTITLE: Find: Single Entity Lookup C#\nDESCRIPTION: Demonstrates using Find to efficiently lookup a single entity by its primary key. It shows that Find first checks the tracked entities and only queries the database if the entity is not already tracked.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nConsole.WriteLine(\"First call to Find...\");\nvar blog1 = context.Blogs.Find(1);\n\nConsole.WriteLine($\"...found blog {blog1.Name}\");\n\nConsole.WriteLine();\nConsole.WriteLine(\"Second call to Find...\");\nvar blog2 = context.Blogs.Find(1);\nDebug.Assert(blog1 == blog2);\n\nConsole.WriteLine(\"...returned the same instance without executing a query.\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Dependent Child Entities from Graph C#\nDESCRIPTION: This snippet demonstrates deleting a dependent/child entity (Post) by attaching a graph of entities (Blog and associated Posts) and then calling Remove on one of the Posts.  This attaches all the entities to the context as unchanged and marks the specified Post as Deleted.  The deleted post will be removed when SaveChanges is called.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n// Attach a blog and associated posts\ncontext.Attach(blog);\n\n// Mark one post as Deleted\ncontext.Remove(blog.Posts[1]);\n```\n\n----------------------------------------\n\nTITLE: EF Core Converter with Mapping Hints (C#)\nDESCRIPTION: This snippet demonstrates using ConverterMappingHints to configure default facets for a value converter. When converting an `EquineBeast` enum to a string, a hint is provided specifying that the column should be non-Unicode and store up to 20 characters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvar converter = new ValueConverter<EquineBeast, string>(\n    v => v.ToString(),\n    v => (EquineBeast)Enum.Parse(typeof(EquineBeast), v),\n    new ConverterMappingHints(size: 20, unicode: false));\n\nmodelBuilder\n    .Entity<Rider>()\n    .Property(e => e.Mount)\n    .HasConversion(converter);\n```\n\n----------------------------------------\n\nTITLE: String.Join Aggregation - C#\nDESCRIPTION: This C# snippet demonstrates the usage of `String.Join` within a `GroupBy` query. EF Core 7 now translates this construct to the SQL `STRING_AGG` function.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts\n            .GroupBy(post => post.Author)\n            .Select(grouping => new { Author = grouping.Key, Books = string.Join(\"|\", grouping.Select(post => post.Title)) });\n```\n\n----------------------------------------\n\nTITLE: Configuring relationship in OnModelCreating using EF Core\nDESCRIPTION: This C# code configures the relationship between `Blog` and `Post` entities in EF Core using the `OnModelCreating` method.  It specifies the foreign key and principal key for the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasMany(e => e.Posts)\n        .WithOne(e => e.Blog)\n        .HasForeignKey(e => e.BlogId)\n        .HasPrincipalKey(e => e.Id);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Auditing in C#\nDESCRIPTION: This code demonstrates the usage of the auditing interceptor by performing CRUD operations on a blogging database and then inspecting the audit trail. It inserts, updates, and deletes blog posts. It includes a try-catch block to simulate a failed insert and then retrieves and prints the contents of the audit database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// Insert, update, and delete some entities\n\nusing (var context = new BlogsContext())\n{\n    context.Add(\n        new Blog\n        {\n            Name = \"EF Blog\",\n            Posts =\n            {\n                new Post { Title = \"EF Core 3.1!\" },\n                new Post { Title = \"EF Core 5.0!\" }\n            }\n        });\n\n    await context.SaveChangesAsync();\n}\n\nusing (var context = new BlogsContext())\n{\n    var blog = context.Blogs.Include(e => e.Posts).Single();\n\n    blog.Name = \"EF Core Blog\";\n    context.Remove(blog.Posts.First());\n    blog.Posts.Add(new Post { Title = \"EF Core 6.0!\" });\n\n    context.SaveChanges();\n}\n\n// Do an insert that will fail\n\nusing (var context = new BlogsContext())\n{\n    try\n    {\n        context.Add(new Post { Id = 3, Title = \"EF Core 3.1!\" });\n\n        await context.SaveChangesAsync();\n    }\n    catch (DbUpdateException)\n    {\n    }\n}\n\n// Look at the audit trail\n\nusing (var context = new AuditContext(\"DataSource=audit.db\"))\n{\n    foreach (var audit in context.SaveChangesAudits.Include(e => e.Entities).ToList())\n    {\n        Console.WriteLine(\n            $\"Audit {audit.AuditId} from {audit.StartTime} to {audit.EndTime} was{(audit.Succeeded ? \"\" : \" not\")} successful.\");\n\n        foreach (var entity in audit.Entities)\n        {\n            Console.WriteLine($\"  {entity.AuditMessage}\");\n        }\n\n        if (!audit.Succeeded)\n        {\n            Console.WriteLine($\"  Error: {audit.ErrorMessage}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Temporal Table\nDESCRIPTION: This code snippet demonstrates how to insert data into a temporal table in EF Core. It adds three new Employee entities to the context and saves the changes to the database. The temporal columns are handled automatically by SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ncontext.AddRange(\n    new Employee\n    {\n        Name = \"Pinky Pie\",\n        Address = \"Sugarcube Corner, Ponyville, Equestria\",\n        Department = \"DevDiv\",\n        Position = \"Party Organizer\",\n        AnnualSalary = 100.0m\n    },\n    new Employee\n    {\n        Name = \"Rainbow Dash\",\n        Address = \"Cloudominium, Ponyville, Equestria\",\n        Department = \"DevDiv\",\n        Position = \"Ponyville weather patrol\",\n        AnnualSalary = 900.0m\n    },\n    new Employee\n    {\n        Name = \"Fluttershy\",\n        Address = \"Everfree Forest, Equestria\",\n        Department = \"DevDiv\",\n        Position = \"Animal caretaker\",\n        AnnualSalary = 30.0m\n    });\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Custom Initialization Logic for Data Seeding in EF Core (C#)\nDESCRIPTION: Illustrates how to perform data seeding using custom initialization logic directly within the application before the main logic begins. Although UseSeeding is the recommended approach, this shows an alternative when specific scenarios, such as needing multiple contexts in a single transaction, arise. The snippet includes a warning against embedding seeding code in regular app execution due to potential concurrency and permission issues.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/data-seeding.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    context.Database.EnsureCreated();\n\n    if (!context.Blogs.Any())\n    {\n        context.Blogs.AddRange(\n            new Blog { Url = \"https://devblogs.microsoft.com/dotnet\" },\n            new Blog { Url = \"https://example.com\" });\n        context.SaveChanges();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Column in EF Core Migration (C#)\nDESCRIPTION: This C# code snippet demonstrates how to rename a column within an EF Core migration using the `RenameColumn` method. It replaces the default scaffolded code which would drop and re-add the column, leading to data loss.  Parameters include the original name, table name, and new name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nmigrationBuilder.RenameColumn(\n    name: \"Name\",\n    table: \"Customers\",\n    newName: \"FullName\");\n```\n\n----------------------------------------\n\nTITLE: Referencing Existing Property Value with ExecuteUpdateAsync - SQL\nDESCRIPTION: SQL generated by the ExecuteUpdateAsync method when the new value depends on the existing value. In this case the rating is incremented by one.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [b]\nSET [b].[Rating] = [b].[Rating] + 1\nFROM [Blogs] AS [b]\nWHERE [b].[Rating] < 3\n```\n\n----------------------------------------\n\nTITLE: Including Related Data with FromSql - C#\nDESCRIPTION: This snippet showcases how to use the `Include` operator to load related data (in this case, `Posts` for each `Blog`) along with a SQL query. It functions similarly to regular LINQ queries, simplifying the retrieval of related entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar searchTerm = \"Lorem ipsum\";\n\nvar blogs = await context.Blogs\n    .FromSql($\"SELECT * FROM dbo.SearchBlogs({searchTerm})\")\n    .Include(b => b.Posts)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating a Descending Index - Data Annotations - C#\nDESCRIPTION: This code snippet shows how to create an index with a descending sort order using Data Annotations in EF Core.  This is useful when the query uses `ORDER BY` with descending sort order on that particular column. This feature is being introduced in EF Core 7.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[Index(IsDescending = true)]\npublic class Post\n{\n    public DateTime PublishedOn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: stringValue.Equals with OrdinalIgnoreCase .NET to SQL translation\nDESCRIPTION: Illustrates the translation of stringValue.Equals with StringComparison.OrdinalIgnoreCase in .NET to STRINGEQUALS with a boolean flag in SQL through Entity Framework Core. This does a case-insensitive comparison.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_25\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Equals(value, StringComparison.OrdinalIgnoreCase)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[STRINGEQUALS(@stringValue, @value, true)](/azure/cosmos-db/nosql/query/stringequals)\n```\n\n----------------------------------------\n\nTITLE: ExecuteUpdateAsync with Lambda (EF Core 10)\nDESCRIPTION: This code snippet demonstrates the new, simplified syntax for `ExecuteUpdateAsync` in EF Core 10. It uses a regular lambda expression, making it easier to conditionally update properties of an entity (in this case, a `Blog`). This example conditionally updates the `Views` and `Name` based on the `nameChanged` variable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-10.0/whatsnew.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Blogs.ExecuteUpdateAsync(s =>\n{\n    s.SetProperty(b => b.Views, 8);\n    if (nameChanged)\n    {\n        s.SetProperty(b => b.Name, \"foo\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Custom SQL Translation (C#)\nDESCRIPTION: This C# code demonstrates how to use a user-defined function with a custom SQL translation in a LINQ query. It calculates the percentage difference between a post's BlogId and the value 3. EF Core translates the `PercentageDifference` method call into the SQL expression defined in the `HasTranslation` configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts\n    .Select(p => context.PercentageDifference(p.BlogId, 3));\n```\n\n----------------------------------------\n\nTITLE: Define Entity with Timestamp Concurrency Token - C#\nDESCRIPTION: Defines a Person entity with a Timestamp attribute on the Version property, which configures it as a concurrency token in SQL Server. The Version property automatically changes in the database every time the row is updated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public int PersonId { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n\n    [Timestamp]\n    public byte[] Version { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Subqueries with GROUP BY - C#\nDESCRIPTION: This C# code demonstrates a query with a subquery and a GROUP BY clause. In EF Core 7, the query translation is optimized to avoid referencing ungrouped columns from the outer query, improving performance and compatibility with different databases.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nvar query = from s in (from i in context.Invoices\n                                   group i by i.History.Month\n                                   into g\n                                   select new { Month = g.Key, Total = g.Sum(p => p.Amount), })\n                        select new\n                        {\n                            s.Month, s.Total, Payment = context.Payments.Where(p => p.History.Month == s.Month).Sum(p => p.Amount)\n                        };\n```\n\n----------------------------------------\n\nTITLE: Attaching and Modifying an Existing Entity - C#\nDESCRIPTION: This example demonstrates how to attach an existing entity to the context and mark it as modified by setting its state to `EntityState.Modified`.  All properties of the entity will be updated in the database when `SaveChanges` is called. Requires a pre-existing `Blog` object.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/entity-state.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar existingBlog = new Blog { BlogId = 1, Name = \"ADO.NET Blog\" };\n\nusing (var context = new BloggingContext())\n{\n    context.Entry(existingBlog).State = EntityState.Modified;\n\n    // Do some more work...  \n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Implement SetRetrievedInterceptor C#\nDESCRIPTION: Implements the `IMaterializationInterceptor` to set the `Retrieved` property of entities that implement `IHasRetrieved` when they are materialized from the database. The `InitializedInstance` method checks if the instance implements `IHasRetrieved` and sets the `Retrieved` property to the current UTC time.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_91\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SetRetrievedInterceptor : IMaterializationInterceptor\n{\n    public object InitializedInstance(MaterializationInterceptionData materializationData, object instance)\n    {\n        if (instance is IHasRetrieved hasRetrieved)\n        {\n            hasRetrieved.Retrieved = DateTime.UtcNow;\n        }\n        \n        return instance;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex JSON Document Example JSON\nDESCRIPTION: This JSON object represents a complex JSON document stored in a database using EF Core 7. It includes nested objects and arrays, representing views, top geographies, top searches, and updates with commits.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Views\": 5085,\n  \"TopGeographies\": [\n    {\n      \"Browsers\": \"Firefox, Netscape\",\n      \"Count\": 924,\n      \"Latitude\": 110.793,\n      \"Longitude\": 39.2431\n    },\n    {\n      \"Browsers\": \"Firefox, Netscape\",\n      \"Count\": 885,\n      \"Latitude\": 133.793,\n      \"Longitude\": 45.2431\n    }\n  ],\n  \"TopSearches\": [\n    {\n      \"Count\": 9359,\n      \"Term\": \"Search #1\"\n    }\n  ],\n  \"Updates\": [\n    {\n      \"PostedFrom\": \"127.0.0.1\",\n      \"UpdatedBy\": \"Admin\",\n      \"UpdatedOn\": \"1996-02-17T19:24:29.5429092Z\",\n      \"Commits\": []\n    },\n    {\n      \"PostedFrom\": \"127.0.0.1\",\n      \"UpdatedBy\": \"Admin\",\n      \"UpdatedOn\": \"2019-11-24T19:24:29.5429093Z\",\n      \"Commits\": [\n        {\n          \"Comment\": \"Commit #1\",\n          \"CommittedOn\": \"2022-08-21T00:00:00+01:00\"\n        }\n      ]\n    },\n    {\n      \"PostedFrom\": \"127.0.0.1\",\n      \"UpdatedBy\": \"Admin\",\n      \"UpdatedOn\": \"1997-05-28T19:24:29.5429097Z\",\n      \"Commits\": [\n        {\n          \"Comment\": \"Commit #1\",\n          \"CommittedOn\": \"2022-08-21T00:00:00+01:00\"\n        },\n        {\n          \"Comment\": \"Commit #2\",\n          \"CommittedOn\": \"2022-08-21T00:00:00+01:00\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Many-to-Many Relationship Using Navigation Properties\nDESCRIPTION: This code demonstrates how to add a relationship between a Post and a Tag using the PostTag join entity by setting the navigation properties. It creates a new PostTag entity and directly assigns the Post and Tag objects to the respective navigation properties. This simplifies the process and provides a more object-oriented approach to relationship management.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Add(new PostTag { Post = post, Tag = tag });\n```\n\n----------------------------------------\n\nTITLE: Configuring a Partition Key with EF Core and Cosmos DB\nDESCRIPTION: This snippet demonstrates how to configure a partition key for an entity type when using EF Core with Azure Cosmos DB. The `HasPartitionKey` method is used on the entity builder for the `Order` entity type, specifying the `PartitionKey` property as the partition key. This is crucial for performance and scalability in Cosmos DB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Order>().HasPartitionKey(o => o.PartitionKey);\n```\n\n----------------------------------------\n\nTITLE: Lazy-Loading Navigation Properties (EF Core)\nDESCRIPTION: This snippet shows how to trigger lazy-loading of the `Posts` navigation property of a `Blog` entity. By accessing the `Posts` property, EF Core automatically loads the related data from the database, assuming lazy-loading is configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nConsole.WriteLine();\nConsole.Write(\"Choose a blog: \");\nif (int.TryParse(ReadLine(), out var blogId))\n{\n    Console.WriteLine(\"Posts:\");\n    foreach (var post in blogs[blogId - 1].Posts)\n    {\n        Console.WriteLine($\"  {post.Title}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Entity C#\nDESCRIPTION: This code shows how to query for a `Customer` entity.  All properties, including those within complex types, are loaded when the entity is loaded. Requires `Microsoft.EntityFrameworkCore` package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nvar customer = await context.Customers.FirstAsync(e => e.Id == customerId);\n```\n\n----------------------------------------\n\nTITLE: Eager Loading and Projection C#\nDESCRIPTION: This code demonstrates how to use eager loading with projection to avoid the N+1 problem. It retrieves blogs and their posts in a single query and projects the results to only include the URLs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts)\n    .Select(b => new\n    {\n        Url = b.Url, // Select only the URL\n        Posts = b.Posts\n    }).ToList();\n\nforeach (var blog in blogs)\n{\n    Console.WriteLine(\"Blog: \" + blog.Url);\n    foreach (var post in blog.Posts)\n    {\n        Console.WriteLine(\"\\tPost: \" + post.Title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Immutable Address Class C#\nDESCRIPTION: This C# snippet defines an immutable `Address` class. It uses a constructor to initialize the properties, and the properties are read-only (get-only), preventing modification after the object is created.  To change an address, a new instance must be created.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class Address\n{\n    public Address(string line1, string? line2, string city, string country, string postCode)\n    {\n        Line1 = line1;\n        Line2 = line2;\n        City = city;\n        Country = country;\n        PostCode = postCode;\n    }\n\n    public string Line1 { get; }\n    public string? Line2 { get; }\n    public string City { get; }\n    public string Country { get; }\n    public string PostCode { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an initial migration via .NET Core CLI\nDESCRIPTION: This command instructs EF Core to create a migration named `InitialCreate` using the .NET Core CLI.  The CLI tools must be installed prior to execution.  This will generate the necessary files to create the initial database schema based on the current model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add InitialCreate\n```\n\n----------------------------------------\n\nTITLE: Using Lambda for ExecuteUpdateAsync (New - EF Core 10)\nDESCRIPTION: This code snippet demonstrates the simplified approach to using `ExecuteUpdateAsync` in EF Core 10. It utilizes a non-expression lambda to define column setters, allowing for easier conditional logic within the setter definition. This eliminates the need for complex expression tree construction.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-10.0/breaking-changes.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Blogs.ExecuteUpdateAsync(s =>\n{\n    s.SetProperty(b => b.Views, 8);\n    if (nameChanged)\n    {\n        s.SetProperty(b => b.Name, \"foo\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations without Explicit Transaction (C#)\nDESCRIPTION: Demonstrates the correct way to apply migrations when no other operations are done within the transaction.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait dbContext.Database.MigrateAsync(cancellationToken);\n```\n\n----------------------------------------\n\nTITLE: Updating Base Output Path of Migrations Project (XML)\nDESCRIPTION: Updates the base output path of the migrations project in its .csproj file. This is an alternative solution to avoid circular dependencies when referencing the migrations project from the startup project. The output path is configured to be the bin directory of the startup project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/projects.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n  <BaseOutputPath>..\\WebApplication1\\bin\\</BaseOutputPath>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring GUID Key Generation with EF Core and Cosmos DB\nDESCRIPTION: This code configures EF Core to generate GUID values for the `Id` property of the `Session` entity when using Azure Cosmos DB. The `HasValueGenerator<GuidValueGenerator>()` method is called on the property builder for the `Id` property. This avoids the need to manually set the Id property before inserting the entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Session>().Property(b => b.Id).HasValueGenerator<GuidValueGenerator>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Generation on Add with Data Annotations in EF Core\nDESCRIPTION: This C# code snippet demonstrates how to configure a property to have its value generated on add using data annotations in EF Core.  Requires Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]\n    public Guid Guid { get; set; }\n    public string Url { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering IModelCacheKeyFactory in OnConfiguring - C#\nDESCRIPTION: This code snippet shows how to register the custom `IModelCacheKeyFactory` implementation in the `OnConfiguring` method of the DbContext. This ensures that EF Core uses the custom caching logic when building the model.  It replaces the default `IModelCacheKeyFactory` with `DynamicModelCacheKeyFactoryDesignTimeSupport` or `DynamicModelCacheKeyFactory` depending on whether it is design time or not.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/dynamic-model.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .UseSqlServer(\"Server=(localdb)\\\\mssqllocaldb;Database=EFModeling;Trusted_Connection=True;\", b => b.ApplyConfigurationsFromAssembly(typeof(DynamicContext).Assembly))\n        .ReplaceService<IModelCacheKeyFactory, DynamicModelCacheKeyFactoryDesignTimeSupport>();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom MigrationOperation Definition in C#\nDESCRIPTION: This C# code defines a custom `MigrationOperation` called `CreateUserOperation`. This class represents the operation of creating a database user, encapsulating the user's name and password. This approach decouples the operation from the specific SQL and allows different providers to generate appropriate SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/operations.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore.Migrations.Operations;\n\npublic class CreateUserOperation : MigrationOperation\n{\n    public string Name { get; set; }\n    public string Password { get; set; }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Multiple Includes - C#\nDESCRIPTION: This code snippet shows how to include related data from multiple relationships in a single query using multiple `Include` statements.  Blogs are returned with both their `Posts` and `Author` properties populated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts)\n    .Include(b => b.Author)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Parsing HierarchyId with new parse method in EF Core 9\nDESCRIPTION: This code demonstrates the new sugar method for creating child nodes in a HierarchyId tree structure. It uses HierarchyId.Parse with an existing HierarchyId as the base and an integer to create a new child HierarchyId.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nvar child1 = new Halfling(HierarchyId.Parse(daisy.PathFromPatriarch, 1), \"Toast\");\nvar child2 = new Halfling(HierarchyId.Parse(daisy.PathFromPatriarch, 2), \"Wills\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Hierarchical Partition Key (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a hierarchical partition key in EF Core 9 for Azure Cosmos DB using the `HasPartitionKey` method in `OnModelCreating`. It defines a three-level partition key using `TenantId`, `UserId`, and `SessionId` properties of the `UserSession` entity.\nThis configuration enables efficient querying and scaling based on the defined hierarchy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<UserSession>()\n    .HasPartitionKey(e => new { e.TenantId, e.UserId, e.SessionId });\n```\n\n----------------------------------------\n\nTITLE: Customer and CustomerInfo Entity Definitions C#\nDESCRIPTION: This snippet defines two entity types, `Customer` and `CustomerInfo`, where `CustomerInfo` is an owned type.  Both map to the same table, Customers. Used to demonstrate EF Core 8's improved ExecuteUpdate support for owned types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_127\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public required string Name { get; set; }\n    public required CustomerInfo CustomerInfo { get; set; }\n}\n\n[Owned]\npublic class CustomerInfo\n{\n    public string? Tag { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Entities with Complex Filters and Navigations\nDESCRIPTION: This C# code demonstrates using a complex filter with navigation properties to delete Tag entities using `ExecuteDeleteAsync`. The code deletes tags associated with old blog posts (posts published before 2022). This showcases the ability to use complex LINQ queries with `ExecuteDeleteAsync`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Tags.Where(t => t.Posts.All(e => e.PublishedOn.Year < 2022)).ExecuteDeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Strategy in DbContext - C#\nDESCRIPTION: This code snippet demonstrates how to configure an execution strategy for connection resiliency within the `OnConfiguring` method of a derived `DbContext`.  It utilizes `UseSqlServer` with `EnableRetryOnFailure` to enable retries on transient SQL Server failures. The connection string needs to be provided. The `EnableRetryOnFailure` method internally configures an `IExecutionStrategy` instance tailored for SQL Server, with sensible defaults for maximum retries and delay between retries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-resiliency.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .UseSqlServer(\"<connection string>\",\n            providerOptions => providerOptions.EnableRetryOnFailure());\n}\n```\n\n----------------------------------------\n\nTITLE: Configure RowVersion Concurrency Token with Fluent API - C#\nDESCRIPTION: Configures the Version property as a rowversion concurrency token using the Fluent API. This approach provides an alternative to data annotations and allows for more complex configurations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Person>()\n        .Property(p => p.Version)\n        .IsRowVersion();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many Relationship - C#\nDESCRIPTION: This C# code configures a many-to-many relationship between `Post` and `Tag` entities using EF Core's fluent API. It specifies the join table name (`PostTag`) and the foreign key relationships to the `Posts` and `Tags` tables. It defines the composite key for the join table and adds an index on `TagsId` for improved query performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nentity.HasMany(d => d.Tags)\n    .WithMany(p => p.Posts)\n    .UsingEntity<Dictionary<string, object>>(\n        \"PostTag\",\n        l => l.HasOne<Tag>().WithMany().HasForeignKey(\"PostsId\"),\n        r => r.HasOne<Post>().WithMany().HasForeignKey(\"TagsId\"),\n        j =>\n            {\n                j.HasKey(\"PostsId\", \"TagsId\");\n                j.ToTable(\"PostTag\");\n                j.HasIndex(new[] { \"TagsId\" }, \"IX_PostTag_TagsId\");\n            });\n```\n\n----------------------------------------\n\nTITLE: TPT Configuration with Custom Column Names - C#\nDESCRIPTION: Configures the TPT inheritance mapping strategy in EF Core 7, specifying different column names for the primary key property (Id) in the Cat and Dog tables using the table builder. This allows each table to have a uniquely named primary key column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Animal>().ToTable(\"Animals\");\n\nmodelBuilder.Entity<Cat>()\n    .ToTable(\n        \"Cats\",\n        tableBuilder => tableBuilder.Property(cat => cat.Id).HasColumnName(\"CatId\"));\n\nmodelBuilder.Entity<Dog>()\n    .ToTable(\n        \"Dogs\",\n        tableBuilder => tableBuilder.Property(dog => dog.Id).HasColumnName(\"DogId\"));\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Transactions (System.Transactions)\nDESCRIPTION: This code demonstrates how to use explicit transactions from System.Transactions with Entity Framework Core using CommittableTransaction. It creates a CommittableTransaction and explicitly commits or rolls back the transaction. EF Core enlists in the explicit transaction. Requires System.Transactions and a database provider that supports System.Transactions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/transactions.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing (var transaction = new CommittableTransaction())\n{\n    using (var context = new BloggingContext())\n    {\n        try\n        {\n            context.Database.EnlistTransaction(transaction);\n\n            context.Blogs.Add(new Blog { Name = \"My new Blog #1\" });\n            context.SaveChanges();\n\n            context.Blogs.Add(new Blog { Name = \"My new Blog #2\" });\n            context.SaveChanges();\n\n            context.Blogs.Where(b => b.Name.StartsWith(\"My\")).ToList();\n\n            transaction.Commit();\n        }\n        catch (Exception)\n        {\n            // TODO: Handle failure\n            transaction.Rollback();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting the Root Discriminator into the ID Property with EF Core and Cosmos DB\nDESCRIPTION: This code configures EF Core to insert only the root discriminator into the `id` property. This can improve query performance by allowing efficient point reads in more scenarios. The `HasRootDiscriminatorInJsonId` method is used to specify this behavior. This is an alternative to inserting the full discriminator.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Session>().HasRootDiscriminatorInJsonId();\n```\n\n----------------------------------------\n\nTITLE: Mapping Stored Procedures for an Entity\nDESCRIPTION: This code snippet demonstrates how to map stored procedures for insert, update, and delete operations for a `Person` entity in EF Core using the `OnModelCreating` method. It configures the stored procedure names, parameters, and result columns for each operation. The parameter `storedProcedureBuilder` is used to define parameters like `Name`, `Id` and how to handle original values for updates and deletes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Person>()\n                .InsertUsingStoredProcedure(\n                    \"People_Insert\",\n                    storedProcedureBuilder =>\n                    {\n                        storedProcedureBuilder.HasParameter(a => a.Name);\n                        storedProcedureBuilder.HasResultColumn(a => a.Id);\n                    })\n                .UpdateUsingStoredProcedure(\n                    \"People_Update\",\n                    storedProcedureBuilder =>\n                    {\n                        storedProcedureBuilder.HasOriginalValueParameter(person => person.Id);\n                        storedProcedureBuilder.HasOriginalValueParameter(person => person.Name);\n                        storedProcedureBuilder.HasParameter(person => person.Name);\n                        storedProcedureBuilder.HasRowsAffectedResultColumn();\n                    })\n                .DeleteUsingStoredProcedure(\n                    \"People_Delete\",\n                    storedProcedureBuilder =>\n                    {\n                        storedProcedureBuilder.HasOriginalValueParameter(person => person.Id);\n                        storedProcedureBuilder.HasOriginalValueParameter(person => person.Name);\n                        storedProcedureBuilder.HasRowsAffectedResultColumn();\n                    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Foreign Key - EF Core\nDESCRIPTION: This code snippet demonstrates how to configure a shadow foreign key, which is a foreign key that exists in the EF model but not on the .NET entity type. It specifies `MyBlogId` as the shadow foreign key for the relationship between `Blog` and `Post` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasForeignKey(\"MyBlogId\");\n```\n\n----------------------------------------\n\nTITLE: Creating Check Constraint - Fluent API - C#\nDESCRIPTION: This code snippet demonstrates creating a check constraint using the Fluent API in EF Core.  Check constraints allow you to define a condition that must hold true for all rows in the table. The code snippet uses the `HasCheckConstraint` method to define the SQL expression for the check constraint.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Person>()\n    .HasCheckConstraint(\"CK_Person_Name\", \"LEN(FirstName) > 3\");\n```\n\n----------------------------------------\n\nTITLE: One-to-Many from Principal with Composite Key - C#\nDESCRIPTION: Explicitly configures the one-to-many relationship between Blog and Post using a composite key on the Blog entity. This includes setting up the principal key and foreign key properties with the `HasPrincipalKey` and `HasForeignKey` methods respectively, ensuring that the relationship is correctly defined and required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>(\n        nestedBuilder =>\n        {\n            nestedBuilder.HasKey(e => new { e.Id1, e.Id2 });\n\n            nestedBuilder.HasMany(e => e.Posts)\n                .WithOne(e => e.Blog)\n                .HasPrincipalKey(e => new { e.Id1, e.Id2 })\n                .HasForeignKey(e => new { e.BlogId1, e.BlogId2 })\n                .IsRequired();\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: IEntityWithKey Interface C#\nDESCRIPTION: Defines an interface IEntityWithKey that includes a common Id property. This interface can be used with ChangeTracker.Entries to access the key of any tracked entity in a strongly-typed manner.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IEntityWithKey\n{\n    int Id { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Creation for Temporal Table\nDESCRIPTION: This SQL code represents the schema that will be created in SQL Server for a temporal table named 'Employees'.  It uses system versioning to automatically track changes to the data in the table, storing historical data in a history table named 'EmployeeHistory'. The PeriodStart and PeriodEnd columns are automatically maintained by SQL Server to indicate the period for which each row was valid.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nDECLARE @historyTableSchema sysname = SCHEMA_NAME()\nEXEC(N'CREATE TABLE [Employees] (\n    [EmployeeId] uniqueidentifier NOT NULL,\n    [Name] nvarchar(100) NULL,\n    [Position] nvarchar(100) NULL,\n    [Department] nvarchar(100) NULL,\n    [Address] nvarchar(1024) NULL,\n    [AnnualSalary] decimal(10,2) NOT NULL,\n    [PeriodEnd] datetime2 GENERATED ALWAYS AS ROW END NOT NULL,\n    [PeriodStart] datetime2 GENERATED ALWAYS AS ROW START NOT NULL,\n    CONSTRAINT [PK_Employees] PRIMARY KEY ([EmployeeId]),\n    PERIOD FOR SYSTEM_TIME([PeriodStart], [PeriodEnd])\n) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [' + @historyTableSchema + N'].[EmployeeHistory]))');\n```\n\n----------------------------------------\n\nTITLE: Using Sequential GUID Value Generator\nDESCRIPTION: This code snippet demonstrates how to configure a property to use a sequential GUID value generator in EF Core. It overrides the OnModelCreating method in a DbContext and uses the HasValueGenerator method to specify the SequentialGuidValueGenerator for the Guid property of the Blog entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/value-generation.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().Property(b => b.Guid).HasValueGenerator(typeof(SequentialGuidValueGenerator));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Current Values from DTO in EF Core (C#)\nDESCRIPTION: This snippet shows how to update the current values of a tracked entity using a DTO (`BlogDto`). The `SetValues` method of the `CurrentValues` property is used to copy values from the DTO to the entity.  The DTO's property names must match those of the entity for the values to be correctly mapped.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogDto = new BlogDto { Id = 1, Name = \"1unicorn2\" };\n\ncontext.Entry(blog).CurrentValues.SetValues(blogDto);\n```\n\n----------------------------------------\n\nTITLE: Updating a Graph of Entities\nDESCRIPTION: This snippet shows how to update a graph of entities using the `Update` method. It marks the root entity (Blog) and all related entities (Posts) for update. Requires a `Blog` entity with a collection of `Post` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdateGraph(BloggingContext context, Blog blog)\n{\n    context.Update(blog);\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key with Lambda - EF Core\nDESCRIPTION: This code snippet demonstrates how to configure a foreign key using a lambda expression within the `OnModelCreating` method of an Entity Framework Core DbContext. It establishes a one-to-many relationship between `Blog` and `Post` entities, specifying `ContainingBlogId` as the foreign key property on the `Post` entity that references the `Blog` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasForeignKey(e => e.ContainingBlogId);\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relationship Configuration C#\nDESCRIPTION: Configures the many-to-many relationship between Post and Tag entities within the DbContext. This configuration uses a shadow entity named \"PostTag\" and defines the foreign key relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\nentity.HasMany(d => d.Tags)\n    .WithMany(p => p.Posts)\n    .UsingEntity<Dictionary<string, object>>(\n        \"PostTag\",\n        l => l.HasOne<Tag>().WithMany().HasForeignKey(\"PostsId\"),\n        r => r.HasOne<Post>().WithMany().HasForeignKey(\"TagsId\"),\n        j =>\n            {\n                j.HasKey(\"PostsId\", \"TagsId\");\n                j.ToTable(\"PostTag\");\n                j.HasIndex(new[] { \"TagsId\" }, \"IX_PostTag_TagsId\");\n            });\n```\n\n----------------------------------------\n\nTITLE: Configuring Nullability Propagation for User-Defined Functions (C#)\nDESCRIPTION: This C# code configures two user-defined functions that map to the same SQL function, `ConcatStrings`. One function (`ConcatStrings2`) uses `PropagatesNullability` to inform EF Core that the function only returns null if one or more of its arguments are null. This allows EF Core to generate more efficient SQL by avoiding redundant null checks.  The first (`ConcatStrings1`) doesn't use it, resulting in less optimized SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.HasDbFunction(typeof(BloggingContext).GetMethod(nameof(ConcatStrings1), new[] { typeof(string), typeof(string) }))\n    .HasName(\"ConcatStrings\");\n\nmodelBuilder.HasDbFunction(typeof(BloggingContext).GetMethod(nameof(ConcatStrings2), new[] { typeof(string), typeof(string) }))\n    .HasName(\"ConcatStrings\")\n    .HasParameter(nameof(prm1)).PropagatesNullability();\n```\n\n----------------------------------------\n\nTITLE: Tracking Entities and Modifying Their States - C#\nDESCRIPTION: This snippet retrieves blog data with related posts and tags, then modifies the state of some entities. It adds a new post to one blog, removes a post from another, and modifies a blog's name to demonstrate the change tracking capabilities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/debug-views.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n        var blogs = context.Blogs\n            .Include(e => e.Posts).ThenInclude(e => e.Tags)\n            .Include(e => e.Assets)\n            .ToList();\n\n        // Mark something Added\n        blogs[0].Posts.Add(\n            new Post\n            {\n                Title = \"What’s next for System.Text.Json?\",\n                Content = \".NET 5.0 was released recently and has come with many new features and...\"\n            });\n\n        // Mark something Deleted\n        blogs[1].Posts.Remove(blogs[1].Posts[1]);\n\n        // Make something Modified\n        blogs[0].Name = \".NET Blog (All new!)\";\n\n        context.ChangeTracker.DetectChanges();\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by EF Core 8.0 and later\nDESCRIPTION: This SQL code demonstrates the new approach used by EF Core 8.0 and later to translate LINQ queries with `Contains`. It uses the `OPENJSON` function to handle the parameterized values as a JSON array. This technique is only supported on SQL Server 2016 and later (compatibility level 130+).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[Id], [b].[Name]\nFROM [Blogs] AS [b]\nWHERE [b].[Name] IN (\n    SELECT [n].[value]\n    FROM OPENJSON(@__names_0) WITH ([value] nvarchar(max) '$') AS [n]\n)\n```\n\n----------------------------------------\n\nTITLE: Composing LINQ with SqlQuery - PostgreSQL\nDESCRIPTION: This code snippet demonstrates how to compose LINQ operators over a SQL query using SqlQuery in EF Core with PostgreSQL. It returns the BlogId values which are above the average BlogId. The SQL query must name the output column Value for LINQ composition to work. Requires Entity Framework Core and a database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nvar overAverageIds = await context.Database\n    .SqlQuery<int>($\"\"\"\n                    SELECT \\\"BlogId\\\" AS \\\"Value\\\" FROM \\\"Blogs\\\"\n                    \"\"\")\n    .Where(id => id > context.Blogs.Average(b => b.BlogId))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Attaching Existing Entities with Generated Keys - C#\nDESCRIPTION: This snippet demonstrates how EF Core automatically detects new entities (with unset key values) when attaching a graph with generated keys. In this case, a `Blog` with existing `Posts` is attached, along with a new `Post` that has no key value set.  EF Core marks the new `Post` as `Added`. When using generated keys, EF Core will always insert an entity when that entity has no key value set.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Attach(\n    new Blog\n    {\n        Id = 1,\n        Name = \".NET Blog\",\n        Posts =\n        {\n            new Post\n            {\n                Id = 1,\n                Title = \"Announcing the Release of EF Core 5.0\",\n                Content = \"Announcing the release of EF Core 5.0, a full featured cross-platform...\"\n            },\n            new Post\n            {\n                Id = 2,\n                Title = \"Announcing F# 5\",\n                Content = \"F# 5 is the latest version of F#, the functional programming language...\"\n            },\n            new Post\n            {\n                Title = \"Announcing .NET 5.0\",\n                Content = \".NET 5.0 includes many enhancements, including single file applications, more...\"\n            },\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Persist Attribute for Opt-in Property Mapping in EF Core\nDESCRIPTION: This code defines a custom attribute, `PersistAttribute`, used to mark properties and fields that should be mapped to the database by EF Core. It's part of an opt-in property mapping convention where only members with this attribute are persisted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]\npublic sealed class PersistAttribute : Attribute\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SaveChanges Failures in C#\nDESCRIPTION: This code snippet demonstrates handling failed SaveChanges operations using the `SaveChangesFailed` and `SaveChangesFailedAsync` methods. It takes a `DbContextErrorEventData` object as input.  It creates a new AuditContext, attaches the audit entity, sets the Succeeded flag to false, sets the EndTime, and records the error message from the exception. Then, it saves these changes to the audit database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic void SaveChangesFailed(DbContextErrorEventData eventData)\n{\n    using (var auditContext = new AuditContext(_connectionString))\n    {\n        auditContext.Attach(_audit);\n        _audit.Succeeded = false;\n        _audit.EndTime = DateTime.UtcNow;\n        _audit.ErrorMessage = eventData.Exception.Message;\n\n        auditContext.SaveChanges();\n    }\n}\n\npublic async Task SaveChangesFailedAsync(\n    DbContextErrorEventData eventData,\n    CancellationToken cancellationToken = new CancellationToken())\n{\n    using (var auditContext = new AuditContext(_connectionString))\n    {\n        auditContext.Attach(_audit);\n        _audit.Succeeded = false;\n        _audit.EndTime = DateTime.UtcNow;\n        _audit.ErrorMessage = eventData.Exception.InnerException?.Message;\n\n        await auditContext.SaveChangesAsync(cancellationToken);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filtered Index - Fluent API - C#\nDESCRIPTION: This code shows how to create a filtered index using Fluent API in EF Core. A filtered index indexes only a subset of the rows in a table, reducing its size and improving performance.  The `HasFilter()` method allows for providing a SQL expression that acts as a filter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasIndex(b => b.Url)\n    .HasFilter(\"[Url] IS NOT NULL\");\n```\n\n----------------------------------------\n\nTITLE: Using IEntityEntryGraphIterator in EF Core 7\nDESCRIPTION: This snippet shows how to use the IEntityEntryGraphIterator service to iterate over a graph of entities reachable from a starting entity in EF Core 7. It iterates through the graph and prints information about each visited entity, keeping track of visited entities to prevent infinite loops.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\nvar blogEntry = context.ChangeTracker.Entries<Blog>().First();\n        var found = new HashSet<object>();\n        var iterator = context.GetService<IEntityEntryGraphIterator>();\n        iterator.TraverseGraph(new EntityEntryGraphNode<HashSet<object>>(blogEntry, found, null, null), node =>\n        {\n            if (node.NodeState.Contains(node.Entry.Entity))\n            {\n                return false;\n            }\n\n            Console.Write($\"Found with '{node.Entry.Entity.GetType().Name}'\");\n\n            if (node.InboundNavigation != null)\n            {\n                Console.Write($\" by traversing '{node.InboundNavigation.Name}' from '{node.SourceEntry!.Entity.GetType().Name}'\");\n            }\n\n            Console.WriteLine();\n\n            node.NodeState.Add(node.Entry.Entity);\n\n            return true;\n        });\n\n        Console.WriteLine();\n        Console.WriteLine($\"Finished iterating. Found {found.Count} entities.\");\n        Console.WriteLine();\n```\n\n----------------------------------------\n\nTITLE: Extending Property Discovery Convention in EF Core with Attributes (EF9)\nDESCRIPTION: This code demonstrates how to extend the PropertyDiscoveryConvention in EF Core to map properties based on a custom attribute (PersistAttribute). It simplifies the logic compared to EF7 and allows ignoring properties based on their type mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\npublic class AttributeBasedPropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies)\n    : PropertyDiscoveryConvention(dependencies)\n{\n    protected override bool IsCandidatePrimitiveProperty(\n        MemberInfo memberInfo, IConventionTypeBase structuralType, out CoreTypeMapping? mapping)\n    {\n        if (base.IsCandidatePrimitiveProperty(memberInfo, structuralType, out mapping))\n        {\n            if (Attribute.IsDefined(memberInfo, typeof(PersistAttribute), inherit: true))\n            {\n                return true;\n            }\n\n            structuralType.Builder.Ignore(memberInfo.Name);\n        }\n\n        mapping = null;\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Tracking with TrackGraph - Part 2 C#\nDESCRIPTION: This C# code snippet demonstrates using TrackGraph to customize entity tracking. It iterates through each entity in the graph and sets the entity state based on the primary key value. New entities (Id=0) are marked as Added, entities with negative Ids are marked as Deleted (after restoring the original Id), and other entities are marked as Modified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n        public static void UpdateBlog(Blog blog)\n        {\n            using var context = new BlogsContext();\n\n            context.ChangeTracker.TrackGraph(\n                blog, node =>\n                    {\n                        var propertyEntry = node.Entry.Property(\"Id\");\n                        var keyValue = (int)propertyEntry.CurrentValue;\n\n                        if (keyValue == 0)\n                        {\n                            node.Entry.State = EntityState.Added;\n                        }\n                        else if (keyValue < 0)\n                        {\n                            propertyEntry.CurrentValue = -keyValue;\n                            node.Entry.State = EntityState.Deleted;\n                        }\n                        else\n                        {\n                            node.Entry.State = EntityState.Modified;\n                        }\n\n                        System.Console.WriteLine($\"Tracking {node.Entry.Metadata.DisplayName()} with key value {keyValue} as {node.Entry.State}\");\n\n                    });\n\n            context.SaveChanges();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Immutable Struct Instance C#\nDESCRIPTION: This C# snippet shows how to update an address when using an immutable `Address` struct. Since the struct is immutable, a new `Address` instance is created with the desired changes and assigned to the customer's `Address` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nvar currentAddress = customer.Address;\ncustomer.Address = new Address(\n    \"Peacock Lodge\", currentAddress.Line2, currentAddress.City, currentAddress.Country, currentAddress.PostCode);\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Installing EF Core MSBuild Tasks\nDESCRIPTION: Installs the Microsoft.EntityFrameworkCore.Tasks NuGet package, which is required to use the EF Core MSBuild integration. This allows for automatic generation of compiled models and precompiled queries during build or publish. It is essential that every project requiring generated files references this package directly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/msbuild.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.Tasks\n```\n\n----------------------------------------\n\nTITLE: Configure Keyless Entity Type in DbContext (C#)\nDESCRIPTION: This snippet demonstrates how to configure the keyless entity type in the `OnModelCreating` method of the `DbContext`. The `HasNoKey()` method is used to specify that the entity type is keyless, and the `ToView()` method is used to map it to the `MostPopularBlogsView` database view. This configuration informs EF Core how to query the view.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keyless-entity-types.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace KeylessEntityTypes\n{\n    public class MyContext : DbContext\n    {\n        public MyContext(DbContextOptions<MyContext> options)\n            : base(options)\n        {\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<MostPopularBlogs>().HasNoKey().ToView(\"MostPopularBlogsView\");\n        }\n\n        public DbSet<Blog> Blogs { get; set; }\n        public DbSet<Post> Posts { get; set; }\n\n        public DbSet<MostPopularBlogs> MostPopularBlogs { get; set; }\n\n    }\n\n    public class MostPopularBlogs\n    {\n        public string BlogName { get; set; }\n        public int PostCount { get; set; }\n    }\n\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Sample usage - requires a database connection and setup\n            var optionsBuilder = new DbContextOptionsBuilder<MyContext>();\n            optionsBuilder.UseSqlServer(\"YourConnectionStringHere\"); // Replace with your actual connection string\n\n            using (var context = new MyContext(optionsBuilder.Options))\n            {\n                var popularBlogs = context.MostPopularBlogs.ToList();\n\n                foreach (var blog in popularBlogs)\n                {\n                    Console.WriteLine($\"Blog: {blog.BlogName}, Post Count: {blog.PostCount}\");\n                }\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Value Comparer for Case-Sensitive Keys in C#\nDESCRIPTION: This code shows how to use a custom `ValueComparer` to enforce case-sensitive comparisons for string keys in EF Core 8.0 with SQL Server. It overrides the default case-insensitive comparison.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    var comparer = new ValueComparer<string>(\n        (l, r) => string.Equals(l, r, StringComparison.Ordinal),\n        v => v.GetHashCode(),\n        v => v);\n\n    modelBuilder.Entity<Blog>()\n        .Property(e => e.Id)\n        .Metadata.SetValueComparer(comparer);\n\n    modelBuilder.Entity<Post>(\n        b =>\n        {\n            b.Property(e => e.Id).Metadata.SetValueComparer(comparer);\n            b.Property(e => e.BlogId).Metadata.SetValueComparer(comparer);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Configure RowVersion Concurrency Token with Data Annotations - C#\nDESCRIPTION: Configures the Version property as a rowversion concurrency token using the Timestamp data annotation. This approach is specific to SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public int PersonId { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n\n    [Timestamp]\n    public byte[] Version { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Owned Entity: OrderDetails C#\nDESCRIPTION: Defines an `OrderDetails` class which contains two properties, `ShippingAddress` and `BillingAddress`, both of type `StreetAddress`.  This demonstrates a scenario where the same .NET type is used for multiple owned entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Modeling.OwnedEntities\n{\n    public class OrderDetails\n    {\n        public StreetAddress ShippingAddress { get; set; }\n        public StreetAddress BillingAddress { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Keyset Pagination with EF Core\nDESCRIPTION: This code snippet shows keyset-based pagination, a more efficient alternative to offset-based pagination. It utilizes a `WHERE` clause to filter rows based on the last known value from the previous page. This approach is less sensitive to concurrent updates and can offer significant performance improvements, especially with proper indexing. Assumes an index is defined on `PostId`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/pagination.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar lastId = 55;\nvar pageSize = 10;\n\nvar posts = await context.Posts\n    .OrderBy(p => p.PostId)\n    .Where(p => p.PostId > lastId)\n    .Take(pageSize)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Create EF Core Templates\nDESCRIPTION: This command creates EF Core templates for customizing scaffolded code when reverse engineering a model from a database. It requires the dotnet CLI tool and the EF Core templates to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_65\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new ef-templates\n```\n\n----------------------------------------\n\nTITLE: Define One-to-Many Relationship with Alternate Key\nDESCRIPTION: This C# code defines a one-to-many relationship between `Blog` and `Post` entities, using an alternate key (`AlternateId`) on the `Blog` entity as the target of the `Post.BlogId` foreign key. The `Blog` entity includes a collection navigation property to `Post`. Requires Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n        // Principal (parent)\n        public class Blog\n        {\n            public int Id { get; set; }\n            public int AlternateId { get; set; }                         // Alternate key as target of the Post.BlogId foreign key\n            public ICollection<Post> Posts { get; } = new List<Post>();  // Collection navigation containing dependents\n        }\n\n        // Dependent (child)\n        public class Post\n        {\n            public int Id { get; set; }\n            public int BlogId { get; set; }                              // Required foreign key property\n            public Blog Blog { get; set; } = null!;                      // Required reference navigation to principal\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Filters in OnModelCreating in C#\nDESCRIPTION: This code snippet demonstrates how to configure global query filters in the `OnModelCreating` method of a DbContext using the `HasQueryFilter` API. It applies filters to the `Blog` and `Post` entities based on `_tenantId` and `IsDeleted` properties, respectively. These filters are automatically applied to all LINQ queries for these entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().HasQueryFilter(b => EF.Property<int>(b, \"_tenantId\") == _tenantId);\n    modelBuilder.Entity<Post>().HasQueryFilter(p => !p.IsDeleted);\n}\n```\n\n----------------------------------------\n\nTITLE: New Cosmos DB Model Configuration C#\nDESCRIPTION: Demonstrates simplified model configuration in EF Core 6.0 for Azure Cosmos DB, using implicit ownership and requiring only the partition key to be configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Family>().HasPartitionKey(e => e.LastName);\n```\n\n----------------------------------------\n\nTITLE: Configuring PostMetadata Mapping to JSON C#\nDESCRIPTION: This C# code demonstrates how to configure the mapping of the `PostMetadata` aggregate type to a JSON column using EF Core's `OwnsOne` and `OwnsMany` methods. It configures mapping of `TopSearches`, `TopGeographies`, and nested `Updates` collections to be stored as JSON within the Post entity. `ToJson()` is used to map the aggregate root to a JSON document.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>().OwnsOne(\n    post => post.Metadata, ownedNavigationBuilder =>\n    {\n        ownedNavigationBuilder.ToJson();\n        ownedNavigationBuilder.OwnsMany(metadata => metadata.TopSearches);\n        ownedNavigationBuilder.OwnsMany(metadata => metadata.TopGeographies);\n        ownedNavigationBuilder.OwnsMany(\n            metadata => metadata.Updates,\n            ownedOwnedNavigationBuilder => ownedOwnedNavigationBuilder.OwnsMany(update => update.Commits));\n    });\n```\n\n----------------------------------------\n\nTITLE: AddBlogUrl Migration - C#\nDESCRIPTION: This code defines a migration named AddBlogUrl that adds a 'Url' column to the 'Blogs' table in the database.  The 'Up' method defines the changes to apply (adding the column), and the 'Down' method defines how to revert those changes (dropping the column).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/index.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MigrationsDemo.Migrations\n{\n    using System;\n    using System.Data.Entity.Migrations;\n\n    public partial class AddBlogUrl : DbMigration\n    {\n        public override void Up()\n        {\n            AddColumn(\"dbo.Blogs\", \"Url\", c => c.String());\n        }\n\n        public override void Down()\n        {\n            DropColumn(\"dbo.Blogs\", \"Url\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Conversion to String Convention for All Enum Properties\nDESCRIPTION: This code snippet shows how to configure a convention for converting all properties of a specific enum type (StatusEnum) to strings in Entity Framework Core. It overrides the ConfigureConventions method to define this convention.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Properties<StatusEnum>().HaveConversion<string>();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Tag to a Post using Skip Navigation in C#\nDESCRIPTION: This C# code demonstrates how to associate a `Post` and a `Tag` using the skip navigation property `Tags` on the `Post` entity.  It retrieves a post and a tag from the database context, adds the tag to the post's `Tags` collection, and then calls `DetectChanges` to ensure that EF Core recognizes the change. The code shows how skip navigations simplify many-to-many relationship manipulation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar post = context.Posts.Single(e => e.Id == 3);\nvar tag = context.Tags.Single(e => e.Id == 1);\n\npost.Tags.Add(tag);\n\ncontext.ChangeTracker.DetectChanges();\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Complex Types C#\nDESCRIPTION: This code demonstrates how to configure nested complex types within `OnModelCreating` using the `ComplexProperty` method. It configures the `Contact` property of the `Customer` entity and its nested properties like `Address`, `HomePhone` etc. It also configures the `ContactPhone`, `BillingAddress`, and `ShippingAddress` properties of the `Order` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Customer>(\n        b =>\n        {\n            b.ComplexProperty(\n                e => e.Contact,\n                b =>\n                {\n                    b.ComplexProperty(e => e.Address);\n                    b.ComplexProperty(e => e.HomePhone);\n                    b.ComplexProperty(e => e.WorkPhone);\n                    b.ComplexProperty(e => e.MobilePhone);\n                });\n        });\n\n    modelBuilder.Entity<Order>(\n        b =>\n        {\n            b.ComplexProperty(e => e.ContactPhone);\n            b.ComplexProperty(e => e.BillingAddress);\n            b.ComplexProperty(e => e.ShippingAddress);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding DbContext using .NET Core CLI\nDESCRIPTION: Scaffolds a DbContext using the EF Core tools in the .NET Core CLI, referencing a connection string stored in user secrets or configuration with the alias 'ConnectionStrings:YourDatabaseAlias'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-strings.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold Name=ConnectionStrings:YourDatabaseAlias Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Updating Single Property in JSON Column using EF Core\nDESCRIPTION: This C# code demonstrates updating a single property within a JSON document. It fetches an author and changes the 'Country' property within the nested 'Address' object of the 'Contact' JSON column.  EF Core optimizes this by using `JSON_MODIFY` to update only this specific property in the JSON document.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nvar arthur = await context.Authors.SingleAsync(author => author.Name.StartsWith(\"Arthur\"));\n\narthur.Contact.Address.Country = \"United Kingdom\";\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading without Proxies using Delegate Injection\nDESCRIPTION: This code snippet demonstrates lazy loading without proxies by injecting a delegate (Action<object, string>) representing the `ILazyLoader.Load` method. This avoids direct dependency on EF Core types in the entity classes. The `Posts` and `Blog` properties use the injected delegate to load related data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/lazy.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    private ICollection<Post> _posts;\n\n    public Blog()\n    {\n    }\n\n    private Blog(Action<object, string> lazyLoader)\n    {\n        LazyLoader = lazyLoader;\n    }\n\n    private Action<object, string> LazyLoader { get; set; }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    public ICollection<Post> Posts\n    {\n        get => LazyLoader.Load(this, ref _posts);\n        set => _posts = value;\n    }\n}\n\npublic class Post\n{\n    private Blog _blog;\n\n    public Post()\n    {\n    }\n\n    private Post(Action<object, string> lazyLoader)\n    {\n        LazyLoader = lazyLoader;\n    }\n\n    private Action<object, string> LazyLoader { get; set; }\n\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public Blog Blog\n    {\n        get => LazyLoader.Load(this, ref _blog);\n        set => _blog = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Columns in SQLite\nDESCRIPTION: This code snippet demonstrates updating a property within a JSON column in SQLite. It updates the `Country` property within the `Contact.Address` information for an author.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nvar arthur = await context.Authors.SingleAsync(author => author.Name.StartsWith(\"Arthur\"));\n\narthur.Contact.Address.Country = \"United Kingdom\";\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Current Values from Database in EF Core (C#)\nDESCRIPTION: This code retrieves the database values for an entity and sets both the current and original values of the entity to these database values. It uses `GetDatabaseValues` to fetch the values from the database, then `SetValues` to apply these values to the `CurrentValues` and `OriginalValues` properties of the entity's entry.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar databaseValues = context.Entry(blog).GetDatabaseValues();\ncontext.Entry(blog).CurrentValues.SetValues(databaseValues);\ncontext.Entry(blog).OriginalValues.SetValues(databaseValues);\n```\n\n----------------------------------------\n\nTITLE: Explicitly Delete Dependent Entity\nDESCRIPTION: This code snippet demonstrates how to explicitly delete a dependent entity using `context.Remove(blog)`. This is a mitigation strategy for the breaking change where orphaned dependents of optional relationships are no longer automatically deleted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Remove(blog);\n```\n\n----------------------------------------\n\nTITLE: DbContext with DbSet for Book Entity - C#\nDESCRIPTION: This code snippet shows a DbContext class (`BooksContext`) that includes a `DbSet<Book>` property. Because the `Book` entity has the `EntityTypeConfigurationAttribute`, EF Core will discover and apply the associated configuration when the model is being built. This approach allows for implicit configuration of entity types based on attributes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BooksContext : DbContext\n{\n    public DbSet<Book> Books { get; set; }\n\n    public BooksContext(DbContextOptions<BooksContext> options)\n        : base(options)\n    {\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Multiple Leaf Includes - C#\nDESCRIPTION: This code snippet demonstrates including multiple related entities for one of the entities being included. It loads `Blogs`, includes `Posts`, and then includes both the `Author` and `Tags` of the `Posts`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts)\n        .ThenInclude(p => p.Author)\n    .Include(b => b.Posts)\n        .ThenInclude(p => p.Tags)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Overriding Max Length using Data Annotation in EF Core\nDESCRIPTION: This code snippet shows how to override the default maximum string length set by a convention, using a data annotation (`MaxLengthAttribute`). This attribute is placed on the `Content` property of the `Post` entity, setting its maximum length to 4000, overriding the convention that sets all string properties to 512.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\n[MaxLength(4000)]\npublic string Content { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization of Connection String with Interceptor (C#)\nDESCRIPTION: This interceptor lazily initializes the database connection string using a factory. It overrides the ConnectionOpeningAsync method to asynchronously obtain the connection string and set it on the DbConnection if it's not already set.  It also throws an exception if the synchronous ConnectionOpening method is called.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\npublic class ConnectionStringInitializationInterceptor : DbConnectionInterceptor\n{\n    private readonly ITenantConnectionStringFactory _connectionStringFactory;\n\n    public ConnectionStringInitializationInterceptor(ITenantConnectionStringFactory connectionStringFactory)\n    {\n        _connectionStringFactory = connectionStringFactory;\n    }\n\n    public override InterceptionResult ConnectionOpening(\n        DbConnection connection,\n        ConnectionEventData eventData,\n        InterceptionResult result)\n        => throw new NotSupportedException(\"Synchronous connections not supported.\");\n\n    public override async ValueTask<InterceptionResult> ConnectionOpeningAsync(\n        DbConnection connection, ConnectionEventData eventData, InterceptionResult result,\n        CancellationToken cancellationToken = new())\n    {\n        if (string.IsNullOrEmpty(connection.ConnectionString))\n        {\n            connection.ConnectionString = (await _connectionStringFactory.GetConnectionStringAsync(cancellationToken));\n        }\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Tag to Post (EF Core)\nDESCRIPTION: Demonstrates how to add a tag to a post in a many-to-many relationship using EF Core. It retrieves existing Post and Tag entities from the database and then adds the Tag to the Post's Tags collection. Finally, it calls SaveChanges to persist the changes to the database. The TaggedOn property will be automatically populated due to the configuration in OnModelCreating.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar post = context.Posts.Single(e => e.Id == 3);\nvar tag = context.Tags.Single(e => e.Id == 1);\n\npost.Tags.Add(tag);\n\ncontext.SaveChanges();\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Install EF Core CLI tools globally\nDESCRIPTION: This command installs the .NET Core CLI tools for Entity Framework Core globally. This allows you to use the `dotnet ef` command from any project. It requires the .NET Core SDK to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/overview/install.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install --global dotnet-ef\n```\n\n----------------------------------------\n\nTITLE: Tagging Queries (C#)\nDESCRIPTION: This C# code demonstrates how to tag a LINQ query with the filename and line number using `TagWithCallSite()`. This tag will then appear in the generated SQL as a comment.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nvar results1 = context\n    .Customers\n    .TagWithCallSite()\n    .Where(c => c.Name.StartsWith(\"A\"))\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Type of Database Column - EF6 - C#\nDESCRIPTION: This snippet configures the data type of the `Name` property to \"varchar\" using the `HasColumnType` method. This allows mapping a CLR property to a specific database column type. Note that using IsUnicode is the preferred way to set columns to varchar, as it is database agnostic.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>()   \n    .Property(p => p.Name)   \n    .HasColumnType(\"varchar\");\n```\n\n----------------------------------------\n\nTITLE: Calculating Statistical Aggregates with EF Core\nDESCRIPTION: This C# code snippet demonstrates how to use statistical aggregate functions like VariancePopulation, VarianceSample, StandardDeviationPopulation, and StandardDeviationSample with EF Core 7. It groups downloads by uploader ID and calculates various statistical measures on the download counts.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Downloads\n                .GroupBy(download => download.Uploader.Id)\n                .Select(\n                    grouping => new\n                    {\n                        Author = grouping.Key,\n                        TotalCost = grouping.Sum(d => d.DownloadCount),\n                        AverageViews = grouping.Average(d => d.DownloadCount),\n                        VariancePopulation = EF.Functions.VariancePopulation(grouping.Select(d => d.DownloadCount)),\n                        VarianceSample = EF.Functions.VarianceSample(grouping.Select(d => d.DownloadCount)),\n                        StandardDeviationPopulation = EF.Functions.StandardDeviationPopulation(grouping.Select(d => d.DownloadCount)),\n                        StandardDeviationSample = EF.Functions.StandardDeviationSample(grouping.Select(d => d.DownloadCount))\n                    });\n```\n\n----------------------------------------\n\nTITLE: Mapping Result Columns from Stored Procedure\nDESCRIPTION: This C# code snippet demonstrates how to map result columns from a stored procedure to properties of a `document` entity in EF Core. The `HasResultColumn` method is used to map the `Id`, `FirstRecordedOn`, `RetrievedOn`, and `RowVersion` properties to corresponding result columns returned by the stored procedure after an insert operation. The parameter `storedProcedureBuilder` is being used to configure parameters and result columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nentityTypeBuilder.InsertUsingStoredProcedure(\n        storedProcedureBuilder =>\n        {\n            storedProcedureBuilder.HasParameter(document => document.Title);\n            storedProcedureBuilder.HasResultColumn(document => document.Id);\n            storedProcedureBuilder.HasResultColumn(document => document.FirstRecordedOn);\n            storedProcedureBuilder.HasResultColumn(document => document.RetrievedOn);\n            storedProcedureBuilder.HasResultColumn(document => document.RowVersion);\n        });\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Multiple ThenIncludes - C#\nDESCRIPTION: This code snippet demonstrates how to chain multiple calls to `ThenInclude` to continue including further levels of related data. It loads blogs, posts, author and author's address.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts)\n        .ThenInclude(p => p.Author)\n            .ThenInclude(a => a.Address)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Data using Distance Function\nDESCRIPTION: This code snippet demonstrates how to query spatial data using the `Distance` function in LINQ with EF Core and NetTopologySuite. It retrieves cities within a specified distance from a given location. Requires a DbContext and entities configured with spatial properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/spatial.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar melbourne = new Point(144.9631, -37.8136) { SRID = 4326 };\n\nusing (var context = new WideWorldImportersContext())\n{\n    var cities = context.Cities\n        .Where(c => c.Location.Distance(melbourne) < 100)\n        .ToList();\n\n    Console.WriteLine($\"Cities within 100km of Melbourne: {cities.Count}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Column Collation in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a column's collation in EF Core, specifically setting a SQL Server column to be case-insensitive. It requires the `Microsoft.EntityFrameworkCore` package. The code uses `UseCollation` to specify the desired collation for the column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\noptionsBuilder.UseSqlServer(\n    @\"Server=(localdb)\\mssqllocaldb;Database=Collation;\n        Trusted_Connection=True;MultipleActiveResultSets=true\",\n    x => x.UseCollation(\"SQL_Latin1_General_CP1_CI_AS\"));\n```\n\n----------------------------------------\n\nTITLE: Transactions Example - C#\nDESCRIPTION: Shows how to explicitly start and use transactions when using ExecuteUpdateAsync to ensure atomicity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\nusing (var transaction = context.Database.BeginTransaction())\n{\n    context.Blogs.ExecuteUpdate(/* some update */);\n    context.Blogs.ExecuteUpdate(/* another update */);\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Navigation Using Navigation Method in C#\nDESCRIPTION: This code snippet demonstrates how to configure a navigation property as required using the `Navigation` method within the `OnModelCreating` method of an Entity Framework context. It configures the `BlogHeader` navigation property on the `Blog` entity as required, ensuring that a `BlogHeader` must always exist for a `Blog` instance, typically when they share the same table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Navigation(e => e.BlogHeader)\n        .IsRequired();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Max String Length Convention in EF Core\nDESCRIPTION: This code snippet shows how to create a convention that sets the maximum length of all string properties in an EF Core model to 512. It iterates through all entity types and their declared properties, checking if the property type is a string, and then uses the builder to set the maximum length. The convention implements the `IModelFinalizingConvention` interface.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\npublic class MaxStringLengthConvention : IModelFinalizingConvention\n{\n    public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context)\n    {\n        foreach (var property in modelBuilder.Metadata.GetEntityTypes()\n                     .SelectMany(\n                         entityType => entityType.GetDeclaredProperties()\n                             .Where(\n                                 property => property.ClrType == typeof(string))))\n        {\n            property.Builder.HasMaxLength(512);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Comment with Data Annotations - C#\nDESCRIPTION: This code demonstrates how to set a comment on a database table using the [Comment] data annotation.  This allows for documenting the schema in the database itself.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[Comment(\"A table containing blog data\")]\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Subset of Entities in Hierarchy (TPC) - C#\nDESCRIPTION: This C# snippet retrieves entities from a subset of types within the hierarchy (specifically, 'Pets').  It demonstrates a query to retrieve entities only from the 'Pets' type in the hierarchy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Pets.ToList();\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration with Convention Builder (C#)\nDESCRIPTION: This code snippet illustrates how to conditionally configure facets of a property based on whether the configuration can be overridden. It demonstrates checking if both HasMaxLength and IsUnicode can be set before applying the configurations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nproperty.Builder.HasMaxLength(512)?.IsUnicode(false);\n```\n\n----------------------------------------\n\nTITLE: Use TPT Mapping Strategy - C#\nDESCRIPTION: Configures the entity to use the Table-Per-Type (TPT) mapping strategy explicitly within the `OnModelCreating` method. This sets the inheritance strategy at the model level.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Animal>().UseTptMappingStrategy();\n```\n\n----------------------------------------\n\nTITLE: ToString Query Translation on SQLite (C#)\nDESCRIPTION: This C# code shows how `ToString` is translated on SQLite. It queries the `Users` table, converting the `PhoneNumber` (a long) to a string using `ToString()` and then uses `EF.Functions.Like` to find phone numbers containing the pattern \"%555%\".\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nvar users = context.Users.Where(u => EF.Functions.Like(u.PhoneNumber.ToString(), \"%555%\")).ToList();\n```\n\n----------------------------------------\n\nTITLE: Update Entities from Union Query C#\nDESCRIPTION: This snippet shows how to update entities resulting from a `Union` query using `ExecuteUpdateAsync` in EF Core 8. It updates customers with a region of France and customers who have visited stores in France, setting the Tag property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_130\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.CustomersWithStores\n    .Where(e => e.Region == \"France\")\n    .Union(context.Stores.Where(e => e.Region == \"France\").SelectMany(e => e.Customers))\n    .ExecuteUpdateAsync(s => s.SetProperty(b => b.Tag, \"The French Connection\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Order Entity with Complex Types C#\nDESCRIPTION: This code defines the `Order` entity, which includes `PhoneNumber` and `Address` complex types. This illustrates how an entity can have multiple complex types as properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    public required string Contents { get; set; }\n    public required PhoneNumber ContactPhone { get; set; }\n    public required Address ShippingAddress { get; set; }\n    public required Address BillingAddress { get; set; }\n    public Customer Customer { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Value Object (Money) for Value Object Collection in C#\nDESCRIPTION: This code defines the `Money` struct and `Currency` enum used by the `AnnualFinance` value object. It mirrors the first `Money` definition, but is included here for completeness.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct Money\n{\n    [JsonConstructor]\n    public Money(decimal amount, Currency currency)\n    {\n        Amount = amount;\n        Currency = currency;\n    }\n\n    public override string ToString()\n        => (Currency == Currency.UsDollars ? \"$\" : \"£\") + Amount;\n\n    public decimal Amount { get; }\n    public Currency Currency { get; }\n}\n\npublic enum Currency\n{\n    UsDollars,\n    PoundsStirling\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Migration to a Specific Directory using .NET Core CLI\nDESCRIPTION: This command adds a new migration to a specific directory using the .NET Core CLI.  Replace 'InitialCreate' with a descriptive name and 'Your/Directory' with the desired directory path.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add InitialCreate --output-dir Your/Directory\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Skip Navigations in C#\nDESCRIPTION: This C# code snippet defines a model with Post, Tag, and PostTag entities. It includes skip navigation properties (`Tags` in `Post` and `Posts` in `Tag`) to directly access related entities in a many-to-many relationship, bypassing the need to explicitly manipulate the join entity (`PostTag`). The `PostTag` entity defines the composite key and foreign key relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int? BlogId { get; set; }\n    public Blog Blog { get; set; }\n\n    public IList<Tag> Tags { get; } = new List<Tag>(); // Skip collection navigation\n    public IList<PostTag> PostTags { get; } = new List<PostTag>(); // Collection navigation\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public string Text { get; set; }\n\n    public IList<Post> Posts { get; } = new List<Post>(); // Skip collection navigation\n    public IList<PostTag> PostTags { get; } = new List<PostTag>(); // Collection navigation\n}\n\npublic class PostTag\n{\n    public int PostId { get; set; } // First part of composite PK; FK to Post\n    public int TagId { get; set; } // Second part of composite PK; FK to Tag\n\n    public Post Post { get; set; } // Reference navigation\n    public Tag Tag { get; set; } // Reference navigation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Many-to-Many Relationship Model in EF Core\nDESCRIPTION: This code defines an EF Core model with a many-to-many relationship between Posts and Tags using an explicit PostTag join entity.  The PostTag entity contains composite primary keys that are also foreign keys to the Post and Tag entities.  Collection navigations are defined on Post and Tag, and reference navigations on PostTag.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int? BlogId { get; set; }\n    public Blog Blog { get; set; }\n\n    public IList<PostTag> PostTags { get; } = new List<PostTag>(); // Collection navigation\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public string Text { get; set; }\n\n    public IList<PostTag> PostTags { get; } = new List<PostTag>(); // Collection navigation\n}\n\npublic class PostTag\n{\n    public int PostId { get; set; } // First part of composite PK; FK to Post\n    public int TagId { get; set; } // Second part of composite PK; FK to Tag\n\n    public Post Post { get; set; } // Reference navigation\n    public Tag Tag { get; set; } // Reference navigation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Index - Data Annotations - C#\nDESCRIPTION: This code snippet shows how to create a simple index on a property using Data Annotations in EF Core. The `[Index]` attribute is used to specify the column should be indexed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Index]\npublic string Name { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Setting Table Comment with Fluent API - C#\nDESCRIPTION: This code shows how to configure a comment for a database table using the HasComment() method in OnModelCreating with the Fluent API. The comment is stored directly in the database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().ToTable(\"Blogs\", t => t.HasComment(\"A table containing blog data\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PropertySaveBehavior for Value Generation Override\nDESCRIPTION: This C# code snippet configures the property save behavior to allow explicitly providing values for properties configured as value generated on add or update.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(b => b.LastUpdated)\n    .ValueGeneratedOnAddOrUpdate()\n    .Metadata.SetAfterSaveBehavior(PropertySaveBehavior.Ignore);\n```\n\n----------------------------------------\n\nTITLE: Loading All Data with EF Core and C#\nDESCRIPTION: This snippet demonstrates how to load all data from a database table using Entity Framework Core and LINQ. It queries the database context to retrieve all entities of a specific type. The code uses the `ToList()` method to execute the query and materialize the results.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/index.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Querying/Overview/Program.cs#LoadingAllData)]\n```\n\n----------------------------------------\n\nTITLE: Serializing with ReferenceHandler.Preserve in System.Text.Json (C#)\nDESCRIPTION: This code snippet demonstrates how to use System.Text.Json's `ReferenceHandler.Preserve` option to handle circular references and duplicate entities during serialization. It serializes a list of 'Post' objects, ensuring that duplicate objects are represented as references. Requires .NET Core 3.1 or later.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar serialized = System.Text.Json.JsonSerializer.Serialize(posts, new System.Text.Json.JsonSerializerOptions\n            {\n                ReferenceHandler = ReferenceHandler.Preserve,\n                WriteIndented = true\n            });\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Properties with ExecuteUpdateAsync - C#\nDESCRIPTION: This snippet demonstrates updating multiple properties (IsVisible and Rating) of blogs with a rating less than 3 using ExecuteUpdateAsync. It chains multiple SetProperty calls to update different properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nawait context.Blogs\n    .Where(b => b.Rating < 3)\n    .ExecuteUpdateAsync(setters => setters\n        .SetProperty(b => b.IsVisible, false)\n        .SetProperty(b => b.Rating, 0));\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure Returning Inserted Values\nDESCRIPTION: This SQL code defines a stored procedure named `Documents_Insert` that inserts data into the `Documents` table. It takes `Title` as an input parameter and returns the generated `Id`, default value of `FirstRecordedOn`, computed value of `RetrievedOn`, and automatically generated `RowVersion` for the inserted row using the `OUTPUT INSERTED` clause. The primary purpose is to retrieve values generated by the database during the insert operation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_86\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE [dbo].[Documents_Insert]\n    @Title [nvarchar](max)\nAS\nBEGIN\n    INSERT INTO [Documents] ([Title])\n    OUTPUT INSERTED.[Id], INSERTED.[FirstRecordedOn], INSERTED.[RetrievedOn], INSERTED.[RowVersion]\n    VALUES (@Title);\nEND\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext from Database (PowerShell)\nDESCRIPTION: This example demonstrates scaffolding a DbContext and entity types from an existing database using a connection string.  It outputs the generated code into a specified directory.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext \"Server=(localdb)\\mssqllocaldb;Database=Blogging;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models\n```\n\n----------------------------------------\n\nTITLE: Injecting DbContext Service\nDESCRIPTION: This example shows how to inject a DbContext into an entity's constructor.  The injected context can be used to access the database for purposes like lazy loading, but it's important to handle cases where EF Core might not be creating the instance. This example uses the injected context to get the number of posts in a blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/constructors.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public Blog()\n    {\n    }\n\n    private Blog(BloggingContext context)\n    {\n        Context = context;\n    }\n\n    private BloggingContext Context { get; set; }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Author { get; set; }\n\n    public ICollection<Post> Posts { get; set; }\n\n    public int PostsCount\n        => Posts?.Count\n           ?? Context?.Set<Post>().Count(p => Id == EF.Property<int?>(p, \"BlogId\"))\n           ?? 0;\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public DateTime PostedOn { get; set; }\n\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing LINQ with SqlQuery - SQL Server\nDESCRIPTION: This code snippet demonstrates how to compose LINQ operators over a SQL query using SqlQuery in EF Core with SQL Server. It returns the BlogId values which are above the average BlogId.  The SQL query must name the output column Value for LINQ composition to work. Requires Entity Framework Core and a database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nvar overAverageIds = await context.Database\n    .SqlQuery<int>($\"SELECT [BlogId] AS [Value] FROM [Blogs]\")\n    .Where(id => id > context.Blogs.Average(b => b.BlogId))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Tagged Query Interceptor (SQL)\nDESCRIPTION: Shows the SQL generated by EF Core when a query is tagged and intercepted. The query includes the tag as a comment and the appended `OPTION (ROBUST PLAN)` hint.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n-- Use hint: robust plan\n\nSELECT [b].[Id], [b].[Name]\nFROM [Blogs] AS [b] OPTION (ROBUST PLAN)\n```\n\n----------------------------------------\n\nTITLE: PostSummary Class Definition C#\nDESCRIPTION: Defines a 'PostSummary' class that represents a subset of information from both the 'Posts' and 'Blogs' tables.  This class is used to demonstrate querying data from multiple tables using a raw SQL query and mapping the results to an unmapped type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\npublic class PostSummary\n{\n    public string BlogName { get; set; }\n    public string PostTitle { get; set; }\n    public DateOnly PublishedOn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Principal/Parent in C# with Optional Relationship\nDESCRIPTION: This C# code snippet demonstrates deleting a blog (principal/parent) that has an optional relationship with posts (dependent/child) using Entity Framework Core.  When `SaveChanges` is called, the `BlogId` foreign key property in the related `Posts` will be set to null.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blog = context.Blogs.OrderBy(e => e.Name).Include(e => e.Posts).First();\n\ncontext.Remove(blog);\n            \ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Persisting Collection of Owned Entities in EF Core\nDESCRIPTION: This code shows how a collection of owned entities can be persisted without explicit key values, using the classes Distributor and StreetAddress. The ShippingCenters list in Distributor will be persisted as an array of objects in the Cosmos DB document.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nvar distributor = new Distributor\n{\n    Id = 1,\n    ShippingCenters = new List<StreetAddress>\n        {\n            new StreetAddress { City = \"Phoenix\", Street = \"500 S 48th Street\" },\n            new StreetAddress { City = \"Anaheim\", Street = \"5650 Dolly Ave\" }\n        }\n};\n\ncontext.Add(distributor);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Configure Hi-Lo Key Generation\nDESCRIPTION: This C# code configures the Blog and Post entities to use the Hi-Lo value generation strategy for their primary keys.  By using Hi-Lo, EF Core 7 can optimize the insert graph to a single database round trip because the key values are allocated in batches from the server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Blog>().Property(e => e.Id).UseHiLo();\n            modelBuilder.Entity<Post>().Property(e => e.Id).UseHiLo();\n```\n\n----------------------------------------\n\nTITLE: Configure DbContext with Logger Interceptor C#\nDESCRIPTION: Configures the `DbContext` to use the `LoggerInjectionInterceptor`. A new instance of the interceptor is created for each `DbContext` instance. This ensures that each context has its own logger. The interceptor is added using the `AddInterceptors` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_97\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.AddInterceptors(new LoggerInjectionInterceptor());\n```\n\n----------------------------------------\n\nTITLE: Updating the database via Visual Studio\nDESCRIPTION: This command applies pending migrations to the database using the Package Manager Console in Visual Studio. This creates or updates the database schema according to the migrations.  EF Core and a valid connection string are required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Database\n```\n\n----------------------------------------\n\nTITLE: Lookup Tracked Entity by Composite Primary Key (EF Core)\nDESCRIPTION: This code demonstrates how to lookup a tracked entity using a composite primary key with `FindEntryUntyped`. This method accepts an array of objects representing the key values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nvar postTagEntry = context.Set<PostTag>().Local.FindEntryUntyped(new object[] { 4, \"TagEF\" });\n```\n\n----------------------------------------\n\nTITLE: TPH Inheritance Model Definition C#\nDESCRIPTION: Defines a TPH (Table per Hierarchy) inheritance model with a base class `Document` and derived classes `Book`, `PaperbackEdition`, `HardbackEdition`, and `Magazine`. This model showcases how EF Core uses a discriminator column to distinguish between different types in the hierarchy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class Document\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n}\n\npublic abstract class Book : Document\n{\n    public string? Isbn { get; set; }\n}\n\npublic class PaperbackEdition : Book\n{\n}\n\npublic class HardbackEdition : Book\n{\n}\n\npublic class Magazine : Document\n{\n    public int IssueNumber { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Column Names with Data Annotations - C#\nDESCRIPTION: This code snippet shows how to configure the name of the column in the database to which a property is mapped, using the `[Column]` data annotation in Entity Framework Core. The `Name` property of the attribute specifies the column name. The dependency is System.ComponentModel.DataAnnotations.Schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations.Schema;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    [Column(\"blog_title\")]\n    public string Title { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Opting out of OUTPUT clause in SQL Server/Azure SQL\nDESCRIPTION: This C# code snippet shows how to opt-out of using the `OUTPUT` clause when updating data in SQL Server or Azure SQL using EF Core 8.  The `UseSqlOutputClause(false)` method is used in the `ToTable` configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Customer>().ToTable(tb => tb.UseSqlOutputClause(false));\n```\n\n----------------------------------------\n\nTITLE: Translating String.IndexOf in EF Core 7\nDESCRIPTION: This C# code snippet demonstrates how EF Core 7 translates the String.IndexOf method in LINQ queries. It selects posts and calculates the index of the substring \"Entity\" within the post content.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts\n                .Select(post => new { post.Title, IndexOfEntity = post.Content.IndexOf(\"Entity\") })\n                .Where(post => post.IndexOfEntity > 0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Alternate Key with String in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a composite alternate key as the principal key for a relationship in Entity Framework Core using strings. It uses `HasPrincipalKey` with the strings \"AlternateId1\" and \"AlternateId2\" to specify that the combination of these properties in `Blog` entity will be used as the principal key in relationship with `Posts`. This example configures composite keys with string parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasPrincipalKey(\"AlternateId1\", \"AlternateId2\");\n```\n\n----------------------------------------\n\nTITLE: Dynamically Constructing a Query with Expression API and Parameter in EF Core\nDESCRIPTION: This code snippet demonstrates dynamically building a query using the Expression API, but this time employing a parameter instead of a constant value. This approach prevents unnecessary query recompilations, allowing EF Core and the database to reuse cached query plans, resulting in improved performance and reduced resource consumption.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar blogName = _seed.Blogs.First().Name;\n\nusing (var context = new BloggingContext(_options))\n{\n    var blogParameter = Expression.Parameter(typeof(Blog), \"b\");\n    var nameProperty = typeof(Blog).GetProperty(nameof(Blog.Name));\n    var equalsMethod = typeof(string).GetMethod(nameof(string.Equals), new[] { typeof(string), typeof(string), typeof(StringComparison) });\n\n    var blogNameParameter = Expression.Parameter(typeof(string), \"blogName\");\n    var body = Expression.Call(null, equalsMethod, Expression.Property(blogParameter, nameProperty), blogNameParameter, Expression.Constant(StringComparison.OrdinalIgnoreCase));\n\n    var lambda = Expression.Lambda<Func<Blog, string, bool>>(body, blogParameter, blogNameParameter);\n\n    var query = context.Blogs.Where(lambda.Compile()(_seed.Blogs.First(), blogName));\n\n    query.ToList();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Collation (C#)\nDESCRIPTION: Configures the collation for a specific column in an entity, allowing control over case sensitivity and other textual aspects. This is done through the `modelBuilder` Fluent API, using the `UseCollation` method to specify the desired collation. The indexes created on this column will function accordingly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<User>()\n    .Property(e => e.Name)\n    .UseCollation(\"SQL_Latin1_General_CP1_CS_AS\");\n```\n\n----------------------------------------\n\nTITLE: Optional Navigation to Address Filter Issues in C#\nDESCRIPTION: This code snippet configures an optional navigation property between `Post` and `Blog`.  Using optional navigation (i.e., making the navigation property nullable) changes the generated SQL to use `LEFT JOIN`, preventing the global query filter on `Blog` from inadvertently filtering out `Post` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasOne(p => p.Blog)\n        .WithMany(b => b.Posts)\n        .IsRequired(false);\n    modelBuilder.Entity<Blog>().HasQueryFilter(b => b.Url.Contains(\"fish\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Use Identity Columns for TPC in EF Core\nDESCRIPTION: This C# code demonstrates how to configure EF Core to use Identity columns for key generation with the TPC strategy. Each table is configured with a specific seed and increment value to avoid key conflicts. This is a more complex approach compared to using sequences, but it's an alternative when sequences are not available or desired.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Cat>().ToTable(\"Cats\", tb => tb.Property(e => e.Id).UseIdentityColumn(1, 4));\n            modelBuilder.Entity<Dog>().ToTable(\"Dogs\", tb => tb.Property(e => e.Id).UseIdentityColumn(2, 4));\n            modelBuilder.Entity<FarmAnimal>().ToTable(\"FarmAnimals\", tb => tb.Property(e => e.Id).UseIdentityColumn(3, 4));\n            modelBuilder.Entity<Human>().ToTable(\"Humans\", tb => tb.Property(e => e.Id).UseIdentityColumn(4, 4));\n```\n\n----------------------------------------\n\nTITLE: JSON Conversion Configuration (C#)\nDESCRIPTION: This C# code configures the `Name` property of the `Customer` entity to be converted to and from JSON when interacting with the database. It uses `JsonSerializer.Serialize` and `JsonSerializer.Deserialize` methods for conversion. This enables storing the `Name` value object as a JSON string in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Customer>()\n    .Property(e => e.Name)\n    .HasConversion(\n        v => JsonSerializer.Serialize(v, null),\n        v => JsonSerializer.Deserialize<Name>(v, null));\n```\n\n----------------------------------------\n\nTITLE: Defining Customer, ContactInfo, and Address Classes in C#\nDESCRIPTION: This C# code defines three classes: Customer, ContactInfo, and Address. Customer has properties like Id, Name, and ContactInfo. ContactInfo and Address are marked as [Owned], indicating they are owned entities and mapped to the same table as Customer. None of the properties in ContactInfo or Address are required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public ContactInfo ContactInfo { get; set; }\n}\n\n[Owned]\npublic class ContactInfo\n{\n    public string Phone { get; set; }\n    public Address Address { get; set; }\n}\n\n[Owned]\npublic class Address\n{\n    public string House { get; set; }\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string Postcode { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Override SaveChanges to Set Payload Data (EF Core)\nDESCRIPTION: Demonstrates how to override the SaveChanges method in the DbContext to process PostTag entities before they are saved to the database. This example sets the 'TaggedBy' payload property for any newly added PostTag entities. This is useful for applying consistent payload values across all new join entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\npublic override int SaveChanges()\n{\n    foreach (var entityEntry in ChangeTracker.Entries<PostTag>())\n    {\n        if (entityEntry.State == EntityState.Added)\n        {\n            entityEntry.Entity.TaggedBy = \"ajcvickers\";\n        }\n    }\n\n    return base.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: No-Tracking Query for Blogs (EF Core)\nDESCRIPTION: This code snippet demonstrates how to perform a no-tracking query for blogs using EF Core. The `AsNoTracking()` method ensures that the entities returned are not tracked by the `DbContext`. This enables lazy-loading after the query is executed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await context.Blogs.AsNoTracking().ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Cascade Delete in SQL Server\nDESCRIPTION: This SQL snippet shows how to create a 'Posts' table with a foreign key constraint to the 'Blogs' table. The constraint is configured with `ON DELETE CASCADE`, meaning when a blog is deleted, all associated posts are also deleted automatically by the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Posts] (\n    [Id] int NOT NULL IDENTITY,\n    [Title] nvarchar(max) NULL,\n    [Content] nvarchar(max) NULL,\n    [BlogId] int NOT NULL,\n    CONSTRAINT [PK_Posts] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Posts_Blogs_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [Blogs] ([Id]) ON DELETE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Updating the database via .NET Core CLI\nDESCRIPTION: This command updates the database to the latest migration using the .NET Core CLI. It applies any pending migrations to the database, creating the schema if it doesn't exist. Requires a valid connection string and EF Core setup.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef database update\n```\n\n----------------------------------------\n\nTITLE: Specify Join Entity Type in Many-to-Many (EF Core 6)\nDESCRIPTION: This snippet shows how to explicitly specify the join entity type (`CatHuman`) in a many-to-many relationship in EF Core 6. This allows more control over the join table.  It requires the creation of a `CatHuman` class or equivalent.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_138\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Cat>()\n    .HasMany(e => e.Humans)\n    .WithMany(e => e.Cats)\n    .UsingEntity<CatHuman>();\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Index - Fluent API - C#\nDESCRIPTION: This code snippet shows how to create a simple index on a property using the Fluent API in EF Core. The `HasIndex` method is used to configure the index on the specified property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasIndex(b => b.Url);\n```\n\n----------------------------------------\n\nTITLE: Define Model Classes for Blog and Post in C#\nDESCRIPTION: These C# classes define the data model for a Blog and a Post. The `virtual` keyword enables lazy loading for the navigation properties. These classes will be used by Entity Framework to create the database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n\n    public virtual List<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int PostId { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int BlogId { get; set; }\n    public virtual Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Perform Data Access with BlogContext - C#\nDESCRIPTION: This code demonstrates how to use the BlogContext to add a new Blog to the database and then retrieve and print all blogs from the database.  It utilizes the DbContext and DbSet to interact with the database and perform basic CRUD operations.  It leverages Entity Framework to handle database interactions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace MigrationsDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            using (var db = new BlogContext())\n            {\n                db.Blogs.Add(new Blog { Name = \"Another Blog \" });\n                db.SaveChanges();\n\n                foreach (var blog in db.Blogs)\n                {\n                    Console.WriteLine(blog.Name);\n                }\n            }\n\n            Console.WriteLine(\"Press any key to exit...\");\n            Console.ReadKey();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ValueGeneratedOnAdd Configuration C#\nDESCRIPTION: Configures the `Id` properties of `Product` and `Category` entities to be automatically generated upon adding new entities to the database.  This sets up the database to generate the key values for these entities when they are inserted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_175\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Product>().Property(product => product.Id).ValueGeneratedOnAdd();\nmodelBuilder.Entity<Category>().Property(category => category.Id).ValueGeneratedOnAdd();\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many relationships with Alternate Keys\nDESCRIPTION: Configures the many-to-many relationship between `Post` and `Tag` using alternate keys.  The HasPrincipalKey method specifies that the alternate key property (AlternateKey) should be used for the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity(\n            r => r.HasOne(typeof(Tag)).WithMany().HasPrincipalKey(nameof(Tag.AlternateKey)),\n            l => l.HasOne(typeof(Post)).WithMany().HasPrincipalKey(nameof(Post.AlternateKey)));\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Blog with Database Cascade Deletes Enabled (C#)\nDESCRIPTION: This C# snippet demonstrates deleting a blog from the database when cascade deletes are configured on the database foreign key constraint. It assumes cascade delete is enabled on the foreign key between the `Blogs` and `Posts` tables in the database. The `Include` is intentionally omitted to showcase that posts are not loaded but are deleted due to the database cascade configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n            var blog = context.Blogs.OrderBy(e => e.Name).First();\n\n            context.Remove(blog);\n            \n            context.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: ForeignKey Attribute on Dependent Navigation in EF Core\nDESCRIPTION: This example illustrates using the `[ForeignKey]` attribute on the dependent navigation property (`Blog`) to specify the `BlogKey` property as the foreign key. This is an alternative to placing the attribute directly on the foreign key property itself.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/mapping-attributes.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public string Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    public string BlogKey { get; set; }\n\n    [ForeignKey(nameof(BlogKey))]\n    public Blog Blog { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Configuration C#\nDESCRIPTION: Configures the `Id` property of the `Product` entity to use a sequence named \"ProductsSequence\" in the \"northwind\" schema for key value generation. It demonstrates how to specify a custom sequence name and schema for key generation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_177\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Product>()\n    .Property(product => product.Id)\n    .UseSequence(\"ProductsSequence\", \"northwind\");\n```\n\n----------------------------------------\n\nTITLE: Filtered Include in EF Core 5.0 (C#)\nDESCRIPTION: Illustrates how to use filtered include in EF Core 5.0 to only include related entities that match a specific condition. This example filters posts based on their title.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await context.Blogs\n    .Include(e => e.Posts.Where(p => p.Title.Contains(\"Cheese\")))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Initialized Collection Navigation - C#\nDESCRIPTION: This snippet shows an initialized collection navigation property. Initializing the collection prevents null reference exceptions and allows adding posts without checking for a null collection. It uses a List<Post> for efficient management of related entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic ICollection<Post> ThePosts { get; } = new List<Post>();\n```\n\n----------------------------------------\n\nTITLE: Owner Entity: Order C#\nDESCRIPTION: Defines an `Order` class with an `Id` and a `ShippingAddress` property of type `StreetAddress`. The `ShippingAddress` is an owned entity of the `Order` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Modeling.OwnedEntities\n{\n    public class Order\n    {\n        public int Id { get; set; }\n        public StreetAddress ShippingAddress { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Blogs with LINQ and Pre-compiled Queries in C#\nDESCRIPTION: This C# code snippet shows a simple EF query that retrieves blogs with a specific name. When using NativeAOT with pre-compiled queries, EF will generate an interceptor to handle this query, embedding the SQL directly into the application to improve startup performance. The query filters blogs where the 'Name' property equals 'foo' and retrieves them as a list.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = await context.Blogs.Where(b => b.Name == \"foo\").ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Updating Complex Type Properties using ExecuteUpdate in C#\nDESCRIPTION: This C# code updates the StoreAddress (a complex type) of stores located in Germany using ExecuteUpdateAsync. It creates a new Address object and sets it as the new StoreAddress for the filtered stores. Note that individual properties are updated which is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nvar newAddress = new Address(\"Gressenhall Farm Shop\", null, \"Beetley\", \"Norfolk\", \"NR20 4DR\");\n\n            await context.Stores\n                .Where(e => e.Region == \"Germany\")\n                .ExecuteUpdateAsync(s => s.SetProperty(b => b.StoreAddress, newAddress));\n```\n\n----------------------------------------\n\nTITLE: Enum to String Conversion with Data Annotations\nDESCRIPTION: This code snippet shows how to use data annotations to configure a value conversion by specifying the database column type.  When the column type is set to a string type like \"nvarchar(24)\", EF Core automatically performs the enum to string conversion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class Rider2\n{\n    public int Id { get; set; }\n\n    [Column(TypeName = \"nvarchar(24)\")]\n    public EquineBeast Mount { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Key on Private Field\nDESCRIPTION: This snippet demonstrates how to define a primary key on a private field using the PrimaryKey attribute in EF Core 7.  This is useful when you want to expose the primary key through a different mechanism, or not expose it at all.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_157\n\nLANGUAGE: C#\nCODE:\n```\n[PrimaryKey(nameof(_id))]\npublic class Tag\n{\n    private readonly int _id;\n}\n```\n\n----------------------------------------\n\nTITLE: OwnsOne Nested Configuration C#\nDESCRIPTION: Demonstrates configuring nested owned entities using chained `OwnsOne` method calls in `OnModelCreating`. It defines the relationships between `DetailedOrder`, `OrderDetails`, and `StreetAddress` types. Shows how to define the navigation property pointing back at the owner.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Modeling.OwnedEntities\n{\n    public class OwnedEntityContext : DbContext\n    {\n        public DbSet<DetailedOrder> DetailedOrders { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<DetailedOrder>(builder =>\n            {\n                builder.OwnsOne(order => order.OrderDetails, od =>\n                {\n                    od.OwnsOne(orderDetails => orderDetails.ShippingAddress);\n                    od.OwnsOne(orderDetails => orderDetails.BillingAddress);\n                    od.WithOwner(d => d.OrderDetails);\n                });\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AsSplitQuery - C#\nDESCRIPTION: This code snippet shows how to use `AsSplitQuery` to force EF Core to generate separate SQL queries for loading related entities, avoiding JOINs. The `Blogs` and `Posts` will be loaded in separate queries. Requires `Microsoft.EntityFrameworkCore` package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\noptions.UseSqlServer(connectionString)\n               .UseQuerySplittingBehavior(QuerySplittingBehavior.SingleQuery);\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await context.Blogs.AsSplitQuery().ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configure Join Entity with Key (EF Core 6)\nDESCRIPTION: This example demonstrates how to specify the entity type and configure the composite key for the join entity in a many-to-many relationship. This is done using the `UsingEntity` method. It requires the creation of a `CatHuman` class with `CatsId` and `HumansId` properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_139\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Cat>()\n    .HasMany(e => e.Humans)\n    .WithMany(e => e.Cats)\n    .UsingEntity<CatHuman>(\n        e => e.HasKey(e => new { e.CatsId, e.HumansId }));\n```\n\n----------------------------------------\n\nTITLE: Mapping Entity to Stored Procedures - C#\nDESCRIPTION: This code snippet demonstrates how to map an entity to stored procedures using the Fluent API in Entity Framework Code First. It configures the 'Blog' entity to use stored procedures for insert, update, and delete operations based on naming conventions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures();\n```\n\n----------------------------------------\n\nTITLE: Creating and Seeding a Test Database in EF Core (C#)\nDESCRIPTION: This class fixture is responsible for creating, seeding, and managing the test database. It drops the database if it exists, creates it using the latest model configuration, and seeds it with data for tests.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestDatabaseFixture\n{\n    private static readonly object _lock = new();\n    private static bool _databaseInitialized;\n\n    public TestDatabaseFixture()\n    {\n        lock (_lock)\n        {\n            if (!_databaseInitialized)\n            {\n                using (var context = CreateContext())\n                {\n                    context.Database.EnsureDeleted();\n                    context.Database.EnsureCreated();\n\n                    var one = new Blog { Name = \"Blog1\", Url = \"http://sample.com/blog1\" };\n                    var two = new Blog { Name = \"Blog2\", Url = \"http://sample.com/blog2\" };\n                    context.AddRange(one, two);\n\n                    context.SaveChanges();\n                }\n\n                _databaseInitialized = true;\n            }\n        }\n    }\n\n    public BloggingContext CreateContext()\n        => new BloggingContext(new DbContextOptionsBuilder<BloggingContext>()\n            .UseSqlServer(\"Server=(localdb)\\mssqllocaldb;Database=EFCore.Docs.Samples.Testing;Trusted_Connection=True\")\n            .Options);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Read and Write Data with Entity Framework Code First\nDESCRIPTION: This code demonstrates how to create and save a new Blog to the database using the BloggingContext. It then retrieves all Blogs, ordered by name, and prints them to the console.  It uses LINQ to query the data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nclass Program\n{\n    static void Main(string[] args)\n    {\n        using (var db = new BloggingContext())\n        {\n            // Create and save a new Blog\n            Console.Write(\"Enter a name for a new Blog: \");\n            var name = Console.ReadLine();\n\n            var blog = new Blog { Name = name };\n            db.Blogs.Add(blog);\n            db.SaveChanges();\n\n            // Display all Blogs from the database\n            var query = from b in db.Blogs\n                        orderby b.Name\n                        select b;\n\n            Console.WriteLine(\"All blogs in the database:\");\n            foreach (var item in query)\n            {\n                Console.WriteLine(item.Name);\n            }\n\n            Console.WriteLine(\"Press any key to exit...\");\n            Console.ReadKey();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Foreign Keys with Join Class C#\nDESCRIPTION: Configures the foreign keys explicitly for the many-to-many relationship using the PostTag join entity.  This is useful when property names don't follow EF Core conventions.  It specifies the relationships and foreign keys using HasOne and HasForeignKey.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>(\n            r => r.HasOne<Tag>().WithMany().HasForeignKey(e => e.TagId),\n            l => l.HasOne<Post>().WithMany().HasForeignKey(e => e.PostId));\n}\n```\n\n----------------------------------------\n\nTITLE: Define Composite Foreign Key - C#\nDESCRIPTION: Demonstrates how to define a composite foreign key using the `[ForeignKey]` and `[Column(Order=)]` annotations. This configuration links a foreign key to a composite primary key in another entity, ensuring data integrity and relational consistency. The `Order` values in the foreign key properties must match the relative order of the primary key properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PassportStamp\n    {\n        [Key]\n        public int StampId { get; set; }\n        public DateTime Stamped { get; set; }\n        public string StampingCountry { get; set; }\n\n        [ForeignKey(\"Passport\")]\n        [Column(Order = 1)]\n        public int PassportNumber { get; set; }\n\n        [ForeignKey(\"Passport\")]\n        [Column(Order = 2)]\n        public string IssuingCountry { get; set; }\n\n        public Passport Passport { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Point Read with EF Core and Azure Cosmos DB\nDESCRIPTION: This snippet demonstrates a point read operation in EF Core, which retrieves a single document from Azure Cosmos DB using the ID and partition key. The SingleAsync() method is used to ensure that exactly one document is returned. Providing both the ID and partition key allows EF Core to execute an efficient point read operation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar session = await context.Sessions.SingleAsync(\n    e => e.Id == someId\n         && e.TenantId == tenantId\n         && e.UserId == userId\n         && e.SessionId == sessionId);\n```\n\n----------------------------------------\n\nTITLE: Filtered Include on Hidden Navigations\nDESCRIPTION: This C# code snippet demonstrates how to use Include with EF.Property to perform filtered includes on hidden navigation properties in EF Core 7. It filters and orders the Posts collection of a Blog even if the Posts navigation property is private.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Blogs.Include(\n                blog => EF.Property<ICollection<Post>>(blog, \"Posts\")\n                    .Where(post => post.Content.Contains(\".NET\"))\n                    .OrderBy(post => post.Title));\n```\n\n----------------------------------------\n\nTITLE: Translate Math.Max to GREATEST - SQL\nDESCRIPTION: This snippet shows the SQL translation of the C# Math.Max example when targeting SQL Server 2022. It uses the GREATEST function to compare the value of the count with a threshold.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[value]\nFROM [Pubs] AS [p]\nCROSS APPLY OPENJSON([p].[Counts]) WITH ([value] int '$') AS [c]\nWHERE GREATEST([c].[value], @__threshold_0) > @__top_1\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Parameter in Stored Procedure\nDESCRIPTION: This C# snippet demonstrates how to configure an output parameter for a stored procedure using EF Core. It specifically shows how to set the `RetrievedOn` property of a `document` entity as an output parameter by using `parameterBuilder.IsOutput()`. This configures the parameter to return a value from the stored procedure back to the application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstoredProcedureBuilder.HasParameter(\n    document => document.RetrievedOn, \n    parameterBuilder => parameterBuilder.IsOutput());\n```\n\n----------------------------------------\n\nTITLE: Sharing Transaction Across DbContext Instances\nDESCRIPTION: This code demonstrates how to share a transaction across multiple DbContext instances using a shared DbConnection and DbTransaction. It creates two context instances, shares the same connection and transaction between them using `DbContext.Database.UseTransaction(DbTransaction)`, and performs operations within the shared transaction.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/transactions.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing (var connection = new SqlConnection(\"Server=(localdb)\\mssqllocaldb;Database=SharingTransactions;Trusted_Connection=True;MultipleActiveResultSets=true\"))\n{\n    connection.Open();\n\n    var options = new DbContextOptionsBuilder<BloggingContext>()\n        .UseSqlServer(connection)\n        .Options;\n\n    using (var context1 = new BloggingContext(options))\n    using (var context2 = new BloggingContext(options))\n    {\n        using (var transaction = connection.BeginTransaction())\n        {\n            context1.Database.UseTransaction(transaction);\n            context2.Database.UseTransaction(transaction);\n\n            context1.Blogs.Add(new Blog { Name = \"My new Blog #1\" });\n            context1.SaveChanges();\n\n            context2.Blogs.Add(new Blog { Name = \"My new Blog #2\" });\n            context2.SaveChanges();\n\n            transaction.Commit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ContactDetails Aggregate Definition C#\nDESCRIPTION: Defines the ContactDetails and Address aggregate types. ContactDetails contains an Address object and a phone number. Address contains street, city, postcode and country.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ContactDetails\n{\n    public Address Address { get; init; } = null!;\n    public string? Phone { get; set; }\n}\n\npublic class Address\n{\n    public Address(string street, string city, string postcode, string country)\n    {\n        Street = street;\n        City = city;\n        Postcode = postcode;\n        Country = country;\n    }\n\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string Postcode { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Collation in EF Core\nDESCRIPTION: This code snippet shows how to configure the collation for a specific column using EF Core.  It overrides the default database collation, setting the 'Name' property's column to be case-insensitive.  This is useful when certain columns require different collation rules than the rest of the database.  It relies on EF Core migrations to apply the schema changes to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/collations-and-case-sensitivity.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Customer>(e =>\n{\n    e.Property(c => c.Name)\n        .UseCollation(\"SQL_Latin1_General_CP1_CI_AS\");\n});\n```\n\n----------------------------------------\n\nTITLE: Delete Featured Posts C#\nDESCRIPTION: This C# snippet deletes all FeaturedPost entities using ExecuteDeleteAsync. This assumes TPH mapping. Requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Set<FeaturedPost>().ExecuteDeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: ForeignKey Attribute on Property in EF Core\nDESCRIPTION: This snippet uses the `[ForeignKey]` attribute on the `BlogKey` property to explicitly define it as the foreign key for the relationship with the `Blog` entity.  It links the `Blog` navigation property to the `BlogKey` foreign key property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/mapping-attributes.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public string Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    [ForeignKey(nameof(Blog))]\n    public string BlogKey { get; set; }\n\n    public Blog Blog { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Temporary Values in EF Core\nDESCRIPTION: This code snippet demonstrates how to manipulate temporary values, specifically setting up relationships between new entities using foreign key values before the real key values are generated by the database. It involves creating a collection of new Blog and Post entities, assigning negative numbers as temporary key values, setting the Post.BlogId foreign key property to the corresponding Blog.Id, and marking the PK values as temporary using PropertyEntry.IsTemporary. Requires using Microsoft.EntityFrameworkCore and a BlogsContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = new List<Blog>\n            {\n                new Blog { Id = -1, Name = \".NET Blog\" },\n                new Blog { Id = -2, Name = \"Visual Studio Blog\" }\n            };\n\n            var posts = new List<Post>()\n            {\n                new Post\n                {\n                    Id = -1,\n                    BlogId = -1,\n                    Title = \"Announcing the Release of EF Core 5.0\",\n                    Content = \"Announcing the release of EF Core 5.0, a full featured cross-platform...\"\n                },\n                new Post\n                {\n                    Id = -2,\n                    BlogId = -2,\n                    Title = \"Disassembly improvements for optimized managed debugging\",\n                    Content = \"If you are focused on squeezing out the last bits of performance for your .NET service or...\"\n                }\n            };\n\n            using var context = new BlogsContext();\n\n            foreach (var blog in blogs)\n            {\n                context.Add(blog).Property(e => e.Id).IsTemporary = true;\n            }\n\n            foreach (var post in posts)\n            {\n                context.Add(post).Property(e => e.Id).IsTemporary = true;\n            }\n\n            Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n\n            context.SaveChanges();\n\n            Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Configure Fluent API mappings in OnModelCreating VB.NET\nDESCRIPTION: This snippet demonstrates various Fluent API configurations within the OnModelCreating method of a DbContext in VB.NET. It includes examples for removing conventions, specifying complex types, mapping CLR types to tables, configuring inheritance (TPH and TPT), configuring primary keys, specifying max lengths, requiring properties, switching off identity for numeric primary keys, ignoring CLR properties, mapping CLR properties to specific columns, configuring data types, configuring properties on a complex type, mapping one-to-zero or one relationships, configuring many-to-many relationships (with and without specifying join table details), configuring a foreign key name, and enabling cascade delete.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/vb.md#_snippet_2\n\nLANGUAGE: vb\nCODE:\n```\n' Configure Code First to ignore PluralizingTableName convention\n' If you keep this convention then the generated tables\n' will have pluralized names.\nmodelBuilder.Conventions.Remove(Of PluralizingTableNameConvention)()\n\n\n' Specifying that a Class is a Complex Type\n\n' The model defined in this topic defines a type OnsiteCourseDetails.\n' By convention, a type that has no primary key specified\n' is treated as a complex type.\n' There are some scenarios where Code First will not\n' detect a complex type (for example, if you do have a property\n' called ID, but you do not mean for it to be a primary key).\n' In such cases, you would use the fluent API to\n' explicitly specify that a type is a complex type.\nmodelBuilder.ComplexType(Of OnsiteCourseDetails)()\n\n\n' Mapping a CLR Entity Type to a Specific Table in the Database.\n\n' All properties of OfficeAssignment will be mapped\n' to columns  in a table called t_OfficeAssignment.\nmodelBuilder.Entity(Of OfficeAssignment)().ToTable(\"t_OfficeAssignment\")\n\n\n' Mapping the Table-Per-Hierarchy (TPH) Inheritance\n\n' In the TPH mapping scenario, all types in an inheritance hierarchy\n' are mapped to a single table.\n' A discriminator column is used to identify the type of each row.\n' When creating your model with Code First,      \n' TPH is the default strategy for the types that\n' participate in the inheritance hierarchy.\n' By default, the discriminator column is added\n' to the table with the name “Discriminator”\n' and the CLR type name of each type in the hierarchy\n' is used for the discriminator values.\n' You can modify the default behavior by using the fluent API.\nmodelBuilder.Entity(Of Person)().\n    Map(Of Person)(Function(t) t.Requires(\"Type\").\n        HasValue(\"Person\")).\n        Map(Of Instructor)(Function(t) t.Requires(\"Type\").\n        HasValue(\"Instructor\"))\n\n\n' Mapping the Table-Per-Type (TPT) Inheritance\n\n' In the TPT mapping scenario, all types are mapped to individual tables.\n' Properties that belong solely to a base type or derived type are stored\n' in a table that maps to that type. Tables that map to derived types\n' also store a foreign key that joins the derived table with the base table.\nmodelBuilder.Entity(Of Course)().ToTable(\"Course\")\nmodelBuilder.Entity(Of OnsiteCourse)().ToTable(\"OnsiteCourse\")\nmodelBuilder.Entity(Of OnlineCourse)().ToTable(\"OnlineCourse\")\n\n\n' Configuring a Primary Key\n\n' If your class defines a property whose name is “ID” or “Id”,\n' or a class name followed by “ID” or “Id”,\n' the Entity Framework treats this property as a primary key by convention.\n' If your property name does not follow this pattern, use the HasKey method\n' to configure the primary key for the entity.\nmodelBuilder.Entity(Of OfficeAssignment)().\n    HasKey(Function(t) t.InstructorID)\n\n\n' Specifying the Maximum Length on a Property\n\n' In the following example, the Name property\n' should be no longer than 50 characters.\n' If you make the value longer than 50 characters,\n' you will get a DbEntityValidationException exception.\nmodelBuilder.Entity(Of Department)().Property(Function(t) t.Name).\n    HasMaxLength(60)\n\n\n' Configuring the Property to be Required\n\n' In the following example, the Name property is required.\n' If you do not specify the Name,\n' you will get a DbEntityValidationException exception.\n' The database column used to store this property will be non-nullable.\nmodelBuilder.Entity(Of Department)().Property(Function(t) t.Name).\n    IsRequired()\n\n\n' Switching off Identity for Numeric Primary Keys\n\n' The following example sets the DepartmentID property to\n' System.ComponentModel.DataAnnotations.DatabaseGeneratedOption.None to indicate that\n' the value will not be generated by the database.\nmodelBuilder.Entity(Of Course)().Property(Function(t) t.CourseID).\n    HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)\n\n'Specifying NOT to Map a CLR Property to a Column in the Database\n modelBuilder.Entity(Of Department)().\n     Ignore(Function(t) t.Administrator)\n\n'Mapping a CLR Property to a Specific Column in the Database\n modelBuilder.Entity(Of Department)().Property(Function(t) t.Budget).\n     HasColumnName(\"DepartmentBudget\")\n\n'Configuring the Data Type of a Database Column\n modelBuilder.Entity(Of Department)().Property(Function(t) t.Name).\n     HasColumnType(\"varchar\")\n\n'Configuring Properties on a Complex Type\nmodelBuilder.Entity(Of OnsiteCourse)().Property(Function(t) t.Details.Days).\n    HasColumnName(\"Days\")\nmodelBuilder.Entity(Of OnsiteCourse)().Property(Function(t) t.Details.Location).\n    HasColumnName(\"Location\")\nmodelBuilder.Entity(Of OnsiteCourse)().Property(Function(t) t.Details.Time).\n    HasColumnName(\"Time\")\n\n\n' Map one-to-zero or one relationship\n\n' The OfficeAssignment has the InstructorID\n' property that is a primary key and a foreign key.\nmodelBuilder.Entity(Of OfficeAssignment)().\n    HasRequired(Function(t) t.Instructor).\n    WithOptional(Function(t) t.OfficeAssignment)\n\n\n' Configuring a Many-to-Many Relationship\n\n' The following code configures a many-to-many relationship\n' between the Course  and Instructor types.\n' In the following example, the default Code First conventions\n' are used  to create a join table.\n' As a result the CourseInstructor table is created with\n' Course_CourseID  and Instructor_InstructorID columns.\nmodelBuilder.Entity(Of Course)().\n    HasMany(Function(t) t.Instructors).\n    WithMany(Function(t) t.Courses)\n\n\n' Configuring a Many-to-Many Relationship and specifying the names\n' of the columns in the join table\n\n' If you want to specify the join table name\n' and the names of the columns in the table\n' you need to do additional configuration by using the Map method.\n' The following code generates the CourseInstructor\n' table with CourseID and InstructorID columns.\nmodelBuilder.Entity(Of Course)().\n    HasMany(Function(t) t.Instructors).\n    WithMany(Function(t) t.Courses).\n    Map(Sub(m)\n            m.ToTable(\"CourseInstructor\")\n            m.MapLeftKey(\"CourseID\")\n            m.MapRightKey(\"InstructorID\")\n        End Sub)\n\n\n' Configuring a foreign key name that does not follow the Code First convention\n\n' The foreign key property on the Course class is called DepartmentID_FK\n' since that does not follow Code First conventions you need to explicitly specify\n' that you want DepartmentID_FK to be the foreign key.\nmodelBuilder.Entity(Of Course)().\n    HasRequired(Function(t) t.Department).\n    WithMany(Function(t) t.Courses).\n    HasForeignKey(Function(t) t.DepartmentID_FK)\n\n\n' Enabling Cascade Delete\n\n' By default, if a foreign key on the dependent entity is not nullable,\n' then Code First sets cascade delete on the relationship.\n' If a foreign key on the dependent entity is nullable,\n' Code First does not set cascade delete on the relationship,\n' and when the principal is deleted the foreign key will be set to null.\n' The following code configures cascade delete on the relationship.\n\n' You can also remove the cascade delete conventions by using:\n' modelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>()\n' and modelBuilder.Conventions.Remove<ManyToManyCascadeDeleteConvention>().\nmodelBuilder.Entity(Of Course)().\n    HasRequired(Function(t) t.Department).\n    WithMany(Function(t) t.Courses).\n    HasForeignKey(Function(d) d.DepartmentID_FK).\n    WillCascadeOnDelete(False)\n```\n\n----------------------------------------\n\nTITLE: No-Tracking Query in EF Core\nDESCRIPTION: This code showcases a no-tracking query using `AsNoTracking()` in EF Core. This query retrieves data from the database without tracking any changes to the entities. This is useful for read-only scenarios where data doesn't need to be updated and persisted.  Performance can be improved since there is no overhead of change tracking.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blogs = context.Blogs\n    .AsNoTracking()\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Standard API SQL Server DbContext Registration (C#)\nDESCRIPTION: This C# code shows the standard method of registering a `DbContext` for SQL Server, using `AddDbContext` and configuring the options with `UseSqlServer`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_162\n\nLANGUAGE: C#\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddDbContext<MyDbContext>(\n    options => options.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=MyDatabase\"));\n```\n\n----------------------------------------\n\nTITLE: Checking if Entity is New (Simple)\nDESCRIPTION: This code snippet demonstrates a simple way to check if an entity is new based on its auto-generated key value.  It checks if the `BlogId` property has the default value (0 in this case) to determine if the entity is new.  It requires a `Blog` entity with an integer `BlogId` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool IsItNewSimple(Blog blog)\n{\n    return blog.BlogId == 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Name with Fluent API - C#\nDESCRIPTION: This code shows how to configure the database table name for an entity using the ToTable() method in OnModelCreating with the Fluent API. It is called inside the `OnModelCreating` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().ToTable(\"Blogs\");\n}\n```\n\n----------------------------------------\n\nTITLE: Reviewing Document Audit Records in C#\nDESCRIPTION: This snippet shows how to load a specific document audit record, materialize the snapshot, and return a `Document` entity for viewing. The snapshot is deserialized to create a `Document` object, which is then returned for display in the viewer control. This functionality allows users to review historical versions of documents.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<Document> GetAudit(Guid auditId)\n{\n    var audit = await _context.DocumentAudits.SingleAsync(x => x.Id == auditId);\n\n    var document = JsonSerializer.Deserialize<Document>(audit.Snapshot);\n\n    document.Version = audit.Version;\n    document.Modified = audit.Modified;\n    document.ModifiedBy = audit.ModifiedBy;\n\n    return document;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping to a Table-Valued Function - C#\nDESCRIPTION: This code demonstrates how to map the `BlogWithMultiplePosts` entity type to a table-valued function (TVF) named `BlogsWithMultiplePosts` using the ToFunction() method with Fluent API.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<BlogWithMultiplePosts>()\n        .ToFunction(\"BlogsWithMultiplePosts\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with mixed sort order - Fluent API - C#\nDESCRIPTION: This snippet demonstrates how to configure index sort order on a column-by-column basis using Fluent API in EF Core.  The code configures a composite index on FirstName and LastName, with LastName having descending sort order, using the `IsDescending()` method on the IndexBuilder. This feature is being introduced in EF Core 7.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Person>()\n    .HasIndex(p => new { p.FirstName, p.LastName })\n    .IsDescending(false, true);\n```\n\n----------------------------------------\n\nTITLE: Querying the Database View using Keyless Entity Type (C#)\nDESCRIPTION: This snippet demonstrates how to query the database view using the configured keyless entity type. It retrieves the data from the view through the `DbSet<T>` property in the `DbContext` and iterates through the results to display the blog name and post count.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keyless-entity-types.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace KeylessEntityTypes\n{\n    public class MyContext : DbContext\n    {\n        public MyContext(DbContextOptions<MyContext> options)\n            : base(options)\n        {\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<MostPopularBlogs>().HasNoKey().ToView(\"MostPopularBlogsView\");\n        }\n\n        public DbSet<Blog> Blogs { get; set; }\n        public DbSet<Post> Posts { get; set; }\n\n        public DbSet<MostPopularBlogs> MostPopularBlogs { get; set; }\n\n    }\n\n    public class MostPopularBlogs\n    {\n        public string BlogName { get; set; }\n        public int PostCount { get; set; }\n    }\n\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Sample usage - requires a database connection and setup\n            var optionsBuilder = new DbContextOptionsBuilder<MyContext>();\n            optionsBuilder.UseSqlServer(\"YourConnectionStringHere\"); // Replace with your actual connection string\n\n            using (var context = new MyContext(optionsBuilder.Options))\n            {\n                var popularBlogs = context.MostPopularBlogs.ToList();\n\n                foreach (var blog in popularBlogs)\n                {\n                    Console.WriteLine($\"Blog: {blog.BlogName}, Post Count: {blog.PostCount}\");\n                }\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Update Entity Using SetValues with DTO - C#\nDESCRIPTION: This code shows using `SetValues` to update an entity with data from a Data Transfer Object (DTO).  The DTO properties must match the entity's properties. The entity is first queried and tracked before applying the values from the DTO.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdateFromHttpPost4(BlogDto dto)\n{\n    using var context = new BlogsContext();\n\n    var trackedBlog = context.Blogs.Find(dto.Id);\n\n    context.Entry(trackedBlog).CurrentValues.SetValues(dto);\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: PersistAttribute Class in C#\nDESCRIPTION: Defines a custom attribute, `PersistAttribute`, used to explicitly mark properties or fields that should be mapped to the database by the custom convention. This attribute is applied to properties and fields.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\n[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]\npublic sealed class PersistAttribute : Attribute\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Limit Result Set C#\nDESCRIPTION: This code shows how to limit the number of results returned by a query using the `Take` operator. This helps to control the amount of data loaded and processed, improving performance with large datasets.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Limiting the number of results\nvar blogs = context.Blogs.Where(b => b.Rating > 3).Take(25).ToList();\n```\n\n----------------------------------------\n\nTITLE: Register Repository in DI C#\nDESCRIPTION: This code snippet shows how to register the blogging repository as a service in dependency injection within an ASP.NET Core application.  This allows the repository to be injected into controllers and other components.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-without-the-database.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// This code snippet is intentionally left blank. It is referencing external code.\n// Please view the source code to understand how the repository is registered in dependency injection.\n```\n\n----------------------------------------\n\nTITLE: Configuring a sparse column in EF Core\nDESCRIPTION: This code snippet demonstrates how to configure a column as sparse using the Fluent API in EF Core. Sparse columns optimize storage for null values.  This is particularly useful in table-per-hierarchy scenarios. Requires the `SparseColumnContext.cs` file from the samples.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/columns.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(b => b.Name)\n    .IsSparse();\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Columns in SQLite\nDESCRIPTION: This code snippet demonstrates querying a JSON column in SQLite. It filters authors based on the city stored within their `Contact.Address` information in the JSON column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nvar authorsInChigley = await context.Authors\n    .Where(author => author.Contact.Address.City == \"Chigley\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Shared-Type Entity Types with Property Bags (C#)\nDESCRIPTION: Shows how to use shared-type entity types and property bags in EF Core 5.0, using a `Dictionary<string, object>` to represent entity properties. This allows dynamic properties to be added without defining them in a CLR type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class ProductsContext : DbContext\n{\n    public DbSet<Dictionary<string, object>> Products => Set<Dictionary<string, object>>(\"Product\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.SharedTypeEntity<Dictionary<string, object>>(\"Product\", b =>\n        {\n            b.IndexerProperty<int>(\"Id\");\n            b.IndexerProperty<string>(\"Name\").IsRequired();\n            b.IndexerProperty<decimal>(\"Price\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Translate Math.Min to LEAST - C#\nDESCRIPTION: This snippet demonstrates how Math.Min is translated to the LEAST SQL function in EF Core 9 when targeting SQL Server 2022. It queries for walks where the minimum of the number of visited days and the length of the closest pub's beers is greater than 4.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nvar walksUsingMin = await context.Walks\n            .Where(e => Math.Min(e.DaysVisited.Count, e.ClosestPub.Beers.Length) > 4)\n            .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Changing Relationships by Adding/Removing Collection Navigations in EF Core\nDESCRIPTION: This C# code snippet demonstrates changing relationships between entities by modifying collection navigations. It moves a post from one blog to another by removing it from the `Posts` collection of one `Blog` entity and adding it to the `Posts` collection of another. Requires loading blogs and posts into the context first.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n        var dotNetBlog = context.Blogs.Include(e => e.Posts).Single(e => e.Name == \".NET Blog\");\n        var vsBlog = context.Blogs.Include(e => e.Posts).Single(e => e.Name == \"Visual Studio Blog\");\n\n        Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n\n        var post = vsBlog.Posts.Single(e => e.Title.StartsWith(\"Disassembly improvements\"));\n        vsBlog.Posts.Remove(post);\n        dotNetBlog.Posts.Add(post);\n\n        context.ChangeTracker.DetectChanges();\n        Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n\n        context.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Navigation using modelBuilder in C#\nDESCRIPTION: This C# code shows how to configure the Address navigation property as required using the modelBuilder in EF Core. This is an alternative to using the [Required] attribute. The Navigation(e => e.Address).IsRequired() call ensures the Address entity will be created even if all its properties are null.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Customer>(\n    b =>\n    {\n        b.OwnsOne(e => e.Address);\n        b.Navigation(e => e.Address).IsRequired();\n    });\n```\n\n----------------------------------------\n\nTITLE: Accessing Period Columns from Tracked Entities\nDESCRIPTION: This code shows how to access the values from the period columns (ValidFrom, ValidTo) of a temporal table after a tracking query in EF Core, using the EF Core's change tracking mechanism to access shadow properties. These column values represent the validity period of a given row of data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar employees = context.Employees.ToList();\nforeach (var employee in employees)\n{\n    var employeeEntry = context.Entry(employee);\n    var validFrom = employeeEntry.Property<DateTime>(\"ValidFrom\").CurrentValue;\n    var validTo = employeeEntry.Property<DateTime>(\"ValidTo\").CurrentValue;\n\n    Console.WriteLine($\"  Employee {employee.Name} valid from {validFrom} to {validTo}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Database using EnsureDeletedAsync in C#\nDESCRIPTION: This code snippet demonstrates how to use the EnsureDeletedAsync method in Entity Framework Core to drop a database if it already exists. It relies on an existing DbContext instance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/ensure-created.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Drop the database if it exists\nawait dbContext.Database.EnsureDeletedAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying with LINQ - EF6 - C#\nDESCRIPTION: This code demonstrates how to query a database using LINQ with Entity Framework 6. It retrieves blogs with names starting with 'B' and a blog named 'ADO.NET Blog'.  It uses the `BloggingContext` and showcases the use of `from` and `where` clauses, as well as the `FirstOrDefault()` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Query for all blogs with names starting with B\n    var blogs = from b in context.Blogs\n                   where b.Name.StartsWith(\"B\")\n                   select b;\n\n    // Query for the Blog named ADO.NET Blog\n    var blog = context.Blogs\n                    .Where(b => b.Name == \"ADO.NET Blog\")\n                    .FirstOrDefault();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DbContextFactory with Dependency Injection (C#)\nDESCRIPTION: Registers a DbContext factory for creating DbContext instances in the application's dependency injection container. This is achieved using `AddDbContextFactory<TContext>` and configured with connection details using `UseSqlServer`. This allows application code to manually create and dispose of context instances.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddDbContextFactory<SomeDbContext>(b =>\n    b.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test\"));\n```\n\n----------------------------------------\n\nTITLE: Resolve DbContext from Container Scope (C#)\nDESCRIPTION: This code demonstrates how to resolve a DbContext instance directly from a container scope. The context is disposed when the scope is disposed, so it should not be explicitly disposed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\nusing (var scope = container.CreateScope())\n{\n    var context = scope.ServiceProvider.GetService<SomeDbContext>();\n    // Context is disposed when the scope is disposed\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Includes and Aggregation C#\nDESCRIPTION: This C# snippet includes Shoes and Feet navigations, groups by Feet.Id and Feet.Size, and calculates various aggregations like Count, Sum, SumOver60, and TotalCallOutCharges. It returns the total count of the grouped elements.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nvar result = context.People\n    .Include(x => x.Shoes)\n    .Include(x => x.Feet)\n    .GroupBy(\n        x => new\n        {\n            x.Feet.Id,\n            x.Feet.Size\n        })\n    .Select(\n        x => new\n        {\n            Key = x.Key.Id + x.Key.Size,\n            Count = x.Count(),\n            Sum = x.Sum(el => el.Id),\n            SumOver60 = x.Sum(el => el.Id) / (decimal)60,\n            TotalCallOutCharges = x.Sum(el => el.Feet.Size == 11 ? 1 : 0)\n        })\n    .Count();\n```\n\n----------------------------------------\n\nTITLE: Updating Entire JSON Document in EF Core\nDESCRIPTION: This C# code snippet demonstrates updating the entire JSON document stored in the 'Contact' column of the 'Authors' table using EF Core's SaveChanges method. It fetches an author, replaces the entire 'Contact' object, and persists the changes. This will cause the entire JSON document to be updated in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nvar jeremy = await context.Authors.SingleAsync(author => author.Name.StartsWith(\"Jeremy\"));\n\njeremy.Contact = new() { Address = new(\"2 Riverside\", \"Trimbridge\", \"TB1 5ZS\", \"UK\"), Phone = \"01632 88346\" };\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Minimal API Cosmos DbContext Registration (C#)\nDESCRIPTION: This C# code demonstrates registering a `DbContext` for Cosmos DB using the minimal API, simplifying the registration and configuration process for Cosmos DB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_160\n\nLANGUAGE: C#\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddCosmos<MyDbContext>(\n    \"https://localhost:8081\",\n    \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\");\n```\n\n----------------------------------------\n\nTITLE: Generate Idempotent SQL Script - .NET Core CLI\nDESCRIPTION: This command generates an idempotent SQL script using the .NET Core CLI. Idempotent scripts check which migrations have already been applied and only apply the missing ones.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_6\n\nLANGUAGE: .NET Core CLI\nCODE:\n```\ndotnet ef migrations script --idempotent\n```\n\n----------------------------------------\n\nTITLE: TPT: Subset of Types Query - SQL\nDESCRIPTION: SQL query generated by EF Core with TPT for retrieving entities from a subset of types ('Cat', 'Dog'). It uses INNER JOIN for Pets and LEFT JOIN for Cats and Dogs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_56\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Id], [a].[FoodId], [a].[Name], [p].[Vet], [c].[EducationLevel], [d].[FavoriteToy], CASE\n    WHEN [d].[Id] IS NOT NULL THEN N'Dog'\n    WHEN [c].[Id] IS NOT NULL THEN N'Cat'\nEND AS [Discriminator]\nFROM [Animals] AS [a]\nINNER JOIN [Pets] AS [p] ON [a].[Id] = [p].[Id]\nLEFT JOIN [Cats] AS [c] ON [a].[Id] = [c].[Id]\nLEFT JOIN [Dogs] AS [d] ON [a].[Id] = [d].[Id]\n```\n\n----------------------------------------\n\nTITLE: Specifying Maximum Length on a Property - EF6 - C#\nDESCRIPTION: This code snippet sets the maximum length of the `Name` property to 50 characters using the `HasMaxLength` method. If the value exceeds this limit during insertion or update, a `DbEntityValidationException` will be thrown. This also configures the column length in the database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>().Property(t => t.Name).HasMaxLength(50);\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Include Tree - C#\nDESCRIPTION: This code snippet combines multiple includes to load data from different levels and multiple roots in a single query.  It loads blogs, their posts and author, and their categories.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts)\n        .ThenInclude(p => p.Author)\n    .Include(b => b.Categories)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContext with Connection String in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a DbContext in EF Core, including specifying the connection string using the ConfigurationManager API. It involves overriding the OnConfiguring method and using the UseSqlServer method to establish the connection to the database. Requires a reference to System.Configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/efcore-and-ef6/porting/port-code.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n      optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings[\"BloggingDatabase\"].ConnectionString);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Override History Repository - EF Core C#\nDESCRIPTION: This code snippet shows how to override the provider-specific `IHistoryRepository` service to customize aspects of the migrations history table. In this specific example, the `MigrationId` column name is changed to `Id` on SQL Server.  This requires creating a custom history repository that inherits from the default SQL Server history repository.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/history-table.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage;\n\nnamespace Schemas.Migrations\n{\n    public class MyHistoryRepository : SqlServerHistoryRepository\n    {\n        public MyHistoryRepository(\n            HistoryRepositoryDependencies dependencies,\n            IRelationalDatabaseCreator databaseCreator)\n            : base(dependencies, databaseCreator)\n        {\n        }\n\n        protected override string ExistsSql\n            => string.Format(\n                @\"SELECT CASE WHEN EXISTS (\n                    SELECT * FROM INFORMATION_SCHEMA.TABLES\n                    WHERE TABLE_SCHEMA = '{0}' AND TABLE_NAME = '{1}'\n                ) THEN 1 ELSE 0 END\",\n                Dependencies.SqlGenerationHelper.EscapeLiteral(\"admin\"),\n                Dependencies.SqlGenerationHelper.EscapeLiteral(\"MyHistoryTable\"));\n\n        public override string GetCreateScript()\n        {\n            return @\"CREATE TABLE [admin].[MyHistoryTable] (\n    [Id] nvarchar(150) NOT NULL,\n    [ProductVersion] nvarchar(32) NOT NULL,\n    CONSTRAINT [PK_MyHistoryTable] PRIMARY KEY ([Id])\n);\n\nIF OBJECT_ID(N'[admin].[MyHistoryTable]') IS NULL\nBEGIN\n    CREATE TABLE [admin].[MyHistoryTable] (\n        [Id] nvarchar(150) NOT NULL,\n        [ProductVersion] nvarchar(32) NOT NULL,\n        CONSTRAINT [PK_MyHistoryTable] PRIMARY KEY ([Id])\n    );\nEND;\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Pubs by First Visit Date\nDESCRIPTION: This code snippet demonstrates how to query `Pub` entities and order them by the first date they were visited, also projecting the first and last visit dates. The translated SQL uses subqueries with `OpenJson` to find the first and last visit dates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nvar pubsVisitedInOrder = await context.Pubs\n    .Select(e => new\n    {\n        e.Name,\n        FirstVisited = e.DaysVisited.OrderBy(v => v).First(),\n        LastVisited = e.DaysVisited.OrderByDescending(v => v).First(),\n    })\n    .OrderBy(p => p.FirstVisited)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Using Sequences to Generate Values - C#\nDESCRIPTION: This code snippet demonstrates how to define a sequence in the EF Core model and use it to generate values for a property. It highlights the sequence definition and usage within an entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/sequences.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n    public string Url { get; set; }\n    public int SerialNumber { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SqlQuery for All Columns in C#\nDESCRIPTION: Demonstrates using `SqlQuery` to retrieve all columns from the 'Posts' table into a list of `BlogPost` objects. It shows how to execute a parameterized raw SQL query with string interpolation, fetching data between specified date ranges.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nvar start = new DateOnly(2022, 1, 1);\nvar end = new DateOnly(2023, 1, 1);\nvar postsIn2022 =\n    await context.Database\n        .SqlQuery<BlogPost>($\"SELECT * FROM Posts as p WHERE p.PublishedOn >= {start} AND p.PublishedOn < {end}\")\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Updating Immutable Address Record C#\nDESCRIPTION: This C# snippet demonstrates updating an immutable `Address` record using the `with` keyword. This creates a new instance of the record with the specified property changed, leaving the original record unchanged.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\ncustomer.Address = customer.Address with { Line1 = \"Peacock Lodge\" };\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: BlogWithMultiplePosts Entity - C#\nDESCRIPTION: This code defines a keyless entity `BlogWithMultiplePosts` with properties `Url` and `PostCount`, which can then be mapped to a table-valued function to return aggregated blog data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class BlogWithMultiplePosts\n{\n    public string Url { get; set; }\n    public int PostCount { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext with Generic DbContextOptions (C#)\nDESCRIPTION: This code snippet shows how to define a DbContext subclass that accepts a generic DbContextOptions<TContext>. This ensures the correct options for the specific DbContext subtype are resolved from dependency injection.  It requires the Microsoft.EntityFrameworkCore package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class SealedApplicationDbContext : DbContext\n{\n    public SealedApplicationDbContext(DbContextOptions<SealedApplicationDbContext> contextOptions)\n        : base(contextOptions)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Many-to-Many Table with Foreign Keys and Constraints (SQL)\nDESCRIPTION: Creates a PostTag table with PostForeignKey and TagForeignKey columns, which are primary keys and foreign keys referencing the Posts and Tags tables respectively. Cascade delete is configured for both foreign key relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"PostTag\" (\n    \"PostForeignKey\" INTEGER NOT NULL,\n    \"TagForeignKey\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostForeignKey\", \"TagForeignKey\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostForeignKey\" FOREIGN KEY (\"PostForeignKey\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagForeignKey\" FOREIGN KEY (\"TagForeignKey\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Entity State using EntityEntry C#\nDESCRIPTION: This snippet shows how to access the current `EntityState` of a tracked entity using `EntityEntry.State`.  It then checks if the state is `Unchanged`, and if so, sets the state to `Modified`. Requires a tracked entity obtained via DbContext.Entry, as shown in the previous snippet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar currentState = context.Entry(blog).State;\nif (currentState == EntityState.Unchanged)\n{\n    context.Entry(blog).State = EntityState.Modified;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Properties with ExecuteUpdateAsync - SQL\nDESCRIPTION: The SQL generated by ExecuteUpdateAsync to update both the Rating and IsVisible properties of the Blog table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [b]\nSET [b].[Rating] = 0,\n    [b].[IsVisible] = CAST(0 AS bit)\nFROM [Blogs] AS [b]\nWHERE [b].[Rating] < 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Deletes in OnModelCreating (C#)\nDESCRIPTION: This C# code snippet demonstrates how to configure cascade deletes for a relationship using the `OnDelete` method within the `OnModelCreating` method of a DbContext.  In this case, `ClientCascade` is being used to specify that the deletion should occur on the client side (EF Core).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<Blog>()\n        .HasOne(e => e.Owner)\n        .WithOne(e => e.OwnedBlog)\n        .OnDelete(DeleteBehavior.ClientCascade);\n}\n```\n\n----------------------------------------\n\nTITLE: HasConversion to String C#\nDESCRIPTION: Configures EF Core to save Currency enum values as strings in the database using HasConversion<string>().  The database will store the enum's name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<TestEntity1>()\n    .Property(e => e.Currency)\n    .HasConversion<string>();\n```\n\n----------------------------------------\n\nTITLE: LINQ query example demonstrating parenthesis elimination in EF Core 8\nDESCRIPTION: This snippet shows a LINQ query that is used as an example to demonstrate the parenthesis elimination feature in EF Core 8, resulting in more readable SQL code.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\nawait ctx.Customers  \n    .Where(c => c.Id * 3 + 2 > 0 && c.FirstName != null || c.LastName != null)  \n    .ToListAsync();  \n```\n\n----------------------------------------\n\nTITLE: SQL Translation of GroupBy Query with Anonymous Type Key\nDESCRIPTION: This SQL code is the translated form of the C# GroupBy query using an anonymous type for the key. It selects the `FirstName` and `MiddleInitial` from the `People` table, grouping by these two columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_82\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [t].[FirstName], [t].[MiddleInitial], [p0].[Id], [p0].[Age], [p0].[FirstName], [p0].[LastName], [p0].[MiddleInitial]\nFROM (\n    SELECT [p].[FirstName], [p].[MiddleInitial]\n    FROM [People] AS [p]\n    GROUP BY [p].[FirstName], [p].[MiddleInitial]\n) AS [t]\nLEFT JOIN [People] AS [p0] ON (([t].[FirstName] = [p0].[FirstName]) OR ([t].[FirstName] IS NULL AND [p0].[FirstName] IS NULL)) AND (([t].[MiddleInitial] = [p0].[MiddleInitial]) OR ([t].[MiddleInitial] IS NULL AND [p0].[MiddleInitial] IS NULL))\nORDER BY [t].[FirstName], [t].[MiddleInitial]\n```\n\n----------------------------------------\n\nTITLE: Metadata API Configuration C#\nDESCRIPTION: This code snippet demonstrates using the Metadata API within `OnModelCreating` to configure properties of type `Currency`. It iterates through all properties of the specified type and configures a value converter to map them to a supported type (`decimal`).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    foreach (var property in modelBuilder.Model.GetEntityTypes()\n        .SelectMany(t => t.GetProperties())\n        .Where(p => p.ClrType == typeof(Currency)))\n    {\n        property.SetValueConverter(typeof(CurrencyConverter));\n        property.SetPrecision(18);\n        property.SetScale(2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single SQL Query - Split Query Example 1\nDESCRIPTION: Shows the single SQL query generated for Split Query Example 1.  The query retrieves Customer and Order data using a LEFT JOIN, where the orders are filtered based on their Id.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_109\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [t].[Id], [t].[CustomerId], [t].[OrderDate]\nFROM [Customers] AS [c]\nLEFT JOIN (\n    SELECT [o].[Id], [o].[CustomerId], [o].[OrderDate]\n    FROM [Order] AS [o]\n    WHERE [o].[Id] > 1\n) AS [t] ON [c].[Id] = [t].[CustomerId]\nORDER BY [c].[Id]\n```\n\n----------------------------------------\n\nTITLE: SqlQuery with Join and LINQ Composition C#\nDESCRIPTION: Shows how to combine `SqlQuery` with LINQ's `Where` clause to filter the results of a JOIN operation.  The example filters 'PostSummary' objects based on the 'PublishedOn' date, demonstrating the composability of `SqlQuery` with LINQ.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nvar start = new DateOnly(2022, 1, 1);\nvar end = new DateOnly(2023, 1, 1);\nvar summariesIn2022 =\n    await context.Database.SqlQuery<PostSummary>(\n            @$\"SELECT b.Name AS BlogName, p.Title AS PostTitle, p.PublishedOn\n            FROM Posts AS p\n            INNER JOIN Blogs AS b ON p.BlogId = b.Id\")\n        .Where(p => p.PublishedOn >= start && p.PublishedOn < end)\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating a DbContext instance using the Factory - C#\nDESCRIPTION: This snippet demonstrates how to use the injected DbContext factory to create a DbContext instance within a using statement. The using statement ensures that the DbContext is properly disposed of after use.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic void DoSomething()\n{\n    using (var context = _contextFactory.CreateDbContext())\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic CLR Method for User-Defined Function Mapping (C#)\nDESCRIPTION: This C# code defines a CLR method `CommentedPostCountForBlog` that will be mapped to the SQL user-defined function with the same name.  The method takes a blog ID as an integer parameter and returns an integer. The body of the method is not important, as it will be replaced by the SQL function during query translation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic int CommentedPostCountForBlog(int blogId)\n    => throw new NotSupportedException();\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContext to Disable Nullability Check\nDESCRIPTION: This snippet demonstrates how to disable the nullability check for required properties in the in-memory database.  It overrides the `OnConfiguring` method of the `DbContext` to configure the `DbContextOptionsBuilder` with `EnableNullabilityCheck(false)`. This allows saving entities with null values for required properties without throwing an exception.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_165\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .LogTo(Console.WriteLine, new[] { InMemoryEventId.ChangesSaved })\n        .UseInMemoryDatabase(\"UserContextWithNullCheckingDisabled\")\n        .EnableNullabilityCheck(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Generate SQL Script - With From and To - .NET Core CLI\nDESCRIPTION: This command generates a SQL script from a specified 'from' migration ('AddNewTables') to a specified 'to' migration ('AddAuditTable') using the .NET Core CLI. This allows for generating scripts for a specific range of migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_2\n\nLANGUAGE: .NET Core CLI\nCODE:\n```\ndotnet ef migrations script AddNewTables AddAuditTable\n```\n\n----------------------------------------\n\nTITLE: KeyOrderingExpressionInterceptor Implementation C#\nDESCRIPTION: This class implements the IQueryExpressionInterceptor interface to modify LINQ query expression trees. It adds a secondary sort order by the primary key (Id) to any query that orders by another property on an entity that implements the IHasIntKey interface. This ensures stable ordering when paging through results.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\npublic class KeyOrderingExpressionInterceptor : IQueryExpressionInterceptor\n    {\n        public Expression QueryCompilationStarting(Expression queryExpression, QueryExpressionEventData eventData)\n            => new KeyOrderingExpressionVisitor().Visit(queryExpression);\n\n        private class KeyOrderingExpressionVisitor : ExpressionVisitor\n        {\n            private static readonly MethodInfo ThenByMethod\n                = typeof(Queryable).GetMethods()\n                    .Single(m => m.Name == nameof(Queryable.ThenBy) && m.GetParameters().Length == 2);\n\n            protected override Expression VisitMethodCall(MethodCallExpression? methodCallExpression)\n            {\n                var methodInfo = methodCallExpression!.Method;\n                if (methodInfo.DeclaringType == typeof(Queryable)\n                    && methodInfo.Name == nameof(Queryable.OrderBy)\n                    && methodInfo.GetParameters().Length == 2)\n                {\n                    var sourceType = methodCallExpression.Type.GetGenericArguments()[0];\n                    if (typeof(IHasIntKey).IsAssignableFrom(sourceType))\n                    {\n                        var lambdaExpression = (LambdaExpression)((UnaryExpression)methodCallExpression.Arguments[1]).Operand;\n                        var entityParameterExpression = lambdaExpression.Parameters[0];\n\n                        return Expression.Call(\n                            ThenByMethod.MakeGenericMethod(\n                                sourceType,\n                                typeof(int)),\n                            methodCallExpression,\n                            Expression.Lambda(\n                                typeof(Func<,>).MakeGenericType(entityParameterExpression.Type, typeof(int)),\n                                Expression.Property(entityParameterExpression, nameof(IHasIntKey.Id)),\n                                entityParameterExpression));\n                    }\n                }\n\n                return base.VisitMethodCall(methodCallExpression);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Appending to Database Log File XML (EF6.1+)\nDESCRIPTION: This XML snippet shows how to configure the DatabaseLogger to append to the log file instead of overwriting it each time the application starts. It includes a parameter to specify the file name and a boolean parameter to indicate whether to append to the existing file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n  <interceptor type=\"System.Data.Entity.Infrastructure.Interception.DatabaseLogger, EntityFramework\">\n    <parameters>\n      <parameter value=\"C:\\Temp\\LogOutput.txt\"/>\n      <parameter value=\"true\" type=\"System.Boolean\"/>\n    </parameters>\n  </interceptor>\n</interceptors>\n```\n\n----------------------------------------\n\nTITLE: Defining Immutable Address Record C#\nDESCRIPTION: This C# snippet defines an immutable `Address` record. It uses init-only properties, which can only be set during object initialization.  To change an address, a new record with the changes can be created using the 'with' keyword.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic record Address\n{\n    public Address(string line1, string? line2, string city, string country, string postCode)\n    {\n        Line1 = line1;\n        Line2 = line2;\n        City = city;\n        Country = country;\n        PostCode = postCode;\n    }\n\n    public string Line1 { get; init; }\n    public string? Line2 { get; init; }\n    public string City { get; init; }\n    public string Country { get; init; }\n    public string PostCode { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Server Tables for DateOnly/TimeOnly\nDESCRIPTION: This SQL script creates tables in SQL Server that correspond to the EF Core model, using 'date' and 'time' data types for DateOnly and TimeOnly properties respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_110\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Schools] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NOT NULL,\n    [Founded] date NOT NULL,\n    CONSTRAINT [PK_Schools] PRIMARY KEY ([Id]));\n\nCREATE TABLE [OpeningHours] (\n    [SchoolId] int NOT NULL,\n    [Id] int NOT NULL IDENTITY,\n    [DayOfWeek] int NOT NULL,\n    [OpensAt] time NULL,\n    [ClosesAt] time NULL,\n    CONSTRAINT [PK_OpeningHours] PRIMARY KEY ([SchoolId], [Id]),\n    CONSTRAINT [FK_OpeningHours_Schools_SchoolId] FOREIGN KEY ([SchoolId]) REFERENCES [Schools] ([Id]) ON DELETE CASCADE);\n\nCREATE TABLE [Term] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NOT NULL,\n    [FirstDay] date NOT NULL,\n    [LastDay] date NOT NULL,\n    [SchoolId] int NOT NULL,\n    CONSTRAINT [PK_Term] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Term_Schools_SchoolId] FOREIGN KEY ([SchoolId]) REFERENCES [Schools] ([Id]) ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: HasConversion with Custom Converter C#\nDESCRIPTION: Configures EF Core to use the custom CurrencyToSymbolConverter to save Currency enum values as currency symbols in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<TestEntity3>()\n    .Property(e => e.Currency)\n    .HasConversion<CurrencyToSymbolConverter>();\n```\n\n----------------------------------------\n\nTITLE: Discriminator Column Configuration - C#\nDESCRIPTION: This code configures the name and type of the discriminator column used in Table-per-Hierarchy (TPH) inheritance mapping, and specifies the values used to identify each type in the hierarchy. It shows how to use the Fluent API to customize the discriminator.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasDiscriminator<string>(\"BlogType\")\n        .HasValue<Blog>(\"blog\")\n        .HasValue<RssBlog>(\"rss\");\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Hierarchy Descendants with EF Core\nDESCRIPTION: This C# code snippet queries the database to retrieve Longo and all of his descendants using Entity Framework Core. It leverages the `IsDescendantOf` method to filter the Halflings table based on the hierarchy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nvar longoAndDescendents = await context.Halflings.Where(\n                descendent => descendent.PathFromPatriarch.IsDescendantOf(\n                    context.Halflings.Single(ancestor => ancestor.Name == \"Longo\").PathFromPatriarch))\n            .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configure DbContext with Interceptor C#\nDESCRIPTION: Configures the `DbContext` to use the `SetRetrievedInterceptor`. A single instance of the interceptor is created and shared between all `DbContext` instances.  The interceptor is added to the `DbContextOptionsBuilder` using the `AddInterceptors` method. It also uses Sqlite as the database provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_92\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomerContext : DbContext\n{\n    private static readonly SetRetrievedInterceptor _setRetrievedInterceptor = new();\n    \n    public DbSet<Customer> Customers => Set<Customer>();\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) \n        => optionsBuilder\n            .AddInterceptors(_setRetrievedInterceptor)\n            .UseSqlite(\"Data Source = customers.db\");\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Non-Querying SQL\nDESCRIPTION: This code snippet demonstrates how to execute SQL which does not return any data using ExecuteSql in EF Core. It updates the Url column in the Blogs table, setting it to NULL for all rows. It returns the number of rows modified. Requires Entity Framework Core and a database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var rowsModified = context.Database.ExecuteSql($\"UPDATE [Blogs] SET [Url] = NULL\");\n}\n```\n\n----------------------------------------\n\nTITLE: Get Current Value of City from Nested Complex Type - C#\nDESCRIPTION: This code snippet demonstrates how to access a property nested within multiple complex types. It retrieves the 'City' property from the 'Address' complex type, which is nested within the 'Contact' complex type of a 'Customer' entity, using chained ComplexProperty calls.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nvar currentCity = context.Entry(customer)\n    .ComplexProperty(e => e.Contact)\n    .ComplexProperty(e => e.Address)\n    .Property(e => e.City)\n    .CurrentValue;\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Complex Types C#\nDESCRIPTION: This snippet defines several complex types: `Address`, `PhoneNumber`, and `Contact`. The `Contact` type nests `Address` and `PhoneNumber` types, demonstrating nested complex types. The code uses immutable records, which are well-suited for complex types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic record Address(string Line1, string? Line2, string City, string Country, string PostCode);\n\npublic record PhoneNumber(int CountryCode, long Number);\n\npublic record Contact\n{\n    public required Address Address { get; init; }\n    public required PhoneNumber HomePhone { get; init; }\n    public required PhoneNumber WorkPhone { get; init; }\n    public required PhoneNumber MobilePhone { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the Convention in ConfigureConventions in C#\nDESCRIPTION: This code demonstrates how to add the `DiscriminatorLengthConvention1` to the `ModelConfigurationBuilder` using the `Add` method within the `ConfigureConventions` override. The convention is added as a factory, allowing it to potentially use services from the EF Core service provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Add(_ =>  new DiscriminatorLengthConvention1());\n}\n```\n\n----------------------------------------\n\nTITLE: Using EF.Functions.Like() for Pattern Matching in LINQ Queries\nDESCRIPTION: This code demonstrates how to use the `EF.Functions.Like()` method in a LINQ query with EF Core.  It allows performing SQL `LIKE` operations directly within LINQ, enabling pattern matching functionality in queries.  The query selects customers whose `Name` starts with 'a'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar aCustomers =\n    from c in context.Customers\n    where EF.Functions.Like(c.Name, \"a%\")\n    select c;\n```\n\n----------------------------------------\n\nTITLE: Configure Cosmos DB Connection\nDESCRIPTION: This code configures the DbContext to use Azure Cosmos DB using the UseCosmos method. It specifies the account endpoint, account key, and database name.  It also configures the container for the `Order` entity to be named \"Orders\". The endpoint and key are hardcoded for simplicity but should be stored securely in production.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/index.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UseCosmos(\n    accountEndpoint: \"https://localhost:8081\",\n    accountKey: \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJ2c&oR+Y/Rzw==\",\n    databaseName: \"Orders\",\n    cosmosOptions =>\n    {\n        cosmosOptions.Container(\"Orders\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Tracking Strategy in OnModelCreating - C#\nDESCRIPTION: This C# code snippet shows how to configure the change tracking strategy for all entity types in EF Core using the OnModelCreating method.  The modelBuilder.HasChangeTrackingStrategy method sets the strategy to ChangingAndChangedNotifications, indicating that the application will use entities that implement both INotifyPropertyChanging and INotifyPropertyChanged. This instructs EF Core to use the notifications to detect changes, improving performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.HasChangeTrackingStrategy(ChangeTrackingStrategy.ChangingAndChangedNotifications);\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Session Property Configuration C#\nDESCRIPTION: Configures the model to ignore all properties of type `Session`, preventing them from being persisted to the database.  This is useful for transient properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nconfigurationBuilder\n    .IgnoreAny<Session>();\n```\n\n----------------------------------------\n\nTITLE: Flexible Entity Mapping in EF Core 5.0 (C#)\nDESCRIPTION: Demonstrates how to map an entity to a SQL query or a table-valued function (TVF) in EF Core 5.0.  Also shows how to map to a view for querying and a table for updates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>().ToSqlQuery(\n        @\"SELECT Id, Name, Category, BlogId FROM posts\n          UNION ALL\n          SELECT Id, Name, \\\"Legacy\\\", BlogId from legacy_posts\");\n\n    modelBuilder.Entity<Blog>().ToFunction(\"BlogsReturningFunction\");\n}\n\n```\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<Blog>()\n        .ToTable(\"Blogs\")\n        .ToView(\"BlogsView\");\n}\n```\n\n----------------------------------------\n\nTITLE: Severing a Relationship (Clearing Collection) in C#\nDESCRIPTION: This C# snippet demonstrates severing the relationship between posts and their blog by clearing the `Blog.Posts` collection navigation. This triggers orphan deletion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blog = context.Blogs.OrderBy(e => e.Name).Include(e => e.Posts).First();\n\nblog.Posts.Clear();\n            \ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Inserting or Updating Graph (Auto-Generated Keys)\nDESCRIPTION: This snippet demonstrates how to use the `Update` method to insert or update a graph of entities when using auto-generated keys.  Entities without a key value are inserted, while entities with a key value are updated. Requires a `Blog` entity with auto-generated key and related `Post` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic static void InsertOrUpdateGraph(BloggingContext context, Blog blog)\n{\n    context.Update(blog);\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Debug View - C#\nDESCRIPTION: This code snippet demonstrates how to access and print the model builder debug view to the console. The `ToDebugString()` method provides a textual representation of the model, which can be helpful for debugging and understanding how the model is configured. The second example shows how to print the long form of the debug view, which includes annotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(context.Model.ToDebugString());\n```\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(context.Model.ToDebugString(MetadataDebugStringOptions.LongDefault));\n```\n\n----------------------------------------\n\nTITLE: Data Annotations for Model Configuration - C#\nDESCRIPTION: This code snippet demonstrates the use of data annotations for model configuration. Specifically, it configures the `Url` property of the `Blog` entity to be required and have a maximum length of 200 characters, and the `Posts` navigation property to be ignored by the EF Core model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace DataAnnotations.Models\n{\n    public class Blog\n    {\n        public int BlogId { get; set; }\n        [Required]\n        [MaxLength(200)]\n        public string Url { get; set; }\n\n        public List<Post> Posts { get; set; }\n    }\n\n    public class Post\n    {\n        public int PostId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n        public int BlogId { get; set; }\n        public Blog Blog { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Key Configuration - Data Annotations - C#\nDESCRIPTION: Configures a single property as the primary key of an entity using data annotations. The '[Key]' attribute is used to specify the primary key for the 'Car' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\ninternal class Car\n{\n    [Key]\n    public string LicensePlate { get; set; }\n\n    public string Make { get; set; }\n    public string Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Owned Types to a Separate Table with ToTable\nDESCRIPTION: This code snippet demonstrates how to map owned types (OrderDetails and its two addresses) to a separate table from the owner (DetailedOrder) using the `ToTable` method in Entity Framework Core. This overrides the default convention of mapping owned types to the same table as the owner. The `OnModelCreating` method configures the entity relationships and table mappings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<DetailedOrder>(b =>\n{\n    b.OwnsOne(o => o.OrderDetails, od =>\n    {\n        od.ToTable(\"OrderDetails\");\n        od.OwnsOne(c => c.BillingAddress);\n        od.OwnsOne(c => c.ShippingAddress);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Nullable Backing Field for Bool Property C#\nDESCRIPTION: This snippet demonstrates using a nullable backing field for a non-nullable bool property.  This allows tracking whether the property has been explicitly set, which is useful when working with database defaults.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_126\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n    public int Id { get; set; }\n    public bool IsActive { get; set; }\n}\n\npublic class Account\n{\n    public int Id { get; set; }\n\n    private bool? _isActive;\n\n    public bool IsActive\n    {\n        get => _isActive ?? false;\n        set => _isActive = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define ProductsContext DbContext C#\nDESCRIPTION: This code defines the `ProductsContext` class, derived from `DbContext`, which configures the entity types and acts as a session for interacting with the SQLite database. It includes `DbSet` properties for `Category` and `Product` entities and overrides `OnConfiguring` to specify the SQLite provider and connection string, and OnModelCreating to provide sample data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/winforms.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace GetStartedWinForms\n{\n    public class ProductsContext : DbContext\n    {\n        public DbSet<Category> Categories { get; set; }\n        public DbSet<Product> Products { get; set; }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            optionsBuilder.UseSqlite(\"Data Source=products.db\");\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Category>().HasData(\n                new Category { CategoryId = 1, Name = \"Dairy\" },\n                new Category { CategoryId = 2, Name = \"Meat\" },\n                new Category { CategoryId = 3, Name = \"Produce\" });\n\n            modelBuilder.Entity<Product>().HasData(\n                new Product { ProductId = 1, CategoryId = 1, Name = \"Milk\" },\n                new Product { ProductId = 2, CategoryId = 1, Name = \"Cheese\" },\n                new Product { ProductId = 3, CategoryId = 2, Name = \"Beef\" },\n                new Product { ProductId = 4, CategoryId = 2, Name = \"Chicken\" },\n                new Product { ProductId = 5, CategoryId = 3, Name = \"Apples\" },\n                new Product { ProductId = 6, CategoryId = 3, Name = \"Broccoli\" });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Foreign Key C#\nDESCRIPTION: This snippet shows how to rename a foreign key column in the database when the foreign key is not explicitly defined in the CLR type. It uses the MapKey method to specify the desired name for the foreign key column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()\n    .HasRequired(c => c.Department)\n    .WithMany(t => t.Courses)\n    .Map(m => m.MapKey(\"ChangedDepartmentID\"));\n```\n\n----------------------------------------\n\nTITLE: Define One-to-Many Relationship with Shadow FK, No Navigation to Principal\nDESCRIPTION: This C# code defines a one-to-many relationship between `Blog` and `Post` entities in Entity Framework Core. It sets up a shadow foreign key on the `Post` entity without a navigation property to the `Blog` entity. This example requires the Entity Framework Core package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n        // Principal (parent)\n        public class Blog\n        {\n            public int Id { get; set; }\n            public ICollection<Post> Posts { get; } = new List<Post>();  // Collection navigation containing dependents\n        }\n\n        // Dependent (child)\n        public class Post\n        {\n            public int Id { get; set; }\n        }\n```\n\n----------------------------------------\n\nTITLE: Finding Entity by Primary Key - EF6 - C#\nDESCRIPTION: This snippet demonstrates how to use the `Find` method in Entity Framework 6 to retrieve an entity by its primary key. It illustrates scenarios where the entity is retrieved from the context (without hitting the database), when it's added to the context but not yet saved, and when the primary key is a string. The `BloggingContext` is used to interact with the `Blogs` and `Users` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Will hit the database\n    var blog = context.Blogs.Find(3);\n\n    // Will return the same instance without hitting the database\n    var blogAgain = context.Blogs.Find(3);\n\n    context.Blogs.Add(new Blog { Id = -1 });\n\n    // Will find the new blog even though it does not exist in the database\n    var newBlog = context.Blogs.Find(-1);\n\n    // Will find a User which has a string primary key\n    var user = context.Users.Find(\"johndoe1987\");\n}\n```\n\n----------------------------------------\n\nTITLE: Generate SQL Script - Basic Usage - PowerShell\nDESCRIPTION: This command generates a SQL script from a blank database to the latest migration using PowerShell. It's equivalent to the .NET Core CLI command but uses the PowerShell syntax.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nScript-Migration\n```\n\n----------------------------------------\n\nTITLE: Define One-to-Many Relationship with No Navigations\nDESCRIPTION: This C# code defines the `Blog` and `Post` entities with a foreign key relationship, but without navigation properties on either side. The `Post` entity contains the `BlogId` foreign key property, establishing the relationship without the use of navigation properties. Requires Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n        // Principal (parent)\n        public class Blog\n        {\n            public int Id { get; set; }\n        }\n\n        // Dependent (child)\n        public class Post\n        {\n            public int Id { get; set; }\n            public int BlogId { get; set; } // Required foreign key property\n        }\n```\n\n----------------------------------------\n\nTITLE: Use TPC Mapping Strategy - C#\nDESCRIPTION: Configures the entity to use the Table-Per-Concrete-Type (TPC) mapping strategy explicitly within the `OnModelCreating` method. This sets the inheritance strategy at the model level.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Animal>().UseTpcMappingStrategy();\n```\n\n----------------------------------------\n\nTITLE: Setting Max Length From Data Annotation (C#)\nDESCRIPTION: This snippet shows how to set the max length of a property, indicating that the configuration is being made on behalf of a mapping attribute. This sets the ConfigurationSource to DataAnnotation, allowing it to be overridden by explicit mapping in OnModelCreating.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nproperty.Builder.HasMaxLength(512, fromDataAnnotation: true);\n```\n\n----------------------------------------\n\nTITLE: Mapping an Entity Type to a Specific Container in EF Core with Cosmos DB\nDESCRIPTION: This code snippet shows how to map a specific entity type (Order) to a particular container named \"Orders\" in Azure Cosmos DB when using EF Core. The `ToContainer` method is used on the entity builder for the `Order` entity type. This allows fine-grained control over container assignments for each entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Order>().ToContainer(\"Orders\");\n```\n\n----------------------------------------\n\nTITLE: Delete Posts for Author C#\nDESCRIPTION: This code deletes posts for a given author using ExecuteDeleteAsync and a filter. Requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Posts.Where(p => p.Author.Name.StartsWith(\"Arthur\")).ExecuteDeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: Default Stored Procedures - SQL\nDESCRIPTION: This snippet shows the default SQL stored procedures that Entity Framework generates when mapping an entity (Blog) to stored procedures.  It covers the insert, update, and delete procedures with parameters corresponding to the entity's properties. It assumes a Blog class with BlogId (int), Name (nvarchar(max)), and Url (nvarchar(max)) properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE [dbo].[Blog_Insert]\n  @Name nvarchar(max),\n  @Url nvarchar(max)\nAS\nBEGIN\n  INSERT INTO [dbo].[Blogs] ([Name], [Url])\n  VALUES (@Name, @Url)\n\n  SELECT SCOPE_IDENTITY() AS BlogId\nEND\nCREATE PROCEDURE [dbo].[Blog_Update]\n  @BlogId int,\n  @Name nvarchar(max),\n  @Url nvarchar(max)\nAS\n  UPDATE [dbo].[Blogs]\n  SET [Name] = @Name, [Url] = @Url     \n  WHERE BlogId = @BlogId;\nCREATE PROCEDURE [dbo].[Blog_Delete]\n  @BlogId int\nAS\n  DELETE FROM [dbo].[Blogs]\n  WHERE BlogId = @BlogId\n```\n\n----------------------------------------\n\nTITLE: Project Single Property C#\nDESCRIPTION: This snippet demonstrates how to use `Select` to project only the required columns from the database, optimizing the query. Only the `Url` property is fetched.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Using Select to tell EF which columns to project out\nvar blogUrls = context.Blogs.Select(b => b.Url).ToList();\nforeach (var url in blogUrls)\n{\n    Console.WriteLine(url);\n}\n```\n\n----------------------------------------\n\nTITLE: CurrencyToSymbolConverter C#\nDESCRIPTION: Defines a custom value converter that converts Currency enum values to their respective currency symbols.  Demonstrates implementing a ValueConverter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\npublic class CurrencyToSymbolConverter : ValueConverter<Currency, string>\n{\n    public CurrencyToSymbolConverter()\n        : base(\n            v => v == Currency.PoundsStirling ? \"£\" : v == Currency.Euros ? \"€\" : \"$\",\n            v => v == \"£\" ? Currency.PoundsStirling : v == \"€\" ? Currency.Euros : Currency.UsDollars)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Customer Entity C#\nDESCRIPTION: Queries the `Customer` entity from the database using `SingleAsync`. The `Retrieved` property will be automatically set by the `SetRetrievedInterceptor` when the entity is materialized. The code then prints the customer's name and the retrieval time.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_93\n\nLANGUAGE: csharp\nCODE:\n```\nawait using (var context = new CustomerContext())\n{\n    var customer = await context.Customers.SingleAsync(e => e.Name == \"Alice\");\n    Console.WriteLine($\"Customer '{customer.Name}' was retrieved at '{customer.Retrieved.ToLocalTime()}'\");\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of JSON Column Update (SQLite)\nDESCRIPTION: This SQL snippet displays the translated SQL query for updating a JSON column using SQLite. It utilizes the `json_set` function to modify the value of `$.Address.Country` within the `Contact` column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_65\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE \"Authors\" SET \"Contact\" = json_set(\"Contact\", '$.Address.Country', json_extract(@p0, '$[0]'))\nWHERE \"Id\" = @p1\nRETURNING 1;\n```\n\n----------------------------------------\n\nTITLE: Table Sharing Aggregate Configuration C#\nDESCRIPTION: Configures the Author entity to own a ContactDetails aggregate and an Address aggregate within ContactDetails.  This results in all properties being mapped to the same table (Authors).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Author>().OwnsOne(\n        author => author.Contact, ownedNavigationBuilder =>\n        {\n            ownedNavigationBuilder.OwnsOne(contactDetails => contactDetails.Address);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Entities in SaveChanges using DbSet.Local in EF6\nDESCRIPTION: This code demonstrates how to override the SaveChanges method to clean up entities using the DbSet.Local collection. It finds all posts that do not have a blog reference and marks them as deleted before calling base.SaveChanges().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/local-data.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic override int SaveChanges()\n{\n    foreach (var post in this.Posts.Local.ToList())\n    {\n        if (post.Blog == null)\n        {\n            this.Posts.Remove(post);\n        }\n    }\n\n    return base.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Entities in Hierarchy (TPC) - C#\nDESCRIPTION: This C# code snippet retrieves all entities from the inheritance hierarchy using Entity Framework Core. It demonstrates a simple query that fetches all types derived from the base 'Animals' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Animals.ToList();\n```\n\n----------------------------------------\n\nTITLE: SavingChanges Interceptor Methods\nDESCRIPTION: These C# code snippets show the implementation of the `SavingChangesAsync` and `SavingChanges` methods of a SaveChanges interceptor. They create an audit record before changes are saved, write it to the audit database, and then allow SaveChanges to continue.  The async and sync versions are both implemented for comprehensive interception.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic async ValueTask<InterceptionResult<int>> SavingChangesAsync(\n    DbContextEventData eventData,\n    InterceptionResult<int> result,\n    CancellationToken cancellationToken = default)\n{\n    _audit = CreateAudit(eventData.Context);\n\n    using (var auditContext = new AuditContext(_connectionString))\n    {\n        auditContext.Add(_audit);\n        await auditContext.SaveChangesAsync();\n    }\n\n    return result;\n}\n\npublic InterceptionResult<int> SavingChanges(\n    DbContextEventData eventData,\n    InterceptionResult<int> result)\n{\n    _audit = CreateAudit(eventData.Context);\n\n    using (var auditContext = new AuditContext(_connectionString))\n    {\n        auditContext.Add(_audit);\n        auditContext.SaveChanges();\n    }\n\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Halfling Entity with HierarchyId Property\nDESCRIPTION: This C# code defines a `Halfling` entity with a `HierarchyId` property named `PathFromPatriarch`. This property is used to represent the position of each halfling in the family tree hierarchy. It also has properties for `Id`, `Name` and `YearOfBirth`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Halfling\n    {\n        public Halfling(HierarchyId pathFromPatriarch, string name, int? yearOfBirth = null)\n        {\n            PathFromPatriarch = pathFromPatriarch;\n            Name = name;\n            YearOfBirth = yearOfBirth;\n        }\n\n        public int Id { get; private set; }\n        public HierarchyId PathFromPatriarch { get; set; }\n        public string Name { get; set; }\n        public int? YearOfBirth { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Precision and Scale with Data Annotations - C#\nDESCRIPTION: This code snippet shows how to configure the precision and scale of a decimal property using the `[Precision]` data annotation in Entity Framework Core. The precision defines the total number of digits, and the scale defines the number of digits after the decimal point. The dependency is System.ComponentModel.DataAnnotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\npublic class Product\n{\n    public int ProductId { get; set; }\n    [Precision(14, 2)]\n    public decimal Price { get; set; }\n\n    [Precision(3)]\n    public DateTime LastUpdated { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode with Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to configure whether a string property should be stored as Unicode or non-Unicode using the Fluent API in Entity Framework Core. The `IsUnicode` method on the `PropertyBuilder` is used. It requires the `DbContext` and `OnModelCreating` override to configure the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property(b => b.Title)\n        .IsUnicode(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Type Throughput in Cosmos DB\nDESCRIPTION: Illustrates configuring throughput for an individual entity type within an Azure Cosmos DB model using EF Core 6.0. This allows provisioning throughput for the container associated with the entity type. Requires the `modelBuilder` instance from the `OnModelCreating` method and assumes a `Family` entity type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Family>\n(\n    entityTypeBuilder =>\n    {\n        entityTypeBuilder.HasAutoscaleThroughput(3000);\n        entityTypeBuilder.HasAutoscaleThroughput(12000);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-Many Classes with Named Foreign Keys and Navigations (C#)\nDESCRIPTION: Defines the Post, Tag, and PostTag classes to represent a many-to-many relationship with named foreign keys. Post and Tag classes have navigations to each other and to the PostTag join class. The PostTag class defines the foreign key properties PostForeignKey and TagForeignKey.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostForeignKey { get; set; }\n    public int TagForeignKey { get; set; }\n    public Post Post { get; set; } = null!;\n    public Tag Tag { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Define User Entity Type with Required Property\nDESCRIPTION: This code defines a simple `User` entity with an `Id` and a required `Username` property. The `[Required]` attribute ensures that the `Username` cannot be null when saving to the in-memory database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_164\n\nLANGUAGE: csharp\nCODE:\n```\npublic class User\n{\n    public int Id { get; set; }\n\n    [Required]\n    public string Username { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Provider in DbContext\nDESCRIPTION: This code snippet configures the SQL Server provider in the `DbContext` using the `UseSqlServer` method. It specifies the connection string to the SQL Server database. The connection string includes the server, database name, and authentication method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/index.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\noptionsBuilder.UseSqlServer(\n    @\"Server=(localdb)\\mssqllocaldb;Database=MyDatabase;Trusted_Connection=True;\");\n```\n\n----------------------------------------\n\nTITLE: SQL for Count != 0 with EXISTS\nDESCRIPTION: This SQL query demonstrates the optimized SQL generated by EF Core 9 for `Count > 0` using `EXISTS`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_52\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"b\".\"Id\", \"b\".\"Name\", \"b\".\"SiteUri\"\nFROM \"Blogs\" AS \"b\"\nWHERE EXISTS (\n    SELECT 1\n    FROM \"Posts\" AS \"p\"\n    WHERE \"b\".\"Id\" = \"p\".\"BlogId\")\n```\n\n----------------------------------------\n\nTITLE: Map ETag to CLR Property (C#)\nDESCRIPTION: This code maps the eTag to a CLR property, making it easier to resolve concurrency errors. Requires Entity Framework Core and Cosmos DB provider. The CLR property must be of type string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\noptions.Entity<Order>()\n    .Property(o => o.ETag)\n    .IsETagConcurrency();\n```\n\n----------------------------------------\n\nTITLE: Querying Single Leaf Type (TPC) - C#\nDESCRIPTION: This C# code snippet retrieves entities only from the 'Cats' type, which is a leaf type in the inheritance hierarchy.  It demonstrates a query to retrieve entities from a specific leaf type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Cats.ToList();\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading without Proxies using ILazyLoader\nDESCRIPTION: This code snippet shows how to implement lazy loading without proxies by injecting the `ILazyLoader` service into the entity constructors. The `Posts` and `Blog` properties use the `LazyLoader.Load` method to load related data when accessed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/lazy.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    private ICollection<Post> _posts;\n\n    public Blog()\n    {\n    }\n\n    private Blog(ILazyLoader lazyLoader)\n    {\n        LazyLoader = lazyLoader;\n    }\n\n    private ILazyLoader LazyLoader { get; set; }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    public ICollection<Post> Posts\n    {\n        get => LazyLoader.Load(this, ref _posts);\n        set => _posts = value;\n    }\n}\n\npublic class Post\n{\n    private Blog _blog;\n\n    public Post()\n    {\n    }\n\n    private Post(ILazyLoader lazyLoader)\n    {\n        LazyLoader = lazyLoader;\n    }\n\n    private ILazyLoader LazyLoader { get; set; }\n\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public Blog Blog\n    {\n        get => LazyLoader.Load(this, ref _blog);\n        set => _blog = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Many-to-Many Relationship Using Foreign Keys\nDESCRIPTION: This code demonstrates how to add a relationship between a Post and a Tag using the PostTag join entity by setting the foreign key properties. It retrieves instances of Post and Tag from the database, creates a new PostTag entity, and assigns the respective PostId and TagId. The ChangeTracker is then used to show the established relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar post = context.Posts.Single(e => e.Id == 3);\nvar tag = context.Tags.Single(e => e.Id == 1);\n\ncontext.Add(new PostTag { PostId = post.Id, TagId = tag.Id });\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Disabling Value Generation with Data Annotations in EF Core\nDESCRIPTION: This C# code snippet shows how to disable value generation for a property using data annotations in EF Core.  The [DatabaseGenerated(DatabaseGeneratedOption.None)] attribute indicates that the value for the property will never be generated by the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\npublic class Blog\n{\n    [DatabaseGenerated(DatabaseGeneratedOption.None)]\n    public int BlogId { get; set; }\n\n    public string Url { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Salary Update using ExecuteSql (EF Core 7.0)\nDESCRIPTION: This C# code uses ExecuteSql to execute a raw SQL query for updating employee salaries in EF Core 7.0.  It allows direct SQL execution for tasks not easily achievable via LINQ.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-updating.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Database.ExecuteSql($\"UPDATE [Employees] SET [Salary] = [Salary] + 1000\");\n```\n\n----------------------------------------\n\nTITLE: Mapping Optional Dependents to Separate Tables in C#\nDESCRIPTION: This C# code demonstrates how to map optional dependents to their own tables instead of sharing a table with the principal. This mitigates data loss issues by ensuring each entity has its own dedicated table.  The ToTable() method within OwnsOne configures the table mapping for the Address entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Customer>(\n    b =>\n    {\n        b.ToTable(\"Customers\");\n        b.OwnsOne(e => e.Address, b => b.ToTable(\"CustomerAddresses\"));\n    });\n```\n\n----------------------------------------\n\nTITLE: Querying Scalar Types with SqlQuery - PostgreSQL\nDESCRIPTION: This code snippet demonstrates how to query scalar (non-entity) types using SqlQuery in EF Core with PostgreSQL. It fetches all the BlogId values from the Blogs table and returns them as a list of integers. Requires Entity Framework Core and a database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvar ids = await context.Database\n    .SqlQuery<int>($\"\"\"\n                    SELECT \\\"BlogId\\\" FROM \\\"Blogs\\\"\n                    \"\"\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Entity\nDESCRIPTION: This C# code defines a Customer entity with properties that map to the Customers, PhoneNumbers, and Addresses tables.  It includes properties for name, phone number, street, city, postcode, and country.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_166\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n    {\n        public Customer(string name, string street, string city, string? postCode, string country)\n        {\n            Name = name;\n            Street = street;\n            City = city;\n            PostCode = postCode;\n            Country = country;\n        }\n\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string? PhoneNumber { get; set; }\n        public string Street { get; set; }\n        public string City { get; set; }\n        public string? PostCode { get; set; }\n        public string Country { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Aggregate Over Subquery (C#)\nDESCRIPTION: This C# code shows an example of a complex query with an aggregate function (`Average`) composed over a subquery (selecting the latest post rating). EF Core 9 improves the translation of such queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nvar latestPostsAverageRatingByLanguage = await context.Blogs.\n    Select(x => new\n    {\n        x.Language,\n        LatestPostRating = x.Posts.OrderByDescending(xx => xx.PublishedOn).FirstOrDefault().Rating\n    })\n    .GroupBy(x => x.Language)\n    .Select(x => x.Average(xx => xx.LatestPostRating))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Model Configuration - Auto Include - C#\nDESCRIPTION: This code shows how to configure auto-include on model using `AutoInclude` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Theme>()\n        .Navigation(e => e.ColorScheme)\n        .AutoInclude();\n}\n```\n\n----------------------------------------\n\nTITLE: Using DbContext.Entry to access EntityEntry for a tracked entity C#\nDESCRIPTION: This code snippet demonstrates how to use `DbContext.Entry` to obtain an `EntityEntry` for a tracked `Blog` entity. The `EntityEntry` provides access to change tracking information and allows for manipulation of the entity's state and properties. It assumes a `BlogsContext` and a `Blog` entity exist.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blog = context.Blogs.Single(e => e.Id == 1);\nvar entityEntry = context.Entry(blog);\n```\n\n----------------------------------------\n\nTITLE: Logging to Console in EF Core\nDESCRIPTION: This code snippet demonstrates how to configure EF Core to log messages to the console using the `LogTo` method within the `OnConfiguring` method of a `DbContext`. It utilizes `Console.WriteLine` as the delegate to output the log messages.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(Console.WriteLine);\n```\n\n----------------------------------------\n\nTITLE: Querying Blogs with Navigation Filters in C#\nDESCRIPTION: This code snippet shows a LINQ query that retrieves all `Blog` entities. Due to the global query filter configured using navigation properties, this query will only return blogs that have at least one post containing the word \"fish\" in its title. This demonstrates the application of the filter defined in `NavigationInFilter`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = context.Blogs.ToList();\n```\n\n----------------------------------------\n\nTITLE: Querying Entities at a Given Level in the Hierarchy with EF Core and C#\nDESCRIPTION: This C# code snippet demonstrates how to use the `GetLevel()` method of the `HierarchyId` type within a LINQ query to retrieve all entities (halflings in this example) at a specific level in the hierarchical tree.  It requires an Entity Framework Core context and a `level` parameter to specify the desired level.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar generation = await context.Halflings.Where(halfling => halfling.PathFromPatriarch.GetLevel() == level).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Resolve Concurrency Conflicts - Client Wins - EF6\nDESCRIPTION: This snippet illustrates how to resolve concurrency conflicts by overwriting the database values with the current values in the entity (client wins). The code retrieves the current database values, sets them as the original values for the entity, and retries the SaveChanges operation. It utilizes DbUpdateConcurrencyException to catch concurrency issues.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/concurrency.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n    blog.Name = \"The New ADO.NET Blog\";\n\n    bool saveFailed;\n    do\n    {\n        saveFailed = false;\n        try\n        {\n            context.SaveChanges();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            saveFailed = true;\n\n            // Update original values from the database\n            var entry = ex.Entries.Single();\n            entry.OriginalValues.SetValues(entry.GetDatabaseValues());\n        }\n\n    } while (saveFailed);\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Database Fixture in an xUnit Test Class (C#)\nDESCRIPTION: This shows how to use the database fixture in a test class. The `IClassFixture` interface allows xUnit to inject the fixture into the constructor, making it available for use within the tests.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingControllerTest : IClassFixture<TestDatabaseFixture>\n{\n    public BloggingControllerTest(TestDatabaseFixture fixture)\n        => Fixture = fixture;\n\n    public TestDatabaseFixture Fixture { get; }\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying DogWalks by Terrain\nDESCRIPTION: This code snippet demonstrates how to query `DogWalk` entities based on their `Terrain` property, using the `Contains` method to check if the terrain is within a specified array of terrains. The translated SQL uses `OpenJson` in EF Core 8 for improved performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nvar terrains = new[] { Terrain.River, Terrain.Beach, Terrain.Park };\nvar walksWithTerrain = await context.Walks\n    .Where(e => terrains.Contains(e.Terrain))\n    .Select(e => e.Name)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Updating EF Core Tools Globally (.NET CLI)\nDESCRIPTION: This command updates the Entity Framework Core tools to the latest version when installed as a global tool. It ensures that you are using the most recent features and bug fixes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool update --global dotnet-ef\n```\n\n----------------------------------------\n\nTITLE: Setting Table Name and Schema with Fluent API - C#\nDESCRIPTION: This code shows how to specify both the table name and schema for an entity using the ToTable() method with schema parameter in OnModelCreating with the Fluent API.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().ToTable(\"Blogs\", schema: \"blogging\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode with Data Annotations - C#\nDESCRIPTION: This code snippet shows how to configure whether a string property should be stored as Unicode or non-Unicode in the database using the `[Unicode]` data annotation in Entity Framework Core. The dependency is System.ComponentModel.DataAnnotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    [Unicode(false)]\n    public string Title { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments with .NET Core CLI\nDESCRIPTION: This shows how to pass command-line arguments to the `dotnet ef` tool, which in turn forwards them to the application's `CreateHostBuilder` method or the `IDesignTimeDbContextFactory`. The `--` token is used to separate `dotnet ef` options from the arguments intended for the application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dbcontext-creation.md#_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef database update -- --environment Production\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Multiple Leaf Includes Filtered - C#\nDESCRIPTION: Demonstrates scenarios where you include the same navigation multiple times and only one can contain filtering operations. Only one `Include` of blog posts can have a filter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts.Where(p => p.Rating > 5))\n    .Include(b => b.Posts)\n        .ThenInclude(p => p.Author)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Tweaking Batch Size in EF Core\nDESCRIPTION: This C# code snippet shows how to customize the maximum batch size for database operations in EF Core using the MaxBatchSize option.  This allows for potential performance tuning but requires careful benchmarking.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-updating.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Performance/Other/BatchTweakingContext.cs#BatchTweaking)]\n```\n\n----------------------------------------\n\nTITLE: Configure Manual or Autoscale Throughput in EF Core Model\nDESCRIPTION: This snippet shows how to configure manual or autoscale throughput for an Azure Cosmos DB database using EF Core's model builder. It uses the HasManualThroughput and HasAutoscaleThroughput extension methods to set the desired throughput.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.HasManualThroughput(2000);\nmodelBuilder.HasAutoscaleThroughput(4000);\n```\n\n----------------------------------------\n\nTITLE: OwnsMany Configuration C#\nDESCRIPTION: Demonstrates configuring a collection of owned entities using the `OwnsMany` method in `OnModelCreating`. It specifies that the `ShippingCenters` property of the `Distributor` entity is a collection of owned entities. It also shows how to configure a different primary key using `HasKey`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Modeling.OwnedEntities\n{\n    public class OwnedEntityContext : DbContext\n    {\n        public DbSet<Distributor> Distributors { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Distributor>(builder =>\n            {\n                builder.OwnsMany(d => d.ShippingCenters, sa =>\n                {\n                    sa.WithOwner().HasForeignKey(sa => sa.Id);\n                    sa.Property(sa => sa.City).HasMaxLength(64);\n                    sa.HasKey(sa => sa.Id);\n                });\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Animal Hierarchy - C#\nDESCRIPTION: Defines an abstract animal hierarchy with base class Animal and derived classes Pet, FarmAnimal, Cat, Dog, and Human.  Illustrates the class structure using inheritance, abstract properties, and collections, demonstrating a typical object model for TPC inheritance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class Animal\n    {\n        protected Animal(string name)\n        {\n            Name = name;\n        }\n\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public abstract string Species { get; }\n\n        public Food? Food { get; set; }\n    }\n\n    public abstract class Pet : Animal\n    {\n        protected Pet(string name)\n            : base(name)\n        {\n        }\n\n        public string? Vet { get; set; }\n\n        public ICollection<Human> Humans { get; } = new List<Human>();\n    }\n\n    public class FarmAnimal : Animal\n    {\n        public FarmAnimal(string name, string species)\n            : base(name)\n        {\n            Species = species;\n        }\n\n        public override string Species { get; }\n\n        [Precision(18, 2)]\n        public decimal Value { get; set; }\n\n        public override string ToString()\n            => $\"Farm animal '{Name}' ({Species}/{Id}) worth {Value:C} eats {Food?.ToString() ?? \\\"<Unknown>\\\"}\";\n    }\n\n    public class Cat : Pet\n    {\n        public Cat(string name, string educationLevel)\n            : base(name)\n        {\n            EducationLevel = educationLevel;\n        }\n\n        public string EducationLevel { get; set; }\n        public override string Species => \"Felis catus\";\n\n        public override string ToString()\n            => $\"Cat '{Name}' ({Species}/{Id}) with education '{EducationLevel}' eats {Food?.ToString() ?? \\\"<Unknown>\\\"}\";\n    }\n\n    public class Dog : Pet\n    {\n        public Dog(string name, string favoriteToy)\n            : base(name)\n        {\n            FavoriteToy = favoriteToy;\n        }\n\n        public string FavoriteToy { get; set; }\n        public override string Species => \"Canis familiaris\";\n\n        public override string ToString()\n            => $\"Dog '{Name}' ({Species}/{Id}) with favorite toy '{FavoriteToy}' eats {Food?.ToString() ?? \\\"<Unknown>\\\"}\";\n    }\n\n    public class Human : Animal\n    {\n        public Human(string name)\n            : base(name)\n        {\n        }\n\n        public override string Species => \"Homo sapiens\";\n\n        public Animal? FavoriteAnimal { get; set; }\n        public ICollection<Pet> Pets { get; } = new List<Pet>();\n\n        public override string ToString()\n            => $\"Human '{Name}' ({Species}/{Id}) with favorite animal '{FavoriteAnimal?.Name ?? \\\"<Unknown>\\\"}'\" +\n               $\" eats {Food?.ToString() ?? \\\"<Unknown>\\\"}\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Raw SQL to an EF Core Migration (C#)\nDESCRIPTION: This C# code snippet demonstrates how to add raw SQL commands to an EF Core migration using `migrationBuilder.Sql`. This is useful for more complex data transformations, such as combining existing columns into a new one. It avoids data loss by transferring the old data to the new column before dropping the old ones. This assumes the database is SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nmigrationBuilder.AddColumn<string>(\n    name: \"FullName\",\n    table: \"Customer\",\n    nullable: true);\n\nmigrationBuilder.Sql(\n@\"\n    UPDATE Customer\n    SET FullName = FirstName + ' ' + LastName;\n\");\n\nmigrationBuilder.DropColumn(\n    name: \"FirstName\",\n    table: \"Customer\");\n\nmigrationBuilder.DropColumn(\n    name: \"LastName\",\n    table: \"Customer\");\n```\n\n----------------------------------------\n\nTITLE: Update Entity with Original Values - C#\nDESCRIPTION: This example demonstrates updating an entity using original values to determine which properties have changed. The entity is first attached in an 'Unchanged' state, and then the original values are applied. Only properties with different current and original values are marked as modified, reducing unnecessary database updates. This method requires sending original values from the client.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdateFromHttpPost6(Blog blog, Dictionary<string, object> originalValues)\n{\n    using var context = new BlogsContext();\n\n    context.Attach(blog);\n    context.Entry(blog).OriginalValues.SetValues(originalValues);\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent C# code for Filtered Include\nDESCRIPTION: This C# code snippet demonstrates an equivalent query using publicly accessible navigation property. It filters and orders the Posts collection of a Blog even if the Posts navigation property is private.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Blogs.Include(\n    blog => Posts\n        .Where(post => post.Content.Contains(\".NET\"))\n        .OrderBy(post => post.Title));\n```\n\n----------------------------------------\n\nTITLE: Discovering Collection Navigations in EF Core (C#)\nDESCRIPTION: This code shows how EF Core identifies collection navigations based on properties implementing `IEnumerable<TEntity>`. `Blog.Tags` and `Tag.Blogs` are discovered as collection navigations. The key criteria are: public property, getter exists (setter optional), and the property type is or implements `IEnumerable<TEntity>`, where TEntity is a reference type that is or could be an entity type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; set; } = null!;\n}\n\npublic class Tag\n{\n    public Guid Id { get; set; }\n    public IEnumerable<Blog> Blogs { get; } = new List<Blog>();\n}\n```\n\n----------------------------------------\n\nTITLE: Severing Optional Relationship in C# (Method 1)\nDESCRIPTION: This C# code snippet demonstrates severing an optional relationship between a blog and its posts by setting the `Blog` navigation property of each post to `null`.  When `SaveChanges` is called, the database will be updated to set the corresponding foreign key `BlogId` to null for each post.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blog = context.Blogs.OrderBy(e => e.Name).Include(e => e.Posts).First();\n\nforeach (var post in blog.Posts)\n{\n    post.Blog = null;\n}\n            \ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: IsMemoryOptimized Configuration - C#\nDESCRIPTION: This code snippet demonstrates how to configure an entity to be mapped to a memory-optimized table in SQL Server using Entity Framework Core. It overrides the OnModelCreating method of the DbContext and uses the IsMemoryOptimized() extension method to specify that the table for the specified entity should be memory-optimized. This requires the Microsoft.EntityFrameworkCore package and the SQL Server provider. The entity being configured should have a corresponding table in the database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/memory-optimized-tables.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .ToTable(\"Blogs\", t => t.IsMemoryOptimized());\n```\n\n----------------------------------------\n\nTITLE: Connection string in appsettings.json\nDESCRIPTION: Defines a connection string in the `appsettings.json` file. This example shows a connection string named 'BloggingDatabase' for a local SQL Server database. Sensitive data should NOT be stored here for production environments.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-strings.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"BloggingDatabase\": \"Server=(localdb)\\\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.NewDb;Trusted_Connection=True;\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Negated Nullable Comparison Filter - C#\nDESCRIPTION: This C# code snippet demonstrates a query with a negated nullable comparison in a filter. EF Core 9 correctly translates this into SQL that handles null values according to C# semantics, ensuring consistent results across different database providers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nvar negatedNullableComparisonFilter = await context.Entities\n    .Where(x => !(x.NullableIntOne > x.NullableIntTwo))\n    .Select(x => new { x.NullableIntOne, x.NullableIntTwo }).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Filters with Navigation in C#\nDESCRIPTION: This code snippet configures a query filter that uses navigation properties. It defines a filter on the `Blog` entity that checks if any of its related `Post` entities contain the word \"fish\" in their title.  This demonstrates how query filters can be applied recursively to related entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().HasQueryFilter(b => b.Posts.Any(p => p.Title.Contains(\"fish\")));\n}\n```\n\n----------------------------------------\n\nTITLE: ReaderExecutedAsync Interceptor Method in EF Core\nDESCRIPTION: This C# code overrides the `ReaderExecutedAsync` method of an EF Core interceptor. It is invoked after the database query has been executed. It checks if the executed command text is related to the daily message query and if the result is not already a cached reader. If these conditions are met, it reads the results from the database, stores the message ID and text in the cache, and returns a new `CachedDailyMessageDataReader` containing the retrieved data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic override async ValueTask<DbDataReader> ReaderExecutedAsync(\n        DbCommand command,\n        CommandExecutedEventData eventData,\n        DbDataReader result,\n        CancellationToken cancellationToken = default)\n    {\n        if (command.CommandText.StartsWith(\"-- Get_Daily_Message\", StringComparison.Ordinal)\n            && !(result is CachedDailyMessageDataReader))\n        {\n            try\n            {\n                await result.ReadAsync(cancellationToken);\n\n                lock (_lock)\n                {\n                    _id = result.GetInt32(0);\n                    _message = result.GetString(1);\n                    _queriedAt = DateTime.UtcNow;\n                    return new CachedDailyMessageDataReader(_id, message);\n                }\n            }\n            finally\n            {\n                await result.DisposeAsync();\n            }\n        }\n\n        return result;\n    }\n```\n\n----------------------------------------\n\nTITLE: TPC Configuration with Custom Column Names - C#\nDESCRIPTION: Configures the TPC inheritance mapping strategy in EF Core 7, specifying different column names for both the primary key (Id) and the Breed property in the Cat and Dog tables. This allows each table to have custom column names tailored to the specific entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Animal>().UseTpcMappingStrategy();\n\nmodelBuilder.Entity<Cat>()\n    .ToTable(\n        \"Cats\",\n        builder =>\n        {\n            builder.Property(cat => cat.Id).HasColumnName(\"CatId\");\n            builder.Property(cat => cat.Breed).HasColumnName(\"CatBreed\");\n        });\n\nmodelBuilder.Entity<Dog>()\n    .ToTable(\n        \"Dogs\",\n        builder =>\n        {\n            builder.Property(dog => dog.Id).HasColumnName(\"DogId\");\n            builder.Property(dog => dog.Breed).HasColumnName(\"DogBreed\");\n        });\n```\n\n----------------------------------------\n\nTITLE: Defining Employee and EmployeeInfo entities\nDESCRIPTION: This C# code defines an Employee entity and an owned EmployeeInfo entity. The EmployeeInfo entity contains information about the employee's position, department, address, and annual salary.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_170\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee\n    {\n        public Guid EmployeeId { get; set; }\n        public string Name { get; set; } = null!;\n\n        public EmployeeInfo Info { get; set; } = null!;\n    }\n\n    public class EmployeeInfo\n    {\n        public string Position { get; set; } = null!;\n        public string Department { get; set; } = null!;\n        public string? Address { get; set; }\n        public decimal? AnnualSalary { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContext for Shared Connection\nDESCRIPTION: This code demonstrates how to configure a DbContext to accept an externally provided DbConnection, which is necessary for sharing a transaction across multiple context instances. It avoids using DbContext.OnConfiguring directly and instead uses DbContextOptions to configure the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/transactions.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public BloggingContext(DbContextOptions<BloggingContext> options)\n        : base(options)\n    { }\n\n    public DbSet<Blog> Blogs { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Discriminator Length Convention (Max Value Length) - C#\nDESCRIPTION: This convention, also implementing IModelFinalizingConvention, calculates the maximum length of discriminator values used in the inheritance hierarchy. It then configures the discriminator property with this calculated length, optimizing storage based on actual discriminator values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_70\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DiscriminatorLengthConvention3 : IModelFinalizingConvention\n{\n    public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context)\n    {\n        foreach (var entityType in modelBuilder.Metadata.GetEntityTypes()\n                     .Where(entityType => entityType.BaseType == null))\n        {\n            var discriminatorProperty = entityType.FindDiscriminatorProperty();\n            if (discriminatorProperty != null\n                && discriminatorProperty.ClrType == typeof(string))\n            {\n                var maxDiscriminatorValueLength =\n                    entityType.GetDerivedTypesInclusive().Select(e => ((string)e.GetDiscriminatorValue()!).Length).Max();\n\n                discriminatorProperty.Builder.HasMaxLength(maxDiscriminatorValueLength);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Immutable Address Struct Record C#\nDESCRIPTION: This C# snippet defines an immutable `Address` struct record.  The properties are read-only, preventing modification after the object is created. To change an address, a new record with the changes can be created using the 'with' keyword.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly record struct Address(string Line1, string? Line2, string City, string Country, string PostCode);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Indexes on Same Columns\nDESCRIPTION: This snippet demonstrates how to create multiple indexes on the same set of columns with different ordering in EF Core 7. Indexes are differentiated by name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_152\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Blog>()\n    .HasIndex(blog => new { blog.Name, blog.Owner }, \"IX_Blogs_Name_Owner_1\")\n    .IsDescending(false, true);\n\nmodelBuilder\n    .Entity<Blog>()\n    .HasIndex(blog => new { blog.Name, blog.Owner }, \"IX_Blogs_Name_Owner_2\")\n    .IsDescending(true, true);\n```\n\n----------------------------------------\n\nTITLE: Using Private Setters for Read-Only Properties\nDESCRIPTION: This code illustrates how to make properties read-only by using private setters. This allows EF Core to map the properties as before while preventing external modification after object construction.  This is useful when properties are initialized in the constructor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/constructors.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public Blog(int id, string name, string author)\n    {\n        Id = id;\n        Name = name;\n        Author = author;\n    }\n\n    public int Id { get; private set; }\n\n    public string Name { get; private set; }\n    public string Author { get; private set; }\n\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public Post(int id, string title, DateTime postedOn)\n    {\n        Id = id;\n        Title = title;\n        PostedOn = postedOn;\n    }\n\n    public int Id { get; private set; }\n\n    public string Title { get; private set; }\n    public string Content { get; set; }\n    public DateTime PostedOn { get; private set; }\n\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Blog and BlogContext Classes\nDESCRIPTION: This C# code defines the Blog and BlogContext classes using Entity Framework.\nIt includes the necessary using statements, defines a BlogContext class inheriting from DbContext with a DbSet for Blogs, and a Blog class with BlogId and Name properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/automatic.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Data.Entity.Infrastructure;\n\nnamespace MigrationsAutomaticDemo\n{\n    public class BlogContext : DbContext\n    {\n        public DbSet<Blog> Blogs { get; set; }\n    }\n\n    public class Blog\n    {\n        public int BlogId { get; set; }\n        public string Name { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Required Attribute on Foreign Key Property in EF Core\nDESCRIPTION: This snippet demonstrates using the `[Required]` attribute on a foreign key property (`BlogId`) to make the relationship between `Post` and `Blog` required. This enforces that `BlogId` cannot be null, ensuring every `Post` is associated with a `Blog`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/mapping-attributes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public string Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    [Required]\n    public string BlogId { get; set; }\n\n    public Blog Blog { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Savepoints in EF Core\nDESCRIPTION: This code demonstrates how to manually manage savepoints within a transaction in Entity Framework Core. It shows how to create a savepoint using Database.CreateSavepoint, rollback to it using Database.RollbackToSavepoint, and release it using Database.ReleaseSavepoint. Requires Entity Framework Core and a database provider that supports savepoints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/transactions.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    using (var transaction = context.Database.BeginTransaction())\n    {\n        try\n        {\n            context.Blogs.Add(new Blog { Name = \"My new Blog #1\" });\n            context.SaveChanges();\n\n            context.Database.CreateSavepoint(\"BeforeNewBlog2\");\n\n            context.Blogs.Add(new Blog { Name = \"My new Blog #2\" });\n            context.SaveChanges();\n\n            transaction.Commit();\n        }\n        catch (Exception)\n        {\n            // TODO: Handle failure\n            context.Database.RollbackToSavepoint(\"BeforeNewBlog2\");\n\n            // Try saving again with some corrective action.\n            context.Blogs.Add(new Blog { Name = \"My corrected Blog #2\" });\n            context.SaveChanges();\n\n            transaction.Commit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Rider and EquineBeast Classes\nDESCRIPTION: This C# code snippet defines the `Rider` class with an `Id` and an `EquineBeast` property, and the `EquineBeast` enum with values for Donkey, Mule, Horse, and Unicorn.  These classes are used in the examples to demonstrate value conversions, specifically converting the enum to a string representation in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Rider\n{\n    public int Id { get; set; }\n    public EquineBeast Mount { get; set; }\n}\n\npublic enum EquineBeast\n{\n    Donkey,\n    Mule,\n    Horse,\n    Unicorn\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading Proxies in EF Core\nDESCRIPTION: This code snippet demonstrates how to enable lazy loading proxies in EF Core by installing the `Microsoft.EntityFrameworkCore.Proxies` package and calling `UseLazyLoadingProxies` within the `OnConfiguring` method of a `DbContext` or when adding the context using `AddDbContext`. This allows EF Core to automatically lazy-load navigation properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/lazy.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseLazyLoadingProxies()\n        .UseSqlServer(myConnectionString);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Schema using Fluent API - EF6 - C#\nDESCRIPTION: This code snippet shows how to set the default schema for all tables, stored procedures, and other database objects using the `HasDefaultSchema` method on the `DbModelBuilder`. This allows you to organize your database objects into a specific schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.HasDefaultSchema(\"sales\");\n```\n\n----------------------------------------\n\nTITLE: OnModelCreating Entity Registration C#\nDESCRIPTION: Demonstrates registering an entity type directly in OnModelCreating.  This is another way to ensure that the entity type is included in the model, which is required for the EntityTypeConfiguration attribute to function.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Book>();\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Command for Deleting a Blog\nDESCRIPTION: This SQL snippet shows the SQL command executed when deleting a blog entity. It is shown in the context of EF Core and how it translates the delete operation into a database command. It assumes that the database context is tracking the blog entity and that its `Id` is 1.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- Executed DbCommand (6ms) [Parameters=[@p0='1'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [Blogs]\nWHERE [Id] = @p0;\nSELECT @@ROWCOUNT;\n```\n\n----------------------------------------\n\nTITLE: Expose a constructor with DbContextOptions\nDESCRIPTION: Defines the ApplicationDbContext class, which inherits from DbContext, and exposes a public constructor that accepts a DbContextOptions<ApplicationDbContext> parameter. This allows context configuration from AddDbContext to be passed to the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApplicationDbContext : DbContext\n{\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\n        : base(options)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Enum Definition C#\nDESCRIPTION: Defines a Currency enum with values for US Dollars, Pounds Sterling, and Euros, used to demonstrate the HasConversion API improvements.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\npublic enum Currency\n{\n    UsDollars,\n    PoundsStirling,\n    Euros\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ForeignKey Attribute in EF6 Code First C#\nDESCRIPTION: This code snippet demonstrates how to use the `ForeignKey` data annotation to explicitly define the foreign key relationship between the `Post` and `Blog` classes in Entity Framework Code First. It specifies that the `Blog` navigation property in the `Post` class is related to the `BlogId` property, which acts as the foreign key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Post\n{\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public DateTime DateCreated { get; set; }\n        public string Content { get; set; }\n        public int BlogId { get; set; }\n        [ForeignKey(\"BlogId\")]\n        public Blog Blog { get; set; }\n        public ICollection<Comment> Comments { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Entities with EF Core for Benchmarking\nDESCRIPTION: This benchmark method loads all Blog entities from the database, calculates the sum of their rankings, and then computes the average ranking. It directly uses EF Core to fetch and process the data, including the overhead of identity resolution and change tracking.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing BenchmarkDotNet.Attributes;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Benchmarks;\n\n[MemoryDiagnoser]\npublic class AverageBlogRanking\n{\n    private string _connectionString = null!;\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        _connectionString = Helpers.GetConnectionString();\n        using var context = new BloggingContext(_connectionString);\n        context.Database.EnsureDeleted();\n        context.Database.EnsureCreated();\n\n        context.Blogs.AddRange(\n            new Blog { Ranking = 1 },\n            new Blog { Ranking = 2 },\n            new Blog { Ranking = 3 });\n\n        context.SaveChanges();\n    }\n\n    [Benchmark(Baseline = true)]\n    public double LoadEntities()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.ToList().Average(b => b.Ranking);\n    }\n\n    [Benchmark]\n    public double LoadEntitiesNoTracking()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.AsNoTracking().ToList().Average(b => b.Ranking);\n    }\n\n    [Benchmark]\n    public double ProjectOnlyRanking()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.Select(b => b.Ranking).ToList().Average();\n    }\n\n    [Benchmark]\n    public double CalculateInDatabase()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.Average(b => b.Ranking);\n    }\n}\n\npublic class BloggingContext : DbContext\n{\n    private readonly string _connectionString;\n\n    public BloggingContext(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public DbSet<Blog> Blogs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlite(_connectionString);\n    }\n}\n\npublic class Blog\n{\n    public int Id { get; set; }\n    public int Ranking { get; set; }\n}\n\npublic static class Helpers\n{\n    public static string GetConnectionString()\n    {\n        var databaseName = $\"Test_{Guid.NewGuid()}\";\n        return $\"Data Source={databaseName}.db\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping to a View with Fluent API - C#\nDESCRIPTION: This code demonstrates how to map an entity type to a database view using the ToView() method with Fluent API.  It assumes the view already exists in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().ToView(\"BlogsView\");\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Updates with Savepoints in SQLite\nDESCRIPTION: This C# code demonstrates the use of savepoints in a transaction with SQLite. It shows how to create a transaction, perform an update, create a savepoint, perform another update, rollback to the savepoint, and then commit the transaction, allowing only the first update to be saved to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_177\n\nLANGUAGE: C#\nCODE:\n```\nusing var connection = new SqliteConnection(\"DataSource=test.db\");\nconnection.Open();\n\nusing var transaction = connection.BeginTransaction();\n\nusing (var command = connection.CreateCommand())\n{\n    command.CommandText = @\"UPDATE Users SET Username = 'ajcvickers' WHERE Id = 1\";\n    command.ExecuteNonQuery();\n}\n\ntransaction.Save(\"MySavepoint\");\n\nusing (var command = connection.CreateCommand())\n{\n    command.CommandText = @\"UPDATE Users SET Username = 'wfvickers' WHERE Id = 2\";\n    command.ExecuteNonQuery();\n}\n\ntransaction.Rollback(\"MySavepoint\");\n\ntransaction.Commit();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SQL Elastic Pool Performance - C#\nDESCRIPTION: This code snippet demonstrates how to configure the performance level for an Azure SQL elastic pool using `HasPerformanceLevelSql`. This method is required because the value isn't a string literal. This is set during the database model creation, likely in the `OnModelCreating` override.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/azure-sql-database.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasPerformanceLevelSql(\"ELASTIC_POOL (SERVICE_OBJECTIVE = ELASTIC_POOL_S0)\");\n```\n\n----------------------------------------\n\nTITLE: Mapping Entity Splitting - C#\nDESCRIPTION: Implements entity splitting for the 'Department' entity, mapping properties to two tables: 'Department' (DepartmentID, Name) and 'DepartmentDetails' (DepartmentID, Administrator, StartDate, Budget).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>()\n    .Map(m =>\n    {\n        m.Properties(t => new { t.DepartmentID, t.Name });\n        m.ToTable(\"Department\");\n    })\n    .Map(m =>\n    {\n        m.Properties(t => new { t.DepartmentID, t.Administrator, t.StartDate, t.Budget });\n        m.ToTable(\"DepartmentDetails\");\n    });\n```\n\n----------------------------------------\n\nTITLE: stringValue.Contains .NET to SQL translation\nDESCRIPTION: Shows how stringValue.Contains in .NET corresponds to CONTAINS in SQL within the context of Entity Framework Core. This determines if a string contains a specified substring.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_18\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Contains(value)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[CONTAINS(@stringValue, @value)](/azure/cosmos-db/nosql/query/contains)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Property Value - C#\nDESCRIPTION: This code snippet demonstrates how to get and set the current value of a property of an entity in Entity Framework Core. It retrieves the current value of the 'Name' property and then sets it to a new value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstring currentValue = context.Entry(blog).Property(e => e.Name).CurrentValue;\ncontext.Entry(blog).Property(e => e.Name).CurrentValue = \"1unicorn2\";\n```\n\n----------------------------------------\n\nTITLE: DbContext Factory Configuration - C#\nDESCRIPTION: This code snippet shows the configuration for a DbContext factory that creates new contexts connecting to Azure Cosmos DB. The factory is injected into the service to enable a \"context per operation\" approach, improving resiliency. It configures the DbContext to use Azure Cosmos DB provider using configuration settings and registers the `IDbContextFactory<DocsContext>` for dependency injection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddDbContextFactory<DocsContext>(options =>\n{\n    options.UseCosmos(\n        builder.Configuration[\"CosmosEndpoint\"],\n        builder.Configuration[\"CosmosKey\"],\n        databaseName: builder.Configuration[\"CosmosDatabaseName\"]\n    );\n});\n\nbuilder.Services.AddScoped<IDocumentService, DocumentService>();\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure for Optimistic Concurrency\nDESCRIPTION: This SQL code defines a stored procedure `Documents_Update` that implements optimistic concurrency using a `rowversion` column.  It updates the `Title` for a document, but only if the `Id` and the original `RowVersion` match the current values in the database. It returns the number of rows affected, and the new `RowVersion` as an output parameter. A temporary table is used to capture the output value before sending it back to the caller.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_87\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE [dbo].[Documents_Update]\n    @Id [int],\n    @RowVersion_Original [rowversion],\n    @Title [nvarchar](max),\n    @RowVersion [rowversion] OUT\nAS\nBEGIN\n    DECLARE @TempTable table ([RowVersion] varbinary(8));\n    UPDATE [Documents] SET\n        [Title] = @Title\n    OUTPUT INSERTED.[RowVersion] INTO @TempTable\n    WHERE [Id] = @Id AND [RowVersion] = @RowVersion_Original\n    SELECT @@ROWCOUNT;\n    SELECT @RowVersion = [RowVersion] FROM @TempTable;\nEND\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Relationships - EF6\nDESCRIPTION: This EF6 code snippet configures a required relationship between the `Instructor` and `OfficeAssignment` entities using `HasRequired` and `WithRequiredPrincipal`. This establishes that both entities are required for the relationship to be valid.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/efcore-and-ef6/porting/port-detailed-cases.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Instructor>()\n    .HasRequired(t => t.OfficeAssignment)\n    .WithRequiredPrincipal(t => t.Instructor);\n```\n\n----------------------------------------\n\nTITLE: Handle Data Interaction C#\nDESCRIPTION: Implements the data interaction logic in the MainWindow.xaml.cs file. It creates an instance of ProductContext, queries and saves data to the database, and disposes of the context when the window is closing. It also handles loading the categories into the DataGrid and saving changes when the button is clicked.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/wpf.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Windows;\nusing System.Windows.Data;\n\nnamespace GetStartedWPF\n{\n    /// <summary>\n    /// Interaction logic for MainWindow.xaml\n    /// </summary>\n    public partial class MainWindow : Window\n    {\n        private ProductContext _context = new ProductContext();\n\n        public MainWindow()\n        {\n            InitializeComponent();\n\n            // Make sure the database exists\n            _context.Database.EnsureCreated();\n\n            // Load the entities into EF Core\n            _context.Categories.Load();\n\n            // Bind to the source\n            CategoriesViewSource.Source = _context.Categories.Local.ToObservableCollection();\n        }\n\n        protected override void OnClosing(CancelEventArgs e)\n        {\n            base.OnClosing(e);\n            _context.Dispose();\n        }\n\n        private void Button_Click(object sender, RoutedEventArgs e)\n        {\n            // Save changes to the database\n            _context.SaveChanges();\n\n            // Refresh the data grid\n            categoriesDataGrid.Items.Refresh();\n            productsDataGrid.Items.Refresh();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting IDbContextFactory into a Controller - C#\nDESCRIPTION: This snippet shows how to inject the IDbContextFactory<ApplicationDbContext> into a controller using constructor injection. The factory is then used to create DbContext instances.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprivate readonly IDbContextFactory<ApplicationDbContext> _contextFactory;\n\npublic MyController(IDbContextFactory<ApplicationDbContext> contextFactory)\n{\n    _contextFactory = contextFactory;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Conventions for Value Converter\nDESCRIPTION: This code snippet shows how to use `ConfigureConventions` in a DbContext to apply a `CurrencyConverter` to all decimal properties.  This will automatically convert all decimal values to strings when writing to the database, and back to decimal when reading.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder\n        .Properties<decimal>()\n        .HaveConversion<CurrencyConverter>();\n}\n```\n\n----------------------------------------\n\nTITLE: Define Order Entity\nDESCRIPTION: This C# code defines the `Order` entity class. It includes properties for Id, Customer, and ShippingAddress, illustrating a basic data structure for representing an order in the application. ShippingAddress is an owned entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/index.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    public string Customer { get; set; }\n\n    public StreetAddress ShippingAddress { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Complex Properties - C#\nDESCRIPTION: This code showcases various ways to access and retrieve values of complex properties, including nested complex properties, using lambda expressions and dotted strings. It utilizes `ComplexProperty` and `Property` methods to navigate through complex objects.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var user = context.Users.Find(\"johndoe1987\");\n\n    // Get the Location complex object\n    var location = context.Entry(user)\n                       .Property(u => u.Location)\n                       .CurrentValue;\n\n    // Get the nested State complex object using chained calls\n    var state1 = context.Entry(user)\n                     .ComplexProperty(u => u.Location)\n                     .Property(l => l.State)\n                     .CurrentValue;\n\n    // Get the nested State complex object using a single lambda expression\n    var state2 = context.Entry(user)\n                     .Property(u => u.Location.State)\n                     .CurrentValue;\n\n    // Get the nested State complex object using a dotted string\n    var state3 = context.Entry(user)\n                     .Property(\"Location.State\")\n                     .CurrentValue;\n\n    // Get the value of the Name property on the nested State complex object using chained calls\n    var name1 = context.Entry(user)\n                       .ComplexProperty(u => u.Location)\n                       .ComplexProperty(l => l.State)\n                       .Property(s => s.Name)\n                       .CurrentValue;\n\n    // Get the value of the Name property on the nested State complex object using a single lambda expression\n    var name2 = context.Entry(user)\n                       .Property(u => u.Location.State.Name)\n                       .CurrentValue;\n\n    // Get the value of the Name property on the nested State complex object using a dotted string\n    var name3 = context.Entry(user)\n                       .Property(\"Location.State.Name\")\n                       .CurrentValue;\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite In-Memory Setup C#\nDESCRIPTION: This code snippet shows how to configure and use an in-memory SQLite database for testing EF Core applications. A connection is opened before passing it to EF Core, and it's arranged to be closed only when the test completes. This avoids resetting the database every time a query is executed, as a new database is created each time a connection is opened.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-without-the-database.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// This code snippet is intentionally left blank. It is referencing external code.\n// Please view the source code to understand how the constructor and dispose methods are implemented.\n\n```\n\n----------------------------------------\n\nTITLE: Connection Example in EF Core 6 with SQLite\nDESCRIPTION: This C# code demonstrates how EF Core opens and closes connections when performing database operations with SQLite. It shows that the connection is opened and closed rapidly for each operation. This behavior is influenced by connection pooling, especially when dealing with expensive operations like opening connections to encrypted databases.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_172\n\nLANGUAGE: C#\nCODE:\n```\nConsole.WriteLine(\"Starting query...\");\nConsole.WriteLine();\n\nvar users = context.Users.ToList();\n\nConsole.WriteLine();\nConsole.WriteLine(\"Query finished.\");\nConsole.WriteLine();\n\nforeach (var user in users)\n{\n    if (user.Username.Contains(\"microsoft\"))\n    {\n        user.Username = \"msft:\" + user.Username;\n\n        Console.WriteLine(\"Starting SaveChanges...\");\n        Console.WriteLine();\n\n        context.SaveChanges();\n\n        Console.WriteLine();\n        Console.WriteLine(\"SaveChanges finished.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Owned Type via ExecuteUpdate Async C#\nDESCRIPTION: This snippet demonstrates updating both the `Customer` and `CustomerInfo` entities in a single `ExecuteUpdateAsync` call in EF Core 8. It sets the Tag property of the CustomerInfo and modifies the Name property of the Customer.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_128\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.Customers\n    .Where(e => e.Name == name)\n    .ExecuteUpdateAsync(\n        s => s.SetProperty(b => b.CustomerInfo.Tag, \"Tagged\")\n            .SetProperty(b => b.Name, b => b.Name + \"_Tagged\"));\n```\n\n----------------------------------------\n\nTITLE: Order Entity Definition C#\nDESCRIPTION: Defines a simple `Order` entity with properties like Id and Status. This entity represents a subset of the data in the DetailedOrder entity for table splitting.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    public string? Status { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Find Common Ancestor Using HierarchyId in EF Core with C#\nDESCRIPTION: This C# code finds the common ancestor of two halflings using `IsDescendantOf`. The query filters for ancestors of both the first and second halflings. The results are ordered by level in descending order, and the first one is returned. It requires an EF Core context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<Halfling?> FindCommonAncestor(Halfling first, Halfling second)\n            => await context.Halflings\n                .Where(\n                    ancestor => first.PathFromPatriarch.IsDescendantOf(ancestor.PathFromPatriarch)\n                                && second.PathFromPatriarch.IsDescendantOf(ancestor.PathFromPatriarch))\n                .OrderByDescending(ancestor => ancestor.PathFromPatriarch.GetLevel())\n                .FirstOrDefaultAsync();\n```\n\n----------------------------------------\n\nTITLE: One-to-Many with Composite Key - C#\nDESCRIPTION: Defines the principal (Blog) and dependent (Post) entities with a composite key on the principal. The Post entity contains foreign key properties corresponding to the composite key components of the Blog entity. This relationship is discovered by convention, requiring explicit configuration of the composite key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id1 { get; set; }                                 // Composite key part 1\n    public int Id2 { get; set; }                                 // Composite key part 2\n    public ICollection<Post> Posts { get; } = new List<Post>();  // Collection navigation containing dependents\n}\n\n// Dependent (child)\npublic class Post\n{\n    public int Id { get; set; }\n    public int BlogId1 { get; set; }                             // Required foreign key property part 1\n    public int BlogId2 { get; set; }                             // Required foreign key property part 2\n    public Blog Blog { get; set; } = null!;                      // Required reference navigation to principal\n}\n```\n\n----------------------------------------\n\nTITLE: Querying HierarchyId in EF Core 9\nDESCRIPTION: This snippet shows how to query for an entity with a HierarchyId property using SingleAsync in EF Core. This is part of demonstrating the HierarchyId enhancements in EF Core 9.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nvar daisy = await context.Halflings.SingleAsync(e => e.Name == \"Daisy\");\n```\n\n----------------------------------------\n\nTITLE: Set Default Time-to-Live for an Entity Type in EF Core\nDESCRIPTION: This snippet demonstrates how to set a default time-to-live (TTL) value for an entity type in an Azure Cosmos DB model using EF Core. It uses the HasDefaultTimeToLive method to configure the default TTL in seconds.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Hamlet>().HasDefaultTimeToLive(3600);\n```\n\n----------------------------------------\n\nTITLE: Runtime Model Cache Implementation C#\nDESCRIPTION: This class implements a cache for compiled models, allowing different models to be used based on runtime configuration, such as the connection string. It uses a ConcurrentDictionary to store and retrieve models based on the connection string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\npublic static class RuntimeModelCache\n{\n    private static readonly ConcurrentDictionary<string, IModel> _runtimeModels\n        = new();\n\n    public static IModel GetOrCreateModel(string connectionString)\n        => _runtimeModels.GetOrAdd(\n            connectionString, cs =>\n                {\n                    if (cs.Contains(\"X\"))\n                    {\n                        return BlogsContextModel1.Instance;\n                    }\n\n                    if (cs.Contains(\"Y\"))\n                    {\n                        return BlogsContextModel2.Instance;\n                    }\n\n                    throw new InvalidOperationException(\"No appropriate compiled model found.\");\n                });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Query Tag - C#\nDESCRIPTION: This code snippet demonstrates how to add a basic query tag to a LINQ query using the `TagWith()` method in Entity Framework Core. The tag is a string literal that will be included as a comment in the generated SQL. The tagged query retrieves people from the database, orders them by distance to a location, and limits the result.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tags.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npeople = await context.People\n    .TagWith(\"This is my spatial query!\")\n    .OrderBy(p => p.Location.Distance(myLocation))\n    .Take(5)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining a simple model in C#\nDESCRIPTION: This C# code defines a simple `Blog` class with `Id`, `Name` properties. It represents the initial data model for the application. This class is later extended with a `CreatedTimestamp` property, demonstrating model evolution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Sentinel Value Configuration C#\nDESCRIPTION: This snippet demonstrates how to use the `HasSentinel` method in EF Core 8 to specify a sentinel value for an enum property. This allows the database default to be used only when the property has the specified sentinel value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_124\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()\n    .Property(e => e.Level)\n    .HasDefaultValue(Level.Intermediate)\n    .HasSentinel(Level.Unspecified);\n```\n\n----------------------------------------\n\nTITLE: Key Value Converters Configuration C#\nDESCRIPTION: Configures value converters for `ProductId` and `CategoryId` to map them to `int` values in the database.  This enables the use of the guarded key types with the underlying integer representation in the database tables using EF Core's value conversion mechanism.  It overrides `ConfigureConventions` to set the converters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_174\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Properties<ProductId>().HaveConversion<ProductIdConverter>();\n    configurationBuilder.Properties<CategoryId>().HaveConversion<CategoryIdConverter>();\n}\n\nprivate class ProductIdConverter : ValueConverter<ProductId, int>\n{\n    public ProductIdConverter()\n        : base(v => v.Value, v => new(v))\n    {\n    }\n}\n\nprivate class CategoryIdConverter : ValueConverter<CategoryId, int>\n{\n    public CategoryIdConverter()\n        : base(v => v.Value, v => new(v))\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a node between HierarchyIds in EF Core 9\nDESCRIPTION: This code shows how to create a HierarchyId between two existing HierarchyIds using the new HierarchyId.Parse overload that accepts a decimal value. This allows for creating intermediate nodes in the HierarchyId tree.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nvar child1b = new Halfling(HierarchyId.Parse(daisy.PathFromPatriarch, 1, 5), \"Toast\");\n```\n\n----------------------------------------\n\nTITLE: Update Database to Specific Migration - .NET Core CLI\nDESCRIPTION: This command updates the database to a specific migration ('AddNewTables') using the .NET Core CLI. It can also be used to roll back migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_9\n\nLANGUAGE: .NET Core CLI\nCODE:\n```\ndotnet ef database update AddNewTables\n```\n\n----------------------------------------\n\nTITLE: Configure List Property with Value Converter and Comparer (EF Core 5.0+)\nDESCRIPTION: This code snippet demonstrates how to configure a value converter for a `List<int>` property to map it to a JSON string in the database, along with defining a custom value comparer. The comparer ensures correct equality checks, hash code generation, and snapshotting for the list.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-comparers.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nentity.Property(e => e.Numbers)\n    .HasConversion(\n        v => JsonSerializer.Serialize(v, null),\n        v => JsonSerializer.Deserialize<List<int>>(v, null),\n        new ValueComparer<List<int>>(\n            (c1, c2) => c1.SequenceEqual(c2),\n            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v)),\n            c => c.ToList()));\n```\n\n----------------------------------------\n\nTITLE: Connection string in OnConfiguring (UWP)\nDESCRIPTION: Configures the DbContext in a UWP application using a SQLite connection string directly in the `OnConfiguring` method.  This is suitable for simple scenarios where the connection string doesn't contain sensitive information or need to change during deployment.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-strings.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n            optionsBuilder.UseSqlite(\"Data Source=blogging.db\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Force Constant in Query - C#\nDESCRIPTION: This snippet shows how to force EF Core to use a constant value in the generated SQL, even when it would normally be parameterized.  This is achieved using `EF.Constant` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<List<Post>> GetPostsForceConstant(int id)\n            => await context.Posts\n                .Where(e => e.Title == \".NET Blog\" && e.Id == EF.Constant(id))\n                .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Schools Open Today in C# with LINQ\nDESCRIPTION: This C# code demonstrates a LINQ query that finds schools open on a specific day and time, using DateOnly and TimeOnly properties, and translates to SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nopenSchools = await context.Schools\n    .Where(\n        s => s.Terms.Any(\n                 t => t.FirstDay <= today\n                      && t.LastDay >= today)\n             && s.OpeningHours.Any(\n                 o => o.DayOfWeek == dayOfWeek\n                      && o.OpensAt < time && o.ClosesAt >= time))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Adding a migration for the new property via Visual Studio\nDESCRIPTION: This command adds a new migration named 'AddBlogCreatedTimestamp' using the Package Manager Console. EF Core compares the current model against the previous model snapshot, detects the new property, and generates the necessary migration code to add the corresponding column to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Migration AddBlogCreatedTimestamp\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many with Join Class and Primary Key (C#)\nDESCRIPTION: This snippet defines entity classes (Post, Tag, PostTag) to represent a many-to-many relationship between posts and tags, where the join table (PostTag) has its own primary key (Id). The PostTag class includes properties for PostId and TagId, which act as foreign keys to the Post and Tag entities, respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class PostTag\n{\n    public int Id { get; set; }\n    public int PostId { get; set; }\n    public int TagId { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure DateTimeKind Preservation in EF Core (Version 2)\nDESCRIPTION: Configures a value converter to ensure DateTime values read from the database have DateTimeKind.Utc.  It converts from the database value to a new DateTime object with DateTimeKind.Utc.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .Property(e => e.LastUpdated)\n    .HasConversion(\n        v => v,\n        v => new DateTime(v.Ticks, DateTimeKind.Utc));\n```\n\n----------------------------------------\n\nTITLE: Querying Pubs Visited This Year\nDESCRIPTION: This code snippet demonstrates how to query `Pub` entities to find pubs visited this year, using the `Any` method on the `DaysVisited` collection and comparing the year of each date. The translated SQL uses the `DATEPART` function.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nvar thisYear = DateTime.Now.Year;\nvar pubsVisitedThisYear = await context.Pubs\n    .Where(e => e.DaysVisited.Any(v => v.Year == thisYear))\n    .Select(e => e.Name)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SQL Schema with Custom Temporal Configuration\nDESCRIPTION: This SQL code demonstrates the creation of an 'Employees' temporal table with custom configurations for the period start column ('ValidFrom'), the period end column ('ValidTo'), and the history table name ('EmployeeHistoricalData'). The table definition includes the standard columns for employee data, as well as the automatically generated period columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nDECLARE @historyTableSchema sysname = SCHEMA_NAME()\nEXEC(N'CREATE TABLE [Employees] (\n    [EmployeeId] uniqueidentifier NOT NULL,\n    [Name] nvarchar(100) NULL,\n    [Position] nvarchar(100) NULL,\n    [Department] nvarchar(100) NULL,\n    [Address] nvarchar(1024) NULL,\n    [AnnualSalary] decimal(10,2) NOT NULL,\n    [ValidFrom] datetime2 GENERATED ALWAYS AS ROW START NOT NULL,\n    [ValidTo] datetime2 GENERATED ALWAYS AS ROW END NOT NULL,\n    CONSTRAINT [PK_Employees] PRIMARY KEY ([EmployeeId]),\n    PERIOD FOR SYSTEM_TIME([ValidFrom], [ValidTo])\n) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [' + @historyTableSchema + N'].[EmployeeHistoricalData]))');\n```\n\n----------------------------------------\n\nTITLE: Configuring required one-to-many from principal - C#\nDESCRIPTION: This C# code configures a required one-to-many relationship between `Blog` and `Post` entities using the `ModelBuilder` in `OnModelCreating`.  It starts the configuration from the principal end (`Blog`) using `HasMany` and `WithOne` to define the relationship, setting the foreign key and requiring it.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasMany(e => e.Posts)\n        .WithOne(e => e.Blog)\n        .HasForeignKey(e => e.BlogId)\n        .IsRequired();\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext from Application Services in ASP.NET Core (C#)\nDESCRIPTION: This code snippet demonstrates how EF Core tools obtain the DbContext from the application's service provider in an ASP.NET Core application. It shows the usage of `Program.CreateHostBuilder()` to build the host and access the service provider to retrieve the DbContext instance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dbcontext-creation.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CommandLine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Related Entities for Aggregation - C#\nDESCRIPTION: This snippet shows how to get a LINQ query that represents the contents of a navigation property and apply an aggregate operator without loading the related entities into memory. It uses the `DbContext.Entry(...).Collection(...).Query()` method to obtain the IQueryable for the related entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/explicit.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Querying.RelatedData\n{\n    public class NavQueryAggregate\n    {\n        public static void Main()\n        {\n            using (var context = new BloggingContext(new DbContextOptionsBuilder<BloggingContext>()\n                .UseInMemoryDatabase(\"NavQueryAggregate\")\n                .Options))\n            {\n                context.Database.EnsureDeleted();\n                context.Database.EnsureCreated();\n\n                context.Blogs.Add(new Blog { Name = \"MyBlog\", Posts = { new Post { Title = \"First post\" }, new Post { Title = \"Second post\" } } });\n                context.SaveChanges();\n            }\n\n            using (var context = new BloggingContext(new DbContextOptionsBuilder<BloggingContext>()\n                .UseInMemoryDatabase(\"NavQueryAggregate\")\n                .Options))\n            {\n                var blog = context.Blogs.Single(b => b.Name == \"MyBlog\");\n\n                var postCount = context.Entry(blog)\n                    .Collection(b => b.Posts)\n                    .Query()\n                    .Count();\n\n                Console.WriteLine($\"Blog '{blog.Name}' has {postCount} posts.\");\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring IDENTITY column seed and increment in EF Core\nDESCRIPTION: This code snippet demonstrates how to configure the seed and increment values for an IDENTITY column using Entity Framework Core's fluent API with SQL Server.  It overrides the OnModelCreating method in a DbContext to configure the Identity entity's Id property with specific seed and increment values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/value-generation.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Identity>()\n        .Property(i => i.Id)\n        .HasIdentityOptions(seed: 10, increment: 5);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Orders and Counting in C#\nDESCRIPTION: This C# code retrieves the count of orders where the amount is greater than 10, taking the top 5.  This example is used to demonstrate projection pruning. Projection pruning is a new feature in EF9 that removes unneeded projections from the generated SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nvar orders = await context.Orders\n    .Where(o => o.Amount > 10)\n    .Take(5)\n    .CountAsync();\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Database Operations with Entity Framework in C#\nDESCRIPTION: This C# code demonstrates asynchronous database operations using Entity Framework. It adds a new blog to the database and saves changes asynchronously, then queries all blogs and prints their names to the console. The code requires the Entity Framework NuGet package and the System.Data.Entity and System.Threading.Tasks namespaces.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/async.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n using System;\n    using System.Data.Entity;\n    using System.Linq;\n    using System.Threading.Tasks;\n\n    namespace AsyncDemo\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                var task = PerformDatabaseOperations();\n\n                Console.WriteLine(\"Quote of the day\");\n                Console.WriteLine(\" Don't worry about the world coming to an end today... \");\n                Console.WriteLine(\" It's already tomorrow in Australia.\");\n\n                task.Wait();\n\n                Console.WriteLine();\n                Console.WriteLine(\"Press any key to exit...\");\n                Console.ReadKey();\n            }\n\n            public static async Task PerformDatabaseOperations()\n            {\n                using (var db = new BloggingContext())\n                {\n                    // Create a new blog and save it\n                    db.Blogs.Add(new Blog\n                    {\n                        Name = \"Test Blog #\" + (db.Blogs.Count() + 1)\n                    });\n                    Console.WriteLine(\"Calling SaveChanges.\");\n                    await db.SaveChangesAsync();\n                    Console.WriteLine(\"SaveChanges completed.\");\n\n                    // Query for all blogs ordered by name\n                    Console.WriteLine(\"Executing query.\");\n                    var blogs = await (from b in db.Blogs\n                                orderby b.Name\n                                select b).ToListAsync();\n\n                    // Write all blogs out to Console\n                    Console.WriteLine(\"Query completed with following results:\");\n                    foreach (var blog in blogs)\n                    {\n                        Console.WriteLine(\" - \" + blog.Name);\n                    }\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Associating Entities Using a Shared-Type Entity - C#\nDESCRIPTION: This code snippet shows how to associate two entities (Post and Tag) by creating and tracking a new instance of a shared-type join entity (Dictionary<string, int>) using EF Core. It retrieves the Post and Tag entities from the database, creates a new `Dictionary<string, int>` with PostId and TagId, adds it to the context using `context.Set<Dictionary<string, int>>(\"PostTag\").Add(joinEntity)`, and then saves the changes to the database. The `ChangeTracker.DebugView.LongView` is used to print out the state of the change tracker.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar post = context.Posts.Single(e => e.Id == 3);\nvar tag = context.Tags.Single(e => e.Id == 1);\n\nvar joinEntitySet = context.Set<Dictionary<string, int>>(\"PostTag\");\nvar joinEntity = new Dictionary<string, int>\n{\n    [\"PostId\"] = post.Id,\n    [\"TagId\"] = tag.Id\n};\njoinEntitySet.Add(joinEntity);\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Minimal API SQLite DbContext Registration (C#)\nDESCRIPTION: This C# code demonstrates registering a `DbContext` for SQLite using the new minimal API in EF Core 6.  It provides a simplified way to register the DbContext and configure the database provider in a single line.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_158\n\nLANGUAGE: C#\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSqlite<MyDbContext>(\"Data Source=mydatabase.db\");\n```\n\n----------------------------------------\n\nTITLE: Define EF Core Model with Value Object Keys\nDESCRIPTION: Defines the Blog and Post entities in Entity Framework Core, using the BlogKey and PostKey value objects as primary keys and foreign keys. This enables type safety within the domain model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public BlogKey Id { get; set; }\n    public string Name { get; set; }\n\n    public ICollection<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public PostKey Id { get; set; }\n\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public BlogKey? BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Value Object Definition (C#)\nDESCRIPTION: Defines a simple value object called `Dollars`, which encapsulates a decimal amount. It provides a constructor, a property to access the amount, and overrides ToString() for formatting.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct Dollars\n{\n    public Dollars(decimal amount) \n        => Amount = amount;\n    \n    public decimal Amount { get; }\n\n    public override string ToString() \n        => $\"${Amount}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Start Own Transaction within Context - EF6 (C#)\nDESCRIPTION: This snippet demonstrates how to start and manage a transaction within a DbContext using Database.BeginTransaction(). It executes a raw SQL command, updates entities, saves changes, and then commits the transaction.  It ensures all operations are performed atomically.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/transactions.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Data.SqlClient;\nusing System.Linq;\nusing System.Transactions;\n\nnamespace TransactionsExamples\n{\n    class TransactionsExample\n    {\n        static void StartOwnTransactionWithinContext()\n        {\n            using (var context = new BloggingContext())\n            {\n                using (var dbContextTransaction = context.Database.BeginTransaction())\n                {\n                    context.Database.ExecuteSqlCommand(\n                        \"UPDATE Blogs SET Rating = 5\" +\n                            \" WHERE Name LIKE '%Entity Framework%'\"\n                        );\n\n                    var query = context.Posts.Where(p => p.Blog.Rating >= 5);\n                    foreach (var post in query)\n                    {\n                        post.Title += \"[Cool Blog]\";\n                    }\n\n                    context.SaveChanges();\n\n                    dbContextTransaction.Commit();\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Post Entity Class with Many-to-Many C#\nDESCRIPTION: Defines the Post entity class with a collection of Tag entities, representing the many-to-many relationship.  Scaffolded by EF Core when a PostTag join table exists without a corresponding entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; } = null!;\n    public string Contents { get; set; } = null!;\n    public DateTime PostedOn { get; set; }\n    public DateTime? UpdatedOn { get; set; }\n    public int BlogId { get; set; }\n\n    public virtual Blog Blog { get; set; } = null!;\n\n    public virtual ICollection<Tag> Tags { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Default Column Configuration - C#\nDESCRIPTION: This code demonstrates how to configure default column settings for all properties of a specific type using pre-convention model configuration. It configures all `List<DateOnly>` properties to be non-Unicode and have a maximum length of 4000. This is done inside `ConfigureConventions`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder\n        .Properties<List<DateOnly>>()\n        .AreUnicode(false)\n        .HaveMaxLength(4000);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unidirectional Many-to-Many - C#\nDESCRIPTION: This C# code configures a unidirectional many-to-many relationship between Post and Tag. Post has a navigation property to Tags, but Tag does not have a navigation property back to Post. The WithMany() call indicates that the relationship is unidirectional.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_163\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<Post>()\n    .HasMany(post => post.Tags)\n    .WithMany();\n```\n\n----------------------------------------\n\nTITLE: Sequence Based Key Generation C#\nDESCRIPTION: Configures the `Id` property of the `Product` entity to use a database sequence for key value generation. This allows the database to generate key values based on a sequence, providing an alternative to identity columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_176\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Product>().Property(product => product.Id).UseSequence();\n```\n\n----------------------------------------\n\nTITLE: Case Translation Improvements - C#\nDESCRIPTION: This C# code snippet showcases a query with a negated conditional operation. EF Core 9 optimizes the translation of this operation, resulting in simpler and more efficient SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nvar caseSimplification = await context.Blogs\n    .Select(b => !(b.Id > 5 ? false : true))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction with Execution Strategy - C#\nDESCRIPTION: This snippet demonstrates how to manually invoke an execution strategy when using user-initiated transactions with EF Core. The `CreateExecutionStrategy()` method is used to get an execution strategy instance. This instance is then used to execute a delegate containing all the operations within the transaction. This is essential because user-initiated transactions are not automatically retried when using a configured execution strategy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-resiliency.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var strategy = context.Database.CreateExecutionStrategy();\n\n    strategy.Execute(() =>\n    {\n        using (var transaction = context.Database.BeginTransaction())\n        {\n            context.Blogs.Add(new Blog { Url = \"http://example.com\" });\n            context.SaveChanges();\n\n            context.Blogs.Add(new Blog { Url = \"http://example.com\" });\n            context.SaveChanges();\n\n            transaction.Commit();\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Model Definition - C#\nDESCRIPTION: Defines the Blog and Post entity classes with properties such as Id, Name, Title, Content, and BlogId. Establishes a one-to-many relationship between Blog and Post using a collection of Posts in the Blog class and a Blog navigation property in the Post class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int? BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Find All Descendants Using HierarchyId in EF Core with C#\nDESCRIPTION: This C# code finds all descendants of a halfling using `IsDescendantOf`. The query filters for descendants whose `PathFromPatriarch` is a descendant of the specified halfling's `PathFromPatriarch`. It ensures that the halfling itself is excluded from the results. Results are ordered by level. It requires an EF Core context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nIQueryable<Halfling> FindAllDescendents(string name)\n            => context.Halflings.Where(\n                    descendent => descendent.PathFromPatriarch.IsDescendantOf(\n                        context.Halflings\n                            .Single(\n                                ancestor =>\n                                    ancestor.Name == name\n                                    && descendent.Id != ancestor.Id)\n                            .PathFromPatriarch))\n                .OrderBy(descendent => descendent.PathFromPatriarch.GetLevel());\n```\n\n----------------------------------------\n\nTITLE: Implementing IModelCacheKeyFactory - C#\nDESCRIPTION: This code snippet implements the `IModelCacheKeyFactory` to generate cache keys for models, taking into account the `UseIntProperty`. This allows EF Core to cache different models based on the value of `UseIntProperty`. The `Equals` method ensures that model keys are correctly compared.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/dynamic-model.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Internal;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DynamicModel\n{\n    public class DynamicModelCacheKeyFactory : IModelCacheKeyFactory\n    {\n        public DynamicModelCacheKeyFactory(\n            ModelCacheKeyFactoryDependencies dependencies\n            )\n        {\n            Dependencies = dependencies;\n        }\n\n        protected virtual ModelCacheKeyFactoryDependencies Dependencies { get; }\n\n        public virtual object Create(DbContext context, bool designTime)\n            => new ModelCacheKey(\n                context.GetType(),\n                context is DynamicContext dynamicContext ? dynamicContext.UseIntProperty : false);\n    }\n\n    public class ModelCacheKey\n    {\n        private readonly Type _contextType;\n        private readonly bool _useIntProperty;\n\n        public ModelCacheKey(Type contextType, bool useIntProperty)\n        {\n            _contextType = contextType;\n            _useIntProperty = useIntProperty;\n        }\n\n        public override bool Equals(object obj)\n            => obj is ModelCacheKey other\n               && other._contextType == _contextType\n               && other._useIntProperty == _useIntProperty;\n\n        public override int GetHashCode()\n            => HashCode.Combine(_contextType, _useIntProperty);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding EF Core Tasks Package using dotnet CLI\nDESCRIPTION: This command adds the Microsoft.EntityFrameworkCore.Tasks NuGet package to the project. This package is required for MSBuild integration to automatically update the compiled model when the entity types or DbContext configuration is changed. The version should match the EF Core version used in the project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_72\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.Tasks --version 9.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Default Schema with Fluent API - C#\nDESCRIPTION: This code demonstrates how to set the default database schema for all tables in the model using the HasDefaultSchema() method in OnModelCreating with the Fluent API. It affects other database objects, like sequences.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.HasDefaultSchema(\"blogging\");\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Blog URL in a Controller (C#)\nDESCRIPTION: This code snippet demonstrates a controller method that updates a blog's URL within a database. It highlights the section where a serializable transaction is potentially used. This assumes that the update requires a transaction to maintain data consistency.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPut(\"{id}\")]\npublic async Task<IActionResult> Update(int id, [FromBody] Blog blog)\n{\n    using (var transaction = _context.Database.BeginTransaction(IsolationLevel.Serializable))\n    {\n        var existing = await _context.Blogs.FindAsync(id);\n        if (existing == null)\n        {\n            return NotFound();\n        }\n\n        existing.Url = blog.Url;\n        _context.Update(existing);\n        await _context.SaveChangesAsync();\n        transaction.Commit();\n        return Ok();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure ETag Concurrency with Shadow Property (C#)\nDESCRIPTION: This code configures an entity type to use optimistic concurrency with eTags. It creates an `_etag` property in shadow state and sets it as the concurrency token. Requires Entity Framework Core and Cosmos DB provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\noptions.Entity<Order>()\n    .UseETagConcurrency();\n```\n\n----------------------------------------\n\nTITLE: Order/OrderDescending Operators - C#\nDESCRIPTION: This C# code snippet demonstrates the use of the simplified ordering operators `Order` and `OrderDescending` in a LINQ query. These operators provide a concise way to order entities based on their primary key values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nvar orderOperation = await context.Blogs\n    .Order()\n    .Select(x => new\n    {\n        x.Name,\n        OrderedPosts = x.Posts.OrderDescending().ToList(),\n        OrderedTitles = x.Posts.Select(xx => xx.Title).Order().ToList()\n    })\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext without OnConfiguring\nDESCRIPTION: This command scaffolds the DbContext and entities but skips generating the OnConfiguring method. This is useful when the DbContext is configured outside of the class, such as in ASP.NET Core Startup.ConfigureServices.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_12\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold \"Server=(localdb)\\mssqllocaldb;Database=Blogging;User Id=myUsername;Password=myPassword;\" Microsoft.EntityFrameworkCore.SqlServer --no-onconfiguring\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with Include in Entity Framework Core\nDESCRIPTION: This C# code snippet demonstrates eager loading in Entity Framework Core. It retrieves customers from the UK and their associated orders using the `Include` method. This approach fetches all related data in a single database query, improving performance when accessing multiple navigation properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nusing (NorthwindEntities context = new NorthwindEntities())\n{\n    var ukCustomers = context.Customers.Include(c => c.Orders).Where(c => c.Address.Country == \"UK\");\n    var chosenCustomer = AskUserToPickCustomer(ukCustomers);\n    Console.WriteLine(\"Customer Id: {0} has {1} orders\", customer.CustomerID, customer.Orders.Count);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Owner with Client-Side Cascade Enabled (C#)\nDESCRIPTION: This C# snippet demonstrates deleting an owner, where client-side cascade is enabled. The related blog is loaded explicitly from the database prior to the delete operation, so EF Core can manage the deletion of the blog entity, since cascade delete is only applied to the tracked entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n            var owner = context.People.Single(e => e.Name == \"ajcvickers\");\n            var blog = context.Blogs.Single(e => e.Owner == owner);\n\n            context.Remove(owner);\n            \n            context.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with C#\nDESCRIPTION: This code shows how to use the `Index` attribute to create an index on a single column. The `Rating` column in the `Posts` table will have a non-unique index created.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n    public class Post\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        [Index]\n        public int Rating { get; set; }\n        public int BlogId { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Disable SQL RETURNING clause in EF Core 8.0 for SQLite\nDESCRIPTION: This code demonstrates how to disable the usage of the \"RETURNING\" clause for a specific entity (Blog) in EF Core 8.0 when using SQLite. This is useful if the table has AFTER triggers, is virtual, or uses older SQLite versions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .ToTable(tb => tb.UseSqlReturningClause(false));\n}\n```\n\n----------------------------------------\n\nTITLE: Handling DbEntityValidationException - C#\nDESCRIPTION: This C# code shows how to catch a `DbEntityValidationException` when saving changes in Entity Framework, which occurs when validation rules defined via Fluent API are violated. It extracts the validation error and adds it to the `ModelState` so that it can be displayed in the view using `ValidationMessageFor` HtmlHelper.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost]\npublic ActionResult Edit(int id, Blog blog)\n{\n    try\n    {\n        db.Entry(blog).State = EntityState.Modified;\n        db.SaveChanges();\n        return RedirectToAction(\"Index\");\n    }\n    catch (DbEntityValidationException ex)\n    {\n        var error = ex.EntityValidationErrors.First().ValidationErrors.First();\n        this.ModelState.AddModelError(error.PropertyName, error.ErrorMessage);\n        return View();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding EF Core Design Package (.NET CLI)\nDESCRIPTION: This command adds the `Microsoft.EntityFrameworkCore.Design` package to a project. This package is required to use the EF Core tools for design-time operations like migrations and code generation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.Design\n```\n\n----------------------------------------\n\nTITLE: Cosmos Regex.IsMatch Translation\nDESCRIPTION: This C# code snippet demonstrates the use of Regex.IsMatch within a LINQ query for Azure Cosmos DB using EF Core 7. It filters triangles based on whether their name matches the specified regular expression.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nvar containsInnerT = await context.Triangles\n            .Where(o => Regex.IsMatch(o.Name, \"[a-z]t[a-z]\", RegexOptions.IgnoreCase))\n            .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Halfling Entity with HierarchyId Property - C#\nDESCRIPTION: This snippet defines a `Halfling` entity with a `HierarchyId` property named `PathFromPatriarch`. This property is used to represent the position of each halfling in the family tree. It also shows the constructor used for initializing the properties of the entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_67\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Halfling\n{\n    public Halfling(HierarchyId pathFromPatriarch, string name, int? yearOfBirth = null)\n    {\n        PathFromPatriarch = pathFromPatriarch;\n        Name = name;\n        YearOfBirth = yearOfBirth;\n    }\n\n    public int Id { get; private set; }\n    public HierarchyId PathFromPatriarch { get; set; }\n    public string Name { get; set; }\n    public int? YearOfBirth { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Entity - C#\nDESCRIPTION: This code snippet configures the `Document` entity. It specifies the container name as `Documents`, the partition key as `DocumentId`, and the unique key as `Title`. It also defines a unique index on the title.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Document>().ToContainer(\"Documents\");\n\nmodelBuilder.Entity<Document>().HasPartitionKey(d => d.DocumentId);\n\nmodelBuilder.Entity<Document>().HasKey(d => d.Title);\n\nmodelBuilder.Entity<Document>().HasIndex(d => d.Title).IsUnique();\n```\n\n----------------------------------------\n\nTITLE: Update TPT Name Property C#\nDESCRIPTION: This snippet demonstrates updating the `Name` property of entities using `ExecuteUpdateAsync`. The Name property is inherited from `CustomerTpt`, so updating this property will target the table TptCustomers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_134\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.TptSpecialCustomers\n    .Where(e => e.Name == name)\n    .ExecuteUpdateAsync(s => s.SetProperty(b => b.Name, b => b.Name + \" (Noted)\"));\n```\n\n----------------------------------------\n\nTITLE: Change Relationship State in C# (Independent Association)\nDESCRIPTION: This code snippet demonstrates how to use the `ChangeRelationshipState` method to change the state of a relationship between two entity objects, typically in N-Tier applications when working with independent associations. It shows how to add a relationship between a `course` and an `instructor` in a many-to-many relationship. It requires casting the context to `IObjectContextAdapter` to access the `ObjectStateManager`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n((IObjectContextAdapter)context).ObjectContext.\n    ObjectStateManager.\n    ChangeRelationshipState(course, instructor, c => c.Instructor, EntityState.Added);\n```\n\n----------------------------------------\n\nTITLE: Define PostTag Model with String Payload (EF Core)\nDESCRIPTION: Defines the PostTag join entity with a string payload property 'TaggedBy' in addition to the 'TaggedOn' DateTime property.  This example demonstrates using a non-automatically generated payload property. It includes foreign keys to Post and Tag entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic class PostTag\n{\n    public int PostId { get; set; } // First part of composite PK; FK to Post\n    public int TagId { get; set; } // Second part of composite PK; FK to Tag\n\n    public DateTime TaggedOn { get; set; } // Auto-generated payload property\n    public string TaggedBy { get; set; } // Not-generated payload property\n}\n```\n\n----------------------------------------\n\nTITLE: DateTime to datetime2 Convention - C#\nDESCRIPTION: Configures all DateTime properties to map to the datetime2 type in SQL Server. This improves precision compared to the default datetime type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Properties<DateTime>()\n            .Configure(c => c.HasColumnType(\"datetime2\"));\n```\n\n----------------------------------------\n\nTITLE: Compile Query Asynchronously with EF Core\nDESCRIPTION: This code snippet demonstrates how to compile a LINQ query into a .NET delegate using `EF.CompileAsyncQuery` in EF Core. The compiled query can be invoked directly to execute the query, bypassing the cache lookup and improving performance. It takes a DbContext instance and an arbitrary parameter as input.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar compiledQuery = EF.CompileAsyncQuery(\n    (BloggingContext context, string blogName) =>\n        context.Blogs\n            .Where(b => b.Name == blogName)\n            .ToList());\n```\n\n----------------------------------------\n\nTITLE: Optional one-to-many relationship - C#\nDESCRIPTION: This C# code defines an optional one-to-many relationship between `Blog` and `Post` entities using convention.  A `Blog` can have many `Posts`, and a `Post` may or may not belong to a `Blog`. The `Post.BlogId` property is a nullable foreign key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Principal (parent)\npublic class Blog\n{\n    public int Id { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>(); // Collection navigation containing dependents\n}\n\n// Dependent (child)\npublic class Post\n{\n    public int Id { get; set; }\n    public int? BlogId { get; set; } // Optional foreign key property\n    public Blog? Blog { get; set; } // Optional reference navigation to principal\n}\n```\n\n----------------------------------------\n\nTITLE: Using IDbContextFactory in ASP.NET Core Controller (C#)\nDESCRIPTION: Injects `IDbContextFactory<TContext>` into an ASP.NET Core controller to instantiate DbContext instances. It creates a new context within a `using` statement, ensuring proper disposal after use. This approach facilitates creating context instances when needed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : Controller\n{\n    private readonly IDbContextFactory<SomeDbContext> _contextFactory;\n\n    public MyController(IDbContextFactory<SomeDbContext> contextFactory)\n        => _contextFactory = contextFactory;\n\n    public void DoSomeThing()\n    {\n        using (var context = _contextFactory.CreateDbContext())\n        {\n            // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OfType to Retrieve Entities\nDESCRIPTION: This C# code snippet demonstrates how to use the OfType method in LINQ queries to retrieve entities of a specific type and its derived types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts.OfType<Post>();\n```\n\n----------------------------------------\n\nTITLE: Apply IEntityTypeConfiguration - C#\nDESCRIPTION: This code snippet shows how to apply an `IEntityTypeConfiguration` implementation within the `OnModelCreating` method. It creates an instance of the `BlogEntityTypeConfiguration` and calls its `Configure` method, passing in the `EntityTypeBuilder<Blog>`. This separates the configuration logic from the main context class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.ApplyConfiguration(new BlogEntityTypeConfiguration());\n}\n```\n\n----------------------------------------\n\nTITLE: Spatial Aggregate Function - GeometryCombiner.Combine() - C#\nDESCRIPTION: This C# code showcases the usage of `GeometryCombiner.Combine()` within a `GroupBy` query. EF Core 7 can now translate spatial aggregate functions when using a database provider that supports NetTopologySuite.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Caches\n                .Where(cache => cache.Location.X < -90)\n                .GroupBy(cache => cache.Owner)\n                .Select(grouping => new\n                    {\n                        Id = grouping.Key,\n                        Combined = GeometryCombiner.Combine(grouping.Select(cache => cache.Location))\n                    });\n```\n\n----------------------------------------\n\nTITLE: DocumentAudit Class Definition in C#\nDESCRIPTION: This C# snippet defines the DocumentAudit class for storing snapshots of documents, facilitating version history. It stores information such as Id, DocumentId, AuditDate, and a serialized string representation of the document snapshot. It also shows one of the EF Core Azure Cosmos DB provider limitations regarding complex properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n:::code language=\"csharp\" source=\"../../../../samples/end2end/PlanetaryDocs/PlanetaryDocs.Domain/DocumentAudit.cs\":::\n```\n\n----------------------------------------\n\nTITLE: Logging to Debug Window in EF Core\nDESCRIPTION: This code snippet shows how to configure EF Core to log messages to the debug window using `Debug.WriteLine`. Lambda syntax is used because the `Debug` class is compiled out of release builds. This directs the logs to the debug output in Visual Studio or other IDEs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(message => Debug.WriteLine(message));\n```\n\n----------------------------------------\n\nTITLE: Defining Entities with TenantId and IsDeleted Properties in C#\nDESCRIPTION: This code snippet defines the `Blog` and `Post` entities, including a `_tenantId` field in the `Blog` entity for multi-tenancy and an `IsDeleted` property in the `Post` entity for soft delete functionality. These properties are used by global query filters to automatically filter queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    private int _tenantId;\n\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n    public string Url { get; set; }\n\n    public List<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int PostId { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public bool IsDeleted { get; set; }\n\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the ConnectionStringInitializationInterceptor (C#)\nDESCRIPTION: Registers the ConnectionStringInitializationInterceptor with the DbContext options. This interceptor is responsible for lazily initializing the connection string when the connection is opened.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.AddInterceptors(\n        new ConnectionStringInitializationInterceptor(_connectionStringFactory));\n```\n\n----------------------------------------\n\nTITLE: Composite Key Configuration - Data Annotations - C#\nDESCRIPTION: Configures a composite key using data annotations with the [PrimaryKey] attribute introduced in EF Core 7.0. This example sets both 'State' and 'LicensePlate' as the composite primary key for the 'Car' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\n[PrimaryKey(nameof(State), nameof(LicensePlate))]\ninternal class Car\n{\n    public string State { get; set; }\n    public string LicensePlate { get; set; }\n\n    public string Make { get; set; }\n    public string Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the BlogService class in C#\nDESCRIPTION: Defines the `BlogService` class which encapsulates the business logic for interacting with blogs. It depends on the `IBloggingContext` interface for data access. The service provides methods for adding new blogs (`AddBlog`), retrieving all blogs synchronously (`GetAllBlogs`), and asynchronously (`GetAllBlogsAsync`), ordered by name. It uses `System.Collections.Generic`, `System.Data.Entity`, `System.Linq`, and `System.Threading.Tasks` namespaces.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/writing-test-doubles.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace TestingDemo\n{\n    public class BlogService\n    {\n        private IBloggingContext _context;\n\n        public BlogService(IBloggingContext context)\n        {\n            _context = context;\n        }\n\n        public Blog AddBlog(string name, string url)\n        {\n            var blog = new Blog { Name = name, Url = url };\n            _context.Blogs.Add(blog);\n            _context.SaveChanges();\n\n            return blog;\n        }\n\n        public List<Blog> GetAllBlogs()\n        {\n            var query = from b in _context.Blogs\n                        orderby b.Name\n                        select b;\n\n            return query.ToList();\n        }\n\n        public async Task<List<Blog>> GetAllBlogsAsync()\n        {\n            var query = from b in _context.Blogs\n                        orderby b.Name\n                        select b;\n\n            return await query.ToListAsync();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Time-to-Live Value Before Saving Entity in EF Core\nDESCRIPTION: This snippet shows how to set the time-to-live property of an entity before saving it to Azure Cosmos DB using EF Core. The TimeToLive property corresponds to the 'ttl' field in the JSON document.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvar village = new Village { Id = \"DN41\", Name = \"Healing\", TimeToLive = 60 };\ncontext.Add(village);\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Suppress sync I/O error in EF Core with Azure Cosmos DB\nDESCRIPTION: This code snippet suppresses the error thrown when attempting to use synchronous I/O with the Azure Cosmos DB provider in EF Core 9.  However, it is strongly recommended to migrate to asynchronous APIs instead, as this suppression will be removed in a future release.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder.ConfigureWarnings(w => w.Ignore(CosmosEventId.SyncNotSupported));\n}\n```\n\n----------------------------------------\n\nTITLE: BlogsContext Definition (SaveChanges Interception)\nDESCRIPTION: This C# code snippet defines a `BlogsContext` derived from `DbContext`. It configures the context to use SQLite and registers an `AuditingInterceptor`.  It also includes DbSet property for Blogs. The interceptor is responsible for auditing changes made through SaveChanges.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BlogsContext : DbContext\n{\n    private readonly AuditingInterceptor _auditingInterceptor = new AuditingInterceptor(\"DataSource=audit.db\");\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder\n            .AddInterceptors(_auditingInterceptor)\n            .UseSqlite(\"DataSource=blogs.db\");\n\n    public DbSet<Blog> Blogs { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Composite Index Attribute with Mixed Order\nDESCRIPTION: This snippet demonstrates how to create a composite index with mixed ascending and descending order on multiple columns in EF Core 7 using the Index attribute. The IsDescending property is set to a boolean array indicating the sort order for each column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\n[Index(nameof(Name), nameof(Owner), IsDescending = new[] { false, true })]\npublic class Blog\n{\n    public int Id { get; set; }\n\n    [MaxLength(64)]\n    public string? Name { get; set; }\n\n    [MaxLength(64)]\n    public string? Owner { get; set; }\n\n    public List<Post> Posts { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Using DbContext with 'using' statement in C#\nDESCRIPTION: This code demonstrates how to use the 'using' statement to ensure that the DbContext is properly disposed of when it is no longer needed. This helps prevent memory leaks and other issues related to unmanaged resources.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/working-with-dbcontext.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void UseProducts()\n{\n    using (var context = new ProductContext())\n    {\n        // Perform data access using the context\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext Optimize Command Dotnet CLI\nDESCRIPTION: Demonstrates using the `dotnet ef dbcontext optimize` command to generate a compiled model.  The `--output-dir` and `--namespace` options are used to customize the output.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_28\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext optimize\n```\n\n----------------------------------------\n\nTITLE: Implement Simple Logging with LogTo in EF Core\nDESCRIPTION: Demonstrates how to use the `LogTo` method to configure simple logging in EF Core. This example logs all database-related operations to the console. It is intended for use during development or for simple debugging scenarios where detailed logging is not required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\n\npublic class BloggingContext : DbContext\n{\n    private static readonly ILoggerFactory MyLoggerFactory\n        = LoggerFactory.Create(builder => { builder.AddConsole(); });\n\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder\n            .UseLoggerFactory(MyLoggerFactory)\n            .UseSqlite(\"Data Source=blogging.db\");\n}\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n\n    public List<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int PostId { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Log Output (SQL)\nDESCRIPTION: This snippet illustrates the format of a log entry produced by EF Core when command execution logging is enabled. It shows the time taken for the command, the parameters used, and the SQL query itself. It helps in identifying slow queries for further analysis.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ninfo: 06/12/2020 09:12:36.117 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command)\n      Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\n      SELECT [b].[Id], [b].[Name]\n      FROM [Blogs] AS [b]\n      WHERE [b].[Name] = N'foo'\n```\n\n----------------------------------------\n\nTITLE: Specifying Check Constraint Name\nDESCRIPTION: This code snippet shows how to explicitly specify the name of a check constraint for an entity in Entity Framework Core. The `HasCheckConstraint` method is used to define the constraint and its expression, and the `HasName` method is then called within the configuration to set the desired name for the constraint in the database. This is useful for ensuring consistency and avoiding naming conflicts, especially when the default naming conventions might lead to issues.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<MyEntity>().HasCheckConstraint(\"CK_Id\", \"Id > 0\", c => c.HasName(\"CK_MyEntity_Id\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Table-Valued Function - SQL\nDESCRIPTION: This SQL code creates a table-valued function named `BlogsWithMultiplePosts` that returns blogs with multiple posts and the count of posts for each blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE FUNCTION dbo.BlogsWithMultiplePosts()\nRETURNS TABLE\nAS\nRETURN\n(\n    SELECT b.Url, COUNT(p.BlogId) AS PostCount\n    FROM Blogs AS b\n    JOIN Posts AS p ON b.BlogId = p.BlogId\n    GROUP BY b.BlogId, b.Url\n    HAVING COUNT(p.BlogId) > 1\n)\n```\n\n----------------------------------------\n\nTITLE: Data Seeding Configuration - C#\nDESCRIPTION: This C# code shows how to configure seed data for an entity type (Post) within the `OnModelCreating` method in EF Core.  It uses the `HasData` method to provide initial data that will be used to populate the database during migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.1.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>().HasData(new Post{ Id = 1, Text = \"Hello World!\" });\n```\n\n----------------------------------------\n\nTITLE: Configure Required Navigation in OnModelCreating - C#\nDESCRIPTION: This code configures a required relationship by placing the `IsRequired()` call after specifying the foreign key in `OnModelCreating`. This ensures the foreign key is defined on the dependent end.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasOne(b => b.BlogImage)\n    .WithOne(i => i.Blog)\n    .HasForeignKey<BlogImage>(b => b.BlogForeignKey)\n    .IsRequired();\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Entity SQL\nDESCRIPTION: This shows the SQL query generated when querying a Customer entity that has complex types. All columns for the customer and its complex properties are selected in a single SQL query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP(1) [c].[Id], [c].[Name], [c].[Contact_Address_City], [c].[Contact_Address_Country],\n    [c].[Contact_Address_Line1], [c].[Contact_Address_Line2], [c].[Contact_Address_PostCode],\n    [c].[Contact_HomePhone_CountryCode], [c].[Contact_HomePhone_Number], [c].[Contact_MobilePhone_CountryCode],\n    [c].[Contact_MobilePhone_Number], [c].[Contact_WorkPhone_CountryCode], [c].[Contact_WorkPhone_Number]\nFROM [Customers] AS [c]\nWHERE [c].[Id] = @__customerId_0\n```\n\n----------------------------------------\n\nTITLE: Custom Tracking with TrackGraph - Part 1 C#\nDESCRIPTION: This C# code snippet adds a new Post to the blog's Posts collection and modifies the Id of one of the posts to a negative value. This is done to simulate a disconnected graph where negative Ids can be used to mark entities for deletion using TrackGraph.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace ChangeTrackingInEFCore\n{\n    public static class GeneratedKeysSamples\n    {\n        public static void CustomTrackingWithTrackGraph()\n        {\n            using var context = new BlogsContext();\n            var blog = context.Blogs.Include(e => e.Posts).Single(e => e.Id == 1);\n\n            blog.Posts.Add(\n                new Post\n                {\n                    Title = \"Announcing .NET 5.0\",\n                    Content = \".NET 5.0 includes many enhancements, including single file applications, more...\"\n                }\n            );\n\n            var toDelete = blog.Posts.Single(e => e.Title == \"Announcing F# 5\");\n            toDelete.Id = -toDelete.Id;\n\n```\n\n----------------------------------------\n\nTITLE: Connection String in Scaffolded Code\nDESCRIPTION: This C# code shows the default scaffolded DbContext with a connection string inside the OnConfiguring method. A warning comment is included, advising to move the connection string out of the source code for security reasons. This is intended for development and demonstration purposes only and must not be used in production.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n    => optionsBuilder.UseSqlServer(\"Data Source=(LocalDb)\\\\MSSQLLocalDB;Database=AllTogetherNow\");\n```\n\n----------------------------------------\n\nTITLE: Model with Non-Generated Keys - C#\nDESCRIPTION: Defines the Blog and Post entities with explicitly configured (non-generated) key values using the [DatabaseGenerated(DatabaseGeneratedOption.None)] attribute. This configuration requires explicit setting of the primary key when creating new instances.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    [DatabaseGenerated(DatabaseGeneratedOption.None)]\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n\n    public IList<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    [DatabaseGenerated(DatabaseGeneratedOption.None)]\n    public int Id { get; set; }\n\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int? BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Table-Per-Hierarchy (TPH) - C#\nDESCRIPTION: Configures Table-Per-Hierarchy (TPH) inheritance mapping for the 'Course', 'OnsiteCourse', and 'OnlineCourse' entities. Specifies a discriminator column named 'Type' with values 'Course' and 'OnsiteCourse' respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()  \n    .Map<Course>(m => m.Requires(\"Type\").HasValue(\"Course\"))  \n    .Map<OnsiteCourse>(m => m.Requires(\"Type\").HasValue(\"OnsiteCourse\"));\n```\n\n----------------------------------------\n\nTITLE: Create DbSet for Shared-Type Entity C#\nDESCRIPTION: This C# code defines a `DbSet` property for the `BuildMetadata` shared-type entity using the `Set<T>` method. The DbSet uses a Dictionary<string, object> and takes the name of the shared-type entity as a parameter. This is necessary to interact with the shared-type entity through the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_140\n\nLANGUAGE: csharp\nCODE:\n```\npublic DbSet<Dictionary<string, object>> BuildMetadata\n            => Set<Dictionary<string, object>>(\"BuildMetadata\");\n```\n\n----------------------------------------\n\nTITLE: DbContext with Parameterless Constructor (C#)\nDESCRIPTION: This code shows a DbContext implementation that includes both a parameterless constructor and a constructor that accepts DbContextOptions. EF Core 6 supports both constructors when using AddDbContextFactory.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\npublic class SomeDbContext : DbContext\n{\n    public SomeDbContext()\n    {\n    }\n\n    public SomeDbContext(DbContextOptions<SomeDbContext> options)\n        : base(options)\n    {\n    }\n    \n    public DbSet<Blog> Blogs { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Index - Fluent API - C#\nDESCRIPTION: This code snippet shows how to create a composite index using the Fluent API in EF Core. The `HasIndex` method is used to configure the index on the specified properties. This index speeds up queries that filter on FirstName, LastName, or just FirstName.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Person>()\n    .HasIndex(p => new { p.FirstName, p.LastName });\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Database using Raw SQL (SQL)\nDESCRIPTION: This code snippet shows how to efficiently clear a database table by using raw SQL command. This approach can be faster than using EF Core's `Remove` method for each entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM [Blogs];\n```\n\n----------------------------------------\n\nTITLE: Deleting Principal Parent Entities C#\nDESCRIPTION: This snippet demonstrates deleting a principal/parent entity (Blog) when there's an optional relationship with dependent/child entities (Posts).  It attaches a graph (Blog and associated Posts) and then removes the Blog, which leads EF Core to set the foreign key (BlogId) in related Posts to null.  SaveChanges will then update the Posts and delete the Blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n// Attach a blog and associated posts\ncontext.Attach(blog);\n\n// Mark one post as Deleted\ncontext.Remove(blog.Posts[1]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Relationships - EF Core\nDESCRIPTION: This EF Core 6 code snippet configures a required relationship between the `Instructor` and `OfficeAssignment` entities using `HasOne`, `WithOne`, `HasForeignKey`, and `Navigation(t => ...).IsRequired()`. It configures the foreign key and specifies that the navigation properties are required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/efcore-and-ef6/porting/port-detailed-cases.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Instructor>()\n    .HasOne(t => t.OfficeAssignment)\n    .WithOne(t => t.Instructor)\n    .HasForeignKey<OfficeAssignment>();\n\nmodelBuilder.Entity<Instructor>()\n    .Navigation(t => t.OfficeAssignment)\n    .IsRequired();\n\nmodelBuilder.Entity<OfficeAssignment>()\n    .Navigation(t => t.Instructor)\n    .IsRequired();\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Types in ModelBuilder in C#\nDESCRIPTION: This code configures the `Address` type as a complex property for the `Customer` entity, and both `BillingAddress` and `ShippingAddress` as complex properties for the `Order` entity using the `ComplexProperty` method in the `OnModelCreating` method of the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Customer>()\n        .ComplexProperty(e => e.Address);\n\n    modelBuilder.Entity<Order>(b =>\n    {\n        b.ComplexProperty(e => e.BillingAddress);\n        b.ComplexProperty(e => e.ShippingAddress);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext Pooling in EF Core 2.0 (C#)\nDESCRIPTION: This code demonstrates how to register a custom DbContext type with DbContext pooling in ASP.NET Core to reuse DbContext instances, which can improve performance. The `AddDbContextPool` method is used during service registration instead of `AddDbContext`.  It requires a connection string to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddDbContextPool<BloggingContext>(\n    options => options.UseSqlServer(connectionString));\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of Filtered Include\nDESCRIPTION: This SQL query represents the translated form of the C# code that uses filtered Include on a hidden navigation property in EF Core 7. It performs a LEFT JOIN between the Blogs and Posts tables and filters the Posts based on content containing '.NET'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_133\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[Id], [b].[Name], [t].[Id], [t].[AuthorId], [t].[BlogId], [t].[Content], [t].[Discriminator], [t].[PublishedOn], [t].[Title], [t].[PromoText]\nFROM [Blogs] AS [b]\nLEFT JOIN (\n    SELECT [p].[Id], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText]\n    FROM [Posts] AS [p]\n    WHERE [p].[Content] LIKE N'%.NET%'\n) AS [t] ON [b].[Id] = [t].[BlogId]\nORDER BY [b].[Id], [t].[Title]\n```\n\n----------------------------------------\n\nTITLE: Insert or Update Pattern - C#\nDESCRIPTION: This code demonstrates a common pattern for inserting or updating entities based on the primary key value. If the `BlogId` is 0, the entity is treated as new and added; otherwise, it's treated as existing and marked as modified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/entity-state.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic void InsertOrUpdate(Blog blog)\n{\n    using (var context = new BloggingContext())\n    {\n        context.Entry(blog).State = blog.BlogId == 0 ?\n                                   EntityState.Added :\n                                   EntityState.Modified;\n\n        context.SaveChanges();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Join and Complex Select C#\nDESCRIPTION: This C# query joins People and Shoes based on Age, groups by a composite key (Id, Style, Age), and projects the results into a new anonymous type, including nested selection for values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nvar results = from Person person1\n                  in from Person person2\n                         in context.People\n                     select person2\n              join Shoes shoes\n                  in context.Shoes\n                  on person1.Age equals shoes.Age\n              group shoes by\n                  new\n                  {\n                      person1.Id,\n                      shoes.Style,\n                      shoes.Age\n                  }\n              into temp\n              select\n                  new\n                  {\n                      temp.Key.Id,\n                      temp.Key.Age,\n                      temp.Key.Style,\n                      Values = from t\n                                   in temp\n                               select\n                                   new\n                                   {\n                                       t.Id,\n                                       t.Style,\n                                       t.Age\n                                   }\n                  };\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Streams with EF Core (C#)\nDESCRIPTION: This code shows how to use asynchronous streams (IAsyncEnumerable) with EF Core to process query results asynchronously using await foreach. It retrieves pending orders from the database and processes them one by one.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar orders =\n    from o in context.Orders\n    where o.Status == OrderStatus.Pending\n    select o;\n\nawait foreach(var o in orders.AsAsyncEnumerable())\n{\n    Process(o);\n}\n```\n\n----------------------------------------\n\nTITLE: FreeText/Contains Query with JSON Column (C#)\nDESCRIPTION: This C# code demonstrates using `EF.Functions.Contains` on a JSON column in EF Core 6.  It queries the `Customers` table to find customers whose `Name` property (stored as JSON) contains the term \"Martin\". It utilizes the `Contains` function to perform the search within the JSON data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nvar result = context.Customers.Where(e => EF.Functions.Contains(e.Name, \"Martin\")).ToList();\n```\n\n----------------------------------------\n\nTITLE: Grouping by Complex Type in EF Core 9 with C#\nDESCRIPTION: This C# code demonstrates grouping by a complex type instance using EF Core 9. It groups stores by their 'StoreAddress' property (a complex type) and selects the key (address) and the count of stores for each address. This showcases the improved support for complex types in LINQ queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nvar groupedAddresses = await context.Stores\n            .GroupBy(b => b.StoreAddress)\n            .Select(g => new { g.Key, Count = g.Count() })\n            .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: KeyValueObserver Implementation C#\nDESCRIPTION: Defines a KeyValueObserver that handles specific EF Core events. The `OnNext` method is called for each EF Core event, and the code filters for specific events (ContextInitialized, ConnectionOpening) and extracts data from their payloads. It then prints information to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/diagnostic-listeners.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class KeyValueObserver : IObserver<KeyValuePair<string, object>>\n{\n    public void OnCompleted()\n        => throw new NotImplementedException();\n\n    public void OnError(Exception error)\n        => throw new NotImplementedException();\n\n    public void OnNext(KeyValuePair<string, object> value)\n    {\n        if (value.Key == CoreEventId.ContextInitialized.Name)\n        {\n            var payload = (ContextInitializedEventData)value.Value;\n            Console.WriteLine($\"EF is initializing {payload.Context.GetType().Name} \");\n        }\n\n        if (value.Key == RelationalEventId.ConnectionOpening.Name)\n        {\n            var payload = (ConnectionEventData)value.Value;\n            Console.WriteLine($\"EF is opening a connection to {payload.Connection.ConnectionString} \");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DbContext with UseSqlServer without connection string (C#)\nDESCRIPTION: This code configures the DbContext to use SQL Server without providing a connection string during the initial configuration. The connection string will be lazily initialized by an interceptor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddDbContext<CustomerContext>(\n    b => b.UseSqlServer());\n```\n\n----------------------------------------\n\nTITLE: Custom Property Discovery Convention in C#\nDESCRIPTION: This code defines a custom convention `AttributeBasedPropertyDiscoveryConvention` that inherits from `PropertyDiscoveryConvention`. It overrides the `ProcessEntityTypeAdded` and `ProcessEntityTypeBaseTypeChanged` methods to control property discovery based on the `PersistAttribute`. It iterates through the properties and fields of an entity and maps those with the `PersistAttribute` and ignores the rest.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\npublic class AttributeBasedPropertyDiscoveryConvention : PropertyDiscoveryConvention\n{\n    public AttributeBasedPropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies)\n        : base(dependencies)\n    {\n    }\n\n    public override void ProcessEntityTypeAdded(\n        IConventionEntityTypeBuilder entityTypeBuilder,\n        IConventionContext<IConventionEntityTypeBuilder> context)\n        => Process(entityTypeBuilder);\n\n    public override void ProcessEntityTypeBaseTypeChanged(\n        IConventionEntityTypeBuilder entityTypeBuilder,\n        IConventionEntityType? newBaseType,\n        IConventionEntityType? oldBaseType,\n        IConventionContext<IConventionEntityType> context)\n    {\n        if ((newBaseType == null\n             || oldBaseType != null)\n            && entityTypeBuilder.Metadata.BaseType == newBaseType)\n        {\n            Process(entityTypeBuilder);\n        }\n    }\n\n    private void Process(IConventionEntityTypeBuilder entityTypeBuilder)\n    {\n        foreach (var memberInfo in GetRuntimeMembers())\n        {\n            if (Attribute.IsDefined(memberInfo, typeof(PersistAttribute), inherit: true))\n            {\n                entityTypeBuilder.Property(memberInfo);\n            }\n            else if (memberInfo is PropertyInfo propertyInfo\n                     && Dependencies.TypeMappingSource.FindMapping(propertyInfo) != null)\n            {\n                entityTypeBuilder.Ignore(propertyInfo.Name);\n            }\n        }\n\n        IEnumerable<MemberInfo> GetRuntimeMembers()\n        {\n            var clrType = entityTypeBuilder.Metadata.ClrType;\n\n            foreach (var property in clrType.GetRuntimeProperties()\n                         .Where(p => p.GetMethod != null && !p.GetMethod.IsStatic))\n            {\n                yield return property;\n            }\n\n            foreach (var property in clrType.GetRuntimeFields())\n            {\n                yield return property;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Blogs with ExecuteUpdateAsync - SQL\nDESCRIPTION: The SQL generated by the ExecuteUpdateAsync method to set the IsVisible property to false for blogs with a rating less than 3.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [b]\nSET [b].[IsVisible] = CAST(0 AS bit)\nFROM [Blogs] AS [b]\nWHERE [b].[Rating] < 3\n```\n\n----------------------------------------\n\nTITLE: Creating Descending Indexes in EF Core 7\nDESCRIPTION: This snippet demonstrates how to create a descending index on a column in EF Core 7 using the HasIndex API. This feature allows specifying the sort order of an index column, which can be useful for optimizing queries with mixed ascending and descending sort orders.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Post>()\n    .HasIndex(post => post.Title)\n    .IsDescending();\n```\n\n----------------------------------------\n\nTITLE: Fluent API Configuration\nDESCRIPTION: This code shows how entity properties are configured using Fluent API in the `OnModelCreating` method, which is the default behavior of the scaffolder.  Specifically, it shows an example of setting the `Title` property as required with a maximum length of 160 characters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nentity.Property(e => e.Title)\n    .IsRequired()\n    .HasMaxLength(160);\n```\n\n----------------------------------------\n\nTITLE: Use BlogContext to Access Data\nDESCRIPTION: This C# code demonstrates how to use the BlogContext to add and retrieve data from the database.\nIt creates a new Blog instance, adds it to the Blogs DbSet, saves the changes to the database, and then iterates through the Blogs DbSet to print each blog's name to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/automatic.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace MigrationsAutomaticDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            using (var db = new BlogContext())\n            {\n                db.Blogs.Add(new Blog { Name = \"Another Blog \" });\n                db.SaveChanges();\n\n                foreach (var blog in db.Blogs)\n                {\n                    Console.WriteLine(blog.Name);\n                }\n            }\n\n            Console.WriteLine(\"Press any key to exit...\");\n            Console.ReadKey();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Procedure and Parameter Names for Many-to-Many (C#)\nDESCRIPTION: This C# code customizes the names of the stored procedures and parameters used for managing the many-to-many relationship between Post and Tag entities.  It specifies the names for the insert and delete procedures and their respective key parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Post>()\n  .HasMany(p => p.Tags)\n  .WithMany(t => t.Posts)\n  .MapToStoredProcedures(s =>\n    s.Insert(i => i.HasName(\"add_post_tag\")\n                   .LeftKeyParameter(p => p.PostId, \"post_id\")\n                   .RightKeyParameter(t => t.TagId, \"tag_id\"))\n     .Delete(d => d.HasName(\"remove_post_tag\")\n                   .LeftKeyParameter(p => p.PostId, \"post_id\")\n                   .RightKeyParameter(t => t.TagId, \"tag_id\")));\n```\n\n----------------------------------------\n\nTITLE: Table-per-Concrete-Type (TPC) Configuration - C#\nDESCRIPTION: This code configures Table-per-Concrete-Type (TPC) inheritance mapping, introduced in EF Core 7.0, where each type in the hierarchy is mapped to its own table, containing columns for all properties on the corresponding entity type. This avoids the performance issues of TPT.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().ToTable(\"Blogs\");\n    modelBuilder.Entity<RssBlog>().ToTable(\"RssBlogs\");\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Customer Entity C#\nDESCRIPTION: Defines the `Customer` entity with combined properties like Name, PhoneNumber, Street, City, PostCode, and Country, all mapping to separate tables via entity splitting.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public Customer(string name, string street, string city, string? postCode, string country)\n    {\n        Name = name;\n        Street = street;\n        City = city;\n        PostCode = postCode;\n        Country = country;\n    }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string? PhoneNumber { get; set; }\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string? PostCode { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Changes to the Database in C#\nDESCRIPTION: This code snippet shows how to save changes made to products and categories in a Windows Forms application using Entity Framework Core. It calls the SaveChanges method on the DbContext to persist changes to the SQLite database and refreshes the DataGridView controls to display any generated primary key values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/winforms.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void buttonSave_Click(object sender, EventArgs e)\n{\n    this.dbContext!.SaveChanges();\n\n    this.dataGridViewCategories.Refresh();\n    this.dataGridViewProducts.Refresh();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Linking Foreign Key C#\nDESCRIPTION: Configures the foreign key relationship between the tables involved in entity splitting. In this case it configures the FK between the Customer entity mapped tables, restricting the delete behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Customer>()\n    .HasOne<Customer>()\n    .WithOne()\n    .HasForeignKey<Customer>(a => a.Id)\n    .OnDelete(DeleteBehavior.Restrict);\n```\n\n----------------------------------------\n\nTITLE: Simple Query and Update - C#\nDESCRIPTION: Queries for a specific blog and its associated posts using Entity Framework Core. It then updates the blog's name and modifies the titles of certain posts that do not contain \"5.0\". Finally, it calls SaveChanges to persist these changes to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blog = context.Blogs.Include(e => e.Posts).First(e => e.Name == \".NET Blog\");\n\nblog.Name = \".NET Blog (Updated!)\";\n\nforeach (var post in blog.Posts.Where(e => !e.Title.Contains(\"5.0\")))\n{\n    post.Title = post.Title.Replace(\"5\", \"5.0\");\n}\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: DbContext ConfigureConventions Override C#\nDESCRIPTION: This code snippet shows how to override the `ConfigureConventions` method in a `DbContext` class to apply pre-convention model configurations.  This is where the configurations for properties are specified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SomeDbContext : DbContext\n{\n    protected override void ConfigureConventions(\n        ModelConfigurationBuilder configurationBuilder)\n    {\n        // Pre-convention model configuration goes here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Update with Owned Type\nDESCRIPTION: This SQL snippet illustrates the SQL generated by EF Core 8 for the `ExecuteUpdateAsync` call that updates both the main entity and the owned entity, both mapped to the same table. The CustomerInfo_Tag represents the Tag property in the owned type CustomerInfo.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_129\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [c]\nSET [c].[Name] = [c].[Name] + N'_Tagged',\n    [c].[CustomerInfo_Tag] = N'Tagged'\nFROM [Customers] AS [c]\nWHERE [c].[Name] = @__name_0\n```\n\n----------------------------------------\n\nTITLE: Defining a Virtual Computed Column with Fluent API in EF Core\nDESCRIPTION: This C# code snippet shows how to define a virtual computed column using the Fluent API in EF Core. Virtual computed columns are computed every time they are fetched from the database.  Requires Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Person>()\n    .Property(p => p.FullName)\n    .HasComputedColumnSql(\"[LastName], ', ', [FirstName]\");\n```\n\n----------------------------------------\n\nTITLE: Attribute-Based Property Discovery Convention in EF Core\nDESCRIPTION: This code defines a custom convention that replaces the default property discovery in EF Core. Instead of mapping all public read-write properties, it only maps properties or fields marked with the `PersistAttribute`. It inherits from `PropertyDiscoveryConvention` and overrides the `ProcessEntityTypeAdded` and `ProcessEntityTypeBaseTypeChanged` methods.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic class AttributeBasedPropertyDiscoveryConvention : PropertyDiscoveryConvention\n{\n    public AttributeBasedPropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies)\n        : base(dependencies)\n    {\n    }\n\n    public override void ProcessEntityTypeAdded(\n        IConventionEntityTypeBuilder entityTypeBuilder,\n        IConventionContext<IConventionEntityTypeBuilder> context)\n        => Process(entityTypeBuilder);\n\n    public override void ProcessEntityTypeBaseTypeChanged(\n        IConventionEntityTypeBuilder entityTypeBuilder,\n        IConventionEntityType? newBaseType,\n        IConventionEntityType? oldBaseType,\n        IConventionContext<IConventionEntityType> context)\n    {\n        if ((newBaseType == null\n             || oldBaseType != null)\n            && entityTypeBuilder.Metadata.BaseType == newBaseType)\n        {\n            Process(entityTypeBuilder);\n        }\n    }\n\n    private void Process(IConventionEntityTypeBuilder entityTypeBuilder)\n    {\n        foreach (var memberInfo in GetRuntimeMembers())\n        {\n            if (Attribute.IsDefined(memberInfo, typeof(PersistAttribute), inherit: true))\n            {\n                entityTypeBuilder.Property(memberInfo);\n            }\n            else if (memberInfo is PropertyInfo propertyInfo\n                     && Dependencies.TypeMappingSource.FindMapping(propertyInfo) != null)\n            {\n                entityTypeBuilder.Ignore(propertyInfo.Name);\n            }\n        }\n\n        IEnumerable<MemberInfo> GetRuntimeMembers()\n        {\n            var clrType = entityTypeBuilder.Metadata.ClrType;\n\n            foreach (var property in clrType.GetRuntimeProperties()\n                         .Where(p => p.GetMethod != null && !p.GetMethod.IsStatic))\n            {\n                yield return property;\n            }\n\n            foreach (var property in clrType.GetRuntimeFields())\n            {\n                yield return property;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Logging Configuration in EF Core (C#)\nDESCRIPTION: This snippet shows how to configure EF Core to use Microsoft.Extensions.Logging for capturing database command execution times. It configures the DbContext to use a LoggerFactory, which can then be configured with various logging providers. It uses ILoggerFactory and DbContextOptionsBuilder to configure EF Core with extension logging.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate static readonly ILoggerFactory MyLoggerFactory\n    = LoggerFactory.Create(builder => { builder.AddConsole(); });\n\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder.UseLoggerFactory(MyLoggerFactory);\n}\n```\n\n----------------------------------------\n\nTITLE: Buffering vs. Streaming C#\nDESCRIPTION: This code illustrates the difference between buffering and streaming in EF Core. Buffering loads the entire query result into memory at once, while streaming processes results one at a time, reducing memory usage for large result sets.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// Buffering: Loads all results into memory\nvar blogsBuffered = context.Blogs.ToList();\n\n// Streaming: Processes results one at a time\nvar blogsStreaming = context.Blogs.AsEnumerable();\n```\n\n----------------------------------------\n\nTITLE: Tracking Entity States with ChangeTracker in EF Core\nDESCRIPTION: This code snippet demonstrates how to use the `ChangeTracker.Entries()` method to inspect the state of all tracked entities within an Entity Framework context. It loads entities of various types (Blogs, Authors, Readers), modifies some, adds one, and deletes one.  It then iterates through all tracked entities and modified entities, printing their type and state. It also retrieves and prints information about the tracked blogs including their original names. Finally, it shows how to retrieve information about all entities implementing a given interface.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/local-data.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Load some entities into the context\n    context.Blogs.Load();\n    context.Authors.Load();\n    context.Readers.Load();\n\n    // Make some changes\n    context.Blogs.Find(1).Title = \"The New ADO.NET Blog\";\n    context.Blogs.Remove(context.Blogs.Find(2));\n    context.Authors.Add(new Author { Name = \"Jane Doe\" });\n    context.Readers.Find(1).Username = \"johndoe1987\";\n\n    // Look at the state of all entities in the context\n    Console.WriteLine(\"All tracked entities: \");\n    foreach (var entry in context.ChangeTracker.Entries())\n    {\n        Console.WriteLine(\n            \"Found entity of type {0} with state {1}\",\n            ObjectContext.GetObjectType(entry.Entity.GetType()).Name,\n            entry.State);\n    }\n\n    // Find modified entities of any type\n    Console.WriteLine(\"\\nAll modified entities: \");\n    foreach (var entry in context.ChangeTracker.Entries()\n                              .Where(e => e.State == EntityState.Modified))\n    {\n        Console.WriteLine(\n            \"Found entity of type {0} with state {1}\",\n            ObjectContext.GetObjectType(entry.Entity.GetType()).Name,\n            entry.State);\n    }\n\n    // Get some information about just the tracked blogs\n    Console.WriteLine(\"\\nTracked blogs: \");\n    foreach (var entry in context.ChangeTracker.Entries<Blog>())\n    {\n        Console.WriteLine(\n            \"Found Blog {0}: {1} with original Name {2}\",\n            entry.Entity.BlogId,\n            entry.Entity.Name,\n            entry.Property(p => p.Name).OriginalValue);\n    }\n\n    // Find all people (author or reader)\n    Console.WriteLine(\"\\nPeople: \");\n    foreach (var entry in context.ChangeTracker.Entries<IPerson>())\n    {\n        Console.WriteLine(\"Found Person {0}\", entry.Entity.Name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Failed SQL execution log example\nDESCRIPTION: Example log output showing an error from a failed sql execution, where the table doesn't exist.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * from ThisTableIsMissing\n-- Executing at 5/13/2013 10:19:05 AM\n-- Failed in 1 ms with error: Invalid object name 'ThisTableIsMissing'.\n```\n\n----------------------------------------\n\nTITLE: Adding a Tag to a Post with Skip Navigations Only in C#\nDESCRIPTION: This C# code demonstrates associating a `Post` and a `Tag` when the many-to-many relationship is defined using only skip navigations. The `Tag` is added to the `Post.Tags` collection. EF Core automatically creates an instance of `Dictionary<string, object>` to represent the join entity, with foreign key properties set to match the primary key values of the associated `Post` and `Tag`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar post = context.Posts.Single(e => e.Id == 3);\nvar tag = context.Tags.Single(e => e.Id == 1);\n\npost.Tags.Add(tag);\n\ncontext.ChangeTracker.DetectChanges();\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Implement Customer Entity C#\nDESCRIPTION: Defines a `Customer` entity that implements the `IHasRetrieved` interface. The `Retrieved` property is decorated with the `[NotMapped]` attribute, indicating that it should not be persisted to the database. Other properties like Id, Name and PhoneNumber are also defined.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_90\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer : IHasRetrieved\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = null!;\n    public string? PhoneNumber { get; set; }\n\n    [NotMapped]\n    public DateTime Retrieved { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ContactDetailsAggregate in EF Core 7.0 (C#)\nDESCRIPTION: This C# code snippet defines the ContactDetailsAggregate, an aggregate type used in EF Core 7.0 examples. It demonstrates how aggregate types can be used within the data model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[ContactDetailsAggregate](../../../../samples/core/Miscellaneous/NewInEFCore7/BlogsContext.cs?name=ContactDetailsAggregate)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Foreign Key with String - EF Core\nDESCRIPTION: This code snippet demonstrates how to configure a composite foreign key using string names for the properties within the `OnModelCreating` method of an EF Core DbContext. The code defines a one-to-many relationship between `Blog` and `Post` entities, specifying `ContainingBlogId1` and `ContainingBlogId2` as the composite foreign key properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasForeignKey(\"ContainingBlogId1\", \"ContainingBlogId2\");\n```\n\n----------------------------------------\n\nTITLE: Custom Resolution of Concurrency Conflicts - EF6\nDESCRIPTION: This snippet demonstrates a custom approach to resolving concurrency conflicts. It retrieves both the current entity values and the database values, then allows a user to choose the resolved values. Finally, it updates the original values with the database values and the current values with the resolved values before retrying the SaveChanges operation. This example uses DbPropertyValues for managing the entity's properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/concurrency.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n    blog.Name = \"The New ADO.NET Blog\";\n\n    bool saveFailed;\n    do\n    {\n        saveFailed = false;\n        try\n        {\n            context.SaveChanges();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            saveFailed = true;\n\n            // Get the current entity values and the values in the database\n            var entry = ex.Entries.Single();\n            var currentValues = entry.CurrentValues;\n            var databaseValues = entry.GetDatabaseValues();\n\n            // Choose an initial set of resolved values. In this case we\n            // make the default be the values currently in the database.\n            var resolvedValues = databaseValues.Clone();\n\n            // Have the user choose what the resolved values should be\n            HaveUserResolveConcurrency(currentValues, databaseValues, resolvedValues);\n\n            // Update the original values with the database values and\n            // the current values with whatever the user choose.\n            entry.OriginalValues.SetValues(databaseValues);\n            entry.CurrentValues.SetValues(resolvedValues);\n        }\n    } while (saveFailed);\n}\n\npublic void HaveUserResolveConcurrency(DbPropertyValues currentValues,\n                                       DbPropertyValues databaseValues,\n                                       DbPropertyValues resolvedValues)\n{\n    // Show the current, database, and resolved values to the user and have\n    // them edit the resolved values to get the correct resolution.\n}\n```\n\n----------------------------------------\n\nTITLE: Add Tag to Post and Set Payload Value (EF Core)\nDESCRIPTION: Demonstrates how to add a tag to a post and explicitly set the value of a non-automatically generated payload property. The code retrieves the Post and Tag entities, adds the tag to the post, and then retrieves the automatically created join entity using DbSet.Find. It then sets the TaggedBy property on this entity and saves the changes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar post = context.Posts.Single(e => e.Id == 3);\nvar tag = context.Tags.Single(e => e.Id == 1);\n\npost.Tags.Add(tag);\n\ncontext.ChangeTracker.DetectChanges();\n\nvar joinEntity = context.Set<PostTag>().Find(post.Id, tag.Id);\n\njoinEntity.TaggedBy = \"ajcvickers\";\n\ncontext.SaveChanges();\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Scaffold Selected Tables with Custom Context\nDESCRIPTION: This command scaffolds only the specified tables (Blog and Post) and creates the DbContext in a separate folder (Context) with a custom name (BlogContext) and namespace (New.Namespace). It connects to the database using the provided connection string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_10\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold \"Server=(localdb)\\mssqllocaldb;Database=Blogging;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -o Models -t Blog -t Post --context-dir Context -c BlogContext --context-namespace New.Namespace\n```\n\n----------------------------------------\n\nTITLE: C# Configuring Identity Columns for TPC\nDESCRIPTION: This C# code snippet shows how to configure Identity columns with seed and increment values for each table in a TPC hierarchy. This ensures unique key values are generated for each table when standard Identity columns are used.  It requires EF Core and the appropriate provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Cat>().ToTable(\"Cats\", tb => tb.Property(e => e.Id).UseIdentityColumn(1, 4));\nmodelBuilder.Entity<Dog>().ToTable(\"Dogs\", tb => tb.Property(e => e.Id).UseIdentityColumn(2, 4));\nmodelBuilder.Entity<FarmAnimal>().ToTable(\"FarmAnimals\", tb => tb.Property(e => e.Id).UseIdentityColumn(3, 4));\nmodelBuilder.Entity<Human>().ToTable(\"Humans\", tb => tb.Property(e => e.Id).UseIdentityColumn(4, 4));\n```\n\n----------------------------------------\n\nTITLE: Publishing an EF NativeAOT Application\nDESCRIPTION: This snippet shows how to publish an EF NativeAOT application using the `dotnet publish` command. The `-r` flag specifies the runtime identifier (RID), and the `-c` flag specifies the build configuration (Release).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/nativeaot-and-precompiled-queries.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndotnet publish -r linux-arm64 -c Release\n```\n\n----------------------------------------\n\nTITLE: Alternate Key Convention - C#\nDESCRIPTION: Demonstrates the alternate key convention where an alternate key is introduced automatically when a property other than the primary key is the target of a relationship. The 'Blog' entity's 'Url' property becomes an alternate key because it's used in the relationship with 'Post'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n    public string Url { get; set; }\n\n    public List<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int PostId { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Execution Strategy Configuration - C#\nDESCRIPTION: This code shows how to register a custom execution strategy in the `OnConfiguring` method of a `DbContext`. This allows overriding the default retry logic.  Replace `UseMyProvider` with the correct provider and specify custom options using `options.ExecutionStrategy(...)`. The connection string must be provided.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-resiliency.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .UseMyProvider(\n            \"<connection string>\",\n            options => options.ExecutionStrategy(...));\n}\n```\n\n----------------------------------------\n\nTITLE: EntityTypeConfiguration Attribute C#\nDESCRIPTION: Illustrates using the EntityTypeConfiguration attribute to automatically apply an IEntityTypeConfiguration to an entity type.  EF Core will find and use the configuration automatically. Requires EF Core 6.0 or later.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\n[EntityTypeConfiguration(typeof(BookConfiguration))]\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Isbn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Split Query Example 2 C#\nDESCRIPTION: Demonstrates a LINQ query that selects customers and a collection of their order dates, filtering orders with Id greater than 1. This exemplifies split-query support with non-navigation collections and shows the translated single and multiple SQL query alternatives.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Customers\n    .Select(\n        c => new\n        {\n            c,\n            OrderDates = c.Orders\n                .Where(o => o.Id > 1)\n                .Select(o => o.OrderDate)\n        })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Read-Only Contains - SQL Server Translation\nDESCRIPTION: This SQL code demonstrates the translation of the C# query using a read-only set with Contains. The IN clause is used to efficiently filter the orders based on the specified search IDs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_114\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [c].[Name]\nFROM [Customers] AS [c]\nWHERE EXISTS (\n    SELECT 1\n    FROM [Orders] AS [o]\n    WHERE [c].[Id] = [o].[Customer1Id] AND [o].[Id] IN (1, 3, 5))\n```\n\n----------------------------------------\n\nTITLE: Attaching an Existing Entity (EntityState.Unchanged) - C#\nDESCRIPTION: This snippet shows another way to attach an existing entity to the context by setting its state to `EntityState.Unchanged`.  This achieves the same result as using the `Attach` method. Requires a pre-existing `Blog` object.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/entity-state.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar existingBlog = new Blog { BlogId = 1, Name = \"ADO.NET Blog\" };\n\nusing (var context = new BloggingContext())\n{\n    context.Entry(existingBlog).State = EntityState.Unchanged;\n\n    // Do some more work...  \n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of GroupBy Query with Aggregation\nDESCRIPTION: This SQL code is the translated form of the C# GroupBy query. It selects the last name, count, and ID, age, first name, last name, and middle initial from the People table, grouped by last name. The query also retrieves the first record from each group and the first two records from each group, by using window functions (ROW_NUMBER).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_78\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [t].[LastName], [t].[c], [t0].[Id], [t2].[Id], [t2].[Age], [t2].[FirstName], [t2].[LastName], [t2].[MiddleInitial], [t0].[Age], [t0].[FirstName], [t0].[LastName], [t0].[MiddleInitial]\nFROM (\n    SELECT [p].[LastName], COUNT(*) AS [c]\n    FROM [People] AS [p]\n    GROUP BY [p].[LastName]\n) AS [t]\nLEFT JOIN (\n    SELECT [t1].[Id], [t1].[Age], [t1].[FirstName], [t1].[LastName], [t1].[MiddleInitial]\n    FROM (\n        SELECT [p0].[Id], [p0].[Age], [p0].[FirstName], [p0].[LastName], [p0].[MiddleInitial], ROW_NUMBER() OVER(PARTITION BY [p0].[LastName] ORDER BY [p0].[Id]) AS [row]\n        FROM [People] AS [p0]\n    ) AS [t1]\n    WHERE [t1].[row] <= 1\n) AS [t0] ON [t].[LastName] = [t0].[LastName]\nLEFT JOIN (\n    SELECT [t3].[Id], [t3].[Age], [t3].[FirstName], [t3].[LastName], [t3].[MiddleInitial]\n    FROM (\n        SELECT [p1].[Id], [p1].[Age], [p1].[FirstName], [p1].[LastName], [p1].[MiddleInitial], ROW_NUMBER() OVER(PARTITION BY [p1].[LastName] ORDER BY [p1].[Id]) AS [row]\n        FROM [People] AS [p1]\n    ) AS [t3]\n    WHERE [t3].[row] <= 2\n) AS [t2] ON [t].[LastName] = [t2].[LastName]\nORDER BY [t].[LastName] DESC, [t0].[Id], [t2].[LastName], [t2].[Id]\n```\n\n----------------------------------------\n\nTITLE: Deleting All Entities from a DbSet using ExecuteDelete\nDESCRIPTION: This C# code demonstrates how to delete all entities of a specific type (Tag) from the database using the `ExecuteDeleteAsync` method in EF Core 7.  This approach bypasses the change tracker and deletes the entities directly from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Tags.ExecuteDeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: Create Person and PersonInfo Tables SQL\nDESCRIPTION: This SQL script creates two tables, Person and PersonInfo, in the database. Person stores basic information, while PersonInfo holds additional contact details. A foreign key constraint links PersonInfo to Person based on the PersonId, enabling entity splitting.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/entity-splitting.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [dbo].[Person] (\n[PersonId] INT IDENTITY (1, 1) NOT NULL,\n[FirstName] NVARCHAR (200) NULL,\n[LastName] NVARCHAR (200) NULL,\nCONSTRAINT [PK_Person] PRIMARY KEY CLUSTERED ([PersonId] ASC)\n);\n\nCREATE TABLE [dbo].[PersonInfo] (\n[PersonId] INT NOT NULL,\n[Email] NVARCHAR (200) NULL,\n[Phone] NVARCHAR (50) NULL,\nCONSTRAINT [PK_PersonInfo] PRIMARY KEY CLUSTERED ([PersonId] ASC),\nCONSTRAINT [FK_Person_PersonInfo] FOREIGN KEY ([PersonId]) REFERENCES [dbo].[Person] ([PersonId]) ON DELETE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Access Tracked Entity Information (EF Core)\nDESCRIPTION: This snippet shows how to access the entity and its tracking state from the `EntityEntry` obtained using `FindEntry`.  The `State` property indicates the entity's current state (e.g., Added, Modified, Unchanged).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nConsole.WriteLine($\"Blog '{blogEntry.Entity.Name}' with key {blogEntry.Entity.Id} is tracked in the '{blogEntry.State}' state.\");\n```\n\n----------------------------------------\n\nTITLE: Using Model with Stored Procedures - C#\nDESCRIPTION: This code demonstrates how to use the mapped stored procedures (InsertPerson, UpdatePerson, DeletePerson) by interacting with the Entity Framework context. It creates a new Person object, adds it to the context, saves the changes (which triggers the InsertPerson stored procedure), modifies the object (triggering the UpdatePerson stored procedure), and then removes the object from the context (triggering the DeletePerson stored procedure).\nIt uses the SchoolEntities context with CUD operations mapped to stored procedures.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/stored-procedures/cud.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new SchoolEntities())\n    {\n        var newInstructor = new Person\n        {\n            FirstName = \"Robyn\",\n            LastName = \"Martin\",\n            HireDate = DateTime.Now,\n            Discriminator = \"Instructor\"\n        }\n\n        // Add the new object to the context.\n        context.People.Add(newInstructor);\n\n        Console.WriteLine(\"Added {0} {1} to the context.\",\n            newInstructor.FirstName, newInstructor.LastName);\n\n        Console.WriteLine(\"Before SaveChanges, the PersonID is: {0}\",\n            newInstructor.PersonID);\n\n        // SaveChanges will call the InsertPerson sproc.  \n        // The PersonID property will be assigned the value\n        // returned by the sproc.\n        context.SaveChanges();\n\n        Console.WriteLine(\"After SaveChanges, the PersonID is: {0}\",\n            newInstructor.PersonID);\n\n        // Modify the object and call SaveChanges.\n        // This time, the UpdatePerson will be called.\n        newInstructor.FirstName = \"Rachel\";\n        context.SaveChanges();\n\n        // Remove the object from the context and call SaveChanges.\n        // The DeletePerson sproc will be called.\n        context.People.Remove(newInstructor);\n        context.SaveChanges();\n\n        Person deletedInstructor = context.People.\n            Where(p => p.PersonID == newInstructor.PersonID).\n            FirstOrDefault();\n\n        if (deletedInstructor == null)\n            Console.WriteLine(\"A person with PersonID {0} was deleted.\",\n                newInstructor.PersonID);\n    }\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure for Inserting Data\nDESCRIPTION: This SQL code defines a stored procedure named `People_Insert` that inserts data into the `People` table. It takes the `Name` as an input parameter and returns the generated `Id` for the inserted row using the `OUTPUT` clause. This stored procedure is designed to be used in conjunction with the EF Core mapping for insert operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_81\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE [dbo].[People_Insert]\n    @Name [nvarchar](max)\nAS\nBEGIN\n      INSERT INTO [People] ([Name])\n      OUTPUT INSERTED.[Id]\n      VALUES (@Name);\nEND\n```\n\n----------------------------------------\n\nTITLE: Define ProductContext Class - Code First - C#\nDESCRIPTION: Defines the ProductContext class, which derives from DbContext. It exposes DbSet properties for Categories and Products, allowing Entity Framework to manage these entities.  This class is the main entry point for interacting with the database using Code First.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/wpf.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n    using System.Data.Entity;\n\n    namespace WPFwithEFSample\n    {\n        public class ProductContext : DbContext\n        {\n            public DbSet<Category> Categories { get; set; }\n            public DbSet<Product> Products { get; set; }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities via Navigations in EF Core (C#)\nDESCRIPTION: This code shows how to load all related entities for a given entity by iterating through its navigations. It uses `context.Entry(blog).Navigations` to get all navigation properties and then calls `Load()` on each `NavigationEntry` to explicitly load the related entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var navigationEntry in context.Entry(blog).Navigations)\n{\n    navigationEntry.Load();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many Foreign Key Constraint Names in EF Core (C#)\nDESCRIPTION: This code snippet shows how to configure foreign key constraint names in a many-to-many relationship in Entity Framework Core. It uses `UsingEntity` to configure the join entity and sets custom constraint names for the foreign keys referencing the `Tag` and `Post` entities using `HasConstraintName`. This is relevant for creating a custom database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .HasMany(e => e.Tags)\n    .WithMany(e => e.Posts)\n    .UsingEntity(\n        l => l.HasOne(typeof(Tag)).WithMany().HasConstraintName(\"TagForeignKey_Constraint\"),\n        r => r.HasOne(typeof(Post)).WithMany().HasConstraintName(\"PostForeignKey_Constraint\"));\n```\n\n----------------------------------------\n\nTITLE: Listing Migrations using .NET Core CLI\nDESCRIPTION: This command lists all existing migrations in the project using the .NET Core CLI.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_9\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations list\n```\n\n----------------------------------------\n\nTITLE: Querying TVF with LINQ in C#\nDESCRIPTION: This C# code demonstrates how to query the GetStudentGradesForCourse table-valued function within an Entity Framework context. It retrieves students from a specified course with grades greater than or equal to a given value, projecting the results into an anonymous type containing course title, student first name, and student last name.  It requires the SchoolEntities context and the GetStudentGradesForCourse function to be properly mapped in the EF model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/tvfs.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new SchoolEntities())\n{\n    var CourseID = 4022;\n    var Grade = 3.5M;\n\n    // Return all the best students in the Microeconomics class.\n    var students = from s in context.GetStudentGradesForCourse(CourseID)\n                            where s.Grade >= Grade\n                            select new\n                            {\n                                s.Person,\n                                s.Course.Title\n                            };\n\n    foreach (var result in students)\n    {\n        Console.WriteLine(\n            \"Couse: {0}, Student: {1} {2}\",\n            result.Title,  \n            result.Person.FirstName,  \n            result.Person.LastName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stored Procedure SQL\nDESCRIPTION: SQL code for creating a stored procedure named GetAllBlogsAndPosts that returns all blogs and posts from the dbo.Blogs and dbo.Posts tables. This stored procedure is used in the examples to demonstrate how to retrieve multiple result sets.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/multiple-result-sets.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE [dbo].[GetAllBlogsAndPosts]\nAS\n\tSELECT * FROM dbo.Blogs\n\tSELECT * FROM dbo.Posts\n```\n\n----------------------------------------\n\nTITLE: Default Query Parameterization - C#\nDESCRIPTION: This snippet demonstrates the default parameterization behavior of EF Core.  Constants are included in the SQL, while variables are parameterized. The query retrieves posts with a specific title and ID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<List<Post>> GetPosts(int id)\n            => await context.Posts\n                .Where(e => e.Title == \".NET Blog\" && e.Id == id)\n                .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Updating with Navigation Properties using Select and ExecuteUpdateAsync - SQL\nDESCRIPTION: SQL for updating Blog rating using the average post rating. This is generated by using Select and ExecuteUpdateAsync.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [b]\nSET [b].[Rating] = CAST((\n    SELECT AVG(CAST([p].[Rating] AS float))\n    FROM [Post] AS [p]\n    WHERE [b].[Id] = [p].[BlogId]) AS int)\nFROM [Blogs] AS [b]\n```\n\n----------------------------------------\n\nTITLE: String.Concat Translation in EF Core 6 (C#)\nDESCRIPTION: This C# code shows how `String.Concat` with multiple arguments is translated to SQL in EF Core 6. It filters `Shards` entities where the concatenation of `Token1`, `Token2`, and `Token3` is not equal to `TokensProcessed`.  It assumes a database context `context` and an entity `Shards` with properties `Token1`, `Token2`, `Token3` and `TokensProcessed`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nvar shards = context.Shards\n    .Where(e => string.Concat(e.Token1, e.Token2, e.Token3) != e.TokensProcessed).ToList();\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF-8 columns in older EF Core versions\nDESCRIPTION: This code snippet shows how to configure a column for UTF-8 support in EF Core versions prior to 7.0.  It configures the property as a regular `nvarchar` column and uses `UseCollation` to specify a UTF-8 collation. The migration then needs to be manually adjusted to change the column type from `nvarchar` to `varchar`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/columns.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property(b => b.Name)\n        .UseCollation(\"LATIN1_GENERAL_100_CI_AS_SC_UTF8\");\n}\n```\n\n----------------------------------------\n\nTITLE: Base Class for Notification Entities - C#\nDESCRIPTION: This C# code demonstrates how to create a base class, NotifyingEntity, that implements INotifyPropertyChanging and INotifyPropertyChanged. The Blog entity inherits from this base class and uses the SetWithNotify method to set property values and trigger the notification events. This reduces code duplication and simplifies the implementation of notification entities. The CallerMemberName attribute automatically provides the name of the calling property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog : NotifyingEntity\n{\n    private int _id;\n    public int Id\n    {\n        get => _id;\n        set => SetWithNotify(value, out _id);\n    }\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set => SetWithNotify(value, out _name);\n    }\n\n    public IList<Post> Posts { get; } = new ObservableCollection<Post>();\n}\n\npublic abstract class NotifyingEntity : INotifyPropertyChanging, INotifyPropertyChanged\n{\n    protected void SetWithNotify<T>(T value, out T field, [CallerMemberName] string propertyName = \"\")\n    {\n        NotifyChanging(propertyName);\n        field = value;\n        NotifyChanged(propertyName);\n    }\n\n    public event PropertyChangingEventHandler PropertyChanging;\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private void NotifyChanged(string propertyName)\n        => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\n    private void NotifyChanging(string propertyName)\n        => PropertyChanging?.Invoke(this, new PropertyChangingEventArgs(propertyName));\n}\n```\n\n----------------------------------------\n\nTITLE: Derived DbContext Class C#\nDESCRIPTION: This C# code defines the BloggingContext class, which derives from DbContext. It exposes DbSet properties for Blog and Post entities and configures the base constructor to use the connection string specified in the configuration file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/existing-database.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class BloggingContext : DbContext\n    {\n        public BloggingContext()\n            : base(\"name=BloggingContext\")\n        {\n        }\n\n        public virtual DbSet<Blog> Blogs { get; set; }\n        public virtual DbSet<Post> Posts { get; set; }\n\n        protected override void OnModelCreating(DbModelBuilder modelBuilder)\n        {\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Successful SaveChanges in C#\nDESCRIPTION: This code snippet demonstrates handling successful SaveChanges operations using the `SavedChanges` and `SavedChangesAsync` methods. It takes a `SaveChangesCompletedEventData` object as input. It creates a new AuditContext, attaches the audit entity to the context, sets the Succeeded flag to true and the EndTime to the current UTC time, then saves the changes to the audit database. The original result is returned.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic int SavedChanges(SaveChangesCompletedEventData eventData, int result)\n{\n    using (var auditContext = new AuditContext(_connectionString))\n    {\n        auditContext.Attach(_audit);\n        _audit.Succeeded = true;\n        _audit.EndTime = DateTime.UtcNow;\n\n        auditContext.SaveChanges();\n    }\n\n    return result;\n}\n\npublic async ValueTask<int> SavedChangesAsync(\n    SaveChangesCompletedEventData eventData,\n    int result,\n    CancellationToken cancellationToken = new CancellationToken())\n{\n    using (var auditContext = new AuditContext(_connectionString))\n    {\n        auditContext.Attach(_audit);\n        _audit.Succeeded = true;\n        _audit.EndTime = DateTime.UtcNow;\n\n        await auditContext.SaveChangesAsync(cancellationToken);\n    }\n\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Property - EF Core (C#)\nDESCRIPTION: This snippet illustrates how to configure a shadow property using the Fluent API in EF Core. It demonstrates adding a shadow property named `LastUpdated` to the `Blog` entity, as the `Blog` class doesn't have a CLR property with that name. It uses `EntityTypeBuilder.Property` to define the shadow property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/shadow-properties.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property<DateTime>(\"LastUpdated\");\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Deletion of Orphans (C#)\nDESCRIPTION: This snippet demonstrates how to disable automatic deletion of orphans in EF Core by setting `DeleteOrphansTiming` to `CascadeTiming.Never`. This configuration will result in an exception if `SaveChanges` is called while an orphan is being tracked, forcing explicit handling of orphaned entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar dotNetBlog = context.Blogs.Include(e => e.Posts).Single(e => e.Name == \".NET Blog\");\n\ncontext.ChangeTracker.DeleteOrphansTiming = CascadeTiming.Never;\n\nvar post = dotNetBlog.Posts.Single(e => e.Title == \"Announcing F# 5\");\ndotNetBlog.Posts.Remove(post);\n\ncontext.SaveChanges(); // Throws\n```\n\n----------------------------------------\n\nTITLE: Deleting Blogs with SaveChanges - C#\nDESCRIPTION: This snippet demonstrates the traditional approach to deleting entities using SaveChanges. It queries for blogs with a rating below a certain threshold, removes them from the context, and then persists the changes to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nawait foreach (var blog in context.Blogs.Where(b => b.Rating < 3).AsAsyncEnumerable())\n{\n    context.Blogs.Remove(blog);\n}\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Post with Generated Keys - SQL\nDESCRIPTION: This SQL snippet shows the insert statement generated by EF Core when `SaveChanges` is called after attaching a graph of entities with a new `Post` (generated key).  The insert statement targets the Posts table, inserting the blogId, content, and title of the newly added post.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p0='1' (DbType = String), @p1='.NET 5.0 includes many enhancements, including single file applications, more...' (Size = 80), @p2='Announcing .NET 5.0' (Size = 19)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Posts\" (\"BlogId\", \"Content\", \"Title\")\nVALUES (@p0, @p1, @p2);\nSELECT \"Id\"\nFROM \"Posts\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n```\n\n----------------------------------------\n\nTITLE: Adding a Property to a Model Class in C#\nDESCRIPTION: This code snippet adds a Url property to the Blog class. This change will require a database schema update, which is handled using Code First Migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n    public string Url { get; set; }\n\n    public virtual List<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mocking with Moq C#\nDESCRIPTION: This code snippet demonstrates the basic usage of the Moq framework to create a mock implementation of an `IRepository<Employee>`. It shows how to instantiate a mock object, access its underlying object, and invoke methods on it.  Note that without explicit setup, methods on the mock object will have no effect or return default values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nMock<IRepository<Employee>> mock =\n        new Mock<IRepository<Employee>>();\n    IRepository<Employee> repository = mock.Object;\n    repository.Add(new Employee());\n    var employee = repository.FindById(1);\n```\n\n----------------------------------------\n\nTITLE: SQL generated by EF8 demonstrating parenthesis elimination\nDESCRIPTION: This is the improved SQL generated by EF8, showcasing the automatic elimination of unneeded parentheses for better readability. It uses the same LINQ query from the previous C# snippet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_142\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [c].[City], [c].[FirstName], [c].[LastName], [c].[Street]\nFROM [Customers] AS [c]\nWHERE ([c].[Id] * 3 + 2 > 0 AND [c].[FirstName] IS NOT NULL) OR [c].[LastName] IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: UserSession Entity Definition (C#)\nDESCRIPTION: This C# code defines a `UserSession` entity with properties for ID, partition key components (TenantId, UserId, SessionId), and other relevant data. The entity is used to showcase hierarchical partition key configuration in EF Core 9 for Cosmos DB.\nThe `TenantId`, `UserId`, and `SessionId` properties are used together to form a hierarchical partition key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UserSession\n{\n    // Item ID\n    public Guid Id { get; set; }\n\n    // Partition Key\n    public string TenantId { get; set; } = null!;\n    public Guid UserId { get; set; }\n    public int SessionId { get; set; }\n\n    // Other members\n    public string Username { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Inject DbContextFactory into Controller (C#)\nDESCRIPTION: This code shows how to inject the IDbContextFactory into a controller. The controller uses the factory to create multiple DbContext instances, ensuring each is properly disposed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\nprivate class MyController2\n{\n    private readonly IDbContextFactory<SomeDbContext> _contextFactory;\n\n    public MyController2(IDbContextFactory<SomeDbContext> contextFactory)\n    {\n        _contextFactory = contextFactory;\n    }\n\n    public void DoSomething()\n    {\n        using var context1 = _contextFactory.CreateDbContext();\n        using var context2 = _contextFactory.CreateDbContext();\n\n        var results1 = context1.Blogs.ToList();\n        var results2 = context2.Blogs.ToList();\n        \n        // Contexts obtained from the factory must be explicitly disposed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-parenting Hierarchy with GetReparentedValue in EF Core\nDESCRIPTION: This C# code snippet iterates through a list of descendants and updates their `PathFromPatriarch` property using the `GetReparentedValue` method. This effectively re-parents the descendants from one parent to another in the hierarchy.  It then saves the changes to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var descendent in longoAndDescendents)\n        {\n            descendent.PathFromPatriarch\n                = descendent.PathFromPatriarch.GetReparentedValue(\n                    mungo.PathFromPatriarch, ponto.PathFromPatriarch)!;\n        }\n\n        await context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Composite Key Configuration - Fluent API - C#\nDESCRIPTION: Configures a composite key using the Fluent API. The 'HasKey' method is used with a lambda expression to specify multiple properties ('State' and 'LicensePlate') as the composite primary key for the 'Car' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\ninternal class CarContext : DbContext\n{\n    public DbSet<Car> Cars { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Car>().HasKey(c => new { c.State, c.LicensePlate });\n    }\n}\n\ninternal class Car\n{\n    public string State { get; set; }\n    public string LicensePlate { get; set; }\n\n    public string Make { get; set; }\n    public string Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Temporal Table with EF Core\nDESCRIPTION: This snippet demonstrates how to configure an entity to be a temporal table using EF Core's model builder. The IsTemporal() method is used to enable temporal table features for the specified entity, utilizing the SQL Server defaults for timestamps and the history table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Employee>()\n    .ToTable(\"Employees\", b => b.IsTemporal());\n```\n\n----------------------------------------\n\nTITLE: SQL Update and Delete Commands\nDESCRIPTION: This SQL snippet shows the UPDATE and DELETE commands generated by EF Core when deleting a principal/parent entity (Blog) with an optional relationship to dependent/child entities (Posts). The UPDATE commands set the BlogId in Posts to null before deleting the Blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE \"Posts\" SET \"BlogId\" = @p0\nWHERE \"Id\" = @p1;\nSELECT changes();\n\nUPDATE \"Posts\" SET \"BlogId\" = @p0\nWHERE \"Id\" = @p1;\nSELECT changes();\n\nDELETE FROM \"Blogs\"\nWHERE \"Id\" = @p2;\nSELECT changes();\n```\n\n----------------------------------------\n\nTITLE: Triggering Validation and Handling Errors in Entity Framework (C#)\nDESCRIPTION: This code snippet demonstrates how to explicitly trigger validation using `DbContext.GetValidationErrors` and iterate through the validation results to display any errors. It retrieves `DbEntityValidationResult` objects, which contain `DbValidationError` objects for each validation failure. The code then iterates through these errors and writes the entity property and error message to the debug output.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var validationResult in db.GetValidationErrors())\n{\n    foreach (var error in validationResult.ValidationErrors)\n    {\n        Debug.WriteLine(\n            \"Entity Property: {0}, Error {1}\",\n            error.PropertyName,\n            error.ErrorMessage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Pubs that Stock a Specific Beer\nDESCRIPTION: This code snippet shows how to query `Pub` entities to find pubs that stock a specific beer, using the `Contains` method on the `Beers` array. The translated SQL uses `OpenJson` to extract values from the JSON column to match the provided beer name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nvar beer = \"Heineken\";\nvar pubsWithHeineken = await context.Pubs\n    .Where(e => e.Beers.Contains(beer))\n    .Select(e => e.Name)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: TPH, TPT, TPC Performance Comparison\nDESCRIPTION: Compares the performance of Table-per-Hierarchy (TPH), Table-per-Type (TPT), and Table-per-Concrete-Type (TPC) inheritance mapping strategies using a benchmark. The benchmark loads all rows from a database with a 7-type hierarchy and 5000 rows per type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/modeling-for-performance.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nMethod |     Mean |   Error |   StdDev |     Gen 0 |     Gen 1 | Allocated |\n------- |---------:|--------:|---------:|----------:|----------:|----------:|\n   TPH | 149.0 ms | 3.38 ms |  9.80 ms | 4000.0000 | 1000.0000 |     40 MB |\n   TPT | 312.9 ms | 6.17 ms | 10.81 ms | 9000.0000 | 3000.0000 |     75 MB |\n   TPC | 158.2 ms | 3.24 ms |  8.88 ms | 5000.0000 | 2000.0000 |     46 MB |\n```\n\n----------------------------------------\n\nTITLE: Querying Blogs with Related Posts and Assets in EF Core\nDESCRIPTION: This code retrieves blogs along with their related posts and assets using EF Core. It uses Include() to eagerly load the Posts and Assets navigation properties, demonstrating relationship fixup during query execution in C#.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blogs = context.Blogs\n    .Include(e => e.Posts)\n    .Include(e => e.Assets)\n    .ToList();\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: EF Core Model Configuration (C#)\nDESCRIPTION: This C# code shows the `OnModelCreating` method used to configure the entity model in Entity Framework Core. It specifies how properties are generated and defines the foreign key relationship between `BlogAssets` and `Blog` entities. It uses fluent API to configure properties and relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/debug-views.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<Blog>()\n        .Property(e => e.AssetsId)\n        .ValueGeneratedOnAdd();\n\n    modelBuilder\n        .Entity<BlogAssets>()\n        .HasOne(e => e.Blog)\n        .WithOne(e => e.Assets)\n        .HasForeignKey<BlogAssets>(e => e.Id)\n        .HasPrincipalKey<Blog>(e => e.AssetsId);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlogsModel in EF Core 7.0 (C#)\nDESCRIPTION: This C# code snippet defines the BlogsModel used in EF Core 7.0 examples, representing entities like blogs, posts, tags, and authors. It demonstrates the basic structure of the data model used throughout the documentation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[BlogsModel](../../../../samples/core/Miscellaneous/NewInEFCore7/BlogsContext.cs?name=BlogsModel)]\n```\n\n----------------------------------------\n\nTITLE: Defining a City Entity with Spatial Property\nDESCRIPTION: This code snippet shows how to define a City entity with a spatial property using the `Point` type from the `NetTopologySuite.Geometries` namespace.  The `Location` property represents the geographical location of the city.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/spatial.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing NetTopologySuite.Geometries;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Spatial.SqlServer.Models\n{\n    public class City\n    {\n        public int CityId { get; set; }\n\n        [MaxLength(100)]\n        public string CityName { get; set; }\n\n        public Point Location { get; set; }\n\n        public int? LatestRecordedPopulation { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AAD Authentication Interceptor in EF Core\nDESCRIPTION: This C# code defines an interceptor that manipulates the DbConnection before connecting to the database, specifically for obtaining an Azure Active Directory (AAD) access token.  It overrides the ConnectionOpeningAsync method to asynchronously retrieve an access token using AzureServiceTokenProvider and set it on the SqlConnection. The interceptor throws an exception for synchronous connection attempts, as AAD authentication requires asynchronous operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class AadAuthenticationInterceptor : DbConnectionInterceptor\n{\n    public override InterceptionResult ConnectionOpening(\n        DbConnection connection,\n        ConnectionEventData eventData,\n        InterceptionResult result)\n        => throw new InvalidOperationException(\"Open connections asynchronously when using AAD authentication.\");\n\n    public override async ValueTask<InterceptionResult> ConnectionOpeningAsync(\n        DbConnection connection,\n        ConnectionEventData eventData,\n        InterceptionResult result,\n        CancellationToken cancellationToken = default)\n    {\n        var sqlConnection = (SqlConnection)connection;\n\n        var provider = new AzureServiceTokenProvider();\n        // Note: in some situations the access token may not be cached automatically the Azure Token Provider.\n        // Depending on the kind of token requested, you may need to implement your own caching here.\n        sqlConnection.AccessToken = await provider.GetAccessTokenAsync(\"https://database.windows.net/\", null, cancellationToken);\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Customer Entity with Logger C#\nDESCRIPTION: Implements a `Customer` entity that implements the `IHasLogger` interface.  It also defines a `PhoneNumber` property with a setter that logs information about the phone number update using the injected `ILogger`. The Logger property is marked as `[NotMapped]` to prevent it from being persisted in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_95\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer : IHasLogger\n{\n    private string? _phoneNumber;\n\n    public int Id { get; set; }\n    public string Name { get; set; } = null!;\n\n    public string? PhoneNumber\n    {\n        get => _phoneNumber;\n        set\n        {\n            Logger?.LogInformation(1, $\"Updating phone number for '{Name}' from '{_phoneNumber}' to '{value}'.\");\n\n            _phoneNumber = value;\n        }\n    }\n\n    [NotMapped]\n    public ILogger? Logger { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Money Conversion Configuration C#\nDESCRIPTION: Configures all `Money` properties to use the `MoneyConverter` for value conversion and sets a maximum length of 64 for the corresponding database column.  This pre-convention configuration applies to all `Money` properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nconfigurationBuilder\n    .Properties<Money>()\n    .HaveConversion<MoneyConverter>()\n    .HaveMaxLength(64);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hierarchical Partition Keys with EF Core and Cosmos DB\nDESCRIPTION: This snippet configures a hierarchical partition key consisting of `TenantId`, `UserId`, and `SessionId` properties for the `Order` entity in Azure Cosmos DB using EF Core. This allows for efficient querying within sub-partitions. The `HasPartitionKey` method takes an anonymous object with the combined properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Order>().HasPartitionKey(o => new { e.TenantId, e.UserId, e.SessionId });\n```\n\n----------------------------------------\n\nTITLE: Owned Entity: StreetAddress C#\nDESCRIPTION: Defines a simple `StreetAddress` class with properties for street, city, and postcode. This class is intended to be used as an owned entity, meaning it doesn't have its own identity and is part of another entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Modeling.OwnedEntities\n{\n    [Owned]\n    public class StreetAddress\n    {\n        public string Street { get; set; }\n        public string City { get; set; }\n        public string Postcode { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Non-Entity Types with SQL - EF6 - C#\nDESCRIPTION: Queries the database to retrieve non-entity types (in this case, strings).  The SqlQuery method on the Database class is used, and the type is specified using generics (SqlQuery<string>). Results are not tracked by the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/raw-sql.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blogNames = context.Database.SqlQuery<string>(\n                       \"SELECT Name FROM dbo.Blogs\").ToList();\n}\n```\n\n----------------------------------------\n\nTITLE: EF Database Provider Registration XML (EF6+)\nDESCRIPTION: This XML snippet demonstrates how to register an Entity Framework database provider. The provider element specifies the invariantName (ADO.NET provider) and the type (EF provider implementation), allowing EF to use the specified provider for database interactions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<providers>\n  <provider invariantName=\"System.Data.SqlClient\" type=\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\" />\n</providers>\n```\n\n----------------------------------------\n\nTITLE: Implementing IDbAsyncQueryProvider for Testing in C#\nDESCRIPTION: This code snippet provides an implementation of `IDbAsyncQueryProvider`, `IDbAsyncEnumerable`, and `IDbAsyncEnumerator` for use in unit testing asynchronous Entity Framework queries. It allows you to simulate asynchronous query execution against an in-memory DbSet. The implementation wraps the standard synchronous query provider and enumerator, executing asynchronous operations synchronously.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/mocking.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Data.Entity.Infrastructure;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestingDemo\n{\n    internal class TestDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider\n    {\n        private readonly IQueryProvider _inner;\n\n        internal TestDbAsyncQueryProvider(IQueryProvider inner)\n        {\n            _inner = inner;\n        }\n\n        public IQueryable CreateQuery(Expression expression)\n        {\n            return new TestDbAsyncEnumerable<TEntity>(expression);\n        }\n\n        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)\n        {\n            return new TestDbAsyncEnumerable<TElement>(expression);\n        }\n\n        public object Execute(Expression expression)\n        {\n            return _inner.Execute(expression);\n        }\n\n        public TResult Execute<TResult>(Expression expression)\n        {\n            return _inner.Execute<TResult>(expression);\n        }\n\n        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)\n        {\n            return Task.FromResult(Execute(expression));\n        }\n\n        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)\n        {\n            return Task.FromResult(Execute<TResult>(expression));\n        }\n    }\n\n    internal class TestDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>\n    {\n        public TestDbAsyncEnumerable(IEnumerable<T> enumerable)\n            : base(enumerable)\n        { }\n\n        public TestDbAsyncEnumerable(Expression expression)\n            : base(expression)\n        { }\n\n        public IDbAsyncEnumerator<T> GetAsyncEnumerator()\n        {\n            return new TestDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());\n        }\n\n        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()\n        {\n            return GetAsyncEnumerator();\n        }\n\n        IQueryProvider IQueryable.Provider\n        {\n            get { return new TestDbAsyncQueryProvider<T>(this); }\n        }\n    }\n\n    internal class TestDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>\n    {\n        private readonly IEnumerator<T> _inner;\n\n        public TestDbAsyncEnumerator(IEnumerator<T> inner)\n        {\n            _inner = inner;\n        }\n\n        public void Dispose()\n        {\n            _inner.Dispose();\n        }\n\n        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)\n        {\n            return Task.FromResult(_inner.MoveNext());\n        }\n\n        public T Current\n        {\n            get { return _inner.Current; }\n        }\n\n        object IDbAsyncEnumerator.Current\n        {\n            get { return Current; }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable BlogId Property (C#)\nDESCRIPTION: This C# snippet shows how to make the `BlogId` property in the `Post` class nullable. This makes the relationship between `Post` and `Blog` optional, which removes the cascade delete constraint that causes a cycle in database creation. This is a workaround to avoid database creation errors when cascade delete cycles exist.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic int? BlogId { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Overriding Max Length using OnModelCreating in EF Core\nDESCRIPTION: This code snippet demonstrates how to override the default maximum string length configured by a convention, using the `OnModelCreating` method in EF Core. It configures the `Content` property of the `Post` entity to have a maximum length of 4000, overriding the convention that sets the default length to 512.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .Property(post => post.Content)\n    .HasMaxLength(4000);\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContext with Sensitive Data Logging in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a DbContext to enable sensitive data logging using the EnableSensitiveDataLogging() method. This will include application data in exceptions and logging.  It requires the Microsoft.EntityFrameworkCore package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ApplicationDbContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder\n            .EnableSensitiveDataLogging()\n            .UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Model to Insert and Retrieve Data C#\nDESCRIPTION: This C# code snippet demonstrates how to use the Entity Framework model to insert and retrieve data. It creates a new Person object, sets its properties (including those mapped to the PersonInfo table), adds it to the context, saves changes to the database, and then retrieves and prints the first name of each person from the database. This leverages the entity splitting configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/entity-splitting.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new EntitySplittingEntities())\n    {\n        var person = new Person\n        {\n            FirstName = \"John\",\n            LastName = \"Doe\",\n            Email = \"john@example.com\",\n            Phone = \"555-555-5555\"\n        };\n\n        context.People.Add(person);\n        context.SaveChanges();\n\n        foreach (var item in context.People)\n        {\n            Console.WriteLine(item.FirstName);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of OfType\nDESCRIPTION: This SQL query represents the translated form of the C# code that uses OfType.  It retrieves all columns from the Posts table, returning entities of type Post and any derived types, such as FeaturedPost.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_128\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Id], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText]\nFROM [Posts] AS [p]\n```\n\n----------------------------------------\n\nTITLE: No-Tracking Query with AsNoTracking - EF6 - C#\nDESCRIPTION: This C# code demonstrates how to use the `AsNoTracking()` extension method to execute queries against an Entity Framework 6 context without tracking the retrieved entities. This is useful for read-only scenarios where you want to improve performance by avoiding the overhead of change tracking. The code shows querying all blogs and querying blogs based on a condition using LINQ's `Where` clause.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/no-tracking.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Query for all blogs without tracking them\n    var blogs1 = context.Blogs.AsNoTracking();\n\n    // Query for some blogs without tracking them\n    var blogs2 = context.Blogs\n                        .Where(b => b.Name.Contains(\".NET\"))\n                        .AsNoTracking()\n                        .ToList();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many with Join Class (C#)\nDESCRIPTION: This snippet configures the many-to-many relationship in the OnModelCreating method using the UsingEntity method with the PostTag entity. This specifies the join entity type for the many-to-many relationship between Post and Tag.  No additional configuration is needed as the Id property of PostTag is automatically picked up as the primary key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>();\n}\n```\n\n----------------------------------------\n\nTITLE: Queries Demonstrating Unexpected Results with Required Navigation in C#\nDESCRIPTION: These queries highlight the issue of using required navigation with global query filters. The first query returns all posts, while the second query, which includes the related Blog entities, returns fewer posts because the global query filter on `Blog` filters out some blogs, and due to the required relationship, the associated posts are also excluded.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar allPosts = context.Posts.ToList();\nvar postsWithBlogs = context.Posts.Include(p => p.Blog).ToList();\n```\n\n----------------------------------------\n\nTITLE: Checking for pending migrations - dotnet CLI\nDESCRIPTION: This command line instruction checks for pending model changes since the last migration. It is useful in CI/CD pipelines for validating that migrations are up-to-date.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_117\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations has-pending-model-changes\n```\n\n----------------------------------------\n\nTITLE: Define Blog and BlogContext Classes - C#\nDESCRIPTION: This code defines a Blog class with BlogId and Name properties and a BlogContext class that inherits from DbContext and contains a DbSet of Blogs. This represents the data model used by Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Data.Entity.Infrastructure;\n\nnamespace MigrationsDemo\n{\n    public class BlogContext : DbContext\n    {\n        public DbSet<Blog> Blogs { get; set; }\n    }\n\n    public class Blog\n    {\n        public int BlogId { get; set; }\n        public string Name { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Filter and OrderBy (C#)\nDESCRIPTION: This code snippet demonstrates the use of GroupBy with an aggregate operator, followed by filtering using a Where clause and ordering using OrderBy. It uses the HAVING clause in SQL for filtering after grouping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts\n    .GroupBy(p => p.AuthorId)\n    .Where(g => g.Count() > 0)\n    .OrderBy(g => g.Key)\n    .Select(g => new { AuthorId = g.Key, Count = g.Count() });\n\n/*\n\nSELECT [p].[AuthorId] AS [Key], COUNT(*) AS [Count]\nFROM [Posts] AS [p]\nGROUP BY [p].[AuthorId]\nHAVING COUNT(*) > 0\nORDER BY [p].[AuthorId]\n*/\n```\n\n----------------------------------------\n\nTITLE: Set Column Comment using Data Annotations in EF Core (C#)\nDESCRIPTION: This code snippet shows how to set a comment on a database column using data annotations in EF Core. It relies on the `System.ComponentModel.DataAnnotations.Schema` namespace. The `Column` attribute's `Comment` property is used to add a text comment to the database column, allowing for schema documentation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[Column(Comment = \"The category of the product\")]\npublic string Category { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Enable Detailed Errors in EF Core\nDESCRIPTION: This code snippet shows how to enable detailed errors in EF Core. This introduces try-catch blocks around database value reads, providing more detailed error messages, especially when the database returns a NULL value when the model does not allow it.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .LogTo(Console.WriteLine)\n        .EnableDetailedErrors();\n```\n\n----------------------------------------\n\nTITLE: Enum Database Default with Unspecified C#\nDESCRIPTION: This snippet defines an enum `Level` with `Unspecified` as the first value, which is a common practice to handle default values. This prevents the CLR default from being a valid enum value and avoids unexpected behavior with database defaults.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_123\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum Level\n{\n    Unspecified,\n    Beginner,\n    Intermediate,\n    Advanced\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Document Versions from Audit in C#\nDESCRIPTION: This code snippet demonstrates how to restore a document to a specific version by deserializing the corresponding audit snapshot and inserting it back into the database. This process effectively reverts the document to its state at the time the audit was created. It involves deserializing the snapshot and adding the deserialized `Document` to the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task Restore(Guid auditId)\n{\n    var audit = await _context.DocumentAudits.SingleAsync(x => x.Id == auditId);\n    var document = JsonSerializer.Deserialize<Document>(audit.Snapshot);\n    document.Id = audit.DocumentId;\n    _context.Documents.Add(document);\n}\n```\n\n----------------------------------------\n\nTITLE: SQL for Efficient Salary Update\nDESCRIPTION: This SQL statement updates the salary of all employees in a single database operation. It's the SQL equivalent of the ExecuteUpdateAsync method in EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-updating.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE [Employees] SET [Salary] = [Salary] + 1000;\n```\n\n----------------------------------------\n\nTITLE: Setting Max Length Using Convention Builder (C#)\nDESCRIPTION: This snippet demonstrates how to set the max length of a property using a convention builder in EF Core. It showcases that the max length will only be set if it hasn't been configured by a mapping attribute or in OnModelCreating.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nproperty.Builder.HasMaxLength(512);\n```\n\n----------------------------------------\n\nTITLE: collection.Contains .NET to SQL translation\nDESCRIPTION: Illustrates how collection.Contains(item) in .NET is translated to @item IN @collection in SQL for Entity Framework Core. This determines if a collection contains the specified item.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_42\n\nLANGUAGE: .NET\nCODE:\n```\ncollection.Contains(item)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n@item IN @collection\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Repository Interface in C#\nDESCRIPTION: This C# code defines a generic repository interface `IRepository<T>`. It specifies common data access operations like `FindAll`, `FindBy`, `FindById`, `Add`, and `Remove`.  This interface abstracts the underlying data storage mechanism, allowing for different implementations (e.g., using Entity Framework or an in-memory collection).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IRepository<T> {       \n        IEnumerable<T> FindAll();\n        IEnumerable<T> FindBy(Expression<Func<T, bool>> predicate);\n        T FindById(int id);\n        void Add(T newEntity);\n        void Remove(T entity);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic User-Defined Function Mapping in EF Core (C#)\nDESCRIPTION: This C# code snippet shows how to configure a basic user-defined function mapping in EF Core.  It uses the `HasDbFunction` method to map the `CommentedPostCountForBlog` CLR method to the SQL function with the same name. It is done within the `OnModelCreating` method of the `DbContext` class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.HasDbFunction(typeof(BloggingContext).GetMethod(nameof(CommentedPostCountForBlog), new[] { typeof(int) }))\n    .HasName(\"CommentedPostCountForBlog\");\n```\n\n----------------------------------------\n\nTITLE: Enum to String Conversion by Converter Instance\nDESCRIPTION: This C# code demonstrates how to create an instance of `ValueConverter` explicitly and use it to configure a value conversion.  This is useful when the same conversion logic needs to be applied to multiple properties in the entity model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    var converter = new ValueConverter<EquineBeast, string>(\n        v => v.ToString(),\n        v => (EquineBeast)Enum.Parse(typeof(EquineBeast), v));\n\n    modelBuilder\n        .Entity<Rider>()\n        .Property(e => e.Mount)\n        .HasConversion(converter);\n}\n```\n\n----------------------------------------\n\nTITLE: Lookup Tracked Entities by Any Property (EF Core)\nDESCRIPTION: This code demonstrates how to lookup tracked entities based on any property value using `GetEntries`. This requires a scan of all tracked entities of that type, making it less efficient than key lookups.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nvar archivedPostEntries = context.Posts.Local.GetEntries(nameof(Post.Archived), true);\n```\n\n----------------------------------------\n\nTITLE: Implementing IModelCacheKeyFactory for Design-Time - C#\nDESCRIPTION: This code snippet implements the overload of the Create method of the `IModelCacheKeyFactory` interface, which also handles design-time model caching. This is necessary for tools like EF Core Migrations to work correctly with the custom model caching logic.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/dynamic-model.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Internal;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DynamicModel\n{\n    public class DynamicModelCacheKeyFactoryDesignTimeSupport : DynamicModelCacheKeyFactory\n    {\n        public DynamicModelCacheKeyFactoryDesignTimeSupport(\n            ModelCacheKeyFactoryDependencies dependencies\n            )\n            : base(dependencies)\n        {\n        }\n\n        public override object Create(DbContext context, bool designTime)\n            => designTime\n                ? new ModelCacheKey(context.GetType(), false)\n                : base.Create(context, designTime);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Interaction with ProductContext in Windows Forms C#\nDESCRIPTION: This C# code demonstrates how to use the ProductContext to interact with a database in a Windows Forms application. It includes initializing the context, loading data from the Categories DbSet, saving changes made through the UI, and properly disposing of the context when the form is closing. It utilizes Entity Framework features such as DbSet.Load(), DbSet.Local, and DbContext.SaveChanges(). Additionally, it demonstrates using LINQ to manage and remove products without a category assigned.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/winforms.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Data.Entity;\n\nnamespace WinFormswithEFSample\n{\n    public partial class Form1 : Form\n    {\n        ProductContext _context;\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        protected override void OnLoad(EventArgs e)\n        {\n            base.OnLoad(e);\n            _context = new ProductContext();\n\n            // Call the Load method to get the data for the given DbSet\n            // from the database.\n            // The data is materialized as entities. The entities are managed by\n            // the DbContext instance.\n            _context.Categories.Load();\n\n            // Bind the categoryBindingSource.DataSource to\n            // all the Unchanged, Modified and Added Category objects that\n            // are currently tracked by the DbContext.\n            // Note that we need to call ToBindingList() on the\n            // ObservableCollection<TEntity> returned by\n            // the DbSet.Local property to get the BindingList<T>\n            // in order to facilitate two-way binding in WinForms.\n            this.categoryBindingSource.DataSource =\n                _context.Categories.Local.ToBindingList();\n        }\n\n        private void categoryBindingNavigatorSaveItem_Click(object sender, EventArgs e)\n        {\n            this.Validate();\n\n            // Currently, the Entity Framework doesn’t mark the entities\n            // that are removed from a navigation property (in our example the Products)\n            // as deleted in the context.\n            // The following code uses LINQ to Objects against the Local collection\n            // to find all products and marks any that do not have\n            // a Category reference as deleted.\n            // The ToList call is required because otherwise\n            // the collection will be modified\n            // by the Remove call while it is being enumerated.\n            // In most other situations you can do LINQ to Objects directly\n            // against the Local property without using ToList first.\n            foreach (var product in _context.Products.Local.ToList())\n            {\n                if (product.Category == null)\n                {\n                    _context.Products.Remove(product);\n                }\n            }\n\n            // Save the changes to the database.\n            this._context.SaveChanges();\n\n            // Refresh the controls to show the values         \n            // that were generated by the database.\n            this.categoryDataGridView.Refresh();\n            this.productsDataGridView.Refresh();\n        }\n\n        protected override void OnClosing(CancelEventArgs e)\n        {\n            base.OnClosing(e);\n            this._context.Dispose();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Database Null Semantics C#\nDESCRIPTION: This C# code snippet demonstrates how to enable database null semantics in Entity Framework. Enabling database null semantics can improve query performance by generating simpler SQL for nullable comparisons, exposing the database engine's null handling. However, it might behave differently compared to C# null semantics.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Configuration.UseDatabaseNullSemantics = true;\n```\n\n----------------------------------------\n\nTITLE: Defining PostMetadataAggregate Class C#\nDESCRIPTION: This C# code defines the `PostMetadataAggregate` class, which is an aggregate type containing properties for `CommittedOn` and `Comment`. It represents metadata associated with a post in a blog context. `CommittedOn` is initialized only in the constructor and has only a getter, making it immutable after creation, while `Comment` has both getter and setter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n{\n    public PostMetadataAggregate(DateTime committedOn, string comment)\n    {\n        CommittedOn = committedOn;\n        Comment = comment;\n    }\n\n    public DateTime CommittedOn { get; private set; }\n    public string Comment { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Vector Property in Entity\nDESCRIPTION: This C# snippet demonstrates how to define a vector property in an EF Core entity using a float array. This enables the storage of vector embeddings directly within Cosmos DB documents for vector similarity search.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\npublic class Blog\n{\n    ...\n\n    public float[] Vector { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Products with Sequence SQL\nDESCRIPTION: SQL script to create the Products table, using a default constraint based on the `ProductSequence` to generate key values for the Id column.  This ensures that new products are automatically assigned unique IDs using the sequence.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_185\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Products] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [ProductSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [CategoryId] int NOT NULL,\n    CONSTRAINT [PK_Products] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Products_Categories_CategoryId] FOREIGN KEY ([CategoryId]) REFERENCES [Categories] ([Id]) ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Setting Table Name and Schema with Data Annotations - C#\nDESCRIPTION: This code demonstrates how to set both the table name and schema using the [Table] data annotation. This provides control over table placement within the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[Table(\"Blogs\", Schema = \"blogging\")]\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Entity Type Definition (C#)\nDESCRIPTION: This C# code defines the `Customer` entity with a composite value object `Name`, comprising `First`, `MiddleInitial`, and `Last` name parts. It is used to demonstrate the FreeText and Contains feature with JSON conversion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n\n    public Name Name { get; set; }\n}\n\npublic class Name\n{\n    public string First { get; set; }\n    public string MiddleInitial { get; set; }\n    public string Last { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Posts Collection to Blog Class\nDESCRIPTION: This C# code adds a `Posts` property, which is a list of `Post` objects, to the `Blog` class.\nThis establishes a relationship between the `Blog` and `Post` classes, and allows easy access to a blog's posts.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/automatic.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual List<Post> Posts { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance with Coordinate Projection using ProjNet\nDESCRIPTION: This code snippet demonstrates how to calculate the distance between two geometries using ProjNet for coordinate projection to address SRID differences in NetTopologySuite. It defines an extension method on the `Geometry` class to project geometries to a different coordinate system and then calculates the distance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/spatial.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing NetTopologySuite.Geometries;\nusing ProjNet.CoordinateSystems;\nusing ProjNet.CoordinateSystems.Transformations;\nusing NetTopologySuite.IO;\n\nnamespace Spatial.Projections\n{\n    public static class GeometryExtensions\n    {\n        private static readonly ICoordinateSystemServices coordinateSystemServices\n            = new CoordinateSystemServices()\n            {\n                new CoordinateSystemFactory(),\n                new CoordinateTransformationFactory()\n            };\n\n        private static readonly ICoordinateTransformationFactory coordinateTransformationFactory\n            = new CoordinateTransformationFactory();\n\n        private static readonly GeometryFactory geometryFactory\n            = new GeometryFactory(new PrecisionModel(), 4326);\n\n        public static Geometry ProjectTo(this Geometry geometry, int srid)\n        {\n            if (geometry.SRID == srid)\n            {\n                return geometry;\n            }\n\n            var transformation = coordinateTransformationFactory.CreateTransformation(\n                coordinateSystemServices.GetCoordinateSystem(geometry.SRID),\n                coordinateSystemServices.GetCoordinateSystem(srid));\n\n            var result = geometry.Copy();\n            result.Apply(new MathTransformFilter(transformation.MathTransform));\n            result.SRID = srid;\n            return result;\n        }\n\n        private class CoordinateSystemServices : CoordinateSystemServices\n        {\n            private readonly CoordinateSystemFactory coordinateSystemFactory = new CoordinateSystemFactory();\n\n            public override ICoordinateSystem GetCoordinateSystem(int srid)\n            {\n                return srid switch\n                {\n                    4326 => GeographicCoordinateSystem.WGS84,\n                    _ => base.GetCoordinateSystem(srid),\n                };\n            }\n        }\n    }\n\n    internal class MathTransformFilter : ICoordinateSequenceFilter\n    {\n        private readonly MathTransform transform;\n\n        public MathTransformFilter(MathTransform transform)\n        {\n            this.transform = transform;\n        }\n\n        public bool Done => false;\n\n        public bool GeometryChanged => true;\n\n        public void Filter(CoordinateSequence seq, int i)\n        {\n            var p = new double[2];\n            transform.Transform(new double[] { seq.GetX(i), seq.GetY(i) }, 0, p, 0, 1);\n            seq.SetX(i, p[0]);\n            seq.SetY(i, p[1]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: No-Tracking Query with Identity Resolution in EF Core\nDESCRIPTION: This code demonstrates using `AsNoTrackingWithIdentityResolution()` to perform a no-tracking query while still ensuring identity resolution.  This allows for scenarios where you need the benefits of no-tracking queries but also need to ensure that the same entity instance is returned when the same entity appears multiple times in the result set. It uses a standalone change tracker in the background.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blogs = context.Blogs\n    .AsNoTrackingWithIdentityResolution()\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Adding Project Reference to Migrations Project (XML)\nDESCRIPTION: Adds a project reference in the startup project's .csproj file to the migrations project. This enables the startup project to access the migrations defined in the separate project. If circular dependency issues arise, an alternative approach is provided.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/projects.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n  <ProjectReference Include=\"..\\WebApplication1.Migrations\\WebApplication1.Migrations.csproj\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Project Only Ranking with EF Core for Benchmarking\nDESCRIPTION: This benchmark method optimizes the query by projecting only the 'Ranking' property of the Blog entities. This reduces the amount of data transferred from the database, as only the necessary column is selected. The average is then calculated from the projected rankings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing BenchmarkDotNet.Attributes;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Benchmarks;\n\n[MemoryDiagnoser]\npublic class AverageBlogRanking\n{\n    private string _connectionString = null!;\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        _connectionString = Helpers.GetConnectionString();\n        using var context = new BloggingContext(_connectionString);\n        context.Database.EnsureDeleted();\n        context.Database.EnsureCreated();\n\n        context.Blogs.AddRange(\n            new Blog { Ranking = 1 },\n            new Blog { Ranking = 2 },\n            new Blog { Ranking = 3 });\n\n        context.SaveChanges();\n    }\n\n    [Benchmark(Baseline = true)]\n    public double LoadEntities()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.ToList().Average(b => b.Ranking);\n    }\n\n    [Benchmark]\n    public double LoadEntitiesNoTracking()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.AsNoTracking().ToList().Average(b => b.Ranking);\n    }\n\n    [Benchmark]\n    public double ProjectOnlyRanking()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.Select(b => b.Ranking).ToList().Average();\n    }\n\n    [Benchmark]\n    public double CalculateInDatabase()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.Average(b => b.Ranking);\n    }\n}\n\npublic class BloggingContext : DbContext\n{\n    private readonly string _connectionString;\n\n    public BloggingContext(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public DbSet<Blog> Blogs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlite(_connectionString);\n    }\n}\n\npublic class Blog\n{\n    public int Id { get; set; }\n    public int Ranking { get; set; }\n}\n\npublic static class Helpers\n{\n    public static string GetConnectionString()\n    {\n        var databaseName = $\"Test_{Guid.NewGuid()}\";\n        return $\"Data Source={databaseName}.db\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Concurrency Token Shadow Property C#\nDESCRIPTION: Shows how to add a shadow property as a concurrency token when using table splitting. This ensures that concurrency checks are performed even when only one of the entities mapped to the same table is updated. The shadow property is named `Version` and is configured as a concurrency token.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Order>(o =>\n{\n    o.Property<byte[]>(\"Version\").IsRowVersion();\n\n    o.ToTable(\"Orders\", t => t.IsTemporal());\n    o.HasKey(o => o.Id);\n\n    o.HasOne<DetailedOrder>().WithOne().HasForeignKey<DetailedOrder>(d => d.Id);\n    o.Property(o => o.Status).HasColumnName(\"Status\");\n});\n```\n\n----------------------------------------\n\nTITLE: Enum to String Conversion by CLR Type - EF Core\nDESCRIPTION: This code demonstrates configuring enum to string conversion by specifying the desired CLR type. EF Core will use a predefined conversion to store the enum values as strings in the database. The type argument to `HasConversion<T>` defines the target type in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<Rider>()\n        .Property(e => e.Mount)\n        .HasConversion<string>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency Token (Timestamp) - C#\nDESCRIPTION: Configures the 'Timestamp' property of the 'OfficeAssignment' entity as a concurrency token using the `IsConcurrencyToken()` method. This helps manage optimistic concurrency in database updates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<OfficeAssignment>()\n    .Property(t => t.Timestamp)\n    .IsConcurrencyToken();\n```\n\n----------------------------------------\n\nTITLE: Optional Dependent Entities (C#)\nDESCRIPTION: This code snippet demonstrates how dependent entities sharing the table with the principal are now optional in EF Core 3.x. If OrderDetails is owned by Order or explicitly mapped to the same table, it will be possible to add an Order without an OrderDetails.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/index.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    public int CustomerId { get; set; }\n    public OrderDetails Details { get; set; }\n}\n\n[Owned]\npublic class OrderDetails\n{\n    public int Id { get; set; }\n    public string ShippingAddress { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Historical Data with TemporalAll in EF Core\nDESCRIPTION: This code snippet demonstrates how to query all historical data for a specific employee using the `TemporalAll` operator in EF Core. It retrieves all versions of the employee's data from the history table and sorts them by the 'ValidFrom' column, which represents the start of the period for which the data was valid.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar history = context\n    .Employees\n    .TemporalAll()\n    .Where(e => e.Name == \"Rainbow Dash\")\n    .OrderBy(e => EF.Property<DateTime>(e, \"ValidFrom\"))\n    .Select(\n        e => new\n        {\n            Employee = e,\n            ValidFrom = EF.Property<DateTime>(e, \"ValidFrom\"),\n            ValidTo = EF.Property<DateTime>(e, \"ValidTo\")\n        })\n    .ToList();\n\nforeach (var pointInTime in history)\n{\n    Console.WriteLine(\n        $\"  Employee {pointInTime.Employee.Name} was '{pointInTime.Employee.Position}' from {pointInTime.ValidFrom} to {pointInTime.ValidTo}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Entity from Required Relationship\nDESCRIPTION: This C# code snippet removes a `Post` entity from a `Blog`'s `Posts` collection when the relationship between `Blog` and `Post` is required. This results in the `Post` being marked as `Deleted` for orphan deletion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar post = dotNetBlog.Posts.Single(e => e.Title == \"Announcing F# 5\");\ndotNetBlog.Posts.Remove(post);\n```\n\n----------------------------------------\n\nTITLE: Adding Halfling data to the database\nDESCRIPTION: This C# code adds a range of `Halfling` entities to the database context.  The `HierarchyId.Parse()` method is used to create `HierarchyId` instances from string representations of the hierarchy paths.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait AddRangeAsync(\n                new Halfling(HierarchyId.Parse(\"/\"), \"Balbo\", 1167),\n                new Halfling(HierarchyId.Parse(\"/1/\"), \"Mungo\", 1207),\n                new Halfling(HierarchyId.Parse(\"/2/\"), \"Pansy\", 1212),\n                new Halfling(HierarchyId.Parse(\"/3/\"), \"Ponto\", 1216),\n                new Halfling(HierarchyId.Parse(\"/4/\"), \"Largo\", 1220),\n                new Halfling(HierarchyId.Parse(\"/5/\"), \"Lily\", 1222),\n                new Halfling(HierarchyId.Parse(\"/1/1/\"), \"Bungo\", 1246),\n                new Halfling(HierarchyId.Parse(\"/1/2/\"), \"Belba\", 1256),\n                new Halfling(HierarchyId.Parse(\"/1/3/\"), \"Longo\", 1260),\n                new Halfling(HierarchyId.Parse(\"/1/4/\"), \"Linda\", 1262),\n                new Halfling(HierarchyId.Parse(\"/1/5/\"), \"Bingo\", 1264),\n                new Halfling(HierarchyId.Parse(\"/3/1/\"), \"Rosa\", 1256),\n                new Halfling(HierarchyId.Parse(\"/3/2/\"), \"Polo\"),\n                new Halfling(HierarchyId.Parse(\"/4/1/\"), \"Fosco\", 1264),\n                new Halfling(HierarchyId.Parse(\"/1/1/1/\"), \"Bilbo\", 1290),\n                new Halfling(HierarchyId.Parse(\"/1/3/1/\"), \"Otho\", 1310),\n                new Halfling(HierarchyId.Parse(\"/1/5/1/\"), \"Falco\", 1303),\n                new Halfling(HierarchyId.Parse(\"/3/2/1/\"), \"Posco\", 1302),\n                new Halfling(HierarchyId.Parse(\"/3/2/2/\"), \"Prisca\", 1306),\n                new Halfling(HierarchyId.Parse(\"/4/1/1/\"), \"Dora\", 1302),\n                new Halfling(HierarchyId.Parse(\"/4/1/2/\"), \"Drogo\", 1308),\n                new Halfling(HierarchyId.Parse(\"/4/1/3/\"), \"Dudo\", 1311),\n                new Halfling(HierarchyId.Parse(\"/1/3/1/1/\"), \"Lotho\", 1310),\n                new Halfling(HierarchyId.Parse(\"/1/5/1/1/\"), \"Poppy\", 1344),\n                new Halfling(HierarchyId.Parse(\"/3/2/1/1/\"), \"Ponto\", 1346),\n                new Halfling(HierarchyId.Parse(\"/3/2/1/2/\"), \"Porto\", 1348),\n                new Halfling(HierarchyId.Parse(\"/3/2/1/3/\"), \"Peony\", 1350),\n                new Halfling(HierarchyId.Parse(\"/4/1/2/1/\"), \"Frodo\", 1368),\n                new Halfling(HierarchyId.Parse(\"/4/1/3/1/\"), \"Daisy\", 1350),\n                new Halfling(HierarchyId.Parse(\"/3/2/1/1/1/\"), \"Angelica\", 1381));\n\n            await SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Data Binding with WPF and Windows Forms using DbSet.Local in EF Core\nDESCRIPTION: This snippet demonstrates how to use `DbSet.Local` with WPF's `ObservableCollection` and Windows Forms' `BindingList` for data binding. The `ToObservableCollection` and `ToBindingList` extension methods are used to create these collection types, which are then used for data binding.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nObservableCollection<Post> observableCollection = context.Posts.Local.ToObservableCollection();\n        BindingList<Post> bindingList = context.Posts.Local.ToBindingList();\n```\n\n----------------------------------------\n\nTITLE: stringValue.ToLower .NET to SQL translation\nDESCRIPTION: Illustrates how stringValue.ToLower() in .NET maps to LOWER(@stringValue) in SQL when working with Entity Framework Core and Cosmos DB. It converts a string to lowercase.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_37\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.ToLower()\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[LOWER(@stringValue)](/azure/cosmos-db/nosql/query/lower)\n```\n\n----------------------------------------\n\nTITLE: Entity SQL over EntityCommand in C#\nDESCRIPTION: This code snippet illustrates how to execute an Entity SQL query using an `EntityCommand`.  It creates an `EntityCommand` object and sets its `CommandText` property to an Entity SQL query that selects products from the `NorthwindEntities.Products` entity set where the category name is 'Beverages'.  The results are read from an `EntityDataReader` and need to be manually materialized.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nEntityCommand cmd = eConn.CreateCommand();\ncmd.CommandText = \"Select p From NorthwindEntities.Products As p Where p.Category.CategoryName = 'Beverages'\";\n\nusing (EntityDataReader reader = cmd.ExecuteReader(CommandBehavior.SequentialAccess))\n{\n    while (reader.Read())\n    {\n        // manually 'materialize' the product\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Model-Based Convention to DbContext - C#\nDESCRIPTION: This code snippet demonstrates how to add a custom model-based convention to the DbContext during the OnModelCreating method.  The convention is added to the Conventions collection of the DbModelBuilder. This allows the convention to be applied when the model is being built.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/model.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Data.Entity.Core.Metadata.Edm;\nusing System.Data.Entity.Infrastructure;\nusing System.Data.Entity.ModelConfiguration.Conventions;\n\npublic class BlogContext : DbContext  \n{  \n    public DbSet<Post> Posts { get; set; }  \n    public DbSet<Comment> Comments { get; set; }  \n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)  \n    {  \n        modelBuilder.Conventions.Add<MyModelBasedConvention>();  \n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Descending Index Attribute in EF Core 7\nDESCRIPTION: This snippet demonstrates how to create a descending index on a column in EF Core 7 using the Index attribute.  The AllDescending property is set to true.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\n[Index(nameof(Title), AllDescending = true)]\npublic class Post\n{\n    public int Id { get; set; }\n\n    [MaxLength(64)]\n    public string? Title { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Cosmos DB Parent Entity C#\nDESCRIPTION: Defines the Parent entity with properties for FamilyName and FirstName.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\npublic class Parent\n{\n    public string FamilyName { get; set; }\n    public string FirstName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Complex Type in C#\nDESCRIPTION: This code defines a simple `Address` class to be used as a complex type. It contains properties for street address (Line1, Line2), City, Country and PostCode. The `required` keyword ensures that certain properties must have a value assigned.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Address\n{\n    public required string Line1 { get; set; }\n    public string? Line2 { get; set; }\n    public required string City { get; set; }\n    public required string Country { get; set; }\n    public required string PostCode { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Required-to-Optional Relationship C#\nDESCRIPTION: This example configures a one-to-zero-or-one relationship between OfficeAssignment and Instructor.  The OfficeAssignment has the InstructorID property that is a primary key and a foreign key. Since the property name doesn't follow convention, HasKey is used to configure the primary key.  The HasRequired and WithOptional methods define the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Configure the primary key for the OfficeAssignment\nmodelBuilder.Entity<OfficeAssignment>()\n    .HasKey(t => t.InstructorID);\n\n// Map one-to-zero or one relationship\nmodelBuilder.Entity<OfficeAssignment>()\n    .HasRequired(t => t.Instructor)\n    .WithOptional(t => t.OfficeAssignment);\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statements for Explicit Key Values\nDESCRIPTION: These SQL statements demonstrate the generated SQL for inserting a blog and its associated posts into a SQLite database when using explicit key values in Entity Framework Core. The `INSERT INTO` statements explicitly specify the `Id` column, reflecting the explicitly set key values in the C# code. Parameters are used to prevent SQL injection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p0='1' (DbType = String), @p1='.NET Blog' (Size = 9)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Blogs\" (\"Id\", \"Name\")\nVALUES (@p0, @p1);\n\n-- Executed DbCommand (0ms) [Parameters=[@p2='1' (DbType = String), @p3='1' (DbType = String), @p4='Announcing the release of EF Core 5.0, a full featured cross-platform...' (Size = 72), @p5='Announcing the Release of EF Core 5.0' (Size = 37)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Posts\" (\"Id\", \"BlogId\", \"Content\", \"Title\")\nVALUES (@p2, @p3, @p4, @p5);\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='2' (DbType = String), @p1='1' (DbType = String), @p2='F# 5 is the latest version of F#, the functional programming language...' (Size = 72), @p3='Announcing F# 5' (Size = 15)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Posts\" (\"Id\", \"BlogId\", \"Content\", \"Title\")\nVALUES (@p0, @p1, @p2, @p3);\n```\n\n----------------------------------------\n\nTITLE: Defining an EntityContainer in CSDL (XML)\nDESCRIPTION: This XML snippet defines an EntityContainer named 'BooksContainer'. It includes definitions for three EntitySets ('Books', 'Publishers', and 'Authors') and two AssociationSets ('PublishedBy' and 'WrittenBy'). The EntitySets specify the entity types they contain, and the AssociationSets define relationships between entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n <EntityContainer Name=\"BooksContainer\" >\n   <EntitySet Name=\"Books\" EntityType=\"BooksModel.Book\" />\n   <EntitySet Name=\"Publishers\" EntityType=\"BooksModel.Publisher\" />\n   <EntitySet Name=\"Authors\" EntityType=\"BooksModel.Author\" />\n   <AssociationSet Name=\"PublishedBy\" Association=\"BooksModel.PublishedBy\">\n     <End Role=\"Book\" EntitySet=\"Books\" />\n     <End Role=\"Publisher\" EntitySet=\"Publishers\" />\n   </AssociationSet>\n   <AssociationSet Name=\"WrittenBy\" Association=\"BooksModel.WrittenBy\">\n     <End Role=\"Book\" EntitySet=\"Books\" />\n     <End Role=\"Author\" EntitySet=\"Authors\" />\n   </AssociationSet>\n </EntityContainer>\n```\n\n----------------------------------------\n\nTITLE: Define Column Order using Data Annotations in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates defining the column order using data annotations in EF Core. The `Column` attribute's `Order` property sets the order in which the column will appear in the database table. Note that most databases only support column ordering during table creation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[Column(Order = 3)]\npublic string Title { get; set; }\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of JSON Array Index Projection (Nullable)\nDESCRIPTION: This SQL snippet displays the translated SQL query from projecting properties from a JSON array. It uses `JSON_VALUE` to extract the `UpdatedOn` values from the Updates array in the Metadata column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_57\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Title],\n       CAST(JSON_VALUE([p].[Metadata],'$.Updates[0].UpdatedOn') AS date) AS [LatestUpdate],\n       CAST(JSON_VALUE([p].[Metadata],'$.Updates[1].UpdatedOn') AS date) AS [SecondLatestUpdate]\nFROM [Posts] AS [p]\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Table with Owned Entity\nDESCRIPTION: This C# code configures a temporal table for the Employee entity and its owned EmployeeInfo entity.  It specifies that the table should be treated as temporal and defines the column names for the period start and end dates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_171\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n                .Entity<Employee>()\n                .ToTable(\n                    \"Employees\",\n                    tableBuilder =>\n                    {\n                        tableBuilder.IsTemporal();\n                        tableBuilder.Property<DateTime>(\"PeriodStart\").HasColumnName(\"PeriodStart\");\n                        tableBuilder.Property<DateTime>(\"PeriodEnd\").HasColumnName(\"PeriodEnd\");\n                    })\n                .OwnsOne(\n                    employee => employee.Info,\n                    ownedBuilder => ownedBuilder.ToTable(\n                        \"Employees\",\n                        tableBuilder =>\n                        {\n                            tableBuilder.IsTemporal();\n                            tableBuilder.Property<DateTime>(\"PeriodStart\").HasColumnName(\"PeriodStart\");\n                            tableBuilder.Property<DateTime>(\"PeriodEnd\").HasColumnName(\"PeriodEnd\");\n                        }));\n```\n\n----------------------------------------\n\nTITLE: Creating a Database using EnsureCreatedAsync in C#\nDESCRIPTION: This code snippet shows how to use the EnsureCreatedAsync method to create a database and initialize its schema if it doesn't already exist.  It uses an instance of DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/ensure-created.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Create the database if it doesn't exist\ndbContext.Database.EnsureCreatedAsync();\n```\n\n----------------------------------------\n\nTITLE: Value Converter for Nullable Enum (EF Core 6)\nDESCRIPTION: This example defines a value converter `BreedConverter` that converts between the `Breed` enum and a string representation, handling null values by mapping them to `Breed.Unknown`. This feature is marked internal and requires disabling a compiler warning. Depends on the `Breed` enum.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_142\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BreedConverter : ValueConverter<Breed, string>\n{\n#pragma warning disable EF1001\n    public BreedConverter()\n        : base(\n            v => v == Breed.Unknown ? null : v.ToString(),\n            v => v == null ? Breed.Unknown : Enum.Parse<Breed>(v),\n            convertsNulls: true)\n    {\n    }\n#pragma warning restore EF1001\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stored Procedure for Concurrency\nDESCRIPTION: This C# code configures the `UpdateUsingStoredProcedure` method for handling optimistic concurrency with EF Core. It sets up parameters for the original `Id` and `RowVersion` values, the new `Title` value, and configures the `RowVersion` as an output parameter.  The `HasRowsAffectedResultColumn` method is used to handle the return value indicating the number of affected rows to ensure concurrency checks are correctly enforced.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\n.UpdateUsingStoredProcedure(\n    storedProcedureBuilder =>\n    {\n        storedProcedureBuilder.HasOriginalValueParameter(document => document.Id);\n        storedProcedureBuilder.HasOriginalValueParameter(document => document.RowVersion);\n        storedProcedureBuilder.HasParameter(document => document.Title);\n        storedProcedureBuilder.HasParameter(document => document.RowVersion, parameterBuilder => parameterBuilder.IsOutput());\n        storedProcedureBuilder.HasRowsAffectedResultColumn();\n    });\n```\n\n----------------------------------------\n\nTITLE: Explicit Boolean to Int Conversion\nDESCRIPTION: This snippet explicitly creates and uses a `BoolToZeroOneConverter<int>` to convert a boolean property (IsActive) to an integer in the database. This demonstrates the underlying converter object that `.HasConversion<int>()` uses implicitly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar converter = new BoolToZeroOneConverter<int>();\n\nmodelBuilder\n    .Entity<User>()\n    .Property(e => e.IsActive)\n    .HasConversion(converter);\n```\n\n----------------------------------------\n\nTITLE: Terse Logging (C#)\nDESCRIPTION: This C# snippet demonstrates how to trim down the metadata included in EF Core logs for a more concise output.  It combines `DbContextLoggerOptions.UtcTime` and `DbContextLoggerOptions.SingleLine` options. It logs to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(\n        Console.WriteLine,\n        LogLevel.Debug,\n        DbContextLoggerOptions.UtcTime | DbContextLoggerOptions.SingleLine);\n```\n\n----------------------------------------\n\nTITLE: Model with Generated Keys - C#\nDESCRIPTION: Defines the Blog and Post entities using automatically generated key values, which is the default behavior for integer keys in EF Core.  No explicit configuration is needed for the key properties in this scenario. The unset key value indicates that the entity is \"new\".\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int? BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Class Definitions in C#\nDESCRIPTION: This code presents example entity class definitions (`LaundryBasket` and `Garment`) that utilize the `PersistAttribute` to specify which properties should be included in the EF Core model. Private fields are used as primary keys and marked with the attribute.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\npublic class LaundryBasket\n{\n    [Persist] [Key]\n    private readonly int _id;\n\n    [Persist]\n    public int TenantId { get; init; }\n\n    public bool IsClean { get; set; }\n\n    public List<Garment> Garments { get; } = new();\n}\n\npublic class Garment\n{\n    public Garment(string name, string color)\n    {\n        Name = name;\n        Color = color;\n    }\n\n    [Persist]\n    [Key]\n    private readonly int _id;\n\n    [Persist]\n    public int TenantId { get; init; }\n\n    [Persist]\n    public string Name { get; }\n\n    [Persist]\n    public string Color { get; }\n\n    public bool IsClean { get; set; }\n\n    public LaundryBasket? Basket { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Detailed Errors\nDESCRIPTION: This code snippet shows how to enable detailed errors in EF Core. Calling EnableDetailedErrors on the DbContextOptionsBuilder causes EF Core to introduce try-catch blocks around database value reads, providing more detailed error messages when exceptions occur.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/extensions-logging.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.EnableDetailedErrors();\n```\n\n----------------------------------------\n\nTITLE: Configure Cosmos DB with Options\nDESCRIPTION: This C# code configures the DbContext to use Azure Cosmos DB using a connection string and additional options.  It sets the application region and custom endpoint.  It also shows how to set the connection mode and configure the request timeout.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/index.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UseCosmos(\n    \"AccountEndpoint=https://localhost:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJ2c&oR+Y/Rzw==\",\n    databaseName: \"Orders\",\n    cosmosOptions =>\n    {\n        cosmosOptions.ApplicationRegion = Regions.WestUS2;\n        cosmosOptions.CustomEndpoint = new Uri(\"https://custom-endpoint.documents.azure.com:443/\");\n        cosmosOptions.ConnectionMode = ConnectionMode.Direct;\n        cosmosOptions.RequestTimeout = TimeSpan.FromMinutes(1);\n    });\n```\n\n----------------------------------------\n\nTITLE: Read-Only Properties with Explicit Mapping\nDESCRIPTION: This snippet demonstrates how to create truly read-only properties by removing setters and mapping fields in `OnModelCreating`.  The primary key is implemented as a field, not a property, to allow store-generated keys.  This example shows complete control over which properties are mapped.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/constructors.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    private int _id;\n\n    public Blog(string name, string author)\n    {\n        Name = name;\n        Author = author;\n    }\n\n    public string Name { get; }\n    public string Author { get; }\n\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    private int _id;\n\n    public Post(string title, DateTime postedOn)\n    {\n        Title = title;\n        PostedOn = postedOn;\n    }\n\n    public string Title { get; }\n    public string Content { get; set; }\n    public DateTime PostedOn { get; }\n\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: ModelBuilder Column Ordering Configuration (C#)\nDESCRIPTION: This C# code configures column ordering using the `ModelBuilder` API within the `OnModelCreating` method of a `DbContext`. This allows for more flexible and centralized column ordering configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_157\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<UsingModelBuilder.Employee>(\n    entityBuilder =>\n    {\n        entityBuilder.Property(e => e.Id).HasColumnOrder(1);\n        entityBuilder.Property(e => e.FirstName).HasColumnOrder(2);\n        entityBuilder.Property(e => e.LastName).HasColumnOrder(3);\n\n        entityBuilder.OwnsOne(\n            e => e.Address,\n            ownedBuilder =>\n            {\n                ownedBuilder.Property(e => e.House).HasColumnName(\"House\").HasColumnOrder(4);\n                ownedBuilder.Property(e => e.Street).HasColumnName(\"Street\").HasColumnOrder(5);\n                ownedBuilder.Property(e => e.City).HasColumnName(\"City\").HasColumnOrder(6);\n                ownedBuilder.Property(e => e.Postcode).HasColumnName(\"Postcode\").HasColumnOrder(7).IsRequired();\n            });\n\n        entityBuilder.Property(e => e.Department).HasColumnOrder(8);\n        entityBuilder.Property(e => e.AnnualSalary).HasColumnOrder(9);\n        entityBuilder.Property(e => e.UpdatedOn).HasColumnOrder(10);\n        entityBuilder.Property(e => e.CreatedOn).HasColumnOrder(11);\n    });\n```\n\n----------------------------------------\n\nTITLE: ReferenceType as Parameter in Function (CSDL, XML)\nDESCRIPTION: This code snippet demonstrates the use of the ReferenceType element as a child of a Parameter element within a Function element. It specifies that the function accepts a reference to a Person entity type from the SchoolModel.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"GetYearsEmployed\" ReturnType=\"Edm.Int32\">\n   <Parameter Name=\"instructor\">\n     <ReferenceType Type=\"SchoolModel.Person\" />\n   </Parameter>\n   <DefiningExpression>\n   Year(CurrentDateTime()) - Year(cast(instructor.HireDate as DateTime))\n   </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Using ConcurrencyCheck Attribute with C#\nDESCRIPTION: This code shows how to use the `ConcurrencyCheck` attribute to enable optimistic concurrency checking on a property. When `SaveChanges` is called, the original value of `BloggerName` is used in the UPDATE statement's WHERE clause to ensure the data hasn't been modified since it was retrieved.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n    [ConcurrencyCheck, MaxLength(10, ErrorMessage=\"BloggerName must be 10 characters or less\"),MinLength(5)]\n    public string BloggerName { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Model Definition Without Column Ordering (C#)\nDESCRIPTION: This C# code defines a data model (EntityBase, PersonBase, Employee, Address) without explicit column ordering. EF Core will use default ordering when creating the database table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_153\n\nLANGUAGE: C#\nCODE:\n```\npublic class EntityBase\n{\n    public int Id { get; set; }\n    public DateTime UpdatedOn { get; set; }\n    public DateTime CreatedOn { get; set; }\n}\n\npublic class PersonBase : EntityBase\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n\npublic class Employee : PersonBase\n{\n    public string Department { get; set; }\n    public decimal AnnualSalary { get; set; }\n    public Address Address { get; set; }\n}\n\n[Owned]\npublic class Address\n{\n    public string House { get; set; }\n    public string Street { get; set; }\n    public string City { get; set; }\n\n    [Required]\n    public string Postcode { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard API Cosmos DbContext Registration (C#)\nDESCRIPTION: This C# code shows the standard method for registering a `DbContext` for Cosmos DB. It uses the `UseCosmos` extension method within the `AddDbContext` configuration options.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_163\n\nLANGUAGE: C#\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddDbContext<MyDbContext>(\n    options => options.UseCosmos(\n        \"https://localhost:8081\",\n        \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\"));\n```\n\n----------------------------------------\n\nTITLE: Optimize DbContext using dotnet ef\nDESCRIPTION: This snippet shows how to use the `dotnet ef dbcontext optimize` command to generate a compiled model for an EF Core DbContext. The `--output-dir` and `--namespace` options specify the directory and namespace for the generated model files. This command requires the dotnet ef tool to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_14\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext optimize\n```\n\n----------------------------------------\n\nTITLE: Adding Migrations via Visual Studio Powershell\nDESCRIPTION: Illustrates adding migrations using the Visual Studio Package Manager Console, specifying the context and output directory for each provider. This creates distinct migration sets for SQL Server and SQLite within the specified directories.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/providers.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Migration InitialCreate -Context BlogContext -OutputDir Migrations\\SqlServerMigrations\nAdd-Migration InitialCreate -Context SqliteBlogContext -OutputDir Migrations\\SqliteMigrations\n```\n\n----------------------------------------\n\nTITLE: Shared Columns Configuration - C#\nDESCRIPTION: This snippet configures two sibling entity types in the hierarchy to share the same database column for properties with identical types. In this case, both `Blog` and `RssBlog` will use the same column for `Url`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property(b => b.Url)\n        .HasColumnName(\"Url\");\n\n    modelBuilder.Entity<RssBlog>()\n        .Property(r => r.Url)\n        .HasColumnName(\"Url\");\n}\n```\n\n----------------------------------------\n\nTITLE: DesignTime Detection C#\nDESCRIPTION: Detects whether the application is running in design-time mode using the `EF.IsDesignTime` flag.  This allows certain code, such as automatic migration application, to be skipped during design-time operations performed by EF Core tools.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_180\n\nLANGUAGE: C#\nCODE:\n```\nif (!EF.IsDesignTime)\n{\n    await context.Database.MigrateAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Composite Alternate Key Configuration - Fluent API - C#\nDESCRIPTION: Configures a composite alternate key using the Fluent API.  The 'HasAlternateKey' method is used to specify multiple properties ('State' and 'LicensePlate') as the composite alternate key for the 'Car' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\ninternal class CarContext : DbContext\n{\n    public DbSet<Car> Cars { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Car>().HasAlternateKey(c => new { c.State, c.LicensePlate });\n    }\n}\n\ninternal class Car\n{\n    public string State { get; set; }\n    public string LicensePlate { get; set; }\n\n    public string Make { get; set; }\n    public string Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Foo1 Entities with Different Count Values\nDESCRIPTION: Inserts three Foo1 entities: one with Count set to 10, one with Count set to 0, and one with Count not set. This demonstrates the issue where setting Count to 0 (the CLR default) results in the database default being used instead.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar fooA = new Foo1 { Count = 10 };\nvar fooB = new Foo1 { Count = 0 };\nvar fooC = new Foo1 { };\n\ncontext.AddRange(fooA, fooB, fooC);\ncontext.SaveChanges();\n\nDebug.Assert(fooA.Count == 10);\nDebug.Assert(fooB.Count == -1); // Not what we want!\nDebug.Assert(fooC.Count == -1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SQL Service Tier - C#\nDESCRIPTION: This code snippet demonstrates how to specify the service tier (EDITION) of an Azure SQL Database using the `HasServiceTier` extension method in Entity Framework Core. This is configured within the `OnModelCreating` method of the DbContext. The service tier affects the features and resources available to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/azure-sql-database.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasServiceTier(\"Basic\");\n```\n\n----------------------------------------\n\nTITLE: Suppress Logging an Event\nDESCRIPTION: This code snippet demonstrates how to suppress logging for a specific event in EF Core using the ConfigureWarnings API. It ignores the DetachedLazyLoadingWarning, preventing it from being logged.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/extensions-logging.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .ConfigureWarnings(b => b.Ignore(CoreEventId.DetachedLazyLoadingWarning));\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF-8 string column\nDESCRIPTION: This C# code configures a variable length SQL Server UTF-8 string for the `CommentText` column. It uses `HasColumnType` and `UseCollation` to achieve this.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_168\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n                .Entity<Comment>()\n                .Property(comment => comment.CommentText)\n                .HasColumnType(\"varchar(max)\")\n                .UseCollation(\"LATIN1_GENERAL_100_CI_AS_SC_UTF8\");\n```\n\n----------------------------------------\n\nTITLE: Replacing Convention in EF Core Configuration\nDESCRIPTION: This code shows how to replace an existing convention (PropertyDiscoveryConvention) with a custom convention (AttributeBasedPropertyDiscoveryConvention) within the `ConfigureConventions` method during EF Core model configuration. It utilizes the `Replace` method on the `ConventionSetBuilder` and retrieves dependencies from the service provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Replace<PropertyDiscoveryConvention>(\n        serviceProvider => new AttributeBasedPropertyDiscoveryConvention(\n            serviceProvider.GetRequiredService<ProviderConventionSetBuilderDependencies>()));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Unidirectional Relationship C#\nDESCRIPTION: This code configures a one-directional relationship between Instructor and OfficeAssignment. The navigation property is defined only on the Instructor type. The WithRequiredPrincipal method (without arguments) is used to configure the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Configure the primary Key for the OfficeAssignment\nmodelBuilder.Entity<OfficeAssignment>()\n    .HasKey(t => t.InstructorID);\n\nmodelBuilder.Entity<Instructor>()\n    .HasRequired(t => t.OfficeAssignment)\n    .WithRequiredPrincipal();\n```\n\n----------------------------------------\n\nTITLE: Update Blogs from JSON - C#\nDESCRIPTION: This code deserializes a JSON string into a list of `Blog` entities and then uses `context.Update(blog)` to attach each blog to the EF Core context for updating. It requires a valid JSON string representing a list of Blog entities, typically obtained from serialization.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdateBlogsFromJson(string json)\n        {\n            using var context = new BlogsContext();\n\n            var blogs = JsonConvert.DeserializeObject<List<Blog>>(json);\n\n            foreach (var blog in blogs)\n            {\n                context.Update(blog);\n            }\n\n            context.SaveChanges();\n        }\n```\n\n----------------------------------------\n\nTITLE: Select Statement for the Person Entity - T-SQL\nDESCRIPTION: This T-SQL SELECT statement demonstrates how querying the Person entity only selects the columns mapped to that entity from the Person table, as defined in the Entity Framework model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/table-splitting.md#_snippet_2\n\nLANGUAGE: t-sql\nCODE:\n```\n    -- The following SELECT was executed as a result of executing context.People.FirstOrDefault() and selects just the columns mapped to Person\n    -- SELECT: [dbo].[Person]\n    -- COLUMNS: PersonID, LastName, FirstName, EnrollmentDate, HireDate, Discriminator\n    -- WHERE: PersonID = 1 (DbType=Int32)\n    -- SELECT: [dbo].[Person]\n    -- COLUMNS: PersonID, LastName, FirstName, EnrollmentDate, HireDate, Discriminator\n    -- WHERE: PersonID = @EntityKeyValue1 (DbType=Int32)\n```\n\n----------------------------------------\n\nTITLE: Model Managed Data: Seeding Owned Entity Types in EF Core (C#)\nDESCRIPTION: Shows how to configure data for owned entity types, specifically 'LanguageDetails,' within the model configuration using EF Core. This ensures that owned entities are properly seeded with the parent entity when the database is updated through migrations or created using EnsureCreatedAsync.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/data-seeding.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Language>().OwnsOne(l => l.Details).HasData(\n    new { LanguageId = 1, CultureCode = \"en-US\" },\n    new { LanguageId = 2, CultureCode = \"fr-CA\" });\n```\n\n----------------------------------------\n\nTITLE: Naming an Index with C#\nDESCRIPTION: This code shows how to use the `Index` attribute to specify a name for the index. The index created on the `Rating` column will be named `PostRatingIndex`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n    [Index(\"PostRatingIndex\")]\n    public int Rating { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configure Shared-Type Entity C#\nDESCRIPTION: This C# code configures a shared-type entity type named `BuildMetadata` using a `Dictionary<string, object>` to store its properties. It defines the properties of the entity (Id, Tag, Version, Hash, Prerelease) using the `IndexerProperty` method on the `EntityTypeBuilder`. Shared-type entities require a name for access.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_139\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.SharedTypeEntity<Dictionary<string, object>>(\n                \"BuildMetadata\", b =>\n                {\n                    b.IndexerProperty<int>(\"Id\");\n                    b.IndexerProperty<string>(\"Tag\");\n                    b.IndexerProperty<Version>(\"Version\");\n                    b.IndexerProperty<string>(\"Hash\");\n                    b.IndexerProperty<bool>(\"Prerelease\");\n                });\n```\n\n----------------------------------------\n\nTITLE: GroupBy Query with Anonymous Type Key in EF Core 6 (C#)\nDESCRIPTION: This C# code demonstrates grouping `People` entities by an anonymous type containing `FirstName` and `MiddleInitial`. It selects an anonymous type with `Key` containing the grouping key and `Items` containing the list of grouped `People` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nvar grouping = context.People\n    .GroupBy(m => new {m.FirstName, m.MiddleInitial })\n    .Select(am => new\n    {\n        Key = am.Key,\n        Items = am.ToList()\n    })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Fluent API MaxLength Configuration - C#\nDESCRIPTION: This code snippet demonstrates how to use the Fluent API in Entity Framework Code First to configure a `MaxLength` validation rule for the `BloggerName` property of the `Blog` entity.  The `OnModelCreating` method of the `DbContext` is overridden to apply the configuration.  The BloggerName property cannot exceed 10 characters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BlogContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n    public DbSet<Comment> Comments { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Blog>().Property(p => p.BloggerName).HasMaxLength(10);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Foreign Key Name C#\nDESCRIPTION: This code snippet shows how to explicitly configure a foreign key using the HasForeignKey method when the foreign key property name in the CLR type does not follow the Code First conventions. It assumes a property named SomeDepartmentID on the Course class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()\n         .HasRequired(c => c.Department)\n         .WithMany(d => d.Courses)\n         .HasForeignKey(c => c.SomeDepartmentID);\n```\n\n----------------------------------------\n\nTITLE: Defining the Pub Entity with Visits as Owned Type (C#)\nDESCRIPTION: This code snippet defines the `Pub` entity with a `Visits` property as an owned type. The `Visits` class contains a primitive collection `DaysVisited` representing the dates when the pub was visited. This structure enables querying data from JSON documents.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\npublic class Pub\n{\n    public Pub(string name)\n    {\n        Name = name;\n    }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public BeerData Beers { get; set; } = null!;\n    public Visits Visits { get; set; } = null!;\n}\n\npublic class Visits\n{\n    public string? LocationTag { get; set; }\n    public List<DateOnly> DaysVisited { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Complex Properties with DbPropertyValues - C#\nDESCRIPTION: This example demonstrates how to recursively traverse and print the values of all properties, including nested complex properties, using `DbPropertyValues`. It uses a recursive function `WritePropertyValues` to navigate through the nested structure and print the property names and their values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void WritePropertyValues(string parentPropertyName, DbPropertyValues propertyValues)\n{\n    foreach (var propertyName in propertyValues.PropertyNames)\n    {\n        var nestedValues = propertyValues[propertyName] as DbPropertyValues;\n        if (nestedValues != null)\n        {\n            WritePropertyValues(parentPropertyName + propertyName + \".\", nestedValues);\n        }\n        else\n        {\n            Console.WriteLine(\"Property {0}{1} has value {2}\",\n                              parentPropertyName, propertyName,\n                              propertyValues[propertyName]);\n        }\n    }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var user = context.Users.Find(\"johndoe1987\");\n\n    WritePropertyValues(\"\", context.Entry(user).CurrentValues);\n}\n```\n\n----------------------------------------\n\nTITLE: Query-by-Query Constant Translation\nDESCRIPTION: This C# code demonstrates controlling the translation of `Contains` on a per-query basis using `EF.Constant`. It explicitly marks the `names` variable as a constant for SQL translation. Requires `Microsoft.EntityFrameworkCore` namespace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await context.Blogs\n    .Where(b => EF.Constant(names).Contains(b.Name))\n    .ToArrayAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity with Trigger in EF Core\nDESCRIPTION: This C# code snippet demonstrates how to configure an entity type in EF Core to indicate that the underlying table has a database trigger.  This is important for EF Core to generate compatible SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<BlogWithTrigger>()\n    .ToTable(tb => tb.HasTrigger(\"TRG_InsertUpdateBlog\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Owned Types in EF Core 2.0 (C#)\nDESCRIPTION: This code snippet shows how to configure owned entity types in EF Core 2.0. It defines an Order entity that owns an OrderDetails entity, which in turn owns BillingAddress and ShippingAddress entities. This configuration maps these owned types to the same table as the owner, effectively using table splitting, and includes them by default when querying the owner.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Order>().OwnsOne(p => p.OrderDetails, cb =>\n    {\n        cb.OwnsOne(c => c.BillingAddress);\n        cb.OwnsOne(c => c.ShippingAddress);\n    });\n\npublic class Order\n{\n    public int Id { get; set; }\n    public OrderDetails OrderDetails { get; set; }\n}\n\npublic class OrderDetails\n{\n    public StreetAddress BillingAddress { get; set; }\n    public StreetAddress ShippingAddress { get; set; }\n}\n\npublic class StreetAddress\n{\n    public string Street { get; set; }\n    public string City { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting the Discriminator into the ID Property with EF Core and Cosmos DB\nDESCRIPTION: This code instructs EF Core to automatically insert the discriminator value into the `id` property of JSON documents when using Azure Cosmos DB. This is useful when multiple entity types share the same container and primary key values. Use `HasDiscriminatorInJsonId()` to configure this behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Session>().HasDiscriminatorInJsonId();\n```\n\n----------------------------------------\n\nTITLE: Make Value Converter APIs Public in C#\nDESCRIPTION: This code demonstrates a value converter where the conversion methods `ConvertToString` and `ConvertToBytes` must be made public to be used in a compiled model with EF Core 8.0. This snippet shows the updated converter class with public methods.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyValueConverter : ValueConverter<string, byte[]>\n{\n    public MyValueConverter()\n        : base(v => ConvertToBytes(v), v => ConvertToString(v))\n    {\n    }\n\n    public static string ConvertToString(byte[] bytes)\n        => \"\"; // ... TODO: Conversion code\n\n    public static byte[] ConvertToBytes(string chars)\n        => Array.Empty<byte>(); // ... TODO: Conversion code\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Class\nDESCRIPTION: This C# code defines a Tag class without a navigation property back to Post. This class is used in a subsequent example to demonstrate unidirectional many-to-many relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_162\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tag\n{\n    public int Id { get; set; }\n    public string TagName { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Assign Navigation Property in C#\nDESCRIPTION: This code snippet demonstrates how to create a relationship by assigning a new object to a navigation property. In this example, a `department` object is assigned to the `Department` navigation property of a `course` object. If the objects are attached to the context, the `course` is also added to the `department.Courses` collection, and the corresponding foreign key property on the `course` object is set to the key property value of the department.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncourse.Department = department;\n```\n\n----------------------------------------\n\nTITLE: Dynamic SQL with FromSqlRaw and SqlParameter - C#\nDESCRIPTION: This code uses `FromSqlRaw` to construct a SQL query dynamically. The column name is directly inserted into the SQL string, while the column value is passed as a `DbParameter`. It emphasizes the developer's responsibility to sanitize the column name to prevent SQL injection, as `FromSqlRaw` does not provide automatic parameterization for all parts of the query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar columnName = \"Url\";\nvar columnValue = new SqlParameter(\"columnValue\", \"http://SomeURL\");\n\nvar blogs = await context.Blogs\n    .FromSqlRaw($\"SELECT * FROM [Blogs] WHERE {columnName} = @columnValue\", columnValue)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Where and Ordering SQL\nDESCRIPTION: This SQL code is the translated version of the C# code for filtering by age, grouping by id, and ordering by the first middle initial.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_68\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT (\n    SELECT TOP(1) [p1].[MiddleInitial]\n    FROM [People] AS [p1]\n    WHERE ([p1].[Age] = 20) AND ([p].[Id] = [p1].[Id]))\nFROM [People] AS [p]\nWHERE [p].[Age] = 20\nGROUP BY [p].[Id]\nORDER BY (\n    SELECT TOP(1) [p1].[MiddleInitial]\n    FROM [People] AS [p1]\n    WHERE ([p1].[Age] = 20) AND ([p].[Id] = [p1].[Id]))\n```\n\n----------------------------------------\n\nTITLE: Create SQLite Function at Runtime\nDESCRIPTION: This code snippet demonstrates how to create a custom SQLite function at runtime using the Microsoft.Data.Sqlite APIs.  This is a mitigation for when SQLite math functions are not enabled.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nsqliteConnection\n    .CreateFunction<double, double, double>(\n        \"pow\",\n        Math.Pow,\n        isDeterministic: true);\n```\n\n----------------------------------------\n\nTITLE: Enable Sensitive Data Logging in EF Core\nDESCRIPTION: This code snippet demonstrates how to enable sensitive data logging in EF Core. This includes the values of data in exception messages, which can be helpful for debugging but should be avoided in production due to potential exposure of confidential information.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .LogTo(Console.WriteLine)\n        .EnableSensitiveDataLogging();\n```\n\n----------------------------------------\n\nTITLE: Cosmos DB Child Entity C#\nDESCRIPTION: Defines the Child entity with properties for FamilyName, FirstName, Grade, Gender, and Pets.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\npublic class Child\n{\n    public string FamilyName { get; set; }\n    public string FirstName { get; set; }\n    public int Grade { get; set; }\n\n    public string Gender { get; set; }\n\n    public IList<Pet> Pets { get; } = new List<Pet>();\n}\n```\n\n----------------------------------------\n\nTITLE: Optimize DbContext with output directory and namespace\nDESCRIPTION: This command generates a compiled model for the DbContext, placing the generated files in the specified directory and namespace. The `--output-dir` specifies the output directory and `--namespace` option sets the namespace for generated code. This command is useful for organizing the generated model files.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_15\n\nLANGUAGE: dotnetcli\nCODE:\n```\nPS C:\\dotnet\\efdocs\\samples\\core\\Miscellaneous\\CompiledModels> dotnet ef dbcontext optimize --output-dir MyCompiledModels --namespace MyCompiledModels\nBuild started...\nBuild succeeded.\nSuccessfully generated a compiled model, to use it call 'options.UseModel(MyCompiledModels.BlogsContextModel.Instance)'. Run this command again when the model is modified.\nPS C:\\dotnet\\efdocs\\samples\\core\\Miscellaneous\\CompiledModels>\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with CosmosEventId.ExecutedDeleteItem\nDESCRIPTION: Demonstrates deleting an item from an Azure Cosmos DB database, generating the `CosmosEventId.ExecutedDeleteItem` event. This snippet exemplifies how EF Core logs delete operations, providing insights into the resource ID, partition key, and request units consumed during the deletion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Remove(triangle);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Defining a CLR Method Returning IQueryable for Table-Valued Function Mapping (C#)\nDESCRIPTION: This C# code defines a CLR method `PostsWithPopularComments` that returns an `IQueryable<Post>`. This method represents a table-valued function (TVF) in the database. The `FromExpression` call allows this function to be used as a source in LINQ queries, similar to a regular DbSet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic IQueryable<Post> PostsWithPopularComments(int likeThreshold)\n    => FromExpression(() => PostsWithPopularComments(likeThreshold));\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of Embedded Collection Query\nDESCRIPTION: This SQL snippet displays the translated SQL query for querying embedded collections within a JSON document. It utilizes `OPENJSON` to parse the JSON array and `EXISTS` to determine if any search terms are found within the `TopSearches` array.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_61\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE EXISTS (\n    SELECT 1\n    FROM OPENJSON([p].[Metadata], '$.TopSearches') WITH (\n        [Count] int '$.Count',\n        [Term] nvarchar(max) '$.Term'\n    ) AS [t]\n    WHERE EXISTS (\n        SELECT 1\n        FROM OPENJSON(@__searchTerms_0) WITH ([value] nvarchar(max) '$') AS [s]\n        WHERE [s].[value] = [t].[Term]))\n```\n\n----------------------------------------\n\nTITLE: Defining Function Parameter in XML\nDESCRIPTION: This XML snippet demonstrates how to define a Function element with a Parameter child element. The function named GetYearsEmployed accepts one parameter named Instructor of type SchoolModel.Person and returns an Edm.Int32 representing the number of years the instructor has been employed. The DefiningExpression calculates the difference between the current year and the instructor's hire year.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"GetYearsEmployed\" ReturnType=\"Edm.Int32\">\n <Parameter Name=\"Instructor\" Type=\"SchoolModel.Person\" />\n   <DefiningExpression>\n   Year(CurrentDateTime()) - Year(cast(Instructor.HireDate as DateTime))\n   </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Create a DbContext for Blogging with Entity Framework\nDESCRIPTION: This code defines a derived DbContext class named `BloggingContext`.  It exposes DbSet properties for the Blog and Post entities, allowing Entity Framework to interact with these tables in the database. Requires the EntityFramework NuGet package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\n\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Entities with No Tracking for Benchmarking\nDESCRIPTION: This benchmark method is similar to the 'Load Entities' method, but it uses `AsNoTracking()` to disable change tracking. This optimization avoids the overhead of snapshotting entities, potentially improving performance, especially for read-only queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing BenchmarkDotNet.Attributes;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Benchmarks;\n\n[MemoryDiagnoser]\npublic class AverageBlogRanking\n{\n    private string _connectionString = null!;\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        _connectionString = Helpers.GetConnectionString();\n        using var context = new BloggingContext(_connectionString);\n        context.Database.EnsureDeleted();\n        context.Database.EnsureCreated();\n\n        context.Blogs.AddRange(\n            new Blog { Ranking = 1 },\n            new Blog { Ranking = 2 },\n            new Blog { Ranking = 3 });\n\n        context.SaveChanges();\n    }\n\n    [Benchmark(Baseline = true)]\n    public double LoadEntities()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.ToList().Average(b => b.Ranking);\n    }\n\n    [Benchmark]\n    public double LoadEntitiesNoTracking()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.AsNoTracking().ToList().Average(b => b.Ranking);\n    }\n\n    [Benchmark]\n    public double ProjectOnlyRanking()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.Select(b => b.Ranking).ToList().Average();\n    }\n\n    [Benchmark]\n    public double CalculateInDatabase()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.Average(b => b.Ranking);\n    }\n}\n\npublic class BloggingContext : DbContext\n{\n    private readonly string _connectionString;\n\n    public BloggingContext(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public DbSet<Blog> Blogs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlite(_connectionString);\n    }\n}\n\npublic class Blog\n{\n    public int Id { get; set; }\n    public int Ranking { get; set; }\n}\n\npublic static class Helpers\n{\n    public static string GetConnectionString()\n    {\n        var databaseName = $\"Test_{Guid.NewGuid()}\";\n        return $\"Data Source={databaseName}.db\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Data Sources to MainWindow XAML\nDESCRIPTION: Adds data sources to the MainWindow.xaml file to connect to the EF Core entities. These sources will be used to bind the data to WPF controls in the user interface, allowing for data display and manipulation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/wpf.md#_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Window.Resources>\n        <CollectionViewSource x:Key=\"CategoriesViewSource\" d:DesignSource=\"{d:DesignInstance Type=local:Category}\"/>\n        <CollectionViewSource x:Key=\"ProductsViewSource\" Source=\"{Binding Products, Source={StaticResource CategoriesViewSource}}\" d:DesignSource=\"{d:DesignInstance Type=local:Product}\"/>\n    </Window.Resources>\n```\n\n----------------------------------------\n\nTITLE: Test GetAllBlogs Method Ordering with Mocked DbSet (C#)\nDESCRIPTION: Tests the GetAllBlogs method of the BlogService, verifying that the returned blogs are ordered by name.  It sets up a mocked DbSet<Blog> with an in-memory list of Blog objects and configures the IQueryable implementation for the mocked DbSet using Moq.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/mocking.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Moq;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\n\nnamespace TestingDemo\n{\n    [TestClass]\n    public class QueryTests\n    {\n        [TestMethod]\n        public void GetAllBlogs_orders_by_name()\n        {\n            var data = new List<Blog>\n            {\n                new Blog { Name = \"BBB\" },\n                new Blog { Name = \"ZZZ\" },\n                new Blog { Name = \"AAA\" },\n            }.AsQueryable();\n\n            var mockSet = new Mock<DbSet<Blog>>();\n            mockSet.As<IQueryable<Blog>>().Setup(m => m.Provider).Returns(data.Provider);\n            mockSet.As<IQueryable<Blog>>().Setup(m => m.Expression).Returns(data.Expression);\n            mockSet.As<IQueryable<Blog>>().Setup(m => m.ElementType).Returns(data.ElementType);\n            mockSet.As<IQueryable<Blog>>().Setup(m => m.GetEnumerator()).Returns(() => data.GetEnumerator());\n\n            var mockContext = new Mock<BloggingContext>();\n            mockContext.Setup(c => c.Blogs).Returns(mockSet.Object);\n\n            var service = new BlogService(mockContext.Object);\n            var blogs = service.GetAllBlogs();\n\n            Assert.AreEqual(3, blogs.Count);\n            Assert.AreEqual(\"AAA\", blogs[0].Name);\n            Assert.AreEqual(\"BBB\", blogs[1].Name);\n            Assert.AreEqual(\"ZZZ\", blogs[2].Name);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Find Direct Ancestor Using HierarchyId in EF Core with C#\nDESCRIPTION: This C# code snippet demonstrates how to find the direct ancestor of an entity using the `GetAncestor` method in a LINQ query with Entity Framework Core.  It takes a halfling's name as input and uses a subquery to get the `PathFromPatriarch` and then calls `GetAncestor(1)` to get the immediate parent. It requires an EF Core context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<Halfling?> FindDirectAncestor(string name)\n            => await context.Halflings\n                .SingleOrDefaultAsync(\n                    ancestor => ancestor.PathFromPatriarch == context.Halflings\n                        .Single(descendent => descendent.Name == name).PathFromPatriarch\n                        .GetAncestor(1));\n```\n\n----------------------------------------\n\nTITLE: Inserting Posts and Tags - C#\nDESCRIPTION: This C# code demonstrates how to insert data into the database using the configured unidirectional many-to-many relationship. It creates a blog with posts that share tags from a common set, demonstrating the use of the many-to-many relationship without a reverse navigation property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_164\n\nLANGUAGE: csharp\nCODE:\n```\nvar tags = new Tag[] { new() { TagName = \"Tag1\" }, new() { TagName = \"Tag2\" }, new() { TagName = \"Tag2\" }, };\n\nawait context.AddRangeAsync(new Blog { Posts =\n{\n    new Post { Tags = { tags[0], tags[1] } },\n    new Post { Tags = { tags[1], tags[0], tags[2] } },\n    new Post()\n} });\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Configure Required One-to-Many from Principal - C#\nDESCRIPTION: This code snippet configures a required one-to-many relationship between `Blog` and `Post` using the `OnModelCreating` method. It explicitly defines the foreign key as `BlogId` and sets the relationship as required.  This configuration is needed when conventions are not sufficient to define the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany(e => e.Posts)\n                    .WithOne(e => e.Blog)\n                    .HasForeignKey(\"BlogId\")\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: FindAsync Example with Partition Key in Cosmos DB using C#\nDESCRIPTION: This code snippet demonstrates how to use `FindAsync` to retrieve an entity from Azure Cosmos DB, considering the primary key structure which includes partition key properties in addition to the document's `id`. It highlights the requirement to pass all partition key values to `FindAsync` in the correct order when a hierarchical partition key is used.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Session\n{\n    public Guid Id { get; set; }\n    public string PartitionKey { get; set; }\n    ...\n}\n\nvar mySession = await context.FindAsync(id, pkey);\n```\n\n----------------------------------------\n\nTITLE: SQL Updates for Cascading Nulls After Deleting Principal\nDESCRIPTION: This SQL code snippet shows the database updates that occur when a blog (principal/parent) is deleted in an optional relationship. The `BlogId` column in the `Posts` table is updated to NULL for all posts related to the deleted blog.  This is a direct consequence of the C# code snippet demonstrating deleting a blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (2ms) [Parameters=[@p1='1', @p0=NULL (DbType = Int32)], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nUPDATE [Posts] SET [BlogId] = @p0\nWHERE [Id] = @p1;\nSELECT @@ROWCOUNT;\n\n-- Executed DbCommand (0ms) [Parameters=[@p1='2', @p0=NULL (DbType = Int32)], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nUPDATE [Posts] SET [BlogId] = @p0\nWHERE [Id] = @p1;\nSELECT @@ROWCOUNT;\n\n-- Executed DbCommand (1ms) [Parameters=[@p2='1'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [Blogs]\nWHERE [Id] = @p2;\nSELECT @@ROWCOUNT;\n```\n\n----------------------------------------\n\nTITLE: Discovering Many-to-Many Relationship in EF Core (C#)\nDESCRIPTION: This example demonstrates EF Core's convention for discovering many-to-many relationships. The `Post.Tags` and `Tag.Posts` navigations, both collection navigations, are paired together to create a many-to-many relationship between the `Post` and `Tag` entity types. This pairing allows EF Core to automatically configure the relationship without explicit configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public ICollection<Tag> Tags { get; } = new List<Tag>();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Server Table Creation with Discriminator Column\nDESCRIPTION: Shows the SQL Server table creation script generated by EF Core for the TPH inheritance model.  The `Discriminator` column, used to differentiate between entity types within the hierarchy, is defined as `nvarchar(21)`, reflecting the maximum length calculated based on the discriminator values. The `Id` column is configured as an auto-incrementing primary key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_108\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Documents] (\n    [Id] int NOT NULL IDENTITY,\n    [Title] nvarchar(max) NOT NULL,\n    [Discriminator] nvarchar(21) NOT NULL,\n    [Isbn] nvarchar(max) NULL,\n    [IssueNumber] int NULL,\n    CONSTRAINT [PK_Documents] PRIMARY KEY ([Id])\n```\n\n----------------------------------------\n\nTITLE: Revert All Migrations PowerShell\nDESCRIPTION: Reverts all migrations in the database, effectively returning the database to its initial state before any migrations were applied. This is achieved by specifying 0 as the target migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Database 0\n```\n\n----------------------------------------\n\nTITLE: Optimize EF Query by Breaking Down Include Statements C#\nDESCRIPTION: This C# code snippet demonstrates how to improve Entity Framework query performance by breaking down a single query with multiple Include statements into a sequence of smaller subqueries. This approach reduces the size of each individual query payload and can alleviate bandwidth issues, especially when dealing with one-to-many relationships. This example showcases how breaking the query leverages tracked queries for identity resolution and association fixup.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nusing (NorthwindEntities context = new NorthwindEntities())\n{\n    var orders = from o in context.Orders\n                 where o.Customer.LastName.StartsWith(lastNameParameter)\n                 select o;\n\n    orders.Load();\n\n    var customers = from c in context.Customers\n                    where c.LastName.StartsWith(lastNameParameter)\n                    select c;\n\n    foreach (Customer customer in customers)\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Repository Interface (C#)\nDESCRIPTION: This code snippet defines a custom `IRepository<T>` interface, which provides methods for querying, adding, and removing entities.  The `where` clause constrains `T` to be a class and implement the `IEntity` interface.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IRepository<T>\n                    where T : class, IEntity {\n        IQueryable<T> FindAll();\n        IQueryable<T> FindWhere(Expression<Func<T, bool>> predicate);\n        T FindById(int id);\n        void Add(T newEntity);\n        void Remove(T entity);\n    }\n```\n\n----------------------------------------\n\nTITLE: Create BlogAuthor and PostTag tables\nDESCRIPTION: SQL code that creates the BlogAuthor and PostTag join tables, including Id1, Id2, and CreatedOn columns, primary key constraints, and foreign key constraints referencing the Authors, Blogs, Posts, and Tags tables respectively.  The CreatedOn column defaults to CURRENT_TIMESTAMP.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"BlogAuthor\" (\n    \"Id1\" INTEGER NOT NULL,\n    \"Id2\" INTEGER NOT NULL,\n    \"CreatedOn\" TEXT NOT NULL DEFAULT (CURRENT_TIMESTAMP),\n    CONSTRAINT \"PK_BlogAuthor\" PRIMARY KEY (\"Id1\", \"Id2\"),\n    CONSTRAINT \"FK_BlogAuthor_Authors_Id1\" FOREIGN KEY (\"Id1\") REFERENCES \"Authors\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_BlogAuthor_Blogs_Id2\" FOREIGN KEY (\"Id2\") REFERENCES \"Blogs\" (\"Id\") ON DELETE CASCADE);\n\n\nCREATE TABLE \"PostTag\" (\n    \"Id1\" INTEGER NOT NULL,\n    \"Id2\" INTEGER NOT NULL,\n    \"CreatedOn\" TEXT NOT NULL DEFAULT (CURRENT_TIMESTAMP),\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"Id1\", \"Id2\"),\n    CONSTRAINT \"FK_PostTag_Posts_Id2\" FOREIGN KEY (\"Id2\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_Id1\" FOREIGN KEY (\"Id1\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: SQL for Querying Authors in Chigley SQL\nDESCRIPTION: This SQL code represents the generated SQL query for finding authors living in 'Chigley' when the `Contact` property is stored as a JSON column. It uses `JSON_VALUE` to extract the `City` from the JSON data and compares it to 'Chigley'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Id], [a].[Name], JSON_QUERY([a].[Contact],'$')\nFROM [Authors] AS [a]\nWHERE CAST(JSON_VALUE([a].[Contact],'$.Address.City') AS nvarchar(max)) = N'Chigley'\n```\n\n----------------------------------------\n\nTITLE: Join with Composite Keys (C#)\nDESCRIPTION: This code snippet shows the usage of LINQ Join with composite keys. It joins PersonPhoto and Person entities based on two key properties: PersonPhotoId and Caption. EF Core generates a join condition comparing the equality of each component.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.PersonPhotos\n    .Join(\n        context.People,\n        pp => new { Id = pp.PersonPhotoId, Caption = pp.Caption },\n        p => new { Id = p.PhotoId, Caption = \"SN\" },\n        (pp, p) => new { pp, p });\n\n/*\n\nSELECT [p].[PersonId], [p].[Name], [p].[PhotoId], [p0].[PersonPhotoId], [p0].[Caption], [p0].[Photo]\nFROM [PersonPhoto] AS [p0]\nINNER JOIN [Person] AS [p] ON ([p0].[PersonPhotoId] = [p].[PhotoId] AND ([p0].[Caption] = N'SN'))\n*/\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statement for Customer with Address\nDESCRIPTION: This SQL code shows the generated INSERT statement for saving a customer with an address. Notice how the columns of the complex type `Address` are flattened and included directly in the `Customers` table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO [Customers] ([Name], [Address_City], [Address_Country], [Address_Line1], [Address_Line2], [Address_PostCode])\nOUTPUT INSERTED.[Id]\nVALUES (@p0, @p1, @p2, @p3, @p4, @p5);\n```\n\n----------------------------------------\n\nTITLE: Execute Compiled Query Asynchronously with EF Core\nDESCRIPTION: This code snippet shows how to execute a compiled query delegate in EF Core. The delegate is invoked with a DbContext instance and the required parameters to execute the query directly. The delegate is thread-safe and can be invoked concurrently on different context instances.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nawait using (var context = new BloggingContext())\n{\n    var blogs = await compiledQuery(context, \"SomeBlog\");\n}\n```\n\n----------------------------------------\n\nTITLE: SelectMany Converted to Join (C#)\nDESCRIPTION: This code snippet shows how SelectMany translates to an INNER JOIN when the collection selector uses a `where` clause that references the outer element. The second example uses `DefaultIfEmpty`, which results in a LEFT JOIN. This often happens when using collection navigation properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Blogs\n    .SelectMany(b => context.Posts.Where(p => p.BlogId == b.BlogId),\n        (b, p) => new { b, p });\n\n/*\n\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url], [p].[PostId], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Rating], [p].[Title]\nFROM [Blogs] AS [b]\nINNER JOIN [Posts] AS [p] ON [b].[BlogId] = [p].[BlogId]\n*/\n\nvar query2 = context.Blogs\n    .SelectMany(b => context.Posts.Where(p => p.BlogId == b.BlogId).DefaultIfEmpty(),\n        (b, p) => new { b, p });\n\n/*\n\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url], [p].[PostId], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Rating], [p].[Title]\nFROM [Blogs] AS [b]\nLEFT JOIN [Posts] AS [p] ON [b].[BlogId] = [p].[BlogId]\n*/\n```\n\n----------------------------------------\n\nTITLE: Configure ulong Concurrency Token Conversion in EF Core\nDESCRIPTION: Configures a value converter in EF Core to map the ulong concurrency token property to a byte array, which is the format used by SQL Server's rowversion/timestamp columns. This allows EF Core to use a more convenient ulong type in the entity while still correctly interacting with the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(e => e.Version)\n    .IsRowVersion()\n    .HasConversion<byte[]>();\n```\n\n----------------------------------------\n\nTITLE: SQL for Deleting Tags with Complex Filter and Navigation\nDESCRIPTION: This SQL code shows the complex DELETE statement generated when using a navigation property and filter condition with `ExecuteDeleteAsync`. It demonstrates deleting tags only from old blog posts (posts published before 2022).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM [t]\nFROM [Tags] AS [t]\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM [PostTag] AS [p]\n    INNER JOIN [Posts] AS [p0] ON [p].[PostsId] = [p0].[Id]\n    WHERE [t].[Id] = [p].[TagsId] AND NOT (DATEPART(year, [p0].[PublishedOn]) < 2022))\n\n```\n\n----------------------------------------\n\nTITLE: Generating Precompiled Queries without NativeAOT\nDESCRIPTION: This console command generates a compiled model and interceptors for queries which can be precompiled, without using NativeAOT.  This can improve application startup time even without NativeAOT's other benefits.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/nativeaot-and-precompiled-queries.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndotnet ef dbcontext optimize --precompile-queries\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Retrieving Entities at a Given Level in the Hierarchy\nDESCRIPTION: This SQL query is the translated version of the C# LINQ query that retrieves entities based on their level in the hierarchy. It selects the Id, Name, PathFromPatriarch, and YearOfBirth from the Halflings table where the GetLevel() value equals the provided level parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch].GetLevel() = @__level_0\n```\n\n----------------------------------------\n\nTITLE: Correct CompiledQuery Usage with Static Instance C#\nDESCRIPTION: This code demonstrates the correct usage of CompiledQuery by storing it as a static readonly field within the ObjectContext. This ensures that the query is compiled only once and reused across multiple invocations, improving performance. It also uses a helper method to access the CompiledQuery.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n    public partial class NorthwindEntities : ObjectContext\n    {\n        private static readonly Func<NorthwindEntities, string, IEnumerable<Product>> productsForCategoryCQ = CompiledQuery.Compile(\n            (NorthwindEntities context, string categoryName) =>\n                context.Products.Where(p => p.Category.CategoryName == categoryName)\n            );\n\n        public IEnumerable<Product> GetProductsForCategory(string categoryName)\n        {\n            return productsForCategoryCQ.Invoke(this, categoryName).ToList();\n        }\n```\n\n----------------------------------------\n\nTITLE: DbContext Compiled Model Configuration C#\nDESCRIPTION: Shows how to configure a DbContext to use a compiled model via the `UseModel` extension method.  This is called during DbContext configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseModel(MyCompiledModels.BlogsContextModel.Instance)\n        .UseSqlite(@\"Data Source=test.db\");\n```\n\n----------------------------------------\n\nTITLE: SQL Assertion Output Helper - EF Core\nDESCRIPTION: This snippet demonstrates how to use ITestOutputHelper from xUnit to output the complete generated SQL when a SQL assertion fails. This is done by passing the ITestOutputHelper to the TestSqlLoggerFactory of the test fixture, allowing easier debugging and baseline comparison.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/writing-a-provider.md#_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic NorthwindWhereQuerySqlServerTest(\n    NorthwindQuerySqlServerFixture<NoopModelCustomizer> fixture,\n    ITestOutputHelper testOutputHelper)\n    : base(fixture)\n{\n    ClearLog();\n    Fixture.TestSqlLoggerFactory.SetTestOutputHelper(testOutputHelper);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging SQL to the console in Entity Framework 6\nDESCRIPTION: This snippet demonstrates how to log SQL queries generated by Entity Framework 6 to the console using the `DbContext.Database.Log` property. It sets the `Log` property to `Console.Write`, redirecting all SQL output to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BlogContext())\n{\n    context.Database.Log = Console.Write;\n\n    // Your code here...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Stored Computed Column with Fluent API in EF Core\nDESCRIPTION: This C# code snippet shows how to define a stored (persisted) computed column using the Fluent API in EF Core. Stored computed columns are computed on every update of the row and stored on disk alongside regular columns.  Requires Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Person>()\n    .Property(p => p.FullName)\n    .HasComputedColumnSql(\"[LastName], ', ', [FirstName]\", stored: true);\n```\n\n----------------------------------------\n\nTITLE: OnModelCreating Configuration C#\nDESCRIPTION: Shows how to manually apply an IEntityTypeConfiguration instance within the DbContext's OnModelCreating method. This requires instantiating the configuration class and calling its Configure method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    new BookConfiguration().Configure(modelBuilder.Entity<Book>());\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Entity Types with Fluent API - C#\nDESCRIPTION: This code demonstrates how to exclude an entity type from the EF Core model using the Ignore() method in OnModelCreating with the Fluent API.  This prevents EF Core from tracking this entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Ignore<NotMappedType>();\n}\n```\n\n----------------------------------------\n\nTITLE: Full Many-to-Many Configuration (EF Core 6)\nDESCRIPTION: This snippet provides a complete configuration for a many-to-many relationship, including specifying the entity type, foreign keys, and the composite key for the join entity.  Requires a `CatHuman` entity with `CatsId`, `HumansId`, `Cat`, and `Human` properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_140\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Cat>()\n    .HasMany(e => e.Humans)\n    .WithMany(e => e.Cats)\n    .UsingEntity<CatHuman>(\n        e => e.HasOne<Human>().WithMany().HasForeignKey(e => e.CatsId),\n        e => e.HasOne<Cat>().WithMany().HasForeignKey(e => e.HumansId),\n        e => e.HasKey(e => new { e.CatsId, e.HumansId }));\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentAudit Entity - C#\nDESCRIPTION: This code snippet configures the `DocumentAudit` entity within the `OnModelCreating` method of the DbContext. It specifies that only one type is stored in the table, sets the container name to `Audits`, defines the document id as the partition key, and combines the audit's unique identifier with the partition key as the access key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<DocumentAudit>().HasNoDiscriminator();\n\nmodelBuilder.Entity<DocumentAudit>().ToContainer(\"Audits\");\n\nmodelBuilder.Entity<DocumentAudit>().HasPartitionKey(da => da.DocumentId);\n\nmodelBuilder.Entity<DocumentAudit>().HasKey(da => new { da.Id, da.DocumentId });\n```\n\n----------------------------------------\n\nTITLE: Configure Composite Primary Key - C#\nDESCRIPTION: Shows how to define a composite primary key using the `[Key]` and `[Column(Order=)]` data annotations. The `Column` annotation is used to specify the order of the properties that form the composite key.  Entity Framework requires explicit ordering when a composite key is defined.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Passport\n    {\n        [Key]\n        [Column(Order=1)]\n        public int PassportNumber { get; set; }\n        [Key]\n        [Column(Order = 2)]\n        public string IssuingCountry { get; set; }\n        public DateTime Issued { get; set; }\n        public DateTime Expires { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Writing Tests That Modify Data in EF Core (C#)\nDESCRIPTION: Demonstrates how to write tests that modify data using transactions to ensure test isolation. The test starts a transaction, performs updates, clears the change tracker, and then verifies the changes by loading data from the database. The transaction is rolled back at the end of the test.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task AddBlog()\n{\n    using var context = Fixture.CreateContext();\n    using var transaction = context.Database.BeginTransaction();\n    var controller = new BloggingController(context);\n\n    var blog = new Blog { Name = \"Blog3\", Url = \"http://sample.com/blog3\" };\n    var result = await controller.AddBlog(blog);\n\n    context.ChangeTracker.Clear();\n    var createdBlog = context.Blogs.Single(e => e.BlogId == blog.BlogId);\n    Assert.Equal(\"Blog3\", createdBlog.Name);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Materializing Blog Objects from Database Results in C#\nDESCRIPTION: This C# code demonstrates how EF pre-compiled queries use unsafe accessors to materialize .NET objects from database results.  It reads the values from the data reader and injects them into the private fields of a Blog object.  Unsafe accessors improve performance by directly writing to private fields, bypassing property setters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar instance = new Blog();\nUnsafeAccessor_Blog_Id_Set(instance) = dataReader.GetInt32(0);\nUnsafeAccessor_Blog_Name_Set(instance) = dataReader.GetString(1);\n```\n\n----------------------------------------\n\nTITLE: Keyless View Type Definition C#\nDESCRIPTION: Defines the keyless entity type CustomerDensity, representing a view over the customer data in the in-memory database. It stores postcode prefixes and the number of customers within each postcode area, demonstrating aggregation of data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomerDensity\n{\n    public string Postcode { get; set; }\n    public int CustomerCount { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Default Value in Entity C#\nDESCRIPTION: This snippet shows how to initialize an enum property with a default value directly in the entity class.  This ensures that the property always has a value, even if it's not explicitly set.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_125\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Course\n{\n    public int Id { get; set; }\n    public Level Level { get; set; } = Level.Unspecified;\n}\n```\n\n----------------------------------------\n\nTITLE: DbContextOptionsExtensionInfo Implementation\nDESCRIPTION: This C# code snippet demonstrates a basic implementation of `DbContextOptionsExtensionInfo.ShouldUseSameServiceProvider` for an EF Core extension.  If the extension doesn't have any options that affect registered services, it can simply check if the other object is of the same type.  If options exist, it will be necessary to compare each option individually.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nprivate sealed class ExtensionInfo : DbContextOptionsExtensionInfo\n{\n    public ExtensionInfo(IDbContextOptionsExtension extension)\n        : base(extension)\n    {\n    }\n\n    ...\n\n    public override bool ShouldUseSameServiceProvider(DbContextOptionsExtensionInfo other)\n        => other is ExtensionInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Historical Data with TemporalAsOf in EF Core\nDESCRIPTION: This code snippet demonstrates how to restore historical data from a specific point in time using the `TemporalAsOf()` method in EF Core. It retrieves the employee data as it existed at a given time and re-inserts it into the main table. The example shows how to correct accidental data deletions by restoring a previous state.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar employee = context\n    .Employees\n    .TemporalAsOf(timeStamp2)\n    .Single(e => e.Name == \"Rainbow Dash\");\n\ncontext.Add(employee);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Fluent API Configuration for Field\nDESCRIPTION: This snippet shows how to explicitly specify the backing field to use for a property using the fluent API in EF Core when there are ambiguous backing fields.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<Blog>()\n    .Property(e => e.Id)\n    .HasField(\"_id\");\n```\n\n----------------------------------------\n\nTITLE: Changing Log Level with ConfigureWarnings (C#)\nDESCRIPTION: This C# snippet demonstrates how to use the `ConfigureWarnings` API to change the log level of specific events in EF Core. The code configures the DbContextOptionsBuilder to change the log level of ConnectionOpened and ConnectionClosed events to Information, and then logs all Information level logs to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .ConfigureWarnings(b => b.Log(\n            (RelationalEventId.ConnectionOpened, LogLevel.Information),\n            (RelationalEventId.ConnectionClosed, LogLevel.Information)))\n        .LogTo(Console.WriteLine, LogLevel.Information);\n```\n\n----------------------------------------\n\nTITLE: Configure Self-Referencing Relationship - C#\nDESCRIPTION: Explicitly configures the self-referencing one-to-many relationship for the Employee entity. It uses `HasOne`, `WithMany`, `HasForeignKey`, and `IsRequired` to define the relationship between an employee and their manager, setting the foreign key property and making the relationship optional.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Employee>()\n        .HasOne(e => e.Manager)\n        .WithMany(e => e.Reports)\n        .HasForeignKey(e => e.ManagerId)\n        .IsRequired(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Filters with IgnoreQueryFilters in C#\nDESCRIPTION: This code snippet demonstrates how to disable global query filters for a specific LINQ query using the `IgnoreQueryFilters` operator. This allows you to retrieve all entities without applying any of the defined filters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar allPosts = context.Posts.IgnoreQueryFilters().ToList();\n```\n\n----------------------------------------\n\nTITLE: Adding a PostTag Entity using Explicit Join Entity in C#\nDESCRIPTION: This C# code demonstrates how to associate a `Post` and a `Tag` by explicitly creating and adding a `PostTag` entity to the database context. The `PostTag` entity is created with references to the related `Post` and `Tag` entities, demonstrating how to manage the many-to-many relationship directly through the join entity when skip navigations are also present.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Add(new PostTag { Post = post, Tag = tag });\n```\n\n----------------------------------------\n\nTITLE: Nullable Reference Navigation Example - C#\nDESCRIPTION: This C# snippet shows how to define a nullable reference navigation when using C# nullable reference types.  This is required for optional relationships, indicating that the related entity may not always exist.  The '?' after the type indicates that the property can be null.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic Blog? TheBlog { get; set; }\n```\n\n----------------------------------------\n\nTITLE: String Facets Configuration C#\nDESCRIPTION: This code snippet demonstrates how to configure facets on all properties of type `string` using pre-convention configuration. It sets the `IsUnicode` property to false and the `MaxLength` to 1024 for all string properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Properties<string>()\n        .AreUnicode(false)\n        .HaveMaxLength(1024);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Model with Table Splitting - C#\nDESCRIPTION: This C# code demonstrates how to use the Entity Framework model configured with table splitting. It creates a new Person and HireInfo object, adds them to the context, saves changes, and then queries the database to retrieve the data, showcasing how the entities interact with the split table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/table-splitting.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    using (var context = new SchoolEntities())\n    {\n        Person person = new Person()\n        {\n            FirstName = \"Kimberly\",\n            LastName = \"Morgan\",\n            Discriminator = \"Instructor\",\n        };\n\n        person.HireInfo = new HireInfo()\n        {\n            HireDate = DateTime.Now\n        };\n\n        // Add the new person to the context.\n        context.People.Add(person);\n\n        // Insert a row into the Person table.  \n        context.SaveChanges();\n\n        // Execute a query against the Person table.\n        // The query returns columns that map to the Person entity.\n        var existingPerson = context.People.FirstOrDefault();\n\n        // Execute a query against the Person table.\n        // The query returns columns that map to the Instructor entity.\n        var hireInfo = existingPerson.HireInfo;\n\n        Console.WriteLine(\"{0} was hired on {1}\",\n            existingPerson.LastName, hireInfo.HireDate);\n    }\n```\n\n----------------------------------------\n\nTITLE: SQL: Deleting Orphaned Post\nDESCRIPTION: This SQL command is generated by EF Core when `SaveChanges` is called after removing a `Post` from a `Blog` in a required relationship, resulting in the `Post` becoming an orphan.  The SQL command deletes the orphaned post from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p0='2' (DbType = String)], CommandType='Text', CommandTimeout='30']\nDELETE FROM \"Posts\"\nWHERE \"Id\" = @p0;\nSELECT changes();\n```\n\n----------------------------------------\n\nTITLE: Sample EF Model - C#\nDESCRIPTION: Defines a sample Entity Framework Code First model with entities like SchoolEntities, Department, Course, OnlineCourse, OnsiteCourse, Details, Instructor, and OfficeAssignment. Includes configuration for database context and entity properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Data.Entity.ModelConfiguration.Conventions;\n// add a reference to System.ComponentModel.DataAnnotations DLL\nusing System.ComponentModel.DataAnnotations;\nusing System.Collections.Generic;\nusing System;\n\npublic class SchoolEntities : DbContext\n{\n    public DbSet<Course> Courses { get; set; }\n    public DbSet<Department> Departments { get; set; }\n    public DbSet<Instructor> Instructors { get; set; }\n    public DbSet<OfficeAssignment> OfficeAssignments { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        // Configure Code First to ignore PluralizingTableName convention\n        // If you keep this convention then the generated tables will have pluralized names.\n        modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();\n    }\n}\n\npublic class Department\n{\n    public Department()\n    {\n        this.Courses = new HashSet<Course>();\n    }\n    // Primary key\n    public int DepartmentID { get; set; }\n    public string Name { get; set; }\n    public decimal Budget { get; set; }\n    public System.DateTime StartDate { get; set; }\n    public int? Administrator { get; set; }\n\n    // Navigation property\n    public virtual ICollection<Course> Courses { get; private set; }\n}\n\npublic class Course\n{\n    public Course()\n    {\n        this.Instructors = new HashSet<Instructor>();\n    }\n    // Primary key\n    public int CourseID { get; set; }\n\n    public string Title { get; set; }\n    public int Credits { get; set; }\n\n    // Foreign key\n    public int DepartmentID { get; set; }\n\n    // Navigation properties\n    public virtual Department Department { get; set; }\n    public virtual ICollection<Instructor> Instructors { get; private set; }\n}\n\npublic partial class OnlineCourse : Course\n{\n    public string URL { get; set; }\n}\n\npublic partial class OnsiteCourse : Course\n{\n    public OnsiteCourse()\n    {\n        Details = new Details();\n    }\n\n    public Details Details { get; set; }\n}\n\npublic class Details\n{\n    public System.DateTime Time { get; set; }\n    public string Location { get; set; }\n    public string Days { get; set; }\n}\n\npublic class Instructor\n{\n    public Instructor()\n    {\n        this.Courses = new List<Course>();\n    }\n\n    // Primary key\n    public int InstructorID { get; set; }\n    public string LastName { get; set; }\n    public string FirstName { get; set; }\n    public System.DateTime HireDate { get; set; }\n\n    // Navigation properties\n    public virtual ICollection<Course> Courses { get; private set; }\n}\n\npublic class OfficeAssignment\n{\n    // Specifying InstructorID as a primary\n    [Key()]\n    public Int32 InstructorID { get; set; }\n\n    public string Location { get; set; }\n\n    // When Entity Framework sees Timestamp attribute\n    // it configures ConcurrencyCheck and DatabaseGeneratedPattern=Computed.\n    [Timestamp]\n    public Byte[] Timestamp { get; set; }\n\n    // Navigation property\n    public virtual Instructor Instructor { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: General IA Renaming Convention - C#\nDESCRIPTION: This code demonstrates a model-based convention that modifies the naming of Independent Association (IA) foreign key columns. It implements the IStoreModelConvention interface for AssociationType objects and removes the underscore character from the generated column names (e.g., Customer_CustomerId becomes CustomerCustomerId).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/model.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Data.Entity.Core.Metadata.Edm;\nusing System.Data.Entity.Infrastructure;\nusing System.Data.Entity.ModelConfiguration.Conventions;\n\n// Provides a convention for fixing the independent association (IA) foreign key column names.  \npublic class ForeignKeyNamingConvention : IStoreModelConvention<AssociationType>\n{\n\n    public void Apply(AssociationType association, DbModel model)\n    {\n        // Identify ForeignKey properties (including IAs)  \n        if (association.IsForeignKey)\n        {\n            // rename FK columns  \n            var constraint = association.Constraint;\n            if (DoPropertiesHaveDefaultNames(constraint.FromProperties, constraint.ToRole.Name, constraint.ToProperties))\n            {\n                NormalizeForeignKeyProperties(constraint.FromProperties);\n            }\n            if (DoPropertiesHaveDefaultNames(constraint.ToProperties, constraint.FromRole.Name, constraint.FromProperties))\n            {\n                NormalizeForeignKeyProperties(constraint.ToProperties);\n            }\n        }\n    }\n\n    private bool DoPropertiesHaveDefaultNames(ReadOnlyMetadataCollection<EdmProperty> properties, string roleName, ReadOnlyMetadataCollection<EdmProperty> otherEndProperties)\n    {\n        if (properties.Count != otherEndProperties.Count)\n        {\n            return false;\n        }\n\n        for (int i = 0; i < properties.Count; ++i)\n        {\n            if (!properties[i].Name.EndsWith(\"_\" + otherEndProperties[i].Name))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void NormalizeForeignKeyProperties(ReadOnlyMetadataCollection<EdmProperty> properties)\n    {\n        for (int i = 0; i < properties.Count; ++i)\n        {\n            int underscoreIndex = properties[i].Name.IndexOf('_');\n            if (underscoreIndex > 0)\n            {\n                properties[i].Name = properties[i].Name.Remove(underscoreIndex, 1);\n            }                 \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Repository (C#)\nDESCRIPTION: This code snippet implements the `IRepository<T>` interface using Entity Framework's `ObjectContext` and `ObjectSet<T>`. It provides generic methods for common data access operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SqlRepository<T> : IRepository<T>\n                                    where T : class, IEntity {\n        public SqlRepository(ObjectContext context) {\n            _objectSet = context.CreateObjectSet<T>();\n        }\n        public IQueryable<T> FindAll() {\n            return _objectSet;\n        }\n        public IQueryable<T> FindWhere(\n                               Expression<Func<T, bool>> predicate) {\n            return _objectSet.Where(predicate);\n        }\n        public T FindById(int id) {\n            return _objectSet.Single(o => o.Id == id);\n        }\n        public void Add(T newEntity) {\n            _objectSet.AddObject(newEntity);\n        }\n        public void Remove(T entity) {\n            _objectSet.DeleteObject(entity);\n        }\n        protected ObjectSet<T> _objectSet;\n    }\n```\n\n----------------------------------------\n\nTITLE: Required Attribute on Dependent Navigation in EF Core\nDESCRIPTION: This snippet shows how applying the `[Required]` attribute to the dependent navigation property (`Blog`) also makes the relationship required. This achieves the same effect as placing it on the foreign key property but focuses on the navigation property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/mapping-attributes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public string Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    public string BlogId { get; set; }\n\n    [Required]\n    public Blog Blog { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimize DbContext with Defaults (PowerShell)\nDESCRIPTION: This example shows how to use the Optimize-DbContext command with default settings, suitable for projects with a single DbContext.  It generates a compiled version of the model used by the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nOptimize-DbContext\n```\n\n----------------------------------------\n\nTITLE: Enabling NativeAOT Publishing in .csproj\nDESCRIPTION: This snippet shows how to enable NativeAOT publishing in your project file. Setting `<PublishAot>` to `true` instructs the .NET SDK to compile the application ahead-of-time.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/nativeaot-and-precompiled-queries.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <PublishAot>true</PublishAot>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Table Splitting Configuration C#\nDESCRIPTION: Configures table splitting between the `Order` and `DetailedOrder` entities within the `TableSplittingContext`.  It maps both entities to the same table named \"Orders\" and configures a relationship between them. It also maps the `Status` property of both entities to the same column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Order>(o =>\n    {\n        o.ToTable(\"Orders\");\n        o.HasKey(o => o.Id);\n\n        o.HasOne<DetailedOrder>().WithOne().HasForeignKey<DetailedOrder>(d => d.Id);\n        o.Property(o => o.Status).HasColumnName(\"Status\");\n    });\n\n    modelBuilder.Entity<DetailedOrder>(d =>\n    {\n        d.ToTable(\"Orders\");\n        d.Property(o => o.Status).HasColumnName(\"Status\");\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Create and Add Join Entity (EF Core)\nDESCRIPTION: Demonstrates how to explicitly create a join entity (PostTag) to associate a post with a tag and set the value of the 'TaggedBy' payload property.  Instead of relying on EF to automatically create the join entity, this creates the entity manually and adds it to the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar post = context.Posts.Single(e => e.Id == 3);\nvar tag = context.Tags.Single(e => e.Id == 1);\n\ncontext.Add(new PostTag()\n{\n    PostId = post.Id,\n    TagId = tag.Id,\n    TaggedBy = \"ajcvickers\"\n});\n\ncontext.SaveChanges();\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Defining In-Memory Query C#\nDESCRIPTION: Illustrates how to use ToInMemoryQuery in OnModelCreating to define a query for the CustomerDensities DbSet. It groups customers by the first three characters of their postcode, calculates the customer count for each group, and populates the CustomerDensity entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<CustomerDensity>()\n        .HasNoKey()\n        .ToInMemoryQuery(\n            () => Customers\n                .GroupBy(c => c.Address.Postcode.Substring(0, 3))\n                .Select(\n                    g =>\n                        new CustomerDensity\n                        {\n                            Postcode = g.Key,\n                            CustomerCount = g.Count()\n                        }));\n}\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many with Alternate Key\nDESCRIPTION: This C# code configures a one-to-many relationship in Entity Framework Core, specifying an alternate key on the `Blog` entity. `HasPrincipalKey` is used to define the `AlternateId` property as the principal key. Requires an instance of `ModelBuilder`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany(e => e.Posts)\n                    .WithOne(e => e.Blog)\n                    .HasPrincipalKey(e => e.AlternateId);\n            }\n```\n\n----------------------------------------\n\nTITLE: Accessing a Single Property (Non-Generic) - C#\nDESCRIPTION: This code snippet demonstrates how to access a single property of an entity using the non-generic `Property` method in Entity Framework Core. This is useful when the type of the entity or property is not known at compile-time.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar propertyEntry = context.Entry(blog).Property(\"Name\");\n```\n\n----------------------------------------\n\nTITLE: GroupBy with First Selection C#\nDESCRIPTION: This C# code snippet demonstrates using GroupBy to group people by their first name, then selecting the first person object from each group, including a calculated FullName property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nvar group = context.People\n    .Select(\n        p => new\n        {\n            p.FirstName,\n            FullName = p.FirstName + \" \" + p.MiddleInitial + \" \" + p.LastName\n        })\n    .GroupBy(p => p.FirstName)\n    .Select(g => g.First())\n    .First();\n```\n\n----------------------------------------\n\nTITLE: Adding a New Entity to the Context (Add Method) - C#\nDESCRIPTION: This code demonstrates how to add a new entity to the Entity Framework context using the `Add` method. The `Add` method places the entity into the `Added` state. The entity will be inserted into the database when `SaveChanges` is called. The code creates a new `Blog` instance and adds it to the `Blogs` DbSet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/entity-state.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = new Blog { Name = \"ADO.NET Blog\" };\n    context.Blogs.Add(blog);\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: stringValue.Contains with Ordinal .NET to SQL translation\nDESCRIPTION: Shows how stringValue.Contains with StringComparison.Ordinal in .NET corresponds to CONTAINS in SQL within the context of Entity Framework Core. This determines if a string contains a specified substring with case sensitive check. EF Core 9.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_19\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Contains(value, StringComparison.Ordinal)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[CONTAINS(@stringValue, @value, false)](/azure/cosmos-db/nosql/query/contains)\n```\n\n----------------------------------------\n\nTITLE: Using the Entity Framework Model in VB.NET\nDESCRIPTION: This code demonstrates how to use the Entity Framework model defined with the Fluent API in a VB.NET application.  It creates a new Department, saves it to the database using the SchoolContext, and then retrieves and displays all Departments from the database, ordered by name. It requires the Entity Framework library to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/vb.md#_snippet_3\n\nLANGUAGE: vb\nCODE:\n```\nImports System.Data.Entity\n\nModule Module1\n\n    Sub Main()\n\n        Using context As New SchoolContext()\n\n            ' Create and save a new Department.\n            Console.Write(\"Enter a name for a new Department: \")\n            Dim name = Console.ReadLine()\n\n            Dim department = New Department With { .Name = name, .StartDate = DateTime.Now }\n            context.Departments.Add(department)\n            context.SaveChanges()\n\n            ' Display all Departments from the database ordered by name\n            Dim departments =\n                From d In context.Departments\n                Order By d.Name\n                Select d\n\n            Console.WriteLine(\"All Departments in the database:\")\n            For Each department In departments\n                Console.WriteLine(department.Name)\n            Next\n\n        End Using\n\n        Console.WriteLine(\"Press any key to exit...\")\n        Console.ReadKey()\n\n    End Sub\n\nEnd Module\n```\n\n----------------------------------------\n\nTITLE: SQL Assertion Example - EF Core\nDESCRIPTION: This code demonstrates how to assert the generated SQL within an EF Core specification test. The base invocation executes the query and verifies results, while AssertSql ensures that the produced SQL matches the expected baseline.  ITestOutputHelper is utilized to facilitate debugging.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/writing-a-provider.md#_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic override async Task Where_simple(bool async)\n{\n    await base.Where_simple(async);\n\n    AssertSql(\n        \"SELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\\nFROM [Customers] AS [c]\\nWHERE [c].[City] = N'London'\");\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying with Substring C#\nDESCRIPTION: Illustrates a LINQ query that uses string.Substring with a single argument to select a substring of the customer's name. This example demonstrates the support for translating string.Substring with one argument to SQL in EF Core 6.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nvar result = context.Customers\n    .Select(a => new { Name = a.Name.Substring(3) })\n    .FirstOrDefault(a => a.Name == \"hur\");\n```\n\n----------------------------------------\n\nTITLE: Assign Foreign Key Value in C#\nDESCRIPTION: This code snippet demonstrates how to change a relationship by assigning a new value to a foreign key property. In this example, the `DepartmentID` of a `course` object is updated with the `DepartmentID` of a `newCourse` object. This is applicable when using foreign key associations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncourse.DepartmentID = newCourse.DepartmentID;\n```\n\n----------------------------------------\n\nTITLE: Update to InitialCreate Migration (by ID) with Connection PowerShell\nDESCRIPTION: Updates the database to the InitialCreate migration using the migration ID and specifies a custom connection string. This allows updating the database with a connection string different from the default one.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Database 20180904195021_InitialCreate -Connection your_connection_string\n```\n\n----------------------------------------\n\nTITLE: Define User Entity with Backing Field for Boolean\nDESCRIPTION: Defines a User entity with a non-nullable boolean property IsAuthorized, and a nullable backing field _isAuthorized.  This is useful when using a default value of true for the boolean.  The backing field pattern is crucial when bool properties use store-generated defaults, to allow inserting false.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic class User\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    private bool? _isAuthorized;\n    public bool IsAuthorized\n    {\n        get => _isAuthorized ?? true;\n        set => _isAuthorized = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DbSets for Persistent Classes - C#\nDESCRIPTION: This code snippet demonstrates how to use the `DbSet<>` generic type to specify which classes should be persisted in the database using Entity Framework Core. It defines DbSets for `Document`, `DocumentAudit`, `Metadata`, and `MetadataSummary` entities, enabling CRUD operations on these entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic DbSet<Document> Documents { get; set; }\n\npublic DbSet<DocumentAudit> DocumentAudits { get; set; }\n\npublic DbSet<Metadata> Metadata { get; set; }\n\npublic DbSet<MetadataSummary> MetadataSummary { get; set; }\n```\n\n----------------------------------------\n\nTITLE: GroupBy Query with LastName and Aggregation in EF Core 6 (C#)\nDESCRIPTION: This C# code snippet demonstrates grouping `People` entities by `LastName`, selecting the `LastName` as the key, counting the occurrences, and selecting the first and first two elements in each group using `FirstOrDefault()` and `Take(2)`. The resulting groups are then ordered by `LastName` in descending order. The `People` entity is expected to have properties such as `LastName`, `FirstName`, `Age`, `Id`, and `MiddleInitial`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nvar grouping = context.People\n    .GroupBy(i => i.LastName)\n    .Select(g => new { LastName = g.Key, Count = g.Count() , First = g.FirstOrDefault(), Take = g.Take(2)})\n    .OrderByDescending(e => e.LastName)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Exclude Property with NotMapped - C#\nDESCRIPTION: Demonstrates how to use the `[NotMapped]` data annotation to exclude a property from being mapped to a column in the database.  This is useful for properties that are calculated or derived and do not need to be persisted in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[NotMapped]\n    public string BlogCode\n    {\n        get\n        {\n            return Title.Substring(0, 1) + \":\" + BloggerName.Substring(0, 1);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Enable Write-Ahead Logging in SQLite\nDESCRIPTION: This SQL command enables write-ahead logging (WAL) for an SQLite database. WAL improves concurrency and reduces the likelihood of busy/locked errors.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nPRAGMA journal_mode = 'wal';\n```\n\n----------------------------------------\n\nTITLE: Lookup Tracked Entities by Foreign Key (EF Core)\nDESCRIPTION: This code shows how to retrieve multiple tracked entities based on a non-unique foreign key using the `GetEntries` method. The name of the foreign key property must be provided.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nvar postEntries = context.Posts.Local.GetEntries(nameof(Post.BlogId), 2);\n```\n\n----------------------------------------\n\nTITLE: Loading Entities from Stored Procedure - EF6 - C#\nDESCRIPTION: Executes a stored procedure (dbo.GetBlogs) to load entities into the context.  Entities are returned and tracked as if they were loaded using LINQ. The query is not executed until the results are enumerated with ToList().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/raw-sql.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blogs = context.Blogs.SqlQuery(\"dbo.GetBlogs\").ToList();\n}\n```\n\n----------------------------------------\n\nTITLE: Create SQL script for InitialCreate migration\nDESCRIPTION: This command generates a SQL script for the InitialCreate migration using dotnet ef migrations script command. It specifies the starting migration as 0 and the ending migration as InitialCreate.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_13\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations script 0 InitialCreate\n```\n\n----------------------------------------\n\nTITLE: Change Tracker Debug View - C#\nDESCRIPTION: Demonstrates how to use the change tracker debug view in EF Core to visualize the state of tracked entities.  The code calls DetectChanges to ensure changes are detected and then prints the debug view's long view to the console, providing detailed information about the tracked entities and their properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/index.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.ChangeTracker.DetectChanges();\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Add Initial Migration (Existing Schema) - PowerShell\nDESCRIPTION: Adds an initial migration that is empty (no-op) but includes a snapshot of the current model.  The `-IgnoreChanges` flag ensures that no schema changes are included in the migration. This approach is used when other databases already have the same schema as the local database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/existing-database.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-Migration InitialCreate –IgnoreChanges\n```\n\n----------------------------------------\n\nTITLE: Setting Current Values from Dictionary - C#\nDESCRIPTION: This snippet demonstrates how to update the current values of a tracked entity by copying values from a dictionary. It uses the `CurrentValues` property of the `DbEntityEntry` to iterate through the dictionary and set the corresponding property values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n\n    var newValues = new Dictionary<string, object>\n    {\n        { \"Name\", \"The New ADO.NET Blog\" },\n        { \"Url\", \"blogs.msdn.com/adonet\" },\n    };\n\n    var currentValues = context.Entry(blog).CurrentValues;\n\n    foreach (var propertyName in newValues.Keys)\n    {\n        currentValues[propertyName] = newValues[propertyName];\n    }\n\n    PrintValues(currentValues);\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext with Table Selection and Context Configuration (PowerShell)\nDESCRIPTION: This example scaffolds a DbContext, selecting specific tables and configuring the context directory, name, and namespace. It allows for fine-grained control over the generated code.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext \"Server=(localdb)\\mssqllocaldb;Database=Blogging;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Tables \"Blog\",\"Post\" -ContextDir Context -Context BlogContext -ContextNamespace New.Namespace\n```\n\n----------------------------------------\n\nTITLE: In-Memory View Definition C#\nDESCRIPTION: This code snippet shows how to define views using LINQ queries with the in-memory provider, using `ToInMemoryQuery`.  This allows testing scenarios that involve querying and filtering data through views.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-without-the-database.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// This code snippet is intentionally left blank. It is referencing external code.\n// Please view the source code to understand how ToInMemoryQuery is used.\n```\n\n----------------------------------------\n\nTITLE: TransactionScope Usage (Synchronous) - C#\nDESCRIPTION: This snippet demonstrates the usage of TransactionScope to manage a transaction encompassing both a direct SqlConnection operation and an Entity Framework operation. It ensures that both operations are committed together.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/transactions.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Data.SqlClient;\nusing System.Linq;\nusing System.Transactions;\n\nnamespace TransactionsExamples\n{\n    class TransactionsExample\n    {\n        static void UsingTransactionScope()\n        {\n            using (var scope = new TransactionScope(TransactionScopeOption.Required))\n            {\n                using (var conn = new SqlConnection(\"...\"))\n                {\n                    conn.Open();\n\n                    var sqlCommand = new SqlCommand();\n                    sqlCommand.Connection = conn;\n                    sqlCommand.CommandText =\n                        @\"UPDATE Blogs SET Rating = 5\" +\n                            \" WHERE Name LIKE '%Entity Framework%'\";\n                    sqlCommand.ExecuteNonQuery();\n\n                    using (var context =\n                        new BloggingContext(conn, contextOwnsConnection: false))\n                    {\n                        var query = context.Posts.Where(p => p.Blog.Rating > 5);\n                        foreach (var post in query)\n                        {\n                            post.Title += \"[Cool Blog]\";\n                        }\n                        context.SaveChanges();\n                    }\n                }\n\n                scope.Complete();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Script for Database Creation in C#\nDESCRIPTION: This snippet illustrates how to generate the SQL script that EnsureCreatedAsync would use to create the database. This can be useful for inspecting the generated schema or applying it manually.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/ensure-created.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar sql = dbContext.Database.GenerateCreateScript();\n```\n\n----------------------------------------\n\nTITLE: Defining a User Class in C#\nDESCRIPTION: This code defines a simple User class with Username and DisplayName properties.  It's initially missing a primary key, which will be addressed with Data Annotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class User\n{\n    public string Username { get; set; }\n    public string DisplayName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customers with Orders using LINQ in C#\nDESCRIPTION: This C# code retrieves all Customers who have at least one Order. It uses the 'Any()' method on the Orders collection to check for the existence of orders. This is used to demonstrate the SQL pruning feature of EF9.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nvar customers = await context.Customers.Where(o => o.Orders.Any()).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Ignore Non-Virtual Navigations (EF Core)\nDESCRIPTION: This snippet configures EF Core to ignore non-virtual navigation properties when using lazy-loading proxies using `UseLazyLoadingProxies` with the `ignoreNonVirtualNavigations: true` option. This mimics the behavior of classic EF6.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\noptionsBuilder.UseLazyLoadingProxies(ignoreNonVirtualNavigations: true);\n```\n\n----------------------------------------\n\nTITLE: Tagging a Query with EF Core (C#)\nDESCRIPTION: Shows how to tag an EF Core query using `TagWith`. This tag is then used by the interceptor to identify and modify the query.  The tag is added as a comment to the SQL generated by EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs1 = context.Blogs.TagWith(\"Use hint: robust plan\").ToList();\n```\n\n----------------------------------------\n\nTITLE: Setting default value for LeaseDate with SQL - C#\nDESCRIPTION: This configuration sets the default value for the `LeaseDate` property using a SQL expression (`getutcdate()`). This allows for dynamic default values generated by the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_119\n\nLANGUAGE: csharp\nCODE:\n```\nb.Property(e => e.LeaseDate).HasDefaultValueSql(\"getutcdate()\");\n```\n\n----------------------------------------\n\nTITLE: Tag Entity Class with Many-to-Many C#\nDESCRIPTION: Defines the Tag entity class with a collection of Post entities, representing the many-to-many relationship. Scaffolded by EF Core when a PostTag join table exists without a corresponding entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Tag\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = null!;\n    public string? Description { get; set; }\n\n    public virtual ICollection<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with Filters - C#\nDESCRIPTION: This code snippet shows the implementation for querying documents, allowing users to search on text, filter by author, and/or tag.  It prioritizes tag and author searches, which require loading fewer documents, and filters a text search result by tag/author for better efficiency. The `HashSet` is used to efficiently manage document sets based on the `Equals` and `GetHashCode` overrides.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<IEnumerable<DocumentSummary>> QueryDocumentsAsync(string? tag, string? author, string? text)\n{\n    HashSet<DocumentSummary>? documents = null;\n\n    if (!string.IsNullOrWhiteSpace(tag))\n    {\n        var tagMetadata = await _context.FindMetadataAsync<TagMetadata>(tag);\n        if (tagMetadata == null)\n        {\n            return Array.Empty<DocumentSummary>();\n        }\n\n        documents = tagMetadata.DocumentSummaries;\n\n        if (!string.IsNullOrWhiteSpace(author))\n        {\n            var authorMetadata = await _context.FindMetadataAsync<AuthorMetadata>(author);\n            if (authorMetadata == null)\n            {\n                return Array.Empty<DocumentSummary>();\n            }\n\n            documents.IntersectWith(authorMetadata.DocumentSummaries);\n\n            if (!string.IsNullOrWhiteSpace(text))\n            {\n                var textResults = await SearchDocumentsAsync(text);\n                documents.IntersectWith(textResults);\n            }\n        }\n        else if (!string.IsNullOrWhiteSpace(text))\n        {\n            var textResults = await SearchDocumentsAsync(text);\n            documents.IntersectWith(textResults);\n        }\n    }\n    else if (!string.IsNullOrWhiteSpace(author))\n    {\n        var authorMetadata = await _context.FindMetadataAsync<AuthorMetadata>(author);\n        if (authorMetadata == null)\n        {\n            return Array.Empty<DocumentSummary>();\n        }\n\n        documents = authorMetadata.DocumentSummaries;\n\n        if (!string.IsNullOrWhiteSpace(text))\n        {\n            var textResults = await SearchDocumentsAsync(text);\n            documents.IntersectWith(textResults);\n        }\n    }\n    else if (!string.IsNullOrWhiteSpace(text))\n    {\n        return await SearchDocumentsAsync(text);\n    }\n\n    return documents ?? Array.Empty<DocumentSummary>();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Values Using Property Method - C#\nDESCRIPTION: This example shows how to set entity property values using the `Property` method of the `DbEntityEntry`. It utilizes a dictionary to store the new values and then iterates through the dictionary to update the entity's properties, including complex properties accessed through dotted names.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var user = context.Users.Find(\"johndoe1987\");\n\n    var newValues = new Dictionary<string, object>\n    {\n        { \"Name\", \"John Doe\" },\n        { \"Location.City\", \"Redmond\" },\n        { \"Location.State.Name\", \"Washington\" },\n        { \"Location.State.Code\", \"WA\" },\n    };\n\n    var entry = context.Entry(user);\n\n    foreach (var propertyName in newValues.Keys)\n    {\n        entry.Property(propertyName).CurrentValue = newValues[propertyName];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define ProductContext class using Code First in C#\nDESCRIPTION: This class derives from DbContext and exposes DbSet properties for Category and Product entities. It allows Entity Framework to manage the entities and interact with the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/winforms.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n    using System;\n    using System.Collections.Generic;\n    using System.Data.Entity;\n    using System.Linq;\n    using System.Text;\n\n    namespace WinFormswithEFSample\n    {\n        public class ProductContext : DbContext\n        {\n            public DbSet<Category> Categories { get; set; }\n            public DbSet<Product> Products { get; set; }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Halflings at a Given Level - SQL\nDESCRIPTION: The generated SQL query retrieves the Id, Name, PathFromPatriarch, and YearOfBirth from the Halflings table where the level obtained from the PathFromPatriarch is equal to the provided level parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_70\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch].GetLevel() = @__level_0\n```\n\n----------------------------------------\n\nTITLE: Define One-to-Many Relationship with No Navigation to Dependents\nDESCRIPTION: This C# code defines a one-to-many relationship between `Blog` and `Post` entities. The `Blog` entity lacks a navigation property to the `Post` entity. The `Post` entity has a foreign key property `BlogId` and a navigation property `Blog` pointing back to the principal. Requires Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n        // Principal (parent)\n        public class Blog\n        {\n            public int Id { get; set; }\n        }\n\n        // Dependent (child)\n        public class Post\n        {\n            public int Id { get; set; }\n            public int BlogId { get; set; }                              // Required foreign key property\n            public Blog Blog { get; set; } = null!;                      // Required reference navigation to principal\n        }\n```\n\n----------------------------------------\n\nTITLE: Define Repository Interface C#\nDESCRIPTION: This code snippet defines an interface for a blogging repository, `IBloggingRepository`. This interface is used to abstract away the data access layer from the rest of the application, enabling easier testing with stubs or mocks.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-without-the-database.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IBloggingRepository\n{\n    Task<Blog> GetBlogByNameAsync(string name);\n    IAsyncEnumerable<Blog> GetAllBlogsAsync();\n    Task AddBlogAsync(Blog blog);\n}\n```\n\n----------------------------------------\n\nTITLE: TPH: All Types Query - SQL\nDESCRIPTION: SQL query generated by Entity Framework Core when using TPH to retrieve all entities in the hierarchy. It selects all columns from the 'Animals' table without any filtering.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_52\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Id], [a].[Discriminator], [a].[FoodId], [a].[Name], [a].[Species], [a].[Value], [a].[FavoriteAnimalId], [a].[Vet], [a].[EducationLevel], [a].[FavoriteToy]\nFROM [Animals] AS [a]\n```\n\n----------------------------------------\n\nTITLE: Association Element Example (No Foreign Keys) - CSDL\nDESCRIPTION: This example illustrates an Association element in CSDL that defines the CustomerOrders association when foreign keys are not exposed on the Customer and Order entity types. The Multiplicity values for each End of the association indicate the relationship cardinality. The OnDelete element specifies a cascading delete behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"CustomerOrders\">\n   <End Type=\"ExampleModel.Customer\" Role=\"Customer\" Multiplicity=\"1\" >\n         <OnDelete Action=\"Cascade\" />\n   </End>\n   <End Type=\"ExampleModel.Order\" Role=\"Order\" Multiplicity=\"*\" />\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Using Null-Forgiving Operator with EF.Functions.Unhex C#\nDESCRIPTION: This code snippet demonstrates how to use the null-forgiving operator to assert that the EF.Functions.Unhex() method will never return null when you are certain the input is a valid hexadecimal string. It retrieves binary data from the Blogs table by applying the Unhex function to the HexString property and converting the result to a list.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar binaryData = await context.Blogs.Select(b => EF.Functions.Unhex(b.HexString)!).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Using Functions with Nullability Propagation in Queries (C#)\nDESCRIPTION: This C# code demonstrates how to use the configured `ConcatStrings` functions in LINQ queries. The example shows how EF Core generates different SQL based on whether `PropagatesNullability` is used, influencing how null checks are performed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar query1 = context.Blogs\n    .Where(b => context.ConcatStrings1(b.Url, b.Rating.ToString()) != \"Lorem ipsum...\");\n\nvar query2 = context.Blogs\n    .Where(b => context.ConcatStrings2(b.Url, b.Rating.ToString()) != \"Lorem ipsum...\");\n```\n\n----------------------------------------\n\nTITLE: SQL for Selecting Posts with Views SQL\nDESCRIPTION: This SQL code represents the generated SQL query for selecting posts with more than 3000 views and projecting data from the JSON column.  It extracts the `Views`, `TopSearches` and `Updates` properties from the JSON `Metadata` column using `JSON_VALUE` and `JSON_QUERY`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Name], CAST(JSON_VALUE([p].[Metadata],'$.Views') AS int), JSON_QUERY([p].[Metadata],'$.TopSearches'), [p].[Id], JSON_QUERY([p].[Metadata],'$.Updates')\nFROM [Posts] AS [p]\nLEFT JOIN [Authors] AS [a] ON [p].[AuthorId] = [a].[Id]\nWHERE CAST(JSON_VALUE([p].[Metadata],'$.Views') AS int) > 3000\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext with EF Core Tools dotnetcli\nDESCRIPTION: Uses the `dotnet ef dbcontext scaffold` command to reverse engineer a database schema into EF Core entity types and DbContext.  Specifies the data source and the provider (Microsoft.EntityFrameworkCore.SqlServer). Requires the EF Core Tools package to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_48\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold \"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=BloggingWithNRTs\" Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Define Namespace Aliases for EF Core and EF6\nDESCRIPTION: This code snippet demonstrates how to define namespace aliases to distinguish between types with the same names in EF Core and EF6. It allows you to use both versions of Entity Framework in the same code file without ambiguity. Specifically, it imports the EF Core DbContext and creates an alias `EF6` for the EF6 namespace, allowing you to reference the EF6 DbContext as `EF6.DbContext`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/efcore-and-ef6/side-by-side.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore; // use DbContext for EF Core\nusing EF6 = System.Data.Entity; // use EF6.DbContext for the EF6 version\n```\n\n----------------------------------------\n\nTITLE: Inserting or Updating a Single Entity\nDESCRIPTION: This snippet demonstrates how to either insert or update a single entity based on whether the key is set.  It uses the `Add` method to insert and the `Update` method to update.  It requires an entity with an auto-generated key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static void InsertAndUpdateSingleEntity(BloggingContext context, Blog blog)\n{\n    if (blog.BlogId == 0)\n    {\n        context.Add(blog);\n    }\n    else\n    {\n        context.Update(blog);\n    }\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing INotifyPropertyChanging and INotifyPropertyChanged - C#\nDESCRIPTION: This C# code implements the INotifyPropertyChanging and INotifyPropertyChanged interfaces in a Blog entity. This enables the entity to automatically notify EF Core when property values change. The Id and Name properties raise PropertyChanging and PropertyChanged events before and after their values are set. This is necessary for notification entities to function correctly with EF Core's change tracking.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog : INotifyPropertyChanging, INotifyPropertyChanged\n{\n    public event PropertyChangingEventHandler PropertyChanging;\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private int _id;\n    public int Id\n    {\n        get => _id;\n        set\n        {\n            PropertyChanging?.Invoke(this, new PropertyChangingEventArgs(nameof(Id)));\n            _id = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Id)));\n        }\n    }\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            PropertyChanging?.Invoke(this, new PropertyChangingEventArgs(nameof(Name)));\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n\n    public IList<Post> Posts { get; } = new ObservableCollection<Post>();\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold EF Core Model from SQL Server LocalDB (PowerShell)\nDESCRIPTION: This example shows how to use the `Scaffold-DbContext` cmdlet to generate a model from a Blogging database on a SQL Server LocalDB instance. It specifies the connection string and uses the `Microsoft.EntityFrameworkCore.SqlServer` provider. This command assumes that the necessary EF Core NuGet packages are already installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/efcore-and-ef6/porting/port-edmx.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nScaffold-DbContext \"Server=(localdb)\\mssqllocaldb;Database=Blogging;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Add Blog Rating Migration Code\nDESCRIPTION: This C# code defines a migration to add a 'Rating' column to the 'Blogs' table with a default value of 3.\nThe 'Up' method adds the column with the specified default value, while the 'Down' method removes the column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/automatic.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MigrationsAutomaticDemo.Migrations\n{\n    using System;\n    using System.Data.Entity.Migrations;\n\n    public partial class AddBlogRating : DbMigration\n    {\n        public override void Up()\n        {\n            AddColumn(\"Blogs\", \"Rating\", c => c.Int(nullable: false, defaultValue: 3));\n        }\n\n        public override void Down()\n        {\n            DropColumn(\"Blogs\", \"Rating\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Classes for Validation - C#\nDESCRIPTION: This code defines two simple classes, Blog and Post, which will be used to demonstrate the various validation techniques in Entity Framework 6. The classes contain properties like Id, Title, BloggerName, DateCreated, Content and Posts. These properties will be validated using Data Annotations, Fluent API, and IValidatableObject.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string BloggerName { get; set; }\n    public DateTime DateCreated { get; set; }\n    public virtual ICollection<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public DateTime DateCreated { get; set; }\n    public string Content { get; set; }\n    public int BlogId { get; set; }\n    public ICollection<Comment> Comments { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Stored Procedures and Parameters - C#\nDESCRIPTION: This example demonstrates renaming all three stored procedures and their parameters for the Blog entity using chained Fluent API calls. It configures the names of the stored procedures and the parameters for BlogId, Name, and Url properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures(s =>\n    s.Update(u => u.HasName(\"modify_blog\")\n                   .Parameter(b => b.BlogId, \"blog_id\")\n                   .Parameter(b => b.Name, \"blog_name\")\n                   .Parameter(b => b.Url, \"blog_url\"))\n     .Delete(d => d.HasName(\"delete_blog\")\n                   .Parameter(b => b.BlogId, \"blog_id\"))\n     .Insert(i => i.HasName(\"insert_blog\")\n                   .Parameter(b => b.Name, \"blog_name\")\n                   .Parameter(b => b.Url, \"blog_url\")));\n```\n\n----------------------------------------\n\nTITLE: Setting Column Data Types with Data Annotations - C#\nDESCRIPTION: This code snippet demonstrates how to specify the exact data type for a column in the database using the `[Column]` data annotation in Entity Framework Core. It configures the `Url` property as a non-unicode string with maximum length and `Rating` as decimal with precision and scale. The dependency is System.ComponentModel.DataAnnotations.Schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations.Schema;\n\npublic class Post\n{\n    public int PostId { get; set; }\n    [Column(TypeName = \"varchar(200)\")]\n    public string Url { get; set; }\n\n    [Column(TypeName = \"decimal(5, 2)\")]\n    public decimal Rating { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Definition With Column Ordering (C#)\nDESCRIPTION: This C# code defines a data model with explicit column ordering using the `ColumnAttribute`'s `Order` property. This attribute can be used to control the order in which columns are created in the database table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_155\n\nLANGUAGE: C#\nCODE:\n```\npublic class EntityBase\n{\n    [Column(Order = 1)]\n    public int Id { get; set; }\n\n    [Column(Order = 98)]\n    public DateTime UpdatedOn { get; set; }\n\n    [Column(Order = 99)]\n    public DateTime CreatedOn { get; set; }\n}\n\npublic class PersonBase : EntityBase\n{\n    [Column(Order = 2)]\n    public string FirstName { get; set; }\n\n    [Column(Order = 3)]\n    public string LastName { get; set; }\n}\n\npublic class Employee : PersonBase\n{\n    [Column(Order = 20)]\n    public string Department { get; set; }\n\n    [Column(Order = 21)]\n    public decimal AnnualSalary { get; set; }\n\n    public Address Address { get; set; }\n}\n\n[Owned]\npublic class Address\n{\n    [Column(\"House\", Order = 10)]\n    public string House { get; set; }\n\n    [Column(\"Street\", Order = 11)]\n    public string Street { get; set; }\n\n    [Column(\"City\", Order = 12)]\n    public string City { get; set; }\n\n    [Required]\n    [Column(\"Postcode\", Order = 13)]\n    public string Postcode { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Query Performance Options with Northwind Model in C#\nDESCRIPTION: This C# code demonstrates various methods for querying the Northwind database using Entity Framework, including LINQ with and without context creation, LINQ with no tracking, compiled queries, object queries, entity commands, and execute store queries.  It leverages the NorthwindEntities context and Product entity. The goal is to compare the performance of these different approaches.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.Common;\nusing System.Data.Entity.Infrastructure;\nusing System.Data.EntityClient;\nusing System.Data.Objects;\nusing System.Linq;\n\nnamespace QueryComparison\n{\n    public partial class NorthwindEntities : ObjectContext\n    {\n        private static readonly Func<NorthwindEntities, string, IQueryable<Product>> productsForCategoryCQ = CompiledQuery.Compile(\n            (NorthwindEntities context, string categoryName) =>\n                context.Products.Where(p => p.Category.CategoryName == categoryName)\n                );\n\n        public IQueryable<Product> InvokeProductsForCategoryCQ(string categoryName)\n        {\n            return productsForCategoryCQ(this, categoryName);\n        }\n    }\n\n    public class QueryTypePerfComparison\n    {\n        private static string entityConnectionStr = @\"metadata=res://*/Northwind.csdl|res://*/Northwind.ssdl|res://*/Northwind.msl;provider=System.Data.SqlClient;provider connection string='data source=.;initial catalog=Northwind;integrated security=True;multipleactiveresultsets=True;App=EntityFramework'\";\n\n        public void LINQIncludingContextCreation()\n        {\n            using (NorthwindEntities context = new NorthwindEntities())\n            {\n                var q = context.Products.Where(p => p.Category.CategoryName == \"Beverages\");\n                q.ToList();\n            }\n        }\n\n        public void LINQNoTracking()\n        {\n            using (NorthwindEntities context = new NorthwindEntities())\n            {\n                context.Products.MergeOption = MergeOption.NoTracking;\n\n                var q = context.Products.Where(p => p.Category.CategoryName == \"Beverages\");\n                q.ToList();\n            }\n        }\n\n        public void CompiledQuery()\n        {\n            using (NorthwindEntities context = new NorthwindEntities())\n            {\n                var q = context.InvokeProductsForCategoryCQ(\"Beverages\");\n                q.ToList();\n            }\n        }\n\n        public void ObjectQuery()\n        {\n            using (NorthwindEntities context = new NorthwindEntities())\n            {\n                ObjectQuery<Product> products = context.Products.Where(\"it.Category.CategoryName = 'Beverages'\");\n                products.ToList();\n            }\n        }\n\n        public void EntityCommand()\n        {\n            using (EntityConnection eConn = new EntityConnection(entityConnectionStr))\n            {\n                eConn.Open();\n                EntityCommand cmd = eConn.CreateCommand();\n                cmd.CommandText = \"Select p From NorthwindEntities.Products As p Where p.Category.CategoryName = 'Beverages'\";\n\n                using (EntityDataReader reader = cmd.ExecuteReader(CommandBehavior.SequentialAccess))\n                {\n                    List<Product> productsList = new List<Product>();\n                    while (reader.Read())\n                    {\n                        DbDataRecord record = (DbDataRecord)reader.GetValue(0);\n\n                        // 'materialize' the product by accessing each field and value. Because we are materializing products, we won't have any nested data readers or records.\n                        int fieldCount = record.FieldCount;\n\n                        // Treat all products as Product, even if they are the subtype DiscontinuedProduct.\n                        Product product = new Product();\n\n                        product.ProductID = record.GetInt32(0);\n                        product.ProductName = record.GetString(1);\n                        product.SupplierID = record.GetInt32(2);\n                        product.CategoryID = record.GetInt32(3);\n                        product.QuantityPerUnit = record.GetString(4);\n                        product.UnitPrice = record.GetDecimal(5);\n                        product.UnitsInStock = record.GetInt16(6);\n                        product.UnitsOnOrder = record.GetInt16(7);\n                        product.ReorderLevel = record.GetInt16(8);\n                        product.Discontinued = record.GetBoolean(9);\n\n                        productsList.Add(product);\n                    }\n                }\n            }\n        }\n\n        public void ExecuteStoreQuery()\n        {\n            using (NorthwindEntities context = new NorthwindEntities())\n            {\n                ObjectResult<Product> beverages = context.ExecuteStoreQuery<Product>(\n@\"    SELECT        P.ProductID, P.ProductName, P.SupplierID, P.CategoryID, P.QuantityPerUnit, P.UnitPrice, P.UnitsInStock, P.UnitsOnOrder, P.ReorderLevel, P.Discontinued\n    FROM            Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID\n    WHERE        (C.CategoryName = 'Beverages')\"\n);\n                beverages.ToList();\n            }\n        }\n\n        public void ExecuteStoreQueryDbContext()\n        {\n            using (var context = new QueryComparison.DbC.NorthwindEntities())\n            {\n                var beverages = context.Database.SqlQuery<QueryComparison.DbC.Product>(\n@\"    SELECT        P.ProductID, P.ProductName, P.SupplierID, P.CategoryID, P.QuantityPerUnit, P.UnitPrice, P.UnitsInStock, P.UnitsOnOrder, P.ReorderLevel, P.Discontinued\n    FROM            Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID\n    WHERE        (C.CategoryName = 'Beverages')\"\n);\n                beverages.ToList();\n            }\n        }\n\n        public void ExecuteStoreQueryDbSet()\n        {\n            using (var context = new QueryComparison.DbC.NorthwindEntities())\n            {\n                var beverages = context.Products.SqlQuery(\n@\"    SELECT        P.ProductID, P.ProductName, P.SupplierID, P.CategoryID, P.QuantityPerUnit, P.UnitPrice, P.UnitsInStock, P.UnitsOnOrder, P.ReorderLevel, P.Discontinued\n    FROM            Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID\n    WHERE        (C.CategoryName = 'Beverages')\"\n);\n                beverages.ToList();\n            }\n        }\n\n        public void LINQIncludingContextCreationDbContext()\n        {\n            using (var context = new QueryComparison.DbC.NorthwindEntities())\n            {\n                var q = context.Products.Where(p => p.Category.CategoryName == \"Beverages\");\n                q.ToList();\n            }\n        }\n\n        public void LINQNoTrackingDbContext()\n        {\n            using (var context = new QueryComparison.DbC.NorthwindEntities())\n            {\n                var q = context.Products.AsNoTracking().Where(p => p.Category.CategoryName == \"Beverages\");\n                q.ToList();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Analytical Store Time-to-Live for an Entity Type in EF Core\nDESCRIPTION: This snippet shows how to configure the time-to-live for the analytical store of an entity type in Azure Cosmos DB using EF Core. It uses the HasAnalyticalStoreTimeToLive method to set the TTL for the analytical store.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Hamlet>().HasAnalyticalStoreTimeToLive(3600);\n```\n\n----------------------------------------\n\nTITLE: SqlQuery for Function C#\nDESCRIPTION: Demonstrates using `SqlQuery` to execute a database function ('GetPostsPublishedAfter') and retrieve the results into 'PostSummary' objects. The `IQueryable` returned is composed upon using LINQ to apply additional filtering.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nvar start = new DateOnly(2022, 1, 1);\nvar end = new DateOnly(2023, 1, 1);\nvar summariesFromFunc =\n    await context.Database.SqlQuery<PostSummary>(\n            @$\"SELECT * FROM GetPostsPublishedAfter({start})\")\n        .Where(p => p.PublishedOn < end)\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Entity Splitting Configuration C#\nDESCRIPTION: Configures entity splitting for the `Customer` entity.  It splits the entity across the `Customers`, `PhoneNumbers`, and `Addresses` tables, mapping properties to specific tables.  It also renames the `Id` column to `CustomerId` in the `PhoneNumbers` and `Addresses` tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Customer>(\n    entityBuilder =>\n    {\n        entityBuilder\n            .ToTable(\"Customers\")\n            .SplitToTable(\n                \"PhoneNumbers\",\n                tableBuilder =>\n                {\n                    tableBuilder.Property(customer => customer.Id).HasColumnName(\"CustomerId\");\n                    tableBuilder.Property(customer => customer.PhoneNumber);\n                })\n            .SplitToTable(\n                \"Addresses\",\n                tableBuilder =>\n                {\n                    tableBuilder.Property(customer => customer.Id).HasColumnName(\"CustomerId\");\n                    tableBuilder.Property(customer => customer.Street);\n                    tableBuilder.Property(customer => customer.City);\n                    tableBuilder.Property(customer => customer.PostCode);\n                    tableBuilder.Property(customer => customer.Country);\n                });\n    });\n```\n\n----------------------------------------\n\nTITLE: Negated Bool Projection - SQL (EF9)\nDESCRIPTION: This SQL query showcases the simplified translation in EF Core 9, using the bitwise NOT (`~`) operator directly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_69\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Title], ~[p].[Archived] AS [Active]\nFROM [Posts] AS [p]\n```\n\n----------------------------------------\n\nTITLE: Call Defining Query - C#\nDESCRIPTION: This C# code snippet demonstrates how to execute the defining query using the GradeReport entity type. It retrieves the first record from the GradeReports entity set using LINQ and prints the student's first name, last name, and grade to the console. It requires a reference to the Entity Framework context (SchoolEntities).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/defining-query.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n    using (var context = new SchoolEntities())\n    {\n        var report = context.GradeReports.FirstOrDefault();\n        Console.WriteLine(\"{0} {1} got {2}\",\n            report.FirstName, report.LastName, report.Grade);\n    }\n```\n\n----------------------------------------\n\nTITLE: TPC Mapping with Different Column Names - C#\nDESCRIPTION: This C# code configures the mapping for TPC inheritance. The Id and Breed properties are mapped to different column names for Cats and Dogs, specifically CatId/DogId and CatBreed/DogBreed. This demonstrates mapping multiple CLR properties to different column names across multiple tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_161\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Animal>().UseTpcMappingStrategy();\n\nmodelBuilder.Entity<Cat>()\n    .ToTable(\n        \"Cats\",\n        builder =>\n        {\n            builder.Property(cat => cat.Id).HasColumnName(\"CatId\");\n            builder.Property(cat => cat.Breed).HasColumnName(\"CatBreed\");\n        });\n\nmodelBuilder.Entity<Dog>()\n    .ToTable(\n        \"Dogs\",\n        builder =>\n        {\n            builder.Property(dog => dog.Id).HasColumnName(\"DogId\");\n            builder.Property(dog => dog.Breed).HasColumnName(\"DogBreed\");\n        });\n```\n\n----------------------------------------\n\nTITLE: Define Animals Hierarchy using C#\nDESCRIPTION: This code defines an abstract base class `Animal` and several concrete classes (`Cat`, `Dog`, `FarmAnimal`, `Human`) that inherit from it. It demonstrates a simple class hierarchy that will be mapped using the Table-Per-Concrete-Type inheritance strategy in EF Core. It contains properties for each class including some related navigation properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class Animal\n    {\n        protected Animal(string name)\n        {\n            Name = name;\n        }\n\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public abstract string Species { get; }\n\n        public Food? Food { get; set; }\n    }\n\n    public abstract class Pet : Animal\n    {\n        protected Pet(string name)\n            : base(name)\n        {\n        }\n\n        public string? Vet { get; set; }\n\n        public ICollection<Human> Humans { get; } = new List<Human>();\n    }\n\n    public class FarmAnimal : Animal\n    {\n        public FarmAnimal(string name, string species)\n            : base(name)\n        {\n            Species = species;\n        }\n\n        public override string Species { get; }\n\n        [Precision(18, 2)]\n        public decimal Value { get; set; }\n\n        public override string ToString()\n            => $\"Farm animal '{Name}' ({Species}/{Id}) worth {Value:C} eats {Food?.ToString() ?? \\\"<Unknown>\\\"}\";\n    }\n\n    public class Cat : Pet\n    {\n        public Cat(string name, string educationLevel)\n            : base(name)\n        {\n            EducationLevel = educationLevel;\n        }\n\n        public string EducationLevel { get; set; }\n        public override string Species => \"Felis catus\";\n\n        public override string ToString()\n            => $\"Cat '{Name}' ({Species}/{Id}) with education '{EducationLevel}' eats {Food?.ToString() ?? \\\"<Unknown>\\\"}\";\n    }\n\n    public class Dog : Pet\n    {\n        public Dog(string name, string favoriteToy)\n            : base(name)\n        {\n            FavoriteToy = favoriteToy;\n        }\n\n        public string FavoriteToy { get; set; }\n        public override string Species => \"Canis familiaris\";\n\n        public override string ToString()\n            => $\"Dog '{Name}' ({Species}/{Id}) with favorite toy '{FavoriteToy}' eats {Food?.ToString() ?? \\\"<Unknown>\\\"}\";\n    }\n\n    public class Human : Animal\n    {\n        public Human(string name)\n            : base(name)\n        {\n        }\n\n        public override string Species => \"Homo sapiens\";\n\n        public Animal? FavoriteAnimal { get; set; }\n        public ICollection<Pet> Pets { get; } = new List<Pet>();\n\n        public override string ToString()\n            => $\"Human '{Name}' ({Species}/{Id}) with favorite animal '{FavoriteAnimal?.Name ?? \\\"<Unknown>\\\"}'\" +\n               $\" eats {Food?.ToString() ?? \\\"<Unknown>\\\"}\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure DbSet for Keyless Entity Type (C#)\nDESCRIPTION: This snippet demonstrates how to configure a `DbSet<T>` property in the `DbContext` for the keyless entity type. This allows you to query the keyless entity type as if it were a regular entity. It registers the keyless entity type with the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keyless-entity-types.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace KeylessEntityTypes\n{\n    public class MyContext : DbContext\n    {\n        public MyContext(DbContextOptions<MyContext> options)\n            : base(options)\n        {\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<MostPopularBlogs>().HasNoKey().ToView(\"MostPopularBlogsView\");\n        }\n\n        public DbSet<Blog> Blogs { get; set; }\n        public DbSet<Post> Posts { get; set; }\n\n        public DbSet<MostPopularBlogs> MostPopularBlogs { get; set; }\n\n    }\n\n    public class MostPopularBlogs\n    {\n        public string BlogName { get; set; }\n        public int PostCount { get; set; }\n    }\n\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Sample usage - requires a database connection and setup\n            var optionsBuilder = new DbContextOptionsBuilder<MyContext>();\n            optionsBuilder.UseSqlServer(\"YourConnectionStringHere\"); // Replace with your actual connection string\n\n            using (var context = new MyContext(optionsBuilder.Options))\n            {\n                var popularBlogs = context.MostPopularBlogs.ToList();\n\n                foreach (var blog in popularBlogs)\n                {\n                    Console.WriteLine($\"Blog: {blog.BlogName}, Post Count: {blog.PostCount}\");\n                }\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Update Database (Existing Schema) - PowerShell\nDESCRIPTION: Applies the specified migration to the database. In this case, it applies the empty 'InitialCreate' migration, which only adds a row to the '__MigrationsHistory' table to indicate that the migration has been applied.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/existing-database.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Database\n```\n\n----------------------------------------\n\nTITLE: Configuring a Composite Foreign Key C#\nDESCRIPTION: This example demonstrates configuring a composite primary key on the Department entity consisting of DepartmentID and Name properties, and then setting up a composite foreign key on the Course entity referencing the Department entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Composite primary key\nmodelBuilder.Entity<Department>()\n.HasKey(d => new { d.DepartmentID, d.Name });\n\n// Composite foreign key\nmodelBuilder.Entity<Course>()  \n    .HasRequired(c => c.Department)  \n    .WithMany(d => d.Courses)\n    .HasForeignKey(d => new { d.DepartmentID, d.DepartmentName });\n```\n\n----------------------------------------\n\nTITLE: Create Tables SQL\nDESCRIPTION: SQL script to create three tables, `Customers`, `PhoneNumbers`, and `Addresses`, used for entity splitting demonstration. Includes primary key and foreign key constraints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Customers] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Customers] PRIMARY KEY ([Id])\n);\n    \nCREATE TABLE [PhoneNumbers] (\n    [CustomerId] int NOT NULL,\n    [PhoneNumber] nvarchar(max) NULL,\n    CONSTRAINT [PK_PhoneNumbers] PRIMARY KEY ([CustomerId]),\n    CONSTRAINT [FK_PhoneNumbers_Customers_CustomerId] FOREIGN KEY ([CustomerId]) REFERENCES [Customers] ([Id]) ON DELETE CASCADE\n);\n\nCREATE TABLE [Addresses] (\n    [CustomerId] int NOT NULL,\n    [Street] nvarchar(max) NOT NULL,\n    [City] nvarchar(max) NOT NULL,\n    [PostCode] nvarchar(max) NULL,\n    [Country] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Addresses] PRIMARY KEY ([CustomerId]),\n    CONSTRAINT [FK_Addresses_Customers_CustomerId] FOREIGN KEY ([CustomerId]) REFERENCES [Customers] ([Id]) ON DELETE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: SqlQuery for Stored Procedure C#\nDESCRIPTION: Demonstrates using `SqlQuery` to execute a stored procedure ('GetRecentPostSummariesProc') and retrieve the results into 'PostSummary' objects. Highlights that composition is generally not supported with stored procedures on most databases.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nvar summariesFromStoredProc =\n    await context.Database.SqlQuery<PostSummary>(\n            @$\"exec GetRecentPostSummariesProc\")\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Create Posts and Tags Tables for Unidirectional Many-to-Many (SQL)\nDESCRIPTION: Creates Posts and Tags tables, along with the PostTag join table. The PostTag table includes foreign keys referencing Posts and Tags, and composite primary keys, with cascade delete configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"Posts\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Posts\" PRIMARY KEY AUTOINCREMENT);\n\nCREATE TABLE \"Tags\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Tags\" PRIMARY KEY AUTOINCREMENT);\n\nCREATE TABLE \"PostTag\" (\n    \"PostId\" INTEGER NOT NULL,\n    \"TagsId\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostId\", \"TagsId\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostId\" FOREIGN KEY (\"PostId\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagsId\" FOREIGN KEY (\"TagsId\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Registering DbProviderFactory in Code (C#)\nDESCRIPTION: Demonstrates how to register the `DbProviderFactory` in code, specifically for .NET 6 or later apps when using App.Config. This step is necessary after removing the `<system.data>` section from the configuration file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/microsoft-ef6-sqlserver.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nDbProviderFactories.RegisterFactory(MicrosoftSqlProviderServices.ProviderInvariantName, Microsoft.Data.SqlClient.SqlClientFactory.Instance);\n```\n\n----------------------------------------\n\nTITLE: Override Global Split Query with AsSingleQuery - C#\nDESCRIPTION: This C# code snippet shows how to override the global split query configuration and force a specific query to execute as a single query using `AsSingleQuery`.  This is useful when a single query is more efficient for a particular scenario.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\noptions.UseSqlServer(connectionString)\n               .UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery);\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await context.Blogs.AsSingleQuery().ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SQL Update for Immutable Address\nDESCRIPTION: This SQL code shows the database update statements generated when updating the customer's address with a new immutable instance. Only the `Customers` table is updated, and only the columns with changed values are updated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE [Customers] SET [Address_Line1] = @p0\nOUTPUT 1\nWHERE [Id] = @p1;\n```\n\n----------------------------------------\n\nTITLE: Normal Querying and Deletion\nDESCRIPTION: This code shows how normal querying and deletion operations are performed on temporal tables. It demonstrates querying for a specific employee and then deleting that employee from the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar employee = context.Employees.Single(e => e.Name == \"Rainbow Dash\");\ncontext.Remove(employee);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Spatial Aggregate Function - SQL Server Translation\nDESCRIPTION: This SQL code is the translated query for the `GeometryCombiner.Combine()` example. It demonstrates the use of the `geography::CollectionAggregate()` function in SQL Server to combine the locations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_120\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Owner] AS [Id], geography::CollectionAggregate([c].[Location]) AS [Combined]\nFROM [Caches] AS [c]\nWHERE [c].[Location].Long < -90.0E0\nGROUP BY [c].[Owner]\n```\n\n----------------------------------------\n\nTITLE: Required Data Annotation - C#\nDESCRIPTION: This code snippet shows how to use the `Required` data annotation from the `System.ComponentModel.DataAnnotations` namespace to enforce that the Title property of the Blog class must have a value. This annotation provides both client-side and server-side validation in ASP.NET MVC applications using Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Required]\npublic string Title { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Register Singleton Context Factory - C#\nDESCRIPTION: Registers a pooling context factory as a Singleton service.  The Singleton lifetime ensures that the context factory is created only once and shared across the application. This is a prerequisite for using DbContext pooling in ASP.NET Core with tenant context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddSingleton(sp =>\n{\n    var dbOptions = new DbContextOptionsBuilder<WeatherForecastContext>()\n        .UseSqlite(\"Data Source=test.db\")\n        .Options;\n\n    return new PooledDbContextFactory<WeatherForecastContext>(dbOptions);\n});\n```\n\n----------------------------------------\n\nTITLE: Use RelationalDbFunctionsExtensions.Least - C#\nDESCRIPTION: This snippet shows how to directly invoke the LEAST function in SQL using RelationalDbFunctionsExtensions.Least. It selects the least value among the lengths of counts, days visited, and beers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nvar leastCount = await context.Pubs\n            .Select(e => EF.Functions.Least(e.Counts.Length, e.DaysVisited.Count, e.Beers.Length))\n            .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Optimize DbContext with Default Settings (dotnet ef)\nDESCRIPTION: This command optimizes the DbContext model using default settings. It assumes there is only one DbContext in the project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext optimize\n```\n\n----------------------------------------\n\nTITLE: Renaming Timestamp Parameter (C#)\nDESCRIPTION: This C# code configures the Entity Framework model to rename the parameter for a timestamp property used as a concurrency token. It maps the Timestamp property to the \"blog_timestamp\" parameter in the stored procedure.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures(s =>\n    s.Update(u => u.Parameter(b => b.Timestamp, \"blog_timestamp\")));\n```\n\n----------------------------------------\n\nTITLE: SQL Foreign Key Constraint Example\nDESCRIPTION: This SQL code snippet demonstrates a foreign key constraint used in TPH or TPT inheritance.  It constrains the `FavoriteAnimalId` column in the `Animals` table to reference the `Id` column in the same `Animals` table. It requires a database that supports foreign key constraints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_63\n\nLANGUAGE: sql\nCODE:\n```\nCONSTRAINT [FK_Animals_Animals_FavoriteAnimalId] FOREIGN KEY ([FavoriteAnimalId]) REFERENCES [Animals] ([Id])\n```\n\n----------------------------------------\n\nTITLE: stringValue.Substring with startIndex and length .NET to SQL translation\nDESCRIPTION: Presents the translation of stringValue.Substring(startIndex, length) in .NET to SUBSTRING(@stringValue, @startIndex, @length) in SQL when integrated with Entity Framework Core and Cosmos DB. It extracts a substring of a specified length from a string, beginning at a provided index.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_36\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Substring(startIndex, length)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[SUBSTRING(@stringValue, @startIndex, @length)](/azure/cosmos-db/nosql/query/substring)\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Data in EF6 with DbSet.Local\nDESCRIPTION: This code snippet demonstrates how to access local data using the DbSet.Local property. It loads all blogs from the database into the context, adds a new blog, marks an existing blog as deleted, and then loops over the blogs in the local collection and the DbSet query to display their state.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/local-data.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Load all blogs from the database into the context\n    context.Blogs.Load();\n\n    // Add a new blog to the context\n    context.Blogs.Add(new Blog { Name = \"My New Blog\" });\n\n    // Mark one of the existing blogs as Deleted\n    context.Blogs.Remove(context.Blogs.Find(1));\n\n    // Loop over the blogs in the context.\n    Console.WriteLine(\"In Local: \");\n    foreach (var blog in context.Blogs.Local)\n    {\n        Console.WriteLine(\n            \"Found {0}: {1} with state {2}\",\n            blog.BlogId,  \n            blog.Name,\n            context.Entry(blog).State);\n    }\n\n    // Perform a query against the database.\n    Console.WriteLine(\"\\nIn DbSet query: \");\n    foreach (var blog in context.Blogs)\n    {\n        Console.WriteLine(\n            \"Found {0}: {1} with state {2}\",\n            blog.BlogId,  \n            blog.Name,\n            context.Entry(blog).State);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Principal Key FK Naming Convention in C#\nDESCRIPTION: This code snippet demonstrates the `<navigation property name><principal key property name>` naming convention for foreign key properties. `Post.TheBlogKey` is discovered as a foreign key because it follows this pattern.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Key { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public int? TheBlogKey { get; set; }\n    public Blog? TheBlog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporal Table in SQL Server (Default)\nDESCRIPTION: This SQL code snippet shows how SQL Server creates a temporal table with default configurations including the hidden 'PeriodEnd' and 'PeriodStart' datetime2 columns for tracking the period of data existence, and the automatically created associated history table called 'EmployeeHistory'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nDECLARE @historyTableSchema sysname = SCHEMA_NAME()\nEXEC(N'CREATE TABLE [Employees] (\n    [EmployeeId] uniqueidentifier NOT NULL,\n    [Name] nvarchar(100) NULL,\n    [Position] nvarchar(100) NULL,\n    [Department] nvarchar(100) NULL,\n    [Address] nvarchar(1024) NULL,\n    [AnnualSalary] decimal(10,2) NOT NULL,\n    [PeriodEnd] datetime2 GENERATED ALWAYS AS ROW END NOT NULL,\n    [PeriodStart] datetime2 GENERATED ALWAYS AS ROW START NOT NULL,\n    CONSTRAINT [PK_Employees] PRIMARY KEY ([EmployeeId]),\n    PERIOD FOR SYSTEM_TIME([PeriodStart], [PeriodEnd])\n) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [' + @historyTableSchema + N'].[EmployeeHistory]))');\n```\n\n----------------------------------------\n\nTITLE: Selecting Postcodes in Chigley C#\nDESCRIPTION: This C# code snippet demonstrates how to select the postcodes of authors who live in \"Chigley\" using LINQ and EF Core. It first filters the `Authors` table based on the `City` property in the JSON `Contact` column, and then selects the `Postcode` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar postcodesInChigley = await context.Authors\n    .Where(author => author.Contact.Address.City == \"Chigley\")\n    .Select(author => author.Contact.Address.Postcode)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Inserting Halfling Family Tree Data - C#\nDESCRIPTION: This snippet demonstrates how to insert data representing a halfling family tree into the database using EF Core. It uses `HierarchyId.Parse` to convert string representations of paths into `HierarchyId` objects and adds the Halfling entities to the context and then saves the changes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\nawait AddRangeAsync(\n    new Halfling(HierarchyId.Parse(\"/\"), \"Balbo\", 1167),\n    new Halfling(HierarchyId.Parse(\"/1/\"), \"Mungo\", 1207),\n    new Halfling(HierarchyId.Parse(\"/2/\"), \"Pansy\", 1212),\n    new Halfling(HierarchyId.Parse(\"/3/\"), \"Ponto\", 1216),\n    new Halfling(HierarchyId.Parse(\"/4/\"), \"Largo\", 1220),\n    new Halfling(HierarchyId.Parse(\"/5/\"), \"Lily\", 1222),\n    new Halfling(HierarchyId.Parse(\"/1/1/\"), \"Bungo\", 1246),\n    new Halfling(HierarchyId.Parse(\"/1/2/\"), \"Belba\", 1256),\n    new Halfling(HierarchyId.Parse(\"/1/3/\"), \"Longo\", 1260),\n    new Halfling(HierarchyId.Parse(\"/1/4/\"), \"Linda\", 1262),\n    new Halfling(HierarchyId.Parse(\"/1/5/\"), \"Bingo\", 1264),\n    new Halfling(HierarchyId.Parse(\"/3/1/\"), \"Rosa\", 1256),\n    new Halfling(HierarchyId.Parse(\"/3/2/\"), \"Polo\"),\n    new Halfling(HierarchyId.Parse(\"/4/1/\"), \"Fosco\", 1264),\n    new Halfling(HierarchyId.Parse(\"/1/1/1/\"), \"Bilbo\", 1290),\n    new Halfling(HierarchyId.Parse(\"/1/3/1/\"), \"Otho\", 1310),\n    new Halfling(HierarchyId.Parse(\"/1/5/1/\"), \"Falco\", 1303),\n    new Halfling(HierarchyId.Parse(\"/3/2/1/\"), \"Posco\", 1302),\n    new Halfling(HierarchyId.Parse(\"/3/2/2/\"), \"Prisca\", 1306),\n    new Halfling(HierarchyId.Parse(\"/4/1/1/\"), \"Dora\", 1302),\n    new Halfling(HierarchyId.Parse(\"/4/1/2/\"), \"Drogo\", 1308),\n    new Halfling(HierarchyId.Parse(\"/4/1/3/\"), \"Dudo\", 1311),\n    new Halfling(HierarchyId.Parse(\"/1/3/1/1/\"), \"Lotho\", 1310),\n    new Halfling(HierarchyId.Parse(\"/1/5/1/1/\"), \"Poppy\", 1344),\n    new Halfling(HierarchyId.Parse(\"/3/2/1/1/\"), \"Ponto\", 1346),\n    new Halfling(HierarchyId.Parse(\"/3/2/1/2/\"), \"Porto\", 1348),\n    new Halfling(HierarchyId.Parse(\"/3/2/1/3/\"), \"Peony\", 1350),\n    new Halfling(HierarchyId.Parse(\"/4/1/2/1/\"), \"Frodo\", 1368),\n    new Halfling(HierarchyId.Parse(\"/4/1/3/1/\"), \"Daisy\", 1350),\n    new Halfling(HierarchyId.Parse(\"/3/2/1/1/1/\"), \"Angelica\", 1381));\n\nawait SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Owned Type Relationships with Fluent API (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a navigation property to the owner using the `WithOwner()` fluent API in EF Core 3.0 for owned type relationships.  It illustrates configuring the relationship and the owned type in separate chained calls, including foreign key constraints, table names, keys, indexes, and seeding data. The old approach of directly configuring the relationship after `OwnsOne` or `OwnsMany` is no longer supported.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Order>.OwnsOne(e => e.Details).WithOwner(e => e.Order);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Property is Modified - EF6 C#\nDESCRIPTION: This example shows how to check if a property has been marked as modified using the `IsModified` property.  It uses both lambda expressions and strings to specify the property name.  It assumes a `BloggingContext` and a `Blog` entity with a `Name` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n\n    var nameIsModified1 = context.Entry(blog).Property(u => u.Name).IsModified;\n\n    // Use a string for the property name\n    var nameIsModified2 = context.Entry(blog).Property(\"Name\").IsModified;\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext Using Configuration Connection String (PowerShell)\nDESCRIPTION: This example demonstrates how to read the connection string from the application's configuration using the Name=... syntax. This avoids hardcoding connection strings in the command.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext \"Name=ConnectionStrings:Blogging\" Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Explicit Client Evaluation in EF Core\nDESCRIPTION: Demonstrates how to explicitly force client evaluation using `AsEnumerable` or `ToList`. This is useful when the amount of data is small, or when there is no server-side translation for a LINQ operator. `AsEnumerable` streams results while `ToList` buffers the results. Choose depending on usage patterns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/client-eval.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Querying/ClientEvaluation/Program.cs#ExplicitClientEvaluation)]\n```\n\n----------------------------------------\n\nTITLE: Map a Property to Time-to-Live (TTL) in Cosmos DB\nDESCRIPTION: This snippet demonstrates how to map a property of an entity to the 'ttl' field in the JSON document stored in Azure Cosmos DB. This allows setting a custom time-to-live for individual entities. The HasDefaultTimeToLive is required for this to work.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Village>()\n    .HasDefaultTimeToLive(3600)\n    .Property(e => e.TimeToLive)\n    .ToJsonProperty(\"ttl\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Type with C#\nDESCRIPTION: This code snippet shows how to define a complex type (value object) using a class. The `BlogDetails` class is defined without a key property and represents a set of related properties that can be associated with an entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n    public class BlogDetails\n    {\n        public DateTime? DateCreated { get; set; }\n\n        [MaxLength(250)]\n        public string Description { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Filter by Database Category in EF Core\nDESCRIPTION: This code snippet demonstrates how to filter log messages by category. In this case, it configures logging to only include messages from the `DbLoggerCategory.Database` category, which includes all database interactions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Name });\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Index - Data Annotations - C#\nDESCRIPTION: This code snippet shows how to create a composite index using Data Annotations in EF Core. A composite index spans multiple columns, speeding up queries which filter on any of the columns in the index. The `[Index]` attribute is used on the class level, specifying the properties that form the index.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[Index(nameof(FirstName), nameof(LastName))]\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Create School Database Schema\nDESCRIPTION: This SQL script creates the schema for the School database, including tables such as Department, Person, OnsiteCourse, OnlineCourse, StudentGrade, CourseInstructor, Course, and OfficeAssignment. It also defines foreign key relationships between these tables to enforce data integrity. The script uses `IF NOT EXISTS` checks to prevent errors when re-running the script on an existing database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\n-- Create the Department table.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[Department]')\nAND type in (N'U'))\nBEGIN\nCREATE TABLE [dbo].[Department]([DepartmentID] [int] NOT NULL,\n[Name] [nvarchar](50) NOT NULL,\n[Budget] [money] NOT NULL,\n[StartDate] [datetime] NOT NULL,\n[Administrator] [int] NULL,\nCONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED\n(\n[DepartmentID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]) ON [PRIMARY]\nEND\nGO\n\n-- Create the Person table.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[Person]')\nAND type in (N'U'))\nBEGIN\nCREATE TABLE [dbo].[Person]([PersonID] [int] IDENTITY(1,1) NOT NULL,\n[LastName] [nvarchar](50) NOT NULL,\n[FirstName] [nvarchar](50) NOT NULL,\n[HireDate] [datetime] NULL,\n[EnrollmentDate] [datetime] NULL,\n[Discriminator] [nvarchar](50) NOT NULL,\nCONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED\n(\n[PersonID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]) ON [PRIMARY]\nEND\nGO\n\n-- Create the OnsiteCourse table.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[OnsiteCourse]')\nAND type in (N'U'))\nBEGIN\nCREATE TABLE [dbo].[OnsiteCourse]([CourseID] [int] NOT NULL,\n[Location] [nvarchar](50) NOT NULL,\n[Days] [nvarchar](50) NOT NULL,\n[Time] [smalldatetime] NOT NULL,\nCONSTRAINT [PK_OnsiteCourse] PRIMARY KEY CLUSTERED\n(\n[CourseID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]) ON [PRIMARY]\nEND\nGO\n\n-- Create the OnlineCourse table.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[OnlineCourse]')\nAND type in (N'U'))\nBEGIN\nCREATE TABLE [dbo].[OnlineCourse]([CourseID] [int] NOT NULL,\n[URL] [nvarchar](100) NOT NULL,\nCONSTRAINT [PK_OnlineCourse] PRIMARY KEY CLUSTERED\n(\n[CourseID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]) ON [PRIMARY]\nEND\nGO\n\n--Create the StudentGrade table.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[StudentGrade]')\nAND type in (N'U'))\nBEGIN\nCREATE TABLE [dbo].[StudentGrade]([EnrollmentID] [int] IDENTITY(1,1) NOT NULL,\n[CourseID] [int] NOT NULL,\n[StudentID] [int] NOT NULL,\n[Grade] [decimal](3, 2) NULL,\nCONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED\n(\n[EnrollmentID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]) ON [PRIMARY]\nEND\nGO\n\n-- Create the CourseInstructor table.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[CourseInstructor]')\nAND type in (N'U'))\nBEGIN\nCREATE TABLE [dbo].[CourseInstructor]([CourseID] [int] NOT NULL,\n[PersonID] [int] NOT NULL,\nCONSTRAINT [PK_CourseInstructor] PRIMARY KEY CLUSTERED\n(\n[CourseID] ASC,\n[PersonID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]) ON [PRIMARY]\nEND\nGO\n\n-- Create the Course table.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[Course]')\nAND type in (N'U'))\nBEGIN\nCREATE TABLE [dbo].[Course]([CourseID] [int] NOT NULL,\n[Title] [nvarchar](100) NOT NULL,\n[Credits] [int] NOT NULL,\n[DepartmentID] [int] NOT NULL,\nCONSTRAINT [PK_School.Course] PRIMARY KEY CLUSTERED\n(\n[CourseID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]) ON [PRIMARY]\nEND\nGO\n\n-- Create the OfficeAssignment table.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[OfficeAssignment]')\nAND type in (N'U'))\nBEGIN\nCREATE TABLE [dbo].[OfficeAssignment]([InstructorID] [int] NOT NULL,\n[Location] [nvarchar](50) NOT NULL,\n[Timestamp] [timestamp] NOT NULL,\nCONSTRAINT [PK_OfficeAssignment] PRIMARY KEY CLUSTERED\n(\n[InstructorID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]) ON [PRIMARY]\nEND\nGO\n\n-- Define the relationship between OnsiteCourse and Course.\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys\nWHERE object_id = OBJECT_ID(N'[dbo].[FK_OnsiteCourse_Course]')\nAND parent_object_id = OBJECT_ID(N'[dbo].[OnsiteCourse]'))\nALTER TABLE [dbo].[OnsiteCourse] WITH CHECK ADD\nCONSTRAINT [FK_OnsiteCourse_Course] FOREIGN KEY([CourseID])\nREFERENCES [dbo].[Course] ([CourseID])\nGO\nALTER TABLE [dbo].[OnsiteCourse] CHECK\nCONSTRAINT [FK_OnsiteCourse_Course]\nGO\n\n-- Define the relationship between OnlineCourse and Course.\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys\nWHERE object_id = OBJECT_ID(N'[dbo].[FK_OnlineCourse_Course]')\nAND parent_object_id = OBJECT_ID(N'[dbo].[OnlineCourse]'))\nALTER TABLE [dbo].[OnlineCourse] WITH CHECK ADD\nCONSTRAINT [FK_OnlineCourse_Course] FOREIGN KEY([CourseID])\nREFERENCES [dbo].[Course] ([CourseID])\nGO\nALTER TABLE [dbo].[OnlineCourse] CHECK\nCONSTRAINT [FK_OnlineCourse_Course]\nGO\n\n-- Define the relationship between StudentGrade and Course.\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys\nWHERE object_id = OBJECT_ID(N'[dbo].[FK_StudentGrade_Course]')\nAND parent_object_id = OBJECT_ID(N'[dbo].[StudentGrade]'))\nALTER TABLE [dbo].[StudentGrade] WITH CHECK ADD\nCONSTRAINT [FK_StudentGrade_Course] FOREIGN KEY([CourseID])\nREFERENCES [dbo].[Course] ([CourseID])\nGO\nALTER TABLE [dbo].[StudentGrade] CHECK\nCONSTRAINT [FK_StudentGrade_Course]\nGO\n\n--Define the relationship between StudentGrade and Student.\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys\nWHERE object_id = OBJECT_ID(N'[dbo].[FK_StudentGrade_Student]')\nAND parent_object_id = OBJECT_ID(N'[dbo].[StudentGrade]'))\nALTER TABLE [dbo].[StudentGrade] WITH CHECK ADD\nCONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])\nREFERENCES [dbo].[Person] ([PersonID])\nGO\nALTER TABLE [dbo].[StudentGrade] CHECK\nCONSTRAINT [FK_StudentGrade_Student]\nGO\n\n-- Define the relationship between CourseInstructor and Course.\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys\nWHERE object_id = OBJECT_ID(N'[dbo].[FK_CourseInstructor_Course]')\nAND parent_object_id = OBJECT_ID(N'[dbo].[CourseInstructor]'))\nALTER TABLE [dbo].[CourseInstructor] WITH CHECK ADD\nCONSTRAINT [FK_CourseInstructor_Course] FOREIGN KEY([CourseID])\nREFERENCES [dbo].[Course] ([CourseID])\nGO\nALTER TABLE [dbo].[CourseInstructor] CHECK\nCONSTRAINT [FK_CourseInstructor_Course]\nGO\n\n-- Define the relationship between CourseInstructor and Person.\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys\nWHERE object_id = OBJECT_ID(N'[dbo].[FK_CourseInstructor_Person]')\nAND parent_object_id = OBJECT_ID(N'[dbo].[CourseInstructor]'))\nALTER TABLE [dbo].[CourseInstructor] WITH CHECK ADD\nCONSTRAINT [FK_CourseInstructor_Person] FOREIGN KEY([PersonID])\nREFERENCES [dbo].[Person] ([PersonID])\nGO\nALTER TABLE [dbo].[CourseInstructor] CHECK\nCONSTRAINT [FK_CourseInstructor_Person]\nGO\n\n-- Define the relationship between Course and Department.\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys\nWHERE object_id = OBJECT_ID(N'[dbo].[FK_Course_Department]')\nAND parent_object_id = OBJECT_ID(N'[dbo].[Course]'))\nALTER TABLE [dbo].[Course] WITH CHECK ADD\nCONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])\nREFERENCES [dbo].[Department] ([DepartmentID])\nGO\nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]\nGO\n\n--Define the relationship between OfficeAssignment and Person.\nIF NOT EXISTS (SELECT * FROM sys.foreign_keys\nWHERE object_id = OBJECT_ID(N'[dbo].[FK_OfficeAssignment_Person]')\nAND parent_object_id = OBJECT_ID(N'[dbo].[OfficeAssignment]'))\nALTER TABLE [dbo].[OfficeAssignment] WITH CHECK ADD\nCONSTRAINT [FK_OfficeAssignment_Person] FOREIGN KEY([InstructorID])\nREFERENCES [dbo].[Person] ([PersonID])\nGO\nALTER TABLE [dbo].[OfficeAssignment] CHECK\nCONSTRAINT [FK_OfficeAssignment_Person]\nGO\n\n-- Create InsertOfficeAssignment stored procedure.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[InsertOfficeAssignment]')\nAND type in (N'P', N'PC'))\nBEGIN\nEXEC dbo.sp_executesql @statement = N'\nCREATE PROCEDURE [dbo].[InsertOfficeAssignment]\n@InstructorID int,\n@Location nvarchar(50)\nAS\nINSERT INTO dbo.OfficeAssignment (InstructorID, Location)\nVALUES (@InstructorID, @Location);\nIF @@ROWCOUNT > 0\nBEGIN\nSELECT [Timestamp] FROM OfficeAssignment\nWHERE InstructorID=@InstructorID;\nEND\n'\nEND\nGO\n\n--Create the UpdateOfficeAssignment stored procedure.\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[UpdateOfficeAssignment]')\nAND type in (N'P', N'PC'))\nBEGIN\nEXEC dbo.sp_executesql @statement = N'\nCREATE PROCEDURE [dbo].[UpdateOfficeAssignment]\n@InstructorID int,\n@Location nvarchar(50),\n@OrigTimestamp timestamp\nAS\nUPDATE OfficeAssignment SET Location=@Location\nWHERE InstructorID=@InstructorID AND [Timestamp]=@OrigTimestamp;\nIF @@ROWCOUNT > 0\nBEGIN\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Stored Procedure - EF6 - C#\nDESCRIPTION: Demonstrates how to pass parameters to a stored procedure using SqlQuery.  The example shows passing a blogId parameter to the dbo.GetBlogById stored procedure. Parameters are passed inline with the SQL string using @p0, @p1, etc.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/raw-sql.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blogId = 1;\n\n    var blogs = context.Blogs.SqlQuery(\"dbo.GetBlogById @p0\", blogId).Single();\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Data Interaction with ProductContext in WPF - C#\nDESCRIPTION: This code snippet demonstrates how to use the ProductContext in a WPF application to query and save data to the database. It initializes a ProductContext, loads categories, handles saving changes, and disposes of the context when the window is closed. The code utilizes Entity Framework's DbSet.Load() extension method to load the data into the context and DbSet.Local property to bind to the WPF controls.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/wpf.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Windows;\n\nnamespace WPFwithEFSample\n{\n    public partial class MainWindow : Window\n    {\n        private ProductContext _context = new ProductContext();\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private void Window_Loaded(object sender, RoutedEventArgs e)\n        {\n            System.Windows.Data.CollectionViewSource categoryViewSource =\n                ((System.Windows.Data.CollectionViewSource)(this.FindResource(\"categoryViewSource\")));\n\n            // Load is an extension method on IQueryable,\n            // defined in the System.Data.Entity namespace.\n            // This method enumerates the results of the query,\n            // similar to ToList but without creating a list.\n            // When used with Linq to Entities this method\n            // creates entity objects and adds them to the context.\n            _context.Categories.Load();\n\n            // After the data is loaded call the DbSet<T>.Local property\n            // to use the DbSet<T> as a binding source.\n            categoryViewSource.Source = _context.Categories.Local;\n        }\n\n        private void buttonSave_Click(object sender, RoutedEventArgs e)\n        {\n            // When you delete an object from the related entities collection\n            // (in this case Products), the Entity Framework doesn’t mark\n            // these child entities as deleted.\n            // Instead, it removes the relationship between the parent and the child\n            // by setting the parent reference to null.\n            // So we manually have to delete the products\n            // that have a Category reference set to null.\n\n            // The following code uses LINQ to Objects\n            // against the Local collection of Products.\n            // The ToList call is required because otherwise the collection will be modified\n            // by the Remove call while it is being enumerated.\n            // In most other situations you can use LINQ to Objects directly\n            // against the Local property without using ToList first.\n            foreach (var product in _context.Products.Local.ToList())\n            {\n                if (product.Category == null)\n                {\n                    _context.Products.Remove(product);\n                }\n            }\n\n            _context.SaveChanges();\n            // Refresh the grids so the database generated values show up.\n            this.categoryDataGrid.Items.Refresh();\n            this.productsDataGrid.Items.Refresh();\n        }\n\n        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)\n        {\n            base.OnClosing(e);\n            this._context.Dispose();\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Install EF Core Tools (PowerShell)\nDESCRIPTION: Installs the Entity Framework Core tools into the current project using the Package Manager Console in Visual Studio. This is a necessary first step before using any of the EF Core PMC commands.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n```\n\n----------------------------------------\n\nTITLE: ForeignKey Attribute on Navigation with Shadow FK in EF Core\nDESCRIPTION: This snippet demonstrates using the `[ForeignKey]` attribute on the dependent navigation (`Blog`) to create a shadow foreign key property named `BlogKey`. If a property with that name doesn't already exist, EF Core will create it as a shadow property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/mapping-attributes.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public string Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    [ForeignKey(\"BlogKey\")]\n    public Blog Blog { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discriminator Property Name in Cosmos DB C#\nDESCRIPTION: This code snippet shows how to configure the discriminator property name in Azure Cosmos DB using EF Core. By default, EF Core 9.0 uses `$type` as the discriminator name, but this code configures it back to `Discriminator` to maintain compatibility with existing documents.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Session>().HasDiscriminator<string>(\"Discriminator\");\n```\n\n----------------------------------------\n\nTITLE: Configure Backing Field Access Mode - C#\nDESCRIPTION: This code snippet demonstrates how to configure the access mode for a backing field using the Fluent API in Entity Framework Core. The `PropertyAccessMode.FieldDuringConstruction` option specifies that the backing field should only be used during materialization.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/backing-field.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata;\n\npublic class MyContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Blog>()\n            .Property(b => b.Url)\n            .HasField(\"_validatedUrl\")\n            .UsePropertyAccessMode(PropertyAccessMode.FieldDuringConstruction);\n    }\n}\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n\n    private string _validatedUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Define Product Class - Code First - C#\nDESCRIPTION: Defines the Product entity class with properties for ProductId, Name, CategoryId, and a navigation property for Category.  This class represents a product in the domain model and is used for Code First development. The CategoryId property is a foreign key relating to the Category entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/wpf.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n    namespace WPFwithEFSample\n    {\n        public class Product\n        {\n            public int ProductId { get; set; }\n            public string Name { get; set; }\n\n            public int CategoryId { get; set; }\n            public virtual Category Category { get; set; }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Unique Index with C#\nDESCRIPTION: This code shows how to create a unique index using the `Index` attribute with the `IsUnique` parameter set to true. The `Username` column in the `User` table will have a unique index created.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n    public class User\n    {\n        public int UserId { get; set; }\n\n        [Index(IsUnique = true)]\n        [StringLength(200)]\n        public string Username { get; set; }\n\n        public string DisplayName { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Set Max Length for String Properties C#\nDESCRIPTION: This code demonstrates how to use conventions to set the maximum length of string properties. First, all string properties are set to a maximum length of 500. Then, properties named \"Name\" are overridden to have a maximum length of 250, demonstrating the last-wins behavior of conventions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Properties<string>()\n            .Configure(c => c.HasMaxLength(500));\n\nmodelBuilder.Properties<string>()\n            .Where(x => x.Name == \"Name\")\n            .Configure(c => c.HasMaxLength(250));\n```\n\n----------------------------------------\n\nTITLE: TPT Table Schemas - SQL\nDESCRIPTION: SQL schema definitions demonstrating different column names for primary keys using TPT inheritance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Animals] (\n    [Id] int NOT NULL IDENTITY,\n    [Breed] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Animals] PRIMARY KEY ([Id])\n);\n\nCREATE TABLE [Cats] (\n    [CatId] int NOT NULL,\n    [EducationalLevel] nvarchar(max) NULL,\n    CONSTRAINT [PK_Cats] PRIMARY KEY ([CatId]),\n    CONSTRAINT [FK_Cats_Animals_CatId] FOREIGN KEY ([CatId]) REFERENCES [Animals] ([Id]) ON DELETE CASCADE\n);\n\nCREATE TABLE [Dogs] (\n    [DogId] int NOT NULL,\n    [FavoriteToy] nvarchar(max) NULL,\n    CONSTRAINT [PK_Dogs] PRIMARY KEY ([DogId]),\n    CONSTRAINT [FK_Dogs_Animals_DogId] FOREIGN KEY ([DogId]) REFERENCES [Animals] ([Id]) ON DELETE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Pre-convention Configuration C#\nDESCRIPTION: This example shows how to configure all properties of type `Currency` to have a value converter using pre-convention configuration, by overriding `ConfigureConventions` in a derived `DbContext` class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Properties<Currency>().HaveConversion<CurrencyConverter>();\n}\n```\n\n----------------------------------------\n\nTITLE: Rewriting Query with GroupBy on Inner Collection in EF Core\nDESCRIPTION: This code snippet demonstrates how to rewrite a query that uses `GroupBy` on an inner collection.  The `GroupBy` operation is moved to the client side to avoid issues with EF Core's correlated collection handling when primary keys are not present in the inner collection projection. It requires importing System.Linq.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n(await context.Parents\n    .Select(p => p.Children.Select(c => c.School))\n    .ToListAsync())\n    .Select(x => x.GroupBy(c => c).Select(g => g.Key))\n```\n\n----------------------------------------\n\nTITLE: Loading Categories for Data Binding - C#\nDESCRIPTION: This code snippet demonstrates how to use the Load method to load categories from the database into the context for data binding in a Windows Forms application. It loads all categories using `_context.Categories.Load()` and then binds the local collection to a BindingSource.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/load-method.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnLoad(EventArgs e)\n{\n    base.OnLoad(e);\n\n    _context = new ProductContext();\n\n    _context.Categories.Load();\n    categoryBindingSource.DataSource = _context.Categories.Local.ToBindingList();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToListAsync in EF Core\nDESCRIPTION: This code snippet showcases the use of `ToListAsync` as an asynchronous counterpart to the synchronous `ToList` method in LINQ queries with EF Core. It executes the query asynchronously and returns the results as a list. The `Microsoft.EntityFrameworkCore` namespace must be imported to use this extension method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/async.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Miscellaneous/Async/Program.cs#ToListAsync)]\n```\n\n----------------------------------------\n\nTITLE: Enable Database Logging via Interceptor (EF6.1+)\nDESCRIPTION: This snippet shows how to enable database logging in Entity Framework 6.1 or later without recompiling, by adding an interceptor to the web.config or app.config file. This interceptor will log database activity to a specified file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n  <interceptors>\n    <interceptor type=\"System.Data.Entity.Infrastructure.Interception.DatabaseLogger, EntityFramework\">\n      <parameters>\n        <parameter value=\"C:\\\\Path\\\\To\\\\My\\\\LogOutput.txt\"/>\n      </parameters>\n    </interceptor>\n  </interceptors>\n```\n\n----------------------------------------\n\nTITLE: Use Find Siblings C#\nDESCRIPTION: This C# code shows how to use the `FindSiblings` method to retrieve and print the siblings of a given post entity. It iterates through the siblings and prints their IDs and titles.  It assumes `post` is an entity of type `Post` and `context` is an instance of the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_138\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine($\"Siblings to {post.Id}: '{post.Title}' are...\");\nforeach (var sibling in context.FindSiblings(post, nameof(post.Blog)))\n{\n    Console.WriteLine($\"    {sibling.Id}: '{sibling.Title}'\");\n}\n```\n\n----------------------------------------\n\nTITLE: Example List Property\nDESCRIPTION: Defines a simple entity with a property that is a `List<int>`. This is used to show an example of handling mutable properties using custom comparers in EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-comparers.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class ListProperty\n{\n    public int Id { get; set; }\n    public List<int> Numbers { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: ChangeTracker.Entries: Filtered by Type C#\nDESCRIPTION: Shows how to filter ChangeTracker.Entries to a specific entity type using the generic overload. This returns generic EntityEntry<TEntity> instances, enabling strongly-typed access to properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var entityEntry in context.ChangeTracker.Entries<Post>())\n{\n    Console.WriteLine(\n        $\"Found {entityEntry.Metadata.Name} entity with ID {entityEntry.Property(e => e.Id).CurrentValue}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Change Tracking Example 2 - C#\nDESCRIPTION: This C# code demonstrates how using EF Core methods like `context.Entry(blog).Property(e => e.Name).CurrentValue` and `context.Add()` for entity modifications allows EF Core to immediately track the changes without needing to call `DetectChanges()` explicitly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blog = context.Blogs.Include(e => e.Posts).First(e => e.Name == \".NET Blog\");\n\n// Change a property value\ncontext.Entry(blog).Property(e => e.Name).CurrentValue = \".NET Blog (Updated!)\";\n\n// Add a new entity to the DbContext\ncontext.Add(\n    new Post\n    {\n        Blog = blog,\n        Title = \"What’s next for System.Text.Json?\",\n        Content = \".NET 5.0 was released recently and has come with many...\"\n    });\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Derived DbConfiguration Class (C#)\nDESCRIPTION: Shows how to configure the provider factory and services within a derived `DbConfiguration` class. This includes setting the provider, services, and execution strategy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/microsoft-ef6-sqlserver.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSetProviderFactory(MicrosoftSqlProviderServices.ProviderInvariantName, Microsoft.Data.SqlClient.SqlClientFactory.Instance);\nSetProviderServices(MicrosoftSqlProviderServices.ProviderInvariantName, MicrosoftSqlProviderServices.Instance);\n// Optional\nSetExecutionStrategy(MicrosoftSqlProviderServices.ProviderInvariantName, () => new MicrosoftSqlAzureExecutionStrategy());\n```\n\n----------------------------------------\n\nTITLE: String.Concat and String.Join Aggregation - C#\nDESCRIPTION: This C# query shows how `String.Concat` and `String.Join` can be combined in a `GroupBy` query for complex string manipulation.  The query groups posts by author name and constructs strings of blog names and content summaries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts\n            .GroupBy(post => post.Author!.Name)\n            .Select(\n                grouping =>\n                    new\n                    {\n                        PostAuthor = grouping.Key,\n                        Blogs = string.Concat(\n                            grouping\n                                .Select(post => post.Blog.Name)\n                                .Distinct()\n                                .Select(postName => \"'\" + postName + \"' \")),\n                        ContentSummaries = string.Join(\n                            \" | \",\n                            grouping\n                                .Where(post => post.Content.Length >= 10)\n                                .Select(post => \"'\" + post.Content.Substring(0, 10) + \"' \"))\n                    });\n```\n\n----------------------------------------\n\nTITLE: Add Url Property to Blog Class - C#\nDESCRIPTION: This code snippet shows how to add a new property called Url to the Blog class. This change will necessitate a database migration to update the database schema to include the new Url column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/index.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic string Url { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Install/Update EF Core SQL Server provider using .NET Core CLI\nDESCRIPTION: This command installs or updates the EF Core SQL Server provider using the .NET Core CLI. It adds the Microsoft.EntityFrameworkCore.SqlServer NuGet package to the project. The command is executed from the operating system's command line.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/overview/install.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Updating Immutable Address Class Instance C#\nDESCRIPTION: This C# snippet shows how to update an address when using an immutable `Address` class. Since the class is immutable, a new `Address` instance is created with the desired changes and assigned to the customer's `Address` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar currentAddress = customer.Address;\ncustomer.Address = new Address(\n    \"Peacock Lodge\", currentAddress.Line2, currentAddress.City, currentAddress.Country, currentAddress.PostCode);\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Aggregate Over Aggregate (C#)\nDESCRIPTION: This C# code shows an example of a query with aggregate function (`Average`) composed over another aggregate function (`Max`). EF Core 9 improves the translation of such queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nvar topRatedPostsAverageRatingByLanguage = await context.Blogs.\n    Select(x => new\n    {\n        x.Language,\n        TopRating = x.Posts.Max(x => x.Rating)\n    })\n    .GroupBy(x => x.Language)\n    .Select(x => x.Average(xx => xx.TopRating))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Interface C#\nDESCRIPTION: This pre-convention configuration example demonstrates how to ignore a type, preventing it from being discovered by conventions either as an entity type or as a property on an entity type.  It ignores any properties that implement the `IReadOnly` interface.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.IgnoreAny<IReadOnly>();\n}\n```\n\n----------------------------------------\n\nTITLE: LINQ Query with Unmapped Type C#\nDESCRIPTION: Demonstrates how to achieve the same result as the raw SQL query with a join and filtering using a pure LINQ query.  This example shows the cleaner SQL generated by EF Core when it has full control over the query semantics.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nvar start = new DateOnly(2022, 1, 1);\nvar end = new DateOnly(2023, 1, 1);\nvar summaries =\n    await context.Posts.Select(\n            p => new PostSummary\n            {\n                BlogName = p.Blog.Name,\n                PostTitle = p.Title,\n                PublishedOn = p.PublishedOn,\n            })\n        .Where(p => p.PublishedOn >= start && p.PublishedOn < end)\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tracking Behavior at Context Level\nDESCRIPTION: This code demonstrates setting the default tracking behavior at the context instance level to `QueryTrackingBehavior.NoTracking`.  This will configure all queries performed by the context to be no-tracking, unless explicitly overridden using `AsTracking()`. The context is created and the tracking behavior is configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\ncontext.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;\nvar blogs = context.Blogs.ToList();\n```\n\n----------------------------------------\n\nTITLE: Mock-Based Test with Moq C#\nDESCRIPTION: This code snippet illustrates a mock-based test using the Moq library to test the blogging controller. The repository is mocked, and the test verifies that the controller interacts with the mocked repository as expected. This approach allows testing the controller's logic without involving a real database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-without-the-database.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// This code snippet is intentionally left blank. It is referencing external code.\n// Please view the source code to understand how the repository is mocked.\n```\n\n----------------------------------------\n\nTITLE: Defining Immutable Address Struct C#\nDESCRIPTION: This C# snippet defines an immutable `Address` struct.  The properties are read-only, preventing modification after the object is created. To change an address, a new instance must be created.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct Address(string line1, string? line2, string city, string country, string postCode)\n{\n    public string Line1 { get; } = line1;\n    public string? Line2 { get; } = line2;\n    public string City { get; } = city;\n    public string Country { get; } = country;\n    public string PostCode { get; } = postCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Key Discovery Convention in C#\nDESCRIPTION: This code defines a custom convention, `CustomKeyDiscoveryConvention`, that extends the `KeyDiscoveryConvention`. It overrides the `MatchKeyProperty` method to customize how primary key properties are detected, prioritizing properties named 'Key' or '[Entity Name]Key' (case-insensitive). The code handles the edge case where multiple properties match differing only by case.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/model.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Data.Entity.Core.Metadata.Edm;\nusing System.Data.Entity.Infrastructure;\nusing System.Data.Entity.ModelConfiguration.Conventions;\nusing System.Linq;\n\n// Convention to detect primary key properties.\n// Recognized naming patterns in order of precedence are:\n// 1. 'Key'\n// 2. [type name]Key\n// Primary key detection is case insensitive.\npublic class CustomKeyDiscoveryConvention : KeyDiscoveryConvention\n{\n    private const string Id = \"Key\";\n\n    protected override IEnumerable<EdmProperty> MatchKeyProperty(\n        EntityType entityType, IEnumerable<EdmProperty> primitiveProperties)\n    {\n        Debug.Assert(entityType != null);\n        Debug.Assert(primitiveProperties != null);\n\n        var matches = primitiveProperties\n            .Where(p => Id.Equals(p.Name, StringComparison.OrdinalIgnoreCase));\n\n        if (!matches.Any())\n       {\n            matches = primitiveProperties\n                .Where(p => (entityType.Name + Id).Equals(p.Name, StringComparison.OrdinalIgnoreCase));\n        }\n\n        // If the number of matches is more than one, then multiple properties matched differing only by\n        // case--for example, \"Key\" and \"key\".  \n        if (matches.Count() > 1)\n        {\n            throw new InvalidOperationException(\"Multiple properties match the key convention\");\n        }\n\n        return matches;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Unit of Work Interface in C#\nDESCRIPTION: This C# code defines the `IUnitOfWork` interface. It exposes repositories for different entities (Employee, Order, Customer) and includes a `Commit` method. The Unit of Work pattern ensures that all changes made to entities within a single business transaction are persisted atomically.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IUnitOfWork {\n        IRepository<Employee> Employees { get; }\n        IRepository<Order> Orders { get; }\n        IRepository<Customer> Customers { get; }\n        void Commit();\n    }\n```\n\n----------------------------------------\n\nTITLE: Explicit Sequence Configuration C#\nDESCRIPTION: Demonstrates explicit configuration of a sequence with a specific name, schema, start value, and increment value. This allows fine-grained control over the sequence used for key generation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_178\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .HasSequence<int>(\"ProductsSequence\", \"northwind\")\n    .StartsAt(1000)\n    .IncrementsBy(2);\n```\n\n----------------------------------------\n\nTITLE: Multiline Query Tag - C#\nDESCRIPTION: This code snippet demonstrates how to use a multi-line string as a query tag in Entity Framework Core. The tag will be included as a multi-line comment in the generated SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tags.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npeople = await context.People\n    .GetNearestPeople()\n    .Limit()\n    .TagWith(@\"This is a multi-line\nstring\")\n    .OrderBy(p => p.Location.Distance(myLocation))\n    .Take(5)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Finding Direct Ancestor - C#\nDESCRIPTION: This code snippet finds the direct ancestor of a halfling, given the halfling's name.  It uses the `GetAncestor(1)` method to retrieve the ancestor one level above the specified halfling. It returns a single `Halfling` object or null if no ancestor is found.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<Halfling?> FindDirectAncestor(string name)\n            => await context.Halflings\n                .SingleOrDefaultAsync(\n                    ancestor => ancestor.PathFromPatriarch == context.Halflings\n                        .Single(descendent => descendent.Name == name).PathFromPatriarch\n                        .GetAncestor(1));\n```\n\n----------------------------------------\n\nTITLE: Suppressing Delete Concurrency Violations with Interceptor (C#)\nDESCRIPTION: This interceptor demonstrates how to suppress DbUpdateConcurrencyException when it occurs during a delete operation. It checks if all entries being saved are in the Deleted state and, if so, suppresses the exception. This is useful when a concurrent delete operation is acceptable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\npublic class SuppressDeleteConcurrencyInterceptor : ISaveChangesInterceptor\n{\n    public InterceptionResult ThrowingConcurrencyException(\n        ConcurrencyExceptionEventData eventData,\n        InterceptionResult result)\n    {\n        if (eventData.Entries.All(e => e.State == EntityState.Deleted))\n        {\n            Console.WriteLine(\"Suppressing Concurrency violation for command:\");\n            Console.WriteLine(((RelationalConcurrencyExceptionEventData)eventData).Command.CommandText);\n\n            return InterceptionResult.Suppress();\n        }\n\n        return result;\n    }\n\n    public ValueTask<InterceptionResult> ThrowingConcurrencyExceptionAsync(\n        ConcurrencyExceptionEventData eventData,\n        InterceptionResult result,\n        CancellationToken cancellationToken = default)\n        => new(ThrowingConcurrencyException(eventData, result));\n}\n```\n\n----------------------------------------\n\nTITLE: NonUnicode Convention - C#\nDESCRIPTION: Configures string properties marked with the NonUnicode attribute to be non-Unicode.  This results in the database column being created as varchar instead of nvarchar.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Properties()\n            .Where(x => x.GetCustomAttributes(false).OfType<NonUnicode>().Any())\n            .Configure(c => c.IsUnicode(false));\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Table (Advanced)\nDESCRIPTION: This code demonstrates how to configure a temporal table in EF Core with custom names for the period start and end columns (ValidFrom, ValidTo) and a custom name for the history table (EmployeeHistoricalData) using the model builder's IsTemporal configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Employee>()\n    .ToTable(\n        \"Employees\",\n        b => b.IsTemporal(\n            b =>\n            {\n                b.HasPeriodStart(\"ValidFrom\");\n                b.HasPeriodEnd(\"ValidTo\");\n                b.UseHistoryTable(\"EmployeeHistoricalData\");\n            }));\n```\n\n----------------------------------------\n\nTITLE: Defining Order and OrderDetails with Version property (C#)\nDESCRIPTION: These C# classes represent a model including a concurrency token (Version) in the Order entity. `Order` includes properties for `Id`, `CustomerId`, `Version` (a byte array for row versioning), and a navigation property to `OrderDetails`. The `OrderDetails` class includes properties for `Id` and `ShippingAddress`.  This example showcases the change in EF Core 3.0 requiring all entities sharing a table with a concurrency token to map it to a property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    public int CustomerId { get; set; }\n    public byte[] Version { get; set; }\n    public OrderDetails Details { get; set; }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderDetails\n{\n    public int Id { get; set; }\n    public string ShippingAddress { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Indexes by Attribute\nDESCRIPTION: This snippet uses attributes to create multiple indexes over the same columns with different sort orders by giving each index a unique name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_153\n\nLANGUAGE: C#\nCODE:\n```\n[Index(nameof(Name), nameof(Owner), IsDescending = new[] { false, true }, Name = \"IX_Blogs_Name_Owner_1\")]\n[Index(nameof(Name), nameof(Owner), IsDescending = new[] { true, true }, Name = \"IX_Blogs_Name_Owner_2\")]\npublic class Blog\n{\n    public int Id { get; set; }\n\n    [MaxLength(64)]\n    public string? Name { get; set; }\n\n    [MaxLength(64)]\n    public string? Owner { get; set; }\n\n    public List<Post> Posts { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: LINQ Query with Entity Framework Context (C#)\nDESCRIPTION: This code snippet demonstrates a LINQ query executed within an Entity Framework context. It creates a new context, queries the `Customers` table based on an `Id`, and retrieves the first matching customer. The context is disposed of using a `using` statement, ensuring proper resource management.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing(var db = new MyContext())\n{\n  var q1 = \n    from c in db.Customers\n    where c.Id == id1\n    select c;\n  var c1 = q1.First();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SRID for a Spatial Column in EF Core\nDESCRIPTION: This C# code snippet configures the SRID (Spatial Reference Identifier) for the `Location` property of the `City` entity. It uses the `HasSrid` method to specify that the column uses SRID 4326, which corresponds to WGS 84, a common standard for GPS and geographic systems.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/spatial.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<City>().Property(c => c.Location)\n    .HasSrid(4326);\n```\n\n----------------------------------------\n\nTITLE: Scaffold tables from specific schemas with .NET CLI\nDESCRIPTION: This command uses the .NET CLI to scaffold entity types for all tables and views within the 'Customer' and 'Contractor' schemas.  The `--schema` option is used to specify each schema individually. The connection string and provider need to be specified as well (omitted for brevity).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold ... --schema Customer --schema Contractor\n```\n\n----------------------------------------\n\nTITLE: Resolve DbContextFactory from DI Container (C#)\nDESCRIPTION: This code snippet shows how to resolve the IDbContextFactory from the dependency injection container and use it to create DbContext instances. Contexts created by the factory must be explicitly disposed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\nvar factory = container.GetService<IDbContextFactory<SomeDbContext>>();\nusing (var context = factory.CreateDbContext())\n{\n    // Contexts obtained from the factory must be explicitly disposed\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SQL from LINQ Query in EF Core 5.0 (C#)\nDESCRIPTION: Shows how to retrieve the SQL generated by a LINQ query using the `ToQueryString` method. This is useful for debugging and understanding the SQL that EF Core will execute.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nConsole.WriteLine(\n    ctx.Artists\n    .Where(a => a.Name == \"Pink Floyd\")\n    .ToQueryString());\n```\n\n----------------------------------------\n\nTITLE: Using CreateProxy for Change Tracking Proxies in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to create new entity instances when using change-tracking proxies in EF Core. It uses the CreateProxy extension method to ensure that EF Core creates instances of the proxy type rather than the underlying entity type. This is necessary to ensure that changes are tracked correctly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blog = context.Blogs.Include(e => e.Posts).First(e => e.Name == \".NET Blog\");\n\n// Change a property value\nblog.Name = \".NET Blog (Updated!)\";\n\n// Add a new entity to a navigation\nblog.Posts.Add(\n    context.CreateProxy<Post>(\n        p =>\n            {\n                p.Title = \"What’s next for System.Text.Json?\";\n                p.Content = \".NET 5.0 was released recently and has come with many...\";\n            }));\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Registering SQL Compact Provider via Code - C#\nDESCRIPTION: This C# snippet demonstrates how to register the SQL Compact provider using code-based configuration within a class that derives from `System.Data.Entity.DbConfiguration`. It sets the provider services using the `SetProviderServices` method and the `SqlCeProviderServices` class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    public class MyConfiguration : DbConfiguration\n    {\n        public MyConfiguration()\n        {\n            SetProviderServices(\n                SqlCeProviderServices.ProviderInvariantName,\n                SqlCeProviderServices.Instance);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: ChangeTracker.Entries: Access All Tracked Entities C#\nDESCRIPTION: Illustrates using ChangeTracker.Entries to access all entities currently tracked by the DbContext.  It iterates through the tracked entities and prints their metadata and ID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blogs = context.Blogs.Include(e => e.Posts).ToList();\n\nforeach (var entityEntry in context.ChangeTracker.Entries())\n{\n    Console.WriteLine($\"Found {entityEntry.Metadata.Name} entity with ID {entityEntry.Property(\"Id\").CurrentValue}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Graph of Entities - EF Core - C#\nDESCRIPTION: This snippet demonstrates how to add a graph of new, related entities to the database using Entity Framework Core. When the blog is added, the related posts are automatically discovered through the Blog.Posts navigation property and also added to the context for insertion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/related-data.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BloggingContext();\n\ncontext.Blogs.Add(new Blog\n{\n    Url = \"http://sample.com\",\n    Posts =\n    {\n        new Post { Title = \"First post\" },\n        new Post { Title = \"Second post\" },\n        new Post { Title = \"Third post\" }\n    }\n});\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Get StorageMappingItemCollection from DbContext - C#\nDESCRIPTION: This code snippet retrieves the StorageMappingItemCollection from a DbContext instance. It casts the DbContext to IObjectContextAdapter to access the underlying ObjectContext and then retrieves the StorageMappingItemCollection from the MetadataWorkspace using the DataSpace.CSSpace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/pre-generated-views.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar objectContext = ((IObjectContextAdapter) dbContext).ObjectContext;\nvar  mappingCollection = (StorageMappingItemCollection)objectContext.MetadataWorkspace\n                                                                        .GetItemCollection(DataSpace.CSSpace);\n```\n\n----------------------------------------\n\nTITLE: Configure Entities in Model Builder - C#\nDESCRIPTION: Demonstrates configuring entities within the `OnModelCreating` method to explicitly include all types in the inheritance hierarchy. This is required for EF Core to correctly map the hierarchy using any inheritance strategy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Animal>();\n            modelBuilder.Entity<Pet>();\n            modelBuilder.Entity<Cat>();\n            modelBuilder.Entity<Dog>();\n            modelBuilder.Entity<FarmAnimal>();\n            modelBuilder.Entity<Human>();\n```\n\n----------------------------------------\n\nTITLE: Create PostTag Table SQL\nDESCRIPTION: Creates the PostTag table in SQL, including the PostId and TagId columns as foreign keys, and a composite primary key on PostId and TagId. It also includes foreign key constraints to the Posts and Tags tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"PostTag\" (\n    \"PostId\" INTEGER NOT NULL,\n    \"TagId\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostId\", \"TagId\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostId\" FOREIGN KEY (\"PostId\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagId\" FOREIGN KEY (\"TagId\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: App Service Configuration (C#)\nDESCRIPTION: This snippet is a solution for Azure App Service with .NET Framework and the connection strings configuration.  It overrides the hardcoded `ProviderName` to use `Microsoft.Data.SqlClient`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/microsoft-ef6-sqlserver.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppServiceConfiguration : MicrosoftSqlDbConfiguration\n{\n    public AppServiceConfiguration()\n    {\n        SetProviderFactory(\"System.Data.SqlClient\", Microsoft.Data.SqlClient.SqlClientFactory.Instance);\n        SetProviderServices(\"System.Data.SqlClient\", MicrosoftSqlProviderServices.Instance);\n        SetExecutionStrategy(\"System.Data.SqlClient\", () => new MicrosoftSqlAzureExecutionStrategy());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by EF9 with Table Pruning\nDESCRIPTION: This SQL code shows the optimized SQL generated by EF9, with the unnecessary join to the DiscountedOrders table removed.  This improves the efficiency of the query by removing redundant operations. Table pruning is a new feature in EF9.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [c].[Id], [c].[Name]\nFROM [Customers] AS [c]\nWHERE EXISTS (\n    SELECT 1\n    FROM [Orders] AS [o]\n    WHERE [c].[Id] = [o].[CustomerId])\n```\n\n----------------------------------------\n\nTITLE: stringValue.Equals with Ordinal .NET to SQL translation\nDESCRIPTION: Demonstrates the translation of stringValue.Equals with StringComparison.Ordinal in .NET to STRINGEQUALS in SQL using Entity Framework Core. This performs a case-sensitive comparison.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_24\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Equals(value, StringComparison.Ordinal)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[STRINGEQUALS(@stringValue, @value)](/azure/cosmos-db/nosql/query/stringequals)\n```\n\n----------------------------------------\n\nTITLE: stringValue.Substring with startIndex .NET to SQL translation\nDESCRIPTION: Details the translation of stringValue.Substring(startIndex) in .NET to SUBSTRING(@stringValue, @startIndex, LENGTH(@stringValue)) in SQL when used with Entity Framework Core and Cosmos DB. It extracts a substring from a string starting at a specific index.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_35\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Substring(startIndex)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[SUBSTRING(@stringValue, @startIndex, LENGTH(@stringValue))](/azure/cosmos-db/nosql/query/substring)\n```\n\n----------------------------------------\n\nTITLE: Configure Optional One-to-Many from Principal - C#\nDESCRIPTION: This code snippet configures an optional one-to-many relationship between `Blog` and `Post` using the `OnModelCreating` method. It explicitly defines the foreign key as `BlogId` and sets the relationship as optional using `IsRequired(false)`. This overrides the default behavior and explicitly defines the relationship as optional, even if conventions suggest otherwise.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany(e => e.Posts)\n                    .WithOne(e => e.Blog)\n                    .HasForeignKey(\"BlogId\")\n                    .IsRequired(false);\n            }\n```\n\n----------------------------------------\n\nTITLE: Serialize Blogs and Posts with Json.NET (No Duplicates) - C#\nDESCRIPTION: This code serializes a list of blogs, each with its associated posts, using Json.NET. It uses `ReferenceLoopHandling.Ignore` to avoid infinite loops and prevents duplicate instances in the resulting JSON by serializing blogs as the root.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\n            var blogs = context.Blogs.Include(e => e.Posts).ToList();\n\n            var serialized = JsonConvert.SerializeObject(\n                blogs,\n                new JsonSerializerSettings\n                {\n                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore,\n                    Formatting = Formatting.Indented\n                });\n\n            Console.WriteLine(serialized);\n```\n\n----------------------------------------\n\nTITLE: Optimize DbContext with Custom Settings (PowerShell)\nDESCRIPTION: This example optimizes the model for a specific DbContext, placing the generated files in a separate folder and namespace.  It requires specifying the output directory, namespace, and context name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nOptimize-DbContext -OutputDir Models -Namespace BlogModels -Context BlogContext\n```\n\n----------------------------------------\n\nTITLE: Configuring DeleteOrphansTiming in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure the `DeleteOrphansTiming` setting in Entity Framework Core to delay marking orphans as deleted until `SaveChanges` is called. This can be useful to prevent unintended deletions when re-parenting entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\ncontext.ChangeTracker.DeleteOrphansTiming = CascadeTiming.OnSaveChanges;\n\nvar post = vsBlog.Posts.Single(e => e.Title.StartsWith(\"Disassembly improvements\"));\nvsBlog.Posts.Remove(post);\n\ncontext.ChangeTracker.DetectChanges();\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n\ndotNetBlog.Posts.Add(post);\n\ncontext.ChangeTracker.DetectChanges();\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: ExecuteStoreQuery in C#\nDESCRIPTION: This code snippet shows how to use `ExecuteStoreQuery` to execute a raw SQL query against the database.  The query retrieves product information by joining the `Products` and `Categories` tables, filtering the results to include only products in the 'Beverages' category. The results are materialized as `Product` entities.  This bypasses the plan compiler, leading to potentially faster execution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nvar beverages = context.ExecuteStoreQuery<Product>(\n@\"     SELECT        P.ProductID, P.ProductName, P.SupplierID, P.CategoryID, P.QuantityPerUnit, P.UnitPrice, P.UnitsInStock, P.UnitsOnOrder, P.ReorderLevel, P.Discontinued, P.DiscontinuedDate\n       FROM            Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID\n       WHERE        (C.CategoryName = 'Beverages')\"\n);\n```\n\n----------------------------------------\n\nTITLE: Define DbContext with DbSet properties in C#\nDESCRIPTION: This code snippet demonstrates how to define a DbContext class with DbSet properties for including types in the Entity Framework model. It shows the SchoolEntities context with a DbSet for the Department class. Code First uses these properties to discover and pull in any referenced types for model building.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/built-in.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SchoolEntities : DbContext\n{\n    public DbSet<Department> Departments { get; set; }\n}\n\npublic class Department\n{\n    // Primary key\n    public int DepartmentID { get; set; }\n    public string Name { get; set; }\n\n    // Navigation property\n    public virtual ICollection<Course> Courses { get; set; }\n}\n\npublic class Course\n{\n    // Primary key\n    public int CourseID { get; set; }\n\n    public string Title { get; set; }\n    public int Credits { get; set; }\n\n    // Foreign key\n    public int DepartmentID { get; set; }\n\n    // Navigation properties\n    public virtual Department Department { get; set; }\n}\n\npublic partial class OnlineCourse : Course\n{\n    public string URL { get; set; }\n}\n\npublic partial class OnsiteCourse : Course\n{\n    public string Location { get; set; }\n    public string Days { get; set; }\n    public System.DateTime Time { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: CompiledQuery with Optional Filters C#\nDESCRIPTION: This code shows how to create a CompiledQuery that accepts optional filters as parameters.  The query handles null values for the filters to effectively skip them when they are not provided.  This avoids recompilation when applying different filter combinations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n    private static readonly Func<NorthwindEntities, int, int?, string, IQueryable<Customer>> customersForEmployeeWithFiltersCQ = CompiledQuery.Compile(\n        (NorthwindEntities context, int empId, int? countFilter, string countryFilter) =>\n            context.Customers.Where(c => c.Orders.Any(o => o.EmployeeID == empId))\n            .Where(c => countFilter.HasValue == false || c.Orders.Count > countFilter)\n            .Where(c => countryFilter == null || c.Address.Country == countryFilter)\n        );\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Property Values - EF6 C#\nDESCRIPTION: This code snippet demonstrates how to read and set the current value of a property using both a lambda expression and a string for the property name in Entity Framework 6. It also shows how to use the `OriginalValue` property. This example assumes a `BloggingContext` and a `Blog` entity with a `Name` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(3);\n\n    // Read the current value of the Name property\n    string currentName1 = context.Entry(blog).Property(u => u.Name).CurrentValue;\n\n    // Set the Name property to a new value\n    context.Entry(blog).Property(u => u.Name).CurrentValue = \"My Fancy Blog\";\n\n    // Read the current value of the Name property using a string for the property name\n    object currentName2 = context.Entry(blog).Property(\"Name\").CurrentValue;\n\n    // Set the Name property to a new value using a string for the property name\n    context.Entry(blog).Property(\"Name\").CurrentValue = \"My Boring Blog\";\n}\n```\n\n----------------------------------------\n\nTITLE: Evolving the model with a new property in C#\nDESCRIPTION: This C# code shows the `Blog` class after a new property, `CreatedTimestamp`, has been added.  This represents an evolution of the data model.  A migration must be created and applied to update the database schema to include this new column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public DateTime CreatedTimestamp { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Association Set Mapping for CourseInstructor (XML)\nDESCRIPTION: This XML snippet provides an example of association set mapping for the 'CourseInstructor' association set in the School model. It includes column mappings and mappings for the insert and delete functions, which are declared in the storage model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n <AssociationSetMapping Name=\"CourseInstructor\"\n                        TypeName=\"SchoolModel.CourseInstructor\"\n                        StoreEntitySet=\"CourseInstructor\">\n   <EndProperty Name=\"Person\">\n     <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n   </EndProperty>\n   <EndProperty Name=\"Course\">\n     <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n   </EndProperty>\n   <ModificationFunctionMapping>\n     <InsertFunction FunctionName=\"SchoolModel.Store.InsertCourseInstructor\" >   \n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </InsertFunction>\n     <DeleteFunction FunctionName=\"SchoolModel.Store.DeleteCourseInstructor\">\n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </DeleteFunction>\n   </ModificationFunctionMapping>\n </AssociationSetMapping>\n```\n\n----------------------------------------\n\nTITLE: Creating a Foreign Key Constraint in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a foreign key constraint referencing the 'Animals' table. This constraint ensures that the 'FavoriteAnimalId' column in a table references a valid 'Id' in the 'Animals' table, maintaining referential integrity. This type of constraint is straightforward with TPH or TPT but not with TPC.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCONSTRAINT [FK_Animals_Animals_FavoriteAnimalId] FOREIGN KEY ([FavoriteAnimalId]) REFERENCES [Animals] ([Id])\n```\n\n----------------------------------------\n\nTITLE: Relationship Convention Example in C#\nDESCRIPTION: This code snippet shows an example of the relationship convention, where navigation properties and a foreign key are used to define the relationship between the Department and Course classes. The DepartmentID property in the Course class is recognized as a foreign key referencing the Department class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/built-in.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Department\n{\n    // Primary key\n    public int DepartmentID { get; set; }\n    public string Name { get; set; }\n\n    // Navigation property\n    public virtual ICollection<Course> Courses { get; set; }\n}\n\npublic class Course\n{\n    // Primary key\n    public int CourseID { get; set; }\n\n    public string Title { get; set; }\n    public int Credits { get; set; }\n\n    // Foreign key\n    public int DepartmentID { get; set; }\n\n    // Navigation properties\n    public virtual Department Department { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Ambient Transaction with Execution Strategy - C#\nDESCRIPTION: This snippet demonstrates how to use an execution strategy with ambient transactions.  Similar to user-initiated transactions, ambient transactions require manual invocation of the execution strategy. The `CreateExecutionStrategy()` method is used to retrieve the correct execution strategy. The operations inside the `TransactionScope` are executed within the delegate passed to the `Execute` method of the `IExecutionStrategy` instance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-resiliency.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var strategy = context.Database.CreateExecutionStrategy();\n\n    strategy.Execute(() =>\n    {\n        using (var scope = new TransactionScope())\n        {\n            context.Blogs.Add(new Blog { Url = \"http://example.com\" });\n            context.SaveChanges();\n\n            context.Blogs.Add(new Blog { Url = \"http://example.com\" });\n            context.SaveChanges();\n\n            scope.Complete();\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Optimize DbContext with Custom Settings (dotnet ef)\nDESCRIPTION: This command optimizes the DbContext model for a specific context name, places the generated files in a 'Models' folder, and uses the 'BlogModels' namespace. It uses BlogContext as the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext optimize -o Models -n BlogModels -c BlogContext\n```\n\n----------------------------------------\n\nTITLE: Generate SQL Script - With From - PowerShell\nDESCRIPTION: This command generates a SQL script from the specified 'from' migration to the latest migration using PowerShell. 'AddNewTables' specifies the starting migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nScript-Migration AddNewTables\n```\n\n----------------------------------------\n\nTITLE: Setting Index Fill Factor in EF Core with SQL Server\nDESCRIPTION: This code snippet demonstrates how to configure the fill factor for an index in Entity Framework Core when using the SQL Server provider.  Setting the fill factor allows fine-tuning of index data storage and performance by controlling the amount of free space left in each index page.  Lower fill factors can improve write performance, while higher fill factors can improve read performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/indexes.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasIndex(b => b.Url)\n        .SetFillFactor(0.8);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlCeConnectionFactory with a Provider Invariant Name\nDESCRIPTION: This snippet demonstrates how to configure the SqlCeConnectionFactory to use a specific version of SQL Compact by supplying a provider invariant name to the constructor via the parameters element. It sets the SQL Compact version to 4.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<entityFramework>\n  <defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.SqlCeConnectionFactory, EntityFramework\">\n    <parameters>\n      <parameter value=\"System.Data.SqlServerCe.4.0\" />\n    </parameters>\n  </defaultConnectionFactory>\n</entityFramework>\n```\n\n----------------------------------------\n\nTITLE: SQL Update with Union\nDESCRIPTION: This SQL snippet illustrates the SQL generated for the `ExecuteUpdateAsync` call that operates on entities from a `Union` query. The SQL contains a nested SELECT statement that combines data from multiple tables and then performs an UPDATE.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_131\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [c]\nSET [c].[Tag] = N'The French Connection'\nFROM [CustomersWithStores] AS [c]\nINNER JOIN (\n    SELECT [c0].[Id], [c0].[Name], [c0].[Region], [c0].[StoreId], [c0].[Tag]\n    FROM [CustomersWithStores] AS [c0]\n    WHERE [c0].[Region] = N'France'\n    UNION\n    SELECT [c1].[Id], [c1].[Name], [c1].[Region], [c1].[StoreId], [c1].[Tag]\n    FROM [Stores] AS [s]\n    INNER JOIN [CustomersWithStores] AS [c1] ON [s].[Id] = [c1].[StoreId]\n    WHERE [s].[Region] = N'France'\n) AS [t] ON [c].[Id] = [t].[Id]\n```\n\n----------------------------------------\n\nTITLE: Split Query Example 1 C#\nDESCRIPTION: Illustrates a LINQ query that selects customers and their orders, filtering orders with Id greater than 1. This demonstrates split-query functionality with non-navigation collections and shows the option of executing the query as a single SQL query or multiple SQL queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Customers\n    .Select(\n        c => new\n        {\n            c,\n            Orders = c.Orders\n                .Where(o => o.Id > 1)\n        })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Customer Paging\nDESCRIPTION: This SQL query is generated by EF Core from the C# LINQ query to retrieve a page of customers sorted by the specified city. The query selects customer ID, City, Name, and PhoneNumber from the Customers table, orders the results by the City column, and applies LIMIT and OFFSET clauses for pagination. The parameters @__p_0 and @__p_1 represent the offset and limit, respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_99\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"c\".\"Id\", \"c\".\"City\", \"c\".\"Name\", \"c\".\"PhoneNumber\"\nFROM \"Customers\" AS \"c\"\nORDER BY \"c\".\"City\"\nLIMIT @__p_1 OFFSET @__p_0\n```\n\n----------------------------------------\n\nTITLE: Querying and Deleting Data from a Temporal Table\nDESCRIPTION: This C# code shows how to query and delete data from a temporal table using EF Core. It retrieves an employee record based on the name \"Rainbow Dash\" and then removes that record using the Remove() method. SaveChanges() persists the changes to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar employee = context.Employees.Single(e => e.Name == \"Rainbow Dash\");\ncontext.Remove(employee);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Configuring Table-Valued Function Mapping in EF Core (C#)\nDESCRIPTION: This C# code configures the mapping for a table-valued function (TVF). It uses `HasDbFunction` to map the `PostsWithPopularComments` CLR method to the SQL TVF with the same name. It specifies that this function is a database function and cannot use `HasTranslation`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.HasDbFunction(typeof(BloggingContext).GetMethod(nameof(PostsWithPopularComments), new[] { typeof(int) }))\n    .HasName(\"PostsWithPopularComments\");\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Index with Mixed Order\nDESCRIPTION: This snippet demonstrates how to create a composite index with mixed ascending and descending order on multiple columns in EF Core 7 using the HasIndex API. The IsDescending method takes a boolean array indicating the sort order for each column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Blog>()\n    .HasIndex(blog => new { blog.Name, blog.Owner })\n    .IsDescending(false, true);\n```\n\n----------------------------------------\n\nTITLE: Removing the Last Migration using .NET Core CLI\nDESCRIPTION: This command removes the last added migration from the project using the .NET Core CLI.  It is used to revert the latest changes before applying them to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations remove\n```\n\n----------------------------------------\n\nTITLE: Configuring id Property in Cosmos DB\nDESCRIPTION: This code snippet demonstrates how to configure the 'id' property in Azure Cosmos DB using `ToJsonProperty` in `OnModelCreating`. This is useful to revert to the 3.x behavior, where the shadow property mapped to the 'id' JSON property was named 'id'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property<string>(\"id\")\n    .ToJsonProperty(\"id\");\n```\n\n----------------------------------------\n\nTITLE: SQL Server Table Creation with decimal\nDESCRIPTION: Shows the SQL generated when using the Precision attribute. This results in a decimal column with specified precision and scale in SQL Server. Requires an EF Core migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_123\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Product] (\n    [Id] int NOT NULL IDENTITY,\n    [Price] decimal(10,2) NOT NULL,\n    CONSTRAINT [PK_Product] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Defining a DbContext derived class in C#\nDESCRIPTION: This code snippet demonstrates how to define a class that derives from DbContext and exposes DbSet properties for collections of entities. This is the recommended way to interact with the database using Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/working-with-dbcontext.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ProductContext : DbContext\n{\n    public DbSet<Category> Categories { get; set; }\n    public DbSet<Product> Products { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking CompiledQuery with Filters C#\nDESCRIPTION: This code demonstrates how to invoke the CompiledQuery with optional filters. It handles converting the filter values to the appropriate types (nullable int and string) before passing them to the CompiledQuery.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n    using (NorthwindEntities context = new NorthwindEntities())\n    {\n        int? countFilter = (this.orderCountFilterList.SelectedIndex == 0) ?\n            (int?)null :\n            int.Parse(this.orderCountFilterList.SelectedValue);\n\n        string countryFilter = (this.countryFilterList.SelectedIndex == 0) ?\n            null :\n            this.countryFilterList.SelectedValue;\n\n        IQueryable<Customer> myCustomers = context.InvokeCustomersForEmployeeWithFilters(\n                countFilter, countryFilter);\n\n        this.customersGrid.DataSource = myCustomers;\n        this.customersGrid.DataBind();\n    }\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Join and Aggregation C#\nDESCRIPTION: This C# code performs a join between People and Shoes based on Age, groups the results by shoe style, and selects the style, the first style in the group, and the count of items in the group.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nvar results = (from person in context.People\n               join shoes in context.Shoes on person.Age equals shoes.Age\n               group shoes by shoes.Style\n               into people\n               select new\n               {\n                   people.Key,\n                   Style = people.Select(p => p.Style).FirstOrDefault(),\n                   Count = people.Count()\n               })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequence Settings - C#\nDESCRIPTION: This code snippet demonstrates how to configure various aspects of a sequence, such as its schema, start value, and increment within the EF Core model building process.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/sequences.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.HasSequence<int>(\"SerialNumberSequence\", schema: \"shared\")\n        .StartsAt(1000)\n        .IncrementsBy(5);\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Table Creation for Beer (SQL Server)\nDESCRIPTION: This SQL script creates the `Beer` table in SQL Server, synthesizing primary key and foreign key columns to the `Pubs` table. It demonstrates how EF Core manages the schema when mapping a primitive collection (wrapped in an owned type) to a separate table, establishing the relationship between `Beer` and `Pubs`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_53\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Beer] (\n    [PubId] int NOT NULL,\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Beer] PRIMARY KEY ([PubId], [Id]),\n    CONSTRAINT [FK_Beer_Pubs_PubId] FOREIGN KEY ([PubId]) REFERENCES [Pubs] ([Id]) ON DELETE CASCADE\n```\n\n----------------------------------------\n\nTITLE: Update Stored Procedure with Non-Computed Concurrency Token (SQL)\nDESCRIPTION: This SQL stored procedure updates a blog record, incorporating a non-computed concurrency check using the URL. The @Url_Original parameter ensures the update only happens if the URL hasn't changed since last read.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE [dbo].[Blog_Update]  \n  @BlogId int,\n  @Name nvarchar(max),\n  @Url nvarchar(max),\n  @Url_Original nvarchar(max),\nAS\n  UPDATE [dbo].[Blogs]\n  SET [Name] = @Name, [Url] = @Url     \n  WHERE BlogId = @BlogId AND [Url] = @Url_Original\n```\n\n----------------------------------------\n\nTITLE: Create Posts Table - SQL\nDESCRIPTION: This SQL script creates a `Posts` table with columns for `Id`, `Title`, `Contents`, `PostedOn`, `UpdatedOn`, and `BlogId`. The `Id` column is the primary key, and `BlogId` is a foreign key referencing the `Blogs` table.  `UpdatedOn` allows null values. The `Id` column is configured as an identity column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Posts] (\n    [Id] int NOT NULL IDENTITY,\n    [Title] nvarchar(max) NOT NULL,\n    [Contents] nvarchar(max) NOT NULL,\n    [PostedOn] datetime2 NOT NULL,\n    [UpdatedOn] datetime2 NULL,\n    [BlogId] int NOT NULL,\n    CONSTRAINT [PK_Posts] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Posts_Blogs_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [Blogs] ([Id]));\n```\n\n----------------------------------------\n\nTITLE: SQL for Updating Entire JSON Document\nDESCRIPTION: This SQL code shows the generated SQL command for updating the entire JSON document in the 'Contact' column. It demonstrates the `UPDATE` statement setting the `Contact` column to the provided JSON parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE [Authors] SET [Contact] = @p0\nOUTPUT 1\nWHERE [Id] = @p1;\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite\nDESCRIPTION: This code demonstrates how to use the Open Iconic SVG sprite to display icons. It suggests adding general and unique class names for styling purposes. The 'xlink:href' attribute is used to specify the icon within the sprite.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Multiple SQL Queries - Split Query Example 2\nDESCRIPTION: Shows the multiple SQL queries generated for Split Query Example 2.  The first query retrieves Customer IDs, and the second query retrieves Order details for orders with IDs greater than 1 and joins with the Customer ID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_112\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id]\nFROM [Customers] AS [c]\nORDER BY [c].[Id]\n\nSELECT [t].[Id], [t].[CustomerId], [t].[OrderDate], [c].[Id]\nFROM [Customers] AS [c]\nINNER JOIN (\n    SELECT [o].[Id], [o].[CustomerId], [o].[OrderDate]\n    FROM [Order] AS [o]\n    WHERE [o].[Id] > 1\n) AS [t] ON [c].[Id] = [t].[CustomerId]\nORDER BY [c].[Id]\n```\n\n----------------------------------------\n\nTITLE: C# Tag Entity with Nullable Properties\nDESCRIPTION: This C# code defines an entity class `Tag` with a non-nullable `Name` property and a nullable `Description` property.  The `Name` property is initialized to a non-null value using the null-forgiving operator (!). This reflects the nullable and non-nullable column constraints in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Tag\n    {\n        public int Id { get; set; }\n        public string Name { get; set; } = null!;\n        public string? Description { get; set; }\n\n        public virtual ICollection<Post> Posts { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: DbContext with IDbSet Properties - C#\nDESCRIPTION: This snippet demonstrates defining a DbContext with IDbSet properties instead of DbSet. This is useful for creating mocks or fakes. It functions the same way as using DbSet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/dbsets.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public IDbSet<Blog> Blogs { get; set; }\n    public IDbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Read-Only Collections with Contains - C#\nDESCRIPTION: This C# code snippet showcases how EF Core 7 supports using `Contains` with read-only collections like `IReadOnlySet`. This allows efficient filtering based on a set of values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nIReadOnlySet<int> searchIds = new HashSet<int> { 1, 3, 5 };\n            var query = context.Customers.Where(p => p.Orders.Any(l => searchIds.Contains(l.Id)));\n```\n\n----------------------------------------\n\nTITLE: Parameterized Primitive Collections with Force Constant in EF Core 9 (C#)\nDESCRIPTION: This code snippet shows how to force the translation of a parameterized primitive collection to a constant in EF Core 9 using `EF.Constant`. This reverts to the pre-EF8 behavior, where each value in the collection is included as a separate parameter or constant in the SQL query.  This may improve performance in certain cases.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<List<Post>> GetPostsForceConstantCollection(int[] ids)\n    => await context.Posts\n        .Where(e => e.Title == \".NET Blog\" && EF.Constant(ids).Contains(e.Id))\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entity (C#)\nDESCRIPTION: This code snippet shows how to delete an entity using `DbContext.Remove` and the resulting changes in the change tracker, including setting foreign keys to null for optional relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar vsBlog = context.Blogs\n    .Include(e => e.Posts)\n    .Include(e => e.Assets)\n    .Single(e => e.Name == \"Visual Studio Blog\");\n\ncontext.Remove(vsBlog);\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Money Value Converter C#\nDESCRIPTION: Defines a custom value converter `MoneyConverter` to serialize and deserialize the `Money` struct to/from JSON for database storage.  It uses `JsonSerializer` for the conversion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MoneyConverter : ValueConverter<Money, string>\n{\n    public MoneyConverter()\n        : base(\n            v => JsonSerializer.Serialize(v, (JsonSerializerOptions)null),\n            v => JsonSerializer.Deserialize<Money>(v, (JsonSerializerOptions)null))\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Data Using Converted Enum (EF Core 6)\nDESCRIPTION: This C# code snippet shows how to insert data using the `Breed` enum with the value converter.  Cats with `Breed.Unknown` will have their `Breed` column set to `null` in the database. Requires EF Core DbContext and the `Breed` enum.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_143\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.AddRange(\n    new Cat { Name = \"Mac\", Breed = Breed.Unknown },\n    new Cat { Name = \"Clippy\", Breed = Breed.Burmese },\n    new Cat { Name = \"Sid\", Breed = Breed.Tonkinese });\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Disable Cascade Delete - C#\nDESCRIPTION: Configures the one-to-many relationship between Blog and Post to prevent cascade deletes. By default, a required relationship will cascade delete dependent entities when the principal is deleted. This configuration uses `OnDelete(DeleteBehavior.Restrict)` to throw an exception instead.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasMany(e => e.Posts)\n        .WithOne(e => e.Blog)\n        .OnDelete(DeleteBehavior.Restrict);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Table Splitting - C#\nDESCRIPTION: Implements table splitting, mapping 'OfficeAssignment' and 'Instructor' entities to the same table named 'Instructor'. Both entities share the 'InstructorID' as the primary key. Relationships between tables must be defined.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<OfficeAssignment>()\n    .HasKey(t => t.InstructorID);\n\nmodelBuilder.Entity<Instructor>()\n    .HasRequired(t => t.OfficeAssignment)\n    .WithRequiredPrincipal(t => t.Instructor);\n\nmodelBuilder.Entity<Instructor>().ToTable(\"Instructor\");\n\nmodelBuilder.Entity<OfficeAssignment>().ToTable(\"Instructor\");\n```\n\n----------------------------------------\n\nTITLE: SQL Update Statements for HierarchyId\nDESCRIPTION: This SQL code shows the generated update statements when re-parenting hierarchy nodes. It updates the `PathFromPatriarch` column for multiple rows in the `Halflings` table. The parameters (@p0, @p2, @p4) represent the new `HierarchyId` values in binary format.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nSET NOCOUNT ON;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p0\nOUTPUT 1\nWHERE [Id] = @p1;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p2\nOUTPUT 1\nWHERE [Id] = @p3;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p4\nOUTPUT 1\nWHERE [Id] = @p5;\n```\n\n----------------------------------------\n\nTITLE: Attaching an Existing Entity (Attach Method) - C#\nDESCRIPTION: This code snippet demonstrates attaching an existing entity to the context using the `Attach` method. The attached entity will be in the `Unchanged` state.  The entity must have its key properties set. Calling `SaveChanges` without modifying the attached entity will not result in any database updates. Requires a pre-existing `Blog` object.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/entity-state.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar existingBlog = new Blog { BlogId = 1, Name = \"ADO.NET Blog\" };\n\nusing (var context = new BloggingContext())\n{\n    context.Blogs.Attach(existingBlog);\n\n    // Do some more work...  \n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping a byte[] property to a rowversion column using Fluent API\nDESCRIPTION: This code snippet demonstrates how to map a byte[] property to a rowversion column using the fluent API in EF Core. It overrides the OnModelCreating method in a DbContext and uses the IsRowVersion() method to configure the Version property of the Person entity as a rowversion column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/value-generation.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Person>()\n        .Property(p => p.Version)\n        .IsRowVersion();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Factor for Keys and Indexes\nDESCRIPTION: This C# code demonstrates how to set the fill-factor for primary keys, alternate keys, and indexes using the modelBuilder. This configures the percentage of space on each leaf-level page filled with data when the index or key is created or rebuilt.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_78\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<User>()\n    .HasKey(e => e.Id)\n    .HasFillFactor(80);\n\nmodelBuilder.Entity<User>()\n    .HasAlternateKey(e => new { e.Region, e.Ssn })\n    .HasFillFactor(80);\n\nmodelBuilder.Entity<User>()\n    .HasIndex(e => new { e.Name })\n    .HasFillFactor(80);\n\nmodelBuilder.Entity<User>()\n    .HasIndex(e => new { e.Region, e.Tag })\n    .HasFillFactor(80);\n```\n\n----------------------------------------\n\nTITLE: Required and Optional Properties without NRT - C#\nDESCRIPTION: This code snippet illustrates the configuration of required and optional properties when nullable reference types (NRT) are disabled. All reference type properties are configured as optional by convention.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomerWithoutNullableReferenceTypes\n{\n    public int CustomerId { get; set; }\n    public string FirstName { get; set; }\n    public string MiddleName { get; set; }\n    public string LastName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Single SQL Query - Split Query Example 3\nDESCRIPTION: Shows the single SQL query generated for Split Query Example 3. The query uses OUTER APPLY to retrieve distinct OrderDates, filtered by order ID for each Customer.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_113\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [t].[OrderDate]\nFROM [Customers] AS [c]\n  OUTER APPLY (\n  SELECT DISTINCT [o].[OrderDate]\n  FROM [Order] AS [o]\n  WHERE ([c].[Id] = [o].[CustomerId]) AND ([o].[Id] > 1)\n  ) AS [t]\nORDER BY [c].[Id]\n```\n\n----------------------------------------\n\nTITLE: Mapping TVF Return Entity Type to a Table\nDESCRIPTION: This code snippet demonstrates how to remove the default table mapping for an entity type used as a return type of a Table-Valued Function (TVF) in Entity Framework Core. The `ToTable((string?)null)` method is used to prevent the entity type from being mapped to a table by default. This is useful when you only want to use the entity type as a return type for the TVF and not as a standalone table in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<MyEntity>().ToTable((string?)null));\n```\n\n----------------------------------------\n\nTITLE: Querying with IsNullOrWhitespace C#\nDESCRIPTION: Illustrates a LINQ query that filters users based on whether their FirstName or LastName is null, empty, or consists only of whitespace. This example highlights the improved SQL translation of string.IsNullOrWhiteSpace in EF Core 6.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nvar users = context.Users.Where(\ne => string.IsNullOrWhiteSpace(e.FirstName)\n|| string.IsNullOrWhiteSpace(e.LastName)).ToList();\n```\n\n----------------------------------------\n\nTITLE: TPC Table Schemas - SQL\nDESCRIPTION: SQL schema definitions demonstrating different column names for primary keys and breed using TPC inheritance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Cats] (\n    [CatId] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [CatBreed] nvarchar(max) NOT NULL,\n    [EducationalLevel] nvarchar(max) NULL,\n    CONSTRAINT [PK_Cats] PRIMARY KEY ([CatId])\n);\n\nCREATE TABLE [Dogs] (\n    [DogId] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [DogBreed] nvarchar(max) NOT NULL,\n    [FavoriteToy] nvarchar(max) NULL,\n    CONSTRAINT [PK_Dogs] PRIMARY KEY ([DogId])\n);\n```\n\n----------------------------------------\n\nTITLE: Monitoring Event Counters with dotnet-counters (Console)\nDESCRIPTION: Uses the `dotnet-counters` tool to monitor EF Core event counters. This command attaches to a process running EF Core and displays various performance metrics, such as active DbContexts, queries per second, and save changes totals. Requires the dotnet-counters tool to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n> dotnet counters monitor Microsoft.EntityFrameworkCore -p 49496\n\n[Microsoft.EntityFrameworkCore]\n    Active DbContexts                                               1\n    Execution Strategy Operation Failures (Count / 1 sec)           0\n    Execution Strategy Operation Failures (Total)                   0\n    Optimistic Concurrency Failures (Count / 1 sec)                 0\n    Optimistic Concurrency Failures (Total)                         0\n    Queries (Count / 1 sec)                                     1,755\n    Queries (Total)                                            98,402\n    Query Cache Hit Rate (%)                                      100\n    SaveChanges (Count / 1 sec)                                     0\n    SaveChanges (Total)                                             1\n```\n\n----------------------------------------\n\nTITLE: ComplexTypeMapping Element Example (MSL)\nDESCRIPTION: This example demonstrates the use of the ComplexTypeMapping element to map the results of a stored procedure ('SchoolModel.Store.GetGrades') to a complex type ('SchoolModel.GradeInfo').  It addresses the scenario where the column names returned by the stored procedure do not exactly match the property names of the complex type. The ScalarProperty elements within the ComplexTypeMapping specify the mappings between the stored procedure's columns (enroll_id, course_id, student_id, grade) and the complex type's properties (EnrollmentID, CourseID, StudentID, Grade).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n <FunctionImportMapping FunctionImportName=\"GetGrades\"\n                        FunctionName=\"SchoolModel.Store.GetGrades\" >\n   <ResultMapping>\n     <ComplexTypeMapping TypeName=\"SchoolModel.GradeInfo\">\n       <ScalarProperty Name=\"EnrollmentID\" ColumnName=\"enroll_id\"/>\n       <ScalarProperty Name=\"CourseID\" ColumnName=\"course_id\"/>\n       <ScalarProperty Name=\"StudentID\" ColumnName=\"student_id\"/>\n       <ScalarProperty Name=\"Grade\" ColumnName=\"grade\"/>\n     </ComplexTypeMapping>\n   </ResultMapping>\n </FunctionImportMapping>\n```\n\n----------------------------------------\n\nTITLE: Simple Immutable Class Definition\nDESCRIPTION: This code defines a simple immutable class `SomeImmutableClass` with two properties: `Id` (an integer) and `SomeText` (a string). It overrides the `Equals` and `GetHashCode` methods for proper value-based comparison.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-comparers.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class SomeImmutableClass\n{\n    public SomeImmutableClass(int id, string someText)\n    {\n        Id = id;\n        SomeText = someText;\n    }\n\n    public int Id { get; }\n    public string SomeText { get; }\n\n    private bool Equals(SomeImmutableClass other)\n    {\n        return Id == other.Id && SomeText == other.SomeText;\n    }\n\n    public override bool Equals(object obj)\n    {\n        if (ReferenceEquals(null, obj))\n        {\n            return false;\n        }\n\n        if (ReferenceEquals(this, obj))\n        {\n            return true;\n        }\n\n        if (obj.GetType() != this.GetType())\n        {\n            return false;\n        }\n\n        return Equals((SomeImmutableClass)obj);\n    }\n\n    public override int GetHashCode()\n    {\n        unchecked\n        {\n            return (Id * 397) ^ (SomeText != null ? SomeText.GetHashCode() : 0);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SqlQuery for View C#\nDESCRIPTION: Demonstrates using `SqlQuery` to retrieve data from a database view ('PostAndBlogSummariesView') without mapping the view type in the EF model. The returned `IQueryable` is then composed upon using LINQ for further filtering.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nvar start = new DateOnly(2022, 1, 1);\nvar end = new DateOnly(2023, 1, 1);\nvar summariesFromView =\n    await context.Database.SqlQuery<PostSummary>(\n            @$\"SELECT * FROM PostAndBlogSummariesView\")\n        .Where(p => p.PublishedOn >= start && p.PublishedOn < end)\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Binary Function Mappings in SQLite EF Core\nDESCRIPTION: Demonstrates the mapping of .NET binary functions to their equivalent SQL functions within the SQLite provider in EF Core. This encompasses operations like Contains, Length, SequenceEqual, Hex, Substr, and Unhex.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/functions.md#_snippet_1\n\nLANGUAGE: .NET & SQL\nCODE:\n```\n.NET                                           | SQL                                  \n---------------------------------------------- | ------------------------------------ \nbytes.Contains(value)                          | instr(@bytes, char(@value)) > 0\nbytes.Length                                   | length(@bytes)\nbytes.SequenceEqual(second)                    | @bytes = @second\nEF.Functions.Hex(bytes)                        | hex(@bytes)\nEF.Functions.Substr(bytes, startIndex)         | substr(@bytes, @startIndex)\nEF.Functions.Substr(bytes, startIndex, length) | substr(@bytes, @startIndex, @length)\nEF.Functions.Unhex(value)                      | unhex(@value)\nEF.Functions.Unhex(value, ignoreChars)         | unhex(@value, @ignoreChars)\n```\n\n----------------------------------------\n\nTITLE: HasConversion to Short C#\nDESCRIPTION: Configures EF Core to save Currency enum values as short integers in the database using a built-in EnumToNumberConverter.  The underlying enum value is stored.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<TestEntity2>()\n    .Property(e => e.Currency)\n    .HasConversion<EnumToNumberConverter<Currency, short>>();\n```\n\n----------------------------------------\n\nTITLE: Loading Related Department Entity with Entity Framework using Foreign Key\nDESCRIPTION: This C# code snippet demonstrates how to load a related Department entity for a Course entity using Entity Framework.  It first retrieves a course with a specific DepartmentID, then changes the DepartmentID of the course.  Finally, it loads the related Department entity based on the updated DepartmentID using the `Reference` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n    // Get the course where currently DepartmentID = 2.\n    Course course = context.Courses.First(c => c.DepartmentID == 2);\n\n    // Use DepartmentID foreign key property\n    // to change the association.\n    course.DepartmentID = 3;\n\n    // Load the related Department where DepartmentID = 3\n    context.Entry(course).Reference(c => c.Department).Load();\n```\n\n----------------------------------------\n\nTITLE: Point Read Optimization (C#)\nDESCRIPTION: This code snippet showcases EF Core 9's ability to perform point reads in Azure Cosmos DB when the query includes both the partition key and the document ID, resulting in a very efficient data retrieval using the `ReadItem` API.\nThe code assumes `context.Sessions` is an `IQueryable<Session>`, `Session` entity has `PartitionKey` and `Id` properties, and the database has documents with the corresponding partition key and id.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar somePartitionKey = \"someValue\";\nvar someId = 8;\nvar sessions = await context.Sessions\n    .Where(b => b.PartitionKey == somePartitionKey && b.Id == someId)\n    .SingleAsync();\n```\n\n----------------------------------------\n\nTITLE: Resolving Duplicates with TrackGraph (C#)\nDESCRIPTION: This code snippet uses `ChangeTracker.TrackGraph` to handle duplicate entities during the tracking process. For each entity in the graph, it checks if an entity with the same key already exists in the change tracker. If it does, the duplicate is discarded; otherwise, the entity is tracked with a `Modified` state. It assumes each entity has a primary key property called `Id`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdatePostsFromJsonWithIdentityResolution(string json)\n        {\n            using var context = new BlogsContext();\n\n            var posts = JsonConvert.DeserializeObject<List<Post>>(json);\n\n            foreach (var post in posts)\n            {\n                context.ChangeTracker.TrackGraph(\n                    post, node =>\n                        {\n                            var keyValue = node.Entry.Property(\"Id\").CurrentValue;\n                            var entityType = node.Entry.Metadata;\n\n                            var existingEntity = node.Entry.Context.ChangeTracker.Entries()\n                                .FirstOrDefault(\n                                    e => Equals(e.Metadata, entityType)\n                                         && Equals(e.Property(\"Id\").CurrentValue, keyValue));\n\n                            if (existingEntity == null)\n                            {\n                                Console.WriteLine($\"Tracking {entityType} entity with key value {keyValue}\");\n\n                                node.Entry.State = EntityState.Modified;\n                            }\n                            else\n                            {\n                                Console.WriteLine($\"Discarding duplicate {entityType} entity with key value {keyValue}\");\n                            }\n                        });\n            }\n\n            context.SaveChanges();\n        }\n```\n\n----------------------------------------\n\nTITLE: Inserting data into the Department Table using SQL\nDESCRIPTION: This SQL script inserts sample data into the 'Department' table. It includes fields such as 'DepartmentID', 'Name', 'Budget', 'StartDate', and 'Administrator'. This data populates the table with various departments and their corresponding information.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO dbo.Department (DepartmentID, [Name], Budget, StartDate, Administrator)\nVALUES (1, 'Engineering', 350000.00, '2007-09-01', 2);\nINSERT INTO dbo.Department (DepartmentID, [Name], Budget, StartDate, Administrator)\nVALUES (2, 'English', 120000.00, '2007-09-01', 6);\nINSERT INTO dbo.Department (DepartmentID, [Name], Budget, StartDate, Administrator)\nVALUES (4, 'Economics', 200000.00, '2007-09-01', 4);\nINSERT INTO dbo.Department (DepartmentID, [Name], Budget, StartDate, Administrator)\nVALUES (7, 'Mathematics', 250000.00, '2007-09-01', 3);\nGO\n```\n\n----------------------------------------\n\nTITLE: Unicode Attribute Usage C#\nDESCRIPTION: Demonstrates using the Unicode attribute to map a string property to a non-Unicode column in the database. It includes the MaxLength attribute to limit the column size. Requires EF Core 6.0 or later.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n\n    [Unicode(false)]\n    [MaxLength(22)]\n    public string Isbn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Processing in IConventionContext (C#)\nDESCRIPTION: This snippet shows how to stop further convention processing using the IConventionContext. This is useful when a convention removes an entity type from the model and subsequent conventions no longer need to run.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual void ProcessEntityTypeAdded(\n    IConventionEntityTypeBuilder entityTypeBuilder,\n    IConventionContext<IConventionEntityTypeBuilder> context)\n{\n    var type = entityTypeBuilder.Metadata.ClrType;\n    if (!Attribute.IsDefined(type, typeof(NotMappedAttribute), inherit: true))\n    {\n        return;\n    }\n\n    if (entityTypeBuilder.ModelBuilder.Ignore(entityTypeBuilder.Metadata.Name, fromDataAnnotation: true) != null)\n    {\n        context.StopProcessing();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OwnsOne Configuration C#\nDESCRIPTION: Demonstrates configuring an owned entity using the `OwnsOne` method in `OnModelCreating`. It specifies that the `ShippingAddress` property of the `Order` entity is an owned entity. The `DbContext` must inherit from `DbContext`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Modeling.OwnedEntities\n{\n    public class OwnedEntityContext : DbContext\n    {\n        public DbSet<Order> Orders { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Order>(builder =>\n            {\n                builder.OwnsOne(order => order.ShippingAddress);\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an EntityType in SSDL (XML)\nDESCRIPTION: This snippet demonstrates how to define an EntityType element in SSDL. It includes documentation, a primary key definition using Key and PropertyRef, and property definitions for CustomerId and Name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Customers\">\n   <Documentation>\n     <Summary>Summary here.</Summary>\n     <LongDescription>Long description here.</LongDescription>\n   </Documentation>\n   <Key>\n     <PropertyRef Name=\"CustomerId\" />\n   </Key>\n   <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n   <Property Name=\"Name\" Type=\"nvarchar(max)\" Nullable=\"false\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Querying Customers by Phone Number SQL\nDESCRIPTION: This shows the generated SQL when using a complex type instance in a predicate. The SQL query expands the equality check to compare each member of the complex type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [c].[Name], [c].[Contact_Address_City], [c].[Contact_Address_Country], [c].[Contact_Address_Line1],\n     [c].[Contact_Address_Line2], [c].[Contact_Address_PostCode], [c].[Contact_HomePhone_CountryCode],\n     [c].[Contact_HomePhone_Number], [c].[Contact_MobilePhone_CountryCode], [c].[Contact_MobilePhone_Number],\n     [c].[Contact_WorkPhone_CountryCode], [c].[Contact_WorkPhone_Number]\nFROM [Customers] AS [c]\nWHERE ([c].[Contact_MobilePhone_CountryCode] = @__entity_equality_phoneNumber_0_CountryCode\n    AND [c].[Contact_MobilePhone_Number] = @__entity_equality_phoneNumber_0_Number)\nOR ([c].[Contact_WorkPhone_CountryCode] = @__entity_equality_phoneNumber_0_CountryCode\n    AND [c].[Contact_WorkPhone_Number] = @__entity_equality_phoneNumber_0_Number)\nOR ([c].[Contact_HomePhone_CountryCode] = @__entity_equality_phoneNumber_0_CountryCode\n    AND [c].[Contact_HomePhone_Number] = @__entity_equality_phoneNumber_0_Number)\n```\n\n----------------------------------------\n\nTITLE: Including multiple levels of relationships across optional navigations C#\nDESCRIPTION: This snippet illustrates how to include multiple levels of relationships across optional navigations using the null-forgiving operator (!).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar blog = context.Blogs\n    .Include(b => b.Posts!)\n    .ThenInclude(p => p.Author!)\n    .FirstOrDefault();\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Find Direct Ancestor Using HierarchyId\nDESCRIPTION: This SQL query translates the C# code to find the direct ancestor of a halfling. It uses a subquery to find the `PathFromPatriarch` of the descendant based on name, and then uses `GetAncestor(1)` in the WHERE clause to compare it with the ancestors' paths.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP(2) [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch] = (\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0).GetAncestor(1)\n```\n\n----------------------------------------\n\nTITLE: Restoring Historical Data with TemporalAsOf in EF Core\nDESCRIPTION: This code snippet demonstrates how to restore a deleted row from the historical data using the `TemporalAsOf` operator in EF Core. It retrieves the employee's data as it was at a specific point in time and re-inserts it into the main table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar employee = context\n    .Employees\n    .TemporalAsOf(timeStamp2)\n    .Single(e => e.Name == \"Rainbow Dash\");\n\ncontext.Add(employee);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Generate Self-Contained Migration Bundle - PowerShell\nDESCRIPTION: This command generates a self-contained migration bundle for Linux using PowerShell. `-SelfContained` ensures the bundle includes the necessary runtime components.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nBundle-Migration -SelfContained -TargetRuntime linux-x64\n```\n\n----------------------------------------\n\nTITLE: Add Entity Instance for Shared-Type Entity C#\nDESCRIPTION: This C# code shows how to add a new entity instance to the `BuildMetadata` DbSet, which is a shared-type entity. It creates a new `Dictionary<string, object>` containing the property values for the entity and adds it to the context using `AddAsync`.  This demonstrates how to populate the dictionary with the entity properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_141\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.BuildMetadata.AddAsync(\n    new Dictionary<string, object>\n    {\n        { \"Tag\", \"v7.0.0-rc.1.22426.7\" },\n        { \"Version\", new Version(7, 0, 0) },\n        { \"Prerelease\", true },\n        { \"Hash\", \"dc0f3e8ef10eb1464b27f0fd4704f53c01226036\" }\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap\nDESCRIPTION: This code snippet demonstrates how to use Open Iconic icons with the Bootstrap framework using the 'oi' classes. It includes setting the 'title' and 'aria-hidden' attributes for accessibility.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: SQL Update Statements for Existing Blog and Posts\nDESCRIPTION: These SQL statements are generated when updating an existing blog and associated posts in SQLite. The `UPDATE` command modifies the existing rows in the `Blogs` and `Posts` tables based on the provided parameters. The `SELECT changes()` command then verifies how many rows were affected.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p1='1' (DbType = String), @p0='.NET Blog' (Size = 9)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Blogs\" SET \"Name\" = @p0\nWHERE \"Id\" = @p1;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p3='1' (DbType = String), @p0='1' (DbType = String), @p1='Announcing the release of EF Core 5.0, a full featured cross-platform...' (Size = 72), @p2='Announcing the Release of EF Core 5.0' (Size = 37)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Posts\" SET \"BlogId\" = @p0, \"Content\" = @p1, \"Title\" = @p2\nWHERE \"Id\" = @p3;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p3='2' (DbType = String), @p0='1' (DbType = String), @p1='F# 5 is the latest version of F#, the functional programming language...' (Size = 72), @p2='Announcing F# 5' (Size = 15)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Posts\" SET \"BlogId\" = @p0, \"Content\" = @p1, \"Title\" = @p2\nWHERE \"Id\" = @p3;\nSELECT changes();\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure for Updating Data\nDESCRIPTION: This SQL code defines a stored procedure named `People_Update` that updates data in the `People` table. It takes `Id`, `Name_Original` (original value of Name), and `Name` (new value of Name) as input parameters. It updates the `Name` column for the row matching the provided `Id` and original `Name`. It returns the number of rows affected by the update operation using `@@ROWCOUNT`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_82\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE [dbo].[People_Update]\n    @Id [int],\n    @Name_Original [nvarchar](max),\n    @Name [nvarchar](max)\nAS\nBEGIN\n    UPDATE [People] SET [Name] = @Name\n    WHERE [Id] = @Id AND [Name] = @Name_Original\n    SELECT @@ROWCOUNT\nEND\n```\n\n----------------------------------------\n\nTITLE: Composing with LINQ and FromSql - SQL\nDESCRIPTION: SQL generated by the code snippet of Composing with LINQ and FromSql - C#\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url]\nFROM (\n    SELECT * FROM dbo.SearchBlogs(@p0)\n) AS [b]\nWHERE [b].[Rating] > 3\nORDER BY [b].[Rating] DESC\n```\n\n----------------------------------------\n\nTITLE: Adding ComplexType Property to Entity with C#\nDESCRIPTION: This snippet illustrates how to add a complex type property to an entity. The `BlogDetail` property of type `BlogDetails` is added to the `Blog` class, allowing the `Blog` entity to include the properties defined in `BlogDetails`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n        public BlogDetails BlogDetail { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Force Constant in Query - SQL\nDESCRIPTION: This snippet shows the generated SQL when forcing a constant value using `EF.Constant`.  The ID is now included as a constant in the SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\nExecuted DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE [p].[Title] = N'.NET Blog' AND [p].[Id] = 1\n```\n\n----------------------------------------\n\nTITLE: Configure Maximum Length and Unicode with Attributes - C#\nDESCRIPTION: This snippet shows how to configure column constraints like maximum length and unicode support for a property using data annotation attributes. Here, `MaxLength` and `Unicode` attributes are used on the `UnsignedInts` property, specifying the maximum length to 2500 and disabling Unicode support for this column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\n[MaxLength(2500)]\n[Unicode(false)]\npublic uint[] UnsignedInts { get; set; }\n```\n\n----------------------------------------\n\nTITLE: TPT Mapping with Different Column Names - C#\nDESCRIPTION: This C# code configures the mapping for TPT inheritance, specifically mapping the Id property in the Cat and Dog entities to columns named CatId and DogId respectively. This demonstrates mapping a single CLR property to different column names in different tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_160\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Animal>().ToTable(\"Animals\");\n\nmodelBuilder.Entity<Cat>()\n    .ToTable(\n        \"Cats\",\n        tableBuilder => tableBuilder.Property(cat => cat.Id).HasColumnName(\"CatId\"));\n\nmodelBuilder.Entity<Dog>()\n    .ToTable(\n        \"Dogs\",\n        tableBuilder => tableBuilder.Property(dog => dog.Id).HasColumnName(\"DogId\"));\n```\n\n----------------------------------------\n\nTITLE: Configure Model for Read-Only Properties\nDESCRIPTION: This code configures the model to use the private fields as primary keys and maps the read-only properties of the Blog and Post entities.  This is necessary when properties without setters are used, since they are not mapped by convention.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/constructors.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>(\n        b =>\n        {\n            b.HasKey(\"_id\");\n            b.Property(e => e.Author);\n            b.Property(e => e.Name);\n        });\n\n    modelBuilder.Entity<Post>(\n        b =>\n        {\n            b.HasKey(\"_id\");\n            b.Property(e => e.Title);\n            b.Property(e => e.PostedOn);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Transactional Test Database Fixture (C#)\nDESCRIPTION: This code defines a test fixture that manages a database specifically for transactional tests. It includes a `Cleanup` method to reset the database to its initial state after each test execution, ensuring isolation between tests.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TransactionalTestDatabaseFixture : IDisposable\n{\n    private static readonly object _lock = new();\n    private static bool _databaseInitialized;\n\n    public TransactionalTestDatabaseFixture()\n    {\n        lock (_lock)\n        {\n            if (!_databaseInitialized)\n            {\n                using (var context = CreateContext())\n                {\n                    context.Database.EnsureDeleted();\n                    context.Database.EnsureCreated();\n\n                    // Seed the database with test data\n                    context.Blogs.AddRange(\n                        new Blog { Name = \"Blog1\", Url = \"http://sample.com/blog1\" },\n                        new Blog { Name = \"Blog2\", Url = \"http://sample.com/blog2\" });\n                    context.SaveChanges();\n                }\n\n                _databaseInitialized = true;\n            }\n        }\n    }\n\n    public BloggingContext CreateContext() => new BloggingContext(new DbContextOptionsBuilder<BloggingContext>()\n        .UseSqlite(\"Filename=:memory:\")\n        .Options);\n\n    public void Dispose()\n    {\n        using (var context = CreateContext())\n        {\n            context.Database.EnsureDeleted();\n        }\n    }\n\n    public void Cleanup()\n    {\n        using (var context = CreateContext())\n        {\n            foreach (var blog in context.Blogs)\n            {\n                context.Blogs.Remove(blog);\n            }\n            context.SaveChanges();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities for Direct Join Table Usage (C#)\nDESCRIPTION: This snippet defines entities (Post, Tag, PostTag) to explicitly map the relationships without using the EF Core many-to-many conventions. It uses two one-to-many relationships between Post and PostTag, and between Tag and PostTag, instead of relying on EF Core's built-in many-to-many support.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostId { get; set; }\n    public int TagId { get; set; }\n    public Post Post { get; set; } = null!;\n    public Tag Tag { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Implement LoggerInjectionInterceptor C#\nDESCRIPTION: Implements the `IMaterializationInterceptor` to inject an `ILogger` into entities that implement `IHasLogger`. The `InitializedInstance` method gets an `ILoggerFactory` from the context and creates a logger named \"CustomersLogger\". It then sets the `Logger` property of the entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_96\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LoggerInjectionInterceptor : IMaterializationInterceptor\n{\n    private ILogger? _logger;\n\n    public object InitializedInstance(MaterializationInterceptionData materializationData, object instance)\n    {\n        if (instance is IHasLogger hasLogger)\n        {\n            _logger ??= materializationData.Context.GetService<ILoggerFactory>().CreateLogger(\"CustomersLogger\");\n            hasLogger.Logger = _logger;\n        }\n\n        return instance;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query Tag in SQL (SQL)\nDESCRIPTION: This snippet displays how a query tag injected via EF Core appears in the generated SQL query. It shows the injected comment above the SQL statement which helps in correlating the query with the source LINQ expression. The comment is added by TagWith method in C#.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n-- This is my spatial query!\n\nSELECT TOP(@__p_1) [p].[Id], [p].[Location]\nFROM [People] AS [p]\nORDER BY [p].[Location].STDistance(@__myLocation_0) DESC\n```\n\n----------------------------------------\n\nTITLE: Association Set Mapping for FK_Course_Department\nDESCRIPTION: This XML snippet shows the association set mapping for the FK_Course_Department relationship.  It maps the CourseID and DepartmentID properties to their respective columns in the store entity set.  This mapping is crucial for linking the conceptual model to the storage model via the association.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n <AssociationSetMapping Name=\"FK_Course_Department\"\n                        TypeName=\"SchoolModel.FK_Course_Department\"\n                        StoreEntitySet=\"Course\">\n   <EndProperty Name=\"Course\">\n     <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n   </EndProperty>\n   <EndProperty Name=\"Department\">\n     <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n   </EndProperty>\n </AssociationSetMapping>\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Named Join Table Configuration C#\nDESCRIPTION: Demonstrates how to explicitly name the join table in a many-to-many relationship using the `UsingEntity` method. This provides more control over the database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity(\"PostsToTagsJoinTable\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Interface in C#\nDESCRIPTION: This C# interface defines properties for tracking creation, modification, and deletion timestamps on entities. It's used in the example to automatically record when an entity is added, updated, or deleted in the database. The interface is implemented by entity classes that require timestamping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/events.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IHasTimestamps\n{\n    DateTime? Added { get; set; }\n    DateTime? Deleted { get; set; }\n    DateTime? Modified { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: DbContextOptionsBuilder UseSeeding\nDESCRIPTION: Demonstrates how to use the `UseSeeding` method in `DbContextOptionsBuilder` to seed data when the `DbContext` is initialized. This is typically used during the `EnsureCreatedAsync` process. It is important to check if the data already exists to prevent redundant seeding attempts.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[ContextOptionSeeding](../../../../samples/core/Modeling/DataSeeding/DataSeedingContext.cs?name=ContextOptionSeeding)]\n```\n\n----------------------------------------\n\nTITLE: Creating GetStudentGrades Stored Procedure in SQL\nDESCRIPTION: This SQL script creates a stored procedure named 'GetStudentGrades'. It retrieves student grades from the 'StudentGrade' table based on the provided 'StudentID'. It returns 'EnrollmentID', 'Grade', 'CourseID', and 'StudentID' for the specified student.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[GetStudentGrades]')\nAND type in (N'P', N'PC'))\nBEGIN\nEXEC dbo.sp_executesql @statement = N'\nCREATE PROCEDURE [dbo].[GetStudentGrades]\n@StudentID int\nAS\nSELECT EnrollmentID, Grade, CourseID, StudentID FROM dbo.StudentGrade\nWHERE StudentID = @StudentID\n'\nEND\nGO\n```\n\n----------------------------------------\n\nTITLE: Discriminator Length Convention (Finalizing Convention) - C#\nDESCRIPTION: This convention implements IModelFinalizingConvention, running after all other model building is complete. It iterates over all entity types, finds the discriminator property for each inheritance hierarchy, and sets the maximum length to 24. This ensures the discriminator length is configured even if customized explicitly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_69\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DiscriminatorLengthConvention2 : IModelFinalizingConvention\n{\n    public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context)\n    {\n        foreach (var entityType in modelBuilder.Metadata.GetEntityTypes()\n                     .Where(entityType => entityType.BaseType == null))\n        {\n            var discriminatorProperty = entityType.FindDiscriminatorProperty();\n            if (discriminatorProperty != null\n                && discriminatorProperty.ClrType == typeof(string))\n            {\n                discriminatorProperty.Builder.HasMaxLength(24);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cosmos DB Document Example JSON\nDESCRIPTION: Illustrates the structure of an Azure Cosmos DB document resulting from the model configuration in EF Core 6.0, showcasing embedded child entities like Parents, Children, Pets, and Address within the Family document.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_37\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Id\": \"Wakefield.7\",\n  \"LastName\": \"Wakefield\",\n  \"Discriminator\": \"Family\",\n  \"IsRegistered\": true,\n  \"id\": \"Family|Wakefield.7\",\n  \"Address\": {\n    \"City\": \"NY\",\n    \"County\": \"Manhattan\",\n    \"State\": \"NY\"\n  },\n  \"Children\": [\n    {\n      \"FamilyName\": \"Merriam\",\n      \"FirstName\": \"Jesse\",\n      \"Gender\": \"female\",\n      \"Grade\": 8,\n      \"Pets\": [\n        {\n          \"GivenName\": \"Goofy\"\n        },\n        {\n          \"GivenName\": \"Shadow\"\n        }\n      ]\n    },\n    {\n      \"FamilyName\": \"Miller\",\n      \"FirstName\": \"Lisa\",\n      \"Gender\": \"female\",\n      \"Grade\": 1,\n      \"Pets\": []\n    }\n  ],\n  \"Parents\": [\n    {\n      \"FamilyName\": \"Wakefield\",\n      \"FirstName\": \"Robin\"\n    },\n    {\n      \"FamilyName\": \"Miller\",\n      \"FirstName\": \"Ben\"\n    }\n  ],\n  \"_rid\": \"x918AKh6p20CAAAAAAAAAA==\",\n  \"_self\": \"dbs/x918AA==/colls/x918AKh6p20=/docs/x918AKh6p20CAAAAAAAAAA==/\",\n  \"_etag\": \"\\\"00000000-0000-0000-adee-87f30c8c01d7\\\"\",\n  \"_attachments\": \"attachments/\",\n  \"_ts\": 1632121802\n}\n```\n\n----------------------------------------\n\nTITLE: Workaround for CS9137 Error\nDESCRIPTION: This snippet provides a workaround for the `CS9137` error that may occur during publishing due to outdated transitive package references.  It explicitly adds the `Microsoft.CodeAnalysis.CSharp.Workspaces` and `Microsoft.CodeAnalysis.Workspaces.MSBuild` packages to the .csproj file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/nativeaot-and-precompiled-queries.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.CodeAnalysis.CSharp.Workspaces\" Version=\"4.13.0\" />\n<PackageReference Include=\"Microsoft.CodeAnalysis.Workspaces.MSBuild\" Version=\"4.13.0\" />\n```\n\n----------------------------------------\n\nTITLE: Testing Controller Index Action with Mock Repository C#\nDESCRIPTION: This code snippet demonstrates a test class for the `Index` action of an `EmployeeController`. It inherits from the `EmployeeControllerTestBase` and sets up an expectation on the mock repository to return a predefined set of employee data when the `FindAll` method is called. It also includes a test method that asserts that the model returned by the `Index` action contains all the expected employees.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\n    public class EmployeeControllerIndexActionTests\n               : EmployeeControllerTestBase {\n        public EmployeeControllerIndexActionTests() {\n            _repository.Setup(r => r.FindAll())\n                        .Returns(_employeeData);\n        }\n        // .. tests\n        [TestMethod]\n        public void ShouldBuildModelWithAllEmployees() {\n            var result = _controller.Index();\n            var model = result.ViewData.Model\n                          as IEnumerable<Employee>;\n            Assert.IsTrue(model.Count() == _employeeData.Count());\n        }\n        // .. and more tests\n    }\n```\n\n----------------------------------------\n\nTITLE: SelectMany Converted to Cross Join (C#)\nDESCRIPTION: This code snippet demonstrates the usage of the LINQ SelectMany operator where the collection selector doesn't reference anything from the outer source.  This translates to a CROSS JOIN operation in relational databases, resulting in a cartesian product.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Blogs\n    .SelectMany(b => context.Posts,\n        (b, p) => new { b, p });\n\n/*\n\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url], [p].[PostId], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Rating], [p].[Title]\nFROM [Blogs] AS [b]\nCROSS JOIN [Posts] AS [p]\n*/\n```\n\n----------------------------------------\n\nTITLE: Enabling Online Index Creation in EF Core with SQL Server\nDESCRIPTION: This code snippet shows how to configure an index to be created online in Entity Framework Core using the SQL Server provider. Creating an index online allows concurrent user access to the underlying table during index creation, minimizing downtime and allowing continuous updates and queries. This option is crucial for maintaining application availability during index operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/indexes.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasIndex(b => b.Url)\n        .IsOnline();\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Where and First C#\nDESCRIPTION: This C# snippet filters people based on MiddleInitial and Age, groups them by LastName, selects the LastName of the first person in each group, and orders the results by length.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nvar people = context.People\n    .Where(e => e.MiddleInitial == \"Q\" && e.Age == 20)\n    .GroupBy(e => e.LastName)\n    .Select(g => g.First().LastName)\n    .OrderBy(e => e.Length)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of LINQ Query\nDESCRIPTION: This SQL code shows the SQLite translation of the LINQ query that uses primitive collections. It uses JSON functions to iterate through and compare the `DaysVisited` collections of walks and pubs to determine common visit days.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_77\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"w\".\"Name\" AS \"WalkName\", \"p\".\"Name\" AS \"PubName\", (\n    SELECT COUNT(*)\n    FROM json_each(\"w\".\"DaysVisited\") AS \"d\"\n    WHERE \"d\".\"value\" IN (\n        SELECT \"d0\".\"value\"\n        FROM json_each(\"p\".\"DaysVisited\") AS \"d0\"\n    )) AS \"Count\", json_array_length(\"w\".\"DaysVisited\") AS \"TotalCount\"\nFROM \"Walks\" AS \"w\"\nINNER JOIN \"Pubs\" AS \"p\" ON \"w\".\"ClosestPubId\" = \"p\".\"Id\"\n```\n\n----------------------------------------\n\nTITLE: Define Column Order using Fluent API in EF Core (C#)\nDESCRIPTION: This code snippet shows how to define column order using the Fluent API in EF Core. The `HasColumnOrder` method is used to specify the order in which the column should appear in the database table. This can override ordering specified with data annotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>().Property(b => b.BlogId).HasColumnOrder(1);\n```\n\n----------------------------------------\n\nTITLE: DbContext with DbSet initialized via Set<T>() C#\nDESCRIPTION: This snippet demonstrates an alternative way to define DbSet properties in a DbContext, initializing them using the `Set<T>()` method. This approach avoids the compiler warning related to uninitialized non-nullable properties in older EF Core versions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyContext : DbContext\n{\n    public DbSet<Customer> Customers => Set<Customer>();\n}\n```\n\n----------------------------------------\n\nTITLE: Define Derived Context in VB.NET\nDESCRIPTION: Defines the SchoolContext class, which inherits from DbContext. This class represents the database session and allows querying and saving data. It exposes DbSet properties for each entity in the model (OfficeAssignments, Instructors, Courses, Departments). The OnModelCreating method is overridden to configure the model using the Fluent API (not implemented in this snippet).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/vb.md#_snippet_1\n\nLANGUAGE: vb\nCODE:\n```\nImports System.ComponentModel.DataAnnotations\nImports System.ComponentModel.DataAnnotations.Schema\nImports System.Data.Entity\nImports System.Data.Entity.Infrastructure\nImports System.Data.Entity.ModelConfiguration.Conventions\n\nPublic Class SchoolContext\n    Inherits DbContext\n\n    Public Property OfficeAssignments() As DbSet(Of OfficeAssignment)\n    Public Property Instructors() As DbSet(Of Instructor)\n    Public Property Courses() As DbSet(Of Course)\n    Public Property Departments() As DbSet(Of Department)\n\n    Protected Overrides Sub OnModelCreating(ByVal modelBuilder As DbModelBuilder)\n    End Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading with Entity Framework Core\nDESCRIPTION: This C# code snippet demonstrates lazy loading in Entity Framework Core. It retrieves customers from the UK, but the related orders are not loaded initially. Instead, they are loaded on-demand when the `Orders` navigation property is accessed.  This requires `LazyLoadingEnabled` to be set to `true`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nusing (NorthwindEntities context = new NorthwindEntities())\n{\n    context.ContextOptions.LazyLoadingEnabled = true;\n\n    //Notice that the Include method call is missing in the query\n    var ukCustomers = context.Customers.Where(c => c.Address.Country == \"UK\");\n\n    var chosenCustomer = AskUserToPickCustomer(ukCustomers);\n    Console.WriteLine(\"Customer Id: {0} has {1} orders\", customer.CustomerID, customer.Orders.Count);\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Local Variable - Cacheable C#\nDESCRIPTION: This example shows the corrected version of the previous code.  By assigning the non-mapped object's property to a local variable and using that in the query, the query becomes cacheable, improving performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new MyContext())\n{\n    var myObject = new NonMappedType();\n    var myValue = myObject.MyProperty;\n    var query = from entity in context.MyEntities\n                where entity.Name.StartsWith(myValue)\n                select entity;\n\n    var results = query.ToList();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Address Struct C#\nDESCRIPTION: This C# snippet defines a mutable `Address` struct. It uses get and set properties, allowing the values to be modified after the object is created.  Each property will have its own copy of the struct, avoiding the sharing issues that occur with mutable reference types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic struct Address\n{\n    public string Line1 { get; set; }\n    public string? Line2 { get; set; }\n    public string City { get; set; }\n    public string Country { get; set; }\n    public string PostCode { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Update Statements - SQL\nDESCRIPTION: Shows the SQL UPDATE statements generated by EF Core based on the changes made to the Blog and Post entities in the previous C# code snippet. It updates the Name column in the Blogs table and the Title column in the Posts table using parameterized queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/index.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p1='1' (DbType = String), @p0='.NET Blog (Updated!)' (Size = 20)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Blogs\" SET \"Name\" = @p0\nWHERE \"Id\" = @p1;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p1='2' (DbType = String), @p0='Announcing F# 5.0' (Size = 17)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Posts\" SET \"Title\" = @p0\nWHERE \"Id\" = @p1;\nSELECT changes();\n```\n\n----------------------------------------\n\nTITLE: Renaming Discriminator Column - C#\nDESCRIPTION: This code demonstrates a model-based convention that renames discriminator columns in the database schema from \"Discriminator\" to \"EntityType\". It implements the IStoreModelConvention interface and applies the change to EdmProperty objects with the name \"Discriminator\". This convention targets the S-Space (store model).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/model.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Data.Entity.Core.Metadata.Edm;\nusing System.Data.Entity.Infrastructure;\nusing System.Data.Entity.ModelConfiguration.Conventions;\n\nclass DiscriminatorRenamingConvention : IStoreModelConvention<EdmProperty>  \n{  \n    public void Apply(EdmProperty property, DbModel model)  \n    {            \n        if (property.Name == \"Discriminator\")  \n        {  \n            property.Name = \"EntityType\";  \n        }  \n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Configure Split Queries Globally - C#\nDESCRIPTION: This code demonstrates how to configure split queries as the default behavior for the application's context. This ensures that all queries with included collections are split into multiple SQL queries unless explicitly configured otherwise. Requires `Microsoft.EntityFrameworkCore` package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder options)\n{\n    options.UseSqlServer(\"YourConnectionString\")\n           .UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery);\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext with DbSet C#\nDESCRIPTION: Shows how to expose an entity type through a DbSet property on the DbContext.  This is one way to ensure the entity type is included in the model, which is required for the EntityTypeConfiguration attribute to function.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\npublic class BooksContext : DbContext\n{\n    public DbSet<Book> Books { get; set; }\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Functional Context Instance From a Fixture (C#)\nDESCRIPTION: Shows how to create a fully functional context instance from the fixture within a test method. This context instance can then be used to interact with the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void GetBlog()\n{\n    using var context = Fixture.CreateContext();\n    var controller = new BloggingController(context);\n    var blogs = controller.Get().ToArray();\n\n    Assert.Equal(2, blogs.Length);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying EF Core Tools Installation (.NET CLI)\nDESCRIPTION: This command verifies that the EF Core tools are correctly installed and accessible in the current environment. The output displays the version of the tools being used.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef\n```\n\n----------------------------------------\n\nTITLE: stringValue.Replace .NET to SQL translation\nDESCRIPTION: Explains how stringValue.Replace(oldValue, newValue) in .NET translates to REPLACE(@stringValue, @oldValue, @newValue) in SQL within the Entity Framework Core and Cosmos DB context. It replaces occurrences of a substring within a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_31\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Replace(oldValue, newValue)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[REPLACE(@stringValue, @oldValue, @newValue)](/azure/cosmos-db/nosql/query/replace)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Unit of Work (C#)\nDESCRIPTION: This code snippet implements the `IUnitOfWork` interface and manages the `ObjectContext` lifecycle.  It also initializes the repositories for `Employee` and `TimeCard` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SqlUnitOfWork : IUnitOfWork {\n        public SqlUnitOfWork() {\n            var connectionString =\n                ConfigurationManager\n                    .ConnectionStrings[ConnectionStringName]\n                    .ConnectionString;\n\n            _context = new ObjectContext(connectionString);\n            _context.ContextOptions.LazyLoadingEnabled = true;\n        }\n\n        public IRepository<Employee> Employees {\n            get {\n                if (_employees == null) {\n                    _employees = new SqlRepository<Employee>(_context);\n                }\n                return _employees;\n            }\n        }\n\n        public IRepository<TimeCard> TimeCards {\n            get {\n                if (_timeCards == null) {\n                    _timeCards = new SqlRepository<TimeCard>(_context);\n                }\n                return _timeCards;\n            }\n        }\n\n        public void Commit() {\n            _context.SaveChanges();\n        }\n\n        SqlRepository<Employee> _employees = null;\n        SqlRepository<TimeCard> _timeCards = null;\n        readonly ObjectContext _context;\n        const string ConnectionStringName = \"EmployeeDataModelContainer\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Example SQL Output from Entity Framework 6 Logging\nDESCRIPTION: This snippet presents an example of the SQL output generated by Entity Framework 6 when logging is enabled. It shows the SQL statements for selecting a blog, selecting posts, updating a post, and inserting a new post, along with parameter values and execution timestamps.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP (1)\n    [Extent1].[Id] AS [Id],\n    [Extent1].[Title] AS [Title]\n    FROM [dbo].[Blogs] AS [Extent1]\n    WHERE (N'One Unicorn' = [Extent1].[Title]) AND ([Extent1].[Title] IS NOT NULL)\n-- Executing at 10/8/2013 10:55:41 AM -07:00\n-- Completed in 4 ms with result: SqlDataReader\n\nSELECT\n    [Extent1].[Id] AS [Id],\n    [Extent1].[Title] AS [Title],\n    [Extent1].[BlogId] AS [BlogId]\n    FROM [dbo].[Posts] AS [Extent1]\n    WHERE [Extent1].[BlogId] = @EntityKeyValue1\n-- EntityKeyValue1: '1' (Type = Int32)\n-- Executing at 10/8/2013 10:55:41 AM -07:00\n-- Completed in 2 ms with result: SqlDataReader\n\nUPDATE [dbo].[Posts]\nSET [Title] = @0\nWHERE ([Id] = @1)\n-- @0: 'Green Eggs and Ham' (Type = String, Size = -1)\n-- @1: '1' (Type = Int32)\n-- Executing asynchronously at 10/8/2013 10:55:41 AM -07:00\n-- Completed in 12 ms with result: 1\n\nINSERT [dbo].[Posts]([Title], [BlogId])\nVALUES (@0, @1)\nSELECT [Id]\nFROM [dbo].[Posts]\nWHERE @@ROWCOUNT > 0 AND [Id] = scope_identity()\n-- @0: 'I do not like them!' (Type = String, Size = -1)\n-- @1: '1' (Type = Int32)\n-- Executing asynchronously at 10/8/2013 10:55:41 AM -07:00\n-- Completed in 2 ms with result: SqlDataReader\n```\n\n----------------------------------------\n\nTITLE: Helper Method for URL Standardization\nDESCRIPTION: Illustrates the helper method used to standardize URLs for blogs. This method is not translatable to SQL and is therefore executed on the client side in the top-level projection.  It formats a URL string based on custom logic.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/client-eval.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Querying/ClientEvaluation/Program.cs#ClientMethod)]\n```\n\n----------------------------------------\n\nTITLE: Negated Contains Improvements - C#\nDESCRIPTION: This C# code snippet demonstrates a query with a negated `Contains` operation. EF Core 9 simplifies the translation of this negation into SQL, improving query performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nvar negatedContainsSimplification = await context.Posts\n    .Where(p => !p.Content.Contains(\"Announcing\"))\n    .Select(p => new { p.Content }).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Data with Entity Framework 6 in C#\nDESCRIPTION: This C# code demonstrates how to create a new instance of the BloggingContext, add a new blog to the database, and retrieve all blogs ordered by name using a LINQ query. The code uses the Entity Framework to interact with the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/workflows/model-first.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Program\n{\n    static void Main(string[] args)\n    {\n        using (var db = new BloggingContext())\n        {\n            // Create and save a new Blog\n            Console.Write(\"Enter a name for a new Blog: \");\n            var name = Console.ReadLine();\n\n            var blog = new Blog { Name = name };\n            db.Blogs.Add(blog);\n            db.SaveChanges();\n\n            // Display all Blogs from the database\n            var query = from b in db.Blogs\n                        orderby b.Name\n                        select b;\n\n            Console.WriteLine(\"All blogs in the database:\");\n            foreach (var item in query)\n            {\n                Console.WriteLine(item.Name);\n            }\n\n            Console.WriteLine(\"Press any key to exit...\");\n            Console.ReadKey();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Referencing Relationships - C#\nDESCRIPTION: Demonstrates how to configure multiple ambiguous self-referencing relationships in EF Core 3.0 using the fluent API. This is necessary because EF Core 3.0 throws an exception if such relationships are not explicitly configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n     .Entity<User>()\n     .HasOne(e => e.CreatedBy)\n     .WithMany();\n\n modelBuilder\n     .Entity<User>()\n     .HasOne(e => e.UpdatedBy)\n     .WithMany();\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Example in C#\nDESCRIPTION: This code snippet demonstrates dependency injection by injecting an IUnitOfWork interface into an EmployeeController's constructor. This allows for easy switching between a real and fake unit of work during testing. The _unitOfWork field stores the injected dependency.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nclass EmployeeController : Controller {\n    \tpublic EmployeeController(IUnitOfWork unitOfWork) \t{\n    \t\t_unitOfWork = unitOfWork;\n    \t}\n    \t...\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Conversion for a Collection of Value Objects in C#\nDESCRIPTION: This code configures the value conversion for the `Finances` property of the `Blog` entity. It uses `System.Text.Json` to serialize and deserialize the collection of `AnnualFinance` objects, along with a custom `ValueComparer` for change tracking, since `IList<AnnualFinance>` is a mutable reference type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(e => e.Finances)\n    .HasConversion(\n        v => JsonSerializer.Serialize(v, null),\n        v => JsonSerializer.Deserialize<List<AnnualFinance>>(v, null),\n        new ValueComparer<IList<AnnualFinance>>(\n            (c1, c2) => c1.SequenceEqual(c2),\n            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v.GetHashCode())),\n            c => (IList<AnnualFinance>)c.ToList()));\n```\n\n----------------------------------------\n\nTITLE: Explicitly Loading Related Data - EF6 - C#\nDESCRIPTION: This code demonstrates how to explicitly load related entities using the Load method in Entity Framework 6. It shows examples of loading the blog related to a post and loading the posts related to a blog using both lambda expressions and strings to specify the relationship. Requires Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/related-data.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var post = context.Posts.Find(2);\n\n    // Load the blog related to a given post.\n    context.Entry(post).Reference(p => p.Blog).Load();\n\n    // Load the blog related to a given post using a string.\n    context.Entry(post).Reference(\"Blog\").Load();\n\n    var blog = context.Blogs.Find(1);\n\n    // Load the posts related to a given blog.\n    context.Entry(blog).Collection(p => p.Posts).Load();\n\n    // Load the posts related to a given blog\n    // using a string to specify the relationship.\n    context.Entry(blog).Collection(\"Posts\").Load();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Query Examples with Nullable Columns in C#\nDESCRIPTION: Illustrates basic queries using LINQ with nullable and non-nullable properties, demonstrating how EF Core translates these queries into SQL, handling null comparisons implicitly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/null-comparisons.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Simple comparisons\nvar query1 = context.Entities.Where(e => e.Id == e.Int);\nvar query2 = context.Entities.Where(e => e.Id == e.NullableInt);\nvar query3 = context.Entities.Where(e => e.Id != e.NullableInt);\n\n// Comparing nullable strings\nvar query4 = context.Entities.Where(e => e.String1 == e.String2);\nvar query5 = context.Entities.Where(e => e.String1 != e.String2);\n```\n\n----------------------------------------\n\nTITLE: Tracking Entities in Custom Projections (Anonymous Type)\nDESCRIPTION: This code demonstrates that EF Core will still track entity types even when the result type of the query is not an entity type, such as an anonymous type. The `Blog` instances within the projection will be tracked by default. This is important to note as tracking behavior can affect performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blogUrls = context.Blogs\n    .Select(blog => new { blog.Url })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Entity with Explicit Key - C#\nDESCRIPTION: This code snippet demonstrates how to update an existing entity (Blog) using `DbContext.Update` when the entity has an explicit key value. The entity is tracked in the `Modified` state, and SaveChanges will generate an UPDATE statement.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Update(\n    new Blog\n    {\n        Id = 1,\n        Name = \".NET Blog\",\n    });\n```\n\n----------------------------------------\n\nTITLE: Changing Relationships Using Foreign Key Values in EF Core\nDESCRIPTION: This C# code snippet demonstrates changing relationships by directly manipulating foreign key values. It moves a post from one blog to another by updating the `BlogId` property of the `Post` entity to the ID of the new blog. Requires loading blogs and posts into the context first.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar post = vsBlog.Posts.Single(e => e.Title.StartsWith(\"Disassembly improvements\"));\n        post.BlogId = dotNetBlog.Id;\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Bundle with EF Core\nDESCRIPTION: This command creates an executable migration bundle using the EF Core tools. The bundle contains all pending migrations that can be applied to the database. It requires the EF Core tools to be installed and configured, and existing migrations to bundle.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_11\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations bundle\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Package with .NET Core CLI\nDESCRIPTION: This command adds a specific NuGet package for the database provider to the project using the .NET Core CLI. Replace `provider_package_name` with the actual package name. It requires the .NET Core SDK to be installed and configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/index.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package provider_package_name\n```\n\n----------------------------------------\n\nTITLE: TPH: Subset of Types Query - SQL\nDESCRIPTION: SQL query generated by EF Core with TPH for retrieving entities from a subset of types ('Cat', 'Dog'). It filters the 'Animals' table based on the 'Discriminator' column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_53\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Id], [a].[Discriminator], [a].[FoodId], [a].[Name], [a].[Vet], [a].[EducationLevel], [a].[FavoriteToy]\nFROM [Animals] AS [a]\nWHERE [a].[Discriminator] IN (N'Cat', N'Dog')\n```\n\n----------------------------------------\n\nTITLE: Bulk Configure Value Converter\nDESCRIPTION: This C# code defines a `CurrencyConverter` class that implements `ValueConverter<TModel, TProvider>`, converting between `decimal` and `string`. This allows a consistent currency formatting across the application. The converter formats decimal values to a currency string and parses currency strings back to decimal values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class CurrencyConverter : ValueConverter<decimal, string>\n{\n    public CurrencyConverter()\n        : base(\n              v => v.ToString(\"C\", EF.Functions.CultureInfo(\"en-US\")),\n              v => Convert.ToDecimal(v, EF.Functions.CultureInfo(\"en-US\")))\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure System.Text.Json to Ignore Cycles\nDESCRIPTION: This code snippet demonstrates how to configure System.Text.Json to ignore cycles during serialization in an ASP.NET Core application.  It sets the `ReferenceHandler` to `ReferenceHandler.IgnoreCycles`. It requires the `Microsoft.AspNetCore.Mvc` and `System.Text.Json` namespaces.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/serialization.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n\n    services.AddControllers()\n        .AddJsonOptions(options =>\n        {\n            options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;\n        });\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Required members in C# 11 for initializing non-nullable properties\nDESCRIPTION: This code snippet showcases how to use the `required` keyword introduced in C# 11 to ensure that non-nullable properties are initialized when a class is instantiated. This helps prevent CS8618 warnings and ensures that properties always have a non-null value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic required string Name { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Persisting and Querying Spatial Data with EF6 and DbGeography in C#\nDESCRIPTION: This C# code snippet demonstrates how to persist spatial data (latitude and longitude) to a database using Entity Framework 6 and the DbGeography type. It initializes DbGeography properties using WellKnownText, saves the data to the database, and then executes a LINQ query to find the University closest to a specified location based on distance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/data-types/spatial.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new UniversityModelContainer())\n{\n    context.Universities.Add(new University()\n    {\n        Name = \"Graphic Design Institute\",\n        Location = DbGeography.FromText(\"POINT(-122.336106 47.605049)\"),\n    });\n\n    context.Universities.Add(new University()\n    {\n        Name = \"School of Fine Art\",\n        Location = DbGeography.FromText(\"POINT(-122.335197 47.646711)\"),\n    });\n\n    context.SaveChanges();\n\n    var myLocation = DbGeography.FromText(\"POINT(-122.296623 47.640405)\");\n\n    var university = (from u in context.Universities\n                                orderby u.Location.Distance(myLocation)\n                                select u).FirstOrDefault();\n\n    Console.WriteLine(\n        \"The closest University to you is: {0}.\",\n        university.Name);\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Model Customization C#\nDESCRIPTION: This partial class with partial methods allows for customizing the compiled model as needed. It initializes, customizes, and returns a singleton instance of the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\npartial class BlogsContextModel : RuntimeModel\n{\n    private static BlogsContextModel _instance;\n    public static IModel Instance\n    {\n        get\n        {\n            if (_instance == null)\n            {\n                _instance = new BlogsContextModel();\n                _instance.Initialize();\n                _instance.Customize();\n            }\n\n            return _instance;\n        }\n    }\n\n    partial void Initialize();\n\n    partial void Customize();\n}\n```\n\n----------------------------------------\n\nTITLE: Define IHasLogger Interface C#\nDESCRIPTION: Defines an interface `IHasLogger` with a nullable `Logger` property of type `ILogger`. This interface is used to mark entities that should have a logger injected into them. This allows the entities to perform their own logging.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_94\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IHasLogger\n{\n    ILogger? Logger { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Self-Referencing Many-to-Many (C#)\nDESCRIPTION: This snippet defines a self-referencing many-to-many relationship using the Person entity.  A Person can have multiple parents and children, both of which are also Persons.  This is achieved using two List<Person> navigations: Parents and Children.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n    public int Id { get; set; }\n    public List<Person> Parents { get; } = new();\n    public List<Person> Children { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying In-Memory View C#\nDESCRIPTION: Demonstrates querying the CustomerDensities DbSet to retrieve the data defined by the ToInMemoryQuery method. This shows how to treat the in-memory 'view' defined by ToInMemoryQuery just like any other DbSet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nvar results = context.CustomerDensities.ToList();\n```\n\n----------------------------------------\n\nTITLE: Resolving HTTP Client Factory for Cosmos DB\nDESCRIPTION: Illustrates how to explicitly set the `HttpClientFactory` used by the Azure Cosmos DB provider in EF Core 6.0.  This is useful for scenarios like testing, particularly when bypassing certificate validation when using the Azure Cosmos DB emulator on Linux. The connection string and database name are placeholders and should be replaced with actual values. Requires `Microsoft.EntityFrameworkCore.Cosmos` package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\noptionsBuilder\n    .EnableSensitiveDataLogging()\n    .UseCosmos(\n        \"https://localhost:8081\",\n        \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\",\n        \"PrimitiveCollections\",\n        cosmosOptionsBuilder =>\n        {\n            cosmosOptionsBuilder.HttpClientFactory(\n                () => new HttpClient(\n                    new HttpClientHandler\n                    {\n                        ServerCertificateCustomValidationCallback =\n                            HttpClientHandler.DangerousAcceptAnyServerCertificateValidator\n                    }));\n        });\n```\n\n----------------------------------------\n\nTITLE: Explicit Eager Loading using Include in C#\nDESCRIPTION: This code snippet shows how to eagerly load the `TimeCards` collection for each `Employee` entity using the `Include` method. This ensures that the related data is retrieved in the same query, avoiding potential N+1 query problems.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n    _employees.Include(\"TimeCards\")\n              .Where(e => e.HireDate.Year > 2009);\n```\n\n----------------------------------------\n\nTITLE: Parameterized Primitive Collections with Default Behavior in EF Core 9 (C#)\nDESCRIPTION: This code snippet demonstrates the default behavior in EF Core 9 for handling parameterized primitive collections in LINQ queries. EF converts the collection to JSON and passes it as a single parameter to the SQL query.  This approach allows for the same SQL query to be used for different collections, but can have performance implications.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<List<Post>> GetPostsPrimitiveCollection(int[] ids)\n    => await context.Posts\n        .Where(e => e.Title == \".NET Blog\" && ids.Contains(e.Id))\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Basic Many-to-Many SQLite Schema SQL\nDESCRIPTION: Illustrates the resulting SQLite schema generated when using a basic many-to-many relationship configuration. This shows the creation of the `Posts`, `Tags`, and `PostTag` tables with appropriate primary and foreign key constraints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"Posts\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Posts\" PRIMARY KEY AUTOINCREMENT);\n\nCREATE TABLE \"Tags\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Tags\" PRIMARY KEY AUTOINCREMENT);\n\nCREATE TABLE \"PostTag\" (\n    \"PostsId\" INTEGER NOT NULL,\n    \"TagsId\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostsId\", \"TagsId\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostsId\" FOREIGN KEY (\"PostsId\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagsId\" FOREIGN KEY (\"TagsId\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: DbContext Configuration with DbContextOptions - C#\nDESCRIPTION: This code snippet demonstrates the configuration of the `DocsContext` DbContext, specifically showing how to define a constructor that accepts `DbContextOptions<DocsContext>` to enable runtime configuration of the database context. The options are passed to the base class constructor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic DocsContext(DbContextOptions<DocsContext> options)\n    : base(options)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Regex.IsMatch .NET to SQL translation\nDESCRIPTION: Demonstrates how Regex.IsMatch in .NET translates to RegexMatch in SQL within an Entity Framework Core context. This function checks if the input string matches the given regular expression pattern. EF Core 7.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_13\n\nLANGUAGE: .NET\nCODE:\n```\nRegex.IsMatch(input, pattern)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[RegexMatch(@pattern, @input)](/azure/cosmos-db/nosql/query/regexmatch)\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Entity Test C#\nDESCRIPTION: This test verifies that a new blog can be created and saved to the in-memory context. It creates a `TestContext`, a `BlogService`, adds a blog, and then asserts that the blog was added to the context and that `SaveChanges` was called.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/writing-test-doubles.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Linq;\n\nnamespace TestingDemo\n{\n    [TestClass]\n    public class NonQueryTests\n    {\n        [TestMethod]\n        public void CreateBlog_saves_a_blog_via_context()\n        {\n            var context = new TestContext();\n\n            var service = new BlogService(context);\n            service.AddBlog(\"ADO.NET Blog\", \"http://blogs.msdn.com/adonet\");\n\n            Assert.AreEqual(1, context.Blogs.Count());\n            Assert.AreEqual(\"ADO.NET Blog\", context.Blogs.Single().Name);\n            Assert.AreEqual(\"http://blogs.msdn.com/adonet\", context.Blogs.Single().Url);\n            Assert.AreEqual(1, context.SaveChangesCount);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Negated Bool Projection - SQL (EF8)\nDESCRIPTION: This SQL query shows the `CASE` block that EF Core 8 generates for a negated boolean property, required because comparisons can't appear in the projection directly in SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_68\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Title], CASE\n    WHEN [p].[Archived] = CAST(0 AS bit) THEN CAST(1 AS bit)\n    ELSE CAST(0 AS bit)\nEND AS [Active]\nFROM [Posts] AS [p]\n```\n\n----------------------------------------\n\nTITLE: Ignoring a CLR Property - EF6 - C#\nDESCRIPTION: This example demonstrates how to prevent a CLR property (`Budget`) from being mapped to a column in the database using the `Ignore` method.  This is useful for properties that are used in the application but should not be persisted in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>().Ignore(t => t.Budget);\n```\n\n----------------------------------------\n\nTITLE: Unsupported Client Evaluation Example\nDESCRIPTION: Shows an example of unsupported client evaluation within a `where` clause. Because the filter cannot be translated to SQL, Entity Framework Core blocks this type of client evaluation and throws a runtime exception to prevent performance issues. This snippet demonstrates a scenario where client-side filtering is disallowed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/client-eval.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Querying/ClientEvaluation/Program.cs#ClientWhere)]\n```\n\n----------------------------------------\n\nTITLE: Implementing IEntityTypeBaseTypeChangedConvention in C#\nDESCRIPTION: This code defines a convention that implements the IEntityTypeBaseTypeChangedConvention interface. It is triggered when the inheritance hierarchy changes. It finds the discriminator property and sets its maximum length to 24. This approach is sensitive to later changes in model configuration, potentially losing the specified length constraint if the discriminator is explicitly configured later.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class DiscriminatorLengthConvention1 : IEntityTypeBaseTypeChangedConvention\n{\n    public void ProcessEntityTypeBaseTypeChanged(\n        IConventionEntityTypeBuilder entityTypeBuilder,\n        IConventionEntityType? newBaseType,\n        IConventionEntityType? oldBaseType,\n        IConventionContext<IConventionEntityType> context)\n    {\n        var discriminatorProperty = entityTypeBuilder.Metadata.FindDiscriminatorProperty();\n        if (discriminatorProperty != null\n            && discriminatorProperty.ClrType == typeof(string))\n        {\n            discriminatorProperty.Builder.HasMaxLength(24);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL for Deleting All Tags\nDESCRIPTION: This SQL code demonstrates the DELETE statement generated by `ExecuteDeleteAsync` when deleting all Tag entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM [t]\nFROM [Tags] AS [t]\n```\n\n----------------------------------------\n\nTITLE: SQL for Updating Single Property with JSON_MODIFY\nDESCRIPTION: This SQL demonstrates updating a single property ('Country') within a JSON document using `JSON_MODIFY`. It updates the 'Contact' column by modifying the 'strict $.Address.Country' path with a new value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE [Authors] SET [Contact] = JSON_MODIFY([Contact], 'strict $.Address.Country', JSON_VALUE(@p0, '$[0]'))\nOUTPUT 1\nWHERE [Id] = @p1;\n```\n\n----------------------------------------\n\nTITLE: SQL Trigger for Updating Timestamp\nDESCRIPTION: This SQL code defines a trigger that updates the LastUpdated column in the Blogs table whenever a row is updated. This ensures that the timestamp reflects the last time the row was modified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TRIGGER [dbo].[Blogs_UPDATE] ON [dbo].[Blogs]\n    AFTER UPDATE\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    IF ((SELECT TRIGGER_NESTLEVEL()) > 1) RETURN;\n\n    UPDATE B\n    SET LastUpdated = GETDATE()\n    FROM dbo.Blogs AS B\n    INNER JOIN INSERTED AS I\n        ON B.BlogId = I.BlogId\nEND\n```\n\n----------------------------------------\n\nTITLE: Model with Case-Insensitive String Keys\nDESCRIPTION: Defines a Blog and Post model with string-based primary and foreign keys. This example highlights the need for case-insensitive string comparisons when using databases like SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n\n    public ICollection<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public string Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public string BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntityContainer with EntitySet and AssociationSet (XML)\nDESCRIPTION: This snippet demonstrates an **EntityContainer** element containing **EntitySet** elements for Customers and Orders, and an **AssociationSet** element that represents the relationship between these entities. The **AssociationSet** links to the **FK_CustomerOrders** association, defining how the Customers and Orders entities are related in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n <EntityContainer Name=\"ExampleModelStoreContainer\">\n   <EntitySet Name=\"Customers\"\n              EntityType=\"ExampleModel.Store.Customers\"\n              Schema=\"dbo\" />\n   <EntitySet Name=\"Orders\"\n              EntityType=\"ExampleModel.Store.Orders\"\n              Schema=\"dbo\" />\n   <AssociationSet Name=\"FK_CustomerOrders\"\n                   Association=\"ExampleModel.Store.FK_CustomerOrders\">\n     <End Role=\"Customers\" EntitySet=\"Customers\" />\n     <End Role=\"Orders\" EntitySet=\"Orders\" />\n   </AssociationSet>\n </EntityContainer>\n```\n\n----------------------------------------\n\nTITLE: Defining Function Parameters in XML (SSDL)\nDESCRIPTION: This XML snippet demonstrates how to define function parameters within a Function element in SSDL. The example shows two Parameter elements, orderId and newQuantity, both of type int and with Mode set to In, indicating that they are input parameters for the stored procedure.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"UpdateOrderQuantity\"\n           Aggregate=\"false\"\n           BuiltIn=\"false\"\n           NiladicFunction=\"false\"\n           IsComposable=\"false\"\n           ParameterTypeSemantics=\"AllowImplicitConversion\"\n           Schema=\"dbo\">\n   <Parameter Name=\"orderId\" Type=\"int\" Mode=\"In\" />\n   <Parameter Name=\"newQuantity\" Type=\"int\" Mode=\"In\" />\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Update Database to Latest - .NET Core CLI\nDESCRIPTION: This command updates the database to the latest migration using the .NET Core CLI. It directly applies the SQL commands to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_8\n\nLANGUAGE: .NET Core CLI\nCODE:\n```\ndotnet ef database update\n```\n\n----------------------------------------\n\nTITLE: SQL Query Result from FromSql Example\nDESCRIPTION: This SQL code snippet shows the resulting query that is executed against Azure Cosmos DB based on the `FromSql` example. It demonstrates the parameterized query approach used by EF Core to prevent SQL injection when using `FromSql`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT VALUE s\nFROM (\n    SELECT VALUE c FROM root c WHERE c.Angle1 <= @p0\n) s\n```\n\n----------------------------------------\n\nTITLE: Enabling MSBuild Integration in .csproj file\nDESCRIPTION: This XML snippet shows how to enable MSBuild integration for EF Core. Setting the `EFOptimizeContext` property to `true` enables the optimization. The `EFScaffoldModelStage` property is set to `build`, so the compiled model is updated during the build process.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_73\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <EFOptimizeContext>true</EFOptimizeContext>\n    <EFScaffoldModelStage>build</EFScaffoldModelStage>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Define Product Model - C#\nDESCRIPTION: Defines the ProductContext DbContext along with the Product and ProductCategory entity classes. It also sets the database initializer to DropCreateDatabaseIfModelChanges.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\n\npublic class ProductContext : DbContext\n{\n    static ProductContext()\n    {\n        Database.SetInitializer(new DropCreateDatabaseIfModelChanges<ProductContext>());\n    }\n\n    public DbSet<Product> Products { get; set; }\n}\n\npublic class Product\n{\n    public int Key { get; set; }\n    public string Name { get; set; }\n    public decimal? Price { get; set; }\n    public DateTime? ReleaseDate { get; set; }\n    public ProductCategory Category { get; set; }\n}\n\npublic class ProductCategory\n{\n    public int Key { get; set; }\n    public string Name { get; set; }\n    public List<Product> Products { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Queries with Constants in EF Core\nDESCRIPTION: This code demonstrates two LINQ queries that differ only in their constant values.  Because the expression trees are different, EF Core will compile each query separately, resulting in different SQL commands and potentially preventing database query plan reuse.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BloggingContext();\n\nvar post1 = context.Posts.FirstOrDefault(b => b.Name == \"post1\");\nvar post2 = context.Posts.FirstOrDefault(b => b.Name == \"post2\");\n```\n\n----------------------------------------\n\nTITLE: Removing ForeignKeyIndexConvention - C#\nDESCRIPTION: This code snippet shows how to remove the `ForeignKeyIndexConvention` during model building using the `ConfigureConventions` method. Removing this convention prevents EF Core from automatically creating indexes for foreign key columns, which can be useful for optimizing performance in certain scenarios.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Remove(typeof(ForeignKeyIndexConvention));\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Log Level in EF Core\nDESCRIPTION: This code snippet demonstrates how to filter log messages based on their log level. It sets the minimum log level to `Information`, which results in only database access and some housekeeping messages being logged.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(Console.WriteLine, LogLevel.Information);\n```\n\n----------------------------------------\n\nTITLE: Adding Migrations with Provider Argument via Visual Studio Powershell\nDESCRIPTION: Illustrates adding migrations using the Visual Studio Package Manager Console, passing the provider as an argument. This enables specifying the target database provider during migration creation, leveraging command-line configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/providers.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Migration MyMigration -Args \"--provider SqlServer\"\nAdd-Migration MyMigration -Args \"--provider Sqlite\"\n```\n\n----------------------------------------\n\nTITLE: Using null-forgiving operator when navigating optional relationships C#\nDESCRIPTION: This example shows how to use the null-forgiving operator (!) when navigating optional relationships in LINQ queries.  This tells the compiler that the navigation won't be null, even though it's technically possible.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar order = await context.Orders\n    .Where(o => o.OptionalInfo!.SomeProperty == \"foo\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: stringValue.EndsWith with Ordinal .NET to SQL translation\nDESCRIPTION: Shows how stringValue.EndsWith with StringComparison.Ordinal in .NET corresponds to ENDSWITH in SQL within the context of Entity Framework Core. This determines if a string ends with a specified substring with case sensitive check. EF Core 9.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_22\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.EndsWith(value, StringComparison.Ordinal)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[ENDSWITH(@stringValue, @value, false)](/azure/cosmos-db/nosql/query/endswith)\n```\n\n----------------------------------------\n\nTITLE: Calling Stored Procedure with SqlQuery - C#\nDESCRIPTION: This code snippet shows how to call a stored procedure using the `SqlQuery` method in Entity Framework when using Code First, which doesn't directly support mapping to stored procedures.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/stored-procedures/query.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Products.SqlQuery(\"EXECUTE [dbo].[GetAllProducts]\")`;\n```\n\n----------------------------------------\n\nTITLE: Update Entity via Update Method - C#\nDESCRIPTION: This code snippet shows how to update an entity using the `Update` method of the DbContext or DbSet. The `Update` method attaches the entity to the context and marks all its properties as modified.  This approach is suitable when the entity is created from an external source (e.g., HTTP POST) and a full update is desired, regardless of whether the properties have actually changed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdateFromHttpPost1(Blog blog)\n{\n    using var context = new BlogsContext();\n\n    context.Update(blog);\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Defined Function with Custom SQL Translation (C#)\nDESCRIPTION: This C# code snippet shows how to configure a user-defined function with a custom SQL translation using the `HasTranslation` method.  It specifies that the `PercentageDifference` CLR method should be translated into a specific SQL expression that calculates the percentage difference between two values. This translation is defined using an expression tree.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.HasDbFunction(typeof(BloggingContext).GetMethod(nameof(PercentageDifference), new[] { typeof(int), typeof(int) }))\n    .HasTranslation(args => 100 * (EF.Functions.Abs((double)args[0] - (double)args[1])) / (((double)args[0] + (double)args[1]) / 2));\n```\n\n----------------------------------------\n\nTITLE: Define Category Model Class C#\nDESCRIPTION: This code defines the `Category` class, representing a product category entity with properties for ID and name. It includes a collection navigation property `Products` to represent the one-to-many relationship between a category and its products. Using ObservableCollectionListSource for better data binding with WinForms.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/winforms.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\n\nnamespace GetStartedWinForms\n{\n    public class Category\n    {\n        public int CategoryId { get; set; }\n        [Required]\n        public string Name { get; set; }\n\n        public BindingList<Product> Products { get; set; } = new();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure DbContext to use compiled model\nDESCRIPTION: This C# code shows how to configure a DbContext to use a pre-compiled model.  The `UseModel` method is called within the `OnConfiguring` method, passing in the `Instance` property of the generated model class. This requires a previously generated compiled model. It also uses Sqlite for database connectivity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseModel(MyCompiledModels.BlogsContextModel.Instance)\n        .UseSqlite(@\"Data Source=test.db\");\n```\n\n----------------------------------------\n\nTITLE: Importing DataAnnotations Namespace in C#\nDESCRIPTION: This code snippet shows the using statement required to access the DataAnnotations namespace.  This namespace provides attributes for configuring model properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Transactions - C#\nDESCRIPTION: This snippet illustrates how to manually track the status of transactions using a dedicated table in the database. This approach provides a generic way to handle commit failures, especially when using store-generated keys.  It involves inserting a row into the tracking table at the beginning of each transaction and checking for its presence if the commit fails. The corresponding row is deleted after a successful commit to prevent table growth.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-resiliency.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var strategy = context.Database.CreateExecutionStrategy();\n\n    strategy.Execute(() =>\n    {\n        using (var transaction = context.Database.BeginTransaction())\n        {\n            var transactionId = Guid.NewGuid();\n\n            context.Database.ExecuteSqlRaw(\"INSERT INTO Transactions (TransactionId) VALUES ({@p0})\", transactionId);\n            context.SaveChanges();\n\n            try\n            {\n                context.Blogs.Add(new Blog { Url = \"http://example.com\" });\n                context.SaveChanges();\n\n                context.Database.ExecuteSqlRaw(\"DELETE FROM Transactions WHERE TransactionId = {@p0}\", transactionId);\n                context.SaveChanges();\n\n                transaction.Commit();\n            }\n            catch (Exception)\n            {\n                if (!context.Transactions.Any(t => t.TransactionId == transactionId))\n                {\n                    // Handle the failure\n                }\n\n                throw;\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Navigation with Defensive Copy - C#\nDESCRIPTION: This example shows how to return a defensive copy of the collection to prevent external modification.  This ensures that external changes do not affect the internal state of the entity.  Consider the overhead of creating a new list on each access.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    private readonly List<Post> _posts = new();\n\n    public int Id { get; set; }\n\n    public IEnumerable<Post> Posts => _posts.ToList();\n\n    public void AddPost(Post post) => _posts.Add(post);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Repository in Controller Action C#\nDESCRIPTION: This code snippet demonstrates how to use a custom repository to retrieve and order employee data within a controller action. It utilizes the `FindAll()` method of the repository and includes related `TimeCards` data.  The retrieved data is then ordered by the `HireDate` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\npublic ViewResult Index() {\n        var model = _repository.FindAll()\n                               .Include(\"TimeCards\")\n                               .OrderBy(e => e.HireDate);\n        return View(model);\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.EntityFrameworkCore.Tasks Package\nDESCRIPTION: This snippet adds the `Microsoft.EntityFrameworkCore.Tasks` package to the project. This package contains MSBuild integration that performs query precompilation (and generates the required compiled model) when you publish your application. The `PrivateAssets` and `IncludeAssets` attributes ensure that the package is only used during development and build, not at runtime.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/nativeaot-and-precompiled-queries.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tasks\" Version=\"9.0.0\">\n    <PrivateAssets>all</PrivateAssets>\n    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n  </PackageReference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Minimal API SQL Server DbContext Registration (C#)\nDESCRIPTION: This C# code demonstrates registering a `DbContext` for SQL Server using the minimal API. This is the condensed syntax for registering and configuring SQL Server as the database provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_159\n\nLANGUAGE: C#\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSqlServer<MyDbContext>(@\"Server=(localdb)\\mssqllocaldb;Database=MyDatabase\");\n```\n\n----------------------------------------\n\nTITLE: Lookup Tracked Entity by Primary Key (EF Core)\nDESCRIPTION: This code demonstrates how to lookup a tracked entity by its primary key using the `FindEntry` method on the `LocalView`. It returns the `EntityEntry` for the tracked entity or null if not found. No database query is executed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nvar blogEntry = context.Blogs.Local.FindEntry(2)!;\n```\n\n----------------------------------------\n\nTITLE: Querying Courses with TPT Inheritance - C#\nDESCRIPTION: This C# code snippet demonstrates how to query courses from the database, utilizing the implemented Table-Per-Type (TPT) inheritance. It retrieves all courses, online courses, and onsite courses related to a specific department using Entity Framework. It requires the SchoolEntities context which is generated by the EF Designer based on the database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/inheritance/tpt.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new SchoolEntities())\n    {\n        foreach (var department in context.Departments)\n        {\n            Console.WriteLine(\"The {0} department has the following courses:\",\n                               department.Name);\n\n            Console.WriteLine(\"   All courses\");\n            foreach (var course in department.Courses )\n            {\n                Console.WriteLine(\"     {0}\", course.Title);\n            }\n\n            foreach (var course in department.Courses.\n                OfType<OnlineCourse>())\n            {\n                Console.WriteLine(\"   Online - {0}\", course.Title);\n            }\n\n            foreach (var course in department.Courses.\n                OfType<OnsiteCourse>())\n            {\n                Console.WriteLine(\"   Onsite - {0}\", course.Title);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Throw Exception for an Event\nDESCRIPTION: This code snippet demonstrates how to configure EF Core to throw an exception when a specific event occurs. It configures EF Core to throw an exception for the QueryPossibleUnintendedUseOfEqualsWarning, effectively turning the warning into an error.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/extensions-logging.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .ConfigureWarnings(b => b.Throw(RelationalEventId.QueryPossibleUnintendedUseOfEqualsWarning));\n```\n\n----------------------------------------\n\nTITLE: Define LoggerFactory in EF Core (3.0+)\nDESCRIPTION: This code snippet demonstrates how to define a static LoggerFactory for EF Core in versions 3.0 and above, using Microsoft.Extensions.Logging. The LoggerFactory is configured to add a console logger.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/extensions-logging.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly ILoggerFactory MyLoggerFactory\n    = LoggerFactory.Create(builder => { builder.AddConsole(); });\n```\n\n----------------------------------------\n\nTITLE: Entity Types C#\nDESCRIPTION: Defines example entity types `Customer` and `Order` with various properties to demonstrate pre-convention configuration. These classes define the structure of the data model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public bool IsActive { get; set; }\n    public Money AccountValue { get; set; }\n\n    public Session CurrentSession { get; set; }\n\n    public ICollection<Order> Orders { get; } = new List<Order>();\n}\n\npublic class Order\n{\n    public int Id { get; set; }\n    public string SpecialInstructions { get; set; }\n    public DateTime OrderDate { get; set; }\n    public bool IsComplete { get; set; }\n    public Money Price { get; set; }\n    public Money? Discount { get; set; }\n\n    public Customer Customer { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold specific tables with Visual Studio PMC\nDESCRIPTION: This command uses the Package Manager Console (PMC) to scaffold entity types only for the 'Artists' and 'Albums' tables. The `-Tables` option is used to specify the tables as a comma-separated list. The connection string and provider need to be specified as well (omitted for brevity).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext ... -Tables Artists, Albums\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType with Annotation Element and Attribute (SSDL) - Repeated\nDESCRIPTION: This XML snippet demonstrates defining an EntityType element named 'Orders' with a custom namespace 'c'. It includes a custom attribute 'CustomAttribute' on the 'OrderId' property and a custom element 'CustomElement' within the EntityType to represent additional metadata. This example is functionally equivalent to the first one, providing another example of using annotation attributes and elements.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Orders\" xmlns:c=\"http://CustomNamespace\">\n   <Key>\n     <PropertyRef Name=\"OrderId\" />\n   </Key>\n   <Property Name=\"OrderId\" Type=\"int\" Nullable=\"false\"\n             c:CustomAttribute=\"someValue\"/>\n   <Property Name=\"ProductId\" Type=\"int\" Nullable=\"false\" />\n   <Property Name=\"Quantity\" Type=\"int\" Nullable=\"false\" />\n   <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n   <c:CustomElement>\n     Custom data here.\n   </c:CustomElement>\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Override SaveChanges to Delete Dependents\nDESCRIPTION: This example demonstrates how to override or intercept `SaveChanges` to delete dependents with no principal reference. It finds modified `Blog` entries where the `Author` is null and sets their state to `Deleted`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.SavingChanges += (c, _) =>\n    {\n        foreach (var entry in ((DbContext)c!).ChangeTracker\n            .Entries<Blog>()\n            .Where(e => e.State == EntityState.Modified))\n        {\n            if (entry.Reference(e => e.Author).CurrentValue == null)\n            {\n                entry.State = EntityState.Deleted;\n            }\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: C# Post Entity with Required Blog Relationship\nDESCRIPTION: This C# code defines an entity class `Post` with properties for `Id`, `Title`, `Contents`, `PostedOn`, `UpdatedOn`, and `BlogId`. It includes a required relationship to the `Blog` entity (indicated by `Blog { get; set; } = null!;`) and a collection of `Tag` entities. The title and contents are also defined as non-nullable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; } = null!;\n    public string Contents { get; set; } = null!;\n    public DateTime PostedOn { get; set; }\n    public DateTime? UpdatedOn { get; set; }\n    public int BlogId { get; set; }\n\n    public virtual Blog Blog { get; set; } = null!;\n\n    public virtual ICollection<Tag> Tags { get; set; } = new List<Tag>();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Unit of Work Interface (C#)\nDESCRIPTION: This code snippet defines a custom `IUnitOfWork` interface. This interface abstracts away the Entity Framework `IObjectSet<T>` and provides a higher-level API for accessing repositories.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IUnitOfWork {\n        IRepository<Employee> Employees { get; }\n        IRepository<TimeCard> TimeCards { get;  }\n        void Commit();\n    }\n```\n\n----------------------------------------\n\nTITLE: Executing Stored Procedure EDMX C#\nDESCRIPTION: C# code demonstrating how to execute the GetAllBlogsAndPosts stored procedure when the EDMX file is configured for multiple result sets.  It retrieves the results and then uses GetNextResult<Post>() to access the second result set of Posts. Dependencies: Entity Framework. Prerequisites: An EDMX model with Blogs and Posts and GetAllBlogsAndPosts configured as shown above.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/multiple-result-sets.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var db = new BlogEntities())\n{\n    var results = db.GetAllBlogsAndPosts();\n\n    foreach (var result in results)\n    {\n        Console.WriteLine(\"Blog: \" + result.Name);\n    }\n\n    var posts = results.GetNextResult<Post>();\n\n    foreach (var result in posts)\n    {\n        Console.WriteLine(\"Post: \" + result.Title);\n    }\n\n    Console.ReadLine();\n}\n```\n\n----------------------------------------\n\nTITLE: No Tracking LINQ to Entities Query with ObjectContext in C#\nDESCRIPTION: This code snippet illustrates how to perform a No Tracking LINQ to Entities query when the context derives from ObjectContext. It first sets the `MergeOption` to `NoTracking` for the `Products` entity set. Subsequent queries against `context.Products` will not be tracked by the `ObjectStateManager`. This enhances performance in read-only scenarios by avoiding change tracking overhead.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Products.MergeOption = MergeOption.NoTracking;\nvar q = context.Products.Where(p => p.Category.CategoryName == \"Beverages\");\n```\n\n----------------------------------------\n\nTITLE: Updating Immutable Struct Record C#\nDESCRIPTION: This C# snippet demonstrates updating an immutable `Address` struct record using the `with` keyword. This creates a new instance of the record with the specified property changed, leaving the original record unchanged.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\ncustomer.Address = customer.Address with { Line1 = \"Peacock Lodge\" };\n\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: EF Core Model Definition (C#)\nDESCRIPTION: This C# code defines the entity model used in the examples, including the `Blog`, `BlogAssets`, `Post`, and `Tag` classes. These classes represent database tables and their relationships, forming the structure upon which Entity Framework Core performs its operations.  It defines the properties and relationships between the entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/debug-views.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; } // Primary key\n    public Guid AssetsId { get; set; } // Alternate key\n    public string Name { get; set; }\n\n    public IList<Post> Posts { get; } = new List<Post>(); // Collection navigation\n    public BlogAssets Assets { get; set; } // Reference navigation\n}\n\npublic class BlogAssets\n{\n    public Guid Id { get; set; } // Primary key and foreign key\n    public byte[] Banner { get; set; }\n\n    public Blog Blog { get; set; } // Reference navigation\n}\n\npublic class Post\n{\n    public int Id { get; set; } // Primary key\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int BlogId { get; set; } // Foreign key\n    public Blog Blog { get; set; } // Reference navigation\n\n    public IList<Tag> Tags { get; } = new List<Tag>(); // Skip collection navigation\n}\n\npublic class Tag\n{\n    public int Id { get; set; } // Primary key\n    public string Text { get; set; }\n\n    public IList<Post> Posts { get; } = new List<Post>(); // Skip collection navigation\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Document\nDESCRIPTION: This JSON represents an example document stored in Cosmos DB, illustrating the structure of the data and the presence of system properties like `_rid`, `_self`, `_etag`, and `_ts`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/unstructured-data.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Id\": 1,\n    \"PartitionKey\": \"1\",\n    \"TrackingNumber\": null,\n    \"id\": \"1\",\n    \"Address\": {\n        \"ShipsToCity\": \"London\",\n        \"ShipsToStreet\": \"221 B Baker St\"\n    },\n    \"_rid\": \"eLMaAK8TzkIBAAAAAAAAAA==\",\n    \"_self\": \"dbs/eLMaAA==/colls/eLMaAK8TzkI=/docs/eLMaAK8TzkIBAAAAAAAAAA==/\",\n    \"_etag\": \"\\\"00000000-0000-0000-683e-0a12bf8d01d5\\\"\",\n    \"_attachments\": \"attachments/\",\n    \"BillingAddress\": \"Clarence House\",\n    \"_ts\": 1568164374\n}\n```\n\n----------------------------------------\n\nTITLE: Define Model Classes with VB.NET\nDESCRIPTION: Defines the data model using VB.NET classes (POCO entities) for the School application. These classes represent tables in the database, and the properties represent columns. Includes classes like Department, Course, OnlineCourse, OnsiteCourse, OnsiteCourseDetails, Person, Instructor, and OfficeAssignment. The code initializes collections in constructors and defines primary and foreign key properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/vb.md#_snippet_0\n\nLANGUAGE: vb\nCODE:\n```\nPublic Class Department\n    Public Sub New()\n        Me.Courses = New List(Of Course)()\n    End Sub\n\n    ' Primary key\n    Public Property DepartmentID() As Integer\n    Public Property Name() As String\n    Public Property Budget() As Decimal\n    Public Property StartDate() As Date\n    Public Property Administrator() As Integer?\n    Public Overridable Property Courses() As ICollection(Of Course)\nEnd Class\n\nPublic Class Course\n    Public Sub New()\n        Me.Instructors = New HashSet(Of Instructor)()\n    End Sub\n\n    ' Primary key\n    Public Property CourseID() As Integer\n    Public Property Title() As String\n    Public Property Credits() As Integer\n\n    ' Foreign  key that does not follow the Code First convention.\n    ' The fluent API will be used to configure DepartmentID_FK  to be the foreign key for this entity.\n    Public Property DepartmentID_FK() As Integer\n\n    ' Navigation properties\n    Public Overridable Property Department() As Department\n    Public Overridable Property Instructors() As ICollection(Of Instructor)\nEnd Class\n\nPublic Class OnlineCourse\n    Inherits Course\n\n    Public Property URL() As String\nEnd Class\n\nPartial Public Class OnsiteCourse\n    Inherits Course\n\n    Public Sub New()\n        Details = New OnsiteCourseDetails()\n    End Sub\n\n    Public Property Details() As OnsiteCourseDetails\n End Class\n\n' Complex type\nPublic Class OnsiteCourseDetails\n    Public Property Time() As Date\n    Public Property Location() As String\n    Public Property Days() As String\nEnd Class\n\nPublic Class Person\n    ' Primary key\n    Public Property PersonID() As Integer\n    Public Property LastName() As String\n    Public Property FirstName() As String\nEnd Class\n\nPublic Class Instructor\n    Inherits Person\n\n    Public Sub New()\n        Me.Courses = New List(Of Course)()\n    End Sub\n\n    Public Property HireDate() As Date\n\n    ' Navigation properties\n    Private privateCourses As ICollection(Of Course)\n    Public Overridable Property Courses() As ICollection(Of Course)\n    Public Overridable Property OfficeAssignment() As OfficeAssignment\nEnd Class\n\nPublic Class OfficeAssignment\n    ' Primary key that does not follow the Code First convention.\n    ' The HasKey method is used later to configure the primary key for the entity.\n    Public Property InstructorID() As Integer\n\n    Public Property Location() As String\n    Public Property Timestamp() As Byte()\n\n    ' Navigation property\n    Public Overridable Property Instructor() As Instructor\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Installing dotnet-ef as a global tool\nDESCRIPTION: This command installs the `dotnet-ef` tool globally using the .NET CLI. It allows managing migrations and scaffolding DbContexts.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install --global dotnet-ef\n```\n\n----------------------------------------\n\nTITLE: Entity Types for In-Memory Query C#\nDESCRIPTION: Defines the entity types Customer and Address, which are used in the ToInMemoryQuery example.  The Customer entity has an Address property, demonstrating a complex object relationship, which is then used to create a 'view' over the in-memory data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public Address Address { get; set; }\n}\n\npublic class Address\n{\n    public int Id { get; set; }\n    public string House { get; set; }\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string Postcode { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Primitive Collections Entity - C#\nDESCRIPTION: This C# code defines an entity class called `PrimitiveCollections` with several properties that are collections of primitive types. These collections will be mapped to JSON columns in the database by convention.  Each property represents a different primitive type, including integers, strings, dates, unsigned integers, booleans, and URIs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\npublic class PrimitiveCollections\n{\n    public IEnumerable<int> Ints { get; set; }\n    public ICollection<string> Strings { get; set; }\n    public IList<DateOnly> Dates { get; set; }\n    public uint[] UnsignedInts { get; set; }\n    public List<bool> Booleans { get; set; }\n    public List<Uri> Urls { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: EF.Functions.VectorDistance .NET to SQL translation\nDESCRIPTION: Shows how EF.Functions.VectorDistance(vector1, vector2) in .NET translates to VectorDistance(vector1, vector2) in SQL when used with Entity Framework Core and Cosmos DB.  This calculates the distance between two vectors. EF Core 9.0 or later is required and the API is experimental.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_45\n\nLANGUAGE: .NET\nCODE:\n```\nEF.Functions.VectorDistance(vector1, vector2)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[VectorDistance(vector1, vector2)](/azure/cosmos-db/nosql/query/vectordistance)\n```\n\n----------------------------------------\n\nTITLE: Set Configuration Method (C#)\nDESCRIPTION: Uses the `SetConfiguration` method to programmatically configure Entity Framework to use the `MicrosoftSqlDbConfiguration`. This method must be called before any data access calls.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/microsoft-ef6-sqlserver.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n DbConfiguration.SetConfiguration(new MicrosoftSqlDbConfiguration());\n```\n\n----------------------------------------\n\nTITLE: Adding a Blog Post (C#)\nDESCRIPTION: This C# code defines an endpoint for adding a blog using a POST request. It utilizes EF Core to interact with the database and add the blog, returning a result that indicates success or failure.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost]\npublic async Task<ActionResult<Blog>> AddBlog(Blog blog)\n{\n    _context.Blogs.Add(blog);\n    await _context.SaveChangesAsync();\n\n    return CreatedAtAction(nameof(GetBlog), new { id = blog.BlogId }, blog);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Read-Only Collection with Mutable Backing Field\nDESCRIPTION: This C# code defines a `Pub` class with an `IReadOnlyList<DateOnly>` property named `DaysVisited`, backed by a private `List<DateOnly>` field. This allows EF Core to map the property as a read-only collection, while still allowing internal modification of the underlying list.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_75\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Pub\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public IReadOnlyCollection<string> Beers { get; set; }\n\n    private List<DateOnly> _daysVisited = new();\n    public IReadOnlyList<DateOnly> DaysVisited => _daysVisited;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Descending Index - Fluent API - C#\nDESCRIPTION: This code snippet demonstrates configuring a descending index using Fluent API in EF Core. The `IsDescending()` method sets the sort order to descending. This feature is being introduced in EF Core 7.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .HasIndex(p => p.PublishedOn)\n    .IsDescending();\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Example C#\nDESCRIPTION: This code demonstrates the N+1 problem caused by lazy loading in EF Core. It iterates through blogs and their posts, resulting in a separate database query for each blog's posts, which can significantly degrade performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var blog in context.Blogs)\n{\n    Console.WriteLine(\"Blog: \" + blog.Url);\n    foreach (var post in blog.Posts)\n    {\n        Console.WriteLine(\"\\tPost: \" + post.Title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Blogs and Ordering Test C#\nDESCRIPTION: This test demonstrates querying blogs from the in-memory context and verifying that the results are ordered correctly. It adds unsorted blog data to the `TestContext`, then uses the `BlogService` to retrieve the blogs and asserts that they are ordered by name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/writing-test-doubles.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace TestingDemo\n{\n    [TestClass]\n    public class QueryTests\n    {\n        [TestMethod]\n        public void GetAllBlogs_orders_by_name()\n        {\n            var context = new TestContext();\n            context.Blogs.Add(new Blog { Name = \"BBB\" });\n            context.Blogs.Add(new Blog { Name = \"ZZZ\" });\n            context.Blogs.Add(new Blog { Name = \"AAA\" });\n\n            var service = new BlogService(context);\n            var blogs = service.GetAllBlogs();\n\n            Assert.AreEqual(3, blogs.Count);\n            Assert.AreEqual(\"AAA\", blogs[0].Name);\n            Assert.AreEqual(\"BBB\", blogs[1].Name);\n            Assert.AreEqual(\"ZZZ\", blogs[2].Name);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete All Authors C#\nDESCRIPTION: This C# code snippet deletes all authors, but first deletes the posts to avoid violating foreign key constraints. Requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Posts.TagWith(\"Deleting posts...\").ExecuteDeleteAsync();\nawait context.Authors.TagWith(\"Deleting authors...\").ExecuteDeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: Tracking query with Include - C#\nDESCRIPTION: This code snippet demonstrates how to perform a tracking query with Include to retrieve an entity and its related entity. This is included to demonstrate the breaking change concerning overwritten navigation properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nvar foo = await context.Foos.Include(e => e.Bar).SingleAsync();\nConsole.WriteLine($\"Foo.Bar.Id = {foo.Bar.Id}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Version Property for Order Entity (C#)\nDESCRIPTION: This code snippet configures the `Version` property of the `Order` entity as a row version and maps it to a column named \"Version\" in the database.  This configuration is shown in the context of changes related to concurrency tokens in EF Core 3.0. Before EF Core 3.0, issues arose if only `OrderDetails` was updated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Order>()\n        .Property(o => o.Version).IsRowVersion().HasColumnName(\"Version\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Value Object (AnnualFinance) with Composite Value Objects in C#\nDESCRIPTION: This code defines an `AnnualFinance` struct, which is a value object containing an `int` for the year, and two `Money` value objects for income and expenses. It also calculates the revenue using the `Money` value objects.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct AnnualFinance\n{\n    [JsonConstructor]\n    public AnnualFinance(int year, Money income, Money expenses)\n    {\n        Year = year;\n        Income = income;\n        Expenses = expenses;\n    }\n\n    public int Year { get; }\n    public Money Income { get; }\n    public Money Expenses { get; }\n    public Money Revenue => new Money(Income.Amount - Expenses.Amount, Income.Currency);\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Where and First SQL\nDESCRIPTION: This SQL code is the translation of the C# snippet that filters, groups by last name, and selects the first last name from each group.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_62\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT (\n    SELECT TOP(1) [p1].[LastName]\n    FROM [People] AS [p1]\n    WHERE (([p1].[MiddleInitial] = N'Q') AND ([p1].[Age] = 20)) AND (([p].[LastName] = [p1].[LastName]) OR ([p].[LastName] IS NULL AND [p1].[LastName] IS NULL)))\nFROM [People] AS [p]\nWHERE ([p].[MiddleInitial] = N'Q') AND ([p].[Age] = 20)\nGROUP BY [p].[LastName]\nORDER BY CAST(LEN((\n    SELECT TOP(1) [p1].[LastName]\n    FROM [People] AS [p1]\n    WHERE (([p1].[MiddleInitial] = N'Q') AND ([p1].[Age] = 20)) AND (([p].[LastName] = [p1].[LastName]) OR ([p].[LastName] IS NULL AND [p1].[LastName] IS NULL)))) AS int)\n```\n\n----------------------------------------\n\nTITLE: Explicitly Manipulating Temporary Values\nDESCRIPTION: This code illustrates setting temporary values generated by EF Core onto entity instances and marking them as temporary. It demonstrates how to explicitly establish relationships between new entities using their temporary key values before adding them to the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_171\n\nLANGUAGE: csharp\nCODE:\n```\nvar post1 = new Post();\nvar post2 = new Post();\n\nvar blogIdEntry = context.Entry(blog).Property(e => e.Id);\nblog.Id = blogIdEntry.CurrentValue;\nblogIdEntry.IsTemporary = true;\n\nvar post1IdEntry = context.Add(post1).Property(e => e.Id);\npost1.Id = post1IdEntry.CurrentValue;\npost1IdEntry.IsTemporary = true;\npost1.BlogId = blog.Id;\n\nvar post2IdEntry = context.Add(post2).Property(e => e.Id);\npost2.Id = post2IdEntry.CurrentValue;\npost2IdEntry.IsTemporary = true;\npost2.BlogId = blog.Id;\n\nConsole.WriteLine($\"Blog has generated temporary ID = {blog.Id}\");\nConsole.WriteLine($\"Post 1 has generated temporary ID = {post1.Id} and FK to Blog = {post1.BlogId}\");\nConsole.WriteLine($\"Post 2 has generated temporary ID = {post2.Id} and FK to Blog = {post2.BlogId}\");\n```\n\n----------------------------------------\n\nTITLE: OrderBy Equivalent - C#\nDESCRIPTION: This C# code snippet demonstrates the equivalent query using `OrderBy` and `OrderByDescending` operators. This shows how the simplified ordering can be achieved using the standard operators.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nvar orderByEquivalent = await context.Blogs\n    .OrderBy(x => x.Id)\n    .Select(x => new\n    {\n        x.Name,\n        OrderedPosts = x.Posts.OrderByDescending(xx => xx.Id).ToList(),\n        OrderedTitles = x.Posts.Select(xx => xx.Title).OrderBy(xx => xx).ToList()\n    })\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Using the Unit of Work Interface in C#\nDESCRIPTION: This C# code demonstrates how to use the `IUnitOfWork` interface. It retrieves entities from different repositories (Employees and Customers), modifies their properties, and then saves all the changes using the `Commit` method. The `unitofWork` variable is assumed to be an instance of a class implementing the `IUnitOfWork` interface.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar firstEmployee = unitofWork.Employees.FindById(1);\n    var firstCustomer = unitofWork.Customers.FindById(1);\n    firstEmployee.Name = \"Alex\";\n    firstCustomer.Name = \"Christopher\";\n    unitofWork.Commit();\n```\n\n----------------------------------------\n\nTITLE: Overriding OnModelCreating Method with Fluent API in C#\nDESCRIPTION: This C# code snippet overrides the `OnModelCreating` method in the `BloggingContext` to use the Fluent API. This allows for renaming the `DisplayName` column in the database to `display_name` for the `User` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n    public DbSet<User> Users { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<User>()\n            .Property(u => u.DisplayName)\n            .HasColumnName(\"display_name\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EntityContainer with AssociationSet Elements - CSDL\nDESCRIPTION: This example shows an EntityContainer element in CSDL that contains two AssociationSet elements. Each AssociationSet defines a logical grouping of association instances, specifying the associated EntitySet and Association.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n <EntityContainer Name=\"BooksContainer\" >\n   <EntitySet Name=\"Books\" EntityType=\"BooksModel.Book\" />\n   <EntitySet Name=\"Publishers\" EntityType=\"BooksModel.Publisher\" />\n   <EntitySet Name=\"Authors\" EntityType=\"BooksModel.Author\" />\n   <AssociationSet Name=\"PublishedBy\" Association=\"BooksModel.PublishedBy\">\n     <End Role=\"Book\" EntitySet=\"Books\" />\n     <End Role=\"Publisher\" EntitySet=\"Publishers\" />\n   </AssociationSet>\n   <AssociationSet Name=\"WrittenBy\" Association=\"BooksModel.WrittenBy\">\n     <End Role=\"Book\" EntitySet=\"Books\" />\n     <End Role=\"Author\" EntitySet=\"Authors\" />\n   </AssociationSet>\n </EntityContainer>\n```\n\n----------------------------------------\n\nTITLE: Configuring provider value comparer\nDESCRIPTION: This snippet demonstrates how to configure a provider value comparer for properties using custom comparers that cannot be directly applied to database values. It shows how to create comparers and converters, and how to specify a provider comparer for case-insensitive string comparisons.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogKeyComparer = new ValueComparer<BlogKey>(\n    (l, r) => string.Equals(l.Id, r.Id, StringComparison.OrdinalIgnoreCase),\n    v => v.Id.ToUpper().GetHashCode(),\n    v => v);\n\nvar blogKeyConverter = new ValueConverter<BlogKey, string>(\n    v => v.Id,\n    v => new BlogKey(v));\n\nmodelBuilder.Entity<Blog>()\n    .Property(e => e.Id).HasConversion(\n        blogKeyConverter, blogKeyComparer);\n```\n\n----------------------------------------\n\nTITLE: Tracking Entities Coming from LINQ Composition\nDESCRIPTION: This code demonstrates tracking entity types that result from LINQ composition. Even if the final query result involves composition, EF Core will track the entity types involved in the composition. In this example, `Post` entities will be tracked.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blogPosts = context.Blogs\n    .SelectMany(blog => blog.Posts, (blog, post) => post)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Relationship Fixup with Locally Tracked Entities in EF Core\nDESCRIPTION: This C# code snippet showcases how EF Core automatically fixes up relationships between entities fetched from multiple tracking queries. The context tracks entities and updates navigation properties as related entities are loaded. This avoids the need for a single, complex query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n        var blogs = context.Blogs.ToList();\n        Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n\n        var assets = context.Assets.ToList();\n        Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n\n        var posts = context.Posts.ToList();\n        Console.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Install HierarchyId package using .NET CLI\nDESCRIPTION: This command adds the Microsoft.EntityFrameworkCore.SqlServer.HierarchyId package to your project using the .NET Core CLI. This package is required to use the HierarchyId feature with EF Core and SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer.HierarchyId\n```\n\n----------------------------------------\n\nTITLE: Select Statement for the HireInfo Entity - T-SQL\nDESCRIPTION: This T-SQL SELECT statement shows how accessing the HireInfo navigation property triggers a query that selects only the columns mapped to the HireInfo entity, utilizing the table splitting configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/table-splitting.md#_snippet_3\n\nLANGUAGE: t-sql\nCODE:\n```\n    -- The following SELECT was executed as a result of accessing the navigation property existingPerson.Instructor and selects just the columns mapped to HireInfo\n    -- SELECT: [dbo].[Person]\n    -- COLUMNS: PersonID, LastName, FirstName, EnrollmentDate, HireDate, Discriminator\n    -- WHERE: PersonID = 1 (DbType=Int32)\n```\n\n----------------------------------------\n\nTITLE: Define Category Class - Code First - C#\nDESCRIPTION: Defines the Category entity class with properties for CategoryId, Name, and a navigation property for Products (an ObservableCollection). This class represents a category in the domain model and is used for Code First development. The ObservableCollection is used to notify the UI of changes to the collection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/wpf.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    using System.Collections.ObjectModel;\n\n    namespace WPFwithEFSample\n    {\n        public class Category\n        {\n            public Category()\n            {\n                this.Products = new ObservableCollection<Product>();\n            }\n\n            public int CategoryId { get; set; }\n            public string Name { get; set; }\n\n            public virtual ObservableCollection<Product> Products { get; private set; }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: EF.Functions.VectorDistance with bruteForce .NET to SQL translation\nDESCRIPTION: Shows how EF.Functions.VectorDistance(vector1, vector2, bruteForce) in .NET translates to VectorDistance(vector1, vector2, bruteForce) in SQL when used with Entity Framework Core and Cosmos DB.  This calculates the distance between two vectors using brute force. EF Core 9.0 or later is required and the API is experimental.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_46\n\nLANGUAGE: .NET\nCODE:\n```\nEF.Functions.VectorDistance(vector1, vector2, bruteForce)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[VectorDistance(vector1, vector2, bruteForce)](/azure/cosmos-db/nosql/query/vectordistance)\n```\n\n----------------------------------------\n\nTITLE: Install Cosmos Package (.NET Core CLI)\nDESCRIPTION: This command adds the Microsoft.EntityFrameworkCore.Cosmos NuGet package to your .NET Core project using the .NET Core CLI. This is a prerequisite for using the Cosmos DB provider with Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/index.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.Cosmos\n```\n\n----------------------------------------\n\nTITLE: Querying with EF.Functions.Random C#\nDESCRIPTION: Demonstrates using EF.Functions.Random in a LINQ query to select users with a randomly generated Popularity value. It filters the Users DbSet to find users whose Popularity matches a random value between 1 and 5 (inclusive).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nvar users = context.Users.Where(u => u.Popularity == (int)(EF.Functions.Random() * 5.0) + 1).ToList();\n```\n\n----------------------------------------\n\nTITLE: Overriding Cosmos DB 'id' Value\nDESCRIPTION: This C# code snippet demonstrates how to override the generated 'id' value for an entity being added to Azure Cosmos DB using Entity Framework Core. It first attaches the entity to the context, then sets the `CurrentValue` of the shadow property `__id` to the desired value, which may include characters that are now escaped by default, finally it sets the state of the entity to `Added`. This allows to use specific ids, while bypassing EF Core's default id generation logic.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar entry = context.Attach(entity);\nentry.Property(\"__id\").CurrentValue = \"MyEntity|/\\\\?#\";\nentry.State = EntityState.Added;\n```\n\n----------------------------------------\n\nTITLE: Example SQL Query for Force Constant Primitive Collections\nDESCRIPTION: This SQL query shows how EF Core 9 translates queries that use parameterized primitive collections when `EF.Constant` is used.  Each ID from the collection is directly inlined in the `IN` clause.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_44\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Rating], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE [p].[Title] = N'.NET Blog' AND [p].[Id] IN (1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Value Objects as Keys in EF Core\nDESCRIPTION: Defines value objects for BlogKey and PostKey to provide type-safe keys for Blog and Post entities in Entity Framework Core. This helps prevent accidental assignment of incorrect key types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct BlogKey\n{\n    public BlogKey(int id) => Id = id;\n    public int Id { get; }\n}\n\npublic readonly struct PostKey\n{\n    public PostKey(int id) => Id = id;\n    public int Id { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: ComplexType Definition for Stored Procedure Result (CSDL)\nDESCRIPTION: This code defines a complex type named 'GradeInfo' in the conceptual model.  This complex type represents the structure of the data returned by the GetGrades stored procedure. It contains properties for EnrollmentID, Grade, CourseID, and StudentID, with their corresponding data types, nullability, precision, and scale.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n <ComplexType Name=\"GradeInfo\">\n   <Property Type=\"Int32\" Name=\"EnrollmentID\" Nullable=\"false\" />\n   <Property Type=\"Decimal\" Name=\"Grade\" Nullable=\"true\"\n             Precision=\"3\" Scale=\"2\" />\n   <Property Type=\"Int32\" Name=\"CourseID\" Nullable=\"false\" />\n   <Property Type=\"Int32\" Name=\"StudentID\" Nullable=\"false\" />\n </ComplexType>\n```\n\n----------------------------------------\n\nTITLE: EF Core Configuration with Facets (C#)\nDESCRIPTION: This code snippet demonstrates how to configure an Entity Framework Core model with facets for value conversions. It shows how to set the maximum length and Unicode status of a string column when converting from an enum to a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Rider>()\n    .Property(e => e.Mount)\n    .HasConversion<string>()\n    .HasMaxLength(20)\n    .IsUnicode(false);\n```\n\n----------------------------------------\n\nTITLE: Mapping DbFunction to a Built-in Function - C#\nDESCRIPTION: Shows how to manually configure a DbFunction's translation to map it to a built-in function in EF Core. This is needed because in EF Core 3.0, an empty schema for a DbFunction maps it to the model's default schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .HasDbFunction(typeof(MyContext).GetMethod(nameof(MyContext.DatePart)))\n    .HasTranslation(args => SqlFunctionExpression.Create(\"DatePart\", args, typeof(int?), null));\n```\n\n----------------------------------------\n\nTITLE: Defining a Key in SSDL (XML)\nDESCRIPTION: This snippet demonstrates how to define a Key element within an EntityType in SSDL. It references the CustomerId property as the primary key for the Customers entity. It includes Documentation and Property definitions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Customers\">\n   <Documentation>\n     <Summary>Summary here.</Summary>\n     <LongDescription>Long description here.</LongDescription>\n   </Documentation>\n   <Key>\n     <PropertyRef Name=\"CustomerId\" />\n   </Key>\n   <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n   <Property Name=\"Name\" Type=\"nvarchar(max)\" Nullable=\"false\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Explicit Navigation Configuration C#\nDESCRIPTION: Explicitly configures the navigations to the join entity within the UsingEntity call, defining the relationships using HasOne and WithMany.  This provides more control over the relationship definition.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>(\n            r => r.HasOne<Tag>().WithMany(e => e.PostTags),\n            l => l.HasOne<Post>().WithMany(e => e.PostTags));\n}\n```\n\n----------------------------------------\n\nTITLE: Self-Referencing One-to-Many - C#\nDESCRIPTION: Defines a self-referencing one-to-many relationship on the Employee entity. Each Employee can have a Manager (another Employee) and a collection of Reports (other Employees). This establishes a hierarchical relationship within the same entity type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n    public int Id { get; set; }\n\n    public int? ManagerId { get; set; }                                    // Optional foreign key property\n    public Employee? Manager { get; set; }                                 // Optional reference navigation to principal\n    public ICollection<Employee> Reports { get; } = new List<Employee>();  // Collection navigation containing dependents\n}\n```\n\n----------------------------------------\n\nTITLE: EF.Functions.IsDefined .NET to SQL translation\nDESCRIPTION: Shows the translation of EF.Functions.IsDefined(x) in .NET to IS_DEFINED(x) in SQL when used with Entity Framework Core and Cosmos DB. It checks if the specified property is defined. EF Core 9.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_44\n\nLANGUAGE: .NET\nCODE:\n```\nEF.Functions.IsDefined(x)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[IS_DEFINED(x)](/azure/cosmos-db/nosql/query/is-defined)\n```\n\n----------------------------------------\n\nTITLE: Mapping Association Insert/Delete Functions (XML)\nDESCRIPTION: This XML snippet demonstrates mapping insert and delete functions of a conceptual model association (CourseInstructor) to stored procedures in the database using ScalarProperty elements within EndProperty elements.  It shows how association ends are mapped to stored procedure parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n <AssociationSetMapping Name=\"CourseInstructor\"\n                        TypeName=\"SchoolModel.CourseInstructor\"\n                        StoreEntitySet=\"CourseInstructor\">\n   <EndProperty Name=\"Person\">\n     <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n   </EndProperty>\n   <EndProperty Name=\"Course\">\n     <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n   </EndProperty>\n   <ModificationFunctionMapping>\n     <InsertFunction FunctionName=\"SchoolModel.Store.InsertCourseInstructor\" >   \n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </InsertFunction>\n     <DeleteFunction FunctionName=\"SchoolModel.Store.DeleteCourseInstructor\">\n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </DeleteFunction>\n   </ModificationFunctionMapping>\n </AssociationSetMapping>\n```\n\n----------------------------------------\n\nTITLE: SQL for Ordering Addresses SQL\nDESCRIPTION: This SQL code represents the generated SQL query for ordering authors based on JSON properties. It filters based on city and phone number from the `Contact` JSON column or author name, constructs a formatted address string, and orders by the phone number from the `Contact` JSON column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT (((((([a].[Name] + N' (') + CAST(JSON_VALUE([a].[Contact],'$.Address.Street') AS nvarchar(max))) + N', ') + CAST(JSON_VALUE([a].[Contact],'$.Address.City') AS nvarchar(max))) + N' ') + CAST(JSON_VALUE([a].[Contact],'$.Address.Postcode') AS nvarchar(max))) + N')'\nFROM [Authors] AS [a]\nWHERE (CAST(JSON_VALUE([a].[Contact],'$.Address.City') AS nvarchar(max)) = N'Chigley' AND CAST(JSON_VALUE([a].[Contact],'$.Phone') AS nvarchar(max)) IS NOT NULL) OR ([a].[Name] LIKE N'D%')\nORDER BY CAST(JSON_VALUE([a].[Contact],'$.Phone') AS nvarchar(max))\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many with No Navigations and Explicit FK\nDESCRIPTION: This C# code explicitly configures a one-to-many relationship between `Blog` and `Post` in Entity Framework Core. No navigation properties are present. Configuration uses `HasForeignKey` to specify the foreign key column and `IsRequired` to make the relationship mandatory. Requires an instance of `ModelBuilder`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany<Post>()\n                    .WithOne()\n                    .HasForeignKey(e => e.BlogId)\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: Define Primary Key with naming convention in C#\nDESCRIPTION: This code snippet demonstrates the primary key convention in Code First, where a property named 'DepartmentID' is automatically inferred as the primary key because it follows the convention of 'ClassNameID'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/built-in.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Department\n{\n    // Primary key\n    public int DepartmentID { get; set; }\n\n    . . .  \n\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Property to Not Use Generated Values\nDESCRIPTION: This code configures a property (e.g., Id) on the Blog entity to not use generated values using the Fluent API in EF Core. This is a mitigation for the DetectChanges behavior change in EF Core 3.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Blog>()\n    .Property(e => e.Id)\n    .ValueGeneratedNever();\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers in DbContext Constructor in C#\nDESCRIPTION: This C# code snippet shows how to register the `UpdateTimestamps` method as an event handler for both the `StateChanged` and `Tracked` events on the `ChangeTracker` within the DbContext. This registration happens in the DbContext constructor, ensuring that the event handler is active for the lifetime of the context instance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/events.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic BlogsContext()\n{\n    ChangeTracker.StateChanged += UpdateTimestamps;\n    ChangeTracker.Tracked += UpdateTimestamps;\n}\n```\n\n----------------------------------------\n\nTITLE: stringValue.IndexOf .NET to SQL translation\nDESCRIPTION: Explains the mapping of stringValue.IndexOf(value) in .NET to INDEX_OF(@stringValue, @value) in SQL within Entity Framework Core for Cosmos DB. This finds the first occurrence of a substring within a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_27\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.IndexOf(value)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[INDEX_OF(@stringValue, @value)](/azure/cosmos-db/nosql/query/index-of)\n```\n\n----------------------------------------\n\nTITLE: Moving an Entity Between Collections (Before)\nDESCRIPTION: This C# code snippet demonstrates the initial (less efficient) way to move a `Post` entity from one `Blog`'s `Posts` collection to another. It involves explicitly removing the `Post` from the original `Blog` before adding it to the new `Blog`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar post = vsBlog.Posts.Single(e => e.Title.StartsWith(\"Disassembly improvements\"));\nvsBlog.Posts.Remove(post);\ndotNetBlog.Posts.Add(post);\n```\n\n----------------------------------------\n\nTITLE: Define JoinType Entity for Shared Many-to-Many Relationships\nDESCRIPTION: Defines a CLR type `JoinType` to be used as a shared-type entity type for multiple many-to-many relationships. This type can hold common properties like `CreatedOn` for join tables. The type has properties Id1, Id2 and CreatedOn.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\npublic class JoinType\n{\n    public int Id1 { get; set; }\n    public int Id2 { get; set; }\n    public DateTime CreatedOn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Statement using Person and HireInfo entities - T-SQL\nDESCRIPTION: This T-SQL INSERT statement shows how data from both the Person and HireInfo entities are combined and inserted into the Person table, demonstrating the table splitting configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/table-splitting.md#_snippet_1\n\nLANGUAGE: t-sql\nCODE:\n```\n    -- The following INSERT was executed as a result of executing context.SaveChanges() and combines data from the Person and HireInfo entities\n    -- INSERT: [dbo].[Person]\n    -- VALUES: FirstName:N'Kimberly' (DbType=String, IsNullable=False, Size=50), LastName:N'Morgan' (DbType=String, IsNullable=False, Size=50), HireDate:2013-04-11 16:34:14.893 (DbType=DateTime2, Precision=7), EnrollmentDate:NULL (DbType=DateTime2, Precision=7), Discriminator:N'Instructor' (DbType=String, IsNullable=False, Size=50)\n```\n\n----------------------------------------\n\nTITLE: DefiningExpression for Function in CSDL\nDESCRIPTION: This example demonstrates how to use the 'DefiningExpression' element to define a function 'GetYearsInPrint' that calculates the number of years since a book was published, using Entity SQL. The function takes a 'book' parameter and returns an integer.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"GetYearsInPrint\" ReturnType=\"Edm.Int32\" >\n       <Parameter Name=\"book\" Type=\"BooksModel.Book\" />\n       <DefiningExpression>\n         Year(CurrentDateTime()) - Year(cast(book.PublishedDate as DateTime))\n       </DefiningExpression>\n     </Function>\n```\n\n----------------------------------------\n\nTITLE: BlogPost Class Definition with Mapping Attributes C#\nDESCRIPTION: Defines a 'BlogPost' class with a parameterized constructor and the 'Column' attribute for mapping a property to a specific column name in the database.  Demonstrates EF Core's ability to use common mapping constructs with unmapped types in raw SQL queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\npublic class BlogPost\n{\n    public BlogPost(string blogTitle, string content, DateOnly publishedOn)\n    {\n        BlogTitle = blogTitle;\n        Content = content;\n        PublishedOn = publishedOn;\n    }\n\n    public int Id { get; private set; }\n\n    [Column(\"Title\")]\n    public string BlogTitle { get; set; }\n\n    public string Content { get; set; }\n    public DateOnly PublishedOn { get; set; }\n    public int BlogId { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: ResultMapping Element Example (XML)\nDESCRIPTION: This XML snippet shows how to use the ResultMapping element within a FunctionImportMapping to map columns returned by the \"GetGrades\" stored procedure to properties of the \"SchoolModel.StudentGrade\" entity type. This is necessary because the column names in the stored procedure result set (e.g., enroll_id) do not directly match the property names in the entity type (e.g., EnrollmentID).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_38\n\nLANGUAGE: XML\nCODE:\n```\n <FunctionImportMapping FunctionImportName=\"GetGrades\"\n                        FunctionName=\"SchoolModel.Store.GetGrades\" >\n   <ResultMapping>\n     <EntityTypeMapping TypeName=\"SchoolModel.StudentGrade\">\n       <ScalarProperty Name=\"EnrollmentID\" ColumnName=\"enroll_id\"/>\n       <ScalarProperty Name=\"CourseID\" ColumnName=\"course_id\"/>\n       <ScalarProperty Name=\"StudentID\" ColumnName=\"student_id\"/>\n       <ScalarProperty Name=\"Grade\" ColumnName=\"grade\"/>\n     </EntityTypeMapping>\n   </ResultMapping>\n </FunctionImportMapping>\n```\n\n----------------------------------------\n\nTITLE: ReferentialConstraint and Dependent Element in CSDL\nDESCRIPTION: This example shows the 'Dependent' element within a 'ReferentialConstraint' which defines the dependent end of a relationship. Here, the 'PublisherId' property of the 'Book' entity type is the dependent end, referencing the 'Publisher'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"PublishedBy\">\n   <End Type=\"BooksModel.Book\" Role=\"Book\" Multiplicity=\"*\" >\n   </End>\n   <End Type=\"BooksModel.Publisher\" Role=\"Publisher\" Multiplicity=\"1\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Publisher\">\n       <PropertyRef Name=\"Id\" />\n     </Principal>\n     <Dependent Role=\"Book\">\n       <PropertyRef Name=\"PublisherId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Implement Repository C#\nDESCRIPTION: This code snippet provides a partial implementation of the `IBloggingRepository` interface using EF Core. It wraps an EF Core context and exposes methods to execute database queries and updates. Note that `GetAllBlogs` returns `IAsyncEnumerable<Blog>` to avoid composing query operators over the result, ensuring that EF Core is not involved in translating the query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-without-the-database.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class BloggingRepository : IBloggingRepository\n{\n    private readonly BloggingContext _context;\n\n    public BloggingRepository(BloggingContext context)\n        => _context = context;\n\n    public async Task<Blog> GetBlogByNameAsync(string name)\n        => await _context.Blogs.FirstOrDefaultAsync(b => b.Name == name);\n\n    // Other code...\n}\n```\n\n----------------------------------------\n\nTITLE: Moving an Entity Between Collections (After)\nDESCRIPTION: This C# code snippet shows the optimized approach for moving a `Post` entity between `Blog` collections. By simply adding the `Post` to the new `Blog`, EF Core automatically handles the removal from the original `Blog`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar post = vsBlog.Posts.Single(e => e.Title.StartsWith(\"Disassembly improvements\"));\ndotNetBlog.Posts.Add(post);\n```\n\n----------------------------------------\n\nTITLE: Creating Index with Included Columns - Fluent API - C#\nDESCRIPTION: This code demonstrates creating an index with included columns using Fluent API in EF Core. Included columns are non-key columns that are added to the index. This can improve performance for queries that access only the included columns, because the table itself doesn't need to be accessed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .HasIndex(p => p.Url)\n    .IncludeProperties(p => new { p.Title, p.PublishedOn });\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into OnlineCourse Table SQL\nDESCRIPTION: These SQL INSERT statements populate the OnlineCourse table with CourseID and URL values, representing different online courses offered by the school.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO dbo.OnlineCourse (CourseID, URL)\nVALUES (2030, 'http://www.fineartschool.net/Poetry');\nINSERT INTO dbo.OnlineCourse (CourseID, URL)\nVALUES (2021, 'http://www.fineartschool.net/Composition');\nINSERT INTO dbo.OnlineCourse (CourseID, URL)\nVALUES (4041, 'http://www.fineartschool.net/Macroeconomics');\nINSERT INTO dbo.OnlineCourse (CourseID, URL)\nVALUES (3141, 'http://www.fineartschool.net/Trigonometry');\n```\n\n----------------------------------------\n\nTITLE: Ordering Addresses C#\nDESCRIPTION: This C# code snippet demonstrates how to query and order authors based on criteria involving properties within the JSON `Contact` column. It filters based on city and phone number, or if the author's name starts with \"D\", orders the results by the phone number in the JSON column, and then selects a formatted address string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvar orderedAddresses = await context.Authors\n    .Where(\n        author => (author.Contact.Address.City == \"Chigley\"\n                   && author.Contact.Phone != null)\n                  || author.Name.StartsWith(\"D\"))\n    .OrderBy(author => author.Contact.Phone)\n    .Select(\n        author => author.Name + \" (\" + author.Contact.Address.Street\n                  + \", \" + author.Contact.Address.City\n                  + \" \" + author.Contact.Address.Postcode + \")\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying with Full Hierarchical Partition Key (C#)\nDESCRIPTION: This code snippet shows how to query data using a full hierarchical partition key in EF Core 9 for Azure Cosmos DB. It constructs a LINQ query with conditions on all three levels of the partition key (`TenantId`, `UserId`, `SessionId`) and demonstrates how EF Core extracts these values for efficient query execution against the appropriate partition.\nThe code assumes a `context.Sessions` of type `IQueryable<UserSession>` where `UserSession` has the defined hierarchical partition key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantId = \"Microsoft\";\nvar sessionId = 7;\nvar userId = new Guid(\"99A410D7-E467-4CC5-92DE-148F3FC53F4C\");\n\nvar sessions = await context.Sessions\n    .Where(\n        e => e.TenantId == tenantId\n             && e.UserId == userId\n             && e.SessionId == sessionId\n             && e.Username.Contains(\"a\"))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Define BlogService for Testing (C#)\nDESCRIPTION: Defines a BlogService class with methods for adding blogs (AddBlog), retrieving all blogs ordered by name (GetAllBlogs), and asynchronously retrieving all blogs ordered by name (GetAllBlogsAsync). It depends on a BloggingContext instance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/mocking.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace TestingDemo\n{\n    public class BlogService\n    {\n        private BloggingContext _context;\n\n        public BlogService(BloggingContext context)\n        {\n            _context = context;\n        }\n\n        public Blog AddBlog(string name, string url)\n        {\n            var blog = _context.Blogs.Add(new Blog { Name = name, Url = url });\n            _context.SaveChanges();\n\n            return blog;\n        }\n\n        public List<Blog> GetAllBlogs()\n        {\n            var query = from b in _context.Blogs\n                        orderby b.Name\n                        select b;\n\n            return query.ToList();\n        }\n\n        public async Task<List<Blog>> GetAllBlogsAsync()\n        {\n            var query = from b in _context.Blogs\n                        orderby b.Name\n                        select b;\n\n            return await query.ToListAsync();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update to InitialCreate Migration (by Name) PowerShell\nDESCRIPTION: Updates the database to the InitialCreate migration using the migration name. This applies all migrations up to and including the InitialCreate migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Database InitialCreate\n```\n\n----------------------------------------\n\nTITLE: Add default EF Core templates to project\nDESCRIPTION: Adds the default EF Core T4 templates to the project.  These templates are used for scaffolding the DbContext and entity types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new ef-templates\n```\n\n----------------------------------------\n\nTITLE: Changing Reference Navigation with Optional One-to-One (C#)\nDESCRIPTION: This code shows how changing a reference navigation in an optional one-to-one relationship results in setting the foreign key value on the previously related dependent entity to null. It also includes the associated change tracker output and SQL commands that EF Core executes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar dotNetBlog = context.Blogs.Include(e => e.Assets).Single(e => e.Name == \".NET Blog\");\ndotNetBlog.Assets = new BlogAssets();\n\ncontext.ChangeTracker.DetectChanges();\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext with Namespace Options - .NET CLI\nDESCRIPTION: This command scaffolds a DbContext and entity types from a database. It uses the `--namespace` option to override the namespace for all output classes and the `--context-namespace` option to override the namespace specifically for the DbContext class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_15\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold ... --namespace Your.Namespace --context-namespace Your.DbContext.Namespace\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Complex Key and Aggregation C#\nDESCRIPTION: This C# code snippet filters People records based on Feet.Size, MiddleInitial, and Feet.Id.  It groups the results by a composite key (Feet.Size, Person.LastName), and selects the LastName, Size, and minimum Size from each group.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nvar size = 11;\nvar results\n    = context.People\n        .Where(\n            p => p.Feet.Size == size\n                 && p.MiddleInitial != null\n                 && p.Feet.Id != 1)\n        .GroupBy(\n            p => new\n            {\n                p.Feet.Size,\n                p.Feet.Person.LastName\n            })\n        .Select(\n            g => new\n            {\n                g.Key.LastName,\n                g.Key.Size,\n                Min = g.Min(p => p.Feet.Size),\n            })\n        .ToList();\n```\n\n----------------------------------------\n\nTITLE: Adding a PostTag Entity using Foreign Key Values in C#\nDESCRIPTION: This C# code snippet illustrates how to associate a `Post` and a `Tag` by creating a `PostTag` entity and setting its `PostId` and `TagId` properties directly.  It then adds the created entity to the database context.  This is another way to explicitly manage the many-to-many relationship, ensuring the correct association between posts and tags. This results in the skip navigations being automatically updated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Add(new PostTag { PostId = post.Id, TagId = tag.Id });\n```\n\n----------------------------------------\n\nTITLE: Defining CLR Methods for Nullability Propagation (C#)\nDESCRIPTION: This C# code defines two CLR methods, `ConcatStrings1` and `ConcatStrings2`, both mapped to the same database function, `ConcatStrings`. These methods concatenate two strings. The key difference is how their nullability is handled in the model configuration, influencing the generated SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic string ConcatStrings1(string prm1, string prm2)\n    => throw new NotSupportedException();\n\npublic string ConcatStrings2(string prm1, string prm2)\n    => throw new NotSupportedException();\n```\n\n----------------------------------------\n\nTITLE: Executing a Migration Bundle\nDESCRIPTION: This command executes an EF Core migration bundle.  It applies any migrations within the bundle that have not yet been applied to the target database. It assumes the migration bundle executable is present in the specified directory.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_12\n\nLANGUAGE: dotnetcli\nCODE:\n```\n.\\efbundle.exe\n```\n\n----------------------------------------\n\nTITLE: Department EntityType Definition based on QueryView (XML)\nDESCRIPTION: This XML snippet displays the modification of the 'Department' entity type in the School model based on the QueryView mapping. This example shows the schema of the Department entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Department\">\n   <Key>\n     <PropertyRef Name=\"DepartmentID\" />\n   </Key>\n   <Property Type=\"Int32\" Name=\"DepartmentID\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Name\" Nullable=\"false\"\n             MaxLength=\"50\" FixedLength=\"false\" Unicode=\"true\" />\n   <Property Type=\"Decimal\" Name=\"Budget\" Nullable=\"false\"\n             Precision=\"19\" Scale=\"4\" />\n   <Property Type=\"DateTime\" Name=\"StartDate\" Nullable=\"false\" />\n   <NavigationProperty Name=\"Courses\"\n                       Relationship=\"SchoolModel.FK_Course_Department\"\n                       FromRole=\"Department\" ToRole=\"Course\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Adding a New Entity Through Navigation Properties - C#\nDESCRIPTION: This example demonstrates how to add new entities by associating them with tracked entities via navigation properties. A new `User` is created and assigned as the `Owner` of an existing `Blog`, and a new `Post` is added to the `Posts` collection of the same `Blog`.  Both the new `User` and `Post` will be added to the database when `SaveChanges` is called.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/entity-state.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Add a new User by setting a reference from a tracked Blog\n    var blog = context.Blogs.Find(1);\n    blog.Owner = new User { UserName = \"johndoe1987\" };\n\n    // Add a new Post by adding to the collection of a tracked Blog\n    blog.Posts.Add(new Post { Name = \"How to Add Entities\" });\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Named Foreign Key Columns Configuration C#\nDESCRIPTION: Shows how to explicitly name the foreign key columns in the join table using the `UsingEntity` method and specifying the `HasForeignKey` property. This example uses explicit property names.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity(\n            r => r.HasOne(typeof(Tag)).WithMany().HasForeignKey(\"TagForeignKey\"),\n            l => l.HasOne(typeof(Post)).WithMany().HasForeignKey(\"PostForeignKey\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Entity Type - C#\nDESCRIPTION: Excludes the 'OnlineCourse' CLR type from being mapped to a table in the database using the `Ignore<T>()` method.  This prevents the entity from being included in database schema generation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Ignore<OnlineCourse>();\n```\n\n----------------------------------------\n\nTITLE: TPT: Single Leaf Type Query - SQL\nDESCRIPTION: SQL query generated by EF Core with TPT for retrieving entities of a single leaf type ('Cat'). It uses INNER JOIN operations for 'Pets' and 'Cats'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_57\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Id], [a].[FoodId], [a].[Name], [p].[Vet], [c].[EducationLevel]\nFROM [Animals] AS [a]\nINNER JOIN [Pets] AS [p] ON [a].[Id] = [p].[Id]\nINNER JOIN [Cats] AS [c] ON [a].[Id] = [c].[Id]\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query for Eager Loading with Include\nDESCRIPTION: This SQL query is generated by Entity Framework when eagerly loading the `TimeCards` collection using the `Include` method. It performs a left outer join between the `Employees` and `TimeCards` tables to retrieve all related data in a single query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\n    SELECT\n    [Project1].[Id] AS [Id],\n    [Project1].[Name] AS [Name],\n    [Project1].[HireDate] AS [HireDate],\n    [Project1].[C1] AS [C1],\n    [Project1].[Id1] AS [Id1],\n    [Project1].[Hours] AS [Hours],\n    [Project1].[EffectiveDate] AS [EffectiveDate],\n    [Project1].[EmployeeTimeCard_TimeCard_Id] AS [EmployeeTimeCard_TimeCard_Id]\n    FROM ( SELECT\n         [Extent1].[Id] AS [Id],\n         [Extent1].[Name] AS [Name],\n         [Extent1].[HireDate] AS [HireDate],\n         [Extent2].[Id] AS [Id1],\n         [Extent2].[Hours] AS [Hours],\n         [Extent2].[EffectiveDate] AS [EffectiveDate],\n         [Extent2].[EmployeeTimeCard_TimeCard_Id] AS\n                    [EmployeeTimeCard_TimeCard_Id],\n         CASE WHEN ([Extent2].[Id] IS NULL) THEN CAST(NULL AS int)\n         ELSE 1 END AS [C1]\n         FROM  [dbo].[Employees] AS [Extent1]\n         LEFT OUTER JOIN [dbo].[TimeCards] AS [Extent2] ON [Extent1].[Id] = [Extent2].[EmployeeTimeCard_TimeCard_Id]\n    )  AS [Project1]\n    ORDER BY [Project1].[HireDate] ASC,\n             [Project1].[Id] ASC, [Project1].[C1] ASC\n```\n\n----------------------------------------\n\nTITLE: stringValue.StartsWith with Ordinal .NET to SQL translation\nDESCRIPTION: Shows how stringValue.StartsWith with StringComparison.Ordinal in .NET corresponds to STARTSWITH in SQL within the context of Entity Framework Core. This determines if a string starts with a specified substring with case sensitive check. EF Core 9.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_33\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.StartsWith(value, StringComparison.Ordinal)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[STARTSWITH(@stringValue, @value, false)](/azure/cosmos-db/nosql/query/startswith)\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of IsNullOrWhitespace (Before EF Core 6)\nDESCRIPTION: Displays the SQL Server translation of the IsNullOrWhitespace query before EF Core 6.0. It uses LTRIM and RTRIM functions to check for whitespace after trimming the FirstName and LastName columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_106\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [u].[Id], [u].[FirstName], [u].[LastName]\nFROM [Users] AS [u]\nWHERE ([u].[FirstName] IS NULL OR (LTRIM(RTRIM([u].[FirstName])) = N'')) OR ([u].[LastName] IS NULL OR (LTRIM(RTRIM([u].[LastName])) = N''))\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by EF8 with Unnecessary Projection\nDESCRIPTION: This SQL code shows the SQL generated by EF8 for counting orders with a condition. Note the unnecessary projection of [o].[Id] in the subquery, which is not used by the outer query. This can lead to less efficient SQL execution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM (\n    SELECT TOP(@__p_0) [o].[Id]\n    FROM [Orders] AS [o]\n    WHERE [o].[Amount] > 10\n) AS [t]\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with a Composite Value Object in C#\nDESCRIPTION: This code defines an `Order` entity with a `Money` property, showcasing how to use the composite value object within an entity. The `Order` class has an `Id` and a `Price` property of type `Money`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n\n    public Money Price { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Collection Navigation - C#\nDESCRIPTION: This code snippet demonstrates how to access a collection navigation property using the `Collection` method. It retrieves the `CollectionEntry<Blog, Post>` for the 'Posts' navigation property of a 'Blog' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nCollectionEntry<Blog, Post> collectionEntry1 = context.Entry(blog).Collection(e => e.Posts);\nCollectionEntry<Blog, Post> collectionEntry2 = context.Entry(blog).Collection<Post>(\"Posts\");\nCollectionEntry collectionEntry3 = context.Entry(blog).Collection(\"Posts\");\n```\n\n----------------------------------------\n\nTITLE: Async Querying and Ordering Test C#\nDESCRIPTION: This test ensures that the asynchronous query functionality is working correctly. It populates the in-memory `TestContext` with unsorted blog data, then uses the `BlogService`'s asynchronous method to retrieve the blogs. The test asserts that the retrieved blogs are ordered by name, verifying the asynchronous behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/writing-test-doubles.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace TestingDemo\n{\n    [TestClass]\n    public class AsyncQueryTests\n    {\n        [TestMethod]\n        public async Task GetAllBlogsAsync_orders_by_name()\n        {\n            var context = new TestContext();\n            context.Blogs.Add(new Blog { Name = \"BBB\" });\n            context.Blogs.Add(new Blog { Name = \"ZZZ\" });\n            context.Blogs.Add(new Blog { Name = \"AAA\" });\n\n            var service = new BlogService(context);\n            var blogs = await service.GetAllBlogsAsync();\n\n            Assert.AreEqual(3, blogs.Count);\n            Assert.AreEqual(\"AAA\", blogs[0].Name);\n            Assert.AreEqual(\"BBB\", blogs[1].Name);\n            Assert.AreEqual(\"ZZZ\", blogs[2].Name);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Values as Explicitly Temporary\nDESCRIPTION: This code shows how to explicitly set temporary values on entities and mark them as temporary using `IsTemporary = true`. This allows for explicit control over temporary value assignment, especially useful when forming relationships between entities before they are tracked.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_170\n\nLANGUAGE: csharp\nCODE:\n```\nvar blog = new Blog { Id = -1 };\nvar post1 = new Post { Id = -1, BlogId = -1 };\nvar post2 = new Post { Id = -2, BlogId = -1 };\n\ncontext.Add(blog).Property(e => e.Id).IsTemporary = true;\ncontext.Add(post1).Property(e => e.Id).IsTemporary = true;\ncontext.Add(post2).Property(e => e.Id).IsTemporary = true;\n\nConsole.WriteLine($\"Blog has explicit temporary ID = {blog.Id}\");\nConsole.WriteLine($\"Post 1 has explicit temporary ID = {post1.Id} and FK to Blog = {post1.BlogId}\");\nConsole.WriteLine($\"Post 2 has explicit temporary ID = {post2.Id} and FK to Blog = {post2.BlogId}\");\n```\n\n----------------------------------------\n\nTITLE: Configure Required One-to-Many with Shadow FK and No Navigation to Principal\nDESCRIPTION: This C# code configures a required one-to-many relationship between `Blog` and `Post` using Entity Framework Core's `OnModelCreating`. It uses the `IsRequired()` method to enforce the relationship, since it cannot be discovered by convention. This snippet requires an instance of `ModelBuilder` to be available.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany(e => e.Posts)\n                    .WithOne()\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: Define Blog and Post classes with EF Code First\nDESCRIPTION: Defines two simple classes, Blog and Post, that follow Code First conventions, establishing properties like Id, Title, BloggerName, DateCreated, and Content.  These classes can be used directly with Entity Framework without additional configuration, but are used to illustrate how data annotations can provide more mapping information.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string BloggerName { get; set;}\n        public virtual ICollection<Post> Posts { get; set; }\n    }\n\n    public class Post\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public DateTime DateCreated { get; set; }\n        public string Content { get; set; }\n        public int BlogId { get; set; }\n        public ICollection<Comment> Comments { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: DateTime Conversion Configuration C#\nDESCRIPTION: Configures all DateTime properties to be converted to 64-bit integers in the database, using the default conversion.  This uses the built-in conversion from DateTime to long.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nconfigurationBuilder\n    .Properties<DateTime>()\n    .HaveConversion<long>();\n```\n\n----------------------------------------\n\nTITLE: Find Siblings with Navigation Property C#\nDESCRIPTION: This C# code snippet shows a method to find siblings of a given entity using the DbContext and EntityEntry APIs. It retrieves the parent entity via a navigation property and then uses the inverse navigation to find the siblings.  The generic type parameter `TEntity` is used to constrain the type of entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_137\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IEnumerable<TEntity> FindSiblings<TEntity>(\n        this DbContext context, TEntity entity, string navigationToParent)\n        where TEntity : class\n    {\n        var parentEntry = context.Entry(entity).Reference(navigationToParent);\n\n        return context.Entry(parentEntry.CurrentValue!)\n            .Collection(parentEntry.Metadata.Inverse!)\n            .CurrentValue!\n            .OfType<TEntity>()\n            .Where(e => !ReferenceEquals(e, entity));\n    }\n```\n\n----------------------------------------\n\nTITLE: LINQ Query with Contains Subquery C#\nDESCRIPTION: This snippet shows a LINQ query that uses the `Contains` operator with a subquery to find blogs that have posts. It's used to illustrate EF Core 8's improved query generation using SQL `IN` instead of `EXISTS`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_136\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogsWithPosts = await context.Blogs\n    .Where(b => context.Posts.Select(p => p.BlogId).Contains(b.Id))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Walks and Pubs with Location Tags and Visit Counts (SQLite)\nDESCRIPTION: This SQL query, generated by EF Core for SQLite, retrieves walk and pub data including location tags.  It calculates the count of shared visit days between walks and pubs using the `json_each` function and a subquery. This query leverages the `->>` operator for accessing values inside JSON documents.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"w\".\"Name\" AS \"WalkName\", \"p\".\"Name\" AS \"PubName\", \"w\".\"Visits\" ->> 'LocationTag' AS \"WalkLocationTag\", \"p\".\"Visits\" ->> 'LocationTag' AS \"PubLocationTag\", (\n    SELECT COUNT(*)\n    FROM json_each(\"w\".\"Visits\" ->> 'DaysVisited') AS \"d\"\n    WHERE EXISTS (\n        SELECT 1\n        FROM json_each(\"p\".\"Visits\" ->> 'DaysVisited') AS \"d0\"\n        WHERE \"d0\".\"value\" = \"d\".\"value\")) AS \"Count\", json_array_length(\"w\".\"Visits\" ->> 'DaysVisited') AS \"TotalCount\"\nFROM \"Walks\" AS \"w\"\nINNER JOIN \"Pubs\" AS \"p\" ON \"w\".\"ClosestPubId\" = \"p\".\"Id\"\n```\n\n----------------------------------------\n\nTITLE: Customer Entity Implementing IHasIntKey C#\nDESCRIPTION: This class represents the Customer entity, which implements the IHasIntKey interface, indicating that it has an integer primary key property named Id. It also defines properties for customer Name, City, and PhoneNumber.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer : IHasIntKey\n    {\n        public int Id { get; set; }\n        public string Name { get; set; } = null!;\n        public string? City { get; set; }\n        public string? PhoneNumber { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering and Applying Custom Convention in C#\nDESCRIPTION: This code demonstrates how to register the `CustomKeyDiscoveryConvention` within the `OnModelCreating` method of a `DbContext`. It uses `AddBefore` to ensure the custom convention is applied before the default `IdKeyDiscoveryConvention`, and then `Remove` to remove the default convention, replacing it entirely with the custom behavior. This approach allows for precise control over convention execution order and replacement.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/model.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BlogContext : DbContext\n{\n    public DbSet<Post> Posts { get; set; }\n    public DbSet<Comment> Comments { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        modelBuilder.Conventions.AddBefore<IdKeyDiscoveryConvention>(new CustomKeyDiscoveryConvention());\n        modelBuilder.Conventions.Remove<IdKeyDiscoveryConvention>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic LINQ Query with EF Core and Azure Cosmos DB\nDESCRIPTION: This snippet demonstrates a basic LINQ query using EF Core against an Azure Cosmos DB data store. It filters sessions based on category length and case-insensitive string comparisons. The ToListAsync() method executes the query and retrieves the results as a list.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Session\n{\n    public Guid Id { get; set; }\n    public string Category { get; set; }\n\n    public string TenantId { get; set; } = null!;\n    public Guid UserId { get; set; }\n    public int SessionId { get; set; }\n}\n\nvar stringResults = await context.Sessions\n    .Where(\n        e => e.Category.Length > 4\n            && e.Category.Trim().ToLower() != \"disabled\"\n            && e.Category.TrimStart().Substring(2, 2).Equals(\"xy\", StringComparison.OrdinalIgnoreCase))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Create SQL script for migrations after InitialCreate\nDESCRIPTION: This command generates a SQL script for all migrations after the InitialCreate migration using dotnet ef migrations script command. The starting migration is specified by its ID 20180904195021_InitialCreate.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_14\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations script 20180904195021_InitialCreate\n```\n\n----------------------------------------\n\nTITLE: Cosmos DB Point Read Execution Example\nDESCRIPTION: Example of the log output when performing a point read operation. It indicates that the query was executed as an efficient point read. No SQL query is involved.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nExecuted ReadItem (46 ms, 1 RU) ActivityId='d7391311-2266-4811-ae2d-535904c42c43', Container='test', Id='9', Partition='[\"Microsoft\",\"99a410d7-e467-4CC5-92DE-148F3FC53F4C\",10.0]'\n```\n\n----------------------------------------\n\nTITLE: Incorrect SQL translation of LINQ query\nDESCRIPTION: This SQL example shows the incorrect translation of the LINQ query. This is shown to understand why EF Core 9 now throws an exception for such queries. The WHERE clause is evaluated before OFFSET and LIMIT, leading to incorrect results.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT c\nFROM root c\nWHERE ((c[\"Discriminator\"] = \"Session\") AND STARTSWITH(c[\"Name\"], \"f\"))\nOFFSET 0 LIMIT @__p_0\n```\n\n----------------------------------------\n\nTITLE: Querying Scalar Types with SqlQuery - SQL Server\nDESCRIPTION: This code snippet demonstrates how to query scalar (non-entity) types using SqlQuery in EF Core with SQL Server. It fetches all the BlogId values from the Blogs table and returns them as a list of integers. Requires Entity Framework Core and a database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar ids = await context.Database\n    .SqlQuery<int>($\"SELECT [BlogId] FROM [Blogs]\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Scaffold tables from specific schemas with Visual Studio PMC\nDESCRIPTION: This command uses the Package Manager Console (PMC) to scaffold entity types for all tables and views within the 'Customer' and 'Contractor' schemas. The `-Schemas` option is used to specify the schemas as a comma-separated list.  The connection string and provider need to be specified as well (omitted for brevity).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext ... -Schemas Customer, Contractor\n```\n\n----------------------------------------\n\nTITLE: Using the Repository Interface in C#\nDESCRIPTION: This C# code demonstrates how to use the `IRepository<T>` interface with `Employee` objects.  It showcases how to retrieve employees based on criteria, retrieve by ID, and add new employees using the repository. The code assumes that `repository` is an instance of a class that implements `IRepository<Employee>`. It also leverages LINQ for filtering and ordering.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar employeesNamedScott =\n        repository\n            .FindBy(e => e.Name == \"Scott\")\n            .OrderBy(e => e.HireDate);\n    var firstEmployee = repository.FindById(1);\n    var newEmployee = new Employee() {/*... */};\n    repository.Add(newEmployee);\n```\n\n----------------------------------------\n\nTITLE: Custom Filter with LogTo in EF Core (C#)\nDESCRIPTION: This C# snippet demonstrates how to apply a custom filter to the `LogTo` method for logging messages in EF Core. It configures the DbContextOptionsBuilder to log messages with a log level of Information or higher, as well as messages related to connection opening and closing.  It logs to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .LogTo(\n            Console.WriteLine,\n            (eventId, logLevel) => logLevel >= LogLevel.Information\n                                   || eventId == RelationalEventId.ConnectionOpened\n                                   || eventId == RelationalEventId.ConnectionClosed);\n```\n\n----------------------------------------\n\nTITLE: Adding Model-Based Convention After Existing - C#\nDESCRIPTION: This snippet shows how to add a model-based convention in relation to another existing convention within the OnModelCreating method. The AddAfter method ensures that the custom convention is applied after the specified convention (IdKeyDiscoveryConvention in this example).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/model.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(DbModelBuilder modelBuilder)\n{\n    modelBuilder.Conventions.AddAfter<IdKeyDiscoveryConvention>(new MyModelBasedConvention());\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting existing bundle using dotnet CLI\nDESCRIPTION: This command overwrites an existing migration bundle.  The '--force' flag ensures that the existing bundle file is replaced with the newly generated bundle. Dependencies: .NET SDK, Entity Framework Core tools installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_19\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations bundle --force\n```\n\n----------------------------------------\n\nTITLE: Optimization of Correlated Subqueries - C#\nDESCRIPTION: This C# code shows how to optimize correlated subqueries by including `ToListAsync()` to enable buffering of the subquery results.  The first example shows a query that may result in N+1 queries, while the second example shows the optimized version using `ToListAsync()`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.1.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Customers.Select(\n    c => c.Orders.Where(o => o.Amount  > 100).Select(o => o.Amount));\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Customers.Select(\n    c => c.Orders.Where(o => o.Amount  > 100).Select(o => o.Amount).ToList());\n```\n\n----------------------------------------\n\nTITLE: Owned Entity: OrderStatus C#\nDESCRIPTION: Defines a simple `OrderStatus` class with properties for status and description. It's used in the nested owned types example.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Modeling.OwnedEntities\n{\n    public class OrderStatus\n    {\n        public string Status { get; set; }\n        public string Description { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching the next page of data using the continuation token\nDESCRIPTION: The continuation token provided by the previous page is now used to fetch the subsequent page of data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nCosmosPage nextPage = await context.Sessions.OrderBy(s => s.Id).ToPageAsync(10, continuationToken);\nstring continuationToken = nextPage.ContinuationToken;\nforeach (var session in nextPage.Values)\n{\n    // Display/send the sessions to the user\n}\n```\n\n----------------------------------------\n\nTITLE: WPF DataGrid Definition in XAML\nDESCRIPTION: This XAML snippet defines a DataGrid to display Category data. It includes a CollectionViewSource for data binding and sets up the DataContext for the parent Grid. The DataGrid is configured with columns for CategoryId and Name, binding to the corresponding properties of the Category object.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/wpf.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n    <Window.Resources>\n        <CollectionViewSource x:Key=\"categoryViewSource\"\n                                d:DesignSource=\"{d:DesignInstance {x:Type local:Category}, CreateList=True}\"/>\n    </Window.Resources>\n    <Grid DataContext=\"{StaticResource categoryViewSource}\">\n        <DataGrid x:Name=\"categoryDataGrid\" AutoGenerateColumns=\"False\" EnableRowVirtualization=\"True\"\n                    ItemsSource=\"{Binding}\" Margin=\"13,13,43,191\"\n                    RowDetailsVisibilityMode=\"VisibleWhenSelected\">\n            <DataGrid.Columns>\n                <DataGridTextColumn x:Name=\"categoryIdColumn\" Binding=\"{Binding CategoryId}\"\n                                    Header=\"Category Id\" Width=\"SizeToHeader\"/>\n                <DataGridTextColumn x:Name=\"nameColumn\" Binding=\"{Binding Name}\"\n                                    Header=\"Name\" Width=\"SizeToHeader\"/>\n            </DataGrid.Columns>\n        </DataGrid>\n    </Grid>\n```\n\n----------------------------------------\n\nTITLE: Set Shadow Time-to-Live Property Before Saving in EF Core\nDESCRIPTION: This snippet shows how to set the value of a shadow time-to-live property before saving an entity to Azure Cosmos DB using EF Core. It retrieves the entity entry and sets the value of the shadow property 'TimeToLive'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nvar hamlet = new Hamlet { Id = \"DN37\", Name = \"Irby\" };\ncontext.Add(hamlet);\ncontext.Entry(hamlet).Property(\"TimeToLive\").CurrentValue = 60;\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Unidirectional Self-Referencing Many-to-Many (C#)\nDESCRIPTION: This snippet configures the many-to-many relationship for the Person entity's Friends navigation. Because a symmetrical relationship cannot be directly mapped using a single navigation, it's configured as a unidirectional many-to-many, requiring manual updates to both Person's friend lists.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Person>()\n        .HasMany(e => e.Friends)\n        .WithMany();\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Type Definition (C#)\nDESCRIPTION: This C# code defines the entity types `Person`, `Shoes`, and `Feet` used in the GroupBy examples.  `Person` has properties like `Id`, `Age`, `FirstName`, `LastName`, `MiddleInitial`, `Feet`, and a collection of `Shoes`. `Shoes` has `Id`, `Age`, `Style`, and a navigation property to `Person`. `Feet` has `Id`, `Size`, and a navigation property to `Person`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n    public int Id { get; set; }\n    public int Age { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string MiddleInitial { get; set; }\n    public Feet Feet { get; set; }\n    public ICollection<Shoes> Shoes { get; } = new List<Shoes>();\n}\n\npublic class Shoes\n{\n    public int Id { get; set; }\n    public int Age { get; set; }\n    public string Style { get; set; }\n    public Person Person { get; set; }\n}\n\npublic class Feet\n{\n    public int Id { get; set; }\n    public int Size { get; set; }\n    public Person Person { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Entity State Change Tracking in C#\nDESCRIPTION: This C# code snippet demonstrates the use of Entity Framework Core events to automatically timestamp entities when their state changes. It adds, modifies, and deletes entities in a blogging database, and the output shows the state changes and associated timestamps applied by the event handler. The example includes ensuring the database is created and deleted for a clean execution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/events.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BlogsContext())\n{\n    context.Database.EnsureDeleted();\n    context.Database.EnsureCreated();\n\n    context.Add(\n        new Blog\n        {\n            Id = 1,\n            Name = \"EF Blog\",\n            Posts =\n            {\n                new Post { Id = 1, Title = \"EF Core 3.1!\" },\n                new Post { Id = 2, Title = \"EF Core 5.0!\" }\n            }\n        });\n\n    context.SaveChanges();\n}\n\nusing (var context = new BlogsContext())\n{\n    var blog = context.Blogs.Include(e => e.Posts).Single();\n\n    blog.Name = \"EF Core Blog\";\n    context.Remove(blog.Posts.First());\n    blog.Posts.Add(new Post { Id = 3, Title = \"EF Core 6.0!\" });\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Logging Configuration in EF Core 5.0 (C#)\nDESCRIPTION: Demonstrates how to configure simple logging in EF Core 5.0 using the `LogTo` method. This will write logging messages, including generated SQL, to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(Console.WriteLine);\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing Entities Using DbSet.Local in EF6\nDESCRIPTION: This code demonstrates how to add and remove entities from the context using the DbSet.Local property. It loads some posts from the database based on tags, adds a new post to the local collection, removes an existing post from the local collection, and then loops over the posts in the context to display their state. It also demonstrates querying more posts from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/local-data.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Load some posts from the database into the context\n    context.Posts.Where(p => p.Tags.Contains(\"entity-framework\")).Load();  \n\n    // Get the local collection and make some changes to it\n    var localPosts = context.Posts.Local;\n    localPosts.Add(new Post { Name = \"What's New in EF\" });\n    localPosts.Remove(context.Posts.Find(1));  \n\n    // Loop over the posts in the context.\n    Console.WriteLine(\"In Local after entity-framework query: \");\n    foreach (var post in context.Posts.Local)\n    {\n        Console.WriteLine(\n            \"Found {0}: {1} with state {2}\",\n            post.Id,  \n            post.Title,\n            context.Entry(post).State);\n    }\n\n    var post1 = context.Posts.Find(1);\n    Console.WriteLine(\n        \"State of post 1: {0} is {1}\",\n        post1.Name,  \n        context.Entry(post1).State);  \n\n    // Query some more posts from the database\n    context.Posts.Where(p => p.Tags.Contains(\"asp.net\")).Load();  \n\n    // Loop over the posts in the context again.\n    Console.WriteLine(\"\\nIn Local after asp.net query: \");\n    foreach (var post in context.Posts.Local)\n    {\n        Console.WriteLine(\n            \"Found {0}: {1} with state {2}\",\n            post.Id,  \n            post.Title,\n            context.Entry(post).State);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TransactionScope Usage (Asynchronous) - C#\nDESCRIPTION: This snippet showcases using TransactionScope with asynchronous operations in .NET 4.5.1 or greater via TransactionScopeAsyncFlowOption.Enabled. It integrates SqlConnection asynchronous methods (OpenAsync, ExecuteNonQueryAsync) and Entity Framework's SaveChangesAsync() within the TransactionScope.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/transactions.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Data.SqlClient;\nusing System.Linq;\nusing System.Transactions;\n\nnamespace TransactionsExamples\n{\n    class TransactionsExample\n    {\n        public static void AsyncTransactionScope()\n        {\n            using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))\n            {\n                using (var conn = new SqlConnection(\"...\"))\n                {\n                    await conn.OpenAsync();\n\n                    var sqlCommand = new SqlCommand();\n                    sqlCommand.Connection = conn;\n                    sqlCommand.CommandText =\n                        @\"UPDATE Blogs SET Rating = 5\" +\n                            \" WHERE Name LIKE '%Entity Framework%'\";\n                    await sqlCommand.ExecuteNonQueryAsync();\n\n                    using (var context = new BloggingContext(conn, contextOwnsConnection: false))\n                    {\n                        var query = context.Posts.Where(p => p.Blog.Rating > 5);\n                        foreach (var post in query)\n                        {\n                            post.Title += \"[Cool Blog]\";\n                        }\n\n                        await context.SaveChangesAsync();\n                    }\n                }\n                \n                scope.Complete();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext with uninitialized DbSet properties C#\nDESCRIPTION: This snippet shows a DbContext with an uninitialized DbSet property.  EF Core 7.0 and above suppress the compiler warning because these properties are initialized via reflection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyContext : DbContext\n{\n    public DbSet<Customer> Customers { get; set;}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Schema with Multiple DbContexts in C#\nDESCRIPTION: This example shows how to initialize the schema for a specific DbContext when multiple DbContext classes are used and EnsureCreated might not work directly. It uses IRelationalDatabaseCreator to create tables.  It depends on the availability of the IRelationalDatabaseCreator service from the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/ensure-created.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// TODO: Check whether the schema needs to be initialized\n\n// Initialize the schema for this DbContext\nvar databaseCreator = dbContext.GetService<IRelationalDatabaseCreator>();\ndatabaseCreator.CreateTables();\n```\n\n----------------------------------------\n\nTITLE: DbContext with Read-Only Set Properties - C#\nDESCRIPTION: This snippet demonstrates defining a DbContext with read-only DbSet properties.  It uses the `Set<T>` method of the `DbContext` to create and return the `DbSet` instances. The `DbContext` caches the instances returned by `Set<T>`, ensuring each property returns the same instance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/dbsets.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs\n    {\n        get { return Set<Blog>(); }\n    }\n\n    public DbSet<Post> Posts\n    {\n        get { return Set<Post>(); }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: stringValue.EndsWith .NET to SQL translation\nDESCRIPTION: Shows how stringValue.EndsWith in .NET corresponds to ENDSWITH in SQL within the context of Entity Framework Core. This determines if a string ends with a specified substring.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_21\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.EndsWith(value)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[ENDSWITH(@stringValue, @value)](/azure/cosmos-db/nosql/query/endswith)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MigrationsSqlGenerator in C#\nDESCRIPTION: This C# code snippet shows how to register the custom `IMigrationsSqlGenerator` in the `DbContext`'s `OnConfiguring` method. It overrides the default service with the new `CustomSqlServerMigrationsSqlGenerator`, allowing the database provider to handle the custom migration operation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/operations.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder options)\n    => options.UseSqlServer(\"Server=(localdb)\\mssqllocaldb;Database=CustomMigrationOperations;Integrated Security=true\")\n        .ReplaceService<IMigrationsSqlGenerator, CustomSqlServerMigrationsSqlGenerator>();\n\n```\n\n----------------------------------------\n\nTITLE: DbContext DbSet Properties with NRTs C#\nDESCRIPTION: Defines DbSet properties in the DbContext using the null-forgiving operator (!). This indicates that these properties will always be initialized and will not be null, which aligns with nullable reference types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual DbSet<Blog> Blogs { get; set; } = null!;\npublic virtual DbSet<Post> Posts { get; set; } = null!;\npublic virtual DbSet<Tag> Tags { get; set; } = null!;\n```\n\n----------------------------------------\n\nTITLE: Add Migration with Timestamp - PowerShell\nDESCRIPTION: This PowerShell command adds a new migration or updates an existing one. When the timestamp is included, it updates the metadata of the existing migration rather than scaffolding a new one. Requires Entity Framework and the EntityFramework PowerShell module.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/teams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-Migration <full_name_including_timestamp_of_last_migration>\n```\n\n----------------------------------------\n\nTITLE: Using FromSqlRaw with Relational extension\nDESCRIPTION: This snippet shows how to call FromSqlRaw extension method for relational databases as a static method to avoid ambiguity when multiple providers are referenced. The code retrieves blogs from a relational database using a raw SQL query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await RelationalQueryableExtensions.FromSqlRaw(context.Blogs, \"SELECT ...\").ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configure Default Value for Integer Property\nDESCRIPTION: Configures the Count property of the Foo1 entity to have a default value of -1 in the database. Illustrates setting an explicit default value for a property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Foo1>()\n    .Property(e => e.Count)\n    .HasDefaultValue(-1);\n```\n\n----------------------------------------\n\nTITLE: Configuring String Property for Unicode Support - EF6 - C#\nDESCRIPTION: This snippet configures the `Name` property to store non-Unicode characters (varchar in SQL Server) using the `IsUnicode(false)` method.  By default, strings are Unicode (nvarchar).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>()\n    .Property(t => t.Name)\n    .IsUnicode(false);\n```\n\n----------------------------------------\n\nTITLE: Initializing EmployeeControllerTestBase in C#\nDESCRIPTION: This base class creates in-memory repositories, a fake unit of work, and an instance of the EmployeeController for use in derived test classes. It initializes employee data using the EmployeeObjectMother.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EmployeeControllerTestBase {\n    \tpublic EmployeeControllerTestBase() {\n    \t\t_employeeData = EmployeeObjectMother.CreateEmployees()\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .ToList();\n    \t\t_repository = new InMemoryObjectSet<Employee>(_employeeData);\n    \t\t_unitOfWork = new InMemoryUnitOfWork();\n    \t\t_unitOfWork.Employees = _repository;\n    \t\t_controller = new EmployeeController(_unitOfWork);\n    \t}\n\n    \tprotected IList<Employee> _employeeData;\n    \tprotected EmployeeController _controller;\n    \tprotected InMemoryObjectSet<Employee> _repository;\n    \tprotected InMemoryUnitOfWork _unitOfWork;\n    }\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of DateOnly/TimeOnly LINQ Query Using JSON\nDESCRIPTION: This SQL code represents the translated query for finding schools open on a specific day and time based on date and time properties stored within a JSON column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_114\n\nLANGUAGE: SQL\nCODE:\n```\nDECLARE @__today_0 date = '2023-02-07';\nDECLARE @__dayOfWeek_1 int = 2;\nDECLARE @__time_2 time = '20:14:34.7795877';\n\nSELECT [s].[Id], [s].[Founded], [s].[Name], [s].[OpeningHours]\nFROM [Schools] AS [s]\nWHERE EXISTS (\n    SELECT 1\n    FROM [Term] AS [t]\n    WHERE [s].[Id] = [t].[SchoolId] AND [t].[FirstDay] <= @__today_0\n      AND [t].[LastDay] >= @__today_0)\n```\n\n----------------------------------------\n\nTITLE: Employee and Manager Classes C#\nDESCRIPTION: These C# classes represent a simple inheritance hierarchy. `Manager` inherits from `Employee`, and this structure is used to illustrate Table-Per-Hierarchy (TPH) and Table-Per-Type (TPT) mapping strategies in Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class Manager : Employee\n{\n    public string SectionManaged { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Severing Relationships\nDESCRIPTION: This SQL script shows the commands generated by EF Core when severing the relationship between a blog and its posts, causing the posts to be deleted as orphans.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (1ms) [Parameters=[@p0='1'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [Posts]\nWHERE [Id] = @p0;\nSELECT @@ROWCOUNT;\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='2'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [Posts]\nWHERE [Id] = @p0;\nSELECT @@ROWCOUNT;\n```\n\n----------------------------------------\n\nTITLE: Creating a Proxy Instance of a Derived Type - C#\nDESCRIPTION: This code snippet demonstrates how to create a proxy instance of a derived entity type using the generic version of the `Create` method of `DbSet`.  It requires a `BloggingContext` with a `Users` DbSet and a derived type `Administrator`. The created entity is not automatically added or attached to the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/proxies.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var admin = context.Users.Create<Administrator>();\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of DateOnly/TimeOnly LINQ Query\nDESCRIPTION: This SQL code represents the translated query for finding schools open on a specific day and time based on date and time properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_112\n\nLANGUAGE: SQL\nCODE:\n```\nDECLARE @__today_0 date = '2023-02-07';\nDECLARE @__dayOfWeek_1 int = 2;\nDECLARE @__time_2 time = '19:53:40.4798052';\n\nSELECT [s].[Id], [s].[Founded], [s].[Name], [o0].[SchoolId], [o0].[Id], [o0].[ClosesAt], [o0].[DayOfWeek], [o0].[OpensAt]\nFROM [Schools] AS [s]\nLEFT JOIN [OpeningHours] AS [o0] ON [s].[Id] = [o0].[SchoolId]\nWHERE EXISTS (\n    SELECT 1\n    FROM [Term] AS [t]\n    WHERE [s].[Id] = [t].[SchoolId] AND [t].[FirstDay] <= @__today_0 AND [t].[LastDay] >= @__today_0) AND EXISTS (\n    SELECT 1\n    FROM [OpeningHours] AS [o]\n    WHERE [s].[Id] = [o].[SchoolId] AND [o].[DayOfWeek] = @__dayOfWeek_1 AND [o].[OpensAt] < @__time_2 AND [o].[ClosesAt] >= @__time_2)\nORDER BY [s].[Id], [o0].[SchoolId]\n```\n\n----------------------------------------\n\nTITLE: Define Foo3 Entity with Backing Field\nDESCRIPTION: Defines Foo3 entity with a non-nullable integer property Count and a nullable backing field _count.  This allows explicitly setting 0 without making the property nullable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic class Foo3\n{\n    public int Id { get; set; }\n\n    private int? _count;\n    public int Count\n    {\n        get => _count ?? -1;\n        set => _count = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL with Optional Filters SQL\nDESCRIPTION: This shows the SQL generated from the CompiledQuery with optional filters. Notice the CASE statement and NULL checks which are added when the filters are optional.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\n...\\nWHERE ((0 = (CASE WHEN (@p__linq__1 IS NOT NULL) THEN cast(1 as bit) WHEN (@p__linq__1 IS NULL) THEN cast(0 as bit) END)) OR ([Project3].[C2] > @p__linq__2)) AND (@p__linq__3 IS NULL OR [Project3].[Country] = @p__linq__4)\n```\n\n----------------------------------------\n\nTITLE: Implementing Find Method in TestBlogDbSet in C#\nDESCRIPTION: This code implements a custom `TestBlogDbSet` that inherits from the generic `TestDbSet<Blog>`.  It overrides the `Find` method to search for a `Blog` entity based on its `BlogId`.  This implementation is specific to the `Blog` entity and demonstrates how to provide a concrete implementation for `Find` when testing.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/writing-test-doubles.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Linq;\n\nnamespace TestingDemo\n{\n    class TestBlogDbSet : TestDbSet<Blog>\n    {\n        public override Blog Find(params object[] keyValues)\n        {\n            var id = (int)keyValues.Single();\n            return this.SingleOrDefault(b => b.BlogId == id);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DateTime2 Convention Class - C#\nDESCRIPTION: Defines a convention class that configures DateTime properties to use the datetime2 column type in SQL Server. It inherits from the Convention class and applies the configuration in its constructor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DateTime2Convention : Convention\n{\n    public DateTime2Convention()\n    {\n        this.Properties<DateTime>()\n            .Configure(c => c.HasColumnType(\"datetime2\"));        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Constructing a Query with Expression API and Constant in EF Core\nDESCRIPTION: This code snippet dynamically constructs a LINQ query using the Expression API with a constant value. This approach can lead to performance issues because EF Core recompiles the query each time it's invoked with a different constant value, polluting the query cache and causing database query plan recompilation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar blogName = _seed.Blogs.First().Name;\n\nusing (var context = new BloggingContext(_options))\n{\n    var blogParameter = Expression.Parameter(typeof(Blog), \"b\");\n    var nameProperty = typeof(Blog).GetProperty(nameof(Blog.Name));\n    var constant = Expression.Constant(blogName);\n    var equalsMethod = typeof(string).GetMethod(nameof(string.Equals), new[] { typeof(string), typeof(string), typeof(StringComparison) });\n    var body = Expression.Call(null, equalsMethod, Expression.Property(blogParameter, nameProperty), constant, Expression.Constant(StringComparison.OrdinalIgnoreCase));\n\n    var lambda = Expression.Lambda<Func<Blog, bool>>(body, blogParameter);\n\n    var query = context.Blogs.Where(lambda);\n\n    query.ToList();\n}\n```\n\n----------------------------------------\n\nTITLE: Register DbContextFactory in DI Container (C#)\nDESCRIPTION: This code snippet demonstrates how to register a DbContextFactory in the application's dependency injection container using AddDbContextFactory. It configures the DbContext to use SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_145\n\nLANGUAGE: C#\nCODE:\n```\nvar container = services\n    .AddDbContextFactory<SomeDbContext>(\n        builder => builder.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=EFCoreSample\"))\n    .BuildServiceProvider();\n```\n\n----------------------------------------\n\nTITLE: Salary Update using ExecuteSqlInterpolated (Older EF Core)\nDESCRIPTION: This C# code uses ExecuteSqlInterpolated to execute a raw SQL query for updating employee salaries in older versions of EF Core. It provides a way to prevent SQL injection vulnerabilities by using interpolated strings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-updating.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Database.ExecuteSqlInterpolated($\"UPDATE [Employees] SET [Salary] = [Salary] + 1000\");\n```\n\n----------------------------------------\n\nTITLE: Update Database - PowerShell\nDESCRIPTION: This PowerShell command updates the database to the latest migration.  It's used to apply pending migrations or re-apply the latest migration with updated metadata. Requires Entity Framework and the EntityFramework PowerShell module.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/teams.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Database\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Package with PowerShell\nDESCRIPTION: This command installs a specific NuGet package for the database provider using the PowerShell Package Manager Console in Visual Studio. Replace `provider_package_name` with the actual package name. It requires Visual Studio with the NuGet Package Manager installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/index.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ninstall-package provider_package_name\n```\n\n----------------------------------------\n\nTITLE: Mapping Entity to Table with Schema - C#\nDESCRIPTION: Maps the 'Department' entity to a table named 't_Department' within the 'school' schema using the `ToTable()` method. This allows organizing tables into logical groups.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>()  \n    .ToTable(\"t_Department\", \"school\");\n```\n\n----------------------------------------\n\nTITLE: CompiledQuery in C#\nDESCRIPTION: This code snippet demonstrates the usage of `CompiledQuery` for improved performance. It defines a static readonly function `productsForCategoryCQ` that takes a `NorthwindEntities` context and a category name as input and returns an `IQueryable<Product>` containing the products from the specified category.  The `context.InvokeProductsForCategoryCQ` method is then called with the desired category to retrieve the products. The performance benefits of CompiledQuery are lost when composing on top of the compiled query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static readonly Func<NorthwindEntities, string, IQueryable<Product>> productsForCategoryCQ = CompiledQuery.Compile(\n    (NorthwindEntities context, string categoryName) =>\n        context.Products.Where(p => p.Category.CategoryName == categoryName)\n        );\n…\nvar q = context.InvokeProductsForCategoryCQ(\"Beverages\");\n```\n\n----------------------------------------\n\nTITLE: Loading Products on Category Selection Change in C#\nDESCRIPTION: This snippet demonstrates how to load products associated with a selected category in a DataGridView using Entity Framework Core. It retrieves the selected Category object and uses the DbContext to load the related Products collection.  It relies on the ProductsContext and Category entities being defined.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/winforms.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void dataGridViewCategories_SelectionChanged(object sender, EventArgs e)\n{\n    if (this.dbContext != null)\n    {\n        var category = (Category)this.dataGridViewCategories.CurrentRow.DataBoundItem;\n\n        if (category != null)\n        {\n            this.dbContext.Entry(category).Collection(e => e.Products).Load();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IBloggingContext interface in C#\nDESCRIPTION: Defines an interface `IBloggingContext` that represents the contract for interacting with the data store.  It includes `DbSet` properties for `Blogs` and `Posts`, and a `SaveChanges` method for persisting changes.  This allows for easy swapping of the concrete EF context with an in-memory test double for testing purposes. It requires the `System.Data.Entity` namespace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/writing-test-doubles.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\n\nnamespace TestingDemo\n{\n    public interface IBloggingContext\n    {\n        DbSet<Blog> Blogs { get; }\n        DbSet<Post> Posts { get; }\n        int SaveChanges();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold specific tables from specific schemas with Visual Studio PMC\nDESCRIPTION: This command uses the Package Manager Console (PMC) to scaffold entity types for specific tables from specific schemas. The `-Tables` option is used to specify tables in the format 'schema.table' as a comma-separated list.  The connection string and provider need to be specified as well (omitted for brevity).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext ... -Tables Customer.Purchases, Contractor.Accounts, Contractor.Contracts\n```\n\n----------------------------------------\n\nTITLE: SQL Commands for Deleting Owner and Blog\nDESCRIPTION: This SQL snippet shows the SQL commands executed when deleting a person and the blog they own.  This showcases the order in which the entities are deleted. First the blog is deleted and then the Person entity is deleted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- Executed DbCommand (8ms) [Parameters=[@p0='1'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [Blogs]\nWHERE [Id] = @p0;\nSELECT @@ROWCOUNT;\n\n-- Executed DbCommand (2ms) [Parameters=[@p1='1'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [People]\nWHERE [Id] = @p1;\nSELECT @@ROWCOUNT;\n```\n\n----------------------------------------\n\nTITLE: Defining PostMetadataAggregate in EF Core 7.0 (C#)\nDESCRIPTION: This C# code snippet defines the PostMetadataAggregate, another aggregate type used in EF Core 7.0 examples. It provides another example of how aggregate types can be incorporated into the data model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[PostMetadataAggregate](../../../../samples/core/Miscellaneous/NewInEFCore7/BlogsContext.cs?name=PostMetadataAggregate)]\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Walks and Pubs with Location Tags and Visit Counts (SQL Server)\nDESCRIPTION: This SQL query, generated by EF Core for SQL Server, retrieves walk and pub data including location tags from JSON columns. It calculates the count of shared visit days between walks and pubs using `OpenJson` and subqueries. It matches date values within the JSON `DaysVisited` arrays to determine the overlapping visit count.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_49\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [w].[Name] AS [WalkName], [p].[Name] AS [PubName], JSON_VALUE([w].[Visits], '$.LocationTag') AS [WalkLocationTag], JSON_VALUE([p].[Visits], '$.LocationTag') AS [PubLocationTag], (\n    SELECT COUNT(*)\n    FROM OpenJson(JSON_VALUE([w].[Visits], '$.DaysVisited')) AS [d]\n    WHERE EXISTS (\n        SELECT 1\n        FROM OpenJson(JSON_VALUE([p].[Visits], '$.DaysVisited')) AS [d0]\n        WHERE CAST([d0].[value] AS date) = CAST([d].[value] AS date) OR ([d0].[value] IS NULL AND [d].[value] IS NULL))) AS [Count], (\n    SELECT COUNT(*)\n    FROM OpenJson(JSON_VALUE([w].[Visits], '$.DaysVisited')) AS [d1]) AS [TotalCount]\nFROM [Walks] AS [w]\nINNER JOIN [Pubs] AS [p] ON [w].[ClosestPubId] = [p].[Id]\n```\n\n----------------------------------------\n\nTITLE: Merging Properties in Model Snapshot - EF Core\nDESCRIPTION: This code snippet demonstrates how to merge conflicting property changes in the EF Core model snapshot file. It shows a scenario where two developers have added different properties to the same entity, and the conflict is resolved by including both properties in the merged version. This ensures that both changes are reflected in the final model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/teams.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nb.Property<bool>(\"Deactivated\");\nb.Property<int>(\"LoyaltyPoints\");\n```\n\n----------------------------------------\n\nTITLE: Defining the DogWalk Entity\nDESCRIPTION: This code snippet defines the `DogWalk` entity, which includes a list of `DateOnly` objects `DaysVisited` and a navigation property to a `Pub` entity.  It also uses an enum for the terrain type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\npublic class DogWalk\n{\n    public DogWalk(string name)\n    {\n        Name = name;\n    }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public Terrain Terrain { get; set; }\n    public List<DateOnly> DaysVisited { get; private set; } = new();\n    public Pub? ClosestPub { get; set; }\n}\n\npublic enum Terrain\n{\n    Forest,\n    River,\n    Hills,\n    Village,\n    Park,\n    Beach,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IDbCommandInterceptor with NLog in C#\nDESCRIPTION: This C# code defines an interceptor class, NLogCommandInterceptor, that implements the IDbCommandInterceptor interface to log database command execution events using NLog. It logs warnings for non-asynchronous commands and errors when commands throw exceptions. The class uses NLog's Logger to write to the log.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NLogCommandInterceptor : IDbCommandInterceptor\n{\n    private static readonly Logger Logger = LogManager.GetCurrentClassLogger();\n\n    public void NonQueryExecuting(\n        DbCommand command, DbCommandInterceptionContext<int> interceptionContext)\n    {\n        LogIfNonAsync(command, interceptionContext);\n    }\n\n    public void NonQueryExecuted(\n        DbCommand command, DbCommandInterceptionContext<int> interceptionContext)\n    {\n        LogIfError(command, interceptionContext);\n    }\n\n    public void ReaderExecuting(\n        DbCommand command, DbCommandInterceptionContext<DbDataReader> interceptionContext)\n    {\n        LogIfNonAsync(command, interceptionContext);\n    }\n\n    public void ReaderExecuted(\n        DbCommand command, DbCommandInterceptionContext<DbDataReader> interceptionContext)\n    {\n        LogIfError(command, interceptionContext);\n    }\n\n    public void ScalarExecuting(\n        DbCommand command, DbCommandInterceptionContext<object> interceptionContext)\n    {\n        LogIfNonAsync(command, interceptionContext);\n    }\n\n    public void ScalarExecuted(\n        DbCommand command, DbCommandInterceptionContext<object> interceptionContext)\n    {\n        LogIfError(command, interceptionContext);\n    }\n\n    private void LogIfNonAsync<TResult>(\n        DbCommand command, DbCommandInterceptionContext<TResult> interceptionContext)\n    {\n        if (!interceptionContext.IsAsync)\n        {\n            Logger.Warn(\"Non-async command used: {0}\", command.CommandText);\n        }\n    }\n\n    private void LogIfError<TResult>(\n        DbCommand command, DbCommandInterceptionContext<TResult> interceptionContext)\n    {\n        if (interceptionContext.Exception != null)\n        {\n            Logger.Error(\"Command {0} failed with exception {1}\",\n                command.CommandText, interceptionContext.Exception);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DbProviderServices in config file - XML\nDESCRIPTION: This XML snippet demonstrates how to register a DbProviderServices implementation within the application's configuration file (app.config or web.config). The `provider` element is added to the `providers` list under the `entityFramework` section, specifying the invariant name and assembly-qualified type name of the provider services.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/provider-model.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<entityFramework>\n  <providers>\n    <provider invariantName=\"My.Invariant.Name\" type=\"MyProvider.MyProviderServices, MyAssembly\" />\n  </providers>\n</entityFramework>\n```\n\n----------------------------------------\n\nTITLE: Design-Time DbContext Factory Implementation (C#)\nDESCRIPTION: This code snippet shows how to implement the `IDesignTimeDbContextFactory<TContext>` interface to create a DbContext instance at design time. This approach allows for custom configuration of the DbContext specifically for design-time operations, bypassing the default mechanisms.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dbcontext-creation.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Design;\nusing Microsoft.Extensions.Configuration;\nusing System.IO;\n\nnamespace CommandLine\n{\n    public class BloggingContextFactory : IDesignTimeDbContextFactory<BloggingContext>\n    {\n        public BloggingContext CreateDbContext(string[] args)\n        {\n            var configuration = new ConfigurationBuilder()\n                .SetBasePath(Directory.GetCurrentDirectory())\n                .AddJsonFile(\"appsettings.json\")\n                .Build();\n\n            var builder = new DbContextOptionsBuilder<BloggingContext>();\n            var connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n\n            builder.UseSqlServer(connectionString);\n\n            return new BloggingContext(builder.Options);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverse Engineering Command (PowerShell)\nDESCRIPTION: Executes the EF Core scaffold-dbcontext command using PowerShell to reverse engineer a database and generate the model, using the customized T4 templates. The `-Force` switch overwrites existing files.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext 'Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Chinook' Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext using .NET CLI\nDESCRIPTION: This command uses the .NET CLI to scaffold entity types and a DbContext from the Chinook database.  It specifies the database connection string and the SQL Server provider. The connection string points to a SQL Server LocalDB instance. Note that the connection string needs to be properly quoted and escaped for the shell being used.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold \"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Chinook\" Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: TPC: All Types Query - SQL\nDESCRIPTION: SQL query generated by EF Core when using TPC to retrieve all entities in the hierarchy. It uses UNION ALL to combine results from different tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_58\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [f].[Id], [f].[FoodId], [f].[Name], [f].[Species], [f].[Value], NULL AS [FavoriteAnimalId], NULL AS [Vet], NULL AS [EducationLevel], NULL AS [FavoriteToy], N'FarmAnimal' AS [Discriminator]\nFROM [FarmAnimals] AS [f]\nUNION ALL\nSELECT [h].[Id], [h].[FoodId], [h].[Name], NULL AS [Species], NULL AS [Value], [h].[FavoriteAnimalId], NULL AS [Vet], NULL AS [EducationLevel], NULL AS [FavoriteToy], N'Human' AS [Discriminator]\nFROM [Humans] AS [h]\nUNION ALL\nSELECT [c].[Id], [c].[FoodId], [c].[Name], NULL AS [Species], NULL AS [Value], NULL AS [FavoriteAnimalId], [c].[Vet], [c].[EducationLevel], NULL AS [FavoriteToy], N'Cat' AS [Discriminator]\nFROM [Cats] AS [c]\nUNION ALL\nSELECT [d].[Id], [d].[FoodId], [d].[Name], NULL AS [Species], NULL AS [Value], NULL AS [FavoriteAnimalId], [d].[Vet], NULL AS [EducationLevel], [d].[FavoriteToy], N'Dog' AS [Discriminator]\nFROM [Dogs] AS [d]\n```\n\n----------------------------------------\n\nTITLE: Querying Schools Open Today using JSON Columns in C# with LINQ\nDESCRIPTION: This C# code demonstrates a LINQ query that finds schools open on a specific day and time, using DateOnly and TimeOnly properties stored within a JSON column, and translates to SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nopenSchools = await context.Schools\n    .Where(\n        s => s.Terms.Any(\n                 t => t.FirstDay <= today\n                      && t.LastDay >= today)\n             && s.OpeningHours[(int)dayOfWeek].OpensAt < time\n             && s.OpeningHours[(int)dayOfWeek].ClosesAt >= time)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating GetDepartmentName Stored Procedure in SQL\nDESCRIPTION: This SQL script creates a stored procedure named 'GetDepartmentName'. It retrieves the name of a department from the 'Department' table based on the 'DepartmentID'. It takes 'ID' as input and returns the department name as an output parameter 'Name'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[GetDepartmentName]')\nAND type in (N'P', N'PC'))\nBEGIN\nEXEC dbo.sp_executesql @statement = N'\nCREATE PROCEDURE [dbo].[GetDepartmentName]\n@ID int,\n@Name nvarchar(50) OUTPUT\nAS\nSELECT @Name = Name FROM Department\nWHERE DepartmentID = @ID\n'\nEND\nGO\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType with Composite Key in CSDL (XML)\nDESCRIPTION: This code snippet defines an EntityType named 'Author' with a composite key consisting of the Name and Address properties. This example shows how to create an entity where a single property is not sufficient to uniquely identify it. It also contains a NavigationProperty to the Books entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Author\">\n   <Key>\n     <PropertyRef Name=\"Name\" />\n     <PropertyRef Name=\"Address\" />\n   </Key>\n   <Property Type=\"String\" Name=\"Name\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Address\" Nullable=\"false\" />\n   <NavigationProperty Name=\"Books\" Relationship=\"BooksModel.WrittenBy\"\n                       FromRole=\"Author\" ToRole=\"Book\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: LINQ Query with OrderBy (C#)\nDESCRIPTION: This C# code demonstrates a LINQ query that selects customers and their first order, showcasing the unnecessary ORDER BY clause in previous versions of EF Core.\nIt requires Entity Framework Core and a context with Customers and Orders entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Customers\n    .Select(\n        e => new\n        {\n            e.Id,\n            FirstOrder = e.Orders.Where(i => i.Id == 1).ToList()\n        })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Client Evaluation Method used in Projection\nDESCRIPTION: This is a sample client method (`StandardizeURL`) used in a projection.  Although the method itself doesn't interact with EF Core or tracking, the fact that it receives a `Blog` entity causes that entity to be tracked when the method is called within a query's projection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprivate static string StandardizeURL(Blog blog)\n{\n    var url = blog.Url.ToLower();\n    if (!url.StartsWith(\"http://\"))\n    {\n        url = $\"http://{url}\";\n    }\n\n    return url;\n}\n```\n\n----------------------------------------\n\nTITLE: IsUnicode Convention using Having - C#\nDESCRIPTION: Configures string properties based on the IsUnicode attribute using the Having method. This simplifies the code by directly accessing the attribute and its Unicode property within the Configure method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Properties()\n            .Having(x => x.GetCustomAttributes(false).OfType<IsUnicode>().FirstOrDefault())\n            .Configure((config, att) => config.IsUnicode(att.Unicode));\n```\n\n----------------------------------------\n\nTITLE: Guarded Keys Definition C#\nDESCRIPTION: Defines `ProductId` and `CategoryId` struct types for improved type safety of key properties in domain-driven design (DDD). These structs wrap integer key values and are used to differentiate between product and category IDs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_172\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct ProductId\n{\n    public ProductId(int value) => Value = value;\n    public int Value { get; }\n}\n\npublic readonly struct CategoryId\n{\n    public CategoryId(int value) => Value = value;\n    public int Value { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many from Dependent - C#\nDESCRIPTION: This code configures a unidirectional one-to-many relationship starting from the dependent entity (`Post`) using `OnModelCreating`. It explicitly specifies the principal entity type (`Blog`) using the generic `HasOne<Blog>()` method, as the navigation property is missing. The foreign key and required constraint are also configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Post>()\n                    .HasOne<Blog>()\n                    .WithMany(e => e.Posts)\n                    .HasForeignKey(e => e.BlogId)\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: Defining Author, Reader, and IPerson Classes for EF Core\nDESCRIPTION: This code snippet defines the `Author` and `Reader` classes, which implement the `IPerson` interface.  These classes are used as entities in the Entity Framework context to demonstrate tracking entities implementing an interface.  The `Author` class has properties for `AuthorId`, `Name`, and `Biography`, while the `Reader` class has properties for `ReaderId`, `Name`, and `Username`. The `IPerson` interface defines a `Name` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/local-data.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Author : IPerson\n{\n    public int AuthorId { get; set; }\n    public string Name { get; set; }\n    public string Biography { get; set; }\n}\n\npublic class Reader : IPerson\n{\n    public int ReaderId { get; set; }\n    public string Name { get; set; }\n    public string Username { get; set; }\n}\n\npublic interface IPerson\n{\n    string Name { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Payload Property in Many-to-Many Relationship (C#)\nDESCRIPTION: Configures the CreatedOn payload property of the PostTag join entity with a default value using HasDefaultValueSql.  This ensures that the CreatedOn property is automatically set when a new association is created.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>(\n            j => j.Property(e => e.CreatedOn).HasDefaultValueSql(\"CURRENT_TIMESTAMP\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Discovering One-to-Many Relationship in EF Core (C#)\nDESCRIPTION: This example demonstrates how EF Core discovers a one-to-many relationship by pairing `Blog.Posts` (collection navigation) and `Post.Blog` (reference navigation). This pairing identifies a single, one-to-many relationship between `Blog` and `Post` entity types. The conventions automatically configure the relationship based on these navigation properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public int? BlogId { get; set; }\n    public Blog? Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate SQL Script - With From - .NET Core CLI\nDESCRIPTION: This command generates a SQL script from the specified 'from' migration to the latest migration using the .NET Core CLI. The 'AddNewTables' argument specifies the starting migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_1\n\nLANGUAGE: .NET Core CLI\nCODE:\n```\ndotnet ef migrations script AddNewTables\n```\n\n----------------------------------------\n\nTITLE: Set Foreign Key to Null in C#\nDESCRIPTION: This code snippet shows how to remove a relationship by setting the foreign key property to `null`. This requires that the foreign key property is nullable. In this example, the `DepartmentID` of a `course` object is set to `null`, thus breaking the association with the `Department` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncourse.DepartmentID = null;\n```\n\n----------------------------------------\n\nTITLE: Principal Type Id FK Naming Convention in C#\nDESCRIPTION: This example showcases the `<principal entity type name>Id` naming convention. `Post.Blogid` is recognized as the foreign key property using this pattern.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Key { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public int? Blogid { get; set; }\n    public Blog? TheBlog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupJoin Operator (C#)\nDESCRIPTION: This code snippet demonstrates the LINQ GroupJoin operator.  EF Core does not translate GroupJoin to the server in most cases because databases lack native collection representation.  This specific example attempts to join Blogs and Posts without a selector.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Blogs\n    .GroupJoin(\n        context.Posts,\n        b => b.BlogId,\n        p => p.BlogId,\n        (b, posts) => new { b, posts });\n```\n\n----------------------------------------\n\nTITLE: Negated Nullable Comparison Projection - SQL (Partial, EF8)\nDESCRIPTION: This SQL query shows the output generated by EF Core 8 for the negated nullable comparison in a projection. It returns `false` for entities whose `NullableIntOne` or `NullableIntTwo` are null, which is inconsistent with C#.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_57\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [e].[NullableIntOne], [e].[NullableIntTwo], CASE\n    WHEN NOT ([e].[NullableIntOne] > [e].[NullableIntTwo]) THEN CAST(1 AS bit)\n    ELSE CAST(0 AS bit)\nEND AS [Operation]\nFROM [Entities] AS [e]\n```\n\n----------------------------------------\n\nTITLE: Script Migration After InitialCreate (by ID) PowerShell\nDESCRIPTION: Generates a SQL script for all migrations after the InitialCreate migration. The example uses the migration ID to identify the target migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nScript-Migration 20180904195021_InitialCreate\n```\n\n----------------------------------------\n\nTITLE: Disable Model Caching in Entity Framework C#\nDESCRIPTION: This C# snippet demonstrates how to disable model caching within an Entity Framework DbContext to accurately benchmark performance improvements when using compiled models. By commenting out the caching logic, the model is re-initialized on each request, allowing for precise measurements. This modification helps isolate the performance impact of compiled models versus cached models.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/CompiledModels/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IModel Instance\n{\n    get\n    {\n        //if (_instance == null)\n        {\n            _instance = new BlogsContextModel();\n            _instance.Initialize();\n            _instance.Customize();\n        }\n\n        return _instance;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Console Output - console\nDESCRIPTION: The expected output from running the program after calling the stored procedures and printing the results to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/stored-procedures/query.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nStudentID: 2\nStudent grade: 4.00\nStudentID: 2\nStudent grade: 3.50\nThe department name is Engineering\n```\n\n----------------------------------------\n\nTITLE: Function Usage with Nullable Values in C#\nDESCRIPTION: Shows how EF Core optimizes queries when using functions with nullable values by leveraging the knowledge that certain functions return null if any of their arguments are null.  This avoids unnecessary function evaluation in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/null-comparisons.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Function with nullable values\nvar query6 = context.Entities.Where(e => e.String1.Substring(0, 1) == e.String2.Substring(0, 1));\n\n// Simplified query\nvar query7 = context.Entities.Where(e => e.String1 != null && e.String2 != null);\n```\n\n----------------------------------------\n\nTITLE: NonUnicode Attribute Definition - C#\nDESCRIPTION: Defines a custom attribute called NonUnicode.  This attribute can be applied to string properties to indicate that they should be stored as varchar instead of nvarchar in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]\npublic class NonUnicode : Attribute\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Index with C#\nDESCRIPTION: This code demonstrates how to create a multi-column index using multiple `Index` attributes with the same name and specifying the column order. An index named `IX_BlogIdAndRating` will be created on the `Rating` and `BlogId` columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n    public class Post\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        [Index(\"IX_BlogIdAndRating\", 2)]\n        public int Rating { get; set; }\n        [Index(\"IX_BlogIdAndRating\", 1)]\n        public int BlogId { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Owned Entities Without Owner (C#)\nDESCRIPTION: This code snippet attempts to query owned entities directly, without including the owner in the query. In EF Core 3.0, this will throw an exception if it's a tracking query because owned entities cannot be manipulated without the owner.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.People.Select(p => p.Address);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Constructing a Query Simply with Parameter in EF Core\nDESCRIPTION: This code demonstrates how to dynamically construct a LINQ query using a simple lambda expression with a parameter. This approach achieves the same result as using the Expression API with a parameter, but is simpler and less prone to errors.  It also avoids query recompilation by using a parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvar blogName = _seed.Blogs.First().Name;\n\nusing (var context = new BloggingContext(_options))\n{\n    var query = context.Blogs.Where(b => string.Equals(b.Name, blogName, StringComparison.OrdinalIgnoreCase));\n\n    query.ToList();\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping ETag Property for Concurrency - C#\nDESCRIPTION: This code snippet shows how the `ETag` property of the `Document` entity is configured to handle concurrency. It sets the property type to `string` and configures it as a concurrency token, ensuring that updates are only applied if the ETag value matches the current value in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Document>().Property(d => d.ETag).HasConversion<string>();\n\nmodelBuilder.Entity<Document>().Property(d => d.ETag).IsConcurrencyToken();\n\nmodelBuilder.Entity<Document>().Property(d => d.Published).HasConversion(typeof(DateTimeOffset));\n\n```\n\n----------------------------------------\n\nTITLE: Provide connection string for migrate.exe\nDESCRIPTION: This command specifies the connection string and provider name to use for the database connection. The provider name must be specified along with the connection string; omitting it will cause an exception.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/migrate-exe.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nMigrate.exe BlogDemo.dll /connectionString=\"Data Source=localhost;Initial Catalog=BlogDemo;Integrated Security=SSPI\" /connectionProviderName=\"System.Data.SqlClient\"\n```\n\n----------------------------------------\n\nTITLE: SQL Update for Shared Address\nDESCRIPTION: This SQL code shows the database update statements generated when modifying a shared address property. The `UPDATE` statements target the `Customers` and `Orders` tables to reflect the change in `Address_Line1`, `BillingAddress_Line1`, and `ShippingAddress_Line1` columns respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE [Customers] SET [Address_Line1] = @p0\nOUTPUT 1\nWHERE [Id] = @p1;\nUPDATE [Orders] SET [BillingAddress_Line1] = @p2, [ShippingAddress_Line1] = @p3\nOUTPUT 1\nWHERE [Id] = @p4;\n```\n\n----------------------------------------\n\nTITLE: Filtering Related Entities in a Query - C#\nDESCRIPTION: This snippet demonstrates how to filter which related entities are loaded into memory by using `DbContext.Entry(...).Collection(...).Query()` to get an IQueryable and applying a `Where` clause.  This allows you to load only specific related entities based on a condition.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/explicit.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Querying.RelatedData\n{\n    public class NavQueryFiltered\n    {\n        public static void Main()\n        {\n            using (var context = new BloggingContext(new DbContextOptionsBuilder<BloggingContext>()\n                .UseInMemoryDatabase(\"NavQueryFiltered\")\n                .Options))\n            {\n                context.Database.EnsureDeleted();\n                context.Database.EnsureCreated();\n\n                context.Blogs.Add(new Blog { Name = \"MyBlog\", Posts = { new Post { Title = \"First post\" }, new Post { Title = \"Second post\" } } });\n                context.SaveChanges();\n            }\n\n            using (var context = new BloggingContext(new DbContextOptionsBuilder<BloggingContext>()\n                .UseInMemoryDatabase(\"NavQueryFiltered\")\n                .Options))\n            {\n                var blog = context.Blogs.Single(b => b.Name == \"MyBlog\");\n\n                var posts = context.Entry(blog)\n                    .Collection(b => b.Posts)\n                    .Query()\n                    .Where(p => p.Title.Contains(\"First\"))\n                    .ToList();\n\n                Console.WriteLine($\"Blog '{blog.Name}' has {posts.Count} posts with 'First' in the title.\");\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: String.Concat and String.Join - SQL Server Translation\nDESCRIPTION: The translated SQL query demonstrates how `String.Concat` and `String.Join` are translated into complex SQL expressions, including `STRING_AGG`, `SUBSTRING`, and conditional logic based on content length.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_118\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [t].[Name], (N'''' + [t0].[Name]) + N''' ', [t0].[Name], [t].[c]\nFROM (\n    SELECT [a].[Name], COALESCE(STRING_AGG(CASE\n        WHEN CAST(LEN([p].[Content]) AS int) >= 10 THEN COALESCE((N'''' + COALESCE(SUBSTRING([p].[Content], 0 + 1, 10), N'')) + N''' ', N'')\n    END, N' | '), N'') AS [c]\n    FROM [Posts] AS [p]\n    LEFT JOIN [Authors] AS [a] ON [p].[AuthorId] = [a].[Id]\n    GROUP BY [a].[Name]\n) AS [t]\nOUTER APPLY (\n    SELECT DISTINCT [b].[Name]\n    FROM [Posts] AS [p0]\n    LEFT JOIN [Authors] AS [a0] ON [p0].[AuthorId] = [a0].[Id]\n    INNER JOIN [Blogs] AS [b] ON [p0].[BlogId] = [b].[Id]\n    WHERE [t].[Name] = [a0].[Name] OR ([t].[Name] IS NULL AND [a0].[Name] IS NULL)\n) AS [t0]\nORDER BY [t].[Name]\n```\n\n----------------------------------------\n\nTITLE: Projecting Data to View Model using LINQ in C#\nDESCRIPTION: This code demonstrates how to use LINQ's `Select` operator to project data from the `Employees` entity to the `EmployeeSummaryViewModel`. It retrieves an employee by ID and creates a new `EmployeeSummaryViewModel` instance, populating its properties with data from the employee entity and the count of their time cards. This is an example of data projection used to create a tailored view model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n    public ViewResult Summary(int id) {\n        var model = _unitOfWork.Employees\n                               .Where(e => e.Id == id)\n                               .Select(e => new EmployeeSummaryViewModel\n                                  {\n                                    Name = e.Name,\n                                    TotalTimeCards = e.TimeCards.Count()\n                                  })\n                               .Single();\n        return View(model);\n    }\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization of Collection Navigation - C#\nDESCRIPTION: This C# snippet shows lazy initialization of a collection navigation using the null-coalescing operator.  The collection is only created when it is first accessed. This can improve performance if the collection is not always needed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    private ICollection<Post>? _posts;\n\n    public ICollection<Post> Posts => _posts ??= new List<Post>();\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple SQL Queries - Split Query Example 1\nDESCRIPTION: Shows the multiple SQL queries generated for Split Query Example 1.  The first query retrieves all Customer IDs, and the second query retrieves the Orders for those Customers that satisfy the condition on Order ID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_110\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id]\nFROM [Customers] AS [c]\nORDER BY [c].[Id]\n\nSELECT [t].[Id], [t].[CustomerId], [t].[OrderDate], [c].[Id]\nFROM [Customers] AS [c]\nINNER JOIN (\n    SELECT [o].[Id], [o].[CustomerId], [o].[OrderDate]\n    FROM [Order] AS [o]\n    WHERE [o].[Id] > 1\n) AS [t] ON [c].[Id] = [t].[CustomerId]\nORDER BY [c].[Id]\n```\n\n----------------------------------------\n\nTITLE: Scaffold specific tables from specific schemas with .NET CLI\nDESCRIPTION: This command uses the .NET CLI to scaffold entity types for specific tables from specific schemas.  The `--table` option is used to specify tables in the format 'schema.table'.  The connection string and provider need to be specified as well (omitted for brevity).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold ... --table Customer.Purchases --table Contractor.Accounts --table Contractor.Contracts\n```\n\n----------------------------------------\n\nTITLE: Specifying Complex Type - C#\nDESCRIPTION: Explicitly specifies the 'Details' class as a complex type using the `ComplexType<T>()` method. This is needed when Code First fails to automatically detect a complex type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.ComplexType<Details>();\n```\n\n----------------------------------------\n\nTITLE: Simple Logging Configuration in EF Core (C#)\nDESCRIPTION: This snippet demonstrates how to enable simple logging in EF Core to capture database command execution times. It configures the DbContext to log to the console, enabling the identification of slow queries. The `OnConfiguring` method overrides the base class, and uses options builder to configure logging to console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder.LogTo(Console.WriteLine);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Single Property (Fluent API) - C#\nDESCRIPTION: This code snippet demonstrates how to access a single property of an entity using the strongly-typed, fluent-like API in Entity Framework Core. It retrieves the `PropertyEntry<Blog, string>` for the 'Name' property of a 'Blog' entity using a lambda expression.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nPropertyEntry<Blog, string> propertyEntry = context.Entry(blog).Property(e => e.Name);\n```\n\n----------------------------------------\n\nTITLE: C# Tag Entity for Many-to-Many\nDESCRIPTION: This C# code defines an entity class `Tag` with properties for `Id`, `Name`, and `Description`. It includes a collection of `Post` entities, representing a many-to-many relationship with the `Posts` table through the `PostTag` join table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Tag\n    {\n        public int Id { get; set; }\n        public string Name { get; set; } = null!;\n        public string? Description { get; set; }\n\n        public virtual ICollection<Post> Posts { get; set; } = new List<Post>();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Properties on Complex Type - EF6 - C#\nDESCRIPTION: This example demonstrates configuring a scalar property (`Location`) on a complex type (`Details`) using the `Property` method on the `ComplexTypeConfiguration`. This allows setting configurations like `HasMaxLength` directly on the complex type's properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.ComplexType<Details>()\n    .Property(t => t.Location)\n    .HasMaxLength(20);\n```\n\n----------------------------------------\n\nTITLE: Adding a Blog reference to the Post class in C#\nDESCRIPTION: This C# code modifies the `Post` class to include a reference to the `Blog` class, establishing a relationship between a post and the blog it belongs to.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public DateOnly PublishedOn { get; set; }\n    public bool Archived { get; set; }\n\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity SQL Aggregating Subtotals Query Example (Navision Model)\nDESCRIPTION: This XML snippet provides an example of an 'AggregatingSubtotals' query used with the Navision model. These queries combine aggregations and subtotals, typically using UNION ALL. The query calculates and returns aggregated data for zones, including amount consumed, along with subtotals and a final total, considering a 'MinAmountConsumed' parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n  <Query complexity=\"AggregatingSubtotals\">\n    <CommandText>\nusing NavisionFK;\nfunction AmountConsumed(entities Collection([CRONUS_International_Ltd__Zone])) as\n(\n    Edm.Sum(select value N.Block_Movement FROM entities as E, E.CRONUS_International_Ltd__Bin as N)\n)\nfunction AmountConsumed(P1 Edm.Int32) as\n(\n    AmountConsumed(select value e from NavisionFKContext.CRONUS_International_Ltd__Zone as e where e.Zone_Ranking = P1)\n)\n----------------------------------------------------------------------------------------------------------------------\n(\n    select top(10) Zone_Ranking, Cross_Dock_Bin_Zone, AmountConsumed(GroupPartition(E))\n    from NavisionFKContext.CRONUS_International_Ltd__Zone as E\n    where AmountConsumed(E.Zone_Ranking) > @MinAmountConsumed\n    group by E.Zone_Ranking, E.Cross_Dock_Bin_Zone\n)\nunion all\n(\n    select top(10) Zone_Ranking, Cast(null as Edm.Byte) as P2, AmountConsumed(GroupPartition(E))\n    from NavisionFKContext.CRONUS_International_Ltd__Zone as E\n    where AmountConsumed(E.Zone_Ranking) > @MinAmountConsumed\n    group by E.Zone_Ranking\n)\nunion all\n{\n    Row(Cast(null as Edm.Int32) as P1, Cast(null as Edm.Byte) as P2, AmountConsumed(select value E\n                                                                         from NavisionFKContext.CRONUS_International_Ltd__Zone as E\n                                                                         where AmountConsumed(E.Zone_Ranking) > @MinAmountConsumed))\n}</CommandText>\n    <Parameters>\n      <Parameter Name=\"MinAmountConsumed\" DbType=\"Int32\" Value=\"10000\" />\n    </Parameters>\n  </Query>\n```\n\n----------------------------------------\n\nTITLE: Change Tracker Debug Logging Output\nDESCRIPTION: This output demonstrates the debug logging produced by Entity Framework Core's change tracker when changes are detected in the entity model. It shows events related to property changes, state changes, collection changes, and entity tracking, providing insights into the change detection process.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/debug-views.md#_snippet_3\n\nLANGUAGE: output\nCODE:\n```\ndbug: 12/30/2020 13:52:44.815 CoreEventId.DetectChangesStarting[10800] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      DetectChanges starting for 'BlogsContext'.\ndbug: 12/30/2020 13:52:44.818 CoreEventId.PropertyChangeDetected[10802] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      The unchanged property 'Blog.Name' was detected as changed from '.NET Blog' to '.NET Blog (All new!)' and will be marked as modified for entity with key '{Id: 1}'.\ndbug: 12/30/2020 13:52:44.820 CoreEventId.StateChanged[10807] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      The 'Blog' entity with key '{Id: 1}' tracked by 'BlogsContext' changed state from 'Unchanged' to 'Modified'.\ndbug: 12/30/2020 13:52:44.821 CoreEventId.CollectionChangeDetected[10804] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      1 entities were added and 0 entities were removed from navigation 'Blog.Posts' on entity with key '{Id: 1}'.\ndbug: 12/30/2020 13:52:44.822 CoreEventId.ValueGenerated[10808] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      'BlogsContext' generated temporary value '-2147482638' for the property 'Id.Post'.\ndbug: 12/30/2020 13:52:44.822 CoreEventId.StartedTracking[10806] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      Context 'BlogsContext' started tracking 'Post' entity with key '{Id: -2147482638}'.\ndbug: 12/30/2020 13:52:44.827 CoreEventId.CollectionChangeDetected[10804] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      0 entities were added and 1 entities were removed from navigation 'Blog.Posts' on entity with key '{Id: 2}'.\ndbug: 12/30/2020 13:52:44.827 CoreEventId.StateChanged[10807] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      The 'Post' entity with key '{Id: 4}' tracked by 'BlogsContext' changed state from 'Unchanged' to 'Modified'.\ndbug: 12/30/2020 13:52:44.829 CoreEventId.CascadeDeleteOrphan[10003] (Microsoft.EntityFrameworkCore.Update)\n      An entity of type 'Post' with key '{Id: 4}' changed to 'Deleted' state due to severed required relationship to its parent entity of type 'Blog'.\ndbug: 12/30/2020 13:52:44.829 CoreEventId.StateChanged[10807] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      The 'Post' entity with key '{Id: 4}' tracked by 'BlogsContext' changed state from 'Modified' to 'Deleted'.\ndbug: 12/30/2020 13:52:44.829 CoreEventId.CollectionChangeDetected[10804] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      0 entities were added and 1 entities were removed from navigation 'Blog.Posts' on entity with key '{Id: 2}'.\ndbug: 12/30/2020 13:52:44.831 CoreEventId.CascadeDelete[10002] (Microsoft.EntityFrameworkCore.Update)\n      A cascade state change of an entity of type 'PostTag' with key '{PostsId: 4, TagsId: 2}' to 'Deleted' occurred due to the deletion of its parent entity of type 'Post' with key '{Id: 4}'.\ndbug: 12/30/2020 13:52:44.831 CoreEventId.StateChanged[10807] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      The 'PostTag' entity with key '{PostsId: 4, TagsId: 2}' tracked by 'BlogsContext' changed state from 'Unchanged' to 'Deleted'.\ndbug: 12/30/2020 13:52:44.831 CoreEventId.DetectChangesCompleted[10801] (Microsoft.EntityFrameworkCore.ChangeTracking)\n      DetectChanges completed for 'BlogsContext'.\n```\n\n----------------------------------------\n\nTITLE: Disable Lazy Loading - Globally - EF6 - C#\nDESCRIPTION: This code disables lazy loading for all entities in the context by setting the LazyLoadingEnabled property of the Configuration to false within the BloggingContext constructor.  Related entities must then be loaded using eager loading or explicit loading. Requires Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/related-data.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public BloggingContext()\n    {\n        this.Configuration.LazyLoadingEnabled = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statements for Generated Key Values\nDESCRIPTION: These SQL statements show the generated SQL for inserting a blog and its associated posts into a SQLite database when using automatically generated key values in Entity Framework Core. Notice that the `INSERT INTO` statements do not include the `Id` column, as the database is responsible for generating these values. A `SELECT` statement retrieves the generated `Id` after insertion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p0='.NET Blog' (Size = 9)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Blogs\" (\"Name\")\nVALUES (@p0);\nSELECT \"Id\"\nFROM \"Blogs\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n\n-- Executed DbCommand (0ms) [Parameters=[@p1='1' (DbType = String), @p2='Announcing the release of EF Core 5.0, a full featured cross-platform...' (Size = 72), @p3='Announcing the Release of EF Core 5.0' (Size = 37)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Posts\" (\"BlogId\", \"Content\", \"Title\")\nVALUES (@p1, @p2, @p3);\nSELECT \"Id\"\nFROM \"Posts\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='1' (DbType = String), @p1='F# 5 is the latest version of F#, the functional programming language...' (Size = 72), @p2='Announcing F# 5' (Size = 15)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Posts\" (\"BlogId\", \"Content\", \"Title\")\nVALUES (@p0, @p1, @p2);\nSELECT \"Id\"\nFROM \"Posts\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n```\n\n----------------------------------------\n\nTITLE: Filtering Explicitly Loaded Data - EF6 - C#\nDESCRIPTION: This code shows how to apply filters when explicitly loading related entities using the Query method in Entity Framework 6. It loads only the posts with the 'entity-framework' tag related to a given blog, using both lambda expressions and strings to specify the relationship. Requires Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/related-data.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n\n    // Load the posts with the 'entity-framework' tag related to a given blog.\n    context.Entry(blog)\n           .Collection(b => b.Posts)\n           .Query()\n           .Where(p => p.Tags.Contains(\"entity-framework\"))\n           .Load();\n\n    // Load the posts with the 'entity-framework' tag related to a given blog\n    // using a string to specify the relationship.\n    context.Entry(blog)\n           .Collection(\"Posts\")\n           .Query()\n           .Where(p => p.Tags.Contains(\"entity-framework\"))\n           .Load();\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a Graph of Existing Entities with Explicit Keys - C#\nDESCRIPTION: This snippet demonstrates how to attach a graph of existing entities (a `Blog` and its associated `Posts`) to the EF Core `DbContext` using explicit key values. The `Attach` method sets the entire graph to the `Unchanged` state. No database updates will occur if `SaveChanges` is called at this point.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Attach(\n    new Blog\n    {\n        Id = 1,\n        Name = \".NET Blog\",\n        Posts =\n        {\n            new Post\n            {\n                Id = 1,\n                Title = \"Announcing the Release of EF Core 5.0\",\n                Content = \"Announcing the release of EF Core 5.0, a full featured cross-platform...\"\n            },\n            new Post\n            {\n                Id = 2,\n                Title = \"Announcing F# 5\",\n                Content = \"F# 5 is the latest version of F#, the functional programming language...\"\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: SQL Delete Statements for Required Relationship\nDESCRIPTION: This SQL code snippet demonstrates the delete statements that are generated by EF Core when deleting a blog with related posts, given a required relationship. The code first deletes posts, and then deletes the blog.  The parameters represent the Ids of the entities being deleted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p0='1' (DbType = String)], CommandType='Text', CommandTimeout='30']\nDELETE FROM \"Posts\"\nWHERE \"Id\" = @p0;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='2' (DbType = String)], CommandType='Text', CommandTimeout='30']\nDELETE FROM \"Posts\"\nWHERE \"Id\" = @p0;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p1='1' (DbType = String)], CommandType='Text', CommandTimeout='30']\nDELETE FROM \"Blogs\"\nWHERE \"Id\" = @p1;\n```\n\n----------------------------------------\n\nTITLE: SQL Query with OrderBy (EF Core 5.0)\nDESCRIPTION: This SQL code shows the query generated by EF Core 5.0 for the LINQ query above. Note the ORDER BY clause on both Customer ID and Order ID, which is unnecessary.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_116\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [t].[Id], [t].[CustomerId], [t].[OrderDate]\nFROM [Customers] AS [c]\nLEFT JOIN (\n    SELECT [o].[Id], [o].[CustomerId], [o].[OrderDate]\n    FROM [Order] AS [o]\n    WHERE [o].[Id] = 1\n) AS [t] ON [c].[Id] = [t].[CustomerId]\nORDER BY [c].[Id], [t].[Id]\n```\n\n----------------------------------------\n\nTITLE: Configure Manual or Autoscale Throughput for an Entity Type\nDESCRIPTION: This snippet demonstrates how to configure manual or autoscale throughput for a specific entity type (container) in Azure Cosmos DB using EF Core. It shows the use of HasManualThroughput and HasAutoscaleThroughput within the EntityTypeBuilder to set the throughput for a specific entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nentityTypeBuilder =>\n    {\n        entityTypeBuilder.HasManualThroughput(5000);\n        entityTypeBuilder.HasAutoscaleThroughput(3000);\n    }\n```\n\n----------------------------------------\n\nTITLE: Chained Query Tags - C#\nDESCRIPTION: This code snippet demonstrates how to chain multiple query tags using the extension methods defined earlier.  The LINQ query uses `GetNearestPeople` and `Limit` which each add tags to the final SQL statement.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tags.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npeople = await context.People\n    .GetNearestPeople()\n    .Limit()\n    .OrderBy(p => p.Location.Distance(myLocation))\n    .Take(5)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Wrapping IDbConnectionFactory and DbProviderService in C#\nDESCRIPTION: This code snippet shows how to wrap IDbConnectionFactory and DbProviderService using DbConfiguration.OnLockingConfiguration. It registers an event handler that replaces the default services with wrapped versions. Requires MyWrappedProviderServices and MyWrappedConnectionFactory implementations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/provider-model.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nDbConfiguration.OnLockingConfiguration +=\n    (_, a) =>\n    {\n        a.ReplaceService<DbProviderServices>(\n            (s, k) => new MyWrappedProviderServices(s));\n\n        a.ReplaceService<IDbConnectionFactory>(\n            (s, k) => new MyWrappedConnectionFactory(s));\n    };\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigationBaseIncludeIgnored Event as a Warning (C#)\nDESCRIPTION: This C# code snippet shows how to configure the `NavigationBaseIncludeIgnored` event as a warning instead of an error. This restores the old behavior where these query patterns were logged as a warning rather than throwing an exception, allowing potentially problematic queries to still function.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.ConfigureWarnings(b => b.Warn(CoreEventId.NavigationBaseIncludeIgnored));\n```\n\n----------------------------------------\n\nTITLE: Further Optimized Paging with Skip & Lambda - C#\nDESCRIPTION: This example further illustrates the optimization, extracting the Skip method from the loop to show that is still the same query plan because the parameter is now contained in a closure.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar i = 0;\nvar skippyCustomers = context.Customers.OrderBy(c => c.LastName).Skip(() => i);\nfor (; i < count; ++i)\n{\n    var currentCustomer = skippyCustomers.FirstOrDefault();\n    ProcessCustomer(currentCustomer);\n}\n```\n\n----------------------------------------\n\nTITLE: Split Query Example 3 C#\nDESCRIPTION: Presents a LINQ query that selects customers and a distinct collection of their order dates, filtering orders with Id greater than 1. The example showcases split-query behavior when using Distinct() in conjunction with non-navigation collections.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Customers\n    .Select(\n        c => new\n        {\n            c,\n            OrderDates = c.Orders\n                .Where(o => o.Id > 1)\n                .Select(o => o.OrderDate)\n                .Distinct()\n        })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Shared-Type Entity Types - C#\nDESCRIPTION: This code shows how to define shared-type entity types, which use the same CLR type.  They must be configured with a unique name and use the `Set` call to create the `DbSet`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyContext : DbContext\n{\n    public DbSet<Dictionary<string, object>> Entities => Set<Dictionary<string, object>>(\"Entities\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Dictionary<string, object>>(\"Entities\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add DateTime2 Convention to ModelBuilder - C#\nDESCRIPTION: Adds the DateTime2Convention to the model builder's conventions collection.  This ensures that the custom convention is applied during model creation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(DbModelBuilder modelBuilder)\n{\n    modelBuilder.Properties<int>()\n                .Where(p => p.Name.EndsWith(\"Key\"))\n                .Configure(p => p.IsKey());\n\n    modelBuilder.Conventions.Add(new DateTime2Convention());\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Entity Containers with EntityContainerMapping (XML)\nDESCRIPTION: This XML snippet demonstrates the EntityContainerMapping element, which maps the entity container in the conceptual model (SchoolModelEntities) to the entity container in the storage model (SchoolModelStoreContainer). It includes examples of EntitySetMapping elements that map entity sets to store entity sets, along with their associated property mappings using ScalarProperty within MappingFragment.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<EntityContainerMapping StorageEntityContainer=\"SchoolModelStoreContainer\"\n                         CdmEntityContainer=\"SchoolModelEntities\">\n   <EntitySetMapping Name=\"Courses\">\n     <EntityTypeMapping TypeName=\"c.Course\">\n       <MappingFragment StoreEntitySet=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n         <ScalarProperty Name=\"Title\" ColumnName=\"Title\" />\n         <ScalarProperty Name=\"Credits\" ColumnName=\"Credits\" />\n         <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n       </MappingFragment>\n     </EntityTypeMapping>\n   </EntitySetMapping>\n   <EntitySetMapping Name=\"Departments\">\n     <EntityTypeMapping TypeName=\"c.Department\">\n       <MappingFragment StoreEntitySet=\"Department\">\n         <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n         <ScalarProperty Name=\"Name\" ColumnName=\"Name\" />\n         <ScalarProperty Name=\"Budget\" ColumnName=\"Budget\" />\n         <ScalarProperty Name=\"StartDate\" ColumnName=\"StartDate\" />\n         <ScalarProperty Name=\"Administrator\" ColumnName=\"Administrator\" />\n       </MappingFragment>\n     </EntityTypeMapping>\n   </EntitySetMapping>\n </EntityContainerMapping>\n```\n\n----------------------------------------\n\nTITLE: Mapping Type Hierarchy with Abstract Root Type\nDESCRIPTION: This XML snippet demonstrates mapping a type hierarchy where the root type ('SchoolModel.Person') is abstract. It uses 'IsTypeOf' in the TypeName attribute to map the base type and derived types ('SchoolModel.Instructor' and 'SchoolModel.Student') to the 'Person' table. Conditions are used to distinguish between the types based on the HireDate and EnrollmentDate columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"People\">\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel.Person)\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"FirstName\" ColumnName=\"FirstName\" />\n       <ScalarProperty Name=\"LastName\" ColumnName=\"LastName\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel.Instructor)\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"HireDate\" ColumnName=\"HireDate\" />\n       <Condition ColumnName=\"HireDate\" IsNull=\"false\" />\n       <Condition ColumnName=\"EnrollmentDate\" IsNull=\"true\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel.Student)\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ColumnName=\"EnrollmentDate\" />\n       <Condition ColumnName=\"EnrollmentDate\" IsNull=\"false\" />\n       <Condition ColumnName=\"HireDate\" IsNull=\"true\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: TPT: All Types Query - SQL\nDESCRIPTION: SQL query generated by EF Core with TPT for retrieving all entities in the hierarchy. It involves multiple LEFT JOIN operations to combine data from different tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_55\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Id], [a].[FoodId], [a].[Name], [f].[Species], [f].[Value], [h].[FavoriteAnimalId], [p].[Vet], [c].[EducationLevel], [d].[FavoriteToy], CASE\n    WHEN [d].[Id] IS NOT NULL THEN N'Dog'\n    WHEN [c].[Id] IS NOT NULL THEN N'Cat'\n    WHEN [h].[Id] IS NOT NULL THEN N'Human'\n    WHEN [f].[Id] IS NOT NULL THEN N'FarmAnimal'\nEND AS [Discriminator]\nFROM [Animals] AS [a]\nLEFT JOIN [FarmAnimals] AS [f] ON [a].[Id] = [f].[Id]\nLEFT JOIN [Humans] AS [h] ON [a].[Id] = [h].[Id]\nLEFT JOIN [Pets] AS [p] ON [a].[Id] = [p].[Id]\nLEFT JOIN [Cats] AS [c] ON [a].[Id] = [c].[Id]\nLEFT JOIN [Dogs] AS [d] ON [a].[Id] = [d].[Id]\n```\n\n----------------------------------------\n\nTITLE: Initializing navigation properties to null with null-forgiving operator C#\nDESCRIPTION: This snippet demonstrates how to initialize a navigation property to null using the null-forgiving operator (!). This is useful when constructor binding isn't feasible for initializing the navigation property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    public Customer? Customer { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Notification Entities in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to modify properties and add new entities to navigation properties when using notification entities in EF Core. The change tracker automatically detects these modifications without explicitly calling DetectChanges.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blog = context.Blogs.Include(e => e.Posts).First(e => e.Name == \".NET Blog\");\n\n// Change a property value\nblog.Name = \".NET Blog (Updated!)\";\n\n// Add a new entity to a navigation\nblog.Posts.Add(new Post\n{\n    Title = \"What’s next for System.Text.Json?\",\n    Content = \".NET 5.0 was released recently and has come with many...\"\n});\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Entity with Complex Type C#\nDESCRIPTION: This code defines the `Customer` entity, which includes a required `Contact` property of the complex type defined earlier. This demonstrates how a complex type can be used as a property of an entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public required string Name { get; set; }\n    public required Contact Contact { get; set; }\n    public List<Order> Orders { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Data with TemporalAll in EF Core\nDESCRIPTION: This code snippet demonstrates how to query all historical data for employees using the `TemporalAll()` method in EF Core. It filters the data by employee name, orders it by the `ValidFrom` property, and selects the employee along with the `ValidFrom` and `ValidTo` properties. The example shows how to retrieve historical employee data and display their position over time.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar history = context\n    .Employees\n    .TemporalAll()\n    .Where(e => e.Name == \"Rainbow Dash\")\n    .OrderBy(e => EF.Property<DateTime>(e, \"ValidFrom\"))\n    .Select(\n        e => new\n        {\n            Employee = e,\n            ValidFrom = EF.Property<DateTime>(e, \"ValidFrom\"),\n            ValidTo = EF.Property<DateTime>(e, \"ValidTo\")\n        })\n    .ToList();\n\nforeach (var pointInTime in history)\n{\n    Console.WriteLine(\n        $\"  Employee {pointInTime.Employee.Name} was '{pointInTime.Employee.Position}' from {pointInTime.ValidFrom} to {pointInTime.ValidTo}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SQL Maximum Database Size - C#\nDESCRIPTION: This code snippet shows how to specify the maximum size of an Azure SQL Database using the `HasDatabaseMaxSize` extension method in Entity Framework Core.  The maximum size limits the amount of storage the database can consume. This configuration is done inside the `OnModelCreating` method within a DbContext class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/azure-sql-database.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasDatabaseMaxSize(\"10 GB\");\n```\n\n----------------------------------------\n\nTITLE: Persist and Retrieve Data using Spatial Types\nDESCRIPTION: This code snippet demonstrates how to add University objects with spatial data, save changes to the database, and then query for the nearest university to a given location using LINQ and the DbGeography.Distance method.  DbGeography.FromText parses WellKnownText to create geography points.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/spatial.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new UniversityContext ())\n{\n    context.Universities.Add(new University()\n        {\n            Name = \"Graphic Design Institute\",\n            Location = DbGeography.FromText(\"POINT(-122.336106 47.605049)\"),\n        });\n\n    context. Universities.Add(new University()\n        {\n            Name = \"School of Fine Art\",\n            Location = DbGeography.FromText(\"POINT(-122.335197 47.646711)\"),\n        });\n\n    context.SaveChanges();\n\n    var myLocation = DbGeography.FromText(\"POINT(-122.296623 47.640405)\");\n\n    var university = (from u in context.Universities\n                        orderby u.Location.Distance(myLocation)\n                        select u).FirstOrDefault();\n\n    Console.WriteLine(\n        \"The closest University to you is: {0}.\",\n        university.Name);\n}\n```\n\n----------------------------------------\n\nTITLE: Create Categories and Products Tables - SQL\nDESCRIPTION: SQL script to create the Categories and Products tables in the database.  It defines the schema, primary keys, foreign keys, and indexes for the tables.  The CategoryId in the Products table is a foreign key referencing the Categories table, establishing a one-to-many relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/wpf.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n    CREATE TABLE [dbo].[Categories] (\n        [CategoryId] [int] NOT NULL IDENTITY,\n        [Name] [nvarchar](max),\n        CONSTRAINT [PK_dbo.Categories] PRIMARY KEY ([CategoryId])\n    )\n\n    CREATE TABLE [dbo].[Products] (\n        [ProductId] [int] NOT NULL IDENTITY,\n        [Name] [nvarchar](max),\n        [CategoryId] [int] NOT NULL,\n        CONSTRAINT [PK_dbo.Products] PRIMARY KEY ([ProductId])\n    )\n\n    CREATE INDEX [IX_CategoryId] ON [dbo].[Products]([CategoryId])\n\n    ALTER TABLE [dbo].[Products] ADD CONSTRAINT [FK_dbo.Products_dbo.Categories_CategoryId] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Categories] ([CategoryId]) ON DELETE CASCADE\n```\n\n----------------------------------------\n\nTITLE: Clear SQLite Connection Pool C#\nDESCRIPTION: This code snippet demonstrates how to clear the SQLite connection pool before deleting a database file. This is necessary because connections are now pooled by default in EF Core 6.0, which can prevent file deletion if a connection is still open. The `SqliteConnection.ClearPool()` method is used to clear the pool for a specific connection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nSqliteConnection.ClearPool(connection);\nFile.Delete(databaseFile);\n```\n\n----------------------------------------\n\nTITLE: Document Summary Class Definition in C#\nDESCRIPTION: This C# snippet defines the DocumentSummary class used for faster lookups in the PlanetaryDocs application. It contains basic information about a document, facilitating efficient search operations by avoiding full document scans.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n:::code language=\"csharp\" source=\"../../../../samples/end2end/PlanetaryDocs/PlanetaryDocs.Domain/DocumentSummary.cs\":::\n```\n\n----------------------------------------\n\nTITLE: Rewriting Dynamic Query as Non-Dynamic Queries\nDESCRIPTION: This C# code demonstrates how to rewrite the dynamic query from the previous example as two separate, non-dynamic queries.  This allows query precompilation to handle them.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/nativeaot-and-precompiled-queries.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nIAsyncEnumerable<Blog> GetBlogs(BlogContext context, bool applyFilter)\n    => applyFilter\n        ? context.Blogs.OrderBy(b => b.Id).Where(b => b.Name != \"foo\").AsAsyncEnumerable()\n        : context.Blogs.OrderBy(b => b.Id).AsAsyncEnumerable();\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Ignore Auto Includes - C#\nDESCRIPTION: This code snippet demonstrates how to use the `IgnoreAutoIncludes` method to prevent auto-included navigations from being loaded in a specific query. The `ColorScheme` navigation will not be loaded.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar themes = context.Themes.IgnoreAutoIncludes().ToList();\n```\n\n----------------------------------------\n\nTITLE: Reverse Engineering Views (C#)\nDESCRIPTION: This code shows an example of how EF Core automatically scaffolds keyless entity types for database views when reverse engineering. It demonstrates the configuration of an entity that maps to a view and has no key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/index.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Names>(entity =>\n    {\n        entity.HasNoKey();\n        entity.ToView(\"Names\");\n    });\n\n    modelBuilder.Entity<Things>(entity =>\n    {\n        entity.HasNoKey();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Namespace with Using Element (CSDL)\nDESCRIPTION: This example demonstrates how to import a namespace using the Using element in CSDL.  It allows referring to entity types, complex types, and association types defined in another conceptual model. The Namespace attribute specifies the namespace to import, and the Alias attribute provides a shorthand for referencing the imported namespace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n <Schema xmlns=\"https://schemas.microsoft.com/ado/2009/11/edm\"\n           xmlns:cg=\"https://schemas.microsoft.com/ado/2009/11/codegeneration\"\n           xmlns:store=\"https://schemas.microsoft.com/ado/2009/11/edm/EntityStoreSchemaGenerator\"\n           Namespace=\"BooksModel\" Alias=\"Self\">\n\n     <Using Namespace=\"BooksModel.Extended\" Alias=\"BMExt\" />\n\n <EntityContainer Name=\"BooksContainer\" >\n       <EntitySet Name=\"Publishers\" EntityType=\"BooksModel.Publisher\" />\n     </EntityContainer>\n\n <EntityType Name=\"Publisher\">\n       <Key>\n         <PropertyRef Name=\"Id\" />\n       </Key>\n       <Property Type=\"Int32\" Name=\"Id\" Nullable=\"false\" />\n       <Property Type=\"String\" Name=\"Name\" Nullable=\"false\" />\n       <Property Type=\"BMExt.Address\" Name=\"Address\" Nullable=\"false\" />\n     </EntityType>\n\n </Schema>\n```\n\n----------------------------------------\n\nTITLE: Project Entities C#\nDESCRIPTION: This code shows how querying entity instances without projection pulls back more data than necessary. The entire Blog entity is fetched, even if only the Url property is needed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Querying entity instances pulls back more data than necessary\nvar blogs = context.Blogs.ToList();\nforeach (var blog in blogs)\n{\n    Console.WriteLine(blog.Url);\n}\n```\n\n----------------------------------------\n\nTITLE: No Tracking When Result Doesn't Contain Entity Types\nDESCRIPTION: This code demonstrates a scenario where no tracking is done because the result set does not contain any entity types.  The query returns an anonymous type containing values from the entity but not the actual entity instance itself, thus no tracking occurs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blogTitles = context.Blogs\n    .Select(blog => new { Title = blog.Title })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Sizing Open Iconic SVG Icons (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to size Open Iconic SVG icons when using the SVG sprite. It sets the width and height of the `<svg>` tag to the desired dimensions. All icons are in a square format, so width and height should be equal.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Install NuGet package using .NET Core CLI\nDESCRIPTION: Installs the Microsoft.EntityFrameworkCore.InMemory NuGet package using the .NET Core CLI. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/in-memory/index.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.InMemory\n```\n\n----------------------------------------\n\nTITLE: Coloring SVG Icons with CSS\nDESCRIPTION: This CSS snippet shows how to change the color of an icon using the `fill` property on the `<use>` tag.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Entity Set Mapping for People Entity Set in School Model (XML)\nDESCRIPTION: This XML snippet shows an example of entity set mapping for the 'People' entity set in the School model. It includes column mappings for the 'Person' entity type and mappings for the insert, update, and delete functions of the 'Person' type, which are declared in the storage model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"People\">\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"LastName\" ColumnName=\"LastName\" />\n       <ScalarProperty Name=\"FirstName\" ColumnName=\"FirstName\" />\n       <ScalarProperty Name=\"HireDate\" ColumnName=\"HireDate\" />\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ColumnName=\"EnrollmentDate\" />\n     </MappingFragment>\n </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <ModificationFunctionMapping>\n       <InsertFunction FunctionName=\"SchoolModel.Store.InsertPerson\">\n         <ScalarProperty Name=\"EnrollmentDate\"\n                         ParameterName=\"EnrollmentDate\" />\n         <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\" />\n         <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\" />\n         <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\" />\n         <ResultBinding Name=\"PersonID\" ColumnName=\"NewPersonID\" />\n       </InsertFunction>\n       <UpdateFunction FunctionName=\"SchoolModel.Store.UpdatePerson\">\n         <ScalarProperty Name=\"EnrollmentDate\"\n                         ParameterName=\"EnrollmentDate\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\"\n                         Version=\"Current\" />\n       </UpdateFunction>\n       <DeleteFunction FunctionName=\"SchoolModel.Store.DeletePerson\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\" />\n       </DeleteFunction>\n     </ModificationFunctionMapping>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Shared-Type Entity Configuration - EF Core (C#)\nDESCRIPTION: This snippet shows how to configure a property bag entity type using a `Dictionary<string, object>`. The entity type is configured as a shared-type entity type with a unique name, and the corresponding `DbSet` property is implemented using a `Set` call.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/shadow-properties.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyContext : DbContext\n{\n    public DbSet<Dictionary<string, object>> Blogs => Set<Dictionary<string, object>>(\"Blog\");\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Dictionary<string, object>>(\"Blog\", b =>\n        {\n            b.Property<int>(\"Id\");\n            b.Property<string>(\"Name\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Migration Bundle - PowerShell\nDESCRIPTION: This command generates a migration bundle using PowerShell. Bundles are single-file executables used to apply migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nBundle-Migration\n```\n\n----------------------------------------\n\nTITLE: Console Output from Entity Tracking Example\nDESCRIPTION: This code snippet shows the expected console output when the entity tracking example is executed against a database with some initial data. The output illustrates the different states of the tracked entities, including Modified, Deleted, Unchanged, and Added. It also shows the original values of modified properties and the names of the people found.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/local-data.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nAll tracked entities:\nFound entity of type Blog with state Modified\nFound entity of type Blog with state Deleted\nFound entity of type Blog with state Unchanged\nFound entity of type Author with state Unchanged\nFound entity of type Author with state Added\nFound entity of type Reader with state Modified\n\nAll modified entities:\nFound entity of type Blog with state Modified\nFound entity of type Reader with state Modified\n\nTracked blogs:\nFound Blog 1: The New ADO.NET Blog with original Name ADO.NET Blog\nFound Blog 2: The Visual Studio Blog with original Name The Visual Studio Blog\nFound Blog 3: .NET Framework Blog with original Name .NET Framework Blog\n\nPeople:\nFound Person John Doe\nFound Person Joe Bloggs\nFound Person Jane Doe\n```\n\n----------------------------------------\n\nTITLE: Remove PluralizingTableNameConvention in C#\nDESCRIPTION: This code snippet demonstrates how to remove the PluralizingTableNameConvention from the Code First conventions. This is done within the OnModelCreating method of the DbContext class using modelBuilder.Conventions.Remove<PluralizingTableNameConvention>().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/built-in.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SchoolEntities : DbContext\n{\n     . . .\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        // Configure Code First to ignore PluralizingTableName convention\n        // If you keep this convention, the generated tables  \n        // will have pluralized names.\n        modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Enum for Breed (EF Core 6)\nDESCRIPTION: This C# code defines an enum `Breed` with values `Unknown`, `Burmese`, and `Tonkinese`. This enum is used in the following examples to demonstrate value conversion of nulls in EF Core 6. No dependencies are needed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_141\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum Breed\n{\n    Unknown,\n    Burmese,\n    Tonkinese \n}\n```\n\n----------------------------------------\n\nTITLE: Discriminator Property Configuration - C#\nDESCRIPTION: This code configures the discriminator as a shadow property on the base entity. Shadow properties are not explicitly defined in the entity class. This allows you to further customize the discriminator column in TPH mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property<string>(\"Discriminator\")\n        .HasMaxLength(200);\n}\n```\n\n----------------------------------------\n\nTITLE: Using DatabaseGenerated Attribute with C#\nDESCRIPTION: This code demonstrates how to use the `DatabaseGenerated` attribute with the `Computed` enum to indicate that a property is computed by the database. Entity Framework will retrieve this value after inserting or updating the data but will not attempt to update the property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n    [DatabaseGenerated(DatabaseGeneratedOption.Computed)]\n    public DateTime DateCreated { get; set; }\n```\n\n----------------------------------------\n\nTITLE: EF.Functions.VectorDistance with all params .NET to SQL translation\nDESCRIPTION: Shows how EF.Functions.VectorDistance(vector1, vector2, bruteForce, distanceFunction) in .NET translates to VectorDistance(vector1, vector2, bruteForce, distanceFunction) in SQL when used with Entity Framework Core and Cosmos DB.  This calculates the distance between two vectors using a distance function and brute force. EF Core 9.0 or later is required and the API is experimental.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_47\n\nLANGUAGE: .NET\nCODE:\n```\nEF.Functions.VectorDistance(vector1, vector2, bruteForce, distanceFunction)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[VectorDistance(vector1, vector2, bruteForce, distanceFunction)](/azure/cosmos-db/nosql/query/vectordistance)\n```\n\n----------------------------------------\n\nTITLE: Overriding DbContext.ValidateEntity - C#\nDESCRIPTION: This code snippet demonstrates overriding the `ValidateEntity` method of the `DbContext` class to implement custom validation logic for entities before they are saved to the database. The example validates new `Post` entities to ensure that the post title is unique.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override DbEntityValidationResult ValidateEntity (\n    System.Data.Entity.Infrastructure.DbEntityEntry entityEntry,\n    IDictionary<object, object> items)\n{\n    var result = new DbEntityValidationResult(entityEntry, new List<DbValidationError>());\n\n    if (entityEntry.Entity is Post post && entityEntry.State == EntityState.Added)\n    {\n        // Check for uniqueness of post title\n        if (Posts.Where(p => p.Title == post.Title).Any())\n        {\n            result.ValidationErrors.Add(\n                    new System.Data.Entity.Validation.DbValidationError(\n                        nameof(Title),\n                        \"Post title must be unique.\"));\n        }\n    }\n\n    if (result.ValidationErrors.Count > 0)\n    {\n        return result;\n    }\n    else\n    {\n        return base.ValidateEntity(entityEntry, items);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tracked Entities Using DbSet.Local in EF Core\nDESCRIPTION: This code snippet demonstrates how to query locally tracked entities using `DbSet.Local` in Entity Framework Core. It includes added entities and excludes deleted entities, reflecting the conceptual state of the entity graph before `SaveChanges`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n        var posts = context.Posts.Include(e => e.Blog).ToList();\n\n        Console.WriteLine(\"Local view after loading posts:\");\n\n        foreach (var post in context.Posts.Local)\n        {\n            Console.WriteLine($\"  Post: {post.Title}\");\n        }\n\n        context.Remove(posts[1]);\n\n        context.Add(new Post\n        {\n            Title = \"What’s next for System.Text.Json?\",\n            Content = \".NET 5.0 was released recently and has come with many...\",\n            Blog = posts[0].Blog\n        });\n\n        Console.WriteLine(\"Local view after adding and deleting posts:\");\n\n        foreach (var post in context.Posts.Local)\n        {\n            Console.WriteLine($\"  Post: {post.Title}\");\n        }\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Entities Graph with Generated Keys - C#\nDESCRIPTION: This example shows how `DbContext.Update` handles graphs with entities having generated key values. An entity with no key value will be considered as new and added to the context in `Added` state. The others with existing keys will be marked as `Modified`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Update(\n    new Blog\n    {\n        Id = 1,\n        Name = \".NET Blog\",\n        Posts = \n        {\n            new Post\n            {\n                Id = 1,\n                Title = \"Announcing the Release of EF Core 5.0\",\n                Content = \"Announcing the release of EF Core 5.0, a full featured cross-platform...\"\n            },\n            new Post\n            {\n                Id = 2,\n                Title = \"Announcing F# 5\",\n                Content = \"F# 5 is the latest version of F#, the functional programming language...\"\n            },\n             new Post\n            {\n                Title = \"Announcing .NET 5.0\",\n                Content = \".NET 5.0 includes many enhancements, including single file a...\"\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Query without Caching - IEnumerable Contains C#\nDESCRIPTION: This code demonstrates a query that will not be cached by Entity Framework because it uses `IEnumerable<T>.Contains<T>(T value)` against an in-memory collection, which is considered volatile.  This will cause the plan compiler to process the query every time it's executed, potentially impacting performance. The example shows a large array being used with Contains.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nint[] ids = new int[10000];\n...\nusing (var context = new MyContext())\n{\n    var query = context.MyEntities\n                    .Where(entity => ids.Contains(entity.Id));\n\n    var results = query.ToList();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Document Class Definition in C#\nDESCRIPTION: This C# code snippet defines the Document class within the PlanetaryDocs.Domain namespace.  It represents a document with properties such as Id, Title, Description, AuthorAlias, Content, and ETag.  It serves as a data model for documents stored in the Azure Cosmos DB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n:::code language=\"csharp\" source=\"../../../../samples/end2end/PlanetaryDocs/PlanetaryDocs.Domain/Document.cs\":::\n```\n\n----------------------------------------\n\nTITLE: Configuring a Clustered Index in EF Core with SQL Server\nDESCRIPTION: This code snippet shows how to configure an index as clustered in Entity Framework Core using the SQL Server provider. It configures a non-key property as a clustered index and explicitly makes the primary key non-clustered. This allows for optimized data storage and retrieval based on the clustered index.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/indexes.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasKey(b => b.BlogId);\n\n    modelBuilder.Entity<Blog>()\n        .HasIndex(b => b.Url)\n        .IsClustered();\n}\n```\n\n----------------------------------------\n\nTITLE: Switching off Identity for Numeric Primary Keys - EF6 - C#\nDESCRIPTION: This snippet disables identity generation for the `DepartmentID` property using the `HasDatabaseGeneratedOption` method.  Setting the value to `DatabaseGeneratedOption.None` indicates that the database will not generate values for this column, and the application is responsible for providing the values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>().Property(t => t.DepartmentID)\n    .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);\n```\n\n----------------------------------------\n\nTITLE: Employee Entity Definition\nDESCRIPTION: This C# code defines the Employee entity with properties such as EmployeeId, Name, Position, Department, Address, and AnnualSalary.  This class serves as the model for interacting with the temporal table in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n    {\n        public Guid EmployeeId { get; set; }\n        public string Name { get; set; }\n        public string Position { get; set; }\n        public string Department { get; set; }\n        public string Address { get; set; }\n        public decimal AnnualSalary { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure Maximum Length and Unicode for Booleans - C#\nDESCRIPTION: This snippet configures the maximum length and Unicode setting for the `Booleans` property of the `PrimitiveCollections` entity.  It uses the `HasMaxLength` and `IsUnicode` methods of the `PropertyBuilder` to define these column constraints during model building. This is done via the Fluent API.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<PrimitiveCollections>()\n    .Property(e => e.Booleans)\n    .HasMaxLength(1024)\n    .IsUnicode(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring provider value comparer with case-insensitive comparer\nDESCRIPTION: This snippet shows how to configure a provider value comparer for case-insensitive string comparisons to be used with a value object as a key. It demonstrates defining a case-insensitive string comparer and applying it during the property configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar caseInsensitiveComparer = new ValueComparer<string>(\n    (l, r) => string.Equals(l, r, StringComparison.OrdinalIgnoreCase),\n    v => v.ToUpper().GetHashCode(),\n    v => v);\n\nvar blogKeyComparer = new ValueComparer<BlogKey>(\n    (l, r) => string.Equals(l.Id, r.Id, StringComparison.OrdinalIgnoreCase),\n    v => v.Id.ToUpper().GetHashCode(),\n    v => v);\n\nvar blogKeyConverter = new ValueConverter<BlogKey, string>(\n    v => v.Id,\n    v => new BlogKey(v));\n\nmodelBuilder.Entity<Blog>()\n    .Property(e => e.Id).HasConversion(\n        blogKeyConverter, blogKeyComparer, caseInsensitiveComparer);\n```\n\n----------------------------------------\n\nTITLE: Configure Entity Type with Trigger - EF Core C#\nDESCRIPTION: This code snippet shows how to configure an entity type in EF Core to indicate that the corresponding table has a trigger. This forces EF Core to revert to a less efficient technique for saving changes, which is necessary when dealing with triggers or unsupported computed columns in SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/misc.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasTrigger(\"TR_Blog_Audit\");\n```\n\n----------------------------------------\n\nTITLE: AssociationSetMapping Element Example (MSL)\nDESCRIPTION: This example demonstrates the use of the AssociationSetMapping element to map an association in the conceptual model (FK_Course_Department) to a table in the database (Course).  It specifies the mappings between the association type properties and the table columns using child EndProperty and ScalarProperty elements. The Name, TypeName, and StoreEntitySet attributes are used to define the mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n <AssociationSetMapping Name=\"FK_Course_Department\"\n                        TypeName=\"SchoolModel.FK_Course_Department\"\n                        StoreEntitySet=\"Course\">\n   <EndProperty Name=\"Department\">\n     <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n   </EndProperty>\n   <EndProperty Name=\"Course\">\n     <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n   </EndProperty>\n </AssociationSetMapping>\n```\n\n----------------------------------------\n\nTITLE: Set Navigation Property to Null in C# (.NET 4.5+)\nDESCRIPTION: This code snippet demonstrates how to set a navigation property to null in Entity Framework 5.0 (and later) based on .NET 4.5. It uses the `CurrentValue` property of the `Reference` method to directly set the relationship to null, avoiding the need to load the related end. This approach improves performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Entry(course).Reference(c => c.Department).CurrentValue = null;\n```\n\n----------------------------------------\n\nTITLE: Incorrect CompiledQuery Usage C#\nDESCRIPTION: This code snippet demonstrates the incorrect usage of CompiledQuery within a using statement, leading to recompilation on each method call. This defeats the purpose of CompiledQuery and can negatively impact performance by polluting the query plan cache.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n    // Warning: this is the wrong way of using CompiledQuery\n    using (NorthwindEntities context = new NorthwindEntities())\n    {\n        string selectedCategory = this.categoriesList.SelectedValue;\n\n        var productsForCategory = CompiledQuery.Compile<NorthwindEntities, string, IQueryable<Product>>(\n            (NorthwindEntities nwnd, string category) =>\n                nwnd.Products.Where(p => p.Category.CategoryName == category)\n        );\n\n        this.productsGrid.DataSource = productsForCategory.Invoke(context, selectedCategory).ToList();\n        this.productsGrid.DataBind();\n    }\n\n    this.productsGrid.Visible = true;\n```\n\n----------------------------------------\n\nTITLE: Inlined Uncorrelated Subquery (C#)\nDESCRIPTION: This C# code demonstrates how EF Core 9 inlines uncorrelated subqueries to reduce the number of database round trips.  In EF8, the `dotnetPosts` IQueryable would be executed as a separate query.  In EF9, it's inlined into the main query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nvar dotnetPosts = context\n    .Posts\n    .Where(p => p.Title.Contains(\".NET\"));\n\nvar results = dotnetPosts\n    .Where(p => p.Id > 2)\n    .Select(p => new { Post = p, TotalCount = dotnetPosts.Count() })\n    .Skip(2).Take(10)\n    .ToArray();\n```\n\n----------------------------------------\n\nTITLE: Querying Halflings at a Given Level - C#\nDESCRIPTION: This code snippet retrieves all halflings at a specified level in the family tree using the `GetLevel()` method on the `HierarchyId` property. It filters the `Halflings` DbSet based on the level and returns the results as a list.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nvar generation = await context.Halflings.Where(halfling => halfling.PathFromPatriarch.GetLevel() == level).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Bind Constructor to Mapped Properties\nDESCRIPTION: This example demonstrates how to define constructors in Blog and Post entities and bind them to mapped properties. EF Core will use these constructors when creating instances of the entities, populating properties through the constructor parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/constructors.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public Blog(int id, string name, string author)\n    {\n        Id = id;\n        Name = name;\n        Author = author;\n    }\n\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n    public string Author { get; set; }\n\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public Post(int id, string title, DateTime postedOn)\n    {\n        Id = id;\n        Title = title;\n        PostedOn = postedOn;\n    }\n\n    public int Id { get; set; }\n\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public DateTime PostedOn { get; set; }\n\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Database Log Formatter in C#\nDESCRIPTION: This C# code defines a custom DatabaseLogFormatter named OneLineFormatter that inherits from DatabaseLogFormatter. It overrides the LogCommand method to log a single line containing the context name and command text, and overrides the LogResult method to prevent logging of the result. The constructor initializes the base class with the DbContext and a write action.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OneLineFormatter : DatabaseLogFormatter\n{\n    public OneLineFormatter(DbContext context, Action<string> writeAction)\n        : base(context, writeAction)\n    {\n    }\n\n    public override void LogCommand<TResult>(\n        DbCommand command, DbCommandInterceptionContext<TResult> interceptionContext)\n    {\n        Write(string.Format(\n            \"Context '{0}' is executing command '{1}'{2}\",\n            Context.GetType().Name,\n            command.CommandText.Replace(Environment.NewLine, \"\"),\n            Environment.NewLine));\n    }\n\n    public override void LogResult<TResult>(\n        DbCommand command, DbCommandInterceptionContext<TResult> interceptionContext)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure List Property with Value Converter and Comparer (Older EF Core Versions)\nDESCRIPTION: This code snippet demonstrates how to configure a value converter for a `List<int>` property to map it to a JSON string in the database, along with defining a custom value comparer. The comparer ensures correct equality checks, hash code generation, and snapshotting for the list. This snippet targets older versions of EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-comparers.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nentity.Property(e => e.Numbers)\n    .HasConversion(\n        v => JsonSerializer.Serialize(v, null),\n        v => JsonSerializer.Deserialize<List<int>>(v, null),\n        new ValueComparer<List<int>>(\n            (c1, c2) => c1.SequenceEqual(c2),\n            c => c.Aggregate(0, (a, v) => HashCode.Combine(a, v)),\n            c => c.ToList()));\n\n// The following is needed for older versions of EF Core.\npublic class ValueComparer<T> : ValueComparer<T>\n{\n    public ValueComparer(\n        Func<T, T, bool> equalsExpression,\n        Func<T, int> hashCodeExpression,\n        Func<T, T> cloneExpression)\n        : base(equalsExpression, hashCodeExpression, cloneExpression) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing IValidatableObject - C#\nDESCRIPTION: This code shows how to implement the `IValidatableObject` interface in the `Blog` class to perform custom server-side validation. The `Validate` method checks if the `Title` and `BloggerName` properties are the same, and if so, returns a `ValidationResult` with an error message. This validation will be automatically triggered when SaveChanges is called.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog : IValidatableObject\n{\n    public int Id { get; set; }\n\n    [Required]\n    public string Title { get; set; }\n\n    public string BloggerName { get; set; }\n    public DateTime DateCreated { get; set; }\n    public virtual ICollection<Post> Posts { get; set; }\n\n    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)\n    {\n        if (Title == BloggerName)\n        {\n            yield return new ValidationResult(\n                \"Blog Title cannot match Blogger Name\",\n                new[] { nameof(Title), nameof(BloggerName) });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: In-Memory Object Set Implementation in C#\nDESCRIPTION: This code defines a generic in-memory implementation of the IObjectSet<T> interface called InMemoryObjectSet<T>. It uses a HashSet<T> to store entities in memory and implements the IQueryable<T> interface using AsQueryable. This class is used to hold Employee and TimeCard objects for testing purposes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class InMemoryObjectSet<T> : IObjectSet<T> where T : class\n    \tpublic InMemoryObjectSet()\n    \t\t: this(Enumerable.Empty<T>()) {\n    \t}\n    \tpublic InMemoryObjectSet(IEnumerable<T> entities) {\n    \t\t_set = new HashSet<T>();\n    \t\tforeach (var entity in entities) {\n    \t\t\t_set.Add(entity);\n    \t\t}\n    \t\t_queryableSet = _set.AsQueryable();\n    \t}\n    \tpublic void AddObject(T entity) {\n    \t\t_set.Add(entity);\n    \t}\n     \tpublic void Attach(T entity) {\n    \t\t_set.Add(entity);\n    \t}\n     \tpublic void DeleteObject(T entity) {\n    \t\t_set.Remove(entity);\n    \t}\n    \tpublic void Detach(T entity) {\n    \t\t_set.Remove(entity);\n    \t}\n    \tpublic Type ElementType {\n    \t\tget { return _queryableSet.ElementType; }\n    \t}\n    \tpublic Expression Expression {\n    \t\tget { return _queryableSet.Expression; }\n    \t}\n    \tpublic IQueryProvider Provider {\n    \t\tget { return _queryableSet.Provider; }\n    \t}\n    \tpublic IEnumerator<T> GetEnumerator() {\n    \t\treturn _set.GetEnumerator();\n    \t}\n    \tIEnumerator IEnumerable.GetEnumerator() {\n    \t\treturn GetEnumerator();\n    \t}\n\n    \treadonly HashSet<T> _set;\n    \treadonly IQueryable<T> _queryableSet;\n    }\n```\n\n----------------------------------------\n\nTITLE: C# Remove Convention\nDESCRIPTION: This C# code snippet demonstrates how to remove a built-in model building convention in EF Core 7. It overrides the `ConfigureConventions` method and removes the `ForeignKeyIndexConvention`. It requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_66\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Remove(typeof(ForeignKeyIndexConvention));\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Class Definition in C#\nDESCRIPTION: This C# snippet defines the Tag class, which is part of the metadata stored in the Azure Cosmos DB.  It includes properties like Id, Name, and DocumentSummaries for managing tag-related information and associated documents within the PlanetaryDocs application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n:::code language=\"csharp\" source=\"../../../../samples/end2end/PlanetaryDocs/PlanetaryDocs.Domain/Tag.cs\":::\n```\n\n----------------------------------------\n\nTITLE: Explicit Many-to-Many Configuration C#\nDESCRIPTION: Illustrates an explicit configuration of a many-to-many relationship between `Post` and `Tag` entities within the `OnModelCreating` method. This demonstrates how to use `HasMany` and `WithMany` to define the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a CLR Method with Custom SQL Translation (C#)\nDESCRIPTION: This C# code defines a CLR method `PercentageDifference` that will be translated into a specific SQL expression using `HasTranslation`. The method calculates the percentage difference between two integers.  The actual implementation in C# is not used; instead, EF Core uses the provided SQL translation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic double PercentageDifference(int value1, int value2)\n    => throw new NotSupportedException();\n```\n\n----------------------------------------\n\nTITLE: Registering the Custom Convention in C#\nDESCRIPTION: This code snippet demonstrates how to register the custom `AttributeBasedPropertyDiscoveryConvention` by replacing the default `PropertyDiscoveryConvention` in the `ConfigureConventions` method. It uses `Replace` method on the `ModelConfigurationBuilder.Conventions` collection, passing a factory that resolves the dependencies required for the convention's constructor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Replace<PropertyDiscoveryConvention>(\n        serviceProvider => new AttributeBasedPropertyDiscoveryConvention(\n            serviceProvider.GetRequiredService<ProviderConventionSetBuilderDependencies>()));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Table Attribute with C#\nDESCRIPTION: This code illustrates how to use the `Table` attribute to specify the name of the database table that a class maps to. In this example, the `Blog` class is mapped to the `InternalBlogs` table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n    [Table(\"InternalBlogs\")]\n    public class Blog\n```\n\n----------------------------------------\n\nTITLE: Inserting Migration History (SQL)\nDESCRIPTION: SQL command for inserting a record into the `__EFMigrationsHistory` table, indicating that a specific migration has been applied. `<full_migration_timestamp_and_name>` should be replaced with the complete migration ID (including timestamp), and `<EF_version>` with the version of Entity Framework Core being used.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO [__EFMigrationsHistory] ([MIGRATIONID], [PRODUCTVERSION])\nVALUES (N'<full_migration_timestamp_and_name>', N'<EF_version>');\n```\n\n----------------------------------------\n\nTITLE: Setting Current/Original Values From Another Object - EF6 C#\nDESCRIPTION: This snippet shows how to update current and original values of a tracked entity by copying values from another object, including a DTO. The `SetValues` method is used to copy property values. It includes a `BlogDto` class definition. A `BloggingContext` and a `Blog` entity are assumed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n    var coolBlog = new Blog { Id = 1, Name = \"My Cool Blog\" };\n    var boringBlog = new BlogDto { Id = 1, Name = \"My Boring Blog\" };\n\n    // Change the current and original values by copying the values from other objects\n    var entry = context.Entry(blog);\n    entry.CurrentValues.SetValues(coolBlog);\n    entry.OriginalValues.SetValues(boringBlog);\n\n    // Print out current and original values\n    Console.WriteLine(\"Current values:\");\n    PrintValues(entry.CurrentValues);\n\n    Console.WriteLine(\"\\nOriginal values:\");\n    PrintValues(entry.OriginalValues);\n}\n\npublic class BlogDto\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by EF9 with Projection Pruning\nDESCRIPTION: This SQL code shows the optimized SQL generated by EF9, with the unnecessary projection removed.  Instead of projecting the Order Id, it projects a constant value (1). This reduces the amount of data processed by the database, improving performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\nFROM (\n    SELECT TOP(@__p_0) 1 AS empty\n    FROM [Orders] AS [o]\n    WHERE [o].[Amount] > 10\n) AS [s]\n```\n\n----------------------------------------\n\nTITLE: Ignore OrderBase Entity\nDESCRIPTION: This snippet demonstrates how to ignore the OrderBase entity and map the ShippingAddress property to separate columns for BulkOrder and Order entities before EF Core 3.0 behavior changed. It involves configuring the model builder to ignore OrderBase and defining entities for BulkOrder and Order.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class EntityBase\n{\n    public int Id { get; set; }\n}\n\npublic abstract class OrderBase : EntityBase\n{\n    public int ShippingAddress { get; set; }\n}\n\npublic class BulkOrder : OrderBase\n{\n}\n\npublic class Order : OrderBase\n{\n}\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Ignore<OrderBase>();\n    modelBuilder.Entity<EntityBase>();\n    modelBuilder.Entity<BulkOrder>();\n    modelBuilder.Entity<Order>();\n}\n```\n\n----------------------------------------\n\nTITLE: ReaderExecutingAsync Interceptor Method in EF Core\nDESCRIPTION: This C# code overrides the `ReaderExecutingAsync` method of an EF Core interceptor to implement a basic caching mechanism.  It checks if the command text starts with the tag \"-- Get_Daily_Message\" and, if so, checks if a cached result exists and is still valid. If a valid cached result is found, it suppresses the database call and provides a `CachedDailyMessageDataReader` containing the cached data. The method also manipulates the command text for logging purposes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic override ValueTask<InterceptionResult<DbDataReader>> ReaderExecutingAsync(\n        DbCommand command,\n        CommandEventData eventData,\n        InterceptionResult<DbDataReader> result,\n        CancellationToken cancellationToken = default)\n    {\n        if (command.CommandText.StartsWith(\"-- Get_Daily_Message\", StringComparison.Ordinal))\n        {\n            lock (_lock)\n            {\n                if (_message != null\n                    && DateTime.UtcNow < _queriedAt + new TimeSpan(0, 0, 10))\n                {\n                    command.CommandText = \"-- Get_Daily_Message: Skipping DB call; using cache.\";\n                    result = InterceptionResult<DbDataReader>.SuppressWithResult(new CachedDailyMessageDataReader(_id, _message));\n                }\n            }\n        }\n\n        return new ValueTask<InterceptionResult<DbDataReader>>(result);\n    }\n```\n\n----------------------------------------\n\nTITLE: Severing a Relationship (Setting Navigation to Null) in C#\nDESCRIPTION: This C# snippet demonstrates severing the relationship between posts and their blog by setting the `Post.Blog` navigation property to null for each post. This triggers orphan deletion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blog = context.Blogs.OrderBy(e => e.Name).Include(e => e.Posts).First();\n\nforeach (var post in blog.Posts)\n{\n    post.Blog = null;\n}\n            \ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Entities Using DbSet.Local in EF Core\nDESCRIPTION: This code snippet shows how to add and remove entities from the local view using `DbSet.Local` in Entity Framework Core. Adding an entity to `DbSet.Local` causes it to be tracked as `Added` (or `Unchanged` if it has a generated key), and removing it marks it as `Deleted`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nusing var context = new BlogsContext();\n\n        var posts = context.Posts.Include(e => e.Blog).ToList();\n\n        Console.WriteLine(\"Local view after loading posts:\");\n\n        foreach (var post in context.Posts.Local)\n        {\n            Console.WriteLine($\"  Post: {post.Title}\");\n        }\n\n        context.Posts.Local.Remove(posts[1]);\n\n        context.Posts.Local.Add(new Post\n        {\n            Title = \"What’s next for System.Text.Json?\",\n            Content = \".NET 5.0 was released recently and has come with many...\",\n            Blog = posts[0].Blog\n        });\n\n        Console.WriteLine(\"Local view after adding and deleting posts:\");\n\n        foreach (var post in context.Posts.Local)\n        {\n            Console.WriteLine($\"  Post: {post.Title}\");\n        }\n```\n\n----------------------------------------\n\nTITLE: Display migrate.exe help options\nDESCRIPTION: This command displays the help page associated with the migrate.exe utility.  EntityFramework.dll must be in the same location as migrate.exe for this to work.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/migrate-exe.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nMigrate.exe /?\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual/Autoscale Throughput in Cosmos DB\nDESCRIPTION: Shows how to configure manual or auto-scale throughput for an Azure Cosmos DB model using EF Core 6.0. These values provision throughput on the database. Requires the `modelBuilder` instance from the `OnModelCreating` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.HasManualThroughput(2000);\nmodelBuilder.HasAutoscaleThroughput(6000);\n```\n\n----------------------------------------\n\nTITLE: Negated Nullable Comparison Projection - C#\nDESCRIPTION: This C# code snippet demonstrates a query with a negated nullable comparison in a projection. EF Core 9 ensures that the resulting SQL correctly handles null values in the projection, maintaining consistency with C# semantics.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nvar negatedNullableComparisonProjection = await context.Entities.Select(x => new\n{\n    x.NullableIntOne,\n    x.NullableIntTwo,\n    Operation = !(x.NullableIntOne > x.NullableIntTwo)\n}).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Entities for User-Defined Function Mapping in EF Core (C#)\nDESCRIPTION: This C# code snippet configures the relationships between the Blog, Post, and Comment entities using Entity Framework Core's fluent API. It defines the one-to-many relationship between Blog and Post, and Post and Comment. This configuration is necessary for EF Core to understand the relationships and generate the database schema correctly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>(b =>\n    {\n        b.HasMany(p => p.Posts).WithOne(b => b.Blog).HasForeignKey(b => b.BlogId);\n        b.Property(b => b.Url).IsRequired();\n    });\n\n    modelBuilder.Entity<Post>(b =>\n    {\n        b.HasMany(p => p.Comments).WithOne(p => p.Post).HasForeignKey(c => c.PostId);\n        b.Property(b => b.Title).IsRequired();\n        b.Property(b => b.Content).IsRequired();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Composing over CompiledQuery (Incorrect) C#\nDESCRIPTION: This code demonstrates composing filters over a CompiledQuery's results. While technically possible, it causes a new IQueryable to be generated and recompiled, negating the benefits of CompiledQuery. Each filter application results in a new query plan being compiled.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n    using (NorthwindEntities context = new NorthwindEntities())\n    {\n        IQueryable<Customer> myCustomers = context.InvokeCustomersForEmployee();\n\n        if (this.orderCountFilterList.SelectedItem.Value != defaultFilterText)\n        {\n            int orderCount = int.Parse(orderCountFilterList.SelectedValue);\n            myCustomers = myCustomers.Where(c => c.Orders.Count > orderCount);\n        }\n\n        if (this.countryFilterList.SelectedItem.Value != defaultFilterText)\n        {\n            myCustomers = myCustomers.Where(c => c.Address.Country == countryFilterList.SelectedValue);\n        }\n\n        this.customersGrid.DataSource = myCustomers;\n        this.customersGrid.DataBind();\n    }\n```\n\n----------------------------------------\n\nTITLE: Model Definition with Relationships (C#)\nDESCRIPTION: This C# snippet defines the model classes `Blog`, `Post`, and `Person` with relationships between them. These relationships are required and therefore cascade delete is configured by convention, creating a cascade delete cycle. This will cause issues when creating the database on SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n\n        public IList<Post> Posts { get; } = new List<Post>();\n        \n        public int OwnerId { get; set; }\n        public Person Owner { get; set; }\n    }\n\n    public class Post\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n        public int BlogId { get; set; }\n        public Blog Blog { get; set; }\n        \n        public int AuthorId { get; set; }\n        public Person Author { get; set; }\n    }\n\n    public class Person\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        \n        public IList<Post> Posts { get; } = new List<Post>();\n\n        public Blog OwnedBlog { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: ReturnType in FunctionImport with EntitySet (CSDL, XML)\nDESCRIPTION: This code snippet demonstrates a FunctionImport element with two ReturnType elements, each specifying a different return type and associated EntitySet. This indicates that the function returns two result sets: a collection of Books and a collection of Publishers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n <FunctionImport Name=\"GetBooksAndPublishers\">\n   <ReturnType Type==\"Collection(BooksModel.Book )\" EntitySet=”Books”>\n   <ReturnType Type==\"Collection(BooksModel.Publisher)\" EntitySet=”Publishers”>\n </FunctionImport>\n```\n\n----------------------------------------\n\nTITLE: Defining Entities for User-Defined Function Mapping in EF Core (C#)\nDESCRIPTION: This C# code snippet defines the entities Blog, Post, and Comment, which are used to demonstrate user-defined function mapping in EF Core. Blog has many Posts, and each Post can have many Comments. These entities are used in the examples throughout the document.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n    public int Rating { get; set; }\n\n    public List<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int PostId { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public int Rating { get; set; }\n\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n\n    public List<Comment> Comments { get; set; }\n}\n\npublic class Comment\n{\n    public int CommentId { get; set; }\n    public string Text { get; set; }\n    public int Likes { get; set; }\n\n    public int PostId { get; set; }\n    public Post Post { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Pending Model Changes using .NET Core CLI\nDESCRIPTION: This command checks if there have been any model changes made since the last migration using the .NET Core CLI. It is available in EF Core 8.0 and later.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_11\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations has-pending-model-changes\n```\n\n----------------------------------------\n\nTITLE: Installing EntityFramework NuGet Package using Package Manager Console\nDESCRIPTION: This command installs or upgrades the EntityFramework NuGet package to version 6. It retrieves the package from the NuGet repository and adds it to the project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/upgrading-to-ef6.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package EntityFramework\n```\n\n----------------------------------------\n\nTITLE: Mapping Update Function for Person Entity in Entity Framework (XML)\nDESCRIPTION: This XML snippet demonstrates how to map the UpdateFunction element for the Person entity type to the UpdatePerson stored procedure in Entity Framework. It specifies the scalar properties and their corresponding parameter names in the stored procedure, along with the Version attribute to handle concurrency. The PersonID, EnrollmentDate, HireDate, FirstName, and LastName are mapped to parameters of the UpdatePerson stored procedure.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n   <ModificationFunctionMapping>\n     <InsertFunction FunctionName=\"SchoolModel.Store.InsertPerson\">\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ParameterName=\"EnrollmentDate\" />\n       <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\" />\n       <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\" />\n       <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\" />\n       <ResultBinding Name=\"PersonID\" ColumnName=\"NewPersonID\" />\n     </InsertFunction>\n     <UpdateFunction FunctionName=\"SchoolModel.Store.UpdatePerson\">\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ParameterName=\"EnrollmentDate\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\"\n                       Version=\"Current\" />\n     </UpdateFunction>\n     <DeleteFunction FunctionName=\"SchoolModel.Store.DeletePerson\">\n       <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\" />\n     </DeleteFunction>\n   </ModificationFunctionMapping>\n </EntityTypeMapping>\n```\n\n----------------------------------------\n\nTITLE: Mapping Delete Function to Stored Procedure with DeleteFunction (XML)\nDESCRIPTION: This XML snippet demonstrates how to use the DeleteFunction element within an AssociationSetMapping to map the delete function of a conceptual model association (CourseInstructor) to a stored procedure (DeleteCourseInstructor) in the storage model.  It specifies the FunctionName attribute and uses EndProperty elements to define parameter mappings for CourseID and PersonID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<AssociationSetMapping Name=\"CourseInstructor\"\n                        TypeName=\"SchoolModel.CourseInstructor\"\n                        StoreEntitySet=\"CourseInstructor\">\n   <EndProperty Name=\"Person\">\n     <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n   </EndProperty>\n   <EndProperty Name=\"Course\">\n     <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n   </EndProperty>\n   <ModificationFunctionMapping>\n     <InsertFunction FunctionName=\"SchoolModel.Store.InsertCourseInstructor\" >   \n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </InsertFunction>\n     <DeleteFunction FunctionName=\"SchoolModel.Store.DeleteCourseInstructor\">\n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </DeleteFunction>\n   </ModificationFunctionMapping>\n </AssociationSetMapping>\n```\n\n----------------------------------------\n\nTITLE: SQL Server Table with Sparse Column\nDESCRIPTION: Shows the SQL generated when using .IsSparse().  This results in a SPARSE column modifier being added to the column definition. Requires an EF Core migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_131\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [ForumUser] (\n    [Id] int NOT NULL IDENTITY,\n    [Username] nvarchar(max) NULL,\n    [Discriminator] nvarchar(max) NOT NULL,\n    [ForumName] nvarchar(max) SPARSE NULL,\n    CONSTRAINT [PK_ForumUser] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Initializing NetTopologySuite with SQL Server in DbContext\nDESCRIPTION: This code snippet shows how to enable mapping to spatial types using NetTopologySuite (NTS) in an EF Core DbContext options builder for SQL Server. It uses the `UseNetTopologySuite` method during DbContext configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/spatial.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\noptionsBuilder.UseSqlServer(\n    \"Data Source=(localdb)\\MSSQLLocalDB; Initial Catalog=WideWorldImporters\",\n    x => x.UseNetTopologySuite());\n```\n\n----------------------------------------\n\nTITLE: Accessing All Navigations - C#\nDESCRIPTION: This code snippet demonstrates how to access all navigations using the `Navigation` method, which returns a non-generic `NavigationEntry`. This allows working with both reference and collection navigations in a generic way.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nNavigationEntry navigationEntry = context.Entry(blog).Navigation(\"Posts\");\n```\n\n----------------------------------------\n\nTITLE: Naming an Index - Data Annotations - C#\nDESCRIPTION: This code snippet shows how to specify the database name of an index using Data Annotations in EF Core. By default, indexes are named following the `IX_<type name>_<property name>` convention. You can override this default name using the `[Index]` attribute.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[Index(nameof(Name), Name = \"IX_Names\")]\npublic class Customer\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: InverseProperty Attribute on Principal Navigation in EF Core\nDESCRIPTION: This snippet uses the `[InverseProperty]` attribute on the `Posts` navigation property in the `Blog` class to specify that it is the inverse of the `Blog` navigation property in the `Post` class. This is needed to resolve ambiguity when there are multiple relationships between two entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/mapping-attributes.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n\n    [InverseProperty(\"Blog\")]\n    public List<Post> Posts { get; } = new();\n\n    public int FeaturedPostId { get; set; }\n    public Post FeaturedPost { get; set; }\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public int BlogId { get; set; }\n\n    public Blog Blog { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy Query with Include and OrderBy in EF Core 6 (C#)\nDESCRIPTION: This C# code shows grouping `People` entities by `FirstName` after including the `Shoes` collection, ordering first by `FirstName` and then by `LastName`. It selects the `FirstName` as the key and converts the group to a list of `People`.  It expects a `Person` entity with properties like `FirstName`, `LastName` and a collection navigation property `Shoes`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nvar grouping = context.People\n    .Include(e => e.Shoes)\n    .OrderBy(e => e.FirstName)\n    .ThenBy(e => e.LastName)\n    .GroupBy(e => e.FirstName)\n    .Select(g => new { Name = g.Key, People = g.ToList()})\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Model-Level Query Filters in EF Core 2.0 (C#)\nDESCRIPTION: This example demonstrates how to define model-level query filters in EF Core 2.0 to automatically apply predicates to LINQ queries. The code defines a filter on the `Post` entity to implement multi-tenancy (filtering by `TenantId`) and soft-delete (excluding `IsDeleted` posts). The filter uses the `TenantId` from the `DbContext` instance to ensure the correct context is used during query execution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n\n    public int TenantId { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Post>().HasQueryFilter(\n            p => !p.IsDeleted\n            && p.TenantId == this.TenantId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType with Annotation Attributes and Element (SSDL)\nDESCRIPTION: This XML snippet defines an EntityType element named 'Orders' with a custom namespace 'c'. It demonstrates adding a custom attribute 'CustomAttribute' to the 'OrderId' property and a custom element 'CustomElement' to the EntityType to include additional metadata. The annotation attribute 'c:CustomAttribute' is applied to the OrderId property. The CustomElement contains 'Custom data here'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Orders\" xmlns:c=\"http://CustomNamespace\">\n   <Key>\n     <PropertyRef Name=\"OrderId\" />\n   </Key>\n   <Property Name=\"OrderId\" Type=\"int\" Nullable=\"false\"\n             c:CustomAttribute=\"someValue\"/>\n   <Property Name=\"ProductId\" Type=\"int\" Nullable=\"false\" />\n   <Property Name=\"Quantity\" Type=\"int\" Nullable=\"false\" />\n   <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n   <c:CustomElement>\n     Custom data here.\n   </c:CustomElement>\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Helper Methods for Metadata Search and Assignment - C#\nDESCRIPTION: This code snippet provides helper methods within the DbContext to search for and assign metadata items using a string-based key and specifying the type as the partition key. This enables a generic strategy to find records. These methods are used to retrieve `Metadata` and `MetadataSummary` entities by key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<T> FindMetadataAsync<T>(string key)\n{\n    ArgumentNullException.ThrowIfNull(key);\n\n    return await Metadata.OfType<T>().FirstOrDefaultAsync(m => m.Key == key);\n}\n\npublic async Task<T> AssignMetadataAsync<T>(string key, Func<T> factory)\n    where T : Metadata\n{\n    ArgumentNullException.ThrowIfNull(key);\n    ArgumentNullException.ThrowIfNull(factory);\n\n    var item = await FindMetadataAsync<T>(key);\n    if (item != null)\n    {\n        return item;\n    }\n\n    item = factory();\n    Metadata.Add(item);\n    item.Key = key;\n\n    return item;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Contract Interface in C#\nDESCRIPTION: This C# code defines the service contract interface `IService1` for the WCF service. It specifies the operations that the service will expose, including `GetBlogs` to retrieve a list of blogs and `UpdateBlog` to update a blog. The `ServiceContract` and `OperationContract` attributes are used to define the service and its operations, respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/disconnected-entities/self-tracking-entities/walkthrough.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    using System.Collections.Generic;\n    using System.ServiceModel;\n\n    namespace STESample.Service\n    {\n        [ServiceContract]\n        public interface IService1\n        {\n            [OperationContract]\n            List<Blog> GetBlogs();\n\n            [OperationContract]\n            void UpdateBlog(Blog blog);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: SQL Interceptor Example for Blog Query\nDESCRIPTION: This SQL code snippet shows an example of the SQL that might be embedded in an interceptor generated by EF for a pre-compiled query. This SQL selects the Id and Name from the Blogs table, filtering by the Name column to match the value 'foo'.  This is specific to SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nvar relationalCommandTemplate = ((IRelationalCommandTemplate)(new RelationalCommand(materializerLiftableConstantContext.CommandBuilderDependencies, \"SELECT [b].[Id], [b].[Name]\\nFROM [Blogs] AS [b]\\nWHERE [b].[Name] = N'foo'\", new IRelationalParameter[] { })));\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Splitting in EF Core 2.0 (C#)\nDESCRIPTION: This code demonstrates how to configure table splitting in EF Core 2.0, mapping two entity types to the same table by establishing an identifying relationship using foreign key properties as the primary key.  It configures Product and ProductDetails entities to share the 'Products' table, linking them via a one-to-one relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Product>()\n    .HasOne(e => e.Details).WithOne(e => e.Product)\n    .HasForeignKey<ProductDetails>(e => e.Id);\nmodelBuilder.Entity<Product>().ToTable(\"Products\");\nmodelBuilder.Entity<ProductDetails>().ToTable(\"Products\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Period Columns After Tracking Query\nDESCRIPTION: This C# code demonstrates how to access the period columns ('ValidFrom' and 'ValidTo') of a temporal table's current data after performing a tracking query. It retrieves all employees, then accesses the shadow properties for each employee to retrieve the period column values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar employees = context.Employees.ToList();\nforeach (var employee in employees)\n{\n    var employeeEntry = context.Entry(employee);\n    var validFrom = employeeEntry.Property<DateTime>(\"ValidFrom\").CurrentValue;\n    var validTo = employeeEntry.Property<DateTime>(\"ValidTo\").CurrentValue;\n\n    Console.WriteLine($\"  Employee {employee.Name} valid from {validFrom} to {validTo}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Partition Key Specification in EF Core\nDESCRIPTION: This snippet demonstrates how to explicitly specify partition keys using the WithPartitionKey operator in EF Core. This can be useful for making partition key usage more explicit or for ensuring partition key usage in older versions of EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar sessions = await context.Sessions\n    .WithPartitionKey(tenantId, userId)\n    .Where(e => e.SessionId > 0 && e.Username.Contains(\"a\"))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Getting CosmosClient from DbContext in C#\nDESCRIPTION: This code shows how to retrieve the underlying `CosmosClient` instance from an EF Core `DbContext`. This allows direct interaction with the Cosmos DB SDK for more advanced operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/unstructured-data.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[\n        [Fact]\n        public async Task CosmosClient()\n        {\n            await using var context = new OrdersContext();\n            var cosmosClient = context.Database.GetCosmosClient();\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Properties with Facets in XML\nDESCRIPTION: This XML snippet defines an `EntityType` named \"Product\" with properties `ProductId`, `ProductName`, and `Location`. It shows how to use attributes like `Type`, `Name`, `Nullable`, and `MaxLength` to specify facets for each property. The `StoreGeneratedPattern` facet, applied to `ProductId`, is defined using the `a` namespace for XML annotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_46\n\nLANGUAGE: XML\nCODE:\n```\n <EntityType Name=\"Product\">\n   <Key>\n     <PropertyRef Name=\"ProductId\" />\n   </Key>\n   <Property Type=\"Int32\"\n             Name=\"ProductId\" Nullable=\"false\"\n             a:StoreGeneratedPattern=\"Identity\"\n    xmlns:a=\"https://schemas.microsoft.com/ado/2009/02/edm/annotation\" />\n   <Property Type=\"String\"\n             Name=\"ProductName\"\n             Nullable=\"false\"\n             MaxLength=\"50\" />\n   <Property Type=\"String\"\n             Name=\"Location\"\n             Nullable=\"true\"\n             MaxLength=\"25\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Query with Non-Mapped Object Property - No Cache C#\nDESCRIPTION: This code demonstrates a query that will not be cached because it uses the property of a non-mapped object as a parameter. This forces the query to be recompiled every time it's executed. Replacing the object property with a local variable will allow the query to be cached.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new MyContext())\n{\n    var myObject = new NonMappedType();\n\n    var query = from entity in context.MyEntities\n                where entity.Name.StartsWith(myObject.MyProperty)\n                select entity;\n\n   var results = query.ToList();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: stringValue.StartsWith .NET to SQL translation\nDESCRIPTION: Shows how stringValue.StartsWith(value) in .NET translates to STARTSWITH(@stringValue, @value) in SQL in the Entity Framework Core and Cosmos DB setting. It checks if a string begins with a particular substring.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_32\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.StartsWith(value)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[STARTSWITH(@stringValue, @value)](/azure/cosmos-db/nosql/query/startswith)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository using Git\nDESCRIPTION: This snippet demonstrates how to clone the Planetary Docs repository from GitHub using the `git clone` command. It's a necessary first step to get the source code locally for building and running the application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dotnet/EntityFramework.Docs\n```\n\n----------------------------------------\n\nTITLE: Complex Policy Value Calculation with DB and Email in C#\nDESCRIPTION: This C# code defines a complex method `ComputePolicyValue` that calculates an insurance policy value, interacts with a database, and potentially sends an email. Testing this method requires setting up a database and SMTP server, making it difficult to isolate the calculation logic for testing purposes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    public int ComputePolicyValue(InsurancePolicy policy) {\n    \t using (var connection = new SqlConnection(\"dbConnection\"))\n    \t using (var command = new SqlCommand(query, connection)) {\n\n    \t\t // business calculations omitted ...\n\n    \t\t if (totalValue > notificationThreshold) {\n    \t\t\t var message = new MailMessage();\n    \t\t\t message.Subject = \"Warning!\";\n    \t\t\t var client = new SmtpClient();\n    \t\t\t client.Send(message);\n    \t\t }\n    \t }\n    \t return totalValue;\n    }\n```\n\n----------------------------------------\n\nTITLE: Queryable Methods - C#\nDESCRIPTION: This code snippet shows two queryable methods, `GetNearestPeople` and `Limit`, that add query tags using the `TagWith` method. These are extension methods on `IQueryable<Person>` which allow chaining multiple tags.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tags.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IQueryable<Person> GetNearestPeople(this IQueryable<Person> source)\n{\n    return source.TagWith(\"GetNearestPeople\");\n}\n\npublic static IQueryable<Person> Limit(this IQueryable<Person> source)\n{\n    return source.TagWith(\"Limit\");\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HierarchyId SQL\nDESCRIPTION: This SQL code snippet demonstrates how the HierarchyId is updated in the database using the UPDATE statement. It shows the parameters passed to the database, including the new HierarchyId value and the Id of the Halfling being updated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_83\n\nLANGUAGE: sql\nCODE:\n```\nSET NOCOUNT ON;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p0\nOUTPUT 1\nWHERE [Id] = @p1;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p2\nOUTPUT 1\nWHERE [Id] = @p3;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p4\nOUTPUT 1\nWHERE [Id] = @p5;\n```\n\n----------------------------------------\n\nTITLE: Adding Shadow Property for Concurrency Token (C#)\nDESCRIPTION: This code snippet configures a shadow property named \"Version\" for the `OrderDetails` entity, marking it as a row version and mapping it to a column named \"Version\" in the database. This is a mitigation strategy for scenarios where `OrderDetails` shares a table with `Order` (which has the Version property) and needs to participate in concurrency checks.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<OrderDetails>()\n        .Property<byte[]>(\"Version\").IsRowVersion().HasColumnName(\"Version\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Post class in C#\nDESCRIPTION: This C# code defines a `Post` class with properties `Title`, `Content`, `PublishedOn`, and `Archived`. It represents a post entity in the application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public DateTime PublishedOn { get; set; }\n    public bool Archived { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Sensitive Data Logging\nDESCRIPTION: This code snippet demonstrates how to enable sensitive data logging in EF Core. By calling EnableSensitiveDataLogging on the DbContextOptionsBuilder, EF Core will include the values of data in exception messages, which can be helpful for debugging.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/extensions-logging.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.EnableSensitiveDataLogging();\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key with String - EF Core\nDESCRIPTION: This code snippet shows how to configure a foreign key by specifying the property name as a string within the `OnModelCreating` method in Entity Framework Core. It defines a one-to-many relationship between `Blog` and `Post` entities using `ContainingBlogId` as the foreign key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasForeignKey(\"ContainingBlogId\");\n```\n\n----------------------------------------\n\nTITLE: Using Coordinate Projection to Calculate Distance Between Cities\nDESCRIPTION: This code snippet demonstrates how to calculate the distance between two cities after projecting their coordinates using the `ProjectTo` extension method defined in `GeometryExtensions.cs`.  This projection ensures accurate distance calculations by accounting for the Earth's curvature.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/spatial.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing NetTopologySuite.Geometries;\nusing Spatial.Projections;\nusing System;\n\nnamespace Spatial.Projections\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var seattle = new Point(-122.3331, 47.6097) { SRID = 4326 };\n            var redmond = new Point(-122.1215, 47.6730) { SRID = 4326 };\n\n            var distance = seattle.ProjectTo(2855).Distance(redmond.ProjectTo(2855));\n\n            Console.WriteLine($\"Distance between Seattle and Redmond: {distance} meters\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: IsUnicode Attribute Definition - C#\nDESCRIPTION: Defines a custom attribute called IsUnicode with a Unicode property. This allows setting whether a string property should be Unicode or not directly within the attribute.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]\ninternal class IsUnicode : Attribute\n{\n    public bool Unicode { get; set; }\n\n    public IsUnicode(bool isUnicode)\n    {\n        Unicode = isUnicode;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Find All Ancestors Using HierarchyId\nDESCRIPTION: This SQL query implements the `FindAllAncestors` function.  It filters the `Halflings` table to find ancestors such that the given halfling's `PathFromPatriarch` is a descendant of the candidate ancestor's `PathFromPatriarch`. It excludes the halfling itself from the result and orders by level descending.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE (\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0 AND [h].[Id] <> [h0].[Id]).IsDescendantOf([h].[PathFromPatriarch]) = CAST(1 AS bit)\nORDER BY [h].[PathFromPatriarch].GetLevel() DESC\n```\n\n----------------------------------------\n\nTITLE: Use Convention on DbContext by Overriding ConfigureConventions\nDESCRIPTION: This snippet demonstrates how to apply the convention defined in the previous snippet to your `DbContext` by overriding the `ConfigureConventions` method. This effectively calls `HasTrigger` on all model's tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Main](../../../../samples/core/SqlServer/Misc/TriggersContext.cs?name=ConfigureConventions)]\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionImport Parameter in XML\nDESCRIPTION: This XML snippet shows how to define a FunctionImport element with a Parameter child element. The function accepts one input parameter named StudentID of type Int32 and returns a collection of StudentGrade entity types from the SchoolModel.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n <FunctionImport Name=\"GetStudentGrades\"\n                 EntitySet=\"StudentGrade\"\n                 ReturnType=\"Collection(SchoolModel.StudentGrade)\">\n        <Parameter Name=\"StudentID\" Mode=\"In\" Type=\"Int32\" />\n </FunctionImport>\n```\n\n----------------------------------------\n\nTITLE: Adding a New Migration with EF Core\nDESCRIPTION: This command adds a new migration to the EF Core project.  It analyzes the changes made to the EF Core model and generates the necessary code to update the database schema accordingly. It requires the EF Core tools to be installed and configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_13\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add SecondMigration\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Database Log Formatter in C#\nDESCRIPTION: This C# code demonstrates how to configure a custom DatabaseLogFormatter (OneLineFormatter) using DbConfiguration. A class MyDbConfiguration is created, inheriting from DbConfiguration. In its constructor, SetDatabaseLogFormatter is called to register the OneLineFormatter, providing a lambda expression to create instances of the formatter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDbConfiguration : DbConfiguration\n{\n    public MyDbConfiguration()\n    {\n        SetDatabaseLogFormatter(\n            (context, writeAction) => new OneLineFormatter(context, writeAction));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Entity is New (General)\nDESCRIPTION: This snippet shows a more general way to check if an entity is new using EF Core's `Context.Entry` method.  It retrieves the current value of the primary key property for any entity type. It requires access to the `DbContext` instance (`context`) and an entity instance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool IsItNewGeneral(DbContext context, object entity)\n{\n    var entry = context.Entry(entity);\n    if (entry.IsKeySet)\n    {\n        return false;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Map EntityType Insert Function (MSL)\nDESCRIPTION: This XML code snippet demonstrates how to map the insert function of the 'Person' entity type to the 'InsertPerson' stored procedure using the InsertFunction element within the ModificationFunctionMapping element. It specifies scalar property mappings for 'EnrollmentDate', 'HireDate', 'FirstName', and 'LastName', and a result binding for 'PersonID'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n   <ModificationFunctionMapping>\n     <InsertFunction FunctionName=\"SchoolModel.Store.InsertPerson\">\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ParameterName=\"EnrollmentDate\" />\n       <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\" />\n       <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\" />\n       <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\" />\n       <ResultBinding Name=\"PersonID\" ColumnName=\"NewPersonID\" />\n     </InsertFunction>\n     <UpdateFunction FunctionName=\"SchoolModel.Store.UpdatePerson\">\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ParameterName=\"EnrollmentDate\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\"\n                       Version=\"Current\" />\n     </UpdateFunction>\n     <DeleteFunction FunctionName=\"SchoolModel.Store.DeletePerson\">\n       <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\" />\n     </DeleteFunction>\n   </ModificationFunctionMapping>\n </EntityTypeMapping>\n```\n\n----------------------------------------\n\nTITLE: Add EntityType to SSDL - XML\nDESCRIPTION: This snippet shows how to add an EntityType element to the SSDL section of an .edmx file. The EntityType defines the structure of the data returned by the DefiningQuery. The Name attribute corresponds to the EntityType attribute in the EntitySet element. Property names correspond to the columns returned by the SQL query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/defining-query.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <EntityType Name=\"GradeReport\">\n      <Key>\n        <PropertyRef Name=\"CourseID\" />\n        <PropertyRef Name=\"FirstName\" />\n        <PropertyRef Name=\"LastName\" />\n      </Key>\n      <Property Name=\"CourseID\"\n                Type=\"int\"\n                Nullable=\"false\" />\n      <Property Name=\"Grade\"\n                Type=\"decimal\"\n                Precision=\"3\"\n                Scale=\"2\" />\n      <Property Name=\"FirstName\"\n                Type=\"nvarchar\"\n                Nullable=\"false\"\n                MaxLength=\"50\" />\n      <Property Name=\"LastName\"\n                Type=\"nvarchar\"\n                Nullable=\"false\"\n                MaxLength=\"50\" />\n    </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Install SQLite Provider via .NET Core CLI\nDESCRIPTION: This command adds the Microsoft.EntityFrameworkCore.Sqlite NuGet package to your project using the .NET Core CLI. This package is required to use SQLite with Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/index.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.Sqlite\n```\n\n----------------------------------------\n\nTITLE: Table Mapped Aggregate Configuration C#\nDESCRIPTION: Configures the Author entity to own a ContactDetails aggregate and an Address aggregate within ContactDetails, mapping each to its own table (Contacts and Addresses respectively).  Requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Author>().OwnsOne(\n        author => author.Contact, ownedNavigationBuilder =>\n        {\n            ownedNavigationBuilder.ToTable(\"Contacts\");\n            ownedNavigationBuilder.OwnsOne(contactDetails => contactDetails.Address, ownedOwnedNavigationBuilder =>\n            {\n                ownedOwnedNavigationBuilder.ToTable(\"Addresses\");\n            });\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic SQL - Unsafe example - C#\nDESCRIPTION: Illustrates an attempt at dynamic SQL that is unsafe.  Databases do not allow parameterizing column names (or any other part of the schema).  This example is provided to show an example of code that does not work.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar propertyName = \"User\";\nvar propertyValue = \"johndoe\";\n\nvar blogs = await context.Blogs\n    .FromSql($\"SELECT * FROM [Blogs] WHERE {propertyName} = {propertyValue}\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Mapping AssociationEnd to Stored Procedure Parameter\nDESCRIPTION: This snippet demonstrates how to use the AssociationEnd element in MSL to map a parameter of a stored procedure to an association property. The example maps the DepartmentID property of the FK_Course_Department association to the DepartmentID parameter of the UpdateCourse stored procedure. This is done within the ModificationFunctionMapping element for the Course entity's update function.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"Courses\">\n   <EntityTypeMapping TypeName=\"SchoolModel.Course\">\n     <MappingFragment StoreEntitySet=\"Course\">\n       <ScalarProperty Name=\"Credits\" ColumnName=\"Credits\" />\n       <ScalarProperty Name=\"Title\" ColumnName=\"Title\" />\n       <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"SchoolModel.Course\">\n     <ModificationFunctionMapping>\n       <UpdateFunction FunctionName=\"SchoolModel.Store.UpdateCourse\">\n         <AssociationEnd AssociationSet=\"FK_Course_Department\"\n                         From=\"Course\" To=\"Department\">\n           <ScalarProperty Name=\"DepartmentID\"\n                           ParameterName=\"DepartmentID\"\n                           Version=\"Current\" />\n         </AssociationEnd>\n         <ScalarProperty Name=\"Credits\" ParameterName=\"Credits\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"Title\" ParameterName=\"Title\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"CourseID\"\n                         Version=\"Current\" />\n       </UpdateFunction>\n     </ModificationFunctionMapping>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Sum and Navigation C#\nDESCRIPTION: This C# code groups people by their first name and calculates the sum of Feet.Size for each group, then returns a list of objects with FirstName and Total size.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nvar results = context.People\n    .GroupBy(n => n.FirstName)\n    .Select(g => new \n    {\n        Feet = g.Key,\n        Total = g.Sum(n => n.Feet.Size) \n    })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with Complex Type Properties - C#\nDESCRIPTION: This C# code snippet demonstrates how to query for entities that contain properties of a complex type using Entity Framework.  It retrieves `OnsiteCourses` from the `SchoolEntities` context, orders them by the `Time` property of the `Details` complex type, and then iterates through the results to display the `Time`, `Days`, and `Location` properties of the complex type.  The code requires a `SchoolEntities` context and assumes that `OnsiteCourses` have a complex type property named `Details` with `Time`, `Days`, and `Location` properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/data-types/complex-types.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (SchoolEntities context = new SchoolEntities())\n    {\n        var courses =\n            from c in context.OnsiteCourses\n            order by c.Details.Time\n            select c;\n\n        foreach (var c in courses)\n        {\n            Console.WriteLine(\"Time: \" + c.Details.Time);\n            Console.WriteLine(\"Days: \" + c.Details.Days);\n            Console.WriteLine(\"Location: \" + c.Details.Location);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Modify Scaffolding Templates for SQL Server Date/Time Types\nDESCRIPTION: This code snippet demonstrates how to modify the scaffolding templates to revert to the previous mapping of SQL Server `date` and `time` columns to .NET `DateTime` and `TimeSpan` types instead of `DateOnly` and `TimeOnly`. It involves editing the EntityType.t4 file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n        var clrType = property.GetColumnType() switch\n        {\n            \"date\" when property.ClrType == typeof(DateOnly) => typeof(DateTime),\n            \"date\" when property.ClrType == typeof(DateOnly?) => typeof(DateTime?),\n            \"time\" when property.ClrType == typeof(TimeOnly) => typeof(TimeSpan),\n            \"time\" when property.ClrType == typeof(TimeOnly?) => typeof(TimeSpan?),\n            _ => property.ClrType\n        };\n\n        usings.AddRange(code.GetRequiredUsings(clrType));\n\n        var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !clrType.IsValueType;\n        var needsInitializer = Options.UseNullableReferenceTypes && !property.IsNullable && !clrType.IsValueType;\n#>\n    public <#= code.Reference(clrType) #><#= needsNullable ? \"?\" : \"\" #> <#= property.Name #> { get; set; }<#= needsInitializer ? \" = null!;\" : \"\" #>\n<#\n```\n\n----------------------------------------\n\nTITLE: Finding All Descendents - SQL\nDESCRIPTION: The generated SQL query finds all descendants. It filters for Halflings whose PathFromPatriarch are descendants of the Halfling with the provided name.  It returns the Id, Name, PathFromPatriarch, and YearOfBirth of the found descendants, ordered by level ascending.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_78\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch].IsDescendantOf((\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0 AND [h].[Id] <> [h0].[Id])) = CAST(1 AS bit)\nORDER BY [h].[PathFromPatriarch].GetLevel()\n```\n\n----------------------------------------\n\nTITLE: Removing an Entity from Optional Relationship\nDESCRIPTION: This C# code snippet demonstrates removing a `Post` entity from a `Blog`'s `Posts` collection when the relationship between `Blog` and `Post` is optional.  The `Post`'s `BlogId` will be set to null.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar post = dotNetBlog.Posts.Single(e => e.Title == \"Announcing F# 5\");\ndotNetBlog.Posts.Remove(post);\n```\n\n----------------------------------------\n\nTITLE: Implementing IModelCacheKeyFactory for Design-Time Caching (C#)\nDESCRIPTION: This C# code snippet demonstrates the implementation of the `Create` method in `IModelCacheKeyFactory` to handle design-time model caching separately from the runtime model. This avoids `InvalidOperationException` when using compiled models.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic object Create(DbContext context, bool designTime)\n    => context is DynamicContext dynamicContext\n        ? (context.GetType(), dynamicContext.UseIntProperty, designTime)\n        : (object)context.GetType();\n```\n\n----------------------------------------\n\nTITLE: Insert User Entities with Different IsAuthorized Values\nDESCRIPTION: Inserts three User entities, demonstrating the use of database defaults for the IsAuthorized property. It tests scenarios with explicit true and false values and leaving the value unset.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar userA = new User { Name = \"Mac\" };\nvar userB = new User { Name = \"Alice\", IsAuthorized = true };\nvar userC = new User { Name = \"Baxter\", IsAuthorized = false }; // Always deny Baxter access!\n\ncontext.AddRange(userA, userB, userC);\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Defining Association with OnDelete Cascade in XML (SSDL)\nDESCRIPTION: This XML snippet defines an Association element in SSDL representing a foreign key constraint named FK_CustomerOrders. The OnDelete element with Action=\"Cascade\" specifies that when a customer is deleted, all related orders should also be deleted. The ReferentialConstraint element maps the CustomerId property between the Customers and Orders roles.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"FK_CustomerOrders\">\n   <End Role=\"Customers\"\n        Type=\"ExampleModel.Store.Customers\" Multiplicity=\"1\">\n     <OnDelete Action=\"Cascade\" />\n   </End>\n   <End Role=\"Orders\"\n        Type=\"ExampleModel.Store.Orders\" Multiplicity=\"*\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Customers\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Principal>\n     <Dependent Role=\"Orders\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Timestamping Entity State Changes in C#\nDESCRIPTION: This C# method is an event handler that updates timestamp properties on entities that implement the `IHasTimestamps` interface. It examines the `EntityState` of the entity and sets the `Added`, `Modified`, or `Deleted` property to the current UTC time accordingly. It then writes a message to the console indicating the timestamp operation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/events.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate static void UpdateTimestamps(object sender, EntityEntryEventArgs e)\n{\n    if (e.Entry.Entity is IHasTimestamps entityWithTimestamps)\n    {\n        switch (e.Entry.State)\n        {\n            case EntityState.Deleted:\n                entityWithTimestamps.Deleted = DateTime.UtcNow;\n                Console.WriteLine($\"Stamped for delete: {e.Entry.Entity}\");\n                break;\n            case EntityState.Modified:\n                entityWithTimestamps.Modified = DateTime.UtcNow;\n                Console.WriteLine($\"Stamped for update: {e.Entry.Entity}\");\n                break;\n            case EntityState.Added:\n                entityWithTimestamps.Added = DateTime.UtcNow;\n                Console.WriteLine($\"Stamped for insert: {e.Entry.Entity}\");\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting and Retrieving Data with Enum - C#\nDESCRIPTION: This code snippet demonstrates how to persist and retrieve data using the defined enum and model within Entity Framework.  It adds a new `Department` object with the `Name` property set to `DepartmentNames.English`, saves the changes to the database, and then executes a LINQ query to retrieve the added Department. It then prints the DepartmentID and Name to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/enums.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new EnumTestContext())\n{\n    context.Departments.Add(new Department { Name = DepartmentNames.English });\n\n    context.SaveChanges();\n\n    var department = (from d in context.Departments\n                        where d.Name == DepartmentNames.English\n                        select d).FirstOrDefault();\n\n    Console.WriteLine(\n        \"DepartmentID: {0} Name: {1}\",\n        department.DepartmentID,  \n        department.Name);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Database Initialization for a Specific Context\nDESCRIPTION: This snippet demonstrates how to disable database initialization for a specific context using the disableDatabaseInitialization attribute in the context element. This is useful when you want to prevent automatic database creation or updates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<contexts>\n  <context type=\" Blogging.BlogContext, MyAssembly\" disableDatabaseInitialization=\"true\" />\n</contexts>\n```\n\n----------------------------------------\n\nTITLE: Creating Index with no filter for nullable columns - Fluent API - C#\nDESCRIPTION: This code shows how to specify no filter for nullable columns when creating a unique index using Fluent API in EF Core. By default, for unique indexes on nullable columns, EF adds an `IS NOT NULL` filter. Setting `HasFilter` to null removes this filter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasIndex(b => b.Url)\n    .IsUnique()\n    .HasFilter(null);\n```\n\n----------------------------------------\n\nTITLE: Removing the Discriminator in EF Core with Cosmos DB\nDESCRIPTION: This code removes the `$type` discriminator property from JSON documents when using EF Core with Azure Cosmos DB. This is applicable when mapping a single entity type to a container. It prevents EF from adding the discriminator when saving documents. Use the `HasNoDiscriminator()` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Order>().HasNoDiscriminator();\n```\n\n----------------------------------------\n\nTITLE: Ignoring RelationalEventId.MigrationsUserTransactionWarning (C#)\nDESCRIPTION: Shows the code to ignore the MigrationsUserTransactionWarning, typically when an explicit transaction is needed and concurrent migration applications are handled in other ways.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\noptions.ConfigureWarnings(w => w.Ignore(RelationalEventId.MigrationsUserTransactionWarning))\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenant - C#\nDESCRIPTION: Registers a scoped `ITenant` service, which wraps the tenant ID and any other tenant-related information. The code emphasizes the security aspects of obtaining the tenant ID.  Used in multi-tenant scenarios.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddScoped<ITenant>(sp =>\n{\n    // Important: Resolve the tenant ID from a safe place, such as\n    // HTTP headers, the host name, or authentication claims.\n    // NEVER resolve it from the URL or query string, as this can lead to\n    // security vulnerabilities.\n    var tenantId = Guid.NewGuid();\n    return new Tenant(tenantId);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering an Entire Code File as a Snippet\nDESCRIPTION: This code snippet shows how to render an entire code file as a snippet in DocFX-flavored Markdown. It uses the `[!code-csharp]` directive, specifying the language, a label (Main), and the path to the code file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/saving/Program.cs)]\n```\n\n----------------------------------------\n\nTITLE: Shadow Foreign Key Convention - EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how EF Core introduces a shadow property for a foreign key when no corresponding property exists in the entity class. It showcases the convention-based approach for creating a `BlogId` shadow property in the `Post` entity, given the navigation property to `Blog`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/shadow-properties.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    public List<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public Blog Blog { get; set; }\n}\n\npublic class MyContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(\"Data Source=test.db\");\n}\n```\n\n----------------------------------------\n\nTITLE: Customer and Order Model with CustomerId\nDESCRIPTION: This snippet demonstrates the Customer and Order model configuration where the CustomerId property in the Order class is used as a foreign key before EF Core 3.0. This configuration caused issues when Order was an owned type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public int CustomerId { get; set; }\n    public ICollection<Order> Orders { get; set; }\n}\n\npublic class Order\n{\n    public int Id { get; set; }\n    public int CustomerId { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: DbCommandInterceptor Example (C#)\nDESCRIPTION: This code demonstrates how to create a DbCommandInterceptor to intercept and modify database commands before they are executed.  In this case, it adds an OPTION hint to the command text to optimize the query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/index.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HintCommandInterceptor : DbCommandInterceptor\n{\n    public override InterceptionResult<DbDataReader> ReaderExecuting(\n        DbCommand command,\n        CommandEventData eventData,\n        InterceptionResult<DbDataReader> result)\n    {\n        // Manipulate the command text, etc. here...\n        command.CommandText += \" OPTION (OPTIMIZE FOR UNKNOWN)\";\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Server Garbage Collection XML\nDESCRIPTION: This XML code snippet shows how to enable Server Garbage Collection in an application's configuration file. Enabling Server GC can decrease thread contention and increase throughput in CPU-saturated scenarios when using Entity Framework in multi-threaded environments.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_41\n\nLANGUAGE: XML\nCODE:\n```\n<?xmlversion=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n        <runtime>\n               <gcServer enabled=\"true\" />\n        </runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: GroupBy Operator with Aggregation (C#)\nDESCRIPTION: This code shows how the LINQ GroupBy operator translates to SQL GROUP BY when an aggregate operator is applied to each group. The example groups Posts by AuthorId and counts the number of posts per author.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts\n    .GroupBy(p => p.AuthorId)\n    .Select(g => new { AuthorId = g.Key, Count = g.Count() });\n\n/*\n\nSELECT [p].[AuthorId] AS [Key], COUNT(*) AS [Count]\nFROM [Posts] AS [p]\nGROUP BY [p].[AuthorId]\n*/\n```\n\n----------------------------------------\n\nTITLE: Entity SQL Function Definition Example (Navision Model)\nDESCRIPTION: This XML snippet provides the definition of the 'MDF_SessionLogin_Time_Max' function used in the 'SingleAggregating' query example. This function selects minimum login time values from the 'Session' entity set within the NavisionFKContext and returns a collection of DateTime values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\n  <Function Name=\"MDF_SessionLogin_Time_Max\" ReturnType=\"Collection(DateTime)\">\n    <DefiningExpression>SELECT VALUE Edm.Min(E.Login_Time) FROM NavisionFKContext.Session as E</DefiningExpression>\n  </Function>\n```\n\n----------------------------------------\n\nTITLE: Renaming Non-Computed Concurrency Token Parameters (C#)\nDESCRIPTION: This C# code configures the Entity Framework model to rename both the original and new value parameters for a non-computed concurrency token. It maps the Url property to the \"blog_url\" parameter for the new value and \"blog_original_url\" for the original value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n .Entity<Blog>()\n .MapToStoredProcedures(s => s.Update(u => u.Parameter(b => b.Url, \"blog_url\", \"blog_original_url\")));\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Deleting a Blog\nDESCRIPTION: This SQL script shows the commands generated by EF Core when deleting a blog with cascade delete enabled.  It deletes the associated posts before deleting the blog itself.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (1ms) [Parameters=[@p0='1'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [Posts]\nWHERE [Id] = @p0;\nSELECT @@ROWCOUNT;\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='2'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [Posts]\nWHERE [Id] = @p0;\nSELECT @@ROWCOUNT;\n\n-- Executed DbCommand (2ms) [Parameters=[@p1='1'], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nDELETE FROM [Blogs]\nWHERE [Id] = @p1;\nSELECT @@ROWCOUNT;\n```\n\n----------------------------------------\n\nTITLE: Multiple SQL Queries - Split Query Example 3\nDESCRIPTION: Shows the multiple SQL queries generated for Split Query Example 3. The first query selects Customer IDs, and the second query uses CROSS APPLY to retrieve the distinct OrderDates associated with each Customer, filtered by Order ID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_114\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id]\nFROM [Customers] AS [c]\nORDER BY [c].[Id]\n\nSELECT [t].[OrderDate], [c].[Id]\nFROM [Customers] AS [c]\n  CROSS APPLY (\n  SELECT DISTINCT [o].[OrderDate]\n  FROM [Order] AS [o]\n  WHERE ([c].[Id] = [o].[CustomerId]) AND ([o].[Id] > 1)\n  ) AS [t]\nORDER BY [c].[Id]\n```\n\n----------------------------------------\n\nTITLE: Microsoft.EntityFrameworkCore.Design Package Reference (XML)\nDESCRIPTION: Demonstrates how the `Microsoft.EntityFrameworkCore.Design` package was previously referenced in project files for EF Core tools. Starting with .NET SDK 9.0.200, this configuration causes an exception. The mitigation involves marking the `Design` assembly reference as publishable until EF 10 is released.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"*.0.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Named Foreign Key Columns SQLite Schema SQL\nDESCRIPTION: Illustrates the resulting SQLite schema when the foreign key columns in the join table have been explicitly named. The `PostForeignKey` and `TagForeignKey` columns are created with appropriate primary and foreign key constraints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"PostTag\" (\n    \"PostForeignKey\" INTEGER NOT NULL,\n    \"TagForeignKey\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostForeignKey\", \"TagForeignKey\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostForeignKey\" FOREIGN KEY (\"PostForeignKey\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagForeignKey\" FOREIGN KEY (\"TagForeignKey\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Specifying Function Return Type using ReturnType in SSDL (XML)\nDESCRIPTION: This XML snippet shows how to specify the return type of a function using the ReturnType element in SSDL. It defines a collection of rows with specific properties and their types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n   <Function Name=\"GetProducts\" IsComposable=\"true\" Schema=\"dbo\">\n     <ReturnType>\n       <CollectionType>\n         <RowType>\n           <Property Name=\"ProductID\" Type=\"int\" Nullable=\"false\" />\n           <Property Name=\"CategoryID\" Type=\"bigint\" Nullable=\"false\" />\n           <Property Name=\"ProductName\" Type=\"nvarchar\" MaxLength=\"40\" Nullable=\"false\" />\n           <Property Name=\"UnitPrice\" Type=\"money\" />\n           <Property Name=\"Discontinued\" Type=\"bit\" />\n         </RowType>\n       </CollectionType>\n     </ReturnType>\n   </Function>\n```\n\n----------------------------------------\n\nTITLE: User Entity Type Definition C#\nDESCRIPTION: Defines a simple User entity type with properties for Id, Username, and Popularity. This entity is used in examples demonstrating the EF.Functions.Random feature to select users based on randomly generated popularity values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\npublic class User\n{\n    public int Id { get; set; }\n    public string Username { get; set; }\n    public int Popularity { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Base Class for Controller Tests with Mocks C#\nDESCRIPTION: This code defines a base class for controller tests that uses Moq to create mock objects for the repository and unit of work. It sets up common dependencies and configurations to reduce code duplication across test fixtures. It initializes mock objects and sets up the unit of work to return the mock repository.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EmployeeControllerTestBase {\n        public EmployeeControllerTestBase() {\n            _employeeData = EmployeeObjectMother.CreateEmployees()\n                                                .AsQueryable();\n            _repository = new Mock<IRepository<Employee>>();\n            _unitOfWork = new Mock<IUnitOfWork>();\n            _unitOfWork.Setup(u => u.Employees)\n                       .Returns(_repository.Object);\n            _controller = new EmployeeController(_unitOfWork.Object);\n        }\n\n        protected IQueryable<Employee> _employeeData;\n        protected Mock<IUnitOfWork> _unitOfWork;\n        protected EmployeeController _controller;\n        protected Mock<IRepository<Employee>> _repository;\n    }\n```\n\n----------------------------------------\n\nTITLE: Parameterized SQL Generated by EF Core from Interpolated String\nDESCRIPTION: This SQL code shows the parameterized query generated by EF Core when using string interpolation in `FromSql`. It demonstrates how EF Core replaces the interpolated variables with parameters (`@p0`, `@p1`) to prevent SQL injection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n@p0='London' (Size = 4000)\n@p1='Sales Representative' (Size = 4000)\n\nSELECT *\nFROM \"Customers\"\nWHERE \"City\" = @p0\n    AND \"ContactTitle\" = @p1\n```\n\n----------------------------------------\n\nTITLE: Implement DbMappingViewCache - C#\nDESCRIPTION: This code snippet demonstrates how to implement the DbMappingViewCache abstract class.  It shows the required MappingHashValue property and GetView method. MappingHashValue should return the pre-computed hash, and GetView should return the corresponding DbMappingView for a given EntitySetBase. The example demonstrates storing and retrieving views based on EntitySetBase name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/pre-generated-views.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic override string MappingHashValue\n{\n    get { return \"a0b843f03dd29abee99789e190a6fb70ce8e93dc97945d437d9a58fb8e2afd2e\"; }\n}\n\npublic override DbMappingView GetView(EntitySetBase extent)\n{\n    if (extent == null)\n    {\n        throw new ArgumentNullException(\"extent\");\n    }\n\n    var extentName = extent.EntityContainer.Name + \".\" + extent.Name;\n\n    if (extentName == \"BlogContext.Blogs\")\n    {\n        return GetView2();\n    }\n\n    if (extentName == \"BlogContext.Posts\")\n    {\n        return GetView3();\n    }\n\n    return null;\n}\n\nprivate static DbMappingView GetView2()\n{\n    return new DbMappingView(@\"\n        SELECT VALUE -- Constructing Blogs\n        [BlogApp.Models.Blog](T1.Blog_BlogId, T1.Blog_Test, T1.Blog_title, T1.Blog_Active, T1.Blog_SomeDecimal)\n        FROM (\n        SELECT\n            T.BlogId AS Blog_BlogId,\n            T.Test AS Blog_Test,\n            T.title AS Blog_title,\n            T.Active AS Blog_Active,\n            T.SomeDecimal AS Blog_SomeDecimal,\n            True AS _from0\n        FROM CodeFirstDatabase.Blog AS T\n        ) AS T1\");\n}\n```\n\n----------------------------------------\n\nTITLE: QueryView Element Example for Departments EntitySetMapping (XML)\nDESCRIPTION: This XML snippet illustrates the usage of the 'QueryView' element as a child of the 'EntitySetMapping' element. It defines a query view mapping for the 'Department' entity type in the School Model, selecting Department data from SchoolModelStoreContainer where the budget is greater than 150000.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"Departments\" >\n   <QueryView>\n     SELECT VALUE SchoolModel.Department(d.DepartmentID,\n                                         d.Name,\n                                         d.Budget,\n                                         d.StartDate)\n     FROM SchoolModelStoreContainer.Department AS d\n     WHERE d.Budget > 150000\n   </QueryView>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Preview of EntityFramework via Package Manager Console (PowerShell)\nDESCRIPTION: This command installs the latest preview version of the EntityFramework NuGet package using the Package Manager Console in Visual Studio.  This allows access to pre-release versions for testing and feedback. Requires NuGet Package Manager.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/install.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package EntityFramework -Pre\n```\n\n----------------------------------------\n\nTITLE: Registering Provider with DbConfigurationType Attribute (C#)\nDESCRIPTION: Registers the SQL Server provider by applying the `DbConfigurationType` attribute to a `DbContext` derived class. This tells Entity Framework to use the specified configuration class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/microsoft-ef6-sqlserver.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[DbConfigurationType(typeof(MicrosoftSqlDbConfiguration))]\npublic class SchoolContext : DbContext\n{\n    public SchoolContext() : base()\n    {\n    }\n\n    public DbSet<Student> Students { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Naming an Index - Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to specify the database name of an index using the Fluent API in EF Core.  The `HasDatabaseName()` method allows you to explicitly set the index name in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Customer>()\n    .HasIndex(c => c.Name)\n    .HasDatabaseName(\"IX_Names\");\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Unmapped Property Values - EF6 C#\nDESCRIPTION: This code shows how to read the current value of an unmapped property (e.g., `RssLink`) on a `Blog` entity. The example demonstrates accessing the property using both a lambda expression and a string.  It assumes the existence of a `BloggingContext` and a `Blog` entity with an unmapped `RssLink` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n    // Read the current value of an unmapped property\n    var rssLink = context.Entry(blog).Property(p => p.RssLink).CurrentValue;\n\n    // Use a string to specify the property name\n    var rssLinkAgain = context.Entry(blog).Property(\"RssLink\").CurrentValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Association with Foreign Key Constraint in SSDL (XML)\nDESCRIPTION: This code snippet illustrates an **Association** element in SSDL that defines a foreign key constraint named **FK_CustomerOrders**. The **Multiplicity** attributes on the **End** elements specify the relationship between the Customers and Orders tables (one-to-many), and the **OnDelete** element specifies a cascading delete behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"FK_CustomerOrders\">\n   <End Role=\"Customers\"\n        Type=\"ExampleModel.Store.Customers\" Multiplicity=\"1\">\n     <OnDelete Action=\"Cascade\" />\n   </End>\n   <End Role=\"Orders\"\n        Type=\"ExampleModel.Store.Orders\" Multiplicity=\"*\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Customers\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Principal>\n     <Dependent Role=\"Orders\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Property Values of Untracked Entity - EF6 C#\nDESCRIPTION: This snippet demonstrates how to read and set the current value of properties for an entity that is not being tracked by the context.  It uses both lambda expressions and strings to specify the property name.  It assumes a `BloggingContext` and a `Blog` entity with a `Name` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Create an entity that is not being tracked\n    var blog = new Blog { Name = \"ADO.NET Blog\" };\n\n    // Read and set the current value of Name as before\n    var currentName1 = context.Entry(blog).Property(u => u.Name).CurrentValue;\n    context.Entry(blog).Property(u => u.Name).CurrentValue = \"My Fancy Blog\";\n    var currentName2 = context.Entry(blog).Property(\"Name\").CurrentValue;\n    context.Entry(blog).Property(\"Name\").CurrentValue = \"My Boring Blog\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Owned Type Relationships with Fluent API (C#)\nDESCRIPTION: This code snippet demonstrates how to configure an owned type relationship using the fluent API in EF Core 3.0. It shows how to configure the foreign key, constraint name, table name, key, index, and seed data for the owned type. It also illustrates configuring a one-to-one relationship with another entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Order>.OwnsOne(e => e.Details, eb =>\n    {\n        eb.WithOwner()\n            .HasForeignKey(e => e.AlternateId)\n            .HasConstraintName(\"FK_OrderDetails\");\n\n        eb.ToTable(\"OrderDetails\");\n        eb.HasKey(e => e.AlternateId);\n        eb.HasIndex(e => e.Id);\n\n        eb.HasOne(e => e.Customer).WithOne();\n\n        eb.HasData(\n            new OrderDetails\n            {\n                AlternateId = 1,\n                Id = -1\n            });\n    });\n```\n\n----------------------------------------\n\nTITLE: GroupBy with First Selection SQL\nDESCRIPTION: This SQL code snippet is the translated SQL query for the GroupBy example in C#, which calculates FullName and selects the first person from each group.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [t0].[FirstName], [t0].[FullName], [t0].[c]\nFROM (\n    SELECT TOP(1) [p].[FirstName]\n    FROM [People] AS [p]\n    GROUP BY [p].[FirstName]\n) AS [t]\nLEFT JOIN (\n    SELECT [t1].[FirstName], [t1].[FullName], [t1].[c]\n    FROM (\n        SELECT [p0].[FirstName], (((COALESCE([p0].[FirstName], N'') + N' ') + COALESCE([p0].[MiddleInitial], N'')) + N' ') + COALESCE([p0].[LastName], N'') AS [FullName], 1 AS [c], ROW_NUMBER() OVER(PARTITION BY [p0].[FirstName] ORDER BY [p0].[FirstName]) AS [row]\n        FROM [People] AS [p0]\n    ) AS [t1]\n    WHERE [t1].[row] <= 1\n) AS [t0] ON [t].[FirstName] = [t0].[FirstName]\n```\n\n----------------------------------------\n\nTITLE: OrderLine Entity Definition C#\nDESCRIPTION: Defines an OrderLine entity with a composite key consisting of OrderId and ProductId.  This showcases the need to configure the composite key in OnModelCreating.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderLine\n{\n    public int OrderId { get; set; }\n    public int ProductId { get; set; }\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Change Tracker Long View - C#\nDESCRIPTION: This snippet demonstrates how to access and print the Change Tracker's long view to the console.  The long view provides detailed information about tracked entities, including property values, original values (for modified properties), and navigation properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/debug-views.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: SQL for Multiple Indexes\nDESCRIPTION: This SQL snippet shows the resulting SQL for creating multiple indexes with different ordering on the same set of columns in SQL Server. Each index has a unique name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_154\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX [IX_Blogs_Name_Owner_1] ON [Blogs] ([Name], [Owner] DESC);\nCREATE INDEX [IX_Blogs_Name_Owner_2] ON [Blogs] ([Name] DESC, [Owner] DESC);\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for Many-to-Many Relationship (C#)\nDESCRIPTION: These C# code snippets define two classes, Post and Tag, with a many-to-many relationship between them. Each Post can have multiple Tags, and each Tag can be associated with multiple Posts.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Post  \n{\n  public int PostId { get; set; }\n  public string Title { get; set; }\n  public string Content { get; set; }\n\n  public List<Tag> Tags { get; set; }\n}\n\npublic class Tag  \n{\n  public int TagId { get; set; }\n  public string TagName { get; set; }\n\n  public List<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Database to Latest - PowerShell\nDESCRIPTION: This command updates the database to the latest migration using PowerShell. It's the equivalent of the .NET Core CLI command.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Database\n```\n\n----------------------------------------\n\nTITLE: Generate SQL Script - With From and To - PowerShell\nDESCRIPTION: This command generates a SQL script from the specified 'from' migration ('AddNewTables') to the specified 'to' migration ('AddAuditTable') using PowerShell, allowing for a specific range of migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nScript-Migration AddNewTables AddAuditTable\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType with Navigation Properties in CSDL (XML)\nDESCRIPTION: This code snippet demonstrates defining an EntityType named 'Book' and includes two NavigationProperty elements: PublishedBy and WrittenBy.  These navigation properties establish relationships with the 'Publisher' and 'Author' entity types, respectively, using specified association names and roles.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Book\">\n   <Key>\n     <PropertyRef Name=\"ISBN\" />\n   </Key>\n   <Property Type=\"String\" Name=\"ISBN\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Title\" Nullable=\"false\" />\n   <Property Type=\"Decimal\" Name=\"Revision\" Nullable=\"false\" Precision=\"29\" Scale=\"29\" />\n   <NavigationProperty Name=\"Publisher\" Relationship=\"BooksModel.PublishedBy\"\n                       FromRole=\"Book\" ToRole=\"Publisher\" />\n   <NavigationProperty Name=\"Authors\" Relationship=\"BooksModel.WrittenBy\"\n                       FromRole=\"Book\" ToRole=\"Author\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Renaming Result Column - SQL\nDESCRIPTION: This SQL shows the generated stored procedure with the result column renamed. This corresponds to the C# code where the result column of BlogId is renamed to 'generated_blog_id'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE [dbo].[Blog_Insert]\n  @Name nvarchar(max),\n  @Url nvarchar(max)\nAS\nBEGIN\n  INSERT INTO [dbo].[Blogs] ([Name], [Url])\n  VALUES (@Name, @Url)\n\n  SELECT SCOPE_IDENTITY() AS generated_blog_id\nEND\n```\n\n----------------------------------------\n\nTITLE: Querying Cosmos DB with SQL using FromSql in C#\nDESCRIPTION: This code snippet demonstrates how to execute a SQL query against Azure Cosmos DB using Entity Framework Core's `FromSql` method.  It constructs a query that filters based on a `Rating` property. It requires EF Core 9.0 or later.  Earlier versions should use `FromSqlRaw`, but are vulnerable to SQL injection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar rating = 3;\n_ = await context.Blogs\n    .FromSql($\"SELECT VALUE c FROM root c WHERE c.Rating > {rating}\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Entity Class with Database Comments C#\nDESCRIPTION: Shows how database comments on SQL tables and columns are scaffolded into the generated entity classes as XML documentation comments. Requires appropriate configuration and database support for comments.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_56\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// The Blog table.\n/// </summary>\npublic partial class Blog\n{\n    /// <summary>\n    /// The primary key.\n    /// </summary>\n    [Key]\n    public int Id { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Extension Method for Delegate-Based Lazy Loading\nDESCRIPTION: This code defines an extension method `Load` for `Action<object, string>` to simplify the call to the lazy loader delegate, making the entity code cleaner.  It uses `CallerMemberName` to automatically pass the name of the navigation property being accessed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/lazy.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static class PocoLoadingExtensions\n{\n    public static TRelated Load<TRelated>(\n        this Action<object, string> loader,\n        object entity,\n        ref TRelated navigationField,\n        [CallerMemberName] string navigationName = null)\n        where TRelated : class\n    {\n        loader?.Invoke(entity, navigationName);\n\n        return navigationField;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Current Values from Dictionary in EF Core (C#)\nDESCRIPTION: This code demonstrates setting the current values of a tracked entity from a dictionary.  It creates a dictionary with key-value pairs representing property names and their corresponding values.  The `SetValues` method on `CurrentValues` then uses this dictionary to update the entity's properties.  The dictionary keys must match the entity's property names.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogDictionary = new Dictionary<string, object>\n{\n    [\"Id\"] = 1,\n    [\"Name\"] = \"1unicorn2\"\n};\n\ncontext.Entry(blog).CurrentValues.SetValues(blogDictionary);\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Foundation Stylesheet\nDESCRIPTION: This snippet shows how to include the Open Iconic stylesheet designed for Foundation framework. It allows you to use Open Iconic icons with Foundation's styling conventions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Configure shadow ID property in EF Core\nDESCRIPTION: This code snippet configures Entity Framework to use a shadow property for the JSON `id` property, preserving the EF Core 8 behavior. It serves as a mitigation for the key property mapping change in EF Core 9.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Session>().HasShadowId();\n```\n\n----------------------------------------\n\nTITLE: ExecuteUpdateAsync with Expression Tree (EF Core < 10)\nDESCRIPTION: This code snippet shows how to use `ExecuteUpdateAsync` with an expression tree in EF Core versions prior to 10.  It conditionally updates the `Views` and `Name` properties of a `Blog` entity.  Creating expression trees manually is complex and error-prone, demonstrating the need for the new, simplified syntax in EF Core 10.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-10.0/whatsnew.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Base setters - update the Views only\nExpression<Func<SetPropertyCalls<Blog>, SetPropertyCalls<Blog>>> setters =\n    s => s.SetProperty(b => b.Views, 8);\n\n// Conditionally add SetProperty(b => b.Name, \"foo\") to setters, based on the value of nameChanged\nif (nameChanged)\n{\n    var blogParameter = Expression.Parameter(typeof(Blog), \"b\");\n\n    setters = Expression.Lambda<Func<SetPropertyCalls<Blog>, SetPropertyCalls<Blog>>>(\n        Expression.Call(\n            instance: setters.Body,\n            methodName: nameof(SetPropertyCalls<Blog>.SetProperty),\n            typeArguments: [typeof(string)],\n            arguments:\n            [\n                Expression.Lambda<Func<Blog, string>>(Expression.Property(blogParameter, nameof(Blog.Name)), blogParameter),\n                Expression.Constant(\"foo\")\n            ]),\n        setters.Parameters);\n}\n\nawait context.Blogs.ExecuteUpdateAsync(setters);\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many with Alternate Key and Explicit Configuration\nDESCRIPTION: This C# code provides a complete explicit configuration of a one-to-many relationship between `Blog` and `Post` in Entity Framework Core's `OnModelCreating` method.  It sets the `AlternateId` as the principal key using `HasPrincipalKey`, specifies the foreign key property, and enforces the relationship as required. Requires an instance of `ModelBuilder`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany(e => e.Posts)\n                    .WithOne(e => e.Blog)\n                    .HasPrincipalKey(e => e.AlternateId)\n                    .HasForeignKey(e => e.BlogId)\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: Defining an EntityType in CSDL (XML)\nDESCRIPTION: This XML snippet defines an EntityType named 'Book'. It specifies the primary key ('ISBN'), properties ('ISBN', 'Title', 'Revision'), and navigation properties ('Publisher', 'Authors') to related entities. The 'Property' elements define the data types and nullability constraints for the entity's attributes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Book\">\n   <Key>\n     <PropertyRef Name=\"ISBN\" />\n   </Key>\n   <Property Type=\"String\" Name=\"ISBN\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Title\" Nullable=\"false\" />\n   <Property Type=\"Decimal\" Name=\"Revision\" Nullable=\"false\" Precision=\"29\" Scale=\"29\" />\n   <NavigationProperty Name=\"Publisher\" Relationship=\"BooksModel.PublishedBy\"\n                       FromRole=\"Book\" ToRole=\"Publisher\" />\n   <NavigationProperty Name=\"Authors\" Relationship=\"BooksModel.WrittenBy\"\n                       FromRole=\"Book\" ToRole=\"Author\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Defining a FunctionImport in CSDL (XML)\nDESCRIPTION: This example illustrates defining a FunctionImport element in CSDL to map a function to a storage model function (e.g., a stored procedure). It accepts a StudentID parameter of type Int32 and returns a collection of StudentGrade entity types from the StudentGrade entity set. This allows calling the function from the Entity Framework application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n <FunctionImport Name=\"GetStudentGrades\"\n                 EntitySet=\"StudentGrade\"\n                 ReturnType=\"Collection(SchoolModel.StudentGrade)\">\n        <Parameter Name=\"StudentID\" Mode=\"In\" Type=\"Int32\" />\n </FunctionImport>\n```\n\n----------------------------------------\n\nTITLE: Association Element Example (With Foreign Keys) - CSDL\nDESCRIPTION: This example demonstrates an Association element in CSDL that defines the CustomerOrders association when foreign keys are exposed on the Customer and Order entity types. The relationship is managed with a ReferentialConstraint element, specifying the principal and dependent roles based on property references. A corresponding AssociationSetMapping element is not necessary.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"CustomerOrders\">\n   <End Type=\"ExampleModel.Customer\" Role=\"Customer\" Multiplicity=\"1\" >\n         <OnDelete Action=\"Cascade\" />\n   </End>\n   <End Type=\"ExampleModel.Order\" Role=\"Order\" Multiplicity=\"*\" />\n   <ReferentialConstraint>\n        <Principal Role=\"Customer\">\n            <PropertyRef Name=\"Id\" />\n        </Principal>\n        <Dependent Role=\"Order\">\n             <PropertyRef Name=\"CustomerId\" />\n         </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Query Shared-Type Entity C#\nDESCRIPTION: This C# code shows how to query the `BuildMetadata` DbSet, which represents a shared-type entity. It filters the entities based on the `Prerelease` property and orders them by the `Tag` property using `EF.Property<T>()` to access the properties within the dictionary. The result is converted to a list using `ToListAsync()`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_142\n\nLANGUAGE: csharp\nCODE:\n```\nvar builds = await context.BuildMetadata\n                .Where(metadata => !EF.Property<bool>(metadata, \"Prerelease\"))\n                .OrderBy(metadata => EF.Property<string>(metadata, \"Tag\"))\n                .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Reading Current, Original, Database Values - EF6 C#\nDESCRIPTION: This code illustrates how to read the current, original, and database values for all mapped properties of an entity using `CurrentValues`, `OriginalValues`, and `GetDatabaseValues`. It includes a helper function `PrintValues` to display the values. The example uses a `BloggingContext` and a `Blog` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n\n    // Make a modification to Name in the tracked entity\n    blog.Name = \"My Cool Blog\";\n\n    // Make a modification to Name in the database\n    context.Database.SqlCommand(\"update dbo.Blogs set Name = 'My Boring Blog' where Id = 1\");\n\n    // Print out current, original, and database values\n    Console.WriteLine(\"Current values:\");\n    PrintValues(context.Entry(blog).CurrentValues);\n\n    Console.WriteLine(\"\\nOriginal values:\");\n    PrintValues(context.Entry(blog).OriginalValues);\n\n    Console.WriteLine(\"\\nDatabase values:\");\n    PrintValues(context.Entry(blog).GetDatabaseValues());\n}\n\npublic static void PrintValues(DbPropertyValues values)\n{\n    foreach (var propertyName in values.PropertyNames)\n    {\n        Console.WriteLine(\"Property {0} has value {1}\",\n                          propertyName, values[propertyName]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Entity\nDESCRIPTION: This code snippet defines the Employee entity with properties like EmployeeId, Name, Position, Department, Address, and AnnualSalary. This entity is used in examples demonstrating temporal tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Employee\n{\n    public Guid EmployeeId { get; set; }\n    public string Name { get; set; }\n    public string Position { get; set; }\n    public string Department { get; set; }\n    public string Address { get; set; }\n    public decimal AnnualSalary { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unique Index - Fluent API - C#\nDESCRIPTION: This code snippet shows how to create a unique index using the Fluent API in EF Core. The `IsUnique` method is chained to the `HasIndex` method to configure the index as unique. Attempting to insert duplicate values in the specified column set will result in an exception.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/indexes.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<User>()\n    .HasIndex(u => u.Email)\n    .IsUnique();\n```\n\n----------------------------------------\n\nTITLE: Consuming WCF Service in C# Console App\nDESCRIPTION: This C# code demonstrates how to consume the WCF service from a console application. It includes methods for displaying, adding, updating, and deleting blogs and posts using the service client.  The code showcases creating a service client instance, calling service methods, and handling data manipulation using the `BloggingService` namespace. The `MarkAsDeleted` method is assumed to be part of the `Post` and `Blog` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/disconnected-entities/self-tracking-entities/walkthrough.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n    using STESample.ConsoleTest.BloggingService;\n    using System;\n    using System.Linq;\n\n    namespace STESample.ConsoleTest\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                // Print out the data before we change anything\n                Console.WriteLine(\"Initial Data:\");\n                DisplayBlogsAndPosts();\n\n                // Add a new Blog and some Posts\n                AddBlogAndPost();\n                Console.WriteLine(\"After Adding:\");\n                DisplayBlogsAndPosts();\n\n                // Modify the Blog and one of its Posts\n                UpdateBlogAndPost();\n                Console.WriteLine(\"After Update:\");\n                DisplayBlogsAndPosts();\n\n                // Delete the Blog and its Posts\n                DeleteBlogAndPost();\n                Console.WriteLine(\"After Delete:\");\n                DisplayBlogsAndPosts();\n\n                Console.WriteLine(\"Press any key to exit...\");\n                Console.ReadKey();\n            }\n\n            static void DisplayBlogsAndPosts()\n            {\n                using (var service = new Service1Client())\n                {\n                    // Get all Blogs (and Posts) from the service\n                    // and print them to the console\n                    var blogs = service.GetBlogs();\n                    foreach (var blog in blogs)\n                    {\n                        Console.WriteLine(blog.Name);\n                        foreach (var post in blog.Posts)\n                        {\n                            Console.WriteLine(\" - {0}\", post.Title);\n                        }\n                    }\n                }\n\n                Console.WriteLine();\n                Console.WriteLine();\n            }\n\n            static void AddBlogAndPost()\n            {\n                using (var service = new Service1Client())\n                {\n                    // Create a new Blog with a couple of Posts\n                    var newBlog = new Blog\n                    {\n                        Name = \"The New Blog\",\n                        Posts =\n                        {\n                            new Post { Title = \"Welcome to the new blog\"},\n                            new Post { Title = \"What's new on the new blog\"}\n                        }\n                    };\n\n                    // Save the changes using the service\n                    service.UpdateBlog(newBlog);\n                }\n            }\n\n            static void UpdateBlogAndPost()\n            {\n                using (var service = new Service1Client())\n                {\n                    // Get all the Blogs\n                    var blogs = service.GetBlogs();\n\n                    // Use LINQ to Objects to find The New Blog\n                    var blog = blogs.First(b => b.Name == \"The New Blog\");\n\n                    // Update the Blogs name\n                    blog.Name = \"The Not-So-New Blog\";\n\n                    // Update one of the related posts\n                    blog.Posts.First().Content = \"Some interesting content...\";\n\n                    // Save the changes using the service\n                    service.UpdateBlog(blog);\n                }\n            }\n\n            static void DeleteBlogAndPost()\n            {\n                using (var service = new Service1Client())\n                {\n                    // Get all the Blogs\n                    var blogs = service.GetBlogs();\n\n                    // Use LINQ to Objects to find The Not-So-New Blog\n                    var blog = blogs.First(b => b.Name == \"The Not-So-New Blog\");\n\n                    // Mark all related Posts for deletion\n                    // We need to call ToList because each Post will be removed from the\n                    // Posts collection when we call MarkAsDeleted\n                    foreach (var post in blog.Posts.ToList())\n                    {\n                        post.MarkAsDeleted();\n                    }\n\n                    // Mark the Blog for deletion\n                    blog.MarkAsDeleted();\n\n                    // Save the changes using the service\n                    service.UpdateBlog(blog);\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Enum Database Default Configuration C#\nDESCRIPTION: This snippet configures an enum property `Level` with a database default value of `Level.Intermediate` using Entity Framework Core's model builder. It shows how to specify a default value for an enum column in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_122\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Course\n{\n    public int Id { get; set; }\n    public Level Level { get; set; }\n}\n\npublic enum Level\n{\n    Beginner,\n    Intermediate,\n    Advanced,\n    Unspecified\n}\n\nmodelBuilder.Entity<Course>()\n    .Property(e => e.Level)\n    .HasDefaultValue(Level.Intermediate);\n```\n\n----------------------------------------\n\nTITLE: Inject DbContext into Controller (C#)\nDESCRIPTION: This code shows how to inject a DbContext directly into a controller. The context is disposed when the request scope is disposed, so it should not be explicitly disposed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\nprivate class MyController1\n{\n    private readonly SomeDbContext _context;\n\n    public MyController1(SomeDbContext context)\n    {\n        _context = context;\n    }\n\n    public void DoSomething()\n    {\n        var results = _context.Blogs.ToList();\n\n        // Injected context is disposed when the request scope is disposed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Association Element with ReferentialConstraint - XML\nDESCRIPTION: This example demonstrates the Association element using a ReferentialConstraint to define the columns participating in a foreign key constraint (FK_CustomerOrders).  It specifies the principal (Customers) and dependent (Orders) ends of the association and their corresponding properties (CustomerId).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"FK_CustomerOrders\">\n   <End Role=\"Customers\"\n        Type=\"ExampleModel.Store.Customers\" Multiplicity=\"1\">\n     <OnDelete Action=\"Cascade\" />\n   </End>\n   <End Role=\"Orders\"\n        Type=\"ExampleModel.Store.Orders\" Multiplicity=\"*\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Customers\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Principal>\n     <Dependent Role=\"Orders\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Complex Type Convention Example in C#\nDESCRIPTION: This code snippet illustrates the complex type convention, where the Details class is inferred as a complex type because it lacks a primary key and is not referenced by a collection property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/built-in.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class OnsiteCourse : Course\n{\n    public OnsiteCourse()\n    {\n        Details = new Details();\n    }\n\n    public Details Details { get; set; }\n}\n\npublic class Details\n{\n    public System.DateTime Time { get; set; }\n    public string Location { get; set; }\n    public string Days { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Temporary Value for Key Property\nDESCRIPTION: This snippet demonstrates how to access the temporary value generated by EF Core for the `Id` property of the `Blog` entity.  The value on the entity instance remains 0, while the value tracked by EF Core is a temporary value (e.g., a negative number).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_169\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine($\"Blog.Id value on entity instance = {blog.Id}\");\nConsole.WriteLine($\"Blog.Id value tracked by EF = {context.Entry(blog).Property(e => e.Id).CurrentValue}\");\n```\n\n----------------------------------------\n\nTITLE: Configure Client Cascade Delete for Relationship\nDESCRIPTION: This code configures the relationship between `FeaturedPost` and `Post` to use client-side cascade deletes instead of server-side cascade deletes. This can be used to resolve conflicts in SQL Server when there are multiple cascade behaviors configured between tables in a TPT mapping scenario.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<FeaturedPost>()\n    .HasOne(e => e.ReferencePost)\n    .WithMany()\n    .OnDelete(DeleteBehavior.ClientCascade);\n```\n\n----------------------------------------\n\nTITLE: QueryView Element Example for FK_Course_Department (XML)\nDESCRIPTION: This XML snippet shows the 'QueryView' element as a child of an 'AssociationSetMapping' element. It defines a read-only mapping for the `FK_Course_Department` association in the School model, creating references between Departments and Courses based on the DepartmentID and CourseID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n <EntityContainerMapping StorageEntityContainer=\"SchoolModelStoreContainer\"\n                         CdmEntityContainer=\"SchoolEntities\">\n   <EntitySetMapping Name=\"Courses\" >\n     <QueryView>\n       SELECT VALUE SchoolModel.Course(c.CourseID,\n                                       c.Title,\n                                       c.Credits)\n       FROM SchoolModelStoreContainer.Course AS c\n     </QueryView>\n   </EntitySetMapping>\n   <EntitySetMapping Name=\"Departments\" >\n     <QueryView>\n       SELECT VALUE SchoolModel.Department(d.DepartmentID,\n                                           d.Name,\n                                           d.Budget,\n                                           d.StartDate)\n       FROM SchoolModelStoreContainer.Department AS d\n       WHERE d.Budget > 150000\n     </QueryView>\n   </EntitySetMapping>\n   <AssociationSetMapping Name=\"FK_Course_Department\" >\n     <QueryView>\n       SELECT VALUE SchoolModel.FK_Course_Department(\n         CREATEREF(SchoolEntities.Departments, row(c.DepartmentID), SchoolModel.Department),\n         CREATEREF(SchoolEntities.Courses, row(c.CourseID)) )\n       FROM SchoolModelStoreContainer.Course AS c\n     </QueryView>\n   </AssociationSetMapping>\n </EntityContainerMapping>\n```\n\n----------------------------------------\n\nTITLE: Single Query with Data Duplication - SQL\nDESCRIPTION: This SQL query shows how a `LEFT JOIN` can duplicate data from the `Blogs` table for each related `Post`. This can be problematic if the `Blogs` table has large columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[Id], [b].[Name], [b].[HugeColumn], [p].[Id], [p].[BlogId], [p].[Title]\nFROM [Blogs] AS [b]\nLEFT JOIN [Posts] AS [p] ON [b].[Id] = [p].[BlogId]\nORDER BY [b].[Id]\n```\n\n----------------------------------------\n\nTITLE: LINQ LeftJoin Example in EF Core 10\nDESCRIPTION: This code snippet demonstrates the usage of the `LeftJoin` method in EF Core 10 to perform a left outer join between the `Students` and `Departments` tables. It projects the results into a new anonymous type containing student's first name, last name, and department name (or '[NONE]' if the department is null).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-10.0/whatsnew.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Students\n    .LeftJoin(\n        context.Departments,\n        student => student.DepartmentID,\n        department => department.ID,\n        (student, department) => new \n        { \n            student.FirstName,\n            student.LastName,\n            Department = department.Name ?? \"[NONE]\"\n        });\n```\n\n----------------------------------------\n\nTITLE: EntityType Definition with Complex Property (CSDL)\nDESCRIPTION: This example defines an EntityType named 'Person' that includes a complex property 'Name' of type 'SchoolModel.FullName'. It illustrates how a complex type can be incorporated into an entity to represent related properties. The 'PersonID' is the key property and is auto-generated by the store.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Person\">\n   <Key>\n     <PropertyRef Name=\"PersonID\" />\n   </Key>\n   <Property Name=\"PersonID\" Type=\"Int32\" Nullable=\"false\"\n             annotation:StoreGeneratedPattern=\"Identity\" />\n   <Property Name=\"HireDate\" Type=\"DateTime\" />\n   <Property Name=\"EnrollmentDate\" Type=\"DateTime\" />\n   <Property Name=\"Name\" Type=\"SchoolModel.FullName\" Nullable=\"false\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: No Tracking Query with Scalar Projection in C#\nDESCRIPTION: This code snippet showcases a query that projects scalar properties, resulting in a NoTracking behavior even without explicitly specifying `AsNoTracking()`. The query selects only the `ProductName` property from the `Products` entity set where the category is 'Beverages'. Since the query doesn't materialize an entity known to the object state manager, the result is automatically not tracked.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nvar q = context.Products.Where(p => p.Category.CategoryName == \"Beverages\").Select(p => new { p.ProductName });\n```\n\n----------------------------------------\n\nTITLE: Defining EnumType with Members in CSDL (XML)\nDESCRIPTION: This code snippet showcases the definition of an EnumType named 'Color' with three members: Red, Green, and Blue. Each member is assigned a specific value, demonstrating how enumerated types are defined in CSDL. The 'Value' attribute explicitly assigns integer values to each enum member.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n <EnumType Name=\"Color\">\n   <Member Name=\"Red\" Value=”1”/>\n   <Member Name=\"Green\" Value=”3” />\n   <Member Name=\"Blue\" Value=”5”/>\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Create PooledDbContextFactory (C#)\nDESCRIPTION: This code demonstrates how to create a PooledDbContextFactory instance directly, without dependency injection. It configures DbContextOptions and then creates the factory.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_151\n\nLANGUAGE: C#\nCODE:\n```\nvar options = new DbContextOptionsBuilder<SomeDbContext>()\n    .EnableSensitiveDataLogging()\n    .UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=EFCoreSample\")\n    .Options;\n\nvar factory = new PooledDbContextFactory<SomeDbContext>(options);\n```\n\n----------------------------------------\n\nTITLE: SQL Server Table Creation with varchar\nDESCRIPTION: Shows the SQL generated when using the Unicode attribute with `Unicode(false)` and `MaxLength`.  This results in a `varchar` column in SQL Server.  Requires an EF Core migration to be generated and applied to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_121\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Book] (\n    [Id] int NOT NULL IDENTITY,\n    [Title] nvarchar(max) NULL,\n    [Isbn] varchar(22) NULL,\n    CONSTRAINT [PK_Book] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a Temporal Table\nDESCRIPTION: This C# code snippet demonstrates how to insert new employee records into a temporal table using EF Core.  It creates several 'Employee' objects with sample data and adds them to the context, and persists them to the database using SaveChanges().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ncontext.AddRange(\n    new Employee\n    {\n        Name = \"Pinky Pie\",\n        Address = \"Sugarcube Corner, Ponyville, Equestria\",\n        Department = \"DevDiv\",\n        Position = \"Party Organizer\",\n        AnnualSalary = 100.0m\n    },\n    new Employee\n    {\n        Name = \"Rainbow Dash\",\n        Address = \"Cloudominium, Ponyville, Equestria\",\n        Department = \"DevDiv\",\n        Position = \"Ponyville weather patrol\",\n        AnnualSalary = 900.0m\n    },\n    new Employee\n    {\n        Name = \"Fluttershy\",\n        Address = \"Everfree Forest, Equestria\",\n        Department = \"DevDiv\",\n        Position = \"Animal caretaker\",\n        AnnualSalary = 30.0m\n    });\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Migrate to the latest migration\nDESCRIPTION: This command runs migrations against the specified assembly, using the configuration file provided. The command migrates the database to the latest available migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/migrate-exe.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nMigrate.exe MyMvcApplication.dll /startupConfigurationFile=\"..\\\\web.config\"\n```\n\n----------------------------------------\n\nTITLE: Custom Operation with Multi-Provider Support in C#\nDESCRIPTION: This C# code demonstrates creating a custom migration operation using `MigrationBuilder.Sql()` while supporting multiple database providers (SQL Server and PostgreSQL). It uses `MigrationBuilder.ActiveProvider` to determine the appropriate SQL command to execute based on the active provider, ensuring compatibility across different database systems.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/operations.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MigrationBuilderExtensions\n{\n    public static MigrationBuilder CreateUser(this MigrationBuilder migrationBuilder, string name, string password)\n    {\n        if (migrationBuilder.ActiveProvider == \"Microsoft.EntityFrameworkCore.SqlServer\")\n        {\n            migrationBuilder.Sql($\"CREATE USER [{name}] WITH PASSWORD = '{password}'\");\n        }\n        else if (migrationBuilder.ActiveProvider == \"Npgsql.EntityFrameworkCore.PostgreSQL\")\n        {\n            migrationBuilder.Sql($\"CREATE ROLE \\\"{name}\\\" WITH LOGIN PASSWORD '{password}'\");\n        }\n        else\n        {\n            throw new InvalidOperationException(\"This provider is not supported\");\n        }\n\n        return migrationBuilder;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Blog and Post Entities (C#)\nDESCRIPTION: This snippet defines the `Blog` and `Post` entity classes, which are used in the example to demonstrate querying a database view using a keyless entity type.  These entities are standard EF Core entities with keys and properties. They act as the basis for the view being queried.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keyless-entity-types.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace KeylessEntityTypes\n{\n    public class Blog\n    {\n        public int BlogId { get; set; }\n        [Required]\n        public string Url { get; set; }\n\n        public List<Post> Posts { get; set; }\n    }\n\n    public class Post\n    {\n        public int PostId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n        public int BlogId { get; set; }\n        public Blog Blog { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Money Type Definition C#\nDESCRIPTION: Defines a `Money` struct with `Amount` and `Currency` properties.  This represents a value object that requires custom serialization and database mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic readonly struct Money\n{\n    [JsonConstructor]\n    public Money(decimal amount, Currency currency)\n    {\n        Amount = amount;\n        Currency = currency;\n    }\n\n    public override string ToString()\n        => (Currency == Currency.UsDollars ? \"$\" : \"£\") + Amount;\n\n    public decimal Amount { get; }\n    public Currency Currency { get; }\n}\n\npublic enum Currency\n{\n    UsDollars,\n    PoundsSterling\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Pub Entity with a List of Beer Objects (C#)\nDESCRIPTION: This code defines the `Pub` entity with a list of `Beer` objects, enabling EF Core to create a separate `Beer` table.  This setup provides an alternative to storing a collection of primitive values directly within the `Pub` table. It shows how to map a primitive collection to a table by wrapping the primitive in an owned type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\npublic class Pub\n{\n    public Pub(string name)\n    {\n        Name = name;\n    }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public List<Beer> Beers { get; set; } = new();\n    public List<DateOnly> DaysVisited { get; private set; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Change Tracker Debug View Programmatically - C#\nDESCRIPTION: This snippet shows how to access the Change Tracker's short view programmatically and output it to the console. This allows for inspecting the state of tracked entities during debugging.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/debug-views.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(context.ChangeTracker.DebugView.ShortView);\n```\n\n----------------------------------------\n\nTITLE: Excluding Table from Migrations using ToTable\nDESCRIPTION: This code snippet demonstrates how to exclude a table from migrations using the `ExcludeFromMigrations` method when mapping an entity to a view in EF Core 5. This is used to prevent EF Core from trying to drop the default table during migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<User>().ToTable(\"UserView\", t => t.ExcludeFromMigrations());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DbCommandInterceptor (C#)\nDESCRIPTION: This code shows how to register a custom DbCommandInterceptor with a DbContext. The interceptor is added to the DbContext's options using the AddInterceptors method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/index.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddDbContext(b => b\n    .UseSqlServer(connectionString)\n    .AddInterceptors(new HintCommandInterceptor()));\n```\n\n----------------------------------------\n\nTITLE: Mapping Table-Per-Concrete Class (TPC) - C#\nDESCRIPTION: Configures Table-Per-Concrete Class (TPC) inheritance mapping for 'Course', 'OnsiteCourse', and 'OnlineCourse' entities. It disables database generated options for CourseID and remaps inherited properties for derived types.  Each concrete class is mapped to its own table, with no shared primary key relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()\n    .Property(c => c.CourseID)\n    .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);\n\nmodelBuilder.Entity<OnsiteCourse>().Map(m =>\n{\n    m.MapInheritedProperties();\n    m.ToTable(\"OnsiteCourse\");\n});\n\nmodelBuilder.Entity<OnlineCourse>().Map(m =>\n{\n    m.MapInheritedProperties();\n    m.ToTable(\"OnlineCourse\");\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Example in C#\nDESCRIPTION: This C# code demonstrates an example of how lazy loading might appear to the user. The `employee` object is retrieved from the `repository`, and later the `TimeCards` collection is accessed. The actual loading of the `TimeCards` data is deferred until it's needed, improving performance if the `TimeCards` collection is not always used.  It assumes `repository` is an instance of a class that can retrieve employee objects.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar employee = repository.FindById(id);\n    // ... and later ...\n    foreach(var timeCard in employee.TimeCards) {\n        // .. manipulate the timeCard\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic CSS\nDESCRIPTION: This snippet shows how to include the default Open Iconic CSS stylesheet. The stylesheet should be placed inside the HTML <head> section.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Create Blogs and Posts Tables in STESample Database - SQL\nDESCRIPTION: This SQL script creates the Blogs and Posts tables in the STESample database with the necessary constraints and relationships. It also inserts some sample data into the Blogs table and related Posts.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/disconnected-entities/self-tracking-entities/walkthrough.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n    CREATE TABLE [dbo].[Blogs] (\n        [BlogId] INT IDENTITY (1, 1) NOT NULL,\n        [Name] NVARCHAR (200) NULL,\n        [Url]  NVARCHAR (200) NULL,\n        CONSTRAINT [PK_dbo.Blogs] PRIMARY KEY CLUSTERED ([BlogId] ASC)\n    );\n\n    CREATE TABLE [dbo].[Posts] (\n        [PostId] INT IDENTITY (1, 1) NOT NULL,\n        [Title] NVARCHAR (200) NULL,\n        [Content] NTEXT NULL,\n        [BlogId] INT NOT NULL,\n        CONSTRAINT [PK_dbo.Posts] PRIMARY KEY CLUSTERED ([PostId] ASC),\n        CONSTRAINT [FK_dbo.Posts_dbo.Blogs_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [dbo].[Blogs] ([BlogId]) ON DELETE CASCADE\n    );\n\n    SET IDENTITY_INSERT [dbo].[Blogs] ON\n    INSERT INTO [dbo].[Blogs] ([BlogId], [Name], [Url]) VALUES (1, N'ADO.NET Blog', N'blogs.msdn.com/adonet')\n    SET IDENTITY_INSERT [dbo].[Blogs] OFF\n    INSERT INTO [dbo].[Posts] ([Title], [Content], [BlogId]) VALUES (N'Intro to EF', N'Interesting stuff...', 1)\n    INSERT INTO [dbo].[Posts] ([Title], [Content], [BlogId]) VALUES (N'What is New', N'More interesting stuff...', 1)\n```\n\n----------------------------------------\n\nTITLE: Date and Time Function Mappings in SQLite EF Core\nDESCRIPTION: Specifies the translation of .NET date and time functions to their SQL equivalents when using the SQLite provider with EF Core. It covers common operations like adding days/months/years, extracting date parts, and accessing current date/time.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/functions.md#_snippet_3\n\nLANGUAGE: .NET & SQL\nCODE:\n```\n.NET                            | SQL                                                                      \n------------------------------- | ------------------------------------------------------------------------ \ndateOnly.AddDays(value)         | date(@dateOnly, @value || ' days')\ndateOnly.AddMonths(months)      | date(@dateOnly, @months || ' months')\ndateOnly.AddYears(value)        | date(@dateOnly, @value || ' years')\ndateOnly.Day                    | strftime('%d', @dateOnly)\ndateOnly.DayOfWeek              | strftime('%w', @dateOnly)\ndateOnly.DayOfYear              | strftime('%j', @dateOnly)\nDateOnly.FromDateTime(dateTime) | date(@dateTime)\ndateOnly.Month                  | strftime('%m', @dateOnly)\ndateOnly.Year                   | strftime('%Y', @dateOnly)\nDateTime.Now                    | datetime('now', 'localtime')\nDateTime.Today                  | datetime('now', 'localtime', 'start of day')\nDateTime.UtcNow                 | datetime('now')\ndateTime.AddDays(value)         | datetime(@dateTime, @value || ' days')\ndateTime.AddHours(value)        | datetime(@dateTime, @d || ' hours')\ndateTime.AddMilliseconds(value) | datetime(@dateTime, (@value / 1000.0) || ' seconds')\ndateTime.AddMinutes(value)      | datetime(@dateTime, @value || ' minutes')\ndateTime.AddMonths(months)      | datetime(@dateTime, @months || ' months')\ndateTime.AddSeconds(value)      | datetime(@dateTime, @value || ' seconds')\ndateTime.AddTicks(value)        | datetime(@dateTime, (@value / 10000000.0) || ' seconds')\ndateTime.AddYears(value)        | datetime(@dateTime, @value || ' years')\ndateTime.Date                   | datetime(@dateTime, 'start of day')\ndateTime.Day                    | strftime('%d', @dateTime)\ndateTime.DayOfWeek              | strftime('%w', @dateTime)\ndateTime.DayOfYear              | strftime('%j', @dateTime)\ndateTime.Hour                   | strftime('%H', @dateTime)\ndateTime.Millisecond            | (strftime('%f', @dateTime) * 1000) % 1000\ndateTime.Minute                 | strftime('%M', @dateTime)\ndateTime.Month                  | strftime('%m', @dateTime)\ndateTime.Second                 | strftime('%S', @dateTime)\ndateTime.Ticks                  | (julianday(@dateTime) - julianday('0001-01-01 00:00:00')) * 864000000000\ndateTime.TimeOfDay              | time(@dateTime)\ndateTime.Year                   | strftime('%Y', @dateTime)\n```\n\n----------------------------------------\n\nTITLE: Default Type Mapping Configuration C#\nDESCRIPTION: Configures the default type mapping for string properties to be non-Unicode (ANSI). This affects how strings are treated in queries that aren't explicitly mapped to a property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nconfigurationBuilder\n    .DefaultTypeMapping<string>()\n    .IsUnicode(false);\n```\n\n----------------------------------------\n\nTITLE: User and ForumModerator Entity C#\nDESCRIPTION: Defines a base entity type (ForumUser) and a derived entity type (ForumModerator) to demonstrate sparse column usage in a TPH inheritance scenario.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\npublic class ForumUser\n{\n    public int Id { get; set; }\n    public string Username { get; set; }\n}\n\npublic class ForumModerator : ForumUser\n{\n    public string ForumName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Product Sequence SQL\nDESCRIPTION: SQL script to create a sequence named `ProductSequence` for key generation. The sequence starts at 1, increments by 1, and has no minimum or maximum value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_184\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE SEQUENCE [ProductSequence] START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE NO CYCLE;\n```\n\n----------------------------------------\n\nTITLE: NGen Install for 32-bit Architecture\nDESCRIPTION: This command invokes NGen.exe to install a native image for the specified assembly for a 32-bit architecture. The assembly name should be replaced with the actual name of the assembly file, e.g., EntityFramework.dll.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/ngen.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n%WINDIR%\\Microsoft.NET\\Framework\\v4.0.30319\\ngen install <Assembly name>\n```\n\n----------------------------------------\n\nTITLE: Mapping Stored Procedures for an Entity (External File)\nDESCRIPTION: This code snippet is a reference to an external file named DocumentsContext.cs that contains the configuration for stored procedures. It represents the actual C# code for configuring stored procedures using EF Core's fluent API, using `InsertUsingStoredProcedure`, `UpdateUsingStoredProcedure`, and `DeleteUsingStoredProcedure`. This assumes the file contains logic similar to the first C# example but is located in a separate file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[PersonSprocs](../../../../samples/core/Miscellaneous/NewInEFCore7/DocumentsContext.cs?name=PersonSprocs)]\n```\n\n----------------------------------------\n\nTITLE: Querying Data with CosmosEventId.ExecutingSqlQuery\nDESCRIPTION: Demonstrates retrieving items from an Azure Cosmos DB database using a query and logging the `CosmosEventId.ExecutingSqlQuery` and `CosmosEventId.ExecutedReadNext` events.  This snippet shows how EF Core 6.0 tracks query execution and read operations. It showcases the logged information including the SQL query, container name, and request units.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nvar equilateral = context.Triangles.Single(e => e.Name == \"Equilateral\");\n```\n\n----------------------------------------\n\nTITLE: Defining DbContext - C#\nDESCRIPTION: This code defines a class `EnumTestContext` that inherits from `DbContext`. It also defines a `DbSet<Department>` property, allowing the Entity Framework to manage instances of the `Department` class. This DbContext class is essential for interacting with the database using Code First.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/enums.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Data.Entity;\n\npublic partial class EnumTestContext : DbContext\n{\n    public DbSet<Department> Departments { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying inherited entities using OfType - C#\nDESCRIPTION: This code snippet demonstrates how to query entities in an inheritance hierarchy using the OfType method in Entity Framework. It retrieves all Person objects, then filters them to get only Instructor and Student objects, printing their first and last names.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/inheritance/tph.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new SchoolEntities())\n    {\n        Console.WriteLine(\"All people:\");\n        foreach (var person in context.People)\n        {\n            Console.WriteLine(\"    {{0}} {{1}}\", person.FirstName, person.LastName);\n        }\n\n        Console.WriteLine(\"Instructors only: \");\n        foreach (var person in context.People.OfType<Instructor>())\n        {\n            Console.WriteLine(\"    {{0}} {{1}}\", person.FirstName, person.LastName);\n        }\n\n        Console.WriteLine(\"Students only: \");\n        foreach (var person in context.People.OfType<Student>())\n        {\n            Console.WriteLine(\"    {{0}} {{1}}\", person.FirstName, person.LastName);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Attaching Serialized Graph with System.Text.Json (C#)\nDESCRIPTION: This code snippet demonstrates attaching a serialized graph using `System.Text.Json` where duplicate references were resolved during serialization. The context's `UpdateRange` method is used to update the tracked objects from the JSON.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\n            var posts = System.Text.Json.JsonSerializer.Deserialize<List<Post>>(json);\n\n            context.UpdateRange(posts);\n\n            context.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of Term Update - SQL\nDESCRIPTION: This SQL code shows the translated SQL query for updating the `LastDay` column in the `Term` table. It includes a JOIN between the `Schools` and `Term` tables and a WHERE clause that filters based on the year of the `LastDay` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_116\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [t0]\nSET [t0].[LastDay] = DATEADD(day, CAST(1 AS int), [t0].[LastDay])\nFROM [Schools] AS [s]\nINNER JOIN [Term] AS [t0] ON [s].[Id] = [t0].[SchoolId]\nWHERE EXISTS (\n    SELECT 1\n    FROM [Term] AS [t]\n    WHERE [s].[Id] = [t].[SchoolId] AND DATEPART(year, [t].[LastDay]) = 2022)\n```\n\n----------------------------------------\n\nTITLE: Verifying Repository Interaction in Details Action (C#)\nDESCRIPTION: This test verifies that the `Details` action of an `EmployeeController` invokes the `FindById` method on the mock repository with the correct ID. It uses Moq's `Verify` method to ensure the interaction occurred as expected. The test relies on a base class for setup and uses a pre-defined `_detailsId`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\n    [TestClass]\n    public class EmployeeControllerDetailsActionTests\n               : EmployeeControllerTestBase {\n         // ...\n        [TestMethod]\n        public void ShouldInvokeRepositoryToFindEmployee() {\n            var result = _controller.Details(_detailsId);\n            _repository.Verify(r => r.FindById(_detailsId));\n        }\n        int _detailsId = 1;\n    }\n```\n\n----------------------------------------\n\nTITLE: NGen Install with EF and SQL Server\nDESCRIPTION: These commands generate native images for EntityFramework.SqlServer.dll, which also implicitly generates native images for EntityFramework.dll because it is a direct dependency. It uses both 32-bit and 64-bit versions of NGen to cover both architectures.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/ngen.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncd <Solution directory>\\packages\\EntityFramework.6.0.2\\lib\\net45\n%WINDIR%\\Microsoft.NET\\Framework\\v4.0.30319\\ngen install EntityFramework.SqlServer.dll\n%WINDIR%\\Microsoft.NET\\Framework64\\v4.0.30319\\ngen install EntityFramework.SqlServer.dll\n```\n\n----------------------------------------\n\nTITLE: Defining Function Return Type with Property Elements in CSDL\nDESCRIPTION: This XML snippet shows how to define the return type of a function using Property elements within a RowType and CollectionType in CSDL.  It specifies the structure of the data returned by the 'LastNamesAfter' function, including FirstName and LastName properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"LastNamesAfter\">\n   <Parameter Name=\"someString\" Type=\"Edm.String\" />\n   <ReturnType>\n    <CollectionType>\n      <RowType>\n        <Property Name=\"FirstName\" Type=\"Edm.String\" Nullable=\"false\" />\n        <Property Name=\"LastName\" Type=\"Edm.String\" Nullable=\"false\" />\n      </RowType>\n    </CollectionType>\n   </ReturnType>\n   <DefiningExpression>\n             SELECT VALUE ROW(p.FirstName, p.LastName)\n             FROM SchoolEntities.People AS p\n             WHERE p.LastName &gt;= somestring\n   </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Boolean Conversion Configuration C#\nDESCRIPTION: Configures all boolean properties to be converted to integers 0 or 1 in the database, using the `BoolToZeroOneConverter`. This provides a custom conversion for boolean values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nconfigurationBuilder\n    .Properties<bool>()\n    .HaveConversion<BoolToZeroOneConverter<int>>();\n```\n\n----------------------------------------\n\nTITLE: SelectMany Converted to Apply (C#)\nDESCRIPTION: This snippet illustrates SelectMany being translated to APPLY operations when the collection selector references the outer element outside of a where clause. The first example uses CROSS APPLY, and the second uses OUTER APPLY due to DefaultIfEmpty. Some databases like SQLite don't support APPLY operators.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Blogs\n    .SelectMany(b => context.Posts.Select(p => b.Url + \"=>\" + p.Title),\n        (b, p) => new { b, p });\n\n/*\n\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url], ([b].[Url] + N'=>') + [p].[Title] AS [p]\nFROM [Blogs] AS [b]\nCROSS APPLY [Posts] AS [p]\n*/\n\nvar query2 = context.Blogs\n    .SelectMany(b => context.Posts.Select(p => b.Url + \"=>\" + p.Title).DefaultIfEmpty(),\n        (b, p) => new { b, p });\n\n/*\n\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url], ([b].[Url] + N'=>') + [p].[Title] AS [p]\nFROM [Blogs] AS [b]\nOUTER APPLY [Posts] AS [p]\n*/\n```\n\n----------------------------------------\n\nTITLE: Update Database with Target Migration (Rollback) - PowerShell\nDESCRIPTION: This PowerShell command rolls back the database to a specific migration.  It is used in the process of updating the model snapshot in the last migration to resolve merge conflicts. This requires Entity Framework and the EntityFramework PowerShell module to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Database –TargetMigration <second_last_migration>\n```\n\n----------------------------------------\n\nTITLE: Compiled Model - RuntimeModelCache\nDESCRIPTION: This C# code snippet demonstrates how to implement a runtime model cache to select different compiled models based on the connection string. A `ConcurrentDictionary` stores the models, and the `GetOrCreateModel` method retrieves or creates the appropriate model instance based on connection string contents. Requires the `System.Collections.Concurrent` namespace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic static class RuntimeModelCache\n{\n    private static readonly ConcurrentDictionary<string, IModel> _runtimeModels\n        = new();\n\n    public static IModel GetOrCreateModel(string connectionString)\n        => _runtimeModels.GetOrAdd(\n            connectionString, cs =>\n                {\n                    if (cs.Contains(\"X\"))\n                    {\n                        return BlogsContextModel1.Instance;\n                    }\n\n                    if (cs.Contains(\"Y\"))\n                    {\n                        return BlogsContextModel2.Instance;\n                    }\n\n                    throw new InvalidOperationException(\"No appropriate compiled model found.\");\n                });\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Concurrent;\nusing Microsoft.EntityFrameworkCore;\n\n#nullable enable\n\nnamespace TestNamespace\n{\n    public static class RuntimeModelCache\n    {\n        private static readonly ConcurrentDictionary<string, IModel> _runtimeModels\n            = new();\n\n        public static IModel GetOrCreateModel(string connectionString)\n            => _runtimeModels.GetOrAdd(\n                connectionString,\n                connectionString,\n                static (string cs, string connectionString) =>\n                {\n                    if (cs.Contains(\"X\"))\n                    {\n                        return BlogsContextModel1.Instance;\n                    }\n\n                    if (cs.Contains(\"Y\"))\n                    {\n                        return BlogsContextModel2.Instance;\n                    }\n\n                    throw new InvalidOperationException(\"No appropriate compiled model found.\");\n                });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom MigrationsSqlGenerator for SQL Server in C#\nDESCRIPTION: This C# code overrides the SQL Server's `IMigrationsSqlGenerator` to handle the custom `CreateUserOperation`. It checks if the operation is a `CreateUserOperation` and generates the appropriate SQL command to create the user. It relies on the base class to handle other migration operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/operations.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Migrations.Operations;\nusing Microsoft.EntityFrameworkCore.Storage;\n\npublic class CustomSqlServerMigrationsSqlGenerator : SqlServerMigrationsSqlGenerator\n{\n    public CustomSqlServerMigrationsSqlGenerator(\n        MigrationsSqlGeneratorDependencies dependencies,\n        IRelationalTypeMappingSource typeMappingSource)\n        : base(dependencies, typeMappingSource)\n    {\n    }\n\n    protected override void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder)\n    {\n        if (operation is CreateUserOperation createUserOperation)\n        {\n            var sql = $\"CREATE USER [{createUserOperation.Name}] WITH PASSWORD = '{createUserOperation.Password}'\";\n            builder.Append(sql);\n            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);\n        }\n        else\n        {\n            base.Generate(operation, model, builder);\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Discriminator Length Convention (First Attempt) - C#\nDESCRIPTION: This convention implements IEntityTypeBaseTypeChangedConvention to be triggered when the inheritance hierarchy changes. It finds and configures the string discriminator property for the hierarchy, setting a maximum length of 24. This approach is sensitive to the order of convention execution and can be overridden by later explicit configurations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_67\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DiscriminatorLengthConvention1 : IEntityTypeBaseTypeChangedConvention\n{\n    public void ProcessEntityTypeBaseTypeChanged(\n        IConventionEntityTypeBuilder entityTypeBuilder,\n        IConventionEntityType? newBaseType,\n        IConventionEntityType? oldBaseType,\n        IConventionContext<IConventionEntityType> context)\n    {\n        var discriminatorProperty = entityTypeBuilder.Metadata.FindDiscriminatorProperty();\n        if (discriminatorProperty != null\n            && discriminatorProperty.ClrType == typeof(string))\n        {\n            discriminatorProperty.Builder.HasMaxLength(24);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query, Insert, and Update operations with SQL Logging\nDESCRIPTION: This snippet showcases a complete example of logging SQL generated from query, insert, and update operations. It retrieves a blog, updates a post title, adds a new post, and saves the changes, with all corresponding SQL commands logged to the console. Requires `BlogContext`, `Blogs`, and `Posts` to be defined.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BlogContext())\n{\n    context.Database.Log = Console.Write;\n\n    var blog = context.Blogs.First(b => b.Title == \"One Unicorn\");\n\n    blog.Posts.First().Title = \"Green Eggs and Ham\";\n\n    blog.Posts.Add(new Post { Title = \"I do not like them!\" });\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Canceled async SQL execution log example\nDESCRIPTION: Example log output showing a cancelled async sql execution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nupdate Blogs set Title = 'No' where Id = -1\n-- Executing asynchronously at 5/13/2013 10:21:10 AM\n-- Canceled in 1 ms\n```\n\n----------------------------------------\n\nTITLE: Add Object to Entity Collection in C#\nDESCRIPTION: This code snippet illustrates how to create a relationship by adding an object to an entity collection. In this example, a `newCourse` object is added to the `Courses` collection of a `department` object. This operation creates a relationship between the `course` and the `department`. If the objects are attached to the context, the department reference and the foreign key property on the `course` object will be set to the appropriate `department`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ndepartment.Courses.Add(newCourse);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Filter Configuration with Required Navigation in C#\nDESCRIPTION: This code snippet demonstrates an incorrect usage of global query filters with required navigation, leading to unexpected results.  The filter on `Blog` entities filters out blogs with URLs not containing 'fish'. Because `Post` has a required relationship to `Blog`, posts associated with these filtered-out blogs will also be excluded from queries when using `Include`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().HasQueryFilter(b => b.Url.Contains(\"fish\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Stored Procedures - C#\nDESCRIPTION: This code demonstrates how to call stored procedures from an Entity Framework context, including handling output parameters and iterating through results. It showcases calling GetStudentGrades (returning StudentGrades for a given StudentId) and GetDepartmentName (returning the department name via an output parameter).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/stored-procedures/query.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (SchoolEntities context = new SchoolEntities())\n    {\n        // Specify the Student ID.\n        int studentId = 2;\n\n        // Call GetStudentGrades and iterate through the returned collection.\n        foreach (StudentGrade grade in context.GetStudentGrades(studentId))\n        {\n            Console.WriteLine(\"StudentID: {0}\\tSubject={1}\", studentId, grade.Subject);\n            Console.WriteLine(\"Student grade: \" + grade.Grade);\n        }\n\n        // Call GetDepartmentName.\n        // Declare the name variable that will contain the value returned by the output parameter.\n        ObjectParameter name = new ObjectParameter(\"Name\", typeof(String));\n        context.GetDepartmentName(1, name);\n        Console.WriteLine(\"The department name is {0}\", name.Value);\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Relationships - EF Core - C#\nDESCRIPTION: This snippet illustrates how to remove a relationship between entities, triggering potential cascade delete behavior depending on the relationship's configuration. In this case, a cascade delete is configured between Blog and Post, so removing a Post's reference to a Blog will result in the Post being deleted from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/related-data.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BloggingContext();\nvar post = context.Posts.First();\ncontext.Posts.Remove(post);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: SQL Server Table Creation - SQL\nDESCRIPTION: SQL script that generates tables for Cat, Dog, FarmAnimal, and Human, based on the TPC inheritance strategy. Each table includes columns for the properties of the concrete class and its base classes. The script includes primary key constraints and default value for the Id column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_43\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Cats] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [FoodId] uniqueidentifier NULL,\n    [Vet] nvarchar(max) NULL,\n    [EducationLevel] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Cats] PRIMARY KEY ([Id]));\n\nCREATE TABLE [Dogs] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [FoodId] uniqueidentifier NULL,\n    [Vet] nvarchar(max) NULL,\n    [FavoriteToy] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Dogs] PRIMARY KEY ([Id]));\n\nCREATE TABLE [FarmAnimals] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [FoodId] uniqueidentifier NULL,\n    [Value] decimal(18,2) NOT NULL,\n    [Species] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_FarmAnimals] PRIMARY KEY ([Id]));\n\nCREATE TABLE [Humans] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [FoodId] uniqueidentifier NULL,\n    [FavoriteAnimalId] int NULL,\n    CONSTRAINT [PK_Humans] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Value Object Model (C#)\nDESCRIPTION: Defines an entity class `Order` containing an integer ID and a `Dollars` property named `Price`. This class demonstrates using value objects as properties of entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n\n    public Dollars Price { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Pluralizing Table Name Convention C#\nDESCRIPTION: This code shows how to remove the default `PluralizingTableNameConvention` from the model building process. This prevents Entity Framework from automatically pluralizing table names based on entity names.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(DbModelBuilder modelBuilder)\n{\n    modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Loading in ObjectContext (C#)\nDESCRIPTION: This code snippet shows how to enable lazy loading in the Entity Framework `ObjectContext`.  Setting `LazyLoadingEnabled` to `true` on the `ContextOptions` property allows related entities to be loaded on demand when accessed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SqlUnitOfWork : IUnitOfWork {\n         public SqlUnitOfWork() {\n             // ...\n             _context = new ObjectContext(connectionString);\n             _context.ContextOptions.LazyLoadingEnabled = true;\n         }\n         // ...\n     }\n```\n\n----------------------------------------\n\nTITLE: stringValue.Trim .NET to SQL translation\nDESCRIPTION: Explains how stringValue.Trim() in .NET translates to TRIM(@stringValue) in SQL within the Entity Framework Core and Cosmos DB context. It removes leading and trailing whitespace from a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_39\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Trim()\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[TRIM(@stringValue)](/azure/cosmos-db/nosql/query/trim)\n```\n\n----------------------------------------\n\nTITLE: ReturnType with Type Attribute in Function (CSDL, XML)\nDESCRIPTION: This code snippet demonstrates the use of the ReturnType element within a Function element, specifying the return type of the function using the Type attribute.  In this example, the function returns an Edm.Int32 representing the number of years a book has been in print.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"GetYearsInPrint\">\n   <ReturnType Type==\"Edm.Int32\">\n   <Parameter Name=\"book\" Type=\"BooksModel.Book\" />\n   <DefiningExpression>\n    Year(CurrentDateTime()) - Year(cast(book.PublishedDate as DateTime))\n   </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: SQL Server Insert Statements (EF Core 6)\nDESCRIPTION: This SQL output shows the insert statements generated by the previous C# code snippet, demonstrating that the `Breed` column is set to `NULL` for the cat named 'Mac' because its breed is `Breed.Unknown`. This assumes a SQL Server database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_144\n\nLANGUAGE: sql\nCODE:\n```\ninfo: 9/27/2021 19:43:55.966 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command)\n      Executed DbCommand (16ms) [Parameters=[@p0=NULL (Size = 4000), @p1='Mac' (Size = 4000)], CommandType='Text', CommandTimeout='30']\n      SET NOCOUNT ON;\n      INSERT INTO [Cats] ([Breed], [Name])\n      VALUES (@p0, @p1);\n      SELECT [Id]\n      FROM [Cats]\n      WHERE @@ROWCOUNT = 1 AND [Id] = scope_identity();\ninfo: 9/27/2021 19:43:55.983 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command)\n      Executed DbCommand (0ms) [Parameters=[@p0='Burmese' (Size = 4000), @p1='Clippy' (Size = 4000)], CommandType='Text', CommandTimeout='30']\n      SET NOCOUNT ON;\n      INSERT INTO [Cats] ([Breed], [Name])\n      VALUES (@p0, @p1);\n      SELECT [Id]\n      FROM [Cats]\n      WHERE @@ROWCOUNT = 1 AND [Id] = scope_identity();\ninfo: 9/27/2021 19:43:55.983 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command)\n      Executed DbCommand (0ms) [Parameters=[@p0='Tonkinese' (Size = 4000), @p1='Sid' (Size = 4000)], CommandType='Text', CommandTimeout='30']\n      SET NOCOUNT ON;\n      INSERT INTO [Cats] ([Breed], [Name])\n      VALUES (@p0, @p1);\n      SELECT [Id]\n      FROM [Cats]\n      WHERE @@ROWCOUNT = 1 AND [Id] = scope_identity();\n```\n\n----------------------------------------\n\nTITLE: ReferenceType as ReturnType in Function (CSDL, XML)\nDESCRIPTION: This code snippet demonstrates the use of the ReferenceType element as a child of a ReturnType element within a Function element. It specifies that the function returns a reference to a Person entity type from the SchoolModel.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"GetPersonReference\">\n     <Parameter Name=\"p\" Type=\"SchoolModel.Person\" />\n     <ReturnType>\n         <ReferenceType Type=\"SchoolModel.Person\" />\n     </ReturnType>\n     <DefiningExpression>\n           REF(p)\n     </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Passing Existing Transaction to Context - EF6 (C#)\nDESCRIPTION: This snippet shows how to pass an existing SQL transaction to a DbContext using Database.UseTransaction(). It opens a SqlConnection, begins a transaction, executes a SQL command, creates a DbContext with the existing connection and transaction, updates entities, saves changes, and commits the transaction.  The contextOwnsConnection flag is set to false to prevent the DbContext from closing the connection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/transactions.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Data.SqlClient;\nusing System.Linq;\nusing System.Transactions;\n\nnamespace TransactionsExamples\n{\n     class TransactionsExample\n     {\n        static void UsingExternalTransaction()\n        {\n            using (var conn = new SqlConnection(\"...\"))\n            {\n               conn.Open();\n\n               using (var sqlTxn = conn.BeginTransaction(System.Data.IsolationLevel.Snapshot))\n               {\n                   var sqlCommand = new SqlCommand();\n                   sqlCommand.Connection = conn;\n                   sqlCommand.Transaction = sqlTxn;\n                   sqlCommand.CommandText =\n                       \"UPDATE Blogs SET Rating = 5\" +\n                        \" WHERE Name LIKE '%Entity Framework%'\";\n                   sqlCommand.ExecuteNonQuery();\n\n                   using (var context =\n                     new BloggingContext(conn, contextOwnsConnection: false))\n                    {\n                        context.Database.UseTransaction(sqlTxn);\n\n                        var query =  context.Posts.Where(p => p.Blog.Rating >= 5);\n                        foreach (var post in query)\n                        {\n                            post.Title += \"[Cool Blog]\";\n                        }\n                       context.SaveChanges();\n                    }\n\n                    sqlTxn.Commit();\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Referential Constraint with PropertyRef Elements in CSDL\nDESCRIPTION: This XML snippet illustrates how to use PropertyRef elements to define referential constraints between two entities in CSDL. The example sets 'Id' and 'PublisherId' properties as principal and dependent ends of a relationship respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"PublishedBy\">\n   <End Type=\"BooksModel.Book\" Role=\"Book\" Multiplicity=\"*\" >\n   </End>\n   <End Type=\"BooksModel.Publisher\" Role=\"Publisher\" Multiplicity=\"1\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Publisher\">\n       <PropertyRef Name=\"Id\" />\n     </Principal>\n     <Dependent Role=\"Book\">\n       <PropertyRef Name=\"PublisherId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Defining an EnumType in CSDL (XML)\nDESCRIPTION: This example shows how to define an EnumType element in CSDL with three Member elements. It defines an enum named Color with members Red, Green, and Blue. The IsFlags attribute is set to false, indicating it's not a flags enum, and the UnderlyingTyp is set to Edm.Byte, specifying the underlying data type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n <EnumType Name=\"Color\" IsFlags=”false” UnderlyingTyp=”Edm.Byte”>\n   <Member Name=\"Red\" />\n   <Member Name=\"Green\" />\n   <Member Name=\"Blue\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Using TrackGraph API\nDESCRIPTION: This snippet demonstrates how to use the `TrackGraph` API to process a graph of entities based on a flag set on each entity. The flag indicates how each entity should be handled (Added, Modified, Unchanged, or Deleted). Requires an entity with a `State` property indicating its desired state.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static void TrackGraph(BloggingContext context, Blog blog)\n{\n    context.ChangeTracker.TrackGraph(blog, e =>\n    {\n        if (e.Entry.Entity is Post post)\n        {\n            switch (post.State)\n            {\n                case EntityState.Added:\n                    e.Entry.State = EntityState.Added;\n                    break;\n                case EntityState.Modified:\n                    e.Entry.State = EntityState.Modified;\n                    break;\n                case EntityState.Deleted:\n                    e.Entry.State = EntityState.Deleted;\n                    break;\n                default:\n                    e.Entry.State = EntityState.Unchanged;\n                    break;\n            }\n        }\n    });\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Element Example (MSL)\nDESCRIPTION: This example demonstrates the structure of a Mapping element in MSL, showing its Space attribute and child elements like Alias and EntityContainerMapping. It maps conceptual model objects to a database based on the School model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n <Mapping Space=\"C-S\"\n          xmlns=\"https://schemas.microsoft.com/ado/2009/11/mapping/cs\">\n   <Alias Key=\"c\" Value=\"SchoolModel\"/>\n   <EntityContainerMapping StorageEntityContainer=\"SchoolModelStoreContainer\"\n                           CdmEntityContainer=\"SchoolModelEntities\">\n     <EntitySetMapping Name=\"Courses\">\n       <EntityTypeMapping TypeName=\"c.Course\">\n         <MappingFragment StoreEntitySet=\"Course\">\n           <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n           <ScalarProperty Name=\"Title\" ColumnName=\"Title\" />\n           <ScalarProperty Name=\"Credits\" ColumnName=\"Credits\" />\n           <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n         </MappingFragment>\n       </EntityTypeMapping>\n     </EntitySetMapping>\n     <EntitySetMapping Name=\"Departments\">\n       <EntityTypeMapping TypeName=\"c.Department\">\n         <MappingFragment StoreEntitySet=\"Department\">\n           <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n           <ScalarProperty Name=\"Name\" ColumnName=\"Name\" />\n           <ScalarProperty Name=\"Budget\" ColumnName=\"Budget\" />\n           <ScalarProperty Name=\"StartDate\" ColumnName=\"StartDate\" />\n           <ScalarProperty Name=\"Administrator\" ColumnName=\"Administrator\" />\n         </MappingFragment>\n       </EntityTypeMapping>\n     </EntitySetMapping>\n   </EntityContainerMapping>\n </Mapping>\n```\n\n----------------------------------------\n\nTITLE: Projecting with JSON Array Indexing, Non-Nullable Result\nDESCRIPTION: This code snippet demonstrates projecting properties from a JSON array into the final result by filtering null values. The query checks `Metadata.Updates[0].UpdatedOn` and `Metadata.Updates[1].UpdatedOn` are not null before projecting.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nvar postsAndRecentUpdates = await context.Posts\n    .Where(p => p.Metadata!.Updates[0].UpdatedOn != null\n                && p.Metadata!.Updates[1].UpdatedOn != null)\n    .Select(p => new\n    {\n        p.Title,\n        LatestUpdate = p.Metadata!.Updates[0].UpdatedOn,\n        SecondLatestUpdate = p.Metadata.Updates[1].UpdatedOn\n    })\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of JSON Array Index Predicate\nDESCRIPTION: This SQL snippet shows the translated SQL query from the C# code for filtering using JSON array indexing. It uses `JSON_VALUE` to extract the `UpdatedOn` values at index 0 and 1 and compares them to the cutoff date.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_55\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE CAST(JSON_VALUE([p].[Metadata],'$.Updates[0].UpdatedOn') AS date) < @__cutoff_0\n  AND CAST(JSON_VALUE([p].[Metadata],'$.Updates[1].UpdatedOn') AS date) < @__cutoff_0\n```\n\n----------------------------------------\n\nTITLE: Serialize Posts and Blogs with Json.NET (Duplicates) - C#\nDESCRIPTION: This code serializes a list of posts, each with its associated blog, using Json.NET. By serializing Posts as the root and including the Blog navigation property, it introduces duplicate instances of Blog objects within the JSON structure. The `ReferenceLoopHandling.Ignore` setting prevents infinite loops.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\n            var posts = context.Posts.Include(e => e.Blog).ToList();\n\n            var serialized = JsonConvert.SerializeObject(\n                posts,\n                new JsonSerializerSettings\n                {\n                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore,\n                    Formatting = Formatting.Indented\n                });\n\n            Console.WriteLine(serialized);\n```\n\n----------------------------------------\n\nTITLE: Loading a Single Entity with EF Core and C#\nDESCRIPTION: This snippet demonstrates how to load a single entity from a database table using Entity Framework Core and LINQ. It queries the database context to retrieve the first entity that matches specified criteria. The code uses the `FirstOrDefault()` method to retrieve the entity or null if no entity matches.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/index.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Querying/Overview/Program.cs#LoadingSingleEntity)]\n```\n\n----------------------------------------\n\nTITLE: Disable AutoDetectChanges for Find method - C#\nDESCRIPTION: This code snippet demonstrates how to disable the AutoDetectChangesEnabled property of the DbContext configuration before using the Find method to improve performance when the object cache is large.  The AutoDetectChangesEnabled property is re-enabled afterwards to ensure change tracking is resumed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Configuration.AutoDetectChangesEnabled = false;\nvar product = context.Products.Find(productId);\ncontext.Configuration.AutoDetectChangesEnabled = true;\n...\n```\n\n----------------------------------------\n\nTITLE: Verifying Unit of Work Commit on Create Action (C#)\nDESCRIPTION: This test verifies that the `Create` action of an `EmployeeController` invokes the `Commit` method on the mock unit of work. It utilizes Moq's `Verify` method to ensure the commit method is called after creating a new employee.  It assumes the existence of `_controller` and `_unitOfWork` objects.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\n    [TestMethod]\n    public void ShouldCommitUnitOfWork() {\n        _controller.Create(_newEmployee);\n        _unitOfWork.Verify(u => u.Commit());\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Index on Property with Fluent API - EF6.1+ - C#\nDESCRIPTION: This snippet shows how to create an index on the `Name` property using the Fluent API, leveraging the `IndexAttribute` introduced in EF6.1.  It creates an `IndexAnnotation` from an `IndexAttribute` and applies it to the column, which is then converted into a database index during model creation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<Department>()\n    .Property(t => t.Name)\n    .HasColumnAnnotation(\"Index\", new IndexAnnotation(new IndexAttribute()));\n```\n\n----------------------------------------\n\nTITLE: Update TPT Name and Note Properties (Fails) C#\nDESCRIPTION: This snippet attempts to update both the `Note` (specific to `SpecialCustomerTpt`) and `Name` (inherited from `CustomerTpt`) properties in a single `ExecuteUpdateAsync` call. This fails in EF Core 8 because these properties are mapped to different tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_135\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.TptSpecialCustomers\n    .Where(e => e.Name == name)\n    .ExecuteUpdateAsync(s => s.SetProperty(b => b.Note, \"Noted\")\n        .SetProperty(b => b.Name, b => b.Name + \" (Noted)\"));\n```\n\n----------------------------------------\n\nTITLE: Blog Entity Class with NRTs C#\nDESCRIPTION: Defines the Blog entity class with a non-nullable collection of Post entities. This showcases how EF Core 6.0 scaffolds non-nullable reference types when NRT support is enabled in the project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_54\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Blog\n{\n    public Blog()\n    {\n        Posts = new HashSet<Post>();\n    }\n\n    public int Id { get; set; }\n    public string Name { get; set; } = null!;\n\n    public virtual ICollection<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext with DbSet Property C#\nDESCRIPTION: Demonstrates a DbContext with a DbSet property.  Prior to EF7, this would generate a CS8618 warning in C# with nullable reference types enabled. The EF7 diagnostic suppressor resolves this bogus warning. The property is set to a non-null value by EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_136\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SomeDbContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Generation on Add - Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to configure a string property to use generated values when no other non-null value is set using the fluent API in EF Core. It specifies that the `Id` property of the `Blog` entity should have its value generated on add.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<Blog>()\n    .Property(e => e.Id)\n    .ValueGeneratedOnAdd();\n```\n\n----------------------------------------\n\nTITLE: Nested Query with Joins - SQL\nDESCRIPTION: This SQL query is generated by the previous C# code. It shows the use of LEFT JOINs to load related entities from the `Posts` and `Comment` tables. Because of the nesting, no cartesian explosion occurs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[Id], [b].[Name], [t].[Id], [t].[BlogId], [t].[Title], [t].[Id0], [t].[Content], [t].[PostId]\nFROM [Blogs] AS [b]\nLEFT JOIN [Posts] AS [p] ON [b].[Id] = [p].[BlogId]\nLEFT JOIN [Comment] AS [c] ON [p].[Id] = [c].[PostId]\nORDER BY [b].[Id], [t].[Id]\n```\n\n----------------------------------------\n\nTITLE: string.Equals with Ordinal .NET to SQL translation\nDESCRIPTION: Explains how string.Equals with StringComparison.Ordinal in .NET maps to STRINGEQUALS in SQL when used with Entity Framework Core. This performs a case-sensitive ordinal comparison of two strings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_16\n\nLANGUAGE: .NET\nCODE:\n```\nstring.Equals(a, b, StringComparison.Ordinal)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[STRINGEQUALS(@a, @b)](/azure/cosmos-db/nosql/query/stringequals)\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of String.IndexOf\nDESCRIPTION: This SQL query represents the translated form of the C# code that uses String.IndexOf in an EF Core 7 query. It calculates the index of the substring 'Entity' within the Content column of the Posts table using CHARINDEX.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_124\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Title], CAST(CHARINDEX(N'Entity', [p].[Content]) AS int) - 1 AS [IndexOfEntity]\nFROM [Posts] AS [p]\nWHERE (CAST(CHARINDEX(N'Entity', [p].[Content]) AS int) - 1) > 0\n```\n\n----------------------------------------\n\nTITLE: DefiningQuery Element Example (SSDL)\nDESCRIPTION: This example demonstrates how to use the DefiningQuery element in SSDL to execute a SQL query directly against the database, effectively defining a database view within the storage model. The query selects table information from the INFORMATION_SCHEMA.TABLES system view.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Schema>\n  <EntitySet Name=\"Tables\" EntityType=\"Self.STable\">\n    <DefiningQuery>\n      SELECT  TABLE_CATALOG,\n              'test' as TABLE_SCHEMA,\n              TABLE_NAME\n      FROM    INFORMATION_SCHEMA.TABLES\n    </DefiningQuery>\n  </EntitySet>\n</Schema>\n```\n\n----------------------------------------\n\nTITLE: Inserting, Updating, or Deleting Graph with Find\nDESCRIPTION: This snippet demonstrates how to insert, update, or delete a graph of entities using the `Find` method and `SetValues` to manage changes. This approach helps manage relationships between entities and synchronizes changes with the database.  It requires careful setup of the data and entity relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static void InsertUpdateOrDeleteGraphWithFind(BloggingContext context, Blog clientBlog)\n{\n    var databaseBlog = context.Blogs.Include(e => e.Posts).SingleOrDefault(e => e.BlogId == clientBlog.BlogId);\n\n    if (databaseBlog == null)\n    {\n        context.Add(clientBlog);\n    }\n    else\n    {\n        // Update the blog\n        context.Entry(databaseBlog).CurrentValues.SetValues(clientBlog);\n\n        // Remove posts that are not in the client graph\n        foreach (var post in databaseBlog.Posts.ToList())\n        {\n            if (!clientBlog.Posts.Any(e => e.PostId == post.PostId))\n            {\n                context.Remove(post);\n            }\n        }\n\n        // Add or update posts\n        foreach (var post in clientBlog.Posts)\n        {\n            var databasePost = databaseBlog.Posts.SingleOrDefault(e => e.PostId == post.PostId);\n            if (databasePost == null)\n            {\n                databaseBlog.Posts.Add(post);\n            }\n            else\n            {\n                context.Entry(databasePost).CurrentValues.SetValues(post);\n            }\n        }\n    }\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Indexer Property - EF Core (C#)\nDESCRIPTION: This snippet showcases how to configure an indexer property using the Fluent API in EF Core.  The `Blog` class is assumed to have an indexer defined, which EF Core utilizes to create an indexer property, configured with `EntityTypeBuilder.IndexerProperty`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/shadow-properties.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .IndexerProperty<DateTime?>(\"Values\");\n}\n```\n\n----------------------------------------\n\nTITLE: Program Execution Example C#\nDESCRIPTION: This code snippet demonstrates how to register the DiagnosticListener, create a database context, ensure the database is created, add and modify data, and save changes. The diagnostic listener will then output the corresponding events to the console during the execution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/diagnostic-listeners.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static void Main()\n{\n    #region RegisterDiagnosticListener\n    DiagnosticListener.AllListeners.Subscribe(new DiagnosticObserver());\n    #endregion\n\n    using (var context = new BlogsContext())\n    {\n        context.Database.EnsureDeleted();\n        context.Database.EnsureCreated();\n\n        context.Add(\n            new Blog\n            {\n                Name = \"EF Blog\",\n                Posts =\n                {\n                    new Post { Title = \"EF Core 3.1!\" },\n                    new Post { Title = \"EF Core 5.0!\" }\n                }\n            });\n\n        context.SaveChanges();\n    }\n\n    using (var context = new BlogsContext())\n    {\n        var blog = context.Blogs.Include(e => e.Posts).Single();\n\n        blog.Name = \"EF Core Blog\";\n        context.Remove(blog.Posts.First());\n        blog.Posts.Add(new Post { Title = \"EF Core 6.0!\" });\n\n        context.SaveChanges();\n    }\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: string.Concat .NET to SQL translation\nDESCRIPTION: Illustrates how string.Concat in .NET is translated to the concatenation operator (+) in SQL for Entity Framework Core. This combines two strings into a single string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_15\n\nLANGUAGE: .NET\nCODE:\n```\nstring.Concat(str0, str1)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n@str0 + @str1\n```\n\n----------------------------------------\n\nTITLE: Compiled Model - RuntimeModel\nDESCRIPTION: This C# code snippet represents a partial class for the compiled model that inherits from `RuntimeModel`. It uses the singleton pattern to ensure only one instance of the model exists.  The `Initialize` and `Customize` methods are declared as partial, allowing for customization of the model during bootstrapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[DbContext(typeof(BlogsContext))]\npartial class BlogsContextModel : RuntimeModel\n{\n    private static BlogsContextModel _instance;\n    public static IModel Instance\n    {\n        get\n        {\n            if (_instance == null)\n            {\n                _instance = new BlogsContextModel();\n                _instance.Initialize();\n                _instance.Customize();\n            }\n\n            return _instance;\n        }\n    }\n\n    partial void Initialize();\n\n    partial void Customize();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Metadata;\nusing Microsoft.EntityFrameworkCore.Metadata.Internal;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing TestNamespace;\n\n#nullable disable\n\nnamespace TestNamespace\n{\n    [DbContext(typeof(BlogContext))]\n    [Annotation(\"ProductVersion\", \"7.0.9\")]\n    [Annotation(\"Relational:MaxIdentifierLength\", 63)]\n    [Annotation(\"Npgsql:ValueGenerationStrategy\", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)]\n    partial class BlogContextModel : RuntimeModel\n    {\n        private static BlogContextModel _instance;\n        public static IModel Instance\n        {\n            get\n            {\n                if (_instance == null)\n                {\n                    _instance = new BlogContextModel();\n                    _instance.Initialize();\n                    _instance.Customize();\n                }\n\n                return _instance;\n            }\n        }\n\n        static partial void Initialize();\n\n        partial void Customize();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Customer, PhoneNumbers, and Addresses tables in SQL Server\nDESCRIPTION: This SQL script creates three tables in SQL Server: Customers, PhoneNumbers, and Addresses. The PhoneNumbers and Addresses tables have foreign key relationships to the Customers table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_165\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Customers] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Customers] PRIMARY KEY ([Id])\n);\n    \nCREATE TABLE [PhoneNumbers] (\n    [CustomerId] int NOT NULL,\n    [PhoneNumber] nvarchar(max) NULL,\n    CONSTRAINT [PK_PhoneNumbers] PRIMARY KEY ([CustomerId]),\n    CONSTRAINT [FK_PhoneNumbers_Customers_CustomerId] FOREIGN KEY ([CustomerId]) REFERENCES [Customers] ([Id]) ON DELETE CASCADE\n);\n\nCREATE TABLE [Addresses] (\n    [CustomerId] int NOT NULL,\n    [Street] nvarchar(max) NOT NULL,\n    [City] nvarchar(max) NOT NULL,\n    [PostCode] nvarchar(max) NULL,\n    [Country] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Addresses] PRIMARY KEY ([CustomerId]),\n    CONSTRAINT [FK_Addresses_Customers_CustomerId] FOREIGN KEY ([CustomerId]) REFERENCES [Customers] ([Id]) ON DELETE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Explicit Many-to-Many Join Entity C# (Classes)\nDESCRIPTION: This code adds explicit join entity classes for many-to-many relationships. This mitigates the change where simple join tables are no longer automatically mapped to explicit entity types. Partial classes are used to add the join entity and navigation properties to the `Post`, `Tag`, and `PostTag` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class PostTag\n{\n    public int PostsId { get; set; }\n    public int TagsId { get; set; }\n\n    public virtual Post Posts { get; set; }\n    public virtual Tag Tags { get; set; }\n}\n\npublic partial class Post\n{\n    public virtual ICollection<PostTag> PostTags { get; set; }\n}\n\npublic partial class Tag\n{\n    public virtual ICollection<PostTag> PostTags { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Employee Test Data in C#\nDESCRIPTION: This static class uses the object mother pattern to create a collection of Employee objects for use in unit tests.  It returns an IEnumerable<Employee> containing three sample employee instances with predefined properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class EmployeeObjectMother {\n    \tpublic static IEnumerable<Employee> CreateEmployees() {\n    \t\tyield return new Employee() {\n    \t\t\tId = 1, Name = \"Scott\", HireDate=new DateTime(2002, 1, 1)\n    \t\t};\n    \t\tyield return new Employee() {\n    \t\t\tId = 2, Name = \"Poonam\", HireDate=new DateTime(2001, 1, 1)\n    \t\t};\n    \t\tyield return new Employee() {\n    \t\t\tId = 3, Name = \"Simon\", HireDate=new DateTime(2008, 1, 1)\n    \t\t};\n    \t}\n    \t// ... more fake data for different scenarios\n    }\n```\n\n----------------------------------------\n\nTITLE: Force Client-Side Evaluation in EF Core\nDESCRIPTION: This code snippet shows how to force client-side evaluation of an expression in an EF Core query by splitting the Select expression into two parts separated by AsEnumerable(). This is used as a mitigation when SQLite math functions are not available.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n// Before\nvar query = dbContext.Cylinders\n    .Select(\n        c => new\n        {\n            Id = c.Id\n            // May throw \"no such function: pow\"\n            Volume = Math.PI * Math.Pow(c.Radius, 2) * c.Height\n        });\n\n// After\nvar query = dbContext.Cylinders\n    // Select the properties you'll need from the database\n    .Select(\n        c => new\n        {\n            c.Id,\n            c.Radius,\n            c.Height\n        })\n    // Switch to client-eval\n    .AsEnumerable()\n    // Select the final results\n    .Select(\n        c => new\n        {\n            Id = c.Id,\n            Volume = Math.PI * Math.Pow(c.Radius, 2) * c.Height\n        });\n```\n\n----------------------------------------\n\nTITLE: Client-side Async LINQ with AsAsyncEnumerable\nDESCRIPTION: This code demonstrates how to execute part of a LINQ query on the server (database) and then continue with client-side operations asynchronously using `AsAsyncEnumerable`. This is useful when certain operations cannot be translated to SQL. Requires importing necessary namespaces and potentially the System.Linq.Async package for older .NET versions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/async.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = context.Blogs\n    .Where(b => b.Rating > 3) // server-evaluated (translated to SQL)\n    .AsAsyncEnumerable()\n    .Where(b => SomeLocalFunction(b)); // client-evaluated (in .NET)\n\nawait foreach (var blog in blogs)\n{\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Script Migration to InitialCreate (by name) PowerShell\nDESCRIPTION: Generates a SQL script for the InitialCreate migration, starting from a database without any migrations (migration 0). It uses the migration name to identify the target migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nScript-Migration 0 InitialCreate\n```\n\n----------------------------------------\n\nTITLE: Composite Primary Key with Attribute\nDESCRIPTION: This snippet demonstrates how to define a composite primary key using the PrimaryKey attribute in EF Core 7. The PrimaryKey attribute is placed on the entity type class and takes the names of the properties that make up the key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_155\n\nLANGUAGE: C#\nCODE:\n```\n[PrimaryKey(nameof(PostId), nameof(CommentId))]\npublic class Comment\n{\n    public int PostId { get; set; }\n    public int CommentId { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Sum and Navigation SQL\nDESCRIPTION: This SQL code translates the C# query of Grouping by first name and summing Feet size.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_74\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[FirstName] AS [Feet], COALESCE(SUM([f].[Size]), 0) AS [Total]\nFROM [People] AS [p]\nLEFT JOIN [Feet] AS [f] ON [p].[Id] = [f].[Id]\nGROUP BY [p].[FirstName]\n```\n\n----------------------------------------\n\nTITLE: Get Table Name with Pluralization C#\nDESCRIPTION: This method takes a Type object and returns a pluralized string that converts the type name from CamelCase to lowercase with underscores. It uses the `IPluralizationService` to ensure correct pluralization before applying the naming convention.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nprivate string GetTableName(Type type)\n{\n    var pluralizationService = DbConfiguration.DependencyResolver.GetService<IPluralizationService>();\n\n    var result = pluralizationService.Pluralize(type.Name);\n\n    result = Regex.Replace(result, \".[A-Z]\", m => m.Value[0] + \"_\" + m.Value[1]);\n\n    return result.ToLower();\n}\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure for Updating Course\nDESCRIPTION: This SQL snippet defines a stored procedure named 'UpdateCourse' that updates the Course table. The procedure takes parameters for CourseID, Title, Credits, and DepartmentID. This stored procedure is used in conjunction with the AssociationEnd element in the MSL to map modification functions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n CREATE PROCEDURE [dbo].[UpdateCourse]\n                                @CourseID int,\n                                @Title nvarchar(50),\n                                @Credits int,\n                                @DepartmentID int\n                                AS\n                                UPDATE Course SET Title=@Title,\n                                                              Credits=@Credits,\n                                                              DepartmentID=@DepartmentID\n                                WHERE CourseID=@CourseID;\n```\n\n----------------------------------------\n\nTITLE: ResultBinding Element Example (XML)\nDESCRIPTION: This XML snippet demonstrates the use of the ResultBinding element within an InsertFunction element to map the value returned by the \"InsertPerson\" stored procedure's \"NewPersonID\" column to the \"PersonID\" property of the \"SchoolModel.Person\" entity type. This is used when the stored procedure returns the identity value of a newly inserted row.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_34\n\nLANGUAGE: XML\nCODE:\n```\n <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n   <ModificationFunctionMapping>\n     <InsertFunction FunctionName=\"SchoolModel.Store.InsertPerson\">\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ParameterName=\"EnrollmentDate\" />\n       <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\" />\n       <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\" />\n       <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\" />\n       <ResultBinding Name=\"PersonID\" ColumnName=\"NewPersonID\" />\n     </InsertFunction>\n     <UpdateFunction FunctionName=\"SchoolModel.Store.UpdatePerson\">\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ParameterName=\"EnrollmentDate\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\"\n                       Version=\"Current\" />\n       <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\"\n                       Version=\"Current\" />\n     </UpdateFunction>\n     <DeleteFunction FunctionName=\"SchoolModel.Store.DeletePerson\">\n       <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\" />\n     </DeleteFunction>\n   </ModificationFunctionMapping>\n </EntityTypeMapping>\n```\n\n----------------------------------------\n\nTITLE: Creating InsertPerson Stored Procedure in SQL\nDESCRIPTION: This SQL script creates a stored procedure named 'InsertPerson'. It inserts new records into the 'Person' table using parameters such as 'LastName', 'FirstName', 'HireDate', 'EnrollmentDate', and 'Discriminator'. The procedure also returns the newly generated 'PersonID' using SCOPE_IDENTITY().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[InsertPerson]')\nAND type in (N'P', N'PC'))\nBEGIN\nEXEC dbo.sp_executesql @statement = N'\nCREATE PROCEDURE [dbo].[InsertPerson]\n@LastName nvarchar(50),\n@FirstName nvarchar(50),\n@HireDate datetime,\n@EnrollmentDate datetime,\n@Discriminator nvarchar(50)\nAS\nINSERT INTO dbo.Person (LastName,\nFirstName,\nHireDate,\nEnrollmentDate,\nDiscriminator)\nVALUES (@LastName,\n@FirstName,\n@HireDate,\n@EnrollmentDate,\n@Discriminator);\nSELECT SCOPE_IDENTITY() as NewPersonID;\n'\nEND\nGO\n```\n\n----------------------------------------\n\nTITLE: Negated Nullable Comparison Filter - SQL (EF8)\nDESCRIPTION: This SQL query shows the output generated by EF Core 8 for the negated nullable comparison filter. Notice that it filters out entities where `NullableIntOne` or `NullableIntTwo` are null, which is inconsistent with C# semantics.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_54\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [e].[NullableIntOne], [e].[NullableIntTwo]\nFROM [Entities] AS [e]\nWHERE NOT ([e].[NullableIntOne] > [e].[NullableIntTwo])\n```\n\n----------------------------------------\n\nTITLE: Define Conceptual Model Function Import (CSDL)\nDESCRIPTION: This XML code snippet defines a function import named 'GetStudentGrades' in the conceptual model (CSDL) for the School model. It specifies the function import's properties, including its name, entity set, return type (a collection of 'SchoolModel.StudentGrade'), and a single input parameter 'StudentID' of type Int32.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n <FunctionImport Name=\"GetStudentGrades\" EntitySet=\"StudentGrades\"\n                 ReturnType=\"Collection(SchoolModel.StudentGrade)\">\n   <Parameter Name=\"StudentID\" Mode=\"In\" Type=\"Int32\" />\n </FunctionImport>\n```\n\n----------------------------------------\n\nTITLE: MappingFragment Element Example 2 (MSL)\nDESCRIPTION: This example shows a MappingFragment element as a child of an EntitySetMapping element, mapping properties of the Course type to columns in the Course table. It emphasizes the alternative structure where MappingFragment is directly under EntitySetMapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"Courses\" TypeName=\"SchoolModel.Course\">\n     <MappingFragment StoreEntitySet=\"Course\">\n       <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n       <ScalarProperty Name=\"Title\" ColumnName=\"Title\" />\n       <ScalarProperty Name=\"Credits\" ColumnName=\"Credits\" />\n       <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n     </MappingFragment>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Composite Foreign Key Index Example\nDESCRIPTION: This SQL code shows how an index is created covering multiple foreign key columns (ContainingBlogId1 and ContainingBlogId2) in the Post table. This is used for composite foreign keys.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX \"IX_Post_ContainingBlogId1_ContainingBlogId2\" ON \"Post\" (\"ContainingBlogId1\", \"ContainingBlogId2\");\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statement for Order with Addresses\nDESCRIPTION: This SQL code shows the generated INSERT statement for saving an order with billing and shipping addresses. The columns for both address instances are flattened and included directly in the `Orders` table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO [Orders] ([Contents], [CustomerId],\n    [BillingAddress_City], [BillingAddress_Country], [BillingAddress_Line1], [BillingAddress_Line2], [BillingAddress_PostCode],\n    [ShippingAddress_City], [ShippingAddress_Country], [ShippingAddress_Line1], [ShippingAddress_Line2], [ShippingAddress_PostCode])\nOUTPUT INSERTED.[Id]\nVALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);\n```\n\n----------------------------------------\n\nTITLE: Decimal Property Conversion to Double in EF Core\nDESCRIPTION: This code snippet demonstrates how to configure an entity property of type `decimal` to be stored as a `double` in the database using a value converter. This is a workaround for SQLite's limited support for the `decimal` type, improving compatibility without losing all precision.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/limitations.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<MyEntity>()\n    .Property(e => e.DecimalProperty)\n    .HasConversion<double>();\n```\n\n----------------------------------------\n\nTITLE: stringValue.Contains with OrdinalIgnoreCase .NET to SQL translation\nDESCRIPTION: Shows how stringValue.Contains with StringComparison.OrdinalIgnoreCase in .NET corresponds to CONTAINS in SQL within the context of Entity Framework Core. This determines if a string contains a specified substring with case insensitive check. EF Core 9.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_20\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Contains(value, StringComparison.OrdinalIgnoreCase)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[CONTAINS(@stringValue, @value, true)](/azure/cosmos-db/nosql/query/contains)\n```\n\n----------------------------------------\n\nTITLE: Defining Keyless Entity Type with Data Annotations (C#)\nDESCRIPTION: This snippet demonstrates how to define a keyless entity type using data annotations in EF Core.  The `[Keyless]` attribute is used to indicate that the entity does not have a key. This allows querying data without a primary key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keyless-entity-types.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace KeylessEntityTypes.Model\n{\n    [Keyless]\n    public class MostPopularBlogs\n    {\n        public string BlogName { get; set; }\n        public int PostCount { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Portion of a File as a Snippet by Line Numbers\nDESCRIPTION: This code snippet demonstrates how to render a specific portion of a code file as a snippet using line numbers. The `range` parameter specifies the lines to be included in the snippet. This method is discouraged in favor of using regions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/saving/Program.cs?range=1-10]\n```\n\n----------------------------------------\n\nTITLE: Configure Immutable Struct Property\nDESCRIPTION: This code snippet demonstrates how to configure a property of type `SomeImmutableStruct` using the Entity Framework Core fluent API. No special comparer or conversion is required for immutable structs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-comparers.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nentity.Property(e => e.SomeImmutableStruct);\n```\n\n----------------------------------------\n\nTITLE: Install EntityFramework Version 4.3.0 using Package Manager Console\nDESCRIPTION: This snippet demonstrates how to install Entity Framework version 4.3.0 using the Package Manager Console.  It is used when targeting EF4.x. This requires the NuGet Package Manager to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/select-runtime-version.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package EntityFramework -version 4.3.0\n```\n\n----------------------------------------\n\nTITLE: Create Tables for Many-to-Many - SQL\nDESCRIPTION: This SQL script creates three tables: `Tags`, `Posts`, and `PostTag`. The `PostTag` table is a join table connecting `Posts` and `Tags` in a many-to-many relationship. Primary and foreign key constraints are defined to enforce referential integrity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Tags] (\n  [Id] int NOT NULL IDENTITY,\n  [Name] nvarchar(max) NOT NULL,\n  [Description] nvarchar(max) NULL,\n  CONSTRAINT [PK_Tags] PRIMARY KEY ([Id]));\n\nCREATE TABLE [Posts] (\n    [Id] int NOT NULL IDENTITY,\n    [Title] nvarchar(max) NOT NULL,\n    [Contents] nvarchar(max) NOT NULL,\n    [PostedOn] datetime2 NOT NULL,\n    [UpdatedOn] datetime2 NULL,\n    CONSTRAINT [PK_Posts] PRIMARY KEY ([Id]));\n\nCREATE TABLE [PostTag] (\n    [PostsId] int NOT NULL,\n    [TagsId] int NOT NULL,\n    CONSTRAINT [PK_PostTag] PRIMARY KEY ([PostsId], [TagsId]),\n    CONSTRAINT [FK_PostTag_Posts_TagsId] FOREIGN KEY ([TagsId]) REFERENCES [Tags] ([Id]) ON DELETE CASCADE,\n    CONSTRAINT [FK_PostTag_Tags_PostsId] FOREIGN KEY ([PostsId]) REFERENCES [Posts] ([Id]) ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Create Tags Table - SQL\nDESCRIPTION: This SQL script creates a `Tags` table with columns for `Id`, `Name` (non-nullable), and `Description` (nullable). The `Id` column is the primary key and is configured as an identity column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Tags] (\n  [Id] int NOT NULL IDENTITY,\n  [Name] nvarchar(max) NOT NULL,\n  [Description] nvarchar(max) NULL,\n  CONSTRAINT [PK_Tags] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Ignoring AmbientTransactionWarning in EF Core C#\nDESCRIPTION: This code snippet demonstrates how to ignore the AmbientTransactionWarning in EF Core using the ConfigureWarnings method in the OnConfiguring method.  This prevents the warning from being treated as an error and throwing an exception. This configuration can be used to suppress specific warnings when they are not indicative of actual errors in the application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .ConfigureWarnings(b => b.Ignore(RelationalEventId.AmbientTransactionWarning));\n```\n\n----------------------------------------\n\nTITLE: Specifying Null Navigation Property - C#\nDESCRIPTION: This code snippet demonstrates how to explicitly pass `null` for the navigation property name when configuring relationships using strings for type names in EF Core. This replicates the behavior of EF Core versions prior to 3.0, where a single string argument to `HasOne` or `HasMany` was interpreted differently.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Samurai>().HasOne(\"Some.Entity.Type.Name\", null).WithOne();\n```\n\n----------------------------------------\n\nTITLE: Principal Type Principal Key FK Naming Convention in C#\nDESCRIPTION: This snippet demonstrates the `<principal entity type name><principal key property name>` naming convention. `Post.BlogKey` is discovered as a foreign key as it follows this pattern.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Key { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public int? BlogKey { get; set; }\n    public Blog? TheBlog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Property as Modified - EF6 C#\nDESCRIPTION: This snippet demonstrates how to explicitly mark a property as modified, forcing an update to the database even if the current value is the same as the original value. It utilizes both lambda expressions and strings for property name specification.  It requires a `BloggingContext` and a `Blog` entity with a `Name` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n\n    context.Entry(blog).Property(u => u.Name).IsModified = true;\n\n    // Use a string for the property name\n    context.Entry(blog).Property(\"Name\").IsModified = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Define Entities with Navigation Properties and Alternate Keys\nDESCRIPTION: Defines the Post, Tag, and PostTag entities with navigation properties and alternate keys. The PostTag entity is explicitly defined as a class, and it contains navigation properties to Post and Tag, establishing a many-to-many relationship. Each entity contains an AlternateKey property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public int AlternateKey { get; set; }\n    public List<Tag> Tags { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public int AlternateKey { get; set; }\n    public List<Post> Posts { get; } = new();\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostId { get; set; }\n    public int TagId { get; set; }\n    public Post Post { get; set; } = null!;\n    public Tag Tag { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: LINQ Query with Partition Key Filtering in EF Core\nDESCRIPTION: This snippet demonstrates a LINQ query that includes partition key properties in the Where clause. EF Core automatically extracts these partition key comparisons to optimize query execution against Azure Cosmos DB. It assumes the Session entity has a hierarchical partition key defined by TenantId, UserId, and SessionId.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tenantId = \"Microsoft\";\nvar userId = new Guid(\"99A410D7-E467-4CC5-92DE-148F3FC53F4C\");\nvar username = \"scott\";\n\nvar sessions = await context.Sessions\n    .Where(\n        e => e.TenantId == tenantId\n             && e.UserId == userId\n             && e.SessionId > 0\n             && e.Username == username)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Strategy in ASP.NET Core - C#\nDESCRIPTION: This snippet illustrates how to configure an execution strategy for connection resiliency in an ASP.NET Core application's `Startup.cs`. It registers the `DbContext` with the dependency injection container and configures the `UseSqlServer` provider with the `EnableRetryOnFailure` option, enabling retries on transient SQL Server failures. The connection string needs to be provided. This is done inside the `ConfigureServices` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-resiliency.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext<PicnicContext>(\n        options => options.UseSqlServer(\n            \"<connection string>\",\n            providerOptions => providerOptions.EnableRetryOnFailure()));\n}\n```\n\n----------------------------------------\n\nTITLE: Update PackageReference Metadata - EF Core Design\nDESCRIPTION: This XML snippet shows how to modify the PackageReference for Microsoft.EntityFrameworkCore.Design in a project file. It removes the IncludeAssets attribute to allow compiling against the assembly and overriding design-time services.  This allows explicit referencing of types within the Microsoft.EntityFrameworkCore.Design package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/services.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"3.1.9\">\n  <PrivateAssets>all</PrivateAssets>\n  <!-- Remove IncludeAssets to allow compiling against the assembly -->\n  <!--<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>-->\n</PackageReference>\n```\n\n----------------------------------------\n\nTITLE: Implement Custom Context Factory - C#\nDESCRIPTION: Creates a custom context factory that gets a pooled context from the Singleton factory and injects the tenant ID into the context instances.  This ensures that each context instance is properly scoped with the correct tenant ID. Requires resolving the `ITenant` service.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace AspNetContextPoolingWithState;\n\npublic class WeatherForecastScopedFactory : IDbContextFactory<WeatherForecastContext>\n{\n    private readonly PooledDbContextFactory<WeatherForecastContext> _pooledContextFactory;\n    private readonly ITenant _tenant;\n\n    public WeatherForecastScopedFactory(PooledDbContextFactory<WeatherForecastContext> pooledContextFactory, ITenant tenant)\n    {\n        _pooledContextFactory = pooledContextFactory;\n        _tenant = tenant;\n    }\n\n    public WeatherForecastContext CreateDbContext()\n    {\n        var context = _pooledContextFactory.CreateDbContext();\n        context.TenantId = _tenant.TenantId;\n        return context;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolded Entity Types with Database Names\nDESCRIPTION: These C# classes show the entity types scaffolded from the SQL sample tables when using the `-UseDatabaseNames` / `--use-database-names` option. Note that the table and column names are preserved as they are in the database, except for invalid .NET identifiers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class BLOG\n{\n    public int ID { get; set; }\n    public string Blog_Name { get; set; } = null!;\n    public virtual ICollection<post> posts { get; set; } = new List<post>();\n}\n\npublic partial class post\n{\n    public int id { get; set; }\n    public string postTitle { get; set; } = null!;\n    public string post_content { get; set; } = null!;\n    public DateTime _1_PublishedON { get; set; }\n    public DateTime? _2_DeletedON { get; set; }\n    public int BlogID { get; set; }\n    public virtual BLOG Blog { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Tracking Proxies in EF Core (C#)\nDESCRIPTION: This code snippet shows how to configure EF Core to use change-tracking proxies. It overrides the OnConfiguring method of a DbContext to enable change tracking proxies using the UseChangeTrackingProxies extension method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.UseChangeTrackingProxies();\n```\n\n----------------------------------------\n\nTITLE: Insert Tokens with and without Explicit DateTime Values\nDESCRIPTION: Inserts two Token entities into the database. The first entity's ValidFrom property is not explicitly set, so it will use the database default. The second entity's ValidFrom property is explicitly set.  This demonstrates how EF Core uses database defaults when explicit values are not provided.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\ncontext.AddRange(\n    new Token { Name = \"A\" },\n    new Token { Name = \"B\", ValidFrom = new DateTime(1111, 11, 11, 11, 11, 11)});\n\ncontext.SaveChanges();\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Unsupported Queryable Collection in Projection C#\nDESCRIPTION: This code demonstrates the old behavior where a collection of a Queryable type could be used inside a projection.  This code attempts to create a `List<Post>` from a `context.Posts.Where()` result, which is a queryable object.  This is no longer supported.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Blogs\n    .Select(b => new List<Post>(context.Posts.Where(p => p.BlogId == b.Id)))\n```\n\n----------------------------------------\n\nTITLE: Simple Addition Method in C#\nDESCRIPTION: This C# code defines a simple method `Add` that takes two integers as input and returns their sum. The method is easily testable because it directly returns the result of the calculation, making it easy to observe the output for given inputs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    public int Add(int x, int y) {\n    \treturn x + y;\n    }\n```\n\n----------------------------------------\n\nTITLE: Get Current Value of Post Code - C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the current value of a specific property (PostCode) within a complex type (BillingAddress) using Entity Framework Core. It navigates through the ComplexProperty to access the desired property and retrieves its CurrentValue.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nvar postCode = context.Entry(order)\n    .ComplexProperty(e => e.BillingAddress)\n    .Property(e => e.PostCode)\n    .CurrentValue;\n```\n\n----------------------------------------\n\nTITLE: Inserting data into the Person Table using SQL\nDESCRIPTION: This SQL script inserts sample data into the 'Person' table. It includes fields such as 'PersonID', 'LastName', 'FirstName', 'HireDate', 'EnrollmentDate', and 'Discriminator'. The script begins by setting 'IDENTITY_INSERT' to ON to allow explicit insertion of values into the identity column 'PersonID'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nUSE School\nGO\nSET IDENTITY_INSERT dbo.Person ON\nGO\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (1, 'Abercrombie', 'Kim', '1995-03-11', null, 'Instructor');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (2, 'Barzdukas', 'Gytis', null, '2005-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (3, 'Justice', 'Peggy', null, '2001-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (4, 'Fakhouri', 'Fadi', '2002-08-06', null, 'Instructor');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (5, 'Harui', 'Roger', '1998-07-01', null, 'Instructor');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (6, 'Li', 'Yan', null, '2002-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (7, 'Norman', 'Laura', null, '2003-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (8, 'Olivotto', 'Nino', null, '2005-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (9, 'Tang', 'Wayne', null, '2005-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (10, 'Alonso', 'Meredith', null, '2002-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (11, 'Lopez', 'Sophia', null, '2004-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (12, 'Browning', 'Meredith', null, '2000-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (13, 'Anand', 'Arturo', null, '2003-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (14, 'Walker', 'Alexandra', null, '2000-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (15, 'Powell', 'Carson', null, '2004-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (16, 'Jai', 'Damien', null, '2001-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (17, 'Carlson', 'Robyn', null, '2005-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (18, 'Zheng', 'Roger', '2004-02-12', null, 'Instructor');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (19, 'Bryant', 'Carson', null, '2001-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (20, 'Suarez', 'Robyn', null, '2004-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (21, 'Holt', 'Roger', null, '2004-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (22, 'Alexander', 'Carson', null, '2005-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (23, 'Morgan', 'Isaiah', null, '2001-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (24, 'Martin', 'Randall', null, '2005-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (25, 'Kapoor', 'Candace', '2001-01-15', null, 'Instructor');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (26, 'Rogers', 'Cody', null, '2002-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (27, 'Serrano', 'Stacy', '1999-06-01', null, 'Instructor');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (28, 'White', 'Anthony', null, '2001-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (29, 'Griffin', 'Rachel', null, '2004-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (30, 'Shan', 'Alicia', null, '2003-09-01', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (31, 'Stewart', 'Jasmine', '1997-10-12', null, 'Instructor');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (32, 'Xu', 'Kristen', '2001-7-23', null, 'Instructor');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (33, 'Gao', 'Erica', null, '2003-01-30', 'Student');\nINSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate, Discriminator)\nVALUES (34, 'Van Houten', 'Roger', '2000-12-07', null, 'Instructor');\nGO\nSET IDENTITY_INSERT dbo.Person OFF\nGO\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Find Direct Descendants Using HierarchyId\nDESCRIPTION: This SQL query implements the logic to find the direct descendants. It uses a subquery to retrieve the `PathFromPatriarch` of the ancestor and compares the `GetAncestor(1)` of each descendant's path with this value in the WHERE clause.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch].GetAncestor(1) = (\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0)\n```\n\n----------------------------------------\n\nTITLE: Add Products DataGrid XAML\nDESCRIPTION: Adds a DataGrid to display products, bound to the ProductsViewSource. This grid is used to display the detail view of the selected category.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/wpf.md#_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<DataGrid x:Name=\"productsDataGrid\" ItemsSource=\"{Binding Source={StaticResource ProductsViewSource}}\" AutoGenerateColumns=\"False\" EnableRowVirtualization=\"True\" Margin=\"10\" >\n            <DataGrid.Columns>\n                <DataGridTextColumn x:Name=\"idColumn1\" Binding=\"{Binding Id}\" Header=\"Id\" Width=\"SizeToHeader\" IsReadOnly=\"True\"/>\n                <DataGridTextColumn x:Name=\"nameColumn1\" Binding=\"{Binding Name}\" Header=\"Name\" Width=\"*\"/>\n            </DataGrid.Columns>\n        </DataGrid>\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType Properties in SSDL (XML)\nDESCRIPTION: This XML snippet demonstrates how to define an EntityType with two Property elements in SSDL.  It includes attributes like Name, Type, and Nullable to specify column characteristics. The Documentation element provides summary and long descriptions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Customers\">\n   <Documentation>\n     <Summary>Summary here.</Summary>\n     <LongDescription>Long description here.</LongDescription>\n   </Documentation>\n   <Key>\n     <PropertyRef Name=\"CustomerId\" />\n   </Key>\n   <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n   <Property Name=\"Name\" Type=\"nvarchar(max)\" Nullable=\"false\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: StudentGrade EntityType (XML)\nDESCRIPTION: This XML snippet defines the \"StudentGrade\" entity type in the conceptual model. It includes properties for EnrollmentID, CourseID, StudentID, and Grade, with EnrollmentID being the primary key and marked as an identity column.  This is used as the target for the ResultMapping example.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_37\n\nLANGUAGE: XML\nCODE:\n```\n <EntityType Name=\"StudentGrade\">\n   <Key>\n     <PropertyRef Name=\"EnrollmentID\" />\n   </Key>\n   <Property Name=\"EnrollmentID\" Type=\"Int32\" Nullable=\"false\"\n             annotation:StoreGeneratedPattern=\"Identity\" />\n   <Property Name=\"CourseID\" Type=\"Int32\" Nullable=\"false\" />\n   <Property Name=\"StudentID\" Type=\"Int32\" Nullable=\"false\" />\n   <Property Name=\"Grade\" Type=\"Decimal\" Precision=\"3\" Scale=\"2\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Defining Model-Defined Function with CollectionType in CSDL\nDESCRIPTION: This XML snippet defines a model-defined function named 'LastNamesAfter' using the CollectionType element in CSDL. The function takes a string parameter and returns a collection of rows with 'FirstName' and 'LastName' properties.  It specifies a SELECT query to retrieve data from the 'SchoolEntities.People' entity based on the 'LastName' property.  The 'DefiningExpression' performs the database query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"LastNamesAfter\">\n   <Parameter Name=\"someString\" Type=\"Edm.String\" />\n   <ReturnType>\n    <CollectionType>\n      <RowType>\n        <Property Name=\"FirstName\" Type=\"Edm.String\" Nullable=\"false\" />\n        <Property Name=\"LastName\" Type=\"Edm.String\" Nullable=\"false\" />\n      </RowType>\n    </CollectionType>\n   </ReturnType>\n   <DefiningExpression>\n             SELECT VALUE ROW(p.FirstName, p.LastName)\n             FROM SchoolEntities.People AS p\n             WHERE p.LastName &gt;= somestring\n   </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Selected Lines in a Rendered Snippet\nDESCRIPTION: This code snippet shows how to highlight specific lines in a rendered snippet. The `highlight` parameter takes a comma-separated list of line numbers and ranges to be highlighted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/saving/Program.cs?name=snippet_Example&highlight=1-3,10,20-25)]\n```\n\n----------------------------------------\n\nTITLE: Define Blog Entity Type with Store-Generated Key\nDESCRIPTION: This code defines a `Blog` entity with an auto-generated integer `Id` and a collection of `Post` entities. The `Id` property will receive a temporary value when a `Blog` instance is added to the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_167\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Code First Model for School Entities with EF\nDESCRIPTION: This C# code defines a Code First model for a school database using Entity Framework. It includes entities such as `SchoolEntities` (DbContext), `Department`, `Course`, `Instructor`, and `OfficeAssignment`. It also configures the model to remove the `PluralizingTableNameConvention` during model creation. The code uses Data Annotations and Fluent API conventions for configuring entity properties and relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\nusing System.Data.Entity.ModelConfiguration.Conventions;\n// add a reference to System.ComponentModel.DataAnnotations DLL\nusing System.ComponentModel.DataAnnotations;\nusing System.Collections.Generic;\nusing System;\n\npublic class SchoolEntities : DbContext\n{\n    public DbSet<Course> Courses { get; set; }\n    public DbSet<Department> Departments { get; set; }\n    public DbSet<Instructor> Instructors { get; set; }\n    public DbSet<OfficeAssignment> OfficeAssignments { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        // Configure Code First to ignore PluralizingTableName convention\n        // If you keep this convention then the generated tables will have pluralized names.\n        modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();\n    }\n}\n\npublic class Department\n{\n    public Department()\n    {\n        this.Courses = new HashSet<Course>();\n    }\n    // Primary key\n    public int DepartmentID { get; set; }\n    public string Name { get; set; }\n    public decimal Budget { get; set; }\n    public System.DateTime StartDate { get; set; }\n    public int? Administrator { get; set; }\n\n    // Navigation property\n    public virtual ICollection<Course> Courses { get; private set; }\n}\n\npublic class Course\n{\n    public Course()\n    {\n        this.Instructors = new HashSet<Instructor>();\n    }\n    // Primary key\n    public int CourseID { get; set; }\n\n    public string Title { get; set; }\n    public int Credits { get; set; }\n\n    // Foreign key\n    public int DepartmentID { get; set; }\n\n    // Navigation properties\n    public virtual Department Department { get; set; }\n    public virtual ICollection<Instructor> Instructors { get; private set; }\n}\n\npublic partial class OnlineCourse : Course\n{\n    public string URL { get; set; }\n}\n\npublic partial class OnsiteCourse : Course\n{\n    public OnsiteCourse()\n    {\n        Details = new Details();\n    }\n\n    public Details Details { get; set; }\n}\n\npublic class Details\n{\n    public System.DateTime Time { get; set; }\n    public string Location { get; set; }\n    public string Days { get; set; }\n}\n\npublic class Instructor\n{\n    public Instructor()\n    {\n        this.Courses = new List<Course>();\n    }\n\n    // Primary key\n    public int InstructorID { get; set; }\n    public string LastName { get; set; }\n    public string FirstName { get; set; }\n    public System.DateTime HireDate { get; set; }\n\n    // Navigation properties\n    public virtual ICollection<Course> Courses { get; private set; }\n}\n\npublic class OfficeAssignment\n{\n    // Specifying InstructorID as a primary\n    [Key()]\n    public Int32 InstructorID { get; set; }\n\n    public string Location { get; set; }\n\n    // When Entity Framework sees Timestamp attribute\n    // it configures ConcurrencyCheck and DatabaseGeneratedPattern=Computed.\n    [Timestamp]\n    public Byte[] Timestamp { get; set; }\n\n    // Navigation property\n    public virtual Instructor Instructor { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Blogs with Related Posts (EF Core 6.0) SQL\nDESCRIPTION: This is an example of the SQL that is now generated when querying blogs with related posts in EF Core 6.0. The last ORDER BY clause for the Post's ID column has been omitted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [b].[BlogId], [b].[Name], [p].[PostId], [p].[BlogId], [p].[Title]\nFROM [Blogs] AS [b]\nLEFT JOIN [Post] AS [p] ON [b].[BlogId] = [p].[BlogId]\nORDER BY [b].[BlogId]\n```\n\n----------------------------------------\n\nTITLE: Implementing SqlUnitOfWork in C#\nDESCRIPTION: This class provides a concrete implementation of the IUnitOfWork interface using Entity Framework's ObjectContext. It initializes the ObjectContext with a connection string from the ConfigurationManager. It provides access to Employee and TimeCard repositories via IObjectSet<T> properties. The Commit method calls SaveChanges on the ObjectContext to persist the changes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n    public class SqlUnitOfWork : IUnitOfWork {\n    \tpublic SqlUnitOfWork() {\n    \t\tvar connectionString =\n    \t\t\tConfigurationManager\n    \t\t\t\t.ConnectionStrings[ConnectionStringName]\n    \t\t\t\t.ConnectionString;\n    \t\t_context = new ObjectContext(connectionString);\n    \t}\n\n    \tpublic IObjectSet<Employee> Employees {\n    \t\tget { return _context.CreateObjectSet<Employee>(); }\n    \t}\n\n    \tpublic IObjectSet<TimeCard> TimeCards {\n    \t\tget { return _context.CreateObjectSet<TimeCard>(); }\n    \t}\n\n    \tpublic void Commit() {\n    \t\t_context.SaveChanges();\n    \t}\n\n    \treadonly ObjectContext _context;\n    \tconst string ConnectionStringName = \"EmployeeDataModelContainer\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Safer SQL Querying with FromSql\nDESCRIPTION: This C# snippet shows how to use the `FromSql` method to execute SQL queries against Azure Cosmos DB.  `FromSql` automatically parameterizes the data provided, preventing SQL injection vulnerabilities. It showcases querying for blogs where the `Angle1` property is less than or equal to `maxAngle`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\nvar maxAngle = 8;\n_ = await context.Blogs\n    .FromSql($\"SELECT VALUE c FROM root c WHERE c.Angle1 <= {maxAngle}\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SQL Delete Command\nDESCRIPTION: This SQL snippet shows the DELETE command generated by EF Core when deleting a dependent/child entity (Post). It uses a parameter (@p0) for the ID of the post to be deleted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM \"Posts\"\nWHERE \"Id\" = @p0;\nSELECT changes();\n```\n\n----------------------------------------\n\nTITLE: Add System.Collections.ObjectModel using\nDESCRIPTION: Shows the addition of the `System.Collections.ObjectModel` namespace to the usings list in the T4 template, which is required for using `ObservableCollection<T>`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar usings = new List<string>\n{\n    \"System\",\n    \"System.Collections.Generic\",\n    \"System.Collections.ObjectModel\"\n};\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Tag (SQL)\nDESCRIPTION: This SQL code demonstrates how the tag is added in the generated SQL. The filename and line number are shown as a comment before the SELECT statement.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_119\n\nLANGUAGE: SQL\nCODE:\n```\n-- file: C:\\dotnet\\efdocs\\samples\\core\\Miscellaneous\\NewInEFCore6\\TagWithFileAndLineSample.cs:21\n\nSELECT [c].[Id], [c].[Name]\nFROM [Customers] AS [c]\nWHERE [c].[Name] IS NOT NULL AND ([c].[Name] LIKE N'A%')\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Find All Descendants Using HierarchyId\nDESCRIPTION: This SQL query finds all descendants of a halfling.  It checks if each halfling's `PathFromPatriarch` is a descendant of the target halfling's `PathFromPatriarch`, and sorts by level in ascending order.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch].IsDescendantOf((\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0 AND [h].[Id] <> [h0].[Id])) = CAST(1 AS bit)\nORDER BY [h].[PathFromPatriarch].GetLevel()\n```\n\n----------------------------------------\n\nTITLE: Querying Longo and Descendents C#\nDESCRIPTION: This C# code snippet queries for \"Longo\" and all his descendants from the Halflings table using Entity Framework Core. It filters the Halflings based on whether their PathFromPatriarch is a descendant of Longo's PathFromPatriarch.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_81\n\nLANGUAGE: csharp\nCODE:\n```\nvar longoAndDescendents = await context.Halflings.Where(\n                descendent => descendent.PathFromPatriarch.IsDescendantOf(\n                    context.Halflings.Single(ancestor => ancestor.Name == \"Longo\").PathFromPatriarch))\n            .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Define Alias for Conceptual Model Namespace in MSL\nDESCRIPTION: This snippet demonstrates how to define an alias for a conceptual model namespace using the Alias element in MSL. The Alias element is a child of the Mapping element and helps to qualify conceptual or storage model types by their respective namespace names. The example shows an alias 'c' being defined for the 'SchoolModel' namespace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <Mapping Space=\"C-S\"\n          xmlns=\"https://schemas.microsoft.com/ado/2009/11/mapping/cs\">\n   <Alias Key=\"c\" Value=\"SchoolModel\"/>\n   <EntityContainerMapping StorageEntityContainer=\"SchoolModelStoreContainer\"\n                           CdmEntityContainer=\"SchoolModelEntities\">\n     <EntitySetMapping Name=\"Courses\">\n       <EntityTypeMapping TypeName=\"c.Course\">\n         <MappingFragment StoreEntitySet=\"Course\">\n           <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n           <ScalarProperty Name=\"Title\" ColumnName=\"Title\" />\n           <ScalarProperty Name=\"Credits\" ColumnName=\"Credits\" />\n           <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n         </MappingFragment>\n       </EntityTypeMapping>\n     </EntitySetMapping>\n     <EntitySetMapping Name=\"Departments\">\n       <EntityTypeMapping TypeName=\"c.Department\">\n         <MappingFragment StoreEntitySet=\"Department\">\n           <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n           <ScalarProperty Name=\"Name\" ColumnName=\"Name\" />\n           <ScalarProperty Name=\"Budget\" ColumnName=\"Budget\" />\n           <ScalarProperty Name=\"StartDate\" ColumnName=\"StartDate\" />\n           <ScalarProperty Name=\"Administrator\" ColumnName=\"Administrator\" />\n         </MappingFragment>\n       </EntityTypeMapping>\n     </EntitySetMapping>\n   </EntityContainerMapping>\n </Mapping>\n```\n\n----------------------------------------\n\nTITLE: Defining a Country Entity with Spatial Property\nDESCRIPTION: This code snippet shows how to define a Country entity with a spatial property using the `Geometry` type from the `NetTopologySuite.Geometries` namespace.  The `Border` property represents the geographical boundary of the country, allowing for various types of shapes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/spatial.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing NetTopologySuite.Geometries;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Spatial.SqlServer.Models\n{\n    public class Country\n    {\n        [Key]\n        [MaxLength(3)]\n        public string IsoCode { get; set; }\n\n        [MaxLength(100)]\n        public string CountryName { get; set; }\n\n        public Geometry Border { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DbCommandInterceptor with Command Source Filter\nDESCRIPTION: This interceptor filters `DbCommand` execution based on the `CommandSource`.  It checks if the command originated from `SaveChanges` and prints the command text if it did. This allows for targeted interception based on the origin of the database command.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_166\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CommandSourceInterceptor : DbCommandInterceptor\n{\n    public override InterceptionResult<DbDataReader> ReaderExecuting(\n        DbCommand command, CommandEventData eventData, InterceptionResult<DbDataReader> result)\n    {\n        if (eventData.CommandSource == CommandSource.SaveChanges)\n        {\n            Console.WriteLine($\"Saving changes for {eventData.Context!.GetType().Name}:\");\n            Console.WriteLine();\n            Console.WriteLine(command.CommandText);\n        }\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Product Model Class C#\nDESCRIPTION: This code defines the `Product` class, representing a product entity with properties for ID, name, and category. It includes a navigation property `Category` to represent the relationship between a product and its category.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/winforms.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\nnamespace GetStartedWinForms\n{\n    public class Product\n    {\n        public int ProductId { get; set; }\n        [Required]\n        public string Name { get; set; }\n\n        public int CategoryId { get; set; }\n        public Category Category { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Timestamp Concurrency Token (C#)\nDESCRIPTION: This C# code defines a Blog class with a Timestamp property marked with the [Timestamp] attribute. This property will be used as a concurrency token during updates to ensure data integrity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog  \n{\n  public int BlogId { get; set; }\n  public string Name { get; set; }\n  public string Url { get; set; }\n  [Timestamp]\n  public byte[] Timestamp { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Join and Aggregation SQL\nDESCRIPTION: This SQL code represents the translation of the C# query. It joins People and Shoes, groups by shoe style and calculates count and first style.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_64\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [s].[Style] AS [Key], (\n    SELECT TOP(1) [s0].[Style]\n    FROM [People] AS [p0]\n    INNER JOIN [Shoes] AS [s0] ON [p0].[Age] = [s0].[Age]\n    WHERE ([s].[Style] = [s0].[Style]) OR ([s].[Style] IS NULL AND [s0].[Style] IS NULL)) AS [Style], COUNT(*) AS [Count]\nFROM [People] AS [p]\nINNER JOIN [Shoes] AS [s] ON [p].[Age] = [s].[Age]\nGROUP BY [s].[Style]\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of ToString Query on SQLite\nDESCRIPTION: This SQL code is the translation of the C# query using `ToString` and `Like` on SQLite.  It converts the `PhoneNumber` column to TEXT using `CAST` and then uses the `LIKE` operator to check if it contains the pattern '%555%'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_92\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"u\".\"Id\", \"u\".\"PhoneNumber\", \"u\".\"Username\"\nFROM \"Users\" AS \"u\"\nWHERE CAST(\"u\".\"PhoneNumber\" AS TEXT) LIKE '%555%'\n```\n\n----------------------------------------\n\nTITLE: Context Initialized Log Level Change\nDESCRIPTION: This snippet demonstrates how the log level for the ContextInitialized event has changed from Information to Debug in EF Core 7.  It shows example log outputs from previous releases and EF Core 7. The log level can be changed back to Information using optionsBuilder.ConfigureWarnings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_144\n\nLANGUAGE: output\nCODE:\n```\ndbug: 10/7/2022 12:27:52.379 CoreEventId.ContextInitialized[10403] (Microsoft.EntityFrameworkCore.Infrastructure)\n      Entity Framework Core 7.0.0 initialized 'BlogsContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:7.0.0' with options: SensitiveDataLoggingEnabled using NetTopologySuite\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Alternate Key with Lambda in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a composite alternate key as the principal key for a relationship in Entity Framework Core using a lambda expression. It uses `HasPrincipalKey` to specify that the combination of `AlternateId1` and `AlternateId2` properties in `Blog` entity will be used as the principal key in relationship with `Posts`. This shows how to create composite principal keys.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasPrincipalKey(e => new { e.AlternateId1, e.AlternateId2 });\n```\n\n----------------------------------------\n\nTITLE: User Entity Type with DateOnly and TimeOnly\nDESCRIPTION: This C# code defines an entity named `User` with properties including `DateOnly` and `TimeOnly`. Microsoft.Data.Sqlite stores these types as `TEXT` in SQLite since its native type system requires them to be stored as one of the four supported types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_173\n\nLANGUAGE: C#\nCODE:\n```\npublic class User\n{\n    public int Id { get; set; }\n    public string Username { get; set; }\n    \n    public DateOnly Birthday { get; set; }\n    public TimeOnly TokensRenewed { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing LINQ Query in C# with First()\nDESCRIPTION: This code snippet executes a LINQ query using the `First()` method. It retrieves the first element that satisfies the query. This operation involves metadata loading, view/query translation, parameter evaluation, database query execution, object materialization, and identity lookup, all of which have different performance impacts depending on the Entity Framework version.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar c1 = q1.First();\n```\n\n----------------------------------------\n\nTITLE: Insert Entity Graph (No Hi-Lo)\nDESCRIPTION: This C# code demonstrates how to insert a graph of entities (Blog and Posts) where the Blog's primary key is generated by the database. In EF Core 6, this results in two database roundtrips: one to insert the Blog and get its ID, and another to insert the Posts with the correct BlogId.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.AddAsync(new Blog\n            {\n                Name = \"MyBlog\",\n                Posts =\n                {\n                    new() { Title = \"My first post\" },\n                    new() { Title = \"My second post\" }\n                }\n            });\n            await context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: AuditContext Definition (SaveChanges Interception)\nDESCRIPTION: This C# code snippet defines an `AuditContext` derived from `DbContext`. It's used to store audit information in a separate SQLite database.  It configures the context to use SQLite with the connection string passed in the constructor and includes DbSet property for SaveChangesAudits.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AuditContext : DbContext\n{\n    private readonly string _connectionString;\n\n    public AuditContext(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.UseSqlite(_connectionString);\n\n    public DbSet<SaveChangesAudit> SaveChangesAudits { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Posts with Views C#\nDESCRIPTION: This C# code snippet demonstrates how to query posts with more than 3000 views, selecting the author's name, the number of views, the top searches, and the updates from the `Metadata` JSON column. The `AsNoTracking()` method improves performance by disabling change tracking.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nvar postsWithViews = await context.Posts.Where(post => post.Metadata!.Views > 3000)\n    .AsNoTracking()\n    .Select(\n        post => new\n        {\n            post.Author!.Name,\n            post.Metadata!.Views,\n            Searches = post.Metadata.TopSearches,\n            Commits = post.Metadata.Updates\n        })\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationship with Keyless Entity in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure a relationship where a keyless entity type (`Tag`) is the dependent end in Entity Framework Core. It configures the `Tag` entity as keyless using `HasNoKey()` and establishes a one-to-many relationship between `Post` and `Tag` using `HasMany` and `WithOne`, where each `Post` can have many `Tag` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Tag>()\n    .HasNoKey();\n\nmodelBuilder.Entity<Post>()\n    .HasMany<Tag>()\n    .WithOne(e => e.Post);\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Key with String in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure an alternate key as the principal key for a relationship in Entity Framework Core using a string. It uses `HasPrincipalKey` with the string \"AlternateId\" to specify that `AlternateId` property in `Blog` entity will be used as the principal key in relationship with `Posts`. This offers a simpler method if the key property name is already known.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasPrincipalKey(\"AlternateId\");\n```\n\n----------------------------------------\n\nTITLE: Changing Relationships Using Reference Navigations in EF Core\nDESCRIPTION: This C# code snippet illustrates how to change a relationship by modifying a reference navigation property. It moves a post from the Visual Studio blog to the .NET blog by directly setting the `Blog` property of the `Post` entity to the desired `Blog` instance. Requires loading blogs and posts into the context first.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar post = vsBlog.Posts.Single(e => e.Title.StartsWith(\"Disassembly improvements\"));\n        post.Blog = dotNetBlog;\n```\n\n----------------------------------------\n\nTITLE: SQL Server Table Creation SQL\nDESCRIPTION: Shows the SQL Server tables created by migrations, demonstrating how the pre-convention configurations are applied to the database schema.  This illustrates the impact of the C# configuration on the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Customers] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] varchar(1024) NULL,\n    [IsActive] int NOT NULL,\n    [AccountValue] nvarchar(64) NOT NULL,\n    CONSTRAINT [PK_Customers] PRIMARY KEY ([Id])\n);\nCREATE TABLE [Order] (\n    [Id] int NOT NULL IDENTITY,\n    [SpecialInstructions] varchar(1024) NULL,\n    [OrderDate] bigint NOT NULL,\n    [IsComplete] int NOT NULL,\n    [Price] nvarchar(64) NOT NULL,\n    [Discount] nvarchar(64) NULL,\n    [CustomerId] int NULL,\n    CONSTRAINT [PK_Order] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Order_Customers_CustomerId] FOREIGN KEY ([CustomerId]) REFERENCES [Customers] ([Id])\n);\n```\n\n----------------------------------------\n\nTITLE: SQL for Mixed Order Composite Index\nDESCRIPTION: This SQL snippet shows the resulting SQL for creating a composite index with mixed ascending and descending order on SQL Server. The `DESC` keyword indicates a descending order for the column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_151\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX [IX_Blogs_Name_Owner] ON [Blogs] ([Name], [Owner] DESC);\n```\n\n----------------------------------------\n\nTITLE: Specify Primary Key with Data Annotation - C#\nDESCRIPTION: Illustrates how to use the `[Key]` data annotation to explicitly define a property as the primary key for an entity, overriding Code First conventions. This is used when a property doesn't match the default naming convention (Id or ClassNameId).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n    {\n        [Key]\n        public int PrimaryTrackingKey { get; set; }\n        public string Title { get; set; }\n        public string BloggerName { get; set;}\n        public virtual ICollection<Post> Posts { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Update TPT Note Property C#\nDESCRIPTION: This snippet demonstrates updating the `Note` property of the `SpecialCustomerTpt` entity using `ExecuteUpdateAsync`. Since Note is a property specific to the SpecialCustomerTpt type and it is mapped to the table TptSpecialCustomers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_133\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.TptSpecialCustomers\n    .Where(e => e.Name == name)\n    .ExecuteUpdateAsync(s => s.SetProperty(b => b.Note, \"Noted\"));\n```\n\n----------------------------------------\n\nTITLE: Optimized Paging with Skip & Lambda - C#\nDESCRIPTION: This example demonstrates an optimized approach to paging using the Skip method with a lambda expression. By using a lambda, Entity Framework can capture variables passed to these methods and translate them to SQL parameters, allowing the same query plan to be reused for each iteration, improving performance and reducing query cache pollution.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar customers = context.Customers.OrderBy(c => c.LastName);\nfor (var i = 0; i < count; ++i)\n{\n    var currentCustomer = customers.Skip(() => i).FirstOrDefault();\n    ProcessCustomer(currentCustomer);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Table Naming Convention C#\nDESCRIPTION: This code snippet demonstrates how to configure every type in the model to map to a table name derived from the `GetTableName` method. It is equivalent to calling `ToTable` for each entity in the model using the Fluent API.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Types()\n            .Configure(c => c.ToTable(GetTableName(c.ClrType)));\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into CourseInstructor Table SQL\nDESCRIPTION: These SQL INSERT statements populate the CourseInstructor table, linking courses to instructors through CourseID and PersonID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n-- Insert data into the CourseInstructor table.\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (1050, 1);\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (1061, 31);\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (1045, 5);\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (2030, 4);\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (2021, 27);\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (2042, 25);\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (4022, 18);\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (4041, 32);\nINSERT INTO dbo.CourseInstructor(CourseID, PersonID)\nVALUES (4061, 34);\nGO\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple EntitySets per Type (MEST) in CSDL (XML)\nDESCRIPTION: This XML snippet defines an EntityContainer with multiple EntitySets for the same entity type ('Book'). 'Books' and 'FictionBooks' both refer to the 'BooksModel.Book' entity type, illustrating the concept of multiple entity sets per type, which allows for different groupings or views of the same entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n <EntityContainer Name=\"BooksContainer\" >\n   <EntitySet Name=\"Books\" EntityType=\"BooksModel.Book\" />\n   <EntitySet Name=\"FictionBooks\" EntityType=\"BooksModel.Book\" />\n   <EntitySet Name=\"Publishers\" EntityType=\"BooksModel.Publisher\" />\n   <EntitySet Name=\"Authors\" EntityType=\"BooksModel.Author\" />\n   <AssociationSet Name=\"PublishedBy\" Association=\"BooksModel.PublishedBy\">\n     <End Role=\"Book\" EntitySet=\"Books\" />\n     <End Role=\"Publisher\" EntitySet=\"Publishers\" />\n   </AssociationSet>\n   <AssociationSet Name=\"BookAuthor\" Association=\"BooksModel.BookAuthor\">\n     <End Role=\"Book\" EntitySet=\"Books\" />\n     <End Role=\"Author\" EntitySet=\"Authors\" />\n   </AssociationSet>\n </EntityContainer>\n```\n\n----------------------------------------\n\nTITLE: EDMX Provider Configuration (XML)\nDESCRIPTION: Shows how to update the provider name within an EDMX file's storage models schema.  This ensures the EDMX uses the `Microsoft.Data.SqlClient` provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/microsoft-ef6-sqlserver.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<edmx:Edmx Version=\"3.0\" xmlns:edmx=\"http://schemas.microsoft.com/ado/2009/11/edmx\">\n  <edmx:Runtime>\n    <edmx:StorageModels>\n      <Schema Namespace=\"ChinookModel.Store\" Provider=\"Microsoft.Data.SqlClient\" >\n```\n\n----------------------------------------\n\nTITLE: Required Using Statement for Edm (C#)\nDESCRIPTION: This C# code specifies the required 'using' statement for working with Entity Data Model (EDM) metadata. This allows the C# code to utilize classes like EdmItemCollection, MetadataWorkspace, and EdmType.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\n using System.Data.Metadata.Edm;\n```\n\n----------------------------------------\n\nTITLE: Mapping Decimal Properties with Precision and Scale - C#\nDESCRIPTION: This example shows how to map decimal properties with a specified precision and scale using the `Column` attribute. This ensures that the rounding behavior is consistent with SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n\n    [Column(TypeName = \"decimal(16, 5)\")]\n    public decimal Score { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Bundle using dotnet CLI\nDESCRIPTION: This command creates an executable bundle containing the migrations. It uses the 'dotnet ef migrations bundle' command to generate the bundle, which can then be executed to apply migrations to the database.  Dependencies: .NET SDK, Entity Framework Core tools installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_16\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations bundle\n```\n\n----------------------------------------\n\nTITLE: Retrieving Annotation Element from EntityType (C#)\nDESCRIPTION: This C# code snippet demonstrates how to access the value of a custom annotation element (CustomElement) within an EntityType.  The code assumes that the School.csdl file is located in the project's output directory. It retrieves the metadata and prints it to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\n EdmItemCollection collection = new EdmItemCollection(\"School.csdl\");\n MetadataWorkspace workspace = new MetadataWorkspace();\n workspace.RegisterItemCollection(collection);\n EdmType contentType;\n workspace.TryGetType(\"Person\", \"SchoolModel\", DataSpace.CSpace, out contentType);\n if (contentType.MetadataProperties.Contains(\"http://CustomNamespace.com:CustomElement\"))\n {\n     MetadataProperty annotationProperty =\n         contentType.MetadataProperties[\"http://CustomNamespace.com:CustomElement\"];\n     object annotationValue = annotationProperty.Value;\n     Console.WriteLine(annotationValue.ToString());\n }\n```\n\n----------------------------------------\n\nTITLE: Initializing SqliteBlogContext - C#\nDESCRIPTION: Defines a DbContext subclass, `SqliteBlogContext`, that inherits from `BlogContext` and configures it to use SQLite with a specified data source. This allows for provider-specific configurations to be applied.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/providers.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass SqliteBlogContext : BlogContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder options)\n        => options.UseSqlite(\"Data Source=my.db\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Access Mode\nDESCRIPTION: This snippet demonstrates how to configure the property access mode in EF Core to prefer using fields during construction, restoring the pre-3.0 behavior where getter/setter methods were used by default.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.UsePropertyAccessMode(PropertyAccessMode.PreferFieldDuringConstruction);\n```\n\n----------------------------------------\n\nTITLE: Generated Table Without Column Ordering (SQL)\nDESCRIPTION: This SQL code shows the table that EF Core generates based on the data model defined without column ordering specified. This illustrates the default ordering of the columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_154\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [EmployeesWithoutOrdering] (\n    [Id] int NOT NULL IDENTITY,\n    [Department] nvarchar(max) NULL,\n    [AnnualSalary] decimal(18,2) NOT NULL,\n    [Address_House] nvarchar(max) NULL,\n    [Address_Street] nvarchar(max) NULL,\n    [Address_City] nvarchar(max) NULL,\n    [Address_Postcode] nvarchar(max) NULL,\n    [UpdatedOn] datetime2 NOT NULL,\n    [CreatedOn] datetime2 NOT NULL,\n    [FirstName] nvarchar(max) NULL,\n    [LastName] nvarchar(max) NULL,\n    CONSTRAINT [PK_EmployeesWithoutOrdering] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Disabling Client-Side Validation - XML\nDESCRIPTION: This XML snippet demonstrates how to disable client-side validation in an ASP.NET MVC application by setting the `ClientValidationEnabled` key in the `appSettings` section of the `web.config` file to `false`. This allows testing of server-side validation provided by Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<appSettings>\n    <add key=\"ClientValidationEnabled\"value=\"false\"/>\n    ...\n</appSettings>\n```\n\n----------------------------------------\n\nTITLE: Defining IUnitOfWork Interface in C#\nDESCRIPTION: This interface defines a Unit of Work abstraction.  It provides access to IObjectSet<Employee> and IObjectSet<TimeCard> repositories. The Commit() method is used to persist changes.  A concrete implementation will interact with SQL Server through the ObjectContext class in EF4.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n    public interface IUnitOfWork {\n    \tIObjectSet<Employee> Employees { get; }\n    \tIObjectSet<TimeCard> TimeCards { get; }\n    \tvoid Commit();\n    }\n```\n\n----------------------------------------\n\nTITLE: Model-Defined Function with TypeRef in CollectionType (CSDL)\nDESCRIPTION: This example demonstrates how to use the TypeRef element within a CollectionType element to specify that a function accepts a collection of Department entity types.  The function calculates the average budget from the departments collection. The Type attribute specifies the entity type being referenced.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"GetAvgBudget\">\n      <Parameter Name=\"Departments\">\n          <CollectionType>\n             <TypeRef Type=\"SchoolModel.Department\"/>\n          </CollectionType>\n           </Parameter>\n       <ReturnType Type=\"Collection(Edm.Decimal)\"/>\n       <DefiningExpression>\n             SELECT VALUE AVG(d.Budget) FROM Departments AS d\n       </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Defining Animal Classes\nDESCRIPTION: This C# code defines a simple inheritance hierarchy with an Animal base class and Cat and Dog derived classes. This model is used in subsequent examples to demonstrate mapping scenarios.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_159\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Animal\n{\n    public int Id { get; set; }\n    public string Breed { get; set; } = null!;\n}\n\npublic class Cat : Animal\n{\n    public string? EducationalLevel { get; set; }\n}\n\npublic class Dog : Animal\n{\n    public string? FavoriteToy { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Database Logging in Entity Framework\nDESCRIPTION: This snippet demonstrates how to enable database logging in Entity Framework to output the database activity to the console. It uses the Database.Log property to assign a delegate (Console.WriteLine) that will receive the log messages.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = newQueryComparison.DbC.NorthwindEntities())\n    {\n        context.Database.Log = Console.WriteLine;\n        var q = context.Products.Where(p => p.Category.CategoryName == \"Beverages\");\n        q.ToList();\n    }\n```\n\n----------------------------------------\n\nTITLE: Specifying ASP.NET Core Environment (.NET CLI)\nDESCRIPTION: This command specifies the environment for ASP.NET Core projects when executing EF Core commands. The `--environment` argument is passed to the `Program.CreateHostBuilder` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef database update -- --environment Production\n```\n\n----------------------------------------\n\nTITLE: Efficient Pagination with Continuation Tokens in EF Core\nDESCRIPTION: This snippet demonstrates the recommended approach to pagination in Azure Cosmos DB using continuation tokens. The ToPageAsync method is used to retrieve results in pages, and the continuation token is used to resume the query and fetch the next page of results. The CosmosPage class contains the values and the continuation token.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nCosmosPage firstPage = await context.Sessions\n    .OrderBy(s => s.Id)\n    .ToPageAsync(pageSize: 10, continuationToken: null);\n\nstring continuationToken = firstPage.ContinuationToken;\nforeach (var session in firstPage.Values)\n{\n    // Display/send the sessions to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Document Snapshots on SaveChanges - C#\nDESCRIPTION: This code snippet demonstrates how to use the `SaveChanges` event to automatically insert a document snapshot (audit entry) whenever a document is inserted or updated. It queries the `ChangeTracker` to find added or updated `Document` entities and inserts an audit entry for each one, ensuring that all changes are tracked.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)\n{\n    var auditEntries = ChangeTracker.Entries<Document>()\n        .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified)\n        .Select(e => new DocumentAudit\n        {\n            DocumentId = e.Entity.DocumentId,\n            Title = e.Entity.Title,\n            Content = e.Entity.Content\n        })\n        .ToList();\n\n    await DocumentAudits.AddRangeAsync(auditEntries, cancellationToken);\n\n    return await base.SaveChangesAsync(cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: SQL LEFT JOIN generated by EF Core\nDESCRIPTION: This SQL query shows the result of EF Core translating the LINQ pattern into a LEFT JOIN. It selects columns from both the Blogs and Posts tables, joining them on the BlogId column. If there is no matching Post for a Blog, the Post columns will be null.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url], [p].[PostId], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Rating], [p].[Title]\\nFROM [Blogs] AS [b]\\nLEFT JOIN [Posts] AS [p] ON [b].[BlogId] = [p].[BlogId]\n```\n\n----------------------------------------\n\nTITLE: Controlling Transactions in EF Core\nDESCRIPTION: This code demonstrates how to manually control transactions in Entity Framework Core using DbContext.Database.BeginTransaction, CommitTransaction, and RollbackTransaction. It shows how to execute multiple SaveChanges operations and a LINQ query within a single transaction. Requires Entity Framework Core and a database provider that supports transactions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/transactions.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    using (var transaction = context.Database.BeginTransaction())\n    {\n        try\n        {\n            context.Blogs.Add(new Blog { Name = \"My new Blog #1\" });\n            context.SaveChanges();\n\n            context.Blogs.Add(new Blog { Name = \"My new Blog #2\" });\n            context.SaveChanges();\n\n            context.Blogs.Where(b => b.Name.StartsWith(\"My\")).ToList();\n\n            transaction.Commit();\n        }\n        catch (Exception)\n        {\n            // TODO: Handle failure\n            transaction.Rollback();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Join Table Mapping - C#\nDESCRIPTION: This C# code defines entity classes for Post, Tag, and PostTag (join entity). It maps the tables directly as one-to-many relationships without skip navigations. Demonstrates how to represent the join table as an explicit entity in EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<PostTag> PostTags { get; } = new();\n}\n\npublic class PostTag\n{\n    public int PostsId { get; set; }\n    public int TagsId { get; set; }\n    public Post Post { get; set; } = null!;\n    public Tag Tag { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Indexes on Property - EF6.1+ - C#\nDESCRIPTION: This snippet demonstrates how to create multiple indexes on the `Name` property using an array of `IndexAttribute` instances passed to the `IndexAnnotation` constructor.  This allows for creating multiple indexes with different names and properties (e.g., unique index) on a single column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<Department>()\n    .Property(t => t.Name)\n    .HasColumnAnnotation(\n        \"Index\",  \n        new IndexAnnotation(new[]\n            {\n                new IndexAttribute(\"Index1\"),\n                new IndexAttribute(\"Index2\") { IsUnique = true }\n            }));\n```\n\n----------------------------------------\n\nTITLE: Defining POCO Entity with Virtual Properties (C#)\nDESCRIPTION: This code snippet demonstrates how to define a POCO (Plain Old CLR Object) entity class with virtual properties for Entity Framework to enable features like lazy loading and change tracking. The `virtual` keyword allows EF proxies to override the properties at runtime.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee {\n        public virtual int Id { get; set; }\n        public virtual string Name { get; set; }\n        public virtual DateTime HireDate { get; set; }\n        public virtual ICollection<TimeCard> TimeCards { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many from Principal - C#\nDESCRIPTION: This code configures a unidirectional one-to-many relationship from the principal entity (`Blog`) to the dependent entity (`Post`) using `OnModelCreating`.  The `WithOne()` method is called without arguments to specify that there is no navigation property from `Post` back to `Blog`. The foreign key `BlogId` is specified and marked as required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany(e => e.Posts)\n                    .WithOne()\n                    .HasForeignKey(e => e.BlogId)\n                    .IsRequired();\n            }\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key in Keyless Entity Type in EF Core (C#)\nDESCRIPTION: This code snippet shows how to define a foreign key property in a keyless entity type in Entity Framework Core. The `Tag` class, which is configured as keyless, includes a `PostId` property and a navigation property `Post` that references the `Post` entity. This allows a keyless entity to be the dependent end of a relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic class Tag\n{\n    public string Text { get; set; } = null!;\n    public int PostId { get; set; }\n    public Post Post { get; set; } = null!;\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key Constraint Name in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure the foreign key constraint name for a relationship in Entity Framework Core using the `HasConstraintName` method. It customizes the constraint name between a `Blog` and `Post` entity when defining the relationship in `OnModelCreating`. This configuration is primarily used during database schema creation with EF Core Migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasForeignKey(e => e.BlogId)\n    .HasConstraintName(\"My_BlogId_Constraint\");\n```\n\n----------------------------------------\n\nTITLE: Blog Model Class C#\nDESCRIPTION: This C# code defines the Blog entity class, including properties for BlogId, Name, and Url. It uses the StringLength data annotation to limit the length of the Name and Url properties to 200 characters.  The Posts property represents the relationship to the Post entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/existing-database.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class Blog\n{\n    public Blog()\n    {\n        Posts = new HashSet<Post>();\n    }\n\n    public int BlogId { get; set; }\n\n    [StringLength(200)]\n    public string Name { get; set; }\n\n    [StringLength(200)]\n    public string Url { get; set; }\n\n    public virtual ICollection<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Value Type Definition C#\nDESCRIPTION: This code snippet defines a custom value type `Currency` which is not natively supported by EF providers. The class includes properties for `Amount` and `Code`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace BulkConfiguration;\n\n[ComplexType]\npublic class Currency\n{\n    public decimal Amount { get; set; }\n    public string Code { get; set; } = \"USD\";\n\n    public override string ToString() => Amount + \" \" + Code;\n}\n```\n\n----------------------------------------\n\nTITLE: TPC: Subset of Types Query - SQL\nDESCRIPTION: SQL query generated by EF Core with TPC for retrieving entities from a subset of types ('Cat', 'Dog').  It uses UNION ALL to combine the results from the Cats and Dogs tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_59\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [c].[FoodId], [c].[Name], [c].[Vet], [c].[EducationLevel], NULL AS [FavoriteToy], N'Cat' AS [Discriminator]\nFROM [Cats] AS [c]\nUNION ALL\nSELECT [d].[Id], [d].[FoodId], [d].[Name], [d].[Vet], NULL AS [EducationLevel], [d].[FavoriteToy], N'Dog' AS [Discriminator]\nFROM [Dogs] AS [d]\n```\n\n----------------------------------------\n\nTITLE: Defining Order and OrderDetails classes (C#)\nDESCRIPTION: These C# classes represent a simplified model with an `Order` and associated `OrderDetails`.  The `Order` class contains properties for `Id`, `CustomerId`, and a navigation property to `OrderDetails`.  The `OrderDetails` class includes properties for `Id` and `ShippingAddress`. These classes are used to illustrate changes related to dependent entities sharing a table with the principal.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    public int CustomerId { get; set; }\n    public OrderDetails Details { get; set; }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderDetails\n{\n    public int Id { get; set; }\n    public string ShippingAddress { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable AutoDetectChanges temporarily C#\nDESCRIPTION: This C# code snippet demonstrates how to temporarily disable Entity Framework's AutoDetectChanges functionality to improve performance in situations where the object cache is large.  Disabling AutoDetectChanges can reduce CPU usage associated with change detection, but it's important to re-enable it and understand potential data inconsistency risks.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\ntry\n{\n    context.Configuration.AutoDetectChangesEnabled = false;\n    var product = context.Products.Find(productId);\n    ...\n}\nfinally\n{\n    context.Configuration.AutoDetectChangesEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming All Stored Procedures - C#\nDESCRIPTION: This example showcases renaming all three stored procedures (insert, update, and delete) for the Blog entity using the Fluent API. It specifies custom names for each stored procedure.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures(s =>\n    s.Update(u => u.HasName(\"modify_blog\"))\n     .Delete(d => d.HasName(\"delete_blog\"))\n     .Insert(i => i.HasName(\"insert_blog\")));\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in CSDL (XML)\nDESCRIPTION: This example demonstrates defining a Function element in CSDL to calculate the number of years since an instructor was hired.  It takes a DateTime parameter and returns an Edm.Int32 representing the number of years. It uses a DefiningExpression to calculate the difference between the current year and the year of the input date.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"YearsSince\" ReturnType=\"Edm.Int32\">\n   <Parameter Name=\"date\" Type=\"Edm.DateTime\" />\n   <DefiningExpression>\n     Year(CurrentDateTime()) - Year(date)\n   </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Ignore a type using DbModelBuilder in C#\nDESCRIPTION: This code snippet shows how to exclude a type from the Entity Framework model using the DbModelBuilder.Ignore fluent API. The modelBuilder.Ignore<Department>() line prevents the Department class from being included in the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/built-in.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Ignore<Department>();\n```\n\n----------------------------------------\n\nTITLE: Building a Service Provider with Design-Time Services - EF Core\nDESCRIPTION: This C# code snippet shows how to build a service provider containing design-time services using the AddEntityFrameworkDesignTimeServices and AddDbContextDesignTimeServices extension methods. This is useful for creating custom tools that leverage EF Core's design-time functionality. It demonstrates the setup of a service provider using a DbContext and a startup class implementing IDesignTimeDbContextFactory.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/services.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = \"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Blogging;Integrated Security=True;\";\n\n// Program.cs\nvar host = Host.CreateDefaultBuilder(args)\n    .ConfigureServices((context, services) =>\n    {\n        services\n            .AddDbContext<BloggingContext>(o => o.UseSqlServer(connectionString))\n            .AddEntityFrameworkDesignTimeServices();\n\n        services.AddHostedService<MyCustomTool>();\n    })\n    .Build();\n\nawait host.RunAsync();\n\n// BloggingContextFactory.cs\ninternal class BloggingContextFactory : IDesignTimeDbContextFactory<BloggingContext>\n{\n    public BloggingContext CreateDbContext(string[] args)\n    {\n        var optionsBuilder = new DbContextOptionsBuilder<BloggingContext>();\n        optionsBuilder.UseSqlServer(connectionString);\n\n        return new BloggingContext(optionsBuilder.Options);\n    }\n}\n\n// MyCustomTool.cs\ninternal class MyCustomTool : IHostedService\n{\n    private readonly BloggingContext _db;\n\n    public MyCustomTool(BloggingContext db)\n    {\n        _db = db;\n    }\n\n    public async Task StartAsync(CancellationToken cancellationToken)\n    {\n        Console.WriteLine(\"Hello from MyCustomTool!\");\n        Console.WriteLine(\"The database has \" + _db.Blogs.Count() + \" blogs.\");\n        await Task.CompletedTask;\n    }\n\n    public Task StopAsync(CancellationToken cancellationToken)\n    {\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of GroupBy Query\nDESCRIPTION: This SQL code represents the translated SQL query generated by EF Core from the C# LINQ `GroupBy` example.  It uses the `GROUP BY` clause to aggregate data from the `Orders` table based on `CustomerId` and `EmployeeId`, computing the sum, minimum, maximum, and average of the `Amount` column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.1.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [o].[CustomerId], [o].[EmployeeId],\n    SUM([o].[Amount]), MIN([o].[Amount]), MAX([o].[Amount]), AVG([o].[Amount])\nFROM [Orders] AS [o]\nGROUP BY [o].[CustomerId], [o].[EmployeeId];\n```\n\n----------------------------------------\n\nTITLE: Implement IDesignTimeDbContextFactory - C#\nDESCRIPTION: This snippet demonstrates how to implement the IDesignTimeDbContextFactory interface by creating a model externally and using UseModel. It involves setting up DbContextOptions, using SqlServerConventionSetBuilder to create and customize the model, initializing it with the runtime initializer, and returning a new DbContext instance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\ninternal class MyDesignContext : IDesignTimeDbContextFactory<MyContext>\n{\n    public TestContext CreateDbContext(string[] args)\n    {\n        var optionsBuilder = new DbContextOptionsBuilder();\n        optionsBuilder.UseSqlServer(Configuration.GetConnectionString(\"DB\"));\n\n        var modelBuilder = SqlServerConventionSetBuilder.CreateModelBuilder();\n        CustomizeModel(modelBuilder);\n        var model = modelBuilder.Model.FinalizeModel();\n\n        var serviceContext = new MyContext(optionsBuilder.Options);\n        model = serviceContext.GetService<IModelRuntimeInitializer>().Initialize(model);\n        return new MyContext(optionsBuilder.Options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting to Old SQL Generation (EF 9)\nDESCRIPTION: This C# code demonstrates how to configure EF Core 9 to revert to the older SQL generation method for `Contains` queries. It uses the `TranslateParameterizedCollectionsToConstants` option within the `OnConfiguring` method of a `DbContext`.  This configuration requires a valid connection string for the SQL Server database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.UseSqlServer(\"<CONNECTION STRING>\", o => o.TranslateParameterizedCollectionsToConstants())\n```\n\n----------------------------------------\n\nTITLE: Projecting Shipping Address SQL\nDESCRIPTION: This shows the SQL generated when projecting only the `ShippingAddress` from the `Order` entity. The SQL query only selects the columns related to the shipping address.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP(2) [o].[ShippingAddress_City], [o].[ShippingAddress_Country], [o].[ShippingAddress_Line1],\n    [o].[ShippingAddress_Line2], [o].[ShippingAddress_PostCode]\nFROM [Orders] AS [o]\nWHERE [o].[Id] = @__orderId_0\n```\n\n----------------------------------------\n\nTITLE: SQLite Query Translation from EF Core\nDESCRIPTION: This SQL query is the translated form of the EF Core LINQ query, showing how the DateOnly comparison is handled in SQLite. It selects users with birthdays before '1900-01-01'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_176\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"u\".\"Id\", \"u\".\"Birthday\", \"u\".\"TokensRenewed\", \"u\".\"Username\"\nFROM \"Users\" AS \"u\"\nWHERE \"u\".\"Birthday\" < '1900-01-01'\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Type for Additional Ordinates in EF Core\nDESCRIPTION: This C# code snippet configures the column type for the `Location` property of the `City` entity, enabling Z ordinates.  By using `HasColumnType(\"POINTZ\")`, the spatial column can store additional dimension information.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/spatial.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<City>().Property(c => c.Location)\n    .HasColumnType(\"POINTZ\");\n```\n\n----------------------------------------\n\nTITLE: Defining an IEntity Interface (C#)\nDESCRIPTION: This code snippet defines the `IEntity` interface, which requires entities to have an `Id` property.  This interface is used as a constraint on the generic type parameter `T` in the `IRepository<T>` interface.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IEntity {\n        int Id { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Explicit Loading of Navigation Properties (EF Core)\nDESCRIPTION: This snippet illustrates how to explicitly load a navigation property (`Posts`) on an untracked entity using the `LoadAsync` method. This allows loading related data even when lazy-loading is not configured or desired. This can be done asynchronously.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Entry(blog).Collection(e => e.Posts).LoadAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating Table for Nullable Reference Types SQL\nDESCRIPTION: Defines a Tags table with a mix of non-nullable (Name) and nullable (Description) string columns.  This is used to demonstrate how EF Core 6.0 handles C# nullable reference types during scaffolding.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_52\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Tags] (\n  [Id] int NOT NULL IDENTITY,\n  [Name] nvarchar(max) NOT NULL,\n  [Description] nvarchar(max) NULL,\n  CONSTRAINT [PK_Tags] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into OnsiteCourse Table SQL\nDESCRIPTION: These SQL INSERT statements populate the OnsiteCourse table, including CourseID, Location, Days, and Time, providing details about on-site courses.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n--Insert data into OnsiteCourse table.\nINSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\nVALUES (1050, '123 Smith', 'MTWH', '11:30');\nINSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\nVALUES (1061, '234 Smith', 'TWHF', '13:15');\nINSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\nVALUES (1045, '121 Smith','MWHF', '15:30');\nINSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\nVALUES (4061, '22 Williams', 'TH', '11:15');\nINSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\nVALUES (2042, '225 Adams', 'MTWH', '11:00');\nINSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\nVALUES (4022, '23 Williams', 'MWF', '9:00');\n```\n\n----------------------------------------\n\nTITLE: Model with ulong Concurrency Token\nDESCRIPTION: Defines a Blog entity with a ulong property to represent a concurrency token. This simplifies the handling of rowversion/timestamp columns in SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public ulong Version { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define ProductContext DbContext C#\nDESCRIPTION: Defines the ProductContext class, which inherits from DbContext. It exposes DbSet properties for Category and Product entities, allowing EF Core to map them to the database. The OnConfiguring method specifies a Sqlite data file and enables lazy loading.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/wpf.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace GetStartedWPF\n{\n    public class ProductContext : DbContext\n    {\n        public DbSet<Category> Categories { get; set; }\n        public DbSet<Product> Products { get; set; }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder options)\n            => options.UseSqlite(\"Data Source=products.db\").UseLazyLoadingProxies();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the State of a Tracked Entity - C#\nDESCRIPTION: This snippet demonstrates changing the state of an already tracked entity. The `Attach` method is used to start tracking the entity, and then the state is set to `EntityState.Unchanged`.  This illustrates that you can control the entity state directly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/entity-state.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar existingBlog = new Blog { BlogId = 1, Name = \"ADO.NET Blog\" };\n\nusing (var context = new BloggingContext())\n{\n    context.Blogs.Attach(existingBlog);\n    context.Entry(existingBlog).State = EntityState.Unchanged;\n\n    // Do some more work...  \n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Element Example (CSDL)\nDESCRIPTION: This XML snippet demonstrates the use of the Documentation element within an EntityType element in CSDL. The Summary and LongDescription elements provide metadata about the Customer entity, which can be displayed in development tools like Visual Studio. No external dependencies are required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Customer\">\n    <Documentation>\n      <Summary>Summary here.</Summary>\n      <LongDescription>Long description here.</LongDescription>\n    </Documentation>\n    <Key>\n      <PropertyRef Name=\"CustomerId\" />\n    </Key>\n    <Property Type=\"Int32\" Name=\"CustomerId\" Nullable=\"false\" />\n    <Property Type=\"String\" Name=\"Name\" Nullable=\"false\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared-Type Entity for Many-to-Many Relationships - C#\nDESCRIPTION: This code snippet demonstrates how to configure a shared-type entity, specifically `Dictionary<string, int>`, for use as a join entity in a many-to-many relationship using EF Core's `OnModelCreating` method. It sets up indexer properties for TagId and PostId, defines the relationship between Post and Tag entities through the 'PostTag' join entity, and configures the foreign key relationships using `HasOne` and `WithMany`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .SharedTypeEntity<Dictionary<string, int>>(\n        \"PostTag\",\n        b =>\n        {\n            b.IndexerProperty<int>(\"TagId\");\n            b.IndexerProperty<int>(\"PostId\");\n        });\n\nmodelBuilder.Entity<Post>()\n    .HasMany(p => p.Tags)\n    .WithMany(p => p.Posts)\n    .UsingEntity<Dictionary<string, int>>(\n        \"PostTag\",\n        j => j.HasOne<Tag>().WithMany(),\n        j => j.HasOne<Post>().WithMany());\n```\n\n----------------------------------------\n\nTITLE: Default Scaffolded Entity Types\nDESCRIPTION: These C# classes show the entity types scaffolded from the SQL sample tables when not using the `-UseDatabaseNames` / `--use-database-names` option. Note how the table and column names have been converted to follow .NET naming conventions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Blog\n{\n    public int Id { get; set; }\n    public string BlogName { get; set; } = null!;\n    public virtual ICollection<Post> Posts { get; set; } = new List<Post>();\n}\n\npublic partial class Post\n{\n    public int Id { get; set; }\n    public string PostTitle { get; set; } = null!;\n    public string PostContent { get; set; } = null!;\n    public DateTime _1PublishedOn { get; set; }\n    public DateTime? _2DeletedOn { get; set; }\n    public int BlogId { get; set; }\n    public virtual Blog Blog { get; set; } = null!;\n    public virtual ICollection<Tag> Tags { get; set; } = new List<Tag>();\n}\n```\n\n----------------------------------------\n\nTITLE: ChangeTracker.Entries: Using Interface C#\nDESCRIPTION: Demonstrates using an interface (IEntityWithKey) with ChangeTracker.Entries to work with the key of any tracked entity in a strongly-typed way.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var entityEntry in context.ChangeTracker.Entries<IEntityWithKey>())\n{\n    Console.WriteLine(\n        $\"Found {entityEntry.Metadata.Name} entity with ID {entityEntry.Property(e => e.Id).CurrentValue}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Property to be Required - EF6 - C#\nDESCRIPTION: This example configures the `Name` property as required using the `IsRequired` method. If the property is not provided, a `DbEntityValidationException` will be thrown. This typically translates to a non-nullable column in the database, although there are exceptions depending on the inheritance strategy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>().Property(t => t.Name).IsRequired();\n```\n\n----------------------------------------\n\nTITLE: Deleting Blogs with ExecuteDeleteAsync - SQL\nDESCRIPTION: The SQL generated by the ExecuteDeleteAsync method to delete blogs with a rating less than 3.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/execute-insert-update-delete.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM [b]\nFROM [Blogs] AS [b]\nWHERE [b].[Rating] < 3\n```\n\n----------------------------------------\n\nTITLE: stringValue.Length .NET to SQL translation\nDESCRIPTION: Details the translation of stringValue.Length in .NET to LENGTH(@stringValue) in SQL when integrated with Entity Framework Core and Cosmos DB. This fetches the length of a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_30\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.Length\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[LENGTH(@stringValue)](/azure/cosmos-db/nosql/query/length)\n```\n\n----------------------------------------\n\nTITLE: DeleteBehavior Attribute on Dependent Navigation in EF Core\nDESCRIPTION: This example shows using the `[DeleteBehavior]` attribute on the dependent navigation property (`Blog`) in the `Post` class to set the delete behavior to `Restrict`. This means that deleting a `Blog` will be restricted if there are any associated `Post` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/mapping-attributes.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public int BlogId { get; set; }\n\n    [DeleteBehavior(DeleteBehavior.Restrict)]\n    public Blog Blog { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Category class using Code First in C#\nDESCRIPTION: This class defines the Category entity with properties for CategoryId, Name, and a collection of Products. It uses ObservableListSource to enable data binding with WinForms and represents the principal/master side of the one-to-many relationship with Product.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/winforms.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    namespace WinFormswithEFSample\n    {\n        public class Category\n        {\n            private readonly ObservableListSource<Product> _products =\n                    new ObservableListSource<Product>();\n\n            public int CategoryId { get; set; }\n            public string Name { get; set; }\n            public virtual ObservableListSource<Product> Products { get { return _products; } }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing EmployeeController Index Action in C#\nDESCRIPTION: This test class verifies the behavior of the EmployeeController's Index action. It asserts that the model contains all employees and that the model is ordered by hire date ascending.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\n    public class EmployeeControllerIndexActionTests\n    \t\t\t\t\t\t : EmployeeControllerTestBase {\n    \t[TestMethod]\n    \tpublic void ShouldBuildModelWithAllEmployees() {\n    \t\tvar result = _controller.Index();\n    \t\tvar model = result.ViewData.Model\n    \t\t\t\t\t\t\t\t\t as IEnumerable<Employee>;\n    \t\tAssert.IsTrue(model.Count() == _employeeData.Count);\n    \t}\n    \t[TestMethod]\n    \tpublic void ShouldOrderModelByHiredateAscending() {\n    \t\tvar result = _controller.Index();\n    \t\tvar model = result.ViewData.Model\n    \t\t\t\t\t\t\t\t as IEnumerable<Employee>;\n    \t\tAssert.IsTrue(model.SequenceEqual(\n    \t\t\t\t\t\t\t\t\t\t _employeeData.OrderBy(e => e.HireDate)));\n    \t}\n    \t// ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL function to count commented posts for a blog (SQL)\nDESCRIPTION: This SQL code creates a user-defined function named `CommentedPostCountForBlog`. This function takes a blog ID as input and returns the count of posts for that blog that have at least one comment. This function is later mapped to a CLR method in C# for use within EF Core queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/user-defined-function-mapping.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE FUNCTION dbo.CommentedPostCountForBlog(@id int)\nRETURNS int\nAS\nBEGIN\n    RETURN (SELECT COUNT(*)\n        FROM [Posts] AS [p]\n        WHERE ([p].[BlogId] = @id) AND ((\n            SELECT COUNT(*)\n            FROM [Comments] AS [c]\n            WHERE [p].[PostId] = [c].[PostId]) > 0));\nEND\n```\n\n----------------------------------------\n\nTITLE: Aggregate Function Mappings in SQLite EF Core\nDESCRIPTION: Defines how .NET aggregate functions are translated to SQL aggregate functions when using the SQLite provider with EF Core. It includes mappings for Average, Count, Max, Min, Sum, Concat, and Join.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/functions.md#_snippet_0\n\nLANGUAGE: .NET & SQL\nCODE:\n```\n.NET                                                  | SQL                                \n----------------------------------------------------- | ---------------------------------- \ngroup.Average(x => x.Property)                        | AVG(Property)\ngroup.Average(x => x.DecimalProperty)                 | ef_avg(DecimalProperty)\ngroup.Count()                                         | COUNT(*)\ngroup.LongCount()                                     | COUNT(*)\ngroup.Max(x => x.Property)                            | MAX(Property)\ngroup.Min(x => x.Property)                            | MIN(Property)\ngroup.Sum(x => x.Property)                            | SUM(Property)\ngroup.Sum(x => x.DecimalProperty)                     | ef_sum(DecimalProperty)\nstring.Concat(group.Select(x => x.Property))          | group_concat(Property, '')\nstring.Join(separator, group.Select(x => x.Property)) | group_concat(Property, @separator)\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternate Key with Lambda in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to configure an alternate key as the principal key for a relationship in Entity Framework Core using a lambda expression. It uses `HasPrincipalKey` to specify that `AlternateId` property in `Blog` entity will be used as the principal key in relationship with `Posts`. This replaces the default behavior of using the primary key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasPrincipalKey(e => e.AlternateId);\n```\n\n----------------------------------------\n\nTITLE: Updating Term LastDay using ExecuteUpdateAsync - C#\nDESCRIPTION: This code snippet demonstrates how to update the `LastDay` property of `Term` entities associated with `School` entities using `ExecuteUpdateAsync`. It filters the schools based on terms ending in 2022 and adds one day to the `LastDay` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_115\n\nLANGUAGE: csharp\nCODE:\n```\nawait context.Schools\n            .Where(e => e.Terms.Any(t => t.LastDay.Year == 2022))\n            .SelectMany(e => e.Terms)\n            .ExecuteUpdateAsync(s => s.SetProperty(t => t.LastDay, t => t.LastDay.AddDays(1)));\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Entity Properties in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates how to iterate through all properties of an entity using `context.Entry(blog).Properties` and access their metadata and current values.  It sets any DateTime property to the current date and time. It utilizes the `PropertyEntry` class to access the metadata and change the current value of each property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var propertyEntry in context.Entry(blog).Properties)\n{\n    if (propertyEntry.Metadata.ClrType == typeof(DateTime))\n    {\n        propertyEntry.CurrentValue = DateTime.Now;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of JSON Array Index Projection (Non-Nullable)\nDESCRIPTION: This SQL snippet displays the translated SQL query for projecting properties from a JSON array with filtering to prevent null results. The WHERE clause checks for null values before projecting.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_59\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Title],\n       CAST(JSON_VALUE([p].[Metadata],'$.Updates[0].UpdatedOn') AS date) AS [LatestUpdate],\n       CAST(JSON_VALUE([p].[Metadata],'$.Updates[1].UpdatedOn') AS date) AS [SecondLatestUpdate]\nFROM [Posts] AS [p]\n      WHERE (CAST(JSON_VALUE([p].[Metadata],'$.Updates[0].UpdatedOn') AS date) IS NOT NULL)\n        AND (CAST(JSON_VALUE([p].[Metadata],'$.Updates[1].UpdatedOn') AS date) IS NOT NULL)\n```\n\n----------------------------------------\n\nTITLE: Projection to Avoid Data Duplication - C#\nDESCRIPTION: This C# code snippet demonstrates using a projection with `Select` to explicitly choose which columns to retrieve from the `Blogs` table. This can avoid data duplication by excluding large columns, improving performance. Note that this creates an anonymous type, so the Blog isn't tracked by EF.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await ctx.Blogs\n    .Select(b => new\n    {\n        b.Id,\n        b.Name,\n        b.Posts\n    })\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of EntityFramework via Package Manager Console (PowerShell)\nDESCRIPTION: This command installs a specific version of the EntityFramework NuGet package using the Package Manager Console in Visual Studio.  Replace `<number>` with the desired version number (e.g., 6.2.0).  Requires the NuGet Package Manager.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/install.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package EntityFramework -Version <number>\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query with String Interpolation in EF Core\nDESCRIPTION: This code demonstrates how to use C# string interpolation with EF Core's `FromSql` method for executing raw SQL queries. It safely embeds variables into the SQL query, preventing SQL injection vulnerabilities by parameterizing the input. The code queries the `Customers` table based on the `City` and `ContactTitle` columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar city = \"London\";\nvar contactTitle = \"Sales Representative\";\n\nusing (var context = CreateContext())\n{\n    context.Set<Customer>()\n        .FromSql($@\"\n            SELECT *\n            FROM \\\"Customers\\\"\n            WHERE \\\"City\\\" = {city} AND\n                \\\"ContactTitle\\\" = {contactTitle}\")\n            .ToArray();\n  }\n```\n\n----------------------------------------\n\nTITLE: Explicit Configuration of Field Name\nDESCRIPTION: This snippet illustrates how to configure a field name that is different from the property name. This approach is planned for a future release of EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<Blog>()\n    .Property(\"Id\")\n    .HasField(\"_id\");\n```\n\n----------------------------------------\n\nTITLE: Find Direct Descendants Using HierarchyId in EF Core with C#\nDESCRIPTION: This C# code finds the direct descendants of a halfling, given its name, using `GetAncestor(1)`. It filters halflings where their immediate ancestor's path matches the given halfling's path. It requires an EF Core context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nIQueryable<Halfling> FindDirectDescendents(string name)\n            => context.Halflings.Where(\n                descendent => descendent.PathFromPatriarch.GetAncestor(1) == context.Halflings\n                    .Single(ancestor => ancestor.Name == name).PathFromPatriarch);\n```\n\n----------------------------------------\n\nTITLE: Update EF Core Tools (PowerShell)\nDESCRIPTION: Updates the Entity Framework Core tools to the latest version using the Package Manager Console in Visual Studio.  It's recommended to regularly update the tools to benefit from new features and bug fixes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Package Microsoft.EntityFrameworkCore.Tools\n```\n\n----------------------------------------\n\nTITLE: Creating EF In-Memory Test Doubles in C#\nDESCRIPTION: This code defines a `TestContext` that implements `IBloggingContext`, providing in-memory `DbSet` properties for `Blog` and `Post`. It also includes a `SaveChanges` method that increments a counter to track the number of times it's called, enabling verification during testing. Additionally, a generic `TestDbSet` class is implemented to simulate a DbSet in memory, with overridden methods for Add, Remove, Attach, Create, and Local. It also provides implementations for IQueryable, IEnumerable, and IDbAsyncEnumerable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/writing-test-doubles.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Data.Entity;\nusing System.Data.Entity.Infrastructure;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestingDemo\n{\n    public class TestContext : IBloggingContext\n    {\n        public TestContext()\n        {\n            this.Blogs = new TestDbSet<Blog>();\n            this.Posts = new TestDbSet<Post>();\n        }\n\n        public DbSet<Blog> Blogs { get; set; }\n        public DbSet<Post> Posts { get; set; }\n        public int SaveChangesCount { get; private set; }\n        public int SaveChanges()\n        {\n            this.SaveChangesCount++;\n            return 1;\n        }\n    }\n\n    public class TestDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity>\n        where TEntity : class\n    {\n        ObservableCollection<TEntity> _data;\n        IQueryable _query;\n\n        public TestDbSet()\n        {\n            _data = new ObservableCollection<TEntity>();\n            _query = _data.AsQueryable();\n        }\n\n        public override TEntity Add(TEntity item)\n        {\n            _data.Add(item);\n            return item;\n        }\n\n        public override TEntity Remove(TEntity item)\n        {\n            _data.Remove(item);\n            return item;\n        }\n\n        public override TEntity Attach(TEntity item)\n        {\n            _data.Add(item);\n            return item;\n        }\n\n        public override TEntity Create()\n        {\n            return Activator.CreateInstance<TEntity>();\n        }\n\n        public override TDerivedEntity Create<TDerivedEntity>()\n        {\n            return Activator.CreateInstance<TDerivedEntity>();\n        }\n\n        public override ObservableCollection<TEntity> Local\n        {\n            get { return _data; }\n        }\n\n        Type IQueryable.ElementType\n        {\n            get { return _query.ElementType; }\n        }\n\n        Expression IQueryable.Expression\n        {\n            get { return _query.Expression; }\n        }\n\n        IQueryProvider IQueryable.Provider\n        {\n            get { return new TestDbAsyncQueryProvider<TEntity>(_query.Provider); }\n        }\n\n        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n        {\n            return _data.GetEnumerator();\n        }\n\n        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()\n        {\n            return _data.GetEnumerator();\n        }\n\n        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()\n        {\n            return new TestDbAsyncEnumerator<TEntity>(_data.GetEnumerator());\n        }\n    }\n\n    internal class TestDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider\n    {\n        private readonly IQueryProvider _inner;\n\n        internal TestDbAsyncQueryProvider(IQueryProvider inner)\n        {\n            _inner = inner;\n        }\n\n        public IQueryable CreateQuery(Expression expression)\n        {\n            return new TestDbAsyncEnumerable<TEntity>(expression);\n        }\n\n        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)\n        {\n            return new TestDbAsyncEnumerable<TElement>(expression);\n        }\n\n        public object Execute(Expression expression)\n        {\n            return _inner.Execute(expression);\n        }\n\n        public TResult Execute<TResult>(Expression expression)\n        {\n            return _inner.Execute<TResult>(expression);\n        }\n\n        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)\n        {\n            return Task.FromResult(Execute(expression));\n        }\n\n        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)\n        {\n            return Task.FromResult(Execute<TResult>(expression));\n        }\n    }\n\n    internal class TestDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>\n    {\n        public TestDbAsyncEnumerable(IEnumerable<T> enumerable)\n            : base(enumerable)\n        { }\n\n        public TestDbAsyncEnumerable(Expression expression)\n            : base(expression)\n        { }\n\n        public IDbAsyncEnumerator<T> GetAsyncEnumerator()\n        {\n            return new TestDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());\n        }\n\n        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()\n        {\n            return GetAsyncEnumerator();\n        }\n\n        IQueryProvider IQueryable.Provider\n        {\n            get { return new TestDbAsyncQueryProvider<T>(this); }\n        }\n    }\n\n    internal class TestDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>\n    {\n        private readonly IEnumerator<T> _inner;\n\n        public TestDbAsyncEnumerator(IEnumerator<T> inner)\n        {\n            _inner = inner;\n        }\n\n        public void Dispose()\n        {\n            _inner.Dispose();\n        }\n\n        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)\n        {\n            return Task.FromResult(_inner.MoveNext());\n        }\n\n        public T Current\n        {\n            get { return _inner.Current; }\n        }\n\n        object IDbAsyncEnumerator.Current\n        {\n            get { return Current; }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Properties on Complex Type using Dot Notation - EF6 - C#\nDESCRIPTION: This snippet shows how to configure a property of a complex type (`Details.Location`) using dot notation. This allows accessing the complex type's property through the entity and configuring its properties like `HasMaxLength`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<OnsiteCourse>()\n    .Property(t => t.Details.Location)\n    .HasMaxLength(20);\n```\n\n----------------------------------------\n\nTITLE: Serializing with PreserveReferencesHandling in Json.NET (C#)\nDESCRIPTION: This code snippet demonstrates how to use Json.NET's `PreserveReferencesHandling` option to handle circular references and duplicate entities during serialization. It serializes a list of 'Post' objects with `PreserveReferencesHandling.All` and `Formatting.Indented` settings, ensuring that duplicate objects are represented as references rather than duplicated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar serialized = JsonConvert.SerializeObject(\n                posts,\n                new JsonSerializerSettings\n                {\n                    PreserveReferencesHandling = PreserveReferencesHandling.All,\n                    Formatting = Formatting.Indented\n                });\n```\n\n----------------------------------------\n\nTITLE: Defining Principal Element with ReferentialConstraint in XML (SSDL)\nDESCRIPTION: This XML snippet illustrates the use of the Principal element within a ReferentialConstraint to define the principal end of a foreign key constraint. It specifies that the CustomerId column of the Customers table is the primary key column referenced by the FK_CustomerOrders foreign key constraint.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"FK_CustomerOrders\">\n   <End Role=\"Customers\"\n        Type=\"ExampleModel.Store.Customers\" Multiplicity=\"1\">\n     <OnDelete Action=\"Cascade\" />\n   </End>\n   <End Role=\"Orders\"\n        Type=\"ExampleModel.Store.Orders\" Multiplicity=\"*\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Customers\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Principal>\n     <Dependent Role=\"Orders\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Table-Per-Type (TPT) Mapping\nDESCRIPTION: Shows the SQL schema generated for a table-per-type (TPT) mapping, where each type in the inheritance hierarchy has its own table with a foreign key relationship to the base table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Animals] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NULL,\n    CONSTRAINT [PK_Animals] PRIMARY KEY ([Id])\n);\n\nCREATE TABLE [Cats] (\n    [Id] int NOT NULL,\n    [EducationLevel] nvarchar(max) NULL,\n    CONSTRAINT [PK_Cats] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Cats_Animals_Id] FOREIGN KEY ([Id]) REFERENCES [Animals] ([Id]) ON DELETE NO ACTION,\n);\n\nCREATE TABLE [Dogs] (\n    [Id] int NOT NULL,\n    [FavoriteToy] nvarchar(max) NULL,\n    CONSTRAINT [PK_Dogs] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Dogs_Animals_Id] FOREIGN KEY ([Id]) REFERENCES [Animals] ([Id]) ON DELETE NO ACTION,\n);\n```\n\n----------------------------------------\n\nTITLE: Change Directory in Command Prompt\nDESCRIPTION: This command changes the current directory in the command prompt to the location of the assemblies for which you want to generate native images. This step is necessary to instruct NGen.exe where to find the assemblies.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/ngen.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncd <*Assemblies location*>\n```\n\n----------------------------------------\n\nTITLE: Renaming FK Parameter with Navigation - C#\nDESCRIPTION: This example demonstrates renaming a foreign key parameter when there is no navigation property on the dependent entity. It uses the Navigation method to identify the other end of the relationship (Blog) and configures the parameter for BlogId in the insert stored procedure for Post.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Post>()\n  .MapToStoredProcedures(s =>\n    s.Insert(i => i.Navigation<Blog>(\n      b => b.Posts,\n      c => c.Parameter(b => b.BlogId, \"blog_id\"))));\n```\n\n----------------------------------------\n\nTITLE: C# Post Entity for Many-to-Many\nDESCRIPTION: This C# code defines an entity class `Post` with properties for `Id`, `Title`, `Contents`, `PostedOn`, `UpdatedOn`, and `BlogId`. It includes a collection of `Tag` entities, representing a many-to-many relationship with the `Tags` table through the `PostTag` join table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; } = null!;\n    public string Contents { get; set; } = null!;\n    public DateTime PostedOn { get; set; }\n    public DateTime? UpdatedOn { get; set; }\n    public int BlogId { get; set; }\n\n    public virtual Blog Blog { get; set; } = null!;\n\n    public virtual ICollection<Tag> Tags { get; set; } = new List<Tag>();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customers by Phone Number C#\nDESCRIPTION: This code shows how to use a complex type instance (`PhoneNumber`) in a predicate to find customers with a specific phone number, checking across multiple phone number properties within the `Contact` complex type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nvar phoneNumber = new PhoneNumber(44, 7777555777);\nvar customersWithNumber = await context.Customers\n    .Where(\n        e => e.Contact.MobilePhone == phoneNumber\n             || e.Contact.WorkPhone == phoneNumber\n             || e.Contact.HomePhone == phoneNumber)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Filtering with JSON Array Indexing in EF Core\nDESCRIPTION: This code snippet demonstrates how to filter entities based on values within a JSON array using index access. The query filters `Posts` where the `UpdatedOn` property of the first two updates in the `Metadata.Updates` array is before a cutoff date.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nvar cutoff = DateOnly.FromDateTime(DateTime.UtcNow - TimeSpan.FromDays(365));\nvar updatedPosts = await context.Posts\n    .Where(\n        p => p.Metadata!.Updates[0].UpdatedOn < cutoff\n             && p.Metadata!.Updates[1].UpdatedOn < cutoff)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configure Backing Field with Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to configure a backing field for a property using the Fluent API in Entity Framework Core. The `Property` method configures the `Url` property, and the `HasField` method specifies the `_validatedUrl` field as its backing field.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/backing-field.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\npublic class MyContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Blog>()\n            .Property(b => b.Url)\n            .HasField(\"_validatedUrl\");\n    }\n}\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n\n    private string _validatedUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Geometry Dimension using HasColumnType\nDESCRIPTION: This code snippet demonstrates how to specify the dimension (Z and M) for geometry columns using `HasColumnType` in EF Core with the SQLite NTS extension. It shows how to allow any GEOMETRY value with optional Z and M values, as well as POINT values with an optional Z value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<GeoEntity>(\n    x =>\n    {\n        // Allow any GEOMETRY value with optional Z and M values\n        x.Property(e => e.Geometry).HasColumnType(\"GEOMETRYZM\");\n\n        // Allow only POINT values with an optional Z value\n        x.Property(e => e.Point).HasColumnType(\"POINTZ\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Loading Nested Related Entities with Include and ThenInclude - C#\nDESCRIPTION: This C# code demonstrates how to load nested related entities using `Include` and `ThenInclude`. The `Comments` are related to `Posts`, which are related to `Blogs`. Unlike the previous example, this does not lead to a cartesian explosion because the JOINs are not at the same level.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await ctx.Blogs\n    .Include(b => b.Posts)\n    .ThenInclude(p => p.Comments)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Custom Logging with MyLogger Class in Entity Framework 6\nDESCRIPTION: This snippet illustrates how to integrate a custom logging framework with Entity Framework 6 by using a delegate. It defines a `MyLogger` class with a `Log` method and then hooks it up to the `EF.Database.Log` property using a lambda expression, allowing you to customize logging format and destination.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyLogger\n{\n    public void Log(string component, string message)\n    {\n        Console.WriteLine(\"Component: {0} Message: {1} \", component, message);\n    }\n}\n\nvar logger = new MyLogger();\ncontext.Database.Log = s => logger.Log(\"EFApp\", s);\n```\n\n----------------------------------------\n\nTITLE: Querying Authors in Chigley C#\nDESCRIPTION: This C# code snippet demonstrates how to query for authors who live in \"Chigley\" using LINQ and EF Core. It filters the `Authors` table based on the `City` property within the JSON `Contact` column. The `ToListAsync()` method executes the query and returns a list of authors.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar authorsInChigley = await context.Authors\n    .Where(author => author.Contact.Address.City == \"Chigley\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configure DbSet Properties - C#\nDESCRIPTION: Code snippet showcasing how to create `DbSet` properties on a `DbContext` for each type in the inheritance hierarchy, enabling explicit model inclusion. This ensures that EF Core recognizes and maps all the concrete types in the hierarchy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\npublic DbSet<Animal> Animals => Set<Animal>();\n        public DbSet<Pet> Pets => Set<Pet>();\n        public DbSet<FarmAnimal> FarmAnimals => Set<FarmAnimal>();\n        public DbSet<Cat> Cats => Set<Cat>();\n        public DbSet<Dog> Dogs => Set<Dog>();\n        public DbSet<Human> Humans => Set<Human>();\n```\n\n----------------------------------------\n\nTITLE: Book Entity Type with EntityTypeConfigurationAttribute - C#\nDESCRIPTION: This code snippet demonstrates using the `EntityTypeConfigurationAttribute` on an entity type (`Book`). This attribute specifies the `IEntityTypeConfiguration` implementation (`BookConfiguration`) that should be used to configure the entity type.  EF Core automatically discovers and applies this configuration when the `Book` entity is included in the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[EntityTypeConfiguration(typeof(BookConfiguration))]\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Isbn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Post Code as Modified - C#\nDESCRIPTION: This code snippet demonstrates how to mark a property within a nested complex type as modified. It sets the IsModified flag to true for the 'PostCode' property within the 'Address' complex type, which is nested within the 'Contact' complex type of a 'Customer' entity, indicating that the property has been changed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Entry(customer)\n    .ComplexProperty(e => e.Contact)\n    .ComplexProperty(e => e.Address)\n    .Property(e => e.PostCode)\n    .IsModified = true;\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Summary View Model in C#\nDESCRIPTION: This code defines a simple view model, `EmployeeSummaryViewModel`, which is used to transfer data to the view.  It contains properties for the employee's name and the total number of time cards. This view model is a data transfer object (DTO) and is not persisted in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n    public class EmployeeSummaryViewModel {\n        public string Name { get; set; }\n        public int TotalTimeCards { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: SQL for Selecting Postcodes in Chigley SQL\nDESCRIPTION: This SQL code represents the generated SQL query for selecting the postcodes of authors living in 'Chigley'. It uses `JSON_VALUE` to extract both the `City` and `Postcode` from the JSON `Contact` data. It first filters by city and then selects the postcode.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CAST(JSON_VALUE([a].[Contact],'$.Address.Postcode') AS nvarchar(max))\nFROM [Authors] AS [a]\nWHERE CAST(JSON_VALUE([a].[Contact],'$.Address.City') AS nvarchar(max)) = N'Chigley'\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many with Navigation and Alternate Keys\nDESCRIPTION: Configures the many-to-many relationship between `Post` and `Tag` using navigation properties and alternate keys. The UsingEntity generic method is used. HasOne<> is used to specify the navigation properties and HasPrincipalKey() specifies the alternate key properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>(\n            r => r.HasOne<Tag>(e => e.Tag).WithMany(e => e.PostTags).HasPrincipalKey(e => e.AlternateKey),\n            l => l.HasOne<Post>(e => e.Post).WithMany(e => e.PostTags).HasPrincipalKey(e => e.AlternateKey));\n}\n```\n\n----------------------------------------\n\nTITLE: Get Page of Customers with Explicit Secondary Sort C#\nDESCRIPTION: This method retrieves a page of customers with dynamic sorting and explicitly adds a secondary sort order by the customer's ID. This ensures stable ordering when paging through results.  It is a simpler alternative to using an interceptor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nTask<List<Customer>> GetPageOfCustomers2(string sortProperty, int page)\n        {\n            using var context = new CustomerContext();\n\n            return context.Customers\n                .OrderBy(e => EF.Property<object>(e, sortProperty))\n                .ThenBy(e => e.Id)\n                .Skip(page * 20).Take(20).ToListAsync();\n        }\n```\n\n----------------------------------------\n\nTITLE: Getting the Actual Entity Type from a Proxy Type - C#\nDESCRIPTION: This code snippet shows how to retrieve the actual entity type from a proxy type using the `GetObjectType` method from `ObjectContext`. This is useful for scenarios where you need to work with the underlying entity type regardless of whether it's a proxy.  It requires the `BloggingContext`, access to the `Blogs` DbSet, and the `ObjectContext`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/proxies.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n    var entityType = ObjectContext.GetObjectType(blog.GetType());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IListSource for Collections in C#\nDESCRIPTION: This class extends ObservableCollection to implement the IListSource interface. This enables two-way data binding with sorting in Windows Forms. The GetList() method returns an IBindingList implementation that stays in sync with the ObservableCollection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/winforms.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.Collections.ObjectModel;\n    using System.ComponentModel;\n    using System.Diagnostics.CodeAnalysis;\n    using System.Data.Entity;\n\n    namespace WinFormswithEFSample\n    {\n        public class ObservableListSource<T> : ObservableCollection<T>, IListSource\n            where T : class\n        {\n            private IBindingList _bindingList;\n\n            bool IListSource.ContainsListCollection { get { return false; } }\n\n            IList IListSource.GetList()\n            {\n                return _bindingList ?? (_bindingList = this.ToBindingList());\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Get Column Name with StoreObjectIdentifier - C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the column name for a specific table, view, or function when the entity type may be mapped to multiple targets, leveraging `StoreObjectIdentifier`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar columnName = property.GetColumnName(StoreObjectIdentifier.Table(\"Users\", null));\n```\n\n----------------------------------------\n\nTITLE: Transaction Commit Failure Verification - C#\nDESCRIPTION: This snippet demonstrates how to verify the success of a transaction commit and handle potential data corruption scenarios.  It uses the `ExecuteInTransaction` extension method to execute the transaction and verify its success. If a transient error occurs during the commit, the `verifySucceeded` function is invoked. `SaveChanges` is called with `acceptAllChangesOnSuccess` set to `false` to allow retrying the same operation if the commit fails and the transaction is rolled back.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-resiliency.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var strategy = context.Database.CreateExecutionStrategy();\n\n    var blog = new Blog { Url = \"http://example.com\" };\n    context.Blogs.Add(blog);\n\n    strategy.ExecuteInTransaction(\n        context,  // The DbContext to be used.\n        () =>  // A delegate representing all the operations to be performed in the transaction.\n        {\n            context.SaveChanges(acceptAllChangesOnSuccess: false);\n        },\n        () =>  // A delegate invoked when the transaction has been successfully committed.\n        {\n            return context.Blogs.AsNoTracking().Any(b => b.BlogId == blog.BlogId);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Level for SQL - C#\nDESCRIPTION: Demonstrates how to configure the log level for SQL execution in EF Core 3.0 using `OnConfiguring`. This allows applications to specify the desired log level for specific events.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseSqlServer(connectionString)\n        .ConfigureWarnings(c => c.Log((RelationalEventId.CommandExecuting, LogLevel.Debug)));\n```\n\n----------------------------------------\n\nTITLE: Composite Key Convention - C#\nDESCRIPTION: Configures a composite key consisting of the 'Key' (int) and 'Name' (string) columns. It specifies the column order for each property to define the order of the composite key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Properties<int>()\n            .Where(x => x.Name == \"Key\")\n            .Configure(x => x.IsKey().HasColumnOrder(1));\n\nmodelBuilder.Properties()\n            .Where(x => x.Name == \"Name\")\n            .Configure(x => x.IsKey().HasColumnOrder(2));\n```\n\n----------------------------------------\n\nTITLE: Using the Test Fixture in a Test Class (C#)\nDESCRIPTION: This shows how to reference the test collection and fixture in a test class. The fixture is injected into the constructor, providing access to the test database. Highlights the `Collection` attribute and the constructor injection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Collection(\"TransactionalTests\")]\npublic class TransactionalBloggingControllerTest : IDisposable\n{\n    private readonly TransactionalTestDatabaseFixture _fixture;\n\n    public TransactionalBloggingControllerTest(TransactionalTestDatabaseFixture fixture)\n    {\n        _fixture = fixture;\n    }\n\n    public void Dispose()\n    {\n        _fixture.Cleanup();\n    }\n\n    [Fact]\n    public async Task Get_blog_returns_NotFound_if_does_not_exist()\n    {\n        using var context = _fixture.CreateContext();\n        var controller = new BloggingController(context);\n        var result = await controller.Get(999);\n        Assert.IsType<NotFoundResult>(result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Document with Partition Key - C#\nDESCRIPTION: This code snippet demonstrates how to load a document, specifically setting the partition key to improve performance when querying Cosmos DB. It uses `FindAsync` with the partition key to get a snapshot that isn't tracked for changes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<Document?> LoadDocumentAsync(string documentId, string title)\n{\n    ArgumentNullException.ThrowIfNull(documentId);\n    ArgumentNullException.ThrowIfNull(title);\n\n    return await _context.Documents.FindAsync(title, documentId);\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting to Old SQL Generation (EF 8)\nDESCRIPTION: This C# code shows how to configure EF Core 8 to revert to the older SQL generation method for `Contains` queries by setting the SQL compatibility level.  It uses the `UseCompatibilityLevel` option within the `OnConfiguring` method of a `DbContext`. Requires a valid SQL Server connection string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseSqlServer(@\"<CONNECTION STRING>\", o => o.UseCompatibilityLevel(120));\n```\n\n----------------------------------------\n\nTITLE: Column Names Configuration C#\nDESCRIPTION: Demonstrates how to rename the database columns for the properties of the owned entity type using the `HasColumnName` method.  This controls the naming when table splitting is used.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Modeling.OwnedEntities\n{\n    public class OwnedEntityContext : DbContext\n    {\n        public DbSet<Order> Orders { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Order>(builder =>\n            {\n                builder.OwnsOne(order => order.ShippingAddress, sa =>\n                {\n                    sa.Property(p => p.Street).HasColumnName(\"Street\");\n                    sa.Property(p => p.City).HasColumnName(\"City\");\n                });\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Navigation Property Access Mode - C#\nDESCRIPTION: This C# code demonstrates how to configure EF Core to use the property accessor for navigation properties.  `UsePropertyAccessMode(PropertyAccessMode.Property)` forces EF to use the property's getter and setter, rather than accessing the backing field directly. This is configured within the `OnModelCreating` method of the DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Navigation(e => e.Posts)\n        .UsePropertyAccessMode(PropertyAccessMode.Property);\n\n    modelBuilder.Entity<Post>()\n        .Navigation(e => e.Blog)\n        .UsePropertyAccessMode(PropertyAccessMode.Property);\n}\n```\n\n----------------------------------------\n\nTITLE: ASP.NET MVC Controller Action in C#\nDESCRIPTION: This code snippet presents a controller action 'Details' that retrieves an Employee object based on its ID using a Unit of Work pattern. It accesses the employee repository through '_unitOfWork.Employees', finds a single employee matching the provided ID, and returns a View with the employee data. The goal is to verify the action retrieves the correct employee without directly querying the database for isolation during testing.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n    public ViewResult Details(int id) {\n    \tvar employee = _unitOfWork.Employees\n    \t\t\t\t\t\t\t\t \t\t\t\t\t\t.Single(e => e.Id == id);\n    \treturn View(employee);\n    }\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Auto Includes - C#\nDESCRIPTION: This shows a sample query after the model has been configured with the auto include feature. After configuration, this query will load `ColorScheme` navigation for all the themes in the results.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar themes = context.Themes.ToList();\n```\n\n----------------------------------------\n\nTITLE: Define IHasRetrieved Interface C#\nDESCRIPTION: Defines an interface `IHasRetrieved` with a `Retrieved` property of type `DateTime`. This interface is used to mark entities that should store the time they were retrieved from the database.  It allows the same interceptor to work with many different entity types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_89\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IHasRetrieved\n{\n    DateTime Retrieved { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL to Create Sample Tables\nDESCRIPTION: SQL statements to create sample tables used for demonstrating the `-UseDatabaseNames` / `--use-database-names` option. These tables include unconventional naming to highlight how the scaffolder changes names by default.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [BLOGS] (\n    [ID] int NOT NULL IDENTITY,\n    [Blog_Name] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Blogs] PRIMARY KEY ([ID]));\n\nCREATE TABLE [posts] (\n    [id] int NOT NULL IDENTITY,\n    [postTitle] nvarchar(max) NOT NULL,\n    [post content] nvarchar(max) NOT NULL,\n    [1 PublishedON] datetime2 NOT NULL,\n    [2 DeletedON] datetime2 NULL,\n    [BlogID] int NOT NULL,\n    CONSTRAINT [PK_Posts] PRIMARY KEY ([id]),\n    CONSTRAINT [FK_Posts_Blogs_BlogId] FOREIGN KEY ([BlogID]) REFERENCES [Blogs] ([ID]) ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: EDMX Function Import XML\nDESCRIPTION: XML snippet showing the initial function import and complex type definition in the EDMX file for the GetAllBlogsAndPosts stored procedure, before modification for multiple result sets.  This section needs to be modified to properly map the stored procedure's output to the Blog and Post entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/multiple-result-sets.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- CSDL content -->\n<edmx:ConceptualModels>\n\n...\n\n  <FunctionImport Name=\"GetAllBlogsAndPosts\" ReturnType=\"Collection(BlogModel.GetAllBlogsAndPosts_Result)\" />\n\n...\n\n  <ComplexType Name=\"GetAllBlogsAndPosts_Result\">\n    <Property Type=\"Int32\" Name=\"BlogId\" Nullable=\"false\" />\n    <Property Type=\"String\" Name=\"Name\" Nullable=\"false\" MaxLength=\"255\" />\n    <Property Type=\"String\" Name=\"Description\" Nullable=\"true\" />\n  </ComplexType>\n\n...\n\n</edmx:ConceptualModels>\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext using Secret Manager\nDESCRIPTION: This example demonstrates how to read the connection string from the project's configuration, which is set using the Secret Manager tool. It then uses the connection string to scaffold the DbContext and entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_11\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet user-secrets set ConnectionStrings:Blogging \"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Blogging\"\ndotnet ef dbcontext scaffold Name=ConnectionStrings:Blogging Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Rendering a C# Region as a Snippet\nDESCRIPTION: This code snippet illustrates how to render a C# region as a snippet. The `name` parameter specifies the name of the region to be included. This is the preferred method for referencing code snippets in C#.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/saving/Program.cs?name=snippet_Example)]\n```\n\n----------------------------------------\n\nTITLE: Installing dotnet-counters globally\nDESCRIPTION: This command installs the dotnet-counters tool globally, enabling it to be used from any command prompt.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/metrics.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet tool install --global dotnet-counters\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by EF Core before 8.0\nDESCRIPTION: This SQL code shows how EF Core versions prior to 8.0 translated LINQ queries with `Contains`.  It directly inserts the parameterized values as constants into the `IN` clause. The database should contain a table named `Blogs` with columns `Id` and `Name`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[Id], [b].[Name]\nFROM [Blogs] AS [b]\nWHERE [b].[Name] IN (N'Blog1', N'Blog2')\n```\n\n----------------------------------------\n\nTITLE: SqlQuery on Database in C#\nDESCRIPTION: This code snippet demonstrates the usage of `SqlQuery` on the `Database` object of the context to execute a raw SQL query and retrieve entities.  This method returns entities that are not tracked by the context. It uses a string containing the SQL query to select all columns from the `products` table and maps the result to the `Product` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n// use this to obtain entities and not track them\nvar q1 = context.Database.SqlQuery<Product>(\"select * from products\");\n```\n\n----------------------------------------\n\nTITLE: Defining Enum and Model - C#\nDESCRIPTION: This code defines an enum `DepartmentNames` and a corresponding `Department` class. The `Department` class uses the enum as a data type for the `Name` property. This illustrates how to incorporate enumerations within your data model using Code First.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/enums.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic enum DepartmentNames\n{\n    English,\n    Math,\n    Economics\n}     \n\npublic partial class Department\n{\n    public int DepartmentID { get; set; }\n    public DepartmentNames Name { get; set; }\n    public decimal Budget { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of Regex.IsMatch for Cosmos DB\nDESCRIPTION: This SQL query represents the translated form of the C# code that uses Regex.IsMatch in an EF Core 7 query targeting Azure Cosmos DB. It uses the RegexMatch function to filter based on the regular expression.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_135\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT c\nFROM root c\nWHERE ((c[\"Discriminator\"] = \"Triangle\") AND RegexMatch(c[\"Name\"], \"[a-z]t[a-z]\", \"i\"))\n```\n\n----------------------------------------\n\nTITLE: Regex.IsMatch with options .NET to SQL translation\nDESCRIPTION: Shows how Regex.IsMatch with options in .NET is translated to RegexMatch in SQL when using Entity Framework Core. This allows specifying regular expression options such as case-insensitivity. EF Core 7.0 or later is needed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_14\n\nLANGUAGE: .NET\nCODE:\n```\nRegex.IsMatch(input, pattern, options)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[RegexMatch(@input, @pattern, @options)](/azure/cosmos-db/nosql/query/regexmatch)\n```\n\n----------------------------------------\n\nTITLE: SQL DELETE statement generated by ExecuteDelete (SQL)\nDESCRIPTION: This SQL code shows the actual DELETE statement generated and executed against the database when using `ExecuteDelete` with a `WHERE` clause. It efficiently deletes rows that satisfy the condition without needing to load and track entities via EF Core's change tracker.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/index.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM [b]\nFROM [Blogs] AS [b]\nWHERE [b].[Rating] < 3\n```\n\n----------------------------------------\n\nTITLE: Data Annotations Configuration\nDESCRIPTION: This code shows how entity properties are configured using Data Annotations when the `-DataAnnotations` / `--data-annotations` option is used. Specifically, it shows an example of setting the `Title` property as required with a maximum length of 160 characters using the `[Required]` and `[StringLength]` attributes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[Required]\n[StringLength(160)]\npublic string Title { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Finding Common Ancestor - C#\nDESCRIPTION: This code snippet finds the common ancestor of two halflings. It uses the `IsDescendantOf` method to check if an ancestor is a descendant of both halflings.  The result is ordered by level in descending order and returns the first match.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<Halfling?> FindCommonAncestor(Halfling first, Halfling second)\n            => await context.Halflings\n                .Where(\n                    ancestor => first.PathFromPatriarch.IsDescendantOf(ancestor.PathFromPatriarch)\n                                && second.PathFromPatriarch.IsDescendantOf(ancestor.PathFromPatriarch))\n                .OrderByDescending(ancestor => ancestor.PathFromPatriarch.GetLevel())\n                .FirstOrDefaultAsync();\n```\n\n----------------------------------------\n\nTITLE: Mitigating Queryable Collection Projection Error C#\nDESCRIPTION: This code demonstrates the mitigation for the breaking change.  The `ToList()` method is added after the Queryable object in the projection to materialize the result as a `List<Post>` before it's used in the projection. This resolves the error by ensuring that a concrete list, rather than a queryable, is used.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Blogs.Select(b => context.Posts.Where(p => p.BlogId == b.Id).ToList())\n```\n\n----------------------------------------\n\nTITLE: Customize Property Names for Owned Entities in Cosmos DB\nDESCRIPTION: This code snippet demonstrates how to customize the property names of owned entities in Azure Cosmos DB using EF Core's ToJsonProperty method. It renames the ShipsToCity and ShipsToStreet properties of the Address entity to be stored as \"ShipsToCity\" and \"ShipsToStreet\" in the JSON document.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nentityTypeBuilder.OwnsOne(o => o.Address, b =>\n{\n    b.Property(p => p.ShipsToCity).ToJsonProperty(\"ShipsToCity\");\n    b.Property(p => p.ShipsToStreet).ToJsonProperty(\"ShipsToStreet\");\n});\n```\n\n----------------------------------------\n\nTITLE: Constructor binding for initializing non-nullable properties C#\nDESCRIPTION: This code shows how to initialize non-nullable properties through constructor binding, ensuring they are set when an instance of the class is created. This pattern is useful when using older C# versions where required members are not available.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer\n{\n    public Customer(string name)\n    {\n        Name = name;\n    }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Discriminator Mutable in EF Core\nDESCRIPTION: This code snippet shows how to make the discriminator property mutable in Entity Framework Core. This is useful when changing the discriminator value is necessary and the context will be disposed immediately after calling `SaveChanges`. It utilizes the `SetAfterSaveBehavior` method to allow saving changes to the discriminator property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<BaseEntity>()\n    .Property<string>(\"Discriminator\")\n    .Metadata.SetAfterSaveBehavior(PropertySaveBehavior.Save);\n```\n\n----------------------------------------\n\nTITLE: Example Entity Classes Foo and Bar - C#\nDESCRIPTION: This snippet presents two simple entity classes, `Foo` and `Bar`, with a navigation property from `Foo` to `Bar`. It highlights a potential issue with initializing navigation properties, which can lead to unexpected behavior in EF Core queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Foo\n{\n    public int Id { get; set; }\n\n    public Bar Bar { get; set; } = new(); // Don't do this.\n}\n\npublic class Bar\n{\n    public int Id { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Required No Navigation to Principal - C#\nDESCRIPTION: This code snippet defines a required one-to-many relationship where the dependent entity (`Post`) has a foreign key property (`BlogId`) but no navigation property to the principal entity (`Blog`). This creates a unidirectional relationship. The `BlogId` property in `Post` is a required foreign key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n        // Principal (parent)\n        public class Blog\n        {\n            public int Id { get; set; }\n            public ICollection<Post> Posts { get; } = new List<Post>();  // Collection navigation containing dependents\n        }\n\n        // Dependent (child)\n        public class Post\n        {\n            public int Id { get; set; }\n            public int BlogId { get; set; }                              // Required foreign key property\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring a One-to-One Relationship C#\nDESCRIPTION: This example configures a one-to-one relationship between Instructor and OfficeAssignment, where both ends are required.  It uses WithRequiredPrincipal to explicitly define the principal end of the relationship, because EF cannot automatically determine the dependent and principal when both ends are required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Configure the primary key for the OfficeAssignment\nmodelBuilder.Entity<OfficeAssignment>()\n    .HasKey(t => t.InstructorID);\n\nmodelBuilder.Entity<Instructor>()\n    .HasRequired(t => t.OfficeAssignment)\n    .WithRequiredPrincipal(t => t.Instructor);\n```\n\n----------------------------------------\n\nTITLE: MappingFragment Element Example (MSL)\nDESCRIPTION: This example demonstrates a MappingFragment element as a child of an EntityTypeMapping element. It maps properties of the Course type in the conceptual model to columns of the Course table in the database, specifying the StoreEntitySet and ScalarProperty mappings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"Courses\">\n   <EntityTypeMapping TypeName=\"SchoolModel.Course\">\n     <MappingFragment StoreEntitySet=\"Course\">\n       <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n       <ScalarProperty Name=\"Title\" ColumnName=\"Title\" />\n       <ScalarProperty Name=\"Credits\" ColumnName=\"Credits\" />\n       <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Severing Optional Relationship in C# (Method 2)\nDESCRIPTION: This C# code snippet demonstrates severing an optional relationship between a blog and its posts by clearing the `Posts` collection of the blog.  When `SaveChanges` is called, the database will be updated to set the corresponding foreign key `BlogId` to null for each post.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blog = context.Blogs.OrderBy(e => e.Name).Include(e => e.Posts).First();\n\nblog.Posts.Clear();\n            \ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Single Query with Joins - SQL\nDESCRIPTION: This SQL query is generated by the previous C# code. It shows the use of LEFT JOINs to load related entities from the `Posts` and `Contributors` tables. The cartesian explosion occurs here because both `Posts` and `Contributors` are at the same level, relative to `Blog`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[Id], [b].[Name], [p].[Id], [p].[BlogId], [p].[Title], [c].[Id], [c].[BlogId], [c].[FirstName], [c].[LastName]\nFROM [Blogs] AS [b]\nLEFT JOIN [Posts] AS [p] ON [b].[Id] = [p].[BlogId]\nLEFT JOIN [Contributors] AS [c] ON [b].[Id] = [c].[BlogId]\nORDER BY [b].[Id], [p].[Id]\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration XML\nDESCRIPTION: This XML snippet shows the connection string added to the App.config file, which tells Entity Framework how to connect to the existing database.  The name attribute is used by the BloggingContext class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/existing-database.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n  <add  \n    name=\"BloggingContext\"  \n    connectionString=\"data source=(localdb)\\mssqllocaldb;initial catalog=Blogging;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework\"  \n    providerName=\"System.Data.SqlClient\" />\n</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Set Navigation Property to Null in C# (.NET 4.0)\nDESCRIPTION: This code snippet shows how to delete a relationship by setting the navigation property to `null`. This example is for Entity Framework based on .NET 4.0, where the related end needs to be loaded before setting it to null. It uses `context.Entry(course).Reference(c => c.Department).Load()` to load the related `Department` and then sets `course.Department` to `null`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Entry(course).Reference(c => c.Department).Load();\ncourse.Department = null;\n```\n\n----------------------------------------\n\nTITLE: Add Rating Property to Blog Class\nDESCRIPTION: This C# code snippet adds an integer property called 'Rating' to the 'Blog' class.\nThis property is intended to store a rating value for each blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/automatic.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic int Rating { get; set; }\n```\n\n----------------------------------------\n\nTITLE: CustomerTpt and SpecialCustomerTpt Entity Definitions C#\nDESCRIPTION: This snippet defines two entity types, `CustomerTpt` and `SpecialCustomerTpt`, mapped using TPT (Table Per Type) inheritance. It's used to demonstrate EF Core 8's ability to update entities in a TPT hierarchy.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_132\n\nLANGUAGE: csharp\nCODE:\n```\n[Table(\"TptSpecialCustomers\")]\npublic class SpecialCustomerTpt : CustomerTpt\n{\n    public string? Note { get; set; }\n}\n\n[Table(\"TptCustomers\")]\npublic class CustomerTpt\n{\n    public int Id { get; set; }\n    public required string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Conversion Function Mappings in SQLite EF Core\nDESCRIPTION: Illustrates how .NET conversion functions, specifically the ToString() method for various data types, are translated into SQL CAST operations using the SQLite provider in EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/functions.md#_snippet_2\n\nLANGUAGE: .NET & SQL\nCODE:\n```\n.NET                      | SQL\n------------------------- | ---\nboolValue.ToString()      | CAST(@boolValue AS TEXT)\nbyteValue.ToString()      | CAST(@byteValue AS TEXT)\nbytes.ToString()          | CAST(@bytes AS TEXT)\ncharValue.ToString()      | CAST(@charValue AS TEXT)\ndateTime.ToString()       | CAST(@dateTime AS TEXT)\ndateTimeOffset.ToString() | CAST(@dateTimeOffset AS TEXT)\ndecimalValue.ToString()   | CAST(@decimalValue AS TEXT)\ndoubleValue.ToString()    | CAST(@doubleValue AS TEXT)\nfloatValue.ToString()     | CAST(@floatValue AS TEXT)\nguid.ToString()           | CAST(@guid AS TEXT)\nintValue.ToString()       | CAST(@intValue AS TEXT)\nlongValue.ToString()      | CAST(@longValue AS TEXT)\nsbyteValue.ToString()     | CAST(@sbyteValue AS TEXT)\nshortValue.ToString()     | CAST(@shortValue AS TEXT)\ntimeSpan.ToString()       | CAST(@timeSpan AS TEXT)\nuintValue.ToString()      | CAST(@uintValue AS TEXT)\nushortValue.ToString()    | CAST(@ushortValue AS TEXT)\n```\n\n----------------------------------------\n\nTITLE: Building Expression Trees for ExecuteUpdateAsync (Old)\nDESCRIPTION: This code demonstrates how to dynamically build expression trees for the column setters argument of `ExecuteUpdateAsync` prior to EF Core 10. It shows the complexity involved in conditionally adding setters based on certain conditions. This approach is no longer necessary in EF Core 10.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-10.0/breaking-changes.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Base setters - update the Views only\nExpression<Func<SetPropertyCalls<Blog>, SetPropertyCalls<Blog>>> setters =\n    s => s.SetProperty(b => b.Views, 8);\n\n// Conditionally add SetProperty(b => b.Name, \"foo\") to setters, based on the value of nameChanged\nif (nameChanged)\n{\n    var blogParameter = Expression.Parameter(typeof(Blog), \"b\");\n\n    setters = Expression.Lambda<Func<SetPropertyCalls<Blog>, SetPropertyCalls<Blog>>>( \n        Expression.Call(\n            instance: setters.Body,\n            methodName: nameof(SetPropertyCalls<Blog>.SetProperty),\n            typeArguments: [typeof(string)],\n            arguments:\n            [\n                Expression.Lambda<Func<Blog, string>>(Expression.Property(blogParameter, nameof(Blog.Name)), blogParameter),\n                Expression.Constant(\"foo\")\n            ]),\n        setters.Parameters);\n}\n\nawait context.Blogs.ExecuteUpdateAsync(setters);\n```\n\n----------------------------------------\n\nTITLE: Association End Element Example (CSDL)\nDESCRIPTION: This XML snippet demonstrates the use of the End element within an Association element in CSDL. The Multiplicity attribute defines the relationship cardinality. The OnDelete element specifies the cascading delete behavior. No external dependencies are required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"CustomerOrders\">\n   <End Type=\"ExampleModel.Customer\" Role=\"Customer\" Multiplicity=\"1\" />\n   <End Type=\"ExampleModel.Order\" Role=\"Order\" Multiplicity=\"*\">\n         <OnDelete Action=\"Cascade\" />\n   </End>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: SQL ALTER TABLE Statements for Fill Factor\nDESCRIPTION: This SQL code shows the ALTER TABLE statements generated by EF Core Migrations when the fill-factor is specified. It drops existing constraints and indexes, then re-creates them with the specified fill-factor using the WITH (FILLFACTOR = 80) clause.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_79\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE [User] DROP CONSTRAINT [AK_User_Region_Ssn];\nALTER TABLE [User] DROP CONSTRAINT [PK_User];\nDROP INDEX [IX_User_Name] ON [User];\nDROP INDEX [IX_User_Region_Tag] ON [User];\n\nALTER TABLE [User] ADD CONSTRAINT [AK_User_Region_Ssn] UNIQUE ([Region], [Ssn]) WITH (FILLFACTOR = 80);\nALTER TABLE [User] ADD CONSTRAINT [PK_User] PRIMARY KEY ([Id]) WITH (FILLFACTOR = 80);\nCREATE INDEX [IX_User_Name] ON [User] ([Name]) WITH (FILLFACTOR = 80);\nCREATE INDEX [IX_User_Region_Tag] ON [User] ([Region], [Tag]) WITH (FILLFACTOR = 80);\n```\n\n----------------------------------------\n\nTITLE: Add Blank Migration - PowerShell\nDESCRIPTION: This PowerShell command generates a blank migration, which is useful for ensuring the latest migration has the correct model snapshot stored in it. It includes all the metadata but ignores any changes it detects when comparing the current model to the snapshot. Requires Entity Framework and the EntityFramework PowerShell module.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/teams.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-Migration <pick_a_name> –IgnoreChanges\n```\n\n----------------------------------------\n\nTITLE: Saving Addition Result to File in C#\nDESCRIPTION: This C# code defines a method `AddAndSaveToFile` that calculates the sum of two integers and writes the result to a file named 'results.txt'. Testing this method is more difficult because the test needs to verify the content of the file after the method is executed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    public void AddAndSaveToFile(int x, int y) {\n    \t var results = string.Format(\"The answer is {0}\", x + y);\n    \t File.WriteAllText(\"results.txt\", results);\n    }\n```\n\n----------------------------------------\n\nTITLE: Insert Foo3 Entities with Different Count Values\nDESCRIPTION: Inserts three Foo3 entities with different Count values, demonstrating that the backing field allows inserting 0 explicitly. It demonstrates that using a backing field allows explicit insertion of the CLR default value, 0 in this case.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar fooA = new Foo3 { Count = 10 };\nvar fooB = new Foo3 { Count = 0 };\nvar fooC = new Foo3 { };\n\ncontext.AddRange(fooA, fooB, fooC);\ncontext.SaveChanges();\n\nDebug.Assert(fooA.Count == 10);\nDebug.Assert(fooB.Count == 0);\nDebug.Assert(fooC.Count == -1);\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions for Events (C#)\nDESCRIPTION: This C# snippet demonstrates how to configure EF Core to throw an exception when a specific event occurs.  This effectively changes a warning into an error. It uses the `ConfigureWarnings` API with the `Throw` method for the MultipleCollectionIncludeWarning event.  It logs to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .ConfigureWarnings(b => b.Throw(RelationalEventId.MultipleCollectionIncludeWarning))\n        .LogTo(Console.WriteLine);\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by City SQL\nDESCRIPTION: This code shows the SQL generated when using a member of a complex type in a WHERE clause. The SQL query filters based on the `ShippingAddress_City` column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [o].[Id], [o].[Contents], [o].[CustomerId], [o].[BillingAddress_City], [o].[BillingAddress_Country],\n    [o].[BillingAddress_Line1], [o].[BillingAddress_Line2], [o].[BillingAddress_PostCode],\n    [o].[ContactPhone_CountryCode], [o].[ContactPhone_Number], [o].[ShippingAddress_City],\n    [o].[ShippingAddress_Country], [o].[ShippingAddress_Line1], [o].[ShippingAddress_Line2],\n    [o].[ShippingAddress_PostCode]\nFROM [Orders] AS [o]\nWHERE [o].[ShippingAddress_City] = @__city_0\n```\n\n----------------------------------------\n\nTITLE: Fluent API Configuration for Required Properties - C#\nDESCRIPTION: This code snippet demonstrates how to use the Fluent API within the `OnModelCreating` method of a DbContext to configure properties as required. Specifically, it configures the `Street` property of the `Address` entity type and the `PostCode` property to be required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Person>()\n    .HasOne(p => p.Address)\n    .WithOne(a => a.Person)\n    .IsRequired();\n\nmodelBuilder.Entity<Address>(builder =>\n{\n    builder.Property(b => b.Street).IsRequired();\n    builder.Property(b => b.PostCode).IsRequired();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Key using Data Annotations in C#\nDESCRIPTION: This C# code snippet demonstrates how to use the `[Key]` data annotation to specify the primary key for the User class.  This resolves the 'no key defined' error in Entity Framework. The `Username` property is now designated as the primary key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class User\n{\n    [Key]\n    public string Username { get; set; }\n    public string DisplayName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SqlQuery with Join C#\nDESCRIPTION: Demonstrates using `SqlQuery` to perform a JOIN operation between the 'Posts' and 'Blogs' tables.  The query retrieves data into a list of 'PostSummary' objects, mapping the results based on column aliases in the SQL query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nvar summaries =\n    await context.Database.SqlQuery<PostSummary>(\n            @$\"SELECT b.Name AS BlogName, p.Title AS PostTitle, p.PublishedOn\n            FROM Posts AS p\n            INNER JOIN Blogs AS b ON p.BlogId = b.Id\")\n        .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: ManyToMany Relationship Definition C#\nDESCRIPTION: This C# code defines two entity classes, `Post` and `Tag`, demonstrating a many-to-many relationship. Each `Post` can have multiple `Tag`s, and each `Tag` can be associated with multiple `Post`s. EF Core will automatically create a join table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public ICollection<Tag> Tags { get; } = new List<Tag>();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-to-Live in Cosmos DB\nDESCRIPTION: Demonstrates configuring the default time-to-live and time-to-live for the analytical store for entity types within an Azure Cosmos DB model using EF Core 6.0. Requires the `modelBuilder` instance from the `OnModelCreating` method and assumes a `Family` entity type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Family>\n(\n    entityTypeBuilder =>\n    {\n        entityTypeBuilder.HasDefaultTimeToLive(100);\n        entityTypeBuilder.HasAnalyticalStoreTimeToLive(200);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Tracking Query with SaveChanges in EF Core\nDESCRIPTION: This code demonstrates a basic tracking query in EF Core. It retrieves a blog, modifies its rating, and persists the change to the database using `SaveChanges`.  The `Rating` property is updated and then the context is saved. This ensures the changes are reflected in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blog = context.Blogs.Find(1);\nblog.Rating = 5;\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Improved SQL Translation of IsNullOrWhitespace (EF Core 6)\nDESCRIPTION: Shows the improved SQL Server translation of the IsNullOrWhitespace query in EF Core 6.0. This translation directly compares the FirstName and LastName columns to an empty string, which is more efficient and avoids using LTRIM and RTRIM.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_107\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [u].[Id], [u].[FirstName], [u].[LastName]\nFROM [Users] AS [u]\nWHERE ([u].[FirstName] IS NULL OR ([u].[FirstName] = N'')) OR ([u].[LastName] IS NULL OR ([u].[LastName] = N''))\n```\n\n----------------------------------------\n\nTITLE: Executing EF DLL with Dotnet CLI\nDESCRIPTION: This command shows how ef.dll is executed using the dotnet CLI, specifying the dependencies file and runtime configuration file to emulate the project's runtime environment. This approach is used to load the user's assembly and invoke design-time entry points.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/internals/tools.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet exec ef.dll --depsfile startupProject.deps.json --runtimeconfig startupProject.runtimeconfig.json\n```\n\n----------------------------------------\n\nTITLE: Invoking CompiledQuery Helper Method C#\nDESCRIPTION: This code snippet shows how to invoke the helper method containing the CompiledQuery. The helper method encapsulates the compiled query execution and ensures the CompiledQuery instance is reused.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n    this.productsGrid.DataSource = context.GetProductsForCategory(selectedCategory);\n```\n\n----------------------------------------\n\nTITLE: Explicit Loading using DbContext.Entry - C#\nDESCRIPTION: This snippet demonstrates how to explicitly load a navigation property using the `DbContext.Entry(...)` API in Entity Framework Core. It requires a DbContext instance and an entity with a navigation property to be loaded. The `Load()` method is called on the navigation property entry.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/explicit.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Querying.RelatedData\n{\n    public class Blog\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Url { get; set; }\n\n        public List<Post> Posts { get; set; }\n    }\n\n    public class Post\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n        public int BlogId { get; set; }\n        public Blog Blog { get; set; }\n    }\n\n    public class BloggingContext : DbContext\n    {\n        public BloggingContext(DbContextOptions<BloggingContext> options)\n            : base(options)\n        {\n        }\n\n        public DbSet<Blog> Blogs { get; set; }\n        public DbSet<Post> Posts { get; set; }\n    }\n\n    public class ExplicitLoading\n    {\n        public static void Main()\n        {\n            using (var context = new BloggingContext(new DbContextOptionsBuilder<BloggingContext>()\n                .UseInMemoryDatabase(\"ExplicitLoading\")\n                .Options))\n            {\n                context.Database.EnsureDeleted();\n                context.Database.EnsureCreated();\n\n                context.Blogs.Add(new Blog { Name = \"MyBlog\", Posts = { new Post { Title = \"First post\" } } });\n                context.SaveChanges();\n            }\n\n            using (var context = new BloggingContext(new DbContextOptionsBuilder<BloggingContext>()\n                .UseInMemoryDatabase(\"ExplicitLoading\")\n                .Options))\n            {\n                var blog = context.Blogs.Single(b => b.Name == \"MyBlog\");\n\n                context.Entry(blog)\n                    .Collection(b => b.Posts)\n                    .Load();\n\n                Console.WriteLine($\"Blog '{blog.Name}' has {blog.Posts.Count} posts.\");\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of GetType for Entity Types\nDESCRIPTION: This SQL query represents the translated form of the C# code that uses GetType to filter entities in EF Core 7. It filters the Posts table based on the Discriminator column, which is used for TPH inheritance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_126\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Id], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText]\nFROM [Posts] AS [p]\nWHERE [p].[Discriminator] = N'Post'\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Length with Fluent API - C#\nDESCRIPTION: This code snippet demonstrates how to configure the maximum length of a string property using the Fluent API in Entity Framework Core. The `HasMaxLength` method on the `PropertyBuilder` is used to define the maximum length. It requires the `DbContext` and `OnModelCreating` override to configure the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property(b => b.Title)\n        .HasMaxLength(500);\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Query with FromSqlRaw\nDESCRIPTION: This code demonstrates how to create a parameterized SQL query using `FromSqlRaw` in EF Core 3.0, where parameters are passed separately from the query string. It uses the product name as a parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Products.FromSqlRaw(\n    \"SELECT * FROM Products WHERE Name = {0}\",\n    product.Name);\n```\n\n----------------------------------------\n\nTITLE: Query Spatial Data in EF Core with C#\nDESCRIPTION: This code snippet demonstrates how to query spatial data using Entity Framework Core and LINQ. It retrieves the 5 nearest friends based on the distance from a given location using the `Distance()` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.2.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar nearestFriends =\n    await (from f in context.Friends\n    orderby f.Location.Distance(myLocation) descending\n    select f).Take(5).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Implementing WCF Service in C#\nDESCRIPTION: This C# code implements the `Service1` class, which realizes the `IService1` interface. It includes methods for retrieving and updating blogs using an Entity Framework `BloggingContext`. The `GetBlogs` method retrieves all blogs with their related posts, while the `UpdateBlog` method updates a blog and its related posts by applying changes to the context and saving them to the database, handling potential `UpdateException`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/disconnected-entities/self-tracking-entities/walkthrough.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    using System;\n    using System.Collections.Generic;\n    using System.Data;\n    using System.Linq;\n\n    namespace STESample.Service\n    {\n        public class Service1 : IService1\n        {\n            /// <summary>\n            /// Gets all the Blogs and related Posts.\n            /// </summary>\n            public List<Blog> GetBlogs()\n            {\n                using (BloggingContext context = new BloggingContext())\n                {\n                    return context.Blogs.Include(\"Posts\").ToList();\n                }\n            }\n\n            /// <summary>\n            /// Updates Blog and its related Posts.\n            /// </summary>\n            public void UpdateBlog(Blog blog)\n            {\n                using (BloggingContext context = new BloggingContext())\n                {\n                    try\n                    {\n                        // TODO: Perform validation on the updated order before applying the changes.\n\n                        // The ApplyChanges method examines the change tracking information\n                        // contained in the graph of self-tracking entities to infer the set of operations\n                        // that need to be performed to reflect the changes in the database.\n                        context.Blogs.ApplyChanges(blog);\n                        context.SaveChanges();\n\n                    }\n                    catch (UpdateException)\n                    {\n                        // To avoid propagating exception messages that contain sensitive data to the client tier\n                        // calls to ApplyChanges and SaveChanges should be wrapped in exception handling code.\n                        throw new InvalidOperationException(\"Failed to update. Try your request again.\");\n                    }\n                }\n            }        \n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Foundation Stylesheet for Icons\nDESCRIPTION: This snippet demonstrates how to include the Open Iconic stylesheet for the Foundation framework. It links the CSS file in the HTML header.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Register Diagnostic Listener C#\nDESCRIPTION: Registers the DiagnosticObserver globally to listen for all DiagnosticListener events in the .NET process. This is typically done in the application's Main method to ensure early initialization.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/diagnostic-listeners.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nDiagnosticListener.AllListeners.Subscribe(new DiagnosticObserver());\n```\n\n----------------------------------------\n\nTITLE: Apply Configurations From Assembly - C#\nDESCRIPTION: This code snippet demonstrates how to apply all `IEntityTypeConfiguration` implementations from a specific assembly. The `ApplyConfigurationsFromAssembly` method is called on the `ModelBuilder` within the `OnModelCreating` method of a DbContext.  This automates the application of configurations defined in the assembly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/index.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.ApplyConfigurationsFromAssembly(typeof(BlogEntityTypeConfiguration).Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Coalesce undefined values to null in EF Core\nDESCRIPTION: This code snippet demonstrates how to coalesce `undefined` values to `null` using the `EF.Functions.CoalesceUndefined` operator. This is a mitigation for the change in EF Core 9 where undefined results are automatically filtered from query results.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar users = await context.Customer\n    .Select(c => EF.Functions.CoalesceUndefined(c.City, null))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Define Course and Department Entities using Code First in C#\nDESCRIPTION: This code snippet defines the `Course` and `Department` entities using the Code First approach in Entity Framework. The `Course` entity includes a foreign key `DepartmentID` and a navigation property `Department`. The `Department` entity includes a collection navigation property `Courses` and represents a one-to-many relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Course\n{\n  public int CourseID { get; set; }\n  public string Title { get; set; }\n  public int Credits { get; set; }\n  public int DepartmentID { get; set; }\n  public virtual Department Department { get; set; }\n}\n\npublic class Department\n{\n   public Department()\n   {\n     this.Courses = new HashSet<Course>();\n   }  \n   public int DepartmentID { get; set; }\n   public string Name { get; set; }\n   public decimal Budget { get; set; }\n   public DateTime StartDate { get; set; }\n   public int? Administrator {get ; set; }\n   public virtual ICollection<Course> Courses { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Sequence for TPC Key Generation\nDESCRIPTION: This SQL code snippet demonstrates how to create a default constraint for the `Id` column in a TPC table, using a database sequence named `AnimalSequence`. EF Core uses this strategy by default for TPC hierarchies when using the SQL Server provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_61\n\nLANGUAGE: sql\nCODE:\n```\n[Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence])\n```\n\n----------------------------------------\n\nTITLE: Optimized Subqueries - SQL Server (EF Core 6)\nDESCRIPTION: This SQL code represents the translated query from EF Core 6.0. Notice how the DATEPART function is used in the subquery's WHERE clause, referencing the ungrouped [i].[History] column from the outer query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_111\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATEPART(month, [i].[History]) AS [Month], COALESCE(SUM([i].[Amount]), 0.0) AS [Total], (\n    SELECT COALESCE(SUM([p].[Amount]), 0.0)\n    FROM [Payments] AS [p]\n    WHERE DATEPART(month, [p].[History]) = DATEPART(month, [i].[History])) AS [Payment]\nFROM [Invoices] AS [i]\nGROUP BY DATEPART(month, [i].[History])\n```\n\n----------------------------------------\n\nTITLE: Mapping Entity Properties to Columns and Stored Procedures (XML)\nDESCRIPTION: This XML snippet demonstrates how to use the ScalarProperty element to map properties of the Person entity type to both columns in the Person table and parameters of the UpdatePerson stored procedure. It covers mapping for insert, update, and delete operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"People\">\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"LastName\" ColumnName=\"LastName\" />\n       <ScalarProperty Name=\"FirstName\" ColumnName=\"FirstName\" />\n       <ScalarProperty Name=\"HireDate\" ColumnName=\"HireDate\" />\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ColumnName=\"EnrollmentDate\" />\n     </MappingFragment>\n </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <ModificationFunctionMapping>\n       <InsertFunction FunctionName=\"SchoolModel.Store.InsertPerson\">\n         <ScalarProperty Name=\"EnrollmentDate\"\n                         ParameterName=\"EnrollmentDate\" />\n         <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\" />\n         <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\" />\n         <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\" />\n         <ResultBinding Name=\"PersonID\" ColumnName=\"NewPersonID\" />\n       </InsertFunction>\n       <UpdateFunction FunctionName=\"SchoolModel.Store.UpdatePerson\">\n         <ScalarProperty Name=\"EnrollmentDate\"\n                         ParameterName=\"EnrollmentDate\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\"\n                         Version=\"Current\" />\n       </UpdateFunction>\n       <DeleteFunction FunctionName=\"SchoolModel.Store.DeletePerson\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\" />\n       </DeleteFunction>\n     </ModificationFunctionMapping>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Add Save Button XAML\nDESCRIPTION: Adds a Save button to the XAML, which will trigger the Button_Click event to save changes to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/wpf.md#_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Button Content=\"Save\" HorizontalAlignment=\"Left\" Margin=\"10\" VerticalAlignment=\"Top\" Width=\"75\" Click=\"Button_Click\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Container Name in EF Core with Cosmos DB\nDESCRIPTION: This code snippet demonstrates how to configure the default container name for all entity types in an EF Core model when using Azure Cosmos DB. The `HasDefaultContainer` method is used on the `modelBuilder` object to set the default container name to \"Store\". This impacts where all entities are stored unless overridden by ToContainer.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.HasDefaultContainer(\"Store\");\n```\n\n----------------------------------------\n\nTITLE: Case Translation - SQL (EF8)\nDESCRIPTION: This SQL query shows the nested `CASE` blocks generated by EF Core 8, which are less efficient.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_65\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CASE\n    WHEN CASE\n        WHEN [b].[Id] > 5 THEN CAST(0 AS bit)\n        ELSE CAST(1 AS bit)\n    END = CAST(0 AS bit) THEN CAST(1 AS bit)\n    ELSE CAST(0 AS bit)\nEND\nFROM [Blogs] AS [b]\n```\n\n----------------------------------------\n\nTITLE: Basic Query Tagging in EF Core (C#)\nDESCRIPTION: This snippet demonstrates how to use query tags in EF Core to inject comments into SQL queries. This makes it easier to correlate SQL queries in logs with the corresponding LINQ queries in the code. The tag can be set using the TagWith method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = context.Blogs\n    .TagWith(\"This is my spatial query!\")\n    .OrderBy(b => b.Name)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with a Collection of Primitives in C#\nDESCRIPTION: This code defines a `Post` entity with a collection of strings (`Tags`). This demonstrates how to include a collection of primitive types within an EF Core entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Contents { get; set; }\n\n    public ICollection<string> Tags { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Reference Navigation with Optional One-to-One (SQL)\nDESCRIPTION: This SQL shows the commands executed when changing a reference navigation in an optional one-to-one relationship in EF Core.  It includes an UPDATE statement to set the old entity's foreign key to NULL, and an INSERT statement to create the new entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p1='1' (DbType = String), @p0=NULL], CommandType='Text', CommandTimeout='30']\nUPDATE \"Assets\" SET \"BlogId\" = @p0\nWHERE \"Id\" = @p1;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p2=NULL, @p3='1' (Nullable = true) (DbType = String)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Assets\" (\"Banner\", \"BlogId\")\nVALUES (@p2, @p3);\nSELECT \"Id\"\nFROM \"Assets\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n```\n\n----------------------------------------\n\nTITLE: Map a Shadow Property to Time-to-Live in Cosmos DB\nDESCRIPTION: This code snippet demonstrates how to map a shadow property to the 'ttl' field in Azure Cosmos DB using EF Core. This approach avoids adding a TimeToLive property to the domain entity and instead uses a shadow property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Hamlet>()\n    .HasDefaultTimeToLive(3600)\n    .Property<int>(\"TimeToLive\")\n    .ToJsonProperty(\"ttl\");\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation\nDESCRIPTION: This code snippet demonstrates how to use Open Iconic icons with the Foundation framework using the 'fi' classes. It includes setting the 'title' and 'aria-hidden' attributes for accessibility.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: stringValue.TrimStart .NET to SQL translation\nDESCRIPTION: Presents the translation of stringValue.TrimStart() in .NET to LTRIM(@stringValue) in SQL when integrated with Entity Framework Core and Cosmos DB. It removes leading whitespace from a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_41\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.TrimStart()\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[LTRIM(@stringValue)](/azure/cosmos-db/nosql/query/ltrim)\n```\n\n----------------------------------------\n\nTITLE: Querying Scalar Types with SqlQuery - SQLite\nDESCRIPTION: This code snippet demonstrates how to query scalar (non-entity) types using SqlQuery in EF Core with SQLite. It fetches all the BlogId values from the Blogs table and returns them as a list of integers. Requires Entity Framework Core and a database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar ids = await context.Database\n    .SqlQuery<int>($\"\"\"\n                    SELECT \"BlogId\" FROM \"Blogs\"\n                    \"\"\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Foreign Key with Lambda - EF Core\nDESCRIPTION: This code snippet demonstrates how to configure a composite foreign key using a lambda expression in EF Core's `OnModelCreating` method.  It defines a one-to-many relationship between `Blog` and `Post` using a composite key consisting of `ContainingBlogId1` and `ContainingBlogId2` on the `Post` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasForeignKey(e => new { e.ContainingBlogId1, e.ContainingBlogId2 });\n```\n\n----------------------------------------\n\nTITLE: Owned Entity Type Attribute - C#\nDESCRIPTION: This C# code demonstrates how to configure owned entity types using the `[Owned]` attribute. It defines a `StreetAddress` class as an owned type and includes it as a property in the `Order` entity. Requires the owner entity (Order) to be added to the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.1.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[Owned]\npublic class StreetAddress\n{\n    public string Street { get; set; }\n    public string City { get; set; }\n}\n\npublic class Order\n{\n    public int Id { get; set; }\n    public StreetAddress ShippingAddress { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Scoped Context Factory - C#\nDESCRIPTION: Registers the custom context factory as a Scoped service. This allows the factory to be injected into controllers and other components with a scoped lifetime, ensuring that each request gets its own context factory instance.  Requires the custom `WeatherForecastScopedFactory`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/advanced-performance-topics.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddScoped<IDbContextFactory<WeatherForecastContext>>(\n    sp => new WeatherForecastScopedFactory(\n        sp.GetRequiredService<PooledDbContextFactory<WeatherForecastContext>>(),\n        sp.GetRequiredService<ITenant>()));\n```\n\n----------------------------------------\n\nTITLE: Update Entity Using SetValues - C#\nDESCRIPTION: This snippet illustrates using `SetValues` to copy property values from a given object to a tracked entity. The tracked entity is first retrieved via a query. This method facilitates updating only the modified values and avoids unnecessary database updates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdateFromHttpPost3(Blog blog)\n{\n    using var context = new BlogsContext();\n\n    var trackedBlog = context.Blogs.Find(blog.Id);\n\n    context.Entry(trackedBlog).CurrentValues.SetValues(blog);\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Provider Options - C#\nDESCRIPTION: This snippet shows how to configure provider-specific options, such as connection resiliency, within the UseSqlServer configuration.  In this case, it shows how to enable retry on failure for Azure SQL connections.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApplicationDbContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder\n            .UseSqlServer(\n                @\"Server=(localdb)\\mssqllocaldb;Database=Test\",\n                providerOptions =>\n                    {\n                        providerOptions.EnableRetryOnFailure();\n                    });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Delete Statement for Existing Post\nDESCRIPTION: This SQL statement is generated when deleting an existing post in SQLite. The `DELETE` command removes the row from the `Posts` table based on the provided `Id`. The `SELECT changes()` command then verifies if any rows were affected.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p0='2' (DbType = String)], CommandType='Text', CommandTimeout='30']\nDELETE FROM \"Posts\"\nWHERE \"Id\" = @p0;\nSELECT changes();\n```\n\n----------------------------------------\n\nTITLE: Single SQL Query - Split Query Example 2\nDESCRIPTION: Shows the single SQL query generated for Split Query Example 2.  The query retrieves Customer and Order Date data using a LEFT JOIN, with the orders filtered by Order ID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_111\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [t].[OrderDate], [t].[Id]\nFROM [Customers] AS [c]\n  LEFT JOIN (\n  SELECT [o].[OrderDate], [o].[Id], [o].[CustomerId]\n  FROM [Order] AS [o]\n  WHERE [o].[Id] > 1\n  ) AS [t] ON [c].[Id] = [t].[CustomerId]\nORDER BY [c].[Id]\n```\n\n----------------------------------------\n\nTITLE: Configure One-to-Many with No Navigations\nDESCRIPTION: This C# code configures a one-to-many relationship between `Blog` and `Post` entities in Entity Framework Core using `OnModelCreating`, where neither entity has a navigation property. The configuration utilizes `HasMany<Post>()` and `WithOne()` to establish the relationship. Requires an instance of `ModelBuilder`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Blog>()\n                    .HasMany<Post>()\n                    .WithOne();\n            }\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in View - C#\nDESCRIPTION: This code snippet demonstrates how to display validation errors in an ASP.NET MVC view using the `Html.ValidationMessageFor` helper. It displays the error message associated with the `BloggerName` property.  The error will come from the ModelState, which was populated in the controller's catch block.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/validation.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n@Html.ValidationMessageFor(model => model.BloggerName)\n```\n\n----------------------------------------\n\nTITLE: EF8 SQL for Contains Subquery (PostgreSQL)\nDESCRIPTION: This SQL snippet shows the improved query generated by EF Core 8 for the same LINQ query.  It uses the `IN` operator, which allows the subquery to be evaluated once instead of being correlated, leading to performance improvements.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_138\n\nLANGUAGE: sql\nCODE:\n```\nSELECT b.\"Id\", b.\"Name\"\n      FROM \"Blogs\" AS b\n      WHERE b.\"Id\" IN (\n          SELECT p.\"BlogId\"\n          FROM \"Posts\" AS p\n      )\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Commands to Database - EF6 - C#\nDESCRIPTION: Executes a non-query command directly against the database using ExecuteSqlCommand. This example updates the Name column in the Blogs table where BlogId is 1.  Changes made this way are not immediately reflected in the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/raw-sql.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    context.Database.ExecuteSqlCommand(\n        \"UPDATE dbo.Blogs SET Name = 'Another Name' WHERE BlogId = 1\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Symmetrical Self-Referencing Many-to-Many (C#)\nDESCRIPTION: This snippet defines a Person entity with a Friends navigation property. While the ideal scenario is a symmetrical relationship where A's friends include B and vice-versa, EF Core doesn't directly support this with a single navigation. The snippet showcases the entity definition for this case.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n    public int Id { get; set; }\n    public List<Person> Friends { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required FK (Convention) - EF Core\nDESCRIPTION: This code snippet illustrates how to configure a relationship as required, even when the foreign key property is nullable, by using the `IsRequired` method. This relies on the foreign key being discovered by convention and ensures that the corresponding column in the database is non-nullable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .IsRequired();\n```\n\n----------------------------------------\n\nTITLE: Get EntityEntry for Shared-Type Entity C#\nDESCRIPTION: This C# code shows how to obtain the `EntityEntry` for a shared-type entity using the `Entry` method on the `DbSet`. This allows accessing the state of an entity instance, even if it's not yet tracked by the context.  This is useful for inspecting or modifying entity state.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_143\n\nLANGUAGE: csharp\nCODE:\n```\nvar state = context.BuildMetadata.Entry(build).State;\n```\n\n----------------------------------------\n\nTITLE: Disable SQL OUTPUT clause in EF Core 8.0 for SQL Server\nDESCRIPTION: This code snippet demonstrates how to disable the usage of the \"OUTPUT\" clause for a specific entity (Blog) in EF Core 8.0 when using SQL Server. This can be useful for compatibility with older SQL Server versions or when dealing with triggers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .ToTable(tb => tb.UseSqlOutputClause(false));\n}\n```\n\n----------------------------------------\n\nTITLE: Configure DbContext for Simple Logging in EF Core\nDESCRIPTION: Configures a DbContext instance to log output to the console using `DbContextOptionsBuilder.LogTo`. This configuration is commonly done in an override of `DbContext.OnConfiguring` and is useful for development-time logging. It demonstrates how to capture EF Core logs and direct them to the console for immediate visibility.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        => optionsBuilder.LogTo(Console.WriteLine);\n```\n\n----------------------------------------\n\nTITLE: stringValue.StartsWith with OrdinalIgnoreCase .NET to SQL translation\nDESCRIPTION: Shows how stringValue.StartsWith with StringComparison.OrdinalIgnoreCase in .NET corresponds to STARTSWITH in SQL within the context of Entity Framework Core. This determines if a string starts with a specified substring with case insensitive check. EF Core 9.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_34\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.StartsWith(value, StringComparison.OrdinalIgnoreCase)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[STARTSWITH(@stringValue, @value, true)](/azure/cosmos-db/nosql/query/startswith)\n```\n\n----------------------------------------\n\nTITLE: Querying a Table-Valued Function - C#\nDESCRIPTION: This code demonstrates querying a table-valued function mapped to an entity type. It queries for BlogsWithMultiplePosts with a PostCount greater than 3.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = context.Set<BlogWithMultiplePosts>().Where(b => b.PostCount > 3).ToList();\n```\n\n----------------------------------------\n\nTITLE: Suboptimal Paging with Skip - C#\nDESCRIPTION: This code illustrates a suboptimal way of using Skip for paging. Each iteration of the loop will cause a new query plan to be generated and cached because a constant value is passed to the Skip method. Using a lambda expression as shown in the next snippet resolves this issue.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar customers = context.Customers.OrderBy(c => c.LastName);\nfor (var i = 0; i < count; ++i)\n{\n    var currentCustomer = customers.Skip(i).FirstOrDefault();\n    ProcessCustomer(currentCustomer);\n}\n```\n\n----------------------------------------\n\nTITLE: Add Post Class\nDESCRIPTION: This C# code snippet defines a new `Post` class with properties like `PostId`, `Title`, `Content`, `BlogId`, and a navigation property `Blog`.\nIt includes a `MaxLength` data annotation on the `Title` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/automatic.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Post\n{\n    public int PostId { get; set; }\n    [MaxLength(200)]\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Self-Contained Migration Bundle - .NET Core CLI\nDESCRIPTION: This command generates a self-contained migration bundle for Linux using the .NET Core CLI. The `--self-contained` flag creates a bundle that doesn't require the .NET Runtime.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_13\n\nLANGUAGE: .NET Core CLI\nCODE:\n```\ndotnet ef migrations bundle --self-contained -r linux-x64\n```\n\n----------------------------------------\n\nTITLE: Read connection string in OnConfiguring (WinForms & WPF)\nDESCRIPTION: Reads the connection string from the `App.config` file in the `OnConfiguring` method of the DbContext. Requires a reference to `System.Configuration`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-strings.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n      optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings[\"BloggingDatabase\"].ConnectionString);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Migration to a Specific Directory using Visual Studio Package Manager Console\nDESCRIPTION: This command adds a new migration to a specific directory using the Visual Studio Package Manager Console.  Replace 'InitialCreate' with a descriptive name and 'Your\\Directory' with the desired directory path.  Note the use of backslash for directory separator.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Migration InitialCreate -OutputDir Your\\Directory\n```\n\n----------------------------------------\n\nTITLE: GroupBy in EF Core 7.0 without SQL GROUP BY\nDESCRIPTION: This code shows how EF Core 7.0 and newer can create groupings after results are returned from the database when an `IGrouping` can't be represented by a database structure, similar to how `Include` works with related collections.  The query groups books by price.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Books.GroupBy(s => s.Price);\n\n/*\n\nSELECT [b].[Price], [b].[Id], [b].[AuthorId]\nFROM [Books] AS [b]\nORDER BY [b].[Price]\n*/\n```\n\n----------------------------------------\n\nTITLE: Loading Filtered Related Entities - C#\nDESCRIPTION: This code snippet shows how to use the Load method to load a filtered collection of related entities. It loads the posts with the 'entity-framework' tag related to a given blog using `context.Entry(blog).Collection(b => b.Posts).Query().Where(p => p.Tags.Contains(\"entity-framework\")).Load()`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/load-method.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n\n    // Load the posts with the 'entity-framework' tag related to a given blog\n    context.Entry(blog)\n        .Collection(b => b.Posts)\n        .Query()\n        .Where(p => p.Tags.Contains(\"entity-framework\"))\n        .Load();\n}\n```\n\n----------------------------------------\n\nTITLE: Git Diff Command for EF Core Templates\nDESCRIPTION: This command clones the EF Core repository, navigates to the efcore directory, and uses git diff to generate a diff of the specified template files between versions 7.0.0 and 8.0.0, allowing for comparison of changes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ngit clone --no-checkout https://github.com/dotnet/efcore.git\ncd efcore\ngit diff v7.0.0 v8.0.0 -- src/EFCore.Design/Scaffolding/Internal/CSharpDbContextGenerator.tt src/EFCore.Design/Scaffolding/Internal/CSharpEntityTypeGenerator.tt\n```\n\n----------------------------------------\n\nTITLE: Connection string in App.config (WinForms & WPF)\nDESCRIPTION: Defines a connection string in the `App.config` file for WinForms or WPF applications.  This example shows a connection string named 'BloggingDatabase' for a local SQL Server database. Sensitive information should be protected using Protected Configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-strings.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\n  <connectionStrings>\n    <add name=\"BloggingDatabase\"\n         connectionString=\"Server=(localdb)\\mssqllocaldb;Database=Blogging;Trusted_Connection=True;\" />\n  </connectionStrings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Revert to Legacy SQLite Update SQL Generator in EF Core 7.0\nDESCRIPTION: This snippet shows how to revert to the old mechanism for the entire application in EF Core 7.0 by replacing the `IUpdateSqlGenerator` service with `SqliteLegacyUpdateSqlGenerator`. This is necessary for backward compatibility in certain scenarios with SQLite.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseSqlite(...)\n        .ReplaceService<IUpdateSqlGenerator, SqliteLegacyUpdateSqlGenerator>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Foreign Key - EF Core\nDESCRIPTION: This snippet demonstrates how to configure a required foreign key using the `IsRequired` method in the EF Core model building API. It ensures that the `BlogId` foreign key column in the `Post` table is non-nullable, enforcing a required relationship between `Blog` and `Post` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasForeignKey(e => e.BlogId)\n    .IsRequired();\n```\n\n----------------------------------------\n\nTITLE: Configure Json.NET to Ignore Cycles in ASP.NET Core\nDESCRIPTION: This code snippet demonstrates how to configure Json.NET to ignore cycles found in the object graph during serialization in an ASP.NET Core application.  It modifies the `ReferenceLoopHandling` setting in `SerializerSettings` to `Ignore`.  It requires the `Microsoft.AspNetCore.Mvc` and `Newtonsoft.Json` NuGet packages.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/serialization.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n\n    services.AddMvc()\n        .AddJsonOptions(\n            options => options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore\n        );\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using AT TIME ZONE in EF Core 7\nDESCRIPTION: This C# code snippet demonstrates how to use the AtTimeZone function to convert DateTime values to specific time zones in EF Core 7. It converts the PublishedOn property of Posts to Pacific Standard Time and GMT Standard Time.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts\n                .Select(post => new\n                {\n                    post.Title,\n                    PacificTime = EF.Functions.AtTimeZone(post.PublishedOn, \"Pacific Standard Time\"),\n                    UkTime = EF.Functions.AtTimeZone(post.PublishedOn, \"GMT Standard Time\"),\n                });\n```\n\n----------------------------------------\n\nTITLE: Revert to Legacy SQLite Update SQL Generator in EF Core 7.0 (Alternative)\nDESCRIPTION: This is a duplicate of the previous EF Core 7.0 SQLite legacy update SQL generator snippet. It shows how to replace the `IUpdateSqlGenerator` service for applications encountering busy/locked errors when write-ahead logging is not enabled.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseSqlite(...)\n        .ReplaceService<IUpdateSqlGenerator, SqliteLegacyUpdateSqlGenerator>();\n```\n\n----------------------------------------\n\nTITLE: SQL for Updating Sub-Document using JSON_MODIFY\nDESCRIPTION: This SQL code demonstrates using the `JSON_MODIFY` function to update a sub-document (Address) within a JSON column. It updates the 'Contact' column by modifying the 'strict $.Address' path with a new JSON value provided as a parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE [Authors] SET [Contact] = JSON_MODIFY([Contact], 'strict $.Address', JSON_QUERY(@p0))\nOUTPUT 1\nWHERE [Id] = @p1;\n```\n\n----------------------------------------\n\nTITLE: Deleting Entities based on a Filter using ExecuteDelete\nDESCRIPTION: This C# code snippet demonstrates deleting entities (Tags) based on a filter condition using `ExecuteDeleteAsync`. In this example, it deletes all Tag entities where the 'Text' property contains '.NET'. This allows for selective deletion of entities directly at the database level.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Tags.Where(t => t.Text.Contains(\".NET\")).ExecuteDeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: Overriding Rows Affected Parameter (C#)\nDESCRIPTION: This C# code configures the Entity Framework model to use a specific output parameter named \"rows_affected\" to determine the number of rows affected by an update stored procedure. This overrides the default behavior of using the return value of ExecuteNonQuery.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures(s =>\n    s.Update(u => u.RowsAffectedParameter(\"rows_affected\")));\n```\n\n----------------------------------------\n\nTITLE: Updating Database to a Specified Migration using EF Core\nDESCRIPTION: These examples demonstrate how to update the database to a specific migration using the `dotnet ef database update` command. The first example uses the migration name, while the second uses the migration ID and specifies a connection string. These commands require the Entity Framework Core tools to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef database update InitialCreate\n```\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef database update 20180904195021_InitialCreate --connection your_connection_string\n```\n\n----------------------------------------\n\nTITLE: String.Join Aggregation - SQL Server Translation\nDESCRIPTION: This SQL code demonstrates the translation of the `String.Join` query to SQL Server's `STRING_AGG` function.  The COALESCE ensures a default empty string when there are no titles to join.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_116\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Id], [a].[Name], COALESCE(STRING_AGG([p].[Title], N'|'), N'') AS [Books]\nFROM [Posts] AS [p]\nLEFT JOIN [Authors] AS [a] ON [p].[AuthorId] = [a].[Id]\nGROUP BY [a].[Id], [a].[Name]\n```\n\n----------------------------------------\n\nTITLE: Configure Warnings to Allow Synchronous I/O\nDESCRIPTION: This C# snippet demonstrates how to configure the `DbContext` to ignore the `CosmosEventId.SyncNotSupported` warning, temporarily allowing synchronous I/O operations.  Note that this is a temporary workaround and sync support is planned to be fully removed in EF 11.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.ConfigureWarnings(b => b.Ignore(CosmosEventId.SyncNotSupported));\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments with Visual Studio Package Manager Console\nDESCRIPTION: This shows how to pass command-line arguments to the `Update-Database` command in the Visual Studio Package Manager Console, which in turn forwards them to the application's `CreateHostBuilder` method or the `IDesignTimeDbContextFactory`. The `-Args` parameter is used to specify the arguments.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dbcontext-creation.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Database -Args '--environment Production'\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Entities with Lazy Loading (C#)\nDESCRIPTION: This code shows how to access related entities through navigation properties when lazy loading is enabled.  The `employee.TimeCards` collection will be automatically populated when it is accessed for the first time.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nvar employee = _unitOfWork.Employees\n                              .Single(e => e.Id == id);\n    foreach (var card in employee.TimeCards) {\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure Precision and Scale with HasPrecision - C#\nDESCRIPTION: This example demonstrates how to configure the precision and scale for a decimal property using the `HasPrecision` method in the `OnModelCreating` method within your DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().Property(e => e.Score).HasPrecision(16, 5);\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Direct Descendents - SQL\nDESCRIPTION: The generated SQL query finds the direct descendants. It selects the PathFromPatriarch from the Halflings table where the name matches the input and then checks if GetAncestor(1) of other halflings equals this path. It returns the Id, Name, PathFromPatriarch, and YearOfBirth of the found descendants.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_74\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch].GetAncestor(1) = (\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0)\n```\n\n----------------------------------------\n\nTITLE: Microsoft.EntityFrameworkCore.Design Publishable workaround (XML)\nDESCRIPTION: Shows the workaround to resolve the missing `Microsoft.EntityFrameworkCore.Design` assembly error by marking the package reference as publishable. This includes it in the `.deps.json` file but copies the DLL to the output and publish folders.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"9.0.1\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <Publish>true</Publish>\n    </PackageReference>\n```\n\n----------------------------------------\n\nTITLE: Defining Entities for Lazy Loading Proxies\nDESCRIPTION: This code snippet shows example entity definitions (`Blog` and `Post`) with virtual navigation properties (`Posts` and `Blog` respectively).  The `virtual` keyword allows EF Core's proxy mechanism to override these properties and inject the lazy-loading logic.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/lazy.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    public virtual ICollection<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public virtual Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: LINQ Left Join Pattern in EF Core\nDESCRIPTION: This C# code demonstrates the LINQ pattern that EF Core translates into a SQL LEFT JOIN. It uses GroupJoin, DefaultIfEmpty, and SelectMany to achieve the desired result.  The query joins Blogs and Posts tables based on BlogId, allowing for Posts to be null when no matching BlogId is found.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar leftJoin =\\n    from b in context.Blogs\\n    join p in context.Posts\\n    on b.BlogId equals p.BlogId into grouping\\n    from p in grouping.DefaultIfEmpty()\\n    select new\\n    {\\n        Blog = b,\\n        Post = p\\n    };\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Data C#\nDESCRIPTION: This C# code snippet demonstrates how to use the Entity Framework context to interact with the database. It creates a new instance of the BloggingContext, prompts the user for a blog name, creates a new Blog object, adds it to the Blogs collection, and saves the changes to the database. It then queries the database for all blogs, orders them alphabetically by name, and prints their names to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/workflows/database-first.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nclass Program\n{\n    static void Main(string[] args)\n    {\n        using (var db = new BloggingContext())\n        {\n            // Create and save a new Blog\n            Console.Write(\"Enter a name for a new Blog: \");\n            var name = Console.ReadLine();\n\n            var blog = new Blog { Name = name };\n            db.Blogs.Add(blog);\n            db.SaveChanges();\n\n            // Display all Blogs from the database\n            var query = from b in db.Blogs\n                        orderby b.Name\n                        select b;\n\n            Console.WriteLine(\"All blogs in the database:\");\n            foreach (var item in query)\n            {\n                Console.WriteLine(item.Name);\n            }\n\n            Console.WriteLine(\"Press any key to exit...\");\n            Console.ReadKey();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Properties with Data Annotations - C#\nDESCRIPTION: This code snippet demonstrates how to exclude a specific property from being mapped to a column in the database using the `[NotMapped]` data annotation in Entity Framework Core.  It prevents the property from being included in the model. The dependency is System.ComponentModel.DataAnnotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-properties.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations.Schema;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n    [NotMapped]\n    public string FullName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Required One-to-One Relationships (SQL)\nDESCRIPTION: This SQL shows the commands executed when changing a reference navigation in a required one-to-one relationship in EF Core. It includes a DELETE statement to remove the old entity, and an INSERT statement to create the new entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p0='1' (DbType = String)], CommandType='Text', CommandTimeout='30']\nDELETE FROM \"Assets\"\nWHERE \"Id\" = @p0;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p1=NULL, @p2='1' (DbType = String)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Assets\" (\"Banner\", \"BlogId\")\nVALUES (@p1, @p2);\nSELECT \"Id\"\nFROM \"Assets\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n```\n\n----------------------------------------\n\nTITLE: LaundryBasket and Garment Entities with Persist Attribute\nDESCRIPTION: This code defines two entity classes, `LaundryBasket` and `Garment`, demonstrating the use of the `PersistAttribute` for opt-in property mapping.  Only properties and fields marked with `[Persist]` will be mapped to the database. Note the use of private fields with the `[Key]` attribute.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic class LaundryBasket\n{\n    [Persist] [Key]\n    private readonly int _id;\n\n    [Persist]\n    public int TenantId { get; init; }\n\n    public bool IsClean { get; set; }\n\n    public List<Garment> Garments { get; } = new();\n}\n\npublic class Garment\n{\n    public Garment(string name, string color)\n    {\n        Name = name;\n        Color = color;\n    }\n\n    [Persist]\n    [Key]\n    private readonly int _id;\n\n    [Persist]\n    public int TenantId { get; init; }\n\n    [Persist]\n    public string Name { get; }\n\n    [Persist]\n    public string Color { get; }\n\n    public bool IsClean { get; set; }\n\n    public LaundryBasket? Basket { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Data C#\nDESCRIPTION: This C# code demonstrates how to use the BloggingContext to insert a new Blog into the database and then retrieve and display all Blogs in alphabetical order. It uses LINQ to query the data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/existing-database.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nclass Program\n{\n    static void Main(string[] args)\n    {\n        using (var db = new BloggingContext())\n        {\n            // Create and save a new Blog\n            Console.Write(\"Enter a name for a new Blog: \");\n            var name = Console.ReadLine();\n\n            var blog = new Blog { Name = name };\n            db.Blogs.Add(blog);\n            db.SaveChanges();\n\n            // Display all Blogs from the database\n            var query = from b in db.Blogs\n                        orderby b.Name\n                        select b;\n\n            Console.WriteLine(\"All blogs in the database:\");\n            foreach (var item in query)\n            {\n                Console.WriteLine(item.Name);\n            }\n\n            Console.WriteLine(\"Press any key to exit...\");\n            Console.ReadKey();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Required with Shadow FK - C#\nDESCRIPTION: This code snippet defines a required one-to-many relationship between `Blog` and `Post` entities using a shadow foreign key.  The `BlogId` shadow property is automatically created in the `Post` entity because the `Post` entity has a required navigation property `Blog` to the `Blog` entity and no foreign key property. Nullable reference types in C# determine the nullability of the shadow FK.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n        // Principal (parent)\n        public class Blog\n        {\n            public int Id { get; set; }\n            public ICollection<Post> Posts { get; } = new List<Post>();  // Collection navigation containing dependents\n        }\n\n        // Dependent (child)\n        public class Post\n        {\n            public int Id { get; set; }\n            public Blog Blog { get; set; }                               // Required reference navigation to principal\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Parameters in App/Web.config - XML\nDESCRIPTION: This XML snippet demonstrates how to configure query cache parameters, specifically the size and cleaning interval, within the `<entityFramework>` section of the `app.config` or `web.config` file. These parameters can be adjusted to optimize performance based on the application's needs. The cleaning interval is specified in seconds, and a value of -1 disables cleaning.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/past-releases.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<entityFramework>\n  <queryCache size='1000' cleaningIntervalInSeconds='-1'/>\n</entityFramework>\n```\n\n----------------------------------------\n\nTITLE: Install EF Core Templates\nDESCRIPTION: This command installs the EF Core templates, allowing customization of scaffolded code when reverse engineering a model from a database. It requires the dotnet CLI tool.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_64\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new install Microsoft.EntityFrameworkCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Configuring check constraints in EF Core 7.0\nDESCRIPTION: This snippet demonstrates how check constraints, comments, and memory optimization are configured on the table builder within the ToTable configuration in EF Core 7.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<Blog>()\n    .ToTable(b => b.HasCheckConstraint(\"CK_Blog_TooFewBits\", \"Id > 1023\"));\n\nmodelBuilder\n    .Entity<Blog>()\n    .ToTable(b => b.HasComment(\"It's my table, and I'll delete it if I want to.\"));\n\nmodelBuilder\n    .Entity<Blog>()\n    .ToTable(b => b.IsMemoryOptimized());\n```\n\n----------------------------------------\n\nTITLE: Renaming All Stored Procedures with Lambda Block - C#\nDESCRIPTION: This snippet demonstrates renaming all three stored procedures (insert, update, and delete) using a lambda block syntax. This approach provides an alternative way to configure stored procedure names, similar to chaining.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures(s =>\n    {\n      s.Update(u => u.HasName(\"modify_blog\"));\n      s.Delete(d => d.HasName(\"delete_blog\"));\n      s.Insert(i => i.HasName(\"insert_blog\"));\n    });\n```\n\n----------------------------------------\n\nTITLE: SQLite Table Creation for User Entity\nDESCRIPTION: This SQL code shows the table schema created in SQLite for the `User` entity, where `DateOnly` and `TimeOnly` properties are mapped to `TEXT` columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_174\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"Users\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Users\" PRIMARY KEY AUTOINCREMENT,\n    \"Username\" TEXT NULL,\n    \"Birthday\" TEXT NOT NULL,\n    \"TokensRenewed\" TEXT NOT NULL);\n```\n\n----------------------------------------\n\nTITLE: Configure Conventions in DbContext - EF Core C#\nDESCRIPTION: This code snippet shows how to override the `ConfigureConventions` method in a `DbContext` to apply the custom model building convention for handling triggers. This will ensure that the convention is applied when the model is being built.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/misc.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Add(_ => new BlankTriggerAddingConvention());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons with Foundation\nDESCRIPTION: This snippet demonstrates how to use Open Iconic icons with Foundation by adding the appropriate class to a `<span>` element. The `aria-hidden` attribute is set to `true` to prevent screen readers from reading the icon as text.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Creating UpdatePerson Stored Procedure in SQL\nDESCRIPTION: This SQL script creates a stored procedure named 'UpdatePerson'. It updates existing records in the 'Person' table using parameters such as 'PersonID', 'LastName', 'FirstName', 'HireDate', 'EnrollmentDate', and 'Discriminator'. This procedure is used to modify a person's information in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[UpdatePerson]')\nAND type in (N'P', N'PC'))\nBEGIN\nEXEC dbo.sp_executesql @statement = N'\nCREATE PROCEDURE [dbo].[UpdatePerson]\n@PersonID int,\n@LastName nvarchar(50),\n@FirstName nvarchar(50),\n@HireDate datetime,\n@EnrollmentDate datetime,\n@Discriminator nvarchar(50)\nAS\nUPDATE Person SET LastName=@LastName,\nFirstName=@FirstName,\nHireDate=@HireDate,\nEnrollmentDate=@EnrollmentDate,\nDiscriminator=@Discriminator\nWHERE PersonID=@PersonID;\n'\nEND\nGO\n```\n\n----------------------------------------\n\nTITLE: Default Query Parameterization - SQL\nDESCRIPTION: This snippet shows the SQL generated from the default parameterization example. The title \".NET Blog\" is included as a constant in the SQL, while the ID is parameterized.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\nExecuted DbCommand (1ms) [Parameters=[@__id_0='1'], CommandType='Text', CommandTimeout='30']\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE [p].[Title] = N'.NET Blog' AND [p].[Id] = @__id_0\n```\n\n----------------------------------------\n\nTITLE: Configure Client Cascade Delete for TPT Mapping\nDESCRIPTION: This snippet configures the implicit relationship created for the TPT mapping to use client-side cascade deletes. This can prevent SQL Server errors related to multiple cascade behaviors in TPT inheritance scenarios.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<FeaturedPost>()\n    .HasOne<Post>()\n    .WithOne()\n    .HasForeignKey<FeaturedPost>(e => e.Id)\n    .OnDelete(DeleteBehavior.ClientCascade);\n```\n\n----------------------------------------\n\nTITLE: Setting default value and sentinel for Credits - C#\nDESCRIPTION: This configuration sets the default value for the `Credits` property to 10 and defines the sentinel value as -1.  This allows EF to distinguish between an unassigned value and an intentional 0 value. When the value is -1, the database default (10) will be applied.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_120\n\nLANGUAGE: csharp\nCODE:\n```\nb.Property(e => e.Credits).HasDefaultValueSql(10).HasSentinel(-1);\n```\n\n----------------------------------------\n\nTITLE: Split SQL Queries Generated by EF Core\nDESCRIPTION: Shows the split SQL queries generated by EF Core when using the SQLite provider with `AsSplitQuery`. This generates two separate queries, one for Artists and another for Albums.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.\"Id\", a.\"Name\"\nFROM \"Artists\" AS a\nORDER BY a.\"Id\"\n\nSELECT a0.\"Id\", a0.\"ArtistId\", a0.\"Title\", a.\"Id\"\nFROM \"Artists\" AS a\nINNER JOIN \"Album\" AS a0 ON a.\"Id\" = a0.\"ArtistId\"\nORDER BY a.\"Id\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value with Fluent API in EF Core\nDESCRIPTION: This C# code snippet shows how to configure a default value for a property using the Fluent API in EF Core. The HasDefaultValue method specifies the default value that will be used when a new row is inserted without providing a value for the column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(b => b.Rating)\n    .HasDefaultValue(3);\n```\n\n----------------------------------------\n\nTITLE: GroupBy and Ordering C#\nDESCRIPTION: This C# code snippet groups people by their first name, selects the last name of the first person in each group, orders the results by the selected last name, and converts the result to a list.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nvar results = context.People\n    .GroupBy(e => e.FirstName)\n    .Select(g => g.First().LastName)\n    .OrderBy(e => e)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Adding a migration for the new property via .NET Core CLI\nDESCRIPTION: This command adds a new migration named `AddBlogCreatedTimestamp` using the .NET Core CLI. This migration will contain the necessary changes to add the `CreatedTimestamp` column to the `Blogs` table. EF Core compares the updated model with the previous snapshot.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/index.md#_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add AddBlogCreatedTimestamp\n```\n\n----------------------------------------\n\nTITLE: Throw Exception for Shadow Property - EF Core\nDESCRIPTION: This code demonstrates how to configure warnings to throw an exception when a shadow property is created. This is useful to prevent the accidental creation of shadow properties, ensuring that all properties are explicitly defined in the .NET entity types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\noptionsBuilder.ConfigureWarnings(b => b.Throw(CoreEventId.ShadowPropertyCreated));\n```\n\n----------------------------------------\n\nTITLE: Check if Navigation Property Is Loaded (EF Core)\nDESCRIPTION: This code demonstrates how to check if a navigation property (`Posts`) is already loaded for an untracked entity using the `IsLoaded` method.  This method is useful for determining whether the navigation property has been populated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var blog in blogs)\n{\n    if (context.Entry(blog).Collection(e => e.Posts).IsLoaded)\n    {\n        Console.WriteLine($\" Posts for blog '{blog.Name}' are loaded.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a BlogDto Data Transfer Object in C#\nDESCRIPTION: This code defines a simple Data Transfer Object (DTO) called `BlogDto`. It mirrors the properties of a `Blog` entity, allowing for transferring data between layers or services. It contains properties Id (int) and Name (string).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BlogDto\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Graph of Entities\nDESCRIPTION: This snippet demonstrates how to insert a graph of entities (blog and posts) using the `Add` method. This marks the blog and all its associated posts to be inserted into the database. Requires a `Blog` entity with a collection of `Post` entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic static void InsertGraph(BloggingContext context, Blog blog)\n{\n    context.Add(blog);\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Related Entities Without Loading - EF6 - C#\nDESCRIPTION: This code demonstrates how to count related entities without actually loading them using the Query method and the LINQ Count method in Entity Framework 6. It counts the number of posts related to a given blog. Requires Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/related-data.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n\n    // Count how many posts the blog has.\n    var postCount = context.Entry(blog)\n                           .Collection(b => b.Posts)\n                           .Query()\n                           .Count();\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of AT TIME ZONE\nDESCRIPTION: This SQL query represents the translated form of the C# code that uses the AtTimeZone function in EF Core 7. It converts the PublishedOn column to Pacific Standard Time and GMT Standard Time using the AT TIME ZONE clause.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_130\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Title], [p].[PublishedOn] AT TIME ZONE 'Pacific Standard Time' AS [PacificTime], [p].[PublishedOn] AT TIME ZONE 'GMT Standard Time' AS [UkTime]\nFROM [Posts] AS [p]\n```\n\n----------------------------------------\n\nTITLE: User Entity Type Definition (C#)\nDESCRIPTION: This C# code defines a simple `User` entity with properties: `Id` (integer), `Username` (string), and `PhoneNumber` (long). The `PhoneNumber` is stored as a numeric value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\npublic class User\n{\n    public int Id { get; set; }\n    public string Username { get; set; }\n    public long PhoneNumber { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: CollectionType Element returning Person Entities XML\nDESCRIPTION: This example demonstrates a model-defined function that uses the CollectionType element to define that the function returns a collection of Person entity types. The ElementType attribute specifies the type of element in the collection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"LastNamesAfter\">\n        <Parameter Name=\"someString\" Type=\"Edm.String\"/>\n        <ReturnType>\n             <CollectionType  ElementType=\"SchoolModel.Person\"/>\n        </ReturnType>\n        <DefiningExpression>\n             SELECT VALUE p\n             FROM SchoolEntities.People AS p\n             WHERE p.LastName >= someString\n        </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Get Current Value of Billing Address - C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the current value of a complex property, specifically the BillingAddress, using the Entity Framework Core change tracking API. It accesses the ComplexProperty of an order entity and retrieves its CurrentValue.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nvar billingAddress = context.Entry(order)\n    .ComplexProperty(e => e.BillingAddress)\n    .CurrentValue;\n```\n\n----------------------------------------\n\nTITLE: Define Token Entity with DateTime Property\nDESCRIPTION: Defines a simple Token entity with an Id, Name, and a DateTime property ValidFrom. This example illustrates setting up a basic entity for use with EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Token\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public DateTime ValidFrom { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of JSON Column Query (SQLite)\nDESCRIPTION: This SQL snippet displays the translated SQL query for querying a JSON column using SQLite. It uses the `json_extract` function to retrieve the city from the JSON data and compares it with 'Chigley'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_63\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"a\".\"Id\", \"a\".\"Name\", \"a\".\"Contact\"\nFROM \"Authors\" AS \"a\"\nWHERE json_extract(\"a\".\"Contact\", '$.Address.City') = 'Chigley'\n```\n\n----------------------------------------\n\nTITLE: Insert Foo2 Entities with Different Count Values\nDESCRIPTION: Inserts three Foo2 entities with different values for the nullable Count property. Demonstrates that explicitly setting Count to 0 works as expected when the property is nullable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar fooA = new Foo2 { Count = 10 };\nvar fooB = new Foo2 { Count = 0 };\nvar fooC = new Foo2 { };\n\ncontext.AddRange(fooA, fooB, fooC);\ncontext.SaveChanges();\n\nDebug.Assert(fooA.Count == 10);\nDebug.Assert(fooB.Count == 0);\nDebug.Assert(fooC.Count == -1);\n```\n\n----------------------------------------\n\nTITLE: Persist Spatial Data in EF Core with C#\nDESCRIPTION: This code snippet demonstrates how to persist an entity with spatial data to the database using Entity Framework Core. It creates a new `Friend` object with a `Point` object for the `Location` property and saves it to the database using `SaveChangesAsync()`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.2.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new MyDbContext())\n{\n    context.Add(\n        new Friend\n        {\n            Name = \"Bill\",\n            Location = new Point(-122.34877, 47.6233355) {SRID = 4326 }\n        });\n    await context.SaveChangesAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Create Database Tables and Seed Data SQL\nDESCRIPTION: This SQL script creates the Blogs and Posts tables in the database, sets up primary and foreign key constraints, and inserts initial blog data for testing.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/existing-database.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [dbo].[Blogs] (\n    [BlogId] INT IDENTITY (1, 1) NOT NULL,\n    [Name] NVARCHAR (200) NULL,\n    [Url]  NVARCHAR (200) NULL,\n    CONSTRAINT [PK_dbo.Blogs] PRIMARY KEY CLUSTERED ([BlogId] ASC)\n);\n\nCREATE TABLE [dbo].[Posts] (\n    [PostId] INT IDENTITY (1, 1) NOT NULL,\n    [Title] NVARCHAR (200) NULL,\n    [Content] NTEXT NULL,\n    [BlogId] INT NOT NULL,\n    CONSTRAINT [PK_dbo.Posts] PRIMARY KEY CLUSTERED ([PostId] ASC),\n    CONSTRAINT [FK_dbo.Posts_dbo.Blogs_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [dbo].[Blogs] ([BlogId]) ON DELETE CASCADE\n);\n\nINSERT INTO [dbo].[Blogs] ([Name],[Url])\nVALUES ('The Visual Studio Blog', 'http://blogs.msdn.com/visualstudio/')\n\nINSERT INTO [dbo].[Blogs] ([Name],[Url])\nVALUES ('.NET Framework Blog', 'http://blogs.msdn.com/dotnet/')\n```\n\n----------------------------------------\n\nTITLE: DbConfiguration Type XML (EF6+)\nDESCRIPTION: This XML snippet configures the DbConfiguration type for EF to use for code-based configuration. The codeConfigurationType attribute specifies the assembly-qualified type name, enabling EF to automatically discover and use the specified DbConfiguration class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<entityFramework codeConfigurationType=\"MyNamespace.MyConfiguration, MyAssembly\">\n</entityFramework>\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Conversion for Composite Value Object in C#\nDESCRIPTION: This code configures the value conversion for the `Money` property of the `Order` entity, using `System.Text.Json` to serialize and deserialize the object to and from a single database column.  It uses `JsonSerializer.Serialize` for conversion to database and `JsonSerializer.Deserialize` for conversion from database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Order>()\n    .Property(e => e.Price)\n    .HasConversion(\n        v => JsonSerializer.Serialize(v, null),\n        v => JsonSerializer.Deserialize<Money>(v, null));\n```\n\n----------------------------------------\n\nTITLE: Define entities with Alternate Keys\nDESCRIPTION: Defines the Post and Tag entities, each containing an AlternateKey property that can be used as a foreign key in the join table. The AlternateKey property is an integer.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public int AlternateKey { get; set; }\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public int AlternateKey { get; set; }\n    public List<Post> Posts { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cascade Delete C#\nDESCRIPTION: This code configures a relationship between Course and Department, setting it as required, and then disables cascade delete.  The WillCascadeOnDelete(false) method prevents deleting a Department from automatically deleting associated Courses.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()\n    .HasRequired(t => t.Department)\n    .WithMany(t => t.Courses)\n    .HasForeignKey(d => d.DepartmentID)\n    .WillCascadeOnDelete(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Many-to-Many Relationship C#\nDESCRIPTION: This code configures a many-to-many relationship between the Course and Instructor types. The default Code First conventions create a join table named CourseInstructor with Course_CourseID and Instructor_InstructorID columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/relationships.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()\n    .HasMany(t => t.Instructors)\n    .WithMany(t => t.Courses)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow FK Property - EF Core\nDESCRIPTION: This code snippet illustrates how to explicitly create a shadow property for a foreign key and configure its facets, specifically making it non-nullable. This is achieved using `Property<string>(\"MyBlogId\").IsRequired()` before configuring the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/foreign-and-principal-keys.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .Property<string>(\"MyBlogId\")\n    .IsRequired();\n\nmodelBuilder.Entity<Blog>()\n    .HasMany(e => e.Posts)\n    .WithOne(e => e.Blog)\n    .HasForeignKey(\"MyBlogId\");\n```\n\n----------------------------------------\n\nTITLE: Create docfx alias for MacOS\nDESCRIPTION: These shell functions create aliases for running DocFX with Mono on macOS. They encapsulate the command to execute the DocFX executable using Mono, simplifying the process of building and serving the documentation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nfunction docfx {\n  mono $HOME/bin/docfx/docfx.exe\n}\n\nfunction docfx-serve {\n  mono $HOME/bin/docfx/docfx.exe serve _site\n}\n```\n\n----------------------------------------\n\nTITLE: Update Primitive Collections on a Book Entity in EF Core\nDESCRIPTION: This code snippet demonstrates how to update the primitive collections (Quotes and Notes) of a Book entity in Cosmos DB using EF Core. It adds a new quote and modifies a note, then saves the changes to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nbook.Quotes.Add(\"Pressing the emergency button lowered the rods again.\");\nbook.Notes[\"48\"] = \"Chiesa d'Oro\";\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationships with EF Core 5.0 (C#)\nDESCRIPTION: Demonstrates defining many-to-many relationships between Post and Tag entities in EF Core 5.0 without explicitly mapping the join table. EF Core automatically creates a `PostTag` join table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public ICollection<Tag> Tags { get; set; }\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public string Text { get; set; }\n    public ICollection<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DeleteBehavior with Attribute\nDESCRIPTION: This snippet demonstrates how to configure the DeleteBehavior for a relationship using the DeleteBehavior attribute in EF Core 7.  By default, required relationships are configured with Cascade delete behavior. This example changes it to NoAction.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_158\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public string? Title { get; set; }\n\n    [DeleteBehavior(DeleteBehavior.NoAction)]\n    public Blog Blog { get; set; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Navigation with IEnumerable - C#\nDESCRIPTION: This C# example demonstrates exposing a collection navigation as an IEnumerable<Post>. This provides a read-only view of the collection, preventing direct modification by application code.  EF can still modify the underlying collection through a backing field, if present.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public IEnumerable<Post> ThePosts { get; } = new List<Post>();\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Includes and Aggregation SQL\nDESCRIPTION: This SQL code represents the translated SQL for C# query involving includes, grouping by id and size of feet, and then counting the results.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_72\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT COUNT(*)\nFROM (\n    SELECT [f].[Id], [f].[Size]\n    FROM [People] AS [p]\n    LEFT JOIN [Feet] AS [f] ON [p].[Id] = [f].[Id]\n    GROUP BY [f].[Id], [f].[Size]\n) AS [t]\n```\n\n----------------------------------------\n\nTITLE: Define LoggerFactory in EF Core (2.1)\nDESCRIPTION: This code snippet demonstrates how to define a static LoggerFactory for EF Core in version 2.1. It creates a new LoggerFactory with a ConsoleLoggerProvider, enabling logging to the console.  It is crucial to maintain a single LoggerFactory instance to avoid memory leaks in EF Core 2.1.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/extensions-logging.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static readonly LoggerFactory MyLoggerFactory\n    = new LoggerFactory(new[] { new ConsoleLoggerProvider((_, __) => true, true) });\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of FreeText/Contains Query with JSON Column\nDESCRIPTION: This SQL code is the translation of the C# `Contains` query using EF.Functions.Contains against a JSON column. The `CONTAINS` function is used to search within the JSON column `Name` for the term 'Martin'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_89\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [c].[Name]\nFROM [Customers] AS [c]\nWHERE CONTAINS([c].[Name], N'Martin')\n```\n\n----------------------------------------\n\nTITLE: Using Column Attribute with C#\nDESCRIPTION: This code demonstrates how to use the `Column` attribute to specify the attributes of a mapped column, such as name and data type. The example sets the name of the column mapped to the `Description` property to `BlogDescription` and specifies the data type as `ntext`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n    [Column(\"BlogDescription\", TypeName=\"ntext\")]\n    public String Description {get;set;}\n```\n\n----------------------------------------\n\nTITLE: Using FromSqlRaw with Stored Procedure\nDESCRIPTION: This code shows how to use `FromSqlRaw` with a stored procedure and apply `AsEnumerable` to avoid server-side composition in EF Core 3.0. This is necessary because EF Core 3.0 does not support automatic client evaluation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Products.FromSqlRaw(\"[dbo].[Ten Most Expensive Products]\").AsEnumerable().FirstOrDefault();\n```\n\n----------------------------------------\n\nTITLE: Tracking Entities with Client Evaluation in Projection\nDESCRIPTION: This code shows that EF Core tracks entities materialized for client evaluation in the top-level projection. Because the `blog` entities are passed to the `StandardizeURL` method, EF Core will track these `blog` instances.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tracking.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar standardizedBlogs = context.Blogs\n    .Select(blog => new { Url = StandardizeURL(blog) })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Inserting or Updating a Single Entity (Auto-Generated Key)\nDESCRIPTION: This snippet shows how to use the `Update` method for both inserting and updating a single entity with an auto-generated key. If the key is not set, it will insert; otherwise, it will update. Requires an entity with an auto-generated key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static void InsertOrUpdateSingleEntity(BloggingContext context, Blog blog)\n{\n    context.Update(blog);\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Pet Entity Definition (C#)\nDESCRIPTION: This C# code defines a simple `Pet` entity with an explicitly defined `Id` property that is not automatically generated. The `[DatabaseGenerated(DatabaseGeneratedOption.None)]` attribute disables automatic key generation for the `Id` property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic class Pet\n    {\n        [DatabaseGenerated(DatabaseGeneratedOption.None)]\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite\nDESCRIPTION: This snippet shows how to use the Open Iconic SVG sprite. It involves embedding an `<svg>` tag with a `<use>` tag that references a specific icon within the sprite. The SVG sprite allows displaying multiple icons with a single request.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Non-Computed Concurrency Token (C#)\nDESCRIPTION: This C# code defines a Blog class with the Url property marked with the [ConcurrencyCheck] attribute. This property will be used as a concurrency token during updates to ensure data integrity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog  \n{\n  public int BlogId { get; set; }\n  public string Name { get; set; }\n  [ConcurrencyCheck]\n  public string Url { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Constructor Parameters to a Custom Database Initializer\nDESCRIPTION: This snippet demonstrates how to pass constructor parameters to a custom database initializer using the parameters element. This allows you to configure the initializer with specific values from the configuration file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<contexts>\n  <context type=\" Blogging.BlogContext, MyAssembly\">\n    <databaseInitializer type=\"Blogging.MyCustomBlogInitializer, MyAssembly\">\n      <parameters>\n        <parameter value=\"MyConstructorParameter\" />\n      </parameters>\n    </databaseInitializer>\n  </context>\n</contexts>\n```\n\n----------------------------------------\n\nTITLE: Cartesian Explosion SQL\nDESCRIPTION: SQL query demonstrating the cartesian explosion problem when loading related entities via JOINs. The blog's information is duplicated for each related post.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url], [p].[PostId], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Rating], [p].[Title]\nFROM [Blogs] AS [b]\nLEFT JOIN [Post] AS [p] ON [b].[BlogId] = [p].[BlogId]\nORDER BY [b].[BlogId], [p].[PostId]\n```\n\n----------------------------------------\n\nTITLE: Negated Nullable Comparison Filter - SQL (EF9)\nDESCRIPTION: This SQL query shows the output generated by EF Core 9 for the negated nullable comparison filter. The `CASE` statement correctly handles null values, aligning with C# semantics for comparison operations on nullable values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_55\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [e].[NullableIntOne], [e].[NullableIntTwo]\nFROM [Entities] AS [e]\nWHERE CASE\n    WHEN [e].[NullableIntOne] > [e].[NullableIntTwo] THEN CAST(0 AS bit)\n    ELSE CAST(1 AS bit)\nEND = CAST(1 AS bit)\n```\n\n----------------------------------------\n\nTITLE: DbContext with DbSet Properties - C#\nDESCRIPTION: This snippet demonstrates defining a DbContext with public automatic DbSet properties for entity types (Blog and Post). It configures Blogs and Posts as entity types and automatically calls the setter for each property to set an instance of the appropriate DbSet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/dbsets.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Async Entity Framework Queries in C#\nDESCRIPTION: This code snippet demonstrates how to write a unit test for an asynchronous method (`GetAllBlogsAsync`) that interacts with Entity Framework. It uses Moq to mock the `DbSet` and `BloggingContext`, and the `TestDbAsyncQueryProvider` from the previous snippet to simulate asynchronous query execution. The test verifies that the method returns the blogs in the correct order.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/mocking.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Moq;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Data.Entity.Infrastructure;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace TestingDemo\n{\n    [TestClass]\n    public class AsyncQueryTests\n    {\n        [TestMethod]\n        public async Task GetAllBlogsAsync_orders_by_name()\n        {\n\n            var data = new List<Blog>\n            {\n                new Blog { Name = \"BBB\" },\n                new Blog { Name = \"ZZZ\" },\n                new Blog { Name = \"AAA\" },\n            }.AsQueryable();\n\n            var mockSet = new Mock<DbSet<Blog>>();\n            mockSet.As<IDbAsyncEnumerable<Blog>>()\n                .Setup(m => m.GetAsyncEnumerator())\n                .Returns(new TestDbAsyncEnumerator<Blog>(data.GetEnumerator()));\n\n            mockSet.As<IQueryable<Blog>>()\n                .Setup(m => m.Provider)\n                .Returns(new TestDbAsyncQueryProvider<Blog>(data.Provider));\n\n            mockSet.As<IQueryable<Blog>>().Setup(m => m.Expression).Returns(data.Expression);\n            mockSet.As<IQueryable<Blog>>().Setup(m => m.ElementType).Returns(data.ElementType);\n            mockSet.As<IQueryable<Blog>>().Setup(m => m.GetEnumerator()).Returns(() => data.GetEnumerator());\n\n            var mockContext = new Mock<BloggingContext>();\n            mockContext.Setup(c => c.Blogs).Returns(mockSet.Object);\n\n            var service = new BlogService(mockContext.Object);\n            var blogs = await service.GetAllBlogsAsync();\n\n            Assert.AreEqual(3, blogs.Count);\n            Assert.AreEqual(\"AAA\", blogs[0].Name);\n            Assert.AreEqual(\"BBB\", blogs[1].Name);\n            Assert.AreEqual(\"ZZZ\", blogs[2].Name);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Product class using Code First in C#\nDESCRIPTION: This class defines the Product entity with properties for ProductId, Name, CategoryId, and a navigation property for Category. It represents the dependent/detail side of the one-to-many relationship with Category.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/winforms.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n\n    namespace WinFormswithEFSample\n    {\n        public class Product\n        {\n            public int ProductId { get; set; }\n            public string Name { get; set; }\n\n            public int CategoryId { get; set; }\n            public virtual Category Category { get; set; }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: DbContext with Both Generic and Non-Generic Constructors (C#)\nDESCRIPTION: This code snippet shows how to define a DbContext subclass that exposes both a constructor taking a generic DbContextOptions<TContext> and a protected constructor taking a non-generic DbContextOptions.  This allows the DbContext to be both instantiated directly and inherited from. It requires the Microsoft.EntityFrameworkCore package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ApplicationDbContext : DbContext\n{\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> contextOptions)\n        : base(contextOptions)\n    {\n    }\n\n    protected ApplicationDbContext(DbContextOptions contextOptions)\n        : base(contextOptions)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incomplete Discriminator Mapping - C#\nDESCRIPTION: This code marks the discriminator mapping as incomplete, which forces EF Core to always add a filter predicate for querying any type in the hierarchy. This is useful when the database contains discriminator values not mapped in the EF model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasDiscriminator<string>(\"BlogType\")\n        .IsComplete(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Unbounded Discriminator Column Size in C#\nDESCRIPTION: This code shows how to explicitly make the discriminator column unbounded, reverting to the pre-EF Core 8.0 behavior of using `nvarchar(max)` or equivalent. This is useful when migrations fail due to constraints on the discriminator column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Foo>()\n    .Property<string>(\"Discriminator\")\n    .HasMaxLength(-1);\n```\n\n----------------------------------------\n\nTITLE: Client Projection in EF Core\nDESCRIPTION: Demonstrates client evaluation in the top-level projection using a helper method to standardize URLs for blogs.  The SQL Server provider cannot translate the helper method, so it is executed on the client side after data retrieval from the database. This snippet requires a helper method to format URLs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/client-eval.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Querying/ClientEvaluation/Program.cs#ClientProjection)]\n```\n\n----------------------------------------\n\nTITLE: Define Blog and Post Model in C#\nDESCRIPTION: This code snippet defines the `Blog` and `Post` entity classes with a one-to-many relationship. The `Post.BlogId` property represents the foreign key, and the `Blog.Posts` property is the collection navigation property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n\n    public IList<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Generation on Add - Data Annotations - C#\nDESCRIPTION: This code snippet demonstrates how to configure a string property to use generated values when no other non-null value is set using data annotations in EF Core.  The `DatabaseGenerated` attribute with `DatabaseGeneratedOption.Identity` is used to specify that the `Id` property should have its value generated by the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n[DatabaseGenerated(DatabaseGeneratedOption.Identity)]\npublic string Id { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Disabling Value Generation with Fluent API in EF Core\nDESCRIPTION: This C# code snippet shows how to disable value generation for a property using the Fluent API in EF Core. The ValueGeneratedNever method specifies that the database provider should never generate a value for the property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(b => b.BlogId)\n    .ValueGeneratedNever();\n```\n\n----------------------------------------\n\nTITLE: Alternate Key Name Configuration - Fluent API - C#\nDESCRIPTION: Demonstrates how to configure the names of the index and unique constraint for an alternate key using the Fluent API. 'HasAlternateKey' followed by 'HasName' is used to specify the alternate key constraint name for the 'Car' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\ninternal class CarContext : DbContext\n{\n    public DbSet<Car> Cars { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Car>().HasAlternateKey(c => c.LicensePlate).HasName(\"AK_Cars_LicensePlate\");\n    }\n}\n\ninternal class Car\n{\n    public string LicensePlate { get; set; }\n\n    public string Make { get; set; }\n    public string Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of String.Concat\nDESCRIPTION: This SQL code shows the translation of the C# `String.Concat` call.  It selects the columns `Id`, `Token1`, `Token2`, `Token3`, and `TokensProcessed` from the `Shards` table. The `WHERE` clause compares the concatenation of `Token1`, `Token2`, and `Token3` to the value of `TokensProcessed`. The + operator is used for string concatenation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_85\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [s].[Id], [s].[Token1], [s].[Token2], [s].[Token3], [s].[TokensProcessed]\nFROM [Shards] AS [s]\nWHERE (([s].[Token1] + ([s].[Token2] + [s].[Token3])) <> [s].[TokensProcessed]) OR [s].[TokensProcessed] IS NULL\n```\n\n----------------------------------------\n\nTITLE: Rewriting Query with Distinct on Inner Collection in EF Core\nDESCRIPTION: This code snippet demonstrates how to rewrite a query that uses `Distinct` on an inner collection. The `Distinct` operation is moved to the client side to address limitations in EF Core's correlated collection handling when the inner collection projection doesn't contain the primary key. It requires importing System.Linq.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n(await context.Parents\n    .Select(p => p.Children.Select(c => c.School))\n    .ToListAsync())\n    .Select(x => x.Distinct())\n```\n\n----------------------------------------\n\nTITLE: CollectionType Element - XML\nDESCRIPTION: This example shows the CollectionType element used within a function's ReturnType to indicate that the function returns a collection of rows. The RowType child element defines the structure of each row in the collection, specifying the properties and their data types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n   <Function Name=\"GetProducts\" IsComposable=\"true\" Schema=\"dbo\">\n     <ReturnType>\n       <CollectionType>\n         <RowType>\n           <Property Name=\"ProductID\" Type=\"int\" Nullable=\"false\" />\n           <Property Name=\"CategoryID\" Type=\"bigint\" Nullable=\"false\" />\n           <Property Name=\"ProductName\" Type=\"nvarchar\" MaxLength=\"40\" Nullable=\"false\" />\n           <Property Name=\"UnitPrice\" Type=\"money\" />\n           <Property Name=\"Discontinued\" Type=\"bit\" />\n         </RowType>\n       </CollectionType>\n     </ReturnType>\n   </Function>\n```\n\n----------------------------------------\n\nTITLE: Coloring Open Iconic SVG Icons (CSS)\nDESCRIPTION: This CSS snippet shows how to change the color of Open Iconic SVG icons within an SVG sprite. It sets the `fill` property on the `<use>` tag to the desired color.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly translated LINQ query in EF Core\nDESCRIPTION: This LINQ query example demonstrates an incorrectly translated query that is no longer translated in EF Core 9. It is shown to illustrate the change where queries that could return incorrect results now throw an exception.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar sessions = await context.Sessions\n    .Take(5)\n    .Where(s => s.Name.StartsWith(\"f\"))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: EF Core LINQ Query with DateOnly\nDESCRIPTION: This C# code demonstrates an EF Core LINQ query that filters users based on their `Birthday` property (DateOnly). It translates into an SQL query that compares the `Birthday` column with a specified date.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_175\n\nLANGUAGE: C#\nCODE:\n```\nvar users = context.Users.Where(u => u.Birthday < new DateOnly(1900, 1, 1)).ToList();\n```\n\n----------------------------------------\n\nTITLE: T4 Template Example - DbContext\nDESCRIPTION: Illustrates the basic structure of a T4 template, showing directives, control blocks, and expression control blocks. This example specifically shows namespace declaration using a parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_2\n\nLANGUAGE: T4\nCODE:\n```\n<#@ template hostSpecific=\"true\" #>\n<#@ assembly name=\"Microsoft.EntityFrameworkCore.Design\" #>\n<#@ parameter name=\"NamespaceHint\" type=\"System.String\" #>\n<#@ import namespace=\"Microsoft.EntityFrameworkCore\" #>\n<#\n    if (!string.IsNullOrEmpty(NamespaceHint))\n    {\n#>\nnamespace <#= NamespaceHint #>;\n```\n\n----------------------------------------\n\nTITLE: DetailedOrder Entity Definition C#\nDESCRIPTION: Defines the `DetailedOrder` entity with properties like Id, Status, and Details.  It is used in conjunction with the `Order` entity to demonstrate table splitting, where both entities map to the same table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/table-splitting.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DetailedOrder\n{\n    public int Id { get; set; }\n    public string? Status { get; set; }\n    public string? Details { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Single Property (String Name) - C#\nDESCRIPTION: This code snippet demonstrates how to access a single property of an entity by passing the property name as a string in Entity Framework Core. It retrieves the `PropertyEntry<Blog, string>` for the 'Name' property of a 'Blog' entity using the property name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nPropertyEntry<Blog, string> propertyEntry = context.Entry(blog).Property<string>(\"Name\");\n```\n\n----------------------------------------\n\nTITLE: ObservableCollection for Navigation Properties in EF6\nDESCRIPTION: This code snippet defines a Blog class with an ObservableCollection for the Posts navigation property. This allows for easier master/detail data binding in WPF applications.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/local-data.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    private readonly ObservableCollection<Post> _posts =\n        new ObservableCollection<Post>();\n\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n\n    public virtual ObservableCollection<Post> Posts\n    {\n        get { return _posts; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloned Object - C#\nDESCRIPTION: This snippet demonstrates how to create a clone of an entity using the `GetDatabaseValues` method and `ToObject`. The resulting object contains the property values from the database and is not tracked by the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/property-values.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n\n    var clonedBlog = context.Entry(blog).GetDatabaseValues().ToObject();\n}\n```\n\n----------------------------------------\n\nTITLE: Using DbParameter for Database Control - C#\nDESCRIPTION: This example demonstrates creating and using a `DbParameter` to explicitly define the database type and facets for the parameter being passed to the stored procedure, providing more control over the parameter configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar user = new SqlParameter(\"user\", \"johndoe\");\n\nvar blogs = await context.Blogs\n    .FromSql($\"EXECUTE dbo.GetMostPopularBlogsForUser {user}\")\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Executing a Migration Bundle with Connection String\nDESCRIPTION: This command executes a migration bundle using a specified connection string.  The '--connection' parameter overrides the connection string defined in the application configuration. Dependencies: The generated executable bundle file (e.g., efbundle.exe).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_20\n\nLANGUAGE: dotnetcli\nCODE:\n```\n.\\efbundle.exe --connection \"Data Source=(LocalDb)\\MSSQLLocalDB;Database=SixOhProduction\"\n```\n\n----------------------------------------\n\nTITLE: Disable Foreign Key Index Convention C#\nDESCRIPTION: This C# code shows how to remove the `ForeignKeyIndexConvention` during model building, preventing EF Core from automatically creating indexes for foreign key columns. This allows for more control over index creation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Remove(typeof(ForeignKeyIndexConvention));\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Salary Update with ExecuteUpdateAsync in EF Core 7.0+\nDESCRIPTION: This C# code uses ExecuteUpdateAsync to efficiently update employee salaries in EF Core 7.0 and later. It performs the update in a single database roundtrip without loading data or using change tracking.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-updating.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Employees.ExecuteUpdateAsync(s => s.SetProperty(e => e.Salary, e => e.Salary + 1000));\n```\n\n----------------------------------------\n\nTITLE: Configure Vector Property in ModelBuilder\nDESCRIPTION: This C# snippet configures the vector property in the `OnModelCreating` method using `IsVector`. This specifies the distance function (Cosine) and dimensions of the vector for use in vector similarity searches.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\npublic class BloggingContext\n{\n    ...\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Blog>()\n            .Property(b => b.Embeddings)\n            .IsVector(DistanceFunction.Cosine, dimensions: 1536);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Column Aggregate Configuration C#\nDESCRIPTION: Configures the Author entity to own a ContactDetails aggregate. The ContactDetails aggregate is mapped to a JSON column in the Authors table. The Address aggregate within ContactDetails will be serialized into the JSON column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Author>().OwnsOne(\n        author => author.Contact, ownedNavigationBuilder =>\n        {\n            ownedNavigationBuilder.ToJson();\n            ownedNavigationBuilder.OwnsOne(contactDetails => contactDetails.Address);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Example SQL Query for Default Parameterized Primitive Collections\nDESCRIPTION: This SQL query shows how EF Core 9 translates queries that use parameterized primitive collections when the default behavior is in effect. The collection is converted to a JSON string and passed as a parameter to the `OPENJSON` function to be used in the `WHERE` clause.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_43\n\nLANGUAGE: SQL\nCODE:\n```\nExecuted DbCommand (5ms) [Parameters=[@__ids_0='[1,2,3]' (Size = 4000)], CommandType='Text', CommandTimeout='30']\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Rating], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE [p].[Title] = N'.NET Blog' AND [p].[Id] IN (\n    SELECT [i].[value]\n    FROM OPENJSON(@__ids_0) WITH ([value] int '$') AS [i]\n)\n```\n\n----------------------------------------\n\nTITLE: Update Entity by Querying and Applying Changes - C#\nDESCRIPTION: This example demonstrates updating an entity by first querying it from the database to track it, and then applying the changes to the tracked entity. Only property values that have actually changed will be updated in the database. This method involves two database round-trips.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static void UpdateFromHttpPost2(Blog blog)\n{\n    using var context = new BlogsContext();\n\n    var trackedBlog = context.Blogs.Find(blog.Id);\n\n    trackedBlog.Name = blog.Name;\n    trackedBlog.Summary = blog.Summary;\n\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext using Visual Studio PMC\nDESCRIPTION: This command uses the Package Manager Console (PMC) in Visual Studio to scaffold entity types and a DbContext.  It specifies the database connection string and the SQL Server provider. The connection string points to a SQL Server LocalDB instance.  The connection string must be properly quoted for PowerShell.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext 'Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Chinook' Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Define Distributor Class with StreetAddress Collection\nDESCRIPTION: This snippet shows the definition of the Distributor class, which contains a collection of StreetAddress objects. This is used to demonstrate how collections of owned entities are handled in EF Core with Azure Cosmos DB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic class Distributor\n{\n    public int Id { get; set; }\n    public List<StreetAddress> ShippingCenters { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON with Discriminator and ID\nDESCRIPTION: This JSON snippet illustrates how EF Core versions before 9.0 stored the discriminator value within the `id` property, which is a combination of the object type and key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"Blog|1099\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Guid Value Converter in EF Core\nDESCRIPTION: This C# code configures a value converter for a Guid property in EF Core to maintain the previous behavior of storing Guids as BLOBs in SQLite. It defines how to convert a Guid to a byte array for storage and back to a Guid when reading from the database. The `HasConversion` method is used in the model builder to apply this converter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<MyEntity>()\n    .Property(e => e.GuidProperty)\n    .HasConversion(\n        g => g.ToByteArray(),\n        b => new Guid(b));\n```\n\n----------------------------------------\n\nTITLE: Querying with Stored Procedures - C#\nDESCRIPTION: This code snippet demonstrates how to call a stored procedure directly using the `SqlQuery` method on a `DbSet`.  It executes the stored procedure named `GetAllProducts` in the `dbo` schema and returns the results as a collection of `Product` entities.\nThis approach is used when Code First doesn't support mapping to stored procedures.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/stored-procedures/cud.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = context.Products.SqlQuery(\"EXECUTE [dbo].[GetAllProducts]\");\n```\n\n----------------------------------------\n\nTITLE: Querying OfficeAssignment table in SQL\nDESCRIPTION: This SQL query retrieves the 'Timestamp' column from the 'OfficeAssignment' table where the 'InstructorID' matches a specified parameter. It is used to check the last modification time of an office assignment for a particular instructor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [Timestamp] FROM OfficeAssignment\nWHERE InstructorID=@InstructorID;\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Data with TemporalBetween in EF Core\nDESCRIPTION: This code snippet demonstrates how to query historical data within a specific time range using the `TemporalBetween()` method in EF Core. It filters the employee data for a given name and orders it by the `ValidFrom` property. The example shows how to retrieve historical employee data that was active within a given period.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar history = context\n    .Employees\n    .TemporalBetween(timeStamp2, timeStamp3)\n    .Where(e => e.Name == \"Rainbow Dash\")\n    .OrderBy(e => EF.Property<DateTime>(e, \"ValidFrom\"))\n    .Select(\n        e => new\n        {\n            Employee = e,\n            ValidFrom = EF.Property<DateTime>(e, \"ValidFrom\"),\n            ValidTo = EF.Property<DateTime>(e, \"ValidTo\")\n        })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Table-per-Type (TPT) Configuration - C#\nDESCRIPTION: This code configures Table-per-Type (TPT) inheritance mapping, where each type in the hierarchy is mapped to its own table. This example demonstrates how to explicitly specify the table for derived types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().ToTable(\"Blogs\");\n    modelBuilder.Entity<RssBlog>().ToTable(\"RssBlogs\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Column to the Database using C# Migration\nDESCRIPTION: This C# code snippet demonstrates a database migration to add a 'Url' column to the 'Blogs' table. The 'Up' method adds the column, while the 'Down' method removes it. The using statements are necessary for accessing the Entity Framework Migration classes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace CodeFirstNewDatabaseSample.Migrations\n{\n    using System;\n    using System.Data.Entity.Migrations;\n\n    public partial class AddUrl : DbMigration\n    {\n        public override void Up()\n        {\n            AddColumn(\"dbo.Blogs\", \"Url\", c => c.String());\n        }\n\n        public override void Down()\n        {\n            DropColumn(\"dbo.Blogs\", \"Url\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hierarchical Partition Key in EF Core\nDESCRIPTION: This snippet shows how to configure a hierarchical partition key for an entity in EF Core using the ModelBuilder. The HasPartitionKey method is used to specify the properties that make up the partition key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Session>()\n        .HasPartitionKey(b => new { b.TenantId, b.UserId, b.SessionId })\n}\n```\n\n----------------------------------------\n\nTITLE: Configure DateTimeKind Preservation in EF Core (Version 3)\nDESCRIPTION: Configures a value converter to ensure that all DateTime values are stored as UTC time by calling ToUniversalTime() before storing and setting the DateTimeKind to UTC when reading from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Post>()\n    .Property(e => e.LastUpdated)\n    .HasConversion(\n        v => v.ToUniversalTime(),\n        v => new DateTime(v.Ticks, DateTimeKind.Utc));\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Database Initializer for a Specific Context\nDESCRIPTION: This snippet shows how to set a custom database initializer for a specific context using the databaseInitializer element. The type attribute specifies the assembly qualified name of the initializer class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<contexts>\n  <context type=\" Blogging.BlogContext, MyAssembly\">\n    <databaseInitializer type=\"Blogging.MyCustomBlogInitializer, MyAssembly\" />\n  </context>\n</contexts>\n```\n\n----------------------------------------\n\nTITLE: Currency Converter Implementation C#\nDESCRIPTION: This code snippet provides the implementation for the `CurrencyConverter` class. This converter is used to translate between the custom `Currency` type and a supported type like `decimal` for database storage.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\n\nnamespace BulkConfiguration;\n\npublic class CurrencyConverter : ValueConverter<Currency, decimal>\n{\n    public CurrencyConverter() : base(\n        v => v.Amount,\n        v => new Currency { Amount = v })\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext with Directory Options - .NET CLI\nDESCRIPTION: This command scaffolds a DbContext and entity types from a database. It uses the `--context-dir` option to specify a directory for the DbContext class and the `--output-dir` option for the entity type classes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_14\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold ... --context-dir Data --output-dir Models\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Primitive Collection\nDESCRIPTION: This C# code defines a `DogWalk` class with a `DaysVisited` property of type `ReadOnlyCollection<DateOnly>`. EF Core 9 maps this property as a primitive collection of dates, enabling storage and querying of read-only primitive collections.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_74\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DogWalk\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public ReadOnlyCollection<DateOnly> DaysVisited { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Default Value for DateTime Property using HasDefaultValueSql\nDESCRIPTION: Configures the ValidFrom property of the Token entity to get its default value from the database using CURRENT_TIMESTAMP. It demonstrates how to use HasDefaultValueSql to specify a SQL expression for the default value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Token>()\n    .Property(e => e.ValidFrom)\n    .HasDefaultValueSql(\"CURRENT_TIMESTAMP\");\n```\n\n----------------------------------------\n\nTITLE: String Property Facets Configuration C#\nDESCRIPTION: Configures all string properties in the model to be non-Unicode (ANSI) and sets a maximum length of 1024.  This pre-convention configuration applies to all string properties automatically.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nconfigurationBuilder\n    .Properties<string>()\n    .AreUnicode(false)\n    .HaveMaxLength(1024);\n```\n\n----------------------------------------\n\nTITLE: Configuring Immutable Struct Property (C#)\nDESCRIPTION: Configures the conversion between the `Dollars` value object and the underlying decimal type.  It defines how to convert from `Dollars` to decimal for storage and back to `Dollars` when querying the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Order>()\n    .Property(e => e.Price)\n    .HasConversion(\n        v => v.Amount,\n        v => new Dollars(v));\n```\n\n----------------------------------------\n\nTITLE: Setting AppContext Switch for Cosmos Keys in C#\nDESCRIPTION: This code snippet shows how to disable the new behavior of persisting non-shadow integer keys to Cosmos documents in EF Core 8.0.  Setting the `Microsoft.EntityFrameworkCore.Issue31664` AppContext switch to `true` reverts to the old behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Microsoft.EntityFrameworkCore.Issue31664\", isEnabled: true);\n```\n\n----------------------------------------\n\nTITLE: Default value and sentinel in entity class - C#\nDESCRIPTION: This code demonstrates setting the initial value of the Credits property in the Person entity to -1. This reflects the sentinel value defined in the EF configuration, ensuring consistency between the entity and the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_121\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public int Id { get; set; }\n    public int Credits { get; set; } = -1;\n}\n```\n\n----------------------------------------\n\nTITLE: DbSet.Local: Query Tracked Entities C#\nDESCRIPTION: Illustrates using DbSet.Local to query the DbContext for local, tracked entities.  It first loads entities into the context using Load() and then accesses them via DbSet.Local.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\ncontext.Blogs.Include(e => e.Posts).Load();\n\nforeach (var blog in context.Blogs.Local)\n{\n    Console.WriteLine($\"Blog: {blog.Name}\");\n}\n\nforeach (var post in context.Posts.Local)\n{\n    Console.WriteLine($\"Post: {post.Title}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Define StreetAddress Owned Entity\nDESCRIPTION: This C# code defines the `StreetAddress` owned entity class. It includes properties for Street, City, and ZipCode, representing address information. This type will be owned by the Order entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/index.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StreetAddress\n{\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string ZipCode { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: IHasIntKey Interface Definition C#\nDESCRIPTION: This interface defines a contract for entities that have an integer primary key identified by the Id property. It is used to generically identify entities that can be sorted by their primary key as a secondary sort order.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IHasIntKey\n    {\n        int Id { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting Dependent Child Entities C#\nDESCRIPTION: This snippet demonstrates deleting a dependent/child entity (Post) by attaching the Post to the context and then calling Remove on it. This marks the entity as Deleted and it will be removed from the database when SaveChanges is called.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Attach(post);\ncontext.Remove(post);\n```\n\n----------------------------------------\n\nTITLE: Using TimeStamp Attribute with C#\nDESCRIPTION: This code demonstrates how to use the `Timestamp` attribute to enable optimistic concurrency checking using a timestamp or rowversion column. This ensures that the database field generated by Code First is non-nullable and acts as a concurrency token.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n    [Timestamp]\n    public Byte[] TimeStamp { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Conventions - C#\nDESCRIPTION: This code shows how to register the DiscriminatorLengthConvention1 within the ConfigureConventions method of your DbContext. It uses the Add method of the ModelConfigurationBuilder to add a factory for creating instances of the convention.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Add(_ =>  new DiscriminatorLengthConvention1());\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Navigation Example - C#\nDESCRIPTION: This C# code demonstrates a collection navigation property 'ThePosts' using ICollection<Post>. Collection navigations represent the 'many' side of one-to-many and many-to-many relationships. Initialization inline is common, eliminating the need to check for null.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/navigations.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic ICollection<Post> ThePosts { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Mapping CLR Property to Specific Column - EF6 - C#\nDESCRIPTION: This snippet maps the `Name` CLR property to the `DepartmentName` database column using the `HasColumnName` method. This allows you to control the database column name independently of the CLR property name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>()\n    .Property(t => t.Name)\n    .HasColumnName(\"DepartmentName\");\n```\n\n----------------------------------------\n\nTITLE: Change Log Level for an Event\nDESCRIPTION: This code snippet demonstrates how to change the log level for specific events in EF Core using the ConfigureWarnings API. It promotes the ConnectionOpened and ConnectionClosed events from LogLevel.Debug to LogLevel.Information.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/extensions-logging.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .ConfigureWarnings(b => b.Log(\n            (RelationalEventId.ConnectionOpened, LogLevel.Information),\n            (RelationalEventId.ConnectionClosed, LogLevel.Information)));\n```\n\n----------------------------------------\n\nTITLE: Reverse Engineering Command (.NET Core CLI)\nDESCRIPTION: Executes the EF Core dbcontext scaffold command using the .NET Core CLI to reverse engineer a database and generate the model, using the customized T4 templates. The `--force` option overwrites existing files.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef dbcontext scaffold \"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Chinook\" Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Add Convention Before Built-in Convention C#\nDESCRIPTION: This code snippet shows how to add a custom convention (`DateTime2Convention`) to run before a built-in convention (`IdKeyDiscoveryConvention`). This allows you to modify or extend the default behavior of Entity Framework's model building process.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Conventions.AddBefore<IdKeyDiscoveryConvention>(new DateTime2Convention());\n```\n\n----------------------------------------\n\nTITLE: SQL for Deleting Tags with a Filter\nDESCRIPTION: This SQL code demonstrates the DELETE statement with a WHERE clause generated by `ExecuteDeleteAsync` when deleting Tag entities that contain '.NET' in their Text property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM [t]\nFROM [Tags] AS [t]\nWHERE [t].[Text] LIKE N'%.NET%'\n```\n\n----------------------------------------\n\nTITLE: EF7 SQL for Contains Subquery (PostgreSQL)\nDESCRIPTION: This SQL snippet shows the query generated by EF Core 7 for the LINQ query using `Contains` operator with a subquery. This generates a correlated subquery using `EXISTS`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_137\n\nLANGUAGE: sql\nCODE:\n```\nSELECT b.\"Id\", b.\"Name\"\n      FROM \"Blogs\" AS b\n      WHERE EXISTS (\n          SELECT 1\n          FROM \"Posts\" AS p\n          WHERE p.\"BlogId\" = b.\"Id\")\n```\n\n----------------------------------------\n\nTITLE: Excluding Table from Migrations - C#\nDESCRIPTION: This code shows how to prevent a table from being created or managed by EF Core migrations using the ExcludeFromMigrations() method in the Fluent API. The entity is still part of the model and can be used normally.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<IdentityUser>().ToTable(\"AspNetUsers\", t => t.ExcludeFromMigrations());\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Database Connection in TransactionScope\nDESCRIPTION: This snippet demonstrates how to explicitly open and close the database connection when using TransactionScope in EF Core 3.0.  It ensures the connection remains open for the duration needed by calling OpenConnectionAsync() and CloseConnectionAsync().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nusing (new TransactionScope())\n{\n    using (AdventureWorks context = new AdventureWorks())\n    {\n        await context.Database.OpenConnectionAsync();\n        context.ProductCategories.Add(new ProductCategory());\n        await context.SaveChangesAsync();\n\n        var categories = await context.ProductCategories().ToListAsync();\n        await context.Database.CloseConnectionAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Migrations - PowerShell\nDESCRIPTION: Enables Code First Migrations in the project. This command creates a 'Migrations' folder and a 'Configuration' class, which is used to configure migrations for the application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/existing-database.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-Migrations\n```\n\n----------------------------------------\n\nTITLE: Executing a Migration Bundle with Connection String\nDESCRIPTION: This command executes an EF Core migration bundle, specifying a connection string to use when applying migrations to the database. It overrides the default connection string configured in the application.  The specified connection string must be valid and allow access to the target database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_15\n\nLANGUAGE: dotnetcli\nCODE:\n```\n.\\efbundle.exe --connection \"Data Source=(LocalDb)\\MSSQLLocalDB;Database=SixOhProduction\"\n```\n\n----------------------------------------\n\nTITLE: Insert Book Entity with Primitive Collections in EF Core\nDESCRIPTION: This code snippet shows how to insert a Book entity into Cosmos DB using EF Core, where the Book entity contains collections of primitive types (IList<string> and IDictionary<string, string>). It populates the Quotes and Notes collections and saves the entity to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BooksContext();\n\nvar book = new Book\n{\n    Title = \"How It Works: Incredible History\",\n    Quotes = new List<string>\n    {\n        \"Thomas (Tommy) Flowers was the British engineer behind the design of the Colossus computer.\",\n        \"Invented originally for Guinness, plastic widgets are nitrogen-filled spheres.\",\n        \"For 20 years after its introduction in 1979, the Walkman dominated the personal stereo market.\"\n    },\n    Notes = new Dictionary<string, string>\n    {\n        { \"121\", \"Fridges\" },\n        { \"144\", \"Peter Higgs\" },\n        { \"48\", \"Saint Mark's Basilica\" },\n        { \"36\", \"The Terracotta Army\" }\n    }\n};\n\ncontext.Add(book);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: SQL query example with VALUE modifier\nDESCRIPTION: This SQL query example demonstrates the new behavior in EF Core 9 where the `VALUE` modifier is added to return values directly without wrapping them in a JSON object. It improves performance and reduces payload size.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT VALUE c[\"City\"] FROM root c\n```\n\n----------------------------------------\n\nTITLE: Specify Required Property - C#\nDESCRIPTION: Illustrates using the `[Required]` data annotation to enforce that a property must have a value. This annotation impacts both client-side validation in MVC applications and the generated database schema, where the mapped column is set to non-nullable. The validation ensures that data exists for the specified property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Required]\n    public string Title { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Define PostTag Model with DateTime Payload (EF Core)\nDESCRIPTION: Defines the PostTag join entity with a DateTime payload property 'TaggedOn'.  This payload property represents when the tag was added to the post. It includes foreign keys to Post and Tag entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic class PostTag\n{\n    public int PostId { get; set; } // Foreign key to Post\n    public int TagId { get; set; } // Foreign key to Tag\n\n    public DateTime TaggedOn { get; set; } // Payload\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Database Operations to File XML (EF6.1+)\nDESCRIPTION: This XML snippet demonstrates how to register an interceptor that logs database operations to a file. It configures the DatabaseLogger interceptor, specifying the file name as a constructor parameter, allowing logging to a specific file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n  <interceptor type=\"System.Data.Entity.Infrastructure.Interception.DatabaseLogger, EntityFramework\">\n    <parameters>\n      <parameter value=\"C:\\Temp\\LogOutput.txt\"/>\n    </parameters>\n  </interceptor>\n</interceptors>\n```\n\n----------------------------------------\n\nTITLE: Complete Program.cs Listing with Entity Framework Model\nDESCRIPTION: This is a complete listing of the Program.cs file, including using statements, model definitions (Blog and Post), and the derived DbContext (BloggingContext). It shows the basic structure needed for Code First with Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Data.Entity;\n\nnamespace CodeFirstNewDatabaseSample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n        }\n    }\n\n    public class Blog\n    {\n        public int BlogId { get; set; }\n        public string Name { get; set; }\n\n        public virtual List<Post> Posts { get; set; }\n    }\n\n    public class Post\n    {\n        public int PostId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n        public int BlogId { get; set; }\n        public virtual Blog Blog { get; set; }\n    }\n\n    public class BloggingContext : DbContext\n    {\n        public DbSet<Blog> Blogs { get; set; }\n        public DbSet<Post> Posts { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Access GenerateViews and ComputeMappingHashValue Methods - C#\nDESCRIPTION: This code snippet shows the signatures of the GenerateViews and ComputeMappingHashValue methods available on the StorageMappingItemCollection. GenerateViews generates a dictionary of EntitySetBase to DbMappingView, while ComputeMappingHashValue computes a hash of the container mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/pre-generated-views.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic Dictionary<EntitySetBase, DbMappingView> GenerateViews(IList<EdmSchemaError> errors)\npublic string ComputeMappingHashValue()\n```\n\n----------------------------------------\n\nTITLE: SQL Update and Insert Statements for Generated Keys Scenario\nDESCRIPTION: These SQL statements are generated when updating a graph where a new `Post` entity is added (identified by a missing key). Existing `Blog` and `Post` entries are updated, and a new `Post` entry is inserted. The `SELECT \"Id\" FROM \"Posts\" WHERE changes() = 1 AND \"rowid\" = last_insert_rowid();` retrieves the newly generated key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p1='1' (DbType = String), @p0='.NET Blog' (Size = 9)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Blogs\" SET \"Name\" = @p0\nWHERE \"Id\" = @p1;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p3='1' (DbType = String), @p0='1' (DbType = String), @p1='Announcing the release of EF Core 5.0, a full featured cross-platform...' (Size = 72), @p2='Announcing the Release of EF Core 5.0' (Size = 37)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Posts\" SET \"BlogId\" = @p0, \"Content\" = @p1, \"Title\" = @p2\nWHERE \"Id\" = @p3;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p3='2' (DbType = String), @p0='1' (DbType = String), @p1='F# 5 is the latest version of F#, the functional programming language...' (Size = 72), @p2='Announcing F# 5' (Size = 15)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Posts\" SET \"BlogId\" = @p0, \"Content\" = @p1, \"Title\" = @p2\nWHERE \"Id\" = @p3;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='1' (DbType = String), @p1='.NET 5.0 includes many enhancements, including single file applications, more...' (Size = 80), @p2='Announcing .NET 5.0' (Size = 19)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Posts\" (\"BlogId\", \"Content\", \"Title\")\nVALUES (@p0, @p1, @p2);\nSELECT \"Id\"\nFROM \"Posts\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n```\n\n----------------------------------------\n\nTITLE: Custom Pluralization Hook Configuration in EF Core\nDESCRIPTION: This code shows how to hook into the `IPluralizer` service in EF Core to provide a custom pluralization implementation.  It involves creating a class that implements `IDesignTimeServices` and registering a custom `IPluralizer` implementation in the service collection.  This allows customizing how entity type names are singularized and DbSet names are pluralized during DbContext scaffolding.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyDesignTimeServices : IDesignTimeServices\n{\n    public void ConfigureDesignTimeServices(IServiceCollection services)\n    {\n        services.AddSingleton<IPluralizer, MyPluralizer>();\n    }\n}\n\npublic class MyPluralizer : IPluralizer\n{\n    public string Pluralize(string name)\n    {\n        return Inflector.Inflector.Pluralize(name) ?? name;\n    }\n\n    public string Singularize(string name)\n    {\n        return Inflector.Inflector.Singularize(name) ?? name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing LINQ with SqlQuery - SQLite\nDESCRIPTION: This code snippet demonstrates how to compose LINQ operators over a SQL query using SqlQuery in EF Core with SQLite. It returns the BlogId values which are above the average BlogId. The SQL query must name the output column Value for LINQ composition to work. Requires Entity Framework Core and a database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/sql-queries.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nvar overAverageIds = await context.Database\n    .SqlQuery<int>($\"\"\"\n                    SELECT \\\"BlogId\\\" AS \\\"Value\\\" FROM \\\"Blogs\\\"\n                    \"\"\")\n    .Where(id => id > context.Blogs.Average(b => b.BlogId))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Disable SQL RETURNING Clause in EF Core 8.0 for SQLite (Convention)\nDESCRIPTION: This code snippet demonstrates how to disable the usage of the \"RETURNING\" clause for all entities in EF Core 8.0 when using SQLite by creating a convention. This is useful if the table has AFTER triggers, is virtual, or uses older SQLite versions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.Conventions.Add(_ => new DoNotUseReturningClauseConvention());\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nclass DoNotUseReturningClauseConvention : IModelFinalizingConvention\n{\n    public void ProcessModelFinalizing(\n        IConventionModelBuilder modelBuilder,\n        IConventionContext<IConventionModelBuilder> context)\n    {\n        foreach (var entityType in modelBuilder.Metadata.GetEntityTypes())\n        {\n            entityType.UseSqlReturningClause(false);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Use RelationalDbFunctionsExtensions.Least - SQL\nDESCRIPTION: This snippet shows the SQL generated when using RelationalDbFunctionsExtensions.Least. It uses the LEAST function to find the minimum between the counts of Counts, DaysVisited, and Beers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT LEAST((\n    SELECT COUNT(*)\n    FROM OPENJSON([p].[Counts]) AS [c]), (\n    SELECT COUNT(*)\n    FROM OPENJSON([p].[DaysVisited]) AS [d]), (\n    SELECT COUNT(*)\n    FROM OPENJSON([p].[Beers]) AS [b]))\nFROM [Pubs] AS [p]\n```\n\n----------------------------------------\n\nTITLE: Linking EDMX Files in .csproj - C#\nDESCRIPTION: Demonstrates how to link an EDMX file and generated classes from a .NET Framework project into a .NET Core or .NET Standard project. This allows using the EF designer in the .NET Framework project while utilizing the model in the .NET Core/Standard project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/index.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <EntityDeploy Include=\"..\\EdmxDesignHost\\Entities.edmx\" Link=\"Model\\Entities.edmx\" />\n  <Compile Include=\"..\\EdmxDesignHost\\Entities.Context.cs\" Link=\"Model\\Entities.Context.cs\" />\n  <Compile Include=\"..\\EdmxDesignHost\\Thing.cs\" Link=\"Model\\Thing.cs\" />\n  <Compile Include=\"..\\EdmxDesignHost\\Person.cs\" Link=\"Model\\Person.cs\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: EF.Functions.CoalesceUndefined .NET to SQL translation\nDESCRIPTION: Illustrates how EF.Functions.CoalesceUndefined(x, y) in .NET maps to x ?? y in SQL when working with Entity Framework Core and Cosmos DB. It coalesces `undefined`, not `null`. EF Core 9.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_43\n\nLANGUAGE: .NET\nCODE:\n```\nEF.Functions.CoalesceUndefined(x, y)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[x ?? y](/azure/cosmos-db/nosql/query/ternary-coalesce-operators#coalesce-operator)\n```\n\n----------------------------------------\n\nTITLE: Defining Table-Per-Type (TPT) Mapping (C#)\nDESCRIPTION: Shows how to define a model with inheritance where each type is mapped to its own database table (TPT).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class Animal\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class Cat : Animal\n{\n    public string EducationLevel { get; set; }\n}\n\npublic class Dog : Animal\n{\n    public string FavoriteToy { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext DbSet Properties C#\nDESCRIPTION: Defines DbSet properties for Customer and CustomerDensity within a DbContext class.  These DbSets allow for querying of the customer data and the customer density view within the database context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\npublic DbSet<Customer> Customers { get; set; }\npublic DbSet<CustomerDensity> CustomerDensities { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Registering an Interceptor in EF Core (C#)\nDESCRIPTION: Registers a custom interceptor, `TaggedQueryCommandInterceptor`, with the DbContext. This is done within the `OnConfiguring` method of a DbContext derived class. The interceptor modifies SQL commands before they are executed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.AddInterceptors(new TaggedQueryCommandInterceptor());\n```\n\n----------------------------------------\n\nTITLE: Installing SpatiaLite on Debian/Ubuntu and macOS\nDESCRIPTION: These commands install the `libsqlite3-mod-spatialite` package on Debian/Ubuntu and `libspatialite` on macOS using their respective package managers. This allows the SQLite database to handle spatial data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/spatial.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Debian/Ubuntu\napt-get install libsqlite3-mod-spatialite\n\n# macOS\nbrew install libspatialite\n```\n\n----------------------------------------\n\nTITLE: Generate SQL Script - Basic Usage - .NET Core CLI\nDESCRIPTION: This command generates a SQL script from a blank database to the latest migration using the .NET Core CLI. No specific 'from' or 'to' migrations are specified, implying a migration from an empty database state.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_0\n\nLANGUAGE: .NET Core CLI\nCODE:\n```\ndotnet ef migrations script\n```\n\n----------------------------------------\n\nTITLE: Fetch Next Page with Continuation Token\nDESCRIPTION: This C# snippet shows how to fetch the next page of results using a continuation token obtained from a previous `CosmosPage`. This allows for efficient resumption of the query at a later point.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\nvar nextPage = await context.Sessions.OrderBy(s => s.Id).ToPageAsync(10, continuationToken);\n```\n\n----------------------------------------\n\nTITLE: Disable Default Table Mapping - C#\nDESCRIPTION: This code snippet shows how to explicitly disable the default table mapping for an entity in the model configuration. This is useful when the entity is mapped to a table-valued function and the default table mapping is no longer desired.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<MyEntity>().ToTable((string)null);\n```\n\n----------------------------------------\n\nTITLE: SQL Update Statement with Concurrency Check - SQL\nDESCRIPTION: Shows the SQL UPDATE statement generated by EF Core when a concurrency token is configured. The WHERE clause includes both the primary key (PersonId) and the concurrency token (Version) to prevent concurrent updates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE [People] SET [FirstName] = @p0\nWHERE [PersonId] = @p1 AND [Version] = @p2;\n```\n\n----------------------------------------\n\nTITLE: Lookup Tracked Entity by Alternate Key (EF Core)\nDESCRIPTION: This code demonstrates how to lookup a tracked entity by its alternate key using the `FindEntry` method on the `LocalView`. The name of the property representing the alternate key must be specified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nvar siteEntry = context.Websites.Local.FindEntry(nameof(Website.Uri), new Uri(\"https://www.bricelam.net/\"))!;\n```\n\n----------------------------------------\n\nTITLE: Override Byte Array Comparer\nDESCRIPTION: This code snippet demonstrates how to override the default comparer for a byte array property.  The default comparer only compares references. This code uses a custom comparer that compares the byte sequences.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-comparers.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nentity.Property(e => e.SomeBytes)\n    .Metadata\n    .SetValueComparer(\n        new ValueComparer<byte[]>(\n            (v1, v2) => StructuralComparisons.StructuralEqualityComparer.Equals(v1, v2),\n            v => StructuralComparisons.StructuralEqualityComparer.GetHashCode(v),\n            v => v.ToArray()));\n```\n\n----------------------------------------\n\nTITLE: Enum to String Conversion with Fluent API\nDESCRIPTION: This example shows how to configure enum to string conversion using Fluent API by setting the column type. Specifying a string column type like \"nvarchar(24)\" triggers EF Core's built-in enum to string conversion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<Rider2>()\n    .Property(e => e.Mount)\n    .HasColumnType(\"nvarchar(24)\");\n```\n\n----------------------------------------\n\nTITLE: Using UseSqlServer with connection string C#\nDESCRIPTION: Shows how to pass a connection string, retrieved from configuration, to the `UseSqlServer` method when configuring the DbContext.  It is common practice to load configuration from a configuration file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_179\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddDbContext<BloggingContext>(options =>\n    options.UseSqlServer(Configuration.GetConnectionString(\"BloggingDatabase\")));\n```\n\n----------------------------------------\n\nTITLE: Navigation Id FK Naming Convention in C#\nDESCRIPTION: This code snippet illustrates the `<navigation property name>Id` naming convention. `Post.TheBlogID` is identified as the foreign key property due to this naming pattern.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Key { get; set; }\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n    public int? TheBlogID { get; set; }\n    public Blog? TheBlog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many with All Navigations C#\nDESCRIPTION: Configures the many-to-many relationship using UsingEntity with the PostTag join entity, including navigations to and from the join entity. This is the default configuration when navigations are present.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>();\n}\n```\n\n----------------------------------------\n\nTITLE: Removing the Last Migration using Visual Studio Package Manager Console\nDESCRIPTION: This command removes the last added migration from the project using the Visual Studio Package Manager Console. It is used to revert the latest changes before applying them to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-Migration\n```\n\n----------------------------------------\n\nTITLE: Nullable Foreign Key Property Definition in C#\nDESCRIPTION: This C# code snippet demonstrates defining an optional relationship using a nullable foreign key property `BlogId` in the `Post` entity. This allows the foreign key to be set to null when the related blog is deleted or the relationship is severed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic int? BlogId { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Scaffold EF Core Model using Package Manager Console (PowerShell)\nDESCRIPTION: This command uses the `Scaffold-DbContext` cmdlet to generate a new code-based EF Core model from an existing database. It requires the connection string to the database and the name of the database provider. This is used to reverse engineer the database schema into C# entity classes and a DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/efcore-and-ef6/porting/port-edmx.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nScaffold-DbContext \"<connection string>\" <database provider name>\n```\n\n----------------------------------------\n\nTITLE: Get Column Base Name Example - C#\nDESCRIPTION: This code snippet shows how to obtain the table name for a property when the entity type is only ever mapped to a single table using `GetColumnBaseName`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar columnName = property.GetColumnBaseName();\n```\n\n----------------------------------------\n\nTITLE: Define Keyless Entity Type Class (C#)\nDESCRIPTION: This snippet defines the C# class `MostPopularBlogs` that represents the structure of the data returned by the database view. This class is decorated with `[Keyless]` attribute and contains properties to hold the blog name and post count.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keyless-entity-types.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace KeylessEntityTypes\n{\n    [Keyless]\n    public class MostPopularBlogs\n    {\n        public string BlogName { get; set; }\n        public int PostCount { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Scaffolding Templates for Boolean Columns\nDESCRIPTION: This code snippet shows how to modify the scaffolding templates to revert to the previous behavior of scaffolding non-nullable `bool` columns with a database default constraint as nullable `bool?` properties.  It involves editing the EntityType.t4 file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n#>\n        var propertyClrType = property.ClrType != typeof(bool)\n                              || (property.GetDefaultValueSql() == null && property.GetDefaultValue() != null)\n            ? property.ClrType\n            : typeof(bool?);\n#>\n    public <#= code.Reference(propertyClrType) #><#= needsNullable ? \"?\" : \"\" #> <#= property.Name #> { get; set; }<#= needsInitializer ? \" = null!;\" : \"\" #>\n<#\n<#\n```\n\n----------------------------------------\n\nTITLE: Identity Resolution Exception Example - C#\nDESCRIPTION: This code demonstrates the exception thrown when attempting to track two different instances of the same entity (Blog) with the same primary key value. It illustrates the core concept of identity resolution in EF Core, where only one instance of an entity with a given primary key can be tracked by a DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\nvar blogA = context.Blogs.Single(e => e.Id == 1);\nvar blogB = new Blog { Id = 1, Name = \".NET Blog (All new!)\" };\n\ntry\n{\n    context.Update(blogB); // This will throw\n}\ncatch (Exception e)\n{\n    Console.WriteLine(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Many-to-Many with Named Foreign Keys and Navigations (C#)\nDESCRIPTION: Configures a many-to-many relationship between Post and Tag entities using the UsingEntity method to specify the PostTag join entity. It configures the foreign keys for Post and Tag in the PostTag entity using HasForeignKey and WithMany to define relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(e => e.Tags)\n        .WithMany(e => e.Posts)\n        .UsingEntity<PostTag>(\n            r => r.HasOne<Tag>(e => e.Tag).WithMany(e => e.PostTags).HasForeignKey(e => e.TagForeignKey),\n            l => l.HasOne<Post>(e => e.Post).WithMany(e => e.PostTags).HasForeignKey(e => e.PostForeignKey));\n}\n```\n\n----------------------------------------\n\nTITLE: TPT Database Schema - SQL\nDESCRIPTION: This SQL script shows the database schema created when using Table-per-Type (TPT) inheritance mapping in EF Core. It includes the `Blogs` and `RssBlogs` tables with a foreign key relationship between them.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Blogs] (\n    [BlogId] int NOT NULL IDENTITY,\n    [Url] nvarchar(max) NULL,\n    CONSTRAINT [PK_Blogs] PRIMARY KEY ([BlogId])\n);\n\nCREATE TABLE [RssBlogs] (\n    [BlogId] int NOT NULL,\n    [RssUrl] nvarchar(max) NULL,\n    CONSTRAINT [PK_RssBlogs] PRIMARY KEY ([BlogId]),\n    CONSTRAINT [FK_RssBlogs_Blogs_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [Blogs] ([BlogId]) ON DELETE NO ACTION\n);\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Bootstrap Stylesheet\nDESCRIPTION: This snippet shows how to include the Open Iconic stylesheet specifically designed for Bootstrap.  Including this CSS file will allow you to use Open Iconic icons with Bootstrap's styling conventions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Single Line Logging (C#)\nDESCRIPTION: This C# snippet demonstrates how to configure EF Core logging to produce single-line log messages. It utilizes `DbContextLoggerOptions.SingleLine` in combination with `DbContextLoggerOptions.DefaultWithLocalTime` when logging to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(\n        Console.WriteLine,\n        LogLevel.Debug,\n        DbContextLoggerOptions.DefaultWithLocalTime | DbContextLoggerOptions.SingleLine);\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Version - C#\nDESCRIPTION: Configures the 'Timestamp' property of the 'OfficeAssignment' entity as a row version using the `IsRowVersion()` method. Setting a property as a row version automatically configures it as an optimistic concurrency token.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<OfficeAssignment>()\n    .Property(t => t.Timestamp)\n    .IsRowVersion();\n```\n\n----------------------------------------\n\nTITLE: Install SQLite Provider via PowerShell\nDESCRIPTION: This command installs the Microsoft.EntityFrameworkCore.Sqlite NuGet package into your project using the PowerShell Package Manager Console in Visual Studio. This package enables SQLite support for Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/index.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package Microsoft.EntityFrameworkCore.Sqlite\n```\n\n----------------------------------------\n\nTITLE: Updating a Document - C#\nDESCRIPTION: This code snippet shows the code for updating a document. It retrieves the existing document, updates its properties, and saves the changes. Concurrency is handled using the `ETag` property, which is persisted with the loaded version of the entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task UpdateDocumentAsync(Document document)\n{\n    ArgumentNullException.ThrowIfNull(document);\n\n    var original = await _context.Documents.FindAsync(document.Title, document.DocumentId);\n\n    if (original == null)\n    {\n        throw new ArgumentException(\"Can't find document with id \" + document.DocumentId, nameof(document));\n    }\n\n    await SyncTagsAsync(document, original);\n\n    _context.Entry(original).CurrentValues.SetValues(document);\n    await _context.SaveChangesAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading Proxies with AddDbContext\nDESCRIPTION: This code snippet demonstrates enabling lazy loading proxies while registering the `DbContext` with the dependency injection container using `AddDbContext`.  It uses `UseLazyLoadingProxies()` to enable lazy loading in conjunction with `UseSqlServer()` to configure the database connection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/lazy.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n.AddDbContext<BloggingContext>(\n    b => b.UseLazyLoadingProxies()\n          .UseSqlServer(myConnectionString));\n```\n\n----------------------------------------\n\nTITLE: Comparing Model from Snapshot with Model from Context in EF Core\nDESCRIPTION: This code snippet demonstrates how to compare the model from a snapshot with the model from the context in Entity Framework Core. It uses the `GetService` method to retrieve dependencies and then uses `TypeMappingConvention` and `RelationalModelConvention` to process the model. Finally, it uses `IMigrationsModelDiffer` to check for differences between the two models.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar dependencies = context.GetService<ProviderConventionSetBuilderDependencies>();\nvar relationalDependencies = context.GetService<RelationalConventionSetBuilderDependencies>();\n\nvar typeMappingConvention = new TypeMappingConvention(dependencies);\ntypeMappingConvention.ProcessModelFinalizing(((IConventionModel)modelSnapshot.Model).Builder, null);\n\nvar relationalModelConvention = new RelationalModelConvention(dependencies, relationalDependencies);\nvar sourceModel = relationalModelConvention.ProcessModelFinalized(snapshot.Model);\n\nvar modelDiffer = context.GetService<IMigrationsModelDiffer>();\nvar hasDifferences = modelDiffer.HasDifferences(\n    ((IMutableModel)sourceModel).FinalizeModel().GetRelationalModel(),\n    context.Model.GetRelationalModel());\n```\n\n----------------------------------------\n\nTITLE: Inefficient Employee Salary Update in EF Core\nDESCRIPTION: This C# code demonstrates an inefficient way to update employee salaries in EF Core. It loads all employees, updates their salaries in memory, and then saves the changes, resulting in multiple roundtrips and change tracking overhead.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-updating.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var employee in context.Employees)\n{\n    employee.Salary += 1000;\n}\nawait context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Snapshot Change Tracking Example 1 - C#\nDESCRIPTION: This C# code demonstrates how changes made directly to entity properties and navigation properties are not automatically detected by EF Core. It shows the state of the change tracker before and after calling `DetectChanges()` to illustrate the detection process.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\nvar blog = context.Blogs.Include(e => e.Posts).First(e => e.Name == \".NET Blog\");\n\n// Change a property value\nblog.Name = \".NET Blog (Updated!)\";\n\n// Add a new entity to a navigation\nblog.Posts.Add(new Post\n{\n    Title = \"What’s next for System.Text.Json?\",\n    Content = \".NET 5.0 was released recently and has come with many...\"\n});\n\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\ncontext.ChangeTracker.DetectChanges();\nConsole.WriteLine(context.ChangeTracker.DebugView.LongView);\n```\n\n----------------------------------------\n\nTITLE: Discovering One-to-One Relationship in EF Core (C#)\nDESCRIPTION: This code illustrates the discovery of a one-to-one relationship in EF Core. The `Blog.Author` and `Author.Blog` reference navigations are paired, resulting in the configuration of a single, one-to-one relationship between the `Blog` and `Author` entity types. The presence of both navigations allows EF Core to automatically infer the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public Author? Author { get; set; }\n}\n\npublic class Author\n{\n    public int Id { get; set; }\n    public int? BlogId { get; set; }\n    public Blog? Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Database Null Checks C#\nDESCRIPTION: This code demonstrates how to disable null checks for required properties in the in-memory database provider. By default, the in-memory database now validates that required properties do not contain nulls. The `EnableNullChecks(false)` method is used to revert to the previous behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .UseInMemoryDatabase(\"MyDatabase\", b => b.EnableNullChecks(false));\n}\n```\n\n----------------------------------------\n\nTITLE: Update Relationship State in C# (Independent Association)\nDESCRIPTION: This code snippet illustrates how to update a relationship, involving deleting the old relationship and adding the new one when working with independent associations in N-Tier applications. It shows how to update the relationship between a `course` and a new `instructor` by first adding the new relationship and then deleting the old relationship with the `oldInstructor`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/relationships.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n((IObjectContextAdapter)context).ObjectContext.\n    ObjectStateManager.\n    ChangeRelationshipState(course, oldInstructor, c => c.Instructor, EntityState.Deleted);\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of Substring Query\nDESCRIPTION: Illustrates the SQL Server translation of the LINQ query using string.Substring with one argument. The SQL uses the SUBSTRING function to extract a substring from the Name column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_108\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP(1) SUBSTRING([c].[Name], 3 + 1, LEN([c].[Name])) AS [Name]\nFROM [Customers] AS [c]\nWHERE SUBSTRING([c].[Name], 3 + 1, LEN([c].[Name])) = N'hur'\n```\n\n----------------------------------------\n\nTITLE: Defining the Pub Entity\nDESCRIPTION: This code snippet defines the `Pub` entity, which includes a string array `Beers` to represent the beer brands available and a list of `DateOnly` objects `DaysVisited` to track visit dates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\npublic class Pub\n{\n    public Pub(string name, string[] beers)\n    {\n        Name = name;\n        Beers = beers;\n    }\n\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string[] Beers { get; set; }\n    public List<DateOnly> DaysVisited { get; private set; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ComplexType as Entity Property in CSDL\nDESCRIPTION: This example shows how to use the previously defined 'Address' complex type as a property of an entity type named 'Publisher'. The 'Type' attribute specifies the complex type to use.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Publisher\">\n       <Key>\n         <PropertyRef Name=\"Id\" />\n       </Key>\n       <Property Type=\"Int32\" Name=\"Id\" Nullable=\"false\" />\n       <Property Type=\"String\" Name=\"Name\" Nullable=\"false\" />\n       <Property Type=\"BooksModel.Address\" Name=\"Address\" Nullable=\"false\" />\n       <NavigationProperty Name=\"Books\" Relationship=\"BooksModel.PublishedBy\"\n                           FromRole=\"Publisher\" ToRole=\"Book\" />\n     </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Char Value Converter in EF Core\nDESCRIPTION: This C# code configures a value converter for a Char property in EF Core to maintain the previous behavior of storing Chars as INTEGERs in SQLite. It defines how to convert a char to a long (integer) for storage and back to a char when reading from the database. The `HasConversion` method is used within the model builder.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<MyEntity>()\n    .Property(e => e.CharProperty)\n    .HasConversion(\n        c => (long)c,\n        i => (char)i);\n```\n\n----------------------------------------\n\nTITLE: Negated Contains - SQL (EF8)\nDESCRIPTION: This SQL query demonstrates the output generated by EF Core 8. The `NOT (instr(...) > 0)` construct represents a more complex negation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_62\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"p\".\"Content\"\nFROM \"Posts\" AS \"p\"\nWHERE NOT (instr(\"p\".\"Content\", 'Announcing') > 0)\n```\n\n----------------------------------------\n\nTITLE: Insert and Delete Stored Procedures for Many-to-Many Relationship (SQL)\nDESCRIPTION: These SQL stored procedures are used to insert and delete records in the join table (Post_Tags) for a many-to-many relationship between Post and Tag entities. They take the key values of both entities as parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE [dbo].[PostTag_Insert]  \n  @Post_PostId int,\n  @Tag_TagId int\nAS\n  INSERT INTO [dbo].[Post_Tags] (Post_PostId, Tag_TagId)   \n  VALUES (@Post_PostId, @Tag_TagId)\nCREATE PROCEDURE [dbo].[PostTag_Delete]  \n  @Post_PostId int,\n  @Tag_TagId int\nAS\n  DELETE FROM [dbo].[Post_Tags]    \n  WHERE Post_PostId = @Post_PostId AND Tag_TagId = @Tag_TagId\n```\n\n----------------------------------------\n\nTITLE: Finding All Ancestors - C#\nDESCRIPTION: This code snippet finds all ancestors of a halfling, given the halfling's name. It uses the `IsDescendantOf` method to check if an ancestor is a descendant of the specified halfling. The result is ordered by level in descending order.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nIQueryable<Halfling> FindAllAncestors(string name)\n            => context.Halflings.Where(\n                    ancestor => context.Halflings\n                        .Single(\n                            descendent =>\n                                descendent.Name == name\n                                && ancestor.Id != descendent.Id)\n                        .PathFromPatriarch.IsDescendantOf(ancestor.PathFromPatriarch))\n                .OrderByDescending(ancestor => ancestor.PathFromPatriarch.GetLevel());\n```\n\n----------------------------------------\n\nTITLE: Add EntitySetMapping - XML\nDESCRIPTION: This snippet demonstrates the EntitySetMapping added to the mapping section of the .edmx file. It maps the conceptual entity type GradeReport to the storage entity set GradeReport. It specifies the column mappings between the conceptual model properties and the storage model columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/defining-query.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n    <EntitySetMapping Name=\"GradeReports\">\n      <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel.GradeReport)\">\n        <MappingFragment StoreEntitySet=\"GradeReport\">\n          <ScalarProperty Name=\"LastName\" ColumnName=\"LastName\" />\n          <ScalarProperty Name=\"FirstName\" ColumnName=\"FirstName\" />\n          <ScalarProperty Name=\"Grade\" ColumnName=\"Grade\" />\n          <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding DbContext using Visual Studio PMC\nDESCRIPTION: Scaffolds a DbContext using the EF Core tools in the Visual Studio Package Manager Console (PMC), referencing a connection string stored in user secrets or configuration with the alias 'ConnectionStrings:YourDatabaseAlias'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-strings.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext 'Name=ConnectionStrings:YourDatabaseAlias' Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: SQL for Aggregate Over Subquery\nDESCRIPTION: This SQL query shows the SQL generated by EF Core 9 for an aggregate over subquery, utilizing `OUTER APPLY` for SQL Server.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT AVG([s].[Rating])\nFROM [Blogs] AS [b]\nOUTER APPLY (\n    SELECT TOP(1) [p].[Rating]\n    FROM [Posts] AS [p]\n    WHERE [b].[Id] = [p].[BlogId]\n    ORDER BY [p].[PublishedOn] DESC\n) AS [s]\nGROUP BY [b].[Language]\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Default Connection Factory in Entity Framework\nDESCRIPTION: This snippet shows how to specify a custom default connection factory in the entityFramework configuration section. The type attribute contains the assembly qualified name of the factory class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<entityFramework>\n  <defaultConnectionFactory type=\"MyNamespace.MyCustomFactory, MyAssembly\"/>\n</entityFramework>\n```\n\n----------------------------------------\n\nTITLE: Installing EF Core Tools Globally (.NET CLI)\nDESCRIPTION: This command installs the Entity Framework Core tools as a global tool using the .NET CLI. Installing the tools globally makes them available from any directory on the system.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install --global dotnet-ef\n```\n\n----------------------------------------\n\nTITLE: SQLite Index Creation Example\nDESCRIPTION: This SQL code shows how a simple index is created on the BlogId column of the Post table in SQLite. This is the default behavior when a one-to-many relationship exists.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX \"IX_Post_BlogId\" ON \"Post\" (\"BlogId\");\n```\n\n----------------------------------------\n\nTITLE: Marking a Class as ComplexType with C#\nDESCRIPTION: This code snippet demonstrates how to mark a class as a complex type using the `ComplexType` attribute. This allows Entity Framework to track it as part of another entity, even though it doesn't have its own key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n    [ComplexType]\n    public class BlogDetails\n    {\n        public DateTime? DateCreated { get; set; }\n\n        [MaxLength(250)]\n        public string Description { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Specify MaxLength and MinLength - C#\nDESCRIPTION: Shows how to use the `[MaxLength]` and `[MinLength]` data annotations to define length constraints for a string property.  These annotations are used for client-side and server-side validation, and also affect the database schema by setting the column's maximum length.  The ErrorMessage property allows for custom validation error messages.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[MaxLength(10),MinLength(5)]\n    public string BloggerName { get; set; }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[MaxLength(10, ErrorMessage=\"BloggerName must be 10 characters or less\"),MinLength(5)]\n    public string BloggerName { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Composite Key Configuration C#\nDESCRIPTION: Configures a composite key for the OrderLine entity within the OnModelCreating method. The order of key parts (OrderId, ProductId) is crucial for subsequent Find operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<OrderLine>()\n        .HasKey(e => new { e.OrderId, e.ProductId });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Char Column to TEXT Format in SQLite\nDESCRIPTION: This SQL script migrates an existing SQLite database where Char values are stored as INTEGERs to the new format where Chars are stored as TEXT. It uses the `char()` function to convert the integer representation of the character to its corresponding TEXT value. The `WHERE` clause ensures that only columns of type 'integer' are updated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE MyTable\nSET CharColumn = char(CharColumn)\nWHERE typeof(CharColumn) = 'integer';\n```\n\n----------------------------------------\n\nTITLE: Table-per-Type (TPT) Metadata Configuration - C#\nDESCRIPTION: This code snippet shows how to retrieve the column name for a specific table when using bulk configuration in Table-per-Type (TPT) inheritance. It uses <xref:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnName(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)> to get the column name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().ToTable(\"Blogs\");\n    modelBuilder.Entity<RssBlog>().ToTable(\"RssBlogs\");\n\n    var urlColumnName = modelBuilder.Entity<RssBlog>().Property(b => b.Url)\n        .Metadata.GetColumnName(StoreObjectIdentifier.Table(\"RssBlogs\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Optimize EF Query by Breaking Down Include Statements C#\nDESCRIPTION: This C# code snippet demonstrates how to improve Entity Framework query performance by breaking down a single query with multiple Include statements into a sequence of smaller subqueries. This approach reduces the size of each individual query payload and can alleviate bandwidth issues, especially when dealing with one-to-many relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nusing (NorthwindEntities context = new NorthwindEntities())\n{\n    var customers = from c in context.Customers.Include(c => c.Orders)\n                    where c.LastName.StartsWith(lastNameParameter)\n                    select c;\n\n    foreach (Customer customer in customers)\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create TPC Tables with SQL Server\nDESCRIPTION: This SQL code creates separate tables for each concrete type in the animal hierarchy (Cats, Dogs, FarmAnimals, Humans). Each table includes columns for all properties defined in the concrete class and its base classes. It also utilizes a sequence (AnimalSequence) for generating unique primary key values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Cats] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [FoodId] uniqueidentifier NULL,\n    [Vet] nvarchar(max) NULL,\n    [EducationLevel] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Cats] PRIMARY KEY ([Id]));\n\nCREATE TABLE [Dogs] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [FoodId] uniqueidentifier NULL,\n    [Vet] nvarchar(max) NULL,\n    [FavoriteToy] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Dogs] PRIMARY KEY ([Id]));\n\nCREATE TABLE [FarmAnimals] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [FoodId] uniqueidentifier NULL,\n    [Value] decimal(18,2) NOT NULL,\n    [Species] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_FarmAnimals] PRIMARY KEY ([Id]));\n\nCREATE TABLE [Humans] (\n    [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [AnimalSequence]),\n    [Name] nvarchar(max) NOT NULL,\n    [FoodId] uniqueidentifier NULL,\n    [FavoriteAnimalId] int NULL,\n    CONSTRAINT [PK_Humans] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap\nDESCRIPTION: This snippet demonstrates how to use Open Iconic icons with Bootstrap by leveraging specific classes. It uses the `<span>` tag with `oi` classes for correct rendering.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Generate Idempotent SQL Script - PowerShell\nDESCRIPTION: This command generates an idempotent SQL script using PowerShell.  The `-Idempotent` flag ensures that the generated script only applies migrations that haven't been applied yet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nScript-Migration -Idempotent\n```\n\n----------------------------------------\n\nTITLE: stringValue.LastOrDefault .NET to SQL translation\nDESCRIPTION: Demonstrates how stringValue.LastOrDefault() in .NET translates to RIGHT(@stringValue, 1) in SQL when employed with Entity Framework Core and Cosmos DB. It retrieves the last character of a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_29\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.LastOrDefault()\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[RIGHT(@stringValue, 1)](/azure/cosmos-db/nosql/query/right)\n```\n\n----------------------------------------\n\nTITLE: Insert Categories SQL\nDESCRIPTION: SQL MERGE statement to insert or update Categories in a SQL database. It uses a table-valued constructor to define the input data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_183\n\nLANGUAGE: SQL\nCODE:\n```\nMERGE [Categories] USING (\nVALUES (@p0, 0),\n(@p1, 1)) AS i ([Name], _Position) ON 1=0\nWHEN NOT MATCHED THEN\nINSERT ([Name])\nVALUES (i.[Name])\nOUTPUT INSERTED.[Id], i._Position;\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Levels - C#\nDESCRIPTION: This code snippet shows how to configure warning levels in EF Core using `DbContextOptionsBuilder`. Specifically, it configures the application to log a warning when a pathological number of internal service providers are created, reverting the default behavior in EF Core 3.0, where this is treated as an error.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .ConfigureWarnings(w => w.Log(CoreEventId.ManyServiceProvidersCreatedWarning));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IObjectSet Interface in C#\nDESCRIPTION: This code defines the IObjectSet<TEntity> interface which extends IQueryable and IEnumerable interfaces. It represents a repository-like abstraction for a collection of entities. The interface provides methods to Add, Attach, Delete, and Detach objects from the simulated collection, exposing additional capabilities of the EF4 API.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n    public interface IObjectSet<TEntity> :\n    \t\t\t\t\t\t\t\t IQueryable<TEntity>,\n    \t\t\t\t\t\t\t\t IEnumerable<TEntity>,\n    \t\t\t\t\t\t\t\t IQueryable,\n    \t\t\t\t\t\t\t\t IEnumerable\n    \t\t\t\t\t\t\t\t where TEntity : class\n    {\n    \tvoid AddObject(TEntity entity);\n    \tvoid Attach(TEntity entity);\n    \tvoid DeleteObject(TEntity entity);\n    \tvoid Detach(TEntity entity);\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing EmployeeController Create Action (POST) in C#\nDESCRIPTION: This test class verifies the behavior of the EmployeeController's Create action when handling an HTTP POST request. It confirms that a new employee is added to the repository and that the unit of work is committed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\n    public class EmployeeControllerCreateActionPostTests\n    \t\t\t\t\t\t : EmployeeControllerTestBase {\n    \t[TestMethod]\n    \tpublic void ShouldAddNewEmployeeToRepository() {\n    \t\t_controller.Create(_newEmployee);\n    \t\tAssert.IsTrue(_repository.Contains(_newEmployee));\n    \t}\n    \t[TestMethod]\n    \tpublic void ShouldCommitUnitOfWork() {\n    \t\t_controller.Create(_newEmployee);\n    \t\tAssert.IsTrue(_unitOfWork.Committed);\n    \t}\n    \t// ... more tests\n\n    \tEmployee _newEmployee = new Employee() {\n    \t\tName = \"NEW EMPLOYEE\",\n    \t\tHireDate = new System.DateTime(2010, 1, 1)\n    \t};\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting a Default SQL Value with Fluent API in EF Core\nDESCRIPTION: This C# code snippet configures a SQL fragment to calculate the default value for a property using the Fluent API in EF Core. The HasDefaultValueSql method allows specifying a SQL expression that will be evaluated by the database to generate the default value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .Property(b => b.Created)\n    .HasDefaultValueSql(\"GETDATE()\");\n```\n\n----------------------------------------\n\nTITLE: Test AddBlog Method with Mocked Context (C#)\nDESCRIPTION: Tests the AddBlog method of the BlogService using Moq to create a mocked BloggingContext and DbSet<Blog>. Verifies that the Add method on the mocked DbSet and SaveChanges method on the mocked context are called exactly once when adding a new blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/mocking.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Moq;\nusing System.Data.Entity;\n\nnamespace TestingDemo\n{\n    [TestClass]\n    public class NonQueryTests\n    {\n        [TestMethod]\n        public void CreateBlog_saves_a_blog_via_context()\n        {\n            var mockSet = new Mock<DbSet<Blog>>();\n\n            var mockContext = new Mock<BloggingContext>();\n            mockContext.Setup(m => m.Blogs).Returns(mockSet.Object);\n\n            var service = new BlogService(mockContext.Object);\n            service.AddBlog(\"ADO.NET Blog\", \"http://blogs.msdn.com/adonet\");\n\n            mockSet.Verify(m => m.Add(It.IsAny<Blog>()), Times.Once());\n            mockContext.Verify(m => m.SaveChanges(), Times.Once());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding Data for Blog and Post Entities in C#\nDESCRIPTION: This code snippet seeds the database with sample `Blog` and `Post` data, including blogs with URLs containing \"fish\" and posts associated with them. This data is used to demonstrate the effect of global query filters on related entities, especially when required navigation is involved.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Blogs.AddRange(\n    new Blog { BlogId = 1, Name = \"Blog1\", Url = \"http://sample.com/blog1\" },\n    new Blog { BlogId = 2, Name = \"Blog2\", Url = \"http://sample.com/blog2\" },\n    new Blog { BlogId = 3, Name = \"Blog3\", Url = \"http://sample.com/fish\" });\n\ncontext.Posts.AddRange(\n    new Post { PostId = 1, BlogId = 1, Title = \"Post1\", Content = \"Content1\" },\n    new Post { PostId = 2, BlogId = 1, Title = \"Post2\", Content = \"Content2\" },\n    new Post { PostId = 3, BlogId = 2, Title = \"Post3\", Content = \"Content3\" },\n    new Post { PostId = 4, BlogId = 2, Title = \"Post4\", Content = \"Content4\" },\n    new Post { PostId = 5, BlogId = 3, Title = \"Post5\", Content = \"Content5\" },\n    new Post { PostId = 6, BlogId = 3, Title = \"Post6\", Content = \"Content6\" });\n\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Non-Shadow Discriminator Configuration - C#\nDESCRIPTION: This example demonstrates mapping the discriminator to a regular .NET property in the entity class.  This allows direct access and manipulation of the discriminator value within the entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Discriminator { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Migrations using Visual Studio Package Manager Console\nDESCRIPTION: This command lists all existing migrations in the project using the Visual Studio Package Manager Console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/managing.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Migration\n```\n\n----------------------------------------\n\nTITLE: Finding Common Ancestor - SQL\nDESCRIPTION: The generated SQL query finds the common ancestor of two halflings. It finds Halflings that are ancestors of both the first and second halfling provided. The results are ordered by level in descending order, and only the top 1 result is returned.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_80\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP(1) [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE @__first_PathFromPatriarch_0.IsDescendantOf([h].[PathFromPatriarch]) = CAST(1 AS bit)\n  AND @__second_PathFromPatriarch_1.IsDescendantOf([h].[PathFromPatriarch]) = CAST(1 AS bit)\nORDER BY [h].[PathFromPatriarch].GetLevel() DESC\n```\n\n----------------------------------------\n\nTITLE: Finding All Descendents - C#\nDESCRIPTION: This code snippet finds all descendants of a halfling, given the halfling's name. It uses the `IsDescendantOf` method to check if a descendant is a descendant of the specified halfling. The result is ordered by level.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nIQueryable<Halfling> FindAllDescendents(string name)\n            => context.Halflings.Where(\n                    descendent => descendent.PathFromPatriarch.IsDescendantOf(\n                        context.Halflings\n                            .Single(\n                                ancestor =>\n                                    ancestor.Name == name\n                                    && descendent.Id != ancestor.Id)\n                            .PathFromPatriarch))\n                .OrderBy(descendent => descendent.PathFromPatriarch.GetLevel());\n```\n\n----------------------------------------\n\nTITLE: Use TPH Mapping Strategy - C#\nDESCRIPTION: Configures the entity to use the Table-Per-Hierarchy (TPH) mapping strategy explicitly within the `OnModelCreating` method.  This sets the inheritance strategy at the model level.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Animal>().UseTphMappingStrategy();\n```\n\n----------------------------------------\n\nTITLE: Disabling Change Tracking Using ObjectContext in C#\nDESCRIPTION: This code snippet demonstrates how to disable change tracking for an entire entity set (Products) using the MergeOption.NoTracking option when the context derives from ObjectContext. This means that any entities retrieved by subsequent queries will not be tracked by the ObjectStateManager, improving performance for read-only scenarios. The example then queries for products based on a specific category.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Products.MergeOption = MergeOption.NoTracking;\n\nvar productsForCategory = from p in context.Products\n                             where p.Category.CategoryName == selectedCategory\n                             select p;\n```\n\n----------------------------------------\n\nTITLE: Creating EF Context in C#\nDESCRIPTION: This code snippet demonstrates how to create an Entity Framework context using a using statement. The using statement ensures that the context is properly disposed of after use. The performance impact of context creation varies across EF versions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing(var db = new MyContext())\n{\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Translation for GroupBy with Complex Types\nDESCRIPTION: This SQL code shows the translated SQL for grouping by a complex type. It groups by each member (City, Country, Line1, Line2, PostCode) of the StoreAddress complex type in the Stores table. This aligns with the semantics of complex types as value objects.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [s].[StoreAddress_City], [s].[StoreAddress_Country], [s].[StoreAddress_Line1], [s].[StoreAddress_Line2], [s].[StoreAddress_PostCode], COUNT(*) AS [Count]\nFROM [Stores] AS [s]\nGROUP BY [s].[StoreAddress_City], [s].[StoreAddress_Country], [s].[StoreAddress_Line1], [s].[StoreAddress_Line2], [s].[StoreAddress_PostCode]\n```\n\n----------------------------------------\n\nTITLE: Calculate in Database with EF Core for Benchmarking\nDESCRIPTION: This benchmark method leverages EF Core's ability to perform calculations directly in the database. It calculates the average ranking using the `Average()` method within the query, which translates to a SQL AVG() function. This minimizes data transfer as only the final result is returned.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/performance-diagnosis.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing BenchmarkDotNet.Attributes;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Benchmarks;\n\n[MemoryDiagnoser]\npublic class AverageBlogRanking\n{\n    private string _connectionString = null!;\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        _connectionString = Helpers.GetConnectionString();\n        using var context = new BloggingContext(_connectionString);\n        context.Database.EnsureDeleted();\n        context.Database.EnsureCreated();\n\n        context.Blogs.AddRange(\n            new Blog { Ranking = 1 },\n            new Blog { Ranking = 2 },\n            new Blog { Ranking = 3 });\n\n        context.SaveChanges();\n    }\n\n    [Benchmark(Baseline = true)]\n    public double LoadEntities()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.ToList().Average(b => b.Ranking);\n    }\n\n    [Benchmark]\n    public double LoadEntitiesNoTracking()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.AsNoTracking().ToList().Average(b => b.Ranking);\n    }\n\n    [Benchmark]\n    public double ProjectOnlyRanking()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.Select(b => b.Ranking).ToList().Average();\n    }\n\n    [Benchmark]\n    public double CalculateInDatabase()\n    {\n        using var context = new BloggingContext(_connectionString);\n        return context.Blogs.Average(b => b.Ranking);\n    }\n}\n\npublic class BloggingContext : DbContext\n{\n    private readonly string _connectionString;\n\n    public BloggingContext(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public DbSet<Blog> Blogs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlite(_connectionString);\n    }\n}\n\npublic class Blog\n{\n    public int Id { get; set; }\n    public int Ranking { get; set; }\n}\n\npublic static class Helpers\n{\n    public static string GetConnectionString()\n    {\n        var databaseName = $\"Test_{Guid.NewGuid()}\";\n        return $\"Data Source={databaseName}.db\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Discovering Reference Navigations in EF Core (C#)\nDESCRIPTION: This code demonstrates how EF Core discovers reference navigations based on property types and access modifiers. Properties like `Blog.Author` and `Author.Blog` are discovered as reference navigations because they meet the criteria: public, getter/setter, reference type, and not explicitly configured as a primitive type. Other properties like `Blog.Id` and `Blog.Title` are ignored because their types are mapped primitive types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    // Not discovered as reference navigations:\n    public int Id { get; set; }\n    public string Title { get; set; } = null!;\n    public Uri? Uri { get; set; }\n    public ConsoleKeyInfo ConsoleKeyInfo { get; set; }\n    public Author DefaultAuthor => new() { Name = $\"Author of the blog {Title}\" };\n\n    // Discovered as a reference navigation:\n    public Author? Author { get; private set; }\n}\n\npublic class Author\n{\n    // Not discovered as reference navigations:\n    public Guid Id { get; set; }\n    public string Name { get; set; } = null!;\n    public int BlogId { get; set; }\n\n    // Discovered as a reference navigation:\n    public Blog Blog { get; init; } = null!;\n}\n```\n\n----------------------------------------\n\nTITLE: Order/OrderDescending - SQL\nDESCRIPTION: This SQL query shows the output generated by EF Core 9 for the `Order` and `OrderDescending` operators. The `ORDER BY` clause includes ordering based on the primary key of `Blogs` and `Posts`, demonstrating the simplified ordering functionality.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[Name], [b].[Id], [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Rating], [p].[Title], [p].[PromoText], [p].[Metadata], [p0].[Title], [p0].[Id]\nFROM [Blogs] AS [b]\nLEFT JOIN [Posts] AS [p] ON [b].[Id] = [p].[BlogId]\nLEFT JOIN [Posts] AS [p0] ON [b].[Id] = [p0].[BlogId]\nORDER BY [b].[Id], [p].[Id] DESC, [p0].[Title]\n```\n\n----------------------------------------\n\nTITLE: Mapping Database Scalar Functions in EF Core 2.0 (C#)\nDESCRIPTION: This code snippet illustrates how to map a database scalar function to a method stub in EF Core 2.0, enabling its use in LINQ queries. A static method `PostReadCount` is declared and annotated with `DbFunctionAttribute`. This allows calls to the method in LINQ queries to be translated to function calls in SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    [DbFunction]\n    public static int PostReadCount(int blogId)\n    {\n        throw new NotImplementedException();\n    }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar query =\n    from p in context.Posts\n    where BloggingContext.PostReadCount(p.Id) > 5\n    select p;\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities (Posts) with Include - C#\nDESCRIPTION: This snippet demonstrates a simple `Include` to load `Posts` related to `Blogs`. This can lead to data duplication issues if the `Blogs` table has a large column that is unnecessarily duplicated in the result set for each related `Post`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar blogs = await ctx.Blogs\n    .Include(b => b.Posts)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Model Managed Data: Seeding City Data with Foreign Keys in EF Core (C#)\nDESCRIPTION: Demonstrates how to add entities with relationships, specifically 'City' entities related to 'Country' entities, by specifying the foreign key values in the data seeding configuration. This example ensures the foreign key constraints are correctly set up when inserting related data as part of the model configuration using EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/data-seeding.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<City>().HasData(\n    new City { Id = 1, CountryId = 1, Name = \"New York\" },\n    new City { Id = 2, CountryId = 2, Name = \"Toronto\" });\n```\n\n----------------------------------------\n\nTITLE: Add Initial Migration (Empty Database) - PowerShell\nDESCRIPTION: Adds an initial migration that includes logic to create the existing schema.  This approach is used when other databases that migrations will be applied to are empty or don't exist yet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/existing-database.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-Migration InitialCreate\n```\n\n----------------------------------------\n\nTITLE: EF Interceptor Registration XML (EF6.1+)\nDESCRIPTION: This XML snippet registers an interceptor in the configuration file.  It configures the built-in DatabaseLogger interceptor that logs all database operations to the Console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n  <interceptor type=\"System.Data.Entity.Infrastructure.Interception.DatabaseLogger, EntityFramework\"/>\n</interceptors>\n```\n\n----------------------------------------\n\nTITLE: Updating EF Core Tools Locally (.NET CLI)\nDESCRIPTION: This command updates the EF Core tools when installed as a local tool in your project. It updates the tool to the latest version specified in the tool manifest file.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/dotnet.md#_snippet_4\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool update dotnet-ef\n```\n\n----------------------------------------\n\nTITLE: Negated Bool Projection - C#\nDESCRIPTION: This C# code snippet demonstrates a query projecting a negated boolean property.  EF Core 9 simplifies the translation of the negation, using bitwise NOT.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nvar negatedBoolProjection = await context.Posts.Select(x => new { x.Title, Active = !x.Archived }).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SQLite Unique Index Creation Example\nDESCRIPTION: This SQL code shows how a unique index is created on the BlogId column of the Author table in SQLite for a required one-to-one relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE UNIQUE INDEX \"IX_Author_BlogId\" ON \"Author\" (\"BlogId\");\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with a Collection of Value Objects in C#\nDESCRIPTION: This code defines a `Blog` entity with a collection of `AnnualFinance` value objects. This shows how to incorporate a collection of custom value objects within an entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-conversions.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    \n    public IList<AnnualFinance> Finances { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Owner Entity: DetailedOrder C#\nDESCRIPTION: Defines a `DetailedOrder` class which contains an `OrderDetails` property which is an owned entity.  This shows how owned types can be nested.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Modeling.OwnedEntities\n{\n    public class DetailedOrder\n    {\n        public int Id { get; set; }\n        public OrderDetails OrderDetails { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OnModelCreating Sparse Column Configuration C#\nDESCRIPTION: Configures the ForumName property as a sparse column in the database using modelBuilder.Entity<ForumModerator>().Property(e => e.ForumName).IsSparse().\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder\n        .Entity<ForumModerator>()\n        .Property(e => e.ForumName)\n        .IsSparse();\n}\n```\n\n----------------------------------------\n\nTITLE: Install HierarchyId package using Package Manager Console\nDESCRIPTION: This command installs the Microsoft.EntityFrameworkCore.SqlServer.HierarchyId package to your project using the Package Manager Console in Visual Studio.  It allows EF Core to utilize the HierarchyId SQL Server feature.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer.HierarchyId\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic SVGs\nDESCRIPTION: This snippet shows how to display Open Iconic SVGs as regular images using the <img> tag. It emphasizes the importance of using the 'alt' attribute for accessibility.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Split Queries - SQL\nDESCRIPTION: These SQL queries are generated by the `AsSplitQuery` method. Two separate queries are executed: one for `Blogs` and one for `Posts`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/single-split-queries.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[BlogId], [b].[OwnerId], [b].[Rating], [b].[Url]\nFROM [Blogs] AS [b]\nORDER BY [b].[BlogId]\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[PostId], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Rating], [p].[Title], [b].[BlogId]\nFROM [Blogs] AS [b]\nINNER JOIN [Posts] AS [p] ON [b].[BlogId] = [p].[BlogId]\nORDER BY [b].[BlogId]\n```\n\n----------------------------------------\n\nTITLE: stringValue.TrimEnd .NET to SQL translation\nDESCRIPTION: Demonstrates the translation of stringValue.TrimEnd() in .NET to RTRIM(@stringValue) in SQL within the Entity Framework Core and Cosmos DB environment. It removes trailing whitespace from a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_40\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.TrimEnd()\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[RTRIM(@stringValue)](/azure/cosmos-db/nosql/query/rtrim)\n```\n\n----------------------------------------\n\nTITLE: Disabling Proxy Creation - C#\nDESCRIPTION: This code snippet demonstrates how to disable proxy creation in Entity Framework by setting the `ProxyCreationEnabled` flag to `false` within the constructor of a derived `DbContext` class. Disabling proxies can be useful for scenarios like serialization where non-proxy instances are easier to handle.  It depends on `DbContext` and `Configuration`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/proxies.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public BloggingContext()\n    {\n        this.Configuration.ProxyCreationEnabled = false;\n    }\n\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Alternate Key Configuration - Fluent API - C#\nDESCRIPTION: Configures a single property as an alternate key using the Fluent API. The 'HasAlternateKey' method is used within 'OnModelCreating' to specify the 'LicensePlate' property as an alternate key for the 'Car' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keys.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\ninternal class CarContext : DbContext\n{\n    public DbSet<Car> Cars { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Car>().HasAlternateKey(c => c.LicensePlate);\n    }\n}\n\ninternal class Car\n{\n    public string LicensePlate { get; set; }\n\n    public string Make { get; set; }\n    public string Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Missing Properties in C#\nDESCRIPTION: This code demonstrates how querying for properties that are missing in some documents can lead to unexpected results due to Azure Cosmos DB's indexing behavior. It highlights the importance of ensuring properties mapped by EF Core are always populated when working with the store directly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/unstructured-data.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[\n        [Fact]\n        public async Task MissingProperties()\n        {\n            await using var context = new OrdersContext();\n            await context.Database.EnsureDeletedAsync();\n            await context.Database.EnsureCreatedAsync();\n\n            context.Orders.Add(new Order { Id = 1, PartitionKey = \"1\" });\n            context.Orders.Add(new Order { Id = 2, PartitionKey = \"2\", TrackingNumber = \"XYZ\" });\n            await context.SaveChangesAsync();\n\n            var sorted = context.Orders.OrderBy(o => o.Id).ThenBy(o => o.TrackingNumber).ToList();\n\n            Assert.Single(sorted);\n            Assert.Equal(2, sorted.Single().Id);\n\n            var element = await context.Orders.FindAsync(2);\n\n            context.Orders.Remove(element);\n            await context.SaveChangesAsync();\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Mimicking EF6 Database.Log (C#)\nDESCRIPTION: This C# snippet demonstrates how to mimic the EF6 `Database.Log` behavior in EF Core. It sets up a `Log` property on the `DbContext` and uses it to invoke logging only when the property has been set, allowing for conditional logging at runtime.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic Action<string> Log { get; set; }\n\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(s => Log?.Invoke(s));\n```\n\n----------------------------------------\n\nTITLE: Restricting client evaluation in EF Core 3.x (C#)\nDESCRIPTION: This code snippet demonstrates how to switch evaluation of a query to LINQ to Objects in EF Core 3.x when a predicate condition cannot be translated to SQL. It uses the AsEnumerable() method to force client-side evaluation of the IsSpecialCustomer(c) predicate.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar specialCustomers = context.Customers\n    .Where(c => c.Name.StartsWith(n))\n    .AsEnumerable() // switches to LINQ to Objects\n    .Where(c => IsSpecialCustomer(c));\n```\n\n----------------------------------------\n\nTITLE: Force Parameter in Query - SQL\nDESCRIPTION: This snippet shows the generated SQL when forcing a parameter using `EF.Parameter`. The title \".NET Blog\" is now parameterized.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_40\n\nLANGUAGE: SQL\nCODE:\n```\nExecuted DbCommand (1ms) [Parameters=[@__p_0='.NET Blog' (Size = 4000), @__id_1='1'], CommandType='Text', CommandTimeout='30']\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE [p].[Title] = @__p_0 AND [p].[Id] = @__id_1\n```\n\n----------------------------------------\n\nTITLE: Specify migration configuration class\nDESCRIPTION: This command specifies the migration configuration class to use. It is required when there are multiple classes inheriting from DbMigrationConfiguration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/migrate-exe.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nMigrate.exe MyAssembly CustomConfig /startupConfigurationFile=\"..\\\\web.config\"\n```\n\n----------------------------------------\n\nTITLE: Install EF Core template package\nDESCRIPTION: Installs the Microsoft.EntityFrameworkCore.Templates package using the dotnet new command-line tool. This package provides the default T4 templates used for reverse engineering.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new install Microsoft.EntityFrameworkCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Restoring Cascade Delete Timing\nDESCRIPTION: This code restores the cascade delete timing behavior to `OnSaveChanges` in EF Core 3.0. This can be used to revert to the previous behavior where cascade deletions happened during `SaveChanges` rather than immediately.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\ncontext.ChangeTracker.CascadeDeleteTiming = CascadeTiming.OnSaveChanges;\ncontext.ChangeTracker.DeleteOrphansTiming = CascadeTiming.OnSaveChanges;\n```\n\n----------------------------------------\n\nTITLE: Reference Equality Comparer in C#\nDESCRIPTION: This code snippet defines a reference equality comparer for objects. It uses reference equality (x == y) for comparison and RuntimeHelpers.GetHashCode for generating hash codes. This is useful for collections where object identity, rather than value equality, is important.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class ReferenceEqualityComparer : IEqualityComparer<object>\n{\n    private ReferenceEqualityComparer()\n    {\n    }\n\n    public static ReferenceEqualityComparer Instance { get; } = new ReferenceEqualityComparer();\n\n    bool IEqualityComparer<object>.Equals(object x, object y) => x == y;\n\n    int IEqualityComparer<object>.GetHashCode(object obj) => RuntimeHelpers.GetHashCode(obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Linked Query Requiring Recompilation - C#\nDESCRIPTION: This code illustrates a scenario where a second query is linked to a first query that requires recompilation. As a result, the second query will also not be cached, even if it would otherwise be cacheable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nint[] ids = new int[10000];\n...\nusing (var context = new MyContext())\n{\n    var firstQuery = from entity in context.MyEntities\n                        where ids.Contains(entity.Id)\n                        select entity;\n\n    var secondQuery = from entity in context.MyEntities\n                        where firstQuery.Any(otherEntity => otherEntity.Id == entity.Id)\n                        select entity;\n\n    var results = secondQuery.ToList();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Migrations with Provider Argument via .NET Core CLI\nDESCRIPTION: Demonstrates adding migrations using the .NET Core CLI, passing the provider as a command-line argument. The `--` token ensures that arguments are correctly forwarded to the application, enabling provider-specific configuration during migration creation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/providers.md#_snippet_4\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add MyMigration --project ../SqlServerMigrations -- --provider SqlServer\ndotnet ef migrations add MyMigration --project ../SqliteMigrations -- --provider Sqlite\n```\n\n----------------------------------------\n\nTITLE: CreateHostBuilder - C#\nDESCRIPTION: This code snippet demonstrates how to configure a generic host builder to read configuration from command-line arguments. This allows specifying the provider (e.g., SqlServer, Sqlite) when running EF Core tools, enabling the creation of provider-specific migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/providers.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[!code-csharp[](../../../../samples/core/Schemas/TwoProjectMigrations/WorkerService1/Program.cs#snippet_CreateHostBuilder)]\n```\n\n----------------------------------------\n\nTITLE: Delete All Blogs and Posts C#\nDESCRIPTION: This C# code deletes all blogs, and because of cascade delete configuration, it will also delete all related posts. Requires EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nawait context.Blogs.ExecuteDeleteAsync();\n```\n\n----------------------------------------\n\nTITLE: Matching Filters on Blog and Post Entities in C#\nDESCRIPTION: This code snippet demonstrates an alternative approach to address the issues with required navigation and global query filters by applying consistent filters on both `Blog` and `Post` entities. This ensures that only posts associated with blogs that satisfy the filter condition are returned, providing consistent results.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>().HasQueryFilter(b => b.Url.Contains(\"fish\"));\n    modelBuilder.Entity<Post>().HasQueryFilter(p => p.Blog.Url.Contains(\"fish\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Single Include Multiple Navigations - C#\nDESCRIPTION: This code snippet demonstrates how to load multiple navigations using a single `Include` method for navigation chains that are all references, or when they end with a single collection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Author.Address)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Default SQL Query Generated by EF Core\nDESCRIPTION: Shows the default SQL query generated by EF Core when including related collections using the SQLite provider. This is a single query that joins the Artists and Album tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/whatsnew.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.\"Id\", a.\"Name\", a0.\"Id\", a0.\"ArtistId\", a0.\"Title\"\nFROM \"Artists\" AS a\nLEFT JOIN \"Album\" AS a0 ON a.\"Id\" = a0.\"ArtistId\"\nORDER BY a.\"Id\", a0.\"Id\"\n```\n\n----------------------------------------\n\nTITLE: Update Database to Specific Migration - PowerShell\nDESCRIPTION: This command updates the database to a specific migration ('AddNewTables') using PowerShell. It can also be used for rolling back migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Database AddNewTables\n```\n\n----------------------------------------\n\nTITLE: Creating LINQ Query Expression in C#\nDESCRIPTION: This code snippet shows how to create a LINQ query expression in C# to select customers based on their ID.  The query is built but not immediately executed. The performance impact of the query creation is generally low.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar q1 =\n  from c in db.Customers\n  where c.Id == id1\n  select c;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table-Valued Function in SQL\nDESCRIPTION: This SQL snippet defines a table-valued function named GetStudentGradesForCourse.  It takes a CourseID as input and returns a table containing EnrollmentID, CourseID, StudentID, and Grade from the StudentGrade table for the specified course. It filters the results based on the provided CourseID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/tvfs.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE FUNCTION [dbo].[GetStudentGradesForCourse]\n\n(@CourseID INT)\n\nRETURNS TABLE\n\nRETURN\n    SELECT [EnrollmentID],\n           [CourseID],\n           [StudentID],\n           [Grade]\n    FROM   [dbo].[StudentGrade]\n    WHERE  CourseID = @CourseID\n```\n\n----------------------------------------\n\nTITLE: Enabling C# Interceptors in .csproj\nDESCRIPTION: This snippet enables the experimental C# interceptors feature, which is required for EF's LINQ query execution under NativeAOT.  It adds the `Microsoft.EntityFrameworkCore.GeneratedInterceptors` namespace to the list of interceptor namespaces.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/nativeaot-and-precompiled-queries.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InterceptorsNamespaces>$(InterceptorsNamespaces);Microsoft.EntityFrameworkCore.GeneratedInterceptors</InterceptorsNamespaces>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Opt Out of Efficient Technique Using Model Building Convention\nDESCRIPTION: If most or all of your tables have triggers, this code shows how to opt out of the newer, efficient technique for all your model's tables using a model building convention. This involves calling `HasTrigger` on all your model's tables, effectively reverting to the old behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Main](../../../../samples/core/SqlServer/Misc/TriggersContext.cs?name=BlankTriggerAddingConvention)]\n```\n\n----------------------------------------\n\nTITLE: Old Cosmos DB Model Configuration C#\nDESCRIPTION: Demonstrates the model configuration required in EF Core 5.0 for Azure Cosmos DB, explicitly configuring ownership relationships for Parents, Children, Pets, and Address.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Family>()\n    .HasPartitionKey(e => e.LastName)\n    .OwnsMany(f => f.Parents);\n\nmodelBuilder.Entity<Family>()\n    .OwnsMany(f => f.Children)\n    .OwnsMany(c => c.Pets);\n\nmodelBuilder.Entity<Family>()\n    .OwnsOne(f => f.Address);        \n```\n\n----------------------------------------\n\nTITLE: Querying Historical Data within a Range with TemporalBetween in EF Core\nDESCRIPTION: This code snippet demonstrates how to query historical data within a specific time range using the `TemporalBetween` operator in EF Core. It retrieves all versions of the employee's data that were active between the specified time stamps and sorts them by the 'ValidFrom' column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/temporal-tables.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar history = context\n    .Employees\n    .TemporalBetween(timeStamp2, timeStamp3)\n    .Where(e => e.Name == \"Rainbow Dash\")\n    .OrderBy(e => EF.Property<DateTime>(e, \"ValidFrom\"))\n    .Select(\n        e => new\n        {\n            Employee = e,\n            ValidFrom = EF.Property<DateTime>(e, \"ValidFrom\"),\n            ValidTo = EF.Property<DateTime>(e, \"ValidTo\")\n        })\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Bootstrap CSS\nDESCRIPTION: This snippet shows how to include the Open Iconic CSS stylesheet for Bootstrap. The stylesheet should be placed inside the HTML <head> section.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation\nDESCRIPTION: This snippet shows how to use Open Iconic with Foundation. It uses the `<span>` tag and applies the appropriate Foundation classes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Standalone\nDESCRIPTION: This code snippet shows how to use Open Iconic icons without any framework. It makes use of the 'data-glyph' attribute.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Update .NET Core Templates\nDESCRIPTION: Updates the installed .NET Core templates to the latest version. This is important to ensure you are using the most up-to-date templates.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_10\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new update\n```\n\n----------------------------------------\n\nTITLE: App.Config Configuration (XML)\nDESCRIPTION: Illustrates how to configure the provider using an App.Config file. This involves adding sections for entityFramework providers and DbProviderFactories.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/microsoft-ef6-sqlserver.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <configSections>\n        <section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" />    \n    </configSections>\n    <entityFramework>\n        <providers>\n            <provider invariantName=\"Microsoft.Data.SqlClient\" type=\"System.Data.Entity.SqlServer.MicrosoftSqlProviderServices, Microsoft.EntityFramework.SqlServer\" />\n        </providers>\n    </entityFramework>\n    <system.data>\n        <DbProviderFactories>\n           <add name=\"SqlClient Data Provider\"\n             invariant=\"Microsoft.Data.SqlClient\"\n             description=\".NET Framework Data Provider for SqlServer\"\n             type=\"Microsoft.Data.SqlClient.SqlClientFactory, Microsoft.Data.SqlClient\" />\n        </DbProviderFactories>\n    </system.data>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Database View Definition (C#)\nDESCRIPTION: This snippet shows the SQL definition of the database view `MostPopularBlogsView`. This view is used as the target for the keyless entity type, allowing EF Core to query the aggregated data. The view selects the blog name and counts the number of posts for each blog.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keyless-entity-types.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace KeylessEntityTypes\n{\n    public class MyContext : DbContext\n    {\n        public MyContext(DbContextOptions<MyContext> options)\n            : base(options)\n        {\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<MostPopularBlogs>().HasNoKey().ToView(\"MostPopularBlogsView\");\n        }\n\n        public DbSet<Blog> Blogs { get; set; }\n        public DbSet<Post> Posts { get; set; }\n\n        public DbSet<MostPopularBlogs> MostPopularBlogs { get; set; }\n\n    }\n\n    public class MostPopularBlogs\n    {\n        public string BlogName { get; set; }\n        public int PostCount { get; set; }\n    }\n\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Sample usage - requires a database connection and setup\n            var optionsBuilder = new DbContextOptionsBuilder<MyContext>();\n            optionsBuilder.UseSqlServer(\"YourConnectionStringHere\"); // Replace with your actual connection string\n\n            using (var context = new MyContext(optionsBuilder.Options))\n            {\n                var popularBlogs = context.MostPopularBlogs.ToList();\n\n                foreach (var blog in popularBlogs)\n                {\n                    Console.WriteLine($\"Blog: {blog.BlogName}, Post Count: {blog.PostCount}\");\n                }\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into StudentGrade Table SQL\nDESCRIPTION: These SQL INSERT statements populate the StudentGrade table, including CourseID, StudentID, and Grade, representing student grades in different courses. The Grade column accepts NULL values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n-- Insert data into the StudentGrade table.\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2021, 2, 4);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2030, 2, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2021, 3, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2030, 3, 4);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2021, 6, 2.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2042, 6, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2021, 7, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2042, 7, 4);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2021, 8, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (2042, 8, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4041, 9, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4041, 10, null);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4041, 11, 2.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4041, 12, null);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4061, 12, null);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4022, 14, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4022, 13, 4);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4061, 13, 4);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4041, 14, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4022, 15, 2.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4022, 16, 2);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4022, 17, null);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4022, 19, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4061, 20, 4);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4061, 21, 2);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4022, 22, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4041, 22, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4061, 22, 2.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (4022, 23, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1045, 23, 1.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1061, 24, 4);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1061, 25, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1050, 26, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1061, 26, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1061, 27, 3);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1045, 28, 2.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1050, 28, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1061, 29, 4);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1050, 30, 3.5);\nINSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\nVALUES (1061, 30, 4);\nGO\n```\n\n----------------------------------------\n\nTITLE: Defining Keyless Entity Type with Fluent API (C#)\nDESCRIPTION: This snippet demonstrates how to define a keyless entity type using the Fluent API in EF Core. The `HasNoKey()` method is called within the `OnModelCreating` method of the `DbContext` to configure the entity type as keyless. This provides an alternative to data annotations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/keyless-entity-types.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\n\nnamespace KeylessEntityTypes.Model\n{\n    public class MostPopularBlogsConfiguration : IEntityTypeConfiguration<MostPopularBlogs>\n    {\n        public void Configure(EntityTypeBuilder<MostPopularBlogs> builder)\n        {\n            builder.HasNoKey();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Change Detection - C#\nDESCRIPTION: This code snippet demonstrates how to disable automatic change detection in Entity Framework 6 using `context.Configuration.AutoDetectChangesEnabled = false;`. This can improve performance when adding or manipulating a large number of entities within a loop. The `try...finally` block ensures that automatic change detection is re-enabled, even if an exception occurs within the loop. The `BloggingContext` class represents a database context for blogs and needs to be defined elsewhere.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/auto-detect-changes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    try\n    {\n        context.Configuration.AutoDetectChangesEnabled = false;\n\n        // Make many calls in a loop\n        foreach (var blog in aLotOfBlogs)\n        {\n            context.Blogs.Add(blog);\n        }\n    }\n    finally\n    {\n        context.Configuration.AutoDetectChangesEnabled = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LINQ Query using Primitive Collections\nDESCRIPTION: This C# code demonstrates a LINQ query that uses the `DaysVisited` collection. It selects walks and related pub information, calculating the count of days both the walk and pub were visited. This showcases querying against primitive collections.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_76\n\nLANGUAGE: csharp\nCODE:\n```\nvar walksWithADrink = await context.Walks.Select(\n    w => new\n    {\n        WalkName = w.Name,\n        PubName = w.ClosestPub.Name,\n        Count = w.DaysVisited.Count(v => w.ClosestPub.DaysVisited.Contains(v)),\n        TotalCount = w.DaysVisited.Count\n    }).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Get Daily Message Query in EF Core\nDESCRIPTION: This C# code defines an asynchronous method `GetDailyMessage` which retrieves the most recent daily message from the database using EF Core.  It uses the `TagWith` method to tag the query for identification by an interceptor and orders the messages by ID before selecting the last one. It requires an instance of `DailyMessageContext` for database access.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<string> GetDailyMessage(DailyMessageContext context)\n            => (await context.DailyMessages.TagWith(\"Get_Daily_Message\").OrderBy(e => e.Id).LastAsync()).Message;\n```\n\n----------------------------------------\n\nTITLE: Numeric Function Mappings in SQLite EF Core\nDESCRIPTION: Details how .NET numeric functions and operators are translated into SQL numeric functions when using the SQLite provider in EF Core, including arithmetic operations, trigonometric functions, and other mathematical functions.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/functions.md#_snippet_4\n\nLANGUAGE: .NET & SQL\nCODE:\n```\n.NET                             | SQL                                  \n-------------------------------- | ------------------------------------ \n-decimalValue                    | ef_negate(@decimalValue)\ndecimalValue - d                 | ef_add(@decimalValue, ef_negate(@d))\ndecimalValue * d                 | ef_multiply(@decimalValue, @d)\ndecimalValue / d                 | ef_divide(@decimalValue, @d)\ndecimalValue % d                 | ef_mod(@decimalValue, @d)\ndecimalValue + d                 | ef_add(@decimalValue, @d)\ndecimalValue < d                 | ef_compare(@decimalValue, @d) < 0\ndecimalValue <= d                | ef_compare(@decimalValue, @d) <= 0\ndecimalValue > d                 | ef_compare(@decimalValue, @d) > 0\ndecimalValue >= d                | ef_compare(@decimalValue, @d) >= 0\ndouble.DegreesToRadians(degrees) | radians(@degrees)\ndouble.RadiansToDegrees(radians) | degrees(@dradians)\ndoubleValue % d                  | mod(@doubleValue, @d)\nEF.Functions.Random()            | abs(random() / 9223372036854780000.0)\nMath.Abs(value)                  | abs(@value)\nMath.Acos(value)                 | acos(@value)\nMath.Acosh(d)                    | acosh(@d)\nMath.Asin(d)                     | asin(@d)\nMath.Asinh(d)                    | asinh(@d)\nMath.Atan(d)                     | atan(@d)\nMath.Atan2(y, x)                 | atan2(@y, @x)\nMath.Atanh(d)                    | atanh(@d)\nMath.Ceiling(d)                  | ceiling(@d)\nMath.Cos(d)                      | cos(@d)\nMath.Cosh(value)                 | cosh(@value)\nMath.Exp(d)                      | exp(@d)\nMath.Floor(d)                    | floor(@d)\nMath.Log(d)                      | ln(@d)\nMath.Log(a, newBase)             | log(@newBase, @a)\nMath.Log2(x)                     | log2(@x)\nMath.Log10(d)                    | log10(@d)\nMath.Max(val1, val2)             | max(@val1, @val2)\nMath.Min(val1, val2)             | min(@val1, @val2)\nMath.Pow(x, y)                   | pow(@x, @y)\nMath.Round(d)                    | round(@d)\nMath.Round(d, digits)            | round(@d, @digits)\nMath.Sign(d)                     | sign(@d)\nMath.Sin(a)                      | sin(@a)\nMath.Sinh(value)                 | sinh(@value)\nMath.Sqrt(d)                     | sqrt(@d)\nMath.Tan(a)                      | tan(@a)\nMath.Tanh(value)                 | tanh(@value)\nMath.Truncate(d)                 | trunc(@d)\n```\n\n----------------------------------------\n\nTITLE: Negated Contains - SQL (EF9)\nDESCRIPTION: This SQL query demonstrates the optimized output in EF Core 9, where the `NOT` operator is pushed into the comparison, resulting in a more efficient query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_63\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"p\".\"Content\"\nFROM \"Posts\" AS \"p\"\nWHERE instr(\"p\".\"Content\", 'Announcing') <= 0\n```\n\n----------------------------------------\n\nTITLE: Configure Field-Only Property - C#\nDESCRIPTION: This code snippet shows how to configure a field-only property using the Fluent API in Entity Framework Core. The `Property(\"_validatedUrl\")` method creates a conceptual property named `_validatedUrl` that is mapped directly to the backing field.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/backing-field.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\npublic class MyContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Blog>()\n            .Property<string>(\"_validatedUrl\");\n    }\n}\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n\n    private string _validatedUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Lazy Loading - Specific Property - EF6 - C#\nDESCRIPTION: This code modifies the Blog entity to disable lazy loading for the Posts collection by making the Posts property non-virtual.  Related posts must then be loaded using eager loading or explicit loading. Requires Entity Framework and POCO entity types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/related-data.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Name { get; set; }\n    public string Url { get; set; }\n    public string Tags { get; set; }\n\n    public ICollection<Post> Posts { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Entity Type with Trigger\nDESCRIPTION: This code snippet shows how to configure an entity type to indicate that the target table has a trigger. EF Core then reverts to a less efficient technique, but it ensures correct behavior when triggers are present. This approach works in EF Core 7 and later.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Main](../../../../samples/core/SqlServer/Misc/TriggersContext.cs?name=TriggerConfiguration&highlight=4)]\n```\n\n----------------------------------------\n\nTITLE: Renaming Foreign Key Not Defined in Model - EF6 - C#\nDESCRIPTION: This snippet renames a foreign key column in the database when the foreign key property is not explicitly defined in the CLR type. The `MapKey` method within the `Map` configuration allows specifying a custom name (`ChangedDepartmentID`) for the foreign key column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>()\n    .HasRequired(c => c.Department)\n    .WithMany(t => t.Courses)\n    .Map(m => m.MapKey(\"ChangedDepartmentID\"));\n```\n\n----------------------------------------\n\nTITLE: LINQ to Entities Query in C#\nDESCRIPTION: This code snippet shows a basic LINQ to Entities query that filters products based on their category name. It demonstrates the simplest way to query data in Entity Framework using language-integrated query syntax. The `context.Products.Where` method is used to select products where the category name matches 'Beverages'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nvar q = context.Products.Where(p => p.Category.CategoryName == \"Beverages\");\n```\n\n----------------------------------------\n\nTITLE: Updating Migration ID in Migration File\nDESCRIPTION: This code snippet shows how to update the Migration attribute in a migration's designer file. The example demonstrates the diff between the old and new migration ID, assuming the application uses the Thai Buddhist calendar. The migration ID represents the timestamp when the migration was generated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n[DbContext(typeof(MyDbContext))]\n-[Migration(\"25620318122820_MyMigration\")]\n+[Migration(\"20190318122820_MyMigration\")]\n partial class MyMigration\n {\n```\n\n----------------------------------------\n\nTITLE: Create Products SQL\nDESCRIPTION: SQL script to create the Products table with an auto-incrementing Id column, which is the primary key, and a foreign key relationship to the Categories table. It also defines a constraint to maintain referential integrity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_182\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Products] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NOT NULL,\n    [CategoryId] int NOT NULL,\n    CONSTRAINT [PK_Products] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Products_Categories_CategoryId] FOREIGN KEY ([CategoryId]) REFERENCES [Categories] ([Id]) ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Configure Backing Field by Convention - C#\nDESCRIPTION: This code snippet demonstrates how to configure a backing field for a property using the default naming conventions in Entity Framework Core. The `Url` property is backed by the `_url` field.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/backing-field.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    private string _url;\n\n    public int BlogId { get; set; }\n\n    public string Url\n    {\n        get => _url;\n        set => _url = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Table With Column Ordering (SQL)\nDESCRIPTION: This SQL code shows the table that EF Core generates based on the data model with column ordering specified using the `ColumnAttribute`.  The column order in the table definition now matches the order specified in the model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_156\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [EmployeesWithOrdering] (\n    [Id] int NOT NULL IDENTITY,\n    [FirstName] nvarchar(max) NULL,\n    [LastName] nvarchar(max) NULL,\n    [House] nvarchar(max) NULL,\n    [Street] nvarchar(max) NULL,\n    [City] nvarchar(max) NULL,\n    [Postcode] nvarchar(max) NULL,\n    [Department] nvarchar(max) NULL,\n    [AnnualSalary] decimal(18,2) NOT NULL,\n    [UpdatedOn] datetime2 NOT NULL,\n    [CreatedOn] datetime2 NOT NULL,\n    CONSTRAINT [PK_EmployeesWithOrdering] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Define Blog/Post Model\nDESCRIPTION: This code defines a basic Blog and Post model with properties like Id, Name, Author, Title, Content, and PostedOn. It demonstrates a typical entity model without constructor binding.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/constructors.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n    public string Author { get; set; }\n\n    public ICollection<Post> Posts { get; } = new List<Post>();\n}\n\npublic class Post\n{\n    public int Id { get; set; }\n\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public DateTime PostedOn { get; set; }\n\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporal Table in SQL Server (Custom)\nDESCRIPTION: This SQL code shows the table creation with custom period column names and custom history table name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nDECLARE @historyTableSchema sysname = SCHEMA_NAME()\nEXEC(N'CREATE TABLE [Employees] (\n    [EmployeeId] uniqueidentifier NOT NULL,\n    [Name] nvarchar(100) NULL,\n    [Position] nvarchar(100) NULL,\n    [Department] nvarchar(100) NULL,\n    [Address] nvarchar(1024) NULL,\n    [AnnualSalary] decimal(10,2) NOT NULL,\n    [ValidFrom] datetime2 GENERATED ALWAYS AS ROW START NOT NULL,\n    [ValidTo] datetime2 GENERATED ALWAYS AS ROW END NOT NULL,\n    CONSTRAINT [PK_Employees] PRIMARY KEY ([EmployeeId]),\n    PERIOD FOR SYSTEM_TIME([ValidFrom], [ValidTo])\n) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [' + @historyTableSchema + N'].[EmployeeHistoricalData]))');\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Where and Ordering C#\nDESCRIPTION: This C# code filters people where Age is 20, groups them by Id, selects the MiddleInitial of the first person in each group, orders the results by the selected MiddleInitial, and converts to a list.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nvar results = context.People.Where(e => e.Age == 20)\n    .GroupBy(e => e.Id)\n    .Select(g => g.First().MiddleInitial)\n    .OrderBy(e => e)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Registering an Interceptor in C#\nDESCRIPTION: This C# code demonstrates how to register an interceptor (NLogCommandInterceptor) with Entity Framework using the DbInterception.Add method. This allows the interceptor to be invoked during database operations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/logging-and-interception.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nDbInterception.Add(new NLogCommandInterceptor());\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog and Posts Graph\nDESCRIPTION: This snippet shows how to create a graph of entities consisting of a blog and its associated posts. This sets up the data structure for inserting or updating related entities. Requires the `Blog` and `Post` entity classes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/disconnected-entities.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic static Blog CreateBlogAndPosts()\n{\n    return new Blog\n    {\n        Url = \"http://sample.example.com\",\n        Posts = new List<Post>\n            {\n                new Post { Title = \"Post 1\", Content = \"Content 1\" },\n                new Post { Title = \"Post 2\", Content = \"Content 2\" }\n            }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Code First Connection String XML\nDESCRIPTION: This XML snippet demonstrates a standard ADO.NET connection string configuration used for Code First based models in Entity Framework. It defines the connection to a SQL Server Express database named Blogging with integrated security enabled.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<connectionStrings>\n  <add name=\"BlogContext\"  \n        providerName=\"System.Data.SqlClient\"  \n        connectionString=\"Server=.\\SQLEXPRESS;Database=Blogging;Integrated Security=True;\"/>\n</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: GroupBy with FirstOrDefault C#\nDESCRIPTION: This C# code snippet demonstrates using GroupBy with FirstOrDefault in EF Core to select the first person within each group of people with the same first name, ordered by first name then last name. It includes navigation properties for shoes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nvar people = context.People\n    .Include(e => e.Shoes)\n    .GroupBy(e => e.FirstName)\n    .Select(\n        g => g.OrderBy(e => e.FirstName)\n            .ThenBy(e => e.LastName)\n            .FirstOrDefault())\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Creating DeleteOfficeAssignment Stored Procedure in SQL\nDESCRIPTION: This SQL script creates a stored procedure named 'DeleteOfficeAssignment'. It deletes records from the 'OfficeAssignment' table based on the provided 'InstructorID'. This procedure is used to remove an office assignment for a specific instructor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[DeleteOfficeAssignment]')\nAND type in (N'P', N'PC'))\nBEGIN\nEXEC dbo.sp_executesql @statement = N'\nCREATE PROCEDURE [dbo].[DeleteOfficeAssignment]\n@InstructorID int\nAS\nDELETE FROM OfficeAssignment\nWHERE InstructorID=@InstructorID;\n'\nEND\nGO\n```\n\n----------------------------------------\n\nTITLE: Corrected LINQ query by swapping operators in EF Core\nDESCRIPTION: This code snippet demonstrates the corrected LINQ query by swapping the order of the `Where` and `Take` operators.  This mitigates the issue of incorrect query translation in EF Core 9, ensuring that the query is executed correctly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nvar sessions = await context.Sessions\n    .Where(s => s.Name.StartsWith(\"f\"))\n    .Take(5)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Entity SQL over ObjectQuery in C#\nDESCRIPTION: This code snippet demonstrates how to execute an Entity SQL query using an `ObjectQuery`. The query retrieves products from the `Products` entity set where the category name is 'Beverages'.  Entity SQL allows you to specify queries using a string-based syntax rather than LINQ. The resulting `ObjectQuery<Product>` can then be used for further processing.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nObjectQuery<Product> products = context.Products.Where(\"it.Category.CategoryName = 'Beverages'\");\n```\n\n----------------------------------------\n\nTITLE: Force Parameter in Query - C#\nDESCRIPTION: This snippet shows how to force EF Core to use a parameter for a value that would normally be treated as a constant.  This is achieved using the `EF.Parameter` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nasync Task<List<Post>> GetPostsForceParameter(int id)\n            => await context.Posts\n                .Where(e => e.Title == EF.Parameter(\".NET Blog\") && e.Id == id)\n                .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF-8 columns in EF Core 7.0\nDESCRIPTION: This code snippet demonstrates how to configure a column to support UTF-8 encoding in EF Core 7.0. It sets the column type to `varchar(max)`, specifies a UTF-8 collation, and explicitly enables Unicode support using `IsUnicode()`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/columns.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .Property(b => b.Name)\n        .HasColumnType(\"varchar(max)\")\n        .UseCollation(\"LATIN1_GENERAL_100_CI_AS_SC_UTF8\")\n        .IsUnicode();\n}\n```\n\n----------------------------------------\n\nTITLE: Logging to File in EF Core\nDESCRIPTION: This code snippet demonstrates how to log EF Core messages to a file. It creates a `StreamWriter` to write to the file and configures `LogTo` to use the writer's `WriteLine` method. The code also includes the `Dispose` and `DisposeAsync` methods to properly close the file stream.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly StreamWriter _logStream = new StreamWriter(\"mylog.txt\", append: true);\n\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(_logStream.WriteLine);\n\npublic override void Dispose()\n{\n    base.Dispose();\n    _logStream.Dispose();\n}\n\npublic override async ValueTask DisposeAsync()\n{\n    await base.DisposeAsync();\n    await _logStream.DisposeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Specify working directory for migrate.exe\nDESCRIPTION: This command sets the startup directory for migrate.exe. It's necessary if the assembly has dependencies or reads files relative to the working directory.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/migrate-exe.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nMigrate.exe MyApp.exe /startupConfigurationFile=\"MyApp.exe.config\" /startupDirectory=\"c:\\\\MyApp\"\n```\n\n----------------------------------------\n\nTITLE: Adding Id properties to Blog and Post classes in C#\nDESCRIPTION: This C# code adds `Id` properties to both the `Blog` and `Post` classes, which will serve as primary keys for these entities in the database. It also adds a `BlogId` to the `Post` class to be the foreign key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public virtual Uri SiteUri { get; set; }\n\n    public ICollection<Post> Posts { get; }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public DateTime PublishedOn { get; set; }\n    public bool Archived { get; set; }\n\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLitePCLRaw Bundle for SpatiaLite\nDESCRIPTION: This XML snippet configures the NuGet packages for Entity Framework Core with SQLite and NetTopologySuite, specifically using `bundle_sqlite3` to avoid incompatibility issues with newer PROJ versions when using SpatiaLite on macOS and Linux. It replaces the standard `Microsoft.EntityFrameworkCore.Sqlite` package with `Microsoft.EntityFrameworkCore.Sqlite.Core` and explicitly includes `SQLitePCLRaw.bundle_sqlite3`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/spatial.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <!-- Use bundle_sqlite3 instead with SpatiaLite on macOS and Linux -->\n  <!--<PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite\" Version=\"3.1.0\" />-->\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite.Core\" Version=\"3.1.0\" />\n  <PackageReference Include=\"SQLitePCLRaw.bundle_sqlite3\" Version=\"2.0.4\" />\n\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite\" Version=\"3.1.0\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: No-tracking query with Include - C#\nDESCRIPTION: This code snippet demonstrates how to perform a no-tracking query with Include to retrieve an entity and its related entity. This is included to demonstrate the breaking change concerning overwritten navigation properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar foo = await context.Foos.AsNoTracking().Include(e => e.Bar).SingleAsync();\nConsole.WriteLine($\"Foo.Bar.Id = {foo.Bar.Id}\");\n```\n\n----------------------------------------\n\nTITLE: Defining Model for Change Tracking Proxies in EF Core (C#)\nDESCRIPTION: This code snippet defines the entity classes (Blog and Post) that are used with change-tracking proxies. The properties must be declared as virtual to allow EF Core to override them and inject change-tracking logic. The Posts navigation property uses ObservableCollection to implement INotifyCollectionChanged.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/change-detection.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public virtual int Id { get; set; }\n    public virtual string Name { get; set; }\n\n    public virtual IList<Post> Posts { get; } = new ObservableCollection<Post>();\n}\n\npublic class Post\n{\n    public virtual int Id { get; set; }\n    public virtual string Title { get; set; }\n    public virtual string Content { get; set; }\n\n    public virtual int BlogId { get; set; }\n    public virtual Blog Blog { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a DbSet for User to the DbContext in C#\nDESCRIPTION: This C# code adds a DbSet for the User class to the existing BloggingContext class. This allows Entity Framework to manage User entities in the database. It assumes a class Blog, Post and User is already defined and inherits DbContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/workflows/new-database.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n    public DbSet<User> Users { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Include Extension Method in C#\nDESCRIPTION: This code defines an extension method for `IQueryable<T>` that provides an `Include` operator. This allows eager loading of related entities even when working with interfaces like `IObjectSet<T>`, which does not natively support `Include`. If the sequence is not an `ObjectQuery<T>`, the `Include` operator is a no-op.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n    public static class QueryableExtensions {\n        public static IQueryable<T> Include<T>\n                (this IQueryable<T> sequence, string path) {\n            var objectQuery = sequence as ObjectQuery<T>;\n            if(objectQuery != null)\n            {\n                return objectQuery.Include(path);\n            }\n            return sequence;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Install Cosmos Package (PowerShell)\nDESCRIPTION: This command installs the Microsoft.EntityFrameworkCore.Cosmos NuGet package in your Visual Studio project using the Package Manager Console. It's required to use the Cosmos DB provider with Entity Framework Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/index.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.EntityFrameworkCore.Cosmos\n```\n\n----------------------------------------\n\nTITLE: SQL Update Statement with Concurrency Check\nDESCRIPTION: This SQL snippet shows a sample UPDATE statement generated by Entity Framework when using the `ConcurrencyCheck` attribute. The WHERE clause includes the original value of the `BloggerName` property, ensuring that the update only occurs if the value hasn't changed since it was retrieved.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\n    where (([PrimaryTrackingKey] = @4) and ([BloggerName] = @5))\n    @4=1,@5=N'Julie'\n```\n\n----------------------------------------\n\nTITLE: Non-nullable property generates CS8618 warning C#\nDESCRIPTION: This snippet demonstrates how C# compiler generates CS8618 warning for uninitialized non-nullable property when nullable reference types are enabled. It's a common problem that needs to be addressed when using NRTs in EF Core.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n\n    // Generates CS8618, uninitialized non-nullable property:\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Complex Key and Aggregation SQL\nDESCRIPTION: This SQL code translates the C# query with a complex group by key, aggregation, and multiple joins.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_70\n\nLANGUAGE: SQL\nCODE:\n```\nExecuted DbCommand (12ms) [Parameters=[@__size_0='11'], CommandType='Text', CommandTimeout='30']\nSELECT [p0].[LastName], [f].[Size], MIN([f0].[Size]) AS [Min]\nFROM [People] AS [p]\nLEFT JOIN [Feet] AS [f] ON [p].[Id] = [f].[Id]\nLEFT JOIN [People] AS [p0] ON [f].[Id] = [p0].[Id]\nLEFT JOIN [Feet] AS [f0] ON [p].[Id] = [f0].[Id]\nWHERE (([f].[Size] = @__size_0) AND [p].[MiddleInitial] IS NOT NULL) AND (([f].[Id] <> 1) OR [f].[Id] IS NULL)\nGROUP BY [f].[Size], [p0].[LastName]\n```\n\n----------------------------------------\n\nTITLE: Disposing the Test Class (C#)\nDESCRIPTION: This demonstrates how to implement the `IDisposable` interface to clean up resources after each test.  Specifically, it shows calling the `Cleanup` method of the test fixture to reset the database to a clean state.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Dispose()\n{\n    _fixture.Cleanup();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Walks and Pubs with Location Tags and Visit Counts (C#)\nDESCRIPTION: This C# code uses EF Core to query walks and their closest pubs, extracting location tags and calculating the number of shared visit days. It retrieves the walk name, pub name, location tags for both, the count of matching visit days, and the total visit count from the `Walks` and `Pubs` entities, including data within their JSON `Visits` properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nvar walksWithADrink = await context.Walks.Select(\n    w => new\n    {\n        WalkName = w.Name,\n        PubName = w.ClosestPub.Name,\n        WalkLocationTag = w.Visits.LocationTag,\n        PubLocationTag = w.ClosestPub.Visits.LocationTag,\n        Count = w.Visits.DaysVisited.Count(v => w.ClosestPub.Visits.DaysVisited.Contains(v)),\n        TotalCount = w.Visits.DaysVisited.Count\n    }).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Query with Constants - No Cache C#\nDESCRIPTION: This example shows a query where the value for 'id' is used directly in the query, causing recompilation each time 'id' changes. This prevents caching. Skip(), Take(), Contains() and DefaultIfEmpty() LINQ operators do not produce SQL queries with parameters but instead put the values passed to them as constants.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = 10;\n...\nusing (var context = new MyContext())\n{\n    var query = context.MyEntities.Select(entity => entity.Id).Contains(id);\n\n    var results = query.ToList();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: InsertPerson Stored Procedure (SQL)\nDESCRIPTION: This SQL snippet defines the \"InsertPerson\" stored procedure. It accepts parameters for LastName, FirstName, HireDate, and EnrollmentDate, inserts a new row into the \"Person\" table, and returns the newly generated identity value as \"NewPersonID\".  This value is then mapped to the PersonID property in the Entity Framework model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\n CREATE PROCEDURE [dbo].[InsertPerson]\n                                @LastName nvarchar(50),\n                                @FirstName nvarchar(50),\n                                @HireDate datetime,\n                                @EnrollmentDate datetime\n                                AS\n                                INSERT INTO dbo.Person (LastName,\n                                                                             FirstName,\n                                                                             HireDate,\n                                                                             EnrollmentDate)\n                                VALUES (@LastName,\n                                               @FirstName,\n                                               @HireDate,\n                                               @EnrollmentDate);\n                                SELECT SCOPE_IDENTITY() as NewPersonID;\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Result Sets C#\nDESCRIPTION: C# code demonstrating how to execute a stored procedure and access multiple result sets using the ObjectContext API.  It utilizes the IObjectContextAdapter interface to get the ObjectContext, then uses the Translate method to convert the result sets into Blog and Post entities. Dependencies: Entity Framework. Prerequisites:  A database with Blogs and Posts tables and the GetAllBlogsAndPosts stored procedure.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/multiple-result-sets.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var db = new BloggingContext())\n{\n    // If using Code First we need to make sure the model is built before we open the connection\n    // This isn't required for models created with the EF Designer\n    db.Database.Initialize(force: false);\n\n    // Create a SQL command to execute the sproc\n    var cmd = db.Database.Connection.CreateCommand();\n    cmd.CommandText = \"[dbo].[GetAllBlogsAndPosts]\";\n\n    try\n    {\n\n        db.Database.Connection.Open();\n        // Run the sproc\n        var reader = cmd.ExecuteReader();\n\n        // Read Blogs from the first result set\n        var blogs = ((IObjectContextAdapter)db)\n            .ObjectContext\n            .Translate<Blog>(reader, \"Blogs\", MergeOption.AppendOnly);   \n\n\n        foreach (var item in blogs)\n        {\n            Console.WriteLine(item.Name);\n        }        \n\n        // Move to second result set and read Posts\n        reader.NextResult();\n        var posts = ((IObjectContextAdapter)db)\n            .ObjectContext\n            .Translate<Post>(reader, \"Posts\", MergeOption.AppendOnly);\n\n\n        foreach (var item in posts)\n        {\n            Console.WriteLine(item.Title);\n        }\n    }\n    finally\n    {\n        db.Database.Connection.Close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modified EDMX Function Import XML\nDESCRIPTION: XML snippet showing the modified function import in the EDMX file, configured to map the GetAllBlogsAndPosts stored procedure to return two collections: Blog and Post entities.  This requires manual editing of the EDMX file. Note: This snippet replaces the original function import.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/multiple-result-sets.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<FunctionImport Name=\"GetAllBlogsAndPosts\">\n  <ReturnType EntitySet=\"Blogs\" Type=\"Collection(BlogModel.Blog)\" />\n  <ReturnType EntitySet=\"Posts\" Type=\"Collection(BlogModel.Post)\" />\n</FunctionImport>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Pagination with Skip and Take in EF Core\nDESCRIPTION: This snippet demonstrates an inefficient way to implement pagination using the Skip and Take LINQ operators, which translates to OFFSET and LIMIT in SQL. This method is not recommended for Azure Cosmos DB due to its performance impact.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar position = 20;\nvar nextPage = await context.Session\n    .OrderBy(s => s.Id)\n    .Skip(position)\n    .Take(10)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Manual Optimization of Null Comparisons in C#\nDESCRIPTION: Demonstrates manual optimization techniques for handling null comparisons in queries, specifically by explicitly filtering out null values to simplify the generated SQL. This avoids complex null checks within the query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/null-comparisons.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Comparison with equality and inequality\nvar query8 = context.Entities.Where(e => e.String1 != e.String2 || e.String1.Length == e.String2.Length);\n\n// Explicitly check for null values to make query simpler.\nvar query9 = context.Entities.Where(e => e.String1 != null && e.String2 != null && (e.String1 != e.String2 || e.String1.Length == e.String2.Length));\n```\n\n----------------------------------------\n\nTITLE: Querying Pubs that Stock Any Lager\nDESCRIPTION: This code snippet shows how to query `Pub` entities to find pubs that stock any one of a variety of lagers, using `Any` and `Contains` methods. The translated SQL uses `OpenJson` on both the parameter and the column.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nvar beers = new[] { \"Carling\", \"Heineken\", \"Stella Artois\", \"Carlsberg\" };\nvar pubsWithLager = await context.Pubs\n    .Where(e => beers.Any(b => e.Beers.Contains(b)))\n    .Select(e => e.Name)\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Original Collection Navigation Property\nDESCRIPTION: Shows the default code generated by EF Core for a collection navigation property, using ICollection<T> and initializing it with a new List<T>.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual ICollection<Album> Albums { get; } = new List<Album>();\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Lazy Loading of Customers\nDESCRIPTION: This SQL query is generated by Entity Framework Core when using lazy loading to retrieve customers from the UK. It retrieves only the customer data without the associated orders. The orders are loaded separately when accessed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n[Extent1].[CustomerID] AS [CustomerID],\n[Extent1].[CompanyName] AS [CompanyName],\n[Extent1].[ContactName] AS [ContactName],\n[Extent1].[ContactTitle] AS [ContactTitle],\n[Extent1].[Address] AS [Address],\n[Extent1].[City] AS [City],\n[Extent1].[Region] AS [Region],\n[Extent1].[PostalCode] AS [PostalCode],\n[Extent1].[Country] AS [Country],\n[Extent1].[Phone] AS [Phone],\n[Extent1].[Fax] AS [Fax]\nFROM [dbo].[Customers] AS [Extent1]\nWHERE N'UK' = [Extent1].[Country]\n```\n\n----------------------------------------\n\nTITLE: ComplexProperty Element Example (MSL)\nDESCRIPTION: This MSL example demonstrates how to map a complex property ('Name' of type 'SchoolModel.FullName') of an entity ('Person') to columns in the underlying database. It shows the use of the ComplexProperty element and its nested ScalarProperty elements to define the mapping between the complex type's properties (FirstName, LastName) and the corresponding columns in the 'Person' table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"People\">\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"HireDate\" ColumnName=\"HireDate\" />\n       <ScalarProperty Name=\"EnrollmentDate\" ColumnName=\"EnrollmentDate\" />\n       <ComplexProperty Name=\"Name\" TypeName=\"SchoolModel.FullName\">\n         <ScalarProperty Name=\"FirstName\" ColumnName=\"FirstName\" />\n         <ScalarProperty Name=\"LastName\" ColumnName=\"LastName\" />  \n       </ComplexProperty>\n     </MappingFragment>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Testing Adding Employee to Repository in C#\nDESCRIPTION: This test method checks if the Create action adds a new employee to the repository by verifying the repository contains the new employee after calling the Create action.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\n    public void ShouldAddNewEmployeeToRepository() {\n    \t_controller.Create(_newEmployee);\n    \tAssert.IsTrue(_repository.Contains(_newEmployee));\n    }\n```\n\n----------------------------------------\n\nTITLE: Tag LINQ Query in EF Core with C#\nDESCRIPTION: This code snippet demonstrates how to tag a LINQ query using the `TagWith()` method. This allows for easier correlation of LINQ queries with generated SQL queries in logs.  The provided tag will appear as a comment in the SQL output.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.2.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar nearestFriends =\n    await (from f in context.Friends.TagWith(@\"This is my spatial query!\")\n    orderby f.Location.Distance(myLocation) descending\n    select f).Take(5).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of Statistical Aggregates\nDESCRIPTION: This SQL query represents the translated form of the C# code snippet that uses EF Core 7 statistical aggregate functions. The query calculates statistical aggregates on the DownloadCount column from the Downloads table grouped by Uploader Id.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_122\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [u].[Id] AS [Author], COALESCE(SUM([d].[DownloadCount]), 0) AS [TotalCost], AVG(CAST([d].[DownloadCount] AS float)) AS [AverageViews], VARP([d].[DownloadCount]) AS [VariancePopulation], VAR([d].[DownloadCount]) AS [VarianceSample], STDEVP([d].[DownloadCount]) AS [StandardDeviationPopulation], STDEV([d].[DownloadCount]) AS [StandardDeviationSample]\nFROM [Downloads] AS [d]\nINNER JOIN [Uploader] AS [u] ON [d].[UploaderId] = [u].[Id]\nGROUP BY [u].[Id]\n```\n\n----------------------------------------\n\nTITLE: Setting Max Length to Longest Discriminator Value in C#\nDESCRIPTION: This code defines an IModelFinalizingConvention that sets the maximum length of the discriminator column to the length of the longest discriminator value used in the inheritance hierarchy. It finds all entity types, gets their discriminator property, and sets the max length to the length of the longest discriminator value among derived types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class DiscriminatorLengthConvention3 : IModelFinalizingConvention\n{\n    public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context)\n    {\n        foreach (var entityType in modelBuilder.Metadata.GetEntityTypes()\n                     .Where(entityType => entityType.BaseType == null))\n        {\n            var discriminatorProperty = entityType.FindDiscriminatorProperty();\n            if (discriminatorProperty != null\n                && discriminatorProperty.ClrType == typeof(string))\n            {\n                var maxDiscriminatorValueLength =\n                    entityType.GetDerivedTypesInclusive().Select(e => ((string)e.GetDiscriminatorValue()!).Length).Max();\n\n                discriminatorProperty.Builder.HasMaxLength(maxDiscriminatorValueLength);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Blog class in C#\nDESCRIPTION: This C# code defines a `Blog` class with properties `Name` and `SiteUri`. It represents a blog entity in the application.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public string Name { get; set; }\n    public virtual Uri SiteUri { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Expectations with Moq C#\nDESCRIPTION: This code snippet demonstrates how to use Moq to set up expectations on a mock repository. It configures the mock to return a specific `Employee` object when the `FindById` method is invoked with a specific ID. This allows for controlled behavior during testing.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\n    public void MockSample() {\n        Mock<IRepository<Employee>> mock =\n            new Mock<IRepository<Employee>>();\n        mock.Setup(m => m.FindById(5))\n            .Returns(new Employee {Id = 5});\n        IRepository<Employee> repository = mock.Object;\n        var employee = repository.FindById(5);\n        Assert.IsTrue(employee.Id == 5);\n    }\n```\n\n----------------------------------------\n\nTITLE: TPH: Single Leaf Type Query - SQL\nDESCRIPTION: SQL query generated using TPH to retrieve entities of a single leaf type ('Cat').  It filters the 'Animals' table to retrieve only 'Cat' entities based on the 'Discriminator'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_54\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [a].[Id], [a].[Discriminator], [a].[FoodId], [a].[Name], [a].[Vet], [a].[EducationLevel]\nFROM [Animals] AS [a]\nWHERE [a].[Discriminator] = N'Cat'\n```\n\n----------------------------------------\n\nTITLE: SQL Output Example\nDESCRIPTION: This SQL code snippet shows an example of the SQL generated by EF Core after using query tags. The query tags are rendered as comments in the SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tags.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n-- GetNearestPeople\n\n-- Limit\n\n-- This is a multi-line\n-- string\n\nSELECT TOP(@__p_1) [p].[Id], [p].[Location]\nFROM [People] AS [p]\nORDER BY [p].[Location].STDistance(@__myLocation_0) DESC\n```\n\n----------------------------------------\n\nTITLE: Adding a New Entity to the Context (EntityState.Added) - C#\nDESCRIPTION: This code shows how to add a new entity to the context by setting its state to `EntityState.Added`. This method achieves the same result as using the `Add` method: the entity will be inserted during `SaveChanges`. It requires an existing `BloggingContext` and `Blog` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/change-tracking/entity-state.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = new Blog { Name = \"ADO.NET Blog\" };\n    context.Entry(blog).State = EntityState.Added;\n    context.SaveChanges();\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Join and Complex Select SQL\nDESCRIPTION: This SQL code translates the C# query involving the join and complex selection process.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_76\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [t].[Id], [t].[Age], [t].[Style], [t0].[Id], [t0].[Style], [t0].[Age], [t0].[Id0]\nFROM (\n    SELECT [p].[Id], [s].[Age], [s].[Style]\n    FROM [People] AS [p]\n    INNER JOIN [Shoes] AS [s] ON [p].[Age] = [s].[Age]\n    GROUP BY [p].[Id], [s].[Style], [s].[Age]\n) AS [t]\nLEFT JOIN (\n    SELECT [s0].[Id], [s0].[Style], [s0].[Age], [p0].[Id] AS [Id0]\n    FROM [People] AS [p0]\n    INNER JOIN [Shoes] AS [s0] ON [p0].[Age] = [s0].[Age]\n```\n\n----------------------------------------\n\nTITLE: Querying Embedded Collections in EF Core\nDESCRIPTION: This code snippet demonstrates querying a collection embedded within a JSON document. It returns all posts that contain any of the specified search terms in their `Metadata.TopSearches` collection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nvar searchTerms = new[] { \"Search #2\", \"Search #3\", \"Search #5\", \"Search #8\", \"Search #13\", \"Search #21\", \"Search #34\" };\n\nvar postsWithSearchTerms = await context.Posts\n    .Where(post => post.Metadata!.TopSearches.Any(s => searchTerms.Contains(s.Term)))\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Precision Attribute Usage C#\nDESCRIPTION: Illustrates using the Precision attribute to configure the precision and scale of a decimal property in the database. Requires EF Core 6.0 or later.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\npublic class Product\n{\n    public int Id { get; set; }\n\n    [Precision(precision: 10, scale: 2)]\n    public decimal Price { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Context Initialized Log Level Change (Previous)\nDESCRIPTION: This snippet demonstrates the log level for the ContextInitialized event in previous EF Core releases. It shows the log output at the Information level.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_145\n\nLANGUAGE: output\nCODE:\n```\ninfo: 10/7/2022 12:30:34.757 CoreEventId.ContextInitialized[10403] (Microsoft.EntityFrameworkCore.Infrastructure)\n      Entity Framework Core 7.0.0 initialized 'BlogsContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:7.0.0' with options: SensitiveDataLoggingEnabled using NetTopologySuite\n```\n\n----------------------------------------\n\nTITLE: AssociationSet End Element Example (CSDL)\nDESCRIPTION: This XML snippet shows how End elements are used within AssociationSet elements in CSDL. The EntitySet attribute links the association end to a specific entity set within the EntityContainer. No external dependencies are required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n <EntityContainer Name=\"BooksContainer\" >\n   <EntitySet Name=\"Books\" EntityType=\"BooksModel.Book\" />\n   <EntitySet Name=\"Publishers\" EntityType=\"BooksModel.Publisher\" />\n   <EntitySet Name=\"Authors\" EntityType=\"BooksModel.Author\" />\n   <AssociationSet Name=\"PublishedBy\" Association=\"BooksModel.PublishedBy\">\n     <End Role=\"Book\" EntitySet=\"Books\" />\n     <End Role=\"Publisher\" EntitySet=\"Publishers\" />\n   </AssociationSet>\n   <AssociationSet Name=\"WrittenBy\" Association=\"BooksModel.WrittenBy\">\n     <End Role=\"Book\" EntitySet=\"Books\" />\n     <End Role=\"Author\" EntitySet=\"Authors\" />\n   </AssociationSet>\n </EntityContainer>\n```\n\n----------------------------------------\n\nTITLE: Create Database Tables using SQL\nDESCRIPTION: This SQL script creates the Categories and Products tables with a foreign key relationship. It defines the schema for the database used in the Database First approach, including primary keys, indexes, and constraints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/databinding/winforms.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n    CREATE TABLE [dbo].[Categories] (\n        [CategoryId] [int] NOT NULL IDENTITY,\n        [Name] [nvarchar](max),\n        CONSTRAINT [PK_dbo.Categories] PRIMARY KEY ([CategoryId])\n    )\n\n    CREATE TABLE [dbo].[Products] (\n        [ProductId] [int] NOT NULL IDENTITY,\n        [Name] [nvarchar](max),\n        [CategoryId] [int] NOT NULL,\n        CONSTRAINT [PK_dbo.Products] PRIMARY KEY ([ProductId])\n    )\n\n    CREATE INDEX [IX_CategoryId] ON [dbo].[Products]([CategoryId])\n\n    ALTER TABLE [dbo].[Products] ADD CONSTRAINT [FK_dbo.Products_dbo.Categories_CategoryId] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Categories] ([CategoryId]) ON DELETE CASCADE\n```\n\n----------------------------------------\n\nTITLE: Using UTC Time in Logs (C#)\nDESCRIPTION: This C# snippet demonstrates how to configure EF Core logging to use UTC timestamps instead of local time. It utilizes `DbContextLoggerOptions.DefaultWithUtcTime` to specify UTC time formatting when logging to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.LogTo(\n        Console.WriteLine,\n        LogLevel.Debug,\n        DbContextLoggerOptions.DefaultWithUtcTime);\n```\n\n----------------------------------------\n\nTITLE: Modify EF Designer T4 Template for Virtual DbSet (C#)\nDESCRIPTION: Modifies the EF Designer's T4 template to add the 'virtual' keyword to DbSet properties in the generated DbContext. This allows mocking frameworks to override the DbSet properties with mocked implementations during testing.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/mocking.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic string DbSet(EntitySet entitySet)\n{\n    return string.Format(\n        CultureInfo.InvariantCulture,\n        \"{0} virtual DbSet<{1}> {2} {{ get; set; }}\",\n        Accessibility.ForReadOnlyProperty(entitySet),\n        _typeMapper.GetTypeName(entitySet.ElementType),\n        _code.Escape(entitySet));\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Nullable Comparisons C#\nDESCRIPTION: This C# code snippet demonstrates a query with nullable comparisons in Entity Framework. It showcases how EF handles nullable variables against nullable properties on the entity by default using C# null comparison semantics, which generates potentially complex SQL. The snippet also mentions the use of database null semantics as an alternative approach.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nint? categoryId = 7;\n            int? supplierId = 8;\n            decimal? unitPrice = 0;\n            short? unitsInStock = 100;\n            short? unitsOnOrder = 20;\n            short? reorderLevel = null;\n\n            var q = from p incontext.Products\n                    where p.Category.CategoryName == \"Beverages\"\n                          || (p.CategoryID == categoryId\n                                || p.SupplierID == supplierId\n                                || p.UnitPrice == unitPrice\n                                || p.UnitsInStock == unitsInStock\n                                || p.UnitsOnOrder == unitsOnOrder\n                                || p.ReorderLevel == reorderLevel)\n                    select p;\n\n            var r = q.ToList();\n```\n\n----------------------------------------\n\nTITLE: Finding Walks with a Drink at the Closest Pub\nDESCRIPTION: This code snippet demonstrates how to query `Walk` entities and calculate how often dog walks end with a visit to the closest pub, by comparing the dates of the walks and pub visits.  It counts the matching dates between a walk and its closest pub.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nvar walksWithADrink = await context.Walks.Select(\n    w => new\n    {\n        WalkName = w.Name,\n        PubName = w.ClosestPub.Name,\n        Count = w.DaysVisited.Count(v => w.ClosestPub.DaysVisited.Contains(v)),\n        TotalCount = w.DaysVisited.Count\n    }).ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Resolving Additional Services using DbProviderServices.AddDependencyResolver C#\nDESCRIPTION: This code demonstrates how to resolve additional services in a DbProviderServices implementation by calling AddDependencyResolver in the constructor. It shows registering singleton services and execution strategy resolvers, crucial for extending provider functionality within Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/provider-model.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate SqlProviderServices()\n{\n    AddDependencyResolver(new SingletonDependencyResolver<IDbConnectionFactory>(\n        new SqlConnectionFactory()));\n\n    AddDependencyResolver(new ExecutionStrategyResolver<DefaultSqlExecutionStrategy>(\n        \"System.data.SqlClient\", null, () => new DefaultSqlExecutionStrategy()));\n\n    AddDependencyResolver(new SingletonDependencyResolver<Func<MigrationSqlGenerator>>(\n        () => new SqlServerMigrationSqlGenerator(), \"System.data.SqlClient\"));\n\n    AddDependencyResolver(new SingletonDependencyResolver<DbSpatialServices>(\n        SqlSpatialServices.Instance,\n        k =>\n        {\n            var asSpatialKey = k as DbProviderInfo;\n            return asSpatialKey == null\n                || asSpatialKey.ProviderInvariantName == ProviderInvariantName;\n        }));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the EF Model Classes in C#\nDESCRIPTION: Defines the EF model classes `BloggingContext`, `Blog`, and `Post`. `BloggingContext` inherits from `DbContext` and implements `IBloggingContext`. `Blog` and `Post` represent the database entities with properties for their respective columns and relationships. The code uses `System.Collections.Generic` and `System.Data.Entity` namespaces.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/writing-test-doubles.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Data.Entity;\n\nnamespace TestingDemo\n{\n    public class BloggingContext : DbContext, IBloggingContext\n    {\n        public DbSet<Blog> Blogs { get; set; }\n        public DbSet<Post> Posts { get; set; }\n    }\n\n    public class Blog\n    {\n        public int BlogId { get; set; }\n        public string Name { get; set; }\n        public string Url { get; set; }\n\n        public virtual List<Post> Posts { get; set; }\n    }\n\n    public class Post\n    {\n        public int PostId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n        public int BlogId { get; set; }\n        public virtual Blog Blog { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Specific Event IDs in EF Core\nDESCRIPTION: This code snippet demonstrates how to filter log messages to only include those associated with specific event IDs. It logs messages for context initialization and disposal.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .LogTo(Console.WriteLine, new[] { CoreEventId.ContextDisposed, CoreEventId.ContextInitialized });\n```\n\n----------------------------------------\n\nTITLE: Configuring required one-to-many from dependent - C#\nDESCRIPTION: This C# code configures a required one-to-many relationship between `Blog` and `Post` entities using the `ModelBuilder` in `OnModelCreating`. It starts the configuration from the dependent end (`Post`) using `HasOne` and `WithMany` to define the relationship, setting the foreign key and requiring it.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasOne(e => e.Blog)\n        .WithMany(e => e.Posts)\n        .HasForeignKey(e => e.BlogId)\n        .IsRequired();\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve Concurrency Conflicts - C#\nDESCRIPTION: Illustrates how to handle DbUpdateConcurrencyException and resolve concurrency conflicts by merging changes. The code retrieves current, original, and database values, then retries the update until no conflicts occur.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Main](../../../samples/core/Saving/Concurrency/ConflictResolutionSample.cs?name=ConcurrencyHandlingCode&highlight=33-34)]\n```\n\n----------------------------------------\n\nTITLE: SQL Query Generated with Required Navigation and Filter in EF Core\nDESCRIPTION: This SQL query is generated when using `Include` to load related `Blog` entities along with `Post` entities, and a global query filter is defined on the `Blog` entity. The use of `INNER JOIN` means that only posts associated with blogs that satisfy the filter condition will be returned. The filter is `WHERE [b].[Url] LIKE N'%fish%'`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[PostId], [p].[BlogId], [p].[Content], [p].[IsDeleted], [p].[Title], [t].[BlogId], [t].[Name], [t].[Url]\nFROM [Posts] AS [p]\nINNER JOIN (\n    SELECT [b].[BlogId], [b].[Name], [b].[Url]\n    FROM [Blogs] AS [b]\n    WHERE [b].[Url] LIKE N'%fish%'\n) AS [t] ON [p].[BlogId] = [t].[BlogId]\n```\n\n----------------------------------------\n\nTITLE: Integer Key Primary Key Convention - C#\nDESCRIPTION: Configures all integer properties named \"Key\" to be the primary key.  This refines the previous example to only apply to integer Key properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Properties<int>()\n            .Where(p => p.Name == \"Key\")\n            .Configure(p => p.IsKey());\n```\n\n----------------------------------------\n\nTITLE: Projecting with JSON Array Indexing, Nullable Result\nDESCRIPTION: This code snippet demonstrates projecting properties from a JSON array into the final result with nullable `DateOnly` types. If the specified index is out of bounds in the JSON array, `JSON_VALUE` will return `NULL`, which is handled by the nullable type casting.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nvar postsAndRecentUpdatesNullable = await context.Posts\n    .Select(p => new\n    {\n        p.Title,\n        LatestUpdate = (DateOnly?)p.Metadata!.Updates[0].UpdatedOn,\n        SecondLatestUpdate = (DateOnly?)p.Metadata.Updates[1].UpdatedOn\n    })\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: In-Memory Unit of Work Implementation in C#\nDESCRIPTION: This code defines a fake implementation of the IUnitOfWork interface called InMemoryUnitOfWork. It provides in-memory storage for Employee and TimeCard objects using IObjectSet interfaces. The Committed property allows verification of commit operations during testing.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class InMemoryUnitOfWork : IUnitOfWork {\n    \tpublic InMemoryUnitOfWork() {\n    \t\tCommitted = false;\n    \t}\n    \tpublic IObjectSet<Employee> Employees {\n    \t\tget;\n    \t\tset;\n    \t}\n\n    \tpublic IObjectSet<TimeCard> TimeCards {\n    \t\tget;\n    \t\tset;\n    \t}\n\n    \tpublic bool Committed { get; set; }\n    \tpublic void Commit() {\n    \t\tCommitted = true;\n    \t}\n    }\n```\n\n----------------------------------------\n\nTITLE: Initialize user secrets in .NET Core CLI\nDESCRIPTION: Initializes user secrets and sets a connection string using the .NET Core CLI. This allows storing sensitive information, such as database passwords, outside of the main configuration files during development.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/connection-strings.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet user-secrets init\ndotnet user-secrets set ConnectionStrings:YourDatabaseAlias \"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=YourDatabase\"\n```\n\n----------------------------------------\n\nTITLE: Registering EF Provider via Config File - XML\nDESCRIPTION: This XML snippet demonstrates how to register an Entity Framework provider in the app.config or web.config file. The `invariantName` attribute specifies the ADO.NET provider's invariant name, and the `type` attribute indicates the assembly-qualified name of the provider type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/index.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <entityFramework>\n       <providers>\n         <provider invariantName=\"My.Invariant.Name\" type=\"MyProvider.MyProviderServices, MyAssembly\" />\n       </providers>\n    </entityFramework>\n```\n\n----------------------------------------\n\nTITLE: Posts Table with Required Relationship SQL\nDESCRIPTION: Defines a Posts table with a required foreign key relationship to the Blogs table. Used to demonstrate scaffolding of non-nullable (required) relationships with nullable reference types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_53\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Posts] (\n    [Id] int NOT NULL IDENTITY,\n    [Title] nvarchar(max) NOT NULL,\n    [Contents] nvarchar(max) NOT NULL,\n    [PostedOn] datetime2 NOT NULL,\n    [UpdatedOn] datetime2 NULL,\n    [BlogId] int NOT NULL,\n    CONSTRAINT [PK_Posts] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Posts_Blogs_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [Blogs] ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Finding Direct Ancestor - SQL\nDESCRIPTION: The generated SQL query finds the direct ancestor. It selects the PathFromPatriarch from the Halflings table where the name matches the input and then uses GetAncestor(1) on that path.  It returns the Id, Name, PathFromPatriarch, and YearOfBirth of the found ancestor.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_72\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP(2) [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch] = (\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0).GetAncestor(1)\n```\n\n----------------------------------------\n\nTITLE: Translate Math.Min to LEAST - SQL\nDESCRIPTION: This snippet shows the SQL translation of the C# Math.Min example when targeting SQL Server 2022. It utilizes the LEAST function to find the minimum between the count of days visited and the count of beers in the closest pub.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [w].[Id], [w].[ClosestPubId], [w].[DaysVisited], [w].[Name], [w].[Terrain]\nFROM [Walks] AS [w]\nINNER JOIN [Pubs] AS [p] ON [w].[ClosestPubId] = [p].[Id]\nWHERE LEAST((\n    SELECT COUNT(*)\n    FROM OPENJSON([w].[DaysVisited]) AS [d]), (\n    SELECT COUNT(*)\n    FROM OPENJSON([p].[Beers]) AS [b])) > 4\n```\n\n----------------------------------------\n\nTITLE: TPC Database Schema - SQL\nDESCRIPTION: This SQL script shows the database schema created when using Table-per-Concrete-Type (TPC) inheritance mapping in EF Core. Each table contains columns for all properties of that type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Blogs] (\n    [BlogId] int NOT NULL DEFAULT (NEXT VALUE FOR [BlogSequence]),\n    [Url] nvarchar(max) NULL,\n    CONSTRAINT [PK_Blogs] PRIMARY KEY ([BlogId])\n);\n\nCREATE TABLE [RssBlogs] (\n    [BlogId] int NOT NULL DEFAULT (NEXT VALUE FOR [BlogSequence]),\n    [Url] nvarchar(max) NULL,\n    [RssUrl] nvarchar(max) NULL,\n    CONSTRAINT [PK_RssBlogs] PRIMARY KEY ([BlogId])\n);\n```\n\n----------------------------------------\n\nTITLE: Define Book Entity with Primitive Collection Properties\nDESCRIPTION: This code snippet defines a Book entity with properties that are collections of primitive types (string). It includes an IList<string> for Quotes and an IDictionary<string, string> for Notes to demonstrate how EF Core can automatically map these collections to Cosmos DB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic class Book\n{\n    public Guid Id { get; set; }\n    public string Title { get; set; }\n    public IList<string> Quotes { get; set; }\n    public IDictionary<string, string> Notes { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping ShippingAddress to Separate Columns\nDESCRIPTION: This snippet shows how to explicitly map the ShippingAddress property to separate columns for derived types (BulkOrder and Order) using the ModelBuilder in EF Core 3.0. It specifies column names for ShippingAddress for each entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Ignore<OrderBase>();\n    modelBuilder.Entity<EntityBase>();\n    modelBuilder.Entity<BulkOrder>()\n        .Property(o => o.ShippingAddress).HasColumnName(\"BulkShippingAddress\");\n    modelBuilder.Entity<Order>()\n        .Property(o => o.ShippingAddress).HasColumnName(\"ShippingAddress\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tag Changes During Document Creation - C#\nDESCRIPTION: This code snippet handles changes to tags when a document is created, updated, or deleted. The method checks if a document was inserted or updated, and based on this, it either loads/creates tag metadata, adds/removes the document summary, and updates the metadata. The algorithm as implemented works for inserts, updates, and deletes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task SyncTagsAsync(Document document, Document? originalDocument = null)\n{\n    var newTags = document.Tags?.ToHashSet() ?? new HashSet<string>();\n    var oldTags = originalDocument?.Tags?.ToHashSet() ?? new HashSet<string>();\n\n    var tagsToRemove = oldTags.Except(newTags).ToList();\n    var tagsToAdd = newTags.Except(oldTags).ToList();\n\n    foreach (var tagToRemove in tagsToRemove)\n    {\n        var tagMetadata = await _context.FindMetadataAsync<TagMetadata>(tagToRemove);\n        if (tagMetadata != null)\n        {\n            tagMetadata.DocumentSummaries.Remove(document.GetSummary());\n        }\n    }\n\n    foreach (var tagToAdd in tagsToAdd)\n    {\n        var tagMetadata = await _context.AssignMetadataAsync(tagToAdd, () => new TagMetadata() { DocumentSummaries = new HashSet<DocumentSummary>() });\n        tagMetadata.DocumentSummaries.Add(document.GetSummary());\n    }\n\n    if (originalDocument != null && document.Title != originalDocument.Title)\n    {\n        foreach (var tag in newTags)\n        {\n            var tagMetadata = await _context.FindMetadataAsync<TagMetadata>(tag);\n            if (tagMetadata != null)\n            {\n                var documentSummary = tagMetadata.DocumentSummaries.FirstOrDefault(d => d.DocumentId == document.DocumentId);\n                if (documentSummary != null)\n                {\n                    documentSummary.Title = document.Title;\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependent Element Example (SSDL)\nDESCRIPTION: This example demonstrates the use of the Dependent element within a ReferentialConstraint to specify the dependent end of a foreign key relationship. It defines the CustomerId column in the Order table as referencing the CustomerId column in the Customer table, establishing a foreign key constraint.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Association Name=\"FK_CustomerOrders\">\n  <End Role=\"Customers\"\n       Type=\"ExampleModel.Store.Customers\" Multiplicity=\"1\">\n    <OnDelete Action=\"Cascade\" />\n  </End>\n  <End Role=\"Orders\"\n       Type=\"ExampleModel.Store.Orders\" Multiplicity=\"*\" />\n  <ReferentialConstraint>\n    <Principal Role=\"Customers\">\n      <PropertyRef Name=\"CustomerId\" />\n    </Principal>\n    <Dependent Role=\"Orders\">\n      <PropertyRef Name=\"CustomerId\" />\n    </Dependent>\n  </ReferentialConstraint>\n</Association>\n```\n\n----------------------------------------\n\nTITLE: Create Users Table in SQL Database\nDESCRIPTION: This SQL script creates a new table named 'Users' in the database schema. The table includes columns for 'Username' (primary key) and 'DisplayName'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/workflows/database-first.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [dbo].[Users]\n(\n    [Username] NVARCHAR(50) NOT NULL PRIMARY KEY,  \n    [DisplayName] NVARCHAR(MAX) NULL\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring InverseProperty Attribute in EF6 Code First C#\nDESCRIPTION: This code demonstrates the usage of the `InverseProperty` attribute to resolve ambiguity when multiple relationships exist between two classes (Person and Post).  It specifies that `PostsWritten` refers to `CreatedBy` in the `Post` class and `PostsUpdated` refers to `UpdatedBy` in the `Post` class, preventing the creation of unnecessary foreign keys.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n[InverseProperty(\"CreatedBy\")]\npublic List<Post> PostsWritten { get; set; }\n\n[InverseProperty(\"UpdatedBy\")]\npublic List<Post> PostsUpdated { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Forcing Bundle Overwrite with EF Core\nDESCRIPTION: This command creates or overwrites an existing EF Core migration bundle, forcing the creation of a new executable even if one already exists. It requires the EF Core tools to be installed, and the presence of pending migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_14\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations bundle --force\n```\n\n----------------------------------------\n\nTITLE: Entity SQL Lookup Query Example (Navision Model)\nDESCRIPTION: This XML snippet demonstrates an example of a 'Lookup' query used with the Navision model. Lookup queries are simple queries without aggregations, designed to retrieve a small subset of data for direct access.  The query selects the top 4 distinct 'Idle_Time' values from the 'Session' entity set in the NavisionFKContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n  <Query complexity=\"Lookup\">\n    <CommandText>Select value distinct top(4) e.Idle_Time From NavisionFKContext.Session as e</CommandText>\n  </Query>\n```\n\n----------------------------------------\n\nTITLE: CollectionType Element returning Rows XML\nDESCRIPTION: This example showcases a model-defined function that employs the CollectionType element to specify the function returns a collection of rows. The RowType element defines the structure of the rows within the collection, with properties for FirstName and LastName.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"LastNamesAfter\">\n   <Parameter Name=\"someString\" Type=\"Edm.String\" />\n   <ReturnType>\n    <CollectionType>\n      <RowType>\n        <Property Name=\"FirstName\" Type=\"Edm.String\" Nullable=\"false\" />\n        <Property Name=\"LastName\" Type=\"Edm.String\" Nullable=\"false\" />\n      </RowType>\n    </CollectionType>\n   </ReturnType>\n   <DefiningExpression>\n             SELECT VALUE ROW(p.FirstName, p.LastName)\n             FROM SchoolEntities.People AS p\n             WHERE p.LastName &gt;= somestring\n   </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Configure Default Value with ValueGeneratedNever in EF Core (C#)\nDESCRIPTION: This code snippet configures a default value for a property in an EF Core entity and specifies that the value is never generated by EF Core. This is useful for defining database schema defaults without EF Core managing the values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n            .Entity<Bar>()\n            .Property(e => e.Count)\n            .HasDefaultValue(-1)\n            .ValueGeneratedNever();\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Key Without Partition Key\nDESCRIPTION: This code snippet demonstrates how to configure the primary key for an entity without including the partition key property in Azure Cosmos DB. This is used to revert to the pre-EF Core 5 behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasKey(b => b.Id);\n```\n\n----------------------------------------\n\nTITLE: Updating Guid Column to TEXT Format in SQLite\nDESCRIPTION: This SQL script migrates an existing SQLite database where Guid values are stored as BLOBs to the new format where Guids are stored as TEXT.  It extracts the individual bytes from the BLOB, rearranges them to match the TEXT representation, and updates the column. It targets rows where the column is of type BLOB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE MyTable\nSET GuidColumn = hex(substr(GuidColumn, 4, 1)) ||\n                 hex(substr(GuidColumn, 3, 1)) ||\n                 hex(substr(GuidColumn, 2, 1)) ||\n                 hex(substr(GuidColumn, 1, 1)) || '-' ||\n                 hex(substr(GuidColumn, 6, 1)) ||\n                 hex(substr(GuidColumn, 5, 1)) || '-' ||\n                 hex(substr(GuidColumn, 8, 1)) ||\n                 hex(substr(GuidColumn, 7, 1)) || '-' ||\n                 hex(substr(GuidColumn, 9, 2)) || '-' ||\n                 hex(substr(GuidColumn, 11, 6))\nWHERE typeof(GuidColumn) == 'blob';\n```\n\n----------------------------------------\n\nTITLE: SQL Generated by EF8 with Unnecessary Join\nDESCRIPTION: This SQL code shows the SQL generated by EF8 for querying customers with orders. Note the unnecessary LEFT JOIN to the DiscountedOrders table, which isn't needed for the query.  EF9 avoids this unnecessary join.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [c].[Id], [c].[Name]\nFROM [Customers] AS [c]\nWHERE EXISTS (\n    SELECT 1\n    FROM [Orders] AS [o]\n    LEFT JOIN [DiscountedOrders] AS [d] ON [o].[Id] = [d].[Id]\n    WHERE [c].[Id] = [o].[CustomerId])\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Named Join Table SQLite Schema SQL\nDESCRIPTION: Illustrates the resulting SQLite schema when the join table in a many-to-many relationship has been explicitly named. The `PostsToTagsJoinTable` is created with the appropriate primary and foreign key constraints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"PostsToTagsJoinTable\" (\n    \"PostsId\" INTEGER NOT NULL,\n    \"TagsId\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostsToTagsJoinTable\" PRIMARY KEY (\"PostsId\", \"TagsId\"),\n    CONSTRAINT \"FK_PostsToTagsJoinTable_Posts_PostsId\" FOREIGN KEY (\"PostsId\") REFERENCES \"Posts\" (\"Id\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostsToTagsJoinTable_Tags_TagsId\" FOREIGN KEY (\"TagsId\") REFERENCES \"Tags\" (\"Id\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Key as Primary Key Convention - C#\nDESCRIPTION: Configures all properties named \"Key\" to be the primary key for their respective entity types. It overrides the OnModelCreating method in the ProductContext to access the DbModelBuilder and apply the convention.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ProductContext : DbContext\n{\n    static ProductContext()\n    {\n        Database.SetInitializer(new DropCreateDatabaseIfModelChanges<ProductContext>());\n    }\n\n    public DbSet<Product> Products { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        modelBuilder.Properties()\n                    .Where(p => p.Name == \"Key\")\n                    .Configure(p => p.IsKey());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic LINQ Query Example (Unsupported)\nDESCRIPTION: This C# code demonstrates a dynamic LINQ query that is not supported by query precompilation. The `Where` operator is conditionally applied based on the `applyFilter` parameter, making static analysis impossible.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/nativeaot-and-precompiled-queries.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nIAsyncEnumerable<Blog> GetBlogs(BlogContext context, bool applyFilter)\n{\n    IQueryable<Blog> query = context.Blogs.OrderBy(b => b.Id);\n\n    if (applyFilter)\n    {\n        query = query.Where(b => b.Name != \"foo\");\n    }\n\n    return query.AsAsyncEnumerable();\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext Query with AsNoTracking - C#\nDESCRIPTION: This code demonstrates how to disable change tracking for a query using the DbContext API. By chaining the `AsNoTracking()` method, the query will not load objects into the ObjectStateManager, reducing overhead for read-only scenarios. This disables the object cache.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nvar productsForCategory = from p in context.Products.AsNoTracking()\n                                where p.Category.CategoryName == selectedCategory\n                                select p;\n```\n\n----------------------------------------\n\nTITLE: Update Database using EF Core CLI\nDESCRIPTION: This command updates the database to the latest migration using the Entity Framework Core command-line interface. The `--connection` parameter specifies the database connection string. This method is recommended for applying migrations to SQLite databases.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/limitations.md#_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef database update --connection \"Data Source=My.db\"\n```\n\n----------------------------------------\n\nTITLE: Simple Primary Key with Attribute\nDESCRIPTION: This snippet shows how to define a simple primary key using the PrimaryKey attribute.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_156\n\nLANGUAGE: C#\nCODE:\n```\n[PrimaryKey(nameof(PostKey))]\npublic class Post\n{\n    public int PostKey { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON with Renamed Discriminator\nDESCRIPTION: This JSON snippet showcases the change in EF Core 9.0 where the default discriminator property is renamed from `Discriminator` to `$type`, aligning with emerging JSON polymorphism standards.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1099,\n    \"$type\": \"Blog\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Additional Services by Overriding DbProviderServices.GetService C#\nDESCRIPTION: This snippet demonstrates resolving additional services directly by overriding the GetService method of DbProviderServices. This approach allows a provider to selectively provide services based on the requested type and key, providing fine-grained control over service resolution within Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/provider-model.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic override object GetService(Type type, object key)\n{\n    if (type == typeof(IDbConnectionFactory))\n    {\n        return new SqlConnectionFactory();\n    }\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Case Translation - SQL (EF9)\nDESCRIPTION: This SQL query showcases the optimized output generated by EF Core 9, with the nested `CASE` blocks removed for a more efficient query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_66\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CASE\n    WHEN [b].[Id] > 5 THEN CAST(1 AS bit)\n    ELSE CAST(0 AS bit)\nEND\nFROM [Blogs] AS [b]\n```\n\n----------------------------------------\n\nTITLE: SQL Query with OrderBy (EF Core 6.0)\nDESCRIPTION: This SQL code shows the optimized query generated by EF Core 6.0. The unnecessary ORDER BY clause on Order ID is removed, improving performance.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_117\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [t].[Id], [t].[CustomerId], [t].[OrderDate]\nFROM [Customers] AS [c]\nLEFT JOIN (\n    SELECT [o].[Id], [o].[CustomerId], [o].[OrderDate]\n    FROM [Order] AS [o]\n    WHERE [o].[Id] = 1\n) AS [t] ON [c].[Id] = [t].[CustomerId]\nORDER BY [c].[Id]\n```\n\n----------------------------------------\n\nTITLE: stringValue.IndexOf with startIndex .NET to SQL translation\nDESCRIPTION: Shows the translation of stringValue.IndexOf(value, startIndex) in .NET to INDEX_OF(@stringValue, @value, @startIndex) in SQL when using Entity Framework Core with Cosmos DB. It searches for the first occurrence of a substring starting from a specific index.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_28\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.IndexOf(value, startIndex)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[INDEX_OF(@stringValue, @value, @startIndex)](/azure/cosmos-db/nosql/query/index-of)\n```\n\n----------------------------------------\n\nTITLE: Mapping Entity to Table - C#\nDESCRIPTION: Maps the 'Department' entity to a table named 't_Department' in the database using the `ToTable()` method. All properties of the Department entity will be mapped to columns in this table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Department>()  \n    .ToTable(\"t_Department\");\n```\n\n----------------------------------------\n\nTITLE: Add EntityFrameworkCore.Design package\nDESCRIPTION: This command adds the `Microsoft.EntityFrameworkCore.Design` package to your project. This package is required for using EF Core design-time features like migrations and scaffolding. Always use a version that matches the major version of the EF Core runtime packages.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/overview/install.md#_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.Design\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class with Navigation Properties in C#\nDESCRIPTION: This snippet defines a `Person` class with two navigation properties (`PostsWritten` and `PostsUpdated`) that represent the posts written and updated by a person. This class is used in conjunction with the `Post` class to demonstrate the use of the `InverseProperty` attribute when there are multiple relationships between entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-annotations.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public List<Post> PostsWritten { get; set; }\n        public List<Post> PostsUpdated { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Add System.Data.Spatial using statement\nDESCRIPTION: This code snippet adds a using statement for the System.Data.Spatial namespace, which is required to use the DbGeography type for spatial data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/spatial.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Spatial;\n```\n\n----------------------------------------\n\nTITLE: Finding Direct Descendents - C#\nDESCRIPTION: This code snippet finds the direct descendants of a halfling, given the halfling's name. It uses the `GetAncestor(1)` method to check if the ancestor of a descendant is the given halfling. It returns an `IQueryable` of `Halfling` objects that are direct descendants.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nIQueryable<Halfling> FindDirectDescendents(string name)\n            => context.Halflings.Where(\n                descendent => descendent.PathFromPatriarch.GetAncestor(1) == context.Halflings\n                    .Single(ancestor => ancestor.Name == name).PathFromPatriarch);\n```\n\n----------------------------------------\n\nTITLE: Entity SQL Expression in DefiningExpression\nDESCRIPTION: This snippet shows the Entity SQL expression used within the DefiningExpression. It calculates the difference between the current year and the year the book was published.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nYear(CurrentDateTime()) - Year(cast(book.PublishedDate as DateTime))\n```\n\n----------------------------------------\n\nTITLE: ManyToMany With Custom Shared Type Entity Type\nDESCRIPTION: Defines the Post, Tag, Blog, and Author entities, each containing a list of `JoinType` objects which serve as the join entity between the entities, establishing many-to-many relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n    public List<JoinType> PostTags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n    public List<Post> Posts { get; } = new();\n    public List<JoinType> PostTags { get; } = new();\n}\n\npublic class Blog\n{\n    public int Id { get; set; }\n    public List<Author> Authors { get; } = new();\n    public List<JoinType> BlogAuthors { get; } = new();\n}\n\npublic class Author\n{\n    public int Id { get; set; }\n    public List<Blog> Blogs { get; } = new();\n    public List<JoinType> BlogAuthors { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Add System.Data.Entity using statement\nDESCRIPTION: This code snippet adds a using statement for the System.Data.Entity namespace, which is required to use the DbContext and DbSet types for Entity Framework interaction.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/spatial.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Data.Entity;\n```\n\n----------------------------------------\n\nTITLE: Table Pruning Example with Table-Per-Type Inheritance (TPT)\nDESCRIPTION: This C# code snippet defines a model with table-per-type (TPT) inheritance mapping, including classes for Order, DiscountedOrder, and Customer.  It is part of the context definition to demonstrate the scenario.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    ...\n\n    public Customer Customer { get; set; }\n}\n\npublic class DiscountedOrder : Order\n{\n    public double Discount { get; set; }\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    ...\n\n    public List<Order> Orders { get; set; }\n}\n\npublic class BlogContext : DbContext\n{\n    ...\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Order>().UseTptMappingStrategy();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Compiled Queries in EF Core 2.0 (C#)\nDESCRIPTION: This code shows how to create and use explicitly compiled queries in EF Core 2.0 to cache the translation of queries for improved performance. A compiled query is created using `EF.CompileQuery`, which translates the query expression into a delegate.  This delegate can then be invoked multiple times with a `DbContext` instance and an `id` parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.0/index.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// Create an explicitly compiled query\nprivate static Func<CustomerContext, int, Customer> _customerById =\n    EF.CompileQuery((CustomerContext db, int id) =>\n        db.Customers\n            .Include(c => c.Address)\n            .Single(c => c.Id == id));\n\n// Use the compiled query by invoking it\nusing (var db = new CustomerContext())\n{\n   var customer = _customerById(db, 147);\n}\n```\n\n----------------------------------------\n\nTITLE: XUnit Collection Definition (C#)\nDESCRIPTION: This code defines an xUnit test collection, linking it to the `TransactionalTestDatabaseFixture`.  This allows tests that modify data to be grouped and executed sequentially, preventing interference when sharing the same database fixture.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[CollectionDefinition(\"TransactionalTests\")]\npublic class TransactionalTestsCollection : ICollectionFixture<TransactionalTestDatabaseFixture>\n{\n    // This class has no code, and is never created. Its purpose is simply\n    // to be the place to apply [CollectionDefinition] and all the\n    // ICollectionFixture<> interfaces.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Include Method for Eager Loading in C#\nDESCRIPTION: This code demonstrates how to use the custom `Include` extension method to eagerly load the `TimeCards` collection for each `Employee` entity. The `OrderBy` method is also used to sort the employees by hire date. This approach combines eager loading and sorting for optimized data retrieval.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n    public ViewResult Index() {\n        var model = _unitOfWork.Employees\n                               .Include(\"TimeCards\")\n                               .OrderBy(e => e.HireDate);\n        return View(model);\n    }\n```\n\n----------------------------------------\n\nTITLE: Include for Derived Types - C#\nDESCRIPTION: This C# code demonstrates how to use the `Include` method to specify navigation properties defined on derived types. It provides three options: using an explicit cast, using the `as` operator, or referencing the name of the navigation property as a string.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.1.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar option1 = context.People.Include(p => ((Student)p).School);\nvar option2 = context.People.Include(p => (p as Student).School);\nvar option3 = context.People.Include(\"School\");\n```\n\n----------------------------------------\n\nTITLE: Add EntitySet to CSDL - XML\nDESCRIPTION: This snippet represents the addition of an EntitySet and an EntityType to the CSDL (Conceptual Schema Definition Language) section of the .edmx file. It defines the GradeReport entity in the conceptual model, linking it to the SchoolModel namespace.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/defining-query.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <EntitySet Name=\"GradeReport\" EntityType=\"SchoolModel.GradeReport\" />\n\n    <EntityType Name=\"GradeReport\">\n    . . .\n    </EntityType>\n```\n\n----------------------------------------\n\nTITLE: ApplicationDbContext with DbContextOptions - C#\nDESCRIPTION: This snippet shows the implementation of the ApplicationDbContext class, which exposes a constructor that accepts a DbContextOptions<ApplicationDbContext> parameter.  This pattern is required when using a DbContext factory.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApplicationDbContext : DbContext\n{\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\n        : base(options)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Address Required Navigation Property in C#\nDESCRIPTION: This C# code demonstrates how to make the Address navigation property required within the Customer class. The [Required] attribute ensures that Address will always have a value after it is queried, even if all its properties are null. This prevents potential data loss issues.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    [Required]\n    public Address Address { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RowType within CollectionType in SSDL\nDESCRIPTION: This XML snippet demonstrates how to use the RowType element within a CollectionType to define the return type of a store function in SSDL. The RowType specifies the structure of each row in the collection, including property names, types, and nullability.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n   <Function Name=\"GetProducts\" IsComposable=\"true\" Schema=\"dbo\">\n     <ReturnType>\n       <CollectionType>\n         <RowType>\n           <Property Name=\"ProductID\" Type=\"int\" Nullable=\"false\" />\n           <Property Name=\"CategoryID\" Type=\"bigint\" Nullable=\"false\" />\n           <Property Name=\"ProductName\" Type=\"nvarchar\" MaxLength=\"40\" Nullable=\"false\" />\n           <Property Name=\"UnitPrice\" Type=\"money\" />\n           <Property Name=\"Discontinued\" Type=\"bit\" />\n         </RowType>\n       </CollectionType>\n     </ReturnType>\n   </Function>\n```\n\n----------------------------------------\n\nTITLE: LINQ GroupBy Query with Aggregates - C#\nDESCRIPTION: This C# code demonstrates the usage of the `GroupBy` LINQ operator in EF Core to compute aggregate functions like sum, minimum, maximum, and average. It groups orders by customer and employee ID and selects the aggregated values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.1.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Orders\n    .GroupBy(o => new { o.CustomerId, o.EmployeeId })\n    .Select(g => new\n        {\n          g.Key.CustomerId,\n          g.Key.EmployeeId,\n          Sum = g.Sum(o => o.Amount),\n          Min = g.Min(o => o.Amount),\n          Max = g.Max(o => o.Amount),\n          Avg = g.Average(o => o.Amount)\n        });\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Migrations Using MigrateDatabaseToLatestVersion\nDESCRIPTION: This snippet demonstrates how to configure automatic migrations using the MigrateDatabaseToLatestVersion initializer. This ensures that the database is automatically migrated to the latest version based on the Code First Migrations configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<contexts>\n  <context type=\"Blogging.BlogContext, MyAssembly\">\n    <databaseInitializer type=\"System.Data.Entity.MigrateDatabaseToLatestVersion`2[[Blogging.BlogContext, MyAssembly], [Blogging.Migrations.Configuration, MyAssembly]], EntityFramework\" />\n  </context>\n</contexts>\n```\n\n----------------------------------------\n\nTITLE: Resetting Table Name to Default\nDESCRIPTION: This code snippet shows how to reset a table name to its default in EF Core 5 when the entity is not mapped to a view or a DbFunction. It removes the `TableName` annotation to revert to the default naming convention.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<User>().Metadata.RemoveAnnotation(RelationalAnnotationNames.TableName);\n}\n```\n\n----------------------------------------\n\nTITLE: Customer and Order Model with BuyerId\nDESCRIPTION: This snippet demonstrates an alternative Customer and Order model where Order references Customer using BuyerId and Buyer navigation property. The BuyerId property will be used as a foreign key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer\n{\n    public int Id { get; set; }\n    public ICollection<Order> Orders { get; set; }\n}\n\npublic class Order\n{\n    public int Id { get; set; }\n    public int BuyerId { get; set; }\n    public Customer Buyer { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupBy and Ordering SQL\nDESCRIPTION: This SQL code translates the C# code that groups People by first name and returns ordered list of first last names.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_66\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT (\n    SELECT TOP(1) [p1].[LastName]\n    FROM [People] AS [p1]\n    WHERE ([p].[FirstName] = [p1].[FirstName]) OR ([p].[FirstName] IS NULL AND [p1].[FirstName] IS NULL))\nFROM [People] AS [p]\nGROUP BY [p].[FirstName]\nORDER BY (\n    SELECT TOP(1) [p1].[LastName]\n    FROM [People] AS [p1]\n    WHERE ([p].[FirstName] = [p1].[FirstName]) OR ([p].[FirstName] IS NULL AND [p1].[FirstName] IS NULL))\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Generation on Add or Update with Data Annotations in EF Core\nDESCRIPTION: This C# code snippet shows how to configure a property to have its value generated on add or update using data annotations in EF Core. The DatabaseGeneratedOption.Computed setting specifies that the value is computed by the database on insert or update.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/generated-properties.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\npublic class Blog\n{\n    public int BlogId { get; set; }\n\n    [DatabaseGenerated(DatabaseGeneratedOption.Computed)]\n    public DateTime LastUpdated { get; set; }\n    public string Url { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: IsUnicode Convention with Attribute Access - C#\nDESCRIPTION: Configures string properties based on the IsUnicode attribute's Unicode property. It retrieves the attribute from the property's ClrPropertyInfo and uses its value to configure the IsUnicode setting.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Properties()\n            .Where(x => x.GetCustomAttributes(false).OfType<IsUnicode>().Any())\n            .Configure(c => c.IsUnicode(c.ClrPropertyInfo.GetCustomAttribute<IsUnicode>().Unicode));\n```\n\n----------------------------------------\n\nTITLE: Defining ComplexType with Property Elements in CSDL\nDESCRIPTION: This XML snippet defines a ComplexType named 'Address' using CSDL.  It illustrates how to define a complex type with multiple properties, such as StreetAddress, City, StateOrProvince, Country, and PostalCode, each with its respective type and nullability.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n <ComplexType Name=\"Address\" >\n   <Property Type=\"String\" Name=\"StreetAddress\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"City\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"StateOrProvince\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Country\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"PostalCode\" Nullable=\"false\" />\n </ComplexType>\n```\n\n----------------------------------------\n\nTITLE: Updating Migration ID in History Table (SQL)\nDESCRIPTION: This SQL script updates the MigrationId column in the `__EFMigrationsHistory` table. It subtracts 543 from the year portion of the MigrationId, assuming the original ID was generated using the Thai Buddhist calendar. This is necessary to align the migration history with the Gregorian calendar.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE __EFMigrationsHistory\nSET MigrationId = CONCAT(LEFT(MigrationId, 4)  - 543, SUBSTRING(MigrationId, 4, 150))\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in an Explicit Transaction (C#)\nDESCRIPTION: Illustrates the old pattern for applying migrations resiliently using an explicit transaction and an execution strategy in EF Core. Starting with EF Core 9.0, this pattern throws an exception because `Migrate` and `MigrateAsync` calls will start a transaction themselves. Remove the external transaction if only one database call is being made or suppress the warning if an explicit transaction is truly required with other mechanisms to prevent concurrent migrations.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait dbContext.Database.CreateExecutionStrategy().ExecuteAsync(async () =>\n{\n    await using var transaction = await dbContext.Database.BeginTransactionAsync(cancellationToken);\n    await dbContext.Database.MigrateAsync(cancellationToken);\n    await transaction.CommitAsync(cancellationToken);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in SSDL (XML)\nDESCRIPTION: This snippet shows how to define a Function element in SSDL, corresponding to a stored procedure named UpdateOrderQuantity. It specifies parameters for the stored procedure and attributes like Aggregate, BuiltIn, NiladicFunction, IsComposable, ParameterTypeSemantics, and Schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"UpdateOrderQuantity\"\n           Aggregate=\"false\"\n           BuiltIn=\"false\"\n           NiladicFunction=\"false\"\n           IsComposable=\"false\"\n           ParameterTypeSemantics=\"AllowImplicitConversion\"\n           Schema=\"dbo\">\n   <Parameter Name=\"orderId\" Type=\"int\" Mode=\"In\" />\n   <Parameter Name=\"newQuantity\" Type=\"int\" Mode=\"In\" />\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SQL Performance Level - C#\nDESCRIPTION: This code snippet demonstrates how to specify the performance level (SERVICE_OBJECTIVE) of an Azure SQL Database using the `HasPerformanceLevel` extension method in Entity Framework Core. The performance level determines the compute resources allocated to the database. It is typically configured within the `OnModelCreating` method.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/azure-sql-database.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Blog>()\n    .HasPerformanceLevel(\"S0\");\n```\n\n----------------------------------------\n\nTITLE: Update-Database with Environment Argument (PowerShell)\nDESCRIPTION: Updates the database by applying pending migrations. This example shows how to specify the environment for ASP.NET Core projects using the `-Args` parameter, which is then passed to Program.CreateHostBuilder.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Database -Args '--environment Production'\n```\n\n----------------------------------------\n\nTITLE: SQL Query without Tagged Query Interceptor (SQL)\nDESCRIPTION: Shows the SQL generated by EF Core when a query is not tagged. The query is sent to the database unmodified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[Id], [b].[Name]\nFROM [Blogs] AS [b]\n```\n\n----------------------------------------\n\nTITLE: ComplexType Definition in CSDL\nDESCRIPTION: This example shows how to define a complex type named 'Address' with several properties of type 'String'. Complex types are used to group related properties and can be used as properties of entity types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n <ComplexType Name=\"Address\" >\n   <Property Type=\"String\" Name=\"StreetAddress\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"City\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"StateOrProvince\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Country\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"PostalCode\" Nullable=\"false\" />\n </ComplexType>\n```\n\n----------------------------------------\n\nTITLE: Defining the Beer Entity as an Owned Type (C#)\nDESCRIPTION: This code defines the `Beer` entity as an owned type.  It wraps a simple string representing the beer name and does not contain a primary key or foreign key itself. The `Beer` class serves as a wrapping type for the primitive value and enables mapping primitive collections to a separate table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\n[Owned]\npublic class Beer\n{\n    public Beer(string name)\n    {\n        Name = name;\n    }\n\n    public string Name { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Owned Entity Collection with C#\nDESCRIPTION: This code snippet demonstrates how to configure an owned entity collection using the `OwnsMany()` API in Entity Framework Core's model builder.  It configures the `Customer` entity to own a collection of `Addresses`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.2.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Customer>().OwnsMany(c => c.Addresses);\n```\n\n----------------------------------------\n\nTITLE: T4 Template - List Collection Generation\nDESCRIPTION: Shows the T4 code responsible for generating the List<T> collection navigation property. This is the segment of code to be modified for customization.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_4\n\nLANGUAGE: T4\nCODE:\n```\n    if (navigation.IsCollection)\n    {\n#>\n    public virtual ICollection<<#= targetType #>> <#= navigation.Name #> { get; } = new List<<#= targetType #>>();\n<#\n    }\n```\n\n----------------------------------------\n\nTITLE: No Limit C#\nDESCRIPTION: This example illustrates a query that returns all rows matching the filter, without any limit. The number of returned rows depends on the actual data in the database, potentially leading to performance issues with large datasets.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/performance/efficient-querying.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// By default, a query returns all rows that matches its filters:\nvar blogs = context.Blogs.Where(b => b.Rating > 3).ToList();\n```\n\n----------------------------------------\n\nTITLE: IDbDependencyResolver Interface in C#\nDESCRIPTION: Defines the IDbDependencyResolver interface, which Entity Framework uses to obtain implementations of required services. The GetService method is called by EF to retrieve concrete implementations of interfaces or base classes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/dependency-resolution.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IDbDependencyResolver\n{\n    object GetService(Type type, object key);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Default Value for Boolean Property\nDESCRIPTION: Configures the IsAuthorized property of the User entity to have a default value of true in the database. Demonstrates setting an explicit default value to a boolean property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder\n    .Entity<User>()\n    .Property(e => e.IsAuthorized)\n    .HasDefaultValue(true);\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Adding EF Provider and Default Connection Factory PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to add an EF provider and default connection factory to a project's configuration file using NuGet's install.ps1. It uses the Add-EFDefaultConnectionFactory and Add-EFProvider commands to automate configuration, streamlining provider integration with Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/provider-model.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam($installPath, $toolsPath, $package, $project)\nAdd-EFDefaultConnectionFactory $project 'System.Data.Entity.Infrastructure.SqlCeConnectionFactory, EntityFramework' -ConstructorArguments 'System.Data.SqlServerCe.4.0'\nAdd-EFProvider $project 'System.Data.SqlServerCe.4.0' 'System.Data.Entity.SqlServerCompact.SqlCeProviderServices, EntityFramework.SqlServerCompact'</pre>\n```\n\n----------------------------------------\n\nTITLE: Registering DbProviderServices in code - C#\nDESCRIPTION: This C# code snippet shows how to register a DbProviderServices implementation using code-based configuration in EF6. A DbConfiguration class is created, and within its constructor, the SetProviderServices method is called to register the EF provider, associating it with its invariant name and the instance of the provider services class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/provider-model.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyConfiguration : DbConfiguration\n{\n    public MyConfiguration()\n    {\n        SetProviderServices(\"My.New.Provider\", new MyProviderServices());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL for Inlined Subquery in EF9\nDESCRIPTION: This SQL demonstrates how EF Core 9 inlines the `dotnetPosts` IQueryable, resulting in a single database round trip. The COUNT query is integrated into the main SQL query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_47\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText], [p].[Metadata], (\n    SELECT COUNT(*)\n    FROM [Posts] AS [p0]\n    WHERE [p0].[Title] LIKE N'%.NET%')\nFROM [Posts] AS [p]\nWHERE [p].[Title] LIKE N'%.NET%' AND [p].[Id] > 2\nORDER BY (SELECT 1)\nOFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY\n```\n\n----------------------------------------\n\nTITLE: SQL Server Index Creation Example\nDESCRIPTION: This SQL code shows how a simple index is created on the BlogId column of the Post table in SQL Server. This is the default behavior when a one-to-many relationship exists.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX [IX_Post_BlogId] ON [Post] ([BlogId]);\n```\n\n----------------------------------------\n\nTITLE: Using FromSqlRaw with Cosmos DB extension\nDESCRIPTION: This snippet shows how to call FromSqlRaw extension method for Cosmos DB as a static method to avoid ambiguity when multiple providers are referenced. The code retrieves blogs from Cosmos DB using a raw SQL query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await CosmosQueryableExtensions.FromSqlRaw(context.Blogs, \"SELECT ...\").ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Entity SQL Single Aggregating Query Example (Navision Model)\nDESCRIPTION: This XML snippet showcases a 'SingleAggregating' query, a type of BI query containing multiple aggregations without subtotals, which calls scalar function 'NavisionFK.MDF_SessionLogin_Time_Max()'. This query returns a collection of datetime values representing minimum login times of the sessions. This function is defined within the model as demonstrated in the next code snippet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n  <Query complexity=\"SingleAggregating\">\n    <CommandText>NavisionFK.MDF_SessionLogin_Time_Max()</CommandText>\n  </Query>\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Optional with Shadow FK - C#\nDESCRIPTION: This code snippet defines an optional one-to-many relationship between `Blog` and `Post` entities using a shadow foreign key. The `BlogId` shadow property is automatically created as nullable (`int?`) because the navigation property `Blog` on the `Post` entity is nullable (`Blog?`).  This makes the relationship optional.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n        // Principal (parent)\n        public class Blog\n        {\n            public int Id { get; set; }\n            public ICollection<Post> Posts { get; } = new List<Post>();  // Collection navigation containing dependents\n        }\n\n        // Dependent (child)\n        public class Post\n        {\n            public int Id { get; set; }\n            public Blog? Blog { get; set; }                              // Optional reference navigation to principal\n        }\n```\n\n----------------------------------------\n\nTITLE: Get Table Name Convention C#\nDESCRIPTION: This method takes a Type object and returns a string that converts the type name from CamelCase to lowercase with underscores. It's used to customize the table naming convention in Entity Framework.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nprivate string GetTableName(Type type)\n{\n    var result = Regex.Replace(type.Name, \".[A-Z]\", m => m.Value[0] + \"_\" + m.Value[1]);\n\n    return result.ToLower();\n}\n```\n\n----------------------------------------\n\nTITLE: Modified EDMX Result Mapping XML\nDESCRIPTION: XML snippet showing the modified result mapping in the EDMX file, configured to map the GetAllBlogsAndPosts stored procedure to return Blog and Post entities. This configuration replaces the original result mapping section.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/multiple-result-sets.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ResultMapping>\n  <EntityTypeMapping TypeName =\"BlogModel.Blog\">\n    <ScalarProperty Name=\"BlogId\" ColumnName=\"BlogId\" />\n    <ScalarProperty Name=\"Name\" ColumnName=\"Name\" />\n    <ScalarProperty Name=\"Description\" ColumnName=\"Description\" />\n  </EntityTypeMapping>\n</ResultMapping>\n<ResultMapping>\n  <EntityTypeMapping TypeName=\"BlogModel.Post\">\n    <ScalarProperty Name=\"BlogId\" ColumnName=\"BlogId\" />\n    <ScalarProperty Name=\"PostId\" ColumnName=\"PostId\"/>\n    <ScalarProperty Name=\"Title\" ColumnName=\"Title\" />\n    <ScalarProperty Name=\"Text\" ColumnName=\"Text\" />\n  </EntityTypeMapping>\n</ResultMapping>\n```\n\n----------------------------------------\n\nTITLE: SQL Server Column Definition for UTF-8 String\nDESCRIPTION: This SQL script shows the SQL Server column definition generated by the previous C# code snippet. The `CommentText` column is defined as `varchar(max)` with a UTF-8 collation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_169\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Comment] (\n    [PostId] int NOT NULL,\n    [CommentId] int NOT NULL,\n    [CommentText] varchar(max) COLLATE LATIN1_GENERAL_100_CI_AS_SC_UTF8 NOT NULL,\n    CONSTRAINT [PK_Comment] PRIMARY KEY ([PostId], [CommentId])\n);\n```\n\n----------------------------------------\n\nTITLE: Excluding Entity Types with Data Annotations - C#\nDESCRIPTION: This code shows how to exclude an entity type from the EF Core model using the [NotMapped] data annotation. This prevents EF Core from creating a table for this type in the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[NotMapped]\npublic class NotMappedType\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Compatibility Level Check\nDESCRIPTION: This SQL query retrieves the name and compatibility level of all databases in the SQL Server instance.  It is used to verify if a database is running in a compatibility mode older than SQL Server 2016 (level 130). Requires `sys.databases` to be accessible.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT name, compatibility_level FROM sys.databases;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity by ID Using Custom Repository C#\nDESCRIPTION: This code snippet shows how to retrieve a single entity by its ID using the `FindById()` method of a custom repository. It simplifies the process of fetching an entity and passing it to the view.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\npublic ViewResult Details(int id) {\n        var model = _repository.FindById(id);\n        return View(model);\n    }\n```\n\n----------------------------------------\n\nTITLE: Install EF Core Tools using Package Manager Console\nDESCRIPTION: This command installs the Microsoft.EntityFrameworkCore.Tools package, providing the Package Manager Console tools for EF Core. These tools are used within Visual Studio to perform tasks such as creating migrations and updating the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/overview/install.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with EntityContainer, EntityType, and Association in SSDL\nDESCRIPTION: This XML snippet illustrates the Schema element in SSDL, showcasing how to define an EntityContainer, EntityTypes, and an Association within a storage model. It includes namespaces, aliases, providers, entity sets, association sets, keys, properties, documentation, and referential constraints.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n <Schema Namespace=\"ExampleModel.Store\"\n       Alias=\"Self\" Provider=\"System.Data.SqlClient\"\n       ProviderManifestToken=\"2008\"\n       xmlns=\"https://schemas.microsoft.com/ado/2009/11/edm/ssdl\">\n   <EntityContainer Name=\"ExampleModelStoreContainer\">\n     <EntitySet Name=\"Customers\"\n                EntityType=\"ExampleModel.Store.Customers\"\n                Schema=\"dbo\" />\n     <EntitySet Name=\"Orders\"\n                EntityType=\"ExampleModel.Store.Orders\"\n                Schema=\"dbo\" />\n     <AssociationSet Name=\"FK_CustomerOrders\"\n                     Association=\"ExampleModel.Store.FK_CustomerOrders\">\n       <End Role=\"Customers\" EntitySet=\"Customers\" />\n       <End Role=\"Orders\" EntitySet=\"Orders\" />\n     </AssociationSet>\n   </EntityContainer>\n   <EntityType Name=\"Customers\">\n     <Documentation>\n       <Summary>Summary here.</Summary>\n       <LongDescription>Long description here.</LongDescription>\n     </Documentation>\n     <Key>\n       <PropertyRef Name=\"CustomerId\" />\n     </Key>\n     <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n     <Property Name=\"Name\" Type=\"nvarchar(max)\" Nullable=\"false\" />\n   </EntityType>\n   <EntityType Name=\"Orders\" xmlns:c=\"http://CustomNamespace\">\n     <Key>\n       <PropertyRef Name=\"OrderId\" />\n     </Key>\n     <Property Name=\"OrderId\" Type=\"int\" Nullable=\"false\"\n               c:CustomAttribute=\"someValue\"/>\n     <Property Name=\"ProductId\" Type=\"int\" Nullable=\"false\" />\n     <Property Name=\"Quantity\" Type=\"int\" Nullable=\"false\" />\n     <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n     <c:CustomElement>\n       Custom data here.\n     </c:CustomElement>\n   </EntityType>\n   <Association Name=\"FK_CustomerOrders\">\n     <End Role=\"Customers\"\n          Type=\"ExampleModel.Store.Customers\" Multiplicity=\"1\">\n       <OnDelete Action=\"Cascade\" />\n     </End>\n     <End Role=\"Orders\"\n          Type=\"ExampleModel.Store.Orders\" Multiplicity=\"*\" />\n     <ReferentialConstraint>\n       <Principal Role=\"Customers\">\n         <PropertyRef Name=\"CustomerId\" />\n       </Principal>\n       <Dependent Role=\"Orders\">\n         <PropertyRef Name=\"CustomerId\" />\n       </Dependent>\n     </ReferentialConstraint>\n   </Association>\n   <Function Name=\"UpdateOrderQuantity\"\n             Aggregate=\"false\"\n             BuiltIn=\"false\"\n             NiladicFunction=\"false\"\n             IsComposable=\"false\"\n             ParameterTypeSemantics=\"AllowImplicitConversion\"\n             Schema=\"dbo\">\n     <Parameter Name=\"orderId\" Type=\"int\" Mode=\"In\" />\n     <Parameter Name=\"newQuantity\" Type=\"int\" Mode=\"In\" />\n   </Function>\n   <Function Name=\"UpdateProductInOrder\" IsComposable=\"false\">\n     <CommandText>\n       UPDATE Orders\n       SET ProductId = @productId\n       WHERE OrderId = @orderId;\n     </CommandText>\n     <Parameter Name=\"productId\"\n                Mode=\"In\"\n                Type=\"int\"/>\n     <Parameter Name=\"orderId\"\n                Mode=\"In\"\n                Type=\"int\"/>\n   </Function>\n </Schema>\n```\n\n----------------------------------------\n\nTITLE: Explicitly Creating a Proxy Instance - C#\nDESCRIPTION: This code snippet illustrates how to explicitly create a proxy instance using the `Create` method of the `DbSet`. This is useful when you need a proxy instance for features like lazy loading or proxy change tracking. The code utilizes the `BloggingContext` and the `Blogs` DbSet.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/proxies.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Create();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Migrations via .NET Core CLI\nDESCRIPTION: Shows how to add migrations using the .NET Core CLI, specifying the context and output directory for each provider. This creates separate migration sets for SQL Server and SQLite.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/providers.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations add InitialCreate --context BlogContext --output-dir Migrations/SqlServerMigrations\ndotnet ef migrations add InitialCreate --context SqliteBlogContext --output-dir Migrations/SqliteMigrations\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query for Employee Summary\nDESCRIPTION: This SQL query is generated by Entity Framework when projecting data to the `EmployeeSummaryViewModel`. It selects the employee's ID and Name, along with the count of their time cards, all in a single efficient query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\n    SELECT\n    [Limit1].[Id] AS [Id],\n    [Limit1].[Name] AS [Name],\n    [Limit1].[C1] AS [C1]\n    FROM (SELECT TOP (2)\n      [Project1].[Id] AS [Id],\n      [Project1].[Name] AS [Name],\n      [Project1].[C1] AS [C1]\n      FROM (SELECT\n        [Extent1].[Id] AS [Id],\n        [Extent1].[Name] AS [Name],\n        (SELECT COUNT(1) AS [A1]\n         FROM [dbo].[TimeCards] AS [Extent2]\n         WHERE [Extent1].[Id] =\n               [Extent2].[EmployeeTimeCard_TimeCard_Id]) AS [C1]\n              FROM [dbo].[Employees] AS [Extent1]\n               WHERE [Extent1].[Id] = @p__linq__0\n         )  AS [Project1]\n    )  AS [Limit1]\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure for Deleting Data\nDESCRIPTION: This SQL code defines a stored procedure named `People_Delete` that deletes data from the `People` table. It takes `Id` and `Name_Original` (original value of Name) as input parameters. It deletes the row matching the provided `Id` and original `Name`. It outputs '1' to indicate a successful deletion. This stored procedure expects to use original values to ensure the deletion only occurs if the row hasn't changed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_83\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE [dbo].[People_Delete]\n    @Id [int],\n    @Name_Original [nvarchar](max)\nAS\nBEGIN\n    DELETE FROM [People]\n    OUTPUT 1\n    WHERE [Id] = @Id AND [Name] = @Name_Original;\nEND\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Database using EF Core (C#)\nDESCRIPTION: This code snippet illustrates how to clean up a database table using Entity Framework Core APIs. It iterates through each entity in the `Blogs` table and removes it, effectively clearing the table's contents.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-with-the-database.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Cleanup()\n{\n    using (var context = CreateContext())\n    {\n        foreach (var blog in context.Blogs)\n        {\n            context.Blogs.Remove(blog);\n        }\n        context.SaveChanges();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping a byte[] property to a rowversion column using Data Annotations\nDESCRIPTION: This code snippet illustrates how to map a byte[] property to a rowversion column using data annotations in EF Core. The [Timestamp] attribute is used to designate the Version property as a rowversion column, which will be automatically updated by SQL Server on each update.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/value-generation.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n    public int PersonId { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n\n    [Timestamp]\n    public byte[] Version { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Posts and Blogs tables in SQL\nDESCRIPTION: This SQL script creates two tables, `Posts` and `Blogs`, with primary key and foreign key constraints to represent the relationship between posts and blogs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Posts] (\n    [Id] int NOT NULL IDENTITY,\n    [Title] nvarchar(max) NULL,\n    [Content] nvarchar(max) NULL,\n    [PublishedOn] datetime2 NOT NULL,\n    [Archived] bit NOT NULL,\n    [BlogId] int NOT NULL,\n    CONSTRAINT [PK_Posts] PRIMARY KEY ([Id]),\n    CONSTRAINT [FK_Posts_Blogs_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [Blogs] ([Id]) ON DELETE CASCADE);\n\nCREATE TABLE [Blogs] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NULL,\n    [SiteUri] nvarchar(max) NULL,\n    CONSTRAINT [PK_Blogs] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with CosmosEventId.ExecutedCreateItem\nDESCRIPTION: Demonstrates inserting an item into an Azure Cosmos DB database and logging the `CosmosEventId.ExecutedCreateItem` event.  This shows how EF Core 6.0 logs diagnostic information when inserting data into Cosmos DB, including request units consumed. Requires `EnableSensitiveDataLogging()` to show ID values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nvar triangle = new Triangle\n{\n    Name = \"Impossible\", \n    PartitionKey = \"TrianglesPartition\", \n    Angle1 = 90, \n    Angle2 = 90, \n    InsertedOn = DateTime.UtcNow\n};\ncontext.Add(triangle);\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Update Stored Procedure with Timestamp Concurrency Token (SQL)\nDESCRIPTION: This SQL stored procedure updates a blog record, incorporating a timestamp concurrency check. The @Timestamp_Original parameter ensures that the update only occurs if the timestamp hasn't changed since the record was last read.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE [dbo].[Blog_Update]  \n  @BlogId int,\n  @Name nvarchar(max),\n  @Url nvarchar(max),\n  @Timestamp_Original rowversion\nAS\n  UPDATE [dbo].[Blogs]\n  SET [Name] = @Name, [Url] = @Url     \n  WHERE BlogId = @BlogId AND [Timestamp] = @Timestamp_Original\n```\n\n----------------------------------------\n\nTITLE: SQL Server Unique Index with IS NOT NULL Filter\nDESCRIPTION: This SQL code demonstrates how a unique index with an `IS NOT NULL` filter is created on the BlogId column of the Author table in SQL Server for an optional one-to-one relationship. This is done to better handle null values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE UNIQUE INDEX [IX_Author_BlogId] ON [Author] ([BlogId]) WHERE [BlogId] IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: C# Blog Entity with Required Relationship\nDESCRIPTION: This C# code defines an entity class `Blog` with a non-nullable `Name` property and a collection of `Post` entities. The `Name` property is initialized to a non-null value using the null-forgiving operator (!).  This represents a required relationship to the `Posts` table, ensuring that each Blog has at least one Post.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Blog\n    {\n        public Blog()\n        {\n            Posts = new HashSet<Post>();\n        }\n\n        public int Id { get; set; }\n        public string Name { get; set; } = null!;\n\n        public virtual ICollection<Post> Posts { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: DiagnosticObserver Implementation C#\nDESCRIPTION: Defines a DiagnosticObserver that subscribes to the EF Core DiagnosticListener and then subscribes a KeyValueObserver to it. The `OnNext` method filters for the \"Microsoft.EntityFrameworkCore\" DiagnosticListener and then subscribes the KeyValueObserver to receive EF Core events.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/diagnostic-listeners.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class DiagnosticObserver : IObserver<DiagnosticListener>\n{\n    public void OnCompleted()\n        => throw new NotImplementedException();\n\n    public void OnError(Exception error)\n        => throw new NotImplementedException();\n\n    public void OnNext(DiagnosticListener value)\n    {\n        if (value.Name == DbLoggerCategory.Name) // \"Microsoft.EntityFrameworkCore\"\n        {\n            value.Subscribe(new KeyValueObserver());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Application-Managed Concurrency Token with Data Annotations - C#\nDESCRIPTION: Configures the Version property as a concurrency token using the ConcurrencyCheck data annotation. In this scenario, the application is responsible for managing the token's value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/concurrency.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public int PersonId { get; set; }\n    public string FirstName { get; set; }\n\n    [ConcurrencyCheck]\n    public Guid Version { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Annotation Attribute from EntityType (C#)\nDESCRIPTION: This C# code retrieves the value of a custom annotation attribute (CustomAttribute) from an EntityType's metadata properties. It loads the CSDL from 'School.csdl', retrieves the 'Person' EntityType, and then accesses the annotation property using its namespace and name. It depends on System.Data.Metadata.Edm.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\n EdmItemCollection collection = new EdmItemCollection(\"School.csdl\");\n MetadataWorkspace workspace = new MetadataWorkspace();\n workspace.RegisterItemCollection(collection);\n EdmType contentType;\n workspace.TryGetType(\"Person\", \"SchoolModel\", DataSpace.CSpace, out contentType);\n if (contentType.MetadataProperties.Contains(\"http://CustomNamespace.com:CustomAttribute\"))\n {\n     MetadataProperty annotationProperty =\n         contentType.MetadataProperties[\"http://CustomNamespace.com:CustomAttribute\"];\n     object annotationValue = annotationProperty.Value;\n     Console.WriteLine(annotationValue.ToString());\n }\n```\n\n----------------------------------------\n\nTITLE: Installing an Older Version of dotnet-ef (CLI)\nDESCRIPTION: This command allows you to install a specific older version of the dotnet-ef tool, which is compatible with .NET Core 3.1. This can be used to avoid needing to upgrade to .NET 6 runtime.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_20\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install dotnet-ef --version 3.1.*\n```\n\n----------------------------------------\n\nTITLE: Associate DbMappingViewCache with Context - C#\nDESCRIPTION: This code snippet demonstrates how to associate a DbMappingViewCache implementation with a specific DbContext using the DbMappingViewCacheTypeAttribute. This attribute is applied at the assembly level and specifies the DbContext type and the corresponding DbMappingViewCache type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/pre-generated-views.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: DbMappingViewCacheType(typeof(BlogContext), typeof(MyMappingViewCache))]\n```\n\n----------------------------------------\n\nTITLE: SQL query example without VALUE modifier\nDESCRIPTION: This SQL query example demonstrates the old behavior where results are wrapped in a JSON object. It is provided for context regarding changes to SQL query generation in EF Core 9 for Azure Cosmos DB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT c[\"City\"] FROM root c\n```\n\n----------------------------------------\n\nTITLE: Ignoring RelationalEventId.PendingModelChangesWarning (C#)\nDESCRIPTION: Shows the code needed to ignore the PendingModelChangesWarning, for example, when the migrations are generated or chosen dynamically by replacing some of the EF services.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\noptions.ConfigureWarnings(w => w.Ignore(RelationalEventId.PendingModelChangesWarning))\n```\n\n----------------------------------------\n\nTITLE: Installing EntityFramework NuGet Package using Package Manager Console (PowerShell)\nDESCRIPTION: This command installs the latest version of the EntityFramework NuGet package using the Package Manager Console in Visual Studio. It requires the NuGet Package Manager to be installed and configured.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/install.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package EntityFramework\n```\n\n----------------------------------------\n\nTITLE: Persisting and Retrieving Data with Enums in EF - C#\nDESCRIPTION: This C# code snippet demonstrates how to persist and retrieve data using enum types in Entity Framework. It adds a new Department object to the context with an enum value, saves the changes to the database, and then executes a LINQ query to retrieve a Department where the name matches a specific enum value. The retrieved Department's ID and name are then printed to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/data-types/enums.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new EnumTestModelContainer())\n{\n    context.Departments.Add(new Department{ Name = DepartmentNames.English });\n\n    context.SaveChanges();\n\n    var department = (from d in context.Departments\n                        where d.Name == DepartmentNames.English\n                        select d).FirstOrDefault();\n\n    Console.WriteLine(\n        \"DepartmentID: {0} and Name: {1}\",\n        department.DepartmentID,  \n        department.Name);\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Element Example (SSDL)\nDESCRIPTION: This example showcases the Documentation element used to provide descriptive information about an EntityType element. It includes both a Summary and a LongDescription to provide context and details about the Customers entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<EntityType Name=\"Customers\">\n  <Documentation>\n    <Summary>Summary here.</Summary>\n    <LongDescription>Long description here.</LongDescription>\n  </Documentation>\n  <Key>\n    <PropertyRef Name=\"CustomerId\" />\n  </Key>\n  <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n  <Property Name=\"Name\" Type=\"nvarchar(max)\" Nullable=\"false\" />\n</EntityType>\n```\n\n----------------------------------------\n\nTITLE: Eagerly Loading Multiple Levels - EF6 - C#\nDESCRIPTION: This code shows how to eagerly load multiple levels of related entities in Entity Framework 6, using both collection and reference navigation properties. It demonstrates loading blogs with related posts and comments, as well as users with related profiles and avatars, using both lambda expressions and strings to specify the relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/related-data.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    // Load all blogs, all related posts, and all related comments.\n    var blogs1 = context.Blogs\n                        .Include(b => b.Posts.Select(p => p.Comments))\n                        .ToList();\n\n    // Load all users, their related profiles, and related avatar.\n    var users1 = context.Users\n                        .Include(u => u.Profile.Avatar)\n                        .ToList();\n\n    // Load all blogs, all related posts, and all related comments  \n    // using a string to specify the relationships.\n    var blogs2 = context.Blogs\n                        .Include(\"Posts.Comments\")\n                        .ToList();\n\n    // Load all users, their related profiles, and related avatar  \n    // using a string to specify the relationships.\n    var users2 = context.Users\n                        .Include(\"Profile.Avatar\")\n                        .ToList();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Table-Per-Type Mapping C#\nDESCRIPTION: This code configures Entity Framework to use Table-Per-Type (TPT) mapping.  Each class in the inheritance hierarchy (`Employee` and `Manager`) will be mapped to its own table in the database, rather than sharing a single table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/conventions/custom.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Types()\n            .Configure(c=>c.ToTable(c.ClrType.Name));\n```\n\n----------------------------------------\n\nTITLE: Access Implied Properties of Owned Entities in EF Core\nDESCRIPTION: This code shows how to retrieve the implied key values of owned entities by accessing the EntityEntry object. This is required because collections of owned types are persisted without explicit key values. EF Core creates an int property for the index in the JSON array.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/modeling.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nvar distributor = context.Set<Distributor>().First();\nvar shippingCenter = distributor.ShippingCenters.First();\n\nvar entry = context.Entry(shippingCenter);\n\nvar distributorFk = entry.Property(\"DistributorId\").CurrentValue;\nvar index = entry.Property<int>(\"ShippingCentersIndex\").CurrentValue;\n```\n\n----------------------------------------\n\nTITLE: Resolve Concurrency Conflicts with Reload - EF6\nDESCRIPTION: This snippet demonstrates how to resolve concurrency conflicts by reloading the latest values from the database into the entity, effectively overwriting any local changes. The code uses a do-while loop to retry the SaveChanges operation until it succeeds or a non-concurrency exception occurs. It also includes a snippet that demonstrates how to simulate a concurrency error.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/concurrency.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n    blog.Name = \"The New ADO.NET Blog\";\n\n    bool saveFailed;\n    do\n    {\n        saveFailed = false;\n\n        try\n        {\n            context.SaveChanges();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            saveFailed = true;\n\n            // Update the values of the entity that failed to save from the store\n            ex.Entries.Single().Reload();\n        }\n\n    } while (saveFailed);\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Database.SqlCommand(\n    \"UPDATE dbo.Blogs SET Name = 'Another Name' WHERE BlogId = 1\");\n```\n\n----------------------------------------\n\nTITLE: TransactionScope with AdventureWorks Context\nDESCRIPTION: This snippet shows the usage of TransactionScope with AdventureWorks context before EF Core 3.0, where the database connection remained open until the end of the TransactionScope. It adds a new ProductCategory and then retrieves categories.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nusing (new TransactionScope())\n{\n    using (AdventureWorks context = new AdventureWorks())\n    {\n        context.ProductCategories.Add(new ProductCategory());\n        await context.SaveChangesAsync();\n\n        // Old behavior: Connection is still open at this point\n\n        var categories = await context.ProductCategories().ToListAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define the DbContext derived class\nDESCRIPTION: This code defines the UniversityContext class, which inherits from DbContext. It includes a DbSet property for the University entity, allowing Entity Framework to manage and persist University objects to the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/spatial.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class UniversityContext : DbContext\n{\n    public DbSet<University> Universities { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Immutable Class Property\nDESCRIPTION: This code snippet shows how to configure a property of type `SomeImmutableClass` using the Entity Framework Core fluent API.  No special comparer is required because the class is immutable and overrides `Equals`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/value-comparers.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nentity.Property(e => e.SomeImmutableClass);\n```\n\n----------------------------------------\n\nTITLE: Cosmos DB Family Entity C#\nDESCRIPTION: Defines the Family entity with properties such as Id, LastName, IsRegistered, Address, Parents, and Children. It uses JsonPropertyName to specify the JSON property name for the Id property when serializing to Cosmos DB.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\npublic class Family\n{\n    [JsonPropertyName(\"id\")]\n    public string Id { get; set; }\n    \n    public string LastName { get; set; }\n    public bool IsRegistered { get; set; }\n    \n    public Address Address { get; set; }\n\n    public IList<Parent> Parents { get; } = new List<Parent>();\n    public IList<Child> Children { get; } = new List<Child>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Based on Property in OnModelCreating - C#\nDESCRIPTION: This code snippet shows how to configure an entity differently based on a property within the DbContext's OnModelCreating method.  However, the default EF Core model caching behavior will prevent this from working correctly without further customization. The code shows conditional configuration using `UseIntProperty` property on the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/dynamic-model.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UseIntProperty\n    ? modelBuilder.Entity<Blog>().Property(b => b.Id).HasColumnName(\"IdInt\")\n    : modelBuilder.Entity<Blog>().Property(b => b.Id).HasColumnName(\"Id\");\n```\n\n----------------------------------------\n\nTITLE: No-Tracking Query Example\nDESCRIPTION: This code demonstrates a no-tracking query using `AsNoTracking` and `Include` to fetch products with their categories. In EF Core 3.0, this returns a new `Category` instance for each `Product`, even when products share the same category.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar results = await context.Products.Include(e => e.Category).AsNoTracking().ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Add Blog Entity to DbContext\nDESCRIPTION: This snippet shows how to add a `Blog` entity to the `DbContext`. Adding the entity will trigger the generation of a temporary value for the store-generated key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_168\n\nLANGUAGE: csharp\nCODE:\n```\nvar blog = new Blog();\ncontext.Add(blog);\n```\n\n----------------------------------------\n\nTITLE: Updating Data with CosmosEventId.ExecutedReplaceItem\nDESCRIPTION: Demonstrates saving an updated item to an Azure Cosmos DB database and logging the `CosmosEventId.ExecutedReplaceItem` event. The code snippet highlights EF Core's logging capabilities when updating data in Cosmos DB, including details like the request units consumed during the operation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\ntriangle.Angle2 = 89;\ncontext.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: ObjectContext Query with NoTracking - C#\nDESCRIPTION: This code demonstrates how to disable change tracking at the query level using the ObjectContext API. By setting the MergeOption to `MergeOption.NoTracking`, the query will not load objects into the ObjectStateManager.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nvar productsForCategory = from p in context.Products\n                                where p.Category.CategoryName == selectedCategory\n                                select p;\n\n    ((ObjectQuery)productsForCategory).MergeOption = MergeOption.NoTracking;\n```\n\n----------------------------------------\n\nTITLE: Find All Ancestors Using HierarchyId in EF Core with C#\nDESCRIPTION: This C# code snippet uses `IsDescendantOf` to find all ancestors of a halfling, given its name. The query ensures that the halfling is not considered its own ancestor. The results are ordered by level in descending order.  It requires an EF Core context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nIQueryable<Halfling> FindAllAncestors(string name)\n            => context.Halflings.Where(\n                    ancestor => context.Halflings\n                        .Single(\n                            descendent =>\n                                descendent.Name == name\n                                && ancestor.Id != descendent.Id)\n                        .PathFromPatriarch.IsDescendantOf(ancestor.PathFromPatriarch))\n                .OrderByDescending(ancestor => ancestor.PathFromPatriarch.GetLevel());\n```\n\n----------------------------------------\n\nTITLE: Configure Composite Key - C#\nDESCRIPTION: Configures the composite key for the Blog entity using the `HasKey` method in the `OnModelCreating` method of the DbContext. This explicitly defines the combination of `Id1` and `Id2` as the primary key for the Blog entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/one-to-many.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Blog>()\n        .HasKey(e => new { e.Id1, e.Id2 });\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Delete Function to Stored Procedure (MSL)\nDESCRIPTION: This XML snippet demonstrates how to use the DeleteFunction element within Entity Framework's MSL to map the delete function of the Person entity type to the DeletePerson stored procedure. It also includes example mappings for insert and update functions. The FunctionName attribute specifies the stored procedure to be used for the delete operation, which must be declared in the storage model.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"People\">\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"LastName\" ColumnName=\"LastName\" />\n       <ScalarProperty Name=\"FirstName\" ColumnName=\"FirstName\" />\n       <ScalarProperty Name=\"HireDate\" ColumnName=\"HireDate\" />\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ColumnName=\"EnrollmentDate\" />\n     </MappingFragment>\n </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <ModificationFunctionMapping>\n       <InsertFunction FunctionName=\"SchoolModel.Store.InsertPerson\">\n         <ScalarProperty Name=\"EnrollmentDate\"\n                         ParameterName=\"EnrollmentDate\" />\n         <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\" />\n         <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\" />\n         <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\" />\n         <ResultBinding Name=\"PersonID\" ColumnName=\"NewPersonID\" />\n       </InsertFunction>\n       <UpdateFunction FunctionName=\"SchoolModel.Store.UpdatePerson\">\n         <ScalarProperty Name=\"EnrollmentDate\"\n                         ParameterName=\"EnrollmentDate\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\"\n                         Version=\"Current\" />\n       </UpdateFunction>\n       <DeleteFunction FunctionName=\"SchoolModel.Store.DeletePerson\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\" />\n       </DeleteFunction>\n     </ModificationFunctionMapping>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: string.Equals with OrdinalIgnoreCase .NET to SQL translation\nDESCRIPTION: Describes how string.Equals with StringComparison.OrdinalIgnoreCase in .NET translates to STRINGEQUALS with a boolean flag in SQL when used with Entity Framework Core. This executes a case-insensitive ordinal comparison of two strings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_17\n\nLANGUAGE: .NET\nCODE:\n```\nstring.Equals(a, b, StringComparison.OrdinalIgnoreCase)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[STRINGEQUALS(@a, @b, true)](/azure/cosmos-db/nosql/query/stringequals)\n```\n\n----------------------------------------\n\nTITLE: Interceptor State for Caching in EF Core\nDESCRIPTION: This C# code defines the state variables used by the caching interceptor.  It includes a lock object for thread safety, the ID and message text of the most recent daily message, and the time when the query was last executed.  These variables allow the interceptor to store and check the cache.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/interceptors.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprivate readonly object _lock = new object();\n    private int _id;\n    private string _message;\n    private DateTime _queriedAt;\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Parameter Analyzer Warning - C#\nDESCRIPTION: This C# code snippet illustrates a potential security issue when using raw SQL APIs like `FromSql`. The analyzer detects that the `minAge` variable is not parameterized, which can lead to SQL injection vulnerabilities and displays a warning.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.1.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar sql = $\"SELECT * FROM People WHERE Age > {minAge}\";\nvar query = context.People.FromSql(sql);\n```\n\n----------------------------------------\n\nTITLE: Unit Test for Employee Summary Action in C#\nDESCRIPTION: This code shows a unit test for the `Summary` action of an `EmployeeController`. The test verifies that the `EmployeeSummaryViewModel` is built correctly and that the `TotalTimeCards` property has the expected value. It inherits from `EmployeeControllerTestBase` for setup and dependency injection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n    [TestClass]\n    public class EmployeeControllerSummaryActionTests\n               : EmployeeControllerTestBase {\n        [TestMethod]\n        public void ShouldBuildModelWithCorrectEmployeeSummary() {\n            var id = 1;\n            var result = _controller.Summary(id);\n            var model = result.ViewData.Model as EmployeeSummaryViewModel;\n            Assert.IsTrue(model.TotalTimeCards == 3);\n        }\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Map AssociationSet Insert Function (MSL)\nDESCRIPTION: This XML code snippet illustrates how to map the insert function of the 'CourseInstructor' association to the 'InsertCourseInstructor' stored procedure using the InsertFunction element within the ModificationFunctionMapping element for an AssociationSetMapping. It defines end property mappings for 'Course' and 'Person', linking their respective properties ('CourseID', 'PersonID') to parameters in the stored procedure ('courseId', 'instructorId').\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n <AssociationSetMapping Name=\"CourseInstructor\"\n                        TypeName=\"SchoolModel.CourseInstructor\"\n                        StoreEntitySet=\"CourseInstructor\">\n   <EndProperty Name=\"Person\">\n     <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n   </EndProperty>\n   <EndProperty Name=\"Course\">\n     <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n   </EndProperty>\n   <ModificationFunctionMapping>\n     <InsertFunction FunctionName=\"SchoolModel.Store.InsertCourseInstructor\" >   \n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </InsertFunction>\n     <DeleteFunction FunctionName=\"SchoolModel.Store.DeleteCourseInstructor\">\n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </DeleteFunction>\n   </ModificationFunctionMapping>\n </AssociationSetMapping>\n```\n\n----------------------------------------\n\nTITLE: Eager Load Related Data - Multiple Leaf Includes Identical Filtered - C#\nDESCRIPTION: Demonstrates scenarios where you include the same navigation multiple times and each contains the same filtering operations. Both `Include` statements of blog posts have the same filter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/related-data/eager.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar blogs = context.Blogs\n    .Include(b => b.Posts.Where(p => p.Rating > 5))\n    .Include(b => b.Posts.Where(p => p.Rating > 5))\n        .ThenInclude(p => p.Author)\n    .ToList();\n```\n\n----------------------------------------\n\nTITLE: Querying Owned Entities with AsNoTracking (C#)\nDESCRIPTION: This code snippet queries owned entities without including the owner, using `AsNoTracking()`. This is a valid approach in EF Core 3.0 if the owned entities don't need to be tracked for modifications. It bypasses the error thrown when querying owned entities without the owner in a tracking query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.People.Select(p => p.Address).AsNoTracking();\n```\n\n----------------------------------------\n\nTITLE: Owned Collection: Distributor C#\nDESCRIPTION: Defines a `Distributor` class with a collection of `StreetAddress` objects as `ShippingCenters`.  The example demonstrates a scenario where an entity owns a collection of another entity type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Modeling.OwnedEntities\n{\n    public class Distributor\n    {\n        public int Id { get; set; }\n        public List<StreetAddress> ShippingCenters { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define EF Model: BloggingContext, Blog, Post (C#)\nDESCRIPTION: Defines the Entity Framework model consisting of a BloggingContext derived from DbContext, and Blog and Post entity classes. The BloggingContext contains virtual DbSet properties for Blogs and Posts, enabling mocking.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/mocking.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Data.Entity;\n\nnamespace TestingDemo\n{\n    public class BloggingContext : DbContext\n    {\n        public virtual DbSet<Blog> Blogs { get; set; }\n        public virtual DbSet<Post> Posts { get; set; }\n    }\n\n    public class Blog\n    {\n        public int BlogId { get; set; }\n        public string Name { get; set; }\n        public string Url { get; set; }\n\n        public virtual List<Post> Posts { get; set; }\n    }\n\n    public class Post\n    {\n        public int PostId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n        public int BlogId { get; set; }\n        public virtual Blog Blog { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Default Connection Factory in Config File XML\nDESCRIPTION: This XML snippet shows how to register the default connection factory in an application's configuration file for Entity Framework.  The type attribute specifies the assembly-qualified name of the connection factory, which must implement IDbConnectionFactory. This registration ensures connections made by convention utilize the specified provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/providers/provider-model.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<entityFramework>\n  <defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework\" >\n</entityFramework>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Eager Loading of Customers and Orders\nDESCRIPTION: This SQL query is generated by Entity Framework Core when using eager loading to retrieve customers from the UK and their associated orders. It performs a left outer join between the `Customers` and `Orders` tables to fetch all related data in a single query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n[Project1].[C1] AS [C1],\n[Project1].[CustomerID] AS [CustomerID],\n[Project1].[CompanyName] AS [CompanyName],\n[Project1].[ContactName] AS [ContactName],\n[Project1].[ContactTitle] AS [ContactTitle],\n[Project1].[Address] AS [Address],\n[Project1].[City] AS [City],\n[Project1].[Region] AS [Region],\n[Project1].[PostalCode] AS [PostalCode],\n[Project1].[Country] AS [Country],\n[Project1].[Phone] AS [Phone],\n[Project1].[Fax] AS [Fax],\n[Project1].[C2] AS [C2],\n[Project1].[OrderID] AS [OrderID],\n[Project1].[CustomerID1] AS [CustomerID1],\n[Project1].[EmployeeID] AS [EmployeeID],\n[Project1].[OrderDate] AS [OrderDate],\n[Project1].[RequiredDate] AS [RequiredDate],\n[Project1].[ShippedDate] AS [ShippedDate],\n[Project1].[ShipVia] AS [ShipVia],\n[Project1].[Freight] AS [Freight],\n[Project1].[ShipName] AS [ShipName],\n[Project1].[ShipAddress] AS [ShipAddress],\n[Project1].[ShipCity] AS [ShipCity],\n[Project1].[ShipRegion] AS [ShipRegion],\n[Project1].[ShipPostalCode] AS [ShipPostalCode],\n[Project1].[ShipCountry] AS [ShipCountry]\nFROM ( SELECT\n      [Extent1].[CustomerID] AS [CustomerID],\n       [Extent1].[CompanyName] AS [CompanyName],\n       [Extent1].[ContactName] AS [ContactName],\n       [Extent1].[ContactTitle] AS [ContactTitle],\n       [Extent1].[Address] AS [Address],\n       [Extent1].[City] AS [City],\n       [Extent1].[Region] AS [Region],\n       [Extent1].[PostalCode] AS [PostalCode],\n       [Extent1].[Country] AS [Country],\n       [Extent1].[Phone] AS [Phone],\n       [Extent1].[Fax] AS [Fax],\n      1 AS [C1],\n       [Extent2].[OrderID] AS [OrderID],\n       [Extent2].[CustomerID] AS [CustomerID1],\n       [Extent2].[EmployeeID] AS [EmployeeID],\n       [Extent2].[OrderDate] AS [OrderDate],\n       [Extent2].[RequiredDate] AS [RequiredDate],\n       [Extent2].[ShippedDate] AS [ShippedDate],\n       [Extent2].[ShipVia] AS [ShipVia],\n       [Extent2].[Freight] AS [Freight],\n       [Extent2].[ShipName] AS [ShipName],\n       [Extent2].[ShipAddress] AS [ShipAddress],\n       [Extent2].[ShipCity] AS [ShipCity],\n       [Extent2].[ShipRegion] AS [ShipRegion],\n       [Extent2].[ShipPostalCode] AS [ShipPostalCode],\n       [Extent2].[ShipCountry] AS [ShipCountry],\n      CASE WHEN ([Extent2].[OrderID] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C2]\n      FROM  [dbo].[Customers] AS [Extent1]\n      LEFT OUTER JOIN [dbo].[Orders] AS [Extent2] ON [Extent1].[CustomerID] = [Extent2].[CustomerID]\n      WHERE N'UK' = [Extent1].[Country]\n)  AS [Project1]\nORDER BY [Project1].[CustomerID] ASC, [Project1].[C2] ASC\n```\n\n----------------------------------------\n\nTITLE: Scaffold DbContext with Namespace Options - PowerShell\nDESCRIPTION: This command scaffolds a DbContext and entity types using the Entity Framework Core PowerShell commands. It uses the `-Namespace` option to override the namespace for all output classes and the `-ContextNamespace` option to override the namespace specifically for the DbContext class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/index.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nScaffold-DbContext ... -Namespace Your.Namespace -ContextNamespace Your.DbContext.Namespace\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Secondary Sort by ID\nDESCRIPTION: This SQL query includes a secondary sort order by the customer's ID to ensure stable ordering.  It selects customer ID, City, Name, and PhoneNumber from the Customers table, orders first by the City and then by the Id, and applies LIMIT and OFFSET clauses for pagination.  The parameters @__p_0 and @__p_1 represent the offset and limit, respectively.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_103\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"c\".\"Id\", \"c\".\"City\", \"c\".\"Name\", \"c\".\"PhoneNumber\"\nFROM \"Customers\" AS \"c\"\nORDER BY \"c\".\"City\", \"c\".\"Id\"\nLIMIT @__p_1 OFFSET @__p_0\n```\n\n----------------------------------------\n\nTITLE: Renaming FK Parameter (Independent Association) - C#\nDESCRIPTION: This snippet configures the parameter name for a foreign key in an independent association (where the foreign key is not directly exposed as a property on the dependent entity). It renames the parameter for Blog.BlogId (accessed via Post.Blog) to 'blog_id' in the insert stored procedure for Post.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Post>()\n  .MapToStoredProcedures(s =>\n    s.Insert(i => i.Parameter(p => p.Blog.BlogId, \"blog_id\")));\n```\n\n----------------------------------------\n\nTITLE: SQL query with COLLATE clause\nDESCRIPTION: This SQL code snippet is generated by the previous EF Core C# example. It shows the use of the `COLLATE` clause in SQL to apply a case-sensitive collation directly in the query. This overrides the default collation settings for the 'Name' column for this specific query. The generated SQL query includes the COLLATE clause for the explicit case-sensitive comparison.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/collations-and-case-sensitivity.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [c].[Name]\nFROM [Customers] AS [c]\nWHERE [c].[Name] COLLATE SQL_Latin1_General_CP1_CS_AS = N'John'\n```\n\n----------------------------------------\n\nTITLE: SQL Server Connection String in C#\nDESCRIPTION: This snippet demonstrates how to specify a connection string in C# code when using SQL Server LocalDB with Entity Framework. It emphasizes the importance of using a verbatim string (prefixed with @) or double backslashes (\\\\) to properly escape the backslashes in the server path.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/visual-studio.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nRemember to use a verbatim string prefixed with `@` or double back-slashes \"\\\\\" when specifying a connection string in C# code.\n```\n\n----------------------------------------\n\nTITLE: Setting DYLD_LIBRARY_PATH on macOS\nDESCRIPTION: This command sets the `DYLD_LIBRARY_PATH` environment variable on macOS. This ensures the application uses the Homebrew version of SQLite, which is necessary for SpatiaLite to function correctly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/spatial.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDYLD_LIBRARY_PATH=/usr/local/opt/sqlite/lib\n```\n\n----------------------------------------\n\nTITLE: Generated ObservableCollection Navigation Property\nDESCRIPTION: Shows the resulting C# code after modifying the T4 template, with the collection navigation property now using ObservableCollection<T>.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual ICollection<Album> Albums { get; } = new ObservableCollection<Album>();\n```\n\n----------------------------------------\n\nTITLE: Finding Data with CosmosEventId.ExecutingReadItem\nDESCRIPTION: Demonstrates retrieving a single item from an Azure Cosmos DB database using `Find` with a partition key, which logs `CosmosEventId.ExecutingReadItem` and `CosmosEventId.ExecutedReadItem` events. This example illustrates how EF Core logs find operations, including the resource ID and partition key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nvar isosceles = context.Triangles.Find(\"Isosceles\", \"TrianglesPartition\");\n```\n\n----------------------------------------\n\nTITLE: Create Posts, Tags and PostTag tables using alternate keys\nDESCRIPTION: SQL code that creates the Posts, Tags, and PostTag tables using alternate keys. Includes AlternateKey columns in Posts and Tags tables, a unique constraint, and foreign key constraints from PostTag to Posts and Tags using AlternateKey.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Posts\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Posts\" PRIMARY KEY AUTOINCREMENT,\n    \"AlternateKey\" INTEGER NOT NULL,\n    CONSTRAINT \"AK_Posts_AlternateKey\" UNIQUE (\"AlternateKey\"));\n\nCREATE TABLE \"Tags\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Tags\" PRIMARY KEY AUTOINCREMENT,\n    \"AlternateKey\" INTEGER NOT NULL,\n    CONSTRAINT \"AK_Tags_AlternateKey\" UNIQUE (\"AlternateKey\"));\n\nCREATE TABLE \"PostTag\" (\n    \"PostsAlternateKey\" INTEGER NOT NULL,\n    \"TagsAlternateKey\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostsAlternateKey\", \"TagsAlternateKey\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostsAlternateKey\" FOREIGN KEY (\"PostsAlternateKey\") REFERENCES \"Posts\" (\"AlternateKey\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagsAlternateKey\" FOREIGN KEY (\"TagsAlternateKey\") REFERENCES \"Tags\" (\"AlternateKey\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Mapping Entity Type to Table and Stored Procedure\nDESCRIPTION: This XML snippet demonstrates two mappings for the 'SchoolModel.Person' entity type within the 'People' entity set. The first maps the entity type to the 'Person' table. The second maps the update functionality of the entity type to a stored procedure named 'UpdatePerson' using ModificationFunctionMapping. This includes mapping properties to stored procedure parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"People\">\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"LastName\" ColumnName=\"LastName\" />\n       <ScalarProperty Name=\"FirstName\" ColumnName=\"FirstName\" />\n       <ScalarProperty Name=\"HireDate\" ColumnName=\"HireDate\" />\n       <ScalarProperty Name=\"EnrollmentDate\" ColumnName=\"EnrollmentDate\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"SchoolModel.Person\">\n     <ModificationFunctionMapping>\n       <UpdateFunction FunctionName=\"SchoolModel.Store.UpdatePerson\">\n         <ScalarProperty Name=\"EnrollmentDate\" ParameterName=\"EnrollmentDate\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"HireDate\" ParameterName=\"HireDate\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"FirstName\" ParameterName=\"FirstName\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"LastName\" ParameterName=\"LastName\"\n                         Version=\"Current\" />\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"PersonID\"\n                         Version=\"Current\" />\n       </UpdateFunction>\n     </ModificationFunctionMapping>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Disable Query Plan Caching in Entity Framework\nDESCRIPTION: This code snippet demonstrates how to disable query plan caching for a specific LINQ to Entities query in Entity Framework. It first casts the LINQ query to an ObjectQuery and then sets the EnablePlanCaching property to false. This can be useful for dynamic queries that might pollute the cache and hinder the performance of other cached queries.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n                    var query = from customer in context.Customer\n                                where customer.CustomerId == id\n                                select new\n                                {\n                                    customer.CustomerId,\n                                    customer.Name\n                                };\n                    ObjectQuery oQuery = query as ObjectQuery;\n                    oQuery.EnablePlanCaching = false;\n```\n\n----------------------------------------\n\nTITLE: Concrete DbContext Subclasses Inheriting from Base (C#)\nDESCRIPTION: This example shows how to define concrete DbContext subclasses that inherit from an abstract base class (ApplicationDbContextBase) and use different generic DbContextOptions<TContext> instances. It requires the Microsoft.EntityFrameworkCore package and the `ApplicationDbContextBase` class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/dbcontext-configuration/index.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class ApplicationDbContext1 : ApplicationDbContextBase\n{\n    public ApplicationDbContext1(DbContextOptions<ApplicationDbContext1> contextOptions)\n        : base(contextOptions)\n    {\n    }\n}\n\npublic sealed class ApplicationDbContext2 : ApplicationDbContextBase\n{\n    public ApplicationDbContext2(DbContextOptions<ApplicationDbContext2> contextOptions)\n        : base(contextOptions)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType with Annotations in CSDL (XML)\nDESCRIPTION: This XML snippet defines an EntityType named 'Person' within a CSDL schema. It demonstrates the use of both annotation attributes (p:CustomAttribute) and annotation elements (p:CustomElement) to include custom metadata. The annotation attribute is applied directly to the EntityType, while the annotation element is a child element.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n <Schema Namespace=\"SchoolModel\" Alias=\"Self\"\n         xmlns:annotation=\"https://schemas.microsoft.com/ado/2009/02/edm/annotation\"\n         xmlns=\"https://schemas.microsoft.com/ado/2009/11/edm\">\n   <EntityContainer Name=\"SchoolEntities\" annotation:LazyLoadingEnabled=\"true\">\n     <EntitySet Name=\"People\" EntityType=\"SchoolModel.Person\" />\n   </EntityContainer>\n   <EntityType Name=\"Person\" xmlns:p=\"http://CustomNamespace.com\"\n               p:CustomAttribute=\"Data here.\">\n     <Key>\n       <PropertyRef Name=\"PersonID\" />\n     </Key>\n     <Property Name=\"PersonID\" Type=\"Int32\" Nullable=\"false\"\n               annotation:StoreGeneratedPattern=\"Identity\" />\n     <Property Name=\"LastName\" Type=\"String\" Nullable=\"false\"\n               MaxLength=\"50\" Unicode=\"true\" FixedLength=\"false\" />\n     <Property Name=\"FirstName\" Type=\"String\" Nullable=\"false\"\n               MaxLength=\"50\" Unicode=\"true\" FixedLength=\"false\" />\n     <Property Name=\"HireDate\" Type=\"DateTime\" />\n     <Property Name=\"EnrollmentDate\" Type=\"DateTime\" />\n     <p:CustomElement>\n       Custom metadata.\n     </p:CustomElement>\n   </EntityType>\n </Schema>\n```\n\n----------------------------------------\n\nTITLE: SQL Query Generated by Navigation Filters\nDESCRIPTION: This SQL query is generated by the LINQ query `context.Blogs.ToList()` when a global query filter with navigation is applied. The query selects blogs where at least one related post's title contains 'fish', showcasing the recursive application of the filter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/filters.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [b].[BlogId], [b].[Name], [b].[Url]\nFROM [Blogs] AS [b]\nWHERE (\n    SELECT COUNT(*)\n    FROM [Posts] AS [p]\n    WHERE ([p].[Title] LIKE N'%fish%') AND ([b].[BlogId] = [p].[BlogId])) > 0\n```\n\n----------------------------------------\n\nTITLE: Mapping Table-Per-Type (TPT) - C#\nDESCRIPTION: Configures Table-Per-Type (TPT) inheritance mapping for the 'Course' and 'OnsiteCourse' entities, mapping each to its own table ('Course' and 'OnsiteCourse', respectively).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/types-and-properties.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Course>().ToTable(\"Course\");  \nmodelBuilder.Entity<OnsiteCourse>().ToTable(\"OnsiteCourse\");\n```\n\n----------------------------------------\n\nTITLE: Inserting Related Entities with Explicit Keys in EF Core\nDESCRIPTION: This code snippet showcases inserting a new blog entity and its associated posts with explicitly set key values using Entity Framework Core. It adds the blog to the context, which automatically starts tracking the related posts as well. The `Id` properties of both the blog and posts are explicitly set before adding the entities to the context.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Add(\n    new Blog\n    {\n        Id = 1,\n        Name = \".NET Blog\",\n        Posts =\n        {\n            new Post\n            {\n                Id = 1,\n                Title = \"Announcing the Release of EF Core 5.0\",\n                Content = \"Announcing the release of EF Core 5.0, a full featured cross-platform...\"\n            },\n            new Post\n            {\n                Id = 2,\n                Title = \"Announcing F# 5\",\n                Content = \"F# 5 is the latest version of F#, the functional programming language...\"\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configure Property to Not Use Generated Values with Data Annotations\nDESCRIPTION: This code configures a property (e.g., Id) to not use generated values using data annotations. This is a mitigation for the DetectChanges behavior change in EF Core 3.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[DatabaseGenerated(DatabaseGeneratedOption.None)]\npublic string Id { get; set; }\n```\n\n----------------------------------------\n\nTITLE: ReferentialConstraint in Association (CSDL, XML)\nDESCRIPTION: This code snippet shows how to define a ReferentialConstraint within an Association element. The ReferentialConstraint specifies the principal and dependent roles and the properties that link them together, acting as a foreign key relationship between Books and Publishers.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"PublishedBy\">\n   <End Type=\"BooksModel.Book\" Role=\"Book\" Multiplicity=\"*\" >\n   </End>\n   <End Type=\"BooksModel.Publisher\" Role=\"Publisher\" Multiplicity=\"1\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Publisher\">\n       <PropertyRef Name=\"Id\" />\n     </Principal>\n     <Dependent Role=\"Book\">\n       <PropertyRef Name=\"PublisherId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Configure discriminator in JSON id property in EF Core\nDESCRIPTION: This code snippet configures Entity Framework to include the discriminator in the JSON `id` property, reverting to the previous behavior. This is a mitigation for changes to the JSON `id` property mapping in EF Core 9.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder.Entity<Session>().HasDiscriminatorInJsonId();\n```\n\n----------------------------------------\n\nTITLE: Define Category Entity Model C#\nDESCRIPTION: Defines a Category class with properties for Id, Name, and Products navigation property.  The Products property is a collection of Product objects, representing a one-to-many relationship between Category and Product.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/wpf.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace GetStartedWPF\n{\n    public class Category\n    {\n        public int Id { get; set; }\n        [Required]\n        public string Name { get; set; }\n\n        public virtual List<Product> Products { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloned Object from Database Values in EF Core (C#)\nDESCRIPTION: This snippet demonstrates how to create a clone of an entity using the database values. It uses `GetDatabaseValues` to get the values currently in the database and then calls `ToObject` on the resulting `PropertyValues` object to create a new, untracked instance of the entity with those values.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar clonedBlog = context.Entry(blog).GetDatabaseValues().ToObject();\n```\n\n----------------------------------------\n\nTITLE: Configure Default Value for Payload Property (EF Core)\nDESCRIPTION: Configures the TaggedOn property in the PostTag entity to use a store-generated timestamp as the default value when new entities are inserted into the database. This ensures the TaggedOn property is automatically populated when a post is tagged.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<Post>()\n        .HasMany(p => p.Tags)\n        .WithMany(p => p.Posts)\n        .UsingEntity<PostTag>(\n            j => j.HasOne<Tag>().WithMany(),\n            j => j.HasOne<Post>().WithMany(),\n            j => j.Property(e => e.TaggedOn).HasDefaultValueSql(\"CURRENT_TIMESTAMP\"));\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Commands for CRUD Operations\nDESCRIPTION: These SQL commands, generated by Entity Framework Core and executed against a SQLite database, illustrate the database operations resulting from the tracked changes: updating a blog's name, deleting a post, and inserting a new post. The commands show parameterization for security and data type handling.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/index.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p1='1' (DbType = String), @p0='.NET Blog (Updated!)' (Size = 20)], CommandType='Text', CommandTimeout='30']\nUPDATE \"Blogs\" SET \"Name\" = @p0\nWHERE \"Id\" = @p1;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='2' (DbType = String)], CommandType='Text', CommandTimeout='30']\nDELETE FROM \"Posts\"\nWHERE \"Id\" = @p0;\nSELECT changes();\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='1' (DbType = String), @p1='.NET 5.0 was released recently and has come with many...' (Size = 56), @p2='What's next for System.Text.Json?' (Size = 33)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"Posts\" (\"BlogId\", \"Content\", \"Title\")\nVALUES (@p0, @p1, @p2);\nSELECT \"Id\"\nFROM \"Posts\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n```\n\n----------------------------------------\n\nTITLE: Generate Migration Script in EF Core\nDESCRIPTION: This command generates a SQL script for migrations from the current migration to the latest migration. It is useful when you know the last applied migration, allowing you to update the database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sqlite/limitations.md#_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations script CurrentMigration\n```\n\n----------------------------------------\n\nTITLE: Suppressing Messages with ConfigureWarnings (C#)\nDESCRIPTION: This C# snippet demonstrates how to suppress specific events from logging using the `ConfigureWarnings` API in EF Core.  It ignores the DetachedLazyLoadingWarning event. It logs to the console.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/logging-events-diagnostics/simple-logging.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .ConfigureWarnings(b => b.Ignore(CoreEventId.DetachedLazyLoadingWarning))\n        .LogTo(Console.WriteLine);\n```\n\n----------------------------------------\n\nTITLE: CollectionType Element as Parameter XML\nDESCRIPTION: This example illustrates a model-defined function that uses the CollectionType element to define a parameter that accepts a collection of Department entity types. The TypeRef element specifies the type of the elements in the collection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"GetAvgBudget\">\n      <Parameter Name=\"Departments\">\n          <CollectionType>\n             <TypeRef Type=\"SchoolModel.Department\"/>\n          </CollectionType>\n           </Parameter>\n       <ReturnType Type=\"Collection(Edm.Decimal)\"/>\n       <DefiningExpression>\n             SELECT VALUE AVG(d.Budget) FROM Departments AS d\n       </DefiningExpression>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: ComplexType Definition (CSDL)\nDESCRIPTION: This code snippet defines a ComplexType named 'FullName' within the Conceptual Schema Definition Language (CSDL).  It consists of two string properties, 'LastName' and 'FirstName', both of which are marked as non-nullable with a maximum length of 50 characters and are Unicode strings. This complex type is later used in the Person entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n <ComplexType Name=\"FullName\">\n   <Property Type=\"String\" Name=\"LastName\"\n             Nullable=\"false\" MaxLength=\"50\"\n             FixedLength=\"false\" Unicode=\"true\" />\n   <Property Type=\"String\" Name=\"FirstName\"\n             Nullable=\"false\" MaxLength=\"50\"\n             FixedLength=\"false\" Unicode=\"true\" />\n </ComplexType>\n```\n\n----------------------------------------\n\nTITLE: Opting out of RETURNING clause in SQLite\nDESCRIPTION: This C# snippet demonstrates how to disable the `RETURNING` clause when updating data in SQLite using EF Core 8. The `UseSqlReturningClause(false)` method configures the entity's table mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_144\n\nLANGUAGE: C#\nCODE:\n```\nmodelBuilder.Entity<Customer>().ToTable(tb => tb.UseSqlReturningClause(false));\n```\n\n----------------------------------------\n\nTITLE: Translate Math.Max to GREATEST - C#\nDESCRIPTION: This snippet demonstrates how Math.Max is translated to the GREATEST SQL function in EF Core 9. It filters pubs based on the maximum value between a count and a threshold, ensuring it's greater than a top value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nvar pubsInlineMax = await context.Pubs\n            .SelectMany(e => e.Counts)\n            .Where(e => Math.Max(e, threshold) > top)\n            .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Define Spatial Entity Model in C#\nDESCRIPTION: This code snippet demonstrates how to define an entity with a spatial data property using the NetTopologySuite library. It defines a `Friend` class with a `Location` property of type `Point`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.2.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing NetTopologySuite.Geometries;\n\nnamespace MyApp\n{\n  public class Friend\n  {\n    [Key]\n    public string Name { get; set; }\n\n    [Required]\n    public Point Location { get; set; }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IDesignTimeServices in C# - EF Core\nDESCRIPTION: This C# code snippet demonstrates how to implement the IDesignTimeServices interface to override default design-time services in Entity Framework Core. This allows customization of services like migration file generation. It shows a simple implementation within a class named 'DesignTimeServices'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/services.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DesignTimeServices : IDesignTimeServices\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        // Use a different code generator.\n        services.AddSingleton<IMigrationsCodeGenerator, MyMigrationsCodeGenerator>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring check constraints in EF Core 6.0\nDESCRIPTION: This snippet illustrates how check constraints, comments, and memory optimization were configured directly on the entity type builder in EF Core 6.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n    .Entity<Blog>()\n    .HasCheckConstraint(\"CK_Blog_TooFewBits\", \"Id > 1023\");\n\nmodelBuilder\n    .Entity<Blog>()\n    .HasComment(\"It's my table, and I'll delete it if I want to.\");\n\nmodelBuilder\n    .Entity<Blog>()\n    .IsMemoryOptimized();\n```\n\n----------------------------------------\n\nTITLE: Mapping Entity Sets to Tables\nDESCRIPTION: This XML snippet demonstrates mapping an entity set named 'Courses' to three different tables ('Course', 'OnlineCourse', 'OnsiteCourse') in the storage model using MappingFragment elements. Each MappingFragment specifies the StoreEntitySet attribute, which indicates the target table. It shows how to map a base type and two derived types within the entity set.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"Courses\">\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel1.Course)\">\n     <MappingFragment StoreEntitySet=\"Course\">\n       <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n       <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n       <ScalarProperty Name=\"Credits\" ColumnName=\"Credits\" />\n       <ScalarProperty Name=\"Title\" ColumnName=\"Title\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel1.OnlineCourse)\">\n     <MappingFragment StoreEntitySet=\"OnlineCourse\">\n       <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n       <ScalarProperty Name=\"URL\" ColumnName=\"URL\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel1.OnsiteCourse)\">\n     <MappingFragment StoreEntitySet=\"OnsiteCourse\">\n       <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n       <ScalarProperty Name=\"Time\" ColumnName=\"Time\" />\n       <ScalarProperty Name=\"Days\" ColumnName=\"Days\" />\n       <ScalarProperty Name=\"Location\" ColumnName=\"Location\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Custom Resolution with Objects - Concurrency Conflicts - EF6\nDESCRIPTION: This snippet is similar to the previous custom resolution example but uses instances of the entity type (Blog) instead of DbPropertyValues for managing current, database, and resolved values. It leverages the ToObject and SetValues methods of DbPropertyValues to convert between DbPropertyValues and entity objects. This approach can simplify the code and make it more readable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/saving/concurrency.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var blog = context.Blogs.Find(1);\n    blog.Name = \"The New ADO.NET Blog\";\n\n    bool saveFailed;\n    do\n    {\n        saveFailed = false;\n        try\n        {\n            context.SaveChanges();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            saveFailed = true;\n\n            // Get the current entity values and the values in the database\n            // as instances of the entity type\n            var entry = ex.Entries.Single();\n            var databaseValues = entry.GetDatabaseValues();\n            var databaseValuesAsBlog = (Blog)databaseValues.ToObject();\n\n            // Choose an initial set of resolved values. In this case we\n            // make the default be the values currently in the database.\n            var resolvedValuesAsBlog = (Blog)databaseValues.ToObject();\n\n            // Have the user choose what the resolved values should be\n            HaveUserResolveConcurrency((Blog)entry.Entity,\n                                       databaseValuesAsBlog,\n                                       resolvedValuesAsBlog);\n\n            // Update the original values with the database values and\n            // the current values with whatever the user choose.\n            entry.OriginalValues.SetValues(databaseValues);\n            entry.CurrentValues.SetValues(resolvedValuesAsBlog);\n        }\n\n    } while (saveFailed);\n}\n\npublic void HaveUserResolveConcurrency(Blog entity,\n                                       Blog databaseValues,\n                                       Blog resolvedValues)\n{\n    // Show the current, database, and resolved values to the user and have\n    // them update the resolved values to get the correct resolution.\n}\n```\n\n----------------------------------------\n\nTITLE: NGen Install for 64-bit Architecture\nDESCRIPTION: This command invokes NGen.exe to install a native image for the specified assembly for a 64-bit architecture. The assembly name should be replaced with the actual name of the assembly file, e.g., EntityFramework.dll.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/ngen.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n%WINDIR%\\Microsoft.NET\\Framework64\\v4.0.30319\\ngen install <Assembly name>\n```\n\n----------------------------------------\n\nTITLE: Defining Referential Constraint in SSDL (XML)\nDESCRIPTION: This XML snippet illustrates the use of the ReferentialConstraint element within an Association element to define a foreign key constraint. It specifies the Principal and Dependent roles, along with PropertyRef elements that identify the involved columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"FK_CustomerOrders\">\n   <End Role=\"Customers\"\n        Type=\"ExampleModel.Store.Customers\" Multiplicity=\"1\">\n     <OnDelete Action=\"Cascade\" />\n   </End>\n   <End Role=\"Orders\"\n        Type=\"ExampleModel.Store.Orders\" Multiplicity=\"*\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Customers\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Principal>\n     <Dependent Role=\"Orders\">\n       <PropertyRef Name=\"CustomerId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Executing a Migration Bundle\nDESCRIPTION: This command executes the previously created migration bundle.  It applies any pending migrations to the database. Dependencies: The generated executable bundle file (e.g., efbundle.exe).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/applying.md#_snippet_17\n\nLANGUAGE: dotnetcli\nCODE:\n```\n.\\efbundle.exe\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository using Git Bash\nDESCRIPTION: This snippet shows how to clone the Planetary Docs repository from GitHub using the git command-line tool. It retrieves the project files to a local machine for development and exploration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dotnet/EntityFramework.Docs\n```\n\n----------------------------------------\n\nTITLE: Create Categories SQL\nDESCRIPTION: SQL script to create the Categories table with an auto-incrementing Id column, which is the primary key. It defines a table named Categories with columns for Id and Name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_181\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [Categories] (\n    [Id] int NOT NULL IDENTITY,\n    [Name] nvarchar(max) NOT NULL,\n    CONSTRAINT [PK_Categories] PRIMARY KEY ([Id]));\n```\n\n----------------------------------------\n\nTITLE: Add EntitySet with Defining Query in SSDL - XML\nDESCRIPTION: This snippet demonstrates how to add an EntitySet element with a DefiningQuery to the SSDL (Storage Schema Definition Language) section of an .edmx file. The DefiningQuery specifies the SQL statement to be executed, effectively creating a view within the model. It selects CourseID, Grade, FirstName, and LastName from a joined StudentGrade and Person table.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/defining-query.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <!-- SSDL content -->\n    <edmx:StorageModels>\n      <Schema Namespace=\"SchoolModel.Store\" Alias=\"Self\" Provider=\"System.Data.SqlClient\" ProviderManifestToken=\"2008\" xmlns:store=\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\" xmlns=\"http://schemas.microsoft.com/ado/2009/11/edm/ssdl\">\n        <EntityContainer Name=\"SchoolModelStoreContainer\">\n           <EntitySet Name=\"GradeReport\" EntityType=\"SchoolModel.Store.GradeReport\">\n              <DefiningQuery>\n                SELECT CourseID, Grade, FirstName, LastName\n                FROM StudentGrade\n                JOIN\n                (SELECT * FROM Person WHERE EnrollmentDate IS NOT NULL) AS p\n                ON StudentID = p.PersonID\n              </DefiningQuery>\n          </EntitySet>\n          <EntitySet Name=\"Course\" EntityType=\"SchoolModel.Store.Course\" store:Type=\"Tables\" Schema=\"dbo\" />\n```\n\n----------------------------------------\n\nTITLE: SQL Updates for Cascading Nulls After Severing Relationship\nDESCRIPTION: This SQL code snippet shows the database updates that occur when the relationship between a blog and its posts is severed. The `BlogId` column in the `Posts` table is updated to NULL for all posts that were previously related to the blog. This corresponds to the previous C# code snippets showing two ways to sever the relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/saving/cascade-delete.md#_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (2ms) [Parameters=[@p1='1', @p0=NULL (DbType = Int32)], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nUPDATE [Posts] SET [BlogId] = @p0\nWHERE [Id] = @p1;\nSELECT @@ROWCOUNT;\n\n-- Executed DbCommand (0ms) [Parameters=[@p1='2', @p0=NULL (DbType = Int32)], CommandType='Text', CommandTimeout='30']\nSET NOCOUNT ON;\nUPDATE [Posts] SET [BlogId] = @p0\nWHERE [Id] = @p1;\nSELECT @@ROWCOUNT;\n```\n\n----------------------------------------\n\nTITLE: SQL Output with Query Tag\nDESCRIPTION: This SQL output demonstrates the result of tagging a LINQ query with the TagWith method.  The SQL includes the provided tag as a comment before the actual SQL statement.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-2.2.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n-- This is my spatial query!\n\nSELECT TOP(@__p_1) [f].[Name], [f].[Location]\nFROM [Friends] AS [f]\nORDER BY [f].[Location].STDistance(@__myLocation_0) DESC\n```\n\n----------------------------------------\n\nTITLE: Using PropertyRef to Define Primary Key in SSDL (XML)\nDESCRIPTION: This XML snippet shows the usage of the PropertyRef element within the Key element to define a primary key constraint in SSDL. The PropertyRef element references a property (CustomerId) defined on the EntityType.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Customers\">\n   <Documentation>\n     <Summary>Summary here.</Summary>\n     <LongDescription>Long description here.</LongDescription>\n   </Documentation>\n   <Key>\n     <PropertyRef Name=\"CustomerId\" />\n   </Key>\n   <Property Name=\"CustomerId\" Type=\"int\" Nullable=\"false\" />\n   <Property Name=\"Name\" Type=\"nvarchar(max)\" Nullable=\"false\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Define Storage Model Function (SSDL)\nDESCRIPTION: This XML code snippet defines a function named 'GetStudentGrades' in the storage model (SSDL) for the School database. It specifies the function's properties, including its name, schema, and a single input parameter 'StudentID' of type integer.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"GetStudentGrades\" Aggregate=\"false\"\n           BuiltIn=\"false\" NiladicFunction=\"false\"\n           IsComposable=\"false\" ParameterTypeSemantics=\"AllowImplicitConversion\"\n           Schema=\"dbo\">\n   <Parameter Name=\"StudentID\" Type=\"int\" Mode=\"In\" />\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Mapping Association Set Modification Functions with EndProperty (XML)\nDESCRIPTION: This XML example illustrates the use of EndProperty within an AssociationSetMapping to map insert and delete functions of an association (CourseInstructor) to stored procedures. It demonstrates how ScalarProperty elements define the mapping between association end properties and stored procedure parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<AssociationSetMapping Name=\"CourseInstructor\"\n                        TypeName=\"SchoolModel.CourseInstructor\"\n                        StoreEntitySet=\"CourseInstructor\">\n   <EndProperty Name=\"Person\">\n     <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n   </EndProperty>\n   <EndProperty Name=\"Course\">\n     <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n   </EndProperty>\n   <ModificationFunctionMapping>\n     <InsertFunction FunctionName=\"SchoolModel.Store.InsertCourseInstructor\" >   \n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </InsertFunction>\n     <DeleteFunction FunctionName=\"SchoolModel.Store.DeleteCourseInstructor\">\n       <EndProperty Name=\"Course\">\n         <ScalarProperty Name=\"CourseID\" ParameterName=\"courseId\"/>\n       </EndProperty>\n       <EndProperty Name=\"Person\">\n         <ScalarProperty Name=\"PersonID\" ParameterName=\"instructorId\"/>\n       </EndProperty>\n     </DeleteFunction>\n   </ModificationFunctionMapping>\n </AssociationSetMapping>\n```\n\n----------------------------------------\n\nTITLE: stringValue.EndsWith with OrdinalIgnoreCase .NET to SQL translation\nDESCRIPTION: Shows how stringValue.EndsWith with StringComparison.OrdinalIgnoreCase in .NET corresponds to ENDSWITH in SQL within the context of Entity Framework Core. This determines if a string ends with a specified substring with case insensitive check. EF Core 9.0 or later is required.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_23\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.EndsWith(value, StringComparison.OrdinalIgnoreCase)\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[ENDSWITH(@stringValue, @value, true)](/azure/cosmos-db/nosql/query/endswith)\n```\n\n----------------------------------------\n\nTITLE: Configuring Relational Null Semantics in EF Core with C#\nDESCRIPTION: Shows how to configure EF Core to use relational null semantics by calling `UseRelationalNulls(true)` in the `OnConfiguring` method of the DbContext. This disables the default null comparison compensation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/null-comparisons.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder.UseSqlServer(\"Server=(localdb)\\mssqllocaldb;Database=NullSemantics;Trusted_Connection=True;\",\n        x => x.UseRelationalNulls(true));\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Design Package\nDESCRIPTION: Shows how to update PackageReference item metadata in your project if you need to reference the Microsoft.EntityFrameworkCore.Design package to override EF Core's design-time behavior. This is required because Microsoft.EntityFrameworkCore.Design is now a DevelopmentDependency package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_36\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"3.0.0\">\n  <PrivateAssets>all</PrivateAssets>\n  <!-- Remove IncludeAssets to allow compiling against the assembly -->\n  <!--<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>-->\n</PackageReference>\n```\n\n----------------------------------------\n\nTITLE: BlogPost Class Definition C#\nDESCRIPTION: Defines a simple CLR class 'BlogPost' with properties mapping to columns in the 'Posts' database table. This class is used as an unmapped type for raw SQL query results. It includes properties for Id, Title, Content, PublishedOn, and BlogId.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\npublic class BlogPost\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public DateOnly PublishedOn { get; set; }\n    public int BlogId { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Many-to-Many Relationship to Stored Procedures (C#)\nDESCRIPTION: This C# code configures the Entity Framework model to map the many-to-many relationship between Post and Tag entities to stored procedures. It uses the MapToStoredProcedures method to define the mapping.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Post>()\n  .HasMany(p => p.Tags)\n  .WithMany(t => t.Posts)\n  .MapToStoredProcedures();\n```\n\n----------------------------------------\n\nTITLE: Field-only property example\nDESCRIPTION: This snippet shows the correct way to map a field-only property in EF Core 3.0. The field name must match the property name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nprivate class Blog\n{\n    private int _id;\n    public string Name { get; set; }\n}\n\nmodelBuilder\n    .Entity<Blog>()\n    .Property(\"_id\");\n```\n\n----------------------------------------\n\nTITLE: CommandText Element - XML\nDESCRIPTION: This example demonstrates the CommandText element within a Function element, allowing the definition of a SQL statement to be executed at the database level. It enables adding functionality similar to stored procedures directly within the storage model. It takes two parameters, productId and orderId, and updates the ProductId in the Orders table based on these parameters.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n <Function Name=\"UpdateProductInOrder\" IsComposable=\"false\">\n   <CommandText>\n     UPDATE Orders\n     SET ProductId = @productId\n     WHERE OrderId = @orderId;\n   </CommandText>\n   <Parameter Name=\"productId\"\n              Mode=\"In\"\n              Type=\"int\"/>\n   <Parameter Name=\"orderId\"\n              Mode=\"In\"\n              Type=\"int\"/>\n </Function>\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into OfficeAssignment Table SQL\nDESCRIPTION: These SQL INSERT statements populate the OfficeAssignment table, linking InstructorID to their office Location.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n--Insert data into the OfficeAssignment table.\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (1, '17 Smith');\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (4, '29 Adams');\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (5, '37 Williams');\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (18, '143 Smith');\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (25, '57 Adams');\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (27, '271 Williams');\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (31, '131 Smith');\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (32, '203 Williams');\nINSERT INTO dbo.OfficeAssignment(InstructorID, Location)\nVALUES (34, '213 Smith');\n```\n\n----------------------------------------\n\nTITLE: Entity Framework Configuration Section XML\nDESCRIPTION: This XML snippet demonstrates the entityFramework configuration section, which is added to the project's configuration file when the EntityFramework NuGet package is installed.  It specifies the type for the entityFramework section, enabling the use of EF specific settings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <configSections>\n    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->\n    <section name=\"entityFramework\"\n       type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=4.3.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />\n  </configSections>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Querying Blogs with Related Posts SQL\nDESCRIPTION: This is an example of the SQL that used to be generated when querying blogs with related posts. The last ORDER BY clause (ORDER BY [b].[BlogId], [p].[PostId]) for the Post's ID column is no longer generated in EF Core 6.0.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [b].[BlogId], [b].[Name], [p].[PostId], [p].[BlogId], [p].[Title]\nFROM [Blogs] AS [b]\nLEFT JOIN [Post] AS [p] ON [b].[BlogId] = [p].[BlogId]\nORDER BY [b].[BlogId], [p].[PostId]\n```\n\n----------------------------------------\n\nTITLE: Defining a Referential Constraint with Principal Element in CSDL\nDESCRIPTION: This code snippet shows how to define a ReferentialConstraint in CSDL, using the Principal element to specify the principal end of the association. The PropertyRef element is used to identify the key property of the principal entity type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"PublishedBy\">\n   <End Type=\"BooksModel.Book\" Role=\"Book\" Multiplicity=\"*\" >\n   </End>\n   <End Type=\"BooksModel.Publisher\" Role=\"Publisher\" Multiplicity=\"1\" />\n   <ReferentialConstraint>\n     <Principal Role=\"Publisher\">\n       <PropertyRef Name=\"Id\" />\n     </Principal>\n     <Dependent Role=\"Book\">\n       <PropertyRef Name=\"PublisherId\" />\n     </Dependent>\n   </ReferentialConstraint>\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Creating DeletePerson Stored Procedure in SQL\nDESCRIPTION: This SQL script creates a stored procedure named 'DeletePerson'. It deletes records from the 'Person' table based on the provided 'PersonID'. This procedure is used to remove a person's record from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nIF NOT EXISTS (SELECT * FROM sys.objects\nWHERE object_id = OBJECT_ID(N'[dbo].[DeletePerson]')\nAND type in (N'P', N'PC'))\nBEGIN\nEXEC dbo.sp_executesql @statement = N'\nCREATE PROCEDURE [dbo].[DeletePerson]\n@PersonID int\nAS\nDELETE FROM Person WHERE PersonID = @PersonID;\n'\nEND\nGO\n```\n\n----------------------------------------\n\nTITLE: GroupBy with FirstOrDefault SQL\nDESCRIPTION: This SQL code snippet is the translated SQL query for the GroupBy and FirstOrDefault example in C#. It selects the first record from each group of people based on their first name, ordered by first name then last name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_58\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [t0].[Id], [t0].[Age], [t0].[FirstName], [t0].[LastName], [t0].[MiddleInitial], [t].[FirstName], [s].[Id], [s].[Age], [s].[PersonId], [s].[Style]\nFROM (\n    SELECT [p].[FirstName]\n    FROM [People] AS [p]\n    GROUP BY [p].[FirstName]\n) AS [t]\nLEFT JOIN (\n    SELECT [t1].[Id], [t1].[Age], [t1].[FirstName], [t1].[LastName], [t1].[MiddleInitial]\n    FROM (\n        SELECT [p0].[Id], [p0].[Age], [p0].[FirstName], [p0].[LastName], [p0].[MiddleInitial], ROW_NUMBER() OVER(PARTITION BY [p0].[FirstName] ORDER BY [p0].[FirstName], [p0].[LastName]) AS [row]\n        FROM [People] AS [p0]\n    ) AS [t1]\n    WHERE [t1].[row] <= 1\n) AS [t0] ON [t].[FirstName] = [t0].[FirstName]\nLEFT JOIN [Shoes] AS [s] ON [t0].[Id] = [s].[PersonId]\nORDER BY [t].[FirstName], [t0].[FirstName]\n```\n\n----------------------------------------\n\nTITLE: SQL Server Unique Index Creation Example\nDESCRIPTION: This SQL code shows how a unique index is created on the BlogId column of the Author table in SQL Server for a required one-to-one relationship.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/conventions.md#_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE UNIQUE INDEX [IX_Author_BlogId] ON [Author] ([BlogId]);\n```\n\n----------------------------------------\n\nTITLE: Accessing a Reference Navigation - C#\nDESCRIPTION: This code snippet demonstrates how to access a reference navigation property using the `Reference` method. It retrieves the `ReferenceEntry<Post, Blog>` for the 'Blog' navigation property of a 'Post' entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nReferenceEntry<Post, Blog> referenceEntry1 = context.Entry(post).Reference(e => e.Blog);\nReferenceEntry<Post, Blog> referenceEntry2 = context.Entry(post).Reference<Blog>(\"Blog\");\nReferenceEntry referenceEntry3 = context.Entry(post).Reference(\"Blog\");\n```\n\n----------------------------------------\n\nTITLE: Reverting ToString() Behavior for NullableBool in EF Core C#\nDESCRIPTION: This code demonstrates how to revert to the old behavior of the ToString() method when applied to a nullable boolean property. The `oldBehavior` variable shows the original way, while the `newBehavior` variable shows the default EF Core 9.0 behavior.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/breaking-changes.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar newBehavior = context.Entity.Select(x => x.NullableBool.ToString());\nvar oldBehavior = context.Entity.Select(x => x.NullableBool == null ? null : x.NullableBool.ToString());\n```\n\n----------------------------------------\n\nTITLE: Console Output - C#\nDESCRIPTION: This code is the expected output of the above code. This confirms data was successfully persisted and retrieved using the Enum.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/enums.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nDepartmentID: 1 Name: English\n```\n\n----------------------------------------\n\nTITLE: Accessing Foreign Key Constraint Name - C#\nDESCRIPTION: Illustrates the change in EF Core 3.0 where foreign key constraint names are accessed using the `ConstraintName` property instead of `Name`. This promotes naming consistency.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nvar constraintName = myForeignKey.ConstraintName;\n```\n\n----------------------------------------\n\nTITLE: Translating GetType for Entity Types in EF Core\nDESCRIPTION: This C# code snippet demonstrates how EF Core 7 translates the GetType method in LINQ queries to filter entities by their exact type. It retrieves posts that are exactly of the Post type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Posts.Where(post => post.GetType() == typeof(Post));\n```\n\n----------------------------------------\n\nTITLE: Join Operator in EF Core (C#)\nDESCRIPTION: This code snippet demonstrates the usage of the LINQ Join operator in EF Core. It joins two data sources (PersonPhoto and Person) based on their key selectors, generating a tuple when the keys match. This translates to an INNER JOIN in relational databases.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.PersonPhotos\n    .Join(\n        context.People, // inner sequence\n        pp => pp.PersonPhotoId, // outerKeySelector\n        p => p.PhotoId, // innerKeySelector\n        (pp, p) => new { pp, p }); // resultSelector\n\n/*\n\nSELECT [p].[PersonId], [p].[Name], [p].[PhotoId], [p0].[PersonPhotoId], [p0].[Caption], [p0].[Photo]\nFROM [PersonPhoto] AS [p0]\nINNER JOIN [Person] AS [p] ON [p0].[PersonPhotoId] = [p].[PhotoId]\n*/\n```\n\n----------------------------------------\n\nTITLE: Mapping Association Set with EndProperty (XML)\nDESCRIPTION: This XML snippet demonstrates the usage of the EndProperty element to define the mapping between an association (FK_Course_Department) and the underlying database table (Course).  It shows how ScalarProperty elements are nested within EndProperty elements to map association type properties to table columns.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<AssociationSetMapping Name=\"FK_Course_Department\"\n                        TypeName=\"SchoolModel.FK_Course_Department\"\n                        StoreEntitySet=\"Course\">\n   <EndProperty Name=\"Department\">\n     <ScalarProperty Name=\"DepartmentID\" ColumnName=\"DepartmentID\" />\n   </EndProperty>\n   <EndProperty Name=\"Course\">\n     <ScalarProperty Name=\"CourseID\" ColumnName=\"CourseID\" />\n   </EndProperty>\n </AssociationSetMapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring DbSet for Inheritance - C#\nDESCRIPTION: This snippet demonstrates how to expose a DbSet for a base class and its subclass in EF Core.  This allows EF Core to include these types in the model for inheritance mapping. Other subclasses of `Blog` will not be included unless explicitly specified.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/inheritance.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<RssBlog> RssBlogs { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: EF Designer Connection String XML\nDESCRIPTION: This XML snippet shows an Entity Framework connection string for models created using the EF Designer. It specifies metadata locations for CSDL, SSDL, and MSL files, along with the provider and provider connection string for connecting to a SQL Server database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<connectionStrings>\n  <add name=\"BlogContext\"  \n    connectionString=\n      \"metadata=\n        res://*/BloggingModel.csdl|\n        res://*/BloggingModel.ssdl|\n        res://*/BloggingModel.msl;\n      provider=System.Data.SqlClient;\n      provider connection string=\n        &quot;data source=(localdb)\\mssqllocaldb;\n        initial catalog=Blogging;\n        integrated security=True;\n        multipleactiveresultsets=True;&quot;\"\n     providerName=\"System.Data.EntityClient\" />\n</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Including Bootstrap Stylesheet for Icons\nDESCRIPTION: This snippet shows how to include the Open Iconic stylesheet for Bootstrap. It links the CSS file in the HTML header.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Create Blogs and Posts Tables SQL\nDESCRIPTION: This SQL script creates two tables, Blogs and Posts, in the database. The Blogs table has BlogId (INT, primary key, identity), Name (NVARCHAR), and Url (NVARCHAR) columns. The Posts table has PostId (INT, primary key, identity), Title (NVARCHAR), Content (NTEXT), and BlogId (INT, foreign key referencing Blogs.BlogId) columns. A foreign key constraint ensures referential integrity between Posts and Blogs.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/workflows/database-first.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [dbo].[Blogs] (\n    [BlogId] INT IDENTITY (1, 1) NOT NULL,\n    [Name] NVARCHAR (200) NULL,\n    [Url]  NVARCHAR (200) NULL,\n    CONSTRAINT [PK_dbo.Blogs] PRIMARY KEY CLUSTERED ([BlogId] ASC)\n);\n\nCREATE TABLE [dbo].[Posts] (\n    [PostId] INT IDENTITY (1, 1) NOT NULL,\n    [Title] NVARCHAR (200) NULL,\n    [Content] NTEXT NULL,\n    [BlogId] INT NOT NULL,\n    CONSTRAINT [PK_dbo.Posts] PRIMARY KEY CLUSTERED ([PostId] ASC),\n    CONSTRAINT [FK_dbo.Posts_dbo.Blogs_BlogId] FOREIGN KEY ([BlogId]) REFERENCES [dbo].[Blogs] ([BlogId]) ON DELETE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Saving and Querying Data in Cosmos DB\nDESCRIPTION: This C# code demonstrates saving and querying data in Azure Cosmos DB using Entity Framework Core.  It adds a new Order to the context, saves changes to the database, and then queries for all orders in the database. Calling EnsureCreatedAsync creates the containers and seed data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/index.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var context = new OrdersContext();\nawait context.Database.EnsureCreatedAsync();\n\ncontext.Add(\n    new Order\n    {\n        Customer = \"New customer\",\n        ShippingAddress = new StreetAddress { City = \"London\", Street = \"221B Baker St\" }\n    });\n\nawait context.SaveChangesAsync();\n\nvar allOrders = await context.Orders.ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining Association with OnDelete Cascade in XML\nDESCRIPTION: This XML snippet demonstrates how to define an association between Customer and Order entities in a conceptual model. The OnDelete action is set to Cascade, which means that when a Customer is deleted, all related Orders are also deleted.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n <Association Name=\"CustomerOrders\">\n   <End Type=\"ExampleModel.Customer\" Role=\"Customer\" Multiplicity=\"1\">\n         <OnDelete Action=\"Cascade\" />\n   </End>\n   <End Type=\"ExampleModel.Order\" Role=\"Order\" Multiplicity=\"*\" />\n </Association>\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with EntityContainer, EntityType, Association in CSDL\nDESCRIPTION: This XML snippet defines a Schema element in CSDL that encompasses an EntityContainer, two EntityType elements (Customer and Order), and one Association element (CustomerOrders). It sets the namespace and alias for the model. The EntityContainer specifies EntitySets for Customers and Orders, and an AssociationSet connecting them. The EntityTypes define properties and navigation properties to establish relationships between entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n <Schema xmlns=\"https://schemas.microsoft.com/ado/2009/11/edm\"\n      xmlns:cg=\"https://schemas.microsoft.com/ado/2009/11/codegeneration\"\n      xmlns:store=\"https://schemas.microsoft.com/ado/2009/11/edm/EntityStoreSchemaGenerator\"\n       Namespace=\"ExampleModel\" Alias=\"Self\">\n         <EntityContainer Name=\"ExampleModelContainer\">\n           <EntitySet Name=\"Customers\"\n                      EntityType=\"ExampleModel.Customer\" />\n           <EntitySet Name=\"Orders\" EntityType=\"ExampleModel.Order\" />\n           <AssociationSet\n                       Name=\"CustomerOrder\"\n                       Association=\"ExampleModel.CustomerOrders\">\n             <End Role=\"Customer\" EntitySet=\"Customers\" />\n             <End Role=\"Order\" EntitySet=\"Orders\" />\n           </AssociationSet>\n         </EntityContainer>\n         <EntityType Name=\"Customer\">\n           <Key>\n             <PropertyRef Name=\"CustomerId\" />\n           </Key>\n           <Property Type=\"Int32\" Name=\"CustomerId\" Nullable=\"false\" />\n           <Property Type=\"String\" Name=\"Name\" Nullable=\"false\" />\n           <NavigationProperty\n                    Name=\"Orders\"\n                    Relationship=\"ExampleModel.CustomerOrders\"\n                    FromRole=\"Customer\" ToRole=\"Order\" />\n         </EntityType>\n         <EntityType Name=\"Order\">\n           <Key>\n             <PropertyRef Name=\"OrderId\" />\n           </Key>\n           <Property Type=\"Int32\" Name=\"OrderId\" Nullable=\"false\" />\n           <Property Type=\"Int32\" Name=\"ProductId\" Nullable=\"false\" />\n           <Property Type=\"Int32\" Name=\"Quantity\" Nullable=\"false\" />\n           <NavigationProperty\n                    Name=\"Customer\"\n                    Relationship=\"ExampleModel.CustomerOrders\"\n                    FromRole=\"Order\" ToRole=\"Customer\" />\n           <Property Type=\"Int32\" Name=\"CustomerId\" Nullable=\"false\" />\n         </EntityType>\n         <Association Name=\"CustomerOrders\">\n           <End Type=\"ExampleModel.Customer\"\n                Role=\"Customer\" Multiplicity=\"1\" />\n           <End Type=\"ExampleModel.Order\"\n                Role=\"Order\" Multiplicity=\"*\" />\n           <ReferentialConstraint>\n             <Principal Role=\"Customer\">\n               <PropertyRef Name=\"CustomerId\" />\n             </Principal>\n             <Dependent Role=\"Order\">\n               <PropertyRef Name=\"CustomerId\" />\n             </Dependent>\n           </ReferentialConstraint>\n         </Association>\n       </Schema>\n```\n\n----------------------------------------\n\nTITLE: Parameterized Query with FromSqlInterpolated\nDESCRIPTION: This code demonstrates how to create a parameterized SQL query using `FromSqlInterpolated` in EF Core 3.0, where parameters are passed as part of an interpolated query string.  It uses the product name as a parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-3.x/breaking-changes.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Products.FromSqlInterpolated(\n    $\"SELECT * FROM Products WHERE Name = {product.Name}\");\n```\n\n----------------------------------------\n\nTITLE: GetGrades Stored Procedure (SQL)\nDESCRIPTION: This SQL snippet defines the \"GetGrades\" stored procedure. It takes a student ID as input and returns EnrollmentID, Grade, CourseID, and StudentID from the StudentGrade table where the StudentID matches the input. Column aliases are used (e.g., EnrollmentID as enroll_id).\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\n CREATE PROCEDURE [dbo].[GetGrades]\n             @student_Id int\n             AS\n             SELECT     EnrollmentID as enroll_id,\n                                                                             Grade as grade,\n                                                                             CourseID as course_id,\n                                                                             StudentID as student_id\n                                               FROM dbo.StudentGrade\n             WHERE StudentID = @student_Id\n```\n\n----------------------------------------\n\nTITLE: Create Posts, Tags and PostTag tables using alternate keys with FKs\nDESCRIPTION: SQL code that creates the Posts, Tags, and PostTag tables. Includes AlternateKey columns in Posts and Tags tables and unique constraint. Foreign keys in the PostTag table reference the AlternateKey column in Posts and Tags tables.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Posts\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Posts\" PRIMARY KEY AUTOINCREMENT,\n    \"AlternateKey\" INTEGER NOT NULL,\n    CONSTRAINT \"AK_Posts_AlternateKey\" UNIQUE (\"AlternateKey\"));\n\nCREATE TABLE \"Tags\" (\n    \"Id\" INTEGER NOT NULL CONSTRAINT \"PK_Tags\" PRIMARY KEY AUTOINCREMENT,\n    \"AlternateKey\" INTEGER NOT NULL,\n    CONSTRAINT \"AK_Tags_AlternateKey\" UNIQUE (\"AlternateKey\"));\n\nCREATE TABLE \"PostTag\" (\n    \"PostId\" INTEGER NOT NULL,\n    \"TagId\" INTEGER NOT NULL,\n    CONSTRAINT \"PK_PostTag\" PRIMARY KEY (\"PostId\", \"TagId\"),\n    CONSTRAINT \"FK_PostTag_Posts_PostId\" FOREIGN KEY (\"PostId\") REFERENCES \"Posts\" (\"AlternateKey\") ON DELETE CASCADE,\n    CONSTRAINT \"FK_PostTag_Tags_TagId\" FOREIGN KEY (\"TagId\") REFERENCES \"Tags\" (\"AlternateKey\") ON DELETE CASCADE);\n```\n\n----------------------------------------\n\nTITLE: Verify EF Core Tools Installation (PowerShell)\nDESCRIPTION: Verifies that the Entity Framework Core tools are correctly installed and accessible within the Package Manager Console.  It displays information about the available EF Core commands.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/cli/powershell.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help about_EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: TPC: Single Leaf Type Query - SQL\nDESCRIPTION: SQL query generated by EF Core with TPC for retrieving entities of a single leaf type ('Cat'). It queries the 'Cats' table directly.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [c].[FoodId], [c].[Name], [c].[Vet], [c].[EducationLevel]\nFROM [Cats] AS [c]\n```\n\n----------------------------------------\n\nTITLE: Defining Employee and TimeCard POCOs in C#\nDESCRIPTION: These classes define the structure of the Employee and TimeCard objects.  These POCOs will be used with Entity Framework and are designed to be persistence-ignorant (PI). They include properties like Id, Name, HireDate, and a collection of TimeCards for the Employee class, and Id, Hours, and EffectiveDate for the TimeCard class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/testing/testability-article.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n    public class Employee {\n    \tpublic int Id { get; set; }\n    \tpublic string Name { get; set; }\n    \tpublic DateTime HireDate { get; set; }\n    \tpublic ICollection<TimeCard> TimeCards { get; set; }\n    }\n\n    public class TimeCard {\n    \tpublic int Id { get; set; }\n    \tpublic int Hours { get; set; }\n    \tpublic DateTime EffectiveDate { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of GroupBy Query with Include and OrderBy\nDESCRIPTION: This SQL code represents the translated form of the C# GroupBy query. It selects the `FirstName` from the `People` table and includes data from the related `Shoes` table.  The query is ordered by the first name and then by the shoe ID.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_80\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [t].[FirstName], [t0].[Id], [t0].[Age], [t0].[FirstName], [t0].[LastName], [t0].[MiddleInitial], [t0].[Id0], [t0].[Age0], [t0].[PersonId], [t0].[Style]\nFROM (\n    SELECT [p].[FirstName]\n    FROM [People] AS [p]\n    GROUP BY [p].[FirstName]\n) AS [t]\nLEFT JOIN (\n    SELECT [p0].[Id], [p0].[Age], [p0].[FirstName], [p0].[LastName], [p0].[MiddleInitial], [s].[Id] AS [Id0], [s].[Age] AS [Age0], [s].[PersonId], [s].[Style]\n    FROM [People] AS [p0]\n    LEFT JOIN [Shoes] AS [s] ON [p0].[Id] = [s].[PersonId]\n) AS [t0] ON [t].[FirstName] = [t0].[FirstName]\nORDER BY [t].[FirstName], [t0].[Id]\n```\n\n----------------------------------------\n\nTITLE: Find: Composite Key Lookup C#\nDESCRIPTION: Demonstrates using Find with a composite key (OrderId and ProductId) to retrieve an OrderLine entity.  The order of the key parameters passed to Find must match the order defined in OnModelCreating.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/entity-entries.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nvar orderline = context.OrderLines.Find(orderId, productId);\n```\n\n----------------------------------------\n\nTITLE: AssociationSet Element - XML\nDESCRIPTION: This example illustrates the AssociationSet element, representing a foreign key constraint (FK_CustomerOrders) between two tables in the database. The Association attribute links it to the corresponding Association element, defining the participating columns. It specifies the roles and entity sets for each end of the association.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/ssdl-spec.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n <AssociationSet Name=\"FK_CustomerOrders\"\n                 Association=\"ExampleModel.Store.FK_CustomerOrders\">\n   <End Role=\"Customers\" EntitySet=\"Customers\" />\n   <End Role=\"Orders\" EntitySet=\"Orders\" />\n </AssociationSet>\n```\n\n----------------------------------------\n\nTITLE: Composed GroupJoin Operator (C#)\nDESCRIPTION: This code snippet demonstrates a GroupJoin with a selector. While the selector attempts to limit data, fetching all data from the server to do GroupJoin can lead to performance issues. EF Core generally doesn't translate GroupJoin.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/complex-query-operators.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar query = context.Blogs\n    .GroupJoin(\n        context.Posts,\n        b => b.BlogId,\n        p => p.BlogId,\n        (b, posts) => new { b, posts = posts.Where(p => p.Content.Contains(\"EF Core\")) });\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Find Common Ancestor Using HierarchyId\nDESCRIPTION: This SQL query finds the common ancestor of two Halflings. It checks if the provided halflings are descendants of the current halfling being evaluated in the query, by using the IsDescendantOf method on their HierarchyId.  The final result is ordered by the level of the ancestor in descending order.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/hierarchyid.md#_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP(1) [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE @__first_PathFromPatriarch_0.IsDescendantOf([h].[PathFromPatriarch]) = CAST(1 AS bit)\n  AND @__second_PathFromPatriarch_1.IsDescendantOf([h].[PathFromPatriarch]) = CAST(1 AS bit)\nORDER BY [h].[PathFromPatriarch].GetLevel() DESC\n```\n\n----------------------------------------\n\nTITLE: Configure Migrations History Table Name - EF Core C#\nDESCRIPTION: This code snippet configures the schema and table name of the migrations history table using the `MigrationsHistoryTable()` method within the `OnConfiguring` method of a DbContext. It demonstrates how to specify a custom schema and table name for storing migration history when using the SQL Server EF Core provider. This customization allows for better organization and integration with existing database schemas.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/history-table.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder.UseSqlServer(\n        \"Server=(localdb)\\mssqllocaldb;Database=ef-migration-table;\")\n        .ReplaceService<IModelCacheKeyFactory, CustomModelCacheKeyFactory>()\n        .UseModelCache<TableNameModelCache>()\n        .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking)\n        .UseLoggerFactory(new LoggerFactory(new[] { new MyLoggerProvider() }, new FilterLoggerSettings() { {\"TableName\", LogLevel.Information} }))\n        .MigrationsHistoryTable(\"MyHistoryTable\", \"admin\");\n}\n```\n\n----------------------------------------\n\nTITLE: T4 Template - ObservableCollection Generation\nDESCRIPTION: Shows the modified T4 code to generate ObservableCollection<T> for collection navigation properties instead of List<T>.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/scaffolding/templates.md#_snippet_5\n\nLANGUAGE: T4\nCODE:\n```\npublic virtual ICollection<<#= targetType #>> <#= navigation.Name #> { get; } = new ObservableCollection<<#= targetType #>>();\n```\n\n----------------------------------------\n\nTITLE: Standard API SQLite DbContext Registration (C#)\nDESCRIPTION: This C# code shows the traditional way of registering a `DbContext` for SQLite, for comparison with the minimal API.  It utilizes the `UseSqlite` extension method within the `AddDbContext` service configuration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_161\n\nLANGUAGE: C#\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddDbContext<MyDbContext>(\n    options => options.UseSqlite(\"Data Source=mydatabase.db\"));\n```\n\n----------------------------------------\n\nTITLE: Map Function Import to Storage Model Function (MSL)\nDESCRIPTION: This XML code snippet shows how to use the FunctionImportMapping element in MSL to map the 'GetStudentGrades' function import in the conceptual model to the 'GetStudentGrades' function in the storage model. It specifies the names of both the function import and the function being mapped.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n <FunctionImportMapping FunctionImportName=\"GetStudentGrades\"\n                        FunctionName=\"SchoolModel.Store.GetStudentGrades\" />\n```\n\n----------------------------------------\n\nTITLE: Blog Class with Eager Initialization\nDESCRIPTION: This class demonstrates the anti-pattern of eagerly initializing a reference navigation property. EF Core 5 no longer overwrites such properties, potentially leading to unexpected behavior if the database value should override the initialized value.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-5.0/breaking-changes.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n     public int Id { get; set; }\n     public Author Author { get; set; ) = new Author();\n}\n```\n\n----------------------------------------\n\nTITLE: Use Repository in Controller C#\nDESCRIPTION: This code snippet demonstrates how to inject the repository service into a controller instead of the EF Core context. The controller then executes methods on the repository to access and manipulate data. The `highlight=8` parameter highlights line 8, which likely shows the dependency injection of the repository.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/testing/testing-without-the-database.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// This code snippet is intentionally left blank. It is referencing external code.\n// Please view the source code to understand how the repository is used in the controller.\n```\n\n----------------------------------------\n\nTITLE: Check Model Differences against Snapshot Model - C#\nDESCRIPTION: This snippet shows how to determine if the current model differs from the snapshot model. It involves retrieving the snapshot model, finalizing it, initializing it with the runtime initializer, and then comparing it to the design-time model using the migrations model differ.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/breaking-changes.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar snapshotModel = migrationsAssembly.ModelSnapshot?.Model;\n\nif (snapshotModel is IMutableModel mutableModel)\n{\n    snapshotModel = mutableModel.FinalizeModel();\n}\n\nif (snapshotModel != null)\n{\n    snapshotModel = context.GetService<IModelRuntimeInitializer>().Initialize(snapshotModel);\n}\n\nvar hasDifferences = context.GetService<IMigrationsModelDiffer>().HasDifferences(\n    snapshotModel?.GetRelationalModel(),\n    context.GetService<IDesignTimeModel>().Model.GetRelationalModel());\n```\n\n----------------------------------------\n\nTITLE: Accessing Temporary Values in EF Core\nDESCRIPTION: This code snippet demonstrates how to access temporary values stored in the change tracker using EntityEntry.CurrentValues after adding a new entity to the context.  It shows how the Blog.Id property set directly on the entity instance differs from the Blog.Id tracked by EF Core as a temporary value. Requires using Microsoft.EntityFrameworkCore and a BlogsContext.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\n        var blog = new Blog { Name = \".NET Blog\" };\n\n        context.Add(blog);\n\n        Console.WriteLine($\"Blog.Id set on entity is {blog.Id}\");\n        Console.WriteLine($\"Blog.Id tracked by EF is {context.Entry(blog).Property(e => e.Id).CurrentValue}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Warnings for Client Evaluation\nDESCRIPTION: Demonstrates how to configure warnings for client evaluation in EF Core versions prior to 3.0, allowing to either throw an exception or do nothing when client evaluation occurs (except in the projection).  This snippet shows how to configure the `DbContextOptionsBuilder` to throw an exception upon client evaluation warnings.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/client-eval.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder\n        .UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=EFQuerying;Trusted_Connection=True;\")\n        .ConfigureWarnings(warnings => warnings.Throw(RelationalEventId.QueryClientEvaluationWarning));\n}\n```\n\n----------------------------------------\n\nTITLE: EntityConnection Connection String (XML)\nDESCRIPTION: Updates the connection string within the EntityConnection to use the `Microsoft.Data.SqlClient` provider. This is required for the connection to utilize the new provider.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/what-is-new/microsoft-ef6-sqlserver.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n <add \n    name=\"Database\" \n    connectionString=\"metadata=res://*/EFModels.csdl|res://*/EFModels.ssdl|res://*/EFModels.msl;provider=Microsoft.Data.SqlClient;provider connection string=&quot;data source=server;initial catalog=mydb;integrated security=True;persist security info=True;\" \n    providerName=\"System.Data.EntityClient\" \n />\n```\n\n----------------------------------------\n\nTITLE: Entity Definition with Nullable Properties in C#\nDESCRIPTION: Defines an entity class with both nullable and non-nullable properties to illustrate null comparison scenarios in EF Core queries. The entity includes an Id, Int, NullableInt, String1, and String2 properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/null-comparisons.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Entity\n{\n    public int Id { get; set; }\n    public int Int { get; set; }\n    public int? NullableInt { get; set; }\n    public string String1 { get; set; }\n    public string String2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL generated by EF7 for comparison\nDESCRIPTION: This SQL code is generated by EF7 based on the LINQ query provided above. This SQL is provided for comparison.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_141\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [c].[Id], [c].[City], [c].[FirstName], [c].[LastName], [c].[Street]\nFROM [Customers] AS [c]\nWHERE ((([c].[Id] * 3) + 2) > 0 AND ([c].[FirstName] IS NOT NULL)) OR ([c].[LastName] IS NOT NULL)\n```\n\n----------------------------------------\n\nTITLE: Querying Owner with Owned Types (EF Core)\nDESCRIPTION: This code snippet shows how to query an owner entity and automatically include its owned types in Entity Framework Core. It demonstrates that it is not necessary to use the `Include` method to load the owned types, even when they are stored in a separate table. The query retrieves an `Order`, its `OrderDetails`, and the two owned `StreetAddresses` from the database.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/owned-entities.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nusing (var context = new OwnedEntityContext())\n{\n    var order = context.Orders.First();\n\n    Console.WriteLine($\"Order {order.Id} -> {order.OrderDetails.BillingAddress.Street}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite in HTML\nDESCRIPTION: This snippet shows how to use Open Iconic's SVG sprite. It includes adding general and unique class names for styling the icon.  A general class to the <svg> tag and a unique class name for each different icon in the <use> tag is suggested for easy styling.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Adding Friends to Each Other (C#)\nDESCRIPTION: This snippet demonstrates how to add friends to each other's Friend collections manually to maintain the symmetrical relationship. Both ginny.Friends and hermione.Friends must be updated.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nginny.Friends.Add(hermione);\nhermione.Friends.Add(ginny);\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icons with CSS\nDESCRIPTION: This CSS snippet demonstrates how to set the size of an SVG icon using the width and height properties and how to set the color using the fill property.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: SQL Translation of Random Query\nDESCRIPTION: Shows the SQL Server translation of the LINQ query using EF.Functions.Random. It selects users from the Users table where the Popularity matches the result of the RAND() function multiplied by 4 and incremented by 1.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_105\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [u].[Id], [u].[Popularity], [u].[Username]\nFROM [Users] AS [u]\nWHERE [u].[Popularity] = (CAST((RAND() * 4.0E0) AS int) + 1)\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icons with CSS\nDESCRIPTION: This CSS snippet shows how to size SVG icons using the width and height properties on the `<svg>` tag. It also shows how to color the icons by setting the 'fill' property on the `<use>` tag.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n\n```\n\nLANGUAGE: CSS\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Failing to Set Key Values (C#)\nDESCRIPTION: This C# code demonstrates the issue that arises when attempting to track multiple entities of the `Pet` type (defined above) without setting explicit key values for each one.  Since the `Id` property is not auto-generated, EF Core throws an exception when it encounters a second `Pet` entity with a default `Id` of 0. This highlights the importance of setting explicit key values for entities that do not use auto-generated keys.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\n            context.Add(new Pet { Name = \"Smokey\" });\n\n            try\n            {\n                context.Add(new Pet { Name = \"Clippy\" }); // This will throw\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n```\n\n----------------------------------------\n\nTITLE: SqlQuery on DbSet in C#\nDESCRIPTION: This code snippet demonstrates how to use `SqlQuery` on a `DbSet` (context.Products) to execute a raw SQL query. This method returns entities that are tracked by the context, allowing for CUD operations. The snippet directly executes the SQL query `select * from products` and maps the result to the `Product` entity.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\n// use this to obtain entities and have them tracked\nvar q2 = context.Products.SqlQuery(\"select * from products\");\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons with Bootstrap\nDESCRIPTION: This snippet demonstrates how to use Open Iconic icons with Bootstrap by adding the appropriate class to a `<span>` element. The `aria-hidden` attribute is set to `true` to prevent screen readers from reading the icon as text.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Default Type Mapping C#\nDESCRIPTION: This example shows how to add or override a provider type mapping using `DefaultTypeMapping`. This is useful for queries that don't involve any properties of a specific type but need a value converter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/bulk-configuration.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n{\n    configurationBuilder.DefaultTypeMapping<Currency>().HasConversion<CurrencyConverter>();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Unmapped Properties with __jObject in C#\nDESCRIPTION: This code demonstrates how to access properties not tracked by EF Core using the `__jObject` shadow property. It retrieves a `JObject` from the store, modifies it, and then saves the changes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/unstructured-data.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[\n        [Fact]\n        public async Task Unmapped()\n        {\n            await using var context = new OrdersContext();\n            await context.Database.EnsureDeletedAsync();\n            await context.Database.EnsureCreatedAsync();\n\n            context.Orders.Add(new Order { Id = 1, PartitionKey = \"1\" });\n            await context.SaveChangesAsync();\n\n            var order = context.Orders.Single(o => o.Id == 1);\n            var jObject = context.Entry(order).Property<JObject>(\"__jObject\").CurrentValue;\n            jObject[\"Address\"] = new JObject\n            {\n                { \"ShipsToCity\", \"London\" },\n                { \"ShipsToStreet\", \"221 B Baker St\" }\n            };\n\n            jObject[\"BillingAddress\"] = \"Clarence House\";\n\n            await context.SaveChangesAsync();\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Renaming Result Column - C#\nDESCRIPTION: This code snippet demonstrates how to rename the result column in the insert stored procedure that contains the database generated BlogId value. The column 'BlogId' will be renamed to 'generated_blog_identity'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures(s =>\n    s.Insert(i => i.Result(b => b.BlogId, \"generated_blog_identity\")));\n```\n\n----------------------------------------\n\nTITLE: EF Core Model Definition in C#\nDESCRIPTION: This code defines the data model consisting of four entity types: Blog, BlogAssets, Post, and Tag. It includes primary keys, foreign keys, and navigation properties to establish relationships between these entities using C#.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/relationship-changes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Blog\n{\n    public int Id { get; set; } // Primary key\n    public string Name { get; set; }\n\n    public IList<Post> Posts { get; } = new List<Post>(); // Collection navigation\n    public BlogAssets Assets { get; set; } // Reference navigation\n}\n\npublic class BlogAssets\n{\n    public int Id { get; set; } // Primary key\n    public byte[] Banner { get; set; }\n\n    public int BlogId { get; set; } // Foreign key\n    public Blog Blog { get; set; } // Reference navigation\n}\n\npublic class Post\n{\n    public int Id { get; set; } // Primary key\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int? BlogId { get; set; } // Foreign key\n    public Blog Blog { get; set; } // Reference navigation\n\n    public IList<Tag> Tags { get; } = new List<Tag>(); // Skip collection navigation\n}\n\npublic class Tag\n{\n    public int Id { get; set; } // Primary key\n    public string Text { get; set; }\n\n    public IList<Post> Posts { get; } = new List<Post>(); // Skip collection navigation\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Parameter - C#\nDESCRIPTION: This snippet demonstrates renaming the parameter for the BlogId property in the update stored procedure to 'blog_id'. It uses the Fluent API to customize the parameter name.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures(s =>\n    s.Update(u => u.Parameter(b => b.BlogId, \"blog_id\")));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document - C#\nDESCRIPTION: This code snippet implements the deletion of a document. It retrieves the document, removes existing tag and author references, and then removes the document from the context and saves the changes.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task DeleteDocumentAsync(string documentId, string title)\n{\n    ArgumentNullException.ThrowIfNull(documentId);\n    ArgumentNullException.ThrowIfNull(title);\n\n    var document = await _context.Documents.FindAsync(title, documentId);\n\n    if (document == null)\n    {\n        return;\n    }\n\n    await SyncTagsAsync(document);\n\n    _context.Documents.Remove(document);\n    await _context.SaveChangesAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Lazy Loading of Orders for a Specific Customer\nDESCRIPTION: This SQL query is generated by Entity Framework Core when lazy loading the orders for a specific customer.  It uses `sp_executesql` to parameterize the query, preventing SQL injection. This query is executed when the `Orders` property of a customer object is accessed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\nexec sp_executesql N'SELECT\n[Extent1].[OrderID] AS [OrderID],\n[Extent1].[CustomerID] AS [CustomerID],\n[Extent1].[EmployeeID] AS [EmployeeID],\n[Extent1].[OrderDate] AS [OrderDate],\n[Extent1].[RequiredDate] AS [RequiredDate],\n[Extent1].[ShippedDate] AS [ShippedDate],\n[Extent1].[ShipVia] AS [ShipVia],\n[Extent1].[Freight] AS [Freight],\n[Extent1].[ShipName] AS [ShipName],\n[Extent1].[ShipAddress] AS [ShipAddress],\n[Extent1].[ShipCity] AS [ShipCity],\n[Extent1].[ShipRegion] AS [ShipRegion],\n[Extent1].[ShipPostalCode] AS [ShipPostalCode],\n[Extent1].[ShipCountry] AS [ShipCountry]\nFROM [dbo].[Orders] AS [Extent1]\nWHERE [Extent1].[CustomerID] = @EntityKeyValue1',N'@EntityKeyValue1 nchar(5)',@EntityKeyValue1=N'AROUT'\n```\n\n----------------------------------------\n\nTITLE: Searching Metadata (Tags or Authors) - C#\nDESCRIPTION: This code snippet demonstrates how to search for metadata (tags or authors) that match a text string. It retrieves all metadata items of the specified type and filters them based on whether the `Key` property contains the search text. The code pulls aliases first, then applies an in-memory filter for the _contains_ logic, as the author list is not long.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task<IEnumerable<DocumentSummary>> SearchDocumentsAsync(string text)\n{\n    ArgumentNullException.ThrowIfNull(text);\n\n    var partitionKey = _context.ComputePartitionKey<Document>();\n    var allDocuments = _context.Documents.Where(d => d.DocumentId == partitionKey);\n    var results = allDocuments.Where(d => d.Content != null && d.Content.Contains(text) || d.Title.Contains(text)).Select(d => d.GetSummary());\n\n    return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Serialized Graph with Json.NET (C#)\nDESCRIPTION: This code snippet demonstrates how to attach a serialized graph of entities to the Entity Framework Core context using Json.NET. The `PreserveReferencesHandling` option ensures that circular references and duplicate entities are handled correctly during serialization.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nusing var context = new BlogsContext();\n\n            var posts = JsonConvert.DeserializeObject<List<Post>>(json);\n\n            context.UpdateRange(posts);\n\n            context.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: stringValue.ToUpper .NET to SQL translation\nDESCRIPTION: Shows the translation of stringValue.ToUpper() in .NET to UPPER(@stringValue) in SQL when used with Entity Framework Core and Cosmos DB. It converts a string to uppercase.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/querying.md#_snippet_38\n\nLANGUAGE: .NET\nCODE:\n```\nstringValue.ToUpper()\n```\n\nLANGUAGE: SQL\nCODE:\n```\n[UPPER(@stringValue)](/azure/cosmos-db/nosql/query/upper)\n```\n\n----------------------------------------\n\nTITLE: Renaming Update Stored Procedure - C#\nDESCRIPTION: This snippet demonstrates renaming only the update stored procedure for the Blog entity.  It uses the Fluent API to specify that the update procedure should be named 'modify_blog'.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/fluent/cud-stored-procedures.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodelBuilder\n  .Entity<Blog>()\n  .MapToStoredProcedures(s =>\n    s.Update(u => u.HasName(\"modify_blog\")));\n```\n\n----------------------------------------\n\nTITLE: Reparenting with GetReparentedValue C#\nDESCRIPTION: This C# code snippet iterates through the descendants of Longo and updates their PathFromPatriarch using the GetReparentedValue method to re-parent them from Mungo to Ponto.  It then saves the changes to the database using SaveChangesAsync.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_82\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var descendent in longoAndDescendents)\n        {\n            descendent.PathFromPatriarch\n                = descendent.PathFromPatriarch.GetReparentedValue(\n                    mungo.PathFromPatriarch, ponto.PathFromPatriarch)!;\n        }\n\n        await context.SaveChangesAsync();\n```\n\n----------------------------------------\n\nTITLE: Deleting Existing Entity - C#\nDESCRIPTION: This code snippet shows how to mark an existing entity (Post) for deletion using `DbContext.Remove`. The entity is tracked in the `Deleted` state, and `SaveChanges` will generate a DELETE statement.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/explicit-tracking.md#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\ncontext.Remove(\n    new Post\n    {\n        Id = 2\n    });\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT statements with and without IsAuthorized\nDESCRIPTION: Shows the SQL INSERT statements generated by EF Core for inserting User entities. Demonstrates the different SQL commands based on whether the IsAuthorized property is explicitly set or relies on the database default.  Illustrates how the database default is used if IsAuthorized isn't explicitly set.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\n-- Executed DbCommand (0ms) [Parameters=[@p0='Mac' (Size = 3)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"User\" (\"Name\")\nVALUES (@p0);\nSELECT \"Id\", \"IsAuthorized\"\nFROM \"User\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='True' (DbType = String), @p1='Alice' (Size = 5)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"User\" (\"IsAuthorized\", \"Name\")\nVALUES (@p0, @p1);\nSELECT \"Id\"\nFROM \"User\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n\n-- Executed DbCommand (0ms) [Parameters=[@p0='False' (DbType = String), @p1='Baxter' (Size = 6)], CommandType='Text', CommandTimeout='30']\nINSERT INTO \"User\" (\"IsAuthorized\", \"Name\")\nVALUES (@p0, @p1);\nSELECT \"Id\"\nFROM \"User\"\nWHERE changes() = 1 AND \"rowid\" = last_insert_rowid();\n```\n\n----------------------------------------\n\nTITLE: No Tracking LINQ to Entities Query with DbContext in C#\nDESCRIPTION: This code snippet demonstrates how to execute a No Tracking LINQ to Entities query using `DbContext`.  It utilizes the `AsNoTracking()` extension method to disable change tracking for the query results. The query filters the `Products` entity set to retrieve products belonging to the 'Beverages' category. This approach is beneficial when you only need to read data and don't intend to modify the retrieved entities.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/performance/perf-whitepaper.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nvar q = context.Products.AsNoTracking()\n                        .Where(p => p.Category.CategoryName == \"Beverages\");\n```\n\n----------------------------------------\n\nTITLE: Migrate to a specific migration\nDESCRIPTION: This command runs migrations up to a specific migration, specified by its name.  It applies all previous migrations as required until reaching the target migration.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/migrate-exe.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nMigrate.exe MyApp.exe /startupConfigurationFile=\"MyApp.exe.config\" /targetMigration=\"AddTitle\"\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic standalone\nDESCRIPTION: This snippet showcases how to use Open Iconic icons without a specific framework. It relies on the default Open Iconic CSS and utilizes the `data-glyph` attribute for specifying the icon.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Finding All Ancestors - SQL\nDESCRIPTION: The generated SQL query finds all ancestors. It filters for Halflings whose PathFromPatriarch are ancestors of the Halfling with the provided name. It returns the Id, Name, PathFromPatriarch, and YearOfBirth of the found ancestors, ordered by level descending.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_76\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE (\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0 AND [h].[Id] <> [h0].[Id]).IsDescendantOf([h].[PathFromPatriarch]) = CAST(1 AS bit)\nORDER BY [h].[PathFromPatriarch].GetLevel() DESC\n```\n\n----------------------------------------\n\nTITLE: Define Unidirectional Many-to-Many Classes (C#)\nDESCRIPTION: Defines the Post and Tag classes to represent a unidirectional many-to-many relationship. The Post class has a navigation property to Tags, while the Tag class does not have a navigation property back to Posts.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/relationships/many-to-many.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\npublic class Post\n{\n    public int Id { get; set; }\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int Id { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Name with Data Annotations - C#\nDESCRIPTION: This code demonstrates how to explicitly specify the database table name for an entity using the [Table] data annotation. The Table attribute is used on the model class.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[Table(\"Blogs\")]\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Default Open Iconic Stylesheet\nDESCRIPTION: This snippet shows how to include the default Open Iconic stylesheet. This allows you to utilize the icons with their default styling.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Finding Entity by Composite Key - EF6 - C#\nDESCRIPTION: This code snippet shows how to find an entity using a composite primary key in Entity Framework 6. It assumes an entity named `BlogSettings` with a composite key consisting of `BlogId` and `Username`. The `Find` method is called with both key values to retrieve the entity from the `BloggingContext`.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/querying/index.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var context = new BloggingContext())\n{\n    var settings = context.BlogSettings.Find(3, \"johndoe1987\");\n}\n```\n\n----------------------------------------\n\nTITLE: Orders Collection with Reference Equality in C#\nDESCRIPTION: This code snippet demonstrates the creation of a collection navigation property (Orders) using a HashSet that enforces reference equality.  It initializes the HashSet with an instance of ReferenceEqualityComparer to ensure that only distinct entity instances based on reference are added to the collection.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/identity-resolution.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic ICollection<Order> Orders { get; set; }\n    = new HashSet<Order>(ReferenceEqualityComparer.Instance);\n```\n\n----------------------------------------\n\nTITLE: Add Categories DataGrid XAML\nDESCRIPTION: Adds a DataGrid to the XAML code to display the categories. It binds the DataGrid to the CategoriesViewSource, allowing the user to view and interact with the category data.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/wpf.md#_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<DataGrid x:Name=\"categoriesDataGrid\" ItemsSource=\"{Binding Source={StaticResource CategoriesViewSource}}\" AutoGenerateColumns=\"False\" EnableRowVirtualization=\"True\" SelectedIndex=\"0\" Margin=\"10\" >\n            <DataGrid.Columns>\n                <DataGridTextColumn x:Name=\"idColumn\" Binding=\"{Binding Id}\" Header=\"Id\" Width=\"SizeToHeader\" IsReadOnly=\"True\"/>\n                <DataGridTextColumn x:Name=\"nameColumn\" Binding=\"{Binding Name}\" Header=\"Name\" Width=\"*\"/>\n                <DataGridTextColumn x:Name=\"categoryIdColumn\" Binding=\"{Binding CategoryId}\" Header=\"CategoryId\" Width=\"SizeToHeader\" IsReadOnly=\"True\"/>\n            </DataGrid.Columns>\n        </DataGrid>\n```\n\n----------------------------------------\n\nTITLE: Running DocFX to Serve the Documentation\nDESCRIPTION: This code snippet shows how to run DocFX with the default template to serve the documentation locally. The `-t default` argument specifies the template, and `--serve` starts a local web server to view the documentation.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocfx -t default --serve\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Foundation CSS\nDESCRIPTION: This snippet shows how to include the Open Iconic CSS stylesheet for Foundation. The stylesheet should be placed inside the HTML <head> section.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Including Default Open Iconic Stylesheet\nDESCRIPTION: This snippet shows how to include the default Open Iconic stylesheet. It links the CSS file in the HTML header.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/end2end/PlanetaryDocs/PlanetaryDocs/wwwroot/css/open-iconic/README.mdx#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons standalone\nDESCRIPTION: This snippet demonstrates how to use Open Iconic icons without Bootstrap or Foundation. It involves adding the `oi` class and a `data-glyph` attribute to a `<span>` element.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVGs in HTML\nDESCRIPTION: This code snippet demonstrates how to use Open Iconic SVGs directly in HTML. It's recommended to include an `alt` attribute for accessibility.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/MultiDb/wwwroot/css/open-iconic/README.md.txt#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Property Conversion to String in EF Core\nDESCRIPTION: This code snippet demonstrates how to configure an enum property to be converted to a string when using Entity Framework Core. It overrides the OnModelCreating method to configure the User entity's Status property to use a string conversion.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/breaking-changes.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<User>().Property(e => e.Status).HasConversion<string>();\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting data into the OnlineCourse Table using SQL\nDESCRIPTION: This SQL script inserts sample data into the 'OnlineCourse' table. It includes fields such as 'CourseID' and 'URL'. This data populates the table with online course details.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO dbo.OnlineCourse (CourseID, URL)\n```\n\n----------------------------------------\n\nTITLE: Define Product Entity Model C#\nDESCRIPTION: Defines a simple Product class with properties for Id, Name, CategoryId, and Category navigation property.  This model will be used by EF Core to create the database schema using the code-first approach.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/get-started/wpf.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\nnamespace GetStartedWPF\n{\n    public class Product\n    {\n        public int Id { get; set; }\n        [Required]\n        public string Name { get; set; }\n\n        public int CategoryId { get; set; }\n        public virtual Category Category { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Url Property to Blog Class\nDESCRIPTION: This C# code snippet shows the addition of a 'Url' property of type string to the 'Blog' class.\nThis change will require a migration to update the database schema.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/automatic.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic string Url { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Add Abstract Property to Post Class\nDESCRIPTION: This C# code snippet adds a string property called 'Abstract' to the 'Post' class.\nIt allows for storing a brief summary or excerpt of the post's content.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/automatic.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic string Abstract { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Inserting data into the Course Table using SQL\nDESCRIPTION: This SQL script inserts sample data into the 'Course' table. It includes fields such as 'CourseID', 'Title', 'Credits', and 'DepartmentID'. This data populates the table with various courses and their corresponding information.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/resources/school-database.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (1050, 'Chemistry', 4, 1);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (1061, 'Physics', 4, 1);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (1045, 'Calculus', 4, 7);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (2030, 'Poetry', 2, 2);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (2021, 'Composition', 3, 2);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (2042, 'Literature', 4, 2);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (4022, 'Microeconomics', 3, 4);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (4041, 'Macroeconomics', 3, 4);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (4061, 'Quantitative', 2, 4);\nINSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\nVALUES (3141, 'Trigonometry', 4, 7);\nGO\n```\n\n----------------------------------------\n\nTITLE: Model Building Convention for Triggers - EF Core C#\nDESCRIPTION: This code snippet demonstrates how to create a model building convention that automatically configures all entity types to have a trigger. This is useful when most or all tables in the database have triggers, avoiding the need to manually configure each entity type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/sql-server/misc.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class BlankTriggerAddingConvention : IModelFinalizingConvention\n{\n    public void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context)\n    {\n        foreach (var entityType in modelBuilder.Metadata.GetEntityTypes())\n        {\n            entityType.Builder.HasTrigger(\"TR_All_Tables\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Database (Empty Database) - PowerShell\nDESCRIPTION: Applies the 'InitialCreate' migration to the database. Initially, the 'Up' method is commented out so that the local database isn't recreated. This command adds a row to the '__MigrationsHistory' table indicating that the migration has been applied.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/migrations/existing-database.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Database\n```\n\n----------------------------------------\n\nTITLE: Mapping with Condition Element (MSL)\nDESCRIPTION: This XML snippet shows how to use the Condition element to map data based on whether the HireDate or EnrollmentDate columns are null. It maps SchoolModel.Instructor when HireDate is not null and EnrollmentDate is null, and SchoolModel.Student when EnrollmentDate is not null and HireDate is null. This is part of Entity Framework's MSL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n <EntitySetMapping Name=\"People\">\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel.Person)\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"FirstName\" ColumnName=\"FirstName\" />\n       <ScalarProperty Name=\"LastName\" ColumnName=\"LastName\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel.Instructor)\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"HireDate\" ColumnName=\"HireDate\" />\n       <Condition ColumnName=\"HireDate\" IsNull=\"false\" />\n       <Condition ColumnName=\"EnrollmentDate\" IsNull=\"true\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n   <EntityTypeMapping TypeName=\"IsTypeOf(SchoolModel.Student)\">\n     <MappingFragment StoreEntitySet=\"Person\">\n       <ScalarProperty Name=\"PersonID\" ColumnName=\"PersonID\" />\n       <ScalarProperty Name=\"EnrollmentDate\"\n                       ColumnName=\"EnrollmentDate\" />\n       <Condition ColumnName=\"EnrollmentDate\" IsNull=\"false\" />\n       <Condition ColumnName=\"HireDate\" IsNull=\"true\" />\n     </MappingFragment>\n   </EntityTypeMapping>\n </EntitySetMapping>\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Migration Bundles\nDESCRIPTION: This command displays the help information for the `dotnet ef migrations bundle` command, listing all available options and their descriptions. It requires the EF Core tools to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-6.0/whatsnew.md#_snippet_16\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet ef migrations bundle --help\n```\n\n----------------------------------------\n\nTITLE: Specifying a Parameter Type in the Configuration\nDESCRIPTION: This snippet demonstrates how to specify the type of a constructor parameter. By default, parameters are assumed to be strings, but the type attribute allows you to specify other types, like System.Int32.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<parameter value=\"2\" type=\"System.Int32\" />\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType with Property Elements in CSDL\nDESCRIPTION: This XML snippet demonstrates the definition of an EntityType named 'Book' using CSDL. It includes several Property elements that define the properties of the entity, such as ISBN, Title, and Revision, along with NavigationProperty elements defining relationships.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Book\">\n   <Key>\n     <PropertyRef Name=\"ISBN\" />\n   </Key>\n   <Property Type=\"String\" Name=\"ISBN\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Title\" Nullable=\"false\" />\n   <Property Type=\"Decimal\" Name=\"Revision\" Nullable=\"false\" Precision=\"29\" Scale=\"29\" />\n   <NavigationProperty Name=\"Publisher\" Relationship=\"BooksModel.PublishedBy\"\n                       FromRole=\"Book\" ToRole=\"Publisher\" />\n   <NavigationProperty Name=\"Authors\" Relationship=\"BooksModel.WrittenBy\"\n                       FromRole=\"Book\" ToRole=\"Author\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlConnectionFactory to Use a Specific SQL Server Instance\nDESCRIPTION: This snippet shows how to configure the SqlConnectionFactory to use a specific SQL Server instance other than the default .\\SQLEXPRESS. It overrides the server part of the connection string using a constructor parameter.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/fundamentals/configuring/config-file.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<entityFramework>\n  <defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework\">\n    <parameters>\n      <parameter value=\"Data Source=MyDatabaseServer; Integrated Security=True; MultipleActiveResultSets=True\" />\n    </parameters>\n  </defaultConnectionFactory>\n</entityFramework>\n```\n\n----------------------------------------\n\nTITLE: Including Entity Types in Model - C#\nDESCRIPTION: This code demonstrates how EF Core automatically includes entity types based on DbSet properties in the context, navigation properties, and explicit configuration in OnModelCreating. It shows a Blog, Post, and AuditEntry being included.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/modeling/entity-types.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n\n    public List<Post> Posts { get; set; }\n}\n\npublic class Post\n{\n    public int PostId { get; set; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n\n    public int BlogId { get; set; }\n    public Blog Blog { get; set; }\n}\n\npublic class MyContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AuditEntry>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HierarchyId with UseSqlServer in EF Core - C#\nDESCRIPTION: This snippet shows how to enable HierarchyId support by calling `UseHierarchyId` as part of the application's call to `UseSqlServer` when configuring EF Core options. It requires the `Microsoft.EntityFrameworkCore.SqlServer.HierarchyId` package.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-8.0/whatsnew.md#_snippet_66\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UseSqlServer(\n    connectionString,\n    x => x.UseHierarchyId());\n```\n\n----------------------------------------\n\nTITLE: Loading and Projecting Document Audits in C#\nDESCRIPTION: This snippet demonstrates how to load document audits from Cosmos DB using EF Core, then project them onto a summary. The projection is done in memory after materializing the query results, due to the need to deserialize the snapshot for extracting relevant data such as title and author. It uses `ToListAsync` to materialize the query.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/cosmos/planetary-docs-sample.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar audits = await _context.DocumentAudits\n    .Where(x => x.DocumentId == id)\n    .OrderByDescending(x => x.Version)\n    .Take(20)\n    .ToListAsync();\n\nvar summaries = audits.Select(audit =>\n{\n    var snapshot = JsonSerializer.Deserialize<Document>(audit.Snapshot);\n    return new AuditSummary\n    {\n        Version = audit.Version,\n        Modified = audit.Modified,\n        ModifiedBy = audit.ModifiedBy,\n        Title = snapshot.Title\n    };\n}).ToList();\n```\n\n----------------------------------------\n\nTITLE: SQL for Inlined Subquery in EF8\nDESCRIPTION: This SQL demonstrates the generated SQL in EF8 where the `dotnetPosts` IQueryable is executed separately, leading to multiple round trips.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-9.0/whatsnew.md#_snippet_46\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT COUNT(*)\nFROM [Posts] AS [p]\nWHERE [p].[Title] LIKE N'%.NET%'\n\nSELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE [p].[Title] LIKE N'%.NET%' AND [p].[Id] > 2\nORDER BY (SELECT 1)\nOFFSET @__p_1 ROWS FETCH NEXT @__p_2 ROWS ONLY\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType with Key in CSDL (XML)\nDESCRIPTION: This code snippet demonstrates how to define an EntityType named 'Book' in CSDL. The ISBN property is specified as the entity key, and other properties like Title and Revision are also defined. Navigation properties for Publisher and Authors are included to represent relationships with other entity types.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Book\">\n   <Key>\n     <PropertyRef Name=\"ISBN\" />\n   </Key>\n   <Property Type=\"String\" Name=\"ISBN\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Title\" Nullable=\"false\" />\n   <Property Type=\"Decimal\" Name=\"Revision\" Nullable=\"false\" Precision=\"29\" Scale=\"29\" />\n   <NavigationProperty Name=\"Publisher\" Relationship=\"BooksModel.PublishedBy\"\n                       FromRole=\"Book\" ToRole=\"Publisher\" />\n   <NavigationProperty Name=\"Authors\" Relationship=\"BooksModel.WrittenBy\"\n                       FromRole=\"Book\" ToRole=\"Author\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: OnConfiguring with IsConfigured check (EF Core 6.0)\nDESCRIPTION: This snippet demonstrates the OnConfiguring method generated in EF Core 6.0, which includes a check to IsConfigured before setting up the DbContext options.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/breaking-changes.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    if (!optionsBuilder.IsConfigured)\n    {\n#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n        optionsBuilder.UseNpgsql(\"MySecretConnectionString\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EDMX Function Mapping XML\nDESCRIPTION: XML snippet showing the initial function mapping element in the EDMX file, before modification for multiple result sets. This mapping connects the function import to the stored procedure in the database.  It needs to be updated to map to individual entity types instead of a complex type.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/multiple-result-sets.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- C-S mapping content -->\n<edmx:Mappings>\n\n...\n\n  <FunctionImportMapping FunctionImportName=\"GetAllBlogsAndPosts\" FunctionName=\"BlogModel.Store.GetAllBlogsAndPosts\">\n    <ResultMapping>\n      <ComplexTypeMapping TypeName=\"BlogModel.GetAllBlogsAndPosts_Result\">\n        <ScalarProperty Name=\"BlogId\" ColumnName=\"BlogId\" />\n        <ScalarProperty Name=\"Name\" ColumnName=\"Name\" />\n        <ScalarProperty Name=\"Description\" ColumnName=\"Description\" />\n      </ComplexTypeMapping>\n    </ResultMapping>\n  </FunctionImportMapping>\n\n...\n\n</edmx:Mappings>\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure Definition (SQL)\nDESCRIPTION: This SQL code defines a stored procedure named GetGrades that takes a student ID as input and returns enrollment information (EnrollmentID, Grade, CourseID, StudentID) for that student from the StudentGrade table. The SELECT statement aliases the column names using the 'as' keyword.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\n CREATE PROCEDURE [dbo].[GetGrades]\n             @student_Id int\n             AS\n             SELECT     EnrollmentID as enroll_id,\n                                                                             Grade as grade,\n                                                                             CourseID as course_id,\n                                                                             StudentID as student_id\n                                               FROM dbo.StudentGrade\n             WHERE StudentID = @student_Id\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Key with PropertyRef Element in CSDL\nDESCRIPTION: This XML snippet demonstrates using the PropertyRef element within the Key element to define the primary key of an EntityType in CSDL. The example defines the 'ISBN' property of the 'Book' entity as its key.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/csdl-spec.md#_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Book\">\n   <Key>\n     <PropertyRef Name=\"ISBN\" />\n   </Key>\n   <Property Type=\"String\" Name=\"ISBN\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Title\" Nullable=\"false\" />\n   <Property Type=\"Decimal\" Name=\"Revision\" Nullable=\"false\" Precision=\"29\" Scale=\"29\" />\n   <NavigationProperty Name=\"Publisher\" Relationship=\"BooksModel.PublishedBy\"\n                       FromRole=\"Book\" ToRole=\"Publisher\" />\n   <NavigationProperty Name=\"Authors\" Relationship=\"BooksModel.WrittenBy\"\n                       FromRole=\"Book\" ToRole=\"Author\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Conceptual Model Entity Type Definition\nDESCRIPTION: This snippet shows the definition of an EntityType named 'Course' within the conceptual model. It includes properties such as CourseID, Title, and Credits, as well as a NavigationProperty to the 'Department' entity. This entity type is used as context for the subsequent MSL example for AssociationEnd element.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/advanced/edmx/msl-spec.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n <EntityType Name=\"Course\">\n   <Key>\n     <PropertyRef Name=\"CourseID\" />\n   </Key>\n   <Property Type=\"Int32\" Name=\"CourseID\" Nullable=\"false\" />\n   <Property Type=\"String\" Name=\"Title\" Nullable=\"false\" MaxLength=\"100\"\n             FixedLength=\"false\" Unicode=\"true\" />\n   <Property Type=\"Int32\" Name=\"Credits\" Nullable=\"false\" />\n   <NavigationProperty Name=\"Department\"\n                       Relationship=\"SchoolModel.FK_Course_Department\"\n                       FromRole=\"Course\" ToRole=\"Department\" />\n </EntityType>\n```\n\n----------------------------------------\n\nTITLE: Required navigation with backing field C#\nDESCRIPTION: This example shows how to implement a required navigation property using a nullable backing field.  Accessing the property without loading the relationship results in an `InvalidOperationException`. The _customer field is nullable, but the Customer property is non-nullable.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/miscellaneous/nullable-reference-types.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate Customer? _customer;\npublic Customer Customer\n{\n    get => _customer ?? throw new InvalidOperationException(\"Customer was not loaded\");\n    set => _customer = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Install NuGet package using PowerShell\nDESCRIPTION: Installs the Microsoft.EntityFrameworkCore.InMemory NuGet package using the Package Manager Console in Visual Studio.  This adds the package as a dependency to your project.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/providers/in-memory/index.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.EntityFrameworkCore.InMemory\n```\n\n----------------------------------------\n\nTITLE: Define Foo1 Entity with Integer Property\nDESCRIPTION: Defines a simple Foo1 entity with an Id and an integer property Count. This is used to demonstrate the problem with using CLR defaults for non-nullable properties.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/change-tracking/miscellaneous.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class Foo1\n{\n    public int Id { get; set; }\n    public int Count { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Output Example with Basic Query Tag\nDESCRIPTION: This SQL code snippet shows an example of the SQL generated by EF Core after using basic query tag. The query tag is rendered as a comment in the SQL.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/querying/tags.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n-- This is my spatial query!\n\nSELECT TOP(@__p_1) [p].[Id], [p].[Location]\nFROM [People] AS [p]\nORDER BY [p].[Location].STDistance(@__myLocation_0) DESC\n```\n\n----------------------------------------\n\nTITLE: Define the University model class\nDESCRIPTION: This code defines the University class with an integer UniversityID, a string Name, and a DbGeography Location property. The Location property will store spatial data related to the university's location.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/code-first/data-types/spatial.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class University  \n{\n    public int UniversityID { get; set; }\n    public string Name { get; set; }\n    public DbGeography Location { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Operation using MigrationBuilder.Sql() in C#\nDESCRIPTION: This C# extension method demonstrates creating a custom migration operation using `MigrationBuilder.Sql()`. It defines a `CreateUser` extension method on `MigrationBuilder` that executes a SQL command to create a user with the specified name and password. This approach is simple but tightly coupled to the specific SQL dialect.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/managing-schemas/migrations/operations.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MigrationBuilderExtensions\n{\n    public static MigrationBuilder CreateUser(this MigrationBuilder migrationBuilder, string name, string password)\n        => migrationBuilder.Sql($\"CREATE USER [{name}] WITH PASSWORD = '{password}'\");\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic SVG\nDESCRIPTION: This code snippet demonstrates how to display an Open Iconic SVG image within an HTML document. It uses the `<img>` tag, referencing the SVG file and including an `alt` attribute for accessibility.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/samples/core/Miscellaneous/Multitenancy/SingleDbSingleTable/wwwroot/css/open-iconic/README.md.txt#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Binding DbSet to ObjectDataSource in Windows Forms (C#)\nDESCRIPTION: This code snippet demonstrates how to bind an EF Core DbSet to an ObjectDataSource in a Windows Forms application using C#. It initializes the database context, loads the Categories DbSet, and binds it to a BindingSource.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/core/what-is-new/ef-core-7.0/whatsnew.md#_snippet_186\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainForm : Form\n{\n    private ProductsContext? dbContext;\n\n    public MainForm()\n    {\n        InitializeComponent();\n    }\n\n    protected override void OnLoad(EventArgs e)\n    {\n        base.OnLoad(e);\n\n        this.dbContext = new ProductsContext();\n\n        this.dbContext.Categories.Load();\n        this.categoryBindingSource.DataSource = dbContext.Categories.Local.ToBindingList();\n    }\n\n    protected override void OnClosing(CancelEventArgs e)\n    {\n        base.OnClosing(e);\n\n        this.dbContext?.Dispose();\n        this.dbContext = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install EntityFramework Version 5.0.0 using Package Manager Console\nDESCRIPTION: This snippet demonstrates how to install Entity Framework version 5.0.0 using the Package Manager Console. It is used when targeting EF5.x and upgrading from EF4.x. This requires the NuGet Package Manager to be installed.\nSOURCE: https://github.com/dotnet/entityframework.docs/blob/main/entity-framework/ef6/modeling/designer/select-runtime-version.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package EntityFramework -version 5.0.0\n```"
  }
]