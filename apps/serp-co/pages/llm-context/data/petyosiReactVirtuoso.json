[
  {
    "owner": "petyosi",
    "repo": "react-virtuoso",
    "content": "TITLE: Simulating Chatbot Message Streaming with React Virtuoso Message List - TypeScript\nDESCRIPTION: This snippet implements a React component called App which simulates a chatbot conversation using the VirtuosoMessageList component from the @virtuoso.dev/message-list library. It dynamically appends user messages and streams the chatbot's responses by repeatedly updating the content of bot messages. Required dependencies include React, @virtuoso.dev/message-list, and @ngneat/falso for random text generation. The message list scrolls smoothly to the bottom when new content appears, leveraging the shortSizeAlign property set to 'bottom-smooth' and autoscrollToBottomBehavior implicitly for smooth animations. Messages are keyed by a unique string identifier. The snippet handles asynchronous updates via setTimeout and setInterval for simulated streaming. Expected input is triggered through a button click that initiates the message sequence, and the output is a vertically scrollable chat UI with visually distinct message bubbles for user and bot messages.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/02-ai-chatbot.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'  \nimport { VirtuosoMessageList, VirtuosoMessageListProps, VirtuosoMessageListMethods, VirtuosoMessageListLicense } from '@virtuoso.dev/message-list'  \nimport { randTextRange, randPhrase } from '@ngneat/falso'  \n\ninterface Message {  \n  key: string  \n  text: string  \n  user: 'me' | 'other'  \n}  \n\nlet idCounter = 0  \n\nfunction randomMessage(user: Message['user']): Message {  \n  return { user, key: `${idCounter++}`, text: randTextRange({ min: user === 'me' ? 20 : 100, max: 200 }) }  \n}  \n\nconst ItemContent: VirtuosoMessageListProps<Message, null>['ItemContent'] = ({ data }) => {  \n  const ownMessage = data.user === 'me'  \n  return (  \n    <div style={{ paddingBottom: '2rem', display: 'flex' }}>  \n      <div  \n        style={{  \n          maxWidth: '80%',  \n          marginLeft: data.user === 'me' ? 'auto' : undefined,  \n          border: '1px solid var(--border)',  \n          background: ownMessage ? 'var(--background)' : 'var(--alt-background)',  \n          color: 'var(--foreground)',  \n          borderRadius: '1rem',  \n          padding: '1rem',  \n        }}  \n      >  \n        {data.text}  \n      </div>  \n    </div>  \n  )  \n}  \n\nexport default function App() {  \n  const virtuoso = React.useRef<VirtuosoMessageListMethods<Message>>(null)  \n\n  return (  \n    <div className=\"tall-example\" style={{ height: 500, display: 'flex', flexDirection: 'column', fontSize: '70%' }}>  \n      <VirtuosoMessageListLicense licenseKey=\"\">  \n        <VirtuosoMessageList<Message, null>  \n          ref={virtuoso}  \n          style={{ flex: 1 }}  \n          computeItemKey={({ data }) => data.key}  \n          initialLocation={{ index: 'LAST', align: 'end' }}  \n          shortSizeAlign=\"bottom-smooth\"  \n          ItemContent={ItemContent}  \n        />  \n      </VirtuosoMessageListLicense>  \n\n      <button  \n        onClick={() => {  \n          const myMessage = randomMessage('me')  \n          virtuoso.current?.data.append([myMessage], ({ scrollInProgress, atBottom }) => {  \n            return {  \n              index: 'LAST',  \n              align: 'end',  \n              behavior: atBottom || scrollInProgress ? 'smooth' : 'auto',  \n            }  \n          })  \n\n          setTimeout(() => {  \n            const botMessage = randomMessage('other')  \n            virtuoso.current?.data.append([botMessage])  \n\n            let counter = 0  \n            const interval = setInterval(() => {  \n              if (counter++ > 20) {  \n                clearInterval(interval)  \n              }  \n              virtuoso.current?.data.map((message) => {  \n                  return message.key === botMessage.key ? { ...message, text: message.text + ' ' + randPhrase() } : message  \n                },  \n                'smooth'  \n              )  \n            }, 150)  \n          }, 1000)  \n        }}  \n      >  \n        Ask the bot a question!  \n      </button>  \n    </div>  \n  )  \n}\n```\n\n----------------------------------------\n\nTITLE: Handling Message Delivery with Virtuoso (tsx)\nDESCRIPTION: This snippet modifies the `onNewMessages` event handler to process server responses and update the message list.  It uses `localId` to identify and update temporary messages with their real counterparts from the server. Then, it appends new or updated messages. The callback in append manages scrolling behavior based on current scroll position.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/06-send-messages.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n  channel.onNewMessages = (messages) => {\n// highlight-start\n    const updatingMessageIds: number[] = []\n    messageListRef.current?.data.map((item) => {\n      const updatedItem = !item.delivered && messages.find((m) => m.localId === item.localId)\n      if (updatedItem) {\n        updatingMessageIds.push(updatedItem.id!)\n        return updatedItem\n      } else {\n        return item\n      }\n    })\n\n    const nonUpdatingMessages = messages.filter((m) => !updatingMessageIds.includes(m.id!))\n// highlight-end\n\n    messageListRef.current?.data.append(\n      // highlight-next-line\n      nonUpdatingMessages,\n      ({ atBottom, scrollInProgress }) => {\n        if (atBottom || scrollInProgress) {\n          return 'smooth'\n        } else {\n          setUnseenMessages((val) => val + 1)\n          return false\n        }\n      })\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Send Message Button with Virtuoso (tsx)\nDESCRIPTION: This snippet adds a button to the UI that, when clicked, simulates sending a message. It utilizes the `ChatChannel`'s `sendOwnMessage` method to create a temporary message, which is then appended to the message list using `Virtuoso`'s `append` method. The callback function passed to `append` controls scrolling behavior based on the list's current state.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/06-send-messages.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n  <button\n    onClick={() => {\n      const tempMessage = channel.sendOwnMessage()\n      messageListRef.current?.data.append([tempMessage], ({ scrollInProgress, atBottom }) => {\n        if (atBottom || scrollInProgress) {\n          return 'smooth'\n        } else {\n          return 'auto'\n        }\n      })\n    }}\n  >\n    Send own message\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Rendering and Managing Virtuoso Message List in React - TypeScript\nDESCRIPTION: This TypeScript React snippet demonstrates initializing and rendering the VirtuosoMessageList component, with imperative data management via useRef and handling virtualized, dynamic messages. It creates randomized chat messages attributed to 'me' or 'other', renders custom message components, and appends new messages with animated scroll positioning. The snippet uses the '@virtuoso.dev/message-list' and '@ngneat/falso' packages, along with license management. Key props include initialData (array of messages), computeItemKey (for React list performance), and ItemContent (custom message rendering). Output is a scrollable chat area with an interactive button for simulating new message flows.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/overview.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VirtuosoMessageListProps, VirtuosoMessageListLicense, VirtuosoMessageList } from '@virtuoso.dev/message-list'\nimport { randTextRange } from '@ngneat/falso'\n\ninterface Message {\n  key: string\n  text: string\n  user: 'me' | 'other'\n}\n\nlet idCounter = 0\n\nfunction randomMessage(user: Message['user']): Message {\n  return { user, key: `${idCounter++}`, text: randTextRange({ min: user === 'me' ? 20 : 100, max: 200 }) }\n}\n\nconst ItemContent: VirtuosoMessageListProps<Message, null>['ItemContent'] = ({ data }) => {\n  const ownMessage = data.user === 'me'\n  return (\n    <div style={{ paddingBottom: '2rem', display: 'flex' }}>\n      <div\n        style={{\n          maxWidth: '60%',\n          marginLeft: data.user === 'me' ? 'auto' : undefined,\n          border: '1px solid var(--border)',\n          background: ownMessage ? 'var(--background)' : 'var(--alt-background)',\n          color: 'var(--foreground)',\n          borderRadius: '1rem',\n          padding: '1rem',\n        }}\n      >\n        {data.text}\n      </div>\n    </div>\n  )\n}\n\nexport default function App() {\n  const virtuoso = React.useRef<VirtuosoMessageListMethods<Message>>(null)\n\n  return (\n    <div className=\"wide-example\" style={{ height: 500, display: 'flex', flexDirection: 'column', fontSize: '70%' }}>\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList<Message, null>\n          initialData={Array.from({ length: 100 }, (_, index) => randomMessage(index % 2 === 0 ? 'me' : 'other'))}\n          ref={virtuoso}\n          style={{ flex: 1 }}\n          computeItemKey={({ data }) => data.key}\n          initialLocation={{ index: 'LAST', align: 'end' }}\n          ItemContent={ItemContent}\n        />\n      </VirtuosoMessageListLicense>\n\n      <button\n        style={{marginTop: '1rem', fontSize: '1.1rem', padding: '1rem' }}\n        onClick={(e) => {\n          e.target.disabled = true\n          const myMessage = randomMessage('me')\n          virtuoso.current?.data.append([myMessage], ({ scrollInProgress, atBottom }) => {\n            return {\n              index: 'LAST',\n              align: 'start',\n              behavior: atBottom || scrollInProgress ? 'smooth' : 'auto',\n            }\n          })\n\n          setTimeout(() => {\n            const botMessage = randomMessage('other')\n            virtuoso.current?.data.append([botMessage])\n\n            let counter = 0\n            const interval = setInterval(() => {\n              if (counter++ > 20) {\n                clearInterval(interval)\n                e.target.disabled = false\n              }\n              virtuoso.current?.data.map((message) => {\n                  return message.key === botMessage.key ? { ...message, text: message.text + ' ' + randPhrase() } : message\n                },\n                'smooth'\n              )\n            }, 150)\n          }, 1000)\n        }}\n      >\n        Ask the bot a question!\n      </button>\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Scroll Position to End in VirtuosoMessageList (TSX)\nDESCRIPTION: This TSX snippet shows how to configure the `VirtuosoMessageList` component from `react-virtuoso` to automatically scroll to the last item upon initial rendering. It uses the `initialLocation` prop with `{ index: 'LAST', align: 'end' }` to achieve this behavior, avoiding an unnecessary render cycle of top items.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n  <VirtuosoMessageList<ChatMessage, MessageListContext>\n    context={{ channel }}\n    EmptyPlaceholder={EmptyPlaceholder}\n    ItemContent={ItemContent}\n    style={{ height: \"calc(100vh - 50px)\" }}\n    ref={messageListRef}\n    initialData={channel.messages}\n    // highlight-next-line\n    initialLocation={{ index: 'LAST', align: 'end' }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Prepending Data in VirtuosoMessageList (tsx)\nDESCRIPTION: Demonstrates how to add new items to the beginning of the Virtuoso Message List using the `data.prepend` method. It utilizes a React ref to access the component's methods and a button to trigger the prepend operation, automatically adjusting scroll position.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/working-with-data.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageList, VirtuosoMessageListLicense, VirtuosoMessageListMethods } from '@virtuoso.dev/message-list'\n\nexport default function App() {\n  const ref = React.useRef<VirtuosoMessageListMethods>(null)\n  const offset = React.useRef(0)\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          offset.current = offset.current - 10\n          ref.current.data.prepend(Array.from({ length: 10 }, (_, index) => index + offset.current))\n        }}\n      >\n        Prepend 10 items\n      </button>\n\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          ItemContent={({ data }) => <div>{data}</div>}\n          ref={ref}\n          style={{ height: 500 }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding onScroll Event Handler and Context Prop to VirtuosoMessageList - TypeScript JSX\nDESCRIPTION: Enhances the VirtuosoMessageList component by adding the onScroll event handler to respond to user scroll interactions and a context prop containing loading state and channel data. This integration ensures the component loads older messages as the user scrolls and shares state via context.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/03-loading-older-messages.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<VirtuosoMessageList<ChatMessage, MessageListContext>\n  onScroll={onScroll}\n  context={{ loadingNewer, channel }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Additional Items in GroupedVirtuoso with React TypeScript\nDESCRIPTION: This snippet implements a React functional component that uses the GroupedVirtuoso component to render a virtualized grouped list with load-on-demand capabilities. It initializes data consisting of user groups labeled A-Z, each containing 20 users, and manages group counts dynamically as more items are loaded upon pressing a footer button. Dependencies include React hooks (useMemo, useState, useCallback, useEffect, useRef) and the GroupedVirtuoso component from 'react-virtuoso'. The key parameters are 'groupCounts' to track item counts per group, 'calculateGroupsSoFar' for slicing group counts according to loaded items, and 'loadMore' for asynchronously simulating data fetch and appending items. It expects no external input but simulates delayed loading via setTimeout and outputs an updated grouped list with the ability to load more items seamlessly. The example demonstrates practical state management and dynamic UI updates in a virtualized grouped list context.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/grouped-virtuoso/grouped-with-load-on-demand.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GroupedVirtuoso } from 'react-virtuoso'\\nimport { useMemo, useState, useCallback, useEffect, useRef } from 'react'\\n\\nexport default function App() {\\n  const { users, groups, groupCounts } = useMemo(() => {\\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\\n    \\n    const users = letters.flatMap((letter) => {\\n      return Array.from({ length: 20 }, (_, index) => ({\\n        name: `${letter} User ${index}`,\\n        initials: `${letter}${index}`,\\n        description: `Description for user ${index}`,\\n      }))\\n    })    \\n\\n    const groups = Array.from({ length: 10 }, (_, index) => { return letters[index] })\\n\\n    const groupCounts = groups.map((letter, index) => {\\n      return users.filter((user, userIndex) => user.name.startsWith(letter)).length\\n    })\\n    return { users, groups, groupCounts }\\n  }, [])\\n\\n  const calculateGroupsSoFar = useCallback((totalGroups, count) => {\\n    const groups = []\\n    let i = 0\\n    do {\\n      const group = totalGroups[i]\\n      groups.push(Math.min(group, count))\\n      count -= group\\n      i++\\n    } while (count > 0 && i <= totalGroups.length)\\n    return groups\\n  }, [])\\n\\n  const [currentGroupCounts, setCurrentGroupCounts] = useState([])\\n  const loadedItems = useRef(0)\\n  const [loading, setLoading] = useState(false)\\n\\n  const loadMore = useCallback(() => {\\n    setLoading(true)\\n    return setTimeout(() => {\\n      loadedItems.current += 50\\n      setLoading(false)\\n      setCurrentGroupCounts(\\n        calculateGroupsSoFar(groupCounts, loadedItems.current)\\n      )\\n    }, 500)\\n  }, [])\\n\\n  useEffect(() => {\\n    const timeoutRef = loadMore()\\n    return () => clearTimeout(timeoutRef)\\n  }, [])\\n\\n  return (\\n    <GroupedVirtuoso\\n      style={{ height: '100%' }}\\n      groupCounts={currentGroupCounts}\\n      groupContent={index => (\\n        <div style={{ backgroundColor: 'var(--background)', paddingTop: '1rem' }}>Group {groups[index]}</div>\\n      )}\\n      itemContent={index => (\\n        <div>{users[index].name}</div>\\n      )}\\n      components={{\\n        Footer: () => {\\n          return (\\n            <div\\n              style={{\\n                padding: '2rem',\\n                display: 'flex',\\n                justifyContent: 'center',\\n              }}\\n            >\\n              <button disabled={loading} onClick={loadMore}>\\n                {loading ? 'Loading...' : 'Press to load more'}\\n              </button>\\n            </div>\\n          )\\n        },\\n      }}\\n    />\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Appending New Messages via Button Clicks (TSX)\nDESCRIPTION: Implements click handlers for 'Send message' and 'Receive message' buttons. These handlers use `virtuoso.current?.data.append` to add a single new message (from 'me' or 'other') to the end of the list. It includes logic to determine whether to smoothly scroll to the new message based on the user's current scroll position (`atBottom` or `scrollInProgress`).\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/07-grouped-messages.md#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n      <button\n        onClick={() => {\n          virtuoso.current?.data.append([randomMessage('me')], ({ scrollInProgress, atBottom }) => {\n            if (atBottom || scrollInProgress) {\n              return 'smooth'\n            } else {\n              return 'auto'\n            }\n          })\n        }}\n      >\n        Send message\n      </button>\n\n      <button\n        onClick={() => {\n          virtuoso.current?.data.append([randomMessage('other')], ({ scrollInProgress, atBottom }) => {\n            if (atBottom || scrollInProgress) {\n              return 'smooth'\n            } else {\n              return false\n            }\n          })\n        }}\n      >\n        Receive message\n      </button>\n```\n\n----------------------------------------\n\nTITLE: Assigning Virtuoso Sticky Footer Component (TSX)\nDESCRIPTION: Demonstrates how to integrate the custom `StickyFooter` component into the `VirtuosoMessageList` by assigning it to the `StickyFooter` prop. This enables the scroll-to-bottom button functionality within the message list view.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/04-scroll-to-bottom-button.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n  <VirtuosoMessageList<ChatMessage, MessageListContext>\n    // highlight-start\n    StickyFooter={StickyFooter}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering the Virtuoso Message List Component - React with TypeScript\nDESCRIPTION: Demonstrates rendering the VirtuosoMessageList component wrapped by the necessary license provider, with a ref for imperative control and preloaded with messages from the selected channel. The height is set for viewport filling, which is required for proper rendering. Relies on VirtuosoMessageList, VirtuosoMessageListLicense, ChatMessage typings, and a ref for API access, all of which should be imported or globally available.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst messageListRef = useRef<VirtuosoMessageListMethods<ChatMessage, {}>>(null);\n\nreturn (\n  <main>\n    <VirtuosoMessageListLicense licenseKey=\"\">\n      <VirtuosoMessageList<ChatMessage, {}>\n        style={{ height: \"calc(100vh - 50px)\" }}\n        ref={messageListRef}\n        initialData={channel.messages}\n      />\n    </VirtuosoMessageListLicense>\n  </main>\n)\n```\n\n----------------------------------------\n\nTITLE: Handling onScroll Event to Load Older Messages Automatically - React TypeScript\nDESCRIPTION: Defines an onScroll event handler using React.useCallback to monitor the scroll position using the listOffset property. When the scroll is near the top (> -100 pixels), and no load operation is in progress, it sets a loading flag and fetches older messages before the current firstMessageId. The newly fetched messages are prepended to the list to maintain chronological order. Errors are logged and loading flags managed properly to prevent concurrent loads.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/03-loading-older-messages.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst [loadingNewer, setLoadingNewer] = React.useState(false)\n// ...\nconst onScroll = React.useCallback(\n  (location: ListScrollLocation) => {\n    // offset is 0 at the top, -totalScrollSize + viewportHeight at the bottom\n    if (location.listOffset > -100 && !loadingNewer && firstMessageId.current) {\n      setLoadingNewer(true)\n      channel\n        .getMessages({ limit: 20, before: firstMessageId.current })\n        .then((messages) => {\n          if (messages !== null) {\n            firstMessageId.current = messages[0].id\n            messageListRef.current?.data.prepend(messages)\n            setLoadingNewer(false)\n          }\n        })\n        .catch((error) => {\n          console.error(error)\n        })\n    }\n  },\n  [channel, loadingNewer]\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Message Reactions in Virtuoso Message List - TypeScript\nDESCRIPTION: This TypeScript React snippet implements a messaging interface with a Virtuoso Message List where users can like messages. It shows state management for toggling the liked state, dynamically updates the UI with a heart reaction, and handles scroll behavior using Virtuoso's data.map functionality with an optional autoscroll parameter. Dependencies include @virtuoso.dev/message-list for UI components, @ngneat/falso for message text generation, and React. The App component initializes demo data and passes item content with interactive like buttons to the Virtuoso message list.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/04-reactions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VirtuosoMessageList, VirtuosoMessageListLicense, useVirtuosoMethods, VirtuosoMessageListProps, VirtuosoMessageListMethods } from '@virtuoso.dev/message-list'\nimport * as React from 'react'\nimport { randTextRange, rand } from '@ngneat/falso'\n\ninterface Message {\n  key: string\n  text: string\n  user: 'me' | 'other'\n  liked: boolean\n}\n\nlet idCounter = 0\n\nfunction randomMessage(user: Message['user']): Message {\n  return { liked: false, user, key: `${idCounter++}`, text: randTextRange({ min: user === 'me' ? 20 : 100, max: 200 }) }\n}\n\nconst ItemContent: VirtuosoMessageListProps<Message, null>['ItemContent'] = ({ data }) => {\n  const methods = useVirtuosoMethods<Message, {}>()\n  return (\n    <div\n      style={{\n        paddingBottom: '2rem',\n        display: 'flex',\n        flexDirection: data.user === 'me' ? 'row-reverse' : 'row',\n      }}\n    >\n      <div\n        style={{\n          maxWidth: '80%',\n          display: 'flex',\n          flexDirection: data.user === 'me' ? 'row-reverse' : 'row',\n          alignItems: 'center',\n        }}\n      >\n        <div\n          style={{\n            backgroundColor: data.user === 'me' ? 'var(--background)' : 'var(--alt-background)',\n            border: '1px solid var(--border)',\n            borderRadius: '1rem',\n            padding: '1rem',\n          }}\n        >\n          {data.text}\n          {data.liked ? <div>❤️</div> : ''}\n        </div>\n        <button\n          style={{ appearance: 'none', border: 'none', background: 'transparent', cursor: 'pointer' }}\n          onClick={() => {\n            methods.data.map((item) => {\n                return item.key === data.key ? { ...item, liked: !item.liked } : item\n              }, \n            'smooth')\n          }}\n        >\n          {data.liked ? '❤️' : '🤍'}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default function App() {\n  const messages = React.useMemo(() => Array.from({ length: 100 }, () => randomMessage(rand(['me', 'other']))), [])\n  const virtuoso = React.useRef<VirtuosoMessageListMethods<Message>>(null)\n\n  return (\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList<Message, null>\n          ref={virtuoso}\n          initialData={messages}\n          style={{ height: '100%' }}\n          computeItemKey={({ data }) => data.key}\n          initialLocation={{ index: 'LAST', align: 'end' }}\n          ItemContent={ItemContent}\n        />\n      </VirtuosoMessageListLicense>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating VirtuosoMessageList with Context and Placeholder - React with TypeScript\nDESCRIPTION: Updates the VirtuosoMessageList's ref type and integrates both the message channel context and a custom EmptyPlaceholder for contextual rendering. Ensures that both loading and empty states are handled gracefully. Relies on previous context/interface/type definitions and should be part of the Home page's returned JSX.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n//highlight-next-line\n  const messageListRef = useRef<VirtuosoMessageListMethods<ChatMessage, MessageListContext>>(null);\n//...\n// highlight-start\n  <VirtuosoMessageList<ChatMessage, MessageListContext>\n    context={{ channel }}\n    EmptyPlaceholder={EmptyPlaceholder}\n// highlight-end\n    style={{ height: \"calc(100vh - 50px)\" }}\n    ref={messageListRef}\n    initialData={channel.messages}\n  />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom ItemContent to VirtuosoMessageList - React with TypeScript\nDESCRIPTION: Integrates the previously defined ItemContent component into VirtuosoMessageList through the ItemContent prop, enabling custom rendering of chat messages in the list. Also passes context and the custom EmptyPlaceholder, with styling and ref maintenance. This snippet assumes all supporting types, refs, and components have been set up above.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n  <VirtuosoMessageList<ChatMessage, MessageListContext>\n    context={{ channel }}\n    EmptyPlaceholder={EmptyPlaceholder}\n    // highlight-next-line\n    ItemContent={ItemContent}\n    style={{ height: \"calc(100vh - 50px)\" }}\n    ref={messageListRef}\n    initialData={channel.messages}\n  />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Virtualized Table with Sticky Fixed Columns in React TypeScript\nDESCRIPTION: This snippet creates a React functional component named App that renders a large table of user data using the TableVirtuoso component from the react-virtuoso library. The first column and the header are made sticky using custom inline CSS styles with the position: 'sticky' property. The users array is memoized with useMemo to optimize performance by preventing unnecessary recalculations. The table is styled with a fixed width, and multiple description columns are rendered to demonstrate fixed column behavior in a virtualized table context. Dependencies include react, react-virtuoso, and TypeScript support for JSX. The component expects no external inputs and outputs a table element with virtual scrolling and fixed columns. Limitations include reliance on CSS custom properties for background color and potential browser compatibility considerations for sticky positioning.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/table-virtuoso/table-fixed-columns.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TableVirtuoso} from 'react-virtuoso'\\nimport {useMemo} from 'react'\\n\\nexport default function App() {\\n  const users = useMemo(() => {\\n    return Array.from({ length: 1000 }, (_, index) => ({\\n      name: `User ${index}`,\\n      description: `Description for user ${index}`\\n    }))\\n  }, [])\\n\\n  return (\\n    <TableVirtuoso\\n      style={{ height: '100%' }}\\n      data={users}\\n      components={{ Table: ({ style, ...props }) => <table {...props} style={{ ...style, width: 700 }} /> }}\\n      fixedHeaderContent={() => (\\n        <tr>\\n          <th style={{ width: 150, background: 'var(--background)', position: 'sticky', left: 0, zIndex: 1 }}>Name</th>\\n          <th style={{ background: 'var(--background)' }}>Description</th>\\n          <th style={{ background: 'var(--background)' }}>Description</th>\\n          <th style={{ background: 'var(--background)' }}>Description</th>\\n          <th style={{ background: 'var(--background)' }}>Description</th>\\n          <th style={{ background: 'var(--background)' }}>Description</th>\\n        </tr>\\n      )}\\n      itemContent={(index, user) => (\\n        <>\\n          <td style={{ width: 150, background: 'var(--background)', position: 'sticky', left: 0 }}>{user.name}</td>\\n          <td>{user.description}</td>\\n          <td>{user.description}</td>\\n          <td>{user.description}</td>\\n          <td>{user.description}</td>\\n          <td>{user.description}</td>\\n        </>\\n      )}\\n    />\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gemini-like Chatbot Interface with VirtuosoMessageList in React\nDESCRIPTION: This example creates a chatbot interface that mimics Google Gemini's scroll behavior. It positions new questions at the top of the viewport with pre-allocated space for answers, simulates streaming responses with setInterval, and implements smooth scrolling animations when responses extend beyond the visible area.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/03-gemini.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport {\n  VirtuosoMessageList,\n  VirtuosoMessageListLicense,\n  VirtuosoMessageListMethods,\n  VirtuosoMessageListProps,\n} from \"@virtuoso.dev/message-list\";\nimport { randTextRange, randPhrase } from '@ngneat/falso';\n\ninterface Message {\n  key: string;\n  text: string;\n  user: \"me\" | \"other\";\n}\n\nlet idCounter = 0;\n\nfunction randomMessage(user: Message[\"user\"]): Message {\n  return {\n    user,\n    key: `${idCounter++}`,\n    text: randTextRange({ min: user === \"me\" ? 20 : 100, max: 200 }),\n  };\n}\n\nconst ItemContent: VirtuosoMessageListProps<Message, null>[\"ItemContent\"] = ({\n  data,\n}) => {\n  const ownMessage = data.user === \"me\";\n  return (\n    <div style={{ paddingBottom: \"2rem\", display: \"flex\" }}>\n      <div\n        style={{\n          maxWidth: \"80%\",\n          marginLeft: data.user === \"me\" ? \"auto\" : undefined,\n          background: ownMessage ? \"var(--background)\" : \"var(--alt-background)\",\n          color: 'var(--foreground)',\n          border: '1px solid var(--border)',\n          borderRadius: \"1rem\",\n          padding: \"1rem\",\n        }}\n      >\n        {data.text}\n      </div>\n    </div>\n  );\n};\n\nexport default function App() {\n  const virtuoso = React.useRef<VirtuosoMessageListMethods<Message>>(null);\n\n  return (\n    <div\n      className=\"tall-example\"\n      style={{\n        height: 500,\n        display: \"flex\",\n        flexDirection: \"column\",\n        fontSize: \"70%\",\n      }}\n    >\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList<Message, null>\n          ref={virtuoso}\n          style={{ flex: 1 }}\n          computeItemKey={({ data }) => data.key}\n          ItemContent={ItemContent}\n        />\n      </VirtuosoMessageListLicense>\n\n      <button\n        onClick={() => {\n          const myMessage = randomMessage(\"me\");\n          virtuoso.current?.data.append(\n            [myMessage],\n            ({ scrollInProgress, atBottom }) => {\n              return {\n                index: \"LAST\",\n                align: \"start\",\n                behavior: atBottom || scrollInProgress ? \"smooth\" : \"auto\",\n              };\n            },\n          );\n\n          setTimeout(() => {\n            const botMessage = randomMessage(\"other\");\n            virtuoso.current?.data.append([botMessage]);\n\n            let counter = 0;\n            const interval = setInterval(() => {\n              if (counter++ > 20) {\n                clearInterval(interval);\n              }\n              virtuoso.current?.data.map((message) => {\n                return message.key === botMessage.key\n                  ? { ...message, text: message.text + \" \" + randPhrase() }\n                  : message;\n              }, \"smooth\");\n            }, 150);\n          }, 1000);\n        }}\n      >\n        Ask the bot a question!\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel Sidebar and Switching Logic in React\nDESCRIPTION: This JSX snippet shows how to render a sidebar UI for channel selection using flexbox. It maps over the `channels` state to create buttons for each channel. Clicking a button updates the active channel state (`setChannel`) and replaces the messages displayed in the `VirtuosoMessageList` using `messageListRef.current?.data.replace`. An 'Add channel' button demonstrates dynamically adding new channels and updating the UI accordingly.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/07-multiple-channels.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<main>\n  <div style={{ display: 'flex', flexDirection: 'row' }}>\n    <div style={{ padding: '1rem', minWidth: 200, display: 'flex', flexDirection: 'column', alignItems: 'stretch', gap: '1rem' }}>\n      <h2>Channels</h2>\n      {channels.map((c) => {\n        return (\n          <button\n            key={c.name}\n            onClick={() => {\n              if (c !== channel) {\n                setChannel(c);\n                messageListRef.current?.data.replace(c.messages, {\n                  index: \"LAST\",\n                  align: \"end\",\n                });\n              }\n            }}\n          >\n            {c.name}\n          </button>\n        )\n      })}\n\n      <button\n        onClick={() => {\n          const channel = new ChatChannel(`channel-${channels.length}`, 0)\n          setChannels([...channels, channel])\n          setChannel(channel)\n          messageListRef.current?.data.replace(channel.messages, {\n            index: \"LAST\",\n            align: \"end\",\n          });\n        }}\n      >\n        Add channel\n      </button>\n    </div>\n\n    <div style={{ flex: 1 }}>\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList \n        ... />\n      </VirtualMessageListLicense>\n\n      <div style={{ display: 'flex', gap: '1rem', padding: '1rem' }}>\n        {/** buttons **/}\n      </div>\n    </div>\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Header Component to VirtuosoMessageList Props - TypeScript JSX\nDESCRIPTION: Integrates the previously defined Header component into the VirtuosoMessageList by assigning it to the Header prop. This enables displaying the loading indicator at the top of the message list when loading older messages.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/03-loading-older-messages.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<VirtuosoMessageList<ChatMessage, MessageListContext>\n  Header={Header}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Virtuoso Methods Using useVirtuosoMethods Hook in React (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to use the useVirtuosoMethods hook from the Virtuoso library to access internal methods of a message list, enabling advanced scrolling or list operations. It demonstrates specifying generic type parameters for message item shape and user context, ensuring type safety for methods. Requires React and Virtuoso dependencies installed; expected input is item and context types, output is a methods object exposing Virtuoso list functionalities. Limitations include correct typing matching your actual data and context.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/hooks.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// For a message list with items of type { message: string } and context of type { user: string }\nconst methods = useVirtuosoMethods<{message: string}, {user: string}>()\n\n```\n\n----------------------------------------\n\nTITLE: Implementation of Scroll to Item Button in React with VirtuosoMessageList\nDESCRIPTION: This snippet demonstrates how to create a React component that uses a ref to control the VirtuosoMessageList component, enabling scrolling to a specific item (index 50) centered in view when a button is clicked. It highlights the use of useRef hook, event handling, and the VirtuosoMessageList's scrollToItem API.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/scrolling-to-item.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VirtuosoMessageList, VirtuosoMessageListMethods, VirtuosoMessageListLicense } from '@virtuoso.dev/message-list'\nimport React from 'react'\n\nexport default function App() {\n  const ref = React.useRef<VirtuosoMessageListMethods>(null)\n  const offset = React.useRef(100)\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          ref.current.scrollToItem({ index: 50, align: 'center' })\n        }}\n      >\n        Scroll to Item 50 in the center\n      </button>{' '}\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList ref={ref} style={{ height: 500 }} initialData={Array.from({ length: 100 }, (_, index) => index)} />\n      </VirtuosoMessageListLicense>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using scrollToIndex Imperative Method - react-virtuoso - TypeScript\nDESCRIPTION: This snippet provides a full React component example demonstrating how to imperatively scroll to a specific index in a `react-virtuoso` list using the `scrollToIndex` method. It shows how to use a `useRef` to access the Virtuoso instance and configure the scroll behavior with `align` ('start', 'center', 'end') and `behavior` ('auto', 'smooth') based on user input. It requires `react` and `react-virtuoso` dependencies.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/scroll-to-index.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useState, useRef } from 'react'\n\nexport default function App() {\n  const [align, setAlign] = useState(\"start\");\n  const [behavior, setBehavior] = useState(\"auto\");\n  const virtuoso = useRef(null);\n  return (\n    <div>\n      <ul style={{listStyle: 'none', display: 'flex', flexDirection: 'row', gap: 5, alignItems: 'baseline', flexWrap: 'wrap' }}>\n        <li>\n          <button style={{ whiteSpace: 'nowrap' }}\n            onClick={() => {\n              virtuoso.current.scrollToIndex({\n                index: 0,\n                align,\n                behavior\n              });\n              return false;\n            }}\n          >\n            Go to 1\n          </button>\n        </li>\n        <li>\n          <button style={{ whiteSpace: 'nowrap' }}\n            onClick={() => {\n              virtuoso.current.scrollToIndex({\n                index: 499,\n                align,\n                behavior\n              });\n              return false;\n            }}\n          >\n            Go to 500\n          </button>\n        </li>\n        <li>\n          <button\n            style={{ whiteSpace: 'nowrap' }}\n\n            onClick={() => {\n              virtuoso.current.scrollToIndex({\n                index: 999,\n                align,\n                behavior\n              });\n              return false;\n            }}\n          >\n            Go to 1000\n          </button>\n        </li>\n        <li>\n          <label>\n            Align:\n            <select value={align} onChange={(e) => setAlign(e.target.value)}>\n              <option value=\"start\">Start</option>\n              <option value=\"center\">Center</option>\n              <option value=\"end\">End</option>\n            </select>\n          </label>\n        </li>\n        <li>\n          <label>\n            Behavior:\n            <select value={behavior} onChange={(e) => setBehavior(e.target.value)}>\n              <option value=\"auto\">Instant (auto)</option>\n              <option value=\"smooth\">Smooth</option>\n            </select>\n          </label>\n        </li>\n      </ul>\n\n      <div style={{height: 300}}>\n        <Virtuoso\n          totalCount={1000}\n          ref={virtuoso}\n          itemContent={(index) => (<div style={{ height: 30 }}>Item {index + 1}</div>)}\n        />\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VirtuosoList and Rendering Grouped Items (TSX)\nDESCRIPTION: Renders the main UI structure containing the `VirtuosoMessageList`. Configures the list component with properties like `ref`, `style`, `computeItemKey` for efficient rendering, and `initialLocation` to scroll to the end on load. The crucial `ItemContent` prop receives `data`, `nextData`, and `prevData` to implement logic for determining message group position ('top', 'middle', 'bottom', 'none') and applies conditional styles (border radius, padding) based on this grouping.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/07-grouped-messages.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n  return (\n    <div class=\"tall-example\" style={{ height: '100%', fontSize: '70%' }}>\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList<Message, null>\n          ref={virtuoso}\n          style={{ height: '500px', fontSize: '80%' }}\n          computeItemKey={({ data }) => data.key}\n          initialLocation={{ index: 'LAST', align: 'end' }}\n          ItemContent={({ data, nextData, prevData }) => {\n            let groupType = 'none'\n            if (nextData && nextData.user === data.user) {\n              if (prevData && prevData.user === data.user) {\n                groupType = 'middle'\n              } else {\n                groupType = 'top'\n              }\n            } else if (prevData && prevData.user === data.user) {\n              groupType = 'bottom'\n            }\n\n            const borderRadiusStyle = {\n              none: '1rem',\n              top: '1rem 1rem 0.3rem 0.3rem',\n              middle: '0.3rem',\n              bottom: '0.3rem 0.3rem 1rem 1rem',\n            }[groupType]\n\n            const paddingBottomStyle = {\n              none: '2rem',\n              top: '0.2rem',\n              middle: '0.2rem',\n              bottom: '1rem',\n            }[groupType]\n\n            return (\n              <div style={{ paddingBottom: paddingBottomStyle, display: 'flex' }}>\n                <div\n                  style={{\n                    maxWidth: '50%',\n                    marginLeft: data.user === 'me' ? 'auto' : undefined,\n                    backgroundColor: data.user === 'me' ? 'var(--background)' : 'var(--alt-background)',\n                    color: data.user === 'me' ? 'var(--foreground)' : 'var(--foreground)',\n                    border: '1px solid var(--border)',\n                    borderRadius: borderRadiusStyle,\n                    padding: '1rem',\n                  }}\n                >\n                  {data.text}\n                </div>\n              </div>\n            )\n          }}\n        />\n      </VirtuosoMessageListLicense>\n      {/* ... Buttons below ... */}\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Reply Scroll and Highlight in Virtuoso Message List - React TypeScript\nDESCRIPTION: This snippet demonstrates a React functional component using VirtuosoMessageList that displays a chat message list where some messages reply to others. It defines a Message interface and generates random messages. The ItemContent component renders each message, conditionally displaying a clickable reply area that scrolls to and highlights the replied message using Virtuoso's data methods. The main App component initializes and appends messages to the list, sets item keys, and configures initial scroll location. Key dependencies include React, @virtuoso.dev/message-list components and hooks, and the @ngneat/falso library for random phrases. Inputs are dynamically generated messages, and outputs are an interactive chat list supporting scrolling to replies with visual highlight. Limitations include the example assumes the replied-to message is loaded; otherwise, scrolling to it may not function correctly.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/06-scroll-to-reply.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { VirtuosoMessageList, VirtuosoMessageListLicense, VirtuosoMessageListProps, VirtuosoMessageListMethods, useVirtuosoMethods } from '@virtuoso.dev/message-list'\nimport { randPhrase } from '@ngneat/falso'\n\ninterface Message {\n  key: string\n  text: string\n  user: 'me' | 'other'\n  replyTo?: string\n  highlighted?: boolean\n}\n\nlet idCounter = 0\n\nfunction randomMessage(user: Message['user']): Message {\n  const message: Message = { user, key: `${idCounter++}`, text: randPhrase({ min: 8, max: 10 }) }\n  if (idCounter == 20) {\n    message.replyTo = '3'\n  }\n  return message\n}\n\nconst ItemContent: VirtuosoMessageListProps<Message, null>['ItemContent'] = ({ data }) => {\n  const methods = useVirtuosoMethods<Message>()\n  const replyTo = data.replyTo ? methods.data.find((item) => item.key === data.replyTo) : null\n  return (\n    <div style={{ paddingBottom: '2rem', display: 'flex' }}>\n      <div\n        style={{\n          fontSize: '0.8rem',\n          maxWidth: '50%',\n          marginLeft: data.user === 'me' ? 'auto' : undefined,\n          backgroundColor: data.highlighted ? 'var(--highlight)' : data.user === 'me' ? 'var(--background)' : 'var(--alt-background)',\n          transition: 'background-color 0.5s',\n          borderRadius: '1rem',\n          padding: '1rem',\n        }}\n      >\n        {replyTo ? (\n          <div\n            style={{\n              width: '80%',\n              marginBottom: '1rem',\n              backgroundColor: 'var(--alt-background)',\n              borderRadius: '1rem',\n              padding: '1rem',\n              fontSize: '0.8rem',\n              cursor: 'pointer',\n            }}\n            onClick={() => {\n              // highlight the item after 100ms so that the transition is visible\n              setTimeout(() => {\n                methods.data.map((item) => {\n                  if (item.key === data.replyTo) {\n                    return { ...item, highlighted: true }\n                  } else {\n                    return item\n                  }\n                })\n              })\n\n              // remove the highlight after 2 seconds\n              setTimeout(() => {\n                methods.data.map((item) => {\n                  if (item.key === data.replyTo) {\n                    return { ...item, highlighted: false }\n                  } else {\n                    return item\n                  }\n                })\n              }, 2000)\n\n              const replyToIndex = methods.data.findIndex((item) => item.key === data.replyTo)\n              methods.scrollToItem({ index: replyToIndex, align: 'start' })\n            }}\n          >\n            {replyTo.text}\n          </div>\n        ) : null}\n        {data.text}\n        <br />\n      </div>\n    </div>\n  )\n}\n\nexport default function App() {\n  const mounted = React.useRef(false)\n  const virtuoso = React.useRef<VirtuosoMessageListMethods<Message>>(null)\n\n  React.useEffect(() => {\n    if (mounted.current) {\n      return\n    }\n    mounted.current = true\n\n    setTimeout(() => {\n      virtuoso.current?.data.append(\n        Array.from({ length: 20 }, (_, index) => {\n          const author = ['me', 'other'][index % 2 ? 0 : 1]\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any\n          return randomMessage(author as any)\n        })\n      )\n    })\n  }, [])\n  return (\n    <>\n      <VirtuosoMessageListLicense licenseKey=\"\">\n      <VirtuosoMessageList<Message, null>\n        ref={virtuoso}\n        style={{ height: '100%' }}\n        computeItemKey={({ data }) => data.key}\n        initialLocation={{ index: 'LAST', align: 'end' }}\n        ItemContent={ItemContent}\n      />\n      </VirtuosoMessageListLicense>\n    </>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Auto-Resizing Virtual List with React Virtuoso in TypeScript\nDESCRIPTION: This snippet displays a virtualized list of 100,000 users within a resizable container using the Virtuoso component from the react-virtuoso library. It memoizes the user data for performance and automatically adjusts to size changes in its container without extra configuration. Dependencies required include react, react-virtuoso, and ensures the container supports CSS resize behavior; the snippet expects no external inputs and outputs a dynamic user list with each user's name and description.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/auto-resizing.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useMemo } from 'react'\n\nexport default function App() {\n  const users = useMemo(() => {\n    return Array.from({ length: 100000 }, (_, index) => ({\n      name: `User ${index}`,\n      description: `Description for user ${index}`\n    }))\n  }, [])\n\n  return (\n  <div style={{ height: '100%', overflow: 'hidden', boxSizing: 'border-box', resize: 'both', padding: '1em', border: '1px solid #ccc' }}>\n    <Virtuoso\n      style={{ height: '100%' }}\n      data={users}\n      itemContent={(index, user) => (\n        <div\n          style={{\n            padding: '1rem 0.5rem',\n            borderBottom: `1px solid var(--border)`\n          }}\n        >\n          <h4>{user.name}</h4>\n          <div style={{ marginTop: '1rem' }}>{user.description}</div>\n        </div>\n      )}\n    />\n  </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Endless Scrolling with React Virtuoso (TSX)\nDESCRIPTION: This React component demonstrates how to set up an infinite scrolling list using `react-virtuoso`. It manages the list data using React state (`useState`), implements a simulated asynchronous data fetching function (`loadMore`) using `useCallback` and `setTimeout`, and uses `useEffect` to load initial data. The `Virtuoso` component is configured with the list `data`, the `endReached` callback to trigger `loadMore`, `increaseViewportBy` for pre-loading, custom `itemContent` rendering, and a custom `Footer` component to show a loading indicator.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/endless-scrolling.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useState, useCallback, useEffect } from 'react'\n\nexport default function App() {\n  const [users, setUsers] = useState(() => [])\n\n  const loadMore = useCallback(() => {\n    return setTimeout(() => {\n      setUsers((users) => [...users, ...generateUsers(100, users.length)])\n    }, 500)\n  }, [setUsers])\n\n  useEffect(() => {\n    const timeout = loadMore()\n    return () => clearTimeout(timeout)\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      data={users}\n      endReached={loadMore}\n      increaseViewportBy={200}\n      itemContent={(index, user) => {\n        return <div>{user.name}</div>\n      }}\n      components={{ Footer }}\n    />\n  )\n}\n\nconst Footer = () => {\n  return (\n    <div\n      style={{\n        padding: '2rem',\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      Loading...\n    </div>\n  )\n}\n\nfunction generateUsers(count, start) {\n  return Array.from({ length: count }, (_, i) => ({\n    name: `User ${start + i}`,\n  }))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Removing Data Range in VirtuosoMessageList (tsx)\nDESCRIPTION: Shows how to remove a contiguous block of items from the list using the `data.deleteRange` method. It uses a React ref to access the component's methods and provides a button to remove 10 items starting from a specified index (index 5 in this example).\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/working-with-data.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageList, useVirtuosoMethods, VirtuosoMessageListLicense, VirtuosoMessageListMethods } from '@virtuoso.dev/message-list'\nimport { useRef } from 'react'\n\nfunction ItemContent({ data }) {\n  const virtuosoMethods = useVirtuosoMethods()\n  return <div>Item {data}</div>\n}\n\nexport default function App() {\n  const ref = useRef<VirtuosoMessageListMethods>(null)\n  return (\n    <>\n      <button onClick={() => ref.current.data.deleteRange(5, 10)}>Remove 10 items starting from 5</button>\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          ref={ref}\n          ItemContent={ItemContent}\n          style={{ height: 500 }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GroupedVirtuoso Component in React (TSX)\nDESCRIPTION: Demonstrates usage of the 'GroupedVirtuoso' component for rendering lists grouped by sections with sticky group headers. 'groupCounts' defines the number of items per group (here, 100 groups of 10 items each). The 'groupContent' render callback defines how each group header is displayed, and 'itemContent' renders items with access to both item and group indices. A container height must be provided for proper rendering.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/getting-started.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GroupedVirtuoso } from 'react-virtuoso'\n\nconst groupCounts = []\n\nfor (let index = 0; index < 1000; index++) {\n  groupCounts.push(10)\n}\n\nexport default function App() {\n  return (\n    <GroupedVirtuoso\n      style={{ height: '100%' }}\n      groupCounts={groupCounts}\n      groupContent={(index) => {\n        return (\n          // add background to the element to avoid seeing the items below it\n          <div>\n            Group {index * 10} &ndash; {index * 10 + 10}\n          </div>\n        )\n      }}\n      itemContent={(index, groupIndex) => {\n        return (\n          <div>\n            Item {groupIndex}.{index}\n          </div>\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Data in VirtuosoMessageList (tsx)\nDESCRIPTION: Illustrates how to add new items to the end of the list using the `data.append` method. This snippet shows accessing methods via a React ref and includes an example of using the `scrollToBottom` argument with a callback function to control scroll behavior after appending.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/working-with-data.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageList, VirtuosoMessageListLicense, VirtuosoMessageListMethods } from '@virtuoso.dev/message-list'\n\nexport default function App() {\n  const ref = React.useRef<VirtuosoMessageListMethods>(null)\n  const offset = React.useRef(100)\n\n  return (\n    <>\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          ItemContent={({ data }) => <div>{data}</div>}\n          ref={ref}\n          style={{ height: 500 }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n      <button\n        onClick={() => {\n          ref.current.data.append(\n            Array.from({ length: 10 }, (_, index) => index + offset.current),\n            (params) => true\n          )\n          offset.current = offset.current + 10\n        }}\n      >\n        Append 10 items\n      </button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Window Scrolling and Sticky Headers with TableVirtuoso in TypeScript\nDESCRIPTION: This snippet shows how to render a virtualized table that uses the window scroll instead of an inner scroller, and adds a sticky header row styled via inline CSS variables. Dependencies: react-virtuoso. Parameters: data (array), useWindowScroll (enables window-based scrolling), fixedHeaderContent (returns a <tr> header row for sticking). Expects a user data array as input; renders a window-scrollable virtual table with styled headers and dynamic rows.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/table-virtuoso/hello-table.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TableVirtuoso } from 'react-virtuoso'\n\nexport default function App() {\n  return (\n    <TableVirtuoso\n      data={Array.from({ length: 100 }, (_, index) => ({ name: `User ${index}`, description: `${index} description` }))}\n      useWindowScroll\n      fixedHeaderContent={() => (\n        <tr>\n          <th style={{ width: 150, background: 'var(--background)', color: 'var(--foreground)' }}>Name</th>\n          <th style={{ background: 'var(--background)', color: 'var(--foreground)' }}>Description</th>\n        </tr>\n      )}\n      itemContent={(index, user) => (\n        <>\n          <td style={{ width: 150 }}>{user.name}</td>\n          <td>{user.description}</td>\n        </>\n      )}\n    />\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Horizontal Virtuoso List in React\nDESCRIPTION: This code renders a horizontal Virtuoso list. It uses the `horizontalDirection` prop to enable horizontal rendering. The list displays user data with names and descriptions.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/horizontal-mode.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useMemo } from 'react'\n\nexport default function App() {\n  const users = useMemo(() => {\n    return Array.from({ length: 1000 }, (_, index) => ({\n      name: `User ${index}`,\n      size: Math.floor(Math.random() * 40) + 100,\n      description: `Description for user ${index}`,\n    }));\n  }, []);\n\n  return (\n    <Virtuoso\n      style={{ height: 320 }}\n      data={users}\n      horizontalDirection\n      itemContent={(_, user) => (\n        <div\n          style={{\n            padding: \"1rem\",\n            height: `100%`,\n            borderRight: \"1px solid var(--border)\",\n          }}\n        >\n          <div style={{display: 'flex', flexDirection: 'column', height: '100%' }}>\n          <p style={{marginBottom: '1rem'}}>\n            <strong>{user.name}</strong>\n          </p>\n          <div>{user.description}</div>\n          </div>\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Initial Messages and Setting Cursor with React useEffect - TypeScript\nDESCRIPTION: In the useEffect hook, checks if the chat channel data is loaded; if not, fetches the latest 20 messages using channel.getMessages method. It sets the firstMessageId ref to the ID of the earliest message and appends the messages to the message list component's data, handling errors with console logging. This initializes the list and cursor for pagination.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/03-loading-older-messages.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nif (!channel.loaded) {\n  channel\n    .getMessages({ limit: 20 })\n    .then((messages) => {\n      if (messages !== null) {\n        firstMessageId.current = messages[0].id\n        messageListRef.current?.data.append(messages)\n      }\n    })\n    .catch((error) => {\n      console.error(error)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Range Change Callback with React Virtuoso (TSX)\nDESCRIPTION: This code snippet showcases how to use the `rangeChanged` callback property of the `Virtuoso` component to track the visible range of items. It uses `useState` to store the `startIndex` and `endIndex` of the range.  The `rangeChanged` callback is called with the start/end indexes of the *rendered* range, taking into account `increaseViewportBy` and `overscan` properties. The indices are then displayed in the UI.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/range-change-callback.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [visibleRange, setVisibleRange] = useState({\n    startIndex: 0,\n    endIndex: 0,\n  })\n  return (\n    <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      <p>\n        current visible range: {visibleRange.startIndex} - {visibleRange.endIndex}{' '}\n      </p>\n      <Virtuoso\n        totalCount={1000}\n        rangeChanged={setVisibleRange}\n        style={{ flex: 1 }}\n        itemContent={(index) => (<div>Item {index}</div>)}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Header and Footer to VirtuosoMessageList (TSX)\nDESCRIPTION: This snippet demonstrates how to define and add standard `Header` and `Footer` components to a `VirtuosoMessageList`. These components scroll along with the list content. It imports necessary types and components from `@virtuoso.dev/message-list` and defines simple functional components for the header and footer, passing them as props.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/headers-footers.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageListProps, VirtuosoMessageList, useVirtuosoMethods, VirtuosoMessageListLicense, VirtuosoMessageListMethods} from '@virtuoso.dev/message-list'\n\nconst Header: VirtuosoMessageListProps<number, null>['Header'] = () => <div style={{ height: 30, background: 'lightblue' }}>Header</div>\nconst Footer: VirtuosoMessageListProps<number, null>['Footer'] = () => <div style={{ height: 30, background: 'lightblue' }}>Footer</div>\n\nexport default function App() {\n\n  return (\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          Header={Header}\n          Footer={Footer}\n          style={{ height: '100%' }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n  )\n}\n\n \n```\n\n----------------------------------------\n\nTITLE: Customizing Message Item Rendering - React with TypeScript\nDESCRIPTION: Defines ItemContent, a custom component for rendering each chat message as a styled bubble (with avatar, message, and delivery status), tailored by whether the message was sent by the current user. Uses context to correctly style the message for sent vs. received, and displays a delivery indicator when needed. This replaces the default message item rendering and is integrated by assigning it to the ItemContent prop of VirtuosoMessageList.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst ItemContent: VirtuosoProps['ItemContent'] = ({ data: message, context }) => {\n  const ownMessage = context.channel.currentUser === message.user\n  return (\n    <div style={{ display: 'flex', gap: '1rem', paddingBottom: '2rem', flexDirection: ownMessage ? 'row-reverse' : 'row' }}>\n      <img src={message.user.avatar} style={{ borderRadius: '100%', width: 30, height: 30, border: '1px solid #ccc' }} />\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem', maxWidth: '50%' }}>\n        <div\n          style={{\n            background: ownMessage ? '#3A5BC7' : '#F0F0F3',\n            color: ownMessage ? 'white' : 'black',\n            borderRadius: '1rem',\n            padding: '1rem',\n            ...(ownMessage ? { borderTopRightRadius: '0' } : { borderTopLeftRadius: 'auto' }),\n          }}\n        >\n          {message.message}\n        </div>\n        {!message.delivered && <div style={{ textAlign: 'right' }}>Delivering...</div>}\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped List Scroll using react-virtuoso in TSX\nDESCRIPTION: This React component uses react-virtuoso's GroupedVirtuoso to render a categorized list. It demonstrates preparing data with group counts, rendering custom group headers and item content, and adding an external navigation list. Clicking an item in the navigation list triggers programmatic scrolling to the first item of the corresponding group using the scrollToIndex method of the Virtuoso instance.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/grouped-virtuoso/scroll-to-group.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GroupedVirtuoso} from 'react-virtuoso'\nimport { useMemo, useRef } from 'react'\nexport default function App() {\n  const { users, groups, groupCounts } = useMemo(() => {\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n    \n    const users = letters.flatMap((letter) => {\n      return Array.from({ length: 20 }, (_, index) => ({\n        name: `${letter} User ${index}`,\n        initials: `${letter}${index}`,\n        description: `Description for user ${index}`,\n      }))\n    })    \n\n    const groups = letters.slice(0, 15)\n\n    const groupCounts = letters.map((letter, index) => {\n      return users.filter((user, userIndex) => user.name.startsWith(letter)).length\n    })\n    return { users, groups, groupCounts }\n  }, [])\n  const virtuoso = useRef(null)\n\n  return (\n    <div style={{ display: 'flex', height: '100%' }}>\n      <div style={{ flex: 1 }}>\n        <GroupedVirtuoso\n          ref={virtuoso}\n          groupCounts={groupCounts}\n          groupContent={index => {\n          return <div style={{ \n            backgroundColor: 'var(--background)', \n            padding: '0.3rem 1rem'\n          }}>{groups[index]}</div>\n          }}\n          itemContent={index => {\n            return <div style={{ padding: '0.5rem 1rem' }}>\n            <h4>{users[index].name}</h4>\n\n            <p style={{ marginBottom: 0 }}>{users[index].description}</p>\n            </div>\n          }}\n        />\n      </div>\n\n      <ul\n        style={{\n          marginLeft: '0.5rem',\n          paddingLeft: '0',\n          listStyle: 'none',\n          fontSize: '0.8rem',\n        }}\n      >\n        {groupCounts\n          .reduce(\n            ({ firstItemsIndexes, offset }, count) => {\n              return {\n                firstItemsIndexes: [...firstItemsIndexes, offset],\n                offset: offset + count,\n              }\n            },\n            { firstItemsIndexes: [], offset: 0 }\n          )\n          .firstItemsIndexes.map((itemIndex, index) => (\n            <li key={index}>\n              <a\n                href=\"#\"\n                style={{color: 'var(--foreground)', padding: '0.5rem'}}\n                onClick={e => {\n                  e.preventDefault()\n                  virtuoso.current.scrollToIndex({\n                    index: itemIndex,\n                  })\n                }}\n              >\n                {groups[index]}\n              </a>\n            </li>\n          ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Virtualized @tanstack/table with TableVirtuoso Example (TSX)\nDESCRIPTION: This TSX code snippet demonstrates a React functional component that integrates `@tanstack/table` for table logic (sorting, columns) with `TableVirtuoso` for efficient row virtualization. It defines columns, generates sample data, initializes the table instance using `useReactTable`, and renders the virtualized table using the `TableVirtuoso` component, customizing its `Table` and `TableRow` sub-components and providing a fixed header.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/third-party-integration/tanstack-table-integration.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TableVirtuoso} from 'react-virtuoso'\nimport {useReducer, useState} from 'react'\nimport { flexRender, useReactTable, getCoreRowModel, getSortedRowModel } from '@tanstack/react-table'\n\nfunction makeData(count) {\n  return Array.from({length: count}, (_, index) => {\n  const firstName = `User ${index}`\n  const lastName = \"Doe\";\n    return {\n      id: index,\n      firstName,\n      lastName,\n      age: Math.floor(Math.random() * 100),\n      visits: Math.floor(Math.random() * 100),\n      progress: Math.floor(Math.random() * 100),\n      status: [\"relationship\", \"complicated\", \"single\"][Math.floor(Math.random() * 3)],\n    };\n  })\n}\n\nexport default function App() {\n  const rerender = useReducer(() => ({}), {})[1];\n\n  const [sorting, setSorting] = useState([]);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        accessorKey: \"firstName\",\n        cell: (info) => info.getValue()\n      },\n      {\n        accessorFn: (row) => row.lastName,\n        id: \"lastName\",\n        cell: (info) => info.getValue(),\n        header: () => <span>Last Name</span>\n      },\n      {\n        accessorKey: \"age\",\n        header: () => \"Age\",\n        size: 50\n      },\n      {\n        accessorKey: \"visits\",\n        header: () => <span>Visits</span>,\n        size: 50\n      },\n      {\n        accessorKey: \"status\",\n        header: \"Status\"\n      },\n      {\n        accessorKey: \"progress\",\n        header: \"Profile Progress\",\n        size: 80\n      }\n    ],\n    []\n  );\n\n  const [data, setData] = React.useState(() => makeData(500));\n  const refreshData = () => setData(() => makeData(500));\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting\n    },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n\n  const { rows } = table.getRowModel();\n\n  return (\n    <div style={{ padding: \"0.5rem\" }}>\n      <div style={{ height: \"0.5rem\" }} />\n\n      <TableVirtuoso\n        style={{ height: \"500px\", border: \"1px solid lightgray\" }}\n        totalCount={rows.length}\n        components={{\n          Table: ({ style, ...props }) => {\n            return (\n              <table\n                {...props}\n                style={{\n                  ...style,\n                  width: \"100%\",\n                  tableLayout: \"fixed\",\n                  borderCollapse: \"collapse\",\n                  borderSpacing: 0\n                }}\n              />\n            );\n          },\n          TableRow: (props) => {\n            const index = props[\"data-index\"];\n            const row = rows[index];\n\n            return (\n              <tr {...props}>\n                {row.getVisibleCells().map((cell) => (\n                  <td key={cell.id} style={{ padding: \"6px\" }}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </td>\n                ))}\n              </tr>\n            );\n          }\n        }}\n        fixedHeaderContent={() => {\n          return table.getHeaderGroups().map((headerGroup) => (\n            <tr\n              key={headerGroup.id}\n              style={{ background: \"lightgray\", margin: 0 }}\n            >\n              {headerGroup.headers.map((header) => {\n                return (\n                  <th\n                    key={header.id}\n                    colSpan={header.colSpan}\n                    style={{\n                      width: header.getSize(),\n                      borderBottom: \"1px solid lightgray\",\n                      padding: \"2px 4px\",\n                      textAlign: \"left\"\n                    }}\n                  >\n                    {header.isPlaceholder ? null : (\n                      // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n                      <div\n                        {...{\n                          style: header.column.getCanSort()\n                            ? { cursor: \"pointer\", userSelect: \"none\" }\n                            : {},\n                          onClick: header.column.getToggleSortingHandler()\n                        }}\n                      >\n                        {flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                        {{\n                          asc: \" 🔼\",\n                          desc: \" 🔽\"\n                        }[header.column.getIsSorted()] ?? null}\n                      </div>\n                    )}\n                  </th>\n                );\n              })}\n            </tr>\n          ));\n        }}\n      />\n\n      <div>{table.getRowModel().rows.length} Rows</div>\n      <div>\n        <button onClick={() => rerender()}>Force Rerender</button>\n      </div>\n      <div>\n        <button onClick={() => refreshData()}>Refresh Data</button>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Virtual List with TotalCount Prop in React Virtuoso\nDESCRIPTION: This example demonstrates creating a virtual list using React Virtuoso's totalCount prop instead of the data prop. It accesses the data from a memoized array inside the itemContent callback function.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/hello.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useMemo } from 'react'\n\nexport default function App() {\n  const users = useMemo(() => {\n    return Array.from({ length: 100000 }, (_, index) => ({\n      name: `User ${index}`,\n      size: Math.floor(Math.random() * 40) + 70,\n      description: `Description for user ${index}`\n    }))\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      totalCount={users.length}\n      itemContent={(index) => {\n        const user = users[index]\n        return (\n        <div\n          style={{\n            padding: '0.5rem',\n            height: `${user.size}px`,\n            borderBottom: `1px solid var(--border)`\n          }}\n        >\n          <p><strong>{user.name}</strong></p>\n          <div>{user.description}</div>\n        </div>\n      )}}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Virtualized Table by Row Count with TableVirtuoso in TypeScript\nDESCRIPTION: This snippet demonstrates rendering a table by specifying total row count and row access using TableVirtuoso, with user data stored in a memoized array. Dependencies: react-virtuoso, React useMemo. Parameters include totalCount (number of rows) and itemContent (row rendering function leveraging the users array). Input is an internally-generated user list; output is a virtualized table. Avoids passing data directly—suitable for very large datasets. Styling considerations similar to previous example apply.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/table-virtuoso/hello-table.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TableVirtuoso} from 'react-virtuoso'\nimport {useMemo} from 'react'\n\nexport default function App() {\n  const users = useMemo(() => Array.from({ length: 100 }, (_, index) => ({\n        name: `User ${index}`,\n        description: `${index} description`\n      })), [])\n\n  return (\n    <TableVirtuoso\n      style={{ height: '100%' }}\n      totalCount={users.length}\n      itemContent={(index) => {\n        const user = users[index]\n        return (\n          <>\n            <td style={{ width: 150 }}>{user.name}</td>\n            <td>{user.description}</td>\n          </>\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Separators and Sticky Header in React Virtuoso Message List - TypeScript/TSX\nDESCRIPTION: This snippet creates a message list with date separators and a sticky date header using the React VirtuosoMessageList component. It defines Message interfaces, generates fake message data with randomized dates and text, and uses custom ItemContent and StickyHeader components to display appropriately styled date markers and sticky headers. The implementation requires '@virtuoso.dev/message-list' and '@ngneat/falso' libraries, and accepts a list of messages containing user, text, key, and date fields. No license key is provided by default, and the component expects to be rendered within a React environment with Virtuoso styles available.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/05-date-separators.md#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport * as React from 'react'\nimport {\n  VirtuosoMessageList,\n  VirtuosoMessageListLicense,\n  VirtuosoMessageListProps,\n  useCurrentlyRenderedData,\n} from '@virtuoso.dev/message-list'\nimport { randTextRange, rand } from '@ngneat/falso'\n\ninterface Message {\n  key: string\n  text: string\n  user: 'me' | 'other'\n  date: Date\n}\n\nlet idCounter = 0\n\n// fake consecutive dates for the messages\nconst startDate = new Date()\nstartDate.setDate(startDate.getDate() - 50)\n\nfunction randomMessage(user: Message['user']): Message {\n  return {\n    user,\n    key: `${idCounter++}`,\n    date: new Date(startDate.getTime() + idCounter * 1000 * 60 * 60 * 4),\n    text: randTextRange({ min: user === 'me' ? 20 : 100, max: 200 }),\n  }\n}\n\nconst StickyHeader: VirtuosoMessageListProps<Message, null>['StickyHeader'] = ({ data, prevData }) => {\n  const firstItem = useCurrentlyRenderedData<{ date: Date }>()[0] as { date: Date } | undefined\n  return (\n    <div style={{ width: '100%', position: 'absolute', top: 0 }}>\n      <div style={{ textAlign: 'center', fontWeight: 300 }}>\n        <span\n          style={{\n            border: '1px solid var(--border)',\n            backgroundColor: 'var(--alt-background)',\n            padding: '0.1rem 2rem',\n            borderRadius: '0.5rem',\n          }}\n        >\n          {firstItem?.date.toDateString()}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nconst ItemContent: VirtuosoMessageListProps<Message, null>['ItemContent'] = ({ data, prevData }) => {\n  const dateSeparator =\n    !prevData || prevData.date.getDate() !== data.date.getDate() ? (\n      <div style={{ padding: '0.5rem 0' }}>\n        <div style={{ textAlign: 'center', fontWeight: 300 }}>\n          <span\n            style={{\n              backgroundColor: 'var(--alt-background)',\n              border: '1px solid var(--border)',\n              padding: '0.1rem 2rem',\n              borderRadius: '0.5rem',\n            }}\n          >\n            {data.date.toDateString()}\n          </span>\n        </div>\n      </div>\n    ) : null\n\n  return (\n    <>\n      {dateSeparator}\n      <div\n        style={{\n          paddingBottom: '2rem',\n          display: 'flex',\n          flexDirection: data.user === 'me' ? 'row-reverse' : 'row',\n        }}\n      >\n        <div\n          style={{\n            maxWidth: '80%',\n            display: 'flex',\n            flexDirection: data.user === 'me' ? 'row-reverse' : 'row',\n            alignItems: 'center',\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: data.user === 'me' ? 'var(--background)' : 'var(--alt-background)',\n              borderRadius: '1rem',\n              border: '1px solid var(--border)',\n              padding: '1rem',\n            }}\n          >\n            {data.text}\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default function App() {\n  const messages = React.useMemo(() => Array.from({ length: 100 }, () => randomMessage(rand(['me', 'other']))), [])\n\n  return (\n    <VirtuosoMessageListLicense licenseKey=\"\">\n      <VirtuosoMessageList<Message, null>\n        initialData={messages}\n        style={{ height: '100%', fontSize: '90%' }}\n        computeItemKey={({ data }) => data.key}\n        initialLocation={{ index: 'LAST', align: 'end' }}\n        ItemContent={ItemContent}\n        StickyHeader={StickyHeader}\n      />\n    </VirtuosoMessageListLicense>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Alignment in VirtuosoMessageList\nDESCRIPTION: This snippet demonstrates configuring the vertical alignment behavior for short conversations within the `VirtuosoMessageList` component. By setting the `shortSizeAlign` prop to `'bottom-smooth'`, new messages in channels with few messages will smoothly transition towards the bottom of the viewport until the list becomes scrollable.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/07-multiple-channels.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<VirtuosoMessageList<ChatMessage, MessageListContext>\n  context={{ loadingNewer, channel, unseenMessages }}\n  initialData={channel.messages}\n// highlight-next-line\n  shortSizeAlign=\"bottom-smooth\"\n```\n\n----------------------------------------\n\nTITLE: Rendering a GroupedVirtuoso List with MUI Components in TypeScript\nDESCRIPTION: This code snippet demonstrates how to customize React Virtuoso's GroupedVirtuoso component using Material UI's List, ListItem, ListSubheader, and related components for styled endless scrolling lists. It defines MUI-compatible list components to override Virtuoso's internal rendering, memoizes grouped user data, and renders 500 records grouped by name with avatar and descriptive text. Dependencies include react, react-virtuoso, @mui/material, and the example expects 500 generated user objects grouped into 10 categories, with each group's header and user list rendered by the custom components.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/third-party-integration/material-ui-endless-scrolling.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {GroupedVirtuoso, GroupedVirtuosoProps} from 'react-virtuoso'\nimport {useMemo, forwardRef} from 'react'\nimport List from \"@mui/material/List\";\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\nimport Avatar from \"@mui/material/Avatar\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\n// the object includes the necessary MUI components for this example.\n\nconst MUIComponents: GroupedVirtuosoProps<unknown, unknown>['components'] = {\n  List: forwardRef(({ style, children }, listRef) => {\n    return (\n      <List style={{ padding: 0, ...style, margin: 0 }} component=\"div\" ref={listRef}>\n        {children}\n      </List>\n    )\n  }),\n\n  Item: ({ children, ...props }) => {\n    return (\n      <ListItem component=\"div\" {...props} style={{ margin: 0 }}>\n        {children}\n      </ListItem>\n    )\n  },\n\n  Group: ({ children, style, ...props }) => {\n    return (\n      <ListSubheader\n        component=\"div\"\n        {...props}\n        style={{\n          ...style,\n          backgroundColor: 'var(--ifm-color-content-inverse)',\n          margin: 0,\n        }}\n      >\n        {children}\n      </ListSubheader>\n    )\n  },\n}\n\nexport default function App() {\n  const { users, groups, groupCounts } = useMemo(() => {\n    const users = Array.from({ length: 500 }, (_, index) => ({\n      name: `User ${index}`,\n      initials: `U${index}`,\n      description: `Description for user ${index}`,\n    }))\n    const groups = Array.from({ length: 10 }, (_, index) => `Group ${index}`)\n    const groupCounts = groups.map((_, index) => {\n      return users.filter((_, userIndex) => userIndex % 10 === index).length\n    })\n    return { users, groups, groupCounts }\n  }, [])\n\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '100%' }}\n      groupCounts={groupCounts}\n      components={MUIComponents}\n      groupContent={(index) => {\n        return <div>{groups[index]}</div>\n      }}\n      itemContent={(index) => {\n        const user = users[index]\n        return (\n          <>\n            <ListItemAvatar>\n              <Avatar>{user.initials}</Avatar>\n            </ListItemAvatar>\n\n            <ListItemText primary={user.name} secondary={<span>{user.description}</span>} />\n          </>\n        )\n      }}\n    />\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing TableVirtuoso Component for Virtualized Tables (TSX)\nDESCRIPTION: Illustrates the usage of 'TableVirtuoso' to render tables with virtualized rows and support for window scrolling and sticky headers. The 'data' prop provides an array of objects representing rows, while 'itemContent' renders each row's columns. Each row renders two columns: 'name' and 'description' with specified widths and content.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/getting-started.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TableVirtuoso } from 'react-virtuoso'\n\nexport default function App() {\n  return (\n    <TableVirtuoso\n      style={{ height: '100%' }}\n      data={Array.from({ length: 100 }, (_, index) => ({\n        name: `User ${index}`,\n        description: `${index} description`,\n      }))}\n      itemContent={(index, user) => (\n        <>\n          <td style={{ width: 150 }}>{user.name}</td>\n          <td>{user.description}</td>\n        </>\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Grid Layout with VirtuosoGrid Components (TSX)\nDESCRIPTION: This snippet demonstrates how to configure `VirtuosoGrid` using the `components` prop to provide custom `List` and `Item` components. The custom components are styled with flexbox to create a responsive grid layout. It also shows how to wrap and style the content of each virtualized grid item.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-grid/grid-responsive-columns.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoGrid } from 'react-virtuoso'\nimport { forwardRef } from 'react'\n\n// Ensure that this stays out of the component, \n// Otherwise the grid will remount with each render due to new component instances.\nconst gridComponents = {\n  List: forwardRef(({ style, children, ...props }, ref) => (\n    <div\n      ref={ref}\n      {...props}\n      style={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        ...style,\n      }}\n    >\n      {children}\n    </div>\n  )),\n  Item: ({ children, ...props }) => (\n    <div\n      {...props}\n      style={{\n        padding: \"0.5rem\",\n        width: \"33%\",\n        display: \"flex\",\n        flex: \"none\",\n        alignContent: \"stretch\",\n        boxSizing: \"border-box\",\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst ItemWrapper = ({ children, ...props }) => (\n  <div\n    {...props}\n    style={{\n      display: \"flex\",\n      flex: 1,\n      textAlign: \"center\",\n      padding: \"1rem 1rem\",\n      border: \"1px solid gray\",\n      whiteSpace: \"nowrap\",\n    }}\n  >\n    {children}\n  </div>\n);\n\nexport default function App() {\n  return (\n    <>\n      <VirtuosoGrid\n        style={{ height: 500 }}\n        totalCount={1000}\n        components={gridComponents}\n        itemContent={(index) => <ItemWrapper>Item {index}</ItemWrapper>}\n      />\n      <style>{`html, body, #root { margin: 0; padding: 0 }`}</style>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtuoso Component in React (TSX)\nDESCRIPTION: Demonstrates a minimal React component setup using the 'Virtuoso' component from 'react-virtuoso'. It requires a container with a defined height, a 'totalCount' prop indicating the number of items to render, and an 'itemContent' render callback to produce content for each index. This snippet shows basic usage to render a list of 200 items labeled by their index.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/getting-started.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\n\nexport default function App() {\n  return <Virtuoso style={{ height: '100%' }} totalCount={200} itemContent={(index) => <div>Item {index}</div>} />\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Virtuoso Message List with License Key to Application - TypeScript\nDESCRIPTION: This TypeScript React snippet shows how to integrate the VirtuosoMessageList component along with the required VirtuosoMessageListLicense wrapper in your app. You must provide a valid license key for production use. The component is initialized with 100 sample messages, and a simple ItemContent callback for rendering messages. Primary dependencies are '@virtuoso.dev/message-list' and React. The snippet demonstrates the recommended prop usage for style, location, and data initialization.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/overview.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VirtuosoMessageListLicense, VirtuosoMessageList } from '@virtuoso.dev/message-list'\n\n// const licenseKey = 'your-license-key'\nconst licenseKey = ''\n\nexport default function App() {\n  return (\n    <VirtuosoMessageListLicense licenseKey={licenseKey}>\n      <VirtuosoMessageList \n        style={{height: '100%'}}  \n        initialLocation={{ index: 'LAST', align: 'end' }}\n        initialData={Array.from({length: 100}, (_, index) => ({ id: index, content: `Message ${index}` }))}\n        ItemContent={({ data }) => <div>{data.content}</div>}\n      />\n    </VirtuosoMessageListLicense>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Fixed Items with React Virtuoso\nDESCRIPTION: This example demonstrates how to use the topItemCount property of the Virtuoso component to pin the first two items at the top of a scrollable list. The backgroundColor is set to ensure scrollable items are properly hidden behind the pinned items when scrolling.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/top-items.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\n\nexport default function App() {\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      totalCount={1000}\n      topItemCount={2}\n      itemContent={(index) => (<div style={{ height: 30, backgroundColor: 'var(--background)' }}>Item {index + 1}</div>)}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Smooth Scrolling with VirtuosoMessageList in React\nDESCRIPTION: A complete example demonstrating custom smooth scrolling implementation with VirtuosoMessageList component. It includes a bounce easing function, a custom scroll handler, and demonstrates simulated chat interactions that use the custom scrolling behavior when appending new messages.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/smooth-scrolling.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageList, VirtuosoMessageListProps, VirtuosoMessageListMethods, VirtuosoMessageListLicense } from '@virtuoso.dev/message-list'\nimport {useRef} from 'react'\nimport {randTextRange, randPhrase} from '@ngneat/falso'\n\n/**\n * Bounce easing function - https://easings.net/#easeOutBounce. This is just an example, you can use any easing function.\n */\nfunction easeOutBounce(x: number): number {\n  const n1 = 7.5625;\n  const d1 = 2.75;\n\n  if (x < 1 / d1) {\n    return n1 * x * x;\n  } else if (x < 2 / d1) {\n    return n1 * (x -= 1.5 / d1) * x + 0.75;\n  } else if (x < 2.5 / d1) {\n    return n1 * (x -= 2.25 / d1) * x + 0.9375;\n  } else {\n    return n1 * (x -= 2.625 / d1) * x + 0.984375;\n  }\n}\n\n/**\n * If the location is too far, you can return a different smooth scroll behavior\n */\nfunction customSmoothScroll(currentTop: number, targetTop: number) {\n  return {\n    // increase the animation frame count to smoothen and slow down the scroll.\n    animationFrameCount: 50,\n    easing: easeOutBounce,\n  };\n}\n\nexport default function App() {\n  const virtuoso = useRef<VirtuosoMessageListMethods<Message>>(null);\n\n  return (\n    <div\n      className=\"wide-example full-code\"\n      style={{\n        height: 500,\n        display: \"flex\",\n        flexDirection: \"column\",\n        fontSize: \"70%\",\n      }}\n    >\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList<Message, null>\n          initialData={Array.from({ length: 100 }, (_, index) =>\n            randomMessage(index % 2 === 0 ? \"me\" : \"other\"),\n          )}\n          ref={virtuoso}\n          style={{ flex: 1 }}\n          computeItemKey={({ data }) => data.key}\n          initialLocation={{ index: \"LAST\", align: \"end\" }}\n          ItemContent={ItemContent}\n        />\n      </VirtuosoMessageListLicense>\n\n      <button\n        style={{ marginTop: \"1rem\", fontSize: \"1.1rem\", padding: \"1rem\" }}\n        onClick={(e) => {\n          e.target.disabled = true;\n          const myMessage = randomMessage(\"me\");\n          virtuoso.current?.data.append(\n            [myMessage],\n            ({ scrollInProgress, atBottom }) => {\n              return {\n                index: \"LAST\",\n                align: \"start\",\n                behavior:\n                  atBottom || scrollInProgress ? customSmoothScroll : \"auto\",\n              };\n            },\n          );\n\n          setTimeout(() => {\n            const botMessage = randomMessage(\"other\");\n            virtuoso.current?.data.append([botMessage]);\n\n            let counter = 0;\n            const interval = setInterval(() => {\n              if (counter++ > 20) {\n                clearInterval(interval);\n                e.target.disabled = false;\n              }\n              virtuoso.current?.data.map((message) => {\n                return message.key === botMessage.key\n                  ? { ...message, text: message.text + \" \" + randPhrase() }\n                  : message;\n              }, \"smooth\");\n            }, 150);\n          }, 1000);\n        }}\n      >\n        Ask the bot a question!\n      </button>\n    </div>\n  );\n}\n\ninterface Message {\n  key: string;\n  text: string;\n  user: \"me\" | \"other\";\n}\n\nlet idCounter = 0;\n\nfunction randomMessage(user: Message[\"user\"]): Message {\n  return {\n    user,\n    key: `${idCounter++}`,\n    text: randTextRange({ min: user === \"me\" ? 20 : 100, max: 200 }),\n  };\n}\n\nconst ItemContent: VirtuosoMessageListProps<Message, null>[\"ItemContent\"] = ({\n  data,\n}) => {\n  const ownMessage = data.user === \"me\";\n  return (\n    <div style={{ paddingBottom: \"2rem\", display: \"flex\" }}>\n      <div\n        style={{\n          maxWidth: \"60%\",\n          marginLeft: data.user === \"me\" ? \"auto\" : undefined,\n\n          background: ownMessage\n            ? \"var(--background)\"\n            : \"var(--alt-background)\",\n          border: '1px solid var(--border)',\n          borderRadius: \"1rem\",\n          padding: \"1rem\",\n        }}\n      >\n        {data.text}\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Initial Messages on Component Mount - React with TypeScript\nDESCRIPTION: Uses the useEffect hook to fetch the first 20 chat messages from the current channel when the component is mounted. Messages are appended to the VirtuosoMessageList via the imperative data API. Handles errors and ensures loading occurs only when not yet completed. Depends on ChatChannel's getMessages method and the messageListRef setup.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n  useEffect(() => {\n    if (!channel.loaded) {\n      channel\n        .getMessages({ limit: 20 })\n        .then((messages) => {\n          if (messages !== null) {\n            messageListRef.current?.data.append(messages);\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  }, [channel]);\n```\n\n----------------------------------------\n\nTITLE: Virtuoso Window Scrolling with React\nDESCRIPTION: This code snippet demonstrates how to enable window scrolling in a `Virtuoso` component. Setting `useWindowScroll` to `true` makes the component use the document's scrollbar. It renders 200 items with a simple text label.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/window-scrolling.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\n\nexport default function App() {\n  return (\n    <Virtuoso\n      useWindowScroll\n      totalCount={200}\n      itemContent={(index) => ( <div style={{ padding: '1rem 0.5rem' }}>Item {index}</div>)}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Grouped Numbers with React Virtuoso (TypeScript)\nDESCRIPTION: This React component uses the `GroupedVirtuoso` component to display a list of items. It utilizes the `useMemo` hook to generate an array of group counts. The `groupCounts` prop specifies the number of items in each group. The `groupContent` prop renders the content for each group header, and the `itemContent` prop renders the content for each individual item within the groups. The component takes styles for height as props.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/grouped-virtuoso/grouped-numbers.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx live\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { useMemo } from 'react'\n\nexport default function App() {\n  const groupCounts = useMemo(() => { \n    return Array(1000).fill(10)\n  }, [])\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: '100%' }}\n      groupCounts={groupCounts}\n      groupContent={index => {\n        return (\n            <div style={{ backgroundColor: 'var(--background)' }}>Group {index * 10} - {index * 10 + 10}</div>\n        )\n      }}\n      itemContent={(index, groupIndex) => (<div>{index} (group {groupIndex})</div>) }\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing TableVirtuoso with Fixed Headers in React\nDESCRIPTION: This example demonstrates creating a table with fixed headers using TableVirtuoso. It generates 1000 user records with names and descriptions, then renders them in a virtualized table with a fixed header that remains visible while scrolling. The fixedHeaderContent property defines the header row with styled th elements.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/table-virtuoso/table-fixed-headers.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TableVirtuoso} from 'react-virtuoso'\nimport {useMemo} from 'react'\n\nexport default function App() {\n  const users = useMemo(() => {\n    return Array.from({ length: 1000 }, (_, index) => ({\n      name: `User ${index}`,\n      description: `Description for user ${index}`\n    }))\n  }, [])\n\n  return (\n    <TableVirtuoso\n      style={{ height: '100%' }}\n      data={users}\n      fixedHeaderContent={() => (\n        <tr>\n          <th style={{ width: 150, background: 'var(--background)' }}>Name</th>\n          <th style={{ background: 'var(--background)' }}>Description</th>\n        </tr>\n      )}\n      itemContent={(index, user) => (\n        <>\n          <td style={{ width: 150 }}>{user.name}</td>\n          <td>{user.description}</td>\n        </>\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ChatChannel State for Home Page - React with TypeScript\nDESCRIPTION: Initializes the React state with an array containing one instance of the ChatChannel class and creates a selected channel state. This sets up the core channel management for the chat application. Requires ChatChannel to be defined and imported. Used in the page's main component to shape channel selection and data binding.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Home() {\n  const [channels, setChannels] = useState<ChatChannel[]>(() => [\n    new ChatChannel(\"general\", 500),\n  ]);\n  const [channel, setChannel] = useState(channels[0]);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Scroll Index in React Virtuoso (TSX)\nDESCRIPTION: This snippet demonstrates how to set the initial scroll position of a `react-virtuoso` list using the `initialTopMostItemIndex` prop. It configures a `Virtuoso` component with 1000 total items and sets the initial index to 800, ensuring the item at index 800 is visible when the component first renders. It uses `totalCount` to define the list size and `itemContent` to render the list items.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/initial-index.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\n\nexport default function App() {\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      totalCount={1000}\n      initialTopMostItemIndex={800}\n      itemContent={(index) => (<div style={{ height: 30 }}>Item {index}</div>)}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Memoizing Item Contents with React.memo (JSX)\nDESCRIPTION: This code snippet demonstrates how to use React.memo to optimize the rendering of item contents within a Virtuoso component.  It defines an InnerItem component wrapped with React.memo, which caches the rendering output based on the index prop. The itemContent callback provides the cached InnerItem component to the Virtuoso list.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/getting-started.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Item contents are cached properly with React.memo\nconst InnerItem = React.memo(({ index }) => {\n  React.useEffect(() => {\n    console.log('inner mounting', index)\n    return () => {\n      console.log('inner unmounting', index)\n    }\n  }, [index])\n  return <div style={{ height: 30 }}>Item {index}</div>\n})\n\n// The callback is executed often - don't inline complex components in here.\nconst itemContent = (index) => {\n  console.log('providing content', index)\n  return <InnerItem index={index} />\n}\n\nconst App = () => {\n  return <Virtuoso totalCount={100} itemContent={itemContent} style={{ height: '100%' }} />\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtuoso Message List and Loading Data (TSX)\nDESCRIPTION: Sets up the main `App` functional component using `useRef` to manage the `VirtuosoMessageList` instance for accessing its methods and a mounted state flag to run initial data loading only once. Includes a `useEffect` hook that populates the list with an initial batch of 20 random messages upon component mount using `virtuoso.current?.data.append`.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/07-grouped-messages.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nexport default function App() {\n  const mounted = React.useRef(false)\n  const virtuoso = React.useRef<VirtuosoMessageListMethods<Message>>(null)\n\n  React.useEffect(() => {\n    if (mounted.current) {\n      return\n    }\n    mounted.current = true\n\n    setTimeout(() => {\n      virtuoso.current?.data.append(\n        Array.from({ length: 20 }, (_, index) => {\n          const author = ['me', 'other'][index % 4 ? 0 : 1]\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any\n          return randomMessage(author as any)\n        })\n      )\n    })\n  }, [])\n  // ... rest of the component return JSX\n```\n\n----------------------------------------\n\nTITLE: MUI Table Virtualized with Table Virtuoso in TypeScript\nDESCRIPTION: This code snippet demonstrates how to virtualize an MUI Table using the `react-virtuoso` library. It utilizes MUI components like `Table`, `TableBody`, `TableCell`, `TableContainer`, `TableHead`, `TableRow`, and `Paper`. The `TableComponents` object maps `react-virtuoso` components to their MUI counterparts, and the `App` component renders the virtualized table with sample data. The `borderCollapse` style is adjusted on the Table component.  The example leverages `useMemo` hook for data initialization and `forwardRef` for component customization.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/third-party-integration/mui-table-virtual-scroll.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TableVirtuoso, TableVirtuosoProps} from 'react-virtuoso'\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { useMemo, forwardRef } from 'react'\n\nconst TableComponents: TableVirtuosoProps<{name: string, description: string}, unknown>['components'] = {\n  Scroller: forwardRef((props, ref) => <TableContainer component={Paper} {...props} ref={ref} />),\n  Table: (props) => <Table {...props} style={{ borderCollapse: 'separate' }} />,\n  TableHead: TableHead,\n  TableRow: TableRow,\n  TableBody: forwardRef((props, ref) => <TableBody {...props} ref={ref} />),\n}\n\nexport default function App() {\n  const users = useMemo(() => Array.from({ length: 100 }, (_, index) => ({\n        name: `User ${index}`,\n        description: `${index} description`\n      })), [])\n\n  return (\n    <TableVirtuoso\n      style={{ height: '100%' }}\n      data={users}\n      components={TableComponents}\n      fixedHeaderContent={() => (\n        <TableRow>\n          <TableCell style={{ width: 150, background: 'white' }}>\n            Name\n          </TableCell>\n          <TableCell style={{ background: 'white' }}>\n            Description\n          </TableCell>\n        </TableRow>\n      )}\n      itemContent={(index, user) => (\n        <>\n          <TableCell style={{ width: 150, background: 'white' }}>\n            {user.name}\n          </TableCell>\n          <TableCell style={{ background: 'white'  }}>\n            {user.description}\n          </TableCell>\n        </>\n      )}\n    />\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Handling with Virtuoso in React\nDESCRIPTION: This code snippet demonstrates how to use the `isScrolling` prop of the `Virtuoso` component to conditionally render different components based on whether the user is currently scrolling. It imports the `Virtuoso` component and the `useState` hook from React. When `isScrolling` is true, a placeholder `AvatarPlaceholder` component is rendered. When `isScrolling` is false or the component is not scrolling, the full `Avatar` component is rendered.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/scroll-handling.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [isScrolling, setIsScrolling] = useState(false);\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      totalCount={1000}\n      context={{ isScrolling }}\n      isScrolling={setIsScrolling}\n      itemContent={(index, user, { isScrolling }) => {\n        return (\n          <div style={{ padding: '1rem 0', alignItems: 'center', display: 'flex', flexDirection: 'row' }} >\n            <div style={{ margin: '1rem' }}>\n              {isScrolling ? <AvatarPlaceholder /> : <Avatar /> }\n            </div>\n\n            <div>\n              Item {index}\n            </div>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nfunction Avatar () {\n  return (\n    <div style={{\n        backgroundColor: 'blue',\n        borderRadius: '50%',\n        width: 50,\n        height: 50,\n        paddingTop: 13,\n        paddingLeft: 14,\n        color: 'white',\n        boxSizing: 'border-box'\n      }}>AB</div>\n  )\n}\n\nfunction AvatarPlaceholder({text }) {\nreturn (<div style={{\n        backgroundColor: '#eef2f4',\n        borderRadius: '50%',\n        width: 50,\n        height: 50,\n    }}>{text}</div>)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Virtuoso List with Footer\nDESCRIPTION: This example demonstrates how to render a custom Footer component at the bottom of a Virtuoso list. It defines a simple Footer component that displays \"end reached\" and passes it to the Virtuoso component's `components` property. It also uses `itemContent` to render the list items.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/footer.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\n\nfunction Footer() {\n  return (<div style={{ padding: '1rem', textAlign: 'center', }} > end reached </div>)\n}\n\nexport default function App() {\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      totalCount={100}\n      components={{ Footer: Footer }}\n      itemContent={(index) => ( <div>Item {index}</div>)}\n    />\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scroller Component with React Virtuoso in TypeScript\nDESCRIPTION: This snippet shows how to customize the scroller wrapper element in React Virtuoso by passing a custom React component via the components.Scroller prop. The custom Scroller component is wrapped using React.forwardRef to forward the ref properly. It merges supplied styles with a border style and spreads any other received props. This enables integration with custom scroller libraries or advanced customization of scrolling behavior. The Virtuoso component sets totalCount, itemContent, and onScroll handler similarly as before.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/custom-scroll-container.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport React from 'react'\n\n// do not inline the component, as a fresh instance would be created with each re-render\n// if you need to do some conditional logic, use Virtuoso's context prop to pass props inside the Scroller\nconst Scroller = React.forwardRef(({ style, ...props }, ref) => {\n  // an alternative option to assign the ref is\n  // <div ref={(r) => ref.current = r}>\n  return <div style={{ ...style, border: '5px solid gray' }} ref={ref} {...props} />\n})\n\nexport default function App() {\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      onScroll={(e) => console.log(e.target.scrollTop)}\n      totalCount={1000}\n      itemContent={(idx) => `Item ${idx}`}\n      components={{ Scroller }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Item by Predicate in VirtuosoMessageList (tsx)\nDESCRIPTION: Demonstrates how to remove a single item from the list based on a condition using the `data.findAndDelete` method. It uses the `useVirtuosoMethods` hook within the item renderer to access the methods for the specific item and adds a 'Remove' button next to each item.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/working-with-data.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageList, useVirtuosoMethods, VirtuosoMessageListLicense, VirtuosoMessageListMethods } from '@virtuoso.dev/message-list'\n\nfunction ItemContent({ data }) {\n  const virtuosoMethods = useVirtuosoMethods()\n  return (\n    <div>\n      Item {data}\n      <button onClick={() => virtuosoMethods.data.findAndDelete((item) => item === data)}>Remove</button>\n    </div>\n  )\n}\n\nexport default function App() {\n  return (\n    <VirtuosoMessageListLicense licenseKey=\"\">\n      <VirtuosoMessageList\n        ItemContent={ItemContent}\n        style={{ height: 500 }}\n        initialData={Array.from({ length: 100 }, (_, index) => index)}\n      />\n    </VirtuosoMessageListLicense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Column Count Example (TypeScript)\nDESCRIPTION: This React component demonstrates the use of `VirtuosoMasonry` with dynamic column count, adjusted based on window width. This example shows how to create a responsive masonry layout that changes the number of columns when the window size changes. It includes a `useWindowWidth` hook to get the current window width,  and it calculates `columnCount` based on the window width. The `VirtuosoMasonry` component is configured with `useWindowScroll` set to `true` for window scroll support.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/masonry/example.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VirtuosoMasonry } from '@virtuoso.dev/masonry'\nimport { useEffect, useMemo, useState } from 'react'\n\nfunction useWindowWidth() {\n  const [width, setWidth] = useState(window.innerWidth)\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth)\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n  return width\n}\n\nconst ItemContent: React.FC<{ data: number }> = ({ data }) => {\n  const height = data % 10 === 0 ? 200 : data % 5 === 0 ? 180 : data % 7 ? 150 : 120\n  return (\n    <div style={{ padding: '5px' }}>\n      <div style={{ height, border: '1px solid black' }}>Item {data}</div>\n    </div>\n  )\n}\n\nexport default function App() {\n  const data = useMemo(() => {\n    return Array.from({ length: 1000 }, (_, index) => index)\n  }, [])\n\n  const width = useWindowWidth()\n\n  const columnCount = useMemo(() => {\n    if (width < 500) {\n      return 2\n    }\n    if (width < 800) {\n      return 3\n    }\n    return 4\n  }, [width])\n\n  return (\n    <div>\n      <VirtuosoMasonry columnCount={columnCount} data={data} useWindowScroll={true} initialItemCount={50} ItemContent={ItemContent} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Item Keys in React Virtuoso Message List\nDESCRIPTION: This code snippet demonstrates how to assign unique, stable keys to list items in the Virtuoso Message List by utilizing the computeItemKey prop. It imports necessary components, creates a React functional component, and sets computeItemKey to return a key based on the item's data to prevent key conflicts during list updates.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/item-keys.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VirtuosoMessageList, VirtuosoMessageListLicense } from '@virtuoso.dev/message-list'\n\nexport default function App() {\n\n  return (\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          computeItemKey={({ data }) => {\n            return `item-${data}`\n          }}\n          style={{ height: '100%' }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtuoso Sticky Footer Button (TSX)\nDESCRIPTION: Defines a custom component for the Virtuoso message list's sticky footer. It uses absolute positioning to overlay the button at the bottom right, retrieves scroll location and imperative methods using `useVirtuosoLocation` and `useVirtuosoMethods`, and conditionally renders a scroll-to-bottom button based on the scroll offset. Clicking the button scrolls to the last item.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/04-scroll-to-bottom-button.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst StickyFooter: VirtuosoProps['StickyFooter'] = () => {\n  const location = useVirtuosoLocation()\n  const virtuosoMethods = useVirtuosoMethods()\n  return (\n      <div\n        style={{\n          position: 'absolute',\n          bottom: 10,\n          right: 50,\n        }}\n      >\n        {location.bottomOffset > 200 && (\n          <>\n            <button\n              style={{\n                backgroundColor: 'white',\n                border: '2px solid black',\n                borderRadius: '100%',\n                width: 30,\n                height: 30,\n                color: 'black',\n              }}\n              onClick={() => {\n                virtuosoMethods.scrollToItem({ index: 'LAST', align: 'end', behavior: 'auto' })\n              }}\n            >\n              {/* down arrow */}\n              &#9660;\n            </button>\n          </>\n        )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtuosoMessageList for Chat Interfaces (TSX)\nDESCRIPTION: Shows usage of the 'VirtuosoMessageList' component from '@virtuoso.dev/message-list', intended for rendering chat conversations between humans and AI. It requires a commercial license key wrapped in 'VirtuosoMessageListLicense'. The component accepts 'initialData' as an array of messages and an 'ItemContent' render prop for each message. Container height must be defined for proper rendering.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/getting-started.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageListLicense, VirtuosoMessageList } from '@virtuoso.dev/message-list'\n\nexport default function App() {\n  return (\n    <VirtuosoMessageListLicense licenseKey=\"\">\n      <VirtuosoMessageList\n        ItemContent={({ data }) => <div>Message {data}</div>}\n        style={{ height: '100%' }}\n        initialData={Array.from({ length: 100 }, (_, index) => index)}\n      />\n    </VirtuosoMessageListLicense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Virtuoso Masonry Package (bash)\nDESCRIPTION: This snippet demonstrates how to install the `@virtuoso.dev/masonry` package using npm. This command downloads and adds the package as a dependency to your project.  This is a prerequisite before using any of the Virtuoso Masonry components.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/masonry/example.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @virtuoso.dev/masonry\n```\n\n----------------------------------------\n\nTITLE: Implementing React Virtuoso List with Load More Footer Button in TypeScript/JavaScript\nDESCRIPTION: This snippet defines a React component that renders a virtualized list of users using react-virtuoso. It manages state for user data and loading status, and includes a footer component with a button to load more users. The loadMore function simulates network latency with setTimeout and appends additional user data.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/press-to-load-more.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useState, useCallback, useEffect } from 'react'\n\nexport default function App() {\n  const [users, setUsers] = useState(() => [])\n  const [loading, setLoading] = useState(false)\n\n  const loadMore = useCallback(() => {\n    setLoading(true)\n    return setTimeout(() => {\n      setUsers((users) => [...users, ...generateUsers(100, users.length)])\n      setLoading(() => false)\n    }, 500)\n  }, [setUsers, setLoading])\n\n  useEffect(() => {\n    const timeout = loadMore()\n    return () => clearTimeout(timeout)\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      data={users}\n      context={{ loading, loadMore }}\n      increaseViewportBy={200}\n      itemContent={(index, user) => {\n        return <div>{user.name}</div>\n      }}\n      components={{ Footer }}\n    />\n  )\n}\n\nconst Footer = ({ context: { loadMore, loading } }) => {\n  return (\n    <div\n      style={{\n        padding: '2rem',\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <button disabled={loading} onClick={loadMore}>\n        {loading ? 'Loading...' : 'Press to load more'}\n      </button>\n    </div>\n  )\n}\n\nfunction generateUsers(count, start) {\n  return Array.from({ length: count }, (_, i) => ({\n    name: `User ${start + i}`,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Component Structure Visualization for React Virtuoso\nDESCRIPTION: A text representation of the nested component structure that React Virtuoso renders, showing the hierarchy of Scroller, viewport, header, list, group, item and other components.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/customize-structure.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\ncomponents.Scroller (div)\n  |-viewport (div)\n    |-header(div* headerFooterTag)\n      |-components.Header\n    |-components.List (div)\n      |-components.Group (div+)\n        |-groupItemContent\n      |-components.Item (div+)\n        |-itemContent\n      |-components.EmptyPlaceholder\n    |-footer(div*, headerFooterTag)\n      |-components.Footer\n    |-components.List (Top Items) (div)\n      |-components.Item (div+)\n        |-itemContent\n      |-components.Group (div+)\n        |-groupItemContent\n```\n\n----------------------------------------\n\nTITLE: Rendering a Virtualized Table with Explicit Data using TableVirtuoso in TypeScript\nDESCRIPTION: This snippet provides a minimal React component that renders a virtualized table using TableVirtuoso. It passes an explicit data array and a custom itemContent function for row rendering. Dependencies: react-virtuoso. Parameters: data (array of objects with name and description fields), itemContent (function rendering table cells for each user). Inputs are automatically generated user objects; output is an HTML table with virtualized scrolling. Use border-collapse: separate style for proper header behaviour.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/table-virtuoso/hello-table.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TableVirtuoso} from 'react-virtuoso'\n\nexport default function App() {\n  return (\n    <TableVirtuoso\n      style={{ height: '100%' }}\n      data={Array.from({ length: 100 }, (_, index) => ({\n        name: `User ${index}`,\n        description: `${index} description`\n      }))}\n      itemContent={(index, user) => (\n        <>\n          <td style={{ width: 150 }}>{user.name}</td>\n          <td>{user.description}</td>\n        </>\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React component with react-virtuoso's GroupedVirtuoso for grouped user list\nDESCRIPTION: This React component imports necessary modules and uses React hooks to generate mock user data grouped by first letters of names. It leverages the GroupedVirtuoso component to display these users in a virtualized, grouped list with customized group headers and item content. Dependencies include react-virtuoso and React's useMemo hook, suitable for large datasets to optimize rendering performance.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/grouped-virtuoso/grouped-by-first-letter.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GroupedVirtuoso } from 'react-virtuoso'\nimport { useMemo } from 'react'\n\nexport default function App() {\n  const { users, groups, groupCounts } = useMemo(() => {\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n\n    const users = letters.flatMap((letter) => {\n      return Array.from({ length: 20 }, (_, index) => ({\n        name: `${letter} User ${index}`,\n        initials: `${letter}${index}`,\n        description: `Description for user ${index}`\n      }))\n    })\n\n    const groups = Array.from({ length: 10 }, (_, index) => {\n      return letters[index]\n    })\n\n    const groupCounts = groups.map((letter, index) => {\n      return users.filter((user, userIndex) => user.name.startsWith(letter)).length\n    })\n    return { users, groups, groupCounts }\n  }, [])\n\n  return (\n    <GroupedVirtuoso\n      groupCounts={groupCounts}\n      style={{ height: '100%' }}\n      groupContent={(index) => {\n        return (\n          <div\n            style={{\n              backgroundColor: 'var(--background)',\n              paddingTop: '1rem',\n              borderBottom: '1px solid var(--border)',\n            }}\n          >\n            {groups[index]}\n          </div>\n        )\n      }}\n      itemContent={(index) => {\n        return <div>{users[index].name}</div>\n      }}\n    />\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Styling Root Scroll Container in React Virtuoso Using TypeScript\nDESCRIPTION: This snippet demonstrates how to apply custom inline styles and attach an onScroll event listener to the root scrollable container in a React Virtuoso list component. It requires React and react-virtuoso dependencies. The Virtuoso component is configured with totalCount and itemContent props to render 1000 items, outputting the scrollTop value on each scroll event. Styles include border, borderRadius, and height to visually customize the scroll container.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/custom-scroll-container.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\n\nexport default function App() {\n  return (\n    <Virtuoso\n      onScroll={(e) => console.log(e.target.scrollTop)}\n      totalCount={1000}\n      itemContent={(idx) => `Item ${idx}`}\n      style={{\n        border: '5px dashed gray',\n        borderRadius: '4px',\n        height: '100%'\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtuosoGrid Component for Responsive Grids (TSX)\nDESCRIPTION: Shows an advanced example of using 'VirtuosoGrid' for rendering grids with same-sized items and responsive layout via CSS styling. It defines custom 'List' and 'Item' components to manage the grid container and item style using flexbox. An 'ItemWrapper' component contains individual item content with padding and borders. The grid supports 1000 items rendered with a flex layout in three columns (33% each). Container height is set to 100%.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/getting-started.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoGrid, VirtuosoGridProps } from 'react-virtuoso'\nimport { forwardRef } from 'react'\n\n// Ensure that the component definitions are not declared inline in the component function,\n// Otherwise the grid will remount with each render due to new component instances.\nconst gridComponents: VirtuosoGridProps<undefined, undefined>['components'] = {\n  List: forwardRef(({ style, children, ...props }, ref) => (\n    <div\n      ref={ref}\n      {...props}\n      style={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        ...style,\n      }}\n    >\n      {children}\n    </div>\n  )),\n  Item: ({ children, ...props }) => (\n    <div\n      {...props}\n      style={{\n        padding: '0.5rem',\n        width: '33%',\n        display: 'flex',\n        flex: 'none',\n        alignContent: 'stretch',\n        boxSizing: 'border-box',\n      }}\n    >\n      {children}\n    </div>\n  ),\n}\n\nconst ItemWrapper = ({ children, ...props }) => (\n  <div\n    {...props}\n    style={{\n      display: 'flex',\n      flex: 1,\n      textAlign: 'center',\n      padding: '1rem 1rem',\n      border: '1px solid gray',\n      whiteSpace: 'nowrap',\n    }}\n  >\n    {children}\n  </div>\n)\n\nexport default function App() {\n  return (\n    <>\n      <VirtuosoGrid\n        style={{ height: '100%' }}\n        totalCount={1000}\n        components={gridComponents}\n        itemContent={(index) => <ItemWrapper>Item {index}</ItemWrapper>}\n      />\n      <style>{`html, body, #root { margin: 0; padding: 0 }`}</style>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Structure and Helper Function (TS)\nDESCRIPTION: Imports necessary modules for React, Virtuoso, and data generation. Defines the `Message` interface representing the structure of a message object. Provides a helper function `randomMessage` to create message objects with unique keys, user types ('me' or 'other'), and random text content using the `@ngneat/falso` library.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/examples/07-grouped-messages.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react'\nimport {\n  VirtuosoMessageList,\n  VirtuosoMessageListLicense,\n  VirtuosoMessageListProps,\n  VirtuosoMessageListMethods,\n} from '@virtuoso.dev/message-list'\nimport { randTextRange } from '@ngneat/falso'\n\ninterface Message {\n  key: string\n  text: string\n  user: 'me' | 'other'\n}\n\nlet idCounter = 0\n\nfunction randomMessage(user: Message['user']): Message {\n  return { user, key: `${idCounter++}`, text: randTextRange({ min: user === 'me' ? 20 : 100, max: 200 }) }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Virtuoso Message List via npm - Bash\nDESCRIPTION: This is the npm installation command for the '@virtuoso.dev/message-list' package, required to use the VirtuosoMessageList and associated licensing components in a React project. Execute this command in your project root directory before attempting to import or use any Virtuoso message list components.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/overview.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @virtuoso.dev/message-list\n```\n\n----------------------------------------\n\nTITLE: Initializing a Next.js Project with create-next-app\nDESCRIPTION: Command to bootstrap a new Next.js project for the VirtuosoMessageList tutorial. This creates a new project with TypeScript and App router support.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/01-intro.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest virtuoso-message-list-tutorial\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Dev Server to Silence ResizeObserver Errors\nDESCRIPTION: This JavaScript configuration snippet demonstrates how to modify the Webpack `devServer` settings to prevent the 'Uncaught Error: ResizeObserver loop completed with undelivered notifications' error often seen with React Virtuoso. Setting `client.overlay.runtimeErrors` to `false` within the `devServer` configuration object suppresses this specific runtime error overlay in the browser during development.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/troubleshooting.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  devServer: {\n    client: {\n      overlay: {\n        errors: true,\n        warnings: false,\n        runtimeErrors: false, // this eliminates the error. \n      },\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Avoiding CSS Margin Issues in Virtuoso (JSX)\nDESCRIPTION: This code snippet demonstrates how to avoid issues with CSS margins affecting the content measurement in Virtuoso.  It shows how to ensure that the margins of elements within the item container do not protrude outside of the container, preventing miscalculation of the total scroll height.  The example sets margin: 0 on a paragraph element within the item.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/getting-started.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Virtuoso\n  totalCount={100}\n  item={(index) => (\n    <div>\n      <p style={{ margin: 0 }}>Item {index}</p>\n    </div>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Ignoring ResizeObserver Errors in Webpack Dev Overlay (JavaScript/Webpack)\nDESCRIPTION: This code snippet demonstrates how to configure the Webpack dev server client overlay to ignore runtime errors specifically related to the ResizeObserver loop limit. It filters errors based on the message content, preventing benign ResizeObserver messages from cluttering the development overlay.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/resize-observer-errors.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  //...\n  devServer: {\n    client: {\n      overlay: {\n        errors: false,\n        warnings: false,\n        runtimeErrors: (error: Error) => {\n          if (error.message.includes(\"ResizeObserver loop\")) {\n            return false;\n          } else {\n            return true;\n          }\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollSeekPlaceholder Component in React\nDESCRIPTION: This code defines a functional React component called `ScrollSeekPlaceholder`.  It renders a placeholder element with a dynamic height based on the index and context.  The placeholder visually represents the item that is being skipped due to rapid scrolling.  The component requires `height`, `index`, and `context` as props.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/scroll-seek-placeholders.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// You can use index to randomize\n// and make the placeholder list more organic.\n// the height passed is the one measured for the real item.\n// the placeholder should be the same size.\nconst ScrollSeekPlaceholder =  ({ height, index, context: { randomHeights }}) => (\n  <div\n    style={{\n      height,\n      padding: \"8px\",\n      boxSizing: \"border-box\",\n      overflow: \"hidden\",\n    }}\n  >\n    <div\n      style={{\n        background: index % 2 ? \"#ccc\": \"#eee\",\n        height: randomHeights[index % 10],\n      }}\n    ></div>\n  </div>\n)\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping VirtuosoMessageList with License Provider in React (TSX)\nDESCRIPTION: This snippet demonstrates how to wrap the VirtuosoMessageList component with the VirtuosoMessageListLicense provider component in a React application, passing the purchased licenseKey as a prop. This integration removes console warnings and enables production use in accordance with the commercial EULA. The licenseKey prop must be obtained from your license email and is required for production deployment; for evaluation, an empty key is tolerated for 30 days. Both VirtuosoMessageListLicense and VirtuosoMessageList must be imported from the @virtuoso.dev/message-list package, and this code should be placed at the entry point or the relevant component tree ensuring it is not server-side rendered only.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/licensing.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<VirtuosoMessageListLicense licenseKey=\"your-license-key\">\n  { /* Your application code */ }\n  <VirtuosoMessageList  />\n  { /* Your application code */ }\n</VirtuosoMessageListLicense>\n```\n\n----------------------------------------\n\nTITLE: Installing React Virtuoso via NPM Bash\nDESCRIPTION: Installs the core 'react-virtuoso' package for React projects, and the '@virtuoso.dev/message-list' package for the VirtuosoMessageList component which requires a commercial license. These commands are prerequisites before importing and using the Virtuoso components in a React application.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-virtuoso\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @virtuoso.dev/message-list\n```\n\n----------------------------------------\n\nTITLE: Publishing and Subscribing to Nodes in Gurx\nDESCRIPTION: Example demonstrating how to create a Realm instance and interact with nodes by publishing values and subscribing to changes. This shows the basic mechanisms of data flow in Gurx.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/gurx/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst realm = new Realm()\n\nrealm.sub(myCell$, (value) => {\n  console.log('a subscription from the outside', value)\n})\n\nrealm.pub(mySignal$, 1)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Values from Cells in Gurx\nDESCRIPTION: Example showing how to retrieve the current value of a cell or multiple cells from a Realm instance using getValue and getValues methods. This demonstrates the stateful nature of cells in Gurx.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/gurx/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nr.getValue(myCell$) // 1\nr.getValues([myCell$ /* $myCell2, $myCell3, etc */])\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Interfaces with React Virtuoso Custom Components\nDESCRIPTION: Demonstrates how to use TypeScript interfaces from React Virtuoso to properly type custom components. Shows proper annotation for a Scroller component using the Components interface.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/customize-structure.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Components } from 'react-virtuoso'\n\nconst Scroller: Components['Scroller'] = React.forwardRef(({ style, children }, ref) => {\n  return (\n    <div style={style} ref={ref}>\n      {children}\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Publishing and Subscribing in Gurx\nDESCRIPTION: Example showing advanced publishing and subscribing techniques in Gurx, including publishing to multiple nodes simultaneously and subscribing to multiple nodes with a single subscription.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/gurx/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// multiple publishing with a single recalculation\nrealm.pubIn({\n  [foo$]: 'foo 1 value',\n  [bar$]: 'bar 1 value',\n})\n\n// subscribe to the values of multiple nodes with a single subscription\nr.subMultiple([foo$, bar$], ([foo, bar]) => console.log(foo, bar))\n```\n\n----------------------------------------\n\nTITLE: Mocking VirtuosoGrid rendering in tests with VirtuosoGridMockContext\nDESCRIPTION: This snippet demonstrates how to mock the VirtuosoGrid component in a testing environment using the `VirtuosoGridMockContext`.  It wraps the VirtuosoGrid component with the mock context provider, setting `viewportHeight`, `viewportWidth`, `itemHeight`, and `itemWidth` to simulate DOM measurements, which enables proper rendering during tests.  Dependencies include `@testing-library/react` and `react-virtuoso`.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/third-party-integration/mocking-in-tests.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from '@testing-library/react'\nimport * as React from 'react'\nimport { VirtuosoGrid, VirtuosoGridMockContext } from 'react-virtuoso'\n\ndescribe('Virtuoso', () => {\n  type Item = { id: string, value: string }\n  const data: Item[] = [\n    { id: '1', value: 'foo' },\n    { id: '2', value: 'bar' },\n    { id: '3', value: 'baz' },\n  ]\n\n  it('correctly renders items', () => {\n    const { container } = render(<VirtuosoGrid data={data} />, {\n      wrapper: ({ children }) => (\n        <VirtuosoGridMockContext.Provider value={{ viewportHeight: 300, viewportWidth: 300, itemHeight: 100, itemWidth: 100 }}>\n          {children}\n        </VirtuosoGridMockContext.Provider>\n      ),\n    })\n\n    expect(container).toMatchSnapshot()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Virtuoso Message List with React Testing Library (TSX)\nDESCRIPTION: Demonstrates how to test the VirtuosoMessageList component using React Testing Library within a Node.js/JSDOM environment like Vitest. It includes necessary imports and setup, such as providing the `VirtuosoMessageListTestingContext` to simulate item and viewport heights, and mocking the `ResizeObserver` API, which is not fully supported in JSDOM. The test renders a simple list and asserts that the expected number of items (based on the simulated heights) are present in the DOM.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/testing.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { describe, it, beforeEach, expect } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport { VirtuosoMessageListTestingContext, VirtuosoMessageListLicense, VirtuosoMessageList } from '@virtuoso.dev/message-list\n\nfunction SampleComponent() {\n  return (\n    <VirtuosoMessageListTestingContext.Provider value={{ itemHeight: 100, viewportHeight: 400 }}>\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          style={{ height: '100%' }}\n          initialData={Array.from({ length: 100 })}\n          ItemContent={({ index }) => <div role=\"item\">{index}</div>}\n        />\n      </VirtuosoMessageListLicense>\n    </VirtuosoMessageListTestingContext.Provider>\n  )\n}\n\ndescribe('dom test', () => {\n  beforeEach(async () => {\n    const ResizeObserver = await import('resize-observer-polyfill')\n    global.ResizeObserver = ResizeObserver.default\n  })\n\n  it('works', async () => {\n    render(<SampleComponent />)\n    await screen.findAllByRole('item')\n    expect(screen.getAllByRole('item')).toHaveLength(4)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Gurx Package with NPM\nDESCRIPTION: Command to install the Gurx library via NPM package manager. The package includes TypeScript types by default, so no additional types package is needed.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/gurx/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @virtuoso.dev/gurx\n```\n\n----------------------------------------\n\nTITLE: Initializing a Virtualized List Using React Virtuoso - JSX\nDESCRIPTION: Demonstrates setting up a basic virtualized list in a React application using the Virtuoso component. Requires the react, react-dom, and react-virtuoso packages to be installed. The example renders a list of 200 items in a 400px-tall container, with itemContent providing the rendering function for each list item. Expects a DOM element with the id 'root' for mounting. No special limitations, but further customization may require additional properties.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react' import * as ReactDOM from 'react-dom'\nimport { Virtuoso } from 'react-virtuoso'\n\nconst App = () => {\n  return <Virtuoso style={{ height: '400px' }} totalCount={200} itemContent={index => <div>Item {index}</div>} />\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Channel State in React\nDESCRIPTION: This snippet demonstrates initializing state for managing multiple chat channels and the currently selected channel using the `React.useState` hook in a React component. It sets up an initial state with two `ChatChannel` instances ('general' and 'fun') and selects the first channel as the default active channel.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/07-multiple-channels.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst [channels, setChannels] = React.useState<ChatChannel[]>(() => [\n  new ChatChannel('general', 500), \n// highlight-next-line\n  new ChatChannel('fun', 500)\n])\n\nconst [channel, setChannel] = useState(channels[0]);\n```\n\n----------------------------------------\n\nTITLE: Mocking Virtuoso rendering in tests with VirtuosoMockContext\nDESCRIPTION: This snippet demonstrates how to mock the Virtuoso component in a testing environment using the `VirtuosoMockContext`. It wraps the Virtuoso component with the mock context provider, setting `viewportHeight` and `itemHeight` to simulate DOM measurements. This allows Virtuoso to render items correctly during testing, enabling snapshot testing or other assertions. Dependencies include `@testing-library/react` and `react-virtuoso`.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/third-party-integration/mocking-in-tests.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from '@testing-library/react'\nimport * as React from 'react'\nimport { Virtuoso, VirtuosoMockContext } from 'react-virtuoso'\n\ndescribe('Virtuoso', () => {\n  type Item = { id: string, value: string }\n  const data: Item[] = [\n    { id: '1', value: 'foo' },\n    { id: '2', value: 'bar' },\n    { id: '3', value: 'baz' },\n  ]\n\n  it('correctly renders items', () => {\n    const { container } = render(<Virtuoso data={data} />, {\n      wrapper: ({ children }) => (\n        <VirtuosoMockContext.Provider value={{ viewportHeight: 300, itemHeight: 100 }}>{children}</VirtuosoMockContext.Provider>\n      ),\n    })\n\n    expect(container).toMatchSnapshot()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Cells and Signals in TypeScript\nDESCRIPTION: Example showing how to define cells and signals in Gurx. A cell has an initial value and an initialization function, while a signal is similar but without an initial value. Both can be configured with a distinct flag.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/gurx/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myCell$ = Cell(\n  // initial value\n  0,\n  // the r is the realm instance that starts the cell\n  (r) => {\n    r.sub(myCell$, (value) => {\n      console.log('myCell$ changed to', value)\n    })\n  }\n  // distinct flag, true by default\n  true\n)\n\n// Since signals have no initial value, you need to specify the type of data that will flow through them\nconst mySignal$ = Signal<number>(\n  // the r is the realm instance that starts the cell\n  (r) => {\n    r.sub(mySignal$, (value) => {\n      console.log('mySignal$ changed to', value)\n    })\n    // publishing a value through a signal will publish it into $myCell as well\n    r.link(mySignal$, myCell$)\n  },\n  // distinct flag\n  true\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Virtuoso Message List NPM Package - Bash\nDESCRIPTION: Installs the @virtuoso.dev/message-list package required to render and manage highly performant chat message lists in a React application. This must be run in the project root and requires npm (Node Package Manager) to be set up beforehand. Intended as a setup step before using VirtuosoMessageList components.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @virtuoso.dev/message-list\n```\n\n----------------------------------------\n\nTITLE: Installing React Virtuoso with NPM - Shell\nDESCRIPTION: Installs the react-virtuoso package via npm, enabling access to the Virtuoso UI components for React applications. Requires Node.js and npm to be installed on your system. No additional parameters; this command will add react-virtuoso to your project's dependencies.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-virtuoso\n```\n\n----------------------------------------\n\nTITLE: Basic VirtuosoMasonry Example (TypeScript)\nDESCRIPTION: This React component example demonstrates a basic implementation of the VirtuosoMasonry component. It renders a grid of items with varying heights.  It uses the `VirtuosoMasonry` component, providing `data`, `columnCount`, `style`, `initialItemCount`, and an `ItemContent` to define how each item is rendered. The `data` prop is an array of numbers used to generate the items.  The height of each item is calculated based on the item's index. It renders items of different heights and styles.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/masonry/example.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VirtuosoMasonry } from '@virtuoso.dev/masonry'\nimport { useEffect, useMemo, useState } from 'react'\n\nconst ItemContent: React.FC<{ data: number }> = ({ data }) => {\n  const height = data % 10 === 0 ? 200 : data % 5 === 0 ? 180 : data % 7 ? 150 : 120\n  return (\n    <div style={{ padding: '5px' }}>\n      <div style={{ height, border: '1px solid black' }}>Item {data}</div>\n    </div>\n  )\n}\n\nexport default function App() {\n  const data = useMemo(() => {\n    return Array.from({ length: 1000 }, (_, index) => index)\n  }, [])\n\n  return (\n    <div>\n      <VirtuosoMasonry columnCount={3} data={data} style={{ height: 500 }} initialItemCount={50} ItemContent={ItemContent} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Virtuoso Config\nDESCRIPTION: This JavaScript snippet shows how to import and use the Virtuoso ESLint configuration in your project's eslint.config.mjs file. It extends the default ESLint configuration with the Virtuoso-specific rules and settings.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/tooling/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport virtuosoEslintConfig from '@virtuoso.dev/tooling/eslint.config.mjs'\n\nexport default [...virtuosoEslintConfig]\n```\n\n----------------------------------------\n\nTITLE: Customizing React Virtuoso with @emotion/styled Components\nDESCRIPTION: A complete example demonstrating how to customize the React Virtuoso component using @emotion/styled. Shows how to create styled components for Item and List, and how to properly implement a forwardRef for the List component.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/customize-structure.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport styled from '@emotion/styled'\nimport React from 'react'\nimport { Virtuoso } from 'react-virtuoso'\n\nconst Item = styled.div`\n  border: 2px solid red;\n`\nconst ListEl = styled.div`\n  border: 1px solid blue;\n`\nconst Header = () => 'Header'\nconst Footer = () => 'Footer'\n\nconst List = React.forwardRef((props, ref) => {\n  return <ListEl {...props} ref={ref} />\n})\n\nexport default function App() {\n  return (\n    <Virtuoso style={{ height: '100%' }} components={{ Item, List, Header, Footer }} totalCount={30} itemContent={(idx) => `Item ${idx}`} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Loading Placeholder - React with TypeScript\nDESCRIPTION: Defines a React functional component EmptyPlaceholder that displays different content based on whether the channel is loaded, using the context API of VirtuosoMessageList. Implements custom UI for empty or loading states, enhancing the user experience. Requires VirtuosoMessageListProps, ChatChannel, and React in scope.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MessageListContext {\n  channel: ChatChannel\n}\n\ntype VirtuosoProps = VirtuosoMessageListProps<ChatMessage, MessageListContext>\n\nconst EmptyPlaceholder: VirtuosoProps['EmptyPlaceholder'] = ({ context }) => {\n  return (<div>{!context.channel.loaded ? 'Loading...' : 'Empty'}</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Inline Component Usage with React Virtuoso\nDESCRIPTION: An example showing an anti-pattern of passing components inline with useState that causes unnecessary unmounting and remounting. This should be avoided in favor of defining components outside.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/customize-structure.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Virtuoso components={{ Header:() => <div></div> }} />\n```\n\n----------------------------------------\n\nTITLE: Integrating Gurx with React Components\nDESCRIPTION: Example showing how to use Gurx in React applications using the RealmProvider component and hooks like useCellValue to access node values in components.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/gurx/README.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst foo$ = Cell('foo', true)\n\nfunction Foo() {\n  const foo = useCellValue(foo$)\n  return <div>{foo}</div>\n}\n\nexport function App() {\n  return (\n    <RealmProvider>\n      <Foo />\n    </RealmProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Header Component to Display Loading Indicator in VirtuosoMessageList - TypeScript JSX\nDESCRIPTION: Defines a custom Header React component adhering to Virtuoso's Header prop type. It accepts a context containing loadingNewer state and renders a fixed-height div that displays 'Loading...' text when older messages are being loaded. This visually indicates fetching state at the top of the message list.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/03-loading-older-messages.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst Header: VirtuosoProps['Header'] = ({ context }) => {\n  return <div style={{ height: 30 }}>{context.loadingNewer ? 'Loading...' : ''}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Configuration\nDESCRIPTION: This JSON snippet demonstrates how to extend the shared TypeScript configuration from the @virtuoso.dev/tooling package in your project's tsconfig.json file. It allows you to inherit the base TypeScript settings and add project-specific compiler options and include paths.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/tooling/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@virtuoso.dev/tooling/tsconfig.json\",\n  \"compilerOptions\": {\n    // Additional project-specific options\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Virtuoso Tooling Package\nDESCRIPTION: This command installs the @virtuoso.dev/tooling package as a dev dependency using npm. This allows the project to access the shared ESLint and TypeScript configurations.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/tooling/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @virtuoso.dev/tooling\n```\n\n----------------------------------------\n\nTITLE: Polyfilling ResizeObserver for Legacy Browser Support - JavaScript\nDESCRIPTION: Shows how to import the resize-observer-polyfill library and assign it to window.ResizeObserver if the native browser implementation is missing. Essential for supporting browsers without native ResizeObserver when using react-virtuoso, especially in older environments. Requires the resize-observer-polyfill npm package to be installed. Checks if window.ResizeObserver exists and only assigns the polyfill as needed.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ResizeObserver from 'resize-observer-polyfill'\nif (!window.ResizeObserver)\n  window.ResizeObserver = ResizeObserver\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Seek Placeholders in React Virtuoso\nDESCRIPTION: This code defines a React component that uses the Virtuoso library to render a scrollable list with scroll seek placeholders. It utilizes `useMemo` to generate random heights and `useState` to manage the visible range of the list. The `Virtuoso` component is configured with `scrollSeekConfiguration` to control the placeholder behavior based on scroll velocity and updates the visible range.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/scroll-seek-placeholders.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useMemo, useState } from 'react'\n\nexport default function App() {\n  const randomHeights = useMemo(\n    () =>\n      Array(10)\n        .fill(true)\n        .map(() => Math.round(Math.random() * 14) + 1),\n    []\n  );\n\n\n  // use the visible range to provide information\n  // about the list current position.\n  const [visibleRange, setVisibleRange] = useState([\"-\", \"-\"]);\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: 'column', height: '100%' }}>\n      <div>\n        Current visible range:{\" \"}\n        <div>\n          <strong>\n            {visibleRange[0]} - {visibleRange[1]}\n          </strong>\n        </div>{\" \"}\n      </div>\n\n      <div style={{ flex: 1 }}>\n        <Virtuoso\n          context={{ randomHeights }}\n          style={{ height: '100%' }}\n          totalCount={1000}\n          itemContent={(index ) => <div>Item {index}</div>}\n          components={{ ScrollSeekPlaceholder }}\n          scrollSeekConfiguration={{\n            enter: (velocity) => Math.abs(velocity) > 50,\n            exit: (velocity) => {\n              const shouldExit = Math.abs(velocity) < 10;\n              if (shouldExit) {\n                setVisibleRange([\"-\", \"-\"]);\n              }\n              return shouldExit;\n            },\n            change: (_velocity, { startIndex, endIndex }) => setVisibleRange([startIndex, endIndex])\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Sticky Header and Footer in VirtuosoMessageList (TSX)\nDESCRIPTION: This example shows how to implement `StickyHeader` and `StickyFooter` components in `VirtuosoMessageList`. Unlike regular headers/footers, these remain fixed within the viewport during scrolling. The component measures their size to prevent them from obscuring list items.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/headers-footers.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageListProps, VirtuosoMessageList, useVirtuosoMethods, VirtuosoMessageListLicense, VirtuosoMessageListMethods} from '@virtuoso.dev/message-list'\n\nconst StickyHeader: VirtuosoMessageListProps<number, null>['StickyHeader'] = () => <div style={{ height: 30, background: 'lightblue' }}>Header</div>\nconst StickyFooter: VirtuosoMessageListProps<number, null>['StickyFooter'] = () => <div style={{ height: 30, background: 'lightblue' }}>Footer</div>\n\nexport default function App() {\n\n  return (\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          StickyHeader={StickyHeader}\n          StickyFooter={StickyFooter}\n          style={{ height: '100%' }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n  )\n}\n\n \n```\n\n----------------------------------------\n\nTITLE: Implementing ChatChannel Class for Message Simulation in TypeScript\nDESCRIPTION: A TypeScript implementation of a ChatChannel class that simulates server-client communication. It provides methods for loading messages, generating new messages, and handling message delivery status.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/01-intro.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { rand, randFullName, randNumber, randSentence } from '@ngneat/falso'\n\ntype GetMessageParams = { limit?: number } | { before: number; limit?: number }\n\nexport class ChatChannel {\n  public users: ChatUser[]\n  private localIdCounter = 0\n  public messages: ChatMessage[] = []\n\n  public onNewMessages = (messages: ChatMessage[]) => {\n    void messages\n  }\n  public currentUser: ChatUser\n  private otherUser: ChatUser\n  private loading = false\n  public loaded = false\n\n  constructor(\n    public name: string,\n    private totalMessages: number\n  ) {\n    this.users = Array.from({ length: 2 }, (_, i) => new ChatUser(i))\n    this.currentUser = this.users[0]\n    this.otherUser = this.users[1]\n    if (this.totalMessages === 0) {\n      this.loaded = true\n    }\n  }\n\n  async getMessages(params: GetMessageParams) {\n    if (this.loading) {\n      return null\n    }\n\n    this.loading = true\n\n    await new Promise((r) => setTimeout(r, 1000))\n    const { limit = 10 } = params\n    this.loading = false\n\n    if (!this.loaded) {\n      this.loaded = true\n    }\n\n    if (this.messages.length >= this.totalMessages) {\n      return []\n    }\n\n    // prepending messages, simplified for the sake of the example\n    if ('before' in params) {\n      if (this.messages.length >= this.totalMessages) {\n        return []\n      }\n\n      const offset = this.totalMessages - this.messages.length - limit\n\n      const newMessages = Array.from({ length: limit }, (_, i) => {\n        const id = offset + i\n        return new ChatMessage(id, rand(this.users))\n      })\n      this.messages = newMessages.concat(this.messages)\n      return newMessages\n    } else {\n      // initial load\n      this.messages = Array.from({ length: limit }, (_, i) => {\n        const id = this.totalMessages - limit + i\n        return new ChatMessage(id, rand(this.users))\n      })\n      return this.messages\n    }\n  }\n\n  createNewMessageFromAnotherUser() {\n    const newMessage = new ChatMessage(this.messages.length, this.otherUser)\n    this.messages.push(newMessage)\n    this.onNewMessages([newMessage])\n  }\n\n  sendOwnMessage() {\n    const tempMessage = new ChatMessage(null, this.currentUser)\n    tempMessage.localId = ++this.localIdCounter\n    tempMessage.delivered = false\n\n    setTimeout(() => {\n      const deliveredMessage = new ChatMessage(this.messages.length, this.currentUser, tempMessage.message)\n      deliveredMessage.localId = tempMessage.localId\n      this.messages.push(deliveredMessage)\n      this.onNewMessages([deliveredMessage])\n    }, 1000)\n\n    return tempMessage\n  }\n}\n\nexport class ChatUser {\n  constructor(\n    public id: number | null,\n    public name = randFullName(),\n    public avatar = `https://i.pravatar.cc/30?u=${encodeURIComponent(name)}`\n  ) {}\n}\n\n// a ChatMessage class with a random message\nexport class ChatMessage {\n  public delivered = true\n  public localId: number | null = null\n  constructor(\n    public id: number | null,\n    public user: ChatUser,\n    public message = randSentence({\n      length: randNumber({ min: 1, max: 5 }),\n    }).join(' ')\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Unique Message Keys for Virtualized Lists - React with TypeScript\nDESCRIPTION: Provides a computeItemKey function to the VirtuosoMessageList, ensuring each message has a stable, unique key for correct React rendering as the set of messages grows or changes. Returns message.id if available, else falls back to a localId-based key for optimistically rendered messages. This customization prevents issues caused by shifting array indices when new messages are loaded.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/02-message-list.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n  <VirtuosoMessageList<ChatMessage, {}>\n// highlight-start\n    computeItemKey={({ data }) => {\n      if (data.id !== null) {\n        return data.id\n      } else {\n        return `l-${data.localId}`\n      }\n    }}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using Context with VirtuosoMessageList Header Component in React\nDESCRIPTION: This example demonstrates how to create a TypeScript interface for the context, implement a custom Header component that receives loading state from context, and toggle the loading state with a button. The Header component displays different text based on the loading flag received from context.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/context.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageList, VirtuosoMessageListProps, VirtuosoMessageListLicense } from '@virtuoso.dev/message-list'\nimport { useState } from 'react'\n\ninterface MessageListContext {\n  loading: boolean\n}\n\nconst Header: VirtuosoMessageListProps<number, MessageListContext>['Header'] = ({ context }) => (\n  <div style={{ height: 30, background: 'lightblue' }}>Header - {context.loading ? 'loading' : 'loaded'}</div>\n)\n\nexport default function App() {\n  const [loading, setLoading] = useState(false)\n\n  return (\n    <>\n      <button onClick={() => setLoading(!loading)}>Toggle Loading</button>\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList<number, MessageListContext>\n          context={{ loading }}\n          Header={Header}\n          style={{ height: 500 }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Virtual List with Data Prop in React Virtuoso\nDESCRIPTION: This example shows how to create a virtual list of 100,000 users with random heights using React Virtuoso's data prop. The component generates a memoized array of user objects and renders them with dynamic heights.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso/hello.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { useMemo } from 'react'\n\nexport default function App() {\n  const users = useMemo(() => {\n    return Array.from({ length: 100000 }, (_, index) => ({\n      name: `User ${index}`,\n      // random-sized items\n      size: Math.floor(Math.random() * 40) + 70,\n      description: `Description for user ${index}`\n    }))\n  }, [])\n\n  return (\n    <Virtuoso\n      style={{ height: '100%' }}\n      data={users}\n      itemContent={(_, user) => (\n        <div\n          style={{\n            padding: '0.5rem',\n            height: `${user.size}px`,\n            borderBottom: `1px solid var(--border)`\n          }}\n        >\n          <p><strong>{user.name}</strong></p>\n          <div>{user.description}</div>\n        </div>\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Regular and Sticky Headers/Footers in VirtuosoMessageList (TSX)\nDESCRIPTION: This example illustrates how to use both regular (`Header`, `Footer`) and sticky (`StickyHeader`, `StickyFooter`) components simultaneously within a single `VirtuosoMessageList`. The sticky components remain fixed in the viewport, while the regular components scroll with the list content.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/headers-footers.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageListProps, VirtuosoMessageList, useVirtuosoMethods, VirtuosoMessageListLicense, VirtuosoMessageListMethods} from '@virtuoso.dev/message-list'\n\nconst StickyHeader: VirtuosoMessageListProps<number, null>['StickyHeader'] = () => <div style={{ height: 30, background: 'lightblue' }}>Sticky Header</div>\nconst StickyFooter: VirtuosoMessageListProps<number, null>['StickyFooter'] = () => <div style={{ height: 30, background: 'lightblue' }}>Sticky Footer</div>\nconst Header: VirtuosoMessageListProps<number, null>['Header'] = () => <div style={{ height: 30, background: 'lightgreen' }}>Header</div>\nconst Footer: VirtuosoMessageListProps<number, null>['Footer'] = () => <div style={{ height: 30, background: 'lightgreen' }}>Footer</div>\n\nexport default function App() {\n\n  return (\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          StickyHeader={StickyHeader}\n          StickyFooter={StickyFooter}\n          Header={Header}\n          Footer={Footer}\n          style={{ height: '100%' }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n  )\n}\n\n \n```\n\n----------------------------------------\n\nTITLE: Replacing All Data in VirtuosoMessageList (tsx)\nDESCRIPTION: Demonstrates replacing the entire dataset in the list with new data using the `data.replace` method. It accesses the component's methods via a React ref. The button replaces the current data with a new array and specifies initial scroll location and the option to purge item sizes.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/working-with-data.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageList, VirtuosoMessageListLicense, VirtuosoMessageListMethods } from '@virtuoso.dev/message-list'\n\nexport default function App() {\n  const ref = React.useRef<VirtuosoMessageListMethods>(null)\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          const newData = Array.from({ length: 100 }, (_, index) => index + 100)\n          ref.current.data.replace(newData, {\n            initialLocation: { index: 'LAST', align: 'end' },\n            purgeItemSizes: true,\n          })\n        }}\n      >\n        Replace with 100 items (100-200)\n      </button>\n\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          ItemContent={({ data }) => <div>{data}</div>}\n          ref={ref}\n          initialLocation={{ index: 'LAST', align: 'end' }}\n          style={{ height: 500 }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Overlaying Sticky Header/Footer in VirtuosoMessageList (TSX)\nDESCRIPTION: This snippet demonstrates how to make `StickyHeader` and `StickyFooter` components overlay the list content instead of offsetting it. This is achieved by wrapping the component's content in a container with `position: absolute` styling, useful for elements like floating buttons that shouldn't reserve space.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/headers-footers.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VirtuosoMessageListProps, VirtuosoMessageList, useVirtuosoMethods, VirtuosoMessageListLicense, VirtuosoMessageListMethods} from '@virtuoso.dev/message-list'\n\nconst StickyHeader: VirtuosoMessageListProps<number, null>['StickyHeader'] = () => {\n  return (\n    <div style={{ position: 'absolute', right: 0, top: 0, background: 'lightblue' }}>Header</div>\n  )\n}\n\nconst StickyFooter: VirtuosoMessageListProps<number, null>['StickyFooter'] = () => {\n  return (\n    <div style={{ position: 'absolute', right: 0, bottom: 0, background: 'lightblue' }}>Footer</div>\n  )\n}\n\nexport default function App() {\n\n  return (\n      <VirtuosoMessageListLicense licenseKey=\"\">\n        <VirtuosoMessageList\n          StickyHeader={StickyHeader}\n          StickyFooter={StickyFooter}\n          style={{ height: '100%' }}\n          initialData={Array.from({ length: 100 }, (_, index) => index)}\n        />\n      </VirtuosoMessageListLicense>\n  )\n}\n\n \n```\n\n----------------------------------------\n\nTITLE: Installing Falso Library for Generating Random Data\nDESCRIPTION: Command to install the @ngneat/falso package, which will be used to generate random avatars and message content for the chat simulation.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/01-intro.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ngneat/falso\n```\n\n----------------------------------------\n\nTITLE: Transforming Node Values with Operators in Gurx\nDESCRIPTION: Example showing how to transform values flowing through nodes using operators like map. This demonstrates connecting nodes with data transformations to build complex state management logic.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/packages/gurx/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// use this in the initialization function of mySignal$\nr.link(\n  r.pipe(\n    mySignal$,\n    map((x) => x + 1)\n  ),\n  myCell$\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing React Ref for Tracking First Message ID - TypeScript\nDESCRIPTION: Creates a React ref to hold the ID of the first message loaded, which serves as a cursor for loading older messages. This ref persists across component renders and starts as null to indicate no messages loaded initially.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/03-loading-older-messages.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst firstMessageId = React.useRef<number | null>(null)\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for MessageListContext with Loading State and Channel\nDESCRIPTION: Declares a TypeScript interface specifying the shape of the context prop passed to the VirtuosoMessageList component. It includes a boolean loadingNewer flag to indicate if older messages are loading and the channel instance to access chat data methods.\nSOURCE: https://github.com/petyosi/react-virtuoso/blob/master/apps/virtuoso.dev/docs/guides/virtuoso-message-list/tutorial/03-loading-older-messages.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MessageListContext {\n  loadingNewer: boolean\n  channel: ChatChannel\n}\n```"
  }
]