[
  {
    "owner": "ansys",
    "repo": "pyaedt",
    "content": "TITLE: Launching AEDT in Non-Graphical Mode with Python\nDESCRIPTION: This snippet demonstrates how to launch AEDT 2025 R1 in non-graphical mode from Python and initialize a new Circuit design. The code uses a context manager to ensure AEDT is automatically closed when execution completes or if an error occurs.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/intro.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Launch AEDT 2025 R1 in non-graphical mode\nimport ansys.aedt.core\nwith ansys.aedt.core.Desktop(specified_version=\"2025.1\", non_graphical=True, new_desktop_session=True, close_on_exit=True,\n             student_version=False):\n    circuit = ansys.aedt.core.Circuit()\n    ...\n    # Any error here is caught by AEDT.\n    ...\n# AEDT is automatically closed here.\n```\n\n----------------------------------------\n\nTITLE: Initializing AEDT Desktop Explicitly in Python\nDESCRIPTION: This snippet demonstrates how to explicitly initialize the Ansys Electronics Desktop (AEDT) using the Desktop class from PyAEDT. It shows how to launch the desktop with specific parameters and create a Circuit application instance.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Application.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import launch_desktop, Circuit\nd = launch_desktop(specified_version=\"2025.1\",\n                   non_graphical=False,\n                   new_desktop_session=True,\n                   close_on_exit=True,\n                   student_version=False):\n circuit = Circuit()\n ...\n # Any error here will be caught by Desktop.\n ...\n d.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Launching AEDT Implicitly with Error Management - PyAEDT - Python\nDESCRIPTION: This snippet demonstrates implicitly launching the latest installed AEDT version in graphical mode using the Circuit class as a context manager. It handles session resource management and error handling via the context manager. Dependency: ansys.aedt.core. 'specified_version' and 'non_graphical' parameters control AEDT configuration. The input is an AEDT version string; the output is a managed Circuit session.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    # Launch the latest installed version of AEDT in graphical mode\\n\\n    from ansys.aedt.core import Circuit\\n    with Circuit(specified_version=\\\"2022.2\\\",\\n                 non_graphical=False) as circuit:\\n        ...\\n        # Any error here will be caught by Desktop.\\n        ...\\n\\n    # Desktop is automatically released here.\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Rectangle in Maxwell 2D using Python\nDESCRIPTION: This snippet demonstrates how to create a rectangular object in a Maxwell 2D design. It initializes a Maxwell2d application and then uses the modeler.primivites.create_rectangle method to create a rectangle at a specified position with given dimensions and material properties.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitives2D.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell2d\napp = Maxwell2d(specified_version=\"2025.1\",\n                 non_graphical=False, new_desktop_session=True,\n                 close_on_exit=True, student_version=False)\n\n# This call returns the NexximComponents class\norigin = [0,0,0]\ndimensions = [10,5,20]\n#Material and name are not mandatory fields\nbox_object = app.modeler.primivites.create_rectangle([15, 20, 0], [5, 5], material=\"aluminum\")\n\n...\n```\n\n----------------------------------------\n\nTITLE: Conditionally Importing PyAEDT/ansys.aedt.core Based on AEDT Version in Python\nDESCRIPTION: Checks the retrieved AEDT `version`. If the version is later than '2023.1', it imports the newer `ansys.aedt.core` namespace and enables the gRPC API. Otherwise, it imports the legacy `pyaedt` namespace and disables gRPC. This handles compatibility across different AEDT/PyAEDT releases.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/src/ansys/aedt/core/workflows/installer/jupyter_template.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif version > \"2023.1\":\n        from ansys.aedt.core import *\n        import ansys.aedt.core\n        ansys.aedt.core.settings.use_grpc_api=True\nelse:\n        from pyaedt import *\n        import pyaedt\n        pyaedt.settings.use_grpc_api=False\n```\n\n----------------------------------------\n\nTITLE: Initializing AEDT Desktop Implicitly in Python\nDESCRIPTION: This code snippet shows how to implicitly initialize the Ansys Electronics Desktop (AEDT) using the Circuit class from PyAEDT. It demonstrates creating a Circuit application instance with specific initialization parameters, which automatically handles desktop initialization.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Application.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Circuit\ncircuit = Circuit(specified_version=\"2025.1\",\n                  non_graphical=False,\n                  new_desktop_session=True,\n                  close_on_exit=True,\n                  student_version=False):\n circuit = Circuit()\n ...\n # Any error here will be caught by Desktop.\n ...\n circuit.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Managing Variables in PyAEDT Python\nDESCRIPTION: This snippet demonstrates how to manage design and project variables within a PyAEDT project, using the Hfss tool. Variables prefixed with '$' denote project-wide scope, while others are design-specific. Users can also evaluate expressions via the variable manager object.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/variables.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nwith Hfss as hfss:\n     hfss[\"dim\"] = \"1mm\"   # design variable\n     hfss[\"$dim\"] = \"1mm\"  # project variable\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> hfss[\"$PrjVar1\"] = \"2*pi\"\n>>> hfss[\"$PrjVar2\"] = \"100Hz\"\n>>> hfss[\"$PrjVar3\"] = \"34 * $PrjVar1/$PrjVar2\"\n>>> hfss[\"$PrjVar3\"]\n2.13628300444106\n>>> hfss.evaluate_expression(hfss[\"$PrjVar3\"])\n2.13628300444106\nhfss.variable_manager[\"$PrjVar3\"].expression\n'34 * $PrjVar1/$PrjVar2'\n```\n\n----------------------------------------\n\nTITLE: Creating a Box and Changing Properties in AEDT HFSS\nDESCRIPTION: Code example showing how to create a box in HFSS, specifying origin, sizes, name, and material, then accessing faces and changing the color property to red.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/modeler.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.hfss import Hfss\nhfss = Hfss()\nbox = hfss.modeler.create_box(origin=[0, 0, 0],\n                              sizes=[10, \"dim\", 10],\n                              name=\"mybox\",\n                              material=\"aluminum\")\nprint(box.faces)\nbox.color = \"Red\"\n```\n\n----------------------------------------\n\nTITLE: EMIT Version Checking and Global Unit Management - PyAEDT - Python\nDESCRIPTION: This code initializes an EMIT project using the PyAEDT library, retrieves detailed version information, sets multiple global unit types (Power, Frequency, Length, Time), and fetches unit values. It leverages the Emit object, requires Ansys AEDT/PyAEDT installed, and optionally specifies version and session management. Key function calls are emit.version(), emit.set_units(), and emit.get_units(). The script finally closes the AEDT session with emit.release_desktop().\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/emit_modeler.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nfrom ansys.aedt.core import Emit\n\nemit = Emit(ansys.aedt.core.generate_unique_project_name(),\n            specified_version=\"2025.1\", non_graphical=False,\n            new_desktop_session=True, close_on_exit=True)\n\n# This call returns detailed version info for EMIT\nver = emit.version(detailed=True)\n\n# This call sets the global units for EMIT\nunit_types = [\"Power\", \"Frequency\", \"Length\", \"Time\"]\nunit_vals = [\"kW\", \"kHz\", \"meter\", \"ns\"]\nemit.set_units(unit_types, unit_vals)\n\n# This call gets all the global units for the EMIT design\nall_units = emit.get_units()\n\n# This call gets the global Frequency units for the EMIT design\nfreq_units = emit.get_units(\"Frequency\")\n\n# Close AEDT\nemit.release_desktop(close_projects=True, close_desktop=True)\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating 3D Layout Objects\nDESCRIPTION: Shows how to initialize HFSS 3D Layout with specific version settings, access the modeler class, create primitives, and work with object properties using getters and setters.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitives3DLayout.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss3dLayout\napp = Hfss3dLayout(specified_version=\"2025.1\",\n               non_graphical=False, new_desktop_session=True,\n               close_on_exit=True, student_version=False)\n\n# This call returns the Modeler3DLayout class\nmodeler = app.modeler\n\n# This call returns a Primitives3D object\nprimitives = modeler\n\n# This call returns an Object3d object\nmy_rect = primitives.create_rectangle([0,0,0],[10,10])\n\n# Getter and setter\nmy_rect.material_name\n\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing PostProcessor Class and Creating Field Plots in HFSS\nDESCRIPTION: This snippet demonstrates how to access the PostProcessor class, create field plots, and retrieve solution data in HFSS using PyAEDT. It also shows how to create standard reports and access their properties.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/post.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n         non_graphical=False, new_desktop_session=True,\n         close_on_exit=True, student_version=False)\n\n# This call returns the PostProcessor class\npost = app.post\n\n# This call returns a FieldPlot object\nplotf = post.create_fieldplot_volume(objects, quantity_name, setup_name, intrinsics)\n\n# This call returns a SolutionData object\nmy_data = post.get_solution_data(expressions=trace_names)\n\n# This call returns a new standard report object and creates one or multiple reports from it.\nstandard_report = post.reports_by_category.standard(\"db(S(1,1))\")\nreport_standard.create()\nsols = report_standard.get_solution_data()\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying HFSS 3D Layout Setup in PyAEDT\nDESCRIPTION: This snippet demonstrates how to create an HFSS 3D Layout setup and modify its properties after creation. It shows initializing the Hfss class, creating a default setup, changing a property (AdaptMultipleFreqs), and updating the setup to apply the changes.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplates3DLayout.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\nhfss = Hfss()\n# Any property of this setup can be found on this page.\nsetup = hfss.create_setup()\nsetup.props[\"AdaptMultipleFreqs\"] = True\nsetup.update()\n```\n\n----------------------------------------\n\nTITLE: Adding Mesh Operations in HFSS 3D Layout Through PyAEDT\nDESCRIPTION: Demonstrates adding mesh operations to nets and layers in HFSS 3D Layout via PyAEDT. It includes creating HFSS setups and assigning length and skin depth meshes, specifically on layers like 'PWR' with net 'GND' and 'LAY2' with net 'VCC'.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyedt import Hfss3dLayout\n\nh3d = Hfss3dLayout(\"myproject.aedt\")\nsetup = h3d.create_setup(\"HFSS\")\nmop1 = h3d.mesh.assign_length_mesh(\"HFSS\", layer_name=\"PWR\", net_name=\"GND\")\nmop2 = h3d.mesh.assign_skin_depth(\"HFSS\",  layer_name=\"LAY2\", net_name=\"VCC\")\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing AEDT Configurations in Python\nDESCRIPTION: This snippet demonstrates how to export configurations from an existing HFSS project and import them into a new project. It covers creating HFSS instances, exporting configurations, importing a 3D CAD model, and applying the exported configurations to the new project.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(project_name=\"original_project\", specified_version=\"2025.1\",\n         non_graphical=False, new_desktop_session=True,\n         close_on_exit=True, student_version=False)\n\nconf_file = self.aedtapp.configurations.export_config()\n\napp2 = Hfss(projec_name='newproject')\napp2.modeler.import_3d_cad(file_path)\nout = app2.configurations.import_config(conf_file)\napp2.configurations.results.global_import_success\n```\n\n----------------------------------------\n\nTITLE: Exporting HFSS Monostatic RCS Data\nDESCRIPTION: This snippet demonstrates how to export monostatic Radar Cross Section (RCS) data from an HFSS simulation using PyAEDT. It initializes an HFSS application, retrieves the RCS data, and then releases the desktop session.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/post.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\napp = Hfss()\n\nrcs_data = app.post.get_rcs_data()\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Accessing Mesh Operations in Maxwell 3D with PyAEDT\nDESCRIPTION: This example demonstrates how to initialize a Maxwell 3D application using PyAEDT, access the mesh object, and create a surface mesh operation. The code initializes the application, accesses the mesh property, and then assigns a surface mesh to a geometry object named 'MyBox'.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Mesh.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell3d\napp = Maxwell3d(specified_version=\"2025.1\",\n             non_graphical=False, new_desktop_session=True,\n             close_on_exit=True, student_version=False)\n# This call returns the Mesh class\nmy_mesh = app.mesh\n# This call executes a ``Mesh`` method and creates an object to control the mesh operation\nmesh_operation_object = my_mesh.assign_surface_mesh(\"MyBox\", 2)\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Category-Specific Reports in HFSS\nDESCRIPTION: Example of accessing category-specific reports in HFSS using the reports_by_category class. This code creates a 3D far field report for the realized gain total from the nominal adaptive setup.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/postprocessing.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nhfss = Hfss()\nhfss.analyze()\n# Create a 3D far field\nnew_report = hfss.post.reports_by_category.far_field(expressions=\"db(RealizedGainTotal)\",\n                                                 setup=hfss.nominal_adaptive)\n```\n\n----------------------------------------\n\nTITLE: Creating Field Plot Line in HFSS\nDESCRIPTION: This snippet demonstrates how to create a field plot line in HFSS using PyAEDT. It creates test points, a polyline, sets up the simulation, and then creates a field plot line for the magnitude of the electric field along the polyline.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/post.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\napp = Hfss(specified_version=\"2025.1\",\n           non_graphical=False,\n           new_desktop_session=False\n           )\ntest_points = [[\"0mm\", \"0mm\", \"0mm\"], [\"100mm\", \"20mm\", \"0mm\"],\n               [\"71mm\", \"71mm\", \"0mm\"], [\"0mm\", \"100mm\", \"0mm\"]]\np1 = app.modeler.create_polyline(test_points)\nsetup = app.create_setup()\n\nreport = app.post.create_fieldplot_line(quantity=\"Mag_E\", assignment=p1.name)\nreport.create()\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Creating and Editing Circuit Simulation Setups in PyAEDT (Python)\nDESCRIPTION: This Python snippet demonstrates how to create and customize a circuit simulation setup with PyAEDT's HFSS module. After importing the required class, a setup is instantiated, and a property ('AdaptMultipleFreqs') is modified via the props dictionary before calling update() to apply changes. Dependencies include the 'ansys.aedt.core' Python package, which must be installed, and a valid AEDT environment. Key parameters include the setup object's properties, which are customizable through the props attribute; users must ensure property keys are valid according to the referenced template documentation. The output is a modified simulation setup applied within the project instance.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplatesCircuit.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\nhfss = Hfss()\n# Any property of this setup can be found on this page.\nsetup = hfss.create_setup()\nsetup.props[\"AdaptMultipleFreqs\"] = True\nsetup.update()\n\n```\n\n----------------------------------------\n\nTITLE: Generating Matplotlib Reports with PyAEDT\nDESCRIPTION: Example of creating a report in HFSS and then plotting the results using Matplotlib. This code filters traces by name pattern, creates an HFSS report, retrieves solution data, and plots it in Matplotlib.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/postprocessing.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nhfss = Hfss()\nhfss.analyze()\n\ntraces_to_plot = hfss.get_traces_for_plot(second_element_filter=\"P1*\")\nreport = hfss.post.create_report(traces_to_plot)  # Creates a report in HFSS\nsolution = report.get_solution_data()\nplt = solution.plot(solution.expressions)  # Matplotlib axes object.\n```\n\n----------------------------------------\n\nTITLE: Creating Field Plots in HFSS with PyAEDT\nDESCRIPTION: Example of creating field plots within HFSS using PyAEDT. This code creates a cut-plane field plot showing the complex magnitude of the E-field at 5GHz with a 180-degree phase.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/postprocessing.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nhfss = Hfss()\nhfss.analyze()\n\ncutlist = [\"Global:XY\"]\nsetup_name = hfss.existing_analysis_sweeps[0]\nquantity_name = \"ComplexMag_E\"\nintrinsic = {\"Freq\": \"5GHz\", \"Phase\": \"180deg\"}\n# Create a field plot\nplot1 = hfss.post.create_fieldplot_cutplane(objlist=cutlist,\n                                      quantityName=quantity_name,\n                                      setup=setup_name,\n                                      intrinsics=intrinsic)\n```\n\n----------------------------------------\n\nTITLE: Managing Project and Design Variables in AEDT - PyAEDT - Python\nDESCRIPTION: This snippet demonstrates how to assign design and project variables in a HFSS design using PyAEDT. It shows direct assignment to the hfss object to create or update the variables. Dependency: ansys.aedt.core.HFSS. Inputs are variable names and values; the output is that these variables are set in the active AEDT design or project.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    from ansys.aedt.core.HFSS import HFSS\\n    with HFSS as hfss:\\n         hfss[\\\"dim\\\"] = \\\"1mm\\\"   # design variable\\n         hfss[\\\"$dim\\\"] = \\\"1mm\\\"  # project variable\\n\n```\n\n----------------------------------------\n\nTITLE: Managing Quantities with Units in Python\nDESCRIPTION: This snippet illustrates the usage of the Quantity class for managing quantities with units. It demonstrates arithmetic operations, unit conversion, and integration with HFSS setup properties.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Variables.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.generic.numbers import Quantity\na = Quantity(1, \"GHz\")\nb = a + 1\nc = a + \"1MHz\"\nd = a + b\na.unit = \"Hz\"\ne = a.to(\"MHz\")\nstr(a)\nfloat(a)\nhfss = ansys.aedt.core.Hfss()\nsetup = hfss.create_setup()\nsetup.props[\"Freq\"] = a\n```\n\n----------------------------------------\n\nTITLE: Creating Mag_E Field Report in Polyline using PyAEDT Standalone Mode\nDESCRIPTION: This snippet demonstrates how to create a 'Mag_E' field report along a polyline using PyAEDT's standalone mode. It initializes an HFSS application, creates a polyline, sets up the simulation, and generates the report using the Fields class.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/report.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.visualization.report.field import Fields\n\napp = Hfss(specified_version=\"2025.1\",\n           non_graphical=False,\n           new_desktop_session=False\n           )\ntest_points = [[\"0mm\", \"0mm\", \"0mm\"], [\"100mm\", \"20mm\", \"0mm\"],\n               [\"71mm\", \"71mm\", \"0mm\"], [\"0mm\", \"100mm\", \"0mm\"]]\np1 = app.modeler.create_polyline(test_points)\nsetup = app.create_setup()\n\nreport = Fields(app=app.post, report_category=\"Fields\",\n                setup_name=setup.name + \" : LastAdaptive\",\n                expressions=\"Mag_E\")\nreport.polyline = p1.name\nreport.create()\n\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Creating Setup Template with PyAEDT in Python\nDESCRIPTION: Demonstrates initializing a Q3D setup in PyAEDT, using the 'create_setup' function to set up parameters like 'AC__MaxPasses'. The example shows how to import the Q3d class, instantiate it, and create a setup with specified parameters. The code requires the 'ansys.aedt.core' module and the PyAEDT library, and outputs a setup object with customizable properties.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplatesQ3D.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Q3d\n\napp = Q3d()\n# Any property of this setup can be found on this page.\nsetup = app.create_setup(AC__MaxPasses=6)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Distributed Filter Design in Python\nDESCRIPTION: This code snippet demonstrates how to create a distributed filter design using the FilterSolutions module. It shows the initialization of a DistributedDesign instance, setting the filter class to band pass, filter type to elliptic, and configuring the load resistance.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/FilterSolutions.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nimport ansys.aedt.core.filtersolutions\nfrom ansys.aedt.core.filtersolutions_core import FilterClass, FilterType\n\n# This call returns an instance of the DistributedDesign class\ndesign = ansys.aedt.core.filtersolutions.DistributedDesign(version= \"2025.2\")\n# This property in the Attributes class specifies the filter class as band pass\ndesign.attributes.filter_class = FilterClass.BAND_PASS\n# This property in the Attributes class specifies the filter type as Elliptic\ndesign.attributes.filter_type = FilterType.ELLIPTIC   \n# This property in the DistributedTopology class sets the load resistance to 50 ohms.\ndesign.topology.load_resistance = \"50\"\n...\n```\n\n----------------------------------------\n\nTITLE: Handling Quantities with Units in PyAEDT Python\nDESCRIPTION: This snippet shows how to manage and convert quantities with units using the Quantity class in PyAEDT. It includes operations such as addition and unit conversion, demonstrating the manipulation of frequency units.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/variables.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.generic.numbers import Quantity\na = Quantity(1, \"GHz\")\nb = a + 1\nc = a + \"1MHz\"\nd = a + b\na.unit = \"Hz\"\ne = a.to(\"MHz\")\nstr(a)\nfloat(a)\n```\n\n----------------------------------------\n\nTITLE: Exporting Project Configuration File Using Icepak - Python\nDESCRIPTION: This snippet demonstrates initializing an Icepak application via PyAEDT, exporting the entire 3D project model to a .step file, generating and exporting the comprehensive project configuration as JSON, and finalizing by releasing the desktop session. It requires the PyAEDT library with the ansys.aedt.core.Icepak module. The filename and file paths are configurable, and object-specific lists for export can be set as needed. The code outputs a JSON config file representing the project\\'s current state; correct working directories and dependencies are prerequisites.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/project.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Icepak\nipk = Icepak()\nfilename = \"test\"\nipk.export_3d_model(file_name=filename,\n                    file_path=ipk.working_directory,\n                    file_format=\".step\",\n                    object_list=[],\n                    removed_objects=[])\nconf_file = ipk.configurations.export_config()\nipk.release_desktop()\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring an Icepak Setup in PyAEDT\nDESCRIPTION: This example demonstrates how to import the Icepak module from PyAEDT, initialize an application instance, and create a setup with customized parameters. The setup's maximum iterations property is set to 5, and the code indicates that any property listed in the documentation can be modified.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplatesIcepak.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Icepak\n\napp = Icepak()\n# Any property of this setup can be found on this page.\nsetup = app.create_setup(MaxIterations=5)\n```\n\n----------------------------------------\n\nTITLE: Creating AEDT Reports with PyAEDT in HFSS\nDESCRIPTION: Basic example of creating an S-parameter report in AEDT using PyAEDT's HFSS interface. This code initializes an HFSS session, runs the analysis, and creates a report showing S11 and S12 parameters.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/postprocessing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nhfss = Hfss()\nhfss.analyze()\nhfss.post.create_report([\"db(S11)\", \"db(S12)\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing HFSS and Accessing Optimetrics Classes in Python\nDESCRIPTION: This snippet demonstrates how to initialize an HFSS application instance and access the parametrics and optimizations classes. It also shows how to add an optimization setup.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Optimetrics.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n         non_graphical=False, new_desktop_session=True,\n         close_on_exit=True, student_version=False)\n\n# returns the ParametericsSetups Class\napp.parametrics\n\n# returns the OptimizationSetups Class\napp.optimizations\n\n# adds an optimization and returns Setup class with all settings and methods\nsweep3 = hfss.opti_optimization.add_optimization(calculation=\"dB(S(1,1))\", calculation_value=\"2.5GHz\")\n\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Material Management with PyAEDT (Python)\nDESCRIPTION: This Python snippet demonstrates how to initialize the PyAEDT Hfss application, access the Materials class, select a specific material by name, and retrieve a property (conductivity) from it. Dependencies include the ansys.aedt.core library, and the code assumes that HFSS is available and the specified version is installed. The key parameters are the Hfss constructor arguments (specified_version, non_graphical, new_desktop_session, close_on_exit, student_version). Inputs are the application version and optional session parameters, and outputs are object instances giving access to material definitions. Users should run this in an environment with Ansys Electronics Desktop and PyAEDT installed. Some variables and calls are left illustrative (...), so real usage may require additional handling.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/MaterialManagement.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n             non_graphical=False, new_desktop_session=True,\n             close_on_exit=True, student_version=False)\n\n# This call returns the Materials class\nmy_materials = app.materials\n# This call returns the Material class\ncopper = my_materials[\"copper\"]\n# This property is from the MatProperty class\ncopper.conductivity\n...\n```\n\n----------------------------------------\n\nTITLE: Working with TwinBuilder Components\nDESCRIPTION: Example showing how to initialize TwinBuilder, access its modeler and schematic objects, create a resistor component, and manipulate component properties.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/PrimitivesCircuit.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import TwinBuilder\napp = TwinBuilder(specified_version=\"2025.1\",\n               non_graphical=False, new_desktop_session=True,\n               close_on_exit=True, student_version=False)\n\n# This call returns the Modeler class\nmodeler = app.modeler\n\n# This call returns a Schematic object\nschematic = modeler.schematic\n\n# This call returns an Object3d object\nmy_res = schematic.create_resistor(\"R1\", 50)\n\n# Getter and setter\nmy_res.location\nmy_res.parameters[\"R\"]=100\n\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing HFSS and Accessing Modeler Objects in PyAEDT\nDESCRIPTION: This code demonstrates how to initialize an HFSS application through PyAEDT, access the modeler interface, create a box primitive, and interact with its hierarchical elements including faces, edges, and vertices. It shows the relationship between different object types in the modeler.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitive_Objects.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n               non_graphical=False, new_desktop_session=True,\n               close_on_exit=True, student_version=False)\n\n# This call return the Modeler3D class\nmodeler = app.modeler\n\n# This call returns a Primitives3D object\nprimitives = modeler\n\n# This call return an Object3d object\nmy_box = primitives.create_box([0,0,0],[10,10,10])\nmy_box = primitives.objects[my_box.id]\n\n# This call return a FacePrimitive object list\nmy_box.faces\n# This call returns an EdgePrimitive object list\nmy_box.edges\nmy_box.faces[0].edges\n\n# This call returns a VertexPrimitive object list\nmy_box.vertices\nmy_box.faces[0].vertices\nmy_box.faces[0].edges[0].vertices\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Components in HFSS using Python\nDESCRIPTION: This Python script demonstrates how to create a 3D component array in HFSS using a JSON configuration file. It requires the 'ansys.aedt.core' and 'ansys.aedt.core.generic.DataHandlers' packages to function. The script converts a JSON representation into a dictionary, modifies certain components, and then adds them to the HFSS project. Key parameters include 'dict_in' which holds the configuration, and 'hfss' which is the HFSS interface object. Outputs include the configured 3D component array in HFSS. The script assumes availability of the specified JSON file and a running Ansys HFSS session.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/array.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.generic.DataHandlers import json_to_dict\nhfss = Hfss()\ndict_in = json_to_dict(\"array_simple.json\")\ndict_in[\"Circ_Patch_5GHz1\"] = \"Circ_Patch_5GHz_232.a3dcomp\"\ndict_in[\"cells\"][(3, 3)] = {\"name\": \"Circ_Patch_5GHz1\"}\ncomponent_array = hfss.add_3d_component_array_from_json(dict_in)\nhfss.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Linking HFSS Designs with EMIT for Coupling and Antenna Analysis - PyAEDT - Python\nDESCRIPTION: This code links an HFSS project with EMIT, managing temporary files, copying example data, and establishing couplings between existing designs while managing the file system. It requires PyAEDT/Ansys AEDT installed, and relies on internal file system classes for project manipulation. The script iterates through available links, deletes existing, adds new, extracts antenna nodes, and prints their information, concluding with proper AEDT shutdown. Ensure the 'Cell Phone RFI Desense' example exists before running.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/emit_modeler.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport ansys.aedt.core\nfrom ansys.aedt.core import Emit\nfrom ansys.aedt.core.internal.filesystem import Scratch\n\nscratch_path = ansys.aedt.core.generate_unique_folder_name()\ntemp_folder = os.path.join(scratch_path, (\"EmitHFSSExample\"))\nif not os.path.exists(temp_folder):\n    os.mkdir(temp_folder)\n\n# Launch AEDT\naedtapp = ansys.aedt.core.launch_desktop(specified_version=\"2025.1\", non_graphical=False,\n                                         new_desktop_session=True, close_on_exit=True)\n\n# Verify the ``Cell Phone RFT Defense`` example exists\nexample_name = \"Cell Phone RFI Desense\"\nexample_aedt = example_name + \".aedt\"\nexample_results = example_name + \".aedtresults\"\nexample_lock = example_aedt + \".lock\"\nexample_pdf_file = example_name + \" Example.pdf\"\n\nexample_dir = os.path.join(aedtapp.install_path, \"Examples\\\\EMIT\")\nexample_project = os.path.join(example_dir, example_aedt)\nexample_results_folder = os.path.join(example_dir, example_results)\nexample_pdf = os.path.join(example_dir, example_pdf_file)\n\n# If the ``Cell Phone RFT Defense`` example is not\n# in the installation directory, exit from this example.\nif not os.path.exists(example_project):\n    exit()\n\n# Copy the project to a temp directory\nmy_project = os.path.join(temp_folder, example_aedt)\nmy_results_folder = os.path.join(temp_folder, example_results)\nmy_project_lock = os.path.join(temp_folder, example_lock)\nmy_project_pdf = os.path.join(temp_folder, example_pdf_file)\n\nif os.path.exists(my_project):\n    os.remove(my_project)\n\nif os.path.exists(my_project_lock):\n    os.remove(my_project_lock)\n\nwith Scratch(scratch_path) as local_scratch:\n    local_scratch.copyfile(example_project, my_project)\n    local_scratch.copyfolder(example_results_folder, my_results_folder)\n    if os.path.exists(example_pdf):\n        local_scratch.copyfile(example_pdf, my_project_pdf)\n\nemit = Emit(my_project)\n\n# Remove all existing links\nfor link in emit.couplings.coupling_names:\n    emit.couplings.delete_link(link)\n\n# Add the HFSS design as a coupling in EMIT\nfor link in emit.couplings.linkable_design_names:\n    emit.couplings.add_link(link)\n\n# Get all the antennas in the EMIT design\nantennas = emit.couplings.antenna_nodes\nfor ant in antennas:\n    print(ant)\n\n# Close AEDT\nemit.release_desktop(close_projects=True, close_desktop=True)\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Materials using PyAEDT in Python\nDESCRIPTION: This snippet exports material data from a Maxwell 3D project to a JSON file using the PyAEDT API in Python. It imports the Maxwell3d class, instantiates it, and calls the materials interface to write the configuration to a user-specified path (\\\"materials.json\\\"). After exporting, it calls release_desktop() to properly close the instance. Dependencies include the ansys.aedt.core library; the key parameter is the target JSON filename. Input is a running Maxwell 3D context, and output is a JSON file containing material definitions.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/materials.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell3d\\nmaxwell = Maxwell3d()\\nmaxwell.materials.export_materials_to_file(\\\"materials.json\\\")\\nmaxwell.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Exporting HFSS Antenna Data\nDESCRIPTION: This code snippet shows how to export antenna data from an HFSS simulation using PyAEDT. It initializes an HFSS application, retrieves the antenna data, and then releases the desktop session.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/post.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\napp = Hfss()\n\nantenna_data = app.post.get_antenna_data()\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Creating Cable Harness in HFSS with Python\nDESCRIPTION: This example demonstrates how to create a cable harness in HFSS using the Cable Modeling module. It shows how to configure harness properties including orientation, twist angle, and which cable terminations to include in the harness.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/CableModeling.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.generic.DataHandlers import json_to_dict\nfrom ansys.aedt.core.modules.cable_modeling import Cable\n\nhfss = Hfss(projectname=project_path, specified_version=\"2025.1\",\n             non_graphical=False, new_desktop_session=True,\n             close_on_exit=True, student_version=False)\n# This call returns a dictionary out of the JSON file\ncable_props = json_to_dict(json_path)\n# This example shows how to manually change from script the cable harness properties\ncable_props[\"Add_Cable\"] = \"False\"\ncable_props[\"Update_Cable\"] = \"False\"\ncable_props[\"Add_CablesToBundle\"] = \"False\"\ncable_props[\"Remove_Cable\"] = \"False\"\ncable_props[\"Add_Source\"] = \"False\"\ncable_props[\"Update_Source\"] = \"False\"\ncable_props[\"Remove_Source\"] = \"False\"\ncable_props[\"Add_CableHarness\"] = \"True\"\ncable_props[\"CableHarness_prop\"][\"Name\"] = \"cable_harness_test\"\ncable_props[\"CableHarness_prop\"][\"Bundle\"] = \"New_updated_name_cable_bundle_insulation\"\ncable_props[\"CableHarness_prop\"][\"TwistAngleAlongRoute\"] = \"20deg\"\ncable_props[\"CableHarness_prop\"][\"Polyline\"] = \"Polyline1\"\ncable_props[\"CableHarness_prop\"][\"AutoOrient\"] = \"False\"\ncable_props[\"CableHarness_prop\"][\"XAxis\"] = \"Undefined\"\ncable_props[\"CableHarness_prop\"][\"XAxisOrigin\"] = [\"0mm\", \"0mm\", \"0mm\"]\ncable_props[\"CableHarness_prop\"][\"XAxisEnd\"] = [\"0mm\", \"0mm\", \"0mm\"]\ncable_props[\"CableHarness_prop\"][\"ReverseYAxisDirection\"] = \"True\"\ncable_props[\"CableHarness_prop\"][\"CableTerminationsToInclude\"][0][\"CableName\"] = \"straight_wire_cable\"\ncable_props[\"CableHarness_prop\"][\"CableTerminationsToInclude\"][1][\"CableName\"] = \"straight_wire_cable1\"\ncable_props[\"CableHarness_prop\"][\"CableTerminationsToInclude\"][2][\"CableName\"] = \"straight_wire_cable2\"\n# This call returns the Cable class\ncable = Cable(hfss, cable_props)\n# This call creates the cable harness\ncable.create_cable_harness()\n```\n\n----------------------------------------\n\nTITLE: Initializing TwinBuilder and Accessing the Modeler\nDESCRIPTION: Example showing how to initialize a TwinBuilder application and access its modeler object, which provides methods for editing the design.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/PrimitivesCircuit.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import TwinBuilder\napp = TwinBuilder(specified_version=\"2025.1\",\n               non_graphical=False, new_desktop_session=True,\n               close_on_exit=True, student_version=False)\n\n# This call returns the Modeler class\nmodeler = app.modeler\n\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing the HFSS 3D Layout Modeler\nDESCRIPTION: Demonstrates how to import and initialize the HFSS 3D Layout module and access the modeler object, which provides methods for editing the design model.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitives3DLayout.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss3dLayout\nhfss = Hfss3dLayout()\nmy_modeler = hfss.modeler\n\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Circuit Components with the Modeler\nDESCRIPTION: Example showing how to initialize a Circuit application, access its modeler and schematic, and create a resistor component with specified parameters.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/PrimitivesCircuit.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Circuit\napp = Circuit(specified_version=\"2025.1\",\n               non_graphical=False, new_desktop_session=True,\n               close_on_exit=True, student_version=False)\n\n# This call returns a Schematic object\nschematic = modeler.schematic\n\n# This call returns an Object3d object\nmy_res = schematic.create_resistor(\"R1\", 50)\n```\n\n----------------------------------------\n\nTITLE: Creating and Analyzing a Custom EMIT Project with Radios and Antennas - PyAEDT - Python\nDESCRIPTION: This snippet programmatically builds a new EMIT project, creates radio and antenna components, connects them, configures receiver/transmitter bands, and performs an EMI analysis. It demonstrates advanced use of EMIT via PyAEDT, including the use of enums (TxRxMode, ResultType) for result domains, and prints worst-case interference in dB. Dependencies are PyAEDT, a supported AEDT version (e.g., 2025.1), and proper environment setup. Parameters such as radio names and interaction domains are customizable.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/emit_modeler.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nfrom ansys.aedt.core import Emit\nfrom ansys.aedt.core.emit_core.emit_constants import TxRxMode, ResultType\n\nemit = Emit(ansys.aedt.core.generate_unique_project_name(),\n            specified_version=\"2025.1\", non_graphical=False,\n            new_desktop_session=True, close_on_exit=True)\n\n# Create a radio and connect an antenna to it\nrad1 = emit.modeler.components.create_component(\"New Radio\")\nant1 = emit.modeler.components.create_component(\"Antenna\")\nif rad1 and ant1:\n    ant1.move_and_connect_to(rad1)\n\n# Quickly create 2 more radios with antennas automatically\n# connected to them\nrad2, ant2 = emit.modeler.components.create_radio_antenna(\"GPS Receiver\")\nrad3, ant3 = emit.modeler.components.create_radio_antenna(\"Bluetooth Low Energy (LE)\", \"Bluetooth\")\n\n# Create a new ``Revision``\nrev = emit.results.analyze()\n\n# Get the receive bands enabled for the GPS Rx\nrx_bands = rev.get_band_names(rad2.name, TxRxMode.RX)\n\n# Get the transmit bands enabled for the Bluetooth radio\ntx_bands = rev.get_band_names(rad3.name, TxRxMode.TX)\n\n# Configure the interaction domain that will be analyzed\ndomain = emit.results.interaction_domain()\ndomain.set_receiver(rad2.name, rx_bands[0], -1)\ndomain.set_interferer(rad3.name,tx_bands[0])\n\n# Analzye the domain and get the worst case interference\ninteraction = rev.run(domain)\nworst = interaction.get_worst_instance(ResultType.EMI)\nemi = worst.get_value(ResultType.EMI)\nprint(f\"Worst case interference is: {emi} dB\")\n\n# Close AEDT\nemit.release_desktop(close_projects=True, close_desktop=True)\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote AEDT Application from Windows Client - PyAEDT - Python\nDESCRIPTION: This snippet illustrates how to connect to a remote AEDT session running on a server using the create_session function and creating an Hfss instance bound to a remote machine for scripted interaction. Dependencies: ansys.aedt.core.common_rpc and PyAEDT's Hfss class. Required parameters include server name and port. Input includes connection parameters; output is a client object allowing code execution on the remote AEDT instance.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    from ansys.aedt.core.common_rpc import create_session\\n    cl1 = create_session(\\\"server_name\\\")\\n    cl1.aedt(port=50000, non_graphical=False)\\n    hfss = Hfss(machine=\\\"server_name\\\", port=50000)\\n    # your code here\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Cable Bundle in HFSS with Python\nDESCRIPTION: This example demonstrates how to create a cable bundle in HFSS using the Cable Modeling module. It shows initializing the HFSS session, loading cable properties from a JSON file, modifying those properties, and creating the cable bundle.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/CableModeling.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.generic.DataHandlers import json_to_dict\nfrom ansys.aedt.core.modules.cable_modeling import Cable\n\nhfss = Hfss(projectname=project_path, specified_version=\"2025.1\",\n             non_graphical=False, new_desktop_session=True,\n             close_on_exit=True, student_version=False)\n# This call returns a dictionary out of the JSON file\ncable_props = json_to_dict(json_path)\n# This example shows how to manually change from script the cable properties\ncable_props[\"Add_Cable\"] = \"True\"\ncable_props[\"Cable_prop\"][\"CableType\"] = \"bundle\"\ncable_props[\"Cable_prop\"][\"IsJacketTypeInsulation\"] = \"True\"\ncable_props[\"CableManager\"][\"Definitions\"][\"CableBundle\"][\"BundleParams\"][\"InsulationJacketParams\"][\n            \"InsThickness\"\n        ] = \"3.66mm\"\ncable_props[\"CableManager\"][\"Definitions\"][\"CableBundle\"][\"BundleParams\"][\"InsulationJacketParams\"][\n            \"JacketMaterial\"\n        ] = \"pec\"\ncable_props[\"CableManager\"][\"Definitions\"][\"CableBundle\"][\"BundleParams\"][\"InsulationJacketParams\"][\n            \"InnerDiameter\"\n        ] = \"2.88mm\"\ncable_props[\"CableManager\"][\"Definitions\"][\"CableBundle\"][\"BundleAttribs\"][\"Name\"] = \"Bundle_Cable_Insulation\"\n# This call returns the Cable class\ncable = Cable(hfss, cable_props)\n# This call creates the cable bundle\ncable.create_cable()\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties in PyAEDT\nDESCRIPTION: This code shows how to access and modify properties of 3D objects created in the AEDT modeler through PyAEDT. It demonstrates getting and setting material properties for a box object, as well as accessing geometric properties like face centers.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitive_Objects.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n               non_graphical=False, new_desktop_session=True,\n               close_on_exit=True, student_version=False)\n\n# This call returns the Modeler3D class\nmodeler = app.modeler\n\n# This call returns a Primitives3D object\nprimitives = modeler\n\n# This call returns an Object3d object\nmy_box = primitives.create_box([0,0,0],[10,10,10])\n\n# Getter and setter\nmy_box.material_name\nmy_box.material_name = \"copper\"\n\nmy_box.faces[0].center\n```\n\n----------------------------------------\n\nTITLE: Importing Project Configuration from a JSON File - Python\nDESCRIPTION: This Python snippet illustrates restoring or applying a project configuration within a PyAEDT application instance (app) by importing a 3D CAD model and loading a previously exported configuration file in JSON format. It depends on an existing initialized \\\"app\\\" object, a valid JSON configuration file (conf_file), and a proper file_path. The result is that the project environment is populated with settings and object states described in the JSON, enabling repeatable or shareable project setups.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/project.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.modeler.import_3d_cad(file_path)\nout = app.configurations.import_config(conf_file)\n\n```\n\n----------------------------------------\n\nTITLE: Launching PyAEDT Remote Server on CPython - PyAEDT - Python\nDESCRIPTION: This snippet demonstrates how to launch a PyAEDT remote server on a CPython environment by importing and executing pyaedt_service_manager. This is essential for remote automation or distributed execution scenarios. Dependency: ansys.aedt.core.common_rpc. It requires a compatible CPython environment and network access. No input parameters; the output is a running PyAEDT server awaiting remote calls.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    # Launch PyAEDT remote server on CPython\\n\\n    from ansys.aedt.core.common_rpc import pyaedt_service_manager\\n    pyaedt_service_manager()\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Parametrics in PyAEDT with Optimetrics Python\nDESCRIPTION: This snippet illustrates how to set up parametric analyses using the Optimetrics tool in PyAEDT. The example shows adding a parametric study for a resistance load varying from 0.1 to 1 with a step of 0.1.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/variables.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell3d\nm3d = Maxwell3d()\nm3d.parametrics.add(\"Rload\", 0.1, 1, 0.1)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Creating Setup Objects in PyAEDT\nDESCRIPTION: Demonstrates how to initialize an HFSS application and access or create setup objects. The example shows initializing HFSS with specific version and settings, accessing an existing setup from the setups list, and creating a new setup object.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Setup.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n       non_graphical=False, new_desktop_session=True,\n       close_on_exit=True, student_version=False)\n\n# This call returns the Setup class\nmy_setup = app.setups[0]\n\n\n# This call returns a Setup object\nsetup = app.create_setup(\"MySetup\")\n\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Materials using PyAEDT in Python\nDESCRIPTION: This snippet demonstrates importing materials into a Maxwell 3D project from a JSON file using the PyAEDT API in Python. It initializes a Maxwell3d instance, then imports materials from a specified JSON (\\\"material_example.json\\\") using the materials interface. The process concludes by releasing the Maxwell desktop instance. It requires ansys.aedt.core, and expects the input JSON file to be structured per PyAEDT material conventions. Output is an updated Maxwell 3D project containing the new/updated materials.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/materials.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell3d\\nmaxwell = Maxwell3d()\\nmaxwell.materials.import_materials_from_file(\\\"material_example.json\\\")\\nmaxwell.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Modifying HFSS Setup Properties Using Python\nDESCRIPTION: Example demonstrating how to create an HFSS setup and modify its properties using the Ansys AEDT Python API. The code shows how to create a setup instance and update specific properties like AdaptMultipleFreqs.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplatesTwinBuilder.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\nhfss = Hfss()\n# Any property of this setup can be found on this page.\nsetup = hfss.create_setup()\nsetup.props[\"AdaptMultipleFreqs\"] = True\nsetup.update()\n```\n\n----------------------------------------\n\nTITLE: Accessing, Modifying, and Creating Maxwell 3D Setups with PyAEDT (Python)\nDESCRIPTION: This snippet demonstrates initializing a Maxwell3d object from the `ansys.aedt.core` library, accessing the list of existing analysis setups via the `setups` attribute, retrieving the first setup, modifying its 'MaximumPasses' property using the 'props' dictionary, and creating a new setup named 'New_Setup' using the `create_setup` method. It assumes an active Maxwell 3D design context is available or created by the `Maxwell3d()` constructor.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/setup.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell3d\nm3d = Maxwell3d()\nall_setups = m3d.setups\nmy_setup = all_setups[0]\n# All properties are in props dictionary.\nmy_setup.props['MaximumPasses'] = 10\nnew_setup = m3d.create_setup(\"New_Setup\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Lumped Filter Design in Python\nDESCRIPTION: This code snippet demonstrates how to create a lumped filter design using the FilterSolutions module. It shows the initialization of a LumpedDesign instance, setting the filter class to band pass, filter type to elliptic, and enabling the trap topology.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/FilterSolutions.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nimport ansys.aedt.core.filtersolutions\nfrom ansys.aedt.core.filtersolutions_core import FilterClass, FilterType\n\n# This call returns an instance of the LumpedDesign class\ndesign = ansys.aedt.core.filtersolutions.LumpedDesign(version= \"2025.1\")\n# This property in the Attributes class specifies the filter class as band pass\ndesign.attributes.filter_class = FilterClass.BAND_PASS\n# This property in the Attributes class specifies the filter type as elliptic\ndesign.attributes.filter_type = FilterType.ELLIPTIC   \n# This property in the LumpedTopology class enables the trap topology by setting it to true\ndesign.topology.trap_topology = True\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Primitives with AEDT Icepak in Python\nDESCRIPTION: This Python snippet demonstrates how to use the Ansys AEDT Icepak module to import primitive shapes from a JSON configuration file. It makes use of the \\'import_primitives_from_file\\' method of an Icepak instance to load the data, which is then processed to create shapes within the AEDT environment. This requires the JSON configuration file and a valid AEDT setup.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/primitives.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Icepak\nipk = Icepak()\nipk.modeler.import_primitives_from_file(\"primitive_example.json\")\nipk.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Running the AEDT Extension Template Programmatically in Python\nDESCRIPTION: This Python script demonstrates how to run the AEDT extension template programmatically. It imports necessary modules from `ansys.aedt.core` and the specific template's `main` function. It initializes an HFSS session, sets environment variables (`PYAEDT_SCRIPT_PORT`, `PYAEDT_SCRIPT_VERSION`) using details from the active HFSS session to establish a connection with the running AEDT desktop, and then calls the extension's `main` function with a dictionary of parameters (origin_x, radius, is_test) to execute its logic.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_extensions_doc/templates/getting_started.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nimport os\n\nfrom ansys.aedt.core.workflows.templates.template_get_started import main\n\nhfss = ansys.aedt.core.Hfss()\n\n# Specify the AEDT session to connect\nos.environ[\"PYAEDT_SCRIPT_PORT\"] = str(hfss.desktop_class.port)\nos.environ[\"PYAEDT_SCRIPT_VERSION\"] = hfss.desktop_class.aedt_version_id\n\nmain({\"origin_x\": 2, \"radius\": 6, \"is_test\": True})\n```\n\n----------------------------------------\n\nTITLE: Instantiating AEDT 3D Modeler and Navigating Primitives – Python\nDESCRIPTION: Demonstrates how to initialize a 3D Modeler interface with Ansys AEDT's HFSS module, retrieve modeler and primitives objects, and access faces, edges, and vertices from a geometric box primitive. Dependencies include the ansys.aedt.core Python package and an appropriate licensed AEDT installation. Key parameters involve the HFSS instantiation options such as specified_version and runtime session handling; create_box requires box position and dimension lists. Outputs are various geometric object handles and property lists (faces, edges, vertices). Intended for users automating or scripting AEDT 3D geometry operations. Limitations: Assumes local AEDT installation and valid license.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitives3D.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n             non_graphical=False, new_desktop_session=True,\n             close_on_exit=True, student_version=False)\n\n# This call return the Modeler3D class\nmodeler = app.modeler\n\n# This call returns a Primitives3D object\nprimitives = modeler\n\n# This call return an Object3d object\nmy_box = primitives.create_box([0,0,0],[10,10,10])\nmy_box = primitives.objects[my_box.id]\n\n# This call return a FacePrimitive object list\nmy_box.faces\n# This call returns an EdgePrimitive object list\nmy_box.edges\nmy_box.faces[0].edges\n\n# This call returns a VertexPrimitive object list\nmy_box.vertices\nmy_box.faces[0].vertices\nmy_box.faces[0].edges[0].vertices\n\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Clock Source in HFSS with Python\nDESCRIPTION: This example demonstrates how to create a clock source in HFSS using the Cable Modeling module. It shows how to load properties from a JSON file, modify the properties to define a clock signal with specific timing parameters, and create the source.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/CableModeling.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.generic.DataHandlers import json_to_dict\nfrom ansys.aedt.core.modules.cable_modeling import Cable\n\nhfss = Hfss(projectname=project_path, specified_version=\"2025.1\",\n             non_graphical=False, new_desktop_session=True,\n             close_on_exit=True, student_version=False)\n# This call returns a dictionary out of the JSON file\ncable_props = json_to_dict(json_path)\n# This example shows how to manually change from script the clock source properties\ncable_props[\"Add_Cable\"] = \"False\"\ncable_props[\"Update_Cable\"] = \"False\"\ncable_props[\"Add_CablesToBundle\"] = \"False\"\ncable_props[\"Remove_Cable\"] = \"False\"\ncable_props[\"Add_Source\"] = \"True\"\ncable_props[\"Source_prop\"][\"AddClockSource\"] = \"True\"\ncable_props[\"CableManager\"][\"TDSources\"][\"ClockSourceDef\"][\"ClockSignalParams\"][\"Period\"] = \"40us\"\ncable_props[\"CableManager\"][\"TDSources\"][\"ClockSourceDef\"][\"ClockSignalParams\"][\"LowPulseVal\"] = \"0.1V\"\ncable_props[\"CableManager\"][\"TDSources\"][\"ClockSourceDef\"][\"ClockSignalParams\"][\"HighPulseVal\"] = \"2V\"\ncable_props[\"CableManager\"][\"TDSources\"][\"ClockSourceDef\"][\"ClockSignalParams\"][\"Risetime\"] = \"5us\"\ncable_props[\"CableManager\"][\"TDSources\"][\"ClockSourceDef\"][\"ClockSignalParams\"][\"Falltime\"] = \"10us\"\ncable_props[\"CableManager\"][\"TDSources\"][\"ClockSourceDef\"][\"ClockSignalParams\"][\"PulseWidth\"] = \"23us\"\ncable_props[\"CableManager\"][\"TDSources\"][\"ClockSourceDef\"][\"TDSourceAttribs\"][\"Name\"] = \"clock_test_1\"\n# This call returns the Cable class\ncable = Cable(hfss, cable_props)\n# This call creates the clock source\ncable.create_clock_source()\n```\n\n----------------------------------------\n\nTITLE: Manipulating Circuit Components and Their Properties\nDESCRIPTION: Example demonstrating how to initialize a Circuit, access its modeler, create a resistor component, and get/set component properties like location and resistance value.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/PrimitivesCircuit.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Circuit\napp = Circuit(specified_version=\"2025.1\",\n               non_graphical=False, new_desktop_session=True,\n               close_on_exit=True, student_version=False)\n\n# This call returns the Modeler class\nmodeler = app.modeler\n\n# This call returns a Schematic object\nschematic = modeler.schematic\n\n# This call returns an Object3d object\nmy_res = schematic.create_resistor(\"R1\", 50)\n\n# Getter and setter\nmy_res.location\nmy_res.parameters[\"R\"]=100\n\n...\n```\n\n----------------------------------------\n\nTITLE: Performing Boolean Operations on Objects in AEDT\nDESCRIPTION: Code example demonstrating boolean operations like unite and subtract between two objects in the AEDT modeler.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/modeler.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbox = hfss.modeler[\"mybox2\"]\ncyl = hfss.modeler[\"mycyl\"]\nbox.unite(cyl)\nbox.subract(cyl)\n```\n\n----------------------------------------\n\nTITLE: Creating Mag_E Field Report in Polyline using PyAEDT Application Object\nDESCRIPTION: This snippet shows how to create a 'Mag_E' field report along a polyline using the PyAEDT application object directly. It initializes an HFSS application, creates a polyline, sets up the simulation, and generates the report using the application's post-processing methods.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/report.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\napp = Hfss(specified_version=\"2025.1\",\n           non_graphical=False,\n           new_desktop_session=False\n           )\ntest_points = [[\"0mm\", \"0mm\", \"0mm\"], [\"100mm\", \"20mm\", \"0mm\"],\n               [\"71mm\", \"71mm\", \"0mm\"], [\"0mm\", \"100mm\", \"0mm\"]]\np1 = app.modeler.create_polyline(test_points)\nsetup = app.create_setup()\n\nreport = app.post.reports_by_category.fields(\"Mag_E\", setup.name + \" : LastAdaptive\", p1.name)\nreport.create()\n\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Using Exported Farfield Data with FfdSolutionData\nDESCRIPTION: Shows how to directly load previously exported farfield data from a metadata file using the FfdSolutionData class and perform analysis without needing to rerun the AEDT simulation, including various visualization methods.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/advanced.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.generic.farfield_visualization import FfdSolutionData\ninput_file = r\"path_to_ffd\\pyaedt_antenna_metadata.json\"\nffdata = FfdSolutionData(input_file)\nincident_power = ffdata.incident_power\nffdata.plot_cut(primary_sweep=\"Theta\", theta=0)\nffdata.plot_contour(polar=True)\nffdata.plot_3d(show_geometry=False)\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Creating and Generating HFSS Report from JSON Configuration using PyAEDT in Python\nDESCRIPTION: This snippet demonstrates how to use the PyAEDT library to automate HFSS project setup, 3D component insertion, and report generation based on a JSON configuration file. Dependencies include the PyAEDT library and an available HFSS installation. Key parameters are the name of the 3D component (\\\"Dipole_Antenna_DM\\\"), the JSON report filename (\\\"hfss_report_example.json\\\"), and the required geometry parameters. The script initializes an HFSS session, inserts a component, creates a simulation setup, generates a report based on the given configuration file, and properly releases the HFSS desktop session. Limitations include the need for the JSON file to be properly formatted and present before running the snippet.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/reports.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nhfss = Hfss()\ncompfile = hfss.components3d[\"Dipole_Antenna_DM\"]\ngeometryparams = hfss.get_component_variables(\"Dipole_Antenna_DM\")\nhfss.modeler.insert_3d_component(compfile, geometryparams)\nhfss.create_setup()\nfilename = \"hfss_report_example.json\"\nhfss.post.create_report_from_configuration(input_file=filename)\nhfss.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying HFSS Setup Properties in PyAEDT\nDESCRIPTION: This example demonstrates how to create an HFSS setup and modify its properties after creation. The code imports the Hfss class from ansys.aedt.core, creates an instance, adds a setup with default properties, and then modifies the 'AdaptMultipleFreqs' property to True.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplatesHFSS.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\nhfss = Hfss()\n# Any property of this setup can be found on this page.\nsetup = hfss.create_setup()\nsetup.props[\"AdaptMultipleFreqs\"] = True\nsetup.update()\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry and Assigning Materials in HFSS - PyAEDT - Python\nDESCRIPTION: This snippet demonstrates creating a 3D box with specified dimensions and material in an HFSS design using the modeler's create_box function. Dependency: ansys.aedt.core.hfss. Key parameters include the box's origin, dimensions, name, and material. Input is a coordinate list, dimension list, and material name; output is a new geometric object in the design. Requires a running HFSS session.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    # Create a box, assign variables, and assign materials.\\n\\n    from ansys.aedt.core.hfss import Hfss\\n    with Hfss as hfss:\\n         hfss.modeler.create_box([0, 0, 0], [10, \\\"dim\\\", 10],\\n                                 \\\"mybox\\\", \\\"aluminum\\\")\\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying a Maxwell 3D Setup in Python\nDESCRIPTION: This example demonstrates how to create a Maxwell 3D setup and modify its properties. The code imports the Maxwell3D class, creates a setup instance, changes the MaximumPasses property to 5, and updates the setup with the new configuration.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplatesMaxwell.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell3d\n\nMaxwell3d = Maxwell3d ()\n# Any property of this setup can be found on this page.\nsetup = Maxwell3d.create_setup ()\nsetup.props[\"MaximumPasses\"] = 5\nsetup.update ()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Primitive Objects in AEDT Modeler – Python\nDESCRIPTION: Shows manual instantiation of the Modeler module from a Circuit context and how to create a box primitive with optional material and name attributes. Relies on the ansys.aedt.core Python package and a valid AEDT environment. Requires inputs for primitive origin, size, and optionally, material and name. The output is a reference to a created box primitive object. Constraints: Misnaming in the code (e.g., 'primivites' instead of 'primitives'); user must have initialized the Modeler on a compatible Ansys environment and ensure spelling is correct.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitives3D.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Circuit\napp = Hfss(specified_version=\"2025.1\",\n             non_graphical=False, new_desktop_session=True,\n             close_on_exit=True, student_version=False)\n\n# This call returns the NexximComponents class\norigin = [0,0,0]\nsizes = [10,5,20]\n#Material and name are not mandatory fields\nbox_object = app.modeler.primivites.create_box(origin, sizes, name=\"mybox\", material=\"copper\")\n\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Client Sessions for Remote AEDT\nDESCRIPTION: Examples showing how to create client sessions connecting to a remote PyAEDT service manager. Demonstrates launching AEDT during connection or afterward. The service manager must be running on the specified server.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/ClientServer.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.common_rpc import create_session\n# User can establish the connection and start a new AEDT session\ncl1 = create_session(\"server_name\", launch_aedt_on_server=True, aedt_port=17880, non_graphical=True)\n\n# Optionally AEDT can be launched after the connection is established\ncl2 = create_session(\"server_name\", launch_aedt_on_server=False)\ncl2.aedt(port=17880, non_graphical=True)\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying HFSS Setup in Python\nDESCRIPTION: This example demonstrates how to launch AEDT 2025 R1 in non-graphical mode, create an HFSS setup, and modify its properties. The code shows how to access and update setup properties after creation.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplates.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLaunch AEDT 2025 R1 in non-graphical mode\n\nfrom ansys.aedt.core import Hfss\n\nhfss = Hfss()\n# Any property of this setup can be found on this page.\nsetup = hfss.create_setup()\nsetup.props[\"AdaptMultipleFreqs\"] = True\nsetup.update()\n```\n\n----------------------------------------\n\nTITLE: Managing Mesh Operations in Maxwell 3D Using PyAEDT\nDESCRIPTION: The snippet demonstrates reading and modifying mesh operations in a Maxwell 3D design using PyAEDT. Dependencies include the Ansis AEDT libraries, and key interactions are through the 'meshoperations' attribute. The code focuses on retrieving, altering, and updating mesh operation properties.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell3d\nm3d = Maxwell3d()\nall_mesh_ops = m3d.mesh.meshoperations\nmy_mesh_op = all_mesh_ops[0]\n# All properties are in props dictionary.\nmy_mesh_op.props[\"my_prop\"] = \"my_value\"\nmy_mesh_op.update()\n```\n\n----------------------------------------\n\nTITLE: Using PyAEDT Constants with Icepak for 3D Modeling Operations\nDESCRIPTION: Example demonstrating how to use PyAEDT constants with Icepak for creating geometry and performing splits. The example imports the constants module, creates a cylinder along the X axis, and splits it using the YZ plane constant.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Constants.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import constants\nipk = Icepak()\n# Use of AXIS Constant\ncylinder = ipk.modeler.create_cylinder(constants.AXIS.X, [0,0,0],10,3)\n# Use of PLANE Constant\nipk.modeler.split(cylinder, constants.PLANE.YZ, sides=\"Both\")\n...\nipk.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Using TouchstoneData Class for S-Parameter Analysis in Python\nDESCRIPTION: This example demonstrates how to use the TouchstoneData class to read touchstone files, convert to mixed-mode data with custom port ordering, plot insertion losses, and identify worst-case curves from return loss data.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/advanced.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.visualization.advanced.touchstone_parser import TouchstoneData\n\nts1 = TouchstoneData(touchstone_file=os.path.join(test_T44_dir, \"port_order_1234.s8p\"))\nassert ts1.get_mixed_mode_touchstone_data()\nts2 = TouchstoneData(touchstone_file=os.path.join(test_T44_dir, \"port_order_1324.s8p\"))\nassert ts2.get_mixed_mode_touchstone_data(port_ordering=\"1324\")\n\nassert ts1.plot_insertion_losses(plot=False)\nassert ts1.get_worst_curve(curve_list=ts1.get_return_loss_index(), plot=False)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Native Component Objects in Icepak\nDESCRIPTION: This code demonstrates how to create a PCB component in Icepak and use the NativeComponentPCB class. It initializes an Icepak application, creates a 3D PCB component with custom resolution settings, and then properly releases the desktop application.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Boundaries.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Icepak\nipk = Icepak()\ncomponent_name = \"RadioBoard1\"\npcb_comp = self.aedtapp.create_ipk_3dcomponent_pcb(\n    component_name, link_data, solution_freq, resolution, custom_x_resolution=400, custom_y_resolution=500\n)\n # pcb_comp is a NativeComponentPCB\n...\nipk.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Initializing Maxwell 2D and Accessing the Modeler in Python\nDESCRIPTION: This snippet shows how to import the Maxwell2d class from ansys.aedt.core, initialize an application instance with specific settings, and access the modeler property. The modeler property returns the Modeler2D class which contains methods for modifying the design geometry.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitives2D.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Maxwell2d\napp = Maxwell2d(specified_version=\"2025.1\",\n                 non_graphical=False, new_desktop_session=True,\n                 close_on_exit=True, student_version=False)\n\n# This call return the Modeler2D class\nmodeler = app.modeler\n\n\n...\n```\n\n----------------------------------------\n\nTITLE: Working with Previously Exported RCS Data in Python\nDESCRIPTION: Shows how to load previously exported RCS data from a metadata file using MonostaticRCSData and create visualizations with MonostaticRCSPlotter, enabling offline analysis of simulation results.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/advanced.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.visualization.advanced.rcs_visualization import MonostaticRCSPlotter\nfrom ansys.aedt.core.visualization.advanced.rcs_visualization import MonostaticRCSData\ninput_file = r\"path_to_data\\pyaedt_rcs_metadata.json\"\nrcs_data = MonostaticRCSData(input_file)\nrcs_plotter = MonostaticRCSPlotter(rcs_data)\nrcs_plotter.plot_cut()\n```\n\n----------------------------------------\n\nTITLE: Initializing HFSS and Managing Variables in Python\nDESCRIPTION: This snippet demonstrates how to initialize an HFSS session and manage variables using the VariableManager class. It shows setting and getting variable values.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Variables.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n         non_graphical=False, new_desktop_session=True,\n         close_on_exit=True, student_version=False)\n\n# This call returns the VariableManager class\nvariable_manager = self.aedtapp._variable_manager\n\n# Set and get a variable\napp[\"w\"] = \"10mm\"\na = app[\"w\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Hfss3dLayout Class for HFSS 3D Layout Designs in Python\nDESCRIPTION: This snippet defines the Hfss3dLayout class, which inherits from FieldAnalysis3DLayout. It provides methods for creating and manipulating HFSS 3D Layout designs, including primitives and analysis settings.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/changelog.d/6057.miscellaneous.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass Hfss3dLayout(FieldAnalysis3DLayout):\n    \"\"\"Provides the HFSS 3D Layout application interface.\n\n    Parameters\n    ----------\n    projectname : str, optional\n        Name of the project to select or create.\n    designname : str, optional\n        Name of the design to select or create.\n    solution_type : str, optional\n        Solution type to apply to the design.\n    setup_name : str, optional\n        Name of the setup to use for the design.\n    specified_version : str, optional\n        Version of AEDT to use. The default is ``None``, in which case the latest\n        installed version is used.\n    non_graphical : bool, optional\n        Whether to run AEDT in non-graphical mode. The default is ``False``,\n        in which case AEDT is launched in graphical mode.\n        This parameter is ignored when a script is launched within AEDT.\n    new_desktop_session : bool, optional\n        Whether to launch an instance of AEDT in a new thread.\n        The default is ``True``.\n    close_on_exit : bool, optional\n        Whether to release AEDT on exit. The default is ``False``.\n    student_version : bool, optional\n        Whether to enable the student version of AEDT. The default is ``False``.\n    machine : str, optional\n        Machine name to which connect the oDesktop Session. Works only in 2022R2.\n        The remote server must be up and running with the command\n        `\"C:\\Program Files\\AnsysEM\\AnsysEM21.1\\Win64\\ansysedt.exe\" -grpcsrv portnum`\n        If machine is \"\", the local machine is used.\n        The default is ``None``.\n    port : int, optional\n        Port number of which start the oDesktop communication on already existing server.\n        This parameter is ignored in new server creation. It works only on 2022R2.\n        The default is ``None``.\n    aedt_process_id : int, optional\n        Only for 2023R1 and later. Defines the process ID that launches AEDT.\n        The default is ``None``.\n\n    Examples\n    --------\n    Create an instance of Hfss3dLayout and connect to an existing HFSS design\n    or create a new one if no design exists.\n\n    >>> from pyaedt import Hfss3dLayout\n    >>> app = Hfss3dLayout()\n    pyaedt info: pyaedt v...... is being launched.\n    pyaedt info: AEDT is launching. This may take a few seconds.\n    pyaedt info: Successfully connected to existing AEDT session.\n\n    Create an instance of Hfss3dLayout and link to a project named\n    \"projectname\" and design named \"designname\".\n\n    >>> app = Hfss3dLayout(\"projectname\", \"designame\")\n\n    Create an instance of Hfss3dLayout and open the specified project.\n\n    >>> app = Hfss3dLayout(\"myfile.aedt\")\n\n    Create an instance of Hfss3dLayout using the 2021 R1 release and\n    open the specified project.\n\n    >>> app = Hfss3dLayout(specified_version=\"2021.2\", projectname=\"myfile.aedt\")\n\n    Create an instance of Hfss3dLayout and create a new project with\n    a new design.\n\n    >>> app = Hfss3dLayout(projectname=\"new_project\", designname=\"new_design\")\n\n    Create an instance of Hfss3dLayout and run it in non-graphical mode.\n\n    >>> app = Hfss3dLayout(non_graphical=True)\n\n    \"\"\"\n\n    def __init__(\n        self,\n        projectname=None,\n        designname=None,\n        solution_type=None,\n        setup_name=None,\n        specified_version=None,\n        non_graphical=False,\n        new_desktop_session=False,\n        close_on_exit=False,\n        student_version=False,\n        machine=\"\",\n        port=None,\n        aedt_process_id=None,\n    ):\n        FieldAnalysis3DLayout.__init__(\n            self,\n            \"HFSS 3D Layout Design\",\n            projectname,\n            designname,\n            solution_type,\n            setup_name,\n            specified_version,\n            non_graphical,\n            new_desktop_session,\n            close_on_exit,\n            student_version,\n            machine,\n            port,\n            aedt_process_id,\n        )\n        self._primitives = Primitives3DLayout(self)\n        self._aedt_type = \"HFSS3DLayout\"\n\n    def __enter__(self):\n        return self\n\n    @property\n    def primitives(self):\n        \"\"\"Primitives.\"\"\"\n        return self._primitives\n\n    @property\n    def modeler(self):\n        \"\"\"Modeler.\"\"\"\n        return self._primitives\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Hierarchy in AEDT (Faces, Edges, Vertices)\nDESCRIPTION: Code example showing how to navigate through the hierarchy of a 3D object, accessing its faces, edges, and vertices. Demonstrates iterating through these components and retrieving their properties.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/modeler.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbox = hfss.modeler[\"mybox2\"]\nfor face in box.faces:\n   print(face.center)\n   for edge in face:\n       print(edge.midpoint)\n       for vertice in edge.vertices:\n           print(edge.position)\nfor vertice in box.vertices:\n   print(edge.position)\n```\n\n----------------------------------------\n\nTITLE: Generating PyVista Field Plots with PyAEDT\nDESCRIPTION: Example of using PyVista to visualize field data outside of AEDT. This code retrieves E-field magnitude data and plots it using PyVista's 3D visualization capabilities.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/postprocessing.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nhfss = Hfss()\nhfss.analyze()\ncutlist = [\"Global:XY\"]\nsetup_name = hfss.existing_analysis_sweeps[0]\nquantity_name = \"ComplexMag_E\"\nintrinsic = {\"Freq\": \"5GHz\", \"Phase\": \"180deg\"}\nhfss.logger.info(\"Generating the image\")\nplot_obj = hfss.post.plot_field(\n        quantity=\"Mag_E\",\n        objects_list=cutlist,\n        plot_type=\"CutPlane\",\n        setup=setup_name,\n        intrinsics=intrinsic\n    )\n```\n\n----------------------------------------\n\nTITLE: RCS Data Retrieval and Visualization from HFSS\nDESCRIPTION: Example of extracting radar cross section (RCS) data from an active HFSS session and visualizing it using the MonostaticRCSPlotter class, which provides specialized plotting capabilities for RCS analysis.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/advanced.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.visualization.advanced.rcs_visualization import MonostaticRCSPlotter\napp = Hfss()\nrcs_object = app.get_rcs_data()\nrcs_plotter = MonostaticRCSPlotter(rcs_data=rcs_object.rcs_data)\nrcs_plotter.plot_rcs()\n```\n\n----------------------------------------\n\nTITLE: Illustrating PyAEDT Codebase Restructuring (Text)\nDESCRIPTION: This text snippet visually compares the old PyAEDT directory structure (based in the `pyaedt` folder) with the new structure (relocated under `src/ansys/aedt/core`). This restructuring, implemented in version 1.0, is done to align with PyAnsys guidelines and improve maintainability, impacting import paths in user projects.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nOld structure:\n--------------\n\npyaedt/\n├── application/\n└── ...\n\nNew structure:\n--------------\n\nsrc/\n└── ansys/\n    └── aedt/\n        └── core/\n            ├── application/\n            ├── ...\n```\n\n----------------------------------------\n\nTITLE: Changing Object Material and Transparency in AEDT\nDESCRIPTION: Code example demonstrating how to modify object properties like material and transparency, and how to retrieve the material name using a getter.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/modeler.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbox.material_name = \"copper\"\nbox.transparency = 0.4\nprint(box.material_name)\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Reports with PyAEDT\nDESCRIPTION: Example of generating a PDF report using PyAEDT's AnsysReport class based on the fpdf2 package. This code demonstrates creating a multi-chapter report with text, images, tables, and charts.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/postprocessing.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.visualization.plot.pdf import AnsysReport\nimport os\nreport = AnsysReport()\nreport.aedt_version = \"2025R1\"\nreport.template_name = \"AnsysTemplate\"\nreport.project_name = \"Coaxial1\"\nreport.design_name = \"Design2\"\nreport.template_data.font = \"times\"\nreport.create()\nreport.add_chapter(\"Chapter 1\")\nreport.add_sub_chapter(\"C1\")\nreport.add_text(\"Hello World.\\nlorem ipsum....\")\nreport.add_text(\"ciao2\", True, True)\nreport.add_empty_line(2)\nreport.add_page_break()\nreport.add_chapter(\"Chapter 2\")\nreport.add_sub_chapter(\"Charts\")\nlocal_path = r'C:\\result'\nreport.add_section(portrait=False, page_format=\"a3\")\nreport.add_image(os.path.join(local_path, \"return_loss.jpg\"), width=400, caption=\"S-Parameters\")\nreport.add_section(portrait=False, page_format=\"a5\")\nreport.add_table(\"MyTable\", [[\"x\", \"y\"], [\"0\", \"1\"], [\"2\", \"3\"], [\"10\", \"20\"]])\nreport.add_section()\nreport.add_chart([0, 1, 2, 3, 4, 5], [10, 20, 4, 30, 40, 12], \"Freq\", \"Val\", \"MyTable\")\nreport.add_toc()\nreport.save_pdf(r'c:\\temp', \"report_example.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Accessing and Processing Farfield Data with PyAEDT\nDESCRIPTION: Demonstrates how to retrieve antenna farfield data from HFSS using the FfdSolutionDataExporter class, access solution data parameters, and create various visualizations including 2D cuts, contour plots, and 3D patterns.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/advanced.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nfrom ansys.aedt.core.generic.farfield_visualization import FfdSolutionDataExporter\napp = ansys.aedt.core.Hfss()\nffdata = app.get_antenna_data(frequencies=None,\n                              setup=\"Setup1 : Sweep\",\n                              sphere=\"3D\",\n                              variations=None,\n                              overwrite=False,\n                              link_to_hfss=True,\n                              export_touchstone=True)\nincident_power = ffdata.incident_power\nffdata.plot_cut(primary_sweep=\"Theta\", theta=0)\nffdata.plot_contour(polar=True)\nffdata.plot_3d(show_geometry=False)\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Importing FieldAnalysis3DLayout (New Path/Name) in Python\nDESCRIPTION: This Python snippet presents the correct import statement for `FieldAnalysis3DLayout` in PyAEDT 1.0 and later. It incorporates changes from both the codebase restructuring (to `ansys.aedt.core`) and the Python file renaming (to `analysis_3d_layout.py` following PEP 8), resulting in the new path `ansys.aedt.core.application.analysis_3d_layout`.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.application.analysis_3d_layout import FieldAnalysis3DLayout\n```\n\n----------------------------------------\n\nTITLE: Working with Coordinate Systems in PyAEDT\nDESCRIPTION: This code demonstrates how to access existing coordinate systems and create new coordinate systems in AEDT through PyAEDT. The CoordinateSystem class provides methods for creating and manipulating coordinate systems in the modeler.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Primitive_Objects.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\napp = Hfss(specified_version=\"2025.1\",\n                 non_graphical=False, new_desktop_session=True,\n                 close_on_exit=True, student_version=False)\n\n# This call returns the CoordinateSystem object list\ncs = app.modeler.coordinate_systems\n\n# This call returns a CoordinateSystem object\nnew_cs = app.modeler.create_coordinate_system()\n```\n\n----------------------------------------\n\nTITLE: Connecting to AEDT via gRPC API on Remote Machine\nDESCRIPTION: Code for launching AEDT on a remote machine using gRPC API connection. This requires AEDT 2022 R2 or later and works for all applications except EDB. The remote AEDT instance must be running and listening on the specified port.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/ClientServer.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Launch the latest installed version of AEDT in graphical mode.\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.generic.settings import settings\nsettings.use_grpc_api=True\nhfss = Hfss(machine=\"fullmachinename\", port=portnumber)\n```\n\n----------------------------------------\n\nTITLE: Creating HFSS Choke Geometry with PyAEDT Python\nDESCRIPTION: This Python script demonstrates using the PyAEDT library to create a choke geometry within an Ansys HFSS simulation. It initializes an HFSS session, loads choke parameters from a specified JSON file (`choke_example.json`), calls the `create_choke` method to build the model, and then releases the AEDT desktop session. Requires the `ansys-aedt-core` library and a valid JSON choke configuration file.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/choke.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\nhfss = Hfss()\nchoke_file1 =  \"choke_example.json\"\nchoke = hfss.modeler.create_choke(choke_file1)\nhfss.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Initializing PyAEDT Circuit with Deprecated Argument (Python)\nDESCRIPTION: This Python snippet demonstrates how to initialize a `pyaedt.Circuit` object using the `designname` argument. This argument is deprecated in favor of `design` starting from PyAEDT version 1.0. Running this code with a pre-1.0 version that includes the deprecation warning mechanism will log a specific warning.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyaedt import Circuit\nc = Circuit(designname=\"whatever\")\n```\n\n----------------------------------------\n\nTITLE: Complete Global Mesh Region Configuration in Icepak with PyAEDT\nDESCRIPTION: This comprehensive example configures global mesh region settings in Icepak using PyAEDT, detailing the adjustment of maximum element sizes, levels, and buffers, emphasizing the 'manual_settings' toggling for customized configurations.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nipk = Icepak()\nglob_msh = ipk.mesh.global_mesh_region\nglob_msh.manual_settings = True\nglob_msh.settings[\"MaxElementSizeX\"] = \"2mm\"\nglob_msh.settings[\"MaxElementSizeY\"] = \"3mm\"\nglob_msh.settings[\"MaxElementSizeZ\"] = \"4mm\"\nglob_msh.settings[\"MaxSizeRatio\"] = 2\nglob_msh.settings[\"UserSpecifiedSettings\"] = True\nglob_msh.settings[\"UniformMeshParametersType\"] = \"XYZ Max Sizes\"\nglob_msh.settings[\"MaxLevels\"] = 2\nglob_msh.settings[\"BufferLayers\"] = 1\nglob_msh.update()\n```\n\n----------------------------------------\n\nTITLE: Starting PyAEDT Remote Service Manager\nDESCRIPTION: Code to launch the PyAEDT remote service manager on a server. This service listens for incoming connections on port 17878 (configurable) and can act as a file manager for remote AEDT sessions.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/ClientServer.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Launch PyAEDT remote server on CPython\nfrom ansys.aedt.core.common_rpc import pyaedt_service_manager\npyaedt_service_manager()\n```\n\n----------------------------------------\n\nTITLE: Using Transient Assignments in Icepak\nDESCRIPTION: This code shows two methods of creating and applying transient thermal assignments in Icepak. The first approach uses a factory method from the Icepak object, while the second demonstrates direct instantiation of the SinusoidalDictionary class. Both methods configure a sinusoidal thermal load with specific parameters.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/Boundaries.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbc_transient = ipk.create_sinusoidal_transient_assignment(vertical_offset=\"1W\", vertical_scaling=\"3\",\n                                                              period=\"2\", period_offset=\"0.5s\")\n# bc_transient will be SinusoidalDictionary type\nipk.assign_solid_block(\"Cylinder1\", bc_transient)\n\n#or\n\nbc_transient = SinusoidalDictionary(vertical_offset=\"1W\", vertical_scaling=\"3\",\n                                        period=\"2\", period_offset=\"0.5s\")\nipk.assign_solid_block(\"Cylinder1\", bc_transient)\n```\n\n----------------------------------------\n\nTITLE: Removing .NET Package Dependencies in Ubuntu\nDESCRIPTION: Command to remove existing .NET packages from Ubuntu to prepare for installation from Microsoft's repository. This helps resolve compatibility issues with system libraries in Linux.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove dotnet* aspnetcore* netstandard*\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Region Dimensions in Icepak Using PyAEDT\nDESCRIPTION: This snippet illustrates how to change global region dimensions in Icepak through the global mesh region's settings. Attributes like 'positive_z_padding' are adjusted, enabling fine-tuning of mesh dimensions using properties like 'Absolute Offset'.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nglob_msh.global_region.positive_z_padding_type = \"Absolute Offset\"\nglob_msh.global_region.positive_z_padding = \"5 mm\"\n```\n\n----------------------------------------\n\nTITLE: Example Structure of PyAEDT Project Configuration JSON - JSON\nDESCRIPTION: This snippet provides a sample structure of the JSON file generated and consumed by PyAEDT configuration export/import routines, representing metadata, setups, boundaries, meshing options, materials, object mappings, datasets, monitors, and native components in a hierarchical format. Comments illustrate intended content and typical fields. The JSON is expected as input/output for the Python API and reveals configurable project elements; all keys and object names need to match project specifics.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/project.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"general\": {\n        \"pyaedt_version\": \"0.8.dev0\",\n        \"model_units\": \"mm\",\n        \"design_name\": \"IcepakDesign1\",\n        \"date\": \"09/01/2024 08:22:17\",\n        \"object_mapping\": {\n            # object_id: [\n            #     object_name,\n            #    object_center\n            # ],\n            \"12\": [\n                \"Region\",\n                [\n                    80.0,\n                    14.243,\n                    -55.0\n                ]\n            ]\n        },\n        \"output_variables\": {},\n        \"variables\": {},\n        \"postprocessing_variables\": {}\n    },\n    \"setups\": {\n        # Setup Name : {Setup Properties}\n        \"MySetupAuto\": {\n            \"Enabled\": true,\n            \"Flow Regime\": \"Turbulent\",\n            \"Include Temperature\": true,\n        }\n    },\n    \"boundaries\": {\n        # Boundary Name : {Boundary Properties}\n        \"CPU\": {\n            \"Objects\": [\n                \"CPU\"\n            ],\n            \"Block Type\": \"Solid\",\n            \"Use External Conditions\": false,\n            \"Total Power\": \"25W\",\n            \"BoundType\": \"Block\"\n        },\n    },\n    \"mesh\": {\n        \"Settings\": {\n            # mesh_properties,\n            \"MeshMethod\": \"MesherHD\",\n            \"UserSpecifiedSettings\": true,\n            \"ComputeGap\": true,\n            \"MaxElementSizeX\": \"16mm\",\n            \"MaxElementSizeY\": \"3.5mm\",\n            \"MaxElementSizeZ\": \"11mm\",\n            # ....\n        }\n    },\n    \"materials\": {\n        # Material Name : {Material Properties}\n        \"Al-Extruded\": {\n            \"CoordinateSystemType\": \"Cartesian\",\n            \"BulkOrSurfaceType\": 1,\n            \"PhysicsTypes\": {\n                \"set\": [\n                    \"Thermal\"\n                ]\n            },\n            \"AttachedData\": {\n                \"MatAppearanceData\": {\n                    \"property_data\": \"appearance_data\",\n                    \"Red\": 232,\n                    \"Green\": 235,\n                    \"Blue\": 235\n                }\n            },\n            \"thermal_conductivity\": \"205\",\n            \"mass_density\": \"2800\",\n            \"specific_heat\": \"900\",\n            \"thermal_material_type\": {\n                \"property_type\": \"ChoiceProperty\",\n                \"Choice\": \"Solid\"\n            },\n            \"clarity_type\": {\n                \"property_type\": \"ChoiceProperty\",\n                \"Choice\": \"Opaque\"\n            }\n        },\n    },\n    \"objects\": {\n        # Object Name: {object properties}\n        \"Region\": {\n            \"SurfaceMaterial\": \"\",\n            \"Material\": \"air\",\n            \"SolveInside\": true,\n            \"Model\": true,\n            \"Group\": \"\",\n            \"Transparency\": 0.0,\n            \"Color\": [\n                255,\n                0,\n                0\n            ],\n            \"CoordinateSystem\": \"Global\"\n        },\n\n    },\n    \"datasets\": [\n        # Dataset Name : {Dataset Properties}\n    ],\n    \"monitors\": [\n        # Monitor Name : {Monitor Properties}\n    ],\n    \"native components\": {\n        # Component Name : {Component Properties}\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing PyAEDT Desktop Connection in Python\nDESCRIPTION: Instantiates the `Desktop` class from the imported PyAEDT library. It connects to an existing AEDT session specified by `aedt_process_id` and `version`. Key parameters `new_desktop_session=False`, `non_graphical=False`, and `close_on_exit=False` ensure it attaches to the current, graphical AEDT instance without launching a new one or closing it when the script finishes. `student_version=False` indicates a commercial version.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/src/ansys/aedt/core/workflows/installer/jupyter_template.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndesktop = Desktop(\n        specified_version= version,\n        aedt_process_id = aedt_process_id,\n        new_desktop_session=False,\n        non_graphical=False,\n        close_on_exit=False,\n        student_version=False,\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Custom Extension in AEDT using PyAEDT\nDESCRIPTION: This code demonstrates how to create a basic custom extension for AEDT. It shows the required structure for connecting to an existing AEDT session using environment variables for port and version, creating a simple sphere object, and properly releasing the desktop session. This template can be used as a starting point for developing custom extensions.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/extensions.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nimport os\n\n# common part\nif \"PYAEDT_SCRIPT_PORT\" in os.environ and \"PYAEDT_SCRIPT_VERSION\" in os.environ:\n    port = os.environ[\"PYAEDT_SCRIPT_PORT\"]\n    version = os.environ[\"PYAEDT_SCRIPT_VERSION\"]\nelse:\n    port = 0\n    version = \"2025.1\"\n\n# your pyaedt script\napp = ansys.aedt.core.Desktop(new_desktop_session=False, specified_version=version, port=port)\n\nactive_project = app.active_project()\nactive_design = app.active_design(active_project)\n\n# no need to hardcode your application since get_pyaedt_app detects it for you\naedtapp = ansys.aedt.core.get_pyaedt_app(design_name=active_design.GetName(), desktop=app)\n\n# your workflow\naedtapp.modeler.create_sphere([0, 0, 0], 20)\n\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Importing Standard Python Modules\nDESCRIPTION: Imports the `sys` module for system-specific parameters and functions, and the `atexit` module for registering functions to be called upon script termination. These are standard Python libraries often used in scripting environments.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/src/ansys/aedt/core/workflows/installer/jupyter_template.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport atexit\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a Modal Setup in Mechanical\nDESCRIPTION: Demonstrates how to create a Mechanical setup with MaxModes parameter and mentions that any property of the setup can be modified based on the templates documented on the page.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplatesMechanical.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Mechanical\n\napp = Mechanical()\n# Any property of this setup can be found on this page.\nsetup = app.create_setup(MaxModes=6)\n```\n\n----------------------------------------\n\nTITLE: Initializing Ansys Desktop Instance\nDESCRIPTION: Creates an Ansys Desktop instance with specific configurations such as version, process ID, and session management. The function relies on previously set variables like 'version' and 'aedt_process_id' and returns a configured Desktop object.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/src/pyaedt/workflows/installer/jupyter_template.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndesktop = Desktop(\\n        specified_version= version,\\n        aedt_process_id = aedt_process_id,\\n        new_desktop_session=False,\\n        non_graphical=False,\\n        close_on_exit=False,\\n        student_version=False,\\n    )\n```\n\n----------------------------------------\n\nTITLE: Launching AEDT Explicitly with Error Management - PyAEDT - Python\nDESCRIPTION: This snippet shows how to explicitly launch AEDT 2022 R2 in non-graphical mode using PyAEDT with the Desktop and Circuit classes inside a context manager for robust error and resource management. It demonstrates AEDT session scoping and ensures cleanup. Dependencies: ansys.aedt.core. Key parameters include 'specified_version', 'non_graphical', and context handling for session lifecycle. Inputs are AEDT configuration values, and output is a managed AEDT session; errors within the context are automatically handled.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    # Launch AEDT 2022 R2 in non-graphical mode\\n\\n    from ansys.aedt.core import Desktop, Circuit\\n    with Desktop(specified_version=\\\"2022.2\\\",\\n                 non_graphical=False, new_desktop_session=True,\\n                 close_on_exit=True, student_version=False):\\n        circuit = Circuit()\\n        ...\\n        # Any error here will be caught by Desktop.\\n        ...\\n\\n    # Desktop is automatically released here.\\n\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit as a Git Hook\nDESCRIPTION: Command to install pre-commit as a Git hook to automatically check code style before committing.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Contributing.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Field Overlay Plot in Ansys 3D Field Simulators\nDESCRIPTION: This function configures a field overlay plot in Ansys Maxwell or HFSS. It customizes various plot parameters including quantity, surface, intrinsics, and solution type.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/changelog.d/5955.miscellaneous.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef field_overlay(self, plot_name=None, quantity_name=\"Mag_E\", object_list=None, intrinsic=\"Vector\",\n              plot_type=\"Surface\", primary_sweep=\"\", secondary_sweep=\"\",\n              setup_name=None, variation_dict=None, variation_string=\"\", solution_name=\"LastAdaptive\"):\n    \"\"\"Create a field plot in HFSS and Maxwell 3D.\n\n    Parameters\n    ----------\n    plot_name : str, optional\n        Optional plot name. The default is ``None``.\n    quantity_name : str, optional\n        Plot quantity name. The default is ``\"Mag_E\"``. Options are\n        ``\"Mag_E\"``, ``\"Vector_E\"``, ``Vector_H\"``, and ``\"Mag_H\"``.\n    object_list : list, optional\n        Objects list. The default is ``None``.\n    intrinsic : str, optional\n        Intrinsic definition. The default is ``\"Vector\"``.\n    plot_type : str, optional\n        Plot type. The default is ``\"Surface\"``.\n    primary_sweep : str, optional\n        Primary sweep name. The default is ``\"\"``.\n    secondary_sweep : str, optional\n        Secondary sweep name. The default is ``\"\"``.\n    setup_name : str, optional\n        Setup name. The default is ``None``.\n    variation_dict : dict, optional\n        Dictionary of variations to use. The default is ``None``.\n    variation_string : str, optional\n        String of variations to use. The default is ``\"\"``.\n    solution_name : str, optional\n        Name of the solution type to use. The default is ``\"LastAdaptive\"``.\n        Options are ``\"LastAdaptive\"``, ``\"AdaptivePass\"`` and ``\"Sweep\"``,\n        and ``\"Nominal\"``.\n\n    Returns\n    -------\n    :class:`pyaedt.modules.postprocessor.FloatPlot`\n        Float plot object or ``None``.\n\n    References\n    ----------\n    >>> oModule.CreateFieldPlot\n\n    Examples\n    --------\n    >>> project = hfss.post.project\n    >>> project.field_overlay(\"EfieldPlot\", \"Vector_E\", [\"airbox\"])\n    \"\"\"\n    if not setup_name:\n        if self._app._setups:\n            setup_name = self._app._setups[0].name\n        else:\n            return False\n    if not plot_name:\n        plot_name = generate_unique_name(\"Field\")\n\n    if not object_list:\n        object_list = []\n\n    if not self._app._setups[self._app._setup_names.index(setup_name)].post:\n        self._app._setups[self._app._setup_names.index(setup_name)]._create_post_solution()\n        if not self._app._setups[self._app._setup_names.index(setup_name)].post:\n            return None\n\n    if variation_dict:\n        if self._app.design_type == \"Maxwell 3D\":\n            o_variation_dict = self._app._project.get_nominal_variation(setup_name)\n            for v, i in variation_dict.items():\n                o_variation_dict[v] = i\n            variation_dict = o_variation_dict\n        variation_string = self._app._setups[self._app._setup_names.index(setup_name)].post.compose_variation_string(\n            variation_dict\n        )\n    elif not variation_string:\n        variation_string = self._app._setups[self._app._setup_names.index(setup_name)].post.get_nominal_variation()\n\n    if self._app.design_type == \"HFSS\":\n        solution, context = self._app._setups[self._app._setup_names.index(setup_name)].post.get_solution_data(\n            domain=\"Time\", variation_string=variation_string, primary_sweep=primary_sweep, solution_name=solution_name\n        )\n        if \"Domain\" in solution:\n            domain = solution[\"Domain\"]\n        elif solution_name in [\"LastAdaptive\", \"AdaptivePass\"]:\n            domain = \"Sweep\"\n        else:\n            domain = solution_name\n        if plot_type == \"Volume\":\n            plotprop = \"Volume{0}Plot\".format(intrinsic)\n        else:\n            plotprop = \"{0}{1}Plot\".format(plot_type, intrinsic)\n        solutions = self._app.omatches.get_module(self._app.odesign, \"Solutions\")\n        setup = self._app._setups[self._app._setup_names.index(setup_name)]\n        if context and primary_sweep and secondary_sweep:\n            solution_name = solutions.GetContextTimeSolution(setup.name, context, domain)\n        elif solution_name == \"LastAdaptive\":\n            solution_name = solutions.GetDefaultTimeSolution(setup.name, domain)\n        elif solution_name == \"Sweep\":\n            solution_name = setup.solution_name\n        self._app.oreportsetup.CreateFieldPlot(\n            plots=[plot_name],\n            setupname=setup_name,\n            defaultplotname=\"None\",\n            plottype=plotprop,\n            solutionname=solution_name,\n            meshplotattributes={\n                \"Intrinsic\": \"Surface Tangential\",\n                \"IsoVal\": \"Mag_E\",\n                \"Quantity\": quantity_name,\n                \"PlotGeomInfo\": [plot_type, object_list, \"FacesList\", []],\n                \"GridSize\": \"20\",\n                \"DataSource\": \"Rectangular Plot\",\n                \"Preserve Data Order\": False,\n                \"SmoothingLevel\": 1,\n                \"EnforceHollowPlot\": False,\n                \"RangeType\": \"Original\",\n                \"UserSpecifyMin\": 0,\n                \"UserSpecifyMax\": 0,\n                \"UserSpecifiedMin\": \"\",\n                \"UserSpecifiedMax\": \"\",\n                \"DataType\": \"Double\",\n                \"PrimaryDataAttribute\": \"\",\n                \"SecondaryDataAttribute\": \"\",\n                \"PointMarkerStyle\": \"Cross\",\n                \"PointMarkerOpacity\": 100,\n                \"PointMarkerSize\": 0.05,\n                \"PointMarkerColor\": [255, 0, 0],\n                \"LineType\": \"Solid\",\n                \"LineColor\": [0, 128, 0],\n                \"LineWeight\": \"Normal\",\n                \"BarNumber\": 0,\n                \"IsVectorQuantity\": True,\n                \"VectorResolution\": 30,\n                \"VectorDistance\": 0.1,\n                \"VectorType\": 2,\n                \"VectorColor\": [255, 255, 0],\n                \"UniformColor\": True,\n                \"ColorMapName\": \"Rainbow\",\n                \"ReverseColormap\": False,\n                \"UseLegacyTransparency\": False,\n                \"EdgeColor\": [0, 0, 0],\n                \"EdgeThickness\": \"Thin\",\n                \"FillTransparency\": 0,\n                \"ScalarPrecision\": \"Default\",\n                \"FullResolution\": False,\n                \"UseScalarDeformScale\": True,\n                \"DeformScaleFactor\": 0.002,\n                \"SurfaceOpacity\": 0.5,\n                \"NewFolderName\": \"Field Overlays\",\n                \"IsoValues\": {\"Double\": []},\n                \"FieldType\": \"E\",\n                \"MultiSelect\": True,\n            },\n        )\n    else:\n        solutions = self._app.omatches.get_module(self._app.odesign, \"Solutions\")\n        solution_name = solutions.GetChildNames(setup_name)[0]\n        if plot_type == \"Vector\":\n            Intrinsic = \"Vector\"\n        else:\n            Intrinsic = \"Scalar\"\n        if object_list:\n            objlist = object_list\n        else:\n            objlist = [\"AllObjects\"]\n        quantity_name_id = quantity_name\n        if \"Mag\" in quantity_name:\n            if quantity_name in [\"Mag_B\", \"Mag_J\", \"Mag_H\"]:\n                quantity_name_id = quantity_name[4:]\n\n        elif quantity_name in [\"Vector_B\", \"Vector_J\", \"Vector_H\"]:\n            quantity_name_id = quantity_name[7:]\n        self._app.oreportsetup.CreateFieldPlot(\n            plots=[plot_name],\n            setupname=setup_name,\n            defaultplotname=\"None\",\n            plottype=\"Field\",\n            solutionname=solution_name,\n            meshplotattributes={\n                \"Intrinsic\": Intrinsic,\n                \"Quantity\": quantity_name_id,\n                \"IntrinsicVar\": quantity_name,\n                \"PlotGeomInfo\": [plot_type, objlist, \"FacesList\", []],\n                \"DataSource\": \"Rectangular Plot\",\n                \"GridSize\": \"20\",\n                \"Preserve Data Order\": False,\n                \"SmoothingLevel\": 1,\n                \"EnforceHollowPlot\": False,\n                \"RangeType\": \"Original\",\n                \"UserSpecifyMin\": 0,\n                \"UserSpecifyMax\": 0,\n                \"UserSpecifiedMin\": \"\",\n                \"UserSpecifiedMax\": \"\",\n                \"DataType\": \"Double\",\n                \"PrimaryDataAttribute\": \"\",\n                \"SecondaryDataAttribute\": \"\",\n                \"PointMarkerStyle\": \"Cross\",\n                \"PointMarkerOpacity\": 100,\n                \"PointMarkerSize\": 0.05,\n                \"PointMarkerColor\": [255, 0, 0],\n                \"LineType\": \"Solid\",\n                \"LineColor\": [0, 128, 0],\n                \"LineWeight\": \"Normal\",\n                \"BarNumber\": 0,\n                \"IsVectorQuantity\": True,\n                \"VectorResolution\": 30,\n                \"VectorDistance\": 0.1,\n                \"VectorType\": 2,\n                \"VectorColor\": [255, 255, 0],\n                \"UniformColor\": True,\n                \"ColorMapName\": \"Rainbow\",\n                \"ReverseColormap\": False,\n                \"UseLegacyTransparency\": False,\n                \"EdgeColor\": [0, 0, 0],\n                \"EdgeThickness\": \"Thin\",\n                \"FillTransparency\": 0,\n                \"ScalarPrecision\": \"Default\",\n                \"FullResolution\": False,\n                \"UseScalarDeformScale\": True,\n                \"DeformScaleFactor\": 0.002,\n                \"SurfaceOpacity\": 0.5,\n                \"NewFolderName\": \"Field Overlays\",\n                \"IsoValues\": {\"Double\": []},\n                \"FieldType\": \"E\",\n                \"MultiSelect\": True,\n            },\n        )\n\n    floatplot = FloatPlot(self._app, plot_name)\n    return floatplot\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Properties in HFSS\nDESCRIPTION: This code snippet shows how to access the properties of default reports in HFSS using the Reports class from PyAEDT. It initializes an HFSS application, creates a Reports object, and then releases the desktop session.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/visualization/post.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.visualization.post.common import Reports\napp = Hfss(specified_version=\"2025.1\",\n         non_graphical=False, new_desktop_session=True,\n         close_on_exit=True, student_version=False)\nreports = Reports(app.post, app.design_type)\napp.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying HFSS Setup in RMXprt\nDESCRIPTION: This example demonstrates how to create an HFSS setup, access its properties, and update them. It shows how to modify the 'AdaptMultipleFreqs' property after creating a setup.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/SetupTemplatesRmxprt.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\n\nhfss = Hfss()\n# Any property of this setup can be found on this page.\nsetup = hfss.create_setup()\nsetup.props[\"AdaptMultipleFreqs\"] = True\nsetup.update()\n```\n\n----------------------------------------\n\nTITLE: Git Branch Command Reference in Markdown\nDESCRIPTION: Reference to the git branch command used to create a new branch for isolating changes in the development workflow.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`git branch`\n```\n\n----------------------------------------\n\nTITLE: Initializing AEDT Desktop Implicitly in Python\nDESCRIPTION: Example showing implicit initialization of the AEDT Desktop by directly creating a Circuit application instance. The desktop is automatically initialized with the specified configuration parameters.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Circuit\ncircuit = Circuit(specified_version=\"2025.1\",\n                  non_graphical=False,\n                  new_desktop_session=True,\n                  close_on_exit=True,\n                  student_version=False):\n circuit = Circuit()\n ...\n # Any error here should be caught by the desktop app.\n ...\n circuit.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Running Kernel Conversion Programmatically - Python\nDESCRIPTION: Illustrates calling the kernel conversion module as a regular Python function for automated or scripted bulk processing. 'main' is invoked with test arguments specifying password (for encrypted 3D components), application type (e.g., 'HFSS'), solution type (e.g., 'Modal'), and the path to the file or directory to process. Requires the 'ansys.aedt.core.workflows.project.kernel_converter' Python module and appropriate permissions. Outputs new converted files (and CSV reports) as described in the documentation.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_extensions_doc/project/kernel_convert.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.workflows.project.kernel_converter import main\n\nmain(test_args = {\"password\": \"my_pwd\",\n                \"application\": \"HFSS\",\n                \"solution\": \"Modal\",\n                \"file_path\": \"C:\\\\my_path\\\\file_containing_projects\"})\n```\n\n----------------------------------------\n\nTITLE: Creating HFSS Cable Geometry from JSON using PyAEDT\nDESCRIPTION: This Python script demonstrates how to instantiate an Ansys HFSS session using `ansys.aedt.core.Hfss`, load cable properties from a specified JSON file using `ansys.aedt.core.modules.cable_modeling.Cable`, generate the cable geometry within HFSS using the `create_cable()` method, and finally release the HFSS desktop session. It depends on the `ansys-aedt-core` library and requires a valid JSON file ('set_cable_properties.json' in this example) defining the cable parameters.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_file_data/cable.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Hfss\nfrom ansys.aedt.core.modules.cable_modeling import Cable\nfrom ansys.aedt.core.generic.DataHandlers import json_to_dict\nhfss = Hfss()\ncable = Cable(hfss,\"set_cable_properties.json\"))\ncable.create_cable()\nhfss.release_desktop()\n```\n\n----------------------------------------\n\nTITLE: Git Clone Command Reference in Markdown\nDESCRIPTION: Reference to the git clone command used in the contribution workflow to download a forked repository to the local machine.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`git clone`\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving AEDT Project in Graphical Mode\nDESCRIPTION: This code shows how to launch the latest installed version of AEDT in graphical mode, create a Circuit project, and save it to a specified path. It also demonstrates how to properly release the desktop when finished.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/intro.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Launch the latest installed version of AEDT in graphical mode.\nimport ansys.aedt.core\ncir =  ansys.aedt.core.Circuit(non_graphical=False)\ncir.save_project(my_path)\n...\ncir.release_desktop(close_projects=True, close_desktop=True)\n# Desktop is released here.\n```\n\n----------------------------------------\n\nTITLE: Launching Kernel Converter Script via CLI - Bash\nDESCRIPTION: Runs the kernel conversion extension from the terminal, enabling batch conversion of AEDT and A3DCOMP files via command-line interface. The script is compatible with Python environments set up for AEDT. Adjust 'path/to/pyaedt/workflows/project/kernel_converter.py' to match your actual installation path.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_extensions_doc/project/kernel_convert.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython.exe path/to/pyaedt/workflows/project/kernel_converter.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying Local Mesh Region in Icepak with PyAEDT\nDESCRIPTION: This snippet demonstrates creating a local mesh region using the 'assign_mesh_region()' method and modifying its subregion's dimensions, showcasing similar strategies employed for both global and local mesh settings.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmesh_region = ipk.mesh.assign_mesh_region(name=object_name)\n```\n\nLANGUAGE: python\nCODE:\n```\nsubregion = mesh_region.assignment\nsubregion.positive_z_padding_type = \"Absolute Offset\"\nsubregion.positive_z_padding = \"5 mm\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Parts in Local Mesh Subregion of Icepak Using PyAEDT\nDESCRIPTION: This snippet illustrates accessing parts included in a local mesh subregion within Icepak, focusing on how to navigate through mesh operations to inspect or modify the enlisted components.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsubregion.parts\n```\n\n----------------------------------------\n\nTITLE: Running PyAEDT Extension from Python Script\nDESCRIPTION: Illustrates running the PyAEDT extension from within a Python script by setting necessary environment variables and invoking the main function directly. Requires the ansys.aedt.core package and environment setup.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_extensions_doc/commandline.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nimport os\nfrom ansys.aedt.core.workflows.project.import_nastran import main\nfile_path = \\\"my_file.stl\\\"\nhfss = ansys.aedt.core.Hfss()\n# Specify the AEDT session to connect\nos.environ[\\\"PYAEDT_SCRIPT_PORT\\\"] = str(hfss.desktop_class.port)\nos.environ[\\\"PYAEDT_SCRIPT_VERSION\\\"] = hfss.desktop_class.aedt_version_id\n# Launch extension\nmain({\\\"file_path\\\": file_path, \\\"lightweight\\\": True, \\\"decimate\\\": 0.0, \\\"planar\\\": True, \\\"is_test\\\": False})\n```\n\n----------------------------------------\n\nTITLE: Importing Circuit Class (New Path) in Python\nDESCRIPTION: This Python code demonstrates the updated import statement required to access the `Circuit` class in PyAEDT version 1.0 and later. It reflects the codebase restructuring, changing the import source from `pyaedt` to the new `ansys.aedt.core` namespace.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import Circuit\n```\n\n----------------------------------------\n\nTITLE: Managing Files on Remote Server\nDESCRIPTION: Examples for uploading, downloading, and opening files on the remote server using the PyAEDT client connection. The file manager functionality allows transferring files between client and server machines.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/ClientServer.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncl1.filemanager.upload(local_path, remote_path)\nfile_content = cl1.open_file(remote_file)\n```\n\n----------------------------------------\n\nTITLE: Obtaining PyAEDT Extension Arguments from Command Line - Batch\nDESCRIPTION: Executes the Python script with the --help option to display available arguments for the PyAEDT extension on the command line. Requires Python and the PyAEDT package.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_extensions_doc/commandline.rst#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\npython.exe path/to/pyaedt/workflows/project/import_nastran.py --help\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Settings for PyAEDT with YAML (YAML)\nDESCRIPTION: This YAML configuration defines various adjustable parameters for PyAEDT, controlling logging, LSF interaction, environment variables, and general operational behaviors. No language prerequisites are needed other than awareness that PyAEDT will read the YAML at initialization if its path is set via the \"PYAEDT_LOCAL_SETTINGS_PATH\" environment variable, or found in user default folders. Parameters influence logging verbosity, file locations, LSF job control, feature enabling via environment variables, and several internal behaviors (such as lazy loading and error handling). All fields can be selectively overridden by the user, with comments clarifying function and expected values for each key. The YAML only adjusts those aspects allowed by the Settings documentation and does not support dynamic or code-derived values.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/settings.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Settings related to logging\\nlog:\\n    # Enable or disable the logging of EDB API methods\\n    enable_debug_edb_logger: false\\n    # Enable or disable the logging of the geometry operators\\n    enable_debug_geometry_operator_logger: false\\n    # Enable or disable the logging of the gRPC API calls\\n    enable_debug_grpc_api_logger: false\\n    # Enable or disable the logging of internal methods\\n    enable_debug_internal_methods_logger: false\\n    # Enable or disable the logging at debug level\\n    enable_debug_logger: false\\n    # Enable or disable the logging of methods' arguments at debug level\\n    enable_debug_methods_argument_logger: false\\n    # Enable or disable the logging to the AEDT message window\\n    enable_desktop_logs: true\\n    # Enable or disable the logging to a file\\n    enable_file_logs: true\\n    # Enable or disable the global PyAEDT log file located in the global temp folder\\n    enable_global_log_file: true\\n    # Enable or disable the local PyAEDT log file located in the ``projectname.pyaedt`` project folder\\n    enable_local_log_file: false\\n    # Enable or disable the logging overall\\n    enable_logger: true\\n    # Enable or disable the logging to STDOUT\\n    enable_screen_logs: true\\n    # Global PyAEDT log file path\\n    global_log_file_name: null\\n    # Global PyAEDT log file size in MB\\n    global_log_file_size: 10\\n    # Date format of the log entries\\n    logger_datefmt: '%Y/%m/%d %H.%M.%S'\\n    # PyAEDT log file path\\n    logger_file_path: null\\n    # Message format of the log entries\\n    logger_formatter: '%(asctime)s:%(destination)s:%(extra)s%(levelname)-8s:%(message)s'\\n    # Path to the AEDT log file\\n    aedt_log_file: null\\n\\n# Settings related to Linux systems running LSF scheduler\\nlsf:\\n    # Command to launch in the LSF Scheduler\\n    custom_lsf_command: null\\n    # Command to launch the task in the LSF Scheduler\\n    lsf_aedt_command: 'ansysedt'\\n    # Number of LSF cores\\n    lsf_num_cores: 2\\n    # Operating system string\\n    lsf_osrel: null\\n    # LSF queue name\\n    lsf_queue: null\\n    # RAM allocated for the LSF job\\n    lsf_ram: 1000\\n    # Timeout in seconds for trying to start the interactive session\\n    lsf_timeout: 3600\\n    # Value passed in the LSF 'select' string to the ui resource\\n    lsf_ui: null\\n    # Enable or disable use LSF Scheduler\\n    use_lsf_scheduler: false\\n\\n# Settings related to environment variables thare are set before launching a new AEDT session\\n# This includes those that enable the beta features !\\naedt_env_var:\\n    ANSYSEM_FEATURE_F335896_MECHANICAL_STRUCTURAL_SOLN_TYPE_ENABLE: '1'\\n    ANSYSEM_FEATURE_F395486_RIGID_FLEX_BENDING_ENABLE: '1'\\n    ANSYSEM_FEATURE_F538630_MECH_TRANSIENT_THERMAL_ENABLE: '1'\\n    ANSYSEM_FEATURE_F545177_ECAD_INTEGRATION_WITH_APHI_ENABLE: '1'\\n    ANSYSEM_FEATURE_F650636_MECH_LAYOUT_COMPONENT_ENABLE: '1'\\n    ANSYSEM_FEATURE_S432616_LAYOUT_COMPONENT_IN_3D_ENABLE: '1'\\n    ANSYSEM_FEATURE_SF159726_SCRIPTOBJECT_ENABLE: '1'\\n    ANSYSEM_FEATURE_SF222134_CABLE_MODELING_ENHANCEMENTS_ENABLE: '1'\\n    ANSYSEM_FEATURE_SF6694_NON_GRAPHICAL_COMMAND_EXECUTION_ENABLE: '1'\\n    ANS_MESHER_PROC_DUMP_PREPOST_BEND_SM3: '1'\\n    # Environment variable used in Linux to skip the dependency check for speed\\n    # ANS_NODEPCHECK: '1'\\n\\ngeneral:\\n    # Enable or disable the lazy load\\n    lazy_load: true\\n    # Enable or disable the lazy load dedicated to objects associated to the modeler\\n    objects_lazy_load: true\\n    # AEDT installation path\\n    aedt_install_dir: null\\n    # AEDT version in the form ``\"2023.x\"``\\n    aedt_version: null\\n    # Timeout in seconds for trying to launch AEDT\\n    desktop_launch_timeout: 120\\n    # Enable or disable bounding box evaluation by exporting a SAT file\\n    disable_bounding_box_sat: false\\n    # Optional path for the EDB DLL file\\n    edb_dll_path: null\\n    # Enable or disable the internal PyAEDT error handling\\n    enable_error_handler: true\\n    # Enable or disable the use of Pandas to export dictionaries and lists\\n    enable_pandas_output: false\\n    # Enable or disable the check of the project path\\n    force_error_on_missing_project: false\\n    # Number of gRPC API retries\\n    number_of_grpc_api_retries: 6\\n    # Enable or disable the release of AEDT on exception\\n    release_on_exception: true\\n    # Time interval between the retries by the ``_retry_n_times`` inner method\\n    retry_n_times_time_interval: 0.1\\n    # Enable or disable the use of the gRPC API or legacy COM object\\n    use_grpc_api: null\\n    # Enable or disable the use of multiple desktop sessions in the same Python script\\n    use_multi_desktop: false\\n    # Enable or disable the use of the flag `-waitforlicense` when launching Electronic Desktop\\n    wait_for_license: false\\n    # State whether the remote API is used or not\\n    remote_api: false\\n    # Specify the port the RPyC server is to listen to\\n    remote_rpc_service_manager_port: 17878\\n    # Specify the path to AEDT in the server\\n    pyaedt_server_path: ''\\n    # Remote temp folder\\n    remote_rpc_session_temp_folder: ''\\n    # Block figure plot during python script run\\n    block_figure_plot: false\\n    # Skip license check during Desktop initialization\\n    skip_license_check: false\\n\n```\n\n----------------------------------------\n\nTITLE: Connecting HFSS to Remote AEDT Instance\nDESCRIPTION: Code to connect an HFSS application to a remote AEDT session previously established with the client session. Uses the server name and port from the client connection object.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/ClientServer.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhfss = Hfss(machine=cl1.server_name, port=cl1.aedt_port)\n# your code here\n```\n\n----------------------------------------\n\nTITLE: Passing File Argument without Launching PyAEDT UI - Shell\nDESCRIPTION: Executes a Python script passing a file path as an argument, without launching the UI, using shell commands. Requires setting environment variables and having Python and the PyAEDT package.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_extensions_doc/commandline.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport PYAEDT_SCRIPT_PORT=50051\nexport PYAEDT_SCRIPT_VERSION=2025.1\npython.exe path/to/pyaedt/workflows/project/import_nastran.py --file_path=\\\"my_file.stl\\\"\n```\n\n----------------------------------------\n\nTITLE: Starting AEDT in gRPC Listening Mode\nDESCRIPTION: Command line instructions for starting AEDT in gRPC listening mode on a remote machine. Shows both Windows and Linux versions of the command to start AEDT listening on a specific port.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/ClientServer.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npath/to/ANSYSEM/v222/Win64/ansysedt.exe -grpcsrv portnumber  #windows\npath/to/ANSYSEM/v222/Lin64/ansysedt -grpcsrv portnumber   #linux\n```\n\n----------------------------------------\n\nTITLE: Configuring PyAEDT to Use Legacy COM Interface\nDESCRIPTION: Code snippet demonstrating how to disable the default gRPC interface and enable the legacy COM interface in PyAEDT settings. This configuration is only applicable for Windows systems using .NET COM objects.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/versioning.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.generic.settings import settings\n\nsettings.use_grpc_api = False\n```\n\n----------------------------------------\n\nTITLE: Accessing Ansys EDB Proprietary Layout Format\nDESCRIPTION: This snippet shows two methods to access the Ansys EDB proprietary layout format: using the main ansys.aedt.core module or directly using the pyedb module. Both approaches allow working with EDB layout files.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/intro.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Launch the latest installed version of EDB.\nimport ansys.aedt.core\nedb = ansys.aedt.core.Edb(\"mylayout.aedb\")\n\n# User can launch EDB directly from the PyEDB class.\n\nimport pyedb\nedb = pyedb.Edb(\"mylayout.aedb\")\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Ansys PyAEDT Core\nDESCRIPTION: This snippet imports necessary modules and sets configurations for Ansys PyAEDT. It ensures the PyAEDT environment does not use gRPC for API communication. Dependencies include the 'ansys.aedt.core' module, and it must be executed in an environment where Ansys PyAEDT is available.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/src/pyaedt/workflows/installer/jupyter_template.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\\nimport atexit\\nfrom ansys.aedt.core import *\\nimport ansys.aedt.core\\nansys.aedt.core.settings.use_grpc_api=False\n```\n\n----------------------------------------\n\nTITLE: Logging Messages in PyAEDT\nDESCRIPTION: Examples of using the Messenger logging tool in PyAEDT to write messages to AEDT message windows and log files.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Contributing.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.logger.error(\"This is an error message.\")\nself.logger.warning(\"This is a warning message.\")\nself.logger.info(\"This is an info message.\")\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT from a Wheelhouse\nDESCRIPTION: Command to install PyAEDT from a local wheelhouse, useful for offline installations or in environments with restricted internet access. This points pip to a local directory containing all required packages.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install --no-cache-dir --no-index --find-links=file:///<path_to_wheelhouse>/PyAEDT-v<release_version>-wheelhouse-Windows-3.10 pyaedt[all]\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT from Conda-Forge in a Conda Environment\nDESCRIPTION: Command to install PyAEDT from Conda-Forge within an activated conda environment. This is an alternative to using pip within the conda environment.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge pyaedt\n```\n\n----------------------------------------\n\nTITLE: Using Exception Handler Decorator in PyAEDT\nDESCRIPTION: Example of using the @pyaedt_function_handler decorator to handle exceptions in PyAEDT methods.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Contributing.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pyaedt_function_handler()\ndef my_method(self, var):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Conda Virtual Environment for PyAEDT\nDESCRIPTION: Command to create a dedicated conda virtual environment for PyAEDT with Python 3.10. This isolates PyAEDT and its dependencies from other Python installations.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nconda create --name pyaedt_py310 python=3.10\n```\n\n----------------------------------------\n\nTITLE: Activating PyAEDT Conda Virtual Environment\nDESCRIPTION: Command to activate the previously created conda virtual environment for PyAEDT. This switches the terminal to use the Python installation in the virtual environment.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nconda activate pyaedt_py310\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT using pip (shell)\nDESCRIPTION: Installs the PyAEDT package on supported CPython versions (3.8 to 3.12) directly from the Python Package Index (PyPI) using pip. This is the standard method for quickly setting up PyAEDT and its core dependencies on most systems. Run this command in your terminal or command prompt; no additional prerequisites are needed beyond a compatible version of Python and pip.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install pyaedt\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT from Conda-Forge\nDESCRIPTION: Command to install PyAEDT from the Conda-Forge channel, which is useful for users who prefer using conda package management over pip.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconda install -c conda-forge pyaedt\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies and Installation Targets in Python\nDESCRIPTION: This code snippet defines various dependencies and installation requirements for a Python package. It specifies different dependency groups like 'all', 'full', and 'test', each with their specific package requirements. The script also sets up extra installation requirements based on these dependency groups.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/changelog.d/5997.dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmin_reqs = [\"numpy\", \"pythonnet\", \"pywin32;platform_system=='Windows'\", \"pyvista\"]\n\nextras_require = {}\n\nextras_require[\"all\"] = [\n    \"ipython\",\n    \"matplotlib\",\n    \"tqdm\",\n    \"netifaces\",\n    \"ipykernel\",\n]\n\nextras_require[\"full\"] = extras_require[\"all\"] + [\"jupyter\", \"pytest\"]\n\nextras_require[\"test\"] = [\n    \"pytest\",\n    \"pytest-cov\",\n]\n\nsetup_requires = []\ninstall_requires = min_reqs\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT from PyPI using pip\nDESCRIPTION: Simple pip command to install PyAEDT package from PyPI repository. This is the standard installation method for users who have internet access and want to use PyAEDT with CPython.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install pyaedt\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing PyAEDT in Development Mode\nDESCRIPTION: Commands to clone the PyAEDT repository from GitHub and install it in development mode using pip.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Contributing.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ansys/pyaedt\ncd pyaedt\npython -m pip install --upgrade pip\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Setting Material Name for Global Region in Icepak Using PyAEDT\nDESCRIPTION: This snippet shows how to modify the 'material_name' attribute of the Region object within Icepak's global mesh settings, changing the material of the region's contained environment to 'Carbon Monoxide'.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nglob_reg = glob_msh.global_region\nglob_reg.object.material_name = \"Carbon Monoxide\"\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT with All Dependencies\nDESCRIPTION: Command to install PyAEDT with all optional dependencies. This ensures that all features of PyAEDT will be available without needing to install additional packages later.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npip install pyaedt[all]\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT Using Wheelhouse\nDESCRIPTION: Command to install PyAEDT and its dependencies using a local wheelhouse directory without internet access.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Troubleshooting.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> pip install --no-cache-dir --no-index --find-links=/path/to/pyaedt/wheelhouse pyaedt\n```\n\n----------------------------------------\n\nTITLE: Assigning Mesh Levels in Icepak Using PyAEDT\nDESCRIPTION: Assign mesh levels to objects in Icepak using the 'assign_mesh_level()' method, specifying mesh order mappings for various objects like 'Box1' and 'Cylinder1'. This aids in controlling mesh granularity across designs.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nipk.mesh.assign_mesh_level(mesh_order={\"Box1\": 2, \"Cylinder1\": 4})\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT with .NET Dependencies\nDESCRIPTION: Command to install PyAEDT with just the .NET dependencies, which is useful for users who don't need gRPC functionality but require the .NET components.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npip install pyaedt[dotnet]\n```\n\n----------------------------------------\n\nTITLE: Starting AEDT gRPC Server on Linux\nDESCRIPTION: Command line instruction to start AEDT as a gRPC server on Linux with a specified port number.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Troubleshooting.rst#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npath\\to\\AnsysEM\\v251\\Lin64\\ansysedt -grpcsrv 50352\n```\n\n----------------------------------------\n\nTITLE: Initializing PyAEDT Process IDs\nDESCRIPTION: This code snippet initializes the process ID and version for Ansys PyAEDT and prints a message to indicate the loading of the PyAEDT console. It expects 'PROCESSID' and 'AEDTVERSION' to be predefined constants and does not return values.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/src/pyaedt/workflows/installer/jupyter_template.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\naedt_process_id = PROCESSID\\nversion = 'AEDTVERSION'\\nprint(\"Loading the PyAEDT Console.\")\n```\n\n----------------------------------------\n\nTITLE: Adding PyAEDT to AEDT Environment\nDESCRIPTION: Python code to integrate PyAEDT with your AEDT installation. This configures AEDT to recognize and use your PyAEDT installation by adding it to the personalib directory.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core.workflows.installer.pyaedt_installer import add_pyaedt_to_aedt\nadd_pyaedt_to_aedt(\"your_aedt_version\", r\"path_to_personalib\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Contributors List\nDESCRIPTION: A markdown formatted list of project contributors, organized hierarchically with the project lead section followed by individual contributors section. Each contributor is listed with their name linked to their GitHub profile.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/CONTRIBUTORS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributors\n\n## Project Lead\n\n* [Massimo Capodiferro](https://github.com/maxcapodi78)\n\n## Individual Contributors\n\n* [A-Phamfam](https://github.com/A-Phamfam)\n* [Abdun Nur](https://github.com/anur7)\n[...remaining contributors...]\n```\n\n----------------------------------------\n\nTITLE: Defining Port Pairs and Modes in CSV\nDESCRIPTION: This CSV data defines multiple sets of port configurations. Each line represents a configuration, specifying two primary ports (e.g., Port1, Port2), followed by numerical flags (1, 0), a differential pair identifier (e.g., Diff1) with its associated value (e.g., 100), and a common mode pair identifier (e.g., Comm1) with its value (e.g., 25). This format is likely used to configure port properties, impedances, or modes within an Ansys PyAEDT simulation.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/tests/system/general/example_models/T41/differential_pairs_definition.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nPort1,Port2,1,0,Diff1,100,Comm1,25\nPort3,Port4,1,0,Diff2,253,Comm2,78\nPort5,Port6,1,0,Diff3,100,Comm3,25\n```\n\n----------------------------------------\n\nTITLE: Setting up Linux Environment Variables for PyAEDT\nDESCRIPTION: Shell commands to set the required environment variables for using PyAEDT on Linux systems. These variables help PyAEDT locate the AEDT installation and necessary libraries.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport ANSYSEM_ROOT222=/path/to/AedtRoot/AnsysEM/v222/Linux64\nexport LD_LIBRARY_PATH=$ANSYSEM_ROOT222/common/mono/Linux64/lib64:$ANSYSEM_ROOT222/Delcross:$LD_LIBRARY_PATH\n```\n\n----------------------------------------\n\nTITLE: Git Checkout Command Reference in Markdown\nDESCRIPTION: Reference to the git checkout command used to switch to a newly created branch in the Git workflow.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`git checkout`\n```\n\n----------------------------------------\n\nTITLE: Reusing Mesh Files in Icepak Through PyAEDT\nDESCRIPTION: This snippet shows how to assign reusable mesh files to objects using the 'assign_mesh_reuse()' method within Icepak, identifying particular components like 'Box1' and 'Cylinder1' to support efficient mesh management.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nipk.mesh.assign_mesh_reuse(assignment=[\"Box1\", \"Cylinder1\"], level=mesh_path)\n```\n\n----------------------------------------\n\nTITLE: Upgrading PyAEDT to the Latest Version\nDESCRIPTION: Command to upgrade an existing PyAEDT installation to the latest version available on PyPI. The -U flag tells pip to upgrade the package if it's already installed.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Installation.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pyaedt\n```\n\n----------------------------------------\n\nTITLE: Git Push Command Example in Markdown\nDESCRIPTION: Example of the git push command used to upload local commits to a remote repository in the Git workflow.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`git push origin <branch-name>`\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT using conda (shell)\nDESCRIPTION: Installs the PyAEDT package from the conda-forge channel using conda. This method is suitable for users managing Python environments with Anaconda/Miniconda and ensures consistency with other scientific Python packages. This command should be run in your terminal within your target conda environment. Requires an existing conda installation.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge pyaedt\n```\n\n----------------------------------------\n\nTITLE: Installing and Running pre-commit for Code Style Compliance\nDESCRIPTION: Commands to install the pre-commit package and run it to ensure code style compliance in PyAEDT.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Contributing.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Creating APT Preferences for Microsoft .NET Packages\nDESCRIPTION: Configuration for an APT preferences file to prioritize Microsoft's .NET packages over Ubuntu's default packages. This ensures compatibility by \"demoting\" the Ubuntu packages.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nPackage: dotnet* aspnet* netstandard*\nPin: origin \"archive.ubuntu.com\"\nPin-Priority: -10\n\nPackage: dotnet* aspnet* netstandard*\nPin: origin \"security.ubuntu.com\"\nPin-Priority: -10\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for HFSS 3D Layout in Python\nDESCRIPTION: This snippet imports necessary modules and classes for working with HFSS 3D Layout designs. It includes imports from the pyaedt library, which provides Python bindings for Ansys Electronics Desktop.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/changelog.d/6057.miscellaneous.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import absolute_import  # noreorder\nfrom pyaedt.application.Analysis3DLayout import FieldAnalysis3DLayout\nfrom pyaedt.generic.general_methods import generate_unique_name\nfrom pyaedt.modeler.Primitives3DLayout import Primitives3DLayout\nfrom pyaedt.modeler.Primitives3DLayout import circle\nfrom pyaedt.modeler.Primitives3DLayout import line\nfrom pyaedt.modeler.Primitives3DLayout import polygon\nfrom pyaedt.modeler.Primitives3DLayout import rectangle\nfrom pyaedt.modeler.Primitives3DLayout import regular_polygon\nfrom pyaedt.modeler.Primitives3DLayout import spiral\nfrom pyaedt.modeler.Primitives3DLayout import wirebond\n```\n\n----------------------------------------\n\nTITLE: Numpy Compatibility Fix\nDESCRIPTION: Example showing how to avoid Numpy compatibility issues by importing PyAEDT before Numpy.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Troubleshooting.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ansys.aedt.core\nimport numpy\n```\n\n----------------------------------------\n\nTITLE: Importing Circuit Class (Old Path) in Python\nDESCRIPTION: This Python code shows the import statement used to access the `Circuit` class in PyAEDT versions prior to 1.0. It references the old `pyaedt` top-level package. This import path becomes invalid due to the codebase restructuring introduced in version 1.0.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyaedt import Circuit\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Mesh Region in Icepak Using PyAEDT\nDESCRIPTION: This snippet shows how to access the global mesh region within Icepak using PyAEDT. The global mesh region's settings can be modified through the 'settings' dictionary-like property. The snippet is used to adjust settings such as 'MeshRegionResolution'.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/mesh.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nglob_msh = ipk.mesh.global_mesh_region\n```\n\nLANGUAGE: python\nCODE:\n```\nglob_msh.settings[\"MeshRegionResolution\"] = 3\n```\n\n----------------------------------------\n\nTITLE: Verifying gRPC Interface Setup\nDESCRIPTION: Python script to verify the AEDT API setup and environment variables using the native Electronics Desktop API.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Troubleshooting.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.append(r\"ANSYSEM_ROOT251\\PythonFiles\\DesktopPlugin\")\nimport ScriptEnv\nprint(dir())\nScriptEnv.Initialize(\"\", False, \"\", 50051)\nprint(dir())\n```\n\n----------------------------------------\n\nTITLE: Importing FieldAnalysis3DLayout (Old Path/Name) in Python\nDESCRIPTION: This Python snippet shows the import statement for `FieldAnalysis3DLayout` used before PyAEDT 1.0. This path (`pyaedt.application.Analysis3DLayout`) is affected by both the general codebase restructuring and the specific renaming of the `Analysis3DLayout.py` file to `analysis_3d_layout.py` for PEP 8 compliance in version 1.0.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyaedt.application.Analysis3DLayout import FieldAnalysis3DLayout\n```\n\n----------------------------------------\n\nTITLE: Installing PyAEDT with all optional dependencies using pip (shell)\nDESCRIPTION: Installs PyAEDT along with extra optional dependencies such as matplotlib, numpy, pandas, and pyvista. This command is recommended for users who want the full set of visualization and data-processing features integrated with PyAEDT. Execute this in your shell environment; ensure you have a compatible version of Python and pip available.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install pyaedt[all]\n```\n\n----------------------------------------\n\nTITLE: Starting AEDT gRPC Server on Windows\nDESCRIPTION: Command line instruction to start AEDT as a gRPC server on Windows with a specified port number.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Troubleshooting.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npath\\to\\AnsysEM\\v251\\Win64\\ansysedt.exe -grpcsrv 50001\n```\n\n----------------------------------------\n\nTITLE: Expected Deprecation Warning for 'designname' Argument (Text)\nDESCRIPTION: This text block shows the warning message logged by PyAEDT when the `Circuit` class is initialized with the deprecated `designname` argument, as shown in the preceding Python example. The warning advises users to switch to the `design` argument for compatibility with version 1.0 and beyond.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPyAEDT WARNING: Argument `designname` is deprecated for method `__init__`; use `design` instead.\n```\n\n----------------------------------------\n\nTITLE: Launching PyAEDT Extension UI from Command Line - Batch\nDESCRIPTION: Sets necessary environment variables and executes a Python script to launch the PyAEDT extension UI from the command line using Windows batch commands. Requires Python and the PyAEDT package installed.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_extensions_doc/commandline.rst#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nSET PYAEDT_SCRIPT_PORT=50051\nSET PYAEDT_SCRIPT_VERSION=2025.1\npython.exe path/to/pyaedt/workflows/project/import_nastran.py\n```\n\n----------------------------------------\n\nTITLE: Locating Python Interpreter Path in AEDT Installation\nDESCRIPTION: Shows the path to the Python 3.10 interpreter in the AEDT 2025 R1 installation.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/Getting_started/Troubleshooting.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npath\\to\\AnsysEM\\v251\\commonfiles\\CPython\\3_10\\winx64\\Release\\python\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft .NET SDK on Ubuntu\nDESCRIPTION: Command to update APT repositories and install the Microsoft .NET SDK version 6.0. This ensures proper setup and compatibility with PyAEDT on Linux systems.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/release_1_0.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install -y dotnet-sdk-6.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving AEDT Process ID and Version in Python\nDESCRIPTION: Assigns the AEDT process ID and version string to variables. These values (`PROCESSID`, `AEDTVERSION`) are expected to be placeholders substituted or defined by the environment calling this script (likely the AEDT scripting interface). It also prints a message indicating the start of the PyAEDT console loading process.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/src/ansys/aedt/core/workflows/installer/jupyter_template.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naedt_process_id = PROCESSID\nversion = 'AEDTVERSION'\nprint(\"Loading the PyAEDT Console.\")\n```\n\n----------------------------------------\n\nTITLE: File Utility Method References in PyAEDT\nDESCRIPTION: List of file utility methods available in the ansys.aedt.core.generic.file_utils module. These methods handle various file operations including path normalization, file checking, name generation, and data reading/writing for multiple formats.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/generic.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nnormalize_path\nget_filename_without_extension\ncheck_and_download_file\ncheck_if_path_exists\ncheck_and_download_folder\ngenerate_unique_name\ngenerate_unique_folder_name\ngenerate_unique_project_name\nrecursive_glob\nis_project_locked\nremove_project_lock\nopen_file\nread_json\nread_toml\nread_csv\nread_csv_pandas\nwrite_csv\nread_tab\nread_xlsx\nget_dxf_layers\nread_component_file\nparse_excitation_file\ntech_to_control_file\nread_configuration_file\nwrite_configuration_file\ncompute_fft\n```\n\n----------------------------------------\n\nTITLE: Git Add Command Reference in Markdown\nDESCRIPTION: Reference to the git add command used to stage files before committing changes in the Git workflow.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`git add`\n```\n\n----------------------------------------\n\nTITLE: Git Commit Command Example in Markdown\nDESCRIPTION: Example of the git commit command with a message parameter used to commit staged changes in the Git workflow.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`git commit -m \"your message\"`\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Pairs and Impedances in CSV\nDESCRIPTION: This CSV data defines relationships between pairs of ports (e.g., Port1, Port2). Each line specifies the two port names, two numerical values (possibly indicating pair or mode type, like 1 for differential, 0 for common), an identifier for the differential pair (e.g., Diff1), the differential impedance value (e.g., 100), an identifier for the common mode pair (e.g., Comm1), and the common mode impedance value (e.g., 25). This format is likely used as input for configuring ports in an electromagnetic simulation.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/tests/system/general/example_models/T21/differential_pairs_definition.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nPort1,Port2,1,0,Diff1,100,Comm1,25\nPort3,Port4,1,0,Diff2,253,Comm2,78\nPort5,Port6,1,0,Diff3,100,Comm3,25\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Fields Calculator in PyAEDT - Python\nDESCRIPTION: This Python snippet demonstrates how to utilize the Advanced Fields Calculator in PyAEDT. It showcases connecting to an AEDT session, adding an expression to the catalog, plotting expressions, and deleting expressions. Dependencies include ansys.aedt.core library, and it uses the environmental variables for specifying the AEDT session.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/User_guide/pyaedt_extensions_doc/project/advanced_fields_calculator.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ansys.aedt.core\nhfss = ansys.aedt.core.Hfss()\n\n# Specify the AEDT session to connect\nos.environ[\"PYAEDT_SCRIPT_PORT\"] = str(hfss.desktop_class.port)\nos.environ[\"PYAEDT_SCRIPT_VERSION\"] = hfss.desktop_class.aedt_version_id\n\n# Add an existing expression in the catalog\nname = hfss.post.fields_calculator.add_expression(\"voltage_line\", \"Polyline1\")\n\n# Create plots in AEDT specified in the .toml\nhfss.post.fields_calculator.expression_plot(\"voltage_line\", \"Polyline1\", [name])\n\n# Delete expression\nhfss.post.fields_calculator.delete_expression(name)\n\nhfss.release_desktop(False, False)\n```\n\n----------------------------------------\n\nTITLE: Initializing AEDT Desktop Explicitly in Python\nDESCRIPTION: Example showing explicit initialization of the AEDT Desktop using the Desktop class. Demonstrates launching desktop with specific version and configuration parameters before creating a Circuit application instance.\nSOURCE: https://github.com/ansys/pyaedt/blob/main/doc/source/API/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ansys.aedt.core import launch_desktop, Circuit\nd = launch_desktop(specified_version=\"2025.1\",\n                   non_graphical=False,\n                   new_desktop_session=True,\n                   close_on_exit=True,\n                   student_version=False):\n circuit = Circuit()\n ...\n # Any error here should be caught by the desktop app.\n ...\n d.release_desktop()\n```"
  }
]