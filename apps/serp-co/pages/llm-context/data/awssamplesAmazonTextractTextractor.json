[
  {
    "owner": "aws-samples",
    "repo": "amazon-textract-textractor",
    "content": "TITLE: Opening Textract JSON Response with Document.open()\nDESCRIPTION: Demonstrates how to use Document.open() to parse an existing Textract JSON response from a file path. The path can be a local file path or an S3 path.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/parsing_an_existing_response.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor.entities.document import Document\n\ndocument = Document.open(\"../../../tests/fixtures/saved_api_responses/test_table.json\")\n```\n\n----------------------------------------\n\nTITLE: Performing Text Recognition with Amazon Textract in Python\nDESCRIPTION: Demonstrates how to use Textractor to detect text in a document. The file_source can be an image, list of images, bytes, or S3 path.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# file_source can be an image, list of images, bytes or S3 path\ndocument = extractor.detect_document_text(file_source=\"tests/fixtures/single-page-1.png\")\nprint(document.lines)\n#[Textractor Test, Document, Page (1), Key - Values, Name of package: Textractor, Date : 08/14/2022, Table 1, Cell 1, Cell 2, Cell 4, Cell 5, Cell 6, Cell 7, Cell 8, Cell 9, Cell 10, Cell 11, Cell 12, Cell 13, Cell 14, Cell 15, Selection Element, Selected Checkbox, Un-Selected Checkbox]\n```\n\n----------------------------------------\n\nTITLE: Initializing Textractor for Amazon Textract in Python\nDESCRIPTION: Sets up a Textractor instance for use with Amazon Textract. This instance can be reused for both synchronous and asynchronous requests.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor import Textractor\n\nextractor = Textractor(profile_name=\"default\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Forms from Documents with Amazon Textract in Python\nDESCRIPTION: Demonstrates form extraction using Textractor and how to search for specific keys with fuzzy matching.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor.data.constants import TextractFeatures\n\ndocument = extractor.analyze_document(\n\tfile_source=\"tests/fixtures/form.png\",\n\tfeatures=[TextractFeatures.FORMS]\n)\n# Use document.get() to search for a key with fuzzy matching\ndocument.get(\"email\")\n# [E-mail Address : johndoe@gmail.com]\n```\n\n----------------------------------------\n\nTITLE: Processing Receipts with Amazon Textract in Python\nDESCRIPTION: Demonstrates how to use Textractor to analyze expenses from receipts and extract summary fields like total amount.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndocument = extractor.analyze_expense(file_source=\"tests/fixtures/receipt.jpg\")\nprint(document.expense_documents[0].summary_fields.get(\"TOTAL\")[0].text)\n# '$1810.46'\n```\n\n----------------------------------------\n\nTITLE: Initializing Textractor and Detecting Document Text\nDESCRIPTION: Creates a Textractor instance with default profile and detects text in a document image file.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/interfacing_with_trp2.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor import Textractor\n\nextractor = Textractor(profile_name=\"default\")\n# This path assumes that you are running the notebook from docs/source/notebooks\ndocument = extractor.detect_document_text(\"../../../tests/fixtures/form.png\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Textractor and Detecting Document Text Synchronously\nDESCRIPTION: Creates a Textractor instance using default AWS profile credentials and performs synchronous text detection on a document image. This example uses the DetectDocumentText API which blocks until OCR inference completes.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/simple_ocr.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor import Textractor\n\nextractor = Textractor(profile_name=\"default\")\n# This path assumes that you are running the notebook from docs/source/notebooks\ndocument = extractor.detect_document_text(\"../../../tests/fixtures/form.png\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Tables from Documents with Amazon Textract in Python\nDESCRIPTION: Shows how to use Textractor to extract tables from a document and save them to an Excel file for further processing.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor.data.constants import TextractFeatures\n\ndocument = extractor.analyze_document(\n\tfile_source=\"tests/fixtures/form.png\",\n\tfeatures=[TextractFeatures.TABLES]\n)\n# Saves the table in an excel document for further processing\ndocument.tables[0].to_excel(\"output.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Textractor and Analyzing Expense Document\nDESCRIPTION: Creates a Textractor instance and analyzes an expense document from a file source with image saving enabled.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor import Textractor\n\nextractor = Textractor(profile_name=\"default\")\n\ndocument = extractor.analyze_expense(\n    file_source=\"../../../tests/fixtures/invoice.png\",\n    save_image=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Textract Document Analysis\nDESCRIPTION: Sets up the Textractor client and initiates document analysis for form processing. Uses asynchronous API to analyze a form image and extract key-value pairs.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/exporting_form_data.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom PIL import Image\nfrom textractor import Textractor\nfrom textractor.data.constants import TextractFeatures\n\nextractor = Textractor(profile_name=\"default\")\ndocument = extractor.start_document_analysis(\n    # Here we pass a Pillow image instead of path. This changes nothing as\n    # Textractor supports most input types.\n    file_source=Image.open(\"../../../tests/fixtures/form.png\"),\n    # We specify the features that we want, here, we only want keys and values\n    # therefore we use TextractFeatures.FORMS.\n    features=[TextractFeatures.FORMS],\n    s3_upload_path=\"s3://textract-ocr/temp/\",\n    save_image=True\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing ID Documents with Amazon Textract in Python\nDESCRIPTION: Shows how to use Textractor to analyze ID documents and extract specific fields like first name.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocument = extractor.analyze_id(file_source=\"tests/fixtures/fake_id.png\")\nprint(document.identity_documents[0].get(\"FIRST_NAME\"))\n# 'MARIA'\n```\n\n----------------------------------------\n\nTITLE: Initializing Textract Analysis\nDESCRIPTION: Setting up the Textractor instance and analyzing an ID document image with the analyze_id method\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_id.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor import Textractor\n\nextractor = Textractor(profile_name=\"default\")\n\ndocument = extractor.analyze_id(\n    file_source=\"../../../tests/fixtures/fake_id.png\",\n    save_image=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Extracted Text from Document\nDESCRIPTION: Retrieves the full text content extracted from the document as a single string. This is useful when you only need the raw text without structural information.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/simple_ocr.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocument.text\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor with PDF Support (Pdfium)\nDESCRIPTION: Installs Amazon Textract Textractor with pdfium support for PDF rasterization. This is the recommended method for PDF handling in Textractor.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor[pdfium]\n```\n\n----------------------------------------\n\nTITLE: Initializing Textractor and Analyzing Expense Document\nDESCRIPTION: Creates a Textractor instance and analyzes an expense document from a file source using a default AWS profile.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/going_further.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor import Textractor\n\nextractor = Textractor(profile_name=\"default\")\n# This path assumes that you are running the notebook from docs/source/notebooks\ndocument = extractor.analyze_expense(file_source=\"../../../tests/fixtures/form.png\")\n```\n\n----------------------------------------\n\nTITLE: Processing Document with Textract GeoFinder\nDESCRIPTION: Python script demonstrating how to process a document using Textract GeoFinder, including setting up document analysis, finding phrases, and organizing key-value pairs with hierarchical context. The code processes a patient intake form and adds prefixes to organize the extracted information.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinegeofinder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textractgeofinder.ocrdb import AreaSelection\nfrom textractgeofinder.tgeofinder import KeyValue, TGeoFinder, AreaSelection, SelectionElement\nfrom textractprettyprinter.t_pretty_print import get_forms_string\nfrom textractcaller import call_textract\nfrom textractcaller.t_call import Textract_Features\n\nimport trp.trp2 as t2\n\nimage_filename='./tests/data/patient_intake_form_sample.jpg'\n\nj = call_textract(input_document=image_filename, features=[Textract_Features.FORMS])\n\n\nt_document = t2.TDocumentSchema().load(j)\ndoc_height = 1000\ndoc_width = 1000\ngeofinder_doc = TGeoFinder(j, doc_height=doc_height, doc_width=doc_width)\n\ndef set_hierarchy_kv(list_kv: list[KeyValue], t_document: t2.TDocument, page_block: t2.TBlock, prefix=\"BORROWER\"):\n    for x in list_kv:\n        t_document.add_virtual_key_for_existing_key(key_name=f\"{prefix}_{x.key.text}\",\n                                                    existing_key=t_document.get_block_by_id(x.key.id),\n                                                    page_block=page_block)\n# patient information\npatient_information = geofinder_doc.find_phrase_on_page(\"patient information\")[0]\nemergency_contact_1 = geofinder_doc.find_phrase_on_page(\"emergency contact 1:\", min_textdistance=0.99)[0]\ntop_left = t2.TPoint(y=patient_information.ymax, x=0)\nlower_right = t2.TPoint(y=emergency_contact_1.ymin, x=doc_width)\nform_fields = geofinder_doc.get_form_fields_in_area(\n    area_selection=AreaSelection(top_left=top_left, lower_right=lower_right))\nset_hierarchy_kv(list_kv=form_fields, t_document=t_document, prefix='PATIENT', page_block=t_document.pages[0])\n\nset_hierarchy_kv(list_kv=form_fields, t_document=t_document, prefix='PATIENT', page_block=t_document.pages[0])\n\nprint(get_forms_string(t2.TDocumentSchema().dump(t_document)))\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor via pip (Basic)\nDESCRIPTION: Installs the minimal version of Amazon Textract Textractor using pip. This command installs the core functionality without any optional features.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\n----------------------------------------\n\nTITLE: Converting Line Items to Pandas DataFrame\nDESCRIPTION: Converts the first line items group to a pandas DataFrame for analysis.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nexpense_doc.line_items_groups[0].to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Multi-page Document Query Processing\nDESCRIPTION: Example demonstrating query processing on a multi-page document with specific page targeting\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport textractcaller as tc\nimport trp.trp2 as t2\nimport boto3\n\ntextract = boto3.client('textract', region_name=\"us-east-2\")\nq1 = tc.Query(text=\"What is the employee SSN?\", alias=\"SSN\", pages=[\"1\"])\nq2 = tc.Query(text=\"What is YTD gross pay?\", alias=\"GROSS_PAY\", pages=[\"2\"])\ntextract_json = tc.call_textract(\n    input_document=\"s3://amazon-textract-public-content/blogs/2-pager.pdf\",\n    queries_config=tc.QueriesConfig(queries=[q1, q2]),\n    features=[tc.Textract_Features.QUERIES],\n    force_async_api=True,\n    boto3_textract_client=textract)\nt_doc: t2.TDocument = t2.TDocumentSchema().load(textract_json)  # type: ignore\nfor page in t_doc.pages:\n    query_answers = t_doc.get_query_answers(page=page)\n    for x in query_answers:\n        print(f\"{x[1]},{x[2]}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Line Item Groups\nDESCRIPTION: Retrieves line item groups from the expense document.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nexpense_doc.line_items_groups\n```\n\n----------------------------------------\n\nTITLE: Amazon Textract with S3 Document Source\nDESCRIPTION: Shows how to run the amazon-textract tool with a document stored in an S3 bucket.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --input-document \"s3://somebucket/someprefix/someobjectname.png\"\n```\n\n----------------------------------------\n\nTITLE: S3 PDF Processing with Job ID\nDESCRIPTION: Example showing how to process PDF from S3 and retrieve job ID instead of JSON response\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller import call_textract\nresponse = call_textract(input_document=\"s3://some-bucket/some-document.pdf\", return_job_id=True)\njob_id = response['JobId']\n```\n\n----------------------------------------\n\nTITLE: Accessing Document Key-Values\nDESCRIPTION: Shows how to access extracted key-value pairs from the processed document.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/exporting_form_data.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# All key-values present in the document\ndocument.key_values\n```\n\n----------------------------------------\n\nTITLE: Analyzing a New Image with Textract in Python\nDESCRIPTION: This snippet opens a new image file 'vbat2.png' and analyzes it using Textract, extracting tables and saving the image.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimage = Image.open(\"../../../tests/fixtures/vbat2.png\")\nimage\n\ndocument = extractor.analyze_document(\n    file_source=image,\n    features=[TextractFeatures.TABLES], \n    save_image=True\n)\n```\n\n----------------------------------------\n\nTITLE: Improving Table Representation for AI Querying in Python\nDESCRIPTION: This code modifies the table linearization config to duplicate text in merged cells, potentially improving AI comprehension of the table structure.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmarkdown_table_with_duplication = document.tables[0].get_text(TextLinearizationConfig(table_linearization_format='markdown', table_duplicate_text_in_merged_cells=True))\n```\n\n----------------------------------------\n\nTITLE: Amazon Textract with Local File System Document\nDESCRIPTION: Shows how to run the amazon-textract tool with a document stored in the local file system.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --input-document \"./somepath/somefilename.png\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Key-Values to CSV\nDESCRIPTION: Exports extracted key-value pairs to a CSV file, with options to include or exclude different types of form fields.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/exporting_form_data.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Export the key-values as csv\ndocument.export_kv_to_csv(\n    include_kv=True,\n    include_checkboxes=False,\n    filepath=os.path.join(\"kv.csv\")\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Document with Textract in Python\nDESCRIPTION: This snippet initializes a Textractor object and analyzes the document, extracting tables and saving the image.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nextractor = Textractor(region_name=\"us-west-2\")\n\ndocument = extractor.analyze_document(\n    file_source=image,\n    features=[TextractFeatures.TABLES], \n    save_image=True\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Different Table Representations in Python\nDESCRIPTION: These snippets demonstrate various ways to represent the extracted table data, including flattening headers and duplicating text in merged cells.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmarkdown_table_2 = document.tables[0].get_text(\n    TextLinearizationConfig(\n        table_linearization_format='markdown'\n    )\n)\n\nmarkdown_table_flattened_headers_2 = document.tables[0].get_text(\n    TextLinearizationConfig(\n        table_linearization_format='markdown',\n        table_flatten_headers=True\n    )\n)\n\nmarkdown_table_flattened_headers_duplicated_text_2 = document.tables[0].get_text(\n    TextLinearizationConfig(\n        table_linearization_format='markdown',\n        table_flatten_headers=True,\n        table_duplicate_text_in_merged_cells=True,\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Table to Markdown Format in Python\nDESCRIPTION: This snippet converts the extracted table to markdown format using TextLinearizationConfig.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmarkdown_table = document.tables[0].get_text(TextLinearizationConfig(table_linearization_format='markdown'))\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Both Forms and Tables\nDESCRIPTION: Shows how to extract and pretty print both forms and tables from a document simultaneously, combining key-value pairs and tabular data.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --example --features FORMS TABLES --pretty-print FORMS TABLES\n```\n\n----------------------------------------\n\nTITLE: Parsing Textract Response from Dictionary\nDESCRIPTION: Demonstrates how to use the ResponseParser directly with a dictionary object. This approach loads the JSON file into a dictionary and then uses the parser.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/parsing_an_existing_response.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"../../../tests/fixtures/saved_api_responses/test_table.json\", \"r\") as f:\n    document = response_parser.parse(json.load(f))\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Document Object\nDESCRIPTION: Displays the document object returned by the synchronous text detection API. This object contains all the extracted text and structural information from the processed document.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/simple_ocr.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocument\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Textract with Example Document\nDESCRIPTION: Demonstrates the simplest way to run the amazon-textract tool using the built-in example document with the DetectDocumentText API.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --example\n```\n\n----------------------------------------\n\nTITLE: Converting to TRP2 Document Format\nDESCRIPTION: Converts the Document object to a TRP2 format using the to_trp2() convenience function.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/interfacing_with_trp2.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrp2_document = document.to_trp2()\n```\n\n----------------------------------------\n\nTITLE: Initiating Asynchronous Document Text Detection\nDESCRIPTION: Creates an asynchronous text detection job using Textractor. The function uploads the local file to the specified S3 bucket path before calling the StartDocumentTextDetection API, which returns a job ID for later result retrieval.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/simple_ocr.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor import Textractor\n\nextractor = Textractor(profile_name=\"default\")\n# This path assumes that you are running the notebook from docs/source/notebooks\ndocument = extractor.start_document_text_detection(\n    \"../../../tests/fixtures/form.png\",\n    s3_upload_path=\"s3://textract-ocr/temp/\",\n)\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Directory with S3 Upload\nDESCRIPTION: Command to process multiple files using asynchronous API with S3 upload\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/commandline.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls your_dir/ | xargs -I{} textractor start-document-text-detection {} --s3-upload-path s3://your-bucket/your-prefix/{}\n```\n\n----------------------------------------\n\nTITLE: Basic Local File Text Detection\nDESCRIPTION: Example of detecting text in a local file using Textract\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntextract_json = call_textract(input_document=\"/folder/local-filesystem-file.png\")\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor from Source\nDESCRIPTION: Installs the Amazon Textract Textractor package in editable mode after cloning the repository and installing requirements.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Local File Processing with Response Parser\nDESCRIPTION: Example combining Textract text detection with Response Parser for additional processing\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom trp import Document\nfrom textractcaller import call_textract\n\ntextract_json = call_textract(input_document=\"/folder/local-filesystem-file.png\")\nd = Document(textract_json)\n```\n\n----------------------------------------\n\nTITLE: Getting Bounding Boxes from Textract Output\nDESCRIPTION: Example showing how to get bounding boxes for WORD and CELL data types from Textract output using the get_bounding_boxes function\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/overlayer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractoverlayer.t_overlay import DocumentDimensions, get_bounding_boxes\nfrom textractcaller.t_call import Textract_Features, Textract_Types, call_textract\n\ndoc = call_textract(input_document=input_document, features=features)\n# image is a PIL.Image.Image in this case\ndocument_dimension:DocumentDimensions = DocumentDimensions(doc_width=image.size[0], doc_height=image.size[1])\noverlay=[Textract_Types.WORD, Textract_Types.CELL]\n\nbounding_box_list = get_bounding_boxes(textract_json=doc, document_dimensions=document_dimension, overlay_features=overlay)\n```\n\n----------------------------------------\n\nTITLE: Checking LazyDocument Type for Asynchronous Results\nDESCRIPTION: Examines the type of object returned by the asynchronous API call. This demonstrates that the asynchronous API returns a LazyDocument object, which fetches results only when needed.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/simple_ocr.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntype(document)\n```\n\n----------------------------------------\n\nTITLE: Table Detection in Local Files\nDESCRIPTION: Example showing how to extract tables from local files using Textract\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller import call_textract, Textract_Features\nfeatures = [Textract_Features.TABLES]\nresponse = call_textract(\n    input_document=\"/folder/local-filesystem-file.png\", features=features)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All ID Fields\nDESCRIPTION: Creating a dictionary of all available fields and their values from the analyzed ID document\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_id.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{f.value:document.identity_documents[0][f.value] for f in AnalyzeIDFields}\n```\n\n----------------------------------------\n\nTITLE: Forced Async API Call with S3\nDESCRIPTION: Example demonstrating forced asynchronous API call with S3-hosted images\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller import call_textract\nresponse = call_textract(input_document=\"s3://some-bucket/w2-example.png\", force_async_api=True)\n```\n\n----------------------------------------\n\nTITLE: Drawing Bounding Boxes on Images\nDESCRIPTION: Code sample demonstrating how to draw bounding boxes on images using PIL Image and ImageDraw\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/overlayer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom PIL import Image, ImageDraw\n\nimage = Image.open(input_document)\nrgb_im = image.convert('RGB')\ndraw = ImageDraw.Draw(rgb_im)\n\n# check the impl in amazon-textract-helper for ways to associate different colors to types\nfor bbox in bounding_box_list:\n    draw.rectangle(xy=[bbox.xmin, bbox.ymin, bbox.xmax, bbox.ymax], outline=(128, 128, 0), width=2)\n\nrgb_im.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing Name Fields\nDESCRIPTION: Concatenating first and last name fields from the analyzed ID document\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_id.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocument.identity_documents[0][\"FIRST_NAME\"] + \" \" + document.identity_documents[0][\"LAST_NAME\"]\n```\n\n----------------------------------------\n\nTITLE: Core Textract Call Function Definition\nDESCRIPTION: Main function definition for calling Amazon Textract with configurable parameters including input document, features, queries, output configuration and more.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller import call_textract\ndef call_textract(input_document: Union[str, bytes],\n                  features: Optional[List[Textract_Features]] = None,\n                  queries_config: Optional[QueriesConfig] = None,\n                  output_config: Optional[OutputConfig] = None,\n                  adapters_config: Optional[AdaptersConfig] = None,\n                  kms_key_id: str = \"\",\n                  job_tag: str = \"\",\n                  notification_channel: Optional[NotificationChannel] = None,\n                  client_request_token: str = \"\",\n                  return_job_id: bool = False,\n                  force_async_api: bool = False,\n                  call_mode: Textract_Call_Mode = Textract_Call_Mode.DEFAULT,\n                  boto3_textract_client=None,\n                  job_done_polling_interval=1) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Accessing Summary Groups\nDESCRIPTION: Retrieves grouped summary fields from the expense document.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nexpense_doc.summary_groups\n```\n\n----------------------------------------\n\nTITLE: Custom Query Processing with Adapter\nDESCRIPTION: Example showing query processing with a custom adapter configuration\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport textractcaller as tc\nimport trp.trp2 as t2\nimport boto3\n\ntextract = boto3.client('textract', region_name=\"us-east-2\")\nq1 = tc.Query(text=\"What is the employee SSN?\", alias=\"SSN\", pages=[\"1\"])\nq2 = tc.Query(text=\"What is YTD gross pay?\", alias=\"GROSS_PAY\", pages=[\"2\"])\nadapter1 = tc.Adapter(adapter_id=\"2e9bf1c4aa31\", version=\"1\", pages=[\"1\"])\ntextract_json = tc.call_textract(\n    input_document=\"s3://amazon-textract-public-content/blogs/2-pager.pdf\",\n    queries_config=tc.QueriesConfig(queries=[q1, q2]),\n    adapters_config=tc.AdaptersConfig(adapters=[adapter1])\n    features=[tc.Textract_Features.QUERIES],\n    force_async_api=True,\n    boto3_textract_client=textract)\nt_doc: t2.TDocument = t2.TDocumentSchema().load(textract_json)  # type: ignore\nfor page in t_doc.pages:\n    query_answers = t_doc.get_query_answers(page=page)\n    for x in query_answers:\n        print(f\"{x[1]},{x[2]}\")\n```\n\n----------------------------------------\n\nTITLE: Reading Exported CSV with Pandas\nDESCRIPTION: Demonstrates how to read and verify the exported CSV file using pandas DataFrame.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/exporting_form_data.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf_key_values = pd.read_csv(os.path.join(os.getcwd(), \"kv.csv\"))\ndf_key_values\n```\n\n----------------------------------------\n\nTITLE: Accessing Summary Fields\nDESCRIPTION: Retrieves the summary fields from the expense document.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nexpense_doc.summary_fields\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Textract with FORMS and TABLES Features\nDESCRIPTION: Shows how to use the AnalyzeDocument API to process forms and tables in a document, which provides more detailed extraction capabilities.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --example --features FORMS TABLES\n```\n\n----------------------------------------\n\nTITLE: Accessing First Expense Document\nDESCRIPTION: Retrieves the first expense document from the analysis results.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nexpense_doc = document.expense_documents[0]\nexpense_doc\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Tables from Amazon Textract\nDESCRIPTION: Shows how to extract and pretty print tables from a document in a human-readable format using the TABLES feature and pretty-print option.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --example --features TABLES --pretty-print TABLES\n```\n\n----------------------------------------\n\nTITLE: Sample Combined Forms and Tables Output\nDESCRIPTION: Shows the combined output of both forms and tables from the pretty-print command, displaying form fields followed by tabular data.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nPhone Number:: 555-0100\nHome Address:: 123 Any Street, Any Town, USA\nFull Name:: Jane Doe\nMailing Address:: same as home address\n|------------|-----------|---------------------|-----------------|-----------------------|\n|            |           | Previous Employment | History         |                       |\n| Start Date | End Date  | Employer Name       | Position Held   | Reason for leaving    |\n| 1/15/2009  | 6/30/2011 | Any Company         | Assistant Baker | Family relocated      |\n| 7/1/2011   | 8/10/2013 | Best Corp.          | Baker           | Better opportunity    |\n| 8/15/2013  | present   | Example Corp.       | Head Baker      | N/A, current employer |\n```\n\n----------------------------------------\n\nTITLE: Getting Available ID Fields\nDESCRIPTION: Retrieving all available field values from AnalyzeIDFields enum\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_id.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor.data.constants import AnalyzeIDFields\n\n[f.value for f in AnalyzeIDFields]\n```\n\n----------------------------------------\n\nTITLE: Line Overlay with Text and Confidence Display\nDESCRIPTION: Shows how to generate a visual overlay with bounding boxes around each line of text, including the detected text and confidence scores overlaid on the image.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --example --overlay LINE --overlay-text --overlay-confidence --pop-up-overlay-output --overlay-output-folder overlay-output-folder-name\n```\n\n----------------------------------------\n\nTITLE: Accessing Document Images\nDESCRIPTION: Retrieving the first image from the analyzed document\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_id.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocument.images[0]\n```\n\n----------------------------------------\n\nTITLE: Word Overlay with Text Display\nDESCRIPTION: Shows how to generate a visual overlay with bounding boxes around each word, including the detected text overlaid on the image, displaying in a popup and saving to a folder.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --example --overlay WORD --overlay-text --pop-up-overlay-output --overlay-output-folder overlay-output-folder-name\n```\n\n----------------------------------------\n\nTITLE: Getting Table String Output\nDESCRIPTION: Example demonstrating how to extract tables from a document and get them as a string output.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/prettyprinter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller.t_call import call_textract, Textract_Features\nfrom textractprettyprinter.t_pretty_print import Textract_Pretty_Print, get_string\n\ntextract_json = call_textract(input_document=input_document, features=[Textract_Features.TABLES])\nget_string(textract_json=textract_json, output_type=Textract_Pretty_Print.TABLES)\n```\n\n----------------------------------------\n\nTITLE: Querying Extracted Data with Claude AI in Python\nDESCRIPTION: This snippet demonstrates how to query the extracted table data using Claude AI through the previously set up function.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nquestion = \"What is the max supply current at 125°C if both Backup SRAM and RTC and LSE are OFF? Answer in one line\"\n\nprint(get_response_from_claude(markdown_table, question))\n```\n\n----------------------------------------\n\nTITLE: Form and Table Cell Overlay with Visual Output\nDESCRIPTION: Shows how to generate a visual overlay of detected form fields and table cells in an image, displaying bounding boxes in a popup and saving to a specified folder.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --example --features TABLES FORMS --pretty-print FORMS TABLES --overlay FORM CELL --pop-up-overlay-output --overlay-output-folder ../mywonderfuloutputfolderfordocs/\n```\n\n----------------------------------------\n\nTITLE: Setting Up Claude AI Integration with AWS Bedrock in Python\nDESCRIPTION: This code sets up the necessary configurations and functions to interact with Claude AI through AWS Bedrock for querying the extracted data.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json \nimport boto3\n\ndef get_response_from_claude(context, prompt_data):\n    body = json.dumps({\n        \"prompt\": f\"\"\"Human: Given the following document:\n        {context}\n        Answer the following:\\n {prompt_data}\n        Assistant:\"\"\",\n        \"max_tokens_to_sample\": 2000,\n        \"top_k\": 1,\n    })\n    modelId = f'anthropic.claude-instant-v1' # change this to use a different version from the model provider\n    accept = '*/*'\n    contentType = 'application/json'\n\n    response = bedrock.invoke_model(body=body, modelId=modelId, accept=accept, contentType=contentType)\n    response_body = json.loads(response.get('body').read())\n    answer = response_body.get('completion')\n\n    return answer\n\nos.environ[\"AWS_DEFAULT_REGION\"] = \"us-west-2\"\nos.environ[\"BEDROCK_ENDPOINT_URL\"] = \"https://bedrock-runtime.us-west-2.amazonaws.com\"\n\nbedrock = boto3.client(service_name='bedrock-runtime',region_name='us-west-2',endpoint_url='https://bedrock-runtime.us-west-2.amazonaws.com')\n```\n\n----------------------------------------\n\nTITLE: Word Overlay with Visual Output\nDESCRIPTION: Shows how to generate a visual overlay of detected words in an image, with bounding boxes around each word, displaying the result in a popup and saving to a folder.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\namazon-textract --example --pretty-print WORDS --overlay WORD --pop-up-overlay-output --overlay-output-folder overlay-output-folder-name\n```\n\n----------------------------------------\n\nTITLE: Accessing Text from Asynchronous LazyDocument\nDESCRIPTION: Retrieves the text content from the LazyDocument object. This triggers a call to fetch the results from the previously initiated asynchronous job.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/simple_ocr.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndocument.text\n```\n\n----------------------------------------\n\nTITLE: Importing JSON and ResponseParser\nDESCRIPTION: Imports the necessary modules for parsing a Textract response from a dictionary object. Includes json for loading the file and response_parser for parsing.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/parsing_an_existing_response.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom textractor.parsers import response_parser\n```\n\n----------------------------------------\n\nTITLE: Running OCR on Single File\nDESCRIPTION: Command to perform OCR on a single file using the detect-document-text API\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/commandline.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntextractor detect-document-text your_file.png output.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Document Fields\nDESCRIPTION: Shows how to access specific fields from an analyzed expense document and retrieve their raw objects.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/going_further.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocument.expense_documents[0][\"Phone\"]\n```\n\nLANGUAGE: python\nCODE:\n```\ndocument.expense_documents[0][\"Phone\"].raw_object\n```\n\nLANGUAGE: python\nCODE:\n```\ndocument.expense_documents[0].raw_object\n```\n\n----------------------------------------\n\nTITLE: Visualizing Output with Overlay\nDESCRIPTION: Command to analyze document and overlay words and tables on the output image\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/commandline.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntextractor analyze-document tests/fixtures/amzn_q2.png output.json --features TABLES --overlay WORDS TABLES\n```\n\n----------------------------------------\n\nTITLE: Drawing Bounding Boxes on PDF Documents\nDESCRIPTION: Example showing how to draw bounding boxes on PDF documents using PyMuPDF (fitz)\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/overlayer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport fitz\n\n# for local stored files\nfile_path = \"<<replace with the local path to your pdf file>>\"\ndoc = fitz.open(file_path)\n# for files stored in S3 the streaming object can be used\n# doc = fitz.open(stream=\"<<replace with stream_object_variable>>\", filetype=\"pdf\")\n\n# draw boxes\nfor p, page in enumerate(doc):\n    p += 1\n    for bbox in bounding_box_list:\n        if bbox.page_number == p:\n            page.draw_rect(\n                [bbox.xmin, bbox.ymin, bbox.xmax, bbox.ymax], color=(0, 1, 0), width=2\n            )\n\n# save file locally \ndoc.save(\"<<local path for output file>>\")\n```\n\n----------------------------------------\n\nTITLE: Importing AnalyzeExpense Constants\nDESCRIPTION: Imports constant definitions for expense fields, groups, and line item fields.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textractor.data.constants import AnalyzeExpenseFields, AnalyzeExpenseFieldsGroup, AnalyzeExpenseLineItemFields\n```\n\n----------------------------------------\n\nTITLE: Parallel Batch Processing\nDESCRIPTION: Command to process multiple files in parallel (8 concurrent processes) with output redirection\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/commandline.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nls your_dir/ | xargs -P8 -I{} textractor start-document-text-detection {} --s3-upload-path s3://your-bucket/your-prefix/{} > output.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing Textract API Response\nDESCRIPTION: Demonstrates how to access the raw JSON response from the Textract API through the document object.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/going_further.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocument.response\n```\n\n----------------------------------------\n\nTITLE: Fetching Async Results\nDESCRIPTION: Command to retrieve results from asynchronous operations using job IDs\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/commandline.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat output.txt | xargs -I{} textractor get-result {} DETECT_TEXT {}.json\n```\n\n----------------------------------------\n\nTITLE: Opening Textract JSON Response with File Object\nDESCRIPTION: Shows how to use Document.open() with a file-like object instead of a path. This approach opens the file manually and passes the file object to Document.open().\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/parsing_an_existing_response.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"../../../tests/fixtures/saved_api_responses/test_table.json\", \"r\") as f:\n    document = Document.open(f)\n```\n\n----------------------------------------\n\nTITLE: Displaying Document Object\nDESCRIPTION: Displays the complete document analysis object.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocument\n```\n\n----------------------------------------\n\nTITLE: Printing Tables in LaTeX Format\nDESCRIPTION: Example showing how to extract tables from a document and format them as LaTeX output.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/prettyprinter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller.t_call import call_textract, Textract_Features\nfrom textractprettyprinter.t_pretty_print import Textract_Pretty_Print, get_string\n\ntextract_json = call_textract(input_document=input_document, features=[Textract_Features.FORMS, Textract_Features.TABLES])\nget_tables_string(textract_json=textract_json, table_format=Pretty_Print_Table_Format.latex)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Document Analysis\nDESCRIPTION: Visualizes the analyzed document without displaying words.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocument.visualize(with_words=False)\n```\n\n----------------------------------------\n\nTITLE: Extracting Forms and Tables as CSV\nDESCRIPTION: Example showing how to extract forms and tables from a document and output them in CSV format using the Textract API.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/prettyprinter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller.t_call import call_textract, Textract_Features\nfrom textractprettyprinter.t_pretty_print import Pretty_Print_Table_Format, Textract_Pretty_Print, get_string\n\ntextract_json = call_textract(input_document=input_document, features=[Textract_Features.FORMS, Textract_Features.TABLES])\nprint(get_string(textract_json=textract_json,\n               table_format=Pretty_Print_Table_Format.csv,\n               output_type=[Textract_Pretty_Print.TABLES, Textract_Pretty_Print.FORMS]))\n```\n\n----------------------------------------\n\nTITLE: Displaying Document Object from Dictionary Parser\nDESCRIPTION: Code to display the document object after parsing it from a dictionary. Shows the result of using the response_parser.parse() method.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/parsing_an_existing_response.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndocument\n```\n\n----------------------------------------\n\nTITLE: Displaying Document Object from File Object\nDESCRIPTION: Code to display the document object after loading it from a file object. Shows the result of using Document.open() with a file handle.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/parsing_an_existing_response.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocument\n```\n\n----------------------------------------\n\nTITLE: Generating Layout CSV Output\nDESCRIPTION: Example showing how to generate a CSV format layout analysis similar to the AWS Console output.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/prettyprinter/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom textractprettyprinter import get_layout_csv_from_trp2\n\nwith open(<some_test_file>) as input_fp:\n    trp2_doc: TDocument = TDocumentSchema().load(json.load(input_fp))\n    layout_csv = get_layout_csv_from_trp2(trp2_doc)\n    csv_output = io.StringIO()\n    csv_writer = csv.writer(csv_output, delimiter=\",\", quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n    for page in layout_csv:\n        csv_writer.writerows(page)\n    print(csv_output)\n```\n\n----------------------------------------\n\nTITLE: Displaying Document Object\nDESCRIPTION: Code to display the document object after loading it from a JSON file. This shows the result of the Document.open() operation.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/parsing_an_existing_response.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocument\n```\n\n----------------------------------------\n\nTITLE: Extracting Linearized Text from Layout\nDESCRIPTION: Example demonstrating how to extract linearized text from a document's layout analysis, including tables.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/prettyprinter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller.t_call import call_textract, Textract_Features\nfrom textractprettyprinter.t_pretty_print import get_text_from_layout_json\n\ntextract_json = call_textract(input_document=input_document, features=[Textract_Features.LAYOUT, Textract_Features.TABLES])\nlayout = get_text_from_layout_json(textract_json=textract_json)\n\nfull_text = layout[1]\nprint(full_text)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Extracted Table in Python\nDESCRIPTION: This code visualizes the first table extracted from the document using Textractor's visualization feature.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocument.tables[0].visualize()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Textract Analysis in Python\nDESCRIPTION: This snippet imports necessary modules from PIL, textractor, and other required libraries to perform document analysis using Amazon Textract.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom PIL import Image\nfrom textractor import Textractor\nfrom textractor.visualizers.entitylist import EntityList\nfrom textractor.data.constants import TextractFeatures\nfrom textractor.data.text_linearization_config import TextLinearizationConfig\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Amazon Textract CLI\nDESCRIPTION: Displays the help information for the amazon-textract command line tool, showing all available options and parameters.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> amazon-textract --help\n```\n\n----------------------------------------\n\nTITLE: Examining Document Object\nDESCRIPTION: Simple command to display the document object contents.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/interfacing_with_trp2.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocument\n```\n\n----------------------------------------\n\nTITLE: Processing Local File with Page Dimensions\nDESCRIPTION: Python code example showing how to process a local file using Textract and add page dimensions to the output.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinepagedimensions/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textractpagedimensions.t_pagedimensions import add_page_dimensions\nfrom textractcaller.t_call import call_textract\nfrom trp.trp2 import TDocument, TDocumentSchema\n\nj = call_textract(input_document='<path to some image file>')\nt_document: TDocument = TDocumentSchema().load(j)\nadd_page_dimensions(t_document=t_document, input_document=input_file)\nprint(t_document.pages[0].custom['PageDimension']) \n# output will be something like this:\n# {\n#     'doc_width': 1544,\n#     'doc_height': 1065\n# }\n```\n\n----------------------------------------\n\nTITLE: Amazon Textract with STDIN JSON Input\nDESCRIPTION: Demonstrates how to pipe JSON data to the amazon-textract tool via standard input, and pretty print the lines detected in the document.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# first create JSON\namazon-textract --example > example.json\n# now use a stored JSON with the ```amazon-textract``` command\ncat example.json | amazon-textract --stdin -pretty-print LINES\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor Package\nDESCRIPTION: Installation command for the amazon-textract-textractor package using pip, with optional PDF dependencies.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/interfacing_with_trp2.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\n----------------------------------------\n\nTITLE: Installing Textractor Package\nDESCRIPTION: Instructions for installing the amazon-textract-textractor package using pip, with optional PDF dependencies\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_id.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Caller Package\nDESCRIPTION: Command to install the amazon-textract-caller package using pip package manager\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install amazon-textract-caller\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor with Multiple Features\nDESCRIPTION: Demonstrates how to install Amazon Textract Textractor with multiple optional features, in this case PDF support and torch.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor[pdf,torch]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full JSON from Job ID\nDESCRIPTION: Function to retrieve complete JSON response from an asynchronous Textract job using job ID\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller import get_full_json\ndef get_full_json(job_id: str = None,\n                  textract_api: Textract_API = Textract_API.DETECT,\n                  boto3_textract_client=None)->dict:\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Helper with pip\nDESCRIPTION: Installs the amazon-textract-helper package using pip, which provides the amazon-textract command line tool.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> python -m pip install amazon-textract-helper\n```\n\n----------------------------------------\n\nTITLE: Encrypted Output Configuration\nDESCRIPTION: Example showing Textract call with encrypted output configuration and customer-managed keys\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller import call_textract\nfrom textractcaller import OutputConfig, Textract_Features\noutput_config = OutputConfig(s3_bucket=\"somebucket-encrypted\", s3_prefix=\"output/\")\nresponse = call_textract(input_document=\"s3://someprefix/somefile.png\",\n                          force_async_api=True,\n                          output_config=output_config,\n                          kms_key_id=\"arn:aws:kms:us-east-1:12345678901:key/some-key-id-ref-erence\",\n                          return_job_id=False,\n                          job_tag=\"sometag\",\n                          client_request_token=\"sometoken\")\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor with Developer Dependencies\nDESCRIPTION: Installs Amazon Textract Textractor with all dependencies, including those for development and testing purposes.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor[dev]\n```\n\n----------------------------------------\n\nTITLE: Cloning Amazon Textract Textractor Repository\nDESCRIPTION: Clones the Amazon Textract Textractor repository from GitHub for installation from source.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:aws-samples/amazon-textract-textractor.git\n```\n\n----------------------------------------\n\nTITLE: Getting JSON from Output Config\nDESCRIPTION: Function to retrieve JSON response from specified OutputConfig location\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/caller/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom textractcaller import get_full_json_from_output_config\ndef get_full_json_from_output_config(output_config: OutputConfig = None,\n                                     job_id: str = None,\n                                     s3_client = None)->dict:\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for PDF Processing in AWS Lambda\nDESCRIPTION: Code snippet showing how to update PATH and LD_LIBRARY_PATH environment variables when using the pdf2image version of Textractor in AWS Lambda. This configuration is necessary for PDF processing functionality.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/using_in_lambda.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"LD_LIBRARY_PATH\"] = f\"/opt/python/bin/:{os.environ['LD_LIBRARY_PATH']}\"\nos.environ[\"PATH\"] = f\"/opt/python/bin/:{os.environ['PATH']}\"\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example for Page Dimensions\nDESCRIPTION: Example of the JSON structure that gets added to the Textract schema for page dimensions.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinepagedimensions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{'PageDimension': {'doc_width': 1549.0, 'doc_height': 370.0} }\n```\n\n----------------------------------------\n\nTITLE: Adjusting Overlay Font Size\nDESCRIPTION: Command to analyze document with increased font size ratio for better readability\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/commandline.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntextractor analyze-document tests/fixtures/amzn_q2.png output.json --features TABLES --overlay WORDS TABLES --font-size-ratio 1.0\n```\n\n----------------------------------------\n\nTITLE: Sample Table Output from Pretty Print\nDESCRIPTION: Shows the formatted table output from the pretty-print TABLES command, displaying employment history information in a clean tabular format.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n|------------|-----------|---------------------|-----------------|-----------------------|\n|            |           | Previous Employment | History         |                       |\n| Start Date | End Date  | Employer Name       | Position Held   | Reason for leaving    |\n| 1/15/2009  | 6/30/2011 | Any Company         | Assistant Baker | Family relocated      |\n| 7/1/2011   | 8/10/2013 | Best Corp.          | Baker           | Better opportunity    |\n| 8/15/2013  | present   | Example Corp.       | Head Baker      | N/A, current employer |\n```\n\n----------------------------------------\n\nTITLE: Command Line Pipeline Example\nDESCRIPTION: Bash command demonstrating how to use the Textract Helper CLI with page dimensions and orientation processing.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinepagedimensions/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> python -m pip install amazon-textract-helper amazon-textract-response-parser amazon-textract-pipeline-pagedimensions\n> amazon-textract --input-document \"s3://amazon-textract-public-content/blogs/2-pager-different-dimensions.pdf\" | amazon-textract-pipeline-pagedimensions --input-document \"s3://amazon-textract-public-content/blogs/2-pager-different-dimensions.pdf\"  | amazon-textract-pipeline --components add_page_orientation | jq '.Blocks[] | select(.BlockType==\"PAGE\") | .Custom'\n```\n\n----------------------------------------\n\nTITLE: Installing Textractor Package\nDESCRIPTION: Installation command for the amazon-textract-textractor package using pip, with optional PDF dependencies.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/using_analyze_expense.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from Amazon Textract\nDESCRIPTION: Shows a truncated sample of the JSON output returned by Amazon Textract when processing a document, containing document metadata and block information.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/helper/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"DocumentMetadata\": {\"Pages\": 1}, \"Blocks\": [{\"BlockType\": \"PAGE\", \"Geometry\": {\"BoundingBox\": {\"Width\": 1.0, \"Height\": 1.0, \"Left\": 0.0, \"Top\": 0.0}, \"Polygon\": [{\"X\": 9.33321120033382e-17, \"Y\": 0.0}, {\"X\": 1.0, \"Y\": 1.6069064689339292e-16}, {\"X\": 1.0, \"Y\": 1.0}], \"HTTPHeaders\": {\"x-amzn-requestid\": \"12345678-1234-1234-1234-123456789012\", \"content-type\": \"application/x-amz-json-1.1\", \"content-length\": \"48177\", \"date\": \"Thu, 01 Apr 2021 21:50:29 GMT\"}, \"RetryAttempts\": 0}}\n```\n\n----------------------------------------\n\nTITLE: Dependency Requirements List\nDESCRIPTION: Defines the Python package dependencies with specific version constraints required for the Amazon Textract Textractor project. Includes packages for Jupyter notebook support, data analysis, PDF processing, testing, and documentation generation with Sphinx.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/extras/docs.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njupyterlab\npandas\npdf2image>=1.16,<1.17\npytest\nSphinx>=5.1,<5.2\nnbsphinx>=0.8,<0.9\nsphinx-rtd-theme>=2.0,<3.0\nsphinx-argparse>=0.5.1\nsphinxcontrib-applehelp>=1.0,<1.1\nsphinxcontrib-devhelp>=1.0,<1.1\nsphinxcontrib-htmlhelp>=2.0,<2.1\nsphinxcontrib-jsmath>=1.0,<1.1\nsphinxcontrib-qthelp>=1.0,<1.1\nsphinxcontrib-serializinghtml>=1.1,<1.2\n```\n\n----------------------------------------\n\nTITLE: Installing Textractor CLI\nDESCRIPTION: Command to install the Textractor package using pip\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/commandline.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Amazon Textract Textractor\nDESCRIPTION: This snippet lists the required Python packages and their version constraints for the Amazon Textract Textractor project. It includes amazon-textract-caller for AWS Textract integration, Pillow for image processing, tabulate for formatting tabular data, XlsxWriter for creating Excel files, and editdistance for string comparison operations.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\namazon-textract-caller>=0.2.4,<1\nPillow\ntabulate>=0.9,<0.10\nXlsxWriter>=3.0,<4\neditdistance>=0.6.2,<0.9\n```\n\n----------------------------------------\n\nTITLE: Specifying pypdfium2 Package Dependency\nDESCRIPTION: Lists pypdfium2 as a required package dependency. This package is used for PDF manipulation and rendering in Python.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/extras/pdfium.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npypdfium2\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract GeoFinder Package\nDESCRIPTION: Command to install the amazon-textract-geofinder package using pip package manager.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinegeofinder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install amazon-textract-geofinder\n```\n\n----------------------------------------\n\nTITLE: Python Package Version Constraint\nDESCRIPTION: Specifies the required version of pdf2image library between 1.16 (inclusive) and 1.17 (exclusive), ensuring compatibility while preventing unwanted updates.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/extras/pdf.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npdf2image>=1.16,<1.17\n```\n\n----------------------------------------\n\nTITLE: Installing Textract Pipeline Page Dimensions Package\nDESCRIPTION: Command to install the amazon-textract-pipeline-pagedimensions package using pip.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinepagedimensions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> python -m pip install amazon-textract-pipeline-pagedimensions\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor with Torch Support\nDESCRIPTION: Installs Amazon Textract Textractor with torch support, including sentence_transformers for improved word search and matching. Note that this will be slower on CPU.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor[torch]\n```\n\n----------------------------------------\n\nTITLE: Specifying pandas Package Dependency\nDESCRIPTION: Package dependency specification listing pandas as a required Python package. This is typically used in a requirements.txt file for Python projects to declare dependencies.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/extras/pandas.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npandas\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Overlayer\nDESCRIPTION: Command to install the amazon-textract-overlayer package using pip\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/overlayer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install amazon-textract-overlayer\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for textractor.textractor in reStructuredText\nDESCRIPTION: This code snippet configures Sphinx documentation for the textractor.textractor module. It specifies that all members should be included, undocumented members should be shown, and inheritance information should be displayed in the generated documentation.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/textractor.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: textractor.textractor\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Opening an Image File in Python\nDESCRIPTION: This code opens an image file named 'vbat.png' using the PIL library and displays it.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimage = Image.open(\"../../../tests/fixtures/vbat.png\")\nimage\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor with PDF Support (pdf2image)\nDESCRIPTION: Installs Amazon Textract Textractor with pdf2image support for PDF rasterization. This is an alternative method for PDF handling in Textractor.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor[pdf]\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Reference for Text Linearization Config Module\nDESCRIPTION: Sphinx documentation configuration for the text linearization configuration module, including members, undocumented members and inheritance details.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/textractor.data.text_linearization_config.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: textractor.data.text_linearization_config\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Textractor Examples\nDESCRIPTION: RST markup defining a table of contents tree for Jupyter notebook examples showing various Textract features including OCR, form parsing, searching, visualization, and data export capabilities.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   notebooks/simple_ocr\n   notebooks/parsing_an_existing_response\n   notebooks/introduction_to_searching\n   notebooks/visualizing_results\n   notebooks/finding_words_within_a_document\n   notebooks/exporting_form_data\n   notebooks/table_data_to_various_formats\n   notebooks/using_analyze_expense\n   notebooks/using_analyze_id\n   notebooks/using_queries\n   notebooks/layout_analysis\n   notebooks/tabular_data_linearization\n   notebooks/tabular_data_linearization_continued\n   notebooks/layout_analysis_for_text_linearization\n   notebooks/document_linearization_to_markdown_or_html\n   notebooks/textractor_for_large_language_models\n   notebooks/interfacing_with_trp2\n   notebooks/signature_detection\n   notebooks/going_further\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for Textractor Constants Module\nDESCRIPTION: Configures Sphinx autodoc to generate API documentation for the textractor.data.constants module. The configuration includes documenting all members, undocumented members, and showing inheritance relationships.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/textractor.data.constants.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: textractor.data.constants\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Specifying sentence-transformers Package Version for Amazon Textract Textractor\nDESCRIPTION: This snippet defines the version requirement for the sentence-transformers Python package. It specifies that the version should be greater than or equal to 2.2 but less than 2.3, ensuring compatibility with the project while allowing for minor updates.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/extras/torch.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nsentence-transformers>=2.2,<2.3\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor via pip\nDESCRIPTION: Commands to install the amazon-textract-textractor package and its optional dependencies using pip. The base package provides default functionality, while additional dependencies like 'pdfium' can be installed for specific workflows involving PDF documents.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/simple_ocr.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor[pdfium]\n```\n\n----------------------------------------\n\nTITLE: Installing Textractor Package with pip\nDESCRIPTION: Command to install the amazon-textract-textractor package using pip. Additional PDF-related dependencies can be installed with the pdfium extra.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/parsing_an_existing_response.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Textract Textractor Package using pip\nDESCRIPTION: Commands to install the amazon-textract-textractor package with pip. Includes options for the base package and additional PDF dependencies for workflows that require PDF processing.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/tabular_data_linearization_continued.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor[pdfium]\n```\n\n----------------------------------------\n\nTITLE: Installing Textract Textractor Package\nDESCRIPTION: Commands to install the amazon-textract-textractor package using pip, including optional PDF dependencies.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/notebooks/going_further.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install amazon-textract-textractor\n```\n\n----------------------------------------\n\nTITLE: Installing Textract PrettyPrinter Package\nDESCRIPTION: Installation command for the amazon-textract-prettyprinter package using pip package manager.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/prettyprinter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install amazon-textract-prettyprinter\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installing both amazon-textract-helper and amazon-textract-geofinder packages needed for the example.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinegeofinder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install amazon-textract-helper amazon-textract-geofinder\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Amazon Textract Helper CLI\nDESCRIPTION: Commands to install required packages (amazon-textract-helper and amazon-textract-geofinder) and process a sample patient intake form JSON file using command line tools. The output displays form key-value pairs in a formatted structure.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinegeofinder/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> python -m pip install amazon-textract-helper amazon-textract-geofinder\n> cat tests/data/patient_intake_form_sample.json| bin/amazon-textract-geofinder | amazon-textract --stdin --pretty-print FORMS\n```\n\n----------------------------------------\n\nTITLE: Installing Textract Caller Dependency\nDESCRIPTION: Command to install the amazon-textract-caller package, which is required for the sample code.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/tpipelinepagedimensions/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install amazon-textract-caller\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements for Amazon Textract Textractor\nDESCRIPTION: Installs the required dependencies for Amazon Textract Textractor when installing from source.\nSOURCE: https://github.com/aws-samples/amazon-textract-textractor/blob/master/docs/source/installation.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```"
  }
]