[
  {
    "owner": "facebook",
    "repo": "metro",
    "content": "TITLE: Enhance Middleware Example (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `enhanceMiddleware` option to attach custom Connect middleware to Metro. It shows how to extend the base `metroMiddleware` and mount additional middleware handlers for custom endpoints.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nenhanceMiddleware: (metroMiddleware: Middleware, metroServer: MetroServer) => {\n  return connect()\n    .use(metroMiddleware)\n    .use('/custom-endpoint', customEndpointMiddleware());\n},\n```\n\n----------------------------------------\n\nTITLE: Custom Module Resolution with resolveRequest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to override the default module resolution algorithm in Metro using the `resolveRequest` option. It allows you to handle specific module names or custom protocols, providing a file path and type for the resolved module. If the module cannot be resolved, an error should be thrown. Optionally, the resolution can be chained to the standard Metro resolver.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nresolveRequest: (context, moduleName, platform) => {\n  if (moduleName.startsWith('my-custom-resolver:')) {\n    // Logic to resolve the module name to a file path...\n    // NOTE: Throw an error if there is no resolution.\n    return {\n      filePath: 'path/to/file',\n      type: 'sourceFile',\n    };\n  }\n  // Optionally, chain to the standard Metro resolver.\n  return context.resolveRequest(context, moduleName, platform);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Exports for Web and React Native (JSON)\nDESCRIPTION: This code snippet demonstrates how to use the 'exports' field in package.json to conditionally export different files based on the target environment (browser, react-native, default). It specifies different entry points for each environment, allowing the package to adapt to the specific platform's requirements.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"browser\": \"./dist/index-browser.js\",\n    \"react-native\": \"./dist/index-react-native.js\",\n    \"default\": \"./dist/index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: getTransformOptions Function Signature (Flow)\nDESCRIPTION: This snippet shows the expected signature of the `getTransformOptions` function, which allows customizing transformer and serializer options based on the bundle being built. It receives entry points, options (dev, hot, platform), and a dependency resolution function as parameters. It should return a promise resolving to an object with transform options.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_5\n\nLANGUAGE: flow\nCODE:\n```\nfunction getTransformOptions(\n  entryPoints: $ReadOnlyArray<string>,\n  options: {\n    dev: boolean,\n    hot: boolean,\n    platform: ?string,\n  },\n  getDependenciesOf: (path: string) => Promise<Array<string>>,\n): Promise<ExtraTransformOptions> {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Connect middleware with Metro\nDESCRIPTION: This code shows how to create a Connect middleware using Metro. It loads the configuration, creates the middleware, and attaches it to an Express application. The HMR server is also attached to enable hot module replacement.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst Metro = require('metro');\nconst express = require('express');\nconst app = express();\nconst server = require('http').Server(app);\n\nMetro.loadConfig().then(async config => {\n  const connectMiddleware = await Metro.createConnectMiddleware(config);\n  const {server: {port}} = config;\n\n  app.use(connectMiddleware.middleware);\n  server.listen(port);\n  connectMiddleware.attachHmrServer(server);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Stores in metro.config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure cache stores in Metro's configuration file (metro.config.js). It utilizes the FileStore for local caching and specifies a directory within the operating system's temporary directory to store the cache entries. The os and path modules from Node.js are required. The returned cacheStores array is then used by metro to manage cached modules.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Caching.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// metro.config.js\nconst os = require('node:os');\nconst path = require('node:path');\n\nmodule.exports = {\n  cacheStores: ({ FileStore }) => [\n    new FileStore({\n      root: path.join(os.tmpdir(), 'metro-cache'),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Asset Exports with Subpath Patterns (JSON)\nDESCRIPTION: This JSON snippet configures package exports to expose assets using a subpath pattern.  It maps all PNG files within the './assets' directory to the corresponding files in the './dist/assets' directory. This enables consumers to import assets directly using the specified subpath pattern, simplifying asset management.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./assets/*.png\": \"./dist/assets/*.png\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compile File with Metro\nDESCRIPTION: This snippet shows how to compile a file using Metro's runBuild function. It loads the Metro configuration, then calls runBuild to bundle the specified entry point and output the result to a file. The 'entry' and 'out' options are required.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/API.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = await Metro.loadConfig();\n\nawait Metro.runBuild(config, {\n  entry: 'index.js',\n  out: 'bundle.js',\n});\n```\n\n----------------------------------------\n\nTITLE: Import component with exports\nDESCRIPTION: Shows how Metro resolves the import when a matching entry is found in the 'exports' field, using the exact target file specified by the package without applying additional resolution rules.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport FooComponent from 'some-pkg/FooComponent';\n// Resolves exact target from \"exports\" only\n```\n\n----------------------------------------\n\nTITLE: Direct Export of Component (JSON)\nDESCRIPTION: This code snippet shows how to directly export a React Native component using the 'exports' field in package.json. It maps a subpath ('./FooComponent') to a specific JavaScript file ('./src/FooComponent.js'). This allows consumers of the package to import the component directly using the specified subpath.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./FooComponent\": \"./src/FooComponent.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package exports config example\nDESCRIPTION: Example of a package.json file demonstrating the configuration of the 'exports' field, mapping a subpath to a specific file within the package. Demonstrates exact path specifier.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"some-pkg\",\n  \"exports\": {\n    \"./FooComponent\": \"./src/FooComponent.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Connect Middleware with Metro\nDESCRIPTION: This snippet illustrates how to create Connect middleware using Metro's createConnectMiddleware function.  It loads the Metro configuration, creates the middleware, and then attaches it to an Express app and HTTP server. This allows you to integrate Metro's bundling capabilities into an existing server setup. Requires 'metro', 'express', and 'http' modules.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/API.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Metro = require('metro');\nconst express = require('express');\nconst app = express();\nconst server = require('http').Server(app);\n\nMetro.loadConfig().then(async config => {\n  const connectMiddleware = await Metro.createConnectMiddleware(config);\n  const {server: {port}} = config;\n\n  app.use(connectMiddleware.middleware);\n  server.listen(port);\n  connectMiddleware.attachHmrServer(server);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro watchFolders in metro.config.js\nDESCRIPTION: This configuration snippet modifies the metro.config.js file to include the necessary file paths for the yarn linked Metro modules. It adds paths to the project's node_modules, the Metro packages directory, and the Metro's node_modules directory to the watchFolders array.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/LocalDevelopment.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ const path = require('path');\n\n  module.exports = {\n+   watchFolders: [\n+     path.resolve(__dirname, './node_modules'),\n+     // Include necessary file paths for `yarn link`ed modules\n+     path.resolve(__dirname, '../metro/packages'),\n+     path.resolve(__dirname, '../metro/node_modules'),\n+   ],\n    ...\n  };\n```\n\n----------------------------------------\n\nTITLE: Running Metro build with options\nDESCRIPTION: This example demonstrates how to run a Metro build with specific options, including the entry point, platform, minification, and output path. This example showcases building for iOS with minification enabled.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = await Metro.loadConfig();\n\nawait Metro.runBuild(config, {\n  entry: 'index.js',\n  platform: 'ios',\n  minify: true,\n  out: '/Users/Metro/metro-ios.js'\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Metro with an existing server\nDESCRIPTION: This code demonstrates how to integrate the Metro bundler server with an existing HTTP server.  The `processRequest` method is called with a callback to handle requests that Metro cannot process, allowing for integration with other server functionalities.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst httpServer = http.createServer((req, res) => {\n  metroBundlerServer.processRequest(req, res, () => {\n    // Metro does not know how to handle the request.\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Relative Import Example\nDESCRIPTION: This JavaScript code snippet shows a relative import. Metro must determine the correct file path for './Component', potentially considering file extensions and platform-specific variations.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Resolution.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/App.js\nimport Comp from './Component';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Run Metro Development Server\nDESCRIPTION: This snippet demonstrates how to run a Metro development server using the runServer function. It loads the Metro configuration and then starts the server. This server watches the filesystem for changes and rebuilds bundles as needed.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/API.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = await Metro.loadConfig();\n\nawait Metro.runServer(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Metro using Yarn\nDESCRIPTION: This command installs Metro and metro-core as development dependencies using Yarn.  This is an alternative to using npm for installing Metro.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev metro metro-core\n```\n\n----------------------------------------\n\nTITLE: Metro Configuration Structure (JavaScript)\nDESCRIPTION: Defines a common configuration structure in Metro using JavaScript. It outlines general options, resolver options, transformer options, serializer options, server options, and watcher options. This snippet shows the basic outline of a Metro configuration file.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /* general options */\n\n  resolver: {\n    /* resolver options */\n  },\n  transformer: {\n    /* transformer options */\n  },\n  serializer: {\n    /* serializer options */\n  },\n  server: {\n    /* server options */\n  },\n  watcher: {\n    /* watcher options */\n    watchman: {\n      /* Watchman-specific options */\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic `require()` Usage in Metro\nDESCRIPTION: This snippet demonstrates the basic usage of the `require()` function in Metro. It shows how to import local modules, assets (images), JSON data, and specific exports from other modules, similar to Node.js. The `require()` function takes a module name or path as an argument and returns the evaluated module's exports.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/ModuleAPI.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst localModule = require('./path/module');\nconst asset = require('./path/asset.png');\nconst jsonData = require('./path/data.json');\nconst {View} = require('react-native');\n```\n\n----------------------------------------\n\nTITLE: Running Metro programmatically with runMetro\nDESCRIPTION: This code shows how to run Metro programmatically using the `runMetro` method. It loads the Metro configuration, starts the Metro bundler server, and creates an HTTP server to handle requests. The `processRequest` method is used to integrate the Metro server with the HTTP server.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst http = require('http');\nconst Metro = require('metro');\n\n// We first load the config from the file system\nMetro.loadConfig().then(async (config) => {\n  const metroBundlerServer = await Metro.runMetro(config);\n\n  const httpServer = http.createServer(\n    metroBundlerServer.processRequest.bind(metroBundlerServer),\n  );\n\n  httpServer.listen(8081);\n});\n```\n\n----------------------------------------\n\nTITLE: Package exports - extensionless and extensioned specifiers\nDESCRIPTION: Demonstrates the recommended way to define both extensionless and extensioned specifiers for subpaths in packages targeting React Native. Matches existing user expectations.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"exports\": {\n    \".\": \"./src/index.js\",\n    \"./FooComponent\": \"./src/FooComponent.js\",\n    \"./FooComponent.js\": \"./src/FooComponent.js\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Package exports - subpath patterns\nDESCRIPTION: Example of using subpath patterns in the 'exports' field. Demonstrates how a single * is permitted per side of a subpath pattern to avoid path expansion.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./utils/*\": \"./utils/*.js\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Indexed RAM Bundle Structure\nDESCRIPTION: Illustrates the structure of an Indexed RAM bundle, including the magic number, offset table (header and pairs for offset/length), and module code with null terminators.  This format allows constant-time access to any module in the bundle. This format is especially suitable for environments where the entire bundle can be loaded into memory at once. The offsets are represented as uint32 numbers in Little Endian.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Bundling.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n` 0                   1                   2                   3                   4                   5                   6\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          Magic number                         |                          Header size                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Startup code size                       |                        Module 0 offset                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Module 0 length                        |                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                                                               +\n|                                                                                                                               |\n+                                                              ...                                                              +\n|                                                                                                                               |\n+                                                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |                        Module n offset                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Module n length                        | Module 0 code | Module 0 code |      ...      |       \\0      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Module 1 code | Module 1 code |      ...      |       \\0      |                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                                                               +\n|                                                                                                                               |\n+                                                              ...                                                              +\n|                                                                                                                               |\n+                                                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               | Module n code | Module n code |      ...      |       \\0      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+`\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Store Interface (Flow)\nDESCRIPTION: This code defines the interface for implementing a custom cache store in Metro. It includes methods for getting, setting, and clearing cache entries. The `get` method must return the same type of value (Buffer or JSON-serializable) that was originally provided to `set`.  The `JsonSerializable` type represents any value that can be serialized to JSON. It requires the Flow type checker.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Caching.md#_snippet_1\n\nLANGUAGE: flow\nCODE:\n```\ninterface CacheStore<T: Buffer | JsonSerializable> {\n  // Read an entry from the cache. Returns `null` if not found.\n  get(key: Buffer): ?T | Promise<?T>;\n\n  // Write an entry to the cache (if writable) or do nothing (if read-only)\n  set(key: Buffer, value: T): void | Promise<void>;\n\n  // Clear the cache (if possible) or do nothing\n  clear(): void | Promise<void>;\n}\n\ntype JsonSerializable = /* Any JSON-serializable value */;\n```\n\n----------------------------------------\n\nTITLE: Running Metro server with secure options\nDESCRIPTION: This code shows how to configure and start the Metro server with secure HTTPS options. It loads the necessary certificate and key files to enable HTTPS.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\nconst config = await Metro.loadConfig();\n\nawait Metro.runServer(config, {\n  secureServerOptions: {\n    ca: fs.readFileSync('path/to/ca'),\n    cert: fs.readFileSync('path/to/cert'),\n    key: fs.readFileSync('path/to/key'),\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Import Example\nDESCRIPTION: This code snippet demonstrates a basic JavaScript import statement. Metro needs to resolve the module name 'react-native' to a specific file path within the project, usually within the 'node_modules' directory.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Resolution.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/App.js\nimport {View} from 'react-native';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Cloning and Branching with Git\nDESCRIPTION: This snippet demonstrates how to clone the Metro repository from GitHub and create a new branch based on the `main` branch. It's a crucial first step for any contributor.\nSOURCE: https://github.com/facebook/metro/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/facebook/metro\ncd metro\ngit checkout -b my_branch\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver Function Signature (Flow)\nDESCRIPTION: This code snippet defines the expected function signature for a custom resolver function in Metro. It takes a resolution context, module name, and platform as input, and returns a Resolution object indicating the type and path(s) of the resolved module.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Resolution.md#_snippet_2\n\nLANGUAGE: flow\nCODE:\n```\nfunction resolveRequest(\n  context: ResolutionContext,\n  moduleName: string,\n  platform: string | null,\n): Resolution {\n  // ...\n}\n\ntype Resolution =\n  | {type: 'empty'}\n  | {type: 'sourceFile', filePath: string}\n  | {type: 'assetFiles', filePaths: $ReadOnlyArray<string>};\n```\n\n----------------------------------------\n\nTITLE: Linking Metro packages in a target project using yarn link\nDESCRIPTION: This command links the registered Metro packages (metro, metro-config, metro-runtime) into the target React Native project, allowing local changes to be tested. At a minimum, `metro` and `metro-runtime` need to be linked.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/LocalDevelopment.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Links 3 packages\nyarn link metro metro-config metro-runtime\n```\n\n----------------------------------------\n\nTITLE: Registering local Metro packages using yarn link\nDESCRIPTION: This command registers all packages within the Metro clone's workspaces to be linked later in a target project. It uses npm exec to run yarn link across all workspaces.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/LocalDevelopment.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm exec --workspaces -- yarn link\n```\n\n----------------------------------------\n\nTITLE: Advanced `require()` Usage with Module IDs in Metro\nDESCRIPTION: This snippet illustrates how to use `require()` with module IDs obtained from `require.resolveWeak()`. It demonstrates bypassing the restriction on non-constant `require()` arguments by assigning `require` to another variable and then calling it with the module ID. This is an advanced technique for dynamic module loading.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/ModuleAPI.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst localModule = require('./path/module');\nconst id = require.resolveWeak('./path/module');\n// Bypass the restriction on non-constant require() arguments\nconst dynamicRequire = require;\ndynamicRequire(id) === localModule; // true\n```\n\n----------------------------------------\n\nTITLE: Clear Watchman Watches\nDESCRIPTION: This command clears all Watchman watches, which can resolve issues related to file watching and updates not being detected by Metro. This ensures a clean slate for file monitoring.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Troubleshooting.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nwatchman watch-del-all\n```\n\n----------------------------------------\n\nTITLE: CacheStores Type Definition (Flow)\nDESCRIPTION: Defines the `CacheStores` type in Flow, which represents a list of storage adapters for Metro's transformer cache. It shows the structure for configuring different types of cache stores, including built-in and custom cache stores, extending `MetroCache` to include FileStore, AutoCleanFileStore, HttpStore and HttpGetStore.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_1\n\nLANGUAGE: flow\nCODE:\n```\ntype CacheStores =\n  | Array<CacheStore<Buffer | JsonSerializable>>\n  | ((MetroCache) => Array<\n      CacheStore<Buffer | JsonSerializable>\n    >);\n\n// The exports of 'metro-cache'\ntype MetroCache = {\n  FileStore,\n  AutoCleanFileStore,\n  HttpStore,\n  HttpGetStore,\n  ...\n};\n\ntype JsonSerializable = /* Any JSON-serializable value */;\n```\n\n----------------------------------------\n\nTITLE: Dependency Type Definition in Flow\nDESCRIPTION: This code snippet defines the `Dependency` type using Flow's type annotation syntax. It describes the structure of a dependency descriptor, including properties like `name`, `key`, `locs`, and `asyncType`. The `name` represents the module name, `key` is a unique identifier, `locs` contains source locations, and `asyncType` specifies the asynchronous loading behavior.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Resolution.md#_snippet_3\n\nLANGUAGE: Flow\nCODE:\n```\ntype Dependency = {\n  // The literal name provided to a require or import call. For example 'foo' in\n  // case of `require('foo')`.\n  name: string,\n\n  data: {\n    // A locally unique key for this dependency within the origin module.\n    key: string,\n\n    // Source locations from the Babel AST, relative to the origin module, where\n    // this dependency was encountered. This may be an empty array.\n    locs: $ReadOnlyArray<BabelSourceLocation>,\n\n    asyncType: 'async' | 'prefetch' | 'weak' | null,\n\n    // Other properties are considered internal and may change in the future.\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This snippet shows how to install project dependencies using Yarn. This step is necessary to set up the development environment and ensure that all required packages are available.\nSOURCE: https://github.com/facebook/metro/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: JavaScript Transformer - Babel Integration\nDESCRIPTION: This code demonstrates how to integrate Babel into the JavaScript transformer. It transforms the code using Babel with custom options.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst {transformSync} = require('@babel/core');\n\nmodule.exports.transform = file => {\n  return transformSync(file.src, {\n    // Babel options...\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Metro server with React Native\nDESCRIPTION: This command starts the Metro server within the target React Native project, allowing the app to be built and run with the linked Metro packages. Remember to restart this command after making changes to Metro or the target project's metro.config.js file.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/LocalDevelopment.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn react-native start\n```\n\n----------------------------------------\n\nTITLE: Using Metro with Express middleware\nDESCRIPTION: This example shows how to integrate Metro with an Express application using `processRequest` as middleware. This allows all bundle requests to be handled by metro.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst app = express();\n\napp.use(\n  metroBundlerServer.processRequest.bind(metroBundlerServer),\n);\n\napp.listen(8081);\n```\n\n----------------------------------------\n\nTITLE: Running Metro server with onClose hook\nDESCRIPTION: This code demonstrates how to use the `runServer` method with the `onClose` option. It defines a callback function that is called when the server and its associated processes are closed.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = await Metro.loadConfig();\n\nconst metroHttpServer = await Metro.runServer(config, {\n  onClose: () => {console.log('metro server and all associated processes are closed')}\n});\n\nhttpServer.on('close', () => {console.log('metro server is closed')});\n```\n\n----------------------------------------\n\nTITLE: ExtraTransformOptions Type Definition (Flow)\nDESCRIPTION: This snippet defines the `ExtraTransformOptions` type, which specifies the structure of the object returned by `getTransformOptions`. It includes options for preloaded modules, RAM groups, and advanced transform settings like inline requires.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_6\n\nLANGUAGE: flow\nCODE:\n```\ntype ExtraTransformOptions = {\n  preloadedModules?: {[path: string]: true} | false,\n  ramGroups?: Array<string>,\n  transform?: {\n    inlineRequires?: {blockList: {[string]: true}} | boolean,\n    nonInlinedRequires?: $ReadOnlyArray<string>,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Merging Configurations in Metro with JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to merge two Metro configuration objects (configA and configB) using the `mergeConfig` function from the `metro-config` package. It showcases a common use case for customizing Metro's behavior by combining different configuration settings.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// metro.config.js\nconst { mergeConfig } = require('metro-config');\n\nconst configA = {\n  /* general options */\n\n  resolver: {\n    /* resolver options */\n  },\n  transformer: {\n    /* transformer options */\n  },\n  serializer: {\n    /* serializer options */\n  },\n  server: {\n    /* server options */\n  }\n};\n\nconst configB = {\n  /* general options */\n\n  resolver: {\n    /* resolver options */\n  },\n  transformer: {\n    /* transformer options */\n  },\n  serializer: {\n    /* serializer options */\n  },\n  server: {\n    /* server options */\n  }\n};\n\nmodule.exports = mergeConfig(configA, configB);\n```\n\n----------------------------------------\n\nTITLE: PerfLoggerFactory Example (JavaScript)\nDESCRIPTION: An example implementation of `unstable_perfLoggerFactory`, demonstrating how to create a no-op logger for Metro performance timings.  It takes a type and factoryOpts as input and returns a `RootPerfLogger` interface.  The logger includes methods for start, end, subSpan, point, and annotate.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unstable_perfLoggerFactory = (type, factoryOpts) => {\n  const getLogger = subSpanLabel => {\n    const logger = {\n      start(opts) {},\n      end(status, opts) {},\n      subSpan(label) {\n        return getLogger(`${subSpanLabel ?? ''}/${label}`);\n      },\n      point(name, opts) {},\n      annotate(annotations) {},\n    };\n    return logger;\n  };\n\n  return getLogger();\n};\n```\n\n----------------------------------------\n\nTITLE: Decoding Function Map Mappings (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates the decoding procedure for the `mappings` field within a function map.  It initializes variables for column, nameIndex, and line, and then iterates through the encoded mappings, calculating offsets and pushing the decoded information (column, name, line) into an array.  The code relies on pre-existing 'names' array from the function map.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/SourceMapFormat.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst decoded = [];\nconst names = ['a', '<global>', 'b']; // From the function map\n\nlet column = 0, nameIndex = 0, line = 1;\ncolumn += 0 /* A */; nameIndex += 0 /* A */; line += 0 /* A */;\ndecoded.push({column, name: names[nameIndex] /* 'a' */, line});\n\ncolumn += 14 /* c */; nameIndex += 1 /* C */; // no line delta\ndecoded.push({column, name: names[nameIndex] /* '<global>' */, line});\n\ncolumn += 1 /* C */; nameIndex += 1 /* C */; // no line delta\ndecoded.push({column, name: names[nameIndex] /* 'b' */, line});\n\n/*\n  decoded = [\n    {column: 0, name: 'a', line: 1},\n    {column: 14, name: '<global>', line: 1},\n    {column: 15, name: 'b', line: 1},\n  ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Enabling debug logging for Metro\nDESCRIPTION: This command starts the Metro server with debug logging enabled for all Metro-defined messages.  The DEBUG environment variable is set to 'Metro:*' to capture all debug logs under the 'Metro:' scope.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/LocalDevelopment.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nDEBUG='Metro:*' yarn metro serve\n```\n\n----------------------------------------\n\nTITLE: Running Metro server with default options\nDESCRIPTION: This example demonstrates how to start the Metro server with the default options. It loads the configuration and calls the `runServer` method without any additional options.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = await Metro.loadConfig();\n\nawait Metro.runServer(config);\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with npm\nDESCRIPTION: This command starts the Metro website's development server using npm. After running this command, the website can be accessed at http://localhost:3000.\nSOURCE: https://github.com/facebook/metro/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\nOpen http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Incorrect import specifier\nDESCRIPTION: Demonstrates an incorrect import specifier, where the import includes the file extension, but the 'exports' field does not explicitly define an entry for that specific extension.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport FooComponent from 'some-pkg/FooComponent.js';\n// Inaccessible unless the package had also listed \"./FooComponent.js\"\n// as an \"exports\" key\n```\n\n----------------------------------------\n\nTITLE: Remove Metro Cache\nDESCRIPTION: This command removes the Metro cache directory, forcing Metro to rebuild the cache from scratch. This can resolve issues related to outdated or corrupted cache data. The location defaults to /tmp/metro-* if TMPDIR is not set.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Troubleshooting.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nrm -rf ${TMPDIR:-/tmp}/metro-*\n```\n\n----------------------------------------\n\nTITLE: JavaScript Transformer - Basic AST parsing\nDESCRIPTION: This is the most basic JavaScript transformer that simply parses the code to AST using `@babel/parser`. It's the default transformer.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst babylon = require('@babel/parser');\n\nmodule.exports.transform = (file: {filename: string, src: string}) => {\n  const ast = babylon.parse(file.src, {sourceType: 'module'});\n\n  return {ast};\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Website to GitHub Pages (Staging)\nDESCRIPTION: This command deploys the Metro website to a staging environment using your own GitHub fork. It requires replacing placeholders with your GitHub username and ensures the deployment targets your personal repository.\nSOURCE: https://github.com/facebook/metro/blob/main/website/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nDEPLOY_USER=YOUR_GITHUB_USERNAME GIT_USER=YOUR_GITHUB_USERNAME CIRCLE_PROJECT_USERNAME=YOUR_GITHUB_USERNAME CIRCLE_PROJECT_REPONAME=metro npm run gh-pages\n```\n\n----------------------------------------\n\nTITLE: Deploying Website to GitHub Pages (Production)\nDESCRIPTION: This command deploys the Metro website to the gh-pages branch of the facebook/metro repository. It requires write permissions to the repository and sets environment variables for deployment user, Git user, and CircleCI project details.\nSOURCE: https://github.com/facebook/metro/blob/main/website/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nDEPLOY_USER=facebook GIT_USER=metro-bot CIRCLE_PROJECT_USERNAME=facebook CIRCLE_PROJECT_REPONAME=metro npm run gh-pages\n```\n\n----------------------------------------\n\nTITLE: Requiring Metro module in JavaScript\nDESCRIPTION: This code snippet shows how to require the Metro module in a JavaScript file. It imports the Metro module, allowing access to its functionalities.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Metro = require('metro');\n```\n\n----------------------------------------\n\nTITLE: Import component without exports\nDESCRIPTION: Illustrates how Metro tries multiple potential file locations based on the import specifier for a package without an 'exports' field. It tries different platform-specific extensions.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FooComponent from 'some-pkg/FooComponent';\n// Tries .[platform].js, .native.js, .js (+ TypeScript variants)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Component Selection (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use the Platform.select() API in React Native to conditionally require different component implementations based on the platform (Android, iOS). It imports different modules based on the platform and exports the selected component as the default export. This approach is useful for providing platform-specific UI or behavior.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/PackageExports.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// src/FooComponent.js\n\nconst FooComponent = Platform.select({\n  android: require('./FooComponentAndroid.js'),\n  ios: require('FooComponentIOS.js'),\n});\n\nexport default FooComponent;\n```\n\n----------------------------------------\n\nTITLE: Haste Implementation Module Export in JavaScript\nDESCRIPTION: This code snippet shows the expected signature for a Haste implementation module in Metro. The `getHasteName` function should return a short, globally unique name for the module at the given file path, or `null` if the module should not be accessible via Haste. Haste allows importing modules by their globally-unique name.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/Configuration.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  getHasteName(filePath: string): ?string {\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Metro using npm\nDESCRIPTION: This command installs Metro and metro-core as development dependencies using npm. This is the recommended way to add Metro to your project.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/GettingStarted.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev metro metro-core\n```\n\n----------------------------------------\n\nTITLE: Source Map Example with x_facebook_sources (JSON)\nDESCRIPTION: This JSON snippet demonstrates a complete source map including the `x_facebook_sources` field.  It shows how function map data (names and mappings) are embedded within the custom field to link code regions to function names. Comments are included for clarity but are not part of the actual source map format.\nSOURCE: https://github.com/facebook/metro/blob/main/docs/SourceMapFormat.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 3,\n  \"sources\": [\"file.js\"],\n  \"sourcesContent\": [\"function a(){} function b(){}\"],\n  \"mappings\": \"AAAA\", // NOTE: Simplified\n  \"x_facebook_sources\": [\n    // Metadata tuple for source #0 (file.js)\n    [\n      // Metadata item #0.0 = function map for source #0 (file.js)\n      {\n        // a from 1:0\n        // <global> from 1:14\n        // b from 1:15\n        // (See detailed decoding procedure below.)\n        \"mappings\": \"AAA,cC,CC\",\n        \"names\": [\n          \"a\",\n          \"<global>\",\n          \"b\"\n        ]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the Metro website project using Yarn. It should be executed in the root directory of the project.\nSOURCE: https://github.com/facebook/metro/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn\n```"
  }
]