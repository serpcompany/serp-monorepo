[
  {
    "owner": "aframevr",
    "repo": "aframe",
    "content": "TITLE: Implementing Follow Component Behavior in A-Frame\nDESCRIPTION: This snippet demonstrates the implementation of a 'follow' component in A-Frame. It uses the tick handler to continuously update the entity's position to follow a target entity at a specified speed.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nAFRAME.registerComponent('follow', {\n  schema: {\n    target: {type: 'selector'},\n    speed: {type: 'number'}\n  },\n\n  init: function () {\n    this.directionVec3 = new THREE.Vector3();\n  },\n\n  tick: function (time, timeDelta) {\n    var directionVec3 = this.directionVec3;\n\n    // Grab position vectors (THREE.Vector3) from the entities' three.js objects.\n    var targetPosition = this.data.target.object3D.position;\n    var currentPosition = this.el.object3D.position;\n\n    // Subtract the vectors to get the direction the entity should head in.\n    directionVec3.copy(targetPosition).sub(currentPosition);\n\n    // Calculate the distance.\n    var distance = directionVec3.length();\n\n    // Don't go any closer if a close proximity has been reached.\n    if (distance < 1) { return; }\n\n    // Scale the direction vector's magnitude down to match the speed.\n    var factor = this.data.speed / distance;\n    ['x', 'y', 'z'].forEach(function (axis) {\n      directionVec3[axis] *= factor * (timeDelta / 1000);\n    });\n\n    // Translate the entity in the direction towards the target.\n    this.el.setAttribute('position', {\n      x: currentPosition.x + directionVec3.x,\n      y: currentPosition.y + directionVec3.y,\n      z: currentPosition.z + directionVec3.z\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic A-Frame Component in JavaScript\nDESCRIPTION: Demonstrates the structure of a basic A-Frame component with lifecycle methods and a schema. This component can be attached to entities in the A-Frame scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/entity-component-system.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  schema: {\n    bar: {type: 'number'},\n    baz: {type: 'string'}\n  },\n\n  init: function () {\n    // Do something when component first attached.\n  },\n\n  update: function () {\n    // Do something when component's data is updated.\n  },\n\n  remove: function () {\n    // Do something when the component or its entity is detached.\n  },\n\n  tick: function (time, timeDelta) {\n    // Do something on every scene tick or frame.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Property Type in A-Frame Component Schema\nDESCRIPTION: Demonstrates how to create a custom property type with parse and stringify functions for handling slash-delimited strings as arrays in an A-Frame component schema.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nschema: {\n  // Parse slash-delimited string to an array (e.g., `foo=\"myProperty: a/b\"` to `['a', 'b']`),\n  // stringify array to string (e.g., `['a', 'b']` to `foo=\"myProperty: a/b\"`)\n  myProperty: {\n    default: [],\n    parse: function (value) {\n      return value.split('/');\n    },\n    stringify: function (value) {\n      return value.join('/');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex A-Frame Scene with Multiple Community Components\nDESCRIPTION: This example demonstrates a more complex A-Frame scene using various community components including particle system, simple-sun-sky, and ocean. It also showcases animation and lighting effects.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/entity-component-system.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Community Components Example</title>\n    <meta name=\"description\" content=\"Community Components Example\">\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n    <script src=\"https://unpkg.com/@c-frame/aframe-particle-system-component@1.2.x/dist/aframe-particle-system-component.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/aframe-simple-sun-sky@^1.2.2/simple-sun-sky.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/gh/c-frame/aframe-extras@7.5.0/dist/aframe-extras.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-entity id=\"rain\" particle-system=\"preset: rain; color: #24CAFF; particleCount: 5000\"></a-entity>\n\n      <a-entity id=\"sphere\" geometry=\"primitive: sphere\"\n                material=\"color: #EFEFEF; shader: flat\"\n                position=\"0 0.15 -5\"\n                light=\"type: point; intensity: 5\"\n                animation=\"property: position; easing: easeInOutQuad; dir: alternate; dur: 1000; to: 0 -0.10 -5; loop: true\"></a-entity>\n\n      <a-entity id=\"ocean\" ocean=\"density: 20; width: 50; depth: 50; speed: 4\"\n                material=\"color: #9CE3F9; opacity: 0.75; metalness: 0; roughness: 1\"\n                rotation=\"-90 0 0\"></a-entity>\n\n      <a-simple-sun-sky sun-position=\"1 0.4 0\"></a-simple-sun-sky>\n\n      <a-entity id=\"light\" light=\"type: ambient; color: #888\"></a-entity>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Entity-Component Pattern in A-Frame\nDESCRIPTION: Shows how A-Frame primitives like a-box are composed using the entity-component pattern. This example demonstrates how to create a box by manually attaching geometry and material components to an entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- <a-box color=\"red\" depth=\"0.5\" height=\"0.5\" shader=\"flat\" width=\"0.5\"></a-box> -->\n<a-entity geometry=\"primitive: box; depth: 0.5; height: 0.5; width: 0.5\"\n          material=\"color: red; shader: standard\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic A-Frame VR Scene in HTML\nDESCRIPTION: A starter example showing how to create a basic 3D VR scene using A-Frame. The scene includes basic 3D shapes like a box, sphere, cylinder, and plane with different colors and positions. The scene is created using A-Frame's built-in components and requires the A-Frame library.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/index.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\"></a-box>\n      <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\"></a-sphere>\n      <a-cylinder position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" color=\"#FFC65D\"></a-cylinder>\n      <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" color=\"#7BC8A4\"></a-plane>\n      <a-sky color=\"#ECECEC\"></a-sky>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including A-Frame via CDN Script Tag in HTML\nDESCRIPTION: Basic HTML script tag to include the A-Frame framework from CDN in an HTML file.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Complete A-Frame Component with Event Management\nDESCRIPTION: Full implementation of a log component with proper event listener management and cleanup.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('log', {\n  schema: {\n    event: {type: 'string', default: ''},\n    message: {type: 'string', default: 'Hello, World!'}\n  },\n\n  init: function () {\n    var self = this;\n    this.eventHandlerFn = function () { console.log(self.data.message); };\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n\n    if (data.event !== oldData.event) {\n      if (oldData.event) {\n        el.removeEventListener(oldData.event, this.eventHandlerFn);\n      }\n      if (data.event) {\n        el.addEventListener(data.event, this.eventHandlerFn);\n      }\n    }\n\n    if (!data.event) {\n      console.log(data.message);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Parent-Child Relationships in A-Frame\nDESCRIPTION: Demonstration of parent-child relationships in A-Frame's scene graph. Child entities (the sphere) inherit transformations from their parent entities (the box), creating compound objects.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box position=\"0 2 0\" rotation=\"0 45 45\" scale=\"2 4 2\">\n    <a-sphere position=\"1 0 3\"></a-sphere>\n  </a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Registering a System and Component in A-Frame\nDESCRIPTION: This snippet demonstrates how to register a system and a component with the same name in A-Frame. The component will have a reference to the system as 'this.system'.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/systems.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerSystem('my-component', {\n  schema: {},  // System schema. Parses into `this.data`.\n\n  init: function () {\n    // Called on scene initialization.\n  },\n\n  // Other handlers and methods.\n});\n\nAFRAME.registerComponent('my-component', {\n  init: function () {\n    console.log(this.system);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including A-Frame in HTML using CDN\nDESCRIPTION: This snippet shows how to include the latest stable build of A-Frame in an HTML file using a CDN link.\nSOURCE: https://github.com/aframevr/aframe/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n  <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Scene with A-Frame in HTML\nDESCRIPTION: This snippet demonstrates how to create a simple 3D scene using A-Frame's HTML components. It includes basic geometric shapes, positioning, and a sky background.\nSOURCE: https://github.com/aframevr/aframe/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\"></a-box>\n      <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\"></a-sphere>\n      <a-cylinder position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" color=\"#FFC65D\"></a-cylinder>\n      <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" color=\"#7BC8A4\"></a-plane>\n      <a-sky color=\"#ECECEC\"></a-sky>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Box Entity to A-Frame Scene\nDESCRIPTION: A simple example of adding an a-box primitive entity to the scene with a red color. This demonstrates the basic syntax for adding 3D objects to an A-Frame scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box color=\"red\"></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Animating on Events in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to configure animations that respond to mouse events and custom events in A-Frame. It shows how to animate material color changes on mouseenter, mouseleave, and a custom trigger event.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/animation.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"mouseCursor\" cursor=\"rayOrigin: mouse\"></a-entity>\n\n<a-entity\n  geometry=\"primitive: box\"\n  material=\"color: red\"\n  animation__mouseenter=\"property: components.material.material.color; type: color; to: blue; startEvents: mouseenter; dur: 500\";\n  animation__mouseleave=\"property: components.material.material.color; type: color; to: red; startEvents: mouseleave; dur: 500\";\n  animation__customevent=\"property: components.material.material.color; type: color; from: red; to: blue; startEvents: triggeranimation; dur: 500\";\n></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic A-Frame Scene with Assets\nDESCRIPTION: Example of a simple A-Frame scene that includes an asset management system and a textured box entity. The scene handles all the WebVR/WebXR boilerplate setup automatically.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/scene.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"texture\" src=\"texture.png\">\n  </a-assets>\n\n  <a-box src=\"#texture\"></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Component Execution Order Control\nDESCRIPTION: Example showing how to control component execution order using before and after properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  after: ['bar'],\n  // ...\n  tick: function() {\n    console.log('Called second');\n  }\n  // ...\n});\n\nAFRAME.registerComponent('bar', {\n  before: ['foo'],\n  // ...\n  tick: function() {\n    console.log('Called first');\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Registering and Using A-Frame Components in HTML\nDESCRIPTION: Shows how to include component scripts in an HTML document before the a-scene element. Components can be defined in external files or inline before the scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"foo-component.js\"></script>\n  </head>\n  <body>\n    <script>\n      // Or inline before the <a-scene>.\n      AFRAME.registerComponent('bar', {\n        // ...\n      });\n    </script>\n\n    <a-scene>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Custom Material Component with Three.js\nDESCRIPTION: Example of creating a custom material using THREE.ShaderMaterial within an A-Frame component. Useful when registerShader API functionality is insufficient.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('custom-material', {\n  schema: {\n    // Add properties.\n  },\n\n  init: function () {\n    this.el.addEventListener(\"loaded\", e => { // when using gltf models use \"model-loaded\" instead\n      this.material = this.el.getObject3D('mesh').material = new THREE.ShaderMaterial({\n      // ...\n      });\n    });\n  },\n\n  update: function () {\n    // Update `this.material`.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic A-Frame HTML Structure\nDESCRIPTION: The minimal HTML structure needed to initialize an A-Frame scene. This includes loading the A-Frame library from CDN and creating an empty scene element that will contain all 3D entities.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation with Custom Start Event in A-Frame JavaScript\nDESCRIPTION: This code example illustrates how to configure an animation component with a custom start event using setAttribute. It sets up an animation that changes the position of an entity and starts when a specific event is emitted.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/animation.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nel.setAttribute('animation__001', {'property': 'position',\n                                 'to': {x: 1, y: 1, z: 1},                                 \n                                 'startEvents': 'startanim001'});\n```\n\n----------------------------------------\n\nTITLE: Basic A-Frame Scene Structure\nDESCRIPTION: Example HTML structure showing a simple A-Frame scene with several entities including boxes, spheres, and lights. This structure is used as a reference for subsequent query selector examples.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <a-scene>\n    <a-box id=\"redBox\" class=\"clickable\" color=\"red\"></a-box>\n    <a-sphere class=\"clickable\" color=\"blue\"></a-sphere>\n    <a-box color=\"green\"></a-box>\n    <a-entity light=\"type: ambient\"></a-entity>\n    <a-entity light=\"type: directional\"></a-entity>\n  </a-scene>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Component Initialization Dependencies Example\nDESCRIPTION: Demonstration of controlling component initialization order using dependencies property.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Initializes last.\nAFRAME.registerComponent('a', {\n  dependencies: ['b']\n});\n\n// Initializes second.\nAFRAME.registerComponent('b', {\n  dependencies: ['c']\n});\n\n// Initializes first.\nAFRAME.registerComponent('c', {});\n```\n\n----------------------------------------\n\nTITLE: Component Usage HTML Example\nDESCRIPTION: Shows the complete HTML structure for using a custom component, including necessary script imports and scene setup.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"aframe.min.js\"></script>\n    <script src=\"foo-component.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-entity foo></a-entity>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing angle CLI and Initializing A-Frame Component\nDESCRIPTION: Command to globally install the angle CLI tool and initialize a new A-Frame component template. The angle tool provides a standardized setup for publishing components to GitHub and npm.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g angle && angle initcomponent\n```\n\n----------------------------------------\n\nTITLE: Animating A-Frame Box on Events in HTML\nDESCRIPTION: This snippet demonstrates how to add multiple animations to an A-Frame box entity, triggered by different events such as mouseenter, mouseleave, and click. It uses the animation component with different properties to change scale and rotation.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<a-box\n  src=\"#boxTexture\"\n  position=\"0 2 -5\"\n  rotation=\"0 45 45\"\n  scale=\"2 2 2\"\n  animation__position=\"property: object3D.position.y; to: 2.2; dir: alternate; dur: 2000; loop: true\"\n  animation__mouseenter=\"property: scale; to: 2.3 2.3 2.3; dur: 300; startEvents: mouseenter\"\n  animation__mouseleave=\"property: scale; to: 2 2 2; dur: 300; startEvents: mouseleave\"\n  animation__click=\"property: rotation; from: 0 45 45; to: 0 405 45; dur: 1000; startEvents: click\"></a-box>\n```\n\n----------------------------------------\n\nTITLE: Adding Text to A-Frame Scene using SDF Text in HTML\nDESCRIPTION: This snippet shows how to add text to an A-Frame scene using the text component. It demonstrates setting text value, color, width, anchor, position, and scale properties for optimal rendering and positioning.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<a-entity text=\"value: Hello, A-Frame; color: #FAFAFA; width: 5; anchor: align\"\n          position=\"-0.9 0.2 -3\"\n          scale=\"1.5 1.5 1.5\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hand Controls in A-Frame VR\nDESCRIPTION: Example of how to implement hand controls for both left and right hands in A-Frame. The example shows setting the hand property, handModelStyle (using lowPoly), and customizing the color.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/hand-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"leftHand\" hand-controls=\"hand: left; handModelStyle: lowPoly; color: #ffcccc\"></a-entity>\n<a-entity id=\"rightHand\" hand-controls=\"hand: right; handModelStyle: lowPoly; color: #ffcccc\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Component Registration JavaScript Example\nDESCRIPTION: Demonstrates how to register a new A-Frame component with lifecycle methods using AFRAME.registerComponent()\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  schema: {},\n  init: function () {},\n  update: function () {},\n  tick: function () {},\n  remove: function () {},\n  pause: function () {},\n  play: function () {}\n});\n```\n\n----------------------------------------\n\nTITLE: Raycaster Intersection Event Handling Component\nDESCRIPTION: Implementation of a component that listens for raycaster intersections and processes intersection data on each frame. Includes event handling for intersection start/end and intersection point tracking.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/raycaster.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('raycaster-listen', {\n\tinit: function () {\n    // Use events to figure out what raycaster is listening so we don't have to\n    // hardcode the raycaster.\n    this.el.addEventListener('raycaster-intersected', evt => {\n      this.raycaster = evt.detail.el;\n    });\n    this.el.addEventListener('raycaster-intersected-cleared', evt => {\n      this.raycaster = null;\n    });\n  },\n\n  tick: function () {\n    if (!this.raycaster) { return; }  // Not intersecting.\n\n    let intersection = this.raycaster.components.raycaster.getIntersection(this.el);\n    if (!intersection) { return; }\n    console.log(intersection.point);\n  }\n});\n\n// <a-entity id=\"raycaster\" raycaster></a-entity>\n// <a-entity geometry material raycaster-listen></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Entities in A-Frame HTML\nDESCRIPTION: Example of nesting A-Frame entities to demonstrate parent-child relationships that will be reflected in the three.js scene graph. Shows a box containing a sphere and light.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/developing-with-threejs.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box>\n    <a-sphere></a-sphere>\n    <a-light></a-light>\n  </a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Separating Logic and Data in A-Frame Systems and Components\nDESCRIPTION: This example demonstrates a pattern for separating logic and data between systems and components in A-Frame. The system handles complex operations while the component manages data.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/systems.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerSystem('my-component', {\n  createComplexObject: function (data) {\n    // Do calculations and stuff with data.\n    return new ComplexObject(data);\n  }\n});\n\nAFRAME.registerComponent('my-component', {\n  init: function () {\n    this.myObject = null;\n  },\n\n  update: function () {\n    // Do stuff with `this.data`.\n    this.myObject = this.system.createComplexObject(this.data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic A-Frame Scene with HTML Primitives\nDESCRIPTION: A basic 'Hello WebVR' example demonstrating the use of common A-Frame primitives like box, sphere, cylinder, plane and sky to create a 3D scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/html-and-primitives.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\"></a-box>\n      <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\"></a-sphere>\n      <a-cylinder position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" color=\"#FFC65D\"></a-cylinder>\n      <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" color=\"#7BC8A4\"></a-plane>\n      <a-sky color=\"#ECECEC\"></a-sky>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Entity-Component System with A-Frame\nDESCRIPTION: An equivalent example using A-Frame's entity-component system instead of primitives. This demonstrates how primitives are syntactic sugar for entity-component combinations.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"box\" geometry=\"primitive: box\" material=\"color: red\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Scene with Ground Plane and Lighting in HTML\nDESCRIPTION: Demonstrates adding a textured ground plane and custom lighting setup to an A-Frame scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  ...\n  <a-light type=\"ambient\" color=\"#445451\"></a-light>\n  <a-light type=\"point\" intensity=\"2\" position=\"2 4 4\"></a-light>\n  ...\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Configuring XR Select Cursor in A-Frame HTML\nDESCRIPTION: This code snippet shows how to set up an XR select cursor in an A-Frame scene. It configures both mouse and XR select raycasters, allowing for interaction in handheld AR, headmounted VR and AR, as well as mouse input.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/cursor.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-scene\n  cursor__mouse=\"rayOrigin: mouse\"\n  cursor__xrselect=\"rayOrigin: xrselect\"\n  raycaster=\"objects:#objects *;\"\n>\n```\n\n----------------------------------------\n\nTITLE: Creating an A-Frame Component with Schema Properties\nDESCRIPTION: Shows how to define configurable properties for a component using the schema. This example creates a 'log' component with a customizable message property of type string.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('log', {\n  schema: {\n    message: {type: 'string', default: 'Hello, World!'}\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced A-Frame Import Map with Three.js\nDESCRIPTION: Demonstrates comprehensive import map setup including Three.js dependencies and module imports. Shows how to avoid multiple Three.js instance warnings and properly import addons.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/faq.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n  <script type=\"importmap\">\n    {\n      \"imports\": {\n        \"aframe\": \"https://aframe.io/releases/1.7.1/aframe.module.min.js\",\n        \"three\": \"https://cdn.jsdelivr.net/npm/super-three@0.173.5/build/three.module.js\",\n        \"three/addons/\": \"https://cdn.jsdelivr.net/npm/super-three@0.173.5/examples/jsm/\",\n        \"aframe-extras/controls\": \"https://cdn.jsdelivr.net/gh/c-frame/aframe-extras@7.5.x/dist/aframe-extras.controls.min.js\"\n      }\n    }\n  </script>\n  <script type=\"module\">\n    import AFRAME from \"aframe\";\n    // AFRAME and THREE variables are available globally, the imported aframe-master.module.min.js bundle basically does:\n    // import * as THREE from \"three\"\n    // window.THREE = THREE\n    import { TeapotGeometry } from \"three/addons/geometries/TeapotGeometry.js\"; // This uses the same three instance.\n    AFRAME.registerComponent(\"teapot\", {\n      ...\n    }\n  </script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Initializing Box Mesh Component in A-Frame using Three.js\nDESCRIPTION: This snippet demonstrates how to create a basic box mesh component in A-Frame using Three.js. It includes setting up the schema, creating geometry, material, and mesh in the init function, and setting the object on the entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nAFRAME.registerComponent('box', {\n  schema: {\n    width: {type: 'number', default: 1},\n    height: {type: 'number', default: 1},\n    depth: {type: 'number', default: 1},\n    color: {type: 'color', default: '#AAA'}\n  },\n\n  /**\n   * Initial creation and setting of the mesh.\n   */\n  init: function () {\n    var data = this.data;\n    var el = this.el;\n\n    // Create geometry.\n    this.geometry = new THREE.BoxGeometry(data.width, data.height, data.depth);\n\n    // Create material.\n    this.material = new THREE.MeshStandardMaterial({color: data.color});\n\n    // Create mesh.\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n\n    // Set mesh on entity.\n    el.setObject3D('mesh', this.mesh);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Voxel Spawn Event Handler in JavaScript\nDESCRIPTION: Event listener implementation for spawning voxels on controller click. Handles intersection detection and positioning of new voxels based on raycaster intersection points.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('#blockHand').addEventListener(`click`, function (evt) {\n  // Create a blank entity.\n  var newVoxelEl = document.createElement('a-entity');\n\n  // Use the mixin to make it a voxel.\n  newVoxelEl.setAttribute('mixin', 'voxel');\n\n  // Get normal of the face of intersection and scale it down a bit\n  var normal = evt.detail.intersection.face.normal;\n  normal.multiplyScalar(0.25);\n\n  // Get the position of the intersection and add our scaled normal\n  var position = evt.detail.intersection.point;\n  position.add(normal);\n\n  // Set the position using intersection point. The `snap` component above which\n  // is part of the mixin will snap it to the closest half meter.\n  newVoxelEl.setAttribute('position', position);\n\n  // Add to the scene with `appendChild`.\n  this.appendChild(newVoxelEl);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an A-Frame Scene with Environment\nDESCRIPTION: Complete example showing a scene with both a custom entity (box) and a procedurally generated environment. The environment component creates a forest with 500 trees.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box color=\"red\" position=\"0 2 -5\" rotation=\"0 45 45\" scale=\"2 2 2\"></a-box>\n\n  <!-- Out of the box environment! -->\n  <a-entity environment=\"preset: forest; dressingAmount: 500\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Using Custom A-Frame Components in HTML\nDESCRIPTION: This snippet shows how to use the custom 'follow' component in an A-Frame scene using HTML. It demonstrates setting up a target box and a follower box with the custom component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<a-scene>\n  <a-box id=\"target-box\" color=\"#5E82C5\" position=\"-3 0 -5\"></a-box>\n  <a-box follow=\"target: #target-box; speed: 1\" color=\"#FF6B6B\" position=\"3 0 -5\"></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Gaze-Based Interaction with Cursor Component\nDESCRIPTION: Demonstrates how to set up a camera and cursor for gaze-based interaction in an A-Frame scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-camera>\n    <a-cursor></a-cursor>\n    <!-- Or <a-entity cursor></a-entity> -->\n  </a-camera>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Shader in JavaScript\nDESCRIPTION: This code demonstrates how to register a custom shader named 'my-custom' using AFRAME.registerShader. It includes a basic schema definition for color and opacity properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nAFRAME.registerShader('my-custom', {\n  schema: {\n    color: {type: 'color', is: 'uniform', default: 'red'},\n    opacity: {type: 'number', is: 'uniform', default: 1.0}\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Basic A-Frame Mixins\nDESCRIPTION: Demonstrates how to define mixins in the assets section and apply them to entities. This example creates mixins for colors (red and blue) and a geometric shape (cube), then applies these mixins to create red and blue cubes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/mixins.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-mixin id=\"red\" material=\"color: red\"></a-mixin>\n    <a-mixin id=\"blue\" material=\"color: blue\"></a-mixin>\n    <a-mixin id=\"cube\" geometry=\"primitive: box\"></a-mixin>\n  </a-assets>\n\n  <a-entity mixin=\"red cube\"></a-entity>\n  <a-entity mixin=\"blue cube\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Example Geometry in A-Frame JavaScript\nDESCRIPTION: This snippet shows how to register a custom geometry named 'example' using AFRAME.registerGeometry. It defines a schema for vertices and initializes the geometry using THREE.BufferGeometry with the provided vertices.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerGeometry('example', {\n  schema: {\n    vertices: {\n      default: ['-10 10 0', '-10 -10 0', '10 -10 0'],\n    }\n  },\n\n  init: function (data) {\n    var geometry = new THREE.BufferGeometry();\n     const pointsArray = new Array();\n     data.vertices.map(function (vertex) {\n     var points = vertex.split(' ').map(function(x){return parseInt(x);});\n     pointsArray.push(new THREE.Vector3(points[0], points[1], points[2]));\n     });\n     geometry.setFromPoints(pointsArray);\n     geometry.computeBoundingBox();\n     geometry.computeVertexNormals();\n     this.geometry = geometry;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: A-Frame Scene with Physics Components\nDESCRIPTION: Example showing how to attach community physics components to A-Frame primitives using the aframe-physics-system.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/html-and-primitives.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n    <script src=\"https://unpkg.com/@c-frame/aframe-physics-system@4.2.3/dist/aframe-physics-system.min.js\"></script>\n  </head>\n  <body>\n    <a-scene physics>\n      <a-box position=\"-1 4 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\" dynamic-body></a-box>\n      <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" color=\"#7BC8A4\" static-body></a-plane>\n      <a-sky color=\"#ECECEC\"></a-sky>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Asset Management Basic Scene in HTML\nDESCRIPTION: Demonstrates using A-Frame's asset management system to load and reference textures efficiently. Shows how to properly define assets and reference them in scene elements.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"boxTexture\" src=\"https://i.imgur.com/mYmmbrp.jpg\">\n  </a-assets>\n\n  <a-box src=\"#boxTexture\" position=\"0 2 -5\" rotation=\"0 45 45\" scale=\"2 2 2\"></a-box>\n\n  <a-sky color=\"#222\"></a-sky>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Adding Background Audio to A-Frame Scene in HTML\nDESCRIPTION: This snippet shows how to add background audio to an A-Frame scene using the <audio> element within <a-assets>. It demonstrates autoplay and preload attributes for immediate playback and improved performance.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <audio src=\"https://cdn.aframe.io/basic-guide/audio/backgroundnoise.wav\" autoplay\n      preload></audio>\n  </a-assets>\n\n  <!-- ... -->\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Using Canvas as Texture in A-Frame\nDESCRIPTION: Demonstrates how to use a canvas element as a texture source in A-Frame, including a custom component to draw on the canvas.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  AFRAME.registerComponent('draw-canvas', {\n    schema: {default: ''},\n\n    init: function () {\n      this.canvas = document.getElementById(this.data);\n      this.ctx = this.canvas.getContext('2d');\n\n      // Draw on canvas...\n    }\n  });\n</script>\n\n<a-assets>\n  <canvas id=\"my-canvas\" crossorigin=\"anonymous\"></canvas>\n</a-assets>\n\n<a-entity geometry=\"primitive: plane\" material=\"src: #my-canvas\"\n          draw-canvas=\"my-canvas\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Handling Entity Load Event\nDESCRIPTION: Shows how to handle the asynchronous nature of entity creation by using a component that executes after the entity is fully loaded.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneEl = document.querySelector('a-scene');\n\nAFRAME.registerComponent('do-something-once-loaded', {\n  init: function () {\n    // This will be called after the entity has properly attached and loaded.\n    console.log('I am ready!');\n  }\n});\n\nvar entityEl = document.createElement('a-entity');\nentityEl.setAttribute('do-something-once-loaded', '');\nsceneEl.appendChild(entityEl);\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Shader in JavaScript\nDESCRIPTION: This snippet shows the definition of a fragment shader as a multi-line string in JavaScript. It demonstrates how to use uniform variables and set the gl_FragColor.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n  fragmentShader:\n`\n  // Use medium precision.\n  precision mediump float;\n\n  // This receives the color value from the schema, which becomes a vec3 in the shader.\n  uniform vec3 color;\n\n  // This receives the opacity value from the schema, which becomes a number.\n  uniform float opacity;\n\n  // This is the shader program.\n  // A fragment shader can set the color via gl_FragColor,\n  // or decline to draw anything via discard.\n  void main () {\n    // Note that this shader doesn't use texture coordinates.\n    // Set the RGB portion to our color,\n    // and the alpha portion to our opacity.\n    gl_FragColor = vec4(color, opacity);\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Hand Controls Component in HTML\nDESCRIPTION: Shows implementation of the hand-controls component which supports multiple types of 6DoF controllers including both Vive and Oculus Touch.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a-entity hand-controls=\"hand: left\"></a-entity>\n<a-entity hand-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: World Space Camera Position/Rotation Reader\nDESCRIPTION: Component for reading camera position and rotation in world space using Three.js methods.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/camera.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('rotation-reader', {\n  /**\n   * We use IIFE (immediately-invoked function expression) to only allocate one\n   * vector or euler and not re-create on every tick to save memory.\n   */\n  tick: (function () {\n    var position = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n\n    return function () {\n      this.el.object3D.getWorldPosition(position);\n      this.el.object3D.getWorldQuaternion(quaternion);\n      // position and rotation now contain vector and quaternion in world space.\n    };\n  })()\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Component Composition in A-Frame\nDESCRIPTION: Example showing how to compose an entity with geometry, light, material and position components in A-Frame using HTML attributes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/entity-component-system.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: sphere; radius: 1.5\"\n          light=\"type: point; color: white; intensity: 2\"\n          material=\"color: white; shader: flat; src: glow.jpg\"\n          position=\"0 0 -5\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Importing A-Frame in JavaScript Module\nDESCRIPTION: Example of importing A-Frame in a JavaScript module for bundlers like Webpack or Vite.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport AFRAME from 'aframe';\n```\n\n----------------------------------------\n\nTITLE: Basic A-Frame Scene with Particle System Component\nDESCRIPTION: This snippet shows a simple A-Frame scene setup with the particle system component included and used to create a snow effect.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/entity-component-system.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n    <script src=\"https://unpkg.com/@c-frame/aframe-particle-system-component@1.2.x/dist/aframe-particle-system-component.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-entity particle-system=\"preset: snow\" position=\"0 0 -10\"></a-entity>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Applying Image Texture to A-Frame Entity\nDESCRIPTION: Example showing how to apply an image texture to a box entity and add a sky element. The image is applied using the src attribute, similar to how images work in standard HTML.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box src=\"https://i.imgur.com/mYmmbrp.jpg\" position=\"0 2 -5\" rotation=\"0 45 45\"\n    scale=\"2 2 2\"></a-box>\n\n  <a-sky color=\"#222\"></a-sky>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Animating Position of a Box in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to animate a box's position from its initial position to a new position over 2 seconds with linear easing in a continuous loop.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/animation.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-box position=\"-1 1.6 -5\" animation=\"property: position; to: 1 8 -10; dur: 2000; easing: linear; loop: true\" color=\"tomato\"></a-box>\n```\n\n----------------------------------------\n\nTITLE: Creating Curved Images with A-Frame's <a-curvedimage> Primitive\nDESCRIPTION: This code snippet demonstrates how to use the <a-curvedimage> primitive in A-Frame to create curved images. It shows two examples: one using the asset management system and another defining the image URL inline.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-curvedimage.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"my-image\" src=\"image.png\">\n  </a-assets>\n\n  <!-- Using the asset management system. -->\n  <a-curvedimage src=\"#my-image\" height=\"3.0\" radius=\"5.7\" theta-length=\"72\"\n                 rotation=\"0 100 0\" scale=\"0.8 0.8 0.8\"></a-curvedimage>\n\n  <!-- Defining the URL inline. Not recommended but more comfortable for web developers. -->\n  <a-curvedimage src=\"another-image.png\"></a-curvedimage>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Including A-Frame Script in HTML\nDESCRIPTION: This snippet shows how to include the A-Frame library script in an HTML file. It's the first step in setting up an A-Frame project.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Raycaster and Collision Detection in A-Frame\nDESCRIPTION: This snippet demonstrates how to set up a raycaster for collision detection in an A-Frame scene. It includes an entity with a raycaster component and a collidable object, along with a custom component to handle intersection events.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/raycaster.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"player\" >\n  <a-entity collider-check raycaster=\"objects: .collidable; showLine:true;\" position=\"0 1 0\"></a-entity>\n</a-entity>\n<a-entity class=\"collidable\" geometry=\"primitive: box\"  position=\"0 1 -3\"></a-entity>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('collider-check', {\n  dependencies: ['raycaster'],\n\n  init: function () {\n    this.el.addEventListener('raycaster-intersection', function () {\n      console.log('Player hit something!');\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Laser Controls with Raycaster in A-Frame\nDESCRIPTION: HTML markup showing how to combine hand controls, laser controls, and raycaster with a custom far distance setting.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<a-entity hand-controls laser-controls raycaster=\"far: 2\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing X Button Event Listener Component in A-Frame\nDESCRIPTION: An A-Frame component that listens for the Oculus Touch X button press event and toggles visibility of the entity it's attached to. Shows how to register a component and handle controller button events.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('x-button-listener', {\n  init: function () {\n    var el = this.el;\n    el.addEventListener('xbuttondown', function (evt) {\n      el.setAttribute('visible', !el.getAttribute('visible'));\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic A-Frame Component with JS\nDESCRIPTION: Shows how to register a simple logging component that accepts a string parameter and logs it to the console. This exemplifies the recommended pattern for encapsulating JavaScript code in A-Frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('log', {\n  schema: {type: 'string'},\n\n  init: function () {\n    var stringToLog = this.data;\n    console.log(stringToLog);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Cordova A-Frame Integration Template\nDESCRIPTION: Complete HTML template showing how to integrate A-Frame with Cordova, including necessary security policies and initialization.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta\n        http-equiv=\"Content-Security-Policy\"\n        content=\"\n          default-src \n            'self' \n            data: \n            gap: \n            https://ssl.gstatic.com \n            'unsafe-eval' \n            https://cdn.aframe.io         <-- required\n            https://fonts.googleapis.com  <-- required\n            https://cdn.jsdelivr.net      <-- your choice, see below\n            ; \n          style-src \n            'self' \n            'unsafe-inline'\n            ; \n          media-src *; \n          img-src \n            'self' \n            data:                         <-- required\n            content:                      <-- required\n            blob:                         <-- required\n            ;\n        \"\n      />\n  ...\n  <script src=\"https://cdn.jsdelivr.net/npm/aframe@1.7.1/dist/aframe-master.min.js\"></script>\n  <script id='my-scene' type=\"text/html\">\n    ...your scene goes here...\n  </script>\n  <script>\n    document.addEventListener('deviceready', function() {\n      // After the 'deviceready' event, Cordova is ready for you to render your A-Frame scene.\n      document.getElementById('scene-root').innerHTML = document.getElementById('my-scene').innerHTML\n    })\n  </script>\n</head>\n<body>\n  <div id='scene-root'></div>\n  ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Interactive Scene with Cursor in HTML\nDESCRIPTION: Demonstrates adding user interaction using the cursor component for gaze-based interaction in VR.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"boxTexture\" src=\"https://i.imgur.com/mYmmbrp.jpg\">\n  </a-assets>\n\n  <a-box src=\"#boxTexture\" position=\"0 2 -5\" rotation=\"0 45 45\" scale=\"2 2 2\"\n         animation=\"property: object3D.position.y; to: 2.2; dir: alternate; dur: 2000; loop: true\"></a-box>\n\n  <a-camera>\n    <a-cursor color=\"#FAFAFA\"></a-cursor>\n  </a-camera>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Component Schema Definition Example\nDESCRIPTION: Demonstrates how to define a component schema with multiple properties and their types/defaults, and shows its usage in HTML.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('bar', {\n  schema: {\n    color: {default: '#FFF'},\n    size: {type: 'int', default: 5}\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity bar=\"color: red; size: 20\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Bark Material with Physically-Based Shading in A-Frame\nDESCRIPTION: Example of setting up a physically-based material for a tree bark texture on a cylinder geometry. Demonstrates proper usage of color, roughness, and metalness properties for realistic rendering.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: cylinder\"\n          material=\"src: treebark.png; color: #696969; roughness: 1; metalness: 0\">\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners\nDESCRIPTION: Demonstrates how to add event listeners to handle custom events.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nentityEl.addEventListener('physicscollided', function (event) {\n  console.log('Entity collided with', event.detail.collidingEntity);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Managing Entity's three.js Objects\nDESCRIPTION: Demonstrates how to access an entity's three.js objects using object3D and object3DMap properties, as well as retrieving specific objects using getObject3D method.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/developing-with-threejs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-entity').object3D;  // THREE.Group\n```\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry light></a-entity>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(entityEl.object3DMap);\n// {mesh: THREE.Mesh, light: THREE.Light}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentityEl.getObject3D('mesh');  // THREE.Mesh\nentityEl.getObject3D('light');  // THREE.Light\n```\n\n----------------------------------------\n\nTITLE: Configuring WebXR Options in A-Frame Scene\nDESCRIPTION: This example demonstrates how to configure WebXR session options in an A-Frame scene. It sets required features including hit-test and local-floor, optional features including dom-overlay and unbounded, and specifies an overlay element for the DOM overlay in AR mode.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/webxr.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene webxr=\"requiredFeatures: hit-test,local-floor;\n                optionalFeatures: dom-overlay,unbounded;\n                overlayElement: #overlay;\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Listening for Component Changes in A-Frame (JavaScript)\nDESCRIPTION: Demonstrates how to use the componentchanged event to listen for changes to an entity's components, specifically tracking position changes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nentity.addEventListener('componentchanged', function (evt) {\n  if (evt.detail.name === 'position') {\n    console.log('Entity has moved to', evt.target.getAttribute('position'), '!');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Coordinates Between Local and World Space in three.js\nDESCRIPTION: Shows how to transform between local and world coordinate spaces using three.js methods like getWorldPosition, getWorldQuaternion, and matrix transformations.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/developing-with-threejs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar worldPosition = new THREE.Vector3();\nentityEl.object3D.getWorldPosition(worldPosition);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar worldQuaternion = new THREE.Quaternion();\nentityEl.object3D.getWorldQuaternion(worldQuaternion);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar worldToLocal = new THREE.Matrix4().getInverse(object3D.matrixWorld)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nanotherObject3D.applyMatrix(worldToLocal);\n```\n\n----------------------------------------\n\nTITLE: Initializing A-Frame Scene for 360-degree Image Gallery\nDESCRIPTION: Sets up the basic A-Frame scene structure including assets, 360-degree sky, link template, and camera with cursor. Preloads images and audio for the gallery.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-360-image-gallery.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <audio id=\"click-sound\" src=\"https://cdn.aframe.io/360-image-gallery-boilerplate/audio/click.ogg\"></audio>\n\n    <!-- Images. -->\n    <img id=\"city\" src=\"https://cdn.aframe.io/360-image-gallery-boilerplate/img/city.jpg\">\n    <img id=\"city-thumb\" src=\"https://cdn.aframe.io/360-image-gallery-boilerplate/img/thumb-city.jpg\">\n    <img id=\"cubes\" src=\"https://cdn.aframe.io/360-image-gallery-boilerplate/img/cubes.jpg\">\n    <img id=\"cubes-thumb\" src=\"https://cdn.aframe.io/360-image-gallery-boilerplate/img/thumb-cubes.jpg\">\n    <img id=\"sechelt\" src=\"https://cdn.aframe.io/360-image-gallery-boilerplate/img/sechelt.jpg\">\n    <img id=\"sechelt-thumb\" src=\"https://cdn.aframe.io/360-image-gallery-boilerplate/img/thumb-sechelt.jpg\">\n  </a-assets>\n\n  <!-- 360-degree image. -->\n  <a-sky id=\"image-360\" radius=\"10\" src=\"#city\"></a-sky>\n\n  <!-- Link template we will build. -->\n  <a-entity class=\"link\"></a-entity>\n\n  <!-- Camera + Cursor. -->\n  <a-camera>\n    <a-cursor\n      id=\"cursor\"\n      animation__click=\"property: scale; from: 0.1 0.1 0.1; to: 1 1 1; easing: easeInCubic; dur: 150; startEvents: click\"\n      animation__clickreset=\"property: scale; to: 0.1 0.1 0.1; dur: 1; startEvents: animationcomplete__click\"\n      animation__fusing=\"property: scale; from: 1 1 1; to: 0.1 0.1 0.1; easing: easeInCubic; dur: 150; startEvents: fusing\"></a-cursor>\n  </a-camera>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Setting an A-Frame Component Programmatically\nDESCRIPTION: Demonstrates how to add a component to an entity using JavaScript's setAttribute method rather than static HTML. This approach allows dynamic component application.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-scene').setAttribute('hello-world', '');\n```\n\n----------------------------------------\n\nTITLE: Setting Component Data with setAttribute in JavaScript\nDESCRIPTION: Examples of setting component data using setAttribute, for both single-property and multi-property components.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nentity.setAttribute('visible', false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentity.setAttribute('position', { x: 1, y: 2, z: 3 });\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Only the properties passed in the object will be overwritten.\nentity.setAttribute('light', {\n  type: 'spot',\n  distance: 30,\n  intensity: 2.0\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// All previous properties for the material component (besides the color)  will be unaffected.\nentity.setAttribute('material', 'color', 'crimson');\n```\n\n----------------------------------------\n\nTITLE: Initializing Laser Controls Component in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to add the laser-controls component to an entity in A-Frame. It specifies the 'hand' property to set which controller (left or right) the laser controls should be applied to.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/laser-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity laser-controls=\"hand: left\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Initializing Cursor Component in A-Frame\nDESCRIPTION: Example of an init method for a cursor component in A-Frame. It sets up initial state, binds methods, and attaches event listeners.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('cursor', {\n  // ...\n  init: function () {\n    // Set up initial state and variables.\n    this.intersection = null;\n    // Bind methods.\n    this.onIntersection = this.onIntersection.bind(this);\n    // Attach event listener.\n    this.el.addEventListener('raycaster-intersection', this.onIntersection);\n  }\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Loading GLTF Model with Asset Management System\nDESCRIPTION: Example showing how to load a glTF model using A-Frame's asset management system, which ensures the model is loaded before rendering the scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/gltf-model.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-asset-item id=\"tree\" src=\"/path/to/tree.gltf\"></a-asset-item>\n  </a-assets>\n\n  <a-entity gltf-model=\"#tree\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hand Tracking Controls in A-Frame\nDESCRIPTION: Basic implementation of hand tracking controls for both left and right hands in an A-Frame scene. This snippet shows how to add tracked hands that will be visible when the browser and system support hand tracking.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/hand-tracking-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"leftHand\" hand-tracking-controls=\"hand: left;\"></a-entity>\n<a-entity id=\"rightHand\" hand-tracking-controls=\"hand: right;\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Filtering Raycaster Intersections with HTML Selectors\nDESCRIPTION: Demonstrates how to selectively test for intersections using the objects property and CSS classes. Shows setup of raycaster entity and target entities with different classes for selective intersection testing.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/raycaster.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity raycaster=\"objects: .clickable\" cursor></a-entity>\n<a-entity class=\"clickable\" geometry=\"primitive: box\" position=\"1 0 0\"></a-entity>\n<a-entity class=\"not-clickable\" geometry=\"primitive: sphere\" position=\"-1 0 0\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Accessing the three.js Scene from A-Frame Elements\nDESCRIPTION: Shows various methods to access the three.js scene from different contexts including directly from the DOM, from an entity, and from within a component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/developing-with-threejs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-scene').object3D;  // THREE.Scene\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-entity').sceneEl.object3D;  // THREE.Scene\n```\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  init: function () {\n    var scene = this.el.sceneEl.object3D;  // THREE.Scene\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Element from within a Component\nDESCRIPTION: Demonstrates how to access the scene element from within a component using the el.sceneEl property, which provides a direct reference without needing to query.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  init: function () {\n    console.log(this.el.sceneEl);  // Reference to the scene element.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Assets in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to define assets using <a-assets> and reference them in the scene using selectors. It includes examples of various asset types such as 3D models, audio, images, and video.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/asset-management-system.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <!-- Asset management system. -->\n  <a-assets>\n    <a-asset-item id=\"horse-obj\" src=\"horse.obj\"></a-asset-item>\n    <a-asset-item id=\"horse-mtl\" src=\"horse.mtl\"></a-asset-item>\n    <a-mixin id=\"giant\" scale=\"5 5 5\"></a-mixin>\n    <audio id=\"neigh\" src=\"neigh.mp3\"></audio>\n    <img id=\"advertisement\" src=\"ad.png\">\n    <video id=\"kentucky-derby\" src=\"derby.mp4\"></video>\n  </a-assets>\n\n  <!-- Scene. -->\n  <a-plane src=\"#advertisement\"></a-plane>\n  <a-sound src=\"#neigh\"></a-sound>\n  <a-entity geometry=\"primitive: plane\" material=\"src: #kentucky-derby\"></a-entity>\n  <a-entity mixin=\"giant\" obj-model=\"obj: #horse-obj; mtl: #horse-mtl\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Component Data with getAttribute\nDESCRIPTION: Shows how to retrieve component data using the getAttribute method, which returns the component's data object. This example retrieves geometry component data.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// <a-entity geometry=\"primitive: sphere; radius: 2\"></a-entity>\nel.getAttribute('geometry');\n// >> {\"primitive\": \"sphere\", \"radius\": 2, ...}\n```\n\n----------------------------------------\n\nTITLE: Using <a-gltf-model> Primitive in A-Frame HTML\nDESCRIPTION: This example demonstrates how to use the <a-gltf-model> primitive in an A-Frame scene. It shows two methods: using the asset management system and defining the URL inline. The asset management system is recommended for better performance and organization.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-gltf-model.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-asset-item id=\"tree\" src=\"tree.gltf\"></a-asset-item>\n  </a-assets>\n\n  <!-- Using the asset management system. -->\n  <a-gltf-model src=\"#tree\"></a-gltf-model>\n\n  <!-- Defining the URL inline. Not recommended but more comfortable for web developers. -->\n  <a-gltf-model src=\"tree.gltf\"></a-gltf-model>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Cubemap Environment Map in A-Frame HTML\nDESCRIPTION: This example demonstrates how to create a cubemap asset using the <a-cubemap> primitive and six image sources. It then applies the cubemap as an environment map to a sphere using the material component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-cubemap.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <!-- Cubemap asset -->\n    <a-cubemap id=\"reflection\">\n      <img src=\"milkyway/px.jpg\">\n      <img src=\"milkyway/nx.jpg\">\n      <img src=\"milkyway/py.jpg\">\n      <img src=\"milkyway/ny.jpg\">\n      <img src=\"milkyway/pz.jpg\">\n      <img src=\"milkyway/nz.jpg\">\n    </a-cubemap>\n  </a-assets>\n\n  <!-- Sphere with reflection. -->\n  <a-sphere position=\"0 1 -2\"\n            material=\"envMap:#reflection; metalness:1.0; roughness:0.0\">\n  </a-sphere>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing WASD Controls for Camera Movement in A-Frame\nDESCRIPTION: This snippet demonstrates how to attach wasd-controls to a camera entity in A-Frame. It sets up a camera with look controls and WASD controls, allowing for keyboard-based movement with custom acceleration.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/wasd-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity camera look-controls wasd-controls=\"acceleration:100\" position=\"0 1.6 0\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Registering a Component for Scene Initialization\nDESCRIPTION: The recommended pattern for running initialization code on a scene. This approach registers a component that can be attached to the scene element, ensuring the code runs after scene initialization.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/scene.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nAFRAME.registerComponent('do-something', {\n  init: function () {\n    var sceneEl = this.el;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Thumbstick Controls with Event Handling\nDESCRIPTION: Complete example showing how to set up touch controls with thumbstick event listening and direction detection. Includes both HTML entity setup and JavaScript component implementation.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/meta-touch-controls.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity meta-touch-controls=\"hand: left\" thumbstick-logging></a-entity>\n<a-entity meta-touch-controls=\"hand: right\" thumbstick-logging></a-entity>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('thumbstick-logging',{\n  init: function () {\n    this.el.addEventListener('thumbstickmoved', this.logThumbstick);\n  },\n  logThumbstick: function (evt) {\n    if (evt.detail.y > 0.95) { console.log(\"DOWN\"); }\n    if (evt.detail.y < -0.95) { console.log(\"UP\"); }\n    if (evt.detail.x < -0.95) { console.log(\"LEFT\"); }\n    if (evt.detail.x > 0.95) { console.log(\"RIGHT\"); }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Animations on a Single Entity in A-Frame HTML\nDESCRIPTION: This example demonstrates how to attach multiple animations to a single entity by name-spacing the animation component with double underscores. It animates rotation, position, and material color simultaneously.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/animation.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity animation=\"property: rotation\"\n          animation__2=\"property: position\"\n          animation__color=\"property: material.color\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Correct A-Frame Code Structure Example\nDESCRIPTION: This snippet shows the correct way to structure A-Frame code, encapsulating JavaScript within custom components.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  AFRAME.registerComponent('code-that-does-this', {\n    init: function () {\n      // Code here.\n      console.log(this.el);\n    }\n  });\n\n  AFRAME.registerComponent('code-to-attach-to-box', {\n    init: function () {\n      // Code here.\n      console.log(this.el);\n    }\n  });\n</script>\n\n<a-scene code-that-does-this>\n  <a-box code-to-attach-to-box></a-box>\n  <!-- ... -->\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Event Listener Component in JavaScript\nDESCRIPTION: Shows how to create a custom A-Frame component that handles mouse interactions to scale an entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('scale-on-mouseenter', {\n  schema: {\n    to: {default: '2.5 2.5 2.5', type: 'vec3'}\n  },\n\n  init: function () {\n    var data = this.data;\n    var el = this.el;\n    this.el.addEventListener('mouseenter', function () {\n      el.object3D.scale.copy(data.to);\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Usage in A-Frame HTML\nDESCRIPTION: A simple example showing how to use the <a-camera> primitive in an A-Frame scene alongside another entity (a box).\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-camera.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box></a-box>\n  <a-camera></a-camera>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Using a Registered A-Frame Component in HTML\nDESCRIPTION: Shows how to use a registered A-Frame component by attaching it to an entity in HTML. The component 'foo' is used with properties 'bar' and 'baz'.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/entity-component-system.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity foo=\"bar: 5; baz: bazValue\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor Event Listener Component in A-Frame\nDESCRIPTION: JavaScript component that changes an entity's color sequentially when clicked and logs the intersection point.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/cursor.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('cursor-listener', {\n  init: function () {\n    var lastIndex = -1;\n    var COLORS = ['red', 'green', 'blue'];\n    this.el.addEventListener('click', function (evt) {\n      lastIndex = (lastIndex + 1) % COLORS.length;\n      this.setAttribute('material', 'color', COLORS[lastIndex]);\n      console.log('I was clicked at: ', evt.detail.intersection.point);\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Videospheres with A-Frame in HTML\nDESCRIPTION: This snippet demonstrates how to create videospheres using the <a-videosphere> primitive in A-Frame. It shows two methods: using the asset management system and defining the URL inline.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-videosphere.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <video id=\"antarctica\" autoplay loop=\"true\" src=\"antarctica.mp4\"> </video>\n  </a-assets>\n\n  <!-- Using the asset management system. -->\n  <a-videosphere src=\"#antarctica\"></a-videosphere>\n\n  <!-- Defining the URL inline. Not recommended but more comfortable for web developers. -->\n  <a-videosphere src=\"africa.mp4\"></a-videosphere>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: VR Hand Controller Entity Composition in A-Frame\nDESCRIPTION: Complex example demonstrating how to compose a VR hand controller entity with multiple components for tracking, controls, interactions, and event handling.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/entity-component-system.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity\n  tracked-controls  <!-- Hook into the Gamepad API for pose. -->\n  vive-controls  <!-- Vive button mappings. -->\n  meta-touch-controls  <!-- Oculus button mappings. -->\n  hand-controls  <!-- Appearance (model), gestures, and events. -->\n  laser-controls <!-- Laser to interact with menus and UI. -->\n  sphere-collider  <!-- Listen when hand is in contact with an object. -->\n  grab  <!-- Provide ability to grab objects. -->\n  throw <!-- Provide ability to throw objects. -->\n  event-set=\"_event: grabstart; visible: false\"  <!-- Hide hand when grabbing object. -->\n  event-set=\"_event: grabend; visible: true\"  <!-- Show hand when no longer grabbing object. -->\n>\n```\n\n----------------------------------------\n\nTITLE: Registering A-Frame Geometry in JavaScript\nDESCRIPTION: Example of using the AFRAME.registerGeometry API to define a new geometry type with its own schema.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nAFRAME.registerGeometry('example', { schema: { /* ... */ } });\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Link Template in A-Frame\nDESCRIPTION: Defines a template for creating interactive link entities in A-Frame that can be reused multiple times. The template includes geometry, material, and sound components.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-360-image-gallery.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- ... -->\n  <script id=\"link\" type=\"text/html\">\n    <a-entity class=\"link\"\n      geometry=\"primitive: plane; height: 1; width: 1\"\n      material=\"shader: flat; src: #cubes-thumb\"\n      sound=\"on: click; src: #click-sound\"></a-entity>\n  </script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Looping Through Entities from querySelectorAll\nDESCRIPTION: Shows how to loop through all elements in a scene using querySelectorAll with a universal selector (*) and a for loop to process each entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar els = sceneEl.querySelectorAll('*');\nfor (var i = 0; i < els.length; i++) {\n  console.log(els[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Animated Box Scene in HTML\nDESCRIPTION: Shows how to add animation to an A-Frame entity using the animation component to create hovering motion.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"boxTexture\" src=\"https://i.imgur.com/mYmmbrp.jpg\">\n  </a-assets>\n\n  <a-box src=\"#boxTexture\" position=\"0 2 -5\" rotation=\"0 45 45\" scale=\"2 2 2\"\n         animation=\"property: object3D.position.y; to: 2.2; dir: alternate; dur: 2000; loop: true\"></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Initializing VR Controllers with Laser Controls in A-Frame\nDESCRIPTION: Sets up VR hand controllers with teleportation (blink-controls) for the left hand and laser interaction controls for the right hand. Includes necessary A-Frame script dependencies.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/aframe-blink-controls/dist/aframe-blink-controls.min.js\"></script>\n\n<!-- ... -->\n\n<a-entity id=\"teleHand\" hand-controls=\"hand: left\" blink-controls=\"collisionEntities: [mixin='voxel'], #ground\"></a-entity>\n<a-entity id=\"blockHand\" hand-controls=\"hand: right\" laser-controls></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic A-Frame Component with init Handler\nDESCRIPTION: Demonstrates registering a simple 'hello-world' component that logs a message during initialization. The init handler is called once when the component is attached to an entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('hello-world', {\n  init: function () {\n    console.log('Hello, World!');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Single-Property A-Frame Component\nDESCRIPTION: Shows how to register a single-property A-Frame component with a schema defining the property type and default value.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  schema: {type: 'int', default: 5}\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Property Component HTML Example\nDESCRIPTION: Shows how to use a multi-property component (light) in HTML markup. The component values are specified using a CSS-like syntax with property:value pairs.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- `light` is the name of the light component. -->\n<!-- The `type` property of the light is set to `point`. -->\n<!-- The `color` property of the light is set to `crimson`. -->\n<a-entity light=\"type: point; color: crimson\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Setup in A-Frame\nDESCRIPTION: Basic example of setting up a camera entity with look controls at human eye level (1.6 meters).\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity camera look-controls position=\"0 1.6 0\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Updating Position with Three.js in JavaScript\nDESCRIPTION: Shows how to update an entity's position directly using the Three.js Object3D.position Vector3 object. This method is recommended for better performance and ergonomics compared to using setAttribute.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/position.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// With three.js\nel.object3D.position.set(1, 2, 3);\n\n// With .setAttribute (less recommended).\nel.setAttribute('position', {x: 1, y: 2, z: 3});\n```\n\n----------------------------------------\n\nTITLE: Event Handling in A-Frame Component Update Method\nDESCRIPTION: Implementation of the update handler to manage event listeners and message logging.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('log', {\n  schema: {\n    event: {type: 'string', default: ''},\n    message: {type: 'string', default: 'Hello, World!'}\n  },\n\n  update: function () {\n    var data = this.data;\n    var el = this.el;\n\n    if (data.event) {\n      el.addEventListener(data.event, function () {\n        console.log(data.message);\n      });\n    } else {\n      console.log(data.message);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Interactive Link Template with Event Handlers\nDESCRIPTION: Enhanced link template with event-set components for hover and click interactions, including scale animations and sound effects.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-360-image-gallery.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"link\" type=\"text/html\">\n  <a-entity class=\"link\"\n    geometry=\"primitive: plane; height: 1; width: 1\"\n    material=\"shader: flat; src: ${thumb}\"\n    sound=\"on: click; src: #click-sound\"\n    event-set__mouseenter=\"scale: 1.2 1.2 1\"\n    event-set__mouseleave=\"scale: 1 1 1\"\n    event-set__click=\"_target: #image-360; _delay: 300; material.src: ${src}\"></a-entity>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Positioning A-Frame Entities in 3D Space\nDESCRIPTION: Example showing how to position an entity in front of the camera. The box is moved 5 meters back on the Z-axis and 2 meters up on the Y-axis so it's visible to the user.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box color=\"red\" position=\"0 2 -5\" rotation=\"0 45 45\" scale=\"2 2 2\"></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Registering A-Frame Box Primitive\nDESCRIPTION: JavaScript code demonstrating how to register a custom box primitive in A-Frame with default components and property mappings.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/html-and-primitives.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar extendDeep = AFRAME.utils.extendDeep;\n\nvar meshMixin = AFRAME.primitives.getMeshMixin();\n\nAFRAME.registerPrimitive('a-box', extendDeep({}, meshMixin, {\n  defaultComponents: {\n    geometry: {primitive: 'box'}\n  },\n\n  mappings: {\n    depth: 'geometry.depth',\n    height: 'geometry.height',\n    width: 'geometry.width'\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Accessing Three.js Object3D in JavaScript\nDESCRIPTION: Shows how to access the entity's underlying three.js Object3D representation and its scene graph.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Gaining access to the internal three.js scene graph.\nvar groupObject3D = document.querySelector('a-entity').object3D;\nconsole.log(groupObject3D.parent);\nconsole.log(groupObject3D.children);\n```\n\n----------------------------------------\n\nTITLE: Basic A-Frame Image Implementation\nDESCRIPTION: Demonstrates how to use the <a-image> primitive with the asset management system and direct URL referencing. Shows both recommended and alternative approaches for image loading.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-image.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"my-image\" src=\"image.png\">\n  </a-assets>\n\n  <!-- Using the asset management system. -->\n  <a-image src=\"#my-image\"></a-image>\n\n  <!-- Defining the URL inline. Not recommended but more comfortable for web developers. -->\n  <a-image src=\"another-image.png\"></a-image>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Method in Sound Component\nDESCRIPTION: Example showing how to implement the play() lifecycle method in an A-Frame sound component to handle autoplay and event listeners.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('sound', {\n  // ...\n  play: function () {\n    if (this.data.autoplay) { this.playSound(); }\n    this.updateEventListener();\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Camera Rig Setup in A-Frame\nDESCRIPTION: Example of a camera rig setup that allows for roomscale VR while maintaining independent scene movement.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"rig\" position=\"25 10 0\">\n  <a-entity id=\"camera\" camera look-controls></a-entity>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Textures in A-Frame Scene\nDESCRIPTION: This snippet demonstrates how to use the <a-video> primitive in an A-Frame scene. It shows two methods: using the asset management system and defining the URL inline. The example includes autoplay and loop attributes for the video asset.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-video.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <video id=\"penguin-sledding\" autoplay loop=\"true\" src=\"penguin-sledding.mp4\"></video>\n  </a-assets>\n\n  <!-- Using the asset management system. -->\n  <a-video src=\"#penguin-sledding\" width=\"16\" height=\"9\" position=\"0 0 -20\"></a-video>\n\n  <!-- Defining the URL inline. Not recommended but more comfortable for web developers. -->\n  <a-video src=\"airbending.mp4\"></a-video>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Entity with DOM API in JavaScript\nDESCRIPTION: Demonstrates how to retrieve an entity element using standard DOM query methods in JavaScript.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"mario\"></a-entity>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar el = document.querySelector('#mario');\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Component Objects in JavaScript\nDESCRIPTION: Shows how to access an entity's components and their internal objects, such as a camera or material object from three.js.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar camera = document.querySelector('a-entity[camera]').components.camera.camera;\nvar material = document.querySelector('a-entity[material]').components.material.material;\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Displacement Shader in A-Frame\nDESCRIPTION: Demonstrates how to register a custom shader with time and offset uniforms using AFRAME.registerShader(). The shader implements displacement effects with camera position offset.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerShader('displacement-offset', {\n  schema: {\n    timeMsec: {type: 'time', is: 'uniform'},\n    myOffset: {type: 'vec3', is: 'uniform'}\n  },\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Vertex Shader in GLSL\nDESCRIPTION: This GLSL code defines a simple vertex shader that sets up the UV coordinates and position for rendering.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_18\n\nLANGUAGE: glsl\nCODE:\n```\n// vertex.glsl\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Cylinder Geometry in A-Frame HTML\nDESCRIPTION: This example demonstrates how to create a basic cylinder geometry using the A-Frame geometry component. It specifies the height and radius of the cylinder.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: cylinder; height: 3; radius: 2\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Calling Component Methods in JavaScript\nDESCRIPTION: Example of calling a method exposed by a component's API, specifically pausing a sound component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-entity[sound]').components.sound.pause();\n```\n\n----------------------------------------\n\nTITLE: Implementing <a-cursor> Primitive in A-Frame HTML Scene\nDESCRIPTION: This snippet demonstrates how to use the <a-cursor> primitive within an A-Frame scene. The cursor is placed as a child of the camera, allowing for interaction with other elements in the scene, such as the box.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-cursor.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-camera>\n    <a-cursor></a-cursor>\n  </a-camera>\n\n  <a-box></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Change on Hover with JavaScript Component\nDESCRIPTION: Demonstrates how to create a custom A-Frame component in JavaScript to change an entity's color on hover and restore it when not hovering.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n<script>\n  AFRAME.registerComponent('change-color-on-hover', {\n    schema: {\n      color: {default: 'red'}\n    },\n\n    init: function () {\n      var data = this.data;\n      var el = this.el;  // <a-box>\n      var defaultColor = el.getAttribute('material').color;\n\n      el.addEventListener('mouseenter', function () {\n        el.setAttribute('color', data.color);\n      });\n\n      el.addEventListener('mouseleave', function () {\n        el.setAttribute('color', defaultColor);\n      });\n    }\n  });\n</script>\n<body>\n  <a-scene>\n    <a-box color=\"#EF2D5E\" position=\"0 1 -4\" change-color-on-hover=\"color: blue\"></a-box>\n\n    <a-camera><a-cursor></a-cursor></a-camera>\n  </a-scene>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Advanced A-Frame Scene with Community Components\nDESCRIPTION: This example shows how to create a more complex A-Frame scene using community components. It includes a particle system for rain, an animated sphere, an ocean, and a sky background.\nSOURCE: https://github.com/aframevr/aframe/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n    <script src=\"https://unpkg.com/@c-frame/aframe-particle-system-component@1.2.x/dist/aframe-particle-system-component.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/gh/c-frame/aframe-extras@7.5.0/dist/aframe-extras.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@fern-solutions/aframe-sky-background/dist/sky-background.umd.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-entity id=\"rain\" particle-system=\"preset: rain; color: #24CAFF; particleCount: 5000\"></a-entity>\n\n      <a-entity id=\"sphere\" geometry=\"primitive: sphere\"\n                material=\"color: #EFEFEF; shader: flat\"\n                position=\"0 0.15 -5\"\n                light=\"type: point; intensity: 5\"\n                animation=\"property: position; easing: easeInOutQuad; dir: alternate; dur: 1000; to: 0 -0.10 -5; loop: true\"></a-entity>\n\n      <a-entity id=\"ocean\" ocean=\"density: 20; width: 50; depth: 50; speed: 4\"\n                material=\"color: #9CE3F9; opacity: 0.75; metalness: 0; roughness: 1\"\n                rotation=\"-90 0 0\"></a-entity>\n\n      <a-sky-background top-color=\"#EBEBF5\" bottom-color=\"#B9B9D2\"></a-sky-background>\n\n      <a-entity id=\"light\" light=\"type: ambient; color: #888\"></a-entity>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tube Using Open-Ended Cylinder in A-Frame\nDESCRIPTION: Example of creating a tube by making a cylinder open-ended and using a double-sided material. This removes the top and bottom surfaces to make the inside visible and rotates it to be horizontal.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-cylinder.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-cylinder color=\"cyan\" material=\"side: double\" open-ended=\"true\" rotation=\"90 0 0\"></a-cylinder>\n```\n\n----------------------------------------\n\nTITLE: Modifying Material of Loaded Model in A-Frame\nDESCRIPTION: This snippet demonstrates how to modify the material of a loaded 3D model in A-Frame. It uses a custom component 'modify-materials' to wait for the model to load, then traverses the model's mesh to change the color of specific parts.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/models.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n  AFRAME.registerComponent('modify-materials', {\n    init: function () {\n      // Wait for model to load.\n      this.el.addEventListener('model-loaded', () => {\n        // Grab the mesh / scene.\n        const obj = this.el.getObject3D('mesh');\n        // Go over the submeshes and modify materials we want.\n        obj.traverse(node => {\n          if (node.name.indexOf('ship') !== -1) {\n            node.material.color.set('red');\n          }\n        });\n      });\n    }\n  });\n</script>\n\n<a-scene background=\"color: #ECECEC\">\n  <a-assets>\n    <a-asset-item id=\"cityModel\" src=\"https://cdn.aframe.io/test-models/models/glTF-2.0/virtualcity/VC.gltf\"></a-asset-item>\n  </a-assets>\n  <a-entity gltf-model=\"#cityModel\" modify-materials></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Modifying entity position with setAttribute in A-Frame\nDESCRIPTION: Example of how to update an entity's position in A-Frame using the synchronous setAttribute method. This approach efficiently modifies three.js objects with minimal overhead.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetAttribute('position', {x: 1, y: 2, z: 3})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Scene Initialization using Event Listeners\nDESCRIPTION: Alternative approach for running code after scene initialization without creating a component. This checks if the scene has loaded and either runs immediately or sets up an event listener.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/scene.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nvar scene = document.querySelector('a-scene');\n\nif (scene.hasLoaded) {\n  run();\n} else {\n  scene.addEventListener('loaded', run);\n}\n\nfunction run () {\n  var entity = scene.querySelector('a-entity');\n  entity.setAttribute('material', 'color', 'red');\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring A-Frame in Node.js Environment with Window Mock\nDESCRIPTION: Demonstrates how to use A-Frame in a Node.js environment by creating a mock window object with jsdom-global and mocking the customElements API. This allows access to A-Frame globals outside of a browser context.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/globals.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cleanup = require('jsdom-global')();\nglobal.customElements = { define: function () {} };\nconst aframe = require('aframe');\nconsole.log(aframe.version);\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Implementing Hand Controllers with Teleportation\nDESCRIPTION: Setup for VR hand controllers with teleportation capabilities using the blink-controls component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/aframe-blink-controls/dist/aframe-blink-controls.min.js\"></script>\n\n<!-- ... -->\n\n<a-entity id=\"player\">\n  <a-entity id=\"teleHand\" hand-controls=\"hand: left\" blink-controls=\"collisionEntities: [mixin='voxel'], #ground\"></a-entity>\n  <a-entity id=\"blockHand\" hand-controls=\"hand: right\"></a-entity>\n  <a-camera></a-camera>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Ticking Tracked Controls Component in A-Frame\nDESCRIPTION: Example of a tick method for a tracked controls component in A-Frame. It updates the controller's animations, position, rotation, and button states on each frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('tracked-controls', {\n  // ...\n  tick: function (time, timeDelta) {\n    this.updateMeshAnimation();\n    this.updatePose();\n    this.updateButtons();\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Component in HTML\nDESCRIPTION: Demonstrates how to use a registered component from HTML by applying it to scene and entity elements. Shows the declarative nature of A-Frame components.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene log=\"Hello, Scene!\">\n  <a-box log=\"Hello, Box!\"></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Attaching Components to A-Frame Scene\nDESCRIPTION: Shows how to attach components directly to the scene element, which applies their functionality globally. In this example, fog and stats components are attached.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/scene.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene fog stats>\n```\n\n----------------------------------------\n\nTITLE: Loading GLTF Model Inline\nDESCRIPTION: Example showing how to load a glTF model by specifying the path directly within url(). Note that this method won't wait for the resource to load before rendering.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/gltf-model.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity gltf-model=\"url(/path/to/tree.gltf)\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Relative Rotation Example in A-Frame HTML\nDESCRIPTION: Illustrates how child entities inherit world-space rotations from parent entities in A-Frame. It shows a parent entity with rotation and two child entities, one with no rotation and another with its own rotation.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/rotation.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"parent\" rotation=\"0 45 0\">\n  <a-entity id=\"child1\"></a-entity>\n  <a-entity id=\"child2\" rotation=\"15 45 30\"></a-entity>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Default A-Frame Scene Lighting\nDESCRIPTION: Shows the default lighting configuration that A-Frame injects into scenes, including ambient and directional lights.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Default lighting injected by A-Frame. -->\n<a-entity light=\"type: ambient; color: #BBB\"></a-entity>\n<a-entity light=\"type: directional; color: #FFF; intensity: 0.6\" position=\"-0.5 1 1\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Shader in A-Frame Entity\nDESCRIPTION: This HTML snippet demonstrates how to apply the custom shader 'my-custom' to an A-Frame box entity, setting color and opacity properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<!-- A box using our shader, not fully opaque and blue. -->\n<a-box material=\"shader: my-custom; color: blue; opacity: 0.7; transparent: true\" position=\"0 0 -2\"></a-box>\n```\n\n----------------------------------------\n\nTITLE: Creating Follow Component Schema in A-Frame\nDESCRIPTION: This snippet shows how to define the schema for a 'follow' component in A-Frame. It includes a target selector and speed property.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nAFRAME.registerComponent('follow', {\n  schema: {\n    target: {type: 'selector'},\n    speed: {type: 'number'}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring A-Frame Renderer with HTML\nDESCRIPTION: Example of configuring the renderer system in an A-Frame scene. This snippet demonstrates how to set antialiasing, color management, transparent object sorting, and canvas size limits.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/renderer.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene renderer=\"antialias: true;\n                   colorManagement: true;\n                   sortTransparentObjects: true;\n                   maxCanvasWidth: 1920;\n                   maxCanvasHeight: 1920;\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Customizing Raycaster Line Appearance\nDESCRIPTION: Shows how to customize the visual appearance of the raycaster line using properties like showLine, lineColor, and lineOpacity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/raycaster.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-entity raycaster=\"showLine: true; far: 100; lineColor: red; lineOpacity: 0.5\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Loading OBJ Model with Asset Management in A-Frame HTML\nDESCRIPTION: This example demonstrates loading a 3D model using A-Frame's asset management system. It defines assets for both the OBJ and MTL files and references them in an entity using the obj-model component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/obj-model.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-asset-item id=\"tree-obj\" src=\"/path/to/tree.obj\"></a-asset-item>\n    <a-asset-item id=\"tree-mtl\" src=\"/path/to/tree.mtl\"></a-asset-item>\n  </a-assets>\n\n  <a-entity obj-model=\"obj: #tree-obj; mtl: #tree-mtl\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Settings for an Entity in A-Frame HTML\nDESCRIPTION: This example demonstrates how to set up a directional light that casts shadows and a 3D model that casts shadows but doesn't receive them. It showcases the basic shadow configuration pattern in A-Frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/shadow.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity light=\"type:directional; castShadow:true;\" position=\"1 1 1\"></a-entity>\n<a-gltf-model src=\"tree.gltf\" shadow=\"receive: false\"></a-gltf-model>\n```\n\n----------------------------------------\n\nTITLE: Single-Property Component HTML Example\nDESCRIPTION: Demonstrates how to use a single-property component (position) in HTML markup. The component value is specified as a simple attribute value.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- `position` is the name of the position component. -->\n<!-- `1 2 3` is the data of the position component. -->\n<a-entity position=\"1 2 3\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Initializing Magic Leap Controls in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to use the magicleap-controls component in A-Frame HTML. It shows examples of matching Magic Leap controllers for both hands or without specifying a hand.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/magicleap-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Match Magic Leap controller if present, regardless of hand. -->\n<a-entity magicleap-controls></a-entity>\n\n<!-- Match Magic Leap controller if present and for specified hand. -->\n<a-entity magicleap-controls=\"hand: left\"></a-entity>\n<a-entity magicleap-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Stopping Sound Programmatically in JavaScript\nDESCRIPTION: JavaScript code for stopping a playing sound. This selects an entity with a sound component and calls its stopSound method.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/sound.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar entity = document.querySelector('[sound]');\nentity.components.sound.stopSound();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Video Texture in A-Frame\nDESCRIPTION: Illustrates how to use a video as a texture in A-Frame, using the asset management system to control video properties like looping and autoplay.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <!-- No loop. -->\n    <video id=\"my-video\" src=\"video.mp4\" autoplay=\"true\"></video>\n  </a-assets>\n\n  <a-entity geometry=\"primitive: box\" material=\"src: #my-video\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Multiple Component Object3D Handling\nDESCRIPTION: Example showing how to handle Object3D creation with multiple component instances.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  multiple: true,\n\n  update: function () {\n    // An object3D will be set using `foo__bar` as the key.\n    this.el.setObject3D(this.attrName, new THREE.Mesh());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Animation Mixer with GLTF Model\nDESCRIPTION: Example showing how to use the animation-mixer component from aframe-extras to play animations from a glTF model.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/gltf-model.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity gltf-model=\"#monster\" animation-mixer></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Updating Box Mesh Component in A-Frame\nDESCRIPTION: This snippet shows how to handle updates to the box mesh component. It checks for changes in geometry-related and material-related properties, updating the mesh accordingly.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nAFRAME.registerComponent('box', {\n  schema: {\n    width: {type: 'number', default: 1},\n    height: {type: 'number', default: 1},\n    depth: {type: 'number', default: 1},\n    color: {type: 'color', default: '#AAA'}\n  },\n\n  init: function () {\n    var data = this.data;\n    var el = this.el;\n    this.geometry = new THREE.BoxGeometry(data.width, data.height, data.depth);\n    this.material = new THREE.MeshStandardMaterial({color: data.color});\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    el.setObject3D('mesh', this.mesh);\n  },\n\n  /**\n   * Update the mesh in response to property updates.\n   */\n  update: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n\n    // If `oldData` is empty, then this means we're in the initialization process.\n    // No need to update.\n    if (Object.keys(oldData).length === 0) { return; }\n\n    // Geometry-related properties changed. Update the geometry.\n    if (data.width !== oldData.width ||\n        data.height !== oldData.height ||\n        data.depth !== oldData.depth) {\n      el.getObject3D('mesh').geometry = new THREE.BoxGeometry(data.width, data.height,\n                                                                    data.depth);\n    }\n\n    // Material-related properties changed. Update the material.\n    if (data.color !== oldData.color) {\n      el.getObject3D('mesh').material.color = new THREE.Color(data.color);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting the Scene Element with querySelector\nDESCRIPTION: Shows how to select the A-Frame scene element using the standard DOM querySelector method. This is a fundamental technique for accessing the scene from JavaScript.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneEl = document.querySelector('a-scene');\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Components for Objects in A-Frame\nDESCRIPTION: Demonstrates how to add shadow components to scene objects for casting and receiving shadows using a 3D model and ground plane.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<a-gltf-model src=\"tree.gltf\" shadow=\"cast: true\"></a-gltf-model>\n<a-circle id=\"ground\" radius=\"10\" rotation=\"-90 0 0\" shadow=\"receive: true\"></a-circle>\n```\n\n----------------------------------------\n\nTITLE: Merging Component Properties in A-Frame Mixins\nDESCRIPTION: Shows how multiple mixins defining different properties of the same component will merge. This example demonstrates combining box, tall, and wide mixins along with direct entity properties to create a customized box.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/mixins.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-mixin id=\"box\" geometry=\"primitive: box\"></a-mixin>\n    <a-mixin id=\"tall\" geometry=\"height: 10\"></a-mixin>\n    <a-mixin id=\"wide\" geometry=\"width: 10\"></a-mixin>\n  </a-assets>\n\n  <a-entity mixin=\"wide tall box\" geometry=\"depth: 2\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Fog in A-Frame Scene (HTML)\nDESCRIPTION: This example shows how to add linear fog to an A-Frame scene by setting the fog component on the scene element. The fog is configured with a linear type and gray color.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/fog.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene fog=\"type: linear; color: #AAA\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Color Component with Dependencies\nDESCRIPTION: Complete implementation of the random color component that generates and sets random colors on A-Frame entities. Includes material dependency and color generation function.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('random-color', {\n  dependencies: ['material'],\n\n  init: function () {\n    // Set material component's color property to a random color.\n    this.el.setAttribute('material', 'color', getRandomColor());\n  }\n});\n\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++ ) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Geometry in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to use a custom geometry named 'example' in A-Frame HTML, specifying custom vertices for the geometry.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: example; vertices: 1 1 -3, 3 1 -3, 2 2 -3\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: GPU Texture Preloading in A-Frame\nDESCRIPTION: This JavaScript snippet demonstrates how to manually preload textures to the GPU in A-Frame to avoid browser hanging.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/best-practices.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-scene').renderer.setTexture2D(ourTexture, 0);\n```\n\n----------------------------------------\n\nTITLE: Adding Entity to Scene with appendChild\nDESCRIPTION: Demonstrates how to create and add a new entity to an A-Frame scene using DOM appendChild method. The operation is asynchronous and requires waiting for the loaded event for further entity manipulation.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneEl = document.querySelector('a-scene');\nvar entityEl = document.createElement('a-entity');\n// Do `.setAttribute()`s to initialize the entity.\nsceneEl.appendChild(entityEl);\n```\n\n----------------------------------------\n\nTITLE: Adding Positional Audio to A-Frame Scene in HTML\nDESCRIPTION: This snippet demonstrates how to add positional audio to an A-Frame scene using the <a-sound> element. It shows how to set the source, enable autoplay, and position the sound in 3D space.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <!-- ... -->\n  <a-sound src=\"https://cdn.aframe.io/basic-guide/audio/backgroundnoise.wav\" autoplay=\"true\"\n    position=\"-3 1 -4\"></a-sound>\n  <!-- ... -->\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Data in A-Frame (JavaScript)\nDESCRIPTION: Demonstrates how to access component data in A-Frame without cloning the object, improving performance. This change allows direct access to the raw component data reference.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nentity.getAttribute('componentName')\n```\n\n----------------------------------------\n\nTITLE: Creating a Camera Rig in A-Frame for Positioning\nDESCRIPTION: Demonstrates how to use a camera rig (parent entity) to move the camera around the scene while still allowing roomscale devices to update the height offset. The camera is nested inside a positioned entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-camera.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"rig\" position=\"25 10 0\">\n  <a-camera id=\"camera\"></a-camera>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Textured Boxes in A-Frame HTML\nDESCRIPTION: Example showing how to create two types of boxes in A-Frame: a basic colored box with custom dimensions and a textured box using an image asset. The example demonstrates the use of <a-assets> for preloading textures and applying them to the box.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-box.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-assets>\n  <img id=\"texture\" src=\"texture.png\">\n</a-assets>\n\n<!-- Basic box. -->\n<a-box color=\"tomato\" depth=\"2\" height=\"4\" width=\"0.5\"></a-box>\n\n<!-- Textured box. -->\n<a-box src=\"#texture\"></a-box>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Lines with A-Frame Line Component in HTML\nDESCRIPTION: This example demonstrates how to add multiple line components to a single A-Frame entity. The first line goes from (0,1,0) to (2,0,-5) in red, while the second line (with ID '2') goes from (-2,4,5) to (0,4,-3) in green.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/line.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity line=\"start: 0 1 0; end: 2 0 -5; color: red\"\n          line__2=\"start: -2 4 5; end: 0 4 -3; color: green\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Making Entities Grabbable in A-Frame\nDESCRIPTION: Applies the grabbable component to an entity, making it possible to grab it with hand tracking pinch gestures.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/hand-tracking-grab-controls.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-box grabbable></a-box>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Ocean Shader Material in A-Frame\nDESCRIPTION: This example demonstrates using a custom 'ocean' shader material with specific properties like color and wave-height applied to a plane geometry.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: plane\"\n          material=\"shader: ocean; color: blue; wave-height: 10\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Shadow Scene with Directional Light in A-Frame\nDESCRIPTION: Sets up a basic A-Frame scene with ambient and directional lighting for shadow casting. The directional light is configured with shadow casting enabled and debug visualization.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity light=\"type: ambient; intensity: 0.5;\"></a-entity>\n  <a-entity light=\"type: directional;\n                   castShadow: true;\n                   intensity: 0.4;\n                   shadowCameraVisible: true;\"\n            position=\"-5 3 1.5\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Efficient Event Emission in A-Frame Components\nDESCRIPTION: This snippet shows how to reuse objects for event details in A-Frame components to minimize garbage collection.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/best-practices.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  init: function () {\n    this.someData = [];\n    this.evtDetail = {someData: this.someData};\n  },\n\n  tick: function (time) {\n    this.someData.push(time);\n    this.el.emit('bar', this.evtDetail);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization for Entity Selection\nDESCRIPTION: Demonstrates a performance best practice by caching query results in the init function rather than repeatedly calling querySelector in tick functions that run every frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('query-selector-example', {\n  init: function () {\n    this.entities = document.querySelectorAll('.box');\n  },\n  \n  tick: function () {\n    // Don't call query selector in here, query beforehand.\n    for (let i = 0; i < this.entities.length; i++) {\n      // Do something with entities.\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing component properties with AFRAME.utils.entity.getComponentProperty\nDESCRIPTION: Shows how to access individual properties of multi-property components using dot notation or custom delimiters.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <a-entity id=\"box\" geometry=\"primitive: box\"></a-entity>\nvar entity = document.querySelector('#box');\n\nAFRAME.utils.entity.getComponentProperty(entity, 'geometry.primitive');\nAFRAME.utils.entity.getComponentProperty(entity, 'geometry|primitive', '|');\n// >> 'box'\n\nAFRAME.utils.entity.getComponentProperty(entity, 'geometry');\n// >> {primitive: 'box', width: 1, ...}\n```\n\n----------------------------------------\n\nTITLE: Calculating Text Width Dynamically in A-Frame\nDESCRIPTION: A JavaScript snippet that calculates the total width of text based on the text component's data properties. This can be useful for custom layouts or when needing to know the bounds of text elements.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/text.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntotalWidth = data.value.length * (data.width / data.wrapCount)\n```\n\n----------------------------------------\n\nTITLE: Setting Texture in A-Frame Using Asset Management\nDESCRIPTION: Shows how to set a texture using A-Frame's asset management system, referencing an image asset in the material component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"my-texture\" src=\"texture.png\">\n  </a-assets>\n\n  <a-entity geometry=\"primitive: box\" material=\"src: #my-texture\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Phong Shading on a Torus Knot in A-Frame\nDESCRIPTION: Example showing how to apply phong shading to a torus knot geometry with specific reflectivity and shininess values. Demonstrates the usage of the phong shader for simpler but efficient rendering.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-torus-knot position=\"0 3 0\" material=\"shader:phong; reflectivity: 0.9; shininess: 30;\"\n  geometry=\"radius: 0.45; radiusTubular: 0.09\">\n</a-torus-knot>\n```\n\n----------------------------------------\n\nTITLE: Visibility Animation with Texture Loading\nDESCRIPTION: Example showing how to hide an entity until its texture is loaded using the animation component and materialtextureloaded event.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/visible.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity\n  animation=\"property: visible; to: true; startEvents: materialtextureloaded\"></a-entity>\n  material=\"src: #myTexture\"\n  visible=\"false\">\n```\n\n----------------------------------------\n\nTITLE: Scaling Down 3D Model in A-Frame\nDESCRIPTION: This code snippet shows how to scale down a 3D model in A-Frame. It's a common solution when the model appears too large or when the camera is inside the model, making it invisible.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/models.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a-entity gltf-model=\"#tree\" scale=\"0.01 0.01 0.01\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom XR Buttons in A-Frame\nDESCRIPTION: An example showing how to specify custom Enter VR and Enter AR buttons using selectors, along with setting the XR mode to display both VR and AR buttons.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/xr-mode-ui.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene\n  xr-mode-ui=\"enterVRButton: #myEnterVRButton; enterARButton: #myEnterARButton; XRMode: xr;\">\n  <!-- Style the button with images and/or custom CSS. -->\n  <a id=\"myEnterVRButton\" href=\"#\"></a>\n  <a id=\"myEnterARButton\" href=\"#\"></a>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scene Properties for Compressed Models\nDESCRIPTION: Example showing how to configure decoder paths for compressed glTF models using Draco, KTX2, or Meshopt compression.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/gltf-model.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-scene gltf-model=\"dracoDecoderPath: path/to/decoder/;\n    basisTranscoderPath: path/to/transcoder/;\n    meshoptDecoderPath: path/to/meshopt_decoder.js;\">\n  <a-entity gltf-model=\"url(pony.glb)\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Controlling Video Texture Playback in JavaScript\nDESCRIPTION: Shows how to control video texture playback using JavaScript, including seeking to a specific time and pausing the video.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar videoEl = document.querySelector('#my-video');\nvideoEl.currentTime = 122;  // Seek to 122 seconds.\nvideoEl.pause();\n```\n\n----------------------------------------\n\nTITLE: Using a Component Declaratively in A-Frame HTML\nDESCRIPTION: Shows how to use a registered component as an HTML attribute on an A-Frame entity. When the entity is initialized, it will trigger the component's init handler.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity hello-world></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Registering A-Frame Ocean Primitive\nDESCRIPTION: Example showing how to register a custom ocean primitive with component defaults and HTML attribute mappings.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/html-and-primitives.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerPrimitive('a-ocean', {\n  defaultComponents: {\n    ocean: {},\n    rotation: {x: -90, y: 0, z: 0}\n  },\n\n  mappings: {\n    width: 'ocean.width',\n    depth: 'ocean.depth',\n    density: 'ocean.density',\n    color: 'ocean.color',\n    opacity: 'ocean.opacity'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Rotation with Three.js in JavaScript\nDESCRIPTION: Shows how to update an entity's rotation directly using Three.js Object3D rotation in radians. This method is recommended for performance and ergonomics, providing access to Euler utilities.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/rotation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nel.object3D.rotation.set(\n  THREE.MathUtils.degToRad(15),\n  THREE.MathUtils.degToRad(30),\n  THREE.MathUtils.degToRad(90)\n);\nel.object3D.rotation.x += Math.PI;\n```\n\n----------------------------------------\n\nTITLE: Preloading Sound Assets in A-Frame HTML\nDESCRIPTION: Example demonstrating how to preload audio assets for performance optimization. Audio is defined in the assets section and referenced by the sound component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/sound.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <audio id=\"river\" src=\"river.mp3\" preload=\"auto\"></audio>\n  </a-assets>\n\n  <a-entity sound=\"src: #river\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sound Component in A-Frame HTML\nDESCRIPTION: Example of adding a sound component to an A-Frame entity. This creates a blue plane with a river sound that automatically plays when the scene loads.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/sound.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"river\" geometry=\"primitive: plane\" material=\"color: blue\"\n          position=\"-10 0 0\" sound=\"src: url(river.mp3); autoplay: true\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Custom Controller Component Implementation in JavaScript\nDESCRIPTION: Demonstrates creation of a custom controller component that supports multiple controller types while providing custom models and configurations.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('custom-controls', {\n  schema: {\n    hand: {default: ''},\n    model: {default: 'customControllerModel.gltf'}\n  },\n\n  update: function () {\n    var hand = this.data.hand;\n    var el = this.el;\n    var controlConfiguration = {\n      hand: hand,\n      model: false\n    };\n\n    // Build on top of controller components.\n    el.setAttribute('vive-controls', controlConfiguration);\n    el.setAttribute('meta-touch-controls', controlConfiguration);\n    el.setAttribute('windows-motion-controls', controlConfiguration);\n\n    // Set a model.\n    el.setAttribute('gltf-model', this.data.model);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Textured Planes in A-Frame\nDESCRIPTION: This snippet demonstrates how to create basic and textured planes in an A-Frame scene. It shows a simple gray plane and a textured plane parallel to the ground using an image asset.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-plane.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"ground\" src=\"ground.jpg\">\n  </a-assets>\n\n  <!-- Basic plane. -->\n  <a-plane color=\"#CCC\" height=\"20\" width=\"20\"></a-plane>\n\n  <!-- Textured plane parallel to ground. -->\n  <a-plane src=\"#ground\" height=\"100\" width=\"100\" rotation=\"-90 0 0\"></a-plane>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: 360-Degree Background Scene in HTML\nDESCRIPTION: Shows how to implement a 360-degree background image using A-Frame's a-sky primitive with texture assets.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"boxTexture\" src=\"https://i.imgur.com/mYmmbrp.jpg\">\n    <img id=\"skyTexture\"\n      src=\"https://cdn.aframe.io/360-image-gallery-boilerplate/img/sechelt.jpg\">\n  </a-assets>\n\n  <a-box src=\"#boxTexture\" position=\"0 2 -5\" rotation=\"0 45 45\" scale=\"2 2 2\"></a-box>\n\n  <a-sky src=\"#skyTexture\"></a-sky>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Loading OBJ Model with Inline URLs in A-Frame HTML\nDESCRIPTION: This example shows how to load OBJ and MTL files by specifying their paths directly within the obj-model component. This method is less performant than using the asset management system.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/obj-model.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity obj-model=\"obj: url(/path/to/tree.obj); mtl: url(/path/to/tree.mtl)\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Updating Visibility in JavaScript\nDESCRIPTION: Shows two methods for updating an entity's visibility: directly through three.js and using setAttribute. The three.js method is noted to be slightly faster.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/visible.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// With three.js\nel.object3D.visible = false;\n\n// With .setAttribute.\nel.setAttribute('visible', false);\n```\n\n----------------------------------------\n\nTITLE: Probe Light with Cubemap\nDESCRIPTION: Example of setting up a probe light using a cubemap for environment lighting.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a-assets>\n  <a-cubemap id=\"pisa\">\n  <img src=\"https://threejs.org/examples/textures/cube/pisa/px.png\">\n  <img src=\"https://threejs.org/examples/textures/cube/pisa/nx.png\">\n  <img src=\"https://threejs.org/examples/textures/cube/pisa/py.png\">\n  <img src=\"https://threejs.org/examples/textures/cube/pisa/ny.png\">\n  <img src=\"https://threejs.org/examples/textures/cube/pisa/pz.png\">\n  <img src=\"https://threejs.org/examples/textures/cube/pisa/nz.png\">\n  </a-cubemap>\n</a-assets>\n\n<a-light type=\"probe\" envMap=\"#pisa\"></a-light>\n```\n\n----------------------------------------\n\nTITLE: Creating Various Light Types in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create different types of lights in A-Frame, including directional, point, ambient, and probe lights. It also shows how to set up an environment map for a probe light.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-light.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Red directional light shining from the top left. -->\n<a-light color=\"red\" position=\"-1 1 0\"></a-light>\n\n<!-- Blue point light, 5 meters in the air. -->\n<a-light type=\"point\" color=\"blue\" position=\"0 5 0\"></a-light>\n\n<!-- Dim ambient lighting. -->\n<a-light type=\"ambient\" color=\"#222\"></a-light>\n\n<!-- Probe light using the #pisa environment map -->\n<a-assets>\n\t<a-cubemap id=\"pisa\">\n\t<img src=\"https://threejs.org/examples/textures/cube/pisa/px.png\">\n\t<img src=\"https://threejs.org/examples/textures/cube/pisa/nx.png\">\n\t<img src=\"https://threejs.org/examples/textures/cube/pisa/py.png\">\n\t<img src=\"https://threejs.org/examples/textures/cube/pisa/ny.png\">\n\t<img src=\"https://threejs.org/examples/textures/cube/pisa/pz.png\">\n\t<img src=\"https://threejs.org/examples/textures/cube/pisa/nz.png\">\n\t</a-cubemap>\n</a-assets>\n\n<a-light type=\"probe\" envMap=\"#pisa\"></a-light>\n```\n\n----------------------------------------\n\nTITLE: Component Event Handling Definition\nDESCRIPTION: Example of defining event handlers in a component that are automatically managed during component lifecycle.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  events: {\n    click: function (evt) {\n      console.log('This entity was clicked!');\n      this.el.setAttribute('material', 'color', 'red');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Removing Object3D on an Entity in A-Frame\nDESCRIPTION: Shows how to set a three.js Object3D on an entity using setObject3D and how to properly remove it with removeObject3D within a component lifecycle.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/developing-with-threejs.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('pointlight', {\n  init: function () {\n    this.el.setObject3D('light', new THREE.PointLight());\n  }\n});\n// <a-entity light></a-entity>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentityEl.getObject3D('light');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentityEl.getObject3D('light').el;  // entityEl\n```\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('pointlight', {\n  init: function () {\n    this.el.setObject3D('light', new THREE.PointLight());\n  },\n\n  remove: function () {\n    // Remove Object3D.\n    this.el.removeObject3D('light');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using GLSL Shader in A-Frame Entity\nDESCRIPTION: This HTML snippet shows how to apply the 'grid-glitch' shader to an A-Frame sphere entity, setting the color property.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<a-sphere material=\"shader:grid-glitch; color: blue;\" radius=\"0.5\" position=\"0 1.5 -2\"></a-sphere>\n```\n\n----------------------------------------\n\nTITLE: Incremental Position Updates in JavaScript\nDESCRIPTION: Demonstrates various ways to perform incremental updates on an entity's position using Three.js Vector3 utilities. This includes adding to a single axis, multiplying the position by a scalar, and subtracting another vector.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/position.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nel.object3D.position.x += 1;\nel.object3D.position.multiplyScalar(2);\nel.object3D.position.sub(someOtherVector);\n```\n\n----------------------------------------\n\nTITLE: Configuring Intersection Spawn Component in A-Frame\nDESCRIPTION: HTML configuration for the intersection-spawn component with raycaster settings for optimal voxel spawning distance.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"blockHand\" hand-controls=\"hand: right\" laser-controls raycaster=\"near: 0.5\" intersection-spawn=\"event: click; mixin: voxel\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Stringifying coordinate objects with AFRAME.utils.coordinates.stringify\nDESCRIPTION: Demonstrates converting coordinate objects back to space-separated string format for both vec3 and vec4 objects.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.utils.coordinates.stringify({x: 1, y: 2, z: -3})\n// >> \"1 2 -3\"\n\nAFRAME.utils.coordinates.stringify({x: 1, y: 2, z: -3, w:4})\n// >> \"1 2 -3 4\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Ground Cylinder to the A-Frame Scene\nDESCRIPTION: Creates a flat cylinder as the ground with a texture loaded directly via src attribute. The cylinder has a radius of 32 meters and a height of 0.1 meters.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n\n<a-scene>\n  <a-cylinder id=\"ground\" src=\"https://cdn.aframe.io/a-painter/images/floor.jpg\" radius=\"32\" height=\"0.1\"></a-cylinder>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Optimized Rotation Update in A-Frame Tick Function\nDESCRIPTION: This snippet shows an optimized way to update rotation in an A-Frame component's tick function, reusing objects to minimize garbage collection.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/best-practices.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  tick: function () {\n    var el = this.el;\n    var rotationTmp = this.rotationTmp = this.rotationTmp || {x: 0, y: 0, z: 0};\n    var rotation = el.getAttribute('rotation');\n    rotationTmp.x = rotation.x + 0.1;\n    rotationTmp.y = rotation.y + 0.1;\n    rotationTmp.z = rotation.z + 0.1;\n    el.setAttribute('rotation', rotationTmp);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying OBJ Models with <a-obj-model> in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to use the <a-obj-model> primitive to display 3D Wavefront models in an A-Frame scene. It shows two methods: using the asset management system and defining URLs inline.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-obj-model.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-asset-item id=\"crate-obj\" src=\"crate.obj\"></a-asset-item>\n    <a-asset-item id=\"crate-mtl\" src=\"crate.mtl\"></a-asset-item>\n  </a-assets>\n\n  <!-- Using the asset management system. -->\n  <a-obj-model src=\"#crate-obj\" mtl=\"#crate-mtl\"></a-obj-model>\n\n  <!-- Defining the URL inline. Not recommended but may be more comfortable. -->\n  <a-obj-model src=\"crate.obj\" mtl=\"crate.mtl\"></a-obj-model>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Event-Triggered Sound in A-Frame HTML\nDESCRIPTION: Example of a sound component that plays on an event. The setup includes a cursor entity and a box entity with Elmo texture that plays a laugh sound when clicked.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/sound.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity cursor position=\"0 0 -5\"></a-entity>\n\n<a-entity id=\"elmo\" geometry=\"primitive: box\" material=\"src: elmo.png\"\n          sound=\"src: url(ticklelaugh.mp3); on: click\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Repeating Textures in A-Frame\nDESCRIPTION: Shows how to repeat tile textures in A-Frame using the repeat property of the material component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: plane; width: 100\"\n          material=\"src: carpet.png; repeat: 100 20\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Initializing Pool Component in A-Frame HTML\nDESCRIPTION: This snippet shows how to initialize the pool component for enemy entities in an A-Frame scene. It sets the mixin to 'enemy' and the pool size to 10.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/pool.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene pool__enemy=\"mixin: enemy; size: 10\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Setting Scene-Wide Shadow Properties in A-Frame\nDESCRIPTION: Shows how to configure global shadow settings at the scene level using the shadow system property.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a-scene shadow=\"type: pcfsoft\">\n  <!-- ... -->\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Directional Light with Shadows\nDESCRIPTION: Example of a directional light with shadow casting enabled.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a-light type=\"directional\" light=\"castShadow:true;\" position=\"1 1 1\" intensity=\"0.5\" shadow-camera-automatic=\"#objects\"></a-light>\n```\n\n----------------------------------------\n\nTITLE: Initializing Look Controls with Camera in A-Frame HTML\nDESCRIPTION: Basic implementation of look-controls component alongside the camera component in A-Frame. This setup positions the camera at height 1.6 units and enables head/mouse/touch rotation controls.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/look-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity camera look-controls position=\"0 1.6 0\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Parsing coordinate strings with AFRAME.utils.coordinates.parse\nDESCRIPTION: Shows how to convert a space-separated coordinate string into an object with x, y, z properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.utils.coordinates.parse('1 2 -3')\n// >> {x: 1, y: 2, z: -3}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for Collide Event in A-Frame\nDESCRIPTION: Shows how to add an event listener for a custom 'collide' event on an A-Frame entity. This demonstrates A-Frame's synthetic event system.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-entity').addEventListener('collide', function (evt) {\n  console.log('This A-Frame entity collided with another entity!');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Voxel Mixin in A-Frame\nDESCRIPTION: Implementation of a mixin that bundles multiple components to create reusable voxel entities with consistent properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n<script src=\"components/random-color.js\"></script>\n<script src=\"components/snap.js\"></script>\n\n<a-scene>\n  <a-assets>\n    <img id=\"groundTexture\" src=\"https://cdn.aframe.io/a-painter/images/floor.jpg\">\n    <img id=\"skyTexture\" src=\"https://cdn.aframe.io/a-painter/images/sky.jpg\">\n    <a-mixin id=\"voxel\"\n       geometry=\"primitive: box; height: 0.5; width: 0.5; depth: 0.5\"\n       material=\"shader: standard\"\n       random-color\n       snap=\"offset: 0.25 0.25 0.25; snap: 0.5 0.5 0.5\"></a-mixin>\n  </a-assets>\n\n  <a-cylinder id=\"ground\" src=\"#groundTexture\" radius=\"30\" height=\"0.1\"></a-cylinder>\n\n  <a-sky id=\"background\" src=\"#skyTexture\" theta-length=\"90\" radius=\"30\"></a-sky>\n\n  <a-entity mixin=\"voxel\" position=\"-1 0 -2\"></a-entity>\n  <a-entity mixin=\"voxel\" position=\"0 0 -2\"></a-entity>\n  <a-entity mixin=\"voxel\" position=\"0 1 -2\"\n            animation=\"property: rotation; to: 0 360 0; loop: true\"></a-entity>\n  <a-entity mixin=\"voxel\" position=\"1 0 -2\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Managing Entity States in A-Frame (JavaScript)\nDESCRIPTION: Shows how to use removeState method to remove a state from an entity and listen for the stateremoved event.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nentity.addEventListener('stateremoved', function (evt) {\n  if (evt.detail.state === 'selected') {\n    console.log('Entity no longer selected.');\n  }\n});\n\nentity.addState('selected');\nentity.is('selected');  // >> true\n\nentity.removeState('selected');\nentity.is('selected');  // >> false\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by Attribute with querySelectorAll\nDESCRIPTION: Demonstrates selecting elements by attribute/component using querySelectorAll with an attribute selector. This example finds all entities with a light component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(sceneEl.querySelectorAll('[light]'));\n// [\n//  <a-entity light=\"type: ambient\"></a-entity>\n// <a-entity light=\"type: directional\"></a-entity>\n// ]\n```\n\n----------------------------------------\n\nTITLE: Directional Light with Target\nDESCRIPTION: Shows how to create a directional light with a specific target orientation.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a-light type=\"directional\" position=\"0 0 0\" rotation=\"-90 0 0\" target=\"#directionaltarget\">\n  <a-entity id=\"directionaltarget\" position=\"0 0 -1\"></a-entity>\n</a-light>\n```\n\n----------------------------------------\n\nTITLE: Pausing Sound Component in A-Frame\nDESCRIPTION: Example of a pause method for a sound component in A-Frame. It pauses the sound and removes an event listener when the entity or scene is paused.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('sound', {\n  // ...\n  pause: function () {\n    this.pauseSound();\n    this.removeEventListener();\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Hemisphere Light Configuration\nDESCRIPTION: Shows how to set up a hemisphere light with different colors for top and bottom.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a-entity light=\"type: hemisphere; color: #33C; groundColor: #3C3; intensity: 2\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-World Meshing in A-Frame Scene\nDESCRIPTION: A basic example of adding the real-world-meshing component to an A-Frame scene. This enables the rendering of detected 3D surfaces from the user's physical environment within the VR/AR experience.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/real-world-meshing.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene real-world-meshing></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Gaze-Based Cursor in A-Frame HTML\nDESCRIPTION: Example of creating a ring-shaped cursor fixed to the center of the screen as a child of the camera entity, with a clickable box entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/cursor.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity camera look-controls>\n  <a-entity cursor=\"fuse: true; fuseTimeout: 500\"\n            position=\"0 0 -1\"\n            geometry=\"primitive: ring; radiusInner: 0.02; radiusOuter: 0.03\"\n            material=\"color: black; shader: flat\">\n  </a-entity>\n</a-entity>\n\n<a-entity id=\"box\" cursor-listener geometry=\"primitive: box\" material=\"color: blue\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic A-Frame Component Schema\nDESCRIPTION: Initial schema definition for a log component that specifies event and message properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nschema: {\n  event: {type: 'string', default: ''},\n  message: {type: 'string', default: 'Hello, World!'}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Physics Component\nDESCRIPTION: Shows how to add a physics component with specific properties to an entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nentityEl.setAttribute('dynamic-body', {\n  shape: 'box',\n  mass: 1.5,\n  linearDamping: 0.005\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating Multiple Link Templates in A-Frame\nDESCRIPTION: Shows how to create multiple instances of the link template with unique image textures using data attributes for customization.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-360-image-gallery.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-assets>\n  <!-- ... -->\n  <script id=\"link\" type=\"text/html\">\n    <a-entity class=\"link\"\n      geometry=\"primitive: plane; height: 1; width: 1\"\n      material=\"shader: flat; src: ${thumb}\"\n      sound=\"on: click; src: #click-sound\"></a-entity>\n  </script>\n</a-assets>\n\n<!-- ... -->\n\n<!-- Pass image sources to the template. -->\n<a-entity template=\"src: #link\" data-thumb=\"#city-thumb\"></a-entity>\n<a-entity template=\"src: #link\" data-thumb=\"#cubes-thumb\"></a-entity>\n<a-entity template=\"src: #link\" data-thumb=\"#sechelt-thumb\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: A-Frame Scene with Non-ASCII Character Support\nDESCRIPTION: A complete HTML example showing how to use custom MSDF fonts with non-ASCII characters in A-Frame. It includes proper charset specification to prevent text rendering issues with special characters.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/text.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-sky color=\"lightblue\"></a-sky>\n      <a-text value=\"ABCあいうえお日本語\" font=\"custom-msdf.json\" font-image=\"custom-msdf.png\" negate=\"false\" scale=\"2 2 1\" position=\"-2 2 -4\"></a-text>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Getting Canvas Programmatically with A-Frame Screenshot Component\nDESCRIPTION: Demonstrates how to programmatically get a canvas of a screenshot using the getCanvas() method with the screenshot component. The projection parameter can be set to either 'equirectangular' or 'perspective' to determine the type of screenshot.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/screenshot.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// `screenshot.projection` property can be `equirectangular` or `perspective`.\ndocument.querySelector('a-scene').components.screenshot.getCanvas('equirectangular');\n```\n\n----------------------------------------\n\nTITLE: Direct Scale Updates Using Three.js\nDESCRIPTION: Demonstrates efficient methods to update scale values directly using Three.js Object3D scale property, showing both direct setting and setAttribute approach.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/scale.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// With three.js\nel.object3D.scale.set(1, 2, 3);\n\n// With .setAttribute (not recommended).\nel.setAttribute('scale', {x: 1, y: 2, z: 3});\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Hand Tracking Colliders in A-Frame\nDESCRIPTION: Enables visualization of hand tracking colliders by setting the showColliders property to true on the obb-collider component. Colliders change color when a collision is detected.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/hand-tracking-grab-controls.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-scene obb-collider=\"showColliders: true\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Testing coordinate validity with AFRAME.utils.coordinates.isCoordinates\nDESCRIPTION: Demonstrates how to use the isCoordinates method to check if a string represents valid vec3 or vec4 coordinates.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.utils.coordinates.isCoordinates('1 2 3')\n// >> true\n\nAFRAME.utils.coordinates.isCoordinates('1 2 3 4')\n// >> true\n```\n\n----------------------------------------\n\nTITLE: Using Layer Component with Image in A-Frame\nDESCRIPTION: This example demonstrates how to use the layer component to render an image as a quad layer in A-Frame. It loads a comic book image from assets and positions it in front of the user in 3D space.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/layer.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"comicbook\" crossOrigin=\"anonymous\" src=\"/path/to/comicbook.png\">\n  </a-assets>\n  <a-entity layer=\"type: quad; src: #comicbook\" position=\"0 1.8 -1.5\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Properties in Lifecycle Handlers\nDESCRIPTION: Demonstrates how to access component property values through this.data in lifecycle handlers. This example logs the configured message when the component initializes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('log', {\n  schema: {\n    message: {type: 'string', default: 'Hello, World!'}\n  },\n\n  init: function () {\n    console.log(this.data.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Ambient Light Configuration\nDESCRIPTION: Example of configuring an ambient light in A-Frame that affects all entities globally.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity light=\"type: ambient; color: #CCC\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Registering Object3D with Entity in A-Frame (JavaScript)\nDESCRIPTION: Shows how to use setObject3D method to register a THREE.Object3D with an entity, specifically creating an orthogonal camera.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('example-orthogonal-camera', {\n  update: function () {\n    this.el.setObject3D('camera', new THREE.OrthogonalCamera());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Background Image Animation Configuration\nDESCRIPTION: Sets up a sky entity with fade animations for smooth transitions between 360-degree images, triggered by proxy events.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-360-image-gallery.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a-sky\n  id=\"image-360\" radius=\"10\" src=\"#city\"\n  animation__fade=\"property: components.material.material.color; type: color; from: #FFF; to: #000; dur: 300; startEvents: fade\"\n  animation__fadeback=\"property: components.material.material.color; type: color; from: #000; to: #FFF; dur: 300; startEvents: animationcomplete__fade\"></a-sky>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from an Entity in JavaScript\nDESCRIPTION: Examples of emitting custom DOM events from an entity with optional detail data and bubbling control.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// <a-entity animation=\"property: rotation; to: 0 360 0; startEvents: rotate\">\nentity.emit('rotate');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentity.emit('collide', { target: collidingEntity });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentity.emit('sink', null, false);\n```\n\n----------------------------------------\n\nTITLE: Basic Text Rendering in A-Frame\nDESCRIPTION: Demonstrates the most basic usage of the text component in A-Frame, showing how to render simple text content with default configuration.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/text.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity text=\"value: Hello World;\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hand Tracking Grab Controls in A-Frame\nDESCRIPTION: Sets up left and right hand entities with hand-tracking-grab-controls component. The hand parameter specifies which hand (left or right) is being tracked.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/hand-tracking-grab-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"leftHand\" hand-tracking-grab-controls=\"hand: left;\"></a-entity>\n<a-entity id=\"rightHand\" hand-tracking-grab-controls=\"hand: right;\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Adding Sky Background to the Minecraft Demo\nDESCRIPTION: Enhances the scene with a 360-degree background using A-Frame's a-sky element. The sky is configured as a half-sphere with a matching radius to the ground to create a seamless environment.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n\n<a-scene>\n  <a-assets>\n    <img id=\"groundTexture\" src=\"https://cdn.aframe.io/a-painter/images/floor.jpg\">\n    <img id=\"skyTexture\" src=\"https://cdn.aframe.io/a-painter/images/sky.jpg\">\n  </a-assets>\n\n  <a-cylinder id=\"ground\" src=\"#groundTexture\" radius=\"30\" height=\"0.1\"></a-cylinder>\n\n  <a-sky id=\"background\" src=\"#skyTexture\" theta-length=\"90\" radius=\"30\"></a-sky>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Positioning Camera at Ground Level in A-Frame\nDESCRIPTION: Example of manually positioning the camera at ground level (0 height) using the position attribute. This position will be overridden by VR devices when used.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-camera.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Place camera at ground level (will be overridden by VR devices) -->\n<a-camera position=\"0 0 0\"></a-camera>\n```\n\n----------------------------------------\n\nTITLE: Inline Environment Map URLs in A-Frame Material Component\nDESCRIPTION: Shows how to directly include cubemap image URLs in the material component of an A-Frame entity, applied to a box geometry.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: box\"\n          material=\"envMap: url(right.png),\n                            url(left.png), \n                            url(top.png), \n                            url(bottom.png),\n                            url(front.png),\n                            url(back.png);\n                    roughness: 0\">\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Using a Multi-Property Component in HTML\nDESCRIPTION: Shows how to configure a component with properties using HTML attribute syntax. Properties are separated by semicolons with name/value pairs using colons, similar to inline CSS.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity log=\"message: Hello, Metaverse!\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Scene-Only Component Definition\nDESCRIPTION: Example of defining a component that can only be applied to the scene entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  sceneOnly: true,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Elements from Fog Effects in A-Frame (HTML)\nDESCRIPTION: This example demonstrates how to exclude specific entities from the fog effect in A-Frame by setting the fog property to false on the entity's material.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/fog.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity material=\"fog: false\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Geometry in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a box geometry using the A-Frame geometry component. It specifies the primitive type as 'box' and sets the width, height, and depth properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: box; width: 1; height: 1; depth: 1\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Coordinate Spaces in A-Frame\nDESCRIPTION: Example showing how parent-child relationships affect position transformations in A-Frame, where a child entity's world position combines its local position with its parent's position.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/developing-with-threejs.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"foo\" position=\"1 2 3\">\n  <a-entity id=\"bar\" position=\"2 3 4\"></a-entity>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Fonts in A-Frame Text Component\nDESCRIPTION: Examples of how to specify different fonts in A-Frame using the 'font' and 'fontImage' properties. This includes using stock font names, URL references, and local font files with separate image textures.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/text.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity text=\"font: mozillavr; value: Via stock font name.\"></a-entity>\n<a-entity text=\"font: https://cdn.aframe.io/fonts/mozillavr.fnt; value: Via URL.\"></a-entity>\n<a-entity text=\"text: Hello World; font: ../fonts/DejaVu-sdf.fnt; fontImage: ../fonts/DejaVu-sdf.png\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Getting Component Data with getAttribute in JavaScript\nDESCRIPTION: Demonstrates how to retrieve parsed component data including mixins and defaults using getAttribute.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// <a-entity geometry=\"primitive: box; width: 3\">\n\nentity.getAttribute('geometry');\n// >> {primitive: \"box\", depth: 2, height: 2, width: 3, ...}\n\nentity.getAttribute('geometry').primitive;\n// >> \"box\"\n\nentity.getAttribute('geometry').height;\n// >> 2\n\nentity.getAttribute('position');\n// >> {x: 0, y: 0, z: 0}\n```\n\n----------------------------------------\n\nTITLE: Using Flat Shader Material in A-Frame\nDESCRIPTION: This example shows how to use a flat shader material instead of the default standard material, applying a red color to a box geometry.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: box\" material=\"shader: flat; color: red\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Setting up HTC Vive controllers in A-Frame\nDESCRIPTION: A basic example showing how to create Vive controllers for both left and right hands using the vive-controls component in an A-Frame scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/vive-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity vive-controls=\"hand: left\"></a-entity>\n<a-entity vive-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Adding State to an Entity in JavaScript\nDESCRIPTION: Shows how to add state to an entity and listen for state changes with events.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nentity.addEventListener('stateadded', function (evt) {\n  if (evt.detail === 'selected') {\n    console.log('Entity now selected!');\n  }\n});\n\nentity.addState('selected');\nentity.is('selected');  // >> true\n```\n\n----------------------------------------\n\nTITLE: Entity with Geometry and Material Components in HTML\nDESCRIPTION: Example of an entity with geometry and material components attached to give it shape and appearance, rendering a red box.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: box\" material=\"color: red\">\n```\n\n----------------------------------------\n\nTITLE: A-Frame Box Component Usage Example\nDESCRIPTION: HTML example demonstrating how to use the box component with custom properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity box=\"width: 0.5; height: 0.25; depth: 1; color: orange\"\n            position=\"0 0 -5\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Using Random Color Component in A-Frame Scene\nDESCRIPTION: HTML implementation showing how to use the random-color component in an A-Frame scene with various entities.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n<script src=\"components/random-color.js\"></script>\n\n<a-scene>\n  <a-assets>\n    <img id=\"groundTexture\" src=\"https://cdn.aframe.io/a-painter/images/floor.jpg\">\n    <img id=\"skyTexture\" src=\"https://cdn.aframe.io/a-painter/images/sky.jpg\">\n  </a-assets>\n\n  <!-- Box with random color. -->\n  <a-entity geometry=\"primitive: box; depth: 0.5; height: 0.5; width: 0.5\"\n            material=\"shader: standard\"\n            position=\"0 0.5 -2\"\n            random-color></a-entity>\n\n  <a-cylinder id=\"ground\" src=\"#groundTexture\" radius=\"30\" height=\"0.1\"></a-cylinder>\n\n  <a-sky id=\"background\" src=\"#skyTexture\" theta-length=\"90\" radius=\"30\"></a-sky>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Red Material in A-Frame\nDESCRIPTION: This snippet demonstrates how to define a red material using the default standard material on a box geometry.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: box\" material=\"color: red\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom Events\nDESCRIPTION: Shows how to emit custom events with additional data using the emit method.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nentityEl.emit('physicscollided', {collidingEntity: anotherEntityEl}, false);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Textured Circles in A-Frame VR\nDESCRIPTION: Example showing how to create both a basic colored circle and a textured circle parallel to the ground in A-Frame. Demonstrates using color, radius, rotation, and texture attributes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-circle.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"platform\" src=\"platform.jpg\">\n  </a-assets>\n\n  <!-- Basic circle. -->\n  <a-circle color=\"#CCC\" radius=\"20\"></a-circle>\n\n  <!-- Textured circle parallel to ground. -->\n  <a-circle src=\"#platform\" radius=\"50\" rotation=\"-90 0 0\"></a-circle>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Using <a-sound> Primitive in A-Frame HTML\nDESCRIPTION: This example demonstrates how to use the <a-sound> primitive within an A-Frame scene. It creates a sound source positioned at (0, 2, 5) that automatically plays a click sound.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-sound.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-sound src=\"src: url(click.mp3)\" autoplay=\"true\" position=\"0 2 5\"></a-sound>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Manual Raycaster Object List Refresh\nDESCRIPTION: Example of manually refreshing the raycaster's target object list. Useful when autoRefresh is disabled for performance optimization.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/raycaster.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar raycasterEl = AFRAME.scenes[0].querySelector('[raycaster]');\nraycasterEl.components.raycaster.refreshObjects();\n```\n\n----------------------------------------\n\nTITLE: Initializing Windows Motion Controls in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to add Windows Motion Controls to both left and right hands in an A-Frame scene. It uses the windows-motion-controls component on two separate entities.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/windows-motion-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity windows-motion-controls=\"hand: left\"></a-entity>\n<a-entity windows-motion-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Camera Position/Rotation Reader Component\nDESCRIPTION: Component for reading camera position and rotation in local space.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/camera.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('rotation-reader', {\n  tick: function () {\n    // `this.el` is the element.\n    // `object3D` is the three.js object.\n\n    // `rotation` is a three.js Euler using radians. `quaternion` also available.\n    console.log(this.el.object3D.rotation);\n\n    // `position` is a three.js Vector3.\n    console.log(this.el.object3D.position);\n  }\n});\n\n// <a-entity camera look-controls rotation-reader>\n```\n\n----------------------------------------\n\nTITLE: Using A-Frame Primitive Elements\nDESCRIPTION: Demonstrates the usage of A-Frame primitives with <a-box> and <a-videosphere> elements. Shows how primitives provide a simplified syntax for creating 3D objects with basic attributes like dimensions, color, and media sources.\nSOURCE: https://github.com/aframevr/aframe/blob/master/src/extras/primitives/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-box color=\"red\" depth=\"5\" height=\"2\" width=\"3\"></a-box>\n<a-videosphere src=\"360.mp4\"></a-videosphere>\n```\n\n----------------------------------------\n\nTITLE: Using Inline URL for Texture in A-Frame\nDESCRIPTION: Demonstrates how to use an inline URL for setting a texture in A-Frame's material component, though this method doesn't benefit from browser caching or preloading.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity geometry=\"primitive: box\" material=\"src: url(texture.png)\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Interactive Text Element in A-Frame\nDESCRIPTION: Shows how to make text interactive by adding a plane geometry to enable raycaster and cursor interactions.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-text.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-text value=\"Now Interactable\" geometry=\"primitive:plane\"></a-text>\n```\n\n----------------------------------------\n\nTITLE: Parsing CSS-like styles with AFRAME.utils.styleParser.parse\nDESCRIPTION: Shows how to convert a CSS-style string into a JavaScript object with corresponding properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.utils.styleParser.parse('attribute: color; dur: 5000;')\n// >> {\"attribute\": \"color\", \"dur\": \"5000\"}\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by ID with querySelector\nDESCRIPTION: Shows how to select a specific element by ID using querySelector with an ID selector. This example queries within the scope of the scene element.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneEl = document.querySelector('a-scene');\nconsole.log(sceneEl.querySelector('#redBox'));\n// <a-box id=\"redBox\" class=\"clickable\" color=\"red\"></a-box>\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle Geometry in A-Frame HTML\nDESCRIPTION: This example shows how to create a circle geometry with the A-Frame geometry component. It sets the primitive type to 'circle', specifies the radius, and uses a double-sided material to ensure visibility from both sides.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: circle; radius: 1\" material=\"side: double\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Accessing A-Frame Line Objects with JavaScript\nDESCRIPTION: This code snippet shows how to access the line objects that were created using the line component. Lines are stored in the entity's object3DMap with keys 'line' or 'line__<ID>' for multiple lines on the same entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/line.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(el.getObject3D('line'));\nconsole.log(el.getObject3D('line__2'));\n```\n\n----------------------------------------\n\nTITLE: Directional Light Configuration\nDESCRIPTION: Example of setting up a directional light with position in A-Frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-entity light=\"type: directional; color: #EEE; intensity: 0.5\" position=\"-1 1 0\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Snap Component in A-Frame\nDESCRIPTION: Example showing how to use the snap component to align boxes to a grid with specific offsets and snap values.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a-entity\n   geometry=\"primitive: box; height: 0.5; width: 0.5; depth: 0.5\"\n   material=\"shader: standard\"\n   random-color\n   snap=\"offset: 0.25 0.25 0.25; snap: 0.5 0.5 0.5\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Manual Navigation in JavaScript for A-Frame\nDESCRIPTION: Shows how to programmatically navigate to another page in A-Frame using standard JavaScript window.location API, which can be used as an alternative to the link component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/link.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nwindow.location.href = 'https://supermedium.com/supercraft/';\n// or window.location.replace\n```\n\n----------------------------------------\n\nTITLE: Including Community Components in A-Frame Project\nDESCRIPTION: Shows how to include community-developed A-Frame components (template, layout, event-set, proxy-event) using CDN links in the HTML head.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-360-image-gallery.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <title>360° Image Browser</title>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n    <script src=\"https://unpkg.com/aframe-template-component@3.x.x/dist/aframe-template-component.min.js\"></script>\n    <script src=\"https://unpkg.com/aframe-layout-component@5.x.x/dist/aframe-layout-component.min.js\"></script>\n    <script src=\"https://unpkg.com/aframe-event-set-component@5.x.x/dist/aframe-event-set-component.min.js\"></script>\n     <script src=\"https://unpkg.com/aframe-proxy-event-component@2.1.0/dist/aframe-proxy-event-component.min.jss\"></script>\n    \n  </head>\n  <body>\n    <a-scene>\n      <!-- ... -->\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Removing Object3D from Entity in A-Frame (JavaScript)\nDESCRIPTION: Illustrates the use of removeObject3D method within a component's lifecycle to remove a THREE.Light object from the scene and update the object3DMap.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('example-light', {\n  update: function () {\n    this.el.setObject3D('light', new THREE.Light());\n    // Light is now part of the scene.\n    // object3DMap.light is now a THREE.Light() object.\n  },\n\n  remove: function () {\n    this.el.removeObject3D('light');\n    // Light is now removed from the scene.\n    // object3DMap.light is now null.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Videosphere Playback with JavaScript\nDESCRIPTION: This snippet shows how to control video playback in a videosphere using JavaScript. It demonstrates setting a specific time in the video and playing the videosphere.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-videosphere.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// to set specific time of video\ndocument.querySelector(\"#antarctica\").components.material.data.src.currentTime = 0 // start of video\n\n// to play the videosphere\ndocument.querySelector(\"#antarctica\").components.material.material.map.image.play();\n```\n\n----------------------------------------\n\nTITLE: Playing Sound Programmatically in JavaScript\nDESCRIPTION: JavaScript code for playing a sound. This accesses the sound component of an entity and calls its playSound method.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/sound.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nentity.components.sound.playSound();\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Cursor Feedback in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to add visual feedback to an A-Frame cursor using the animation component. It includes animations for click, fusing, and mouseleave events, adjusting the cursor's scale.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/cursor.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity\n  animation__click=\"property: scale; startEvents: click; easing: easeInCubic; dur: 150; from: 0.1 0.1 0.1; to: 1 1 1\"\n  animation__fusing=\"property: scale; startEvents: fusing; easing: easeInCubic; dur: 1500; from: 1 1 1; to: 0.1 0.1 0.1\"\n  animation__mouseleave=\"property: scale; startEvents: mouseleave; easing: easeInCubic; dur: 500; to: 1 1 1\"\n  cursor=\"fuse: true;\"\n  material=\"color: black; shader: flat\"\n  position=\"0 0 -3\"\n  geometry=\"primitive: ring\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: A-Frame Scene Setup with Custom Shader\nDESCRIPTION: HTML markup showing how to use the custom shader and offset updater component together in an A-Frame scene with animated sphere and ground plane.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-sphere\n    animation=\"property: scale; dir: alternate; dur: 5000; loop: true; to: 4 4 4\"\n    geometry=\"radius: 0.2\"\n    material=\"shader: displacement-offset\"\n    myoffset-updater\n    position=\"0 1.5 -2\">\n  </a-sphere>\n  <a-box color=\"#CCC\" width=\"3\" depth=\"3\" height=\"0.1\" position=\"0 0 -2\"></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: A-Frame Image Aspect Ratio Example\nDESCRIPTION: Shows how to maintain proper aspect ratio for images by setting appropriate width and height values in meters. Example uses a 2:1 aspect ratio image.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-image.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-image src=\"#logo\" width=\"3\" height=\"1.5\"></a-image>\n```\n\n----------------------------------------\n\nTITLE: Point Light Configuration\nDESCRIPTION: Example of configuring a point light with intensity, distance, and decay properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a-entity light=\"type: point; intensity: 0.75; distance: 50; decay: 2\"\n          position=\"0 10 10\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dodecahedron Geometry in A-Frame HTML\nDESCRIPTION: This example shows how to create a dodecahedron geometry using the A-Frame geometry component. It specifies the primitive type as 'dodecahedron' and sets the radius.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: dodecahedron; radius: 2\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Reflected Sky Sphere Implementation in A-Frame\nDESCRIPTION: Shows how to create a sky sphere with inverted texture mapping using negative scale, creating a sphere with radius 1000 and reflecting it in the Z-direction.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/scale.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: sphere; radius: 1000\"\n          material=\"src: sky.png\"\n          scale=\"1 1 -1\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchored Entity in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to use the 'anchored' component on an A-Frame entity. It creates a persistent red box anchored in the scene. The 'persistent' property ensures the anchor persists across page reloads, requiring the entity to have an id.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/anchored.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"myBox\" anchored=\"persistent: true\" geometry=\"primitive: box\" material=\"color: red\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Setting a Plain Color Background in A-Frame (HTML)\nDESCRIPTION: This snippet shows how to set a plain color as the background of an A-Frame scene using the <a-sky> primitive. The color is specified using a hexadecimal value.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-sky.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-sky color=\"#6EBAA7\"></a-sky>\n```\n\n----------------------------------------\n\nTITLE: Pausing Sound Programmatically in JavaScript\nDESCRIPTION: JavaScript code for pausing a playing sound. This accesses the sound component of an entity and calls its pauseSound method.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/sound.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nentity.components.sound.pauseSound();\n```\n\n----------------------------------------\n\nTITLE: Initializing AR Hit Test Component in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to set up the ar-hit-test component on an A-Frame scene. It enables hit-testing and targets a specific object for placement in AR.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/ar-hit-test.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene webxr=\"optionalFeatures:  hit-test;\" ar-hit-test=\"target:#myobject;\">\n\t<a-entity id=\"myobject\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Sun Position Setter Component Implementation\nDESCRIPTION: Component that calculates and updates sun position in a sky shader based on orbit rotation changes. Shows event-based uniform updates and mathematical transformations.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('sun-position-setter', {\n  init: function () {\n    var skyEl = this.el;\n    var orbitEl = this.el.sceneEl.querySelector('#orbit');\n\n    orbitEl.addEventListener('componentchanged', function changeSun (evt) {\n      var sunPosition;\n      var phi;\n      var theta;\n\n      if (evt.detail.name !== 'rotation') { return; }\n\n      sunPosition = orbitEl.getAttribute('rotation');\n\n      if(sunPosition === null) { return; }\n\n      theta = Math.PI * (- 0.5);\n      phi = 2 * Math.PI * (sunPosition.y / 360 - 0.5);\n      skyEl.setAttribute('material', 'sunPosition', {\n        x: Math.cos(phi),\n        y: Math.sin(phi) * Math.sin(theta),\n        z: -1\n      });\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using getObject3D to Access Three.js Objects in JavaScript\nDESCRIPTION: Demonstrates how to get a specific Three.js Object3D that has been set on an entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('example-mesh', {\n  init: function () {\n    var el = this.el;\n    el.setObject3D('mesh', new THREE.Mesh());\n    el.getObject3D('mesh');  // Returns THREE.Mesh that was just created.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Example in HTML for A-Frame\nDESCRIPTION: Demonstrates how to implement the link component within an A-Frame scene to create a portal to another page. This example shows the entity-based approach with a 360° preview image.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/link.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"homeThumbnail\" src=\"home.jpg\">\n  </a-assets>\n\n  <a-entity link=\"href: index.html; title: My Homepage; image: #homeThumbnail\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Relative Positioning in A-Frame HTML\nDESCRIPTION: Illustrates relative positioning in A-Frame, showing how child entities inherit world-space positions from parent entities. The example includes a parent entity and two child entities with different position settings.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/position.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"parent\" position=\"1 2 3\">\n  <a-entity id=\"child1\"></a-entity>\n  <a-entity id=\"child2\" position=\"2 3 4\"></a-entity>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Updating Rotation with setAttribute in JavaScript\nDESCRIPTION: Demonstrates an alternative method to update an entity's rotation using A-Frame's setAttribute method. This approach is less recommended due to performance overhead.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/rotation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nel.setAttribute('rotation', {x: 15, y: 30, z: 90});\n```\n\n----------------------------------------\n\nTITLE: Adding a 360-degree Image Background in A-Frame (HTML)\nDESCRIPTION: This snippet demonstrates how to add an equirectangular image as a background in an A-Frame scene using the <a-sky> primitive. It uses an asset management system to preload the image.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-sky.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"sky\" src=\"sky.png\">\n  </a-assets>\n  <a-sky src=\"#sky\"></a-sky>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Basic throttling with AFRAME.utils.throttle\nDESCRIPTION: Shows how to create a throttled function that limits how often a function can be called, useful for performance optimization.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  init: function () {\n    // Set up throttling.\n    this.throttledFunction = AFRAME.utils.throttle(this.everySecond, 1000, this);\n  },\n\n  everySecond: function () {\n    // Called every second.\n    console.log(\"A second passed.\");\n  },\n\n  tick: function (t, dt) {\n    this.throttledFunction();  // Called once a second.\n    console.log(\"A frame passed.\");  // Called every frame.\n   },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Meta Touch Controls in HTML\nDESCRIPTION: Basic setup of meta-touch-controls component for both left and right hand controllers in A-Frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/meta-touch-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity meta-touch-controls=\"hand: left\"></a-entity>\n<a-entity meta-touch-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reflection Component with Directional Light in A-Frame HTML\nDESCRIPTION: This example sets up a scene with the reflection component configured to use a directional light during AR lighting estimation. The directional light is set to cast shadows and has a specific position. The reflection component will adjust this light to match the real-world lighting when in AR mode.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/reflection.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene reflection=\"directionalLight:a-light#dirlight;\">\n\t<a-light id=\"dirlight\" intensity=\"1\" light=\"castShadow:true;type:directional\" position=\"1 1 1\"></a-light>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Map in A-Frame HTML\nDESCRIPTION: Demonstrates how to set up a cubemap environment map in A-Frame using the a-cubemap element and applying it to a box geometry with material properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-cubemap id=\"sky\">\n      <img src=\"right.png\">\n      <img src=\"left.png\">\n      <img src=\"top.png\">\n      <img src=\"bottom.png\">\n      <img src=\"front.png\">\n      <img src=\"back.png\">\n    </a-cubemap>\n  </a-assets>\n\n  <a-entity geometry=\"primitive: box\" material=\"envMap: #sky; roughness: 0\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Capturing and Saving Screenshots Programmatically in A-Frame\nDESCRIPTION: Shows how to programmatically capture and automatically save a screenshot file using the capture() method of the screenshot component. The method accepts a projection type parameter.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/screenshot.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-scene').components.screenshot.capture('perspective')\n```\n\n----------------------------------------\n\nTITLE: Optimized tick throttling with AFRAME.utils.throttleTick\nDESCRIPTION: Demonstrates a performance-optimized version of throttling specifically designed for A-Frame tick handlers.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  init: function () {\n    // Set up the tick throttling.\n    this.tick = AFRAME.utils.throttleTick(this.tick, 500, this);\n  },\n\n  /**\n   * Tick function that will be wrapped to be throttled.\n   */\n  tick: function (t, dt) {}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Shader in GLSL\nDESCRIPTION: This GLSL code defines a fragment shader that creates a dynamic color effect based on UV coordinates, time, and a base color.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_19\n\nLANGUAGE: glsl\nCODE:\n```\n// fragment.glsl\n\nvarying vec2 vUv;\nuniform vec3 color;\nuniform float timeMsec; // A-Frame time in milliseconds.\n\nvoid main() {\n  float time = timeMsec / 1000.0; // Convert from A-Frame milliseconds to typical time in seconds.\n  // Use sin(time), which curves between 0 and 1 over time,\n  // to determine the mix of two colors:\n  //    (a) Dynamic color where 'R' and 'B' channels come\n  //        from a modulus of the UV coordinates.\n  //    (b) Base color.\n  //\n  // The color itself is a vec4 containing RGBA values 0-1.\n  gl_FragColor = mix(\n    vec4(mod(vUv , 0.05) * 20.0, 1.0, 1.0),\n    vec4(color, 1.0),\n    sin(time)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Rotation in A-Frame HTML\nDESCRIPTION: Demonstrates how to set the rotation of an entity using the rotation component in A-Frame HTML. The rotation is specified in degrees for pitch (x), yaw (y), and roll (z).\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/rotation.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity rotation=\"45 90 180\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Removing Component Attributes in A-Frame (JavaScript)\nDESCRIPTION: Demonstrates how to use removeAttribute method to detach components or reset specific component properties to their default values.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nentity.removeAttribute('geometry');  // Detach the geometry component.\nentity.removeAttribute('sound');  // Detach the sound component.\n\nentity.setAttribute('material', 'color', 'blue');  // The color is blue.\nentity.removeAttribute('material', 'color');  // Reset the color to the default value, white.\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Lights in A-Frame\nDESCRIPTION: Example showing how to disable default lighting in an A-Frame scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-scene light=\"defaultLightsEnabled: false\">\n  <!-- ... -->\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tracked Controls Component in A-Frame HTML\nDESCRIPTION: Example of implementing tracked controls for OpenVR controllers (like Vive) using the tracked-controls component. Uses idPrefix for compatibility with different controller ID variations.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/tracked-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity tracked-controls=\"controller: 0; idPrefix: OpenVR\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Using Event-Set Component to Show/Hide Text on Hover\nDESCRIPTION: Demonstrates using the event-set component to show a text label when hovering over a cylinder and hide it when not hovering.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n<script src=\"https://unpkg.com/aframe-event-set-component@5.x.x/dist/aframe-event-set-component.min.js\"></script>\n<body>\n  <a-scene>\n    <a-cylinder position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" color=\"#FFC65D\"\n                event-set__enter=\"_event: mouseenter; _target: #cylinderText; visible: true\"\n                event-set__leave=\"_event: mouseleave; _target: #cylinderText; visible: false\">\n      <a-text id=\"cylinderText\" value=\"This is a cylinder\" align=\"center\" color=\"#FFF\" visible=\"false\" position=\"0 -0.55 0.55\"\n              geometry=\"primitive: plane; width: 1.75\" material=\"color: #333\"></a-text>\n    </a-cylinder>\n\n    <a-camera>\n      <a-cursor></a-cursor>\n    </a-camera>\n  </a-scene>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Link Entity with A-Frame Components\nDESCRIPTION: Demonstrates how to use standard A-Frame components (geometry, material, sound) to create an interactive link entity that changes appearance and plays sound on click.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-360-image-gallery.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a-entity class=\"link\"\n  geometry=\"primitive: plane; height: 1; width: 1\"\n  material=\"shader: flat; src: #cubes-thumb\"\n  sound=\"on: click; src: #click-sound\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Adding Cross-Platform Support with Camera Cursor\nDESCRIPTION: Implementation of mobile and desktop support by combining VR controller functionality with a camera-based cursor system for non-VR platforms.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"blockHand\" hand-controls=\"hand: right\" laser-controls raycaster=\"near: 0.5\" intersection-spawn=\"event: click; mixin: voxel\"></a-entity>\n<a-camera>\n  <a-cursor intersection-spawn=\"event: click; mixin: voxel\"></a-cursor>\n</a-camera>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sphere in A-Frame HTML\nDESCRIPTION: Example of creating a basic yellow sphere with a radius of 5 units using the A-Frame sphere primitive.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-sphere.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-sphere color=\"yellow\" radius=\"5\"></a-sphere>\n```\n\n----------------------------------------\n\nTITLE: Setting Multi-Property Component Data in A-Frame (JavaScript)\nDESCRIPTION: Demonstrates how to use setAttribute with a third boolean argument to reset and overwrite all properties of a component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// All previous properties for the light component will be removed and overwritten.\nentity.setAttribute('light', {\n  type: 'spot',\n  distance: 30,\n  intensity: 2.0\n}, true);\n```\n\n----------------------------------------\n\nTITLE: Pausing and Playing Entity Behavior in JavaScript\nDESCRIPTION: Shows how to pause and play an entity, which affects its animations and components.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// <a-entity id=\"spinning-jumping-ball\">\nentity.pause();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentity.pause();\nentity.play();\n```\n\n----------------------------------------\n\nTITLE: Removing Light Component in A-Frame\nDESCRIPTION: Example of a remove method for a light component in A-Frame. It removes the light object from the entity when the component is removed.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('light', {\n  // ...\n  remove: function () {\n    this.el.removeObject3D('light');\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Component Mixin in A-Frame (JavaScript)\nDESCRIPTION: Shows how to unset a mixin on an A-Frame entity by setting it to an empty string or removing the attribute entirely. This allows for dynamic removal of mixins.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nentity.setAttribute('mixin', '');\n// or\nentity.removeAttribute('mixin');\n```\n\n----------------------------------------\n\nTITLE: Customizing Raycaster for Laser Controls in A-Frame HTML\nDESCRIPTION: This example shows how to customize the raycaster properties when using laser-controls. It sets the 'objects' property to target specific elements and limits the 'far' distance of the raycaster.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/laser-controls.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity laser-controls raycaster=\"objects: .links; far: 5\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Entity with Geometry, Material, and Light Components in HTML\nDESCRIPTION: Extended example that adds a light component to the entity, making it emit point light with specified intensity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: box\" material=\"color: red\"\n          light=\"type: point; intensity: 2.0\">\n```\n\n----------------------------------------\n\nTITLE: Customizing Line Appearance for Laser Controls in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the laser line by modifying the raycaster properties. It changes the line color to red and sets its opacity to 0.5.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/laser-controls.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity laser-controls raycaster=\"lineColor: red; lineOpacity: 0.5\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Meta Touch Controls in HTML\nDESCRIPTION: Demonstrates setup of Meta Touch controllers for both hands using meta-touch-controls component. Enables full 6DoF tracking for Oculus Touch controllers.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a-entity meta-touch-controls=\"hand: left\"></a-entity>\n<a-entity meta-touch-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Mouse-based Cursor Entity\nDESCRIPTION: A-Frame entity configuration for enabling mouse-based interaction and cursor events.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/visual-inspector-and-dev-tools.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity cursor=\"rayOrigin: mouse\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Multiple Component Instances in HTML\nDESCRIPTION: Example showing how to attach multiple instances of a component to an entity using DOM syntax.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity\n    sound=\"src: url(sound.mp3)\"\n    sound__beep=\"src: url(beep.mp3)\"\n    sound__boop=\"src: url(boop.mp3)\"\n  ></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Preloading Ground Texture Using A-Frame Asset Management System\nDESCRIPTION: Implements asset preloading for the ground texture using A-Frame's asset management system. This improves performance by ensuring textures are loaded before the scene renders.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n\n<a-scene>\n  <a-assets>\n    <img id=\"groundTexture\" src=\"https://cdn.aframe.io/a-painter/images/floor.jpg\">\n  </a-assets>\n\n  <a-cylinder id=\"ground\" src=\"#groundTexture\" radius=\"32\" height=\"0.1\"></a-cylinder>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Using Event-Set Component with Multiple Properties\nDESCRIPTION: Shows how to use the event-set component to change multiple properties of a material component on various mouse events.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n<script src=\"https://unpkg.com/aframe-event-set-component@5.x.x/dist/aframe-event-set-component.min.js\"></script>\n<body>\n  <a-scene>\n    <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" color=\"#7BC8A4\"\n             event-set__down=\"_event: mousedown; material.wireframe: true\"\n             event-set__up=\"_event: mouseup; material.wireframe: false\"\n             event-set__leave=\"_event: mouseleave; material.wireframe: false\"></a-plane>\n\n    <a-camera>\n      <a-cursor></a-cursor>\n    </a-camera>\n  </a-scene>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating a Torus Knot Geometry in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a pretzel-shaped torus knot geometry in A-Frame, specifying the p and q parameters that define the shape of the knot.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: torusKnot; p: 3; q:7\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Expanded Merged Properties in A-Frame\nDESCRIPTION: Shows the final result of merging multiple geometry-related mixins. This demonstrates the equivalent entity after all mixins have been applied and merged with direct entity properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/mixins.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: box; height: 10; depth: 2; width: 10\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Adding Geometry Component\nDESCRIPTION: Demonstrates setting up a geometry component with specific properties using setAttribute.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nentityEl.setAttribute('geometry', {\n  primitive: 'box',\n  height: 3,\n  width: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Icosahedron in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a basic icosahedron in A-Frame using the <a-icosahedron> primitive. It sets the color to a light orange (#FF926B) and specifies a radius of 5 units.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-icosahedron.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-icosahedron color=\"#FF926B\" radius=\"5\"></a-icosahedron>\n```\n\n----------------------------------------\n\nTITLE: Triggering Custom Animation Event in A-Frame JavaScript\nDESCRIPTION: This JavaScript snippet shows how to emit a custom event to trigger an animation in A-Frame. It demonstrates the use of the emit method with a custom event name and ensures the event doesn't bubble up to parent elements.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/animation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nel.emit(`triggeranimation`, null, false);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Schema Updates in Geometry Component\nDESCRIPTION: Implementation of updateSchema() method to dynamically modify component schema based on primitive property changes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('geometry', {\n  // ...\n  updateSchema: (newData) {\n    if (newData.primitive !== this.data.primitive) {\n      this.extendSchema(GEOMETRIES[newData.primitive].schema);\n    }\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Component Method Access Example\nDESCRIPTION: Example showing how to access component members and methods from outside the component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  init: function () {\n    this.bar = 'baz';\n  },\n\n  qux: function () {\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to set the background color of an A-Frame scene to red using the background component. It also mentions the use of lighting estimation for AR.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/background.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene background=\"color: red\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Using Event-Set Component for Color Change on Hover\nDESCRIPTION: Shows how to use the event-set component to change a box's color on hover and restore it when not hovering.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n<script src=\"https://unpkg.com/aframe-event-set-component@5.x.x/dist/aframe-event-set-component.min.js\"></script>\n<body>\n  <a-scene>\n    <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\"\n           event-set__enter=\"_event: mouseenter; color: #8FF7FF\"\n           event-set__leave=\"_event: mouseleave; color: #4CC3D9\"></a-box>\n\n    <a-camera>\n      <a-cursor></a-cursor>\n    </a-camera>\n  </a-scene>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating a Ring Geometry in A-Frame HTML\nDESCRIPTION: This snippet shows how to create a flat ring geometry in A-Frame. It specifies the inner and outer radii of the ring and sets the material to render both sides.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: ring; radiusInner: 0.5; radiusOuter: 1\"\n          material=\"side: double\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: A-Frame Box Component Schema\nDESCRIPTION: Schema definition for a custom box component with configurable dimensions and color.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('box', {\n  schema: {\n    width: {type: 'number', default: 1},\n    height: {type: 'number', default: 1},\n    depth: {type: 'number', default: 1},\n    color: {type: 'color', default: '#AAA'}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity with createElement\nDESCRIPTION: Demonstrates how to create a new A-Frame entity using the standard DOM createElement method. Creates an empty entity that can be configured and added to the scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar el = document.createElement('a-entity');\n```\n\n----------------------------------------\n\nTITLE: Creating an Icosahedron Geometry in A-Frame HTML\nDESCRIPTION: This example demonstrates how to create an icosahedron geometry using the A-Frame geometry component. It specifies the primitive type as 'icosahedron'.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: icosahedron\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Textured Cones in A-Frame\nDESCRIPTION: Example showing how to create basic and textured cone primitives in A-Frame. Demonstrates setting radius properties and applying textures using assets.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-cone.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-assets>\n  <img id=\"texture\" src=\"texture.png\">\n</a-assets>\n\n<!-- Basic cone. -->\n<a-cone color=\"tomato\" radius-bottom=\"2\" radius-top=\"0.5\"></a-cone>\n\n<!-- Textured box. -->\n<a-cone src=\"#texture\"></a-cone>\n```\n\n----------------------------------------\n\nTITLE: Setting component properties with AFRAME.utils.entity.setComponentProperty\nDESCRIPTION: Demonstrates different ways to set individual or multiple properties of components using dot notation or custom delimiters.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// <a-entity id=\"box\" geometry=\"primitive: box\"></a-entity>\nvar entity = document.querySelector('#box');\n\nAFRAME.utils.entity.setComponentProperty(entity, 'geometry.width', 1);\nAFRAME.utils.entity.setComponentProperty(entity, 'geometry|height', 2, '|');\nAFRAME.utils.entity.setComponentProperty(entity, 'geometry', {depth: 3});\n```\n\n----------------------------------------\n\nTITLE: Removing Entity from Scene\nDESCRIPTION: Shows how to remove an entity from the scene using the removeChild DOM method.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nentityEl.parentNode.removeChild(entityEl);\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Shortcuts in A-Frame Scene\nDESCRIPTION: This snippet demonstrates how to use the keyboard-shortcuts component in an A-Frame scene. It disables the shortcuts for entering and exiting VR mode by setting both 'enterVR' and 'exitVR' properties to false.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/keyboard-shortcuts.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene keyboard-shortcuts=\"enterVR: false; exitVR: false;\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Creating an Orbiting Sphere in A-Frame HTML\nDESCRIPTION: This snippet shows how to create an orbiting sphere by animating the rotation of a parent entity in a continuous loop over 10 seconds, with the sphere positioned 5 meters away from the center.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/animation.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity rotation=\"0 0 0\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 10000\">\n        <a-sphere position=\"5 0 0\" color=\"mediumseagreen\"></a-sphere>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Position in A-Frame HTML\nDESCRIPTION: Demonstrates how to set the position of an A-Frame entity using the position component in HTML markup. The position is specified as three space-delimited numbers representing x, y, and z coordinates.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/position.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity position=\"0 1 -1\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Using getDOMAttribute for Component Data in JavaScript\nDESCRIPTION: Shows how to get only explicitly defined component data without applied mixins or defaults using getDOMAttribute.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// <a-entity geometry=\"primitive: box; width: 3\">\n\nentity.getDOMAttribute('geometry');\n// >> { primitive: \"box\", width: 3 }\n\nentity.getDOMAttribute('geometry').primitive;\n// >> \"box\"\n\nentity.getDOMAttribute('geometry').height;\n// >> undefined\n\nentity.getDOMAttribute('position');\n// >> undefined\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Box Geometry in A-Frame JavaScript\nDESCRIPTION: This snippet demonstrates how to register a custom box geometry using AFRAME.registerGeometry. It defines the schema for the geometry's properties and initializes the geometry using THREE.BoxGeometry.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerGeometry('box', {\n  schema: {\n    depth: {default: 1, min: 0},\n    height: {default: 1, min: 0},\n    width: {default: 1, min: 0},\n    segmentsHeight: {default: 1, min: 1, max: 20, type: 'int'},\n    segmentsWidth: {default: 1, min: 1, max: 20, type: 'int'},\n    segmentsDepth: {default: 1, min: 1, max: 20, type: 'int'}\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.BoxGeometry(data.width, data.height, data.depth);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Curved Surface in A-Frame HTML\nDESCRIPTION: This example illustrates how to create a curved surface using the cylinder geometry. It specifies a partial arc with thetaLength, makes it open-ended, and uses a double-sided material.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: cylinder; openEnded: true; thetaLength: 180\"\n          material=\"side: double\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Specifying Response Type for Asset Items in A-Frame HTML\nDESCRIPTION: This code shows how to specify a custom response type for an <a-asset-item> in A-Frame. In this case, it sets the response type to 'arraybuffer' for a GLTF model.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/asset-management-system.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-asset-item response-type=\"arraybuffer\" src=\"model.gltf\"></a-asset-item>\n```\n\n----------------------------------------\n\nTITLE: Configuring A-Frame Loading Screen Colors with HTML\nDESCRIPTION: HTML example showing how to configure the loading screen component with custom colors. This snippet sets the background color to black and dots color to red by using the loading-screen component's properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/loading-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene loading-screen=\"dotsColor: red; backgroundColor: black\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Spot Light Configuration\nDESCRIPTION: Basic example of setting up a spot light with angle property.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a-entity light=\"type: spot; angle: 45\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Auto-Scaling Text to Fit Geometry in A-Frame\nDESCRIPTION: HTML examples demonstrating how to make text automatically scale to fit geometry or vice versa. These techniques help create responsive and properly sized text elements within A-Frame scenes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/text.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-entity\n  geometry=\"primitive: plane; width: 4; height: 0\"\n  material=\"color: blue\"\n  text=\"value: This text will be 4 units wide.\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating a Torus Knot in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a torus knot primitive in A-Frame. It sets various attributes including color, arc, p and q values, radius, and tubular radius.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-torus-knot.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-torus-knot color=\"#B84A39\" arc=\"180\" p=\"2\" q=\"7\" radius=\"5\" radius-tubular=\"0.1\"></a-torus-knot>\n```\n\n----------------------------------------\n\nTITLE: Preloading Audio and Video Assets in A-Frame HTML\nDESCRIPTION: This code snippet shows how to preload audio and video assets in A-Frame. It demonstrates that assets will only block the scene if 'autoplay' or 'preload=\"auto\"' attributes are set.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/asset-management-system.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <!-- These will not block. -->\n    <audio src=\"blockus.mp3\"></audio>\n    <video src=\"loadofblocks.mp4\"></video>\n\n    <!-- These will block. -->\n    <audio src=\"blocky.mp3\" autoplay></audio>\n    <video src=\"blockiscooking.mp4\" preload=\"auto\"></video>\n  </a-assets>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Updating Object3D Properties\nDESCRIPTION: Demonstrates direct manipulation of Three.js Object3D properties for better performance.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Examples for position.\nentityEl.object3D.position.set(1, 2, 3);\nentityEl.object3D.position.x += 5;\nentityEl.object3D.position.multiplyScalar(5);\n\n// Examples for rotation.\nentityEl.object3D.rotation.y = THREE.MathUtils.degToRad(45);\nentityEl.object3D.rotation.divideScalar(2);\n\n// Examples for scale.\nentityEl.object3D.scale.set(2, 2, 2);\nentityEl.object3D.scale.z += 1.5;\n\n// Examples for visible.\nentityEl.object3D.visible = false;\nentityEl.object3D.visible = true;\n```\n\n----------------------------------------\n\nTITLE: Registering GLSL Shader in JavaScript\nDESCRIPTION: This JavaScript code registers a custom shader named 'grid-glitch' using AFRAME.registerShader, incorporating the previously defined vertex and fragment shaders.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// shader-grid-glitch.js\n\nAFRAME.registerShader('grid-glitch', {\n  schema: {\n    color: {type: 'color', is: 'uniform'},\n    timeMsec: {type: 'time', is: 'uniform'}\n  },\n\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Hexagonal Prism in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a hexagonal prism by modifying the number of radial segments in a cylinder geometry.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: cylinder; segmentsRadial: 6\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating Data URL for GLB Files\nDESCRIPTION: Shell commands to create a data URL for small GLB files that can be embedded directly in HTML pages.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/gltf-model.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho -n \"data:model/gltf-binary;base64,\" >/tmp/base64.txt\nbase64 -w 0 model.glb >>/tmp/base64.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Element in HTML\nDESCRIPTION: A simple example of an empty entity element, which by itself has no appearance, behavior, or functionality.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity>\n```\n\n----------------------------------------\n\nTITLE: Basic Light Entity Configuration in A-Frame\nDESCRIPTION: Basic example of adding a light entity with color and intensity properties in A-Frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/light.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity light=\"color: #AFA; intensity: 1.5\" position=\"-1 1 0\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Transforming A-Frame Entities with Rotation and Scale\nDESCRIPTION: Example showing how to transform a box entity using rotation and scale components. The box is rotated 45 degrees on both Y and Z axes and doubled in size in all dimensions.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box color=\"red\" rotation=\"0 45 45\" scale=\"2 2 2\"></a-box>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Using Flat Shader in A-Frame Material\nDESCRIPTION: Demonstrates how to use the flat shader in A-Frame's material component, which is not affected by scene lighting and is useful for images or videos.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: plane\" material=\"shader: flat; src: #cat-image\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sphere Geometry in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a basic sphere geometry in A-Frame, specifying the radius of the sphere.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: sphere; radius: 2\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating a Cone Geometry in A-Frame HTML\nDESCRIPTION: This snippet illustrates the creation of a cone geometry using the A-Frame geometry component. It sets the primitive type to 'cone' and defines different radii for the top and bottom of the cone.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: cone; radiusBottom: 1; radiusTop: 0.1\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Accessing A-Frame System Through Scene\nDESCRIPTION: This code snippet shows how to access an instantiated system through the A-Frame scene element.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/systems.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('a-scene').systems[systemName];\n```\n\n----------------------------------------\n\nTITLE: Setting Asset Timeout in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to set a custom timeout for asset loading in A-Frame. If assets take longer than the specified time to load, the scene will begin rendering regardless.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/asset-management-system.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets timeout=\"10000\">\n    <!-- You got until the count of 10 to load else the show will go on without you. -->\n    <img src=\"bigimage.png\">\n  </a-assets>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Element from Entity in JavaScript\nDESCRIPTION: Demonstrates how to reference the parent scene element from an entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar sceneEl = document.querySelector('a-scene');\nvar entity = sceneEl.querySelector('a-entity');\nconsole.log(entity.sceneEl === sceneEl);  // >> true.\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Textured Triangles in A-Frame\nDESCRIPTION: Demonstrates how to create both a basic colored triangle and a textured triangle in an A-Frame scene. Shows usage of color attributes and texture mapping via source image.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-triangle.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <img id=\"platform\" src=\"https://i.imgur.com/mYmmbrp.jpg\">\n  </a-assets>\n\n  <!-- Basic triangle. -->\n  <a-triangle color=\"#CCC\" vertex-c=\"1 -1 0\"></a-triangle>\n\n  <!-- Textured triangle parallel to ground. -->\n  <a-triangle src=\"#platform\" rotation=\"-90 0 0\"></a-triangle>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Disabling XR Mode UI in A-Frame Scene\nDESCRIPTION: A simple example of how to disable the entire XR mode UI in an A-Frame scene by setting the enabled property to false.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/xr-mode-ui.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene xr-mode-ui=\"enabled: false\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Creating a Plane Geometry in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a flat surface using the plane geometry primitive in A-Frame. It specifies the width and height of the plane and sets the material to render both sides.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: plane; height: 10; width: 10\" material=\"side: double\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Event Listener Binding\nDESCRIPTION: Demonstrates different methods for binding this context in event listeners.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nthis.el.addEventListener('physicscollided', (event) => {\n    console.log(this.el.id);\n});\n\nthis.listeners = {\n    clickListener: this.clickListener.bind(this);\n}\nentityEl.addEventListener('click', this.listeners.clickListener);\n```\n\n----------------------------------------\n\nTITLE: Creating a Half Torus Geometry in A-Frame HTML\nDESCRIPTION: This snippet shows how to create a half donut or curved tube shape using the torus geometry in A-Frame, specifying the outer radius, tubular radius, and arc angle.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!-- Half donut -->\n<a-entity geometry=\"primitive: torus; radius: 2; radiusTubular: 0.5; arc: 180\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Basic Scale Component Usage in A-Frame\nDESCRIPTION: Demonstrates how to apply scaling transformation to an A-Frame entity using the scale component, with factors 0.5 for X, 1 for Y, and 2 for Z axes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/scale.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity scale=\"0.5 1 2\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Using Pool Component Methods in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to request an entity from the pool, activate it, and return it to the pool. It uses the requestEntity and returnEntity methods of the pool component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/pool.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar el = sceneEl.components.pool__enemy.requestEntity();\nel.play();\nsceneEl.components.pool__enemy.returnEntity(el);\n```\n\n----------------------------------------\n\nTITLE: Mixin Precedence in A-Frame\nDESCRIPTION: Demonstrates how right-most mixins take precedence when multiple mixins define the same property. In this example, the blue mixin overrides the red mixin because it appears last in the mixin attribute.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/mixins.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-mixin id=\"red\" material=\"color: red\"></a-mixin>\n    <a-mixin id=\"blue\" material=\"color: blue\"></a-mixin>\n    <a-mixin id=\"cube\" geometry=\"primitive: box\"></a-mixin>\n  </a-assets>\n\n  <a-entity mixin=\"red blue cube\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Expanded Equivalent of A-Frame Mixins\nDESCRIPTION: Shows the conceptual expansion of entities with mixins applied. This snippet demonstrates how the mixins are essentially replaced with their component properties in the final rendered entities.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/mixins.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity material=\"color: red\" geometry=\"primitive: box\"></a-entity>\n<a-entity material=\"color: blue\" geometry=\"primitive: box\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Textured Rings with A-Frame\nDESCRIPTION: This snippet demonstrates how to create a basic teal-colored ring and a textured ring using the <a-ring> primitive in A-Frame. It shows the usage of color, radius, and texture attributes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-ring.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-assets>\n  <img id=\"texture\" src=\"texture.png\">\n</a-assets>\n\n<!-- Basic ring. -->\n<a-ring color=\"teal\" radius-inner=\"1\" radius-outer=\"2\"></a-ring>\n\n<!-- Textured ring. -->\n<a-ring src=\"#texture\"></a-ring>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logitech MX Ink Controls in HTML\nDESCRIPTION: Basic example of adding Logitech MX Ink controls to both hands in an A-Frame scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/logitech-mx-ink-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity logiteck-mx-ink-controls=\"hand: left\"></a-entity>\n<a-entity logiteck-mx-ink-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Including A-Frame Master Build from CDN in HTML\nDESCRIPTION: This code snippet demonstrates how to include the latest A-Frame master build from the jsdelivr CDN in an HTML document. It shows the basic structure of an A-Frame scene that can be extended with custom elements.\nSOURCE: https://github.com/aframevr/aframe/blob/master/dist/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://cdn.jsdelivr.net/gh/aframevr/aframe@4b7ee2f9de4e518a738776414c893b80caaf451f/dist/aframe-master.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <!-- ... -->\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Laser Controls in A-Frame\nDESCRIPTION: HTML markup demonstrating how to add laser controls to a controller entity, specifying the hand to use.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a-entity laser-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating a Triangle Geometry in A-Frame HTML\nDESCRIPTION: This snippet shows how to create a flat two-dimensional triangle geometry in A-Frame, setting the material to render both sides.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: triangle\" material=\"side: double\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Using Single-Property A-Frame Component in HTML\nDESCRIPTION: Demonstrates how to use a single-property A-Frame component in an HTML scene, setting its value directly as an attribute.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity foo=\"20\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Fine-Tuning A-Frame Video Primitive Dimensions\nDESCRIPTION: This snippet shows how to set the width and height of an <a-video> primitive to maintain the aspect ratio of the original video. The example uses a 2:1 aspect ratio video.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-video.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-video src=\"#myvideo\" width=\"3\" height=\"1.5\"></a-video>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vive Focus Controllers in A-Frame HTML\nDESCRIPTION: Example showing how to set up Vive Focus controller entities in A-Frame. Demonstrates both general controller matching and hand-specific controller initialization.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/vive-focus-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Match Vive Focus controller if present, regardless of hand. -->\n<a-entity vive-focus-controls></a-entity>\n\n<!-- Match Vive Focus controller if present and for specified hand. -->\n<a-entity vive-focus-controls=\"hand: left\"></a-entity>\n<a-entity vive-focus-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners\nDESCRIPTION: Shows how to properly remove event listeners when they are no longer needed.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// We have to define this function with a name if we later remove it.\nfunction collisionHandler (event) {\n  console.log('Entity collided with', event.detail.collidingEntity);\n}\n\nentityEl.addEventListener('physicscollided', collisionHandler);\nentityEl.removeEventListener('physicscollided', collisionHandler);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tetrahedron Geometry in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a tetrahedron geometry in A-Frame, specifying the radius of the tetrahedron.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: tetrahedron; radius: 2\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Attaching a Custom Component to an A-Frame Scene\nDESCRIPTION: HTML markup showing how to attach a custom component to the scene element. The component's initialization function will be called after the scene has loaded.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/scene.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-scene do-something></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dodecahedron in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a dodecahedron primitive in A-Frame. It sets the color to a light orange (#FF926B) and the radius to 5 units.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-dodecahedron.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-dodecahedron color=\"#FF926B\" radius=\"5\"></a-dodecahedron>\n```\n\n----------------------------------------\n\nTITLE: Layout Component Implementation in A-Frame\nDESCRIPTION: Demonstrates using the layout component to automatically position multiple link entities in a line formation with specified margins.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-360-image-gallery.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a-entity id=\"links\" layout=\"type: line; margin: 1.5\" position=\"-1.5 -1 -4\">\n  <a-entity template=\"src: #link\" data-thumb=\"#city-thumb\"></a-entity>\n  <a-entity template=\"src: #link\" data-thumb=\"#cubes-thumb\"></a-entity>\n  <a-entity template=\"src: #link\" data-thumb=\"#sechelt-thumb\"></a-entity>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating Various Cylinder Shapes in A-Frame\nDESCRIPTION: Examples of different cylinder shapes including a basic cylinder, hexagon, Pac-man, and green pipe. These examples demonstrate the versatility of the cylinder primitive for creating different curved surfaces.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-cylinder.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Basic cylinder. -->\n<a-cylinder color=\"crimson\" height=\"3\" radius=\"1.5\"></a-cylinder>\n\n<!-- Hexagon. -->\n<a-cylinder color=\"cyan\" segments-radial=\"6\"></a-cylinder>\n\n<!-- Pac-man. -->\n<a-cylinder color=\"yellow\" theta-start=\"50\" theta-length=\"280\" side=\"double\"></a-cylinder>\n\n<!-- Green pipe. -->\n<a-cylinder color=\"green\" open-ended=\"true\"></a-cylinder>\n```\n\n----------------------------------------\n\nTITLE: Camera Active State Change in A-Frame\nDESCRIPTION: JavaScript code showing how to programmatically change the active camera.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar secondCameraEl = document.querySelector('#second-camera');\nsecondCameraEl.setAttribute('camera', 'active', true);\n```\n\n----------------------------------------\n\nTITLE: Complete Embedded A-Frame Scene Example\nDESCRIPTION: A complete example of an embedded A-Frame scene with various 3D objects. The scene has a light gray background and includes a box, sphere, cylinder, and plane with shadows enabled.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/embedded.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"myEmbeddedScene\">\n  <a-scene background=\"color: #ECECEC\" embedded>\n    <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\" shadow></a-box>\n    <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\" shadow></a-sphere>\n    <a-cylinder position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" color=\"#FFC65D\" shadow></a-cylinder>\n    <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" color=\"#7BC8A4\" shadow></a-plane>\n  </a-scene>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Elements by Tag with querySelectorAll\nDESCRIPTION: Demonstrates how to select multiple elements of the same type (a-box) using querySelectorAll, which returns an array of matching elements.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(sceneEl.querySelectorAll('a-box'));\n// [\n//  <a-box id=\"redBox\" class=\"clickable\" color=\"red\"></a-box>,\n//  <a-box color=\"green\"></a-box>\n// ]\n```\n\n----------------------------------------\n\nTITLE: Default Camera Configuration in A-Frame\nDESCRIPTION: The default camera configuration that A-Frame injects when no camera is specified.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity camera=\"active: true\" look-controls wasd-controls position=\"0 1.6 0\" data-aframe-default-camera></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Orienting Circle Parallel to Ground in A-Frame VR\nDESCRIPTION: Example showing how to rotate a circle primitive to make it parallel to the ground by rotating -90 degrees around the X-axis.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-circle.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-circle rotation=\"-90 0 0\"></a-circle>\n```\n\n----------------------------------------\n\nTITLE: Parallelizing A-Frame Plane to the Ground\nDESCRIPTION: This snippet shows how to make a plane parallel to the ground in A-Frame by rotating it around the X-axis. This technique can be used to create ground surfaces or horizontally aligned planes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-plane.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-plane rotation=\"-90 0 0\"></a-plane>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Rendering in A-Frame\nDESCRIPTION: Demonstrates how to create a basic text element using the <a-text> primitive with a simple text value.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-text.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-text value=\"Hello, World!\"></a-text>\n```\n\n----------------------------------------\n\nTITLE: Embedding an A-Frame Scene in HTML\nDESCRIPTION: HTML example demonstrating how to embed an A-Frame scene within a regular webpage using the embedded component. The scene is contained in a div element that can be styled and positioned like any other HTML element.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/embedded.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div id=\"myEmbeddedScene\">\n    <a-scene embedded>\n      <!-- ... -->\n    </a-scene>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Basic Visible Component Usage in HTML\nDESCRIPTION: Demonstrates how to set an entity's visibility to false using the visible component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/visible.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity visible=\"false\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: HUD Camera Setup in A-Frame\nDESCRIPTION: Example of attaching a heads-up display (HUD) to the camera view.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/camera.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-entity camera look-controls>\n  <a-entity geometry=\"primitive: plane; height: 0.2; width: 0.2\" position=\"0 0 -1\"\n            material=\"color: gray; opacity: 0.5\"></a-entity>\n</a-entity>\n```\n\n----------------------------------------\n\nTITLE: Styling an Embedded A-Frame Scene with CSS\nDESCRIPTION: CSS example showing how to apply specific dimensions to an embedded A-Frame scene. This allows the scene to fit within a webpage layout rather than taking up the full screen.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/embedded.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\na-scene {\n  height: 300px;\n  width: 600px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Entity in A-Frame HTML\nDESCRIPTION: This code snippet demonstrates how to create a clickable entity in A-Frame that links to another WebVR page. It uses the link component to enable link traversal between WebVR experiences.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/faq.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-entity link=\"on: click; href: https://aframe-aincraft.glitch.me\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Entity Property Precedence Over Mixins in A-Frame\nDESCRIPTION: Shows how direct entity properties take precedence over mixin properties. In this example, the entity's green color overrides both the red and blue mixins applied to it.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/mixins.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-assets>\n    <a-mixin id=\"red\" material=\"color: red\"></a-mixin>\n    <a-mixin id=\"blue\" material=\"color: blue\"></a-mixin>\n    <a-mixin id=\"cube\" geometry=\"primitive: box\"></a-mixin>\n  </a-assets>\n\n  <a-entity mixin=\"red blue cube\" material=\"color: green\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Default Text Width in A-Frame\nDESCRIPTION: An example demonstrating the default behavior when neither geometry nor text components specify a width. The text width defaults to 1 unit (meter), and the geometry width automatically matches.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/text.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a-entity\n  geometry=\"primitive: plane\"\n  material=\"color: blue\"\n  text=\"value: 1-wide\\ndefault.\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL parameters with AFRAME.utils.getUrlParameter\nDESCRIPTION: Shows how to extract parameter values from the current URL query string.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.utils.getUrlParameter('testing');\n// If visiting the current page with ?testing=aframe, this will log 'aframe'.\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by Class with querySelectorAll\nDESCRIPTION: Shows how to select elements by class name using querySelectorAll with a class selector. This example finds all 'clickable' entities.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/javascript-events-dom-apis.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(sceneEl.querySelectorAll('.clickable'));\n// [\n//  <a-box id=\"redBox\" class=\"clickable\" color=\"red\"></a-box>\n//  <a-sphere class=\"clickable\" color=\"blue\"></a-sphere>\n// ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Orientation Permission UI in A-Frame Scene\nDESCRIPTION: HTML example showing how to disable the device orientation permission UI in an A-Frame scene element.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/device-orientation-permission-ui.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene device-orientation-permission-ui=\"enabled: false\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Link Primitive Example in HTML for A-Frame\nDESCRIPTION: Demonstrates the alternative link primitive syntax in A-Frame, which provides a more HTML-like approach to creating portals between VR experiences.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/link.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-link href=\"index.html\" title=\"My Homepage\" image=\"#homeThumbnail\"></a-link>\n```\n\n----------------------------------------\n\nTITLE: Creating a Polyhedron Sphere in A-Frame HTML\nDESCRIPTION: This snippet shows how to create a polyhedron or abstract shape using the sphere geometry in A-Frame by specifying the number of horizontal and vertical segments.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: sphere; segmentsWidth: 2; segmentsHeight: 8\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Scaling Geometry to Fit Text in A-Frame\nDESCRIPTION: An example showing how to make geometry automatically scale to fit text content by setting the geometry's dimensions to zero and specifying a text width.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/text.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a-entity\n  geometry=\"primitive: plane; height: 0; width: 0\"\n  material=\"color: blue\"\n  text=\"width: 4; value: This text will be 4 units wide.\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Creating an Octahedron in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a basic octahedron primitive in A-Frame. It sets the color to a light orange (#FF926B) and specifies a radius of 5 units.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-octahedron.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-octahedron color=\"#FF926B\" radius=\"5\"></a-octahedron>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tetrahedron in A-Frame\nDESCRIPTION: Example showing how to create a basic tetrahedron primitive with custom color and radius properties in A-Frame. The tetrahedron is rendered with an orange-pink color (#FF926B) and has a radius of 5 units.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-tetrahedron.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-tetrahedron color=\"#FF926B\" radius=\"5\"></a-tetrahedron>\n```\n\n----------------------------------------\n\nTITLE: Basic OBB Collider Implementation in A-Frame\nDESCRIPTION: Basic implementation of the obb-collider component on an A-Frame entity. This enables collision detection using Oriented Bounding Boxes for the entity.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/obb-collider.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity obb-collider></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Deep comparison of objects with AFRAME.utils.deepEqual\nDESCRIPTION: Shows how to check if two objects are deeply equal, including nested properties.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndeepEqual({a: 1, b: {c: 3}}, {a: 1, b: {c: 3}})\n// >> true\n```\n\n----------------------------------------\n\nTITLE: Parallelizing Triangle to Ground in A-Frame\nDESCRIPTION: Shows how to rotate a triangle to make it parallel to the ground by applying rotation around the X-axis.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-triangle.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-triangle rotation=\"-90 0 0\"></a-triangle>\n```\n\n----------------------------------------\n\nTITLE: Creating a Torus in A-Frame HTML\nDESCRIPTION: This snippet demonstrates how to create a torus primitive in A-Frame. It sets the color to green, defines a 270-degree arc, sets the radius to 5 units, and the tubular radius to 0.1 units.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-torus.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-torus color=\"#43A367\" arc=\"270\" radius=\"5\" radius-tubular=\"0.1\"></a-torus>\n```\n\n----------------------------------------\n\nTITLE: Initializing A-Frame Scene with Basic HTML Structure\nDESCRIPTION: The initial HTML skeleton for the A-Frame Minecraft demo, including the script reference to the A-Frame library and an empty scene element.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n\n<body>\n  <a-scene>\n  </a-scene>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating an Octahedron Geometry in A-Frame HTML\nDESCRIPTION: This snippet illustrates how to create an octahedron geometry using the A-Frame geometry component. It simply specifies the primitive type as 'octahedron'.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: octahedron\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Using hide-on-enter-ar Component with A-Frame Elements\nDESCRIPTION: This example demonstrates how to apply the hide-on-enter-ar component to A-Frame elements. It shows implementation on both a light and a sky element, which will become invisible when the user enters AR mode.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/hide-on-enter-ar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-light hide-on-enter-ar></a-light>\n<a-sky hide-on-enter-ar color=\"skyblue\"></a-sky>\n```\n\n----------------------------------------\n\nTITLE: Efficient Tick Handler in A-Frame Components\nDESCRIPTION: This snippet demonstrates how to create efficient tick handlers in A-Frame components by reusing objects and avoiding unnecessary allocations.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/best-practices.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  tick: function () {\n    this.doSomething();\n  },\n\n  doSomething: (function () {\n    var helperVector = new THREE.Vector3();\n    var helperQuaternion = new THREE.Quaternion();\n\n    return function () {\n      helperVector.copy(this.el.object3D.position);\n      helperQuaternion.copy(this.el.object3D.quaternion);\n    };\n  })()\n});\n```\n\n----------------------------------------\n\nTITLE: Incremental Scale Updates in Three.js\nDESCRIPTION: Shows various methods for incrementally updating scale values using Three.js Vector3 utilities, including addition, multiplication, and vector subtraction.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/scale.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nel.object3D.scale.x += 1;\nel.object3D.scale.multiplyScalar(2);\nel.object3D.scale.sub(someOtherVector);\n```\n\n----------------------------------------\n\nTITLE: Loading A-Frame with Basic Import Map\nDESCRIPTION: Demonstrates how to load A-Frame using an import map and register components synchronously. Shows basic setup with minimal configuration.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/faq.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n  <script type=\"importmap\">\n    {\n        \"imports\": {\n            \"aframe\": \"https://aframe.io/releases/1.7.1/aframe.min.js\",\n        }\n    }\n  </script>\n  <script type=\"module\">\n    import 'aframe';\n    AFRAME.registerComponent('my-component', {\n      ...\n    });\n  </script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Lights in A-Frame Scene (HTML)\nDESCRIPTION: Demonstrates how to disable the default lighting in an A-Frame scene by setting the 'defaultLightsEnabled' property to false on the scene element.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<a-scene light=\"defaultLightsEnabled: false\">\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML meta tag for iOS video playback\nDESCRIPTION: HTML meta tag required for enabling inline video playback on iOS devices. This tag must be set to allow videos to play within A-Frame on iOS platforms.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Hide-on-Enter-VR Component in A-Frame HTML\nDESCRIPTION: A simple example showing how to add the hide-on-enter-vr component to an A-Frame entity. When applied, this component will automatically hide the entity when the user enters VR mode by toggling its visible state.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/hide-on-enter-vr.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-entity hide-on-enter-vr></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Installing A-Frame via npm\nDESCRIPTION: Command to install A-Frame package using npm package manager.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install aframe\n```\n\n----------------------------------------\n\nTITLE: Adding X Button Listener to Entity in A-Frame\nDESCRIPTION: HTML markup showing how to attach the x-button-listener component to an entity with meta-touch-controls.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a-entity meta-touch-controls x-button-listener></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Updater Component in A-Frame\nDESCRIPTION: Creates a component that updates shader uniforms based on camera position. Demonstrates proper performance optimization by reusing Vector3 instance and avoiding object creation in tick function.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/material.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('myoffset-updater', {\n  init: function () {\n    this.offset = new THREE.Vector3();\n  },\n\n  tick: function (t, dt) {\n    this.offset.copy(this.el.sceneEl.camera.el.getAttribute('position'));\n    this.offset.y = 0;\n    this.el.setAttribute('material', 'myOffset', this.offset);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Motion Capture to Scene\nDESCRIPTION: HTML markup for enabling motion capture recording on an A-Frame scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/visual-inspector-and-dev-tools.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene avatar-recorder>\n```\n\n----------------------------------------\n\nTITLE: Installing angle CLI for A-Frame\nDESCRIPTION: Command to install and initialize an A-Frame scene using the angle CLI tool.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g angle && angle initscene\n```\n\n----------------------------------------\n\nTITLE: Configuring A-Frame Spectator Mode\nDESCRIPTION: Shows how to enable the spectator mode feature in the avatar-replayer component, allowing third-person viewing of motion capture recordings.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/visual-inspector-and-dev-tools.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-scene avatar-replayer=\"spectatorMode: true\">\n```\n\n----------------------------------------\n\nTITLE: Fixed Component Update Example\nDESCRIPTION: Example fix for setAttribute behavior when passed an object - extends existing data rather than clobbering it.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsetAttribute('material', {color: 'red'})\n```\n\n----------------------------------------\n\nTITLE: Scene Color Management Method\nDESCRIPTION: Method to normalize color corrections for THREE.Color and THREE.Texture objects.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.renderer.systems.applyColorCorrection\n```\n\n----------------------------------------\n\nTITLE: Configuring WebVR Buffer Scale in JavaScript\nDESCRIPTION: Sets the WebVR polyfill buffer scale to 1 / devicePixelRatio for iOS versions under 10 to work around a Webkit bug. This can be overridden but may cause canvas sizing issues in stereo mode.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.WebVRConfig.BUFFER_SCALE = 1 / window.devicePixelRatio\n```\n\n----------------------------------------\n\nTITLE: Converting Video to GIF using Gifpardy CLI\nDESCRIPTION: Commands for converting video files to GIF format using the Gifpardy tool, which uses ffmpeg and gifsicle. Includes options for basic conversion, custom output naming, and setting resolution and delay parameters.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/hosting-and-publishing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngifpardy in.mp4\ngifpardy in.mp4 out.gif\ngifpardy -r 320x240 --delay 8 in.mp4\n```\n\n----------------------------------------\n\nTITLE: Defining A-Frame <a-link> Primitive Attributes\nDESCRIPTION: This table defines the attributes of the <a-link> primitive in A-Frame, showing their component mappings and default values. It includes 'href', 'title', and 'src' attributes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/primitives/a-link.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute             | Component Mapping              | Default Value |\n|-----------------------|--------------------------------|---------------|\n| href                  | link.href                      |               |\n| title                 | link.title                     |               |\n| src                   | link.src                       |               |\n```\n\n----------------------------------------\n\nTITLE: A-Frame Component Usage Example\nDESCRIPTION: HTML example showing how to use the log component in a scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-entity log=\"event: anEvent; message: Hello, Metaverse!\"></a-entity>\n</a-scene>\n```\n\n----------------------------------------\n\nTITLE: Implementing Oculus Go 3DoF Controls in HTML\nDESCRIPTION: Demonstrates how to add a basic 3DoF controller for Oculus Go using the oculus-go-controls component. This provides rotational tracking and default model matching the hardware.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a-entity oculus-go-controls></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Styling Device Orientation Permission Dialog Buttons in CSS\nDESCRIPTION: CSS customization for the permission dialog buttons, allowing color customization for allow, deny, and ok buttons.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/device-orientation-permission-ui.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.a-dialog-allow-button {\n  background-color: red;\n}\n\n.a-dialog-deny-button {\n  background-color: blue;\n}\n\n.a-dialog-ok-button {\n   background-color: green;\n }\n```\n\n----------------------------------------\n\nTITLE: Adding playsinline attribute for mobile video compatibility\nDESCRIPTION: HTML video attribute that enables inline video playback on mobile devices, particularly iOS. This attribute is automatically added to all videos in A-Frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nplaysinline\n```\n\n----------------------------------------\n\nTITLE: Registering Tip Change Event Handler in JavaScript\nDESCRIPTION: JavaScript component implementation for handling pen tip change events with event listener and logging functionality.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/logitech-mx-ink-controls.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('tip-logging',{\n  init: function () {\n    this.el.addEventListener('tipchanged', this.tipChanged);\n  },\n  tipChanged: function (evt) {\n    console.log(\"Pen tip changed\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Visible Component Data in A-Frame DOM with Debug Enabled\nDESCRIPTION: Example showing how A-Frame entities appear in the DOM when the debug component is enabled. Component values are serialized to the DOM, making them visible for debugging purposes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/debug.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: box\" material=\"color: red\" position=\"1 2 3\" rotation=\"0 180 0\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Injecting A-Frame Inspector with Keyboard Shortcut\nDESCRIPTION: Keyboard shortcut to inject the A-Frame Inspector tool for debugging and scene manipulation.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n<ctrl> + <alt> + i\n```\n\n----------------------------------------\n\nTITLE: Keyboard Event Listener\nDESCRIPTION: JavaScript code snippet showing how to add keyboard event handling for testing actions.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/visual-inspector-and-dev-tools.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('keydown', function (evt) { // ... });\n```\n\n----------------------------------------\n\nTITLE: Listening for Child Element Attachment in A-Frame (JavaScript)\nDESCRIPTION: Shows how to use the child-attached event to listen for when a specific type of entity (in this case, an a-box) is attached to the scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/entity.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nentity.addEventListener('child-attached', function (evt) {\n  if (evt.detail.el.tagName.toLowerCase() === 'a-box') {\n    console.log('a box element has been attached');\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Box Mesh Component in A-Frame\nDESCRIPTION: This snippet demonstrates how to handle the removal of the box mesh component. It removes the mesh from the scene using the remove handler.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/writing-a-component.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nAFRAME.registerComponent('box', {\n  // ...\n\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding HTC Vive 6DoF Controllers in HTML\nDESCRIPTION: Shows implementation of HTC Vive controllers for both hands using vive-controls component. Provides full 6DoF tracking with position and rotation.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a-entity vive-controls=\"hand: left\"></a-entity>\n<a-entity vive-controls=\"hand: right\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Manually Serializing A-Frame Component Data to DOM\nDESCRIPTION: Example showing how to manually serialize component data to the DOM using JavaScript. This demonstrates both component-level and entity-level flushing methods.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/debug.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndocument.querySelector('a-entity').components.position.flushToDOM();  // Flush a component.\ndocument.querySelector('a-entity').flushToDOM();  // Flush an entity.\ndocument.querySelector('a-entity').flushToDOM(true);  // Flush an entity and its children.\ndocument.querySelector('a-scene').flushToDOM(true);  // Flush every entity.\n```\n\n----------------------------------------\n\nTITLE: Adding Motion Capture Script to HTML\nDESCRIPTION: Script tag for including the A-Frame motion capture components library.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/visual-inspector-and-dev-tools.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/aframe-motion-capture-components/dist/aframe-motion-capture-components.min.js\">\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Color Component in JavaScript\nDESCRIPTION: Basic structure for registering an A-Frame component that will set random colors. Shows the initial setup with the init lifecycle handler.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-minecraft-demo.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('random-color', {\n  init: function () {\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Scene Entity Destroy Method\nDESCRIPTION: Code for entity destruction that preserves component data and returns memory to pool. Used when detaching entities from scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nEntity.destroy()\n```\n\n----------------------------------------\n\nTITLE: Creating ngrok Bash Alias\nDESCRIPTION: Bash alias definition for simplifying ngrok usage with a custom subdomain.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/visual-inspector-and-dev-tools.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nalias ngrok=\"~/path/to/ngrok http --subdomain=abc\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Tip Change Event Handling in HTML\nDESCRIPTION: HTML setup for logging pen tip changes using a custom component.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/logitech-mx-ink-controls.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity logiteck-mx-ink-controls=\"hand: left\" tip-logging></a-entity>\n<a-entity logiteck-mx-ink-controls=\"hand: right\" tip-logging></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Adding Stats Component to A-Frame Scene\nDESCRIPTION: This snippet demonstrates how to add the stats component to an A-Frame scene. The stats component is applied to the <a-scene> element to display performance metrics.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/stats.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene stats></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Multiple Component Instance Handling\nDESCRIPTION: Example of handling multiple component instances using this.id and this.attrName in component methods.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('foo', {\n  multiple: true,\n\n  update: function () {\n    console.log('This component instance has the ID', this.id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing A-Frame Loader Title Bar Style with CSS\nDESCRIPTION: CSS snippet for customizing the appearance of the A-Frame loader title bar. This example changes the text color of the loading screen title to red by targeting the .a-loader-title CSS class.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/loading-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n .a-loader-title {\n   color: red;\n }\n```\n\n----------------------------------------\n\nTITLE: Styling an Example Embedded Scene Container\nDESCRIPTION: CSS styling for the example embedded scene container. Sets the width to 100% and height to 200px for the demonstration scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/embedded.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#myEmbeddedScene {\n  width:100%;\n  height:200px;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying WebXR Browser Support with Embedded iframe\nDESCRIPTION: This code snippet embeds an iframe from caniuse.com to show up-to-date browser support for WebXR. It provides a visual representation of WebXR compatibility across different browsers.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/vr-headsets-and-webxr-browsers.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://caniuse.com/#search=webxr\" height=\"480px\" width=\"100%\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Complete Test Suite Structure Example\nDESCRIPTION: Example showing the complete structure of a test suite including setup hooks and both synchronous and asynchronous test cases\nSOURCE: https://github.com/aframevr/aframe/blob/master/tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsuite('module/component/custom element', function () {\n  /**\n   * `setup` hook is run before every test.\n   */\n  setup(function (done) {\n    done();  // If asynchrony is involved, use `done` to tell when finished.\n  });\n\n  suite('method/feature', function () [\n    /**\n     * A synchronous test case. No need to specify `done`.\n     */\n    test('does this', function () {\n      assert.equal(1, 1);\n    });\n\n    /**\n     * An asynchronous test case.\n     */\n    test('does that', function (done) {\n      setTimeout(function () {\n        assert.notEqual(1, 2);\n        done();  // Use `done` to tell when finished in asynchronous test.\n      });\n    });\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Component in A-Frame Scene\nDESCRIPTION: Example showing how to enable the debug component on an A-Frame scene. When attached, this component enables component-to-DOM serialization for debugging purposes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/debug.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene debug></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous A-Frame Initialization\nDESCRIPTION: Shows how to load A-Frame asynchronously using the AFRAME_ASYNC flag, allowing for delayed initialization and component registration.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/faq.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.AFRAME_ASYNC = true;\nawait import('aframe');\n\n// Asynchronously register components/systems\n\nwindow.AFRAME.ready();\n```\n\n----------------------------------------\n\nTITLE: Updating Visible Component in A-Frame\nDESCRIPTION: Example of an update method for a visible component in A-Frame. It sets the visibility of the entity based on the component's data.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/component.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerComponent('visible', {\n  /**\n   * this.el is the entity element.\n   * this.el.object3D is the three.js object of the entity.\n   * this.data is the component's property or properties.\n   */\n  update: function (oldData) {\n    this.el.object3D.visible = this.data;\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Stringifying objects to CSS-like styles with AFRAME.utils.styleParser.stringify\nDESCRIPTION: Demonstrates converting a JavaScript object into a CSS-style string format.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.utils.styleParser.stringify({height: 10, width: 5})\n// >> \"height: 10; width: 5\"\n```\n\n----------------------------------------\n\nTITLE: Asset Property Type Example\nDESCRIPTION: Example of using asset property type with video element selector.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngetAttribute('component', property)\n```\n\n----------------------------------------\n\nTITLE: Throttle Utils Example\nDESCRIPTION: Example of new throttle utility functions added.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.utils.throttleTick\nAFRAME.utils.throttle\n```\n\n----------------------------------------\n\nTITLE: Including Environment Component in A-Frame\nDESCRIPTION: The HTML head section showing how to include both the A-Frame library and the Environment Component extension, which allows for procedurally generated environments.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/guides/building-a-basic-scene.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n  <script src=\"https://unpkg.com/aframe-environment-component@1.5.x/dist/aframe-environment-component.min.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Accessing FileLoader and Cache in A-Frame JavaScript\nDESCRIPTION: These JavaScript snippets demonstrate how to access the three.js FileLoader and the cache that stores XHR responses in A-Frame.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/asset-management-system.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(document.querySelector('a-assets').fileLoader);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(THREE.Cache);\n```\n\n----------------------------------------\n\nTITLE: Hidden Component Data in Default A-Frame DOM\nDESCRIPTION: Example showing how A-Frame entities appear in the DOM by default without debug enabled. Component names appear but values are not serialized to the DOM for performance reasons.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/debug.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry material position rotation></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for Click Event in JavaScript\nDESCRIPTION: Demonstrates how to add a click event listener to a DOM element using vanilla JavaScript. This is provided as a comparison to A-Frame's event system.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/interactions-and-controllers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('p').addEventListener('click', function (evt) {\n  console.log('This 2D element was clicked!');\n});\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Configuration for OBB Collider\nDESCRIPTION: Configuration to enable visual debugging of colliders by setting showColliders property to true on the scene element. This renders the colliders visually for debugging purposes.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/obb-collider.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-scene obb-collider=\"showColliders: true\"></a-scene>\n```\n\n----------------------------------------\n\nTITLE: Component Event Handler Definition\nDESCRIPTION: API for defining event handlers that automatically attach and detach based on entity lifecycle.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nComponent.events\n```\n\n----------------------------------------\n\nTITLE: Running Browser-Specific Tests\nDESCRIPTION: Commands for running tests in specific browsers like Chrome and Firefox\nSOURCE: https://github.com/aframevr/aframe/blob/master/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:chrome\nTEST_FILE=scene npm run test:firefox\n```\n\n----------------------------------------\n\nTITLE: Incorrect A-Frame Code Structure Example\nDESCRIPTION: This snippet demonstrates an incorrect way to structure A-Frame code, placing JavaScript outside of components.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-scene>\n  <a-box></a-box>\n  <!-- ... -->\n</a-scene>\n\n<script>\n  // My JavaScript code here!\n  // ... NO!\n</script>\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok with Custom Subdomain\nDESCRIPTION: Command to start ngrok with a reserved subdomain for consistent URL access to local development server.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/visual-inspector-and-dev-tools.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./ngrok http --subdomain=abc 8080\n```\n\n----------------------------------------\n\nTITLE: Finding object differences with AFRAME.utils.diff\nDESCRIPTION: Demonstrates how to get the differences between two objects, returning an object with the changed values.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/utils.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndiff({a: 1, b: 2, c: 3}, {b: 2, c: 4})\n// >> {\"a\": undefined, \"c\": 4}\n```\n\n----------------------------------------\n\nTITLE: Utils Namespace Example\nDESCRIPTION: Example showing the new device utilities namespace structure.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.utils.device.isMobile\nAFRAME.utils.device.isGearVR\nAFRAME.utils.device.checkHeadsetConnected\nAFRAME.utils.device.isIOS\n```\n\n----------------------------------------\n\nTITLE: Raycaster Intersection Getter\nDESCRIPTION: Method to retrieve intersection data from raycaster components.\nSOURCE: https://github.com/aframevr/aframe/blob/master/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nel.components.raycaster.getIntersection(el)\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin for A-Frame\nDESCRIPTION: Command to install the required Cordova plugin for handling local file XHR requests.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncordova plugin add cordova-plugin-xhr-local-file\n```\n\n----------------------------------------\n\nTITLE: Using Test Suite Filters in Mocha\nDESCRIPTION: Examples of using .only to run specific test suites or test cases in Mocha\nSOURCE: https://github.com/aframevr/aframe/blob/master/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// To run just this suite, change:\nsuite('lorum ipsum', function () { // ... });\n// to...\nsuite.only('lorum ipsum', function () { // ... });\n\n// To run just this test, change:\ntest('lorem ipsum', function () { // ... });\n// to...\ntest.only('lorem ipsum', function () { // ... });\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Files with Environment Variables\nDESCRIPTION: Example of running tests for specific files using TEST_FILE environment variable\nSOURCE: https://github.com/aframevr/aframe/blob/master/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTEST_FILE=geometry npm run test\n```\n\n----------------------------------------\n\nTITLE: Managing Component Subscriptions in A-Frame Systems\nDESCRIPTION: This code demonstrates a common pattern for systems to manage and keep track of all their associated components by having components subscribe to the system.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/core/systems.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nAFRAME.registerSystem('my-component', {\n  init: function () {\n    this.entities = [];\n  },\n\n  registerMe: function (el) {\n    this.entities.push(el);\n  },\n\n  unregisterMe: function (el) {\n    var index = this.entities.indexOf(el);\n    this.entities.splice(index, 1);\n  }\n});\n\nAFRAME.registerComponent('my-component', {\n  init: function () {\n    this.system.registerMe(this.el);\n  },\n\n  remove: function () {\n    this.system.unregisterMe(this.el);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including A-Frame and a Community Component in HTML\nDESCRIPTION: Demonstrates how to include the A-Frame library and a community component (particle system) in an HTML file. This setup allows the use of A-Frame and the particle system component in the scene.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/entity-component-system.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"https://aframe.io/releases/1.7.1/aframe.min.js\"></script>\n    <script src=\"https://unpkg.com/@c-frame/aframe-particle-system-component@1.2.x/dist/aframe-particle-system-component.min.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing A-Frame via npm\nDESCRIPTION: This code snippet demonstrates how to install A-Frame using npm and import it in a JavaScript file, typically used with bundlers like Webpack or Vite.\nSOURCE: https://github.com/aframevr/aframe/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save aframe\n# Or yarn add aframe\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AFRAME from 'aframe';  // e.g., with Webpack or Vite.\n```\n\n----------------------------------------\n\nTITLE: Creating a Tube Geometry in A-Frame HTML\nDESCRIPTION: This snippet shows how to create a tube geometry by making a cylinder open-ended and using a double-sided material for proper rendering.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/components/geometry.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-entity geometry=\"primitive: cylinder; openEnded: true\" material=\"side: double\"></a-entity>\n```\n\n----------------------------------------\n\nTITLE: Accessing the three.js API in A-Frame\nDESCRIPTION: Demonstrates how to access the global THREE object which provides the full three.js API within an A-Frame project.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/developing-with-threejs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(THREE);\n```\n\n----------------------------------------\n\nTITLE: Using ngrok Alias\nDESCRIPTION: Simplified command to start ngrok using the defined bash alias.\nSOURCE: https://github.com/aframevr/aframe/blob/master/docs/introduction/visual-inspector-and-dev-tools.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nngrok 8080\n```"
  }
]