[
  {
    "owner": "jetbrains",
    "repo": "kotlin-multiplatform-dev-docs",
    "content": "TITLE: Defining a Common Interface\nDESCRIPTION: Interface defined in the common source set that can have different implementations for each platform. This approach is useful for encapsulating more complex platform-specific logic.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the commonMain source set:\ninterface Platform {\n    val name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Function with Interface Return Type\nDESCRIPTION: Declaration of an expected function that returns a common interface in the common source set. This approach combines interfaces with expected/actual declarations to provide platform-specific implementations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the commonMain source set:\ninterface Platform\n\nexpect fun platform(): Platform\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App UI with Compose Multiplatform\nDESCRIPTION: Defines the main App composable function that creates a basic UI with a button, image, and text using Material Theme. The UI includes state management with remember and mutableStateOf, along with animation using AnimatedVisibility.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-create-first-app.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        var showContent by remember { mutableStateOf(false) }\n        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n            Button(onClick = { showContent = !showContent }) {\n                Text(\"Click me!\")\n            }\n            AnimatedVisibility(showContent) {\n                val greeting = remember { Greeting().greet() }\n                Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n                    Image(painterResource(Res.drawable.compose_multiplatform), null)\n                    Text(\"Compose: $greeting\")\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for common tests in Kotlin Multiplatform\nDESCRIPTION: Gradle configuration to set up the commonTest source set with kotlin.test dependencies for multiplatform testing.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nsourceSets {\n    //...\n    commonTest.dependencies {\n        implementation(libs.kotlin.test)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing App Composable Function in Compose Multiplatform\nDESCRIPTION: The main App() composable function that implements the common UI for all platforms. It includes MaterialTheme styling, layout components like Column and Button, and demonstrates state management using remember and mutableStateOf.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-explore-composables.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        var showContent by remember { mutableStateOf(false) }\n        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n            Button(onClick = { showContent = !showContent }) {\n                Text(\"Click me!\")\n            }\n            AnimatedVisibility(showContent) {\n                val greeting = remember { Greeting().greet() }\n                Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n                    Image(painterResource(Res.drawable.compose_multiplatform), null)\n                    Text(\"Compose: $greeting\")\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SpaceXSDK Class for Database and API Interaction in Kotlin\nDESCRIPTION: Implements a SpaceXSDK class that serves as a facade for the Database and SpaceXApi classes. It manages the creation of a Database instance using a provided DatabaseDriverFactory.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial\n\nimport com.jetbrains.spacetutorial.cache.Database\nimport com.jetbrains.spacetutorial.cache.DatabaseDriverFactory\nimport com.jetbrains.spacetutorial.network.SpaceXApi\n\nclass SpaceXSDK(databaseDriverFactory: DatabaseDriverFactory, val api: SpaceXApi) { \n    private val database = Database(databaseDriverFactory)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Platform Interface in Kotlin Multiplatform\nDESCRIPTION: Defines a common Platform interface in the commonMain module that will be implemented differently for each platform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Platform {\n    val name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to configure SQLDelight in the build.gradle.kts file. It sets up a database named 'AppDatabase' with a specified package name for generated Kotlin sources.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n    databases {\n        create(\"AppDatabase\") {\n            packageName.set(\"com.jetbrains.spacetutorial.cache\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform Interface for Android\nDESCRIPTION: Android-specific implementation of the Platform interface that uses Android SDK to provide device information. This demonstrates accessing Android-specific APIs from Kotlin Multiplatform code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the androidMain source set:\nimport android.os.Build\n\nclass AndroidPlatform : Platform {\n    override val name: String = \"Android ${Build.VERSION.SDK_INT}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Compose Multiplatform App with Dropdown Menu\nDESCRIPTION: This snippet shows how to refactor the app to use a dropdown menu for country selection instead of text input. It introduces a Country data class, a list of predefined countries, and updates the App composable to use a DropdownMenu.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Country(val name: String, val zone: TimeZone)\n\nfun currentTimeAt(location: String, zone: TimeZone): String {\n    fun LocalTime.formatted() = \"$hour:$minute:$second\"\n\n    val time = Clock.System.now()\n    val localTime = time.toLocalDateTime(zone).time\n\n    return \"The time in $location is ${localTime.formatted()}\"\n}\n\nfun countries() = listOf(\n    Country(\"Japan\", TimeZone.of(\"Asia/Tokyo\")),\n    Country(\"France\", TimeZone.of(\"Europe/Paris\")),\n    Country(\"Mexico\", TimeZone.of(\"America/Mexico_City\")),\n    Country(\"Indonesia\", TimeZone.of(\"Asia/Jakarta\")),\n    Country(\"Egypt\", TimeZone.of(\"Africa/Cairo\")),\n)\n\n@Composable\n@Preview\nfun App(countries: List<Country> = countries()) {\n    MaterialTheme {\n        var showCountries by remember { mutableStateOf(false) }\n        var timeAtLocation by remember { mutableStateOf(\"No location selected\") }\n\n        Column(modifier = Modifier.padding(20.dp)) {\n            Text(\n                timeAtLocation,\n                style = TextStyle(fontSize = 20.sp),\n                textAlign = TextAlign.Center,\n                modifier = Modifier.fillMaxWidth().align(Alignment.CenterHorizontally)\n            )\n            Row(modifier = Modifier.padding(start = 20.dp, top = 10.dp)) {\n                DropdownMenu(\n                    expanded = showCountries,\n                    onDismissRequest = { showCountries = false }\n                ) {\n                    countries().forEach { (name, zone) ->\n                        DropdownMenuItem(\n                            onClick = {\n                                timeAtLocation = currentTimeAt(name, zone)\n                                showCountries = false\n                            }\n                        ) {\n                            Text(name)\n                        }\n                    }\n                }\n            }\n\n            Button(modifier = Modifier.padding(start = 20.dp, top = 10.dp),\n                onClick = { showCountries = !showCountries }) {\n                Text(\"Select Location\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit testing the grep function in Kotlin Multiplatform\nDESCRIPTION: Test class for the grep function using kotlin.test library with platform-agnostic annotations and assertions. Tests if the function correctly filters text based on a regex pattern.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.test.Test\nimport kotlin.test.assertContains\nimport kotlin.test.assertEquals\n\nclass GrepTest {\n    companion object {\n        val sampleData = listOf(\n            \"123 abc\",\n            \"abc 123\",\n            \"123 ABC\",\n            \"ABC 123\"\n        )\n    }\n\n    @Test\n    fun shouldFindMatches() {\n        val results = mutableListOf<String>()\n        grep(sampleData, \"[a-z]+\") {\n            results.add(it)\n        }\n\n        assertEquals(2, results.size)\n        for (result in results) {\n            assertContains(result, \"abc\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Passing Arguments to Destinations in Kotlin\nDESCRIPTION: This example illustrates how to define routes with parameters and pass arguments when navigating to a destination in Compose Multiplatform. It shows the use of data classes for structured navigation.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class Profile(val name: String)\n\nButton(onClick = { navController.navigate(Profile(\"Alice\")) }) {\n    Text(\"Go to profile\")\n}\n\ncomposable<Profile> { backStackEntry ->\n    val profile: Profile = backStackEntry.toRoute()\n    \n    // Use `profile.name` wherever a user's name is needed\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Drag Source in Compose Multiplatform\nDESCRIPTION: This snippet demonstrates how to create a Box composable that allows users to drag a string from it. It uses the dragAndDropSource modifier and detectDragGestures function to enable dragging behavior, with a visual representation of the dragged content.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-drag-drop.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exportedText = \"Hello, drag and drop!\"\n\nBox(Modifier\n    .dragAndDropSource(\n        // Creates a visual representation of the data being dragged\n        // (white rectangle with the exportedText string centered on it).\n        drawDragDecoration = {\n            drawRect(\n                color = Color.White, \n                topLeft = Offset(x = 0f, y = size.height/4),\n                size = Size(size.width, size.height/2)\n            )\n            val textLayoutResult = textMeasurer.measure(\n                text = AnnotatedString(exportedText),\n                layoutDirection = layoutDirection,\n                density = this\n            )\n            drawText(\n                textLayoutResult = textLayoutResult,\n                topLeft = Offset(\n                    x = (size.width - textLayoutResult.size.width) / 2,\n                    y = (size.height - textLayoutResult.size.height) / 2,\n                )\n            )\n        }\n    ) {\n        detectDragGestures(\n            onDragStart = { offset ->\n                startTransfer(\n                    // Defines transferable data and supported transfer actions.\n                    // When an action is concluded, prints the result into\n                    // system output with onTransferCompleted().    \n                    DragAndDropTransferData(\n                        transferable = DragAndDropTransferable(\n                            StringSelection(exportedText)\n                        ),\n\n                        // List of actions supported by this drag source. A type of action\n                        // is passed to the drop target together with data.\n                        // The target can use this to reject an inappropriate drop operation\n                        // or to interpret user expectations.\n                        supportedActions = listOf(\n                            DragAndDropTransferAction.Copy,\n                            DragAndDropTransferAction.Move,\n                            DragAndDropTransferAction.Link,\n                        ),\n                        dragDecorationOffset = offset,\n                        onTransferCompleted = { action -> \n                            println(\"Action at the source: $action\")\n                        }\n                    )\n                )\n            },\n            onDrag = { _, _ -> },\n        )\n    }\n    .size(200.dp)\n    .background(Color.LightGray)\n) {\n    Text(\"Drag Me\", Modifier.align(Alignment.Center))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Class with Caching Logic (Kotlin)\nDESCRIPTION: This snippet defines a Database class that wraps the AppDatabase interface and implements caching logic for rocket launches. It includes methods for retrieving all launches and clearing/inserting new launch data.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial.cache\n\nimport com.jetbrains.spacetutorial.entity.Links\nimport com.jetbrains.spacetutorial.entity.Patch\nimport com.jetbrains.spacetutorial.entity.RocketLaunch\n\ninternal class Database(databaseDriverFactory: DatabaseDriverFactory) {\n    private val database = AppDatabase(databaseDriverFactory.createDriver())\n    private val dbQuery = database.appDatabaseQueries\n\n    internal fun getAllLaunches(): List<RocketLaunch> {\n        return dbQuery.selectAllLaunchesInfo(::mapLaunchSelecting).executeAsList()\n    }\n\n    private fun mapLaunchSelecting(\n        flightNumber: Long,\n        missionName: String,\n        details: String?,\n        launchSuccess: Boolean?,\n        launchDateUTC: String,\n        patchUrlSmall: String?,\n        patchUrlLarge: String?,\n        articleUrl: String?\n    ): RocketLaunch {\n        return RocketLaunch(\n            flightNumber = flightNumber.toInt(),\n            missionName = missionName,\n            details = details,\n            launchDateUTC = launchDateUTC,\n            launchSuccess = launchSuccess,\n            links = Links(\n                patch = Patch(\n                    small = patchUrlSmall,\n                    large = patchUrlLarge\n                ),\n                article = articleUrl\n            )\n        )\n    }\n\n    internal fun clearAndCreateLaunches(launches: List<RocketLaunch>) {\n        dbQuery.transaction {\n            dbQuery.removeAllLaunches()\n            launches.forEach { launch ->\n                dbQuery.insertLaunch(\n                    flightNumber = launch.flightNumber.toLong(),\n                    missionName = launch.missionName,\n                    details = launch.details,\n                    launchSuccess = launch.launchSuccess ?: false,\n                    launchDateUTC = launch.launchDateUTC,\n                    patchUrlSmall = launch.links.patch?.small,\n                    patchUrlLarge = launch.links.patch?.large,\n                    articleUrl = launch.links.article\n                )\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Platform Factory Function Declaration\nDESCRIPTION: Declares an expected platform factory function in the common module.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect fun getPlatform(): Platform\n```\n\n----------------------------------------\n\nTITLE: Implementing ComposePanel in a Swing Application\nDESCRIPTION: A complete example showing how to add Compose Multiplatform UI to a Swing application using ComposePanel. The code creates a Swing window with ComposePanel in the center and Swing buttons in other positions, demonstrating communication between Swing and Compose components using MutableState.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-swing-interoperability.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.Button\nimport androidx.compose.material.Surface\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.MutableState\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.awt.ComposePanel\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport java.awt.BorderLayout\nimport java.awt.Dimension\nimport javax.swing.JButton\nimport javax.swing.JFrame\nimport javax.swing.SwingUtilities\nimport javax.swing.WindowConstants\n\nval northClicks = mutableStateOf(0)\nval westClicks = mutableStateOf(0)\nval eastClicks = mutableStateOf(0)\n\nfun main() = SwingUtilities.invokeLater {\n    val window = JFrame()\n\n    // Creates ComposePanel\n    val composePanel = ComposePanel()\n    window.defaultCloseOperation = WindowConstants.EXIT_ON_CLOSE\n    window.title = \"SwingComposeWindow\"\n\n    window.contentPane.add(actionButton(\"NORTH\", action = { northClicks.value++ }), BorderLayout.NORTH)\n    window.contentPane.add(actionButton(\"WEST\", action = { westClicks.value++ }), BorderLayout.WEST)\n    window.contentPane.add(actionButton(\"EAST\", action = { eastClicks.value++ }), BorderLayout.EAST)\n    window.contentPane.add(\n        actionButton(\n            text = \"SOUTH/REMOVE COMPOSE\",\n            action = {\n                window.contentPane.remove(composePanel)\n            }\n        ),\n        BorderLayout.SOUTH\n    )\n\n    // Adds ComposePanel to JFrame\n    window.contentPane.add(composePanel, BorderLayout.CENTER)\n\n    // Sets the content\n    composePanel.setContent {\n        ComposeContent()\n    }\n\n    window.setSize(800, 600)\n    window.isVisible = true\n}\n\nfun actionButton(text: String, action: () -> Unit): JButton {\n    val button = JButton(text)\n    button.toolTipText = \"Tooltip for $text button.\"\n    button.preferredSize = Dimension(100, 100)\n    button.addActionListener { action() }\n    return button\n}\n\n@Composable\nfun ComposeContent() {\n    Box(\n        modifier = Modifier.fillMaxSize(),\n        contentAlignment = Alignment.Center\n    ) {\n        Row {\n            Counter(\"West\", westClicks)\n            Spacer(modifier = Modifier.width(25.dp))\n            Counter(\"North\", northClicks)\n            Spacer(modifier = Modifier.width(25.dp))\n            Counter(\"East\", eastClicks)\n        }\n    }\n}\n\n@Composable\nfun Counter(text: String, counter: MutableState<Int>) {\n    Surface(\n        modifier = Modifier.size(130.dp, 130.dp),\n        color = Color(180, 180, 180),\n        shape = RoundedCornerShape(4.dp)\n    ) {\n        Column {\n            Box(\n                modifier = Modifier.height(30.dp).fillMaxWidth(),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(text = \"${text}Clicks: ${counter.value}\")\n            }\n            Spacer(modifier = Modifier.height(25.dp))\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Button(onClick = { counter.value++ }) {\n                    Text(text = text, color = Color.White)\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Compose Multiplatform inside UIKit with UITabBarController\nDESCRIPTION: This code demonstrates how to embed Compose Multiplatform within a UIKit application using UITabBarController. It creates two tabs: one with a Compose Multiplatform view and another with a UIKit view, both wrapped in UINavigationControllers.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-uikit-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet composeViewController = Main_iosKt.ComposeOnly()\ncomposeViewController.title = \"Compose Multiplatform inside UIKit\"\n\nlet anotherViewController = UIKitViewController()\nanotherViewController.title = \"UIKit\"\n\n// Set up the UITabBarController\nlet tabBarController = UITabBarController()\ntabBarController.viewControllers = [\n    // Wrap the created ViewControllers in a UINavigationController to set titles\n    UINavigationController(rootViewController: composeViewController),\n    UINavigationController(rootViewController: anotherViewController)\n]\ntabBarController.tabBar.items?[0].title = \"Compose\"\ntabBarController.tabBar.items?[1].title = \"UIKit\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Compose UI Test with JUnit4\nDESCRIPTION: Example test class demonstrating UI testing with JUnit4 in Compose Multiplatform. Shows how to create test rules, set up test content, and perform assertions on UI components.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-ui-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.test.*\nimport androidx.compose.ui.platform.testTag\nimport androidx.compose.ui.test.junit4.createComposeRule\nimport org.junit.Rule\nimport org.junit.Test\n\nclass ExampleTest {\n    @get:Rule\n    val rule = createComposeRule()\n\n    @Test\n    fun myTest(){\n        // Declares a mock UI to demonstrate API calls\n        //\n        // Replace with your own declarations to test the code in your project\n        rule.setContent {\n            var text by remember { mutableStateOf(\"Hello\") }\n\n            Text(\n                text = text,\n                modifier = Modifier.testTag(\"text\")\n            )\n            Button(\n                onClick = { text = \"Compose\" },\n                modifier = Modifier.testTag(\"button\")\n            ) {\n                Text(\"Click me\")\n            }\n        }\n\n        // Tests the declared UI with assertions and actions of the JUnit-based testing API\n        rule.onNodeWithTag(\"text\").assertTextEquals(\"Hello\")\n        rule.onNodeWithTag(\"button\").performClick()\n        rule.onNodeWithTag(\"text\").assertTextEquals(\"Compose\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform URI Handler Implementation\nDESCRIPTION: Implementation of a singleton class that handles URI storage and listening across different platforms.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ExternalUriHandler {\n    // Storage for when a URI arrives before the listener is set up\n    private var cached: String? = null\n    \n    var listener: ((uri: String) -> Unit)? = null\n        set(value) {\n            field = value\n            if (value != null) {\n                // When a listener is set and `cached` is not empty,\n                // immediately invoke the listener with the cached URI\n                cached?.let { value.invoke(it) }\n                cached = null\n            }\n        }\n\n    // When a new URI arrives, cache it.\n    // If the listener is already set, invoke it and clear the cache immediately.\n    fun onNewUri(uri: String) {\n        cached = uri\n        listener?.let {\n            it.invoke(uri)\n            cached = null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS-specific Module with Koin in Kotlin Multiplatform\nDESCRIPTION: This snippet illustrates the iOS-specific implementation of the platformModule using Koin. It defines an IOSPlatform class and creates a module that provides an instance of this class as the Platform implementation.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the iosMain source set:\nclass IOSPlatform : Platform\n\nactual val platformModule = module {\n    single<Platform> { IOSPlatform() }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Platform Implementation\nDESCRIPTION: Implements the Platform interface for iOS, using UIKit to get device system information.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport platform.UIKit.UIDevice\n\nclass IOSPlatform: Platform {\n    override val name: String =\n        UIDevice.currentDevice.systemName() + \" \" + UIDevice.currentDevice.systemVersion\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an interactive UITextField inside Compose Multiplatform\nDESCRIPTION: This advanced example demonstrates how to embed UIKit's UITextField within Compose Multiplatform with two-way data binding. It creates a custom UITextField, sets up an event listener for text changes, and ensures updates in either direction propagate correctly between the UI systems.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-uikit-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalForeignApi::class)\n@Composable\nfun UseUITextField(modifier: Modifier = Modifier) {\n    var message by remember { mutableStateOf(\"Hello, World!\") }\n    UIKitView(\n        factory = {\n            val textField = object : UITextField(CGRectMake(0.0, 0.0, 0.0, 0.0)) {\n                @ObjCAction\n                fun editingChanged() {\n                    message = text ?: \"\"\n                }\n            }\n            textField.addTarget(\n                target = textField,\n                action = NSSelectorFromString(textField::editingChanged.name),\n                forControlEvents = UIControlEventEditingChanged\n            )\n            textField\n        },\n        modifier = modifier.fillMaxWidth().height(30.dp),\n        update = { textField ->\n            textField.text = message\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Publishing to Maven Central (YAML)\nDESCRIPTION: Defines a GitHub Actions workflow that automatically builds and publishes the library to Maven Central when a new release is created. It uses the secrets stored in the repository for authentication and signing.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish\non:\n  release:\n    types: [released, prereleased]\njobs:\n  publish:\n    name: Release build and publish\n    runs-on: macOS-latest\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v4\n      - name: Set up JDK 21\n        uses: actions/setup-java@v4\n        with:\n          distribution: 'zulu'\n          java-version: 21\n      - name: Publish to MavenCentral\n        run: ./gradlew publishToMavenCentral --no-configuration-cache\n        env:\n          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}\n          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}\n          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.SIGNING_KEY_ID }}\n          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}\n          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_KEY_CONTENTS }}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Compose UI to Display Flow Data\nDESCRIPTION: Updates the Android Compose UI to use the ViewModel and display the list of greetings from the Flow. It uses collectAsStateWithLifecycle for lifecycle-aware state collection.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.runtime.getValue\nimport androidx.lifecycle.viewmodel.compose.viewModel\n\n@Composable\nfun App(mainViewModel: MainViewModel = viewModel()) {\n    MaterialTheme {\n        val greetings by mainViewModel.greetingList.collectAsStateWithLifecycle()\n\n        Column(\n            modifier = Modifier.padding(all = 20.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp),\n        ) {\n            greetings.forEach { greeting ->\n                Text(greeting)\n                Divider()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Menu Bar in Compose Multiplatform Desktop\nDESCRIPTION: This code snippet shows how to implement a custom menu bar for a desktop application using Compose Multiplatform. It includes menus with items, checkboxes, separators, and demonstrates how to handle menu actions and keyboard shortcuts.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-components.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.input.key.Key\nimport androidx.compose.ui.input.key.KeyShortcut\nimport androidx.compose.ui.window.MenuBar\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() = application {\n    var action by remember { mutableStateOf(\"Last action: None\") }\n    var isOpen by remember { mutableStateOf(true) }\n\n    if (isOpen) {\n        var isSubmenuShowing by remember { mutableStateOf(false) }\n\n        Window(onCloseRequest = { isOpen = false }) {\n            MenuBar {\n                Menu(\"File\", mnemonic = 'F') {\n                    Item(\"Copy\", onClick = { action = \"Last action: Copy\" }, shortcut = KeyShortcut(Key.C, ctrl = true))\n                    Item(\n                        \"Paste\",\n                        onClick = { action = \"Last action: Paste\" },\n                        shortcut = KeyShortcut(Key.V, ctrl = true)\n                    )\n                }\n                Menu(\"Actions\", mnemonic = 'A') {\n                    CheckboxItem(\n                        \"Advanced settings\",\n                        checked = isSubmenuShowing,\n                        onCheckedChange = {\n                            isSubmenuShowing = !isSubmenuShowing\n                        }\n                    )\n                    if (isSubmenuShowing) {\n                        Menu(\"Settings\") {\n                            Item(\"Setting 1\", onClick = { action = \"Last action: Setting 1\" })\n                            Item(\"Setting 2\", onClick = { action = \"Last action: Setting 2\" })\n                        }\n                    }\n                    Separator()\n                    Item(\"About\", icon = AboutIcon, onClick = { action = \"Last action: About\" })\n                    Item(\"Exit\", onClick = { isOpen = false }, shortcut = KeyShortcut(Key.Escape), mnemonic = 'E')\n                }\n            }\n\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(text = action)\n            }\n        }\n    }\n}\n\nobject AboutIcon : Painter() {\n    override val intrinsicSize = Size(256f, 256f)\n\n    override fun DrawScope.onDraw() {\n        drawOval(Color(0xFFFFA500))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SwiftUI View Controller Wrapper Implementation\nDESCRIPTION: Shows how to create a SwiftUI structure that wraps a UIViewController containing Compose Multiplatform content. This enables using Compose content within SwiftUI views.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-swiftui-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct ComposeViewController: UIViewControllerRepresentable {\n    func makeUIViewController(context: Context) -> UIViewController {\n        return Main_iosKt.MainViewController()\n    }\n\n    func updateUIViewController(_ uiViewController: UIViewController, context: Context) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Graph with Serializable Routes in Kotlin\nDESCRIPTION: Defines a navigation graph with serializable route classes and composable screens. Includes a start screen with navigation buttons to other screens using typed parameters.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-routing.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable data object StartScreen\n@Serializable data class Id(val id: Long)\n@Serializable data class Patient(val name: String, val age: Long)\n\n@Composable\ninternal fun App(\n    navController: NavHostController = rememberNavController()\n) = AppTheme {\n\n    NavHost(\n        navController = navController,\n        startDestination = StartScreen\n    ) {\n        composable<StartScreen> {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.Center\n            ) {\n                Text(\"Starting screen\")\n                Button(onClick = { navController.navigate(Id(222)) }) {\n                    Text(\"Pass 222 as a parameter to the ID screen\")\n                }\n                Button(onClick = { navController.navigate(Patient( \"Jane Smith-Baker\", 33)) }) {\n                    Text(\"Pass 'Jane Smith-Baker' and 33 to the Person screen\")\n                }\n            }\n        }\n        composable<Id> {...}\n        composable<Patient> {...}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android-specific Module with Koin in Kotlin Multiplatform\nDESCRIPTION: This code shows the Android-specific implementation of the platformModule using Koin. It defines an AndroidPlatform class and creates a module that provides an instance of this class as the Platform implementation.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the androidMain source set:\nclass AndroidPlatform : Platform\n\nactual val platformModule: Module = module {\n    single<Platform> {\n        AndroidPlatform()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Compose Desktop Testing\nDESCRIPTION: Gradle configuration to add necessary dependencies for desktop UI testing with JUnit4 in a Compose Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-ui-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin { \n    //...\n    sourceSets { \n        //...\n        val desktopTest by getting { \n            dependencies {\n                implementation(compose.desktop.uiTestJUnit4)\n                implementation(compose.desktop.currentOs)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing NavHost Transitions in Kotlin Compose Navigation\nDESCRIPTION: Example showing how to customize navigation transitions by explicitly specifying enter and exit animations. When custom transitions are specified, they override the default native-like animations on iOS.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nNavHost(\n    navController = navController,\n    startDestination = Profile,\n    // Explicitly specifying transitions turns off default animations\n    // in favor of the selected ones \n    enterTransition = { slideInHorizontally() },\n    exitTransition = { slideOutVertically() }\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Vertical and Horizontal Scrollbars in Compose Desktop\nDESCRIPTION: Demonstrates implementation of both vertical and horizontal scrollbars using scroll modifiers. The example shows how to create a scrollable list with synchronized scrollbars, including state management and layout configuration.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-scrollbars.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() = singleWindowApplication(\n    title = \"Scrollbars\",\n    state = WindowState(width = 300.dp, height = 310.dp)\n) {\n    Box(\n        modifier = Modifier.fillMaxSize()\n            .background(color = Color(180, 180, 180))\n            .padding(10.dp)\n    ) {\n        val stateVertical = rememberScrollState(0)\n        val stateHorizontal = rememberScrollState(0)\n\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .verticalScroll(stateVertical)\n                .padding(end = 12.dp, bottom = 12.dp)\n                .horizontalScroll(stateHorizontal)\n        ) {\n            Column {\n                for (item in 0..30) {\n                    TextBox(\"Item #$item\")\n                    if (item < 30) {\n                        Spacer(modifier = Modifier.height(5.dp))\n                    }\n                }\n            }\n        }\n        VerticalScrollbar(\n            modifier = Modifier.align(Alignment.CenterEnd)\n                .fillMaxHeight(),\n            adapter = rememberScrollbarAdapter(stateVertical)\n        )\n        HorizontalScrollbar(\n            modifier = Modifier.align(Alignment.BottomStart)\n                .fillMaxWidth()\n                .padding(end = 12.dp),\n            adapter = rememberScrollbarAdapter(stateHorizontal)\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with Ktor\nDESCRIPTION: Performs an HTTP GET request to the SpaceX API to retrieve a list of rocket launches. Uses the Ktor client and deserializes the response into a list of RocketLaunch objects.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.request.*\nimport io.ktor.client.call.*\n\nprivate suspend fun getDateOfLastSuccessfulLaunch(): String {\n    val rockets: List<RocketLaunch> = httpClient.get(\"https://api.spacexdata.com/v4/launches\").body()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Composable in Kotlin\nDESCRIPTION: Creates the main App composable function with Koin ViewModel integration and pull-to-refresh functionality. Uses Material3 components and handles state management.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial\n\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.pulltorefresh.rememberPullToRefreshState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport org.koin.androidx.compose.koinViewModel\n\n@OptIn(\n    ExperimentalMaterial3Api::class\n)\n@Composable\nfun App() {\n    val viewModel = koinViewModel<RocketLaunchViewModel>()\n    val state by remember { viewModel.state }\n    val pullToRefreshState = rememberPullToRefreshState()\n    if (pullToRefreshState.isRefreshing) {\n        viewModel.loadLaunches()\n        pullToRefreshState.endRefresh()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actual Function for iOS\nDESCRIPTION: iOS-specific implementation of the randomUUID function using the NSUUID class from Foundation. This satisfies the contract defined by the expected declaration in the common code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the iOS source set:\nimport platform.Foundation.NSUUID\n\nactual fun randomUUID(): String = NSUUID().UUIDString()\n```\n\n----------------------------------------\n\nTITLE: Integrating Time Calculation in Compose Multiplatform App UI\nDESCRIPTION: Updates the App composable to use the currentTimeAt function for displaying the time of the entered location.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        var location by remember { mutableStateOf(\"Europe/Paris\") }\n        var timeAtLocation by remember { mutableStateOf(\"No location selected\") }\n\n        Column {\n            Text(timeAtLocation)\n            TextField(value = location, onValueChange = { location = it })\n            Button(onClick = { timeAtLocation = currentTimeAt(location) ?: \"Invalid Location\" }) {\n                Text(\"Show Time At Location\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Calculation Functions in Kotlin Multiplatform\nDESCRIPTION: This code snippet demonstrates how to use the kotlinx-datetime library to calculate the number of days until New Year and create a phrase about it in a Kotlin Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-dependencies.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.datetime.*\n\nfun daysUntilNewYear(): Int {\n    val today = Clock.System.todayIn(TimeZone.currentSystemDefault())\n    val closestNewYear = LocalDate(today.year + 1, 1, 1)\n    return today.daysUntil(closestNewYear)\n}\n\nfun daysPhrase(): String = \"There are only ${daysUntilNewYear()} days left until New Year! 🎆\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Text Support in Compose Multiplatform\nDESCRIPTION: This example showcases a complete application that demonstrates handling bidirectional text in both LTR and RTL layout contexts. It includes a text field component and demonstrates layout direction switching using CompositionLocalProvider.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-rtl.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.ui.unit.dp\nimport org.jetbrains.compose.ui.tooling.preview.Preview\n\n// Arabic text for \"Hello World\"\nprivate val helloWorldArabic = \"مرحبا بالعالم\"\n\n// Bidirectional text\nprivate val bidiText = \"Hello $helloWorldArabic world\"\n\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        LazyColumn(\n            Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            item {\n                CompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Ltr) {\n                    Column(modifier = Modifier.fillMaxWidth()) {\n                        Text(\"Latin and BiDi in LTR\")\n                        TextField(\"Hello world\")\n                        TextField(bidiText)\n                    }\n                }\n            }\n            item {\n                CompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Rtl) {\n                    Column(modifier = Modifier.fillMaxWidth()) {\n                        Text(\"Arabic and BiDi in RTL\")\n                        TextField(helloWorldArabic)\n                        TextField(bidiText)\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wrap function for BasicTextField() to reduce code duplication\n@Composable\ninternal fun TextField(\n    text: String = \"\"\n) {\n    val state = rememberSaveable { mutableStateOf(text) }\n\n    BasicTextField(\n        modifier = Modifier\n            .border(1.dp, Color.LightGray, RoundedCornerShape(8.dp))\n            .padding(8.dp),\n        value = state.value,\n        singleLine = false,\n        onValueChange = { state.value = it },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Focused Component Keyboard Events in Compose Multiplatform\nDESCRIPTION: Demonstrates handling keyboard events in a TextField component using onPreviewKeyEvent modifier. Implements Ctrl+Minus and Ctrl+Equals shortcuts to manipulate text content and maintain a counter.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextField\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.input.key.Key\nimport androidx.compose.ui.input.key.isCtrlPressed\nimport androidx.compose.ui.input.key.key\nimport androidx.compose.ui.input.key.onPreviewKeyEvent\nimport androidx.compose.ui.input.key.type\nimport androidx.compose.ui.input.key.KeyEventType\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication (title = \"Key events\") {\n    MaterialTheme {\n        var consumedText by remember { mutableStateOf(0) }\n        var text by remember { mutableStateOf(\"\") }\n        Column(Modifier.fillMaxSize(), Arrangement.spacedBy(5.dp)) {\n            Text(\"Consumed text: $consumedText\")\n            TextField(\n                value = text,\n                onValueChange = { text = it },\n                modifier = Modifier.onPreviewKeyEvent {\n                    when {\n                        (it.isCtrlPressed && it.key == Key.Minus && it.type == KeyEventType.KeyUp) -> {\n                            consumedText -= text.length\n                            text = \"\"\n                            true\n                        }\n                        (it.isCtrlPressed && it.key == Key.Equals && it.type == KeyEventType.KeyUp) -> {\n                            consumedText += text.length\n                            text = \"\"\n                            true\n                        }\n                        else -> false\n                    }\n                }\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes and Creating NavHost in Kotlin\nDESCRIPTION: This snippet demonstrates how to define routes, create a NavController, and set up a NavHost with a navigation graph in Compose Multiplatform. It shows the basic structure for implementing navigation in an app.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Creates routes\n@Serializable\nobject Profile\n@Serializable\nobject FriendsList\n\n// Creates the NavController\nval navController = rememberNavController()\n\n// Creates the NavHost with the navigation graph consisting of supplied destinations\nNavHost(navController = navController, startDestination = Profile) {\n    composable<Profile> { ProfileScreen( /* ... */ ) }\n    composable<FriendsList> { FriendsListScreen( /* ... */ ) }\n    // You can add more destinations similarly\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Interface in Kotlin Multiplatform\nDESCRIPTION: Creates a Platform interface and an expect function for platform-specific implementations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.jetbrains.simplelogin.shared\n\ninterface Platform {\n    val name: String\n}\n\nexpect fun getPlatform(): Platform\n```\n\n----------------------------------------\n\nTITLE: Enhancing UI Style in Compose Multiplatform App\nDESCRIPTION: Improves the application's appearance by adding padding, adjusting text style, and centering content using Compose Multiplatform modifiers and styling options.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        var location by remember { mutableStateOf(\"Europe/Paris\") }\n        var timeAtLocation by remember { mutableStateOf(\"No location selected\") }\n\n        Column(modifier = Modifier.padding(20.dp)) {\n            Text(\n                timeAtLocation,\n                style = TextStyle(fontSize = 20.sp),\n                textAlign = TextAlign.Center,\n                modifier = Modifier.fillMaxWidth().align(Alignment.CenterHorizontally)\n            )\n            TextField(value = location,\n                modifier = Modifier.padding(top = 10.dp),\n                onValueChange = { location = it })\n            Button(modifier = Modifier.padding(top = 10.dp),\n                onClick = { timeAtLocation = currentTimeAt(location) ?: \"Invalid Location\" }) {\n                Text(\"Show Time\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Model for SpaceX API\nDESCRIPTION: Defines a serializable data class for representing rocket launch data from the SpaceX API. Uses annotations to map JSON field names to more readable property names.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class RocketLaunch (\n    @SerialName(\"flight_number\")\n    val flightNumber: Int,\n    @SerialName(\"name\")\n    val missionName: String,\n    @SerialName(\"date_utc\")\n    val launchDateUTC: String,\n    @SerialName(\"success\")\n    val launchSuccess: Boolean?,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop in Compose Window using Swing in Kotlin\nDESCRIPTION: Demonstrates how to implement drag and drop functionality in a Compose window using Swing interoperability. This example sets up a DropTarget for the window to handle file drop events.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.ui.window.singleWindowApplication\nimport java.awt.datatransfer.DataFlavor\nimport java.awt.dnd.DnDConstants\nimport java.awt.dnd.DropTarget\nimport java.awt.dnd.DropTargetAdapter\nimport java.awt.dnd.DropTargetDropEvent\n\nfun main() = singleWindowApplication {\n    LaunchedEffect(Unit) {\n        window.dropTarget = DropTarget().apply {\n            addDropTargetListener(object : DropTargetAdapter() {\n                override fun drop(event: DropTargetDropEvent) {\n                    event.acceptDrop(DnDConstants.ACTION_COPY)\n                    val fileName = event.transferable.getTransferData(DataFlavor.javaFileListFlavor)\n                    println(fileName)\n                }\n            })\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getLaunches Function in SpaceXSDK for Caching and API Requests in Kotlin\nDESCRIPTION: Adds a getLaunches function to the SpaceXSDK class that manages data retrieval from cache or API. It handles force reloading and updates the cache with new data when necessary.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.jetbrains.spacetutorial.entity.RocketLaunch\n\nclass SpaceXSDK(databaseDriverFactory: DatabaseDriverFactory, val api: SpaceXApi) {\n    // ...\n\n    @Throws(Exception::class)\n    suspend fun getLaunches(forceReload: Boolean): List<RocketLaunch> {\n        val cachedLaunches = database.getAllLaunches()\n        return if (cachedLaunches.isNotEmpty() && !forceReload) {\n            cachedLaunches\n        } else {\n            api.getAllLaunches().also {\n                database.clearAndCreateLaunches(it)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Function in Common Source Set\nDESCRIPTION: Declaration of an expected function in the common source set using the 'expect' keyword without implementation. This creates a contract that must be fulfilled by platform-specific implementations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the common source set:\nexpect fun randomUUID(): String\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Catalog with Dependency Versions in TOML\nDESCRIPTION: Defines the versions of libraries and plugins used in the project, including Coroutines, DateTime, Koin, Ktor, and SQLDelight in the version catalog.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[versions]\nagp = \"8.2.2\"\n...\ncoroutinesVersion = \"%coroutinesVersion%\"\ndateTimeVersion = \"%dateTimeVersion%\"\nkoin = \"%koinVersion%\"\nktor = \"%ktorVersion%\"\nsqlDelight = \"%sqlDelightVersion%\"\nlifecycleViewmodelCompose = \"2.7.0\"\nmaterial3 = \"1.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Platform in Kotlin Multiplatform\nDESCRIPTION: Provides the Android-specific implementation of the Platform interface.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.jetbrains.simplelogin.shared\n\nimport android.os.Build\n\nclass AndroidPlatform : Platform {\n    override val name: String = \"Android ${Build.VERSION.SDK_INT}\"\n}\n\nactual fun getPlatform(): Platform = AndroidPlatform()\n```\n\n----------------------------------------\n\nTITLE: Nested Swing-Compose Layout Implementation\nDESCRIPTION: Complete example demonstrating how to create a complex nested layout combining Swing and Compose Multiplatform components. Includes implementation of a main window with custom styling, interactive components, and nested panels.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-swing-interoperability.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.awt.*\nimport androidx.compose.ui.*\nimport androidx.compose.ui.draw.*\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.window.*\nimport androidx.compose.ui.unit.*\nimport java.awt.BorderLayout\nimport java.awt.Dimension\nimport java.awt.Insets\nimport javax.swing.*\nimport javax.swing.border.EmptyBorder\n\nval Gray = java.awt.Color(64, 64, 64)\nval DarkGray = java.awt.Color(32, 32, 32)\nval LightGray = java.awt.Color(210, 210, 210)\n\ndata class Item(\n    val text: String,\n    val icon: ImageVector,\n    val color: Color,\n    val state: MutableState<Boolean> = mutableStateOf(false)\n)\nval panelItemsList = listOf(\n    Item(text = \"Person\", icon = Icons.Filled.Person, color = Color(10, 232, 162)),\n    Item(text = \"Favorite\", icon = Icons.Filled.Favorite, color = Color(150, 232, 150)),\n    Item(text = \"Search\", icon = Icons.Filled.Search, color = Color(232, 10, 162)),\n    Item(text = \"Settings\", icon = Icons.Filled.Settings, color = Color(232, 162, 10)),\n    Item(text = \"Close\", icon = Icons.Filled.Close, color = Color(232, 100, 100))\n)\nval itemSize = 50.dp\n\nfun java.awt.Color.toCompose(): Color {\n    return Color(red, green, blue)\n}\n\nfun main() = application {\n    Window(\n        onCloseRequest = ::exitApplication,\n        state = rememberWindowState(width = 500.dp, height = 500.dp),\n        title = \"Layout\"\n    ) {\n        Column(\n            modifier = Modifier.fillMaxSize().background(color = Gray.toCompose()).padding(20.dp),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Text(text = \"Compose Area\", color = LightGray.toCompose())\n            Spacer(modifier = Modifier.height(40.dp))\n            SwingPanel(\n                background = DarkGray.toCompose(),\n                modifier = Modifier.fillMaxSize(),\n                factory = {\n                    ComposePanel().apply {\n                        setContent {\n                            Box {\n                                SwingPanel(\n                                    modifier = Modifier.fillMaxSize(),\n                                    factory = { SwingComponent() }\n                                )\n                                Box (\n                                    modifier = Modifier.align(Alignment.TopStart)\n                                        .padding(start = 20.dp, top = 80.dp)\n                                        .background(color = DarkGray.toCompose())\n                                ) {\n                                    SwingPanel(\n                                        modifier = Modifier.size(itemSize * panelItemsList.size, itemSize),\n                                        factory = {\n                                            ComposePanel().apply {\n                                                setContent {\n                                                    ComposeOverlay()\n                                                }\n                                            }\n                                        }\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n            )\n        }\n    }\n}\n\nfun SwingComponent() : JPanel {\n    return JPanel().apply {\n        background = DarkGray\n        border = EmptyBorder(20, 20, 20, 20)\n        layout = BorderLayout()\n        add(\n            JLabel(\"TextArea Swing Component\").apply {\n                foreground = LightGray\n                verticalAlignment = SwingConstants.NORTH\n                horizontalAlignment = SwingConstants.CENTER\n                preferredSize = Dimension(40, 160)\n            },\n            BorderLayout.NORTH\n        )\n        add(\n            JTextArea().apply {\n                background = LightGray\n                lineWrap = true\n                wrapStyleWord = true\n                margin = Insets(10, 10, 10, 10)\n                text = \"The five boxing wizards jump quickly. \" +\n                \"Crazy Fredrick bought many very exquisite opal jewels. \" +\n                \"Pack my box with five dozen liquor jugs.\\n\" +\n                \"Cozy sphinx waves quart jug of bad milk. \" +\n                \"The jay, pig, fox, zebra and my wolves quack!\"\n            },\n            BorderLayout.CENTER\n        )\n    }\n}\n\n@Composable\nfun ComposeOverlay() {\n    Box(\n        modifier = Modifier.fillMaxSize().\n            background(color = DarkGray.toCompose()),\n        contentAlignment = Alignment.Center\n    ) {\n        Row(\n            modifier = Modifier.background(\n                shape = RoundedCornerShape(4.dp),\n                color = Color.DarkGray.copy(alpha = 0.5f)\n            )\n        ) {\n            for (item in panelItemsList) {\n                SelectableItem(\n                    text = item.text,\n                    icon = item.icon,\n                    color = item.color,\n                    selected = item.state\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun SelectableItem(\n    text: String,\n    icon: ImageVector,\n    color: Color,\n    selected: MutableState<Boolean>\n) {\n    Box(\n        modifier = Modifier.size(itemSize)\n            .clickable { selected.value = !selected.value },\n        contentAlignment = Alignment.Center\n    ) {\n        Column(\n            modifier = Modifier.alpha(if (selected.value) 1.0f else 0.5f),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Icon(modifier = Modifier.size(32.dp), imageVector = icon, contentDescription = null, tint = color)\n            Text(text = text, color = Color.White, fontSize = 10.sp)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Material3 Adaptive Dependencies in Kotlin Multiplatform\nDESCRIPTION: Configuration for adding Material3 adaptive modules dependencies in the common source set of a Compose Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-170.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncommonMain.dependencies {\n    implementation(\"org.jetbrains.compose.material3.adaptive:adaptive:1.0.0-alpha03\")\n    implementation(\"org.jetbrains.compose.material3.adaptive:adaptive-layout:1.0.0-alpha03\")\n    implementation(\"org.jetbrains.compose.material3.adaptive:adaptive-navigation:1.0.0-alpha03\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-specific Distribution Options in Kotlin\nDESCRIPTION: This snippet demonstrates how to set up platform-specific distribution options for macOS, Windows, and Linux in a Compose Desktop application using Kotlin DSL.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            macOS {\n                // Options for macOS\n            }\n            windows {\n                // Options for Windows\n            }\n            linux {\n                // Options for Linux\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RocketLaunchViewModel for SpaceX Launch Data in Kotlin\nDESCRIPTION: Defines a ViewModel class that manages rocket launch data from a SpaceX SDK. The class includes a state property to track loading status and launch data, encapsulated in a data class.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial\n\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.lifecycle.ViewModel\nimport com.jetbrains.spacetutorial.entity.RocketLaunch\n \nclass RocketLaunchViewModel(private val sdk: SpaceXSDK) : ViewModel() {\n    private val _state = mutableStateOf(RocketLaunchScreenState())\n    val state: State<RocketLaunchScreenState> = _state\n \n}\n \ndata class RocketLaunchScreenState(\n    val isLoading: Boolean = false,\n    val launches: List<RocketLaunch> = emptyList()\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Functionality with onDrag Modifier in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the experimental onDrag modifier to handle drag events triggered by left and right mouse buttons, including keyboard modifiers. It creates two draggable boxes with different behaviors.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.PointerMatcher\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.gestures.onDrag\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.pointer.PointerButton\nimport androidx.compose.ui.input.pointer.isCtrlPressed\nimport androidx.compose.ui.platform.LocalWindowInfo\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.singleWindowApplication\n\n@OptIn(ExperimentalFoundationApi::class)\nfun main() = singleWindowApplication(title = \"Drag\") {\n    val windowInfo = LocalWindowInfo.current\n\n    Column {\n        var topBoxOffset by remember { mutableStateOf(Offset(0f, 0f)) }\n\n        Box(modifier = Modifier\n            .offset {\n                IntOffset(topBoxOffset.x.toInt(), topBoxOffset.y.toInt())\n            }\n            .size(200.dp)\n            .background(Color.Green)\n            .onDrag { // By default: enabled = true, matcher = PointerMatcher.Primary (left mouse button)\n                topBoxOffset += it\n            }\n        ) {\n            Text(text = \"Drag with LMB\", modifier = Modifier.align(Alignment.Center))\n        }\n\n        var bottomBoxOffset by remember { mutableStateOf(Offset(0f, 0f)) }\n\n        Box(modifier = Modifier\n            .offset {\n                IntOffset(bottomBoxOffset.x.toInt(), bottomBoxOffset.y.toInt())\n            }\n            .size(200.dp)\n            .background(Color.LightGray)\n            .onDrag(\n                matcher = PointerMatcher.mouse(PointerButton.Secondary), // Right mouse button\n                onDragStart = {\n                    println(\"Gray Box: drag start\")\n                },\n                onDragEnd = {\n                    println(\"Gray Box: drag end\")\n                }\n            ) {\n                val keyboardModifiers = windowInfo.keyboardModifiers\n                bottomBoxOffset += if (keyboardModifiers.isCtrlPressed) it * 2f else it\n            }\n        ) {\n            Text(\n                text = \"Drag with RMB,\\ntry with CTRL\",\n                modifier = Modifier.align(Alignment.Center)\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Shared Module Build Configuration\nDESCRIPTION: Adds the kotlinx.serialization and SQLDelight plugins to the shared module build configuration to enable serialization and database functionality.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    // ...\n    alias(libs.plugins.kotlinxSerialization)\n    alias(libs.plugins.sqldelight)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Loading in ViewModel\nDESCRIPTION: Adds data loading functionality to the ViewModel using KoinHelper to fetch rocket launches. Implements async/await pattern for handling suspending functions from Kotlin code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_36\n\nLANGUAGE: Swift\nCODE:\n```\nextension ContentView {\n    @MainActor\n    class ViewModel: ObservableObject {\n        let helper: KoinHelper = KoinHelper()\n\n        init() {\n            self.loadLaunches(forceReload: false)\n        }\n \n        func loadLaunches(forceReload: Bool) {\n            Task {\n                do {\n                    self.launches = .loading\n                    let launches = try await helper.getLaunches(forceReload: forceReload)\n                    self.launches = .result(launches)\n                } catch {\n                    self.launches = .error(error.localizedDescription)\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: State Management in Compose Multiplatform\nDESCRIPTION: Demonstrates how to create and manage state in Compose Multiplatform using remember and mutableStateOf. The state object is observed by the framework, triggering recomposition when its value changes.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-explore-composables.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nvar showContent by remember { mutableStateOf(false) }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Multiplatform Library with Amper YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up a Kotlin Multiplatform shared library using Amper. It includes product type and platform definitions, shared and platform-specific dependencies, and project settings for Kotlin serialization and Compose Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/tools/amper.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproduct:\n  type: lib\n  platforms: [ jvm, android, iosArm64, iosSimulatorArm64, iosX64 ]\n\n# Shared Compose Multiplatform dependencies:\ndependencies:\n  - org.jetbrains.compose.foundation:foundation:1.5.0-rc01: exported\n  - org.jetbrains.compose.material3:material3:1.5.0-rc01: exported\n\n# Android-only dependencies  \ndependencies@android:\n  # Integration compose with activities\n  - androidx.activity:activity-compose:1.7.2: exported\n  - androidx.appcompat:appcompat:1.6.1: exported\n\n# iOS-only dependencies with a dependency on a CocoaPod\n# Note that CocoaPods dependencies are not yet implemented in the prototype\ndependencies@ios:\n  - pod: 'FirebaseCore'\n    version: '~> 6.6'\n\nsettings:\n  # Enable Kotlin serialization\n  kotlin:\n    serialization: json\n\n  # Enable Compose Multiplatform framework\n  compose: enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client with JSON Content Negotiation\nDESCRIPTION: Creates and configures an HTTP client using Ktor with content negotiation for JSON handling. Sets options for pretty printing, lenient parsing, and ignoring unknown JSON keys.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.ktor.client.*\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.json.*\nimport kotlinx.serialization.json.Json\n\nclass RocketComponent {\n    private val httpClient = HttpClient {\n        install(ContentNegotiation) {\n            json(Json {\n                prettyPrint = true\n                isLenient = true\n                ignoreUnknownKeys = true\n            })\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Window State Changes in Compose Multiplatform\nDESCRIPTION: Shows how to implement window state management including fullscreen, maximize, minimize functionality, and position/size modifications. Uses checkboxes and clickable text elements to control window state.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.material.Checkbox\nimport androidx.compose.material.Text\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowPlacement\nimport androidx.compose.ui.window.WindowPosition\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.rememberWindowState\n\nfun main() = application {\n    val state = rememberWindowState(placement = WindowPlacement.Maximized)\n\n    Window(onCloseRequest = ::exitApplication, state, title = \"Window state\") {\n        Column {\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                Checkbox(\n                    state.placement == WindowPlacement.Fullscreen,\n                    {\n                        state.placement = if (it) {\n                            WindowPlacement.Fullscreen\n                        } else {\n                            WindowPlacement.Floating\n                        }\n                    }\n                )\n                Text(\"isFullscreen\")\n            }\n\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                Checkbox(\n                    state.placement == WindowPlacement.Maximized,\n                    {\n                        state.placement = if (it) {\n                            WindowPlacement.Maximized\n                        } else {\n                            WindowPlacement.Floating\n                        }\n                    }\n                )\n                Text(\"isMaximized\")\n            }\n\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                Checkbox(state.isMinimized, { state.isMinimized = !state.isMinimized })\n                Text(\"isMinimized\")\n            }\n\n            Text(\n                \"Position ${state.position}\",\n                Modifier.clickable {\n                    val position = state.position\n                    if (position is WindowPosition.Absolute) {\n                        state.position = position.copy(x = state.position.x + 10.dp)\n                    }\n                }\n            )\n\n            Text(\n                \"Size ${state.size}\",\n                Modifier.clickable {\n                    state.size = state.size.copy(width = state.size.width + 10.dp)\n                }\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Windows in Compose Multiplatform\nDESCRIPTION: Shows how to create modal dialog windows using DialogWindow composable with state management. Implements a button to trigger dialog display and handles dialog state using remember.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.window.DialogWindow\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowPosition\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.rememberDialogState\n\nfun main() = application {\n    Window(\n        onCloseRequest = ::exitApplication,\n    ) {\n        var isDialogOpen by remember { mutableStateOf(false) }\n\n        Button(onClick = { isDialogOpen = true }) {\n            Text(text = \"Open dialog\")\n        }\n\n        if (isDialogOpen) {\n            DialogWindow(\n                onCloseRequest = { isDialogOpen = false },\n                state = rememberDialogState(position = WindowPosition(Alignment.Center))\n            ) {\n                // Content of the window\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Koin Module for Dependency Injection in Android\nDESCRIPTION: Defines a Koin module that declares singletons for SpaceXApi and SpaceXSDK classes, setting up dependency injection for the Android application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial\n\nimport com.jetbrains.spacetutorial.cache.AndroidDatabaseDriverFactory\nimport com.jetbrains.spacetutorial.network.SpaceXApi\nimport org.koin.android.ext.koin.androidContext\nimport org.koin.dsl.module\n\nval appModule = module { \n    single<SpaceXApi> { SpaceXApi() }\n    single<SpaceXSDK> {\n        SpaceXSDK(\n            databaseDriverFactory = AndroidDatabaseDriverFactory(\n                androidContext()\n            ), api = get()\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing loadLaunches Method for SpaceX Data Fetching in Kotlin\nDESCRIPTION: Adds a loadLaunches function to the RocketLaunchViewModel that fetches rocket launch data asynchronously using coroutines. It updates the view state to reflect loading status and handles exceptions.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.launch\n\nclass RocketLaunchViewModel(private val sdk: SpaceXSDK) : ViewModel() {\n    //...\n    \n    fun loadLaunches() {\n        viewModelScope.launch { \n            _state.value = _state.value.copy(isLoading = true, launches = emptyList())\n            try {\n                val launches = sdk.getLaunches(forceReload = true)\n                _state.value = _state.value.copy(isLoading = false, launches = launches)\n            } catch (e: Exception) {\n                _state.value = _state.value.copy(isLoading = false, launches = emptyList())\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Gestures with detectDragGestures in Kotlin\nDESCRIPTION: This snippet shows an alternative way to handle drag gestures using the suspend function detectDragGestures inside a pointerInput modifier. It creates a draggable box that responds to left mouse button drags.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.PointerMatcher\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.gestures.detectDragGestures\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.singleWindowApplication\n\n@OptIn(ExperimentalFoundationApi::class)\nfun main() = singleWindowApplication(title = \"Drag\") {\n    var topBoxOffset by remember { mutableStateOf(Offset(0f, 0f)) }\n\n    Box(modifier = Modifier\n        .offset {\n            IntOffset(topBoxOffset.x.toInt(), topBoxOffset.y.toInt())\n        }\n        .size(200.dp)\n        .background(Color.Green)\n        .pointerInput(Unit) {\n            detectDragGestures(\n                matcher = PointerMatcher.Primary\n            ) {\n                topBoxOffset += it\n            }\n        }\n    ) {\n        Text(text = \"Drag with LMB\", modifier = Modifier.align(Alignment.Center))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ProGuard in Kotlin Multiplatform Desktop App\nDESCRIPTION: Examples of configuring ProGuard for code minification and optimization in desktop applications.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        buildTypes.release.proguard {\n            configurationFiles.from(project.file(\"compose-desktop.pro\"))\n        }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        buildTypes.release.proguard {\n            obfuscate.set(true)\n        }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        buildTypes.release.proguard {\n            optimize.set(false)\n        }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        buildTypes.release.proguard {\n            joinOutputJars.set(true)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android UI with Compose Multiplatform\nDESCRIPTION: Implements a column layout that displays the list of greeting strings in the Android app using Compose Multiplatform, with padding and dividers between items.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-update-ui.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        val greeting = remember { Greeting().greet() }\n\n        Column(\n            modifier = Modifier.padding(all = 20.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp),\n        ) {\n            greeting.forEach { greeting ->\n                Text(greeting)\n                Divider()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Data Classes for SpaceX Launch Data\nDESCRIPTION: Creates serializable data classes for the application data model, including RocketLaunch, Links, and Patch entities with proper kotlinx.serialization annotations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Scrollable Components with Scrollbars\nDESCRIPTION: Shows how to implement scrollbars with lazy loading components like LazyColumn for efficient rendering of large lists. Includes window configuration, state management, and scrollbar integration.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-scrollbars.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() = application {\n    Window(\n        onCloseRequest = ::exitApplication,\n        title = \"Scrollbars\",\n        state = rememberWindowState(width = 300.dp, height = 310.dp)\n    ) {\n        LazyScrollable()\n    }\n}\n\n@Composable\nfun LazyScrollable() {\n    Box(\n        modifier = Modifier.fillMaxSize()\n            .background(color = Color(180, 180, 180))\n            .padding(10.dp)\n    ) {\n\n        val state = rememberLazyListState()\n\n        LazyColumn(Modifier.fillMaxSize().padding(end = 12.dp), state) {\n            items(1000) { x ->\n                TextBox(\"Item #$x\")\n                Spacer(modifier = Modifier.height(5.dp))\n            }\n        }\n        VerticalScrollbar(\n            modifier = Modifier.align(Alignment.CenterEnd).fillMaxHeight(),\n            adapter = rememberScrollbarAdapter(\n                scrollState = state\n            )\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQLDelight Insert Operation (SQL)\nDESCRIPTION: This snippet defines an SQL insert operation named 'insertLaunch' for adding new launch data to the Launch table.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ninsertLaunch:\nINSERT INTO Launch(flightNumber, missionName, details, launchSuccess, launchDateUTC, patchUrlSmall, patchUrlLarge, articleUrl)\nVALUES(?, ?, ?, ?, ?, ?, ?, ?);\n```\n\n----------------------------------------\n\nTITLE: Implementing ContentView UI\nDESCRIPTION: Implements the main ContentView UI with navigation, reload functionality, and list view for rocket launches. Handles different loading states and displays appropriate UI.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_35\n\nLANGUAGE: Swift\nCODE:\n```\nstruct ContentView: View {\n    @ObservedObject private(set) var viewModel: ViewModel\n\n    var body: some View {\n        NavigationView {\n            listView()\n            .navigationBarTitle(\"SpaceX Launches\")\n            .navigationBarItems(trailing:\n                Button(\"Reload\") {\n                    self.viewModel.loadLaunches(forceReload: true)\n            })\n        }\n    }\n\n    private func listView() -> AnyView {\n        switch viewModel.launches {\n        case .loading:\n            return AnyView(Text(\"Loading...\").multilineTextAlignment(.center))\n        case .result(let launches):\n            return AnyView(List(launches) { launch in\n                RocketLaunchRow(rocketLaunch: launch)\n            })\n        case .error(let description):\n            return AnyView(Text(description).multilineTextAlignment(.center))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Raw Events with pointerInput in Common Kotlin Code\nDESCRIPTION: This snippet shows how to listen for raw pointer events using the stable Modifier.pointerInput function in common Kotlin code. It displays a list of recent pointer events, excluding synthetic Move events.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.input.pointer.PointerEventType\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication(title = \"Raw events via Modifier.pointerInput\") {\n    val list = remember { mutableStateListOf<String>() }\n\n    Column(\n        Modifier\n            .fillMaxSize()\n            .pointerInput(Unit) {\n                awaitPointerEventScope {\n                    while (true) {\n                        val event = awaitPointerEvent()\n                        val position = event.changes.first().position\n                        // On each relayout, Compose will send a synthetic Move event,\n                        // so we skip it to avoid event spam\n                        if (event.type != PointerEventType.Move) {\n                            list.add(0, \"${event.type} $position\")\n                        }\n                    }\n                }\n            },\n    ) {\n        for (item in list.take(20)) {\n            Text(item)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flow in Kotlin Multiplatform\nDESCRIPTION: Demonstrates how to create a Flow that emits multiple strings with delays in between. It uses the flow() builder function and includes network requests.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.flow\nimport kotlin.time.Duration.Companion.seconds\n\nfun greet(): Flow<String> = flow {\n     emit(if (Random.nextBoolean()) \"Hi!\" else \"Hello!\")\n     delay(1.seconds)\n     emit(\"Guess what this is! > ${platform.name.reversed()}\")\n     delay(1.seconds)\n     emit(daysPhrase())\n     emit(rocketComponent.launchPhrase())\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Route-to-URL Transformation in Kotlin\nDESCRIPTION: Implements custom URL fragment generation based on route types and parameters using bindToNavigation(). Transforms serialized routes into human-readable URL fragments.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-routing.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(\n    ExperimentalComposeUiApi::class,\n    ExperimentalBrowserHistoryApi::class,\n    ExperimentalSerializationApi::class\n)\nfun main() {\n    val body = document.body ?: return\n    ComposeViewport(body) {\n        val navController = rememberNavController()\n        App(navController)\n        LaunchedEffect(Unit) {\n            window.bindToNavigation(navController) { entry ->\n                val route = entry.destination.route.orEmpty()\n                when {\n                    route.startsWith(StartScreen.serializer().descriptor.serialName) -> {\n                        \"#start\"\n                    }\n                    route.startsWith(Id.serializer().descriptor.serialName) -> {\n                        val args = entry.toRoute<Id>()\n                        \"#find_id_${args.id}\"\n                    }\n                    route.startsWith(Patient.serializer().descriptor.serialName) -> {\n                        val args = entry.toRoute<Patient>()\n                        \"#patient_${args.name}_${args.age}\"\n                    }\n                    else -> \"\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Window Close Handling with Dialog Confirmation\nDESCRIPTION: Demonstrates how to override the default window close behavior to show a confirmation dialog. Uses a declarative approach with state changes to control window visibility.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.window.DialogWindow\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    var isOpen by remember { mutableStateOf(true) }\n    var isAskingToClose by remember { mutableStateOf(false) }\n\n    if (isOpen) {\n        Window(\n            onCloseRequest = { isAskingToClose = true },\n            title = \"Important document\"\n        ) {\n            if (isAskingToClose) {\n                DialogWindow(\n                    onCloseRequest = { isAskingToClose = false },\n                    title = \"Close without saving?\"\n                ) {\n                    Button(\n                        onClick = { isOpen = false }\n                    ) {\n                        Text(\"Yes\")\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts in Compose Multiplatform\nDESCRIPTION: Demonstrates how to load a custom font as a Font type using the Font() function in Compose Multiplatform. The example shows loading a font from the FontResource and creating a FontFamily.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun Font(\n    resource: FontResource,\n    weight: FontWeight = FontWeight.Normal,\n    style: FontStyle = FontStyle.Normal\n): Font\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval fontAwesome = FontFamily(Font(Res.font.font_awesome))\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Database Driver Factory (Kotlin)\nDESCRIPTION: This snippet implements the DatabaseDriverFactory interface for Android, using AndroidSqliteDriver to create a SQLite driver.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial.cache\n\nimport android.content.Context\nimport app.cash.sqldelight.db.SqlDriver\nimport app.cash.sqldelight.driver.android.AndroidSqliteDriver\n\nclass AndroidDatabaseDriverFactory(private val context: Context) : DatabaseDriverFactory {\n    override fun createDriver(): SqlDriver {\n        return AndroidSqliteDriver(AppDatabase.Schema, context, \"launch.db\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Expected Function for UUID Generation in Kotlin Multiplatform\nDESCRIPTION: This snippet shows the expect declaration for the randomUUID() function in the shared module, which will be implemented separately for Android and iOS.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.jetbrains.simplelogin.shared\n\nexpect fun randomUUID(): String\n```\n\n----------------------------------------\n\nTITLE: Using Compose Multiplatform Resources in Android WebView\nDESCRIPTION: Demonstrates how to use Compose Multiplatform resources as Android assets, enabling their use in WebViews and media player components. The example shows displaying an HTML page with a linked image resource.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalResourceApi::class)\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        val uri = Res.getUri(\"files/webview/index.html\")\n\n        // Adding a WebView inside AndroidView with layout as full screen.\n        AndroidView(factory = {\n            WebView(it).apply {\n                layoutParams = ViewGroup.LayoutParams(\n                    ViewGroup.LayoutParams.MATCH_PARENT,\n                    ViewGroup.LayoutParams.MATCH_PARENT\n                )\n            }\n        }, update = {\n            it.loadUrl(uri)\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Drop Target in Compose Multiplatform\nDESCRIPTION: This snippet demonstrates how to create a Box composable that can accept dropped content. It implements a DragAndDropTarget object with overrides for handling various drop events and displays the dropped text content.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-drag-drop.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nvar showTargetBorder by remember { mutableStateOf(false) }\nvar targetText by remember { mutableStateOf(\"Drop Here\") }\nval coroutineScope = rememberCoroutineScope()\nval dragAndDropTarget = remember {\n    object: DragAndDropTarget {\n\n        // Highlights the border of a potential drop target\n        override fun onStarted(event: DragAndDropEvent) {\n            showTargetBorder = true\n        }\n\n        override fun onEnded(event: DragAndDropEvent) {\n            showTargetBorder = false\n        }\n\n        override fun onDrop(event: DragAndDropEvent): Boolean {\n            // Prints the type of action into system output every time\n            // a drag-and-drop operation is concluded.\n            println(\"Action at the target: ${event.action}\")\n\n            val result = (targetText == \"Drop here\")\n\n            // Changes the text to the value dropped into the composable.\n            targetText = event.awtTransferable.let {\n                if (it.isDataFlavorSupported(DataFlavor.stringFlavor))\n                    it.getTransferData(DataFlavor.stringFlavor) as String\n                else\n                    it.transferDataFlavors.first().humanPresentableName\n            }\n\n            // Reverts the text of the drop target to the initial\n            // value after 2 seconds.\n            coroutineScope.launch {\n                delay(2000)\n                targetText = \"Drop here\"\n            }\n            return result\n        }\n    }\n}\n\nBox(Modifier\n    .size(200.dp)\n    .background(Color.LightGray)\n    .then(\n        if (showTargetBorder)\n            Modifier.border(BorderStroke(3.dp, Color.Black))\n        else\n            Modifier\n    )\n    .dragAndDropTarget(\n        // With \"true\" as the value of shouldStartDragAndDrop,\n        // drag-and-drop operations are enabled unconditionally.    \n        shouldStartDragAndDrop = { true },\n        target = dragAndDropTarget\n    )\n) {\n    Text(targetText, Modifier.align(Alignment.Center))\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Windows with a State-Based Architecture\nDESCRIPTION: Demonstrates a more complex architecture for managing multiple windows in a Compose application. Uses a dedicated application state class with mutableStateListOf to track open windows.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.window.MenuBar\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    val applicationState = remember { MyApplicationState() }\n\n    for (window in applicationState.windows) {\n        key(window) {\n            MyWindow(window)\n        }\n    }\n}\n\n@Composable\nprivate fun MyWindow(\n    state: MyWindowState\n) = Window(onCloseRequest = state::close, title = state.title) {\n    MenuBar {\n        Menu(\"File\") {\n            Item(\"New window\", onClick = state.openNewWindow)\n            Item(\"Exit\", onClick = state.exit)\n        }\n    }\n}\n\nprivate class MyApplicationState {\n    val windows = mutableStateListOf<MyWindowState>()\n\n    init {\n        windows += MyWindowState(\"Initial window\")\n    }\n\n    fun openNewWindow() {\n        windows += MyWindowState(\"Window ${windows.size}\")\n    }\n\n    fun exit() {\n        windows.clear()\n    }\n\n    private fun MyWindowState(\n        title: String\n    ) = MyWindowState(\n        title,\n        openNewWindow = ::openNewWindow,\n        exit = ::exit,\n        windows::remove\n    )\n}\n\nprivate class MyWindowState(\n    val title: String,\n    val openNewWindow: () -> Unit,\n    val exit: () -> Unit,\n    private val close: (MyWindowState) -> Unit\n) {\n    fun close() = close(this)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getAllLaunches Function for SpaceX API Requests in Kotlin\nDESCRIPTION: Adds a suspend function getAllLaunches to the SpaceXApi class to retrieve a list of rocket launches from the SpaceX API. This function performs an asynchronous GET request.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SpaceXApi {\n    // ...\n    \n    suspend fun getAllLaunches(): List<RocketLaunch> {\n        return httpClient.get(\"https://api.spacexdata.com/v5/launches\").body()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SwiftUI View Integration in Compose\nDESCRIPTION: Shows how to create and integrate a SwiftUI view into Compose Multiplatform using UIHostingController. This code creates a simple text view in SwiftUI and embeds it in Compose.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-swiftui-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nMain_iosKt.ComposeEntryPointWithUIViewController(createUIViewController: { () -> UIViewController in\n    let swiftUIView = VStack {\n        Text(\"SwiftUI in Compose Multiplatform\")\n    }\n    return UIHostingController(rootView: swiftUIView)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Link Destinations in Kotlin NavHost\nDESCRIPTION: Demonstrates how to set up deep link patterns for a destination in NavHost and handle parameter extraction from URIs. Shows both generated and custom URI pattern handling.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable @SerialName(\"dlscreen\") data class DeepLinkScreen(val name: String)\n\n// ...\n\nval firstBasePath = \"demo://example1.org\"\n\nNavHost(\n    navController = navController,\n    startDestination = FirstScreen\n) {\n    // ...\n    \n    composable<DeepLinkScreen>(\n        deepLinks = listOf(\n            // This composable should handle links both for demo://example1.org and demo://example2.org\n            navDeepLink { uriPattern = \"$firstBasePath?name={name}\" },\n            navDeepLink { uriPattern = \"demo://example2.org/name={name}\" },\n            // The generated pattern only handles the parameters,\n            // so we add the serial name for the route type\n            navDeepLink<Screen3>(basePath = \"$firstBasePath/dlscreen\"),\n        )\n    ) {\n        // If the app receives the URI `demo://example1.org/dlscreen/Jane/`,\n        // it matches the generated URI pattern (name is a required parameter and is given in the path),\n        // and you can map it to the route type automatically\n        val deeplink: DeepLinkScreen = backStackEntry.toRoute()\n        val nameGenerated = deeplink.name\n        \n        // If the app receives a URI matching only a general pattern,\n        // like `demo://example1.com/?name=Jane`\n        // you need to parse the URI directly\n        val nameGeneral = backStackEntry.arguments?.read { getStringOrNull(\"name\") }\n        \n        // Composable content\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Property Implementation\nDESCRIPTION: Implements the expected property for Android platform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nactual val num: Int = 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic App UI in Kotlin with Compose Multiplatform\nDESCRIPTION: Creates a basic UI with a text display and a button using Compose Multiplatform. The UI updates a state variable when the button is clicked.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        var timeAtLocation by remember { mutableStateOf(\"No location selected\") }\n        Column {\n            Text(timeAtLocation)\n            Button(onClick = { timeAtLocation = \"13:30\" }) { \n                Text(\"Show Time At Location\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Deep Link Handler Implementation\nDESCRIPTION: Swift implementation for handling deep links on iOS platform using UIApplication delegate method.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Imports the KMP module to access the singleton\nimport ComposeApp\n\nfunc application(\n    _ application: UIApplication,\n    open uri: URL,\n    options: [UIApplication.OpenURLOptionsKey: Any] = [:]\n) -> Bool {\n    // Sends the full URI on to the singleton\n    ExternalUriHandler.shared.onNewUri(uri: uri.absoluteString)    \n        return true\n    }\n```\n\n----------------------------------------\n\nTITLE: Formatting Launch Date with kotlinx.datetime\nDESCRIPTION: Processes and formats the date of the last successful rocket launch. Parses the UTC timestamp, converts it to the local time zone, and formats it as a readable string.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlinx.datetime.Instant\nimport kotlinx.datetime.TimeZone\nimport kotlinx.datetime.toLocalDateTime\n\nprivate suspend fun getDateOfLastSuccessfulLaunch(): String {\n    val rockets: List<RocketLaunch> =\n        httpClient.get(\"https://api.spacexdata.com/v4/launches\").body()\n    val lastSuccessLaunch = rockets.last { it.launchSuccess == true }\n    val date = Instant.parse(lastSuccessLaunch.launchDateUTC)\n        .toLocalDateTime(TimeZone.currentSystemDefault())\n    \n    return \"${date.month} ${date.dayOfMonth}, ${date.year}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RocketLaunchRow SwiftUI View\nDESCRIPTION: Implements a SwiftUI view for displaying rocket launch information with status indicators and launch details. Uses HStack and VStack for layout with conditional formatting based on launch success.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_33\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Shared\n\nstruct RocketLaunchRow: View {\n    var rocketLaunch: RocketLaunch\n\n    var body: some View {\n        HStack() {\n            VStack(alignment: .leading, spacing: 10.0) {\n                Text(\"\\(rocketLaunch.missionName) - \\(String(rocketLaunch.launchYear))\").font(.system(size: 18)).bold()\n                Text(launchText).foregroundColor(launchColor)\n                Text(\"Launch year: \\(String(rocketLaunch.launchYear))\")\n                Text(\"\\(rocketLaunch.details ?? \"\")\")\n            }\n            Spacer()\n        }\n    }\n}\n\nextension RocketLaunchRow {\n    private var launchText: String {\n        if let isSuccess = rocketLaunch.launchSuccess {\n            return isSuccess.boolValue ? \"Successful\" : \"Unsuccessful\"\n        } else {\n            return \"No data\"\n        }\n    }\n\n    private var launchColor: Color {\n        if let isSuccess = rocketLaunch.launchSuccess {\n            return isSuccess.boolValue ? Color.green : Color.red\n        } else {\n            return Color.gray\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dark/Light Theming for Context Menus\nDESCRIPTION: Shows how to customize context menu colors to match system settings using built-in implementations for light and dark themes. The example applies appropriate theming based on the system's current theme setting.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-context-menus.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.DarkDefaultContextMenuRepresentation\nimport androidx.compose.foundation.LightDefaultContextMenuRepresentation\nimport androidx.compose.foundation.LocalContextMenuRepresentation\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\nimport androidx.compose.material.TextField\nimport androidx.compose.material.darkColors\nimport androidx.compose.material.lightColors\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication(title = \"Dark theme\") {\n    MaterialTheme(\n        colors = if (isSystemInDarkTheme()) darkColors() else lightColors()\n    ) {\n        val contextMenuRepresentation = if (isSystemInDarkTheme()) {\n            DarkDefaultContextMenuRepresentation\n        } else {\n            LightDefaultContextMenuRepresentation\n        }\n        CompositionLocalProvider(LocalContextMenuRepresentation provides contextMenuRepresentation) {\n            Surface(Modifier.fillMaxSize()) {\n                Box {\n                    var value by remember { mutableStateOf(\"\") }\n                    TextField(value, { value = it })\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Application Class for Koin Initialization in Android\nDESCRIPTION: Creates a custom Application class that initializes the Koin dependency injection framework with the defined module for the Android application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial\n\nimport android.app.Application\nimport org.koin.android.ext.koin.androidContext\nimport org.koin.core.context.GlobalContext.startKoin\n \nclass MainApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n \n        startKoin {\n            androidContext(this@MainApplication)\n            modules(appModule)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering RocketLaunchViewModel with Koin Dependency Injection in Kotlin\nDESCRIPTION: Updates the AppModule.kt file to register the RocketLaunchViewModel with the Koin dependency injection framework, making it available for injection throughout the application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.koin.androidx.viewmodel.dsl.viewModel\n\nval appModule = module {\n    // ...\n    viewModel { RocketLaunchViewModel(sdk = get()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Compose Multiplatform UIViewController in Kotlin\nDESCRIPTION: Demonstrates how to create a UIViewController that contains Compose Multiplatform code using ComposeUIViewController. This function creates a basic UI with centered text.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-swiftui-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun MainViewController(): UIViewController =\n    ComposeUIViewController {\n        Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n            Text(\"This is Compose code\", fontSize = 20.sp)\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing System Tray Functionality in Compose Multiplatform Desktop\nDESCRIPTION: This code demonstrates how to create a system tray icon with a menu and send notifications using Compose Multiplatform. It includes functionality for incrementing a counter, sending notifications, and exiting the application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-components.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.window.Tray\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.rememberNotification\nimport androidx.compose.ui.window.rememberTrayState\n\nfun main() = application {\n    var count by remember { mutableStateOf(0) }\n    var isOpen by remember { mutableStateOf(true) }\n\n    if (isOpen) {\n        val trayState = rememberTrayState()\n        val notification = rememberNotification(\"Notification\", \"Message from MyApp!\")\n\n        Tray(\n            state = trayState,\n            icon = TrayIcon,\n            menu = {\n                Item(\n                    \"Increment value\",\n                    onClick = {\n                        count++\n                    }\n                )\n                Item(\n                    \"Send notification\",\n                    onClick = {\n                        trayState.sendNotification(notification)\n                    }\n                )\n                Item(\n                    \"Exit\",\n                    onClick = {\n                        isOpen = false\n                    }\n                )\n            }\n        )\n\n        Window(\n            onCloseRequest = {\n                isOpen = false\n            },\n            icon = MyAppIcon\n        ) {\n            // Content:\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(text = \"Value: $count\")\n            }\n        }\n    }\n}\n\nobject MyAppIcon : Painter() {\n    override val intrinsicSize = Size(256f, 256f)\n\n    override fun DrawScope.onDraw() {\n        drawOval(Color.Green, Offset(size.width / 4, 0f), Size(size.width / 2f, size.height))\n        drawOval(Color.Blue, Offset(0f, size.height / 4), Size(size.width, size.height / 2f))\n        drawOval(Color.Red, Offset(size.width / 4, size.height / 4), Size(size.width / 2f, size.height / 2f))\n    }\n}\n\nobject TrayIcon : Painter() {\n    override val intrinsicSize = Size(256f, 256f)\n\n    override fun DrawScope.onDraw() {\n        drawOval(Color(0xFFFFA500))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility Traversal Groups in Compose Multiplatform\nDESCRIPTION: Shows how to configure traversal semantics for container views to ensure correct screen reader navigation order. Uses Box composable with semantic modifiers to prioritize a floating action button in the accessibility tree.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-180.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun FloatingBox() {\n    Box(\n        modifier =\n        Modifier.semantics {\n            isTraversalGroup = true\n            // Sets a negative index to prioritize over elements with the default index\n            traversalIndex = -1f\n        }\n    ) {\n        FloatingActionButton(onClick = {}) {\n            Icon(\n                imageVector = Icons.Default.Add,\n                contentDescription = \"Icon of floating action button\"\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SpaceXApi Class for HTTP Requests in Kotlin\nDESCRIPTION: Creates a SpaceXApi class with an HttpClient instance configured for JSON content negotiation. This class is responsible for executing network requests to the SpaceX API.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial.network\n\nimport io.ktor.client.HttpClient\nimport io.ktor.client.plugins.contentnegotiation.ContentNegotiation\nimport io.ktor.serialization.kotlinx.json.json\nimport kotlinx.serialization.json.Json\n\nclass SpaceXApi {\n    private val httpClient = HttpClient {\n        install(ContentNegotiation) {\n            json(Json {\n                ignoreUnknownKeys = true\n                useAlternativeNames = false\n            })\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Swing Frame with Compose Content and Dialog\nDESCRIPTION: Demonstrates how to set up a Swing JFrame with a ComposePanel that contains a Dialog component. The Dialog is rendered as a separate component within the JLayeredPane, allowing it to extend beyond the bounds of the ComposePanel.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() = SwingUtilities.invokeLater {\n    System.setProperty(\"compose.swing.render.on.graphics\", \"true\")\n    System.setProperty(\"compose.layers.type\", \"COMPONENT\")\n\n    val window = JFrame()\n    window.defaultCloseOperation = WindowConstants.EXIT_ON_CLOSE\n\n    val contentPane = JLayeredPane()\n    contentPane.layout = null\n\n    val composePanel = ComposePanel()\n    composePanel.setBounds(200, 200, 200, 200)\n    composePanel.setContent {\n      ComposeContent()\n    }\n    composePanel.windowContainer = contentPane  // Use the full window for dialogs\n    contentPane.add(composePanel)\n\n    window.contentPane.add(contentPane)\n    window.setSize(800, 600)\n    window.isVisible = true\n  }\n\n@Composable\nfun ComposeContent() {\n    Box(Modifier.fillMaxSize().background(Color.Green)) {\n        Dialog(onDismissRequest = {}) {\n            Box(Modifier.size(100.dp).background(Color.Yellow))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Android Entry Point with Platform Implementation\nDESCRIPTION: Android Application class that instantiates the Android-specific implementation of Platform and passes it to the common application logic. This demonstrates injecting platform-specific implementations through entry points.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the androidApp platform module:\nimport android.app.Application\nimport mysharedpackage.*\n\nclass MyApp : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        application(AndroidPlatform())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Koin for iOS\nDESCRIPTION: Sets up Koin dependency injection for iOS by initializing modules with appropriate platform-specific implementations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.jetbrains.spacetutorial.cache.IOSDatabaseDriverFactory\nimport com.jetbrains.spacetutorial.network.SpaceXApi\nimport org.koin.core.context.startKoin\nimport org.koin.dsl.module\n\nfun initKoin() {\n    startKoin {\n        modules(module {\n            single<SpaceXApi> { SpaceXApi() }\n            single<SpaceXSDK> {\n                SpaceXSDK(\n                    databaseDriverFactory = IOSDatabaseDriverFactory(), api = get()\n                )\n            }\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Destination in Kotlin\nDESCRIPTION: This code snippet shows how to navigate to a destination using the NavController in Compose Multiplatform. It demonstrates the use of the navigate() function to move between screens.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nButton(onClick = { navController.navigate(Profile) }) {\n    Text(\"Go to profile\")\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Raw Files in Compose Multiplatform\nDESCRIPTION: Shows how to read raw files as byte arrays using the Res.readBytes() function in Compose Multiplatform. Examples are provided for both composable and non-composable code contexts.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun readBytes(path: String): ByteArray\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvar bytes by remember {\n    mutableStateOf(ByteArray(0))\n}\nLaunchedEffect(Unit) {\n    bytes = Res.readBytes(\"files/myDir/someFile.bin\")\n}\nText(bytes.decodeToString())\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncoroutineScope.launch {\n    val bytes = Res.readBytes(\"files/myDir/someFile.bin\")\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Last Successful Rocket Launch\nDESCRIPTION: Retrieves rocket launch data and filters to find the last successful launch from the SpaceX API. Uses a lambda in the last() function to filter based on launch success.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate suspend fun getDateOfLastSuccessfulLaunch(): String {\n    val rockets: List<RocketLaunch> = httpClient.get(\"https://api.spacexdata.com/v4/launches\").body()\n    val lastSuccessLaunch = rockets.last { it.launchSuccess == true }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiplatform Resources from External Libraries in Kotlin\nDESCRIPTION: Shows how to get a platform-specific path for a multiplatform resource to be used with external libraries. This allows processing of multiplatform resources using other libraries included in the project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval uri = Res.getUri(\"files/my_video.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Monitoring Window State Changes with snapshotFlow\nDESCRIPTION: Demonstrates how to monitor window state changes using snapshotFlow for size and position updates. Implements callback functions to handle window resize and relocation events.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowPosition\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.rememberWindowState\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.launchIn\nimport kotlinx.coroutines.flow.onEach\n\nfun main() = application {\n    val state = rememberWindowState()\n\n    Window(onCloseRequest = ::exitApplication, state) {\n        LaunchedEffect(state) {\n            snapshotFlow { state.size }\n                .onEach(::onWindowResize)\n                .launchIn(this)\n\n            snapshotFlow { state.position }\n                .filter { it.isSpecified }\n                .onEach(::onWindowRelocate)\n                .launchIn(this)\n        }\n    }\n}\n\nprivate fun onWindowResize(size: DpSize) {\n    println(\"onWindowResize $size\")\n}\n\nprivate fun onWindowRelocate(position: WindowPosition) {\n    println(\"onWindowRelocate $position\")\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Web Browser Navigation to Compose Navigation Controller\nDESCRIPTION: Code snippet for binding a web app's browser navigation (back/forward buttons and URL) to a Compose Multiplatform navigation controller. This enables URL-based navigation in web applications.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-routing.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalComposeUiApi::class)\n@ExperimentalBrowserHistoryApi\nfun main() {\n    val body = document.body ?: return\n\n    ComposeViewport(body) {\n\n        val navController = rememberNavController()\n        // Assumes that your main composable function in common code is App()\n        App(navController)\n        LaunchedEffect(Unit) {\n            window.bindToNavigation(navController)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Implementation Class for iOS\nDESCRIPTION: iOS-specific implementation of the Platform interface for the entry point approach. This class will be instantiated in the iOS application code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the iosMain source set:\nclass IOSPlatform : Platform\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Text Context Menu in Kotlin Compose\nDESCRIPTION: This snippet demonstrates how to override the default context menu for text fields and selectable text elements in Compose. It adds a custom 'Search' option to the existing menu items, which opens a Google search for the selected text.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-context-menus.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.ContextMenuDataProvider\nimport androidx.compose.foundation.ContextMenuItem\nimport androidx.compose.foundation.ContextMenuState\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.text.LocalTextContextMenu\nimport androidx.compose.foundation.text.TextContextMenu\nimport androidx.compose.foundation.text.selection.SelectionContainer\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextField\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.platform.LocalUriHandler\nimport androidx.compose.ui.text.AnnotatedString\nimport androidx.compose.ui.window.singleWindowApplication\nimport java.net.URLEncoder\nimport java.nio.charset.Charset\n\nfun main() = singleWindowApplication(title = \"Context menu\") {\n    CustomTextMenuProvider {\n        Column {\n            SelectionContainer {\n                Text(\"Hello, Compose!\")\n            }\n            var text by remember { mutableStateOf(\"\") }\n            TextField(text, { text = it })\n        }\n    }\n}\n\n@OptIn(ExperimentalFoundationApi::class)\n@Composable\nfun CustomTextMenuProvider(content: @Composable () -> Unit) {\n    val textMenu = LocalTextContextMenu.current\n    val uriHandler = LocalUriHandler.current\n    CompositionLocalProvider(\n        LocalTextContextMenu provides object : TextContextMenu {\n            @Composable\n            override fun Area(\n                textManager: TextContextMenu.TextManager,\n                state: ContextMenuState,\n                content: @Composable () -> Unit\n            ) {\n                // Reuses original TextContextMenu and adds a new item\n                ContextMenuDataProvider({\n                    val shortText = textManager.selectedText.crop()\n                    if (shortText.isNotEmpty()) {\n                        val encoded = URLEncoder.encode(shortText, Charset.defaultCharset())\n                        listOf(ContextMenuItem(\"Search $shortText\") {\n                            uriHandler.openUri(\"https://google.com/search?q=$encoded\")\n                        })\n                    } else {\n                        emptyList()\n                    }\n                }) {\n                    textMenu.Area(textManager, state, content = content)\n                }\n            }\n        },\n        content = content\n    )\n}\n\nprivate fun AnnotatedString.crop() = if (length <= 5) toString() else \"${take(5)}...\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Interop Blending for SwingPanel\nDESCRIPTION: Shows how to enable and use the experimental interop blending feature for SwingPanel, allowing for improved clipping and overlapping with Compose components on desktop.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// Flag necessary to enable the experimental blending \nSystem.setProperty(\"compose.interop.blending\", \"true\")\n\nSwingPanel(\n    modifier = Modifier.clip(RoundedCornerShape(6.dp))\n    //...\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Publishing in Gradle (Kotlin)\nDESCRIPTION: Sets up the Maven publishing configuration in the Gradle build file. This includes specifying coordinates, POM details, and signing settings for the library.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nmavenPublishing {\n    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)\n    \n    signAllPublications()\n    \n    coordinates(group.toString(), \"fibonacci\", version.toString())\n    \n    pom { \n        name = \"Fibonacci library\"\n        description = \"A mathematics calculation library.\"\n        inceptionYear = \"2024\"\n        url = \"https://github.com/kotlin-hands-on/fibonacci/\"\n        licenses {\n            license {\n                name = \"The Apache License, Version 2.0\"\n                url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\"\n                distribution = \"https://www.apache.org/licenses/LICENSE-2.0.txt\"\n            }\n        }\n        developers {\n            developer {\n                id = \"kotlin-hands-on\"\n                name = \"Kotlin Developer Advocate\"\n                url = \"https://github.com/kotlin-hands-on/\"\n            }\n        }\n        scm {\n            url = \"https://github.com/kotlin-hands-on/fibonacci/\"\n            connection = \"scm:git:git://github.com/kotlin-hands-on/fibonacci.git\"\n            developerConnection = \"scm:git:ssh://git@github.com/kotlin-hands-on/fibonacci.git\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Shared Login Validation Logic in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to update the password validation logic in the shared module. It modifies the checkPassword() function of the LoginDataValidator class to include additional validation rules, which will affect both Android and iOS apps.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.simplelogin.shared.data\n\nclass LoginDataValidator {\n//...\n    fun checkPassword(password: String): Result {\n        return when {\n            password.length < 5 -> Result.Error(\"Password must be >5 characters\")\n            password.lowercase() == \"password\" -> Result.Error(\"Password shouldn't be \\\"password\\\"\")\n            else -> Result.Success\n        }\n    }\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Dependencies to Shared Module\nDESCRIPTION: Adds Ktor dependencies to the shared module for making HTTP requests. Includes core functionality for common code, platform-specific implementations for Android and iOS, and content negotiation for JSON handling.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // ...\n    val ktorVersion = \"%ktorVersion%\"\n\n    sourceSets {\n        commonMain.dependencies {\n            // ...\n\n            implementation(\"io.ktor:ktor-client-core:$ktorVersion\")\n            implementation(\"io.ktor:ktor-client-content-negotiation:$ktorVersion\")\n            implementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktorVersion\")\n        }\n        androidMain.dependencies {\n            implementation(\"io.ktor:ktor-client-android:$ktorVersion\")\n        }\n        iosMain.dependencies {\n            implementation(\"io.ktor:ktor-client-darwin:$ktorVersion\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ContentView ViewModel\nDESCRIPTION: Creates a ViewModel for ContentView using Combine framework to manage loading states for rocket launches. Defines an enum for handling different loading states.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_34\n\nLANGUAGE: Swift\nCODE:\n```\nextension ContentView {\n    enum LoadableLaunches {\n        case loading\n        case result([RocketLaunch])\n        case error(String)\n    }\n    \n    @MainActor\n    class ViewModel: ObservableObject {\n        @Published var launches = LoadableLaunches.loading\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbable Text Fields with Compose Desktop\nDESCRIPTION: Example demonstrating how to create a window with five OutlinedTextField components that users can navigate between using Tab and Shift+Tab keyboard shortcuts. The example shows basic window setup, component layout, and state management for text fields.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-components.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowState\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.material.OutlinedTextField\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.unit.dp\n\nfun main() = application {\n    Window(\n        state = WindowState(size = DpSize(350.dp, 500.dp)),\n        onCloseRequest = ::exitApplication\n    ) {\n        Box(\n            modifier = Modifier.fillMaxSize(),\n            contentAlignment = Alignment.Center\n        ) {\n            Column(\n                modifier = Modifier.padding(50.dp)\n            ) {\n                for (x in 1..5) {\n                    val text = remember { mutableStateOf(\"\") }\n                    OutlinedTextField(\n                        value = text.value,\n                        singleLine = true,\n                        onValueChange = { text.value = it }\n                    )\n                    Spacer(modifier = Modifier.height(20.dp))\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WindowSizeClass in Desktop Platform\nDESCRIPTION: Example of using calculateWindowSizeClass function in desktop-specific code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-170.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// desktopMain/kotlin/main.kt\nimport androidx.compose.material3.windowsizeclass.calculateWindowSizeClass\n\n// ...\n\nval size = calculateWindowSizeClass()\n```\n\n----------------------------------------\n\nTITLE: Preloading Fonts and Images in Compose Multiplatform Web Application\nDESCRIPTION: Demonstrates how to preload fonts and images, set a fallback font for emojis, and handle resource loading states in a Compose Multiplatform web application. It uses experimental APIs for resource preloading and configuration.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalComposeUiApi::class, ExperimentalResourceApi::class, InternalComposeUiApi::class)\nfun main() {\n    configureWebResources {\n        // Overrides the resource location\n        resourcePathMapping { path -> \"./$path\" }\n    }\n    CanvasBasedWindow(\"Resources + K/Wasm\") {\n        val font1 by preloadFont(Res.font.Workbench_Regular)\n        val font2 by preloadFont(Res.font.font_awesome, FontWeight.Normal, FontStyle.Normal)\n        val emojiFont = preloadFont(Res.font.NotoColorEmoji).value\n        var fontsFallbackInitialized by remember { mutableStateOf(false) }\n\n        // Uses the preloaded resource for the app's content\n        UseResources()\n\n        if (font1 != null && font2 != null && emojiFont != null && fontsFallbackInitialized) {\n            println(\"Fonts are ready\")\n        } else {\n            // Displays the progress indicator to address a FOUT or the app being temporarily non-functional during loading\n            Box(modifier = Modifier.fillMaxSize().background(Color.White.copy(alpha = 0.8f)).clickable {  }) {\n                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))\n            }\n            println(\"Fonts are not ready yet\")\n        }\n\n        val fontFamilyResolver = LocalFontFamilyResolver.current\n        LaunchedEffect(fontFamilyResolver, emojiFont) {\n            if (emojiFont != null) {\n                // Preloads a fallback font with emojis to render missing glyphs that are not supported by the bundled font\n                fontFamilyResolver.preload(FontFamily(listOf(emojiFont)))\n                fontsFallbackInitialized = true\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Resource Loading for Compose Multiplatform\nDESCRIPTION: Provides a custom implementation for loading Java resources in Compose Multiplatform projects. This code is necessary for projects that still need to work with Java resources after upgrading to Compose Multiplatform 1.7.0 or above.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\ninternal fun painterResource(\n    resourcePath: String\n): Painter = when (resourcePath.substringAfterLast(\".\")) {\n    \"svg\" -> rememberSvgResource(resourcePath)\n    \"xml\" -> rememberVectorXmlResource(resourcePath)\n    else -> rememberBitmapResource(resourcePath)\n}\n\n@Composable\ninternal fun rememberBitmapResource(path: String): Painter {\n    return remember(path) { BitmapPainter(readResourceBytes(path).decodeToImageBitmap()) }\n}\n\n@Composable\ninternal fun rememberVectorXmlResource(path: String): Painter {\n    val density = LocalDensity.current\n    val imageVector = remember(density, path) { readResourceBytes(path).decodeToImageVector(density) }\n    return rememberVectorPainter(imageVector)\n}\n\n@Composable\ninternal fun rememberSvgResource(path: String): Painter {\n    val density = LocalDensity.current\n    return remember(density, path) { readResourceBytes(path).decodeToSvgPainter(density) }\n}\n\nprivate object ResourceLoader\nprivate fun readResourceBytes(resourcePath: String) =\n    ResourceLoader.javaClass.classLoader.getResourceAsStream(resourcePath).readAllBytes()\n```\n\n----------------------------------------\n\nTITLE: Adding User Input Functionality to Compose Multiplatform App\nDESCRIPTION: Enhances the UI by adding a TextField for user input, allowing users to enter a location for time display.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        var location by remember { mutableStateOf(\"Europe/Paris\") }\n        var timeAtLocation by remember { mutableStateOf(\"No location selected\") }\n\n        Column {\n            Text(timeAtLocation)\n            TextField(value = location, onValueChange = { location = it })\n            Button(onClick = { timeAtLocation = \"13:30\" }) {\n                Text(\"Show Time At Location\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Flows with KMP-NativeCoroutines in Swift ViewModel\nDESCRIPTION: Updates the Swift ViewModel to consume a Kotlin flow using KMP-NativeCoroutines, implementing async/await and error handling.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nimport KMPNativeCoroutinesAsync\nimport KMPNativeCoroutinesCore\n\n// ...\nextension ContentView {\n    @MainActor\n    class ViewModel: ObservableObject {\n        @Published var greetings: Array<String> = []\n\n        func startObserving() async {\n            do {\n                let sequence = asyncSequence(for: Greeting().greet())\n                for try await phrase in sequence {\n                    self.greetings.append(phrase)\n                }\n            } catch {\n                print(\"Failed with error: \\(error)\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Tooltips with TooltipArea in Kotlin Compose\nDESCRIPTION: Demonstrates how to create a window application with multiple buttons, each having customized tooltips. The example shows tooltip positioning, styling, and delayed appearance configuration using TooltipArea composable.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-tooltips.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.TooltipArea\nimport androidx.compose.foundation.TooltipPlacement\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.Button\nimport androidx.compose.material.Surface\nimport androidx.compose.material.Text\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.DpOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.WindowState\nimport androidx.compose.ui.window.singleWindowApplication\n\n@OptIn(ExperimentalFoundationApi::class)\nfun main() = singleWindowApplication(\n    WindowState(width = 300.dp, height = 350.dp),\n    title = \"Tooltip Example\"\n) {\n    val buttons = listOf(\"Button A\", \"Button B\", \"Button C\", \"Button D\", \"Button E\", \"Button F\")\n    Column(Modifier.fillMaxSize(), Arrangement.spacedBy(5.dp)) {\n        buttons.forEachIndexed { index, name ->\n            // Wrap the button in TooltipArea\n            TooltipArea(\n                tooltip = {\n                    // Composable tooltip content:\n                    Surface(\n                        modifier = Modifier.shadow(4.dp),\n                        color = Color(255, 255, 210),\n                        shape = RoundedCornerShape(4.dp)\n                    ) {\n                        Text(\n                            text = \"Tooltip for $name\",\n                            modifier = Modifier.padding(10.dp)\n                        )\n                    }\n                },\n                modifier = Modifier.padding(start = 40.dp),\n                delayMillis = 600, // In milliseconds\n                tooltipPlacement = TooltipPlacement.CursorPoint(\n                    alignment = Alignment.BottomEnd,\n                    offset = if (index % 2 == 0) DpOffset(\n                        (-16).dp,\n                        0.dp\n                    ) else DpOffset.Zero // Tooltip offset\n                )\n            ) {\n                Button(onClick = {}) { Text(text = name) }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying MKMapView from UIKit inside Compose Multiplatform\nDESCRIPTION: This snippet shows how to embed Apple's MKMapView component from UIKit inside a Compose Multiplatform UI. The UIKitView composable function is used with a factory parameter that creates the MapView, and a modifier is applied to set its size.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-uikit-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nUIKitView(\n    factory = { MKMapView() },\n    modifier = Modifier.size(300.dp),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Numbers and Emojis in RTL Layouts with Compose Multiplatform\nDESCRIPTION: This code example demonstrates how Compose Multiplatform handles numbers, emojis, and bidirectional text in both LTR and RTL layouts. It includes tests for Western and Eastern Arabic numerals, emoji positioning, and mixed directional content.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-rtl.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.ui.unit.dp\nimport org.jetbrains.compose.ui.tooling.preview.Preview\n\n// Arabic text for \"Hello World\" with emojis\nprivate val helloWorldArabic = \"مرحبا بالعالم 🌎👋\"\n\n// Bidirectional text with numbers and emojis\nprivate val bidiText = \"67890 Hello $helloWorldArabic 🎉\"\n\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        LazyColumn(\n            Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            item {\n                CompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Ltr) {\n                    Column(modifier = Modifier.fillMaxWidth()) {\n                        TextField(\"Hello world 👋🌎\")\n                        TextField(\"Numbers: 🔢12345\")\n                        TextField(bidiText)\n                    }\n                }\n            }\n            item {\n                CompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Rtl) {\n                    Column(modifier = Modifier.fillMaxWidth()) {\n                        TextField(helloWorldArabic)\n                        TextField(\"الأرقام: 🔢١٢٣٤٥\")\n                        TextField(bidiText)\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wrap function for BasicTextField() to reduce code duplication\n@Composable\ninternal fun TextField(\n    text: String = \"\"\n) {\n    val state = rememberSaveable { mutableStateOf(text) }\n\n    BasicTextField(\n        modifier = Modifier\n            .border(1.dp, Color.LightGray, RoundedCornerShape(8.dp))\n            .padding(8.dp),\n        value = state.value,\n        singleLine = false,\n        onValueChange = { state.value = it },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Link Handler in Kotlin Desktop App\nDESCRIPTION: Shows how to implement a URI handler using java.awt.Desktop to process deep links in the application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.window.singleWindowApplication\nimport java.awt.Desktop\n\nfun main() {\n    var text by mutableStateOf(\"Hello, World!\")\n\n    try {\n        Desktop.getDesktop().setOpenURIHandler { event ->\n            text = \"Open URI: \" + event.uri\n        }\n    } catch (e: UnsupportedOperationException) {\n        println(\"setOpenURIHandler is unsupported\")\n    }\n\n    singleWindowApplication {\n        MaterialTheme {\n            Text(text)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actual Function for iOS with Interface Return Type\nDESCRIPTION: iOS-specific implementation of the platform function that returns an iOS-specific implementation of the Platform interface. This connects the expected declaration with the platform implementation.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the iosMain source set:\nclass IOSPlatform : Platform\n\nactual fun platform() = IOSPlatform()\n```\n\n----------------------------------------\n\nTITLE: Implementing Actual Function for Android with Interface Return Type\nDESCRIPTION: Android-specific implementation of the platform function that returns an Android-specific implementation of the Platform interface. This connects the expected declaration with the platform implementation.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the androidMain source set:\nclass AndroidPlatform : Platform\n\nactual fun platform() = AndroidPlatform()\n```\n\n----------------------------------------\n\nTITLE: Consuming Flows with SKIE in Swift ViewModel\nDESCRIPTION: Updates the Swift ViewModel to consume a Kotlin flow using SKIE, implementing async/await and @MainActor for thread safety.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nextension ContentView {\n    @MainActor\n    class ViewModel: ObservableObject {\n        @Published var greetings: [String] = []\n        \n        func startObserving() async {\n            for await phrase in Greeting().greet() {\n                self.greetings.append(phrase)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing iOS App with Koin\nDESCRIPTION: Sets up the iOS app entry point with Koin initialization and ContentView setup. Configures the main app structure using SwiftUI App protocol.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_37\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Shared\n\n@main\nstruct iOSApp: App {\n    init() {\n        KoinHelperKt.doInitKoin()\n    }\n    \n    var body: some Scene {\n        WindowGroup {\n            ContentView(viewModel: .init())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimizing Window to System Tray in Compose Multiplatform\nDESCRIPTION: Shows how to minimize a window to the system tray instead of closing it. Manages window visibility through state and creates a custom tray icon with menu options.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.window.Tray\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\nimport kotlinx.coroutines.delay\n\nfun main() = application {\n    var isVisible by remember { mutableStateOf(true) }\n\n    Window(\n        onCloseRequest = { isVisible = false },\n        visible = isVisible,\n        title = \"Counter\",\n    ) {\n        var counter by remember { mutableStateOf(0) }\n        LaunchedEffect(Unit) {\n            while (true) {\n                counter++\n                delay(1000)\n            }\n        }\n        Text(counter.toString())\n    }\n\n    if (!isVisible) {\n        Tray(\n            TrayIcon,\n            tooltip = \"Counter\",\n            onAction = { isVisible = true },\n            menu = {\n                Item(\"Exit\", onClick = ::exitApplication)\n            },\n        )\n    }\n}\n\nobject TrayIcon : Painter() {\n    override val intrinsicSize = Size(256f, 256f)\n\n    override fun DrawScope.onDraw() {\n        drawOval(Color(0xFFFFA500))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Resources in Compose\nDESCRIPTION: Example of using painterResource to access and display an image resource in a Compose UI.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nImage(\n    painter = painterResource(Res.drawable.my_icon),\n    contentDescription = null\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Publish Plugin to Gradle (Kotlin)\nDESCRIPTION: Adds the Vanniktech Maven Publish plugin to the library module's Gradle build file. This plugin simplifies the process of publishing to Maven Central.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"com.vanniktech.maven.publish\") version \"0.30.0\" \n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw AWT Events in Compose Multiplatform for Desktop\nDESCRIPTION: This snippet demonstrates how to access raw AWT events in a Compose Multiplatform desktop application using the experimental onPointerEvent modifier. It displays the mouse click location on the screen.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.awt.awtEventOrNull\nimport androidx.compose.ui.input.pointer.PointerEventType\nimport androidx.compose.ui.input.pointer.onPointerEvent\nimport androidx.compose.ui.window.singleWindowApplication\n\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() = singleWindowApplication(title = \"Raw AWT events\") {\n    var text by remember { mutableStateOf(\"\") }\n\n    Box(\n        Modifier\n            .fillMaxSize()\n            .onPointerEvent(PointerEventType.Press) {\n                text = it.awtEventOrNull?.locationOnScreen?.toString().orEmpty()\n            },\n        contentAlignment = Alignment.Center\n    ) {\n        Text(text)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Multiplatform Modules\nDESCRIPTION: Configures the dependencies for common, Android, and iOS source sets, including platform-specific implementations for Ktor client and SQLDelight drivers.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    // ...\n\n    sourceSets {\n        commonMain.dependencies {\n            implementation(libs.kotlinx.coroutines.core)\n            implementation(libs.ktor.client.core)\n            implementation(libs.ktor.client.content.negotiation)\n            implementation(libs.ktor.serialization.kotlinx.json)\n            implementation(libs.runtime)\n            implementation(libs.kotlinx.datetime)\n            implementation(libs.koin.core)\n        }\n        androidMain.dependencies {\n            implementation(libs.ktor.client.android)\n            implementation(libs.android.driver)\n        }\n        iosMain.dependencies {\n            implementation(libs.ktor.client.darwin)\n            implementation(libs.native.driver)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Android ViewModel for Flow Management\nDESCRIPTION: Implements an Android ViewModel that collects and manages the Flow of greeting strings. It uses StateFlow to maintain the list of greetings.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\n\nclass MainViewModel : ViewModel() {\n    private val _greetingList = MutableStateFlow<List<String>>(listOf())\n    val greetingList: StateFlow<List<String>> get() = _greetingList\n    \n    init {\n        viewModelScope.launch {\n            Greeting().greet().collect { phrase ->\n                _greetingList.update { list -> list + phrase }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform Interface for iOS\nDESCRIPTION: iOS-specific implementation of the Platform interface that uses UIKit to provide device information. This demonstrates accessing iOS-specific APIs from Kotlin Multiplatform code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the iosMain source set:\nimport platform.UIKit.UIDevice\n\nclass IOSPlatform : Platform {\n    override val name: String = UIDevice.currentDevice.systemName() + \" \" + UIDevice.currentDevice.systemVersion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Window Size in Compose Multiplatform\nDESCRIPTION: Demonstrates how to create a window with adaptive sizing using Dp.Unspecified to automatically fit content. Uses Column and Row layouts with Text components to showcase dynamic window dimensions.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.Text\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.rememberWindowState\n\nfun main() = application {\n    Window(\n        onCloseRequest = ::exitApplication,\n        state = rememberWindowState(width = Dp.Unspecified, height = Dp.Unspecified),\n        title = \"Adaptive size\",\n        resizable = false\n    ) {\n        Column(Modifier.background(Color(0xFFEEEEEE))) {\n            Row {\n                Text(\"label 1\", Modifier.size(100.dp, 100.dp).padding(10.dp).background(Color.White))\n                Text(\"label 2\", Modifier.size(150.dp, 200.dp).padding(5.dp).background(Color.White))\n                Text(\"label 3\", Modifier.size(200.dp, 300.dp).padding(25.dp).background(Color.White))\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actual Function for Android\nDESCRIPTION: Android-specific implementation of the randomUUID function using Java's UUID class. This actual implementation satisfies the contract defined by the expected declaration in the common code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the android source set:\nimport java.util.*\n\nactual fun randomUUID() = UUID.randomUUID().toString()\n```\n\n----------------------------------------\n\nTITLE: Deep Link Listener Setup in Main App\nDESCRIPTION: Implementation of the main app composable that sets up the deep link listener using DisposableEffect.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ninternal fun App(navController: NavHostController = rememberNavController()) = AppTheme {\n\n    // The effect is produced only once, as `Unit` never changes\n    DisposableEffect(Unit) {\n        // Sets up the listener to call `NavController.navigate()`\n        // for the composable that has a matching `navDeepLink` listed\n        ExternalUriHandler.listener = { uri ->\n            navController.navigate(parseStringAsNavUri(uri))\n        }\n        // Removes the listener when the composable is no longer active\n        onDispose {\n            ExternalUriHandler.listener = null\n        }\n    }\n\n    // Reusing the example from earlier in this article\n    NavHost(\n        navController = navController,\n        startDestination = FirstScreen\n    ) {\n        // ...\n\n        composable<DeepLinkScreen>(\n            deepLinks = listOf(\n                navDeepLink { uriPattern = \"$firstBasePath?name={name}\" },\n                navDeepLink { uriPattern = \"demo://example2.com/name={name}\" },\n            )\n        ) {\n            // Composable content\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User-Facing Launch Message with Error Handling\nDESCRIPTION: Implements a function that creates a user-friendly message with the date of the last successful launch. Includes try-catch error handling to gracefully handle network or parsing failures.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun launchPhrase(): String =\n    try {\n        \"The last successful launch was on ${getDateOfLastSuccessfulLaunch()} 🚀\"\n    } catch (e: Exception) {\n        println(\"Exception during getting the date of the last successful launch $e\")\n        \"Error occurred\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Preloading Web Resources Using HTML Link Tag\nDESCRIPTION: Demonstrates how to preload web resources like fonts using the HTML link tag with the rel=\"preload\" attribute. This technique helps prevent visual glitches during initial load or with slower network connections.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"./composeResources/username.composeapp.generated.resources/font/FiraMono-Regular.ttf\" as=\"fetch\" type=\"font/ttf\" crossorigin/>\n```\n\n----------------------------------------\n\nTITLE: Enhancing Compose Multiplatform App with Flag Images\nDESCRIPTION: This snippet demonstrates how to add flag images to the country selection dropdown. It updates the Country data class to include an image resource, modifies the list of countries to include flag images, and updates the App composable to display flag images in the dropdown menu.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Country(val name: String, val zone: TimeZone, val image: DrawableResource)\n\nfun currentTimeAt(location: String, zone: TimeZone): String {\n    fun LocalTime.formatted() = \"$hour:$minute:$second\"\n\n    val time = Clock.System.now()\n    val localTime = time.toLocalDateTime(zone).time\n\n    return \"The time in $location is ${localTime.formatted()}\"\n}\n\nval defaultCountries = listOf(\n    Country(\"Japan\", TimeZone.of(\"Asia/Tokyo\"), Res.drawable.jp),\n    Country(\"France\", TimeZone.of(\"Europe/Paris\"), Res.drawable.fr),\n    Country(\"Mexico\", TimeZone.of(\"America/Mexico_City\"), Res.drawable.mx),\n    Country(\"Indonesia\", TimeZone.of(\"Asia/Jakarta\"), Res.drawable.id),\n    Country(\"Egypt\", TimeZone.of(\"Africa/Cairo\"), Res.drawable.eg)\n)\n\n@Composable\n@Preview\nfun App(countries: List<Country> = defaultCountries) {\n    MaterialTheme {\n        var showCountries by remember { mutableStateOf(false) }\n        var timeAtLocation by remember { mutableStateOf(\"No location selected\") }\n\n        Column(modifier = Modifier.padding(20.dp)) {\n            Text(\n                timeAtLocation,\n                style = TextStyle(fontSize = 20.sp),\n                textAlign = TextAlign.Center,\n                modifier = Modifier.fillMaxWidth().align(Alignment.CenterHorizontally)\n            )\n            Row(modifier = Modifier.padding(start = 20.dp, top = 10.dp)) {\n                DropdownMenu(\n                    expanded = showCountries,\n                    onDismissRequest = { showCountries = false }\n                ) {\n                    countries.forEach { (name, zone, image) ->\n                        DropdownMenuItem(\n                            onClick = {\n                                timeAtLocation = currentTimeAt(name, zone)\n                                showCountries = false\n                            }\n                        ) {\n                            Row(verticalAlignment = Alignment.CenterVertically) {\n                                Image(\n                                    painterResource(image),\n                                    modifier = Modifier.size(50.dp).padding(end = 10.dp),\n                                    contentDescription = \"$name flag\"\n                                )\n                                Text(name)\n                            }\n                        }\n                    }\n                }\n            }\n\n            Button(modifier = Modifier.padding(start = 20.dp, top = 10.dp),\n                onClick = { showCountries = !showCountries }) {\n                Text(\"Select Location\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS App Entry Point with Shared Module\nDESCRIPTION: This snippet shows how to set up the main entry point of the iOS app using the shared Kotlin Multiplatform module. It imports the sharedKit module and initializes the ContentView with the necessary dependencies from the shared module.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport sharedKit\n\n@main\nstruct SimpleLoginIOSApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView(viewModel: .init(loginRepository: LoginRepository(dataSource: LoginDataSource()), loginValidator: LoginDataValidator()))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Button with Semantic Rules for Screen Readers\nDESCRIPTION: Complete example of creating a custom button in Compose Multiplatform with semantic rules that provide accessibility information for screen readers. The example shows how to set role and content description properties.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-accessibility.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.*\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.semantics.*\nimport androidx.compose.ui.unit.*\nimport androidx.compose.ui.window.*\n\nfun main() = singleWindowApplication(\n    title = \"Custom Button\", state = WindowState(size = DpSize(300.dp, 200.dp))\n) {\n    var count by remember { mutableStateOf(0) }\n\n    Box(modifier = Modifier.padding(50.dp)) {\n        Box(modifier = Modifier\n            .background(Color.LightGray)\n            .fillMaxSize()\n            .clickable { count += 1 }\n            // Uses text from the content  \n            .semantics(mergeDescendants = true) {\n                // Assigns the type of UI element\n                role = Role.Button\n                // Adds some help text to button\n                contentDescription = \"Click to increment value\"\n            }\n        ) {\n            val text = when (count) {\n                0 -> \"Click Me!\"\n                1 -> \"Clicked\"\n                else -> \"Clicked $count times\"\n            }\n            Text(text, modifier = Modifier.align(Alignment.Center), fontSize = 24.sp)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Generated Resource Maps in Compose Multiplatform\nDESCRIPTION: Shows how to use generated maps for resources and string IDs in Compose Multiplatform. These maps provide easy access to resources using filenames as keys.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval Res.allDrawableResources: Map<String, DrawableResource>\nval Res.allStringResources: Map<String, StringResource>\nval Res.allStringArrayResources: Map<String, StringArrayResource>\nval Res.allPluralStringResources: Map<String, PluralStringResource>\nval Res.allFontResources: Map<String, FontResource>\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nImage(painterResource(Res.allDrawableResources[\"compose_multiplatform\"]!!), null)\n```\n\n----------------------------------------\n\nTITLE: iOS Runtime Test Implementation\nDESCRIPTION: Unit test for iOS runtime detection verifying iOS environment and version handling.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage org.kmp.testing \n\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\nclass IOSRuntimeTest {\n    @Test\n    fun shouldDetectOS() {\n        val runtime = determineCurrentRuntime()\n        assertEquals(runtime.name, \"ios\")\n        assertEquals(runtime.version, \"unknown\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Decoration Line Styles in Compose Multiplatform\nDESCRIPTION: Demonstrates how to apply a dotted underline style to text using the PlatformTextStyle class. This feature is available for iOS, desktop, and web platforms.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nText(\n  \"Hello, Compose\",\n  style = TextStyle(\n    textDecoration = TextDecoration.Underline,\n    platformStyle = PlatformTextStyle (\n      textDecorationLineStyle = TextDecorationLineStyle.Dotted\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Common Logic with Platform Interface Parameter\nDESCRIPTION: Common application logic that accepts a Platform interface instance. This approach allows platform-specific implementations to be injected from different entry points without using expected/actual declarations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// Shared Kotlin Multiplatform module\n// In the commonMain source set:\ninterface Platform\n\nfun application(p: Platform) {\n    // application logic\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Views for Popups in Compose Desktop\nDESCRIPTION: Demonstrates how to create separate views for popups using ComposePanel and JLayeredPane. Sets system properties for render mode and layers type, and shows implementation of a dialog popup in a windowed application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-swing-interoperability.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.awt.ComposePanel\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Dialog\nimport javax.swing.JFrame\nimport javax.swing.JLayeredPane\nimport javax.swing.SwingUtilities\nimport javax.swing.WindowConstants\n\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() = SwingUtilities.invokeLater {\n    System.setProperty(\"compose.swing.render.on.graphics\", \"true\")\n    System.setProperty(\"compose.layers.type\", \"COMPONENT\")\n\n    val window = JFrame()\n    window.defaultCloseOperation = WindowConstants.EXIT_ON_CLOSE\n\n    val contentPane = JLayeredPane()\n    contentPane.layout = null\n\n    val composePanel = ComposePanel()\n    composePanel.setBounds(200, 200, 200, 200)\n    composePanel.setContent {\n        ComposeContent()\n    }\n    \n    // Uses the full window for dialogs\n    composePanel.windowContainer = contentPane\n    contentPane.add(composePanel)\n\n    window.contentPane.add(contentPane)\n    window.setSize(800, 600)\n    window.isVisible = true\n}\n\n@Composable\nfun ComposeContent() {\n    Box(Modifier.fillMaxSize().background(Color.Green)) {\n        Dialog(onDismissRequest = {}) {\n            Box(Modifier.size(100.dp).background(Color.Yellow))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: URL-to-Route Navigation Processing in Kotlin\nDESCRIPTION: Handles custom URL fragments by parsing them and converting to appropriate navigation routes. Processes URL parameters to reconstruct navigation destinations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-routing.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(\n    ExperimentalComposeUiApi::class,\n    ExperimentalBrowserHistoryApi::class,\n    ExperimentalSerializationApi::class\n)\nfun main() {\n    val body = document.body ?: return\n    ComposeViewport(body) {\n        val navController = rememberNavController()\n        App(navController)\n        LaunchedEffect(Unit) {\n            val initRoute = window.location.hash.substringAfter('#', \"\")\n            when  {\n                initRoute.startsWith(\"start\") -> {\n                    navController.navigate(StartScreen)\n                }\n                initRoute.startsWith(\"find_id\") -> {\n                    val id = initRoute.substringAfter(\"find_id_\").toLong()\n                    navController.navigate(Id(id))\n                }\n                initRoute.startsWith(\"patient\") -> {\n                    val name = initRoute.substringAfter(\"patient_\").substringBefore(\"_\")\n                    val id = initRoute.substringAfter(\"patient_\").substringAfter(\"_\").toLong()\n                    navController.navigate(Patient(name, id))\n                }\n            }\n            \n            window.bindToNavigation(navController) { ... }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Scroll Listeners in Compose Multiplatform\nDESCRIPTION: Shows how to handle mouse scroll events to update a numerical value. Uses the experimental onPointerEvent modifier to detect scroll delta changes.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.input.pointer.PointerEventType\nimport androidx.compose.ui.input.pointer.onPointerEvent\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.singleWindowApplication\n\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() = singleWindowApplication(title = \"Mouse scroll listeners\") {\n    var number by remember { mutableFloatStateOf(0f) }\n    Box(\n        Modifier\n            .fillMaxSize()\n            .onPointerEvent(PointerEventType.Scroll) {\n                number += it.changes.first().scrollDelta.y\n            },\n        contentAlignment = Alignment.Center\n    ) {\n        Text(\"Scroll to change the number: $number\", fontSize = 30.sp)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Compose UI to Display Current Date (Kotlin)\nDESCRIPTION: This snippet shows how to modify the App composable to include the current date. It demonstrates the use of Compose UI elements and state management in a Kotlin Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-modify-project.md#2025-04-23_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        var showContent by remember { mutableStateOf(false) }\n        val greeting = remember { Greeting().greet() }\n        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n            Text(\n                text = \"Today's date is ${todaysDate()}\",\n                modifier = Modifier.padding(20.dp),\n                fontSize = 24.sp,\n                textAlign = TextAlign.Center\n            )\n            Button(onClick = { showContent = !showContent }) {\n                Text(\"Click me!\")\n            }\n            AnimatedVisibility(showContent) {\n                Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n                    Image(painterResource(Res.drawable.compose_multiplatform), null)\n                    Text(\"Compose: $greeting\")\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ViewModel Dependency in Kotlin Multiplatform\nDESCRIPTION: Gradle configuration to add the common ViewModel implementation dependency to the commonMain source set.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-viewmodel.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // ...\n    sourceSets {\n        // ...\n        commonMain.dependencies {\n            // ...\n            implementation(\"org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose:%composeViewmodelVersion%\")\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Window Switching in Compose Multiplatform\nDESCRIPTION: Shows how to conditionally display different windows based on application state. This example switches between two windows after a task completes, simulated with a coroutine delay.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\nimport kotlinx.coroutines.delay\n\nfun main() = application {\n    var isPerformingTask by remember { mutableStateOf(true) }\n\n    LaunchedEffect(Unit) {\n        // Do some heavy lifting\n        delay(2000) \n        isPerformingTask = false\n    }\n    if (isPerformingTask) {\n        Window(\n            onCloseRequest = ::exitApplication,\n            title = \"Window 1\"\n        )\n        {\n            Text(\"Performing some tasks. Please wait!\")\n        }\n    } else {\n        Window(\n            onCloseRequest = ::exitApplication,\n            title = \"Window 2\"\n        ) {\n            Text(\"Hello, World!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Framework in Swift\nDESCRIPTION: This snippet demonstrates how to import the shared Kotlin Multiplatform framework into a Swift file. The framework name is 'sharedKit' as defined in the shared module's build.gradle.kts file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport sharedKit\n```\n\n----------------------------------------\n\nTITLE: Creating Suspending Function Signature for API Call\nDESCRIPTION: Defines a suspending function signature to retrieve the date of the last successful rocket launch. Suspending functions enable asynchronous operations without blocking threads.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate suspend fun getDateOfLastSuccessfulLaunch(): String {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Compose Text Context Menu with Swing in Kotlin\nDESCRIPTION: This snippet shows how to use the JPopupTextMenu class to integrate Compose text context menus with existing Swing applications. It creates a custom menu that matches the appearance and behavior of Swing components, including cut, copy, paste, and select all actions.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-context-menus.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.text.JPopupTextMenu\nimport androidx.compose.foundation.text.LocalTextContextMenu\nimport androidx.compose.foundation.text.selection.SelectionContainer\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextField\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.awt.ComposePanel\nimport androidx.compose.ui.platform.LocalLocalization\nimport java.awt.Color\nimport java.awt.Component\nimport java.awt.Dimension\nimport java.awt.Graphics\nimport java.awt.event.KeyEvent\nimport java.awt.event.KeyEvent.CTRL_DOWN_MASK\nimport java.awt.event.KeyEvent.META_DOWN_MASK\nimport javax.swing.Icon\nimport javax.swing.JFrame\nimport javax.swing.JMenuItem\nimport javax.swing.JPopupMenu\nimport javax.swing.KeyStroke.getKeyStroke\nimport javax.swing.SwingUtilities\nimport org.jetbrains.skiko.hostOs\n\nfun main() = SwingUtilities.invokeLater {\n    val panel = ComposePanel()\n    panel.setContent {\n        JPopupTextMenuProvider(panel) {\n            Column {\n                SelectionContainer {\n                    Text(\"Hello, World!\")\n                }\n\n                var text by remember { mutableStateOf(\"\") }\n\n                TextField(text, { text = it })\n            }\n        }\n    }\n\n    val window = JFrame()\n    window.contentPane.add(panel)\n    window.size = Dimension(800, 600)\n    window.isVisible = true\n    window.title = \"Swing interop\"\n}\n\n@OptIn(ExperimentalFoundationApi::class)\n@Composable\nfun JPopupTextMenuProvider(owner: Component, content: @Composable () -> Unit) {\n    val localization = LocalLocalization.current\n    CompositionLocalProvider(\n        LocalTextContextMenu provides JPopupTextMenu(owner) { textManager, items ->\n            JPopupMenu().apply {\n                textManager.cut?.also {\n                    add(\n                        swingItem(localization.cut, Color.RED, KeyEvent.VK_X, it)\n                    )\n                }\n                textManager.copy?.also {\n                    add(\n                        swingItem(localization.copy, Color.GREEN, KeyEvent.VK_C, it)\n                    )\n                }\n                textManager.paste?.also {\n                    add(\n                        swingItem(localization.paste, Color.BLUE, KeyEvent.VK_V, it)\n                    )\n                }\n                textManager.selectAll?.also {\n                    add(JPopupMenu.Separator())\n                    add(\n                        swingItem(localization.selectAll, Color.BLACK, KeyEvent.VK_A, it)\n                    )\n                }\n\n                // Adds items that can be defined via ContextMenuDataProvider in other parts of the application \n                for (item in items) {\n                    add(\n                        JMenuItem(item.label).apply {\n                            addActionListener { item.onClick() }\n                        }\n                    )\n                }\n            }\n        },\n        content = content\n    )\n}\n\nprivate fun swingItem(\n    label: String,\n    color: Color,\n    key: Int,\n    onClick: () -> Unit\n) = JMenuItem(label).apply {\n    icon = circleIcon(color)\n    accelerator = getKeyStroke(key, if (hostOs.isMacOS) META_DOWN_MASK else CTRL_DOWN_MASK)\n    addActionListener { onClick() }\n}\n\nprivate fun circleIcon(color: Color) = object : Icon {\n    override fun paintIcon(c: Component?, g: Graphics, x: Int, y: Int) {\n        g.create().apply {\n            this.color = color\n            translate(8, 2)\n            fillOval(0, 0, 16, 16)\n        }\n    }\n\n    override fun getIconWidth() = 16\n\n    override fun getIconHeight() = 16\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Move Listeners in Compose Multiplatform\nDESCRIPTION: Shows how to track mouse movement and update the background color based on pointer position. Uses the experimental onPointerEvent modifier to handle move events.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.pointer.PointerEventType\nimport androidx.compose.ui.input.pointer.onPointerEvent\nimport androidx.compose.ui.window.singleWindowApplication\n\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() = singleWindowApplication(title = \"Mouse move listeners\") {\n    var color by remember { mutableStateOf(Color(0, 0, 0)) }\n    Box(modifier = Modifier\n        .wrapContentSize(Alignment.Center)\n        .fillMaxSize()\n        .background(color = color)\n        .onPointerEvent(PointerEventType.Move) {\n            val position = it.changes.first().position\n            color = Color(position.x.toInt() % 256, position.y.toInt() % 256, 0)\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Android Activity Implementation for Compose Multiplatform\nDESCRIPTION: The Android-specific implementation that launches the Compose Multiplatform UI. Uses ComponentActivity and setContent to render the App() composable function within the Android platform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-explore-composables.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        setContent {\n            App()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Coroutine Delays in Compose Tests\nDESCRIPTION: Example showing how tests with infinite loops and delays would hang in previous versions but are now handled correctly in the new version.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-180.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun loopInLaunchedEffectTest() = runComposeUiTest {\n    setContent {\n        LaunchedEffect(Unit) {\n            while (true) {\n                delay(1000)\n                println(\"Tick\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS UI with SwiftUI\nDESCRIPTION: Implements a list view that displays the greeting strings in the iOS app using SwiftUI, consuming the shared Kotlin function through Objective-C interoperability.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-update-ui.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n   let phrases = Greeting().greet()\n\n   var body: some View {\n       List(phrases, id: \\.self) {\n           Text($0)\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Routes with SerialName Annotation\nDESCRIPTION: Example of using the @SerialName annotation to customize how navigation routes are translated to URL fragments in web applications, making URLs more readable and user-friendly.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-routing.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Instead of using the app package and object name,\n// this route will be translated to the URL simply as \"#start\"\n@Serializable @SerialName(\"start\") data object StartScreen\n```\n\n----------------------------------------\n\nTITLE: Wrapping Swing FileDialog in Compose Composable for Kotlin Desktop\nDESCRIPTION: Shows how to wrap a Swing FileDialog into a Compose composable function. This approach allows for seamless integration of Swing dialogs within a Compose-based desktop application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.window.AwtWindow\nimport androidx.compose.ui.window.application\nimport java.awt.FileDialog\nimport java.awt.Frame\n\nfun main() = application {\n    var isOpen by remember { mutableStateOf(true) }\n\n    if (isOpen) {\n        FileDialog(\n            onCloseRequest = {\n                isOpen = false\n                println(\"Result $it\")\n            }\n        )\n    }\n}\n\n@Composable\nprivate fun FileDialog(\n    parent: Frame? = null,\n    onCloseRequest: (result: String?) -> Unit\n) = AwtWindow(\n    create = {\n        object : FileDialog(parent, \"Choose a file\", LOAD) {\n            override fun setVisible(value: Boolean) {\n                super.setVisible(value)\n                if (value) {\n                    onCloseRequest(file)\n                }\n            }\n        }\n    },\n    dispose = FileDialog::dispose\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Initialization Block to RocketLaunchViewModel in Kotlin\nDESCRIPTION: Adds an init block to the RocketLaunchViewModel class that calls loadLaunches when the view model is instantiated, ensuring data is fetched immediately upon creation.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RocketLaunchViewModel(private val sdk: SpaceXSDK) : ViewModel() {\n    // ...\n\n    init {\n        loadLaunches()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Experimental onClick Handlers in Compose Multiplatform Desktop\nDESCRIPTION: This code demonstrates how to use experimental onClick handlers in a Compose Multiplatform desktop application. It showcases different click handling scenarios, including single clicks, double clicks, and long clicks with various mouse buttons and keyboard modifiers.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalFoundationApi::class)\nfun main() = singleWindowApplication(title = \"Mouse clicks\") {\n    Column {\n        var topBoxText by remember { mutableStateOf(\"Click me\\nusing LMB or LMB + Shift\") }\n        var topBoxCount by remember { mutableIntStateOf(0) }\n        // No indication on interaction\n        Box(modifier = Modifier\n            .size(300.dp, 200.dp)\n            .background(Color.LightGray)\n            // The most generic click handler (without extra conditions) should be the first one\n            .onClick {\n                // Receives all left mouse button clicks except for when Shift is pressed\n                println(\"Click with primary button\")\n                topBoxText = \"LMB ${topBoxCount++}\"\n            }.onClick(\n                keyboardModifiers = { isShiftPressed } // Accepts clicks only when Shift is pressed\n            ) {\n                // Receives all left mouse button clicks when Shift is pressed\n                println(\"Click with primary button and shift pressed\")\n                topBoxCount++\n                topBoxText = \"LMB + Shift ${topBoxCount++}\"\n            }\n        ) {\n            AnimatedContent(\n                targetState = topBoxText,\n                modifier = Modifier.align(Alignment.Center)\n            ) {\n                Text(text = it, textAlign = TextAlign.Center)\n            }\n        }\n\n        var bottomBoxText by remember { mutableStateOf(\"Click me\\nusing LMB or\\nRMB + Alt\") }\n        var bottomBoxCount by remember { mutableStateOf(0) }\n        val interactionSource = remember { MutableInteractionSource() }\n        // With indication on interaction\n        Box(modifier = Modifier\n            .size(300.dp, 200.dp)\n            .background(Color.Yellow)\n            .onClick(\n                enabled = true,\n                interactionSource = interactionSource,\n                matcher = PointerMatcher.mouse(PointerButton.Secondary), // Right mouse button\n                keyboardModifiers = { isAltPressed }, // Accepts clicks only when Alt is pressed\n                onLongClick = { // Optional\n                    bottomBoxText = \"RMB Long Click + Alt ${bottomBoxCount++}\"\n                    println(\"Long Click with secondary button and Alt pressed\")\n                },\n                onDoubleClick = { // Optional\n                    bottomBoxText = \"RMB Double Click + Alt ${bottomBoxCount++}\"\n                    println(\"Double Click with secondary button and Alt pressed\")\n                },\n                onClick = {\n                    bottomBoxText = \"RMB Click + Alt ${bottomBoxCount++}\"\n                    println(\"Click with secondary button and Alt pressed\")\n                }\n            )\n            .onClick(interactionSource = interactionSource) { // Uses default parameters\n                bottomBoxText = \"LMB Click ${bottomBoxCount++}\"\n                println(\"Click with primary button (mouse left button)\")\n            }\n            .indication(interactionSource, LocalIndication.current)\n        ) {\n            AnimatedContent(\n                targetState = bottomBoxText,\n                modifier = Modifier.align(Alignment.Center)\n            ) {\n                Text(text = it, textAlign = TextAlign.Center)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ViewModel Class in Compose Multiplatform\nDESCRIPTION: Example of declaring a ViewModel class that manages UI state using StateFlow in common code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-viewmodel.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewmodel.compose.viewModel\n\nclass OrderViewModel : ViewModel() {\n   private val _uiState = MutableStateFlow(OrderUiState(pickupOptions = pickupOptions()))\n   val uiState: StateFlow<OrderUiState> = _uiState.asStateFlow()\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent Rendering in Compose for iOS\nDESCRIPTION: Demonstrates how to enable concurrent rendering on iOS by configuring ComposeUIViewController with parallel rendering flag. This experimental feature can improve performance in scenarios without UIKit interop.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-180.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalComposeUiApi::class)\nfun main(vararg args: String) {\n    UIKitMain {\n        ComposeUIViewController(configure = { parallelRendering = true }) {\n            // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking in Kotlin Multiplatform Desktop App\nDESCRIPTION: Demonstrates how to set up deep linking in a desktop application by configuring the build.gradle.kts file with custom URL scheme definitions in Info.plist.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        mainClass = \"MainKt\"\n        nativeDistributions {\n            targetFormats(TargetFormat.Dmg)\n            packageName = \"Deep Linking Example App\"\n            macOS {\n                bundleID = \"org.jetbrains.compose.examples.deeplinking\"\n                infoPlist {\n                    extraKeysRawXml = macExtraPlistKeys\n                }\n            }\n        }\n    }\n}\n\nval macExtraPlistKeys: String\n    get() = \"\"\"\n      <key>CFBundleURLTypes</key>\n      <array>\n        <dict>\n          <key>CFBundleURLName</key>\n          <string>Example deep link</string>\n          <key>CFBundleURLSchemes</key>\n          <array>\n            <string>compose</string>\n          </array>\n        </dict>\n      </array>\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Database Driver Factory (Kotlin)\nDESCRIPTION: This snippet implements the DatabaseDriverFactory interface for iOS, using NativeSqliteDriver to create a SQLite driver.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial.cache\n\nimport app.cash.sqldelight.db.SqlDriver\nimport app.cash.sqldelight.driver.native.NativeSqliteDriver\n\nclass IOSDatabaseDriverFactory : DatabaseDriverFactory {\n    override fun createDriver(): SqlDriver {\n        return NativeSqliteDriver(AppDatabase.Schema, \"launch.db\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compose Entry Point with SwiftUI Integration\nDESCRIPTION: Demonstrates how to create an entry point that accepts a UIViewController factory function, allowing SwiftUI content to be embedded within Compose Multiplatform UI.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-swiftui-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalForeignApi::class)\nfun ComposeEntryPointWithUIViewController(\n    createUIViewController: () -> UIViewController\n): UIViewController =\n    ComposeUIViewController {\n        Column(\n            Modifier\n                .fillMaxSize()\n                .windowInsetsPadding(WindowInsets.systemBars),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Text(\"How to use SwiftUI inside Compose Multiplatform\")\n            UIKitViewController(\n                factory = createUIViewController,\n                modifier = Modifier.size(300.dp).border(2.dp, Color.Blue),\n            )\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Actions to Text Context Menus\nDESCRIPTION: Shows how to add custom actions to the default context menus of both TextField and selectable Text components using ContextMenuDataProvider and ContextMenuItem.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-context-menus.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.ContextMenuDataProvider\nimport androidx.compose.foundation.ContextMenuItem\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.text.selection.SelectionContainer\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextField\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication(title = \"Context menu\") {\n    val text = remember { mutableStateOf(\"Hello!\") }\n    Column {\n        ContextMenuDataProvider(\n            items = {\n                listOf(\n                    ContextMenuItem(\"User-defined action\") {\n                        // Custom action\n                    },\n                    ContextMenuItem(\"Another user-defined action\") {\n                        // Another custom action\n                    }\n                )\n            }\n        ) {\n            TextField(\n                value = text.value,\n                onValueChange = { text.value = it },\n                label = { Text(text = \"Input\") }\n            )\n\n            Spacer(Modifier.height(16.dp))\n\n            SelectionContainer {\n                Text(\"Hello World!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Window Area in Kotlin with Compose Multiplatform\nDESCRIPTION: Demonstrates how to add a custom draggable title bar to an undecorated window using the WindowDraggableArea() composable. This snippet creates a dark gray draggable area at the top of the window.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.window.WindowDraggableArea\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    Window(onCloseRequest = ::exitApplication, undecorated = true) {\n        WindowDraggableArea {\n            Box(Modifier.fillMaxWidth().height(48.dp).background(Color.DarkGray))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ViewModel in Compose Multiplatform Composable\nDESCRIPTION: Implementation of a composable function that uses the ViewModel with explicit initialization.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-viewmodel.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun CupcakeApp(\n   viewModel: OrderViewModel = viewModel { OrderViewModel() },\n) {\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing System Fonts in Compose Multiplatform\nDESCRIPTION: Shows how to use the SystemFont class to load fonts installed on the system with specific styles and weights. This feature is available for iOS, desktop, and web platforms.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.text.platform.SystemFont\n\nFontFamily(SystemFont(\"Menlo\", weight = 700))\nFontFamily(SystemFont(\"Times New Roman\", FontWeight.Bold))\nFontFamily(SystemFont(\"Webdings\"))\n\n// On desktop, load all possible font styles\nFontFamily(\"Menlo\")\n```\n\n----------------------------------------\n\nTITLE: Implementing WebView with Multiplatform Resources in Android\nDESCRIPTION: An example of an Android composable that displays a resource HTML page with a link to a resource image using WebView inside AndroidView. The code utilizes multiplatform resources packed into Android assets to display HTML content.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-170.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalResourceApi::class)\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        val uri = Res.getUri(\"files/webview/index.html\")\n\n        // Adding a WebView inside AndroidView with layout as full screen.\n        AndroidView(factory = {\n            WebView(it).apply {\n                layoutParams = ViewGroup.LayoutParams(\n                    ViewGroup.LayoutParams.MATCH_PARENT,\n                    ViewGroup.LayoutParams.MATCH_PARENT\n                )\n            }\n        }, update = {\n            it.loadUrl(uri)\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Module with Koin in Kotlin Multiplatform\nDESCRIPTION: This snippet demonstrates how to define a common module using Koin in the shared source set of a Kotlin Multiplatform project. It declares a Platform interface and an expected Module.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the common source set:\nimport org.koin.dsl.module\n\ninterface Platform\n\nexpect val platformModule: Module\n```\n\n----------------------------------------\n\nTITLE: Converting Byte Arrays to Images in Compose Multiplatform\nDESCRIPTION: Demonstrates how to convert byte arrays into ImageBitmap or ImageVector objects for use with the Image() composable in Compose Multiplatform. Also shows SVG conversion to Painter objects.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nImage(bytes.decodeToImageBitmap(), null)\n\nImage(bytes.decodeToImageVector(LocalDensity.current), null)\n\nImage(bytes.decodeToSvgPainter(LocalDensity.current), null)\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Route Type for Deep Links\nDESCRIPTION: Shows how to create a Serializable data class to serve as a type-safe route definition that can be used with deep links. The structure of this class determines how URI patterns are generated.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable data class PlantDetail(\n  val id: String,\n  val name: String,\n  val colors: List<String>,\n  val latinName: String? = null,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Listeners in Compose Multiplatform\nDESCRIPTION: Demonstrates how to implement single click, double click, and long click handlers using the combinedClickable modifier. The example shows a magenta box that responds to different click events and updates a text display.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.combinedClickable\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication(title = \"Mouse clicks\") {\n    var count by remember { mutableIntStateOf(0) }\n    Box(contentAlignment = Alignment.Center, modifier = Modifier.fillMaxWidth()) {\n        var text by remember { mutableStateOf(\"Click magenta box!\") }\n        Column {\n            @OptIn(ExperimentalFoundationApi::class)\n            Box(modifier = Modifier\n                .background(Color.Magenta)\n                .fillMaxWidth(0.7f)\n                .fillMaxHeight(0.7f)\n                .combinedClickable(\n                    onClick = {\n                        text = \"Click! ${count++}\"\n                    },\n                    onDoubleClick = {\n                        text = \"Double click! ${count++}\"\n                    },\n                    onLongClick = {\n                        text = \"Long click! ${count++}\"\n                    }\n                )\n            )\n            Text(text = text, fontSize = 40.sp)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Calculation Function in Kotlin for Multiplatform Use\nDESCRIPTION: Creates a function to calculate and format the current time for a given location using Kotlin's time libraries.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun currentTimeAt(location: String): String? {\n    fun LocalTime.formatted() = \"$hour:$minute:$second\"\n\n    return try {\n        val time = Clock.System.now()\n        val zone = TimeZone.of(location)\n        val localTime = time.toLocalDateTime(zone).time\n        \"The time in $location is ${localTime.formatted()}\"\n    } catch (ex: IllegalTimeZoneException) {\n        null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Native Distributions in Compose Desktop\nDESCRIPTION: This code snippet demonstrates how to set various metadata properties for native distributions in a Compose Desktop application, including package name, version, description, copyright, vendor, and license file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            packageName = \"ExampleApp\"\n            packageVersion = \"0.1-SNAPSHOT\"\n            description = \"Compose Multiplatform App\"\n            copyright = \"© 2024 My Name. All rights reserved.\"\n            vendor = \"Example vendor\"\n            licenseFile.set(project.file(\"LICENSE.txt\"))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a grep function in Kotlin Multiplatform\nDESCRIPTION: A common code implementation of a grep-like function that filters lines of text based on a regex pattern and performs an action on each matching line.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun grep(lines: List<String>, pattern: String, action: (String) -> Unit) {\n    val regex = pattern.toRegex()\n    lines.filter(regex::containsMatchIn)\n        .forEach(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Greeting Function in Swift ContentView\nDESCRIPTION: This code snippet shows how to use the greet() function from the shared Kotlin Multiplatform module in a Swift ContentView structure. It demonstrates the integration of shared code in the iOS app's UI.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    var body: some View {\n        Text(Greeting().greet())\n        .padding()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Swing Components with Compose State\nDESCRIPTION: Demonstrates how to update Swing components when Compose state changes using SwingPanel's update callback. Shows a counter implementation with bidirectional updates between Compose and Swing.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-swing-interoperability.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.awt.SwingPanel\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.application\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.rememberWindowState\nimport java.awt.BorderLayout\nimport javax.swing.JPanel\nimport javax.swing.JLabel\n\nval swingLabel = JLabel()\n\nfun main() = application {\n    Window(\n        onCloseRequest = ::exitApplication,\n        state = rememberWindowState(width = 400.dp, height = 200.dp),\n        title = \"SwingLabel\"\n    ) {\n        val clicks = remember { mutableStateOf(0) }\n        Column(\n            modifier = Modifier.fillMaxSize().padding(20.dp),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            SwingPanel(\n                modifier = Modifier.fillMaxWidth().height(40.dp),\n                factory = {\n                    JPanel().apply {\n                        add(swingLabel, BorderLayout.CENTER)\n                    }\n                },\n                update = {\n                    swingLabel.text = \"SwingLabel clicks: ${clicks.value}\"\n                }\n            )\n            Spacer(modifier = Modifier.height(40.dp))\n            Row (\n                modifier = Modifier.height(40.dp),\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Button(onClick = { clicks.value++ }) {\n                    Text(text = \"Increment\")\n                }\n                Spacer(modifier = Modifier.width(20.dp))\n                Button(onClick = { clicks.value-- }) {\n                    Text(text = \"Decrement\")\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiplatform Random in Common Kotlin\nDESCRIPTION: Shows the correct way to use Random in common Kotlin code by using kotlin.random.Random from the Kotlin standard library, which is multiplatform-compatible.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.random.Random\n\nclass Greeting {\n    private val platform: Platform = getPlatform()\n\n    fun greet(): String {\n        val firstWord = if (Random.nextBoolean()) \"Hi!\" else \"Hello!\"\n\n        return \"$firstWord Guess what this is! > ${platform.name.reversed()}!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Window Application in Compose Multiplatform\nDESCRIPTION: Shows how to use the singleWindowApplication() function for creating simple applications that require only one window. This is a simpler alternative to the Window() function with some limitations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication {\n    // Content of the window\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Formatting Function in Kotlin\nDESCRIPTION: This function uses the kotlinx-datetime library to get the current date and format it as a string. It demonstrates how to work with time zones and date formatting in Kotlin Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-modify-project.md#2025-04-23_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun todaysDate(): String {\n    fun LocalDateTime.format() = toString().substringBefore('T')\n\n    val now = Clock.System.now()\n    val zone = TimeZone.currentSystemDefault()\n    return now.toLocalDateTime(zone).format()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Launcher Properties for Compose Desktop Application\nDESCRIPTION: This snippet shows how to configure launcher properties for a Compose Desktop application, including setting the main class, application arguments, and JVM arguments.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        mainClass = \"MainKt\"\n        args += listOf(\"-customArgument\")\n        jvmArgs += listOf(\"-Xmx2G\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Deep Links to Navigation Destinations in Compose\nDESCRIPTION: Demonstrates how to configure a deep link for a composable destination in a navigation graph, using a type-safe route and automatic URI pattern generation.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncomposable<PlantDetail>(\n    deepLinks = listOf(\n        navDeepLink<PlantDetail>(basePath = \"demo://example.com/plant\")\n    )\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating SQLDelight Database Schema (SQL)\nDESCRIPTION: This snippet defines the SQL schema for a 'Launch' table in the AppDatabase.sq file. It includes columns for various launch details such as flight number, mission name, and launch date.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nimport kotlin.Boolean;\n\nCREATE TABLE Launch (\n    flightNumber INTEGER NOT NULL,\n    missionName TEXT NOT NULL,\n    details TEXT,\n    launchSuccess INTEGER AS Boolean DEFAULT NULL,\n    launchDateUTC TEXT NOT NULL,\n    patchUrlSmall TEXT,\n    patchUrlLarge TEXT,\n    articleUrl TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: Declaratively Changing Window Properties in Compose Multiplatform\nDESCRIPTION: Demonstrates how to dynamically change window properties (like the title) in response to state changes. Uses mutableStateOf to track a filename that is incorporated into the window title.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    var fileName by remember { mutableStateOf(\"Untitled\") }\n\n    Window(onCloseRequest = ::exitApplication, title = \"$fileName - Editor\") {\n        Button(onClick = { fileName = \"note.txt\" }) {\n            Text(\"Save\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Implementation Class for Android\nDESCRIPTION: Android-specific implementation of the Platform interface for the entry point approach. This class will be instantiated in the Android application code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n// In the androidMain source set:\nclass AndroidPlatform : Platform\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Draggable Window Title Bar in Kotlin with Compose Multiplatform\nDESCRIPTION: Shows how to create a reusable draggable window title bar using a separate composable function with WindowScope receiver. This approach allows for better code organization and reusability across multiple windows.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.window.WindowDraggableArea\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.WindowScope\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    Window(onCloseRequest = ::exitApplication, undecorated = true) {\n        AppWindowTitleBar()\n    }\n}\n\n@Composable\nprivate fun WindowScope.AppWindowTitleBar() = WindowDraggableArea {\n    Box(Modifier.fillMaxWidth().height(48.dp).background(Color.DarkGray))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AccessibilityDebugLogger for Compose Multiplatform iOS\nDESCRIPTION: Example of implementing the AccessibilityDebugLogger interface to log accessibility events to console. This helps with debugging and testing accessibility features in Compose Multiplatform iOS apps.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-ios-accessibility.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nComposeUIViewController(configure = {\n    accessibilitySyncOptions = AccessibilitySyncOptions.WhenRequiredByAccessibilityServices(object: AccessibilityDebugLogger {\n         override fun log(message: Any?) {\n             if (message == null) {\n                 println()\n             } else { \n                 println(\"[a11y]: $message\") \n             } \n         } \n    })\n}) {\n    // your @Composable content\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Minimum Version in Compose Multiplatform Gradle Plugin\nDESCRIPTION: This code snippet demonstrates how to set a minimum macOS version for a Compose Multiplatform application using the Gradle plugin configuration. Setting this property allows deploying to the App Store without requiring Intel version support.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-1610.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            macOS {\n                minimumSystemVersion = \"12.0\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KMP-NativeCoroutines in Kotlin Multiplatform Project\nDESCRIPTION: Adds KSP and KMP-NativeCoroutines plugins to the project-level and shared module build.gradle.kts files.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    id(\"com.google.devtools.ksp\").version(\"2.0.0-1.0.24\").apply(false)\n    id(\"com.rickclephas.kmp.nativecoroutines\").version(\"%kmpncVersion%\").apply(false)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    id(\"com.google.devtools.ksp\")\n    id(\"com.rickclephas.kmp.nativecoroutines\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // ...\n    sourceSets{\n        all {\n            languageSettings.optIn(\"kotlin.experimental.ExperimentalObjCName\")\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DatabaseDriverFactory Interface (Kotlin)\nDESCRIPTION: This snippet defines a Kotlin interface for creating database drivers across different platforms.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial.cache\n\nimport app.cash.sqldelight.db.SqlDriver\n\ninterface DatabaseDriverFactory {\n    fun createDriver(): SqlDriver\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Compose Window using Swing in Kotlin\nDESCRIPTION: Illustrates how to create a Compose window using Swing interoperability. This approach allows for direct manipulation of the underlying Swing components while still utilizing Compose for the content.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.awt.ComposeWindow\nimport java.awt.Dimension\nimport javax.swing.JFrame\nimport javax.swing.SwingUtilities\n\nfun main() = SwingUtilities.invokeLater {\n    ComposeWindow().apply {\n        size = Dimension(300, 300)\n        defaultCloseOperation = JFrame.DISPOSE_ON_CLOSE\n        setContent {\n            // Content of the window\n        }\n        isVisible = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Compose Resources Dependency in Kotlin Multiplatform\nDESCRIPTION: This snippet shows how to add the Compose Resources dependency to the commonMain source set in the build.gradle.kts file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(compose.components.resources)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Window in Compose Multiplatform\nDESCRIPTION: Simple example of creating a basic window using the Window() function within an application entry point. The window includes a close request handler that exits the application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\nfun main() = application {\n    Window(onCloseRequest = ::exitApplication) {\n        // Content of the window\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resource Directory in Kotlin Compose\nDESCRIPTION: This code demonstrates how to specify a custom resource directory for a specific source set in the build.gradle.kts file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.resources {\n    customDirectory(\n        sourceSetName = \"desktopMain\",\n        directoryProvider = provider { layout.projectDirectory.dir(\"desktopResources\") }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Web-Specific Deep Link Configuration\nDESCRIPTION: Shows how to configure deep links specifically for web platform using URL fragments and encoding.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncomposable<DeepLinkScreen>(\n        deepLinks = listOf(\n            // For the default Compose Multiplatform setup, localhost:8080\n            // is the local dev endpoint that runs with the wasmJsBrowserDevelopmentRun Gradle task\n            navDeepLink { uriPattern = \"localhost:8080/#dlscreen%2F{name}\" },\n        )\n    ) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Icons for Different Operating Systems\nDESCRIPTION: This code snippet shows how to configure application icons for different operating systems (macOS, Windows, and Linux) in a Compose Desktop application. It specifies the icon file for each platform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            macOS {\n                iconFile.set(project.file(\"icon.icns\"))\n            }\n            windows {\n                iconFile.set(project.file(\"icon.ico\"))\n            }\n            linux {\n                iconFile.set(project.file(\"icon.png\"))\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Greeting Function Implementation\nDESCRIPTION: Shows how to use platform-specific properties in a common function.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun greet(): String {\n    val firstWord = if (Random.nextBoolean()) \"Hi!\" else \"Hello!\"\n    return \"$firstWord [$num] Guess what this is! > ${platform.name.reversed()}!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Coroutines Dependency to Shared Module\nDESCRIPTION: Adds the kotlinx.coroutines dependency to the common source set in the shared module's Gradle build file. This enables asynchronous code execution across all platforms.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // ... \n    sourceSets {\n        commonMain.dependencies {\n           // ...\n           implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Window with Rounded Corners in Kotlin using Compose Multiplatform\nDESCRIPTION: Demonstrates how to create a transparent window with rounded corners using Compose Multiplatform. This example combines various composables to achieve a custom window appearance with transparency and rounded edges.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-top-level-windows-management.md#2025-04-23_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.Surface\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.*\n\nfun main() = application {\n    var isOpen by remember { mutableStateOf(true) }\n    if (isOpen) {\n        Window(\n            onCloseRequest = { isOpen = false },\n            title = \"Transparent Window Example\",\n            transparent = true, \n            // Transparent window must be undecorated\n            undecorated = true, \n        ) {\n            Surface(\n                modifier = Modifier.fillMaxSize().padding(5.dp).shadow(3.dp, RoundedCornerShape(20.dp)), \n                color = Color.Transparent,\n                // Window with rounded corners\n                shape = RoundedCornerShape(20.dp) \n            ) {\n                Text(\"Hello World!\", color = Color.White)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Default Text Field with Context Menu\nDESCRIPTION: Shows the implementation of a basic TextField with a default context menu that includes copy, cut, paste, and select all actions based on text selection state.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-context-menus.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextField\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication(title = \"Context menu\") {\n    val text = remember { mutableStateOf(\"Hello!\") }\n    TextField(\n        value = text.value,\n        onValueChange = { text.value = it },\n        label = { Text(text = \"Input\") }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: AccessibilitySyncOptions API Structure in Compose Multiplatform\nDESCRIPTION: Definition of the AccessibilitySyncOptions sealed class that provides different synchronization options for the accessibility tree. Options include Never, WhenRequiredByAccessibilityServices, and Always.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-ios-accessibility.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// package androidx.compose.ui.platform\n\n@ExperimentalComposeApi\nsealed class AccessibilitySyncOptions {\n    \n    // Option to never synchronize the accessibility tree\n    object Never: AccessibilitySyncOptions\n\n    // Option to synchronize the tree only when Accessibility Services are running\n    //\n    // You can include an AccessibilityDebugLogger to log interactions and tree syncing events\n    class WhenRequiredByAccessibilityServices(debugLogger: AccessibilityDebugLogger?)\n\n    // Option to always synchronize the accessibility tree\n    //\n    // You can include an AccessibilityDebugLogger to log interactions and tree syncing events\n    class Always(debugLogger: AccessibilityDebugLogger?)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Deep Links in Shared Module\nDESCRIPTION: Shows how to configure the shared Kotlin module's build.gradle.kts file to add required dependencies for deep linking support, including the Navigation Compose library and Kotlin serialization.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    alias(libs.plugins.kotlinx.serialization)\n}\n\n// ...\n\nkotlin {\n    // ...\n    sourceSets {\n        commonMain.dependencies {\n            // ...\n            implementation(libs.androidx.navigation.compose)\n            implementation(libs.kotlinx.serialization.json)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Plural String Resources in Compose\nDESCRIPTION: Example of using pluralStringResource to access a plural string resource in a Compose UI component.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nText(pluralStringResource(Res.plurals.new_message, 1, 1))\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Entry Point with Platform Implementation\nDESCRIPTION: iOS SwiftUI App struct that instantiates the iOS-specific implementation of Platform and passes it to the common application logic. This demonstrates injecting platform-specific implementations through entry points in Swift code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-connect-to-apis.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// In the iosApp platform module (in Swift):\nimport shared\n\n@main\nstruct iOSApp : App {\n    init() {\n        application(IOSPlatform())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Greeting Function in Kotlin Shared Module\nDESCRIPTION: Updates the greet() function in the shared module to return a list of strings including a random greeting and the reversed platform name.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-update-ui.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun greet(): List<String> = buildList {\n    add(if (Random.nextBoolean()) \"Hi!\" else \"Hello!\")\n    add(\"Guess what this is! > ${platform.name.reversed()}!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Desktop Application Packaging with Compose Multiplatform\nDESCRIPTION: A basic Gradle configuration that sets up the Compose Multiplatform plugin for desktop application packaging. It specifies the main class and target formats for distribution (DMG, MSI, and EXE).\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.compose.desktop.application.dsl.TargetFormat\n\nplugins {\n    kotlin(\"jvm\")\n    id(\"org.jetbrains.compose\")\n}\n\ndependencies {\n    implementation(compose.desktop.currentOs)\n}\n\ncompose.desktop {\n    application {\n        mainClass = \"example.MainKt\"\n\n        nativeDistributions {\n            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Exe)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Area Context Menu with Compose Multiplatform\nDESCRIPTION: Demonstrates how to create a context menu for a specific area in a Compose desktop application. It defines a blue box area where right-clicking triggers a custom context menu with two action items.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-context-menus.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.ContextMenuArea\nimport androidx.compose.foundation.ContextMenuItem\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication(title = \"Context menu\") {\n    ContextMenuArea(items = {\n        listOf(\n            ContextMenuItem(\"User-defined action\") {\n                // Custom action\n            },\n            ContextMenuItem(\"Another user-defined action\") {\n                // Another custom action\n            }\n        )\n    }) {\n        // Blue box where context menu will be available\n        Box(modifier = Modifier.background(Color.Blue).height(100.dp).width(100.dp))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding kotlinx-datetime Dependency in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to add the kotlinx-datetime library as a dependency in the Gradle build file. It also includes a specific npm package for web target support.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-modify-project.md#2025-04-23_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotlin {\n    // ...\n    sourceSets {\n        // ...\n        commonMain.dependencies {\n            // ...\n            implementation(\"org.jetbrains.kotlinx:kotlinx-datetime:%dateTimeVersion%\")\n        }\n        wasmJsMain.dependencies {\n            implementation(npm(\"@js-joda/timezone\", \"2.3.0\"))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Catalog for Deep Links in Compose Multiplatform\nDESCRIPTION: Defines the necessary dependencies and versions in a Gradle catalog file for implementing deep links in a Compose Multiplatform project. This includes the Navigation library with deep link support and Kotlin serialization for type-safe routes.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[versions]\ncompose-multiplatform = \"%composeEapVersion%\"\nagp = \"8.9.0\"\n\n# The multiplatform Navigation library version with deep link support \nandroidx-navigation = \"%composeNavigationEapVersion%\"\n\n# Minimum Kotlin version to use with Compose Multiplatform 1.8.0\nkotlin = \"2.1.0\"\n\n# Serialization library necessary to implement type-safe routes\nkotlinx-serialization = \"1.7.3\"\n\n[libraries]\nnavigation-compose = { module = \"org.jetbrains.androidx.navigation:navigation-compose\", version.ref = \"androidx-navigation\" }\nkotlinx-serialization-json = { module = \"org.jetbrains.kotlinx:kotlinx-serialization-json\", version.ref = \"kotlinx-serialization\" }\n\n[plugins]\nmultiplatform = { id = \"org.jetbrains.kotlin.multiplatform\", version.ref = \"kotlin\" }\ncompose-compiler = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }\ncompose = { id = \"org.jetbrains.compose\", version.ref = \"compose-multiplatform\" }\nkotlinx-serialization = { id = \"org.jetbrains.kotlin.plugin.serialization\", version.ref = \"kotlin\" }\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\n```\n\n----------------------------------------\n\nTITLE: Accessing Included Resources in Compose Desktop Application\nDESCRIPTION: This code snippet shows how to access included resources in a Compose Desktop application using the 'compose.application.resources.dir' system property. It demonstrates reading the content of a text file from the resources directory.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.io.File\n\nval resourcesDir = File(System.getProperty(\"compose.application.resources.dir\"))\n\nfun main() {\n    println(resourcesDir.resolve(\"resource.txt\").readText())\n}\n```\n\n----------------------------------------\n\nTITLE: Android-exclusive Modifiers\nDESCRIPTION: List of Compose modifiers that are only available in Android targets due to platform-specific implementation requirements.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-android-only-components.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nModifier.imeNestedScroll()\nModifier.systemGestureExclusion()\nModifier.magnifier()\nLocalOverscrollConfiguration\n```\n\n----------------------------------------\n\nTITLE: Web Implementation for Compose Multiplatform\nDESCRIPTION: The web-specific implementation that launches the Compose Multiplatform UI. Uses ComposeViewport to insert the App() composable function into the document body of a web page.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-explore-composables.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() {\n    ComposeViewport(document.body!!) { App() }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SKIE Plugin in Kotlin Multiplatform Project\nDESCRIPTION: Adds the SKIE plugin to the shared module's build.gradle.kts file to enable flow consumption in iOS.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   id(\"co.touchlab.skie\") version \"%skieVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Window-Scope Keyboard Events in Compose Multiplatform\nDESCRIPTION: Shows how to handle keyboard events at the window level using onKeyEvent and onPreviewKeyEvent. Implements Ctrl+Shift+C to clear the window and Escape to close dialogs.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.Button\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.input.key.Key\nimport androidx.compose.ui.input.key.KeyEventType\nimport androidx.compose.ui.input.key.isCtrlPressed\nimport androidx.compose.ui.input.key.isShiftPressed\nimport androidx.compose.ui.input.key.key\nimport androidx.compose.ui.input.key.type\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.DialogWindow\nimport androidx.compose.ui.window.singleWindowApplication\n\nprivate var cleared by mutableStateOf(false)\n\nfun main() = singleWindowApplication(\n    title = \"Keyboard events\",\n    onKeyEvent = {\n        if (\n            it.isCtrlPressed &&\n            it.isShiftPressed &&\n            it.key == Key.C &&\n            it.type == KeyEventType.KeyDown\n        ) {\n            cleared = true\n            true\n        } else {\n            false\n        }\n    }\n) {\n    MaterialTheme {\n        if (cleared) {\n            Text(\"The App was cleared!\")\n        } else {\n            App()\n        }\n    }\n}\n\n@Composable\nfun App() {\n    var isDialogOpen by remember { mutableStateOf(false) }\n\n    if (isDialogOpen) {\n        DialogWindow(onCloseRequest = { isDialogOpen = false },\n            title = \"Dialog\",\n            onPreviewKeyEvent = {\n                if (it.key == Key.Escape && it.type == KeyEventType.KeyDown) {\n                    isDialogOpen = false\n                    true\n                } else {\n                    false\n                }\n            }) {\n            Text(\"Hello!\")\n        }\n    }\n\n    Column(Modifier.fillMaxSize(), Arrangement.spacedBy(5.dp)) {\n        Button(\n            modifier = Modifier.padding(4.dp),\n            onClick = { isDialogOpen = true }\n        ) {\n            Text(\"Open dialog\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Timezone Support for Web in Kotlin Multiplatform\nDESCRIPTION: Sets up timezone support for the web version of the Compose Multiplatform application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@JsModule(\"@js-joda/timezone\")\nexternal object JsJodaTimeZoneModule\n\nprivate val jsJodaTz = JsJodaTimeZoneModule\n```\n\n----------------------------------------\n\nTITLE: Adding Material3 Navigation Suite Dependency in Kotlin Multiplatform\nDESCRIPTION: Configuration for adding the Material3 adaptive navigation suite dependency in a Compose Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-170.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncommonMain.dependencies {\n    implementation(compose.material3AdaptiveNavigationSuite)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Directory for Compose Desktop Application in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure the Gradle plugin to include additional resource files in the installation directory of a Compose Desktop application. It sets up native distributions for different target formats and specifies a root resource directory.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        mainClass = \"MainKt\"\n        nativeDistributions {\n            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)\n            packageVersion = \"1.0.0\"\n\n            appResourcesRootDir.set(project.layout.projectDirectory.dir(\"resources\"))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Koin Helper\nDESCRIPTION: Creates a KoinHelper class for iOS to handle dependency injection and provide access to the SpaceXSDK functionality.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.jetbrains.spacetutorial\n\nimport org.koin.core.component.KoinComponent\nimport com.jetbrains.spacetutorial.entity.RocketLaunch\nimport org.koin.core.component.inject\n\nclass KoinHelper : KoinComponent {\n    private val sdk: SpaceXSDK by inject<SpaceXSDK>()\n\n    suspend fun getLaunches(forceReload: Boolean): List<RocketLaunch> {\n        return sdk.getLaunches(forceReload = forceReload)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a CurrentRuntime class in Kotlin Multiplatform\nDESCRIPTION: A common code class that stores platform runtime information with name and version. It includes parsing logic to extract version numbers from version strings.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CurrentRuntime(val name: String, rawVersion: String?) {\n    companion object {\n        val versionRegex = Regex(\"^[0-9]+(\\\\.[0-9]+)?\")\n    }\n\n    val version = parseVersion(rawVersion)\n\n    override fun toString() = \"$name version $version\"\n\n    private fun parseVersion(rawVersion: String?): String {\n        val result = rawVersion?.let { versionRegex.find(it) }\n        return result?.value ?: \"unknown\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Versions in Compose Desktop Application\nDESCRIPTION: This snippet demonstrates how to specify package versions for different operating systems and package formats using the Compose Desktop DSL. It includes options for setting global package versions, OS-specific versions, and package-format-specific versions.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            // Version for all packages\n            packageVersion = \"...\" \n          \n            macOS {\n              // Version for all macOS packages\n              packageVersion = \"...\"\n              // Version for the dmg package only\n              dmgPackageVersion = \"...\" \n              // Version for the pkg package only\n              pkgPackageVersion = \"...\" \n              \n              // Build version for all macOS packages\n              packageBuildVersion = \"...\"\n              // Build version for the dmg package only\n              dmgPackageBuildVersion = \"...\" \n              // Build version for the pkg package only\n              pkgPackageBuildVersion = \"...\" \n            }\n            windows {\n              // Version for all Windows packages\n              packageVersion = \"...\"  \n              // Version for the msi package only\n              msiPackageVersion = \"...\"\n              // Version for the exe package only\n              exePackageVersion = \"...\" \n            }\n            linux {\n              // Version for all Linux packages\n              packageVersion = \"...\"\n              // Version for the deb package only\n              debPackageVersion = \"...\"\n              // Version for the rpm package only\n              rpmPackageVersion = \"...\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Module to Native Distribution in Compose Multiplatform\nDESCRIPTION: Kotlin code that adds the jdk.accessibility module to native distributions in Compose Multiplatform to ensure accessibility features are included.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-accessibility.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            modules(\"jdk.accessibility\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plural String Resources in XML\nDESCRIPTION: XML structure for defining plural string resources with different quantity variants.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\n    <string name=\"app_name\">My awesome app</string>\n    <string name=\"title\">Some title</string>\n    <plurals name=\"new_message\">\n        <item quantity=\"one\">%1$d new message</item>\n        <item quantity=\"other\">%1$d new messages</item>\n    </plurals>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Platform Layers in ComposeUIViewController\nDESCRIPTION: Code showing how to configure platform layers for iOS in ComposeUIViewController to control popup and dialog behavior. Setting platformLayers to false reverts to old popup behavior.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nComposeUIViewController(\n    configure = {\n        platformLayers = false\n    }\n) {\n    // your Compose code\n}\n```\n\n----------------------------------------\n\nTITLE: Migration from Bundle to SavedState in Navigation (After)\nDESCRIPTION: Demonstrates the new approach for accessing navigation arguments using SavedState after the migration in Compose Multiplatform Navigation library.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-180.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncomposable(Destinations.Followers.route) { navBackStackEntry ->\n    val uId = navBackStackEntry.arguments?.read { getStringOrNull(\"userid\") }\n    val page = navBackStackEntry.arguments?.read { getStringOrNull(\"page\") }\n    if (uId != null && page != null) {\n        FollowersMainComposable(navController, accountId = uId, page = page)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Generation for iOS in Kotlin Multiplatform\nDESCRIPTION: This snippet shows the actual implementation of the randomUUID() function for iOS using NSUUID from the Foundation framework.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.jetbrains.simplelogin.shared\n\nimport platform.Foundation.NSUUID\n\nactual fun randomUUID(): String = NSUUID().UUIDString()\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Generation for Android in Kotlin Multiplatform\nDESCRIPTION: This code provides the actual implementation of the randomUUID() function for Android using java.util.UUID.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.jetbrains.simplelogin.shared\n\nimport java.util.*\n\nactual fun randomUUID() = UUID.randomUUID().toString()\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Compose Application\nDESCRIPTION: Gradle command for launching the desktop version of a Compose Multiplatform application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-create-first-app.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposeApp:run\n```\n\n----------------------------------------\n\nTITLE: Defining SQLDelight Select Operation (SQL)\nDESCRIPTION: This snippet defines an SQL select operation named 'selectAllLaunchesInfo' for retrieving all data from the Launch table.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nselectAllLaunchesInfo:\nSELECT Launch.*\nFROM Launch;\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiplatform Resources in Android Library Target\nDESCRIPTION: This code snippet shows how to enable support for multiplatform resources in the androidLibrary target using experimental properties.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  androidLibrary {\n    experimentalProperties[\"android.experimental.kmp.enableAndroidResources\"] = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Web App Entry Point in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to update the main function for the web app to use the named container element specified in the HTML file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-modify-project.md#2025-04-23_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() {\n    ComposeViewport(viewportContainerId = \"composeApplication\") {\n        App()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect UIKitView Usage with Remember and OnReset in Kotlin\nDESCRIPTION: This snippet demonstrates an incorrect usage pattern for UIKitView where a non-null onReset lambda is used along with remember { UIView() }. This can lead to inconsistencies between the remembered view and the one shown on screen.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-ios-migration.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval view = remember { UIView() }\n\nUIKitView(factory = { view }, onReset = { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: JVM Platform Deep Link Handler\nDESCRIPTION: Platform-specific implementation for handling deep links on JVM platform, including macOS specific handling.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-deep-links.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// Import the singleton\nimport org.company.app.ExternalUriHandler\n\nfun main() {\n    if(System.getProperty(\"os.name\").indexOf(\"Mac\") > -1) {\n        Desktop.getDesktop().setOpenURIHandler { uri ->\n            ExternalUriHandler.onNewUri(uri.uri.toString())\n        }\n    }\n    else {\n        ExternalUriHandler.onNewUri(args.getOrNull(0).toString())\n    }\n\n    application {\n         // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQLDelight Delete Operation (SQL)\nDESCRIPTION: This snippet defines an SQL delete operation named 'removeAllLaunches' for clearing all data from the Launch table.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nremoveAllLaunches:\nDELETE FROM Launch;\n```\n\n----------------------------------------\n\nTITLE: Configuring MacOS Minimum Version in Compose Desktop Application\nDESCRIPTION: Sets the minimum macOS version for a Compose Multiplatform desktop application using the Gradle DSL. This configuration is important for App Store compatibility, especially when targeting newer macOS versions.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-eap.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            macOS {\n                minimumSystemVersion = \"12.0\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Enter/Exit Listeners in Compose Multiplatform\nDESCRIPTION: Demonstrates how to handle pointer enter and exit events to create hover effects. The example shows text items that change style when hovered.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-mouse-events.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.pointer.PointerEventType\nimport androidx.compose.ui.input.pointer.onPointerEvent\nimport androidx.compose.ui.text.font.FontStyle\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.singleWindowApplication\n\n@OptIn(ExperimentalComposeUiApi::class)\nfun main() = singleWindowApplication(title = \"Mouse enter listeners\") {\n    Column(\n        Modifier.background(Color.White),\n        verticalArrangement = Arrangement.spacedBy(10.dp),\n    ) {\n        repeat(10) { index ->\n            var active by remember { mutableStateOf(false) }\n            Text(modifier = Modifier\n                .fillMaxWidth()\n                .background(color = if (active) Color.Green else Color.White)\n                .onPointerEvent(PointerEventType.Enter) { active = true }\n                .onPointerEvent(PointerEventType.Exit) { active = false },\n                fontSize = 30.sp,\n                fontStyle = if (active) FontStyle.Italic else FontStyle.Normal,\n                text = \"Item $index\",\n                textAlign = TextAlign.Center\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Swing Components in Compose Multiplatform\nDESCRIPTION: Shows how to embed Swing components within a Compose Multiplatform application using SwingPanel. Implements a counter application with both Compose and Swing buttons interacting with shared state.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-swing-interoperability.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.awt.SwingPanel\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.singleWindowApplication\nimport java.awt.Component\nimport javax.swing.BoxLayout\nimport javax.swing.JButton\nimport javax.swing.JPanel\n\nfun main() = singleWindowApplication(title = \"SwingPanel\") {\n    val counter = remember { mutableStateOf(0) }\n\n    val inc: () -> Unit = { counter.value++ }\n    val dec: () -> Unit = { counter.value-- }\n\n    Box(\n        modifier = Modifier.fillMaxWidth().height(60.dp).padding(top = 20.dp),\n        contentAlignment = Alignment.Center\n    ) {\n        Text(\"Counter: ${counter.value}\")\n    }\n\n    Box(\n        modifier = Modifier.fillMaxSize(),\n        contentAlignment = Alignment.Center\n    ) {\n        Column(\n            modifier = Modifier.padding(top = 80.dp, bottom = 20.dp)\n        ) {\n            Button(\"1. Compose Button: increment\", inc)\n            Spacer(modifier = Modifier.height(20.dp))\n\n            SwingPanel(\n                background = Color.LightGray,\n                modifier = Modifier.size(270.dp, 90.dp),\n                factory = {\n                    JPanel().apply {\n                        layout = BoxLayout(this, BoxLayout.Y_AXIS)\n                        add(actionButton(\"1. Swing Button: decrement\", dec))\n                        add(actionButton(\"2. Swing Button: decrement\", dec))\n                        add(actionButton(\"3. Swing Button: decrement\", dec))\n                    }\n                }\n            )\n\n            Spacer(modifier = Modifier.height(20.dp))\n            Button(\"2. Compose Button: increment\", inc)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Web Application\nDESCRIPTION: Gradle command for launching the web version of a Compose Multiplatform application with Wasm support.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-create-first-app.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasmJsBrowserRun -t --quiet\n```\n\n----------------------------------------\n\nTITLE: iOS ViewController Implementation for Compose Multiplatform\nDESCRIPTION: The iOS-specific implementation that launches the Compose Multiplatform UI. Uses ComposeUIViewController to wrap and render the App() composable function within the iOS platform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-explore-composables.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun MainViewController() = ComposeUIViewController { App() }\n```\n\n----------------------------------------\n\nTITLE: Adding Multiplatform Dependency in Kotlin Gradle Build File\nDESCRIPTION: This snippet shows how to add the kotlinx-datetime library as a multiplatform dependency in the build.gradle.kts file of a Kotlin Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"org.jetbrains.kotlinx:kotlinx-datetime:%dateTimeVersion%\")\n        } \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Android WebView Resource Example\nDESCRIPTION: Shows the HTML structure used in the Android WebView example, demonstrating how to reference a resource image within an HTML file loaded as a Compose Multiplatform resource.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<header>\n    <title>\n        Cat Resource\n    </title>\n</header>\n<body>\n    <img src=\"cat.jpg\">\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Desktop Layers for Compose Multiplatform\nDESCRIPTION: Sets system properties to enable COMPONENT-based layers for Compose on desktop, allowing dialogs to be rendered as separate Swing components within the same window. This requires offscreen rendering to be enabled.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nSystem.setProperty(\"compose.swing.render.on.graphics\", \"true\")\nSystem.setProperty(\"compose.layers.type\", \"COMPONENT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JDK Home for Compose Desktop Application\nDESCRIPTION: This snippet shows how to set a custom JDK home directory for a Compose Desktop application using the javaHome property. This is useful when you need to specify a JDK version compatible with jpackage (JDK 17 or higher).\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        javaHome = System.getenv(\"JDK_17\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Compose compiler to Gradle version catalog in TOML\nDESCRIPTION: This snippet shows how to add the Compose compiler Gradle plugin to the Gradle version catalog using TOML format. It sets up the necessary plugins including jetbrainsCompose, kotlinMultiplatform, and compose-compiler with appropriate version references.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-compiler.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[versions]\n# ...\nkotlin = \"%kotlinVersion%\"\n\n[plugins]\n# ...\njetbrainsCompose = { id = \"org.jetbrains.compose\", version.ref = \"compose-plugin\" }\nkotlinMultiplatform = { id = \"org.jetbrains.kotlin.multiplatform\", version.ref = \"kotlin\" }\ncompose-compiler = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }\n```\n\n----------------------------------------\n\nTITLE: Web Application URL\nDESCRIPTION: Local development server URL for accessing the web application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-create-first-app.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhttp://localhost:8080/\n```\n\n----------------------------------------\n\nTITLE: Desktop Application Implementation for Compose Multiplatform\nDESCRIPTION: The desktop-specific implementation that launches the Compose Multiplatform UI. Creates a desktop window application that renders the App() composable function and handles window close events.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-explore-composables.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() = application {\n    Window(onCloseRequest = ::exitApplication, title = \"ComposeDemo\") {\n        App()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Compose compiler plugin to modules using Compose Multiplatform\nDESCRIPTION: This snippet shows how to apply the Compose compiler plugin to individual modules that use Compose Multiplatform. Both the jetbrainsCompose and compose.compiler plugins need to be applied to each module that uses Compose.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-compiler.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    alias(libs.plugins.jetbrainsCompose)\n    alias(libs.plugins.compose.compiler)\n}\n```\n\n----------------------------------------\n\nTITLE: Android Platform Implementation\nDESCRIPTION: Implements the Platform interface for Android, using Android-specific SDK version information.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AndroidPlatform: Platform {\n    override val name: String =\n        \"Android ${android.os.Build.VERSION.SDK_INT}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Android Resources in Kotlin Multiplatform Library\nDESCRIPTION: Configuration snippet to enable multiplatform resources support in androidLibrary target. This setting is required to prevent MissingResourceException when accessing resources in an Android library module.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-180.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  androidLibrary {\n    experimentalProperties[\"android.experimental.kmp.enableAndroidResources\"] = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Layout Direction in Compose Multiplatform\nDESCRIPTION: This snippet demonstrates how to use CompositionLocalProvider to force a left-to-right layout direction on specific components within a Compose application, overriding the system's default locale-based behavior.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-rtl.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nCompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Ltr) {\n    Column(modifier = Modifier.fillMaxWidth()) {\n        // Components in this block will be laid out left-to-right\n        Text(\"LTR Latin\")\n        TextField(\"Hello world\\nHello world\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Plural String Resources in Non-Composable Code\nDESCRIPTION: Example of accessing plural string resources from non-composable code using coroutines.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ncoroutineScope.launch {\n    val appName = getPluralString(Res.plurals.new_message, 1, 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Private Key to File\nDESCRIPTION: Command to export the private GPG key to a file that will be used by Gradle to sign the artifacts during the publishing process.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngpg --armor --export-secret-keys F175482952A225BFC4A07A715EE6B5F76620B385CE > key.gpg\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS ViewModel and UI for Flow Handling\nDESCRIPTION: Creates an iOS ViewModel and updates the ContentView to handle and display the Flow of greetings. It uses SwiftUI and follows the MVVM pattern.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport Shared\n\nstruct ContentView: View {\n    @ObservedObject private(set) var viewModel: ViewModel\n\n    var body: some View {\n        ListView(phrases: viewModel.greetings)\n            .task { await self.viewModel.startObserving() }\n    }\n}\n\nextension ContentView {\n    @MainActor\n    class ViewModel: ObservableObject {\n        @Published var greetings: Array<String> = []\n        \n        func startObserving() {\n            // ...\n        }\n    }\n}\n\nstruct ListView: View {\n    let phrases: Array<String>\n\n    var body: some View {\n        List(phrases, id: \\.self) {\n            Text($0)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Source Set for Compose Desktop Application\nDESCRIPTION: This snippet demonstrates how to configure a custom Gradle source set for a Compose Desktop application. It creates a new source set and includes it in the application configuration.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\")\n    id(\"org.jetbrains.compose\")\n}\nval customSourceSet = sourceSets.create(\"customSourceSet\")\ncompose.desktop {\n    application {\n        from(customSourceSet)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Kotlin Flow with KMP-NativeCoroutines Annotation\nDESCRIPTION: Adds the @NativeCoroutines annotation to the Kotlin function returning a flow for proper iOS support.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.rickclephas.kmp.nativecoroutines.NativeCoroutines\n\nclass Greeting {\n    // ...\n   \n    @NativeCoroutines\n    fun greet(): Flow<String> = flow {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Directory for Native Distributions\nDESCRIPTION: This code snippet demonstrates how to set a custom output directory for native distributions in a Compose Desktop application using the outputBaseDir property.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            outputBaseDir.set(project.layout.buildDirectory.dir(\"customOutputDir\"))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme Colors for SpaceX App in Kotlin\nDESCRIPTION: Adds custom color definitions to the Color.kt file for indicating successful and unsuccessful rocket launches in the UI, using specific green and red color codes.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nval app_theme_successful = Color(0xff4BB543)\nval app_theme_unsuccessful = Color(0xffFC100D)\n```\n\n----------------------------------------\n\nTITLE: Running KDoctor Environment Check\nDESCRIPTION: Command to execute KDoctor and verify the development environment setup\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkdoctor\n```\n\n----------------------------------------\n\nTITLE: Adding Material Navigation Dependencies in Kotlin Multiplatform\nDESCRIPTION: Configuration for adding material-navigation and navigation-compose dependencies in the common source set.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-170.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncommonMain.dependencies {\n    implementation(\"org.jetbrains.androidx.navigation:navigation-compose:2.8.0-alpha10\")\n    implementation(\"org.jetbrains.compose.material:material-navigation:1.7.0-beta02\")\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing String Resources in Compose\nDESCRIPTION: Example of using stringResource to access a string resource in a Compose UI component.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nText(stringResource(Res.string.app_name))\n```\n\n----------------------------------------\n\nTITLE: Running Wasm Distribution Task\nDESCRIPTION: Gradle command to generate web application artifacts for deployment\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-apps.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasmJsBrowserDistribution\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Resource Directory with Gradle Task in Kotlin Compose\nDESCRIPTION: This snippet shows how to set up a custom resource directory populated by a Gradle task that downloads remote files.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class DownloadRemoteFiles : DefaultTask() {\n\n    @get:OutputDirectory\n    val outputDir = layout.buildDirectory.dir(\"downloadedRemoteFiles\")\n\n    @TaskAction\n    fun run() { /* your code for downloading files */ }\n}\n\ncompose.resources {\n    customDirectory(\n        sourceSetName = \"iosMain\",\n        directoryProvider = tasks.register<DownloadRemoteFiles>(\"downloadedRemoteFiles\").map { it.outputDir.get() }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest\nDESCRIPTION: Specifies the MainActivity class in the Android manifest file for the application configuration.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n\n    <application\n        ...\n        <activity\n            ...\n            android:name=\"com.jetbrains.spacetutorial.MainActivity\">\n            ...\n        </activity>\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Xcode Command Line Tools\nDESCRIPTION: Command to set the Xcode command line tools path to resolve scheme grabbing issues\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo xcode-select --switch /Applications/Xcode.app\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Namespace in Gradle (Kotlin)\nDESCRIPTION: Sets up the Android namespace for the library project in the Gradle build file. This ensures a unique R class is generated when resources are compiled.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid {\n    namespace = \"io.github.kotlinhandson.fibonacci\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Android-specific IOException with RuntimeException in Kotlin\nDESCRIPTION: This snippet shows how to replace the Android-specific IOException with a cross-platform RuntimeException in the LoginDataSource class.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Before\nreturn Result.Error(IOException(\"Error logging in\", e))\n\n// After\nreturn Result.Error(RuntimeException(\"Error logging in\", e))\n```\n\n----------------------------------------\n\nTITLE: Modifying HTML for Web App Container (HTML)\nDESCRIPTION: This HTML snippet shows how to add a named element to the body of the HTML file. This element will serve as a container for the Compose Web application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-modify-project.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n<div id=\"composeApplication\" style=\"width:400px; height: 500px;\"></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating Selectable Text with Context Menu\nDESCRIPTION: Demonstrates how to make text selectable and enable the copy action in a context menu by wrapping Text in a SelectionContainer component.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-context-menus.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.foundation.text.selection.SelectionContainer\nimport androidx.compose.material.Text\nimport androidx.compose.ui.window.singleWindowApplication\n\nfun main() = singleWindowApplication(title = \"Context menu\") {\n    SelectionContainer {\n        Text(\"Hello World!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Note Block in Markdown\nDESCRIPTION: A markdown note block using custom styling to highlight important disclaimers about the roadmap.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/kotlin-multiplatform-roadmap.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> * This roadmap is not an exhaustive list of all things the team is working on, only the biggest projects.\n> * There's no commitment to delivering specific features or fixes in specific versions.\n> * We will adjust our priorities as we go and update the roadmap accordingly.\n>\n{style=\"note\"}\n```\n\n----------------------------------------\n\nTITLE: Installing KDoctor via Homebrew\nDESCRIPTION: Command to install the KDoctor environment checking tool using Homebrew package manager\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install kdoctor\n```\n\n----------------------------------------\n\nTITLE: Adding Explicit material-icons-core Dependency in Kotlin\nDESCRIPTION: Shows how to explicitly add the material-icons-core dependency to a project's build.gradle.kts file after the automatic dependency was removed in Compose Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-180.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"org.jetbrains.compose.material:material-icons-core:1.6.11\")\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest with Custom Application Class\nDESCRIPTION: Modifies the Android manifest to use the custom MainApplication class, enabling Koin dependency injection for the entire application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n    <application\n        ...\n        android:name=\"com.jetbrains.spacetutorial.MainApplication\">\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding Serialization Plugin to Shared Module\nDESCRIPTION: Adds the Kotlin serialization plugin to the shared module's Gradle build file, enabling serialization and deserialization of data objects.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    kotlin(\"plugin.serialization\") version \"%kotlinVersion%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Time Advancement for Testing Delayed Effects\nDESCRIPTION: Shows how to properly test coroutines with delays by advancing the test clock, accounting for the change in idle state handling.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-180.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nvar updateText by mutableStateOf(false)\nvar text by mutableStateOf(\"0\")\nsetContent {\n    LaunchedEffect(updateText) {\n        if (updateText) {\n            delay(1000)\n            text = \"1\"\n        }\n    }\n}\nupdateText = true\nwaitForIdle()\n// Since waitForIdle() no longer waits for the delayed LaunchedEffect() to complete,\n// the test needs to advance time to make the following assertion correct:\nmainClock.advanceTimeBy(1001)\n\nassertEquals(\"1\", text)\n```\n\n----------------------------------------\n\nTITLE: Creating Greeting Class in Kotlin Multiplatform\nDESCRIPTION: Defines a Greeting class in the shared module that provides a platform-specific greeting message.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.jetbrains.simplelogin.shared\n\nclass Greeting {\n    private val platform = getPlatform()\n\n    fun greet(): String {\n        return \"Hello, ${platform.name}!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Runtime Test Implementation\nDESCRIPTION: Unit test for Android runtime detection verifying OpenJDK environment and version.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.test.Test\nimport kotlin.test.assertContains\nimport kotlin.test.assertEquals\n\nclass AndroidRuntimeTest {\n    @Test\n    fun shouldDetectAndroid() {\n        val runtime = determineCurrentRuntime()\n        assertContains(runtime.name, \"OpenJDK\")\n        assertEquals(runtime.version, \"17.0\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Configuration of Compose Desktop Application\nDESCRIPTION: This snippet demonstrates how to manually configure a Compose Desktop application. It disables the default configuration, specifies files to include, sets the main JAR file, and adds task dependencies.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        disableDefaultConfiguration()\n        fromFiles(project.fileTree(\"libs/\") { include(\"**/*.jar\") })\n        mainJar.set(project.file(\"main.jar\"))\n        dependsOn(\"mainJarTask\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Platform Factory Implementation\nDESCRIPTION: Implements the platform factory function for iOS.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nactual fun getPlatform(): Platform = IOSPlatform()\n```\n\n----------------------------------------\n\nTITLE: Android Platform Factory Implementation\nDESCRIPTION: Implements the platform factory function for Android.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nactual fun getPlatform(): Platform = AndroidPlatform()\n```\n\n----------------------------------------\n\nTITLE: Modifying Gradle Task for Automatic Release in GitHub Actions Workflow\nDESCRIPTION: This code snippet shows how to modify the GitHub Actions workflow to automatically release artifacts on Maven Central once the deployment is verified. It replaces the 'publishToMavenCentral' task with 'publishAndReleaseToMavenCentral'.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\npublishAndReleaseToMavenCentral\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Module Dependency in Android Gradle\nDESCRIPTION: Adds a dependency on the shared module to the Android application's Gradle file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\ndependencies {\n    // ...\n    implementation(project(\":shared\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Library References in Version Catalog\nDESCRIPTION: Defines the library references for all required dependencies including SQLDelight drivers, Koin for dependency injection, Kotlinx libraries, Ktor clients, and Android UI components.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[libraries]\n...\nandroid-driver = { module = \"app.cash.sqldelight:android-driver\", version.ref = \"sqlDelight\" }\nkoin-androidx-compose = { module = \"io.insert-koin:koin-androidx-compose\", version.ref = \"koin\" }\nkoin-core = { module = \"io.insert-koin:koin-core\", version.ref = \"koin\" }\nkotlinx-coroutines-core = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\", version.ref = \"coroutinesVersion\" }\nkotlinx-datetime = { module = \"org.jetbrains.kotlinx:kotlinx-datetime\", version.ref = \"dateTimeVersion\" }\nktor-client-android = { module = \"io.ktor:ktor-client-android\", version.ref = \"ktor\" }\nktor-client-content-negotiation = { module = \"io.ktor:ktor-client-content-negotiation\", version.ref = \"ktor\" }\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\nktor-client-darwin = { module = \"io.ktor:ktor-client-darwin\", version.ref = \"ktor\" }\nktor-serialization-kotlinx-json = { module = \"io.ktor:ktor-serialization-kotlinx-json\", version.ref = \"ktor\" }\nnative-driver = { module = \"app.cash.sqldelight:native-driver\", version.ref = \"sqlDelight\" }\nruntime = { module = \"app.cash.sqldelight:runtime\", version.ref = \"sqlDelight\" }\nandroidx-lifecycle-viewmodel-compose = { group = \"androidx.lifecycle\", name = \"lifecycle-viewmodel-compose\", version.ref = \"lifecycleViewmodelCompose\" }\nandroidx-compose-material3 = { module = \"androidx.compose.material3:material3\", version.ref=\"material3\" }\n```\n\n----------------------------------------\n\nTITLE: Accessing String Resources in Non-Composable Code\nDESCRIPTION: Example of accessing string resources from non-composable code using coroutines.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncoroutineScope.launch {\n    val appName = getString(Res.string.app_name)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Resources in XML\nDESCRIPTION: XML structure for defining simple string resources and string arrays in a Compose Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\n    <string name=\"app_name\">My awesome app</string>\n    <string name=\"title\">Some title</string>\n    <string-array name=\"str_arr\">\n        <item>item \\u2605</item>\n        <item>item \\u2318</item>\n        <item>item \\u00BD</item>\n    </string-array>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Platform in Kotlin Multiplatform\nDESCRIPTION: Provides the iOS-specific implementation of the Platform interface.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.jetbrains.simplelogin.shared\n\nimport platform.UIKit.UIDevice\n\nclass IOSPlatform: Platform {\n    override val name: String = UIDevice.currentDevice.systemName() + \" \" + UIDevice.currentDevice.systemVersion\n}\n\nactual fun getPlatform(): Platform = IOSPlatform()\n```\n\n----------------------------------------\n\nTITLE: Running Desktop Tests via Gradle\nDESCRIPTION: Command to execute desktop UI tests using Gradle in a Compose Multiplatform project.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-ui-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew desktopTest\n```\n\n----------------------------------------\n\nTITLE: Accessing multiplatform resources from external libraries\nDESCRIPTION: Demonstrates how to use the getUri() function to pass separate files to a system API, specifically mentioning the kotlinx-io library as an example.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`getUri()`](compose-multiplatform-resources-usage.md#accessing-multiplatform-resources-from-external-libraries)\n```\n\n----------------------------------------\n\nTITLE: Including Development Version Repository for Compose Multiplatform in Kotlin\nDESCRIPTION: Code snippet showing how to add the repository for accessing development versions of Compose Multiplatform. Development versions are not available in Maven Central and require adding a specific repository URL to your project configuration.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-compatibility-and-versioning.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nmaven(\"https://maven.pkg.jetbrains.space/public/p/compose/dev\")\n```\n\n----------------------------------------\n\nTITLE: Adding Compose compiler plugin to root build.gradle.kts\nDESCRIPTION: This snippet demonstrates how to add the Gradle plugin to the root build.gradle.kts file. It applies the jetbrainsCompose and compose.compiler plugins with 'apply false' to ensure they're only available to modules that explicitly apply them.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-compiler.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // ...\n    alias(libs.plugins.jetbrainsCompose) apply false\n    alias(libs.plugins.compose.compiler) apply false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Expected Runtime Function in Kotlin Multiplatform\nDESCRIPTION: Common declaration of determineCurrentRuntime function using expect keyword, which requires platform-specific implementations.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect fun determineCurrentRuntime(): CurrentRuntime\n```\n\n----------------------------------------\n\nTITLE: Adding Internet Permission to Android Manifest\nDESCRIPTION: Adds the INTERNET permission to the Android manifest file, allowing the application to access the internet for API requests.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <!--...-->\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Uploading GPG Public Key to Keyserver\nDESCRIPTION: Command to upload the public GPG key to a keyserver, which is required for Maven Central to verify the signatures on your artifacts.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver keyserver.ubuntu.com --send-keys F175482952A225BFC4A07A715EE6B5F76620B385CE\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Plugins in Version Catalog\nDESCRIPTION: Defines the Gradle plugins for kotlinx.serialization and SQLDelight that will be used in the project build configuration.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[plugins]\n...\nkotlinxSerialization = { id = \"org.jetbrains.kotlin.plugin.serialization\", version.ref = \"kotlin\" }\nsqldelight = { id = \"app.cash.sqldelight\", version.ref = \"sqlDelight\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language for Context Menus\nDESCRIPTION: Demonstrates how to override the system's language setting and specify a particular language for context menus by setting a default locale before running the application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-context-menus.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\njava.util.Locale.setDefault(java.util.Locale(\"en\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Greeting Class with New Functionality in Kotlin Multiplatform\nDESCRIPTION: This snippet shows how to update the Greeting class to include the new daysPhrase() function, demonstrating the integration of the added dependency into the existing codebase.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-dependencies.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Greeting {\n    private val platform: Platform = getPlatform()\n\n    fun greet(): List<String> = buildList {\n        add(if (Random.nextBoolean()) \"Hi!\" else \"Hello!\")\n        add(\"Guess what this is! > ${platform.name.reversed()}!\")\n        add(daysPhrase())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Dependency in Compose Multiplatform\nDESCRIPTION: Setup code to add the navigation library dependency to the commonMain source set in your Gradle build file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-navigation-routing.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    // ...\n    sourceSets {\n        // ...\n        commonMain.dependencies {\n            // ...\n            implementation(\"org.jetbrains.androidx.navigation:navigation-compose:%composeNavigationVersion%\")\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Module in Android Activity\nDESCRIPTION: Demonstrates how to use the shared module's Greeting class in an Android Activity.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n    Log.i(\"Login Activity\", \"Hello from shared module: \" + (Greeting().greet()))\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: GPG Key User Identity Configuration\nDESCRIPTION: Example of the interactive prompts for configuring the user identity associated with the PGP key, including name and email address.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Jane Doe\nEmail address: janedoe@example.com\nComment:\nYou selected this USER-ID:\n    \"Jane Doe <janedoe@example.com>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JVM Target for Compose Desktop Application\nDESCRIPTION: This code snippet shows how to configure a custom Kotlin JVM target for a Compose Desktop application in a multiplatform project. It creates a new JVM target and includes it in the application configuration.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"multiplatform\")\n    id(\"org.jetbrains.compose\")\n} \nkotlin {\n    jvm(\"customJvmTarget\") {}\n}\ncompose.desktop {\n    application {\n        from(kotlin.targets[\"customJvmTarget\"])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Validation with Kotlin Regex\nDESCRIPTION: This code replaces the Android-specific Patterns.EMAIL_ADDRESS matcher with a Kotlin regular expression for email validation in the LoginDataValidator class.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Before\nprivate fun isEmailValid(email: String) = Patterns.EMAIL_ADDRESS.matcher(email).matches()\n\n// After\nprivate fun isEmailValid(email: String) = emailRegex.matches(email)\n\ncompanion object {\n    private val emailRegex = \n        (\"[a-zA-Z0-9\\\\+\\\\.\\\\_\\\\%\\\\-\\\\+]{1,256}\" +\n            \"\\\\@\" +\n            \"[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}\" +\n            \"(\" +\n            \"\\\\.\" +\n            \"[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,25}\" +\n            \")+\").toRegex()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Window Size Class Dependency in Kotlin Multiplatform\nDESCRIPTION: Configuration for adding material3-window-size-class dependency in the common source set.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-170.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncommonMain.dependencies {\n    implementation(\"org.jetbrains.compose.material3:material3-window-size-class:%composeVersion%\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Runtime Detection\nDESCRIPTION: iOS-specific implementation of determineCurrentRuntime that uses Platform.osFamily to determine the runtime environment.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.experimental.ExperimentalNativeApi\nimport kotlin.native.Platform\n\n@OptIn(ExperimentalNativeApi::class)\nactual fun determineCurrentRuntime(): CurrentRuntime {\n    val name = Platform.osFamily.name.lowercase()\n    return CurrentRuntime(name, null)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Resource Class in Kotlin\nDESCRIPTION: Example of importing the generated Res class and a specific resource from it in a Kotlin file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport project.composeapp.generated.resources.Res\nimport project.composeapp.generated.resources.example_image\n```\n\n----------------------------------------\n\nTITLE: Running KDoctor Team ID Check\nDESCRIPTION: Command to list all Team IDs configured on the system using KDoctor tool.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-create-first-app.md#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nkdoctor --team-ids\n```\n\n----------------------------------------\n\nTITLE: Unit testing the CurrentRuntime class in Kotlin Multiplatform\nDESCRIPTION: Test cases for the CurrentRuntime class using kotlin.test library. Tests various version parsing scenarios including null values, simple versions, and complex version strings.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\nclass CurrentRuntimeTest {\n    @Test\n    fun shouldDisplayDetails() {\n        val runtime = CurrentRuntime(\"MyRuntime\", \"1.1\")\n        assertEquals(\"MyRuntime version 1.1\", runtime.toString())\n    }\n\n    @Test\n    fun shouldHandleNullVersion() {\n        val runtime = CurrentRuntime(\"MyRuntime\", null)\n        assertEquals(\"MyRuntime version unknown\", runtime.toString())\n    }\n\n    @Test\n    fun shouldParseNumberFromVersionString() {\n        val runtime = CurrentRuntime(\"MyRuntime\", \"1.2 Alpha Experimental\")\n        assertEquals(\"MyRuntime version 1.2\", runtime.toString())\n    }\n\n    @Test\n    fun shouldHandleMissingVersion() {\n        val runtime = CurrentRuntime(\"MyRuntime\", \"Alpha Experimental\")\n        assertEquals(\"MyRuntime version unknown\", runtime.toString())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Android-only API References\nDESCRIPTION: List of Android-specific API references including Context, BitmapFactory, Activity, and other Android-exclusive components that aren't available on other platforms.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-android-only-components.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.context.Context\nLocalContext\nLocalConfiguration\nandroid.graphics.BitmapFactory\nandroid.graphics.Bitmap\nImageBitmap.asAndroidBitmap()\nandroid.app.Activity\nandroid.app.Activity.setContent()\nComposeView\nLocalView\nModifier.pointerInteropFilter()\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources by String ID in Compose Multiplatform\nDESCRIPTION: A code snippet demonstrating how to access resources by their string identifiers using the Res.allDrawableResources property map. This allows for more flexible resource access patterns.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-170.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nImage(painterResource(Res.allDrawableResources[\"compose_multiplatform\"]!!), null)\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Runtime Detection\nDESCRIPTION: Android-specific implementation of determineCurrentRuntime that retrieves Java VM properties to determine runtime environment.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-run-tests.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nactual fun determineCurrentRuntime(): CurrentRuntime {\n    val name = System.getProperty(\"java.vm.name\") ?: \"Android\"\n\n    val version = System.getProperty(\"java.version\")\n\n    return CurrentRuntime(name, version)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SQLDelight Database Interface (Shell)\nDESCRIPTION: This shell command generates the AppDatabase interface based on the SQL queries defined in the .sq file.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/development/multiplatform-ktor-sqldelight.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew generateCommonMainAppDatabaseInterface\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Resource Display in WebView\nDESCRIPTION: A simple HTML file that displays an image resource. This file is located in the commonMain source set and accessed by the WebView in the Android application.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-170.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<header>\n    <title>\n        Cat Resource\n    </title>\n</header>\n<body>\n    <img src=\"cat.jpg\">\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transparent Background for ComposeUIViewController\nDESCRIPTION: Demonstrates how to set the opacity of a ComposeUIViewController's background to transparent on iOS. This can affect performance due to additional blending.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval appController = ComposeUIViewController(configure = {\n      this.opaque = false\n}) {\n    App()\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Class Generation in Gradle\nDESCRIPTION: Gradle configuration for customizing the generation of the Res class, including visibility, package name, and generation conditions.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-multiplatform-resources-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.resources {\n    publicResClass = false\n    packageOfResClass = \"me.sample.library.resources\"\n    generateResClass = auto\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GPG with Homebrew\nDESCRIPTION: Command to install the GPG tool using Homebrew package manager. GPG is required for generating PGP keys to sign Maven artifacts.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gpg\n```\n\n----------------------------------------\n\nTITLE: Including JDK Modules in Compose Multiplatform Distribution\nDESCRIPTION: A Gradle configuration snippet that demonstrates how to include specific JDK modules in the distribution package. This is necessary to avoid ClassNotFoundException errors at runtime when the application uses classes from modules not included by default.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-native-distribution.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncompose.desktop {\n    application {\n        nativeDistributions {\n            modules(\"java.sql\")\n            // Alternatively: includeAllModules = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration from Bundle to SavedState in Navigation (Before)\nDESCRIPTION: Shows the old approach for accessing navigation arguments using Bundle before the migration to SavedState in Compose Multiplatform Navigation library.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/whats-new/whats-new-compose-180.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncomposable(Destinations.Followers.route) { navBackStackEntry ->\n    val uId = navBackStackEntry.arguments?.getString(\"userid\")\n    val page = navBackStackEntry.arguments?.getString(\"page\")\n    if (uId != null && page != null) {\n        FollowersMainComposable(navController, accountId = uId, page = page)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Property Implementation\nDESCRIPTION: Implements the expected property for iOS platform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nactual val num: Int = 2\n```\n\n----------------------------------------\n\nTITLE: HTML Dependency Table Code\nDESCRIPTION: HTML table structure listing dependencies and supported platforms for Kotlin Multiplatform development.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-samples.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n    <tr>\n        <td>\n            <list>\n                <li><code>ktor-client</code></li>\n                <li><code>koin</code></li>\n                <li><code>navigation-compose</code></li>\n                <li><code>Coil</code></li>\n                <li><code>Jetpack ViewModel</code></li>\n            </list>\n        </td>\n        <td>\n            <list>\n                <li>Compose Multiplatform on Android, iOS, desktop, and web</li>\n            </list>\n        </td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Listing GPG Keys\nDESCRIPTION: Command to list all the GPG keys in your keyring, useful for finding the key ID needed for the next steps.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngpg --list-keys\n```\n\n----------------------------------------\n\nTITLE: GPG Key Validity Period Configuration\nDESCRIPTION: Example of the interactive prompts for configuring the validity period of the PGP key, showing how to set it to never expire.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPlease specify how long the key should be valid.\n    0 = key does not expire\n    <n>  = key expires in n days\n    <n>w = key expires in n weeks\n    <n>m = key expires in n months\n    <n>y = key expires in n years\nKey is valid for? (0) 0\nKey does not expire at all\n\nIs this correct? (y/N) y\n```\n\n----------------------------------------\n\nTITLE: Expected Property Declaration\nDESCRIPTION: Demonstrates declaring an expected property in the common module.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect val num: Int\n```\n\n----------------------------------------\n\nTITLE: GPG Private Key File Content Example\nDESCRIPTION: Example of what the exported GPG private key file contents look like, showing the PGP header and footer format.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PGP PRIVATE KEY BLOCK-----\nlQdGBGby2X4BEACvFj7cxScsaBpjty40ehgB6xRmt8ayt+zmgB8p+z8njF7m2XiN\n...\nbpD/h7ZI7FC0Db2uCU4CYdZoQVl0MNNC1Yr56Pa68qucadJhY0sFNiB23KrBUoiO \n-----END PGP PRIVATE KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: GPG Key Generation Interactive Process Example\nDESCRIPTION: Example of the interactive prompts and responses when generating a PGP key with GPG, showing the default selections for key type, curve, validity period, and user information.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPlease select what kind of key you want:\n    (1) RSA and RSA\n    (2) DSA and Elgamal\n    (3) DSA (sign only)\n    (4) RSA (sign only)\n    (9) ECC (sign and encrypt) *default*\n    (10) ECC (sign only)\n    (14) Existing key from card\nYour selection? 9\n\nPlease select which elliptic curve you want:\n    (1) Curve 25519 *default*\n    (4) NIST P-384\n    (6) Brainpool P-256\nYour selection? 1\n```\n\n----------------------------------------\n\nTITLE: Netflix Engineers' Quote on Kotlin Multiplatform Implementation\nDESCRIPTION: A quote from Netflix senior software engineers explaining how they use Kotlin Multiplatform to write platform-agnostic business logic once and compile it for both Android and iOS platforms to support offline capabilities and faster product delivery.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/journal/cross-platform-mobile-development.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> The high likelihood of unreliable network connectivity led us to lean into mobile solutions \n> for robust client side persistence and offline support. The need for fast product delivery \n> led us to experiment with a multiplatform architecture. Now we're taking this one step further \n> by using Kotlin Multiplatform to write platform-agnostic business logic once in Kotlin \n> and compiling to a Kotlin library for Android and a native Universal Framework for iOS.\n>\n> {style=\"tip\"}\n```\n\n----------------------------------------\n\nTITLE: GPG Key Listing Output Example\nDESCRIPTION: Example output when listing GPG keys, showing the format of the key information including the key ID that will be needed for uploading and exporting the key.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\npub   ed25519 2024-10-06 [SC]\n      F175482952A225BFD4A07A713EE6B5F76620B385CE\nuid   [ultimate] Jane Doe <janedoe@example.com>\n      sub   cv25519 2024-10-06 [E]\n```\n\n----------------------------------------\n\nTITLE: Generating a Full PGP Key Pair\nDESCRIPTION: Command to generate a new PGP key pair that will be used for signing artifacts when publishing to Maven Central.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-publish-libraries.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg --full-generate-key\n```\n\n----------------------------------------\n\nTITLE: Referencing Kotlin Multiplatform Libraries in HTML Table\nDESCRIPTION: HTML code snippets showing library references commonly used in Kotlin Multiplatform projects. These code blocks appear in the 'Noteworthy libraries' column of the sample projects table.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-samples.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>kotlinx-serialization</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>kotlinx-datetime</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>kotlinx-coroutines</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>decompose</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>koin</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>jsonpathkt-kotlinx</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>horologist</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>google-cloud</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>firebase</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>bare-graphql</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>apollo</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>accompanist</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>ktor-client</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>multiplatform-settings</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>kermit</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>hyperdrive-multiplatformx</code>\n```\n\n----------------------------------------\n\nTITLE: Adding Internet Access Permission in Android Manifest\nDESCRIPTION: Updates the Android Manifest file to include internet access permission, which is necessary for network requests made from the shared module.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-upgrade-app.md#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    ...\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Checking Java Installation in Terminal\nDESCRIPTION: Command to verify Java installation and version on the system\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -version\n```\n\n----------------------------------------\n\nTITLE: Configuring Desktop Window Properties for Compose Multiplatform App\nDESCRIPTION: Sets up the desktop application window with a specific size, position, and title using Compose Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose-onboard/compose-multiplatform-new-project.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() = application {\n    val state = rememberWindowState(\n        size = DpSize(400.dp, 250.dp),\n        position = WindowPosition(300.dp, 300.dp)\n    )\n    Window(title = \"Local Time App\", onCloseRequest = ::exitApplication, state = state) {\n        App()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Code Block Demonstrating App Store Guidelines Reference\nDESCRIPTION: A reference to Apple's App Store guidelines regarding code execution limitations, used to address concerns about app rejection risks.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/journal/multiplatform-introduce-your-team.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nApp Store Review Guideline 2.5.2\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform-Specific APIs in Common Kotlin (Incorrect)\nDESCRIPTION: Demonstrates an incorrect attempt to use Java-specific Random class in common Kotlin code, which is not allowed in Kotlin Multiplatform.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-onboard/multiplatform-create-first-app.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.util.Random\n\nclass Greeting {\n    private val platform: Platform = getPlatform()\n\n    fun greet(): String {\n        val firstWord = if (Random().nextBoolean()) \"Hi!\" else \"Hello!\"\n\n        return firstWord\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Interop Blending in Kotlin\nDESCRIPTION: Code showing how to enable experimental interop blending between Compose Multiplatform and Swing components using system properties. This must be set before executing any Compose code.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-swing-interoperability.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    System.setProperty(\"compose.interop.blending\", \"true\")\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AccessibilitySyncOptions for Compose Multiplatform iOS\nDESCRIPTION: Example of configuring a ComposeUIViewController to always synchronize the accessibility tree for debugging and testing purposes. This ensures the accessibility tree is rewritten with every UI update.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/ios/compose-ios-accessibility.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nComposeUIViewController(configure = {\n    accessibilitySyncOptions = AccessibilitySyncOptions.Always(debugLogger = null)\n}) {\n    // your @Composable content\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Off-Screen Rendering with System Property\nDESCRIPTION: Code example demonstrating how to enable experimental off-screen rendering for Compose panels in Swing applications using the System.setProperty() method at the application entry point.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-swing-interoperability.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    System.setProperty(\"compose.swing.render.on.graphics\", \"true\")\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Xcode Run Script for Kotlin Multiplatform Framework\nDESCRIPTION: This shell script is added to the Xcode project's build phases to compile and embed the Kotlin Multiplatform framework.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/multiplatform-integrate-in-existing-app.md#2025-04-23_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncd \"$SRCROOT/..\"\n./gradlew :shared:embedAndSignAppleFrameworkForXcode\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Access Bridge on Windows for Accessibility\nDESCRIPTION: Command to enable Java Access Bridge on Windows, which is required for accessibility support.\nSOURCE: https://github.com/jetbrains/kotlin-multiplatform-dev-docs/blob/master/topics/compose/compose-desktop-accessibility.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n%\\JAVA_HOME%\\bin\\jabswitch.exe /enable\n```"
  }
]