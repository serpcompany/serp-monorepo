[
  {
    "owner": "kianbazza",
    "repo": "ui",
    "content": "TITLE: Adding DataTableFilter Component to React Component\nDESCRIPTION: Example of how to import and use the DataTableFilter component within a React component, passing it the table instance.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DataTableFilter } from '@/components/data-table-filter'\n\nexport default function DataTable() {\n  return (\n    <div>\n      <DataTableFilter table={table} />\n      <div className=\"rounded-md border\">\n        <Table>\n          {/* ... */}\n        </Table>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to New defineMeta Interface with Accessor Functions\nDESCRIPTION: Example showing how to migrate from the old defineMeta interface (using property keys) to the new interface using accessor functions. This change enables filtering on nested properties and computed values.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = [\n  /* ... */\n  columnHelper.accessor('status', {\n    meta: defineMeta(\n      'status', // [!code --]\n      row => row.status, // [!code ++]\n      { \n        type: 'option',\n        icon: CircleDotDashedIcon,\n        options: ISSUE_STATUSES,\n      }\n    ),\n  }),\n  columnHelper.accessor(row => row.user.name, {\n    meta: defineMeta(\n      row => row.user.name,\n      { \n        type: 'option',\n        icon: AvatarIcon,\n        /* ... */\n      }\n    ),\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Column Definition with Filter Function and Meta in TypeScript\nDESCRIPTION: Example of how to update a column definition to use the provided filterFn and defineMeta helper function for enabling filtering.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const columns = [\n  columnHelper.accessor('status', {\n    filterFn: filterFn('option'),\n    meta: defineMeta(row => row.status, {\n      displayName: 'Status',\n      type: 'option',\n      icon: CircleDotDashedIcon,\n      options: ISSUE_STATUSES,\n    }),\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Integrating nuqs with Data Table Component in React\nDESCRIPTION: React component code showing how to integrate nuqs for URL state persistence with the data table filter component.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { parseAsJson, useQueryState } from 'nuqs'\nimport { type ColumnDef } from '@tanstack/react-table'\n\nexport default function YourDataTableComponent() {\n  const [queryFilters, setQueryFilters] = useQueryState(\n    'filter',\n    parseAsJson(dataTableFilterQuerySchema.parse).withDefault([]),\n  )\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    // Replace `Issue` with your data type\n    () => initializeFiltersFromQuery(queryFilters, columns as ColumnDef<Issue>[]),\n  )\n\n  const table = useReactTable({\n    /* ... */\n  })\n\n  React.useEffect(() => {\n    setQueryFilters(\n      columnFilters.map((f) => ({\n        id: f.id,\n        value: { ...(f.value as any), columnMeta: undefined },\n      })),\n    )\n  }, [columnFilters, setQueryFilters])\n\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for TypeScript in React Vite Project\nDESCRIPTION: This snippet shows how to configure ESLint for a React project using TypeScript and Vite. It includes options for type-aware lint rules and additional configuration for production applications.\nSOURCE: https://github.com/kianbazza/ui/blob/main/examples/vite-basic/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  extends: [\n    // Remove ...tseslint.configs.recommended and replace with this\n    ...tseslint.configs.recommendedTypeChecked,\n    // Alternatively, use this for stricter rules\n    ...tseslint.configs.strictTypeChecked,\n    // Optionally, add this for stylistic rules\n    ...tseslint.configs.stylisticTypeChecked,\n  ],\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Initializing Filters from Query\nDESCRIPTION: TypeScript function to initialize filters from a query, used in conjunction with nuqs for URL state persistence.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction initializeFiltersFromQuery<TData, TValue>(\n  filters: DataTableFilterQuerySchema,\n  columns: ColumnDef<TData, TValue>[],\n) {\n  return filters && filters.length > 0\n    ? filters.map((f) => {\n        const columnMeta = columns.find((c) => c.id === f.id)!.meta!\n\n        const values =\n          columnMeta.type === 'date'\n            ? f.value.values.map((v: string) => new Date(v))\n            : f.value.values\n\n        return {\n          ...f,\n          value: {\n            operator: f.value.operator,\n            values,\n            columnMeta,\n          },\n        }\n      })\n    : []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Column Meta Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ColumnMeta, which specifies the metadata shape for a column including display name, icon, data type, and option-related properties.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ElementType<T> = T extends (infer U)[] ? U : T\n\ninterface ColumnMeta<TData extends RowData, TValue> {\n  /* The display name of the column. */\n  displayName: string\n  /* The column icon. */\n  icon: LucideIcon\n  /* The data type of the column. */\n  type: ColumnDataType\n  /* An optional list of options for the column. */\n  /* This is used for columns with type 'option' or 'multiOption'. */\n  /* If the options are known ahead of time, they can be defined here. */\n  /* Otherwise, they will be dynamically generated based on the data. */\n  options?: ColumnOption[]\n  /* An optional function to transform columns with type 'option' or 'multiOption'. */\n  /* This is used to convert each raw option into a ColumnOption. */\n  transformOptionFn?: (\n    value: ElementType<NonNullable<TValue>>,\n  ) => ColumnOption\n  /* An optional \"soft\" max for the range slider. */\n  /* This is used for columns with type 'number'. */\n  max?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React-specific ESLint Plugins to Vite Project\nDESCRIPTION: This snippet demonstrates how to install and configure React-specific ESLint plugins (eslint-plugin-react-x and eslint-plugin-react-dom) in a Vite project. It includes importing the plugins and adding their recommended rules to the ESLint configuration.\nSOURCE: https://github.com/kianbazza/ui/blob/main/examples/vite-basic/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport reactX from 'eslint-plugin-react-x'\nimport reactDom from 'eslint-plugin-react-dom'\n\nexport default tseslint.config({\n  plugins: {\n    // Add the react-x and react-dom plugins\n    'react-x': reactX,\n    'react-dom': reactDom,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended typescript rules\n    ...reactX.configs['recommended-typescript'].rules,\n    ...reactDom.configs.recommended.rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for Query Filter State\nDESCRIPTION: TypeScript code defining a Zod schema for the query filter state, used for URL state persistence with nuqs.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod'\n\nconst dataTableFilterQuerySchema = z\n  .object({\n    id: z.string(),\n    value: z.object({\n      operator: z.string(),\n      values: z.any(),\n    }),\n  })\n  .array()\n  .min(0)\n\ntype DataTableFilterQuerySchema = z.infer<typeof dataTableFilterQuerySchema>\n```\n\n----------------------------------------\n\nTITLE: Defining Column Data Types in TypeScript\nDESCRIPTION: TypeScript definition for the ColumnDataType enum, which specifies the supported data types for column filtering.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ColumnDataType =\n  | 'text'         /* Text data */\n  | 'number'       /* Numerical data */\n  | 'date'         /* Dates */\n  | 'option'       /* Single-valued option (e.g. status) */\n  | 'multiOption'  /* Multi-valued option (e.g. labels) */\n```\n\n----------------------------------------\n\nTITLE: Defining Column Option Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ColumnOption, which represents individual options for 'option' and 'multiOption' column types.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ColumnOption {\n  /* The label to display for the option. */\n  label: string\n  /* The internal value of the option. */\n  value: string\n  /* An optional icon to display next to the label. */\n  icon?: React.ReactElement | React.ElementType\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nuqs and zod for URL State Persistence\nDESCRIPTION: Command to install the nuqs and zod packages for integrating URL state persistence with the data table filter.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuqs zod\n```\n\n----------------------------------------\n\nTITLE: Installing Data Table Filter Component with shadcn CLI\nDESCRIPTION: Command to install the data table filter component into your project using the shadcn CLI.\nSOURCE: https://github.com/kianbazza/ui/blob/main/apps/web/content/docs/data-table-filter.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add https://ui.bazza.dev/r/data-table-filter.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Logo and Title in HTML\nDESCRIPTION: This HTML snippet centers and displays the project logo, title, and description for bazza/ui. It includes links to the project website and sets up the visual structure of the README.\nSOURCE: https://github.com/kianbazza/ui/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://ui.bazza.dev\">\n    <img src=\"https://github.com/kianbazza/ui/blob/main/assets/images/bazzaui-v3-color.png?raw=true\" height=\"96\" width=\"96\">\n    <h3 align=\"center\">bazza/ui</h3>\n  </a>\n</p>\n\n<p align=\"center\">\n  Hand-crafted, powerful, modern React components.\n  <br />\n  <b>Open source. Open code. Free to use.</b>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://ui.bazza.dev/docs\"><strong>Documentation</strong></a> ·\n  <a href=\"https://ui.bazza.dev/contribute\"><strong>Contribute</strong></a> ·\n  <a href=\"https://ui.bazza.dev/contact\"><strong>Contact Us</strong></a>\n</p>\n```"
  }
]