[
  {
    "owner": "pyproject-nix",
    "repo": "pyproject.nix",
    "content": "TITLE: Implementing a Lock File Converter with pyproject.nix in Nix\nDESCRIPTION: A minimal example that demonstrates how to implement a lock file converter using pyproject.nix. This is a simplified version; real implementations like uv2nix are more complex and follow best practices specific to pyproject.nix.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/usage.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ./minimal-lock.nix}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with Pyproject.nix\nDESCRIPTION: This snippet demonstrates how to create a virtual environment using pyproject.nix. It shows how packages are aggregated into a virtual environment, which is the preferred method for consuming Python packages in this system.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pyproject-nix, pkgs }:\n\nlet\n  python = pkgs.python312;\n\n  # Inject your own packages on top with overrideScope\n  pythonSet = pkgs.callPackage pyproject-nix.build.packages {\n    inherit python;\n  };\n\nin pythonSet.pythonPkgsHostHost.mkVirtualEnv \"test-venv\" {\n  build = [ ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Base Package Set with pyproject.nix in Nix\nDESCRIPTION: This snippet demonstrates how to create a base package set using pyproject.nix. It calls the packages function from pyproject-nix.build, passing in the Python interpreter as an argument. This sets up the scaffolding for a Python package set without including actual Python packages.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/packages.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n# Returns a scope with base packages.\npkgs.callPackage pyproject-nix.build.packages {\n  python = interpreter;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Flake for Python Project\nDESCRIPTION: Nix flake configuration for setting up a Python development environment and building packages based on pyproject.toml specifications.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/use-cases/pyproject.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/pyproject/flake.nix}}\n```\n\n----------------------------------------\n\nTITLE: Python Project Configuration with pyproject.toml\nDESCRIPTION: PEP-621 compliant project configuration file defining Python package metadata, dependencies, and build requirements.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/use-cases/pyproject.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../../../templates/pyproject/pyproject.toml}}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Attributes by Manually Setting Version\nDESCRIPTION: This example shows how to handle dynamic attributes in pyproject.toml by manually adding the missing attributes to the attribute set returned by the renderer. It specifically demonstrates adding a version when it can't be dynamically inferred.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/FAQ.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  project = pyproject.project.loadPyproject { pyproject = lib.importTOML ./pyproject.toml; };\n  python = pkgs.python3;\n  attrs = pyproject.renderers.buildPythonPackage { inherit python project; };\nin python.pkgs.buildPythonPackage (attrs // {\n  version = \"1.0\";  # Not dynamically inferred\n})\n```\n\n----------------------------------------\n\nTITLE: Using buildPythonPackage Renderer with Missing Dynamic Version\nDESCRIPTION: This code shows how to use the buildPythonPackage renderer from pyproject.nix to parse a pyproject.toml file. It demonstrates the basic setup that will fail if dynamic version information is needed.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/FAQ.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  project = pyproject.project.loadPyproject { pyproject = lib.importTOML ./pyproject.toml; };\n  python = pkgs.python3;\n  attrs = pyproject.renderers.buildPythonPackage { inherit python project; };\nin python.pkgs.buildPythonPackage attrs\n```\n\n----------------------------------------\n\nTITLE: Overriding Binary Wheel Packages in pyproject.nix\nDESCRIPTION: Example showing how to override a binary wheel package by adding native runtime dependencies that are missing from the lock file metadata. For wheels, only runtime dependencies need to be added.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/overriding.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, pyproject-nix }:\nlet\n  pythonSet = pkgs.callPackage pyproject-nix.build.packages {\n    inherit python;\n  };\n\n  pyprojectOverrides = final: prev: {\n    pyzmq = prev.pyzmq.overrideAttrs(old: {\n      buildInputs = (old.buildInputs or [ ]) ++ [ pkgs.zeromq ];\n    });\n  };\n\nin\n  pythonSet.overrideScope pyprojectOverrides\n```\n\n----------------------------------------\n\nTITLE: Overriding Source Distribution Packages in pyproject.nix\nDESCRIPTION: Example showing how to override a source distribution package by adding both runtime dependencies and build system requirements. For source distributions, both types of dependencies must be specified.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/overriding.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, pyproject-nix }:\nlet\n  pythonSet = pkgs.callPackage pyproject-nix.build.packages {\n    inherit python;\n  };\n\n  pyprojectOverrides = final: prev: {\n    pyzmq = prev.pyzmq.overrideAttrs(old: {\n      buildInputs = (old.buildInputs or [ ]) ++ [ pkgs.zeromq ];\n      dontUseCmakeConfigure = true;\n      nativeBuildInputs = (old.nativeBuildInputs or []) ++ final.resolveBuildSystem ({\n        cmake = [];\n        ninja = [];\n        packaging = [];\n        pathspec = [];\n        scikit-build-core = [];\n      } // if python.isPyPy then { cffi = []; } else { cython = []; });\n    });\n  };\n\nin\n  pythonSet.overrideScope pyprojectOverrides\n```\n\n----------------------------------------\n\nTITLE: Cross-Compilation Support in pyproject.nix\nDESCRIPTION: Example showing how to handle package overrides when cross-compiling Python packages. This demonstrates applying build fixups to both build and target platforms through specific override techniques.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/overriding.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, pyproject-nix }:\nlet\n  pythonSet = pkgs.callPackage pyproject-nix.build.packages {\n    inherit python;\n  };\n\n  pyprojectOverrides = final: prev: {\n    pyzmq = prev.pyzmq.overrideAttrs(old: {\n      buildInputs = (old.buildInputs or [ ]) ++ [ pkgs.zeromq ];\n  });\n\n  pyprojectCrossOverrides = lib.composeExtensions (_final: prev: {\n    pythonPkgsBuildHost = prev.pythonPkgsBuildHost.overrideScope overlay;\n  }) overlay;\n\n\nin\n  pythonSet.overrideScope pyprojectCrossOverrides\n```\n\n----------------------------------------\n\nTITLE: Adapting Prebuilt Packages from Nixpkgs with pyproject.nix\nDESCRIPTION: This snippet demonstrates how to reuse prebuilt packages from Nixpkgs instead of building from source. It creates an overlay that adapts the torch package from Nixpkgs using the nixpkgsPrebuilt function from the hacks library.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/hacks.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ callPackage, pyproject-nix, python3, python3Packages }:\nlet\n  python = python3;\n\n  hacks = callPackage pyproject-nix.build.hacks {};\n\n  overlay = final: prev: {\n    # Adapt torch from nixpkgs\n    torch = hacks.nixpkgsPrebuilt {\n      from = python3Packages.torchWithoutCuda;\n      prev = prev.torch;\n    };\n  };\n\n  pythonSet = (callPackage pyproject-nix.build.packages {\n    inherit python;\n  }).overrideScope overlay;\nin\n  pythonSet.mkVirtualenv \"torch-venv\" {\n    torch = [ ];\n  }\n```\n\n----------------------------------------\n\nTITLE: Filtering Dependencies from Nixpkgs Prebuilt Packages\nDESCRIPTION: This snippet shows how to filter out specific dependencies when adapting a package from Nixpkgs. It demonstrates removing NVIDIA-prefixed dependencies from the torch package.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/hacks.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nhacks.nixpkgsPrebuilt {\n  from = python3Packages.torchWithoutCuda;\n  prev = prev.torch.overrideAttrs(old: {\n    passthru = old.passthru // {\n      dependencies = lib.filterAttrs (name: _: ! lib.hasPrefix \"nvidia\" name) old.passthru.dependencies;\n    };\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Building Cargo (Rust) Packages with importCargoLock\nDESCRIPTION: This snippet shows how to adapt a Python package with Rust dependencies by creating a Rust vendor directory using importCargoLock. It uses the cryptography package as an example, specifying a non-standard path for the Cargo packaging.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/hacks.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nfinal: prev: {\n  cryptography =\n    (hacks.importCargoLock {\n      prev = prev.cryptography;\n      # Cryptography uses a non-standard location for it's Rust packaging\n      cargoRoot = \"src/rust\";\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Cargo Package with Additional Build Dependencies\nDESCRIPTION: This snippet demonstrates how to add necessary build dependencies to a Rust-based Python package. It adds native build inputs, build systems, and OpenSSL as a dependency for the cryptography package.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/hacks.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nfinal: prev: {\n  cryptography =\n    (hacks.importCargoLock {\n      prev = prev.cryptography;\n      # Cryptography uses a non-standard location for it's Rust packaging\n      cargoRoot = \"src/rust\";\n    }).overrideAttrs\n      (old: {\n        nativeBuildInputs =\n          old.nativeBuildInputs\n          ++ final.resolveBuildSystem {\n            maturin = [ ];\n            setuptools = [ ];\n            cffi = [ ];\n            pycparser = [ ];\n          };\n        buildInputs = old.buildInputs or [ ] ++ [ pkgs.openssl ];\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Package with Decoupled Runtime Dependencies\nDESCRIPTION: This snippet shows how pyproject.nix decouples runtime dependencies from build-time dependencies by putting them in the passthru attribute. This approach solves issues with extraneous rebuilds and supports cyclic dependencies.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nstdenv.mkDerivation {\n  pname = \"setuptools-scm\";\n  version = \"8.1.0\";\n  src = fetchurl {\n    url = \"https://files.pythonhosted.org/packages/4f/a4/00a9ac1b555294710d4a68d2ce8dfdf39d72aa4d769a7395d05218d88a42/setuptools_scm-8.1.0.tar.gz\";\n    hash = \"\";\n  };\n\n  passthru = {\n    dependencies = {\n      packaging = [ ];\n      setuptools = [ ];\n    };\n\n    optional-dependencies = {\n      toml = { toml = [ ]; };\n      rich = { rich = [ ]; };\n    };\n  };\n\n  nativeBuildInputs = [\n    pyprojectHook\n  ] ++ resolveBuildSystem (\n    {\n      setuptools = [ ];\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Shell with Nixpkgs Python Builders\nDESCRIPTION: This snippet demonstrates how to create a development shell using nixpkgs Python builders. It highlights the issue of $PYTHONPATH leaking into unrelated builds, which is a problem addressed by pyproject.nix.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\n  pythonEnv = pkgs.python3.withPackages(ps: [ ps.requests ]);\nin pkgs.mkShell {\n  packages = [\n    pkgs.remarshal\n    pythonEnv\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing pyproject-nix without Flakes in Nix\nDESCRIPTION: This snippet demonstrates how to import pyproject-nix using classic Nix without Flakes. It fetches the pyproject-nix repository using builtins.fetchGit and imports it with the required lib attribute.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/install.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\n  inherit (pkgs) lib;\n\n  pyproject-nix = import (builtins.fetchGit {\n    url = \"https://github.com/pyproject-nix/pyproject.nix.git\";\n  }) {\n    inherit lib;\n  };\n\nin ...\n```\n\n----------------------------------------\n\nTITLE: Adding Top-Level Nixpkgs Package to Python Set with an Overlay\nDESCRIPTION: This snippet demonstrates how to use an overlay to add a package (like 'ruff') that exists at the top-level of Nixpkgs but not in python3.pkgs. This allows the package to be used within a Python environment.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/FAQ.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  python = pkgs.python3.override {\n    packageOverrides = self: super: {\n      ruff = pkgs.ruff;\n    };\n  };\nin ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Project Environment with Nix\nDESCRIPTION: Defines a Nix expression for a Python project that includes development dependencies, runtime packages, and environment configurations. It specifies Python version, package requirements, and build settings for creating a reproducible development environment.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/build/hooks/editable_hook/README.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> { } }:\n\nwith pkgs;\nwith python3Packages;\nlet\n  my-python-packages = python-packages: with python-packages; [\n    # dependencies\n    boto3\n    click\n    dynamodb-encryption-sdk\n    python\n    pandas\n    psycopg2\n    pyathena\n    pynamodb\n    tzlocal\n\n    # dev dependencies\n    autopep8\n    flake8\n    pytest\n    pylint\n  ];\n  python-with-my-packages = python3.withPackages my-python-packages;\nin\nmkShell {\n  packages = [\n    gnumake\n    python-with-my-packages\n  ];\n\n  shellHook = ''\n    export PATH=$PATH:$PWD/.venv/bin:$PWD/node_modules/.bin\n  '';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining PEP 723 Metadata Extraction Functions in Nix\nDESCRIPTION: This snippet defines several Nix functions for extracting and processing PEP 723 metadata from Python projects. It includes functions for reading file content, parsing TOML, and converting metadata to Nix attribute sets.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/pep723.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, tomllib }:\n\nlet\n  inherit (builtins) readFile;\n  inherit (lib) importTOML;\n\n  # Read the content of a file\n  readFileContent = file: readFile file;\n\n  # Extract metadata from a Python file\n  extractMetadata = file:\n    let\n      content = readFileContent file;\n      metadataStart = \"\"\"__metadata__ = \"\"\"\"\"\"\n      metadataEnd = \"\"\"\"\"\"\"\"\n      startIndex = builtins.stringLength metadataStart;\n      endIndex = lib.strings.lastIndexOf metadataEnd content;\n    in\n    if endIndex == -1\n    then null\n    else builtins.substring startIndex endIndex content;\n\n  # Parse TOML content\n  parseTOML = toml: importTOML toml;\n\n  # Convert metadata to a Nix attribute set\n  metadataToAttrs = metadata:\n    if metadata == null\n    then { }\n    else parseTOML metadata;\n\n  # Extract metadata from a Python file and convert it to a Nix attribute set\n  extractMetadataAttrs = file: metadataToAttrs (extractMetadata file);\nin\n{\n  inherit\n    readFileContent\n    extractMetadata\n    parseTOML\n    metadataToAttrs\n    extractMetadataAttrs;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Scripts in Nix\nDESCRIPTION: This Nix expression defines a set of scripts for managing Python projects. It includes functions for creating virtual environments, running tests, and handling project dependencies. The scripts are designed to work with the pyproject-nix framework.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, pkgs, config, ... }:\n\nlet\n  inherit (lib) mkOption types;\n  cfg = config.scripts;\nin {\n  options.scripts = {\n    enable = mkOption {\n      type = types.bool;\n      default = true;\n      description = \"Whether to enable scripts\";\n    };\n\n    python = mkOption {\n      type = types.package;\n      default = pkgs.python3;\n      description = \"The python package to use\";\n    };\n\n    pythonPackages = mkOption {\n      type = types.attrs;\n      default = pkgs.python3Packages;\n      description = \"The python packages to use\";\n    };\n\n    venvDir = mkOption {\n      type = types.str;\n      default = \".venv\";\n      description = \"The directory to create the virtual environment in\";\n    };\n\n    packageInstallMethod = mkOption {\n      type = types.enum [ \"pip\" \"poetry\" ];\n      default = \"pip\";\n      description = \"The method to use for installing packages\";\n    };\n\n    additionalPackages = mkOption {\n      type = types.listOf types.package;\n      default = [ ];\n      description = \"Additional packages to install in the virtual environment\";\n    };\n\n    poetryPackage = mkOption {\n      type = types.package;\n      default = pkgs.poetry;\n      description = \"The poetry package to use\";\n    };\n\n    poetryEnv = mkOption {\n      type = types.package;\n      default = pkgs.poetry.withPlugins (ps: with ps; [ poetry-plugin-export ]);\n      description = \"The poetry environment to use\";\n    };\n  };\n\n  config = lib.mkIf cfg.enable {\n    devShell.shellHook = ''$\\{config.devShell.shellHook}\\n\\n      if [ ! -d \"$\\{cfg.venvDir}\" ]; then\\n        $\\{cfg.python.interpreter} -m venv \"$\\{cfg.venvDir}\"\\n      fi\\n\\n      if [ -e \"$\\{cfg.venvDir}/bin/activate\" ]; then\\n        source \"$\\{cfg.venvDir}/bin/activate\"\\n      fi\\n    '';\n\n    devShell.packages = with pkgs; [\n      cfg.python\n    ] ++ cfg.additionalPackages;\n\n    scripts = {\n      dev = {\n        exec = ''\\n          if [ ! -d \"$\\{cfg.venvDir}\" ]; then\\n            $\\{cfg.python.interpreter} -m venv \"$\\{cfg.venvDir}\"\\n          fi\\n\\n          source \"$\\{cfg.venvDir}/bin/activate\"\\n\\n          $\\{if cfg.packageInstallMethod == \"pip\" then ''\\n            pip install -e .\\n          '' else ''\\n            $\\{cfg.poetryEnv}/bin/poetry install\\n          ''}\\n        '';\n        description = \"Setup development environment\";\n      };\n\n      test = {\n        exec = ''\\n          source \"$\\{cfg.venvDir}/bin/activate\"\\n          pytest\\n        '';\n        description = \"Run tests\";\n      };\n\n      run = {\n        exec = ''\\n          source \"$\\{cfg.venvDir}/bin/activate\"\\n          python \"$@\"\\n        '';\n        description = \"Run a Python script\";\n      };\n\n      requirements = {\n        exec = ''\\n          $\\{if cfg.packageInstallMethod == \"pip\" then ''\\n            pip freeze > requirements.txt\\n          '' else ''\\n            $\\{cfg.poetryEnv}/bin/poetry export -f requirements.txt --output requirements.txt\\n          ''}\\n        '';\n        description = \"Generate requirements.txt\";\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Nix Definition for pyzmq Package\nDESCRIPTION: A minimal manually created Nix definition for building the pyzmq package, showing how to properly include native dependencies and build system requirements that are absent from lock files.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/overriding.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ stdenv, pyprojectHook, fetchurl }:\nstdenv.mkDerivation {\n  pname = \"pyzmq\";\n  version = \"26.2.0\";\n\n  src = fetchurl {\n    url = \"https://files.pythonhosted.org/packages/fd/05/bed626b9f7bb2322cdbbf7b4bd8f54b1b617b0d2ab2d3547d6e39428a48e/pyzmq-26.2.0.tar.gz\";\n    hash = \"sha256:070672c258581c8e4f640b5159297580a9974b026043bd4ab0470be9ed324f1f\";\n  };\n\n  dontUseCmakeConfigure = true;\n\n  buildInputs = [ zeromq ];\n\n  nativeBuildInputs = [ pyprojectHook ] ++ resolveBuildSystem ({\n    cmake = [];\n    ninja = [];\n    packaging = [];\n    pathspec = [];\n    scikit-build-core = [];\n  } // if python.isPyPy then { cffi = []; } else { cython = []; });\n\n  passthru.dependencies = lib.optionalAttrs python.isPyPy { cffi = []; };\n}\n```\n\n----------------------------------------\n\nTITLE: Converting requirements.txt to Nix Configuration\nDESCRIPTION: A flake.nix configuration that sets up a Python environment based on requirements.txt dependencies. Uses python.withPackages to create the environment with packages from nixpkgs.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/use-cases/requirements.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{{#include ../../../templates/requirements-txt/flake.nix}}\n```\n\n----------------------------------------\n\nTITLE: Sample uv Lock File Entry for pyzmq Package\nDESCRIPTION: Example of a pyzmq package entry in a uv lock file, showing how lock files store package metadata including dependencies and distribution files but lack important information like native libraries.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/builders/overriding.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[package]]\nname = \"pyzmq\"\nversion = \"26.2.0\"\nsource = { registry = \"https://pypi.org/simple\" }\ndependencies = [\n    { name = \"cffi\", marker = \"implementation_name == 'pypy'\" },\n]\nsdist = { url = \"https://files.pythonhosted.org/packages/fd/05/bed626b9f7bb2322cdbbf7b4bd8f54b1b617b0d2ab2d3547d6e39428a48e/pyzmq-26.2.0.tar.gz\", hash = \"sha256:070672c258581c8e4f640b5159297580a9974b026043bd4ab0470be9ed324f1f\", size = 271975 }\nwheels = [\n    { url = \"https://files.pythonhosted.org/packages/28/2f/78a766c8913ad62b28581777ac4ede50c6d9f249d39c2963e279524a1bbe/pyzmq-26.2.0-cp312-cp312-macosx_10_15_universal2.whl\", hash = \"sha256:ded0fc7d90fe93ae0b18059930086c51e640cdd3baebdc783a695c77f123dcd9\", size = 1343105 },\n    # More binary wheels removed for brevity\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies required Python packages with their versions and includes additional dependencies from requirements.txt file.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/lib/fixtures/requirements-recursive.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npillow == 10.1.0\n-r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies in Nix\nDESCRIPTION: Declares the 'requests' package as a dependency with version 2.31.0. This syntax follows the standard Python package pinning format but is used within a Nix context to ensure reproducible builds.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/lib/fixtures/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nrequests == 2.31.0\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Renderer in Nix\nDESCRIPTION: This snippet defines a Nix function 'markdown' that creates a derivation for rendering Markdown content. It takes an attribute set of options and returns a derivation that processes the input using pandoc.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/lib/renderers.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nmarkdown = { pkgs, lib, ... }@args:\n  let\n    inherit (lib) optionalString;\n    inherit (builtins) readFile;\n  in\n  { name ? \"doc\"\n  , src\n  , meta ? {}\n  , standalone ? false\n  , css ? \"\"\n  , extraArgs ? \"\"\n  , ...}:\n    pkgs.stdenvNoCC.mkDerivation {\n      inherit name;\n      inherit src;\n      inherit meta;\n\n      nativeBuildInputs = [ pkgs.pandoc ];\n\n      buildPhase = ''\n        pandoc -f markdown -t html \\\n          ${optionalString standalone \"--standalone\"} \\\n          ${optionalString (css != \"\") \"-c ${css}\"} \\\n          ${extraArgs} \\\n          -o $out \\\n          $src\n      '';\n\n      installPhase = \"true\";\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Renderer in Nix\nDESCRIPTION: This snippet defines a Nix function 'rst' that creates a derivation for rendering reStructuredText content. It takes an attribute set of options and returns a derivation that processes the input using rst2html.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/lib/renderers.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nrst = { pkgs, lib, ... }@args:\n  let\n    inherit (lib) optionalString;\n    inherit (builtins) readFile;\n  in\n  { name ? \"doc\"\n  , src\n  , meta ? {}\n  , standalone ? false\n  , css ? \"\"\n  , extraArgs ? \"\"\n  , ...}:\n    pkgs.stdenvNoCC.mkDerivation {\n      inherit name;\n      inherit src;\n      inherit meta;\n\n      nativeBuildInputs = [ pkgs.python3Packages.docutils ];\n\n      buildPhase = ''\n        rst2html \\\n          ${optionalString (css != \"\") \"--stylesheet=${css}\"} \\\n          ${extraArgs} \\\n          $src > $out\n      '';\n\n      installPhase = \"true\";\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Renderer in Nix\nDESCRIPTION: This snippet defines a Nix function 'html' that creates a derivation for rendering HTML content. It takes an attribute set of options and returns a derivation that processes the input using tidy.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/lib/renderers.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nhtml = { pkgs, lib, ... }@args:\n  let\n    inherit (lib) optionalString;\n    inherit (builtins) readFile;\n  in\n  { name ? \"doc\"\n  , src\n  , meta ? {}\n  , standalone ? false\n  , css ? \"\"\n  , extraArgs ? \"\"\n  , ...}:\n    pkgs.stdenvNoCC.mkDerivation {\n      inherit name;\n      inherit src;\n      inherit meta;\n\n      nativeBuildInputs = [ pkgs.html-tidy ];\n\n      buildPhase = ''\n        tidy -quiet -ashtml -indent \\\n          ${optionalString (css != \"\") \"-css-prefix ${css}\"} \\\n          ${extraArgs} \\\n          $src > $out\n      '';\n\n      installPhase = \"true\";\n    };\n```\n\n----------------------------------------\n\nTITLE: Running Development Environment with Hivemind in Nix\nDESCRIPTION: Command to start a development environment using nix develop with hivemind, which runs both a Nix-unit test runner and a documentation server simultaneously.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/HACKING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix develop -c hivemind\n```\n\n----------------------------------------\n\nTITLE: Running the Complete Unit Test Suite with nix-unit\nDESCRIPTION: Command to execute the full unit test suite using nix-unit, targeting the libTests flake output.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/HACKING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnix-unit --flake .#libTests\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for a Specific Function\nDESCRIPTION: Command to run tests for a single function (pep440.parseVersion in this example) using nix-unit with the appropriate flake reference.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/HACKING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnix-unit --flake .#libTests.pep440.parseVersion\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests via Flake Check\nDESCRIPTION: Command to execute integration tests that perform environment constructions and builds using the Nix flake check mechanism.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/HACKING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix flake check\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Nix\nDESCRIPTION: Command to format code using Nix's built-in formatter before submitting a pull request.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/HACKING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnix fmt\n```\n\n----------------------------------------\n\nTITLE: Defining Build Utility Functions in Nix for Python Projects\nDESCRIPTION: This code snippet appears to be a placeholder for Nix expressions that define build utility functions for a Python project. The actual code is not provided in the given content, but it is referenced by a comment indicating the use of a 'nixdoc' command to generate documentation.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/util.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n<!-- cmdrun nixdoc --prefix build --category util --description build.util --file ../../../build/util/default.nix -->\n```\n\n----------------------------------------\n\nTITLE: Referencing Nix Documentation Generation Command\nDESCRIPTION: A command to generate documentation for build packages and hooks using the nixdoc tool. The command references a specific file path and sets parameters for documentation categorization.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/hooks.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- cmdrun nixdoc --prefix build.packages --category hooks --description build.packages.hooks --file ../../../build/hooks/default.nix -->\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Python Build Packages in Nix\nDESCRIPTION: This comment specifies a command to generate documentation for build packages defined in a Nix file. It uses the 'nixdoc' tool to process the '../../../build/packages.nix' file, categorizing the output under 'packages' with a 'build' prefix.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/packages.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- cmdrun nixdoc --prefix build --category packages --description build.packages --file ../../../build/packages.nix -->\n```\n\n----------------------------------------\n\nTITLE: Documentation Generation Command for Renderers in HTML Comment\nDESCRIPTION: HTML comment containing a command that runs 'nixdoc' to generate documentation for renderers from a specified Nix file. The command includes category, description, and file path parameters.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/renderers.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- cmdrun nixdoc --category renderers --description renderers --file ../../../lib/renderers.nix -->\n```\n\n----------------------------------------\n\nTITLE: Documentation Comment in Nix Config\nDESCRIPTION: XML comment indicating command for generating documentation using nixdoc for pypa category\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/pypa.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- cmdrun nixdoc --category pypa --description pypa --file ../../../lib/pypa.nix -->\n```\n\n----------------------------------------\n\nTITLE: Generating Poetry Documentation with Nixdoc\nDESCRIPTION: HTML comment containing a command to run nixdoc for generating poetry-related documentation from a Nix file.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/poetry.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- cmdrun nixdoc --category poetry --description poetry --file ../../../lib/poetry.nix -->\n```\n\n----------------------------------------\n\nTITLE: Nixdoc Command Comment\nDESCRIPTION: HTML comment containing a command to run nixdoc with specific parameters for PEP 656 documentation generation\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/pep656.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- cmdrun nixdoc --category pep656 --description pep656 --file ../../../lib/pep656.nix -->\n```\n\n----------------------------------------\n\nTITLE: Documentation Command for PEP 600 Nix Implementation\nDESCRIPTION: An HTML comment containing a command to run the 'nixdoc' tool against a pep600.nix file with specific category and description parameters. This appears to be a documentation generation directive.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/pep600.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- cmdrun nixdoc --category pep600 --description pep600 --file ../../../lib/pep600.nix -->\n```\n\n----------------------------------------\n\nTITLE: Referencing PEP 518 documentation for Nix implementation\nDESCRIPTION: A commented directive indicating that documentation should be generated from a specific Nix file (pep518.nix) that likely contains functions for handling Python PEP 518 configurations.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/pep518.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- cmdrun nixdoc --category pep518 --description pep518 --file ../../../lib/pep518.nix -->\n```\n\n----------------------------------------\n\nTITLE: Running Nixdoc to Generate Documentation for Eggs Module\nDESCRIPTION: A command that runs the nixdoc tool to generate documentation for an eggs.nix file. The command specifies a category and description for the documentation and points to the file path.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/lib/eggs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnixdoc --category eggs --description eggs --file ../../../lib/eggs.nix\n```\n\n----------------------------------------\n\nTITLE: HTML Warning Message\nDESCRIPTION: HTML markup displaying a warning message about the experimental status of the query API.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/lib/query.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"warning\">\nThe query API is still experimental and subject to change.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Documentation Generation Comment\nDESCRIPTION: HTML comment containing nixdoc command for generating documentation from query.nix file.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/lib/query.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- cmdrun nixdoc --prefix build.lib --category query --description build.lib.query --file ../../../../build/lib/query.nix -->\n```\n\n----------------------------------------\n\nTITLE: Referencing PyProject.toml Configuration\nDESCRIPTION: Example showing the reference to pyproject.toml configuration using inline code notation\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/reference.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`pyproject.toml`\n```\n\n----------------------------------------\n\nTITLE: Referencing Project Variable\nDESCRIPTION: Example showing the reference to a project variable using inline code notation\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/reference.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`project`\n```\n\n----------------------------------------\n\nTITLE: Empty Nix Python Project Dependencies Configuration\nDESCRIPTION: A template comment indicating where to define Python project dependencies in a Nix configuration file. This serves as a placeholder for package definitions and requirements.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/templates/requirements-txt/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n# Fill in your project dependencies here\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Build Hacks using nixdoc\nDESCRIPTION: This comment contains a command for nixdoc to generate documentation for build hacks. It specifies parameters including prefix, category, description, and the target file path.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/hacks.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- cmdrun nixdoc --prefix build --category hacks --description build.hacks --file ../../../build/hacks/default.nix -->\n```\n\n----------------------------------------\n\nTITLE: Running nixdoc Command for Build Library Documentation\nDESCRIPTION: Command to generate documentation for a build library using nixdoc. The command specifies a prefix, category, description, and the path to the source file.\nSOURCE: https://github.com/pyproject-nix/pyproject.nix/blob/master/doc/src/build/lib/index.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnixdoc --prefix build --category lib --description build.lib --file ../../../../build/lib/default.nix\n```"
  }
]