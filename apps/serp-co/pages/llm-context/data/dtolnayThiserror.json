[
  {
    "owner": "dtolnay",
    "repo": "thiserror",
    "content": "TITLE: Implementing Error Types with Thiserror Derive Macro\nDESCRIPTION: Example of creating custom error types using thiserror's Error derive macro. Shows an enum with different error variants utilizing features like custom error messages, field interpolation, and automatic source error conversion.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Error Types with From Conversion\nDESCRIPTION: Example of using the #[from] attribute to automatically generate From implementations for error variants. This allows automatic conversion from source error types into the custom error type.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Error, Debug)]\npub enum MyError {\n    Io(#[from] io::Error),\n    Glob(#[from] globset::Error),\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Error Variants\nDESCRIPTION: Demonstrates using error(transparent) to forward source and Display implementations directly to an underlying error. Useful for creating \"catch-all\" error variants.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Error, Debug)]\npub enum MyError {\n    ...\n\n    #[error(transparent)]\n    Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Opaque Public Error Types\nDESCRIPTION: Shows how to create opaque public error types with private internal representations. This pattern allows the error representation to evolve without breaking public API compatibility.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// PublicError is public, but opaque and easy to keep compatible.\n#[derive(Error, Debug)]\n#[error(transparent)]\npub struct PublicError(#[from] ErrorRepr);\n\nimpl PublicError {\n    // Accessors for anything we do want to expose publicly.\n}\n\n// Private and free to change across minor version of the crate.\n#[derive(Error, Debug)]\nenum ErrorRepr {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Error with #[source] Attribute\nDESCRIPTION: Demonstrates how to use the #[source] attribute to implement the Error trait's source() method. This identifies the underlying error that caused the current error.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Error, Debug)]\npub struct MyError {\n    msg: String,\n    #[source]  // optional if field name is `source`\n    source: anyhow::Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Format Arguments in Thiserror Error Messages\nDESCRIPTION: Demonstrates how to use format arguments in thiserror error messages, including referencing constants and expressions. Shows an advanced example of custom error message formatting.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Error, Debug)]\npub enum Error {\n    #[error(\"invalid rdo_lookahead_frames {0} (expected < {max})\", max = i32::MAX)]\n    InvalidLookahead(u32),\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Struct Fields in Error Message Format Expressions\nDESCRIPTION: Shows how to reference fields of a struct or enum within format expressions in error messages. Demonstrates accessing named fields with dot notation and tuple fields by index.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Error, Debug)]\npub enum Error {\n    #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n    WrongCase(String),\n    #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n    OutOfBounds { idx: usize, limits: Limits },\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Backtrace in Error Types\nDESCRIPTION: Shows how to incorporate backtrace functionality in error types by including a field of type Backtrace. This automatically implements the Error trait's provide() method.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse std::backtrace::Backtrace;\n\n#[derive(Error, Debug)]\npub struct MyError {\n    msg: String,\n    backtrace: Backtrace,  // automatically detected\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[backtrace] Attribute for Shared Backtraces\nDESCRIPTION: Example of using the #[backtrace] attribute to forward the Error trait's provide() method to a source error. This allows multiple error layers to share the same backtrace.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Error, Debug)]\npub enum MyError {\n    Io {\n        #[backtrace]\n        source: io::Error,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Backtrace Capture with #[from]\nDESCRIPTION: Shows how to automatically capture a backtrace when converting from source errors using the #[from] attribute in combination with a Backtrace field.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Error, Debug)]\npub enum MyError {\n    Io {\n        #[from]\n        source: io::Error,\n        backtrace: Backtrace,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Thiserror Dependency in Cargo.toml\nDESCRIPTION: Demonstrates how to add the thiserror crate as a dependency in a Rust project's Cargo.toml file. The example shows using version 2 of the library.\nSOURCE: https://github.com/dtolnay/thiserror/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nthiserror = \"2\"\n```"
  }
]