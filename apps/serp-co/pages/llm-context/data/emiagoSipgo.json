[
  {
    "owner": "emiago",
    "repo": "sipgo",
    "content": "TITLE: Initializing UAS/UAC with Multiple Transport Protocols\nDESCRIPTION: Shows how to create a User Agent with both server and client handles, set up request handlers, and start listeners for multiple transport protocols.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nua, _ := sipgo.NewUA() // Build user agent\nsrv, _ := sipgo.NewServer(ua) // Creating server handle for ua\nclient, _ := sipgo.NewClient(ua) // Creating client handle for ua\nsrv.OnInvite(inviteHandler)\nsrv.OnAck(ackHandler)\nsrv.OnBye(byeHandler)\n\n// For registrars\n// srv.OnRegister(registerHandler)\nctx, _ := signal.NotifyContext(ctx, os.Interrupt)\ngo srv.ListenAndServe(ctx, \"udp\", \"127.0.0.1:5060\")\ngo srv.ListenAndServe(ctx, \"tcp\", \"127.0.0.1:5061\")\ngo srv.ListenAndServe(ctx, \"ws\", \"127.0.0.1:5080\")\n<-ctx.Done()\n```\n\n----------------------------------------\n\nTITLE: Implementing UAC Dialog Handling in Go\nDESCRIPTION: Example showing how to create and manage a UAC (User Agent Client) dialog including INVITE, ACK and BYE handling. Uses DialogClientCache for dialog management with proper cleanup.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nua, _ := sipgo.NewUA() // Build user agent\nsrv, _ := sipgo.NewServer(ua) // Creating server handle\nclient, _ := sipgo.NewClient(ua) // Creating client handle\n\ncontactHDR := sip.ContactHeader{\n    Address: sip.Uri{User: \"test\", Host: \"127.0.0.200\", Port: 5088},\n}\ndialogCli := sipgo.NewDialogClientCache(client, contactHDR)\n\n// Attach Bye handling for dialog\nsrv.OnBye(func(req *sip.Request, tx sip.ServerTransaction) {\n    err := dialogCli.ReadBye(req, tx)\n    //handle error\n})\n\n// Create dialog session\ndialog, err := dialogCli.Invite(ctx, recipientURI, nil)\ndefer dialog.Close() // Cleans up from dialog pool\n// Wait for answer\nerr = dialog.WaitAnswer(ctx, AnswerOptions{})\n// Check dialog response dialog.InviteResponse (SDP) and return ACK\nerr = dialog.Ack(ctx)\n// Send BYE to terminate call\nerr = dialog.Bye(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing UAS Dialog Handling in Go\nDESCRIPTION: Example demonstrating UAS (User Agent Server) dialog handling including INVITE, ACK and BYE processing. Uses DialogServerCache for managing server-side dialogs.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nua, _ := sipgo.NewUA() // Build user agent\nsrv, _ := sipgo.NewServer(ua) // Creating server handle\nclient, _ := sipgo.NewClient(ua) // Creating client handle\n\nuasContact := sip.ContactHeader{\n    Address: sip.Uri{User: \"test\", Host: \"127.0.0.200\", Port: 5099},\n}\ndialogSrv := sipgo.NewDialogServerCache(client, uasContact)\n\nsrv.OnInvite(func(req *sip.Request, tx sip.ServerTransaction) {\n    dlg, err := dialogSrv.ReadInvite(req, tx)\n    if err != nil {\n        return err\n    }\n    defer dlg.Close() // Close for cleanup from cache\n    // handle error\n    dlg.Respond(sip.StatusTrying, \"Trying\", nil)\n    dlg.Respond(sip.StatusOK, \"OK\", nil)\n    \n    // Instead Done also dlg.State() can be used for granular state checking\n    <-dlg.Context().Done()\n})\n\nsrv.OnAck(func(req *sip.Request, tx sip.ServerTransaction) {\n    dialogSrv.ReadAck(req, tx)\n})\n\nsrv.OnBye(func(req *sip.Request, tx sip.ServerTransaction) {\n    dialogSrv.ReadBye(req, tx)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateful Proxy in Go\nDESCRIPTION: Example demonstrating how to build a stateful SIP proxy by combining client and server handles for transaction management.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nua, _ := sipgo.NewUA() // Build user agent\nsrv, _ := sipgo.NewServer(ua) // Creating server handle\nclient, _ := sipgo.NewClient(ua) // Creating client handle\n\nsrv.OnInvite(func(req *sip.Request, tx sip.ServerTransaction) {\n    ctx := context.Background()\n    req.SetDestination(\"10.1.2.3\") // Change sip.Request destination\n    // Start client transaction and relay our request. Add Via and Record-Route header\n    clTx, err := client.TransactionRequest(ctx, req, sipgo.ClientRequestAddVia, sipgo.ClientRequestAddRecordRoute)\n    // Send back response\n    res := <-cltx.Responses()\n    tx.Respond(res)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Server Transactions in SIP\nDESCRIPTION: Demonstrates how to handle incoming requests with server transactions, including sending provisional and final responses.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsrv.OnInvite(func(req *sip.Request, tx sip.ServerTransaction) {\n    // Send provisional\n    res := sip.NewResponseFromRequest(req, 100, \"Trying\", nil)\n    tx.Respond(res)\n    \n    // Send OK. TODO: some body like SDP\n    res := sip.NewResponseFromRequest(req, 200, \"OK\", body)\n    tx.Respond(res)\n\n    select {\n        case m := <-tx.Acks(): // Handle ACK for response . ACKs on 2xx are send as different request\n        case <-tx.Done():\n            return\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Client Transactions\nDESCRIPTION: Shows full implementation of client transaction handling including creation, response handling, and cleanup.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\nclient, _ := sipgo.NewClient(ua) // Creating client handle\n\nreq := sip.NewRequest(sip.INVITE, sip.Uri{User:\"bob\", Host: \"example.com\"})\ntx, err := client.TransactionRequest(ctx, req) // Send request and get client transaction handle\n\ndefer tx.Terminate() // Client Transaction must be terminated for cleanup\n...\n\nselect {\n    case res := <-tx.Responses():\n    // Handle responses\n    case <-tx.Done():\n    // Wait for termination\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SIP Message Headers in Go\nDESCRIPTION: Shows how to access parsed SIP message headers through fast reference methods like msg.Via() and msg.From(). The parser can be configured with WithHeadersParsers to optimize performance by reducing the set of headers that are parsed by default.\nSOURCE: https://github.com/emiago/sipgo/blob/main/sip/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nParser by default parses set of headers that are mostly present in messages. From,To,Via,Cseq,Content-Type,Content-Length...\nThis headers are accessible via fast reference `msg.Via()`, `msg.From()`...\n\nThis can be configured using `WithHeadersParsers` and reducing this to increase performance. \nSIP stack in case needed will use fast reference and lazy parsing.\n```\n\n----------------------------------------\n\nTITLE: Dialog Transaction Request in Go\nDESCRIPTION: Example showing how to send custom requests within an established dialog using the Do method.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nreq := sip.NewRequest(sip.INFO, recipient)\nres, err := dialog.Do(ctx, req)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Transport for SIP Server\nDESCRIPTION: Demonstrates how to set up TLS-enabled transport for both TCP and WebSocket connections with certificate configuration.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconf :=  sipgo.GenerateTLSConfig(certFile, keyFile, rootPems)\nsrv.ListenAndServeTLS(ctx, \"tcp\", \"127.0.0.1:5061\", conf)\nsrv.ListenAndServeTLS(ctx, \"ws\", \"127.0.0.1:5081\", conf)\n```\n\n----------------------------------------\n\nTITLE: Initializing UAC with Client-First Configuration\nDESCRIPTION: Shows how to set up a User Agent with client-first configuration, including host and port specification for connection reuse.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nua, _ := sipgo.NewUA() // Build user agent\ndefer ua.Close()\n\nclient, _ := sipgo.NewClient(ua, sipgo.WithClientHostname(\"127.0.0.1\"), sipgo.WithClientPort(5060))\nserver, _ := sipgo.NewServer(ua) \nsrv.OnBye(func(req *sip.Request, tx sip.ServerTransaction)) {\n    // This will be received on 127.0.0.1:5060\n}\n\ntx, err := client.TransactionRequest(ctx, sip.NewRequest(sip.INVITE, recipient))\n```\n\n----------------------------------------\n\nTITLE: Executing Client Do Request\nDESCRIPTION: Demonstrates how to perform a simple client request using the Do method.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nreq := sip.NewRequest(sip.INVITE, sip.Uri{User:\"bob\", Host: \"example.com\"})\nres, err := client.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Stateless Request\nDESCRIPTION: Shows how to send a stateless client request without transaction handling.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nclient, _ := sipgo.NewClient(ua) // Creating client handle\nreq := sip.NewRequest(sip.ACK, sip.Uri{User:\"bob\", Host: \"example.com\"})\n// Send request and forget\nclient.WriteRequest(req)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateless Server Response\nDESCRIPTION: Shows how to implement stateless response handling for a SIP server.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nsrv := sipgo.NewServer()\n...\nfunc ackHandler(req *sip.Request, tx sip.ServerTransaction) {\n    res := sip.NewResponseFromRequest(req, code, reason, body)\n    srv.WriteResponse(res)\n}\nsrv.OnACK(ackHandler)\n```\n\n----------------------------------------\n\nTITLE: Running SIP Server with User Authentication in Go\nDESCRIPTION: Command to start the SIP server with user authentication. The -u parameter configures a list of username:password pairs for authentication, and the -ip parameter sets the server's listening address and port.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/register/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo run ./server -u \"alice:alice,bob:bob\" -ip 127.0.0.10:5060\n```\n\n----------------------------------------\n\nTITLE: Running SIP Clients with Authentication Credentials in Go\nDESCRIPTION: Commands to start SIP clients that authenticate to the server. Each client specifies a username (-u), password (-p), and the server address (-srv) to connect to.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/register/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo run ./client -u alice -p alice -srv 127.0.0.10:5060\ngo run ./client -u bob -p bob -srv 127.0.0.10:5060\n```\n\n----------------------------------------\n\nTITLE: Displaying Command-Line Options for proxysip SIP Proxy\nDESCRIPTION: Command-line usage options for the proxysip tool, showing available configuration flags including debug mode, destination server, IP address, profiling, and transport protocol.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/proxysip/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nproxysip:\n  -debug\n    \t\n  -dst string\n    \tDestination pbx, sip server (default \"127.0.0.2:5060\")\n  -ip string\n    \tMy exernal ip (default \"127.0.0.1:5060\")\n  -pprof\n    \tFull profile\n  -t string\n    \tTransport, default will be determined by request (default \"udp\")\n```\n\n----------------------------------------\n\nTITLE: Enabling SIP Debug Mode in Go\nDESCRIPTION: Simple example showing how to enable SIP message debugging to see full message dumps from transport layer.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nsip.SIPDebug = true\n```\n\n----------------------------------------\n\nTITLE: Using Uber's automaxprocs for Container CPU Resource Management\nDESCRIPTION: Go code snippet showing how to import Uber's automaxprocs package to automatically set GOMAXPROCS based on CPU quota when running in containers, which helps optimize performance.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/proxysip/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport _ \"go.uber.org/automaxprocs\"\n```\n\n----------------------------------------\n\nTITLE: Running SIPGO Proxy with Docker Compose for Stress Testing\nDESCRIPTION: Docker Compose commands for running SIP proxy stress tests, launching the proxy along with UAC (User Agent Client) and UAS (User Agent Server) components for performance evaluation.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/proxysip/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run this in 3 terminals\ndocker-compose run proxy\ndocker-compose run uas\ndocker-compose run uac\n```\n\n----------------------------------------\n\nTITLE: Running SIP Tests in Go\nDESCRIPTION: Command for running the test suite for the sipgo library.\nSOURCE: https://github.com/emiago/sipgo/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Building OpenSIPS Docker Image with MySQL Support\nDESCRIPTION: Command to build an OpenSIPS Docker image with MySQL module support for database connectivity.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/proxysip/docker/opensips/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOPENSIPS_EXTRA_MODULES=opensips-mysql-module make build\n```\n\n----------------------------------------\n\nTITLE: Building OpenSIPS Docker Image using Make\nDESCRIPTION: Command to build a Docker image with the default OpenSIPS master version from the git repository.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/proxysip/docker/opensips/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Building OpenSIPS Docker Image with Specific Version\nDESCRIPTION: Command to build a Docker image with a specific OpenSIPS version (2.2 in this example) from the git repository.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/proxysip/docker/opensips/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENSIPS_VERSION=2.2 make build\n```\n\n----------------------------------------\n\nTITLE: Starting OpenSIPS Docker Container\nDESCRIPTION: Command to start the previously built OpenSIPS Docker container using make.\nSOURCE: https://github.com/emiago/sipgo/blob/main/example/proxysip/docker/opensips/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake start\n```"
  }
]