[
  {
    "owner": "serde-rs",
    "repo": "serde",
    "content": "TITLE: Basic Serde JSON Serialization and Deserialization Example in Rust\nDESCRIPTION: Demonstrates how to use Serde with JSON to serialize a struct to a string and deserialize it back. The example defines a Point struct with derive macros, converts it to JSON, and then parses it back into a Point instance.\nSOURCE: https://github.com/serde-rs/serde/blob/master/serde_derive/README.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let point = Point { x: 1, y: 2 };\n\n    // Convert the Point to a JSON string.\n    let serialized = serde_json::to_string(&point).unwrap();\n\n    // Prints serialized = {\"x\":1,\"y\":2}\n    println!(\"serialized = {}\", serialized);\n\n    // Convert the JSON string back to a Point.\n    let deserialized: Point = serde_json::from_str(&serialized).unwrap();\n\n    // Prints deserialized = Point { x: 1, y: 2 }\n    println!(\"deserialized = {:?}\", deserialized);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Serde Example with JSON Serialization and Deserialization\nDESCRIPTION: This example demonstrates the core functionality of Serde with JSON format. It defines a simple Point struct with Serialize and Deserialize implementations, then shows how to convert the struct to a JSON string and back again using serde_json.\nSOURCE: https://github.com/serde-rs/serde/blob/master/serde/README.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let point = Point { x: 1, y: 2 };\n\n    // Convert the Point to a JSON string.\n    let serialized = serde_json::to_string(&point).unwrap();\n\n    // Prints serialized = {\"x\":1,\"y\":2}\n    println!(\"serialized = {}\", serialized);\n\n    // Convert the JSON string back to a Point.\n    let deserialized: Point = serde_json::from_str(&serialized).unwrap();\n\n    // Prints deserialized = Point { x: 1, y: 2 }\n    println!(\"deserialized = {:?}\", deserialized);\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing a Struct using Serde and serde_json in Rust\nDESCRIPTION: This example demonstrates how to use Serde to serialize a Point struct to JSON and then deserialize it back. It showcases the derive macro for Serialize and Deserialize traits, as well as the use of serde_json for JSON conversion.\nSOURCE: https://github.com/serde-rs/serde/blob/master/crates-io.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let point = Point { x: 1, y: 2 };\n\n    // Convert the Point to a JSON string.\n    let serialized = serde_json::to_string(&point).unwrap();\n\n    // Prints serialized = {\"x\":1,\"y\":2}\n    println!(\"serialized = {}\", serialized);\n\n    // Convert the JSON string back to a Point.\n    let deserialized: Point = serde_json::from_str(&serialized).unwrap();\n\n    // Prints deserialized = Point { x: 1, y: 2 }\n    println!(\"deserialized = {:?}\", deserialized);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Serde Usage with JSON Serialization and Deserialization\nDESCRIPTION: This example demonstrates basic Serde functionality by defining a simple Point struct with derive macros, serializing it to JSON, and then deserializing it back. It shows the complete workflow of using Serde with serde_json.\nSOURCE: https://github.com/serde-rs/serde/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let point = Point { x: 1, y: 2 };\n\n    // Convert the Point to a JSON string.\n    let serialized = serde_json::to_string(&point).unwrap();\n\n    // Prints serialized = {\"x\":1,\"y\":2}\n    println!(\"serialized = {}\", serialized);\n\n    // Convert the JSON string back to a Point.\n    let deserialized: Point = serde_json::from_str(&serialized).unwrap();\n\n    // Prints deserialized = Point { x: 1, y: 2 }\n    println!(\"deserialized = {:?}\", deserialized);\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Point Structure with Serde and JSON in Rust\nDESCRIPTION: This example demonstrates how to use Serde with serde_json to serialize a Rust struct to JSON and deserialize it back. It shows how to derive Serialize and Deserialize traits, convert a Point struct to a JSON string, and convert the JSON string back to a Point struct.\nSOURCE: https://github.com/serde-rs/serde/blob/master/serde_derive/crates-io.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let point = Point { x: 1, y: 2 };\n\n    // Convert the Point to a JSON string.\n    let serialized = serde_json::to_string(&point).unwrap();\n\n    // Prints serialized = {\"x\":1,\"y\":2}\n    println!(\"serialized = {}\", serialized);\n\n    // Convert the JSON string back to a Point.\n    let deserialized: Point = serde_json::from_str(&serialized).unwrap();\n\n    // Prints deserialized = Point { x: 1, y: 2 }\n    println!(\"deserialized = {:?}\", deserialized);\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing a Rust Struct with Serde and serde_json\nDESCRIPTION: This example demonstrates how to use Serde to convert between Rust data structures and JSON. It shows defining a struct with derive macros for serialization, converting the struct to a JSON string, and parsing a JSON string back into the struct.\nSOURCE: https://github.com/serde-rs/serde/blob/master/serde/crates-io.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let point = Point { x: 1, y: 2 };\n\n    // Convert the Point to a JSON string.\n    let serialized = serde_json::to_string(&point).unwrap();\n\n    // Prints serialized = {\"x\":1,\"y\":2}\n    println!(\"serialized = {}\", serialized);\n\n    // Convert the JSON string back to a Point.\n    let deserialized: Point = serde_json::from_str(&serialized).unwrap();\n\n    // Prints deserialized = Point { x: 1, y: 2 }\n    println!(\"deserialized = {:?}\", deserialized);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serde Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to set up Serde dependencies in a Cargo.toml file. It includes the core serde crate with the derive feature and the serde_json formatter crate.\nSOURCE: https://github.com/serde-rs/serde/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n\n# The core APIs, including the Serialize and Deserialize traits. Always\n# required when using Serde. The \"derive\" feature is only required when\n# using #[derive(Serialize, Deserialize)] to make Serde work with structs\n# and enums defined in your crate.\nserde = { version = \"1.0\", features = [\"derive\"] }\n\n# Each data format lives in its own crate; the sample code below uses JSON\n# but you may be using a different one.\nserde_json = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Serde Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to set up the required dependencies for Serde in a Rust project's Cargo.toml file. It includes the core serde package with the 'derive' feature enabled and the serde_json format-specific implementation.\nSOURCE: https://github.com/serde-rs/serde/blob/master/serde/README.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n\n# The core APIs, including the Serialize and Deserialize traits. Always\n# required when using Serde. The \"derive\" feature is only required when\n# using #[derive(Serialize, Deserialize)] to make Serde work with structs\n# and enums defined in your crate.\nserde = { version = \"1.0\", features = [\"derive\"] }\n\n# Each data format lives in its own crate; the sample code below uses JSON\n# but you may be using a different one.\nserde_json = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serde Dependencies in Cargo.toml\nDESCRIPTION: Configuration for including Serde in a Rust project. Specifies dependencies for serde core with derive features enabled and serde_json for JSON format support.\nSOURCE: https://github.com/serde-rs/serde/blob/master/serde_derive/README.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n\n# The core APIs, including the Serialize and Deserialize traits. Always\n# required when using Serde. The \"derive\" feature is only required when\n# using #[derive(Serialize, Deserialize)] to make Serde work with structs\n# and enums defined in your crate.\nserde = { version = \"1.0\", features = [\"derive\"] }\n\n# Each data format lives in its own crate; the sample code below uses JSON\n# but you may be using a different one.\nserde_json = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Serde Documentation Tests\nDESCRIPTION: Command to test all example code in Serde documentation using Cargo with the derive feature enabled.\nSOURCE: https://github.com/serde-rs/serde/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --features derive\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite with Nightly Rust\nDESCRIPTION: Command to run the complete Serde test suite including unstable features using the nightly Rust compiler.\nSOURCE: https://github.com/serde-rs/serde/blob/master/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly test --features unstable\n```"
  }
]