[
  {
    "owner": "rocketchat",
    "repo": "docs",
    "content": "TITLE: Starting Docker Compose Services\nDESCRIPTION: Command to start all services defined in the Docker Compose file in detached mode.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File\nDESCRIPTION: Command to download the example compose.yml file from the Rocket.Chat Docker repository, which defines the containers needed for a Rocket.Chat deployment.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://raw.githubusercontent.com/RocketChat/Docker.Official.Image/master/compose.yml -O\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection URI for Rocket.Chat\nDESCRIPTION: MongoDB connection string URI format for authenticating Rocket.Chat with MongoDB. This format includes options for username, password, host, port, database, and additional connection options.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-uri-authentication.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_URL=mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Rocket.Chat Release Image\nDESCRIPTION: Command to pull a specific version of Rocket.Chat by specifying the release tag.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.rocket.chat/rocketchat/rocket.chat:<release-tag>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables to Fix Invalid Site URL in Rocket.Chat\nDESCRIPTION: This code snippet shows how to resolve invalid Site URL warnings in Rocket.Chat by setting the OVERWRITE_SETTING_Site_Url and ROOT_URL environment variables to match the actual URL you use to access your Rocket.Chat instance.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/troubleshooting.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOVERWRITE_SETTING_Site_Url=https://the-address-you-use-to-access\nROOT_URL=https://the-address-you-use-to-access\n```\n\n----------------------------------------\n\nTITLE: Nginx Upstream Configuration for Load Balancing\nDESCRIPTION: Nginx upstream configuration block defining multiple Rocket.Chat backend instances for load balancing.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/running-multiple-instances.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n# Upstreams\nupstream backend {\n    server 127.0.0.1:3000;\n    server 127.0.0.1:3001;\n    #server 127.0.0.1:3002;\n    #server 127.0.0.1:3003;\n    .\n    .\n    .\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx SSL Reverse Proxy for Rocket.Chat\nDESCRIPTION: Nginx configuration for setting up an SSL reverse proxy for Rocket.Chat. Includes upstream definition, HTTPS server block, and proxy settings.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/configuring-ssl-reverse-proxy.md#2025-04-06_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\n# Upstreams\nupstream backend {\n    server 127.0.0.1:3000;\n}\n\n# HTTPS Server\nserver {\n    listen 443;\n    server_name your_hostname.com;\n\n    # You can increase the limit if your need to.\n    client_max_body_size 200M;\n\n    error_log /var/log/nginx/rocketchat.access.log;\n\n    ssl on;\n    ssl_certificate /etc/nginx/certificate.crt;\n    ssl_certificate_key /etc/nginx/certificate.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # don't use SSLv3 ref: POODLE\n\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $http_host;\n\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_redirect off;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker with Official Helper Script\nDESCRIPTION: Command to install Docker using the official helper script, which automatically detects your Linux distribution and sets up Docker.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://get.docker.com | sh\n```\n\n----------------------------------------\n\nTITLE: Defining Rocket.Chat Deployment Configuration in YAML\nDESCRIPTION: Example values.yaml file containing configuration options for deploying Rocket.Chat using Helm. Includes settings for image, MongoDB, microservices, host, and ingress.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  pullPolicy: IfNotPresent\n  repository: registry.rocket.chat/rocketchat/rocket.chat\n  tag: <release>\n\nmongodb:\n  enabled: true  #For test purposes, a single mongodb pod is deployed, consider an external MongoDB cluster for production environments\n  auth:\n    passwords:\n      - rocketchat\n    rootPassword: rocketchatroot\n\nmicroservices:\n  enabled: false  #This must be set to false for a monolithic deployment\nhost: domain.xyz \ningress:\n  enabled: true\n  ingressClassName: nginx  # State the ingress controller that is installed in the K8s cluster \n  annotations:\n    cert-manager.io/cluster-issuer: production-cert-issuer # Replace with the name of your ClusterIssuer \n  tls:\n    - secretName: rckube #This is the name of the secret - You can use a different name if needed \n      hosts:\n        - domain.xyz #This is the domain for your Rocket.Chat server, Replace it with your own domain \n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Location Block for Rocket.Chat Subfolder\nDESCRIPTION: Apache configuration that sets up a reverse proxy for Rocket.Chat in a subfolder. This example handles both HTTP and WebSocket traffic, with special attention to path handling to prevent 404 errors. The configuration must be placed in a Location block matching your desired subfolder.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/running-in-a-sub-folder-with-apache.md#2025-04-06_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\n<Location /chat>\n    Order allow,deny\n    Allow from all\n\n    RewriteEngine On\n    RewriteCond %{HTTP:Upgrade} =websocket [NC]\n    RewriteRule /var/www/(.*)           ws://localhost:3000/$1 [P,L]\n    RewriteCond %{HTTP:Upgrade} !=websocket [NC]\n    RewriteRule /var/www/(.*)           http://localhost:3000/$1 [P,L]\n\n    ProxyPassReverse http://localhost:3000\n</Location>\n```\n\n----------------------------------------\n\nTITLE: OAuth Callback URL Configuration\nDESCRIPTION: Example URL format for configuring OAuth provider callback. This URL needs to be included when setting up an OAuth provider to handle authentication responses.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/oauth/README.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://yourcompany.rocket.chat/_oauth/customoauth\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for Rocket.Chat\nDESCRIPTION: Nginx configuration that sets up a reverse proxy to forward requests to the Rocket.Chat server. It includes SSL certificate configuration and HTTP to HTTPS redirection for secure connections.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n     listen 443 ssl;\n\n     server_name <ABC.DOMAIN.COM>;\n\n     ssl_certificate /etc/letsencrypt/live/<ABC.DOMAIN.COM>/fullchain.pem;\n     ssl_certificate_key /etc/letsencrypt/live/<ABC.DOMAIN.COM>/privkey.pem;\n     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n     ssl_prefer_server_ciphers on;\n     ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n     root /usr/share/nginx/html;\n     index index.html index.htm;\n\n     # Make site accessible from http://localhost/\n     server_name localhost;\n\n     location / {\n         proxy_pass http://localhost:3000/;\n         proxy_http_version 1.1;\n         proxy_set_header Upgrade $http_upgrade;\n         proxy_set_header Connection \"upgrade\";\n         proxy_set_header Host $http_host;\n         proxy_set_header X-Real-IP $remote_addr;\n         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n         proxy_set_header X-Forwarded-Proto http;\n         proxy_set_header X-Nginx-Proxy true;\n         proxy_redirect off;\n     }\n }\n\n server {\n     listen 80;\n\n     server_name <ABC.DOMAIN.COM>;\n\n     return 301 https://$host$request_uri;\n }\n```\n\n----------------------------------------\n\nTITLE: Setting a One-Time Access Token for Admin Login\nDESCRIPTION: JavaScript database command to create a one-time login token for an administrator user, requiring password change on next login. Used for regaining admin access.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/restoring-an-admin-user.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.getCollection('users').update({username:\"administrator\"}, {$set: { \"services\":{\"loginToken\":{\"token\":\"some-token-id-that-you-will-use-to-login-once\"}}, \"requirePasswordChange\":true} })\n```\n\n----------------------------------------\n\nTITLE: Nginx SSL Reverse Proxy Configuration\nDESCRIPTION: Complete Nginx server block configuration for SSL termination and reverse proxying to multiple Rocket.Chat instances.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/running-multiple-instances.md#2025-04-06_snippet_3\n\nLANGUAGE: apacheconf\nCODE:\n```\n# HTTPS Server\nserver {\n    listen 443;\n    server_name your_hostname.com;\n\n    error_log /var/log/nginx/rocketchat.access.log;\n\n    ssl on;\n    ssl_certificate /etc/nginx/certificate.crt;\n    ssl_certificate_key /etc/nginx/certificate.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $http_host;\n\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_redirect off;\n        client_max_body_size 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Replication in mongod.conf\nDESCRIPTION: This snippet shows how to add replication configuration to the MongoDB configuration file. It sets the replica set name to 'rs01'.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/configure-a-replica-set-for-mongodb.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nreplication: // indicates the beginning of the replication configuration section\n  replSetName: \"rs01\"\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Configuration Parameters for RocketChat\nDESCRIPTION: A comprehensive list of configuration parameters for RocketChat Kubernetes deployment including affinity rules, MongoDB settings, persistence configuration, security contexts, and ingress settings. Each parameter includes its description and default value.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\naffinity: {}\nminAvailable: 1\nexistingMongodbSecret: \"\"\nexternalMongodbUrl: \"\"\nexternalMongodbOplogUrl: \"\"\nmongodb.enabled: true\npersistence.enabled: false\npersistence.storageClass: \"\"\npersistence.accessMode: ReadWriteOnce\npersistence.size: 8Gi\npersistence.existingClaim: \"\"\nresources: {}\nsecurityContext.enabled: true\nsecurityContext.runAsUser: 999\nsecurityContext.fsGroup: 999\nserviceAccount.create: true\nserviceAccount.name: \"\"\ningress.enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstart for Rocket.Chat MongoDB (Docker-Compose)\nDESCRIPTION: This snippet demonstrates how to create an Upstart job for managing the MongoDB service for Rocket.Chat using Docker Compose. It includes dependencies and startup commands.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-process-managers-and-init-systems.md#2025-04-06_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndescription \"MongoDB service manager for rocketchat\"\n\n# Start MongoDB after docker is running\nstart on (started docker)\nstop on runlevel [!2345]\n\n# Automatically Respawn with finite limits\nrespawn\nrespawn limit 99 5\n\n# Path to our app\nchdir /var/www/rocket.chat\n\nscript\n    # start mongoDB\n    exec /usr/local/bin/docker compose up db\nend script\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Fields Configuration in Rocket.Chat\nDESCRIPTION: Simple JSON configuration for adding basic text-type custom fields 'Team' and 'Designation' in Rocket.Chat user registration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/accounts/configure-custom-fields-for-users.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Team\": {\n\t\t\"type\": \"text\"\n\t},\n\t\"Designation\": {\n\t\t\"type\": \"text\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Rocket.Chat Container Logs\nDESCRIPTION: Command to view the logs of the Rocket.Chat container for monitoring and troubleshooting.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs -f rocketchat\n```\n\n----------------------------------------\n\nTITLE: Assigning Auditor-Log Role in Rocket.Chat\nDESCRIPTION: This code snippet shows the 'auditor-log' role in Rocket.Chat. It allows a user to see logs about all audited messages with timestamps and by whom. Users with only this role cannot send messages.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<code>auditor-log</code>\n```\n\n----------------------------------------\n\nTITLE: Starting Traefik Proxy\nDESCRIPTION: Docker Compose command to start the Traefik proxy service using the downloaded configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f traefik.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Implementing Outgoing Webhook Script for GitHub Integration in JavaScript\nDESCRIPTION: This script demonstrates how to create an outgoing webhook for Rocket.Chat that interacts with GitHub. It includes methods for preparing outgoing requests and processing responses, with examples of handling pull request listings and custom help commands.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/README.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported Script */\n/* globals console, _, s, HTTP */\n\n/** Global Helpers\n *\n * console - A standard console instance\n * _       - An underscore instance\n * s       - An underscore string instance\n * HTTP    - The Meteor HTTP object to do sync http calls\n */\n\nclass Script {\n  /**\n   * @params {object} request\n   */\n  prepare_outgoing_request({ request }) {\n    // request.params            {object}\n    // request.method            {string}\n    // request.url               {string}\n    // request.auth              {string}\n    // request.headers           {object}\n    // request.data.token        {string}\n    // request.data.channel_id   {string}\n    // request.data.channel_name {string}\n    // request.data.timestamp    {date}\n    // request.data.user_id      {string}\n    // request.data.user_name    {string}\n    // request.data.text         {string}\n    // request.data.trigger_word {string}\n\n    let match;\n\n    // Change the URL and method of the request\n    match = request.data.text.match(/^pr\\s(ls|list)/);\n    if (match) {\n      return {\n        url: request.url + '/pulls',\n        headers: request.headers,\n        method: 'GET'\n      };\n    }\n\n    // Prevent the request and return a new message\n    match = request.data.text.match(/^help$/);\n    if (match) {\n      return {\n        message: {\n          text: [\n            '**commands**',\n            '```',\n              '  pr ls [open|closed|all]  List Pull Requests',\n            '```'\n          ].join('\\n')\n          // \"channel\": \"#name-of-channel\",\n          // \"attachments\": [{\n          //   \"color\": \"#FF0000\",\n          //   \"author_name\": \"Rocket.Cat\",\n          //   \"author_link\": \"https://open.rocket.chat/direct/rocket.cat\",\n          //   \"author_icon\": \"https://open.rocket.chat/avatar/rocket.cat.jpg\",\n          //   \"title\": \"Rocket.Chat\",\n          //   \"title_link\": \"https://rocket.chat\",\n          //   \"text\": \"Rocket.Chat, the best open source chat\",\n          //   \"fields\": [{\n          //     \"title\": \"Priority\",\n          //     \"value\": \"High\",\n          //     \"short\": false\n          //   }],\n          //   \"image_url\": \"https://rocket.chat/images/mockup.png\",\n          //   \"thumb_url\": \"https://rocket.chat/images/mockup.png\"\n          // }]\n        }\n      };\n    }\n  }\n\n  /**\n   * @params {object} request, response\n   */\n  process_outgoing_response({ request, response }) {\n    // request              {object} - the object returned by prepare_outgoing_request\n\n    // response.error       {object}\n    // response.status_code {integer}\n    // response.content     {object}\n    // response.content_raw {string/object}\n    // response.headers     {object}\n\n    var text = [];\n    response.content.forEach(function(pr) {\n      text.push('> '+pr.state+' [#'+pr.number+']('+pr.html_url+') - '+pr.title);\n    });\n\n    // Return false will abort the response\n    // return false;\n\n    // Return empty will proceed with the default response process\n    // return;\n\n    return {\n      content: {\n        text: text.join('\\n'),\n        parseUrls: false\n        // \"attachments\": [{\n        //   \"color\": \"#FF0000\",\n        //   \"author_name\": \"Rocket.Cat\",\n        //   \"author_link\": \"https://open.rocket.chat/direct/rocket.cat\",\n        //   \"author_icon\": \"https://open.rocket.chat/avatar/rocket.cat.jpg\",\n        //   \"title\": \"Rocket.Chat\",\n        //   \"title_link\": \"https://rocket.chat\",\n        //   \"text\": \"Rocket.Chat, the best open source chat\",\n        //   \"fields\": [{\n        //     \"title\": \"Priority\",\n        //     \"value\": \"High\",\n        //     \"short\": false\n        //   }],\n        //   \"image_url\": \"https://rocket.chat/images/mockup.png\",\n        //   \"thumb_url\": \"https://rocket.chat/images/mockup.png\"\n        // }]\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitLab Webhook Handler in JavaScript for Rocket.Chat\nDESCRIPTION: This code implements a webhook handler for GitLab events in Rocket.Chat. It processes various GitLab events like push, merge requests, comments, and issues, formatting them into Rocket.Chat messages. The script includes functions for parsing different event types and creating appropriate message attachments.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/gitlab.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint no-console:0, max-len:0 */\n// see <https://gitlab.com/help/web_hooks/web_hooks> for full json posted by GitLab\nconst MENTION_ALL_ALLOWED = false; // <- check that bot permission allow has mention-all before passing this to true.\nconst NOTIF_COLOR = '#6498CC';\nconst IGNORE_CONFIDENTIAL = true;\nconst refParser = (ref) => ref.replace(/^refs\\/(?:tags|heads)\\/(.+)$/, '$1');\nconst displayName = (name) => (name && name.toLowerCase().replace(/\\s+/g, '.'));\nconst atName = (user) => (user && user.name ? '@' + displayName(user.name) : '');\nconst makeAttachment = (author, text, color) => {\n    return {\n        author_name: author ? displayName(author.name) : '',\n        author_icon: author ? author.avatar_url : '',\n        text,\n        color: color || NOTIF_COLOR\n    };\n};\nconst pushUniq = (array, val) => ~array.indexOf(val) || array.push(val); // eslint-disable-line\n\nclass Script { // eslint-disable-line\n    process_incoming_request({ request }) {\n        try {\n            let result = null;\n            const channel = request.url.query.channel;\n            const event = request.headers['x-gitlab-event'];\n            switch (event) {\n                case 'Push Hook':\n                    result = this.pushEvent(request.content);\n                    break;\n                case 'Merge Request Hook':\n                    result = this.mergeRequestEvent(request.content);\n                    break;\n                case 'Note Hook':\n                    result = this.commentEvent(request.content);\n                    break;\n                case 'Confidential Issue Hook':\n                case 'Issue Hook':\n                    result = this.issueEvent(request.content, event);\n                    break;\n                case 'Tag Push Hook':\n                    result = this.tagEvent(request.content);\n                    break;\n                case 'Pipeline Hook':\n                    result = this.pipelineEvent(request.content);\n                    break;\n                case 'Build Hook': // GitLab < 9.3\n                    result = this.buildEvent(request.content);\n                    break;\n                case 'Job Hook': // GitLab >= 9.3.0\n                    result = this.buildEvent(request.content);\n                    break;\n                case 'Wiki Page Hook':\n                    result = this.wikiEvent(request.content);\n                    break;\n                default:\n                    result = this.unknownEvent(request, event);\n                    break;\n            }\n            if (result && result.content && channel) {\n                result.content.channel = '#' + channel;\n            }\n            return result;\n        } catch (e) {\n            console.log('gitlabevent error', e);\n            return this.createErrorChatMessage(e);\n        }\n    }\n\n    createErrorChatMessage(error) {\n        return {\n            content: {\n                username: 'Rocket.Cat ErrorHandler',\n                text: 'Error occured while parsing an incoming webhook request. Details attached.',\n                icon_url: '',\n                attachments: [\n                    {\n                        text: `Error: '${error}', \\n Message: '${error.message}', \\n Stack: '${error.stack}'`,\n                        color: NOTIF_COLOR\n                    }\n                ]\n            }\n        };\n    }\n\n    unknownEvent(data, event) {\n        return {\n            content: {\n                username: data.user ? data.user.name : (data.user_name || 'Unknown user'),\n                text: `Unknown event '${event}' occured. Data attached.`,\n                icon_url: data.user ? data.user.avatar_url : (data.user_avatar || ''),\n                attachments: [\n                    {\n                        text: `${JSON.stringify(data, null, 4)}`,\n                        color: NOTIF_COLOR\n                    }\n                ]\n            }\n        };\n    }\n    issueEvent(data, event) {\n        if (event === 'Confidential Issue Hook' && IGNORE_CONFIDENTIAL) {\n            return false;\n        }\n        const project = data.project || data.repository;\n        const state = data.object_attributes.state;\n        const action = data.object_attributes.action;\n        let user_action = state;\n        let assigned = '';\n\n        if (action === 'update') {\n            user_action = 'updated';\n        }\n\n        if (data.assignee) {\n            assigned = `*Assigned to*: @${data.assignee.username}\\n`;\n        }\n\n        return {\n            content: {\n                username: 'gitlab/' + project.name,\n                icon_url: project.avatar_url || data.user.avatar_url || '',\n                text: (data.assignee && data.assignee.name !== data.user.name) ? atName(data.assignee) : '',\n                attachments: [\n                    makeAttachment(\n                        data.user, `${user_action} an issue _${data.object_attributes.title}_ on ${project.name}.\n*Description:* ${data.object_attributes.description}.\n${assigned}\nSee: ${data.object_attributes.url}`\n                    )\n                ]\n            }\n        };\n    }\n\n    commentEvent(data) {\n        const project = data.project || data.repository;\n        const comment = data.object_attributes;\n        const user = data.user;\n        const at = [];\n        let text;\n        if (data.merge_request) {\n            const mr = data.merge_request;\n            const lastCommitAuthor = mr.last_commit && mr.last_commit.author;\n            if (mr.assignee && mr.assignee.name !== user.name) {\n                at.push(atName(mr.assignee));\n            }\n            if (lastCommitAuthor && lastCommitAuthor.name !== user.name) {\n                pushUniq(at, atName(lastCommitAuthor));\n            }\n            text = `commented on MR [#${mr.id} ${mr.title}](${comment.url})`;\n        } else if (data.commit) {\n            const commit = data.commit;\n            const message = commit.message.replace(/\\n[^\\s\\S]+/, '...').replace(/\\n$/, '');\n            if (commit.author && commit.author.name !== user.name) {\n                at.push(atName(commit.author));\n            }\n            text = `commented on commit [${commit.id.slice(0, 8)} ${message}](${comment.url})`;\n        } else if (data.issue) {\n            const issue = data.issue;\n            text = `commented on issue [#${issue.id} ${issue.title}](${comment.url})`;\n        } else if (data.snippet) {\n            const snippet = data.snippet;\n            text = `commented on code snippet [#${snippet.id} ${snippet.title}](${comment.url})`;\n        }\n        return {\n            content: {\n                username: 'gitlab/' + project.name,\n                icon_url: project.avatar_url || user.avatar_url || '',\n                text: at.join(' '),\n                attachments: [\n                    makeAttachment(user, `${text}\\n${comment.note}`)\n                ]\n            }\n        };\n    }\n\n    mergeRequestEvent(data) {\n        const user = data.user;\n        const mr = data.object_attributes;\n        const assignee = mr.assignee;\n        let at = [];\n\n        if (mr.action === 'open' && assignee) {\n            at = '\\n' + atName(assignee);\n        } else if (mr.action === 'merge') {\n            const lastCommitAuthor = mr.last_commit && mr.last_commit.author;\n            if (assignee && assignee.name !== user.name) {\n                at.push(atName(assignee));\n            }\n            if (lastCommitAuthor && lastCommitAuthor.name !== user.name) {\n                pushUniq(at, atName(lastCommitAuthor));\n            }\n        }\n        return {\n            content: {\n                username: `gitlab/${mr.target.name}`,\n                icon_url: mr.target.avatar_url || mr.source.avatar_url || user.avatar_url || '',\n                text: at.join(' '),\n                attachments: [\n                    makeAttachment(user, `${mr.action} MR [#${mr.iid} ${mr.title}](${mr.url})\\n${mr.source_branch} into ${mr.target_branch}`)\n                ]\n            }\n        };\n    }\n\n    pushEvent(data) {\n        const project = data.project || data.repository;\n        const web_url = project.web_url || project.homepage;\n        const user = {\n            name: data.user_name,\n            avatar_url: data.user_avatar\n        };\n        // branch removal\n        if (data.checkout_sha === null && !data.commits.length) {\n            return {\n                content: {\n                    username: `gitlab/${project.name}`,\n                    icon_url: project.avatar_url || data.user_avatar || '',\n                    attachments: [\n                        makeAttachment(user, `removed branch ${refParser(data.ref)} from [${project.name}](${web_url})`)\n                    ]\n                }\n            };\n        }\n        // new branch\n        if (data.before == 0) { // eslint-disable-line\n            return {\n                content: {\n                    username: `gitlab/${project.name}`,\n                    icon_url: project.avatar_url || data.user_avatar || '',\n                    attachments: [\n                        makeAttachment(user, `pushed new branch [${refParser(data.ref)}](${web_url}/commits/${refParser(data.ref)}) to [${project.name}](${web_url}), which is ${data.total_commits_count} commits ahead of master`)\n                    ]\n                }\n            };\n        }\n        return {\n            content: {\n                username: `gitlab/${project.name}`,\n\n\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific Hostname for Replica Set Initiation\nDESCRIPTION: This command demonstrates how to force a specific hostname when initiating the replica set, useful for troubleshooting network-related issues.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/configure-a-replica-set-for-mongodb.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrs.initiate({ _id: 'rs01', members: [ { _id: 0, host: 'localhost:27017' } ]})\n```\n\n----------------------------------------\n\nTITLE: Creating Admin User with Environment Variables in Rocket.Chat\nDESCRIPTION: This snippet shows how to create the first admin user by defining environment variables before starting the Rocket.Chat server. It sets the ROOT_URL, MONGO_URL, PORT, and admin credentials.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/accessing-your-workspace/admin-account-creation.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ROOT_URL=http://your-host-name.com-as-accessed-from-internet:3000/\nexport MONGO_URL=mongodb://localhost:27017/rocketchat\nexport PORT=3000\nexport ADMIN_USERNAME=admin\nexport ADMIN_PASS=supersecret\nexport ADMIN_EMAIL=admin@example.com\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: GitHub Webhook Handler Script - Comprehensive Events\nDESCRIPTION: JavaScript webhook handler that processes GitHub events including issue events, comments, commits, and pull requests. The script formats notifications with detailed information and avatar thumbnails for each event type.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/github.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported Script */\n\nString.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nconst getLabelsField = (labels) => {\n  let labelsArray = [];\n  labels.forEach(function(label) {\n    labelsArray.push(label.name);\n  });\n  labelsArray = labelsArray.join(', ');\n  return {\n    title: 'Labels',\n    value: labelsArray,\n    short: labelsArray.length <= 40\n  };\n};\n\nconst githubEvents = {\n  ping(request) {\n    return {\n      content: {\n        text: '_' + request.content.hook.id + '_\\n' + ':thumbsup: ' + request.content.zen\n      }\n    };\n  },\n\n  /* NEW OR MODIFY ISSUE */\n  issues(request) {\n    const user = request.content.sender;\n\n    if (request.content.action == \"opened\" || request.content.action == \"reopened\" || request.content.action == \"edited\") {\n        var body = request.content.issue.body;\n    } else if (request.content.action == \"labeled\") {\n        var body = \"Current labels: \" + getLabelsField(request.content.issue.labels).value;\n    } else if (request.content.action == \"assigned\" || request.content.action == \"unassigned\") {\n        // Note that the issues API only gives you one assignee.\n        var body = \"Current assignee: \" + request.content.issue.assignee.login;\n    } else if (request.content.action == \"closed\") {\n        if (request.content.issue.closed_by) {\n            var body = \"Closed by: \" + request.content.issue.closed_by.login;\n        } else {\n            var body = \"Closed.\";\n        }\n    } else {\n        return {\n          error: {\n            success: false,\n            message: 'Unsupported issue action'\n          }\n        };\n    }\n\n    const action = request.content.action.capitalizeFirstLetter();\n\n    const text = '_' + request.content.repository.full_name + '_\\n' +\n                '**[' + action + ' issue ​#' + request.content.issue.number +\n                ' - ' + request.content.issue.title + '](' +\n                request.content.issue.html_url + ')**\\n\\n' +\n                body;\n\n    return {\n      content: {\n        attachments: [\n            {\n                thumb_url: user.avatar_url,\n                text: text,\n                fields: []\n            }\n        ]\n      }\n    };\n  },\n\n  /* COMMENT ON EXISTING ISSUE */\n  issue_comment(request) {\n    const user = request.content.comment.user;\n\n    if (request.content.action == \"edited\") {\n        var action = \"Edited comment \";\n    } else {\n        var action = \"Comment \"\n    }\n\n    const text = '_' + request.content.repository.full_name + '_\\n' +\n                '**[' + action + ' on issue ​#' + request.content.issue.number +\n                ' - ' + request.content.issue.title + '](' +\n                request.content.comment.html_url + ')**\\n\\n' +\n                request.content.comment.body;\n\n    return {\n      content: {\n        attachments: [\n            {\n                thumb_url: user.avatar_url,\n                text: text,\n                fields: []\n            }\n        ]\n      }\n    };\n  },\n\n /* COMMENT ON COMMIT */\ncommit_comment(request) {\n    const user = request.content.comment.user;\n\n    if (request.content.action == \"edited\") {\n        var action = \"Edited comment \";\n    } else {\n        var action = \"Comment \"\n    }\n\n    const text = '_' + request.content.repository.full_name + '_\\n' +\n                '**[' + action + ' on commit id ' + request.content.comment.commit_id +\n                ' - ' +  + '](' +\n                request.content.comment.html_url + ')**\\n\\n' +\n                request.content.comment.body;\n\n    return {\n      content: {\n        attachments: [\n            {\n                thumb_url: user.avatar_url,\n                text: text,\n                fields: []\n            }\n        ]\n      }\n    };\n  },\n  /* END OF COMMENT ON COMMIT */\n\n  /* PUSH TO REPO */\n  push(request) {\n    var commits = request.content.commits;\n    var multi_commit = \"\"\n    var is_short = true;\n    var changeset = 'Changeset';\n    if ( commits.length > 1 ) {\n      var multi_commit = \" [Multiple Commits]\";\n      var is_short = false;\n      var changeset = changeset + 's';\n      var output = [];\n    }\n    const user = request.content.sender;\n\n    var text = '**Pushed to ' + \"[\"+request.content.repository.full_name+\"](\"+request.content.repository.url+\"):\" \n                + request.content.ref.split('/').pop() + \"**\\n\\n\";\n\n    for (var i = 0; i < commits.length; i++) {\n      var commit = commits[i];\n      var shortID = commit.id.substring(0,7);\n      var a = '[' + shortID + '](' + commit.url + ') - ' + commit.message;\n      if ( commits.length > 1 ) {\n        output.push( a );\n      } else {\n        var output = a;\n      }\n    }\n\n    if (commits.length > 1) {\n      text += output.reverse().join('\\n');\n    } else {\n      text += output;\n    }\n\n    return {\n      content: {\n        attachments: [\n            {\n                thumb_url: user.avatar_url,\n                text: text,\n                fields: []\n            }\n        ]\n      }\n    };\n  },  // End GitHub Push\n\n  /* NEW PULL REQUEST */\n  pull_request(request) {\n    const user = request.content.sender;\n\n   if (request.content.action == \"opened\" || request.content.action == \"reopened\" || request.content.action == \"edited\" || request.content.action == \"synchronize\") {\n        var body = request.content.pull_request.body;\n    } else if (request.content.action == \"labeled\") {\n        var body = \"Current labels: \" + getLabelsField(request.content.pull_request.labels).value;\n    } else if (request.content.action == \"assigned\" || request.content.action == \"unassigned\") {\n        // Note that the issues API only gives you one assignee.\n        var body = \"Current assignee: \" + request.content.pull_request.assignee.login;\n    } else if (request.content.action == \"closed\") {\n        if (request.content.pull_request.merged) {\n            var body = \"Merged by: \" + request.content.pull_request.merged_by.login;\n        } else {\n            var body = \"Closed.\";\n        }\n    } else {\n        return {\n          error: {\n            success: false,\n            message: 'Unsupported pull request action'\n          }\n        };\n    }\n\n    const action = request.content.action.capitalizeFirstLetter();\n\n    const text = '_' + request.content.repository.full_name + '_\\n' +\n                '**[' + action + ' pull request ​#' + request.content.pull_request.number +\n                ' - ' + request.content.pull_request.title + '](' +\n                request.content.pull_request.html_url + ')**\\n\\n' +\n                body;\n\n    return {\n      content: {\n        attachments: [\n            {\n                thumb_url: user.avatar_url,\n                text: text,\n                fields: []\n            }\n        ]\n      }\n    };\n  },\n};\n\nclass Script {\n  process_incoming_request({ request }) {\n    const header = request.headers['x-github-event'];\n    if (githubEvents[header]) {\n      return githubEvents[header](request);\n    }\n\n    return {\n      error: {\n        success: false,\n        message: 'Unsupported method'\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rocket.Chat Snap Configuration Variables\nDESCRIPTION: Command to configure a specific variable for the Rocket.Chat server snap installation, allowing customization of server settings.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap set rocketchat-server <variable-name>=<value>\n```\n\n----------------------------------------\n\nTITLE: Remote MongoDB Backup Command\nDESCRIPTION: Command for backing up a remote MongoDB instance using mongodump with URI connection string. Allows specifying host URL/IP and port number.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-backup-and-restore.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmongodump --uri=\"mongodb://<host URL/IP>:<Port>\" [additional options]\n```\n\n----------------------------------------\n\nTITLE: Enabling Microservices in Helm Values\nDESCRIPTION: YAML configuration to enable microservices deployment in Rocket.Chat helm chart.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/microservices.md#2025-04-06_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmicroservices:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 CORS in JSON Format for Rocket.Chat\nDESCRIPTION: This JSON configuration snippet sets up Cross-Origin Resource Sharing (CORS) for an Amazon S3 bucket when using the new AWS console interface. It defines allowed headers, methods, origins, and other CORS parameters to enable Rocket.Chat to properly interact with the S3 storage.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/file-upload/README.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllowedHeaders\": [\n        \"*\"\n    ],\n    \"AllowedMethods\": [\n        \"PUT\",\n        \"POST\",\n        \"GET\",\n        \"HEAD\"\n    ],\n    \"AllowedOrigins\": [\n        \"*ROCKET_CHAT_DOMAIN*\"\n    ],\n    \"ExposeHeaders\": [],\n    \"MaxAgeSeconds\": 3000\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Granting MongoDB Permissions for Version Checking\nDESCRIPTION: Bash command for granting the necessary clusterMonitor role to a MongoDB user, allowing Rocket.Chat to check cluster data when MongoDB authentication is enabled with a non-admin user.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/supported-mongodb-versions.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndb.runCommand({ grantRolesToUser: \"YOUR_USER\" , roles: [{role: \"clusterMonitor\", db: \"admin\"}]})\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy SSL Reverse Proxy for Rocket.Chat\nDESCRIPTION: Caddy server configuration for setting up an SSL reverse proxy for Rocket.Chat with automatic HTTPS and CORS headers.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/configuring-ssl-reverse-proxy.md#2025-04-06_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nyourdomain.com {\n        reverse_proxy localhost:3000\n        header Access-Control-Allow-Methods \"POST, GET, OPTIONS\"\n        header Access-Control-Allow-Headers \"*\"\n        import cors https://sub.domain.livechat\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rocket.Chat using Helm\nDESCRIPTION: Command to install Rocket.Chat using Helm with the specified values.yaml file.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install rocketchat -f values.yaml rocketchat/rocketchat\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Permission Codes\nDESCRIPTION: Table of permission codes and their descriptions used in Rocket.Chat platform for controlling user access and capabilities.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/README.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Run Import | `run-import` | Permission to use the data importer tools. Must also be an admin. Accessible from Administration -> Import. |\n| Run Migration | `run-migration` | Permission to run migrations. |\n| Save All Canned Responses | `save-all-canned-responses` | Permission to save all canned responses. |\n| Save Canned Responses | `save-canned-responses` | Permission to save canned responses. |\n| Save Department Canned Responses | `save-department-canned-responses` | Permission to save canned responses in the right. |\n| Save Others Omnichannel Room Info | `save-others-livechat-room-info` | Permission to add additional information to both the visitor and Live Chat rooms. |\n| Send Many Messages | `send-many-messages` | Permission to bypasses rate limit of 5 messages per second. |\n| Send Omnichannel Conversation Transcript | `send-omnichannel-chat-transcript` | Permission to send omnichannel transcript. |\n| Set Leader | `set-leader` | Permission to set leaders for channels |\n| Set Moderator | `set-moderator` | Permission to set moderators for channels. |\n| Set Owner | `set-owner` | Permission to set other users as owner of a public channel. |\n| Set React When ReadOnly | `set-react-when-readonly` | Permission to react to messages in only channels. |\n| Set ReadOnly | `set-readonly` | Permission to set room read-only. Accessible from Room Info -> Edit. |\n| Snippet Message | `snippet-message` | Permission to create message snippets. |\n| Spy Voip Calls | `spy-voip-calls` | |\n| Start Discussion | `start-discussion` | Permission to start a discussion. |\n| Start Discussion (Other-User) | `start-discussion-other-user` | Permission to start a discussion, which gives permission to the user to create a discussion from a message sent by another user as well. |\n| Sync authentication services' users | `sync-auth-services-users` | Permission to sync users from other authentication services to the workspace. |\n| Toggle Room E2E Encryption | `toggle-room-e2e-encryption` | Permission to toggle E2E encryption. |\n| Unarchive Room | `unarchive-room` | Permission to unarchive channels. |\n| User Generate Access Token | `user-generate-access-token` | Permission to create authorization tokens for users. |\n| Ring other users when calling | `videoconf-ring-users` | Permission to ring other users when calling. |\n| View Agent Canned Responses | `view-agent-canned-responses` | Permission to view canned responses of an agent. |\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Group Channel Map in JSON\nDESCRIPTION: Example JSON configuration for the OAuth Group Channel Map field in Rocket.Chat. This maps the 'Managers' Keycloak group to the 'managers-channel' in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/openid-connect/keycloak.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Managers\": \"managers-channel\"\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Backup in Docker\nDESCRIPTION: Command to create a MongoDB backup dump from a running Docker container.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec <container_name> sh -c 'mongodump --archive' > db.dump\n```\n\n----------------------------------------\n\nTITLE: Processing Azure Alerts in Rocket.Chat Webhook (JavaScript)\nDESCRIPTION: This script processes incoming Azure Alert webhooks in Rocket.Chat. It formats the alert information into a message with color-coded status, condition details, and relevant fields.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/azure-alerts.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Script {\n  process_incoming_request({ request }) {\n    // console is a global helper to improve debug\n    console.log(request.content);\n\n    var alertColor = \"warning\";\n\n    if(request.content.status === \"Resolved\"){ alertColor = \"good\"; }\n    else if (request.content.status === \"Activated\") { alertColor = \"danger\"; }\n\n    var condition = request.content.context.condition;\n\n    return {\n      content:{\n       username: \"Azure\",\n        text: \"Azure Alert Notification\",\n        attachments: [{\n          title: request.content.context.name,\n          pretext: request.content.context.description,\n          title_link: request.content.context.portalLink,\n          text: condition.failureDetails,\n          color: alertColor,\n          fields: [\n            {\n              title: \"Status\",\n              value: request.content.status + \"   @ \" + request.content.context.timestamp\n            },\n            {\n              title: \"Condition\",\n              value: condition.metricName + \": \" + condition.metricValue + \" \" + condition.metricUnit + \" for more than \" + condition.windowSize + \" min.\"\n            },\n            {\n              title: \"Threshold\",\n              value: condition.operator + \" \" + condition.threshold\n            }\n          ]\n        }]\n       }\n    };\n\n    return {\n       error: {\n         success: false,\n         message: 'Error'\n       }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rocket.Chat Releases API Response for MongoDB Compatibility\nDESCRIPTION: Sample JSON response from the Rocket.Chat releases API showing version information including compatible MongoDB versions for Rocket.Chat 6.0.0.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/supported-mongodb-versions.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tag\": \"6.0.0\",\n    \"commit\": \"aa8f0ec70b2267af55d9ce9a3e3abfe7ff6c0a37\",\n    \"key\": \"build/rocket.chat-6.0.0.tgz\",\n    \"etag\": \"8cfdb5bc71da00605faa00c46ef7d929-32\",\n    \"count\": 2840,\n    \"nodeVersion\": \"14.21.2\",\n    \"compatibleMongoVersions\": [\n        \"4.4\",\n        \"5.0\",\n        \"6.0\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling GitLab Pipeline Event in JavaScript\nDESCRIPTION: This function processes a GitLab pipeline event and formats it for Rocket.Chat notification. It includes details about the pipeline status, commit, and author.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/gitlab.md#2025-04-06_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npipelineEvent(data) {\n    const project = data.project || data.repository;\n    const commit = data.commit;\n    const user = {\n        name: data.user_name,\n        avatar_url: data.user_avatar\n    };\n    const pipeline = data.object_attributes;\n\n    return {\n        content: {\n            username: `gitlab/${project.name}`,\n            icon_url: project.avatar_url || data.user_avatar || '',\n            attachments: [\n                makeAttachment(user, `pipeline returned *${pipeline.status}* for commit [${commit.id.slice(0, 8)}](${commit.url}) made by *${commit.author.name}*`, this.createColor(pipeline.status))\n            ]\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Pexip Call in Rocket.Chat\nDESCRIPTION: This snippet demonstrates how to start a Pexip video conference call within a Rocket.Chat room using a slash command.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-conference-call/conference-call-admin-guide/pexip-app.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/pexip\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Zapier Actions Reference\nDESCRIPTION: Code block listing available action commands in Rocket.Chat Zapier integration, including channel management, messaging, and user operations.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/zapier-app/README.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nCreate channel\nInvite user to channel\nCreate private channel\nSend channel message\nSend direct message\nSend private channel message\nAdd reminder\nSet status\nFind channel\nFind private channel\nFind user by username\n```\n\n----------------------------------------\n\nTITLE: Processing GitHub Webhook Events in Rocket.Chat\nDESCRIPTION: Object containing handler functions for different GitHub webhook events including ping, issues, issue comments, pull requests, and pushes. Each handler formats the event data into Rocket.Chat message format with appropriate attachments.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/github.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst githubEvents = {\n  ping(request) {\n    return {\n      content: {\n        text: ':thumbsup: ' + request.content.zen\n      }\n    };\n  },\n\n  issues(request) {\n    const user = request.content.sender;\n    const attachment = {\n      author_icon: svg_inline_prefix + gh_iss_svg,\n      author_name: '#' + request.content.issue.number + ' - ' + request.content.issue.title,\n      author_link: request.content.issue.html_url,\n      fields: []\n    };\n\n    if (request.content.issue.labels) {\n      attachment.fields.push(getLabelsField(request.content.issue.labels));\n    }\n\n    if (request.content.issue.assignee) {\n      attachment.fields.push({\n        title: 'Assignee',\n        value: request.content.issue.assignee.login,\n        short: true\n      });\n    }\n\n    const actions = {\n      'assigned': ':inbox_tray:',\n      'unassigned': ':outbox_tray:',\n      'opened': ':triangular_flag_on_post:',\n      'closed': ':white_check_mark:',\n      'reopened': ':triangular_flag_on_post:',\n      'labeled': ':label:',\n      'unlabeled': ':label:',\n      'edited': ':pencil:'\n    };\n\n    const text = actions[request.content.action] + ' issue';\n\n    return {\n      content: {\n        icon_url: user.avatar_url,\n        alias: user.login,\n        text: text,\n        attachments: [attachment]\n      }\n    };\n  },\n\n  issue_comment(request) {\n    const user = request.content.comment.user;\n    var attachment = {\n      author_icon: svg_inline_prefix + gh_iss_svg,\n      author_name: '#' + request.content.issue.number + ' - ' + request.content.issue.title,\n      author_link: request.content.comment.html_url,\n      fields: []\n    };\n\n    if (request.content.issue.labels) {\n      attachment.fields.push(getLabelsField(request.content.issue.labels));\n    }\n\n    if (request.content.issue.assignee) {\n      attachment.fields.push({\n        title: 'Assignee',\n        value: request.content.issue.assignee.login,\n        short: true\n      });\n    }\n\n    const text = ':speech_balloon: ' + request.content.comment.body;\n\n    return {\n      content: {\n        icon_url: user.avatar_url,\n        alias: user.login,\n        text: text,\n        attachments: [attachment]\n      }\n    };\n  },\n\n  pull_request(request) {\n    const user = request.content.sender;\n    const attachment = {\n      author_icon: svg_inline_prefix + gh_pr_svg,\n      author_name: '#' + request.content.pull_request.number + ' - ' + request.content.pull_request.title,\n      author_link: request.content.pull_request.html_url\n    };\n\n    let text = 'Pull request';\n    switch (request.content.action) {\n      case 'assigned':\n        text += ' assigned to: ' + request.content.assignee.login;\n        break;\n      case 'unassigned':\n        text += ' unassigned of ' + request.content.assignee.login;\n        break;\n      case 'opened':\n        text += ' opened';\n        break;\n      case 'closed':\n        if (request.content.pull_request.merged) {\n          text += ' merged';\n        } else {\n          text += ' closed';\n        }\n        break;\n      case 'reopened':\n        text += ' reopened';\n        break;\n      case 'labeled':\n        text += ' added label: \"' + request.content.label.name + '\" ';\n        break;\n      case 'unlabeled':\n        text += ' removed label: \"' + request.content.label.name + '\" ';\n        break;\n      case 'synchronize':\n        text += ' synchronized';\n    }\n\n    return {\n      content: {\n        icon_url: user.avatar_url,\n        alias: user.login,\n        text: text,\n        attachments: [attachment]\n      }\n    };\n  },\n\n  //// GitHub push event\n  push(request) {\n    var commits = request.content.commits;\n    var multi_commit = \"\"\n    var is_short = true;\n    var changeset = 'Changeset';\n    if ( commits.length > 1 ) {\n      var multi_commit = \" [Multiple Commits]\";\n      var is_short = false;\n      var changeset = changeset + 's';\n      var output = [];\n    }\n    const user = request.content.sender;\n    const attachment = {\n    author_icon: svg_inline_prefix + gh_cmit_svg,\n      author_name: \"Message: \" + request.content.head_commit.message + multi_commit,\n      author_link: request.content.compare,\n      fields: []\n    };\n\n    if (request.content.repository.full_name) {\n      attachment.fields.push({\n        title: 'Repo',\n        value: \"[\"+request.content.repository.full_name+\"](\"+request.content.repository.url+\")\",\n        short: is_short\n      });\n    }\n\n    for (var i = 0; i < commits.length; i++) {\n      var commit = commits[i];\n      var shortID = commit.id.substring(0,7);\n      if ( commits.length > 1 ) {\n        output = '[' + shortID + '](' + commit.url + ') - ' + commit.message\n        if (i == 0){\n            attachment.fields.push({\n                title: changeset,\n                value: output,\n                short: is_short\n            });\n        } else{\n            attachment.fields.push({\n                title: changeset,\n                value: output,\n                short: is_short\n            });\n        }\n      } else {\n        output = \"[\" + shortID + \"](\" + commit.url + \")\"\n        attachment.fields.push({\n            title: changeset,\n            value: output,\n            short: is_short\n        });\n      }\n    }\n\n    const text = ':ballot_box_with_check: Pushed to ' + \"[\"+request.content.ref.split('/').pop()+\"]\";\n\n    return {\n      content: {\n        icon_url: user.avatar_url,\n        alias: user.login,\n        text: text,\n        attachments: [attachment]\n      }\n  };\n  },  // End GitHub Push\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translations in Rocket.Chat\nDESCRIPTION: Example JSON configuration for setting up custom translations in Rocket.Chat workspace. Shows how to define translations for different languages by mapping UI element names to their localized versions. The example demonstrates English and Portuguese translations for the 'Channels' term.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/general/README.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"en\": {\n  \"Channels\": \"Rooms\"\n },\n \"pt\": {\n  \"Channels\": \"Salas\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook Integration with cURL\nDESCRIPTION: Example cURL command to test the webhook integration by sending a POST request with JSON payload including message text and attachments.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/README.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H 'Content-Type: application/json' \\\n  --data '{\n      \"emoji\": \":smirk:\",\n      \"text\": \"Example message\",\n      \"attachments\": [\n          {\n              \"title\": \"Rocket.Chat\",\n              \"title_link\": \"https://rocket.chat\",\n              \"text\": \"Rocket.Chat, the best open source chat\",\n              \"image_url\": \"link-to-an-image\",\n              \"color\": \"#764FA5\"\n          }\n      ]\n  }' \\\n  https://your-webhook-url\n```\n\n----------------------------------------\n\nTITLE: Mapping LDAP Groups to Rocket.Chat Roles in JSON\nDESCRIPTION: JSON configuration for mapping LDAP groups to Rocket.Chat roles. The example shows how to map 'rocket-admin' group to 'admin' role, 'tech-support' to 'support' role, and 'manager' group to multiple roles ('leader' and 'moderator').\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/ldap/ldap-premium-settings.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rocket-admin\": \"admin\",\n\t\"tech-support\": \"support\",\n\t\"manager\": [\"leader\", \"moderator\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing TravisCI Webhook in JavaScript for Rocket.Chat\nDESCRIPTION: JavaScript implementation that processes incoming webhook requests from TravisCI and formats them as Rocket.Chat messages. The script creates color-coded message attachments that include build status, commit details, pull request information, and build duration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/travis-ci.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst buildMessage = (obj) => {\n  const min = Math.floor(obj.duration / 60);\n  const sec = obj.duration - min * 60;\n\n  let template = `Build [#${obj.number}](${obj.build_url})`;\n  template += ` ([${obj.commit.substring(0, 7)}](${obj.compare_url})) of`\n  template += ` ${obj.repository.owner_name}/${obj.repository.name}@${obj.branch}`;\n  if(obj.pull_request) {\n     let pr_url = `https://github.com/${obj.repository.owner_name}/`;\n     pr_url += `${obj.repository.name}/pull/${obj.pull_request_number}`;\n     template += ` in PR [#${obj.pull_request_number}](${pr_url})`;\n  }\n  template += ` by ${obj.author_name} ${obj.state} in ${min} min ${sec} sec`;\n\n  let status_color = '#36A64F';\n  if(obj.state !== 'passed') {\n    status_color = '#A63636'\n  }\n\n  return {\n    text: template,\n    color: status_color\n  };\n};\n\nclass Script {\n  process_incoming_request({ request }) {\n    msg = buildMessage(request.content);\n\n    return {\n      content:{\n        attachments: [\n          {\n            text: msg.text,\n            color: msg.color\n          }\n        ]\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data for Livechat Session Webhook\nDESCRIPTION: This JSON snippet represents the data structure sent in a webhook request for a Livechat session. It includes session details, visitor information, agent details, and message history.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel/webhooks.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": \"Tc5SyBZHovD4k8BXv\",\n  \"label\": \"James\",\n  \"createdAt\": \"2023-02-02T10:16:07.230Z\",\n  \"lastMessageAt\": \"2023-02-02T10:22:14.087Z\",\n  \"tags\": [\n    \"self\"\n  ],\n  \"visitor\": {\n    \"_id\": \"63db8d4990fe6eda42ad429a\",\n    \"token\": \"e36e352c742eee48860d576fcefb372afc44ebc95750fa1e3b646195f702341a\",\n    \"name\": \"James\",\n    \"username\": \"guest-3\",\n    \"email\": [\n      {\n        \"address\": \"abc.xyz+local-on@rocket.chat\"\n      }\n    ],\n    \"phone\": null\n  },\n  \"agent\": {\n    \"_id\": \"aXjjcPwq4Pcp7xftH\",\n    \"username\": \"user1\",\n    \"name\": \"User One\",\n    \"email\": \"uaser1@mail.com\"\n  },\n  \"type\": \"LivechatSession\",\n  \"messages\": [\n    {\n      \"u\": {\n        \"_id\": \"63db8d4990fe6eda42ad429a\",\n        \"username\": \"guest-3\",\n        \"name\": \"James\"\n      },\n      \"_id\": \"2untSdndqBP7opGWw\",\n      \"username\": \"guest-3\",\n      \"msg\": \"Hi\",\n      \"ts\": \"2023-02-02T10:16:09.615Z\"\n    },\n    {\n      \"u\": {\n        \"_id\": \"aXjjcPwq4Pcp7xftH\",\n        \"username\": \"user1\",\n        \"name\": \"User One\"\n      },\n      \"_id\": \"7xjkw8ZFitMSNGmeJ\",\n      \"username\": \"user1\",\n      \"msg\": \"How can I help you today?\",\n      \"ts\": \"2023-02-02T10:21:05.391Z\",\n      \"agentId\": \"aXjjcPwq4Pcp7xftH\"\n    },\n    {\n      \"u\": {\n        \"_id\": \"63db8d4990fe6eda42ad429a\",\n        \"username\": \"guest-3\",\n        \"name\": \"James\"\n      },\n      \"_id\": \"y7p77YFfkHJeg5gD9\",\n      \"username\": \"guest-3\",\n      \"msg\": \"don't worry,thank you\",\n      \"ts\": \"2023-02-02T10:22:14.087Z\"\n    },\n    {\n      \"u\": {\n        \"_id\": \"aXjjcPwq4Pcp7xftH\",\n        \"username\": \"user1\",\n        \"name\": \"User One\"\n      },\n      \"_id\": \"ciAggDuN8ioqDrTby\",\n      \"username\": \"user1\",\n      \"msg\": \"Thank you for visiting\",\n      \"ts\": \"2023-02-02T10:23:11.437Z\",\n      \"agentId\": \"aXjjcPwq4Pcp7xftH\",\n      \"closingMessage\": true\n    }\n  ],\n  \"servedBy\": {\n    \"_id\": \"aXjjcPwq4Pcp7xftH\",\n    \"username\": \"user1\",\n    \"ts\": \"2023-02-02T10:16:07.375Z\"\n  },\n  \"closedAt\": \"2023-02-02T10:23:11.344Z\",\n  \"closedBy\": {\n    \"_id\": \"aXjjcPwq4Pcp7xftH\",\n    \"username\": \"user1\"\n  },\n  \"closer\": \"user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Firewall Rule for Rocket.Chat Port (Bash)\nDESCRIPTION: This command adds a permanent firewall rule to allow incoming TCP traffic on port 3000, which is typically used by Rocket.Chat when not behind a reverse proxy.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/firewall-configuration.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo firewall-cmd --permanent --add-port=3000/tcp\n```\n\n----------------------------------------\n\nTITLE: Configuring Rocket.Chat Docker Compose\nDESCRIPTION: YAML configuration for Docker Compose to deploy Rocket.Chat using images from the private registry.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nrocketchat:\n    image: <registry_ip_address>:5000/registry.rocket.chat/rocketchat/rocket.chat:${RELEASE:-latest}\n    \nmongodb:\n    image:<registry_ip_address>:5000/docker.io/bitnami/mongodb:${MONGODB_VERSION:-5.0}\n```\n\n----------------------------------------\n\nTITLE: Handling GitLab Tag Event in JavaScript\nDESCRIPTION: This function processes a GitLab tag event and formats it for Rocket.Chat notification. It handles both tag creation and deletion, generating a message with relevant details.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/gitlab.md#2025-04-06_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntagEvent(data) {\n    const project = data.project || data.repository;\n    const web_url = project.web_url || project.homepage;\n    const tag = refParser(data.ref);\n    const user = {\n        name: data.user_name,\n        avatar_url: data.user_avatar\n    };\n    let message;\n    if (data.checkout_sha === null) {\n        message = `deleted tag [${tag}](${web_url}/tags/)`;\n    } else {\n        message = `pushed tag [${tag} ${data.checkout_sha.slice(0, 8)}](${web_url}/tags/${tag})`;\n    }\n    return {\n        content: {\n            username: `gitlab/${project.name}`,\n            icon_url: project.avatar_url || data.user_avatar || '',\n            text: MENTION_ALL_ALLOWED ? '@all' : '',\n            attachments: [\n                makeAttachment(user, message)\n            ]\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting GitHub Labels for Rocket.Chat Webhook Integration\nDESCRIPTION: Function that converts GitHub issue labels into a formatted field for Rocket.Chat message attachments. It extracts label names, joins them with commas, and determines if the field should be displayed as short based on length.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/github.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst getLabelsField = (labels) => {\n  let labelsArray = [];\n  labels.forEach(function(label) {\n    labelsArray.push(label.name);\n  });\n  labelsArray = labelsArray.join(', ');\n  return {\n    title: 'Labels',\n    value: labelsArray,\n    short: labelsArray.length <= 40\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Rocket.Chat with Command Line Arguments\nDESCRIPTION: Alternative command to install Rocket.Chat using Helm, passing configuration parameters via command line arguments.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install rocketchat rocketchat/rocketchat --set mongodb.auth.passwords={$(echo -n $(openssl rand -base64 32))},mongodb.auth.rootPassword=$(echo -n $(openssl rand -base64 32))\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret for MongoDB Connection in Rocket.Chat\nDESCRIPTION: This YAML snippet shows how to create a Kubernetes Secret containing MongoDB connection details for Rocket.Chat. It includes both the main MongoDB URI and the Oplog URI, which are used for database connectivity and replication.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-secret\ntype: Opaque\ndata:\n  mongo-uri: mongodb://user:password@localhost:27017/rocketchat\n  mongo-oplog-uri: mongodb://user:password@localhost:27017/local?replicaSet=rs0&authSource=admin\n```\n\n----------------------------------------\n\nTITLE: Processing Incoming WebHook from Microsoft Teams to Rocket.Chat\nDESCRIPTION: This script processes incoming messages from Microsoft Teams and formats them for display in Rocket.Chat. It extracts the sender's name, handles stickers, and removes the bot mention prefix from the message text. It also returns a confirmation card to Microsoft Teams.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/microsoft-teams.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Script {\n    process_incoming_request({ request }) {\n        // UNCOMMENT THE BELOW LINE TO DEBUG IF NEEDED.\n        // console.log(request.content);\n        if ('edited_message' in request.content) {\n            request.content = request.content;\n        }\n        let from = request.content.from;\n        let who = from.name;\n        let icon_url = '/avatar/' + from.name + '.jpg'\n        let body = request.content.text.slice(16);\n\n        if(!body) {\n          if(request.content.hasOwnProperty(\"sticker\") && request.content.sticker.emoji) {\n            // It's a sticker\n            body = request.content.sticker.emoji\n        } else {\n           return {}\n          }\n        }\n\n\treturn {\n\t\tcontent: {\n\t\t\tusername: who,\n                \ticon_url: icon_url,\n                \ttext: body,\n\t\t},\n\t\tresponse: {\n\t\t\ttype: \"message\",\n\t\t\tattachments: [{\n\t\t\t\tcontentType: \"application/vnd.microsoft.card.adaptive\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttype: \"AdaptiveCard\",\n\t\t\t\t\tversion: \"1.4\",\n\t\t\t\t\tbody: [{\n\t\t\t\t\t\ttype: \"TextBlock\",\n\t\t\t\t\t\ttext: \"Message received\",\n\t\t\t\t\t}],\n\t\t\t\t},\n\t\t\t}],\n\t\t}\n\t};\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Newer Azure Alerts in Rocket.Chat Webhook (JavaScript)\nDESCRIPTION: This script handles newer Azure Alert webhooks in Rocket.Chat, specifically for AzureMonitorMetricAlert version 2.0 with MultipleResourceMultipleMetricCriteria condition type. It processes multiple conditions and formats the alert information into a detailed message.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/azure-alerts.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Script {\n    // this script was tested with AzureMonitorMetricAlert version 2.0 and should work for\n    // \"conditionType\": \"MultipleResourceMultipleMetricCriteria\"\n    process_incoming_request({ request }) {\n        // console is a global helper to improve debug\n        console.log(JSON.stringify(request.content, null, 4));\n\n        var alertColor = \"warning\";\n        var condition = request.content.data.context.condition;\n        var conditionFields = [];\n\n        if(request.content.data.status === \"Deactivated\"){ alertColor = \"good\"; }\n        else if (request.content.data.status === \"Activated\") {\n            alertColor = \"danger\";\n            console.log(condition.allOf);\n            for (const cond of condition.allOf) {\n                console.log(cond);\n                conditionFields.push({\n                    title: \"Condition: \" + cond.metricName,\n                    value: cond.metricValue + \" \" + cond.operator + \" \" + cond.threshold + \" (\"\n                        + (cond.metricUnit ? cond.metricUnit + \", \" : \"\")\n                        + cond.timeAggregation + \")\"\n                        + \" for more than \" + condition.windowSize,\n                });\n            }\n        }\n\n        return {\n            content:{\n                username: \"Azure\",\n                text: \"Azure Alert Notification\",\n                attachments: [{\n                    title: request.content.data.context.name,\n                    pretext: request.content.data.context.description,\n                    title_link: request.content.data.context.portalLink,\n                    text: request.content.data.context.resourceGroupName + \": \" + request.content.data.context.resourceName,\n                    color: alertColor,\n                    fields: [\n                        {\n                            title: \"Status\",\n                            value: request.content.data.status + \"   @ \" + request.content.data.context.timestamp\n                        },\n                        {\n                            title: \"Severity\",\n                            value: request.content.data.context.severity,\n                        },\n                        ...conditionFields,\n                    ]\n                }]\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for HTTPS Setup in Rocket.Chat\nDESCRIPTION: Environment variable configuration for enabling HTTPS with Let's Encrypt certificates. Includes settings for email, domain, Rocket.Chat version, root URL, and bind IP.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\nLETSENCRYPT_EMAIL= # your email, required for the tls certificates\n# set this to your domain name or subdomain, not trailing slashes or https://, just the domain\n# make sure it actually resolves to your droplet ip\nDOMAIN= \nRELEASE= # pin the rocketchat version, at the time of writing, prefer 6.0.0\nROOT_URL= # set this to https://${DOMAIN} replace ${DOMAIN} with the actual domain\nBIND_IP=127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Downloading Rocket.Chat Latest Release\nDESCRIPTION: Downloads the latest release of Rocket.Chat from the official repository\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-ubuntu.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://releases.rocket.chat/latest/download -o /tmp/rocket.chat.tgz\n```\n\n----------------------------------------\n\nTITLE: Obtaining SSL Certificate from Let's Encrypt\nDESCRIPTION: Command to request an SSL certificate from Let's Encrypt using Certbot. This creates the necessary certificate files that will be used by Nginx to enable HTTPS.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot certonly --standalone --email <emailaddress@email.com> -d <domain.com> -d <subdomain.domain.com>\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor Build Settings with Webhook Integration\nDESCRIPTION: YAML configuration file for AppVeyor that sets up NodeJS environment, installation steps, test scripts, and webhook deployment settings for Rocket.Chat integration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/appveyor.md#2025-04-06_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  nodejs_version: \"8\"\n\n# Install scripts. (runs after repo cloning)\ninstall:\n  # Get the latest stable version of Node.js or io.js\n  - ps: Install-Product node ''\n  # install modules\n  - npm install\n\n# Post-install test scripts.\ntest_script:\n  # Output useful info for debugging.\n  - node --version\n  - npm --version\n  # run tests\n  - npm test\n\n# Don't actually build.\nbuild: off\ndeploy:\n  provider: Webhook\n  url: https://the-link-to-your-incoming-webhook\n  request_timeout: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Directory Filter for LDAP in Rocket.Chat\nDESCRIPTION: An example filter for Active Directory that restricts login to users who are members of the ROCKET_CHAT group under General Groups. This filter is used in the Filter field of the LDAP User Search configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/ldap/ldap-user-search.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmemberOf=cn=ROCKET_CHAT,ou=General Groups\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group\nDESCRIPTION: Commands to add the current user to the Docker group and reboot the system, allowing Docker commands to be run without sudo privileges.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER\nsudo reboot\n```\n\n----------------------------------------\n\nTITLE: Generating Client SSL Certificates\nDESCRIPTION: Series of commands to generate a client key, CSR, and sign it with the CA to create a client certificate for user authentication.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-client-ssl-certificate-authentication-for-rocket.chat.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -des3 -out user.key 4096\n```\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -key user.key -out user.csr\n```\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -req -days 365 -in user.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out user.crt\n```\n\n----------------------------------------\n\nTITLE: Processing Outgoing Messages to Telegram\nDESCRIPTION: JavaScript class that processes outgoing messages from Rocket.Chat to Telegram, including formatting user names and message text.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/simple-telegram-bot.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Script {\n    prepare_outgoing_request({ request }) {\n        if (request.data.bot) {\n            //Don't repost messages from the bot.\n            return { };\n        } else {\n            return {\n                url: request.url + '&parse_mode=HTML' + '&text=' + encodeURIComponent('<b>' + request.data.user_name+ '</b>: ' + request.data.text),\n                method: 'GET'\n            };\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RSA-OAEP Key Pair in JavaScript\nDESCRIPTION: Creates a new RSA-OAEP key pair for client encryption with 2048-bit length and SHA-256 hash.\nSOURCE: https://github.com/RocketChat/docs/blob/main/customer-center/security-center/end-to-end-encryption-specifications.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncrypto.subtle.generateKey({name: 'RSA-OAEP', modulusLength: 2048, publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: {name: 'SHA-256'}}, true, ['encrypt', 'decrypt']);\n```\n\n----------------------------------------\n\nTITLE: Pulling Rocket.Chat and MongoDB Docker Images\nDESCRIPTION: Commands to download the latest Rocket.Chat image and a specific version of MongoDB image from their respective registries.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.rocket.chat/rocketchat/rocket.chat:latest\n\ndocker pull docker.io/bitnami/mongodb:${MONGODB_VERSION:-5.0}\n```\n\n----------------------------------------\n\nTITLE: Restarting Nginx Service\nDESCRIPTION: Command to restart the Nginx service to apply the new configuration. This makes the reverse proxy settings active, allowing access to Rocket.Chat through the configured domain.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Proxy in Caddyfile\nDESCRIPTION: Example Caddyfile configuration for setting up an HTTPS proxy to the Rocket.Chat server. This enables secure communication with automatic TLS.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nexample-domain.com\n\nreverse_proxy localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 CORS in XML Format for Rocket.Chat\nDESCRIPTION: This XML configuration snippet sets up Cross-Origin Resource Sharing (CORS) for an Amazon S3 bucket when using the old AWS console interface. It defines allowed headers, methods, origins, and other CORS parameters to enable Rocket.Chat to properly interact with the S3 storage.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/file-upload/README.md#2025-04-06_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n[\n    {\n        \"AllowedHeaders\": [\n            \"*\"  \n        ],\n        \"AllowedMethods\": [\n            \"PUT\",\n            \"POST\",\n            \"GET\",\n            \"HEAD\"\n        ],  \n        \"AllowedOrigins\": [\n            \"*ROCKET_CHAT_DOMAIN*\"\n        ],  \n        \"ExposeHeaders\": [], \n        \"MaxAgeSeconds\": 3000\n    } \n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for Insecure Registry\nDESCRIPTION: JSON configuration to allow Docker to communicate with an insecure (HTTP) registry.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"insecure-registries\": [\"<registry_ip_address>:5000\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub Repository Issues in Rocket.Chat\nDESCRIPTION: This command retrieves and displays a list of open issues for a specific GitHub repository within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n/github <username>/<repository name> issues\n```\n\n----------------------------------------\n\nTITLE: Restarting Rocket.Chat Server After Configuration Changes\nDESCRIPTION: Command to restart the Rocket.Chat server after making configuration changes, such as modifying the Caddyfile.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap restart rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Vagrant VM for Rocket.Chat Deployment\nDESCRIPTION: A comprehensive Vagrant configuration file that sets up a Ubuntu-based virtual machine and provisions it with Rocket.Chat. The script configures networking, system resources, and includes a shell provisioner that installs all necessary dependencies and deploys Rocket.Chat using PM2 process manager.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/vagrant.md#2025-04-06_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(2) do |config|\n  config.vm.box = \"ubuntu/trusty64\"\n  config.vm.network \"private_network\", ip: \"192.168.33.10\"\n\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.memory = \"2048\"\n  end\n\n  config.vm.provision \"shell\", inline: <<-SHELL\n    # SYSTEM CONFIGURATION\n    apt-get update\n    apt-get install -y nodejs npm mongodb unzip\n\n    ln -s /usr/bin/nodejs /usr/bin/node\n    ln -s /usr/bin/nodejs /usr/sbin/node\n\n    npm install nave -g\n    npm install pm2 -g\n    nave usemain 12.14.0\n\n    curl https://install.meteor.com/ | sh\n\n    pm2 startup\n\n    mkdir -p /var/www/\n    mkdir -p /var/log/rocket.chat\n\n    # DEPLOY\n    HOST=http://your_hostname.com\n    MONGO_URL=mongodb://localhost:27017/rocketchat\n    MONGO_OPLOG_URL=mongodb://localhost:27017/local\n    ROOT_URL=http://localhost:3000\n    PORT=3000\n\n    cd /var/www/\n    wget https://github.com/RocketChat/Rocket.Chat/archive/master.zip\n    unzip master.zip\n    mv Rocket.Chat-master rocket.chat\n\n    cd ./rocket.chat\n    meteor build --server \"$HOST\" --directory .\n\n    cd ./bundle/programs/server\n    npm install\n\n    cd ../.. \n\n    rm -f pm2-rocket-chat.json\n    echo '{' > pm2-rocket-chat.json\n    echo '  \"apps\": [{' >> pm2-rocket-chat.json\n    echo '    \"name\": \"rocket.chat\",' >> pm2-rocket-chat.json\n    echo '    \"script\": \"/var/www/rocket.chat/bundle/main.js\",' >> pm2-rocket-chat.json\n    echo '    \"out_file\": \"/var/log/rocket.chat/app.log\",' >> pm2-rocket-chat.json\n    echo '    \"error_file\": \"/var/log/rocket.chat/err.log\",' >> pm2-rocket-chat.json\n    echo \"    \\\"port\\\": \\\"$PORT\\\",\" >> pm2-rocket-chat.json\n    echo '    \"env\": {' >> pm2-rocket-chat.json\n    echo \"      \\\"MONGO_URL\\\": \\\"$MONGO_URL\\\",\" >> pm2-rocket-chat.json\n    echo \"      \\\"MONGO_OPLOG_URL\\\": \\\"$MONGO_OPLOG_URL\\\",\" >> pm2-rocket-chat.json\n    echo \"      \\\"ROOT_URL\\\": \\\"$ROOT_URL\\\",\" >> pm2-rocket-chat.json\n    echo \"      \\\"PORT\\\": \\\"$PORT\\\"\" >> pm2-rocket-chat.json\n    echo '    }' >> pm2-rocket-chat.json\n    echo '  }]' >> pm2-rocket-chat.json\n    echo '}' >> pm2-rocket-chat.json\n\n    pm2 start pm2-rocket-chat.json\n    pm2 save\n  SHELL\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Caddy Server for Custom Reverse Proxy\nDESCRIPTION: Command to disable the bundled Caddy server when using another reverse proxy with Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl disable snap.rocketchat-server.rocketchat-caddy\n```\n\n----------------------------------------\n\nTITLE: Creating Poll Command in Rocket.Chat\nDESCRIPTION: The slash command used to initiate poll creation in a Rocket.Chat room\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/poll.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/poll\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Domain for Rocket.Chat\nDESCRIPTION: Command to set the site URL for Rocket.Chat with HTTPS protocol, required for Auto SSL setup with Caddy and Let's Encrypt.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap set rocketchat-server siteurl=https://<your domain>\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Volumes for Rocket.Chat Helm Chart\nDESCRIPTION: This YAML configuration shows how to add extra volumes and volume mounts to the Rocket.Chat deployment. It demonstrates mounting a host directory containing SSL certificates as a read-only volume in the container.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nextraVolumes: \n  - name: etc-certs\n    hostPath:\n    - path: /etc/ssl/certs\n      type: Directory\nextraVolumeMounts: \n  - mountPath: /etc/ssl/certs\n    name: etc-certs   \n    readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Generating CA Key and Certificate\nDESCRIPTION: Commands to generate a Certificate Authority (CA) key and self-signed certificate for client authentication.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-client-ssl-certificate-authentication-for-rocket.chat.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -des3 -out ca.key 4096\n```\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -x509 -days 365 -key ca.key -out ca.crt\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx Web Server\nDESCRIPTION: Command to install Nginx, which will serve as a reverse proxy for Rocket.Chat. Nginx will handle incoming HTTP/HTTPS requests and forward them to the Rocket.Chat server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install nginx\n```\n\n----------------------------------------\n\nTITLE: Downloading Rocket.Chat\nDESCRIPTION: Commands to download the latest or a specific version of Rocket.Chat using curl or wget.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://releases.rocket.chat/latest/download -o /tmp/rocket.chat.tgz\n```\n\nLANGUAGE: bash\nCODE:\n```\nwget https://releases.rocket.chat/latest/download -O /tmp/rocket.chat.tgz\n```\n\nLANGUAGE: bash\nCODE:\n```\nwget https://releases.rocket.chat/4.1.2/download -O /tmp/rocket.chat.tgz\n```\n\n----------------------------------------\n\nTITLE: Customizing Rocket.Chat UI Colors with CSS\nDESCRIPTION: CSS code snippet to modify the color of Rocket.Chat rooms and sidebar hover states. Changes the main content area background to blue and sidebar hover color to orange.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/layout.md#2025-04-06_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.rcx-content--main {\n  --rcx-color-surface-room: #5d91f7;\n}\n.rcx-sidebar--main {\n--rcx-color-surface-hover: #e07c41;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Service File\nDESCRIPTION: Creates a systemd service file for Rocket.Chat\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-ubuntu.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF |sudo tee -a /lib/systemd/system/rocketchat.service\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\n[Service]\nExecStart=$NODE_PATH /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Extracting and Installing Rocket.Chat\nDESCRIPTION: Extracts the downloaded archive and installs npm dependencies\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-ubuntu.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzf /tmp/rocket.chat.tgz -C /tmp\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/bundle/programs/server && npm install --production\n```\n\n----------------------------------------\n\nTITLE: Updating Debian System\nDESCRIPTION: Commands to update and upgrade the Debian system before installing Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt -y update\nsudo apt -y upgrade\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Cloud Storage Secret PEM File for Rocket.Chat\nDESCRIPTION: This code example demonstrates the format of a PEM file required for the Google Storage Secret setting. It includes both the private key and certificate needed to authenticate with Google Cloud Storage when configuring it as a storage provider in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/file-upload/README.md#2025-04-06_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN PRIVATE KEY-----\nunescaped private key goes here\n-----END PRIVATE KEY-----\n----BEGIN CERTIFICATE-----\nfirst certificate goes here\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Testing Nginx Configuration\nDESCRIPTION: Command to test the Nginx configuration file for syntax errors. This ensures the configuration is valid before applying it.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo nginx -t\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Images on Air-gapped Server\nDESCRIPTION: Commands to load the transferred Rocket.Chat and MongoDB Docker images on the air-gapped server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker load -i rocketchat.tar\n\ndocker load -i mongodb.tar\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Digital Ocean Droplet\nDESCRIPTION: Command to establish SSH connection to the Rocket.Chat droplet on Digital Ocean using root access and droplet IP address.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-digital-ocean.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh root@your_droplet_ip\n```\n\n----------------------------------------\n\nTITLE: Custom Fields Validation JSON Schema Example\nDESCRIPTION: Example JSON schema for validating custom message field values, specifically showing how to define a required 'priority' field with enumerated string values.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/message.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"properties\": {\n\t\t\"priority\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"nullable\": false,\n\t\t\t\"enum\": [\"low\", \"medium\", \"high\"]\n\t\t}\n\t},\n\t\"required\": [\"priority\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Rocket.Chat Files to Installation Directory\nDESCRIPTION: Moves the extracted Rocket.Chat files to the /opt directory.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv /tmp/bundle /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Granting MongoDB clusterMonitor Role for Rocket.Chat Users\nDESCRIPTION: MongoDB commands to grant the clusterMonitor role to database users. This role is required for Rocket.Chat to use change streams, enabling real-time data updates.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-uri-authentication.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nadmin = db.getSiblingDB(\"admin\");\nadmin.grantRolesToUser('OPLOGUSER',[{ role: \"clusterMonitor\", db: \"admin\" }])\nadmin.grantRolesToUser('ROCKETUSER',[{ role: \"clusterMonitor\", db: \"admin\" }])\n```\n\n----------------------------------------\n\nTITLE: Creating Rocket.Chat Service Configuration\nDESCRIPTION: Creates and configures the systemd service file for Rocket.Chat\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-kali.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF |sudo tee -a /lib/systemd/system/rocketchat.service\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\n[Service]\nExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\nEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs01 MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs01 ROOT_URL=http://localhost:3000/ PORT=3000\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Registration and PodDisruptionBudget in Rocket.Chat Helm Chart\nDESCRIPTION: Parameters for Rocket.Chat Cloud registration token and pod disruption budget (PDB) configuration. The PDB protects the deployment by limiting the number of simultaneous disruptions.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nregistrationToken: \"\"\npodDisruptionBudget.enabled: true\n```\n\n----------------------------------------\n\nTITLE: Scaling Rocket.Chat Deployment in Kubernetes\nDESCRIPTION: This bash command demonstrates how to scale the number of Rocket.Chat server instances in a Kubernetes deployment. It increases the number of replicas to 3, which can improve capacity and availability.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl scale --replicas=3 deployment/rocketchat\n```\n\n----------------------------------------\n\nTITLE: Installing Rocket.Chat Server Using Snap on Ubuntu\nDESCRIPTION: Command to install the latest available version of Rocket.Chat server using snap package manager on Ubuntu Linux.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Using External User Syntax in Rocket.Chat Federation\nDESCRIPTION: This snippet shows the syntax format used to invite external users to a federated Rocket.Chat server. The syntax requires the username prefixed with @ and the server domain name separated by a colon.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation/federation-user-guide/invite-external-users-to-your-rocket.chat-server.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@username:server.com\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Images for Private Registry\nDESCRIPTION: Commands to tag the downloaded Rocket.Chat and MongoDB images with the private registry address for pushing.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag registry.rocket.chat/rocketchat/rocket.chat:latest <registry_ip_address>:5000/registry.rocket.chat/rocketchat/rocket.chat:latest\n\ndocker tag bitnami/mongodb:5.0 <registry_ip_address>:5000/docker.io/bitnami/mongodb:${MONGODB_VERSION:-5.0}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twilio SMS Gateway in Rocket.Chat\nDESCRIPTION: This snippet shows the configuration settings for the Twilio SMS gateway in Rocket.Chat. It includes account credentials, file upload settings, and media type specifications.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/sms.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* **Account SID**: Your account's SID. It is provided by Twilio.\n* **Auth Token**: Your Twilio auth token\n* **File Uploads Enabled**: When enabled, file uploads will be active in SMS\n* **Accepted Media Types**: Comma-separated list of media types. Leave it blank for accepting all media types.\n```\n\n----------------------------------------\n\nTITLE: Verifying Rocket.Chat Container Status\nDESCRIPTION: This command lists all Docker containers, allowing you to confirm that the Rocket.Chat container is running on the compute engine.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-google-compute-engine.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker ps -a\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Rocket.Chat Systemd Services\nDESCRIPTION: Template for systemd service configuration that allows running multiple Rocket.Chat instances with different ports using a single service definition.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/running-multiple-instances.md#2025-04-06_snippet_1\n\nLANGUAGE: systemd\nCODE:\n```\n[Unit]\nDescription=Rocket.Chat Server\nAfter=syslog.target\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nStandardOutput=syslog\nSyslogIdentifier=RocketChat\nUser=rocketchat\nGroup=rocketchat\nEnvironment=MONGO_URL=mongodb://your_mongodb:27017/your_database?replicaSet=your_replica_set_name\nEnvironment=MONGO_OPLOG_URL=mongodb://your_mongodb1:27017/local?replicaSet=your_replica_set_name\nEnvironment=ROOT_URL=https://your_rocketchat_domain.com\nEnvironment=PORT=%I\nWorkingDirectory=/path.to.rocketchat/rocket.chat\nExecStart=/usr/local/bin/node /path.to.rocketchat/rocket.chat/bundle/main.js\n\n[Install]\n    WantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Node.js Installation Commands\nDESCRIPTION: Windows SDK Command Prompt instructions for installing Node.js dependencies and configuring the Rocket.Chat service.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/windows-server.md#2025-04-06_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n> SetEnv /x86\n> cd [Installation Path]\n> npm install nave -g\n> npm install node-windows\n\n> npm config set python /Python27/python.exe --global\n> npm config set msvs_version 2010 --global\n\n> set PORT=[Port to Use]\n> set ROOT_URL=[Rocket.Chat URL]\n> set MONGO_URL=mongodb://[Address to Mongo]:27017/[MongoDB Database]\n> set MONGO_OPLOG_URL=mongodb://[Address to Mongo]:27017/local\n> set SCRIPT_PATH=[Installation Path]\\main.js\n\n> cd programs\\server\n> npm install\n\n> cd ../..\n> node rocket.service.js install\n> net start Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: MongoDB Restore in Docker\nDESCRIPTION: Command to restore a MongoDB backup dump to a running Docker container.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i <container_name> sh -c 'mongorestore --archive' < db.dump\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Environment Variables for Rocket.Chat Helm Chart\nDESCRIPTION: This YAML snippet demonstrates how to add custom environment variables to the Rocket.Chat deployment using the Helm chart's 'extraEnv' configuration option. It shows an example of setting MongoDB options with SSL enabled.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nextraEnv: |\n  - name: MONGO_OPTIONS\n    value: '{\"ssl\": \"true\"}'\n```\n\n----------------------------------------\n\nTITLE: Enabling Caddy Server for SSL and Restarting Rocket.Chat\nDESCRIPTION: Commands to enable the Caddy web server for SSL support and restart the Rocket.Chat server to apply the changes.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now snap.rocketchat-server.rocketchat-caddy \nsudo snap restart rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub Pull Requests in Rocket.Chat\nDESCRIPTION: This command retrieves and displays recent open pull requests for a specific GitHub repository within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n/github <username>/<repository name> pulls\n```\n\n----------------------------------------\n\nTITLE: Creating Rocket.Chat Application with MongoDB Parameters\nDESCRIPTION: Command to create a new Rocket.Chat application using the imported template, specifying MongoDB database name, user, and password parameters.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/openshift.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# oc new-app rocket-chat -p MONGODB_DATABASE=rocketchat -p MONGODB_USER=rocketchat-admin -p MONGODB_PASSWORD=rocketchat\n```\n\n----------------------------------------\n\nTITLE: Creating Federated 1:1 Direct Message using Slash Command in Rocket.Chat\nDESCRIPTION: This snippet demonstrates the slash command syntax for creating a 1:1 direct message with an external user in Rocket.Chat. The command uses the /federation dm directive followed by the external user's username and server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation/federation-user-guide/create-federated-rooms.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/federation dm @username:server.com\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images to Private Registry\nDESCRIPTION: Commands to push the tagged Rocket.Chat and MongoDB images to the private registry.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker push <registry_ip_address>:5000/registry.rocket.chat/rocketchat/rocket.chat:latest\n\ndocker push <registry_ip_address>:5000/docker.io/bitnami/mongodb:${MONGODB_VERSION:-5.0}\n```\n\n----------------------------------------\n\nTITLE: Install Build Dependencies\nDESCRIPTION: Command to install required build packages for Debian systems\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/updating-rocket.chat.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y build-essential graphicsmagick\n```\n\n----------------------------------------\n\nTITLE: MongoDB Admin User Creation\nDESCRIPTION: MongoDB commands to create admin user and database for Rocket.Chat\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createUser({\n    user: \"root\",\n    pwd: \"fl!bb3rtyJ!bb3tt\",\n    roles: [ \"root\" ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth and Analytics Settings in Rocket.Chat HTML\nDESCRIPTION: This HTML snippet contains a table of configuration settings for OAuth providers and analytics features in Rocket.Chat. It includes environment variable names and descriptions for each setting.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/settings-permission.md#2025-04-06_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<code>Accounts_OAuth_Apple</code></td><td>Enable Apple Login</td></tr><tr><td>OAuth > Drupal > Drupal Login Enabled</td><td><code>Accounts_OAuth_Drupal</code></td><td>Drupal Login Enabled</td></tr><tr><td>OAuth > Drupal > Drupal oAuth2 Redirect URI</td><td><code>Accounts_OAuth_Drupal_callback_url</code></td><td>Drupal oAuth2 Redirect URI</td></tr><tr><td>OAuth > Drupal > Drupal oAuth2 Client ID</td><td><code>Accounts_OAuth_Drupal_id</code></td><td>Drupal oAuth2 Client ID</td></tr><tr><td>OAuth > Drupal > Drupal oAuth2 Client Secret</td><td><code>Accounts_OAuth_Drupal_secret</code></td><td>Drupal oAuth2 Client Secret</td></tr><tr><td>OAuth > Facebook > Facebook Login</td><td><code>Accounts_OAuth_Facebook</code></td><td>Facebook Login</td></tr><tr><td>OAuth > Facebook > Facebook App ID</td><td><code>Accounts_OAuth_Facebook_id</code></td><td>Facebook App ID</td></tr><tr><td>OAuth > Facebook > Facebook Callback URL</td><td><code>Accounts_OAuth_Facebook_callback_url</code></td><td>Facebook Callback URL</td></tr><tr><td>OAuth > GitHub Enterprise > OAuth Enabled</td><td><code>Accounts_OAuth_Github</code></td><td>Enable Github Oauth</td></tr><tr><td>OAuth > GitHub Enterprise > GitHub Enterprise Callback URL</td><td><code>Accounts_OAuth_GitHub_Enterprise_callback_url</code></td><td>GitHub Enterprise Callback URL</td></tr><tr><td>OAuth > GitHub Enterprise > Client Id</td><td><code>Accounts_OAuth_GitHub_Enterprise_id</code></td><td>Github Enterprise Client Id</td></tr><tr><td>OAuth > GitHub Enterprise > Client Secret</td><td><code>Accounts_OAuth_GitHub_Enterprise_secret</code></td><td>Github Enterprise Client Secret</td></tr><tr><td>OAuth > GitHub Enterprise > Client Id</td><td><code>Accounts_OAuth_Github_id</code></td><td>Github Enterprise Client Id</td></tr><tr><td>OAuth > GitHub > Client Secret</td><td><code>Accounts_OAuth_Github_secret</code></td><td>Github Enterprise Client Secret</td></tr><tr><td>OAuth > GitHub > GitHub Enterprise Callback URL</td><td><code>Accounts_OAuth_Github_callback_url</code></td><td>GitHub Callback URL</td></tr><tr><td>OAuth > GitHub > Client Id</td><td><code>Accounts_OAuth_Github_id</code></td><td>Github Client ID</td></tr><tr><td>OAuth > GitHub  > OAuth Enabled</td><td><code>Accounts_OAuth_Github</code></td><td>OAuth Enabled</td></tr><tr><td>OAuth > GitLab > OAuth Enabled</td><td><code>Accounts_OAuth_Gitlab</code></td><td>OAuth Enable</td></tr><tr><td>OAuth > GitLab > GitLab Callback URL</td><td><code>Accounts_OAuth_Gitlab_callback_url</code></td><td>GitLab Callback URL</td></tr><tr><td>OAuth > GitLab > GitLab Id</td><td><code>Accounts_OAuth_Gitlab_id</code></td><td>GitLab Id</td></tr><tr><td>OAuth > GitLab > Identity Path</td><td><code>Accounts_OAuth_Gitlab_identity_path</code></td><td>GitLab Identihty Pat</td></tr><tr><td>OAuth > GitLab > Merge Users</td><td><code>Accounts_OAuth_Gitlab_merge_users</code></td><td>GitLab Merge Users</td></tr><tr><td>OAuth > GitLab > Client Secret</td><td><code>Accounts_OAuth_Gitlab_secret</code></td><td>GitLab Client Secret</td></tr><tr><td>OAuth > Linkedin > LinkedIn Login</td><td><code>Accounts_OAuth_Linkedin</code></td><td>LinkedIn Login</td></tr><tr><td>OAuth > Linkedin > Linkedin Callback URL</td><td>Accounts_OAuth_Linkedin_callback_url</td><td>Linkedin Callback URL</td></tr><tr><td>OAuth > Linkedin > LinkedIn Id</td><td>Accounts_OAuth_Linkedin_id</td><td>LinkedIn Id</td></tr><tr><td>OAuth > Linkedin > LinkedIn Secret</td><td>Accounts_OAuth_Linkedin_secret</td><td> LinkedIn Secret</td></tr><tr><td>OAuth > Meteor > Meteor Login</td><td>Accounts_OAuth_Meteor</td><td>Meteor Login</td></tr><tr><td>OAuth > Meteor > Meteor Callback URL</td><td><code>Accounts_OAuth_Meteor_callback_url</code></td><td>Meteor Callback URL</td></tr><tr><td>OAuth > Meteor > Meteor Id</td><td><code>Accounts_OAuth_Meteor_callback_url</code></td><td>Meteor Callback URL</td></tr><tr><td>OAuth > Meteor > Meteor Id</td><td><code>Accounts_OAuth_Meteor_id</code></td><td>Meteor Id</td></tr><tr><td>OAuth > Meteor > Meteor Secret</td><td><code>Accounts_OAuth_Meteor_secret</code></td><td>Meteor Secret</td></tr><tr><td>OAuth > Nextcloud > OAuth Enabled</td><td><code>Accounts_OAuth_Nextcloud</code></td><td>OAuth Enabled</td></tr><tr><td>OAuth > Nextcloud > Nextcloud Server URL</td><td><code>Accounts_OAuth_Nextcloud_URL</code></td><td>Nextcloud Server URL</td></tr><tr><td>OAuth > Nextcloud > Nextcloud Callback</td><td><code>Accounts_OAuth_Nextcloud_callback_url</code></td><td>Nextcloud Callback URL</td></tr><tr><td>OAuth > Nextcloud > Nextcloud Id</td><td><code>Accounts_OAuth_Nextcloud_id</code></td><td>Nextcloud Id</td></tr><tr><td>OAuth > Nextcloud > Client Secret</td><td><code>Accounts_OAuth_Nextcloud_secret</code></td><td>Client Secret</td></tr><tr><td>OAuth > Proxy > Proxy Host</td><td>Accounts_OAuth_Proxy_host</td><td>Proxy Host</td></tr><tr><td>OAuth > Proxy > Proxy Services</td><td><code>Accounts_OAuth_Proxy_services</code></td><td>Proxy Services</td></tr><tr><td>OAuth > Tokenpass > Tokenpass Login</td><td><code>Accounts_OAuth_Tokenpass</code></td><td>Tokenpass Login</td></tr><tr><td>OAuth > Tokenpass >Tokenpass Callback URL</td><td><code>Accounts_OAuth_Tokenpass_callback_url</code></td><td>Tokenpass Callback URL</td></tr><tr><td>OAuth > Tokenpass > Tokenpass Id</td><td><code>Accounts_OAuth_Tokenpass_id</code></td><td>Tokenpass Id</td></tr><tr><td>OAuth > Tokenpass > Tokenpass Secret</td><td><code>Accounts_OAuth_Tokenpass_secret</code></td><td>Tokenpass Secret</td></tr><tr><td>OAuth > Twitter > Twitter Login</td><td><code>Accounts_OAuth_Twitter</code></td><td>Twitter Login</td></tr><tr><td>OAuth > Twitter > Twitter Callback URL</td><td><code>Accounts_OAuth_Twitter_callback_url</code></td><td>Twitter Callback URLL</td></tr><tr><td>OAuth > Twitter > Twitter Id</td><td><code>Accounts_OAuth_Twitter_id</code></td><td>Twitter Id</td></tr><tr><td>OAuth > Twitter > Twitter Secret</td><td><code>Accounts_OAuth_Twitter_secret</code></td><td>Twitter Secret</td></tr><tr><td>OAuth > WordPress > WordPress Login</td><td><code>Accounts_OAuth_Wordpress</code></td><td>WordPress Login</td></tr><tr><td>OAuth > WordPress > Authorize Path</td><td><code>Accounts_OAuth_Wordpress_authorize_path</code></td><td>Wordpress Authorize Path</td></tr><tr><td>OAuth > WordPress > WordPress Callback URL</td><td><code>Accounts_OAuth_Wordpress_callback_url</code></td><td>WordPress Callback URL</td></tr><tr><td>OAuth > WordPress > WordPress Id</td><td><code>Accounts_OAuth_Wordpress_id</code></td><td>WordPress Id</td></tr><tr><td>OAuth > WordPress > Identity Path</td><td><code>Accounts_OAuth_Wordpress_identity_path</code></td><td>Identity Path</td></tr><tr><td>OAuth > WordPress >Identity Token Sent Via</td><td><code>Accounts_OAuth_Wordpress_identity_token_sent_via</code></td><td>Identity Token Sent</td></tr><tr><td>OAuth > WordPress > WordPress Secret</td><td>Accounts_OAuth_Wordpress_secret</td><td>WordPress Secret</td></tr><tr><td>OAuth > WordPress > Scope</td><td><code>Accounts_OAuth_Wordpress_scope</code></td><td>Wordpress scope</td></tr><tr><td>Layout > Login > Show Default Login Form</td><td><code>Accounts_ShowFormLogin</code></td><td>Show Default Login Form.</td></tr><tr><td>Outlook calendar</td><td><code>Outlook_calendar</code></td><td>Outlook calendar</td></tr><tr><td>Accounts > Iframe > Enabled</td><td><code>Accounts_iframe_enabled</code></td><td>Enable Iframe</td></tr><tr><td>Accounts > Iframe > Iframe URL</td><td><code>Accounts_iframe_url</code></td><td>Iframe URL</td></tr><tr><td>Email > Privacy > Add Sender to Reply-To</td><td>Add_Sender_To_ReplyTo</td><td>Add Sender to Reply-To</td></tr><tr><td>General > Allow Invalid Self-Signed Certs</td><td><code>Allow_Invalid_SelfSigned_Certs</code></td><td>Allow Invalid Self-Signed Certs</td></tr><tr><td>Setup Wizard > Organization Info > Allow Marketing Emails</td><td><code>Allow_Marketing_Emails</code></td><td>Allow Marketing Emails</td></tr><tr><td>Mobile > Allow Save Media to Gallery</td><td><code>Allow_Save_Media_to_Gallery</code></td><td>Allow Save Media to Gallery</td></tr><tr><td>Analytics</td><td><code>Analytics</code></td><td>Analytics</td></tr><tr><td>Analytics > Features Enabled > Analytics_Messages</td><td><code>Analytics_features_messages</code></td><td>Tracks custom events related to actions a user does on messages</td></tr><tr><td>Analytics > Features Enabled > Analytics_Rooms</td><td><code>Analytics_features_rooms</code></td><td>Tracks custom events related to actions on a channel or group (create, leave, delete).</td></tr><tr><td>Analytics > Features Enabled > Analytics_Users</td><td><code>Analytics_features_users</code></td><td>Tracks custom events related to actions related to users (password reset times, profile picture change, etc).</td></tr><tr><td><br>General > Apps > Directory for storing apps source package</td><td><code>Apps_Framework_Source_Package_Storage_FileSystem_Path</code></td><td>Directory for storing apps source package</td></tr><tr><td>General > Apps > Apps' Source Package Storage type</td><td></td><td></td></tr>\n```\n\n----------------------------------------\n\nTITLE: Configuring Microservices Deployment for Federated Rocket.Chat in YAML\nDESCRIPTION: YAML configuration for deploying a microservices-based federated Rocket.Chat workspace using Helm. Includes settings for image, MongoDB, microservices, ingress, and federation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation/federation-admin-guide/deploy-a-federated-rocket.chat-workspace.md#2025-04-06_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n pullPolicy: IfNotPresent\n repository: registry.rocket.chat/rocketchat/rocket.chat\n tag: <release> #Replace it by your target release\n replicaCount: 1 #Number of replicas/pods for Rocket.Chat\n\n\nmongodb:\n enabled: true  #For test purposes, a single mongodb pod is deployed, consider an external MongoDB cluster for production environments\n auth:\n   passwords:\n     - rocketchat\n   rootPassword: rocketchatroot\n\nmicroservices:\n  enabled: true\n  presence:\n    replicas: 1\n  ddpStreamer:\n    replicas: 1\n  account:\n    replicas: 1\n  authorization:\n    replicas: 1\n  streamHub:\n    replicas: 1\n  nats:\n    replicas: 1\n\nhost: domain.xyz  This is the domain for your Rocket.Chat server, Replace it with your own domain \ningress:\n enabled: true\n ingressClassName: nginx  #State the ingress controller that is installed in the K8s cluster \n annotations:\n   cert-manager.io/cluster-issuer: production-cert-issuer #Replace with the name of your ClusterIssuer\n tls:\n   - secretName: federation #This is the name of the secret - You can use a different name if needed\n     hosts:\n       - domain.xyz #This is the domain for your Rocket.Chat server, Replace it with your own domain \n       - synapse.domain.xyz #This is the domain for your Synapse server, Replace it with your own domain \nfederation:\n enabled: true\n host: synapse.domain.xyz #This is the domain for your Rocket.Chat server, Replace it with your own domain\n persistence:\n   enabled: true\n   existingClaim: synapse-helm #Replace with the name of your persistent volume claim\n\npostgresql:\n enabled: true\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Issues from Rocket.Chat\nDESCRIPTION: This command starts the process of creating a new issue in a GitHub repository directly from Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n/github issue\n```\n\n----------------------------------------\n\nTITLE: Running MongoDB Docker Container for Rocket.Chat\nDESCRIPTION: This command runs a MongoDB Docker container, configuring it for use with Rocket.Chat, including setting up a replica set.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-google-compute-engine.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run --name mongo --network chatNetwork -d mongo  --oplogSize 128 --replSet rs0\n```\n\n----------------------------------------\n\nTITLE: Downloading Traefik Configuration Template\nDESCRIPTION: Command to download the Traefik configuration template from the official Rocket.Chat Docker repository.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LO \\\n    https://raw.githubusercontent.com/RocketChat/Docker.Official.Image/master/traefik.yml\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install necessary packages and dependencies for Rocket.Chat on Debian.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y curl build-essential graphicsmagick\n```\n\n----------------------------------------\n\nTITLE: Disabling Caddy in Rocket.Chat Snap\nDESCRIPTION: Command to disable Caddy in the Rocket.Chat server snap installation. This allows for custom HTTPS proxy configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap set rocketchat-server caddy=disable\n```\n\n----------------------------------------\n\nTITLE: Extracting Rocket.Chat Files\nDESCRIPTION: Extracts the downloaded Rocket.Chat archive and installs NPM dependencies.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzf /tmp/rocket.chat.tgz -C /tmp\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/bundle/programs/server && npm install\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container Network for Rocket.Chat\nDESCRIPTION: This command creates a Docker network named 'chatNetwork' for Rocket.Chat and its dependencies.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-google-compute-engine.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker network create chatNetwork\n```\n\n----------------------------------------\n\nTITLE: GitHub Webhook Handler Script - Basic Events with SVG Icons\nDESCRIPTION: JavaScript webhook handler that includes SVG icons and processes basic GitHub events including issues, comments and push notifications. The script includes embedded SVG images for visual indicators.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/github.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported Script */\n\n// Begin embedded images\nconst gh_cmit_svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" class=\"octicon octicon-git-commit\" height=\"16\" version=\"1.1\" viewBox=\"0 0 14 16\" width=\"14\"><path d=\"M10.86 7c-.45-1.72-2-3-3.86-3-1.86 0-3.41 1.28-3.86 3H0v2h3.14c.45 1.72 2 3 3.86 3 1.86 0 3.41-1.28 3.86-3H14V7h-3.14zM7 10.2c-1.22 0-2.2-.98-2.2-2.2 0-1.22.98-2.2 2.2-2.2 1.22 0 2.2.98 2.2 2.2 0 1.22-.98 2.2-2.2 2.2z\"></path></svg>';\nconst gh_pr_svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" class=\"octicon octicon-git-pull-request\" height=\"16\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>';\nconst gh_iss_svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" class=\"octicon octicon-issue-opened\" height=\"16\" version=\"1.1\" viewBox=\"0 0 14 16\" width=\"14\"><path d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>';\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Services\nDESCRIPTION: Command to stop all services defined in the Docker Compose file.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Backup\nDESCRIPTION: Command to create a compressed backup of the existing mmapv1 MongoDB database\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmongodump --archive=~/mmapdump.gz --gzip\n```\n\n----------------------------------------\n\nTITLE: Deploying Rocket.Chat to IBM Cloud\nDESCRIPTION: Command to push Rocket.Chat to IBM Cloud using meteor-buildpack-horse with 512MB memory allocation\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-ibm-cloud.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncf push <your app name> -m 512M -b https://github.com/RocketChat/meteor-buildpack-horse.git\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Command to start the Rocket.Chat and MongoDB services defined in the compose.yml file in detached mode.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Settings\nDESCRIPTION: YAML configuration for setting up ingress with nginx controller for the microservices deployment.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/microservices.md#2025-04-06_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhost: # the host to access your rocket.chat instance from, omit the protocol\ningress:\n  enabled: true\n  ingressClassName: nginx\n```\n\n----------------------------------------\n\nTITLE: Stopping MongoDB Service\nDESCRIPTION: Command to stop the MongoDB service before modifying storage engine\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl stop mongod\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Rocket.Chat Systemd Service\nDESCRIPTION: Systemd service configuration for running a single Rocket.Chat instance. Defines service dependencies, environment variables, and execution parameters.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/running-multiple-instances.md#2025-04-06_snippet_0\n\nLANGUAGE: systemd\nCODE:\n```\n[Unit]\nDescription=Rocket.Chat Server\nAfter=syslog.target\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nStandardOutput=syslog\nSyslogIdentifier=RocketChat\nUser=rocketchat\nGroup=rocketchat\nEnvironment=MONGO_URL=mongodb://your_mongodb:27017/your_database?replicaSet=your_replica_set_name\nEnvironment=MONGO_OPLOG_URL=mongodb://your_mongodb1:27017/local?replicaSet=your_replica_set_name\nEnvironment=ROOT_URL=https://your_rocketchat_domain.com\nEnvironment=PORT=3000\nWorkingDirectory=/path.to.rocketchat/rocket.chat\nExecStart=/usr/local/bin/node /path.to.rocketchat/rocket.chat/bundle/main.js\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Incoming Webhook Script Class for GitHub Integration\nDESCRIPTION: Main Script class for handling incoming webhook requests from GitHub. It identifies the event type from the GitHub header and processes it using the appropriate handler function from the githubEvents object.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/github.md#2025-04-06_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Script {\n  process_incoming_request({ request }) {\n    const header = request.headers['x-github-event'];\n    if (githubEvents[header]) {\n      return githubEvents[header](request);\n    }\n\n    return {\n      error: {\n        success: false,\n        message: 'Unsupported method'\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MONGO_OPLOG_URL to Rocket.Chat Service Configuration\nDESCRIPTION: This snippet shows the environment variable to be added to the Rocket.Chat service definition file for connecting to the MongoDB replica set.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/configure-a-replica-set-for-mongodb.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_OPLOG_URL=mongodb://localhost:27017/local?replSet=rs01\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB Service\nDESCRIPTION: Command to start MongoDB service with new WiredTiger configuration\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start mongod\n```\n\n----------------------------------------\n\nTITLE: Disabling Domain Check in Rocket.Chat MongoDB\nDESCRIPTION: MongoDB commands to disable the domain check code in Rocket.Chat. This is done by updating a setting in the database to allow all email domains.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/openshift.md#2025-04-06_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nuse rocketchat\ndb.auth('rocketchat-admin','rocketchat')\ndb.rocketchat_settings.update({_id:'Accounts_UseDNSDomainCheck'},{$set:{value:false}})\n```\n\n----------------------------------------\n\nTITLE: Custom Fields JSON Example\nDESCRIPTION: JSON structure for defining custom fields during user registration in Rocket.Chat. These fields will be added to the standard registration form.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/accounts/README.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing MongoDB Data Files\nDESCRIPTION: Command to remove existing mmapv1 data files from MongoDB directory\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf /var/lib/mongodb/*\n```\n\n----------------------------------------\n\nTITLE: Restoring MongoDB Backup\nDESCRIPTION: Command to restore the database backup into new WiredTiger storage engine without indexes\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmongorestore --drop --archive=~/mmapdump.gz --gzip --noIndexRestore\n```\n\n----------------------------------------\n\nTITLE: Creating Ansible playbook for Rocket.Chat deployment\nDESCRIPTION: YAML configuration for an Ansible playbook that applies the Rocket.Chat role to specified servers.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\n\n  - name: Apply the RocketChat.Server role to all chat_servers\n    hosts: chat_servers\n\n    roles:\n      - RocketChat.Server\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Meta Tags in HTML\nDESCRIPTION: Example of custom meta tags that can be added to the Rocket.Chat workspace. These include content type declarations with character set specifications for UTF-8 and ISO-8859-1.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/meta.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx for SSL Reverse Proxy (Ubuntu)\nDESCRIPTION: Command to install Nginx on Ubuntu for use as an SSL reverse proxy with Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/configuring-ssl-reverse-proxy.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install nginx\n```\n\n----------------------------------------\n\nTITLE: Starting Rocket.Chat Service\nDESCRIPTION: Command to start Rocket.Chat service after completing migration\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start rocketchat\n```\n\n----------------------------------------\n\nTITLE: Scheduling Snap Updates for Rocket.Chat\nDESCRIPTION: This command sets a specific time window for Snap package updates. In this example, updates are scheduled between 4:00-7:00 AM and 7:00-10:10 PM. This allows for controlled update timing.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap set system refresh.timer=4:00-7:00,19:00-22:10\n```\n\n----------------------------------------\n\nTITLE: Backing up Default Nginx Configuration\nDESCRIPTION: Commands to navigate to Nginx sites directory and create a backup of the default configuration file. This preserves the original configuration for reference.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/nginx/sites-available\nsudo mv default default.reference\n```\n\n----------------------------------------\n\nTITLE: Handling GitLab Wiki Event in JavaScript\nDESCRIPTION: This function processes a GitLab wiki event and formats it for Rocket.Chat notification. It handles creation, modification, and deletion of wiki pages, providing relevant details about the action and user.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/gitlab.md#2025-04-06_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nwikiEvent(data) {\n    const user_name = data.user.name;\n    const project = data.project;\n    const project_path = project.path_with_namespace;\n    const wiki_page = data.object_attributes;\n    const wiki_page_title = this.wikiPageTitle(wiki_page);\n    const action = wiki_page.action;\n\n    let user_action = 'modified';\n\n    if (action === 'create') {\n        user_action = 'created';\n    } else if (action === 'update') {\n        user_action = 'edited';\n    } else if (action === 'delete') {\n        user_action = 'deleted';\n    }\n\n    return {\n        content: {\n            username: project_path,\n            icon_url: project.avatar_url || data.user.avatar_url || '',\n            text: `The wiki page ${wiki_page_title} was ${user_action} by ${user_name}`\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache SSL Reverse Proxy for Rocket.Chat\nDESCRIPTION: Apache configuration for setting up an SSL reverse proxy for Rocket.Chat. Includes SSL certificate setup, logging, and WebSocket proxying.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/configuring-ssl-reverse-proxy.md#2025-04-06_snippet_4\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:443>\n    ServerAdmin it@domain.com\n    ServerName chat.domain.com\n\n    LogLevel info\n    ErrorLog /var/log/chat.domain.com_error.log\n    TransferLog /var/log/chat.domain.com_access.log\n\n    SSLEngine On\n    SSLCertificateFile /etc/ssl/certs/chat.domain.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/chat.domain.com.key\n    SSLCertificateChainFile /etc/ssl/certs/intermediate.ca.pem\n\n    <Location />\n        Require all granted\n    </Location>\n\n    RewriteEngine On\n    RewriteCond %{HTTP:CONNECTION} Upgrade [NC]\n    RewriteCond %{HTTP:Upgrade} =websocket [NC]\n    RewriteRule /(.*)           ws://localhost:3000/$1 [P,L]\n    RewriteCond %{HTTP:Upgrade} !=websocket [NC]\n    RewriteRule /(.*)           http://localhost:3000/$1 [P,L]\n\n    ProxyPassReverse /          http://localhost:3000/\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Logging out from GitHub App in Rocket.Chat\nDESCRIPTION: This command logs out the current user from the GitHub app in Rocket.Chat, removing their authentication.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/github logout\n```\n\n----------------------------------------\n\nTITLE: Installing Certbot for SSL Certificate\nDESCRIPTION: Commands to install Certbot, a tool that automates the process of obtaining SSL certificates from Let's Encrypt. This is necessary for securing your Rocket.Chat server with HTTPS.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install certbot\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data for Message Sent Webhook\nDESCRIPTION: This JSON snippet shows the data structure sent in a webhook request when a message is sent. It includes session details, visitor information, agent details, and the specific message that was sent.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel/webhooks.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": \"Tc5SyBZHovD4k8BXv\",\n  \"label\": \"James\",\n  \"createdAt\": \"2023-02-02T10:16:07.230Z\",\n  \"lastMessageAt\": \"2023-02-02T10:16:09.615Z\",\n  \"visitor\": {\n    \"_id\": \"63db8d4990fe6eda42ad429a\",\n    \"token\": \"e36e352c742eee48860d576fcefb372afc44ebc95750fa1e3b646195f702341a\",\n    \"name\": \"James\",\n    \"username\": \"guest-3\",\n    \"email\": [\n      {\n        \"address\": \"abc.xyz+local-on@rocket.chat\"\n      }\n    ],\n    \"phone\": null\n  },\n  \"agent\": {\n    \"_id\": \"aXjjcPwq4Pcp7xftH\",\n    \"username\": \"user1\",\n    \"name\": \"User One\",\n    \"email\": \"uaser1@mail.com\"\n  },\n  \"type\": \"Message\",\n  \"messages\": [\n    {\n      \"u\": {\n        \"_id\": \"aXjjcPwq4Pcp7xftH\",\n        \"username\": \"user1\",\n        \"name\": \"User One\"\n      },\n      \"_id\": \"7xjkw8ZFitMSNGmeJ\",\n      \"username\": \"user1\",\n      \"msg\": \"How can I help you today?\",\n      \"ts\": \"2023-02-02T10:21:05.391Z\",\n      \"agentId\": \"aXjjcPwq4Pcp7xftH\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Rocket.Chat Server Service for Backup\nDESCRIPTION: Command to stop the Rocket.Chat server service while keeping the MongoDB service running, preparing for a backup operation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo service snap.rocketchat-server.rocketchat-server stop\n```\n\n----------------------------------------\n\nTITLE: Google Calendar Events Command\nDESCRIPTION: Slash command to display all calendar events for the current day, showing event details and providing options to respond to invitations.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/google-calendar/using-the-google-calendar-app.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/google-calendar events\n```\n\n----------------------------------------\n\nTITLE: Cron Expression Example for Retention Policy\nDESCRIPTION: Example of a cron job expression used to configure how often the prune timer should run in Rocket.Chat's retention policy.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/retention-policy.md#2025-04-06_snippet_0\n\nLANGUAGE: cron\nCODE:\n```\n*/5_5_8_3\n```\n\n----------------------------------------\n\nTITLE: Referencing Anonymous Read Setting in Rocket.Chat Markdown\nDESCRIPTION: This snippet demonstrates how to reference the 'Allow Anonymous Read' setting in Markdown within a table cell. It's used to describe conditions for anonymous user access.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Allow Anonymous Read</code>\n```\n\n----------------------------------------\n\nTITLE: Display Custom Fields Configuration in Rocket.Chat\nDESCRIPTION: JSON array format for specifying which custom fields to display in the User Info panel.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/accounts/configure-custom-fields-for-users.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{\"label1\":\"key2\"},{\"label2\":\"key2\"},...]\n```\n\nLANGUAGE: json\nCODE:\n```\n[{\"Role\":\"role\"},{\"Department\":\"dept\"}]\n```\n\n----------------------------------------\n\nTITLE: Installing Required FreeBSD Packages\nDESCRIPTION: Command to install necessary system packages for Rocket.Chat deployment using pkg package manager.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/freebsd/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pkg install git scons python gcc48 gmake npm bash wget\n```\n\n----------------------------------------\n\nTITLE: Listing Rocket.Chat Snap Services\nDESCRIPTION: This command displays information about the Rocket.Chat Snap package, including the list of services it provides. It's useful for understanding the components of the Snap installation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnap info rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Assigning Guest Role in Rocket.Chat\nDESCRIPTION: This code snippet shows the 'guest' role in Rocket.Chat. Guest users have limited access to the workspace and can only participate in rooms they belong to.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<code>guest</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobex SMS Gateway in Rocket.Chat\nDESCRIPTION: This snippet outlines the configuration settings for the Mobex SMS gateway in Rocket.Chat. It includes settings for gateway address, REST API address, authentication, and message origination details.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/sms.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Mobex SMS Gateway Address**: IP or Host of your Mobex service with the specified port. E.g. `http://192.168.1.1:1401` or `https://www.example.com:1401`\n* **Mobex SMS REST API Address**: IP or Host of your Mobex REST API. E.g. `http://192.168.1.1:8080` or `https://www.example.com:8080`\n* **Username**: Your username\n* **Password**: Your Mobex password\n* **From**: Originating address/phone number when sending a new SMS to Live Chat client\n* **List of numbers to send SMS from**: Comma-separated list of numbers to use in sending brand new messages, eg. `123456789`, `123456788`, `123456888`\n```\n\n----------------------------------------\n\nTITLE: Exporting Meteor MongoDB Data\nDESCRIPTION: Command to dump the contents of the built-in Meteor MongoDB running on the default port 3001.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-built-in-meteor-mongodb-to-external-server.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmongodump -h 127.0.0.1 --port 3001 -d meteor\n```\n\n----------------------------------------\n\nTITLE: Defining Zip File Structure for CSV Imports in Rocket.Chat\nDESCRIPTION: Shows the required flat zip file structure for importing data into Rocket.Chat. The structure includes channels.csv, users.csv, and directories for channel messages and direct messages.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/data-migration/import-from-csv.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfileToImport.zip\n├── channels.csv\n├── users.csv\n├── directmessages\n│   ├── messages1.csv\n│   ├── messages2.csv\n│   └── messages3.csv\n├── general\n│   └── messages.csv\n├── otherChannelName\n│   ├── canBeAnyNameButHasToHave.csv\n│   ├── theDotCSV.csv\n│   └── asTheFileExt.csv\n├── privateArea\n│   └── messages.csv\n└── random\n   ├── dateTimeStamp1.csv\n   ├── dateTimeStamp2.csv\n   └── dateTimeStamp3.csv\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Registry Image on Air-gapped Server\nDESCRIPTION: Command to load the Docker registry image on the air-gapped registry host server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker load -i registry_image.tar\n```\n\n----------------------------------------\n\nTITLE: Configuring External Frame URL in Rocket.Chat\nDESCRIPTION: This snippet shows how to set up an external frame URL for embedding Rocket.Chat or interacting with a CRM. It includes options for enabling the external frame and setting an encryption key.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/sms.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **External frame enabled**: Turn on to enable External frame.\n* **External frame URL**: Add the URL of your external frame.\n* **Encryption key (JWK)**: If provided, it encrypts the user's token with the provided key, and the external system needs to decrypt the data to access the token.\n```\n\n----------------------------------------\n\nTITLE: Download Latest Rocket.Chat Version\nDESCRIPTION: Commands to download and extract the latest version of Rocket.Chat\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/updating-rocket.chat.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://releases.rocket.chat/latest/download -o /tmp/rocket.chat.tgz\n```\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzf /tmp/rocket.chat.tgz -C /tmp\n```\n\n----------------------------------------\n\nTITLE: Saving and Transferring Docker Registry Image\nDESCRIPTION: Commands to save the Docker registry image as a tar file and transfer it to the registry host server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker save -o registry_image.tar registry:2\n\nscp -i [key] <registry_tar_file_path> <user_name@target_ip_address:/destination_path>\n```\n\n----------------------------------------\n\nTITLE: Defining Supporting Background Colors in Hex Format\nDESCRIPTION: The hex color codes for lighter shades of Rocket.Chat's brand colors, intended for use as backgrounds, iconography, and other visual elements. These provide complementary options to the primary and secondary colors.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/brand-and-visual-guidelines/colors.md#2025-04-06_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nRed for backgrounds: #FEECEF\nBlue for backgrounds: #E8F1FE\nPurple for backgrounds: #F5E9F9\nGreen for backgrounds: #EAFCF6\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Replica Set for Rocket.Chat\nDESCRIPTION: This MongoDB command initializes a replica set, which is required for Rocket.Chat's operation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-google-compute-engine.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'mongo:27017' } ]})\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin User in Docker Compose for Rocket.Chat\nDESCRIPTION: This snippet demonstrates how to specify the initial admin user credentials directly in a Docker Compose file for Rocket.Chat. It includes environment variables for server configuration and admin account creation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/accessing-your-workspace/admin-account-creation.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    environment:\n      - PORT=3000\n      - ROOT_URL=http://localhost:3000\n      - MONGO_URL=mongodb://mongo:27017/rocketchat\n      - MONGO_OPLOG_URL=mongodb://mongo:27017/local\n      - INITIAL_USER=yes\n      - ADMIN_USERNAME=admin\n      - ADMIN_NAME=Admin\n      - ADMIN_EMAIL=rodriq@localhost.com\n      - ADMIN_PASS=supersecret\n      - OVERWRITE_SETTING_Show_Setup_Wizard=completed\n      - REG_TOKEN=${REG_TOKEN}\n#       - MAIL_URL=smtp://smtp.email\n```\n\n----------------------------------------\n\nTITLE: Saving Docker Images as Tar Files\nDESCRIPTION: Commands to save the downloaded Rocket.Chat and MongoDB Docker images as tar files for transfer to an air-gapped server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker save -o rocketchat.tar registry.rocket.chat/rocketchat/rocket.chat:latest\n\ndocker save -o mongodb.tar bitnami/mongodb:5.0\n```\n\n----------------------------------------\n\nTITLE: Pulling Official Rocket.Chat Docker Image\nDESCRIPTION: Command to pull the official stable Rocket.Chat image from the Rocket.Chat registry.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.rocket.chat/rocketchat/rocket.chat\n```\n\n----------------------------------------\n\nTITLE: Restarting Caddy Service in Rocket.Chat Snap\nDESCRIPTION: Command to reload the Caddy service after making changes to the Caddyfile configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload snap.rocketchat-server.rocketchat-caddy\n```\n\n----------------------------------------\n\nTITLE: Changing Rocket.Chat Port Configuration in Snap\nDESCRIPTION: This command changes the default HTTP port for a Rocket.Chat server installed via Snap. It sets the port to 8080 instead of the default 3000. A restart of the rocketchat-service is required for the change to take effect.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap set rocketchat-server port=8080\n```\n\n----------------------------------------\n\nTITLE: Pulling Rocket.Chat and MongoDB Docker Images\nDESCRIPTION: Commands to download the latest Rocket.Chat and MongoDB Docker images from their respective registries.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.rocket.chat/rocketchat/rocket.chat:latest\n\ndocker pull docker.io/bitnami/mongodb:${MONGODB_VERSION:-5.0}\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Rocket.Chat Release Image\nDESCRIPTION: Command to pull the latest stable Rocket.Chat image, which contains the most recent stable updates.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.rocket.chat/rocketchat/rocket.chat:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Registration Token in Rocket.Chat Snap\nDESCRIPTION: Creates an environment file to set the registration token for Rocket.Chat server. File should be placed in /var/snap/rocketchat-server/current/ directory.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nREG_TOKEN=<your token>\n```\n\n----------------------------------------\n\nTITLE: Updating Rocket.Chat Snap to New Version\nDESCRIPTION: Command to update the Rocket.Chat snap installation to a new version within a specific channel, typically used for major version updates.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap refresh rocketchat-server --channel=x.x/stable\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB Shell in Rocket.Chat Snap\nDESCRIPTION: This command provides access to the MongoDB shell that comes with the Rocket.Chat Snap package. It's useful for direct database operations or troubleshooting.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrocketchat-server.mongo\n```\n\n----------------------------------------\n\nTITLE: Formatting Requirements Table in Markdown\nDESCRIPTION: Markdown tables defining minimum system requirements for desktop applications, mobile applications, and web browsers for Rocket.Chat platform.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/installing-client-apps/minimum-requirements-for-client-apps.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Operating System** | **Requirements**                                                                                                                                                  |\n| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **macOS**            | **OS X 10.11 or above**                                                                                                                                           |\n| **Windows**          | **Windows 8 or above**                                                                                                                                            |\n| **Linux**            | <p><strong>Fedora 28 or above</strong></p><p><strong>Ubuntu LTS releases 18.04 or above</strong></p><p><strong>Red Hat Enterprise Linux 7.0 or above</strong></p> |\n\n| **Operating System** | **Requirements**         |\n| -------------------- | ------------------------ |\n| **iOS**              | **iOS 11** **or above**  |\n| **Android**          | **Android 6.0 or above** |\n\n| **Browser**                     | **Requirements**        |\n| ------------------------------- | ----------------------- |\n| **Google Chrome**               | **Latest 3 versions**   |\n| **Mozilla** **Firefox**         | **Latest 3 versions**   |\n| **Safari**                      | **Latest 2 versions**   |\n| **Microsoft Edge**              | **Latest 2 versions**   |\n| **Microsoft Internet Explorer** | **Latest version only** |\n```\n\n----------------------------------------\n\nTITLE: Implementing Iframe with Permissions for Rocket.Chat\nDESCRIPTION: HTML code snippet demonstrating how to embed a Rocket.Chat instance in an iframe with proper permissions for microphone, camera, and geolocation features. This is important when integrating Rocket.Chat into another website while maintaining access to these browser features.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/general/README.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://open.rocket.chat/\" allow=\"geolocation; microphone; camera\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers\nDESCRIPTION: Command to list all Docker containers for identifying the MongoDB container name.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps -a\n```\n\n----------------------------------------\n\nTITLE: Transferring Docker Image Tar Files to Air-gapped Server\nDESCRIPTION: SCP commands to transfer the Rocket.Chat and MongoDB Docker image tar files to an air-gapped server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nscp -i [key] <rocketchat_tar_file_path> <user_name@target_ip_address:/destination_path>\n\nscp -i [key] <mongodb_tar_file_path> <user_name@target_ip_address:/destination_path>\n```\n\n----------------------------------------\n\nTITLE: Installing Rocket.Chat Desktop Client on Ubuntu using Snap\nDESCRIPTION: Command to install the Rocket.Chat desktop client on Ubuntu systems using the Snap package manager. Snap installation provides automatic updates and cross-platform compatibility.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/installing-client-apps/desktop-and-mobile-apps.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install rocketchat-desktop\n```\n\n----------------------------------------\n\nTITLE: Formatting Outgoing Messages from Rocket.Chat to Microsoft Teams\nDESCRIPTION: This script handles outgoing messages from Rocket.Chat to Microsoft Teams. It prevents bot messages from creating loops, and formats user messages with their username in bold followed by the message text. The script prepares a properly formatted request to be sent to the Microsoft Teams webhook.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/microsoft-teams.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Script {\n        prepare_outgoing_request({ request }) {\n          console.log(request.data);\n            if (request.data.bot) {\n                //Don't repost messages from the bot.\n                return { };\n            } else {\n                return {\n                    url: request.url,\n                    method: 'POST',\n                    headers: {\"ContentType\":\"application/json\",\"Content-type\":\"application/json\"},\n                    data: {\n                      context: 'http://schema.org/extensions',\n                      type: 'MessageCard',\n                    //  text: '{\\'<b>' + request.data.user_name+ '</b>:': \\\"Isravel - Hello World\\\"}';\n                                  text: request.data.user_name.bold() + \": \" + request.data.text,\n                      //                      text: encodeURIComponent( request.data.user_name.bold() + request.data.text)\n                    },\n                 //   method: 'GET'\n                };\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Caddy Service Status in Rocket.Chat Snap\nDESCRIPTION: Command to verify the status of the Caddy service after restarting or making configuration changes.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status snap.rocketchat-server.rocketchat-caddy\n```\n\n----------------------------------------\n\nTITLE: Repairing MongoDB Database\nDESCRIPTION: Command to repair database and rebuild indices after restoration\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmongo --eval 'db.repairDatabase()'\n```\n\n----------------------------------------\n\nTITLE: Displaying Code Values in Markdown Table\nDESCRIPTION: This snippet shows various code values used within a markdown table to represent setting names in the Rocket.Chat codebase. These values represent configuration parameters that can be set in the Rocket.Chat system.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/settings-permission.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_Allow_Infinite_Count</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_CORS_Origin</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>view-outside-room</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>users.list</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_Apply_permission_view-outside-room_on_users-list</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>view-outside-room</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_Default_Count</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_EmbedCacheExpirationDays</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_Embed_UserAgent</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_Embed_UserAgent</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_EmbedIgnoredHosts</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_Drupal_URL</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>https://domain.com</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>API_Embed</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowAnonymousRead</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowAnonymousWrite</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowDeleteOwnAccount</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowEmailChange</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowEmailNotifications</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowInvisibleStatusOption</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowPasswordChange</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowPasswordChangeForOAuthUsers</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowRealNameChange</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowUserAvatarChange</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowUserProfileChange</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowUserStatusMessageChange</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowUsernameChang</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AllowedDomainsList</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AvatarBlockUnauthenticatedAccess</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AvatarCacheTime</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AvatarResize</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AvatarSize</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_BlockedDomainsList</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AvatarResize</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_AvatarExternalProviderUrl</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_BlockedUsernameLis</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_CustomFields_Description</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_CustomFieldsToShowInUserInfo</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_DefaultUsernamePrefixSuggestion</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_Default_User_Preferences_alsoSendThreadToChannel</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Collapse_Embedded_Media_By_Default</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Convert_Ascii_Emojis</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Notification_RequireInteraction</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Email_Notification_Mode</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Enable_Auto_Away</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Hide_flextab</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Hide_roles</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Hide_usernames</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Idle_Time_Limit</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Mute_Focused_Conversations</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>New_Message_Notification</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>New_Room_Notification</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Notifications_Sound_Volume</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_Default_User_Preferences_pushNotifications</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Save_Mobile_Bandwidth</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Display_Avatars_Sidebar</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Group_by_Type</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Use_Emojis</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_Directory_DefaultView</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Placeholder_for_email_or_username_login_field</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_EmailVerification</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_Enrollment_Email</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_Enrollment_Email_Subject_Default</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_ForgetUserSessionOnWindowClose</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_Iframe_api_method</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_Iframe_api_url</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_LoginExpiration</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Accounts_ManuallyApproveNewUsers</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB for Rocket.Chat\nDESCRIPTION: MongoDB configuration file with WiredTiger storage engine and replica set configuration\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-ubuntu.md#2025-04-06_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n  engine: wiredTiger\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n\nprocessManagement:\n  fork: true\n  timeZoneInfo: /usr/share/zoneinfo\n\nreplication:\n  replSetName: rs01\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Registry Image\nDESCRIPTION: Command to pull the Docker registry image for creating a private registry.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry:2\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Replica Set\nDESCRIPTION: Command to initialize replica set if running MongoDB with replication\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmongo --eval 'rs.initiate()'\n```\n\n----------------------------------------\n\nTITLE: Apache Virtual Host Configuration for Load Balancing\nDESCRIPTION: Apache virtual host configuration with SSL and load balancing setup for multiple Rocket.Chat instances, including WebSocket support.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/running-multiple-instances.md#2025-04-06_snippet_4\n\nLANGUAGE: apacheconf\nCODE:\n```\n<VirtualHost *:443>\n    ServerAdmin it@domain.com\n    ServerName chat.domain.com\n\n    LogLevel info\n    ErrorLog /var/log/chat.domain.com_error.log\n    TransferLog /var/log/chat.domain.com_access.log\n\n    SSLEngine On\n    SSLCertificateFile /etc/ssl/certs/chat.domain.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/chat.domain.com.key\n\n    Header add Set-Cookie \"ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/\" env=BALANCER_ROUTE_CHANGED\n    ProxyPreserveHost On\n\n    <Proxy balancer://http>\n        BalancerMember http://localhost:3000 route=1\n        BalancerMember http://localhost:3001 route=2\n        ...\n        ProxySet stickysession=ROUTEID\n    </Proxy>\n\n    <Proxy balancer://ws>\n        BalancerMember ws://localhost:3000 route=1\n        BalancerMember ws://localhost:3001 route=2\n        ...\n        ProxySet stickysession=ROUTEID\n    </Proxy>\n\n    <Location />\n        Require all granted\n    </Location>\n\n    RewriteEngine On\n    RewriteCond %{HTTP:Upgrade} =websocket [NC]\n    RewriteRule /(.*)           balancer://ws/$1 [P,L]\n    RewriteCond %{HTTP:Upgrade} !=websocket [NC]\n    RewriteRule /(.*)           balancer://http/$1 [P,L]\n\n    ProxyPassReverse /          http://localhost/\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Installing Rocket.Chat with Helm in Bash\nDESCRIPTION: Bash command to install Rocket.Chat using Helm with a custom values.yaml file for configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation/federation-admin-guide/deploy-a-federated-rocket.chat-workspace.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install rocketchat -f values.yaml rocketchat/rocketchat\n```\n\n----------------------------------------\n\nTITLE: Starting Private Docker Registry Container\nDESCRIPTION: Command to start a private Docker registry container on the air-gapped registry host server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 5000:5000 --restart=always --name private-registry registry:2\n```\n\n----------------------------------------\n\nTITLE: Stopping Rocket.Chat Service\nDESCRIPTION: Command to stop the Rocket.Chat service before beginning migration\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl stop rocketchat\n```\n\n----------------------------------------\n\nTITLE: Processing Incoming Telegram Messages in Rocket.Chat\nDESCRIPTION: JavaScript class that processes incoming Telegram messages, handles message formatting, supports stickers, quoted replies, and user information. This script runs on the Rocket.Chat incoming webhook to transform Telegram messages into Rocket.Chat format.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/simple-telegram-bot.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Script {\n    addQuotePrefix(str) {\n        let tmp = str.split('\\n'),\n            res = [];\n\n        for (const frag of tmp) {\n            res.push(`> ${frag}`);\n        }\n\n        return res.join('\\n');\n    }\n\n    process_incoming_request({ request }) {\n        // UNCOMMENT THE BELOW LINE TO DEBUG IF NEEDED.\n        // console.log(request.content);\n        if ('edited_message' in request.content) {\n            request.content.message = request.content.edited_message;\n        }\n        let from = request.content.message.from;\n        let who = from.username\n        let icon_url = '/avatar/' + from.username + '.jpg'\n        if(!who)  {\n          if (from.first_name && from.last_name) {\n            who = `${from.first_name} ${from.last_name}`\n          } else if (from.first_name) {\n            who = from.first_name\n          } else {\n            who = from.last_name\n          }\n          icon_url = `/avatar/${request.content.message.from.first_name}.jpg`\n        }\n        let body = request.content.message.text\n\n        if(!body) {\n          if(request.content.message.hasOwnProperty(\"sticker\") && request.content.message.sticker.emoji) {\n            // It's a sticker\n            body = request.content.message.sticker.emoji\n        } else {\n           return {}\n          }\n        }\n\n        if(request.content.message.reply_to_message) {\n              var quotedMessage = \n                \"*\" +\n                request.content.message.reply_to_message.from.username +\n                \"*\\n\" +\n                request.content.message.reply_to_message.text;\n\n              quotedMessage = this.addQuotePrefix(quotedMessage);\n            body = quotedMessage + '\\n' + body;\n        }\n\n        return {\n            content: {\n                username: who,\n                icon_url: icon_url,\n                text: body\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Rocket.Chat with Docker Compose\nDESCRIPTION: Command to deploy Rocket.Chat using Docker Compose on the air-gapped server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images in Private Registry\nDESCRIPTION: Command to list the Docker images stored in the private registry.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nls /var/lib/registry/docker/registry/v2/repositories\n```\n\n----------------------------------------\n\nTITLE: Setting Required Wizard Fields in Rocket.Chat\nDESCRIPTION: Defines which settings are mandatory during the setup wizard process using a comma-separated list.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/deployment-environment-variables/manage-settings-using-environmental-variables.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSETTINGS_REQUIRED_ON_WIZARD=Organization_Type,Organization_Name\n```\n\n----------------------------------------\n\nTITLE: Configuring Rocket.Chat Snap Environmental Variables\nDESCRIPTION: These commands demonstrate how to set environmental variables for the Rocket.Chat Snap, including port, MongoDB URL, and MongoDB Oplog URL. A restart is required after setting new values.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap set rocketchat-server port=<another-port>\nsudo snap set rocketchat-server mongo-url=mongodb://<your-url>:<your-port>/<your-db-name>\nsudo snap set rocketchat-server mongo-oplog-url=mongodb://<your-url>:<your-port>/local\nsudo systemctl restart snap.rocketchat-server.rocketchat-server.service\n```\n\n----------------------------------------\n\nTITLE: Viewing Rocket.Chat Container Logs\nDESCRIPTION: Command to view the logs of the Rocket.Chat container after deployment.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs -f rocketchat\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding MongoDB and Accessing Mongo Shell\nDESCRIPTION: Commands to set up port forwarding for MongoDB and access the MongoDB shell. This is required for disabling the domain check in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/openshift.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\noc port-forward <mongodb_pod> 27017\nmongo localhost:27017\n```\n\n----------------------------------------\n\nTITLE: Hiding Rocket.Chat Settings from Client\nDESCRIPTION: Hides specific settings from being visible in the client interface while maintaining functionality.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/deployment-environment-variables/manage-settings-using-environmental-variables.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSETTINGS_HIDDEN=FileUpload_GoogleStorage_AccessId,FileUpload_GoogleStorage_Secret\n```\n\n----------------------------------------\n\nTITLE: Pulling Development Build of Rocket.Chat\nDESCRIPTION: Command to pull the development build of Rocket.Chat, which contains the newest features that are still being tested.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.rocket.chat/rocketchat/rocket.chat:develop\n```\n\n----------------------------------------\n\nTITLE: Viewing Rocket.Chat Container Logs\nDESCRIPTION: Command to display the logs of the Rocket.Chat container for monitoring the deployment status.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs -f rocketchat\n```\n\n----------------------------------------\n\nTITLE: Creating Rocket.Chat Application in OpenShift\nDESCRIPTION: Command to create the Rocket.Chat application in OpenShift with MongoDB configurations. This initiates the deployment of Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/openshift.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\noc new-app rocket-chat -p MONGODB_DATABASE=rocketchat,MONGODB_USER=rocketchat-admin,MONGODB_PASS=rocketchat\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Hint Comparing OTR to End-to-End Encryption in Markdown\nDESCRIPTION: This snippet uses Markdown and a custom hint syntax to provide information contrasting OTR with end-to-end encrypted messages.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/user-guides/messages/off-the-record-otr-messaging-user-guide.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nIn contrast to OTR, _end-to-end encrypted messages_ have a record on the server (in the form of the encrypted message string) and are persistent.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Special Characters Configuration for Channel Names\nDESCRIPTION: Regular expression pattern for allowing special characters in Rocket.Chat channel names, including various accented characters and special symbols.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/data-migration/import-from-slack/README.md#2025-04-06_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n[0-9a-zA-Z-_.ãÃàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸçÇßØøÅåÆæœ]+$\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Basic Search Commands\nDESCRIPTION: List of basic search commands that can be used to filter messages in Rocket.Chat channels. Includes user-specific filters, message property filters, and date-based search options.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/user-guides/rooms/channels/search-messages-in-a-channel.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfrom:me - To search for messages only created by the current user\nfrom:user.name - To search for messages created by a specific user\nhas:star - Returns messages that the current user has starred\nis:pinned or has:pin - Returns messages that have been pinned\nhas:url or has:link - Returns messages that contain a link\nhas:location or has:map - Returns messages that have a location attached\nbefore:dd/mm/yyyy, after:dd/mm/yyyy and on:dd/mm/yyyy - Return message created before, after, or on the provided date\norder:asc, order:ascend, or order:ascending - Sorts messages by ascending timestamp\norder:desc, order:descend, or order:descending - Sorts messages by descending timestamp\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx on Ubuntu\nDESCRIPTION: Command to install Nginx web server on Ubuntu using apt package manager.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-client-ssl-certificate-authentication-for-rocket.chat.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y nginx\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Profile in Rocket.Chat\nDESCRIPTION: This command shows the user's GitHub profile details and issues assigned to them within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n/github me\n```\n\n----------------------------------------\n\nTITLE: Decrypting HipChat Server Export File using OpenSSL in Bash\nDESCRIPTION: This command decrypts the exported HipChat Server file using OpenSSL. It specifies the input encrypted file, output decrypted file, and the password used during export. The AES-256-CBC cipher is used for decryption.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/data-migration/import-from-hipchat.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl aes-256-cbc -d -in path_to_encrypted_file.tar.gz.aes -out path_to_decrypted_file.tar.gz -pass pass:your_password\n```\n\n----------------------------------------\n\nTITLE: Viewing Rocket.Chat Snap Logs\nDESCRIPTION: These commands show how to view logs for different components of the Rocket.Chat Snap package using the 'snap logs' command. They allow monitoring of the Rocket.Chat server, MongoDB, and Caddy services.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap logs -f rocketchat-server.rocketchat-server\nsudo snap logs -f rocketchat-server.rocketchat-mongo\nsudo snap logs -f rocketchat-server.rocketchat-caddy\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificate Pair for SAML Authentication\nDESCRIPTION: Command to generate a new RSA 3072-bit key pair with a self-signed X.509 certificate valid for 10 years (3652 days). The certificate is stored in saml.crt and the private key in saml.pem, which can be used for SAML authentication configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/saml/keycloak.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -newkey rsa:3072 -new -x509 -days 3652 -nodes -out saml.crt -keyout saml.pem\n```\n\n----------------------------------------\n\nTITLE: Searching GitHub Issues or Pull Requests in Rocket.Chat\nDESCRIPTION: This command initiates a search for issues or pull requests in a specific GitHub repository from within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n/github search\n```\n\n----------------------------------------\n\nTITLE: Formatting Users CSV File for Rocket.Chat Import\nDESCRIPTION: Shows the required format for the users.csv file. Each line contains username, email, and name of a user to be imported.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/data-migration/import-from-csv.md#2025-04-06_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"bradley.hilton\",\"bradley.hilton@example.com\",\"Bradley Hilton\"\n\"billy.bob\",\"billy.bob@example.com\",\"Billy Bob Jr.\"\n\"graywolf336\",\"graywolf336@example.com\",\"GrayWolf336\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Example for SMTP Host\nDESCRIPTION: Example of SMTP server hostname format used in Rocket.Chat email configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/email/email-configuration.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmail.example.com\n```\n\n----------------------------------------\n\nTITLE: Update Node Version\nDESCRIPTION: Command to update Node.js to the version required by Rocket.Chat\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/updating-rocket.chat.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo n install <x.x.x>\n```\n\n----------------------------------------\n\nTITLE: Managing GitHub Issues in Rocket.Chat\nDESCRIPTION: This command allows users to view, assign, and add issues for a specific GitHub repository from within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n/github issues\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstart for Rocket.Chat (Non-Docker)\nDESCRIPTION: This snippet demonstrates how to create an Upstart job for managing Rocket.Chat on Ubuntu. It includes dependencies, environment variables, and startup commands.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-process-managers-and-init-systems.md#2025-04-06_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ndescription \"rocketchat application server\"\n\n# Wait for mongod before starting rocketchat app\nstart on (started mongod)\nstop on runlevel [!2345]\n\n# Automatically attempt to restart with finite limits\nrespawn\nrespawn limit 99 5\n\n# Export necessary variables and start the Applications / Services\nscript\n    export MONGO_URL=mongodb://localhost:27017/rocketchat\n    export ROOT_URL=https://host.yourdomain.tld\n    export PORT=3000\n    exec /usr/local/bin/node /home/administrator/Rocket.Chat/main.js\nend script\n```\n\n----------------------------------------\n\nTITLE: Creating Federated Multi-user Direct Message using Slash Command in Rocket.Chat\nDESCRIPTION: This snippet shows the slash command syntax for creating a multi-user direct message with external users in Rocket.Chat. The command uses the /federation dm directive followed by multiple external users' usernames and servers.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation/federation-user-guide/create-federated-rooms.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/federation dm @username1:server.com @username2:server2.com\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub Repository Contributors in Rocket.Chat\nDESCRIPTION: This command fetches and displays a list of contributors for a specific GitHub repository within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n/github <username>/<repository name> contributors\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Service for Rocket.Chat\nDESCRIPTION: This snippet shows how to create a systemd unit file for running Rocket.Chat as a service. It includes settings for automatic restarts, logging, and environment variables.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-process-managers-and-init-systems.md#2025-04-06_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Rocket.Chat Server\nAfter=network.target remote-fs.target nss-lookup.target mongod.target nginx.target  # Remove or Replace nginx with your proxy\n\n[Service]\nExecStart=/usr/local/bin/node /var/www/rocketchat/main.js    # Specify the location of node and location of main.js\nRestart=always                                               # If set to always, the service will be restarted regardless of whether it exited cleanly or not, got terminated abnormally by a signal, or hit a timeout.\nRestartSec=10                                                # Restart service after 10 seconds if node service crashes\nStandardOutput=syslog                                        # Output to syslog\nStandardError=syslog                                         # Output to syslog\nSyslogIdentifier=nodejs-example\n#User=<alternate user>\n#Group=<alternate group>\nEnvironment=NODE_ENV=production PORT=3000 ROOT_URL=https://rocketchat.domain.com MONGO_URL=mongodb://localhost:27017/rocketchat\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Adding Rocket.Chat Helm Chart Repository\nDESCRIPTION: Command to add the Rocket.Chat helm chart repository to your local Helm installation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add rocketchat https://rocketchat.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Setting Monolith Replicas\nDESCRIPTION: YAML configuration to set the number of replicas for the main Rocket.Chat monolith.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/microservices.md#2025-04-06_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreplicaCount: 2\n```\n\n----------------------------------------\n\nTITLE: Creating PKCS#12 Certificate for Browser/Mobile Use\nDESCRIPTION: Command to create a PKCS#12 format certificate bundle for use in browsers and mobile devices.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-client-ssl-certificate-authentication-for-rocket.chat.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out user.pfx -inkey user.key -in user.crt -certfile ca.crt\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Rocket.Chat Image for Update\nDESCRIPTION: Command to pull the latest Rocket.Chat image when performing an update.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.rocket.chat/rocketchat/rocket.chat:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible via pip on macOS\nDESCRIPTION: Commands to install Ansible using pip package manager on macOS, including the installation of pip itself if not already present.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo easy_install pip \nsudo pip install ansible\n```\n\n----------------------------------------\n\nTITLE: Running Rocket.Chat with MongoDB Authentication via Docker\nDESCRIPTION: Docker run command example showing how to pass MongoDB authentication credentials as environment variables when running a Rocket.Chat container.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-uri-authentication.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n-e \"MONGO_URL=mongodb://rctestuser:mymongopassword@mongo:27017/rocketchat?authSource=admin\" \\\n-e \"MONGO_OPLOG_URL=mongodb://rctestuser:mymongopassword@mongo:27017/local?authSource=admin\" \\\nrocketchat/rocket.chat:X.X.X\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible Galaxy requirements for Rocket.Chat\nDESCRIPTION: YAML configuration for specifying the Rocket.Chat Ansible role to be downloaded, with versions for different Ansible releases.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- src: RocketChat.Server\n  version: master\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- src: RocketChat.Server\n  version: v2.2.2\n```\n\n----------------------------------------\n\nTITLE: Installing Rocket.Chat Ansible role\nDESCRIPTION: Command to download and install the Rocket.Chat Ansible role using ansible-galaxy.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nansible-galaxy install -p roles/ -r roles/requirements.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible inventory for Rocket.Chat servers\nDESCRIPTION: Example inventory file content for defining Rocket.Chat servers, including optional password-based authentication.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n[chat_servers]\nchat.my.domain\ntalk.my.domain\n```\n\nLANGUAGE: yaml\nCODE:\n```\n[chat_servers]\nchat.my.domain ansible_ssh_pass=SuP3rseCre7pA$sw0rd\ntalk.my.domain\n```\n\n----------------------------------------\n\nTITLE: Resetting CDN JS/CSS Prefix in MongoDB for Rocket.Chat\nDESCRIPTION: MongoDB command to reset the CDN_JSCSS_PREFIX setting to an empty value in the Rocket.Chat database. This can be used to remove a custom CDN prefix for JavaScript and CSS assets when troubleshooting CDN issues.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/cdn.md#2025-04-06_snippet_1\n\nLANGUAGE: mongodb\nCODE:\n```\ndb.rocketchat_settings.update({_id:\"CDN_JSCSS_PREFIX\"},{$set:{\"value\":\"\"}})\n```\n\n----------------------------------------\n\nTITLE: Installing PM2 Process Manager\nDESCRIPTION: Commands to install and configure PM2 process manager for daemonizing Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/freebsd/README.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo npm install pm2 -g\n$ sudo pm2 startup freebsd\n```\n\n----------------------------------------\n\nTITLE: Creating Ansible directory structure\nDESCRIPTION: Commands to create a directory for Ansible configuration and navigate to it.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ansible\ncd ansible\nansible $\n```\n\n----------------------------------------\n\nTITLE: Reverting Rocket.Chat Snap to Previous Version\nDESCRIPTION: This command reverts the Rocket.Chat Snap package to the previously installed version. It's useful if issues are encountered after an update.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap revert rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Viewing Minio Server Startup Information with AccessKey and SecretKey\nDESCRIPTION: This terminal output shows a Minio server startup message that contains important configuration details including endpoints, AccessKey, SecretKey, region, and various client access methods. These credentials are needed to configure Rocket.Chat to use Minio for file storage.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/file-upload/minio.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n2017-01-24T19:53:21.141689279Z\n2017-01-24T19:53:21.141730078Z Endpoint:  http://172.17.0.2:9000  http://127.0.0.1:9000\n2017-01-24T19:53:21.141735582Z AccessKey: 5fD3434325fDaGE77BNJlSoV1xGp\n2017-01-24T19:53:21.141738933Z SecretKey: Quie2teech4oofoo9Dahsoo7aithauja\n2017-01-24T19:53:21.141742292Z Region:    us-east-1\n2017-01-24T19:53:21.141745405Z SQS ARNs:  <none>\n2017-01-24T19:53:21.141749472Z\n2017-01-24T19:53:21.141752499Z Browser Access:\n2017-01-24T19:53:21.141755711Z    http://172.17.0.2:9000  http://127.0.0.1:9000\n2017-01-24T19:53:21.141758830Z\n2017-01-24T19:53:21.141762000Z Command-line Access: https://docs.minio.io/docs/minio-client-quickstart-guide\n2017-01-24T19:53:21.141765638Z    $ mc config host add myminio http://172.17.0.2:9000 1H2MI5BCU45990DZ3WRL flJlSoV1xGp+u2fhfDaGE77BNE6OdyvAsdI15kPq\n2017-01-24T19:53:21.141768751Z\n2017-01-24T19:53:21.141771631Z Object API (Amazon S3 compatible):\n2017-01-24T19:53:21.141774638Z    Go:         https://docs.minio.io/docs/golang-client-quickstart-guide\n2017-01-24T19:53:21.142003548Z    Java:       https://docs.minio.io/docs/java-client-quickstart-guide\n2017-01-24T19:53:21.142019474Z    Python:     https://docs.minio.io/docs/python-client-quickstart-guide\n2017-01-24T19:53:21.142024004Z    JavaScript: https://docs.minio.io/docs/javascript-client-quickstart-guide\n2017-01-24T19:53:21.142027614Z\n2017-01-24T19:53:21.142030994Z Drive Capacity: 262 GiB Free, 303 GiB Total\n```\n\n----------------------------------------\n\nTITLE: Updating FreePBX Server in Bash\nDESCRIPTION: This command updates the FreePBX server using the yum package manager. It's typically run after initial installation to ensure all packages are up to date.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-voice-channel/voice-channel-admin-guide/configure-without-previously-having-a-pbx-server/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum update -y\n```\n\n----------------------------------------\n\nTITLE: Restarting MongoDB Service\nDESCRIPTION: This command restarts the MongoDB service to apply the new configuration settings.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/configure-a-replica-set-for-mongodb.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart mongod\n```\n\n----------------------------------------\n\nTITLE: Restarting Rocket.Chat Snap Service\nDESCRIPTION: Command to restart the Rocket.Chat server service after making environmental variable changes\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart snap.rocketchat-server.rocketchat-server.service\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Brand Colors in Hex Format\nDESCRIPTION: The hex color codes for Rocket.Chat's primary brand colors - red and blue. These colors should primarily be used on white or light backgrounds and are core to the brand identity.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/brand-and-visual-guidelines/colors.md#2025-04-06_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nRed: #F5455C\nBlue: #1D74F5\n```\n\n----------------------------------------\n\nTITLE: Requesting AWS Spot Instance\nDESCRIPTION: AWS CLI command to request a spot instance for hosting Rocket.Chat\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 request-spot-instances --cli-input-json file://spot_instance.json\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB Docker Container Shell\nDESCRIPTION: This command opens a shell inside the MongoDB Docker container for configuration purposes.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-google-compute-engine.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker exec -it mongo mongosh\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Configuration in Rocket.Chat Snap\nDESCRIPTION: Creates an environment file to override SMTP host settings in Rocket.Chat snap installation. File must be placed in /var/snap/rocketchat-server/common/ directory with .env extension.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncat /var/snap/rocketchat-server/common/overwrite-smtp.env\nOVERWRITE_SETTING_SMTP_Host=my.smtp.server.com\n```\n\n----------------------------------------\n\nTITLE: Restoring Rocket.Chat Data from Backup\nDESCRIPTION: Command to restore Rocket.Chat data from a previously created backup file, which will replace the current database.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap run rocketchat-server.restoredb /var/snap/rocketchat-server/common/rocketchat_backup.tgz\n```\n\n----------------------------------------\n\nTITLE: Configuring Microservices Replicas in Rocket.Chat Helm Chart\nDESCRIPTION: Configuration parameters for setting the number of replicas for various Rocket.Chat microservices in a Kubernetes deployment. Default values are set to 1 for each microservice component.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmicroservices.ddpStreamer.replicas: 1\nmicroservices.streamHub.replicas: 1\nmicroservices.accounts.replicas: 1\nmicroservices.authorization.replicas: 1\nmicroservices.nats.replicas: 1\n```\n\n----------------------------------------\n\nTITLE: Installing Rocket.Chat with Helm\nDESCRIPTION: Command to install Rocket.Chat using helm with custom values configuration file.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/microservices.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install rocketchat -f values.yaml rocketchat/rocketchat\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Version of Rocket.Chat Snap\nDESCRIPTION: This command removes a specific version of the Rocket.Chat Snap package. Replace 'N' with the desired version number to be removed.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsnap remove --revision=N rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Copying Backup File to Snap Common Folder\nDESCRIPTION: Command to copy a Rocket.Chat backup file to the snap's common folder in preparation for a restore operation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp rocketchat_backup.tgz /var/snap/rocketchat-server/common/\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy in Caddyfile\nDESCRIPTION: Example Caddyfile configuration for setting up an HTTP proxy to the Rocket.Chat server. This is used for testing DNS resolution before enabling TLS.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nhttp://example-domain.com\n\nreverse_proxy localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Reloading Firewall Configuration (Bash)\nDESCRIPTION: This command reloads the firewalld configuration to apply the newly added firewall rule without requiring a system restart.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/firewall-configuration.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload firewalld\n```\n\n----------------------------------------\n\nTITLE: Creating a Poll with Slash Command in Rocket.Chat\nDESCRIPTION: Example of the slash command used to create a new poll in a Rocket.Chat room. This command triggers the poll creation form.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/poll-plus/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/poll\n```\n\n----------------------------------------\n\nTITLE: Checking MongoDB Service Status\nDESCRIPTION: Command to verify that the Rocket.Chat MongoDB service is still running after stopping the main server, which is required for backup operations.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo service snap.rocketchat-server.rocketchat-mongo status | grep Active\n```\n\n----------------------------------------\n\nTITLE: Basic Rocket.Chat Search Commands\nDESCRIPTION: List of search commands available in Rocket.Chat for filtering messages in discussions. These commands help users find specific messages based on criteria like author, status, content type, and date.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/user-guides/rooms/discussions/search-messages-in-discussion.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfrom:me - To search for messages only created by the current user.\nfrom:user.name - To search for messages created by a specific user.\nhas:star - Returns messages that the current user stars.\nis:pinned or has:pin - Returns messages that pin in the current discussion.\nhas:url or has:link - Returns messages that contain a link.\nhas:location or has:map - Returns messages that have a location attached.\nbefore:dd/mm/yyyy, after:dd/mm/yyyy and on:dd/mm/yyyy - Return message created before, after, or on the provided date.\norder:desc, order:descend, or order:descending - Sorts messages by descending timestamp.\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Rocket.Chat Snap Package\nDESCRIPTION: This command manually updates the Rocket.Chat Snap package to the latest version. While updates typically happen automatically within 6 hours of release, this allows for immediate updating.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap refresh rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Installing Instagram Direct App via Rocket.Chat Marketplace\nDESCRIPTION: Instructions for installing the Instagram Direct app from the Rocket.Chat marketplace. This snippet outlines the steps to access the app and initiate the installation process.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/instagram-direct/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Go to **Administration > Apps > Marketplace.**\n* Search for the **Instagram Direct** app.\n* Click **Install** and accept the needed permissions. You receive a message from `instagram.bot` in the `#omnichannel-instagram-setup` channel with setup instructions.\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Backup on Snap Refresh\nDESCRIPTION: Command to enable automatic backup of Rocket.Chat data every time the snap package is refreshed, ensuring data safety during updates.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap set rocketchat-server backup-on-refresh=enable\n```\n\n----------------------------------------\n\nTITLE: Selecting the Rocket.Chat Database in MongoDB\nDESCRIPTION: SQL commands to select and use the Rocket.Chat database within the MongoDB shell. Includes a command to show all available databases if the exact name is unknown.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/restoring-an-admin-user.md#2025-04-06_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse rocketchat\n```\n\nLANGUAGE: sql\nCODE:\n```\nshow dbs\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB Restore Command Structure\nDESCRIPTION: Basic command structure for restoring MongoDB data using mongorestore. Used to load data from binary database dumps into a MongoDB instance.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-backup-and-restore.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmongorestore <options> <connection-string> <directory or file to restore>\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Repository Data in Rocket.Chat\nDESCRIPTION: This command provides an interactive interface to fetch various data from a specific GitHub repository, including overview, issues, contributors, and pull requests.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n/github <username>/<repository name>\n```\n\n----------------------------------------\n\nTITLE: Switching Rocket.Chat Server to a Different Major Version Channel\nDESCRIPTION: Command to change the Rocket.Chat server version track using snap channels, allowing transition between major releases while receiving updates only for that specific track.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap switch rocketchat-server --channel=4.x/stable\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project in OpenShift\nDESCRIPTION: Command to create a new project called 'rocket-chat' in OpenShift to host the Rocket.Chat application.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/openshift.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ oc new-project rocket-chat\n```\n\n----------------------------------------\n\nTITLE: Local MongoDB Restore Command\nDESCRIPTION: Command to restore MongoDB data from a dump directory to a local MongoDB instance running on default port 27017.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-backup-and-restore.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmongorestore  dump/\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub App in Rocket.Chat\nDESCRIPTION: This snippet shows the slash command for logging in to GitHub within Rocket.Chat. It's a crucial first step for using any GitHub-related functionality.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/github login\n```\n\n----------------------------------------\n\nTITLE: Implementing Incoming Webhook Script in Rocket.Chat\nDESCRIPTION: Script template for processing incoming webhook requests in Rocket.Chat. Includes global helpers and methods for handling requests, with support for customizing message content and error handling.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/README.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported Script */\n/* globals console, _, s */\n\n/** Global Helpers\n *\n * console - A normal console instance\n * _       - An underscore instance\n * s       - An underscore string instance\n */\n\nclass Script {\n  /**\n   * @params {object} request\n   */\n  process_incoming_request({ request }) {\n    // request.url.hash\n    // request.url.search\n    // request.url.query\n    // request.url.pathname\n    // request.url.path\n    // request.url_raw\n    // request.url_params\n    // request.headers\n    // request.user._id\n    // request.user.name\n    // request.user.username\n    // request.content_raw\n    // request.content\n\n    // console is a global helper to improve debug\n    console.log(request.content);\n\n    return {\n      content:{\n        text: request.content.text\n        // \"attachments\": [{\n        //   \"color\": \"#FF0000\",\n        //   \"author_name\": \"Rocket.Cat\",\n        //   \"author_link\": \"https://open.rocket.chat/direct/rocket.cat\",\n        //   \"author_icon\": \"https://open.rocket.chat/avatar/rocket.cat.jpg\",\n        //   \"title\": \"Rocket.Chat\",\n        //   \"title_link\": \"https://rocket.chat\",\n        //   \"text\": \"Rocket.Chat, the best open source chat\",\n        //   \"fields\": [{\n        //     \"title\": \"Priority\",\n        //     \"value\": \"High\",\n        //     \"short\": false\n        //   }],\n        //   \"image_url\": \"https://rocket.chat/images/mockup.png\",\n        //   \"thumb_url\": \"https://rocket.chat/images/mockup.png\"\n        // }]\n       }\n    };\n\n    // return {\n    //   error: {\n    //     success: false,\n    //     message: 'Error example'\n    //   }\n    // };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenLDAP Filter with Extensible Match Search in Rocket.Chat\nDESCRIPTION: An example filter for OpenLDAP using extensible match search syntax to restrict access to users in the ROCKET_CHAT organizational unit. This filter is used in the Filter field of the LDAP User Search configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/ldap/ldap-user-search.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nou:dn:=ROCKET_CHAT\n```\n\n----------------------------------------\n\nTITLE: Linking Trello Board Command in Rocket.Chat\nDESCRIPTION: Command to initiate the Trello board linking process to a Rocket.Chat channel\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/trello/using-the-trello-app.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/trello link\n```\n\n----------------------------------------\n\nTITLE: Setting DDP Streamer Replicas\nDESCRIPTION: YAML configuration to set the number of replicas for the DDP streamer service.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/microservices.md#2025-04-06_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nddpStreamer:\n  replicas: 2\n```\n\n----------------------------------------\n\nTITLE: Executing Ansible playbook for Rocket.Chat deployment\nDESCRIPTION: Command to run the Ansible playbook for deploying Rocket.Chat to the specified inventory.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nansible-playbook -i inventory rocket_chat.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth Redirect URIs\nDESCRIPTION: Required redirect URIs that must be configured in Google Cloud Console for OAuth authentication. These URIs handle the OAuth callback flow, with a special ?close parameter to prevent redirect_uri_mismatch errors.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/oauth/google-oauth-setup.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://YOU DOMAIN/_oauth/google?close\nhttps://YOU DOMAIN/_oauth/google\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstart for Rocket.Chat Hubot\nDESCRIPTION: This snippet shows how to create an Upstart job for managing a Hubot instance for Rocket.Chat. It includes waiting for Rocket.Chat to start, setting environment variables, and launching Hubot.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-process-managers-and-init-systems.md#2025-04-06_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ndescription \"hubot launcher\"\n\n# Wait for the rocketchat upstart job before starting hubot\nstart on started rocketchat\nstop on runlevel [!2345]\n\n# Automatically Respawn with finite limits\nrespawn\nrespawn limit 99 5\n\nscript\n    # Wait until Rocket.Chat is up and listening to port tcp 3000\n    until nc -z localhost 3000; do\n        sleep 1\n    done\n\n    # Export necessary variables\n    export ROCKETCHAT_ROOM=GENERAL\n    export ROCKETCHAT_USER=bot_username\n    export ROCKETCHAT_PASSWORD=bot_password\n\n    # Change to the hubot directory\n    cd /home/administrator/myhubot\n\n    # Launch Hubot\n    exec bin/hubot -a rocketchat\nend script\n```\n\n----------------------------------------\n\nTITLE: Switching Rocket.Chat Snap to Specific Version Track\nDESCRIPTION: Command to switch the Rocket.Chat snap installation to a specific version track, allowing updates within that major version.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap switch rocketchat-server --channel=x.x/stable\n```\n\n----------------------------------------\n\nTITLE: Creating Ansible roles directory\nDESCRIPTION: Command to create a directory for storing Ansible roles.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nansible $ mkdir roles\n```\n\n----------------------------------------\n\nTITLE: Rendering Nixstats Graphs in Rocket.Chat via Outgoing Webhook\nDESCRIPTION: This script enables fetching and displaying Nixstats server information and performance graphs in Rocket.Chat. It responds to commands like 'ns servers list' to show server information and 'ns graphs [serverid]' to display performance charts for a specific server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/nixstats-notification.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported Script */\n/* globals Store */\n\nclass Script {\n  prepare_outgoing_request({ request }) {\n    let match;\n\n    match = request.data.text.match(/^ns servers\\s(ls|list)\\s*(.*)?$/);\n    if (match) {\n      let u = request.url + 'servers?perpage=99&token='+request.data.token;\n      return {\n        url: u,\n        headers: request.headers,\n        method: 'GET'\n      };\n    }\n\n    match = request.data.text.match(/^ns graphs\\s(.*)?$/);\n    if (match) {\n      var matched = false;\n      var options;\n      var serverrequest = HTTP('GET', request.url + 'servers?perpage=99&token='+request.data.token, options);\n      var serverlist = []\n      JSON.parse(serverrequest.result.content).servers.forEach(function(pr) {\n        serverlist.push({'name': pr.name, 'id': pr.id});\n      });\n\n      serverlist.forEach(function(serv) {\n        if(serv.id == match[1])\n        {\n          matched = serv.id;\n        }\n        if(serv.name == match[1])\n        {\n          matched = serv.id;\n        }\n      });\n\n      if(!matched){\n        return {\n          message: {\n            text: 'Server not found.'\n          }\n        };\n      }\n      else\n      {\n        let u = request.url + 'server/'+matched+'?charts=yes&token='+request.data.token;\n        return {\n          url: u,\n          headers: request.headers,\n          method: 'GET'\n        };\n      }\n    }\n\n    match = request.data.text.match(/^help$/);\n    if (match) {\n      return {\n        message: {\n          text: [\n            '**Nixstats commands**',\n            '```',\n              '  ns servers ls|list',\n              '  ns graphs serverid|servername',\n            '```'\n          ].join('\\n')\n        }\n      };\n    }\n  }\n\n  process_outgoing_response({ request, response }) {\n    var text = [];\n    var attach = [];\n    if(response.content.charts)\n    {\n      response.content.charts.forEach(function(pr) {\n        attach.push({\n           \"color\": \"#000000\",\n           \"text\": pr.title+\" on \"+response.content.name,\n           \"image_url\": pr.url,\n         });\n      });\n        text.push('Performance of '+response.content.name);\n    }\n    else\n    {\n      text.push('```');\n      response.content.servers.forEach(function(pr) {\n        text.push(''+pr.id+\"\\t \"+pr.last_data.load.replace(\",\",\",\\t\")+\"\\t\"+pr.name+'');\n      });\n      text.push('```');\n    }\n    return {\n      content: {\n        text: text.join('\\n'),\n        attachments: attach,\n        parseUrls: false\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Rocket.Chat Configuration Value\nDESCRIPTION: Sets a setting value for the first time during server startup. Only works if the setting hasn't been previously configured.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/deployment-environment-variables/manage-settings-using-environmental-variables.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFileUpload_Storage_Type=hiGoogleCloudStorage\n```\n\n----------------------------------------\n\nTITLE: Updating Rocket.Chat Snap to Latest Version\nDESCRIPTION: Command to force an update of the Rocket.Chat snap installation to the latest version available in the current track.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap refresh rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB and Initializing Replica Set\nDESCRIPTION: Commands to start MongoDB service and initialize the replica set for Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now mongod\n```\n\nLANGUAGE: bash\nCODE:\n```\nmongo --eval \"printjson(rs.initiate())\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Rocket.Chat Incoming Webhook Script for AppVeyor Integration\nDESCRIPTION: JavaScript class that processes incoming webhook requests from AppVeyor. It formats build information including commit details, author information, and repository data into a formatted Rocket.Chat message with attachments.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/appveyor.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported Script */\n/* globals console, _, s */\n\n/** Global Helpers\n *\n * console - A standard console instance\n * _       - An underscore instance\n * s       - An underscore string instance\n */\n\nclass Script {\n    /**\n     * @params {object} request\n     */\n    process_incoming_request({ request }) {\n        let reqContent = request.content;\n        let message = \"\";\n        const name = reqContent.commitAuthor;\n        const authorEmail = reqContent.commitAuthorEmail;\n        const commitDate = reqContent.commitDate;\n        const commitMessage = reqContent.commitMessage;\n        const repo = reqContent.repositoryName;\n        const commitId = reqContent.commitId;\n        const projectName = reqContent.projectName;\n        const buildNumber = reqContent.buildNumber;\n        const buildId = reqContent.buildId;\n        message += \"Commit by author:\" + name + \" whose email is \" + authorEmail;\n        message += \" on the repo \" + \"[\" + projectName + \"](https://github.com/\" + repo + \")\";\n        message += \" on \" + commitDate + \" and their commit message was,'\" + commitMessage + \"'\\n\"\n        message += \"Build details, build ID:\" + buildId + \", build number:\" + buildNumber + \"\\n\"\n        message += \"You can check the [Commit](https://github.com/\" + repo + \"/commit/\" + commitId + \")\"\n\n        const content = {\n            \"emoji\": \":smiley:\",\n            \"text\": message,\n            \"attachments\": [\n                {\n                    \"title\": projectName + \" build\",\n                    \"title_link\": \"https://rocket.chat\",\n                    \"text\": \"Appveyor is a CI tool,\"\n                    \"image_url\": \"https://writing-demo.dev.rocket.chat/images/integration-attachment-example.png\",\n                    \"color\": \"#764FA5\"\n                }\n            ]\n        };\n\n        return {\n            content:content\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mobile Client Compatibility Table in Markdown\nDESCRIPTION: Markdown table showing the compatibility between mobile app versions and server releases. Specifically shows that version 4.0.0+ supports server version 0.70 and above.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/client-compatibility-matrix.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| App Version | Supported releases |\n| :---------: | :----------------: |\n|    4.0.0+   |        0.70+       |\n```\n\n----------------------------------------\n\nTITLE: Pinning MongoDB Version in Rocket.Chat Helm Chart\nDESCRIPTION: This YAML configuration demonstrates how to pin a specific MongoDB version when deploying Rocket.Chat using the Helm chart. It uses the 'mongodb.image.tag' parameter to specify the desired MongoDB version.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nmongodb:\n  image:\n    tag: # find from https://hub.docker.com/r/bitnami/mongodb/tags\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB for Rocket.Chat\nDESCRIPTION: YAML configuration for MongoDB to enable WiredTiger storage engine and replication for Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n  engine: wiredTiger\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n\nprocessManagement:\n  fork: true\n  timeZoneInfo: /usr/share/zoneinfo\n\nreplication:\n  replSetName: rs01\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to AWS EC2 Instance\nDESCRIPTION: Command to establish an SSH connection to the EC2 instance using a key file. This is the first step to begin configuring your server after creating the EC2 instance.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh -i <path_to_key_file.pem> ubuntu@<public_ip_address>\n```\n\n----------------------------------------\n\nTITLE: Creating Rocket.Chat Systemd Service File\nDESCRIPTION: Commands to create and configure the Rocket.Chat systemd service file for automatic startup.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNODE_PATH=$(which node)\n\ncat << EOF |sudo tee -a /lib/systemd/system/rocketchat.service\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\n[Service]\nExecStart=$NODE_PATH /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Generating AES-CBC Session Key in JavaScript\nDESCRIPTION: Generates a new 128-bit AES-CBC session key for message encryption.\nSOURCE: https://github.com/RocketChat/docs/blob/main/customer-center/security-center/end-to-end-encryption-specifications.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRocketChat.E2E.crypto.generateKey({name: 'AES-CBC', length: 128}, true, ['encrypt', 'decrypt'])\n```\n\n----------------------------------------\n\nTITLE: Remove Installation Directory Command\nDESCRIPTION: Command to remove the existing Rocket.Chat installation directory from the /opt folder\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/updating-rocket.chat.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables File\nDESCRIPTION: Command to create a .env file for storing environment variables used by the Docker Compose configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Creating Rocket.Chat User and Setting Permissions\nDESCRIPTION: Commands to create a Rocket.Chat user and set the correct permissions on the installation directory.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd -M rocketchat && sudo usermod -L rocketchat\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Team Management Permission Codes\nDESCRIPTION: Permission codes for viewing team-related information and channels in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/README.md#2025-04-06_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nview-all-team-channels\\nview-all-teams\n```\n\n----------------------------------------\n\nTITLE: Moving Rocket.Chat to Final Location\nDESCRIPTION: Command to move the Rocket.Chat bundle to its final installation location.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv /tmp/bundle /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Defining Rocket.Chat Helm Chart Parameters in Markdown\nDESCRIPTION: This snippet presents a markdown table that lists and describes the configurable parameters for the Rocket.Chat Helm chart. It includes details on image settings, hostname configuration, SMTP setup, and advanced Kubernetes deployment options.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                              | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                    | Default                                       |\n| -------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------- |\n| `image.repository`                     | Image repository                                                                                                                                                                                                                                                                                                                                                                                                                                               | `registry.rocket.chat/rocketchat/rocket.chat` |\n| `image.tag`                            | Image tag                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `3.18.3`                                      |\n| `image.pullPolicy`                     | Image pull policy                                                                                                                                                                                                                                                                                                                                                                                                                                              | `IfNotPresent`                                |\n| `host`                                 | Hostname for Rocket.Chat. Also used for ingress (if enabled)                                                                                                                                                                                                                                                                                                                                                                                                   | `\"\"`                                          |\n| `replicaCount`                         | Number of replicas to run                                                                                                                                                                                                                                                                                                                                                                                                                                      | `1`                                           |\n| `smtp.enabled`                         | Enable SMTP for sending mails                                                                                                                                                                                                                                                                                                                                                                                                                                  | `false`                                       |\n| `smtp.existingSecret`                  | Use existing secret for SMTP account                                                                                                                                                                                                                                                                                                                                                                                                                           | `\"\"`                                          |\n| `smtp.username`                        | Username of the SMTP account                                                                                                                                                                                                                                                                                                                                                                                                                                   | `\"\"`                                          |\n| `smtp.password`                        | Password of the SMTP account                                                                                                                                                                                                                                                                                                                                                                                                                                   | `\"\"`                                          |\n| `smtp.host`                            | Hostname of the SMTP server                                                                                                                                                                                                                                                                                                                                                                                                                                    | `\"\"`                                          |\n| `smtp.port`                            | Port of the SMTP server                                                                                                                                                                                                                                                                                                                                                                                                                                        | `587`                                         |\n| `extraEnv`                             | Extra environment variables for Rocket.Chat. Used with `tpl` function, so this needs to be a string                                                                                                                                                                                                                                                                                                                                                            | `\"\"`                                          |\n| `extraVolumes`                         | Extra volumes allowing inclusion of certificates or any sort of file that might be required (see bellow)                                                                                                                                                                                                                                                                                                                                                       | `[]`                                          |\n| `extraVolumeMounts`                    | Where the aforementioned extra volumes should be mounted inside the container                                                                                                                                                                                                                                                                                                                                                                                  | `[]`                                          |\n| `podAntiAffinity`                      | Pod anti-affinity can prevent the scheduler from placing RocketChat replicas on the same node. The default value \"soft\" means that the scheduler should _prefer_ to not schedule two replica pods onto the same node but no guarantee is provided. The value \"hard\" means that the scheduler is _required_ to not schedule two replica pods onto the same node. The value \"\" will disable pod anti-affinity so that no anti-affinity rules will be configured. | `\"\"`                                          |\n| `podAntiAffinityTopologyKey`           | If anti-affinity is enabled sets the topologyKey to use for anti-affinity. This can be changed to, for example `failure-domain.beta.kubernetes.io/zone`                                                                                                                                                                                                                                                                                                        | `kubernetes.io/hostname`                      |\n```\n\n----------------------------------------\n\nTITLE: Configuring Plesk Onyx Nginx for Rocket.Chat Docker\nDESCRIPTION: Nginx configuration for Plesk Onyx to support Rocket.Chat running in Docker. Includes proxy settings and WebSocket upgrade handling.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/configuring-ssl-reverse-proxy.md#2025-04-06_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\n#manual extension docker with socket upgrade begin\nlocation ~ ^/.* {\n    proxy_pass http://0.0.0.0:3000;\n    proxy_set_header Host             $host;\n    proxy_set_header X-Real-IP        $remote_addr;\n    proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Forwarded-Proto http;\n    proxy_set_header X-Nginx-Proxy true;\n    proxy_http_version 1.1;\n\n    proxy_redirect off;\n}\n\n#extension docker end\n```\n\n----------------------------------------\n\nTITLE: Extracting Rocket.Chat Archive\nDESCRIPTION: Command to extract the downloaded Rocket.Chat archive using tar.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar xzf /tmp/rocket.chat.tgz -C /tmp\n```\n\n----------------------------------------\n\nTITLE: Using resumeToken for Automatic Authentication in Rocket.Chat\nDESCRIPTION: This snippet demonstrates how to use a resumeToken (authToken) from the REST API login to automatically authenticate a user in Rocket.Chat via a deeplink URL.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/iframe-based-single-sign-on.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# get the resumeToken from your REST API login - it's the authToken field\nhttps://yourdomain.rocket.chat/home?resumeToken=abcd123456789\n```\n\n----------------------------------------\n\nTITLE: Creating Ansible inventory file\nDESCRIPTION: Command to create an empty inventory file for listing target servers.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/ansible.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch inventory\n```\n\n----------------------------------------\n\nTITLE: Omnichannel Permission Codes\nDESCRIPTION: Permission codes related to Omnichannel/Live Chat functionality, including analytics, appearance, business hours, and department management.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/README.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nview-l-room\\nview-livechat-analytics\\nview-livechat-appearance\\nview-livechat-business-hours\\nview-livechat-current-chats\\nview-livechat-customfields\\nview-livechat-departments\\nview-livechat-installation\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe Settings in Rocket.Chat Helm Chart\nDESCRIPTION: Parameters for configuring the readiness probe for Rocket.Chat pods in Kubernetes. Controls when pods are considered ready to receive traffic with timing and threshold settings.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessProbe.enabled: true\nreadinessProbe.initialDelaySeconds: 10\nreadinessProbe.periodSeconds: 15\nreadinessProbe.timeoutSeconds: 5\nreadinessProbe.failureThreshold: 3\nreadinessProbe.successThreshold: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Color Codes for GitLab Event Statuses in JavaScript\nDESCRIPTION: This function assigns color codes to different GitLab event statuses. It's used to visually distinguish between various states in Rocket.Chat notifications.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/gitlab.md#2025-04-06_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateColor(status) {\n    switch (status) {\n        case 'success':\n            return '#2faa60';\n        case 'pending':\n            return '#e75e40';\n        case 'failed':\n            return '#d22852';\n        case 'canceled':\n            return '#5c5c5c';\n        case 'created':\n            return '#ffc107';\n        case 'running':\n            return '#607d8b';\n        default:\n            return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Rocket.Chat Latest Release\nDESCRIPTION: Downloads the latest Rocket.Chat release package using curl.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://releases.rocket.chat/latest/download -o /tmp/rocket.chat.tgz\n```\n\n----------------------------------------\n\nTITLE: Defining Bot Role in Rocket.Chat\nDESCRIPTION: This code defines the 'bot' role in Rocket.Chat. Bots are automated users that can be programmed to perform specific tasks like sending messages, answering questions, and triggering notifications.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<code>bot</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Settings in Rocket.Chat Helm Chart\nDESCRIPTION: Parameters for configuring the Kubernetes service that exposes Rocket.Chat. Includes annotations, labels, service type, ports, and node port configuration options.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservice.annotations: {}\nservice.labels: {}\nservice.type: ClusterIP\nservice.port: 80\nservice.nodePort: \"\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Outgoing Webhook Script for Pull Request Commands\nDESCRIPTION: Script for handling outgoing webhook commands to GitHub API. It supports commands like 'pr ls', 'pr list', and 'help' to fetch and display pull requests from a GitHub repository with different filter states.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/github.md#2025-04-06_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported Script */\n/* globals Store */\n\nclass Script {\n  prepare_outgoing_request({ request }) {\n    let match;\n\n    console.log('lastCmd', Store.get('lastCmd'));\n\n    match = request.data.text.match(/^pr last$/);\n    if (match && Store.get('lastCmd')) {\n      request.data.text = Store.get('lastCmd');\n    }\n\n    match = request.data.text.match(/^pr\\s(ls|list)\\s*(open|closed|all)?$/);\n    if (match) {\n      Store.set('lastCmd', request.data.text);\n      let u = request.url + '/pulls';\n      if (match[2]) {\n        u += '?state='+match[2];\n      }\n      return {\n        url: u,\n        headers: request.headers,\n        method: 'GET'\n      };\n    }\n\n    match = request.data.text.match(/^help$/);\n    if (match) {\n      Store.set('lastCmd', request.data.text);\n      return {\n        message: {\n          text: [\n            '**GitHub commands**',\n            '```',\n              '  pr ls|list [open|closed|all]  List Pull Requests',\n            '```'\n          ].join('\\n')\n        }\n      };\n    }\n  }\n\n  process_outgoing_response({ request, response }) {\n    var text = [];\n    response.content.forEach(function(pr) {\n      text.push('> '+pr.state+' [#'+pr.number+']('+pr.html_url+') - '+pr.title);\n    });\n\n    return {\n      content: {\n        text: text.join('\\n'),\n        parseUrls: false\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphicsMagick Dependency on CentOS\nDESCRIPTION: Installs the required GraphicsMagick package using yum package manager.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y GraphicsMagick\n```\n\n----------------------------------------\n\nTITLE: Assigning App Role in Rocket.Chat\nDESCRIPTION: This code snippet shows the 'app' role in Rocket.Chat. It's used for automated users that are utilized by Rocket.Chat Apps from the marketplace.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<code>app</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB YAML Settings\nDESCRIPTION: YAML configuration file for MongoDB setup specifying system logging, storage paths and replication settings.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/windows-server.md#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsystemLog:\n    destination: file\n    path: [Data Path]\\logs\\mongod.log\nstorage:\n    dbPath: [Data Path]\\data\nreplication:\n    replSetName: rs1\n```\n\n----------------------------------------\n\nTITLE: Including rocketchat_auth URLs in Django Project\nDESCRIPTION: URL configuration to include rocketchat_auth URLs in the Django project's urls.py file.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/django-rocketchat-auth-1.2.md#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += [url(r'^rocketchat/', include('rocketchat_auth.urls'))]\n```\n\n----------------------------------------\n\nTITLE: Accessing Discussion Settings in Rocket.Chat\nDESCRIPTION: This snippet outlines the navigation path to access the Discussion settings in Rocket.Chat's administration panel. It also describes the 'Enable' option which allows users to create discussions when activated.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/discussion.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo access this setting, go to **Administration** > **Workspace** > **Settings** > **Discussion**.\n\n* **Enable**: When enabled, users will be able to create discussions.\n```\n\n----------------------------------------\n\nTITLE: Defining Auditor Role in Rocket.Chat\nDESCRIPTION: This code defines the 'auditor' role in Rocket.Chat. It allows a user to view and audit all messages within the workspace. Users with only the auditor role cannot send messages.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<code>auditor</code>\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies and User Setup on FreeBSD\nDESCRIPTION: Commands for installing required system packages, enabling MongoDB, and creating a dedicated Rocket.Chat user account on FreeBSD.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/freebsd/deploying-rocket.chat-server-binaries-on-a-freebsd-system.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# pkg install bash git GraphicsMagick mongodb python scons gmake\n# sysrc mongod_enable=YES\n# service mongod start\n# pw groupadd rocketchat\n# pw useradd rocketchat -g rocketchat -s /usr/local/bin/bash -m\n# su -l rocketchat\n```\n\n----------------------------------------\n\nTITLE: Configuring Rocket.Chat Authentication Settings in Django\nDESCRIPTION: Django settings.py configuration for Rocket.Chat authentication, including MongoDB connection, Rocket.Chat URL, authentication token, user ID, and CORS whitelist.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/django-rocketchat-auth-1.2.md#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMONGO_DB = 'localhost:27017'\n# or more verbose (e.g. for Heroku)\n# MONGO_DB = '<dbuser>:<dbpassword>@<dbhost>:<dbport>/<dbname>?authSource=<dbname>'\n\nROCKETCHAT_URL = 'http://localhost:3000'\n\nROCKETCHAT_AUTH_TOKEN = '<YOUR AUTH TOKEN FROM STEP 3>'\nROCKETCHAT_USER_ID = '<YOUR USER ID>'\n\nCORS_ORIGIN_WHITELIST = (\n    'localhost:8000',\n    'localhost:3000',\n)\n```\n\n----------------------------------------\n\nTITLE: OAuth Configuration Values Example\nDESCRIPTION: Example values for OAuth configuration including Client ID, Client Secret, and endpoint URLs for connecting Rocket.Chat with Zapier.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/third-party-login.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nClient ID: zapier\nClient secret: RTK6TlndaCIolhQhZ7_KHIGOKnlaOq_o-7J\nAuthorization URL: https://example.rocket.chat/oauth/authorize\nAccess token URL: https://example.dev.rocket.chat/oauth/token\n```\n\n----------------------------------------\n\nTITLE: Defining Livechat Monitor Role in Rocket.Chat\nDESCRIPTION: This code defines the 'livechat-monitor' role in Rocket.Chat's Omnichannel. Users with this role can view and monitor livechat interactions and analytics.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<code>livechat-monitor</code>\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Server Installation and Configuration\nDESCRIPTION: Commands for cloning Meteor, extracting Rocket.Chat files, installing dependencies, and setting up environment variables for server execution.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/freebsd/deploying-rocket.chat-server-binaries-on-a-freebsd-system.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --depth 1 -b release-1.2.1-universal https://github.com/4commerce-technologies-AG/meteor\n$ cd meteor\n$ ./meteor --version\n$ cd $HOME\n$ tar xf rocket.chat-freebsd-develop.tgz\n$ cd $HOME/bundle/programs/server\n$ $HOME/meteor/dev_bundle/bin/npm install\n$ cd $HOME/bundle\n$ export MONGO_URL=mongodb://localhost:27017/rocketchat\n$ export Accounts_UseDNSDomainCheck=false\n$ export ROOT_URL=http://your.host:3000\n$ export PORT=3000\n$ export ADMIN_PASS=supersecret\n$ export ADMIN_USER=admin\n$ $HOME/meteor/dev_bundle/bin/node $HOME/bundle/main.js\n```\n\n----------------------------------------\n\nTITLE: Office365 Email Configuration Settings\nDESCRIPTION: Step-by-step configuration settings for connecting Office365 email to Rocket.Chat workspace, including SMTP and IMAP server details with specific port numbers and SSL requirements.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/email-inboxes.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nServer: smtp.office365.com\nPort: 587\nUsername: <Your office365 email>\nPassword: <Your office365 password>\nConnect with SSL: OFF\n\nServer: outlook.office365.com\nPort: 993\nUsername: <Your office365 email>\nPassword: <Your office365 password>\nConnect with SSL: ON\n```\n\n----------------------------------------\n\nTITLE: Channel and Room Access Permission Codes\nDESCRIPTION: Permission codes for viewing different types of channels and rooms in Rocket.Chat, including public channels, direct messages, and broadcast rooms.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/README.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nview-c-room\\nview-d-room\\nview-broadcast-member-list\\nview-joined-room\n```\n\n----------------------------------------\n\nTITLE: Referencing Leader Role in Rocket.Chat Markdown\nDESCRIPTION: This snippet shows how to reference the 'leader' role in Markdown within a table cell. It's used to describe the purpose of the leader role in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<code>leader</code>\n```\n\n----------------------------------------\n\nTITLE: Setting ROOT_URL Environment Variable for Subfolder Installation\nDESCRIPTION: Command to run Rocket.Chat with the proper ROOT_URL environment variable set for a subfolder installation. This tells the Rocket.Chat server about its subfolder location, which is essential for proper routing and asset paths.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/running-in-a-sub-folder-with-apache.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nROOT_URL=https://your.domain.com/chat/ node main.js\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Direct Message Features\nDESCRIPTION: Complete markdown documentation detailing various direct message operations and features in Rocket.Chat, including creating discussions, managing threads, blocking users, notification settings, pruning messages, and message exports.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/user-guides/rooms/direct-messages/direct-message-actions.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Direct Message Actions\n\nFrom the menu bar of your DM screen, you can view a list of discussions, threads, files exchanged, and pinned messages. You can also search for messages using the [basic search commands](../discussions/search-messages-in-discussion.md#basic-search-commands).\n\n## Discussions in Direct Message&#x20;\n\nUse discussions in direct messages to group topic-related conversations.\n\n### Create a Discussion in a Direct Message\n\nTo create a **Discussion** in any direct message,\n\n* Click **the three-dot icon** when you hover over an existing message in the chat.\n* Click **Start a Discussion.**\n\n### View Discussions in Direct Messages\n\nTo view and interact with your discussions in a direct message,&#x20;\n\n* Click on the **discussion icon** at the top right menu of the opened direct message.\n* When opened, a list of all the discussions in that direct message room is seen.\n\n## Threads in Direct Message\n\nThreads in direct messages can be used to streamline the conversations.\n\n### Create Threads in Direct Message\n\nTo create a thread in any direct message,\n\n* Click the **three-dot icon** when you hover over an existing message in the chat.\n* Select **Reply in Threads.**\n\n### View Threads in Direct Message\n\nTo view and interact with your threads in a direct message,&#x20;\n\n* Click on the **Threads** icon at the top right menu of the opened direct message.\n* When opened, a list of all the threads in that direct message room is seen.\n\n## Block user in Direct Message\n\nYou can block any user from sending you direct messages.\n\nTo block a user from sending DMs**,**\n\n* From a DM, Click the **User Info** of the member you want to block.\n* Then,  click on **Block.**\n\n{% hint style=\"danger\" %}\nBlocked users will not be able to send you direct messages unless they are unblocked.\n{% endhint %}\n\nAfter blocking a user, the room will indicate blocked too.\n\n## Direct Messages Notifications\n\nYou can update the notification preference for a DM you belong to. By default, you are notified of every DM you get.\n\nTo update DM notification preferences,&#x20;\n\n* Click the **notification** icon at the menu bar of the DM.\n\nThe notification options include the following,\n\n* **Turn ON**: When set to true, enables all notification alerts for the DMs.\n* **Mute @all and @here mentions:** When enabled, the notifications will not be received for `@ll` and `@here` mentions.\n* **Audio**: Select whether the DM will play a sound whenever someone mentions you or send a new message. The sound can also be customized.\n* **Desktop**: Controls notification behavior when using any desktop app or browser. Select the type of messages you want to receive desktop alerts for.\n* **Mobile**: Controls push notification behavior when using any mobile app.  Select the type of messages you want to receive push notifications for.\n* **Email**: Set whether an email is sent whenever someone mentions you or posts a message.  Select the type of messages you want to receive email alerts for.\n\n## Prune Messages from Direct Message\n\nIf you are a server admin, or your admin has given you the **clean-channel-history** permission, the **prune messages** option allows you to delete messages from a DM swiftly.\n\n{% hint style=\"info\" %}\n_Pruned messages and files are deleted forever and cannot be recovered. You are advised to use this feature with extra caution._\n{% endhint %}\n\nTo prune selected messages, fill in these fields:\n\n* **Newer Than**: Deletes all messages posted **after** a particular date.\n* **Older than**: Deletes all messages posted **before** a particular date.\n* **Users**:  Allows you to specify which user's message to delete. Add a username, and the user's messages are deleted.\n* **Inclusive**: Deletes all messages that were sent  at the specified start and end times you have specified in the `Newer than` and `Older than` fields.\n* **Exclude pinned messages**: Do **not** delete pinned messages.\n* **Only remove the attached files, keep messages**: Delete files but not the messages.\n\n## Export Messages in a Direct Message\n\nYou can export an entire conversation from either 1:1 DMs or 1:M DMs. You can export messages via email or as a file.\n\nTo export messages,&#x20;\n\n* Click on the **three-dot** icon of the **DM**  menu bar and select **Export Messages.**\n* Select the **export method** and update the required fields. Then, click **Export**.\n\n### Exporting Messages via email\n\n* **Method**: A dropdown to select what method the export should be done. Select **Send via Email**.\n* **To Users**: Select the users to send the export email.\n* **To additional emails**: Add any additional email to send the export mail.\n* **Subject**: The subject of the email\n\n### Exporting Messages as File\n\n* **Method**: A dropdown to select what method the export should be done. Select **Export as File**.\n* **From**: The start date of the export,\n* **To**: The last date of the export.\n* **Output Format**: A dropdown to select between `html` and `JSON` file format.\n\n{% hint style=\"info\" %}\nWhen exporting via email, you need to select the messages to be exported. However, when exporting as a file, you only need to specify start and end export dates.\n{% endhint %}\n\n## Star Messages in Direct Message\n\nYou can star important messages always to be able to come back to them. Starred messages are identified by a small star ⭐ by the side.\n\nTo star a message,&#x20;\n\n* Click the **three-dot icon** when you hover over the message. Then, select **Star.**\n\nTo un-star a message,&#x20;\n\n* Click the **three-dot icon** when you hover over the message. Then, select Remove S**tar.**\n\nTo view all stared messages,&#x20;\n\n* Click on the **three-dot** icon of the **DM**  menu bar and select **Starred Messages.** A list of all stared messages are displayed.\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder Values in Rocket.Chat Email Templates\nDESCRIPTION: This snippet demonstrates how to use placeholder values in email templates. It shows the syntax for using the server name placeholder and explains how to use the internationalization engine.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/email/edit-your-email-content.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Site_Name]\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{ }\n```\n\n----------------------------------------\n\nTITLE: Managing GitHub Repository Subscriptions in Rocket.Chat\nDESCRIPTION: This command displays the current repository subscriptions and allows users to add or delete subscriptions from within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n/github subscribe\n```\n\n----------------------------------------\n\nTITLE: Checking WebSocket Status Code\nDESCRIPTION: Shows the expected status code for a properly configured WebSocket connection. This status code indicates that the connection has successfully switched from HTTP to WebSocket protocol.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/support-faqs.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n Status Code: 101 Switching Protocols\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Hint for OTR Benefits in Markdown\nDESCRIPTION: This snippet uses Markdown and a custom hint syntax to highlight the benefits of using OTR messages for exchanging confidential information.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/user-guides/messages/off-the-record-otr-messaging-user-guide.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"success\" %}\nOTR messages can help exchange confidential information between users without creating a record of this exchange on the server.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Connecting Removable Media Interface for Rocket.Chat Snap\nDESCRIPTION: This command connects the 'removable-media' interface for the Rocket.Chat Snap, allowing access to external storage or devices in the /media directory.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap connect rocketchat-server:removable-media\n```\n\n----------------------------------------\n\nTITLE: Getting GitHub Repository Overview in Rocket.Chat\nDESCRIPTION: This command fetches a detailed overview of a specific GitHub repository and displays it within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n/github <username>/<repository name> repo\n```\n\n----------------------------------------\n\nTITLE: Verifying WebSocket Response Headers\nDESCRIPTION: Displays the expected response headers for a correctly configured WebSocket connection. These headers confirm that the connection has been upgraded from HTTP to WebSocket protocol.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/support-faqs.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nResponse headers\n Connection: Upgrade\n Sec-WebSocket-Accept: nXd/PfaHuA1Kx/ggJWAAy+96Ee4=\n Upgrade: websocket\n```\n\n----------------------------------------\n\nTITLE: Verifying HTTP and HTTPS Status in Asterisk\nDESCRIPTION: This command is used to check the status of HTTP and HTTPS services in Asterisk. It's run after configuring the Asterisk Builtin mini-HTTP server to ensure both services are running.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-voice-channel/voice-channel-admin-guide/configure-without-previously-having-a-pbx-server/README.md#2025-04-06_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp show status\n```\n\n----------------------------------------\n\nTITLE: Authenticating Instagram Direct with Rocket.Chat\nDESCRIPTION: Procedure for authenticating the Instagram Direct integration with Rocket.Chat. This includes prerequisites and steps for connecting Instagram business accounts.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/instagram-direct/README.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* From the `instagram.bot message`, click on the Start Authentication button.\n* You are redirected to a page to log in and authorize Instagram Direct.\n* Select the Instagram business account you want to use with Rocket.Chat Omni Gateway.\n* If you have multiple pages associated with your Instagram account, it will prompt you to choose the preferred page to connect.\n* Determine what Rocket.Chat Omni Gateway can do with the pages you have selected.\n* After selecting your page, you will receive a success message with credentials for your  Instagram Business Account that has been authenticated that subscribed.\n```\n\n----------------------------------------\n\nTITLE: Reviewing GitHub Pull Requests in Rocket.Chat\nDESCRIPTION: This command allows users to review a specific pull request by its number, view changes, add comments, and merge the PR from within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n/github <username>/<repository name> pulls <pull number>\n```\n\n----------------------------------------\n\nTITLE: Recommended Rocket.Chat Upgrade Path\nDESCRIPTION: Shows a conservative upgrade path for Rocket.Chat versions to minimize risks during upgrades. This approach suggests incremental version jumps rather than large leaps.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/support-faqs.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-> 0.73.x -> 1.0.x -> 1.32 -> 2.0.x -> 2.1.x\n```\n\n----------------------------------------\n\nTITLE: Feature Support Matrix Table in Markdown\nDESCRIPTION: A markdown table showing feature availability across different Rocket.Chat subscription plans (Community, Starter, Pro, and Enterprise), detailing federation capabilities and their support status.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table><thead><tr><th>Feature</th><th data-type=\"checkbox\">Community</th><th data-type=\"checkbox\">Starter</th><th data-type=\"checkbox\">Pro</th><th data-type=\"checkbox\">Enterprise</th></tr></thead><tbody><tr><td>Create 1:1 DMs</td><td>true</td><td>true</td><td>true</td><td>true</td></tr><tr><td><a href=\"rocket.chat-federation/federation-user-guide/create-federated-rooms.md\">Create federated channels and multi-user DMs</a></td><td>false</td><td>true</td><td>true</td><td>true</td></tr></tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram Direct App Settings\nDESCRIPTION: Steps for configuring the Instagram Direct app settings within Rocket.Chat. This includes setting up agent display names, file upload options, and handover protocol actions.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/instagram-direct/README.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* On the Instagram Direct App I**nfo** screen, navigate to **Settings.**\n*   Update the required fields:\n\n    * **Agents Display Name:** Choose to display the agent's name or username.\n    * **File Upload Enabled:** Enable/disable file sharing and set a limit for maximum upload size.\n    * **Accepted Media Types:** Select the type of files that can be exchanged during a conversation.\n    * **Delete messages once it has been \"Unsend\" from Instagram:** Select what to do with Unsent messages.\n    * **Instagram Handover Protocol Action:** It defines the action which should be performed while sending an agent's message to a thread to get access to the thread.\n    * **Instagram Handover Protocol Metadata:** It defines the metadata to be passed along with thread control action requests. You can use this to pass some custom payload to other apps.\n* Click **Save Changes**.\n```\n\n----------------------------------------\n\nTITLE: Subscribing to GitHub Repository Events in Rocket.Chat\nDESCRIPTION: This command subscribes the user to all events of a specific GitHub repository, enabling them to receive notifications in the Rocket.Chat room.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n/github <username>/<repository name> subscribe\n```\n\n----------------------------------------\n\nTITLE: Expected Response Format for External Service Trigger in Rocket.Chat\nDESCRIPTION: This JSON structure shows the expected response format from an external service when using the 'Send a Message (External Service)' trigger action. It includes an array of message contents with their display order.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel/livechat-triggers.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"contents\": [\n        {\n            \"msg\": \"Welcome to our support center, Morgan! How can we assist you today?\",\n            \"order\": 0\n        },\n        {\n            \"msg\": \"Feel free to ask any questions you have. We're here to help!\",\n            \"order\": 1\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Keys for Salesforce Integration\nDESCRIPTION: Commands to generate private key and public certificate required for Salesforce connected app authentication. Creates a 1024-bit RSA private key and a X509 public certificate valid for 3650 days.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/salesforce-crm-integration/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out privatekey.pem 1024\\n\\nopenssl req -new -x509 -key privatekey.pem -out publickey.cer -days 3650\n```\n\n----------------------------------------\n\nTITLE: Viewing Certificate Details\nDESCRIPTION: Command to view the details of the generated CA certificate for reference.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-client-ssl-certificate-authentication-for-rocket.chat.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in ca.crt -noout -text\n```\n\n----------------------------------------\n\nTITLE: Markdown Example of Canned Response with Placeholders\nDESCRIPTION: An example canned response template showing how to use placeholders like {{contact.name}} and {{agent.name}} to personalize messages for customers in an Omnichannel conversation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel/canned-responses/canned-responses-omnichannel-managers-guide.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHi  `{{contact.name}}`,\n\nMy name is  `{{agent.name}}`  from the special service team. How can I help you today? Our products are back in stock and eagerly waiting to be part of your collection. You can claim your treasure on our website or at your nearest store.&#x20;\n\nGot any more questions?  I am here to guide you on this shopping journey.\n```\n\n----------------------------------------\n\nTITLE: Initiating Jitsi Call in Rocket.Chat using Slash Command\nDESCRIPTION: This snippet demonstrates the slash command used to start a Jitsi video conference within a Rocket.Chat room.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-conference-call/conference-call-admin-guide/jitsi-app.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`/jitsi`\n```\n\n----------------------------------------\n\nTITLE: Custom Issuer URL Format\nDESCRIPTION: Example format for the federation metadata URL used in the Custom Issuer field.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/saml/active-directory-federation-services.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<your-rocket-chat-workspace>/_saml/metadata/test-adfs\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Client SSL Authentication\nDESCRIPTION: Nginx configuration snippet to enable client SSL certificate authentication and proxy requests to Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-client-ssl-certificate-authentication-for-rocket.chat.md#2025-04-06_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nssl_client_certificate /etc/ssl/private/client-cert-ca.crt;\nssl_verify_client optional;\n\nlocation / {\n   if ($ssl_client_verify != SUCCESS) {\n     return 403;\n   }\n\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_set_header X-Nginx-Proxy true;\n    proxy_redirect off;\n  }\n```\n\n----------------------------------------\n\nTITLE: Mapping LDAP Groups to Rocket.Chat Channels in JSON\nDESCRIPTION: Example JSON configuration that maps LDAP groups to Rocket.Chat channels. In this example, users in the 'employee' LDAP group will be added to the 'general' channel in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/ldap/ldap-premium-settings.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"employee\": \"general\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Private Key for Jitsi Configuration in Bash\nDESCRIPTION: This command shows how to encode a private key file into BASE64 format for use in Jitsi app configuration within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-conference-call/conference-call-admin-guide/jitsi-app.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n`base64 -i \".pk file\"`\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB in Docker-based Rocket.Chat Installation\nDESCRIPTION: Commands to access the MongoDB database in a Docker-based Rocket.Chat installation by running the mongo shell within the mongo container.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/restoring-an-admin-user.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /opt/docker/Rocket.Chat\ndocker compose run mongo bash\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it -u root mongo-image /bin/bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nmongo\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS Attribute Map in JSON\nDESCRIPTION: This JSON snippet demonstrates how to map external CAS attributes to internal Rocket.Chat attributes. It shows examples for mapping email, name, and room assignments.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/cas.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"email\":\"%email%\", \"name\":\"%firstname%, %lastname%\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving BigBlueButton Server Credentials using bash\nDESCRIPTION: This command is run on the BigBlueButton server to obtain the URL and Secret required for setting up the BBB app in Rocket.Chat. It uses the bbb-conf tool to retrieve the necessary credentials.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-conference-call/conference-call-admin-guide/bigbluebutton-bbb-app.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo bbb-conf --secret\n```\n\n----------------------------------------\n\nTITLE: Installing Trello Commands in Rocket.Chat\nDESCRIPTION: Two essential slash commands for setting up and authorizing Trello integration in Rocket.Chat. The /trello setup command initiates the configuration process, while /trello authorize authenticates the user's Trello account.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/trello/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/trello setup\n```\n\nLANGUAGE: markdown\nCODE:\n```\n/trello authorize\n```\n\n----------------------------------------\n\nTITLE: Setting a Predefined Hashed Password for Admin\nDESCRIPTION: JavaScript database command to update an administrator's password to a predefined value ('12345') by setting its bcrypt hash directly in the database.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/restoring-an-admin-user.md#2025-04-06_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndb.getCollection('users').update({username:\"administrator\"}, { $set: {\"services\" : { \"password\" : {\"bcrypt\" : \"$2a$10$n9CM8OgInDlwpvjLKLPML.eizXIzLlRtgCh3GRLafOdR9ldAUh/KG\" } } } })\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Rocket.Chat Version Release Schedule\nDESCRIPTION: A comprehensive table showing Rocket.Chat release versions, their release dates, and end-of-life dates. The table covers versions from 1.0 through 6.9, including specific version numbers and GitHub release links.\nSOURCE: https://github.com/RocketChat/docs/blob/main/customer-center/support-center/premium-support-plans/support-prerequisites-and-version-durability.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Rocket.Chat Release | Released At | End of Life |\n| --- | ---: | ---: |\n| 6.9 ([6.9.1](https://github.com/RocketChat/Rocket.Chat/releases/tag/6.9.1)) | Jun 2024 | Dec 2024 |\n| 6.8 ([6.8.1](https://github.com/RocketChat/Rocket.Chat/releases/tag/6.8.1)) | May 2024 | Nov 2024 |\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Setup\nDESCRIPTION: Commands to set up nginx configuration directories\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/nginx\nmkdir sites-enabled sites-available\n```\n\n----------------------------------------\n\nTITLE: Listing Google Calendar App Slash Commands in Markdown\nDESCRIPTION: This snippet shows the available slash commands for the Google Calendar App in Rocket.Chat. It includes commands for setup, connection, disconnection, settings management, and event retrieval.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/google-calendar/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **/google-calendar help:** Shows the list of slash commands.\n* **/google-calendar setup:** Shows the steps to set up.\n* **/google-calendar connect:** Starts the process to link your Google Account.\n* **/google-calendar disconnect:** Removes your linked Google Account.\n* **/google-calendar settings:** Opens a contextual bar to manage your Google Calendar settings.\n* **/google-calendar events:** Returns all events in the calendar for today.\n```\n\n----------------------------------------\n\nTITLE: Installing bcrypt-cli for Password Hashing\nDESCRIPTION: Commands to install bcrypt-cli utility and generate a bcrypt-hashed password from plaintext, useful for creating valid admin passwords in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/restoring-an-admin-user.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n// npm install -g @carsondarling/bcrypt-cli\n```\n\nLANGUAGE: bash\nCODE:\n```\n// npm install -g @carsondarling/bcrypt-cli bcrypt $(echo -n \"yourPasswordHere\" | sha256sum | cut -d \" \" -f 1) && echo\n```\n\n----------------------------------------\n\nTITLE: Security Policy Link in Markdown\nDESCRIPTION: Simple markdown link redirecting users to the comprehensive security policy documentation in the Rocket.Chat handbook.\nSOURCE: https://github.com/RocketChat/docs/blob/main/customer-center/security-center/security-policy.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Security Policy\n\nRefer to the [Security Policy](https://handbook.rocket.chat/departments-and-operations/security/security-policy) on our Handbook.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Required environment variable configuration for building Rocket.Chat on FreeBSD.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/freebsd/README.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export MAKE_CMD=gmake\n$ export CXX=clang++\n$ export CC=clang\n```\n\n----------------------------------------\n\nTITLE: Displaying WhatsApp Shortcuts in Rocket.Chat\nDESCRIPTION: This code snippet shows the command to display WhatsApp app shortcuts in Rocket.Chat. It includes a list of available shortcuts and their functions for managing WhatsApp integration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/whatsapp/whatsapp-agents-guide.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **`/whatsapp connect`:** Connect a new WhatsApp number.\n* **`/whatsapp numbers`:** To view and edit all connected WhatsApp number.\n* **`/whatsapp view-templates`:** To see all Template messages.\n* **`/whatsapp send-template`:** To send a Template message\n* **`/whatsapp support`:** Get support information\n* **`/whatsapp help`:** To see this shortcut again\n```\n\n----------------------------------------\n\nTITLE: Resetting a User Role to Admin in MongoDB\nDESCRIPTION: JavaScript database command to add the 'admin' role to a specific user, ensuring they have administrator privileges in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/restoring-an-admin-user.md#2025-04-06_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb.users.update({username: \"administrator\"}, { $push: { roles: \"admin\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating OpenShift Project for Rocket.Chat\nDESCRIPTION: Commands to log in to OpenShift and create a new project for Rocket.Chat deployment. This sets up the environment for the application.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/openshift.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\noc login -u openshift-devel https://10.1.2.2:8443\noc new-project rocket-chat\n```\n\n----------------------------------------\n\nTITLE: Docker Image Management and Container Deployment\nDESCRIPTION: Commands for pulling Docker images and starting the services\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/aliyun.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mongo\ndocker pull registry.rocket.chat/rocketchat/rocket.chat\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d mongo\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d mongo-init-replica\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d rocketchat\n```\n\n----------------------------------------\n\nTITLE: Listing WhatsApp Cloud App Shortcuts in Markdown\nDESCRIPTION: This snippet shows the markdown formatting for listing WhatsApp Cloud App shortcuts and their functions. It includes commands for connecting numbers, viewing connected numbers, getting support, and accessing the help menu.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/whatsapp-cloud-app/configure-whatsapp-cloud-app.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **/whatsapp connect:** Connect a new WhatsApp number\n* **/whatsapp numbers:** View and edit all connected WhatsApp number\n* **/whatsapp support:** Get support information\n* **/whatsapp help:** See the help menu\n```\n\n----------------------------------------\n\nTITLE: Displaying Rocket.Chat Version Format\nDESCRIPTION: Demonstrates the version format used by Rocket.Chat, which follows the Major.Minor.Patch pattern.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/database-migration.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMajor.Minor.Patch\n6.2.10\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Rocket.Chat from Kubernetes\nDESCRIPTION: Command to uninstall and delete the Rocket.Chat deployment from Kubernetes using Helm.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete rocketchat\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Rocket.Chat from Kubernetes\nDESCRIPTION: Command to uninstall and delete the Rocket.Chat deployment from Kubernetes using Helm.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete rocketchat\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Welcome Message\nDESCRIPTION: System welcome message displayed after successful SSH connection to the Rocket.Chat droplet, providing information about the deployment and useful resources.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-digital-ocean.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n##################################################################################################################################################################\nRocket.Chat is the leading open source team chat software solution. Free, unlimited and completely customizable with on-premises and SaaS cloud hosting.\nReplace email, HipChat & Slack with the ultimate team chat software solution.\n\nThis Rocket.Chat image uses docker under the hood. To learn more, please read our docker documentation - https://docs.rocket.chat/deploy/prepare-for-your-deployment/rapid-deployment-methods/docker-and-docker-compose\n\nYou can find the compose project in $HOME/rocketchat directory.\n\nLooking for how to use Rocket.Chat? Be sure to check our docs: https://docs.rocket.chat\nNeed some help? Join our community forums https://forums.rocket.chat and https://open.rocket.chat\n##################################################################################################################################################################\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Instagram Direct App from Rocket.Chat\nDESCRIPTION: Steps for removing the Instagram Direct app from a Rocket.Chat workspace. This process involves navigating to the installed apps section and initiating the uninstallation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/instagram-direct/README.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* Go to **Administration > Apps > Installed.**\n* Click th**e kebab menu** against the **Instagram Direct** **app.**\n* Select **Uninstall**.\n* Click **Yes** to confirm the uninstallation.\n```\n\n----------------------------------------\n\nTITLE: Voice Channel Feature Comparison Table in Markdown\nDESCRIPTION: A markdown table comparing Voice Channel features across different Rocket.Chat plans including Community, Starter, Pro, and Enterprise editions. Shows availability of features like inbound calls, call history, SIP extension management, and other calling capabilities.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-voice-channel/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table><thead><tr><th width=\"173\" align=\"center\">Feature</th><th align=\"center\">Community </th><th align=\"center\">Starter </th><th>Pro</th><th>Enterprise</th></tr></thead><tbody><tr><td align=\"center\"><strong>Inbound calls</strong></td><td align=\"center\"><strong>✓</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr><tr><td align=\"center\"><strong>Call history</strong></td><td align=\"center\"><strong>✓</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr><tr><td align=\"center\"><strong>In-App SIP</strong><a href=\"voice-channel-admin-guide/configure-with-an-active-pbx-server/\"> <strong>extension management</strong></a></td><td align=\"center\"><strong>✓</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr><tr><td align=\"center\"><strong>Outbound calls</strong></td><td align=\"center\"><strong>x</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr><tr><td align=\"center\"><strong>Calls on hold</strong></td><td align=\"center\"><strong>x</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr><tr><td align=\"center\"><strong>Call Dialer</strong></td><td align=\"center\"><strong>x</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr><tr><td align=\"center\"><strong>Call notes</strong></td><td align=\"center\"><strong>x</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr><tr><td align=\"center\"><strong>Device selection</strong></td><td align=\"center\"><strong>x</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr><tr><td align=\"center\"><strong>Click to call</strong> </td><td align=\"center\"><strong>x</strong></td><td align=\"center\"><strong>✓</strong></td><td><strong>✓</strong></td><td><strong>✓</strong></td></tr></tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Galaxy Environment Variables in JSON\nDESCRIPTION: This JSON configuration sets up environment variables for Galaxy deployment, including MongoDB connection details, ROOT_URL, and MAIL_URL.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/galaxy.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"galaxy.meteor.com\": {\n    \"env\": {\n      \"MONGO_URL\": \"mongodb://<user>:<password>@<host>:<port>/<database>?replicaSet=rs01\",\n      \"MONGO_OPLOG_URL\": \"mongodb://<oplog_username>:<oplog_password>@<db_server_host>:<db_server_port>/<oplog_db_name>?authSource=admin&replicaSet=rs01\",\n      \"ROOT_URL\": \"...\",\n      \"MAIL_URL\": \"...\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern for Phone Number Capture\nDESCRIPTION: Regular expression pattern used to validate and capture phone numbers in various formats for Omnichannel lead capture\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel/omnichannel-admins-guide/README.md#2025-04-06_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n((?:([0-9]{1,3})|[0-9]{2})[ -]*?[0-9]{4,5}(?:[-\\s_]{1,2})?[0-9]{4}(?:(?=[^0-9])|$)|[0-9]{4,5}(?:[-\\s_]{1,2})?[0-9]{4}(?:(?=[^0-9])|$))\n```\n\n----------------------------------------\n\nTITLE: Reloading System State and Restarting Rocket.Chat\nDESCRIPTION: This command reloads the systemd daemon and restarts the Rocket.Chat service to apply the new MongoDB configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/configure-a-replica-set-for-mongodb.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload && sudo systemctl restart rocketchat\n```\n\n----------------------------------------\n\nTITLE: MongoDB Service Configuration\nDESCRIPTION: Commands to enable and start MongoDB service\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable mongodb\nsystemctl start mongodb\n```\n\n----------------------------------------\n\nTITLE: Adding an Information Hint in Markdown\nDESCRIPTION: This snippet demonstrates how to create an information hint box in Markdown using GitBook's hint syntax. It provides a practical use case example for Omnichannel tags.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel/tags.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nA practical use case is using tags to mark the progress made on a Livechat query. You can have tags like `new`, `blocked`, `in progress,` `completed` etc.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Installing Apache and Enabling Modules for SSL Reverse Proxy\nDESCRIPTION: Commands to install Apache2 and enable necessary modules for SSL reverse proxy configuration with Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/configuring-ssl-reverse-proxy.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt-get update\napt-get install apache2\na2enmod proxy_http\na2enmod proxy\na2enmod ssl\na2enmod proxy_wstunnel\na2enmod rewrite\n```\n\n----------------------------------------\n\nTITLE: Installing Apache and Enabling Modules for SSL Reverse Proxy\nDESCRIPTION: Commands to install Apache2 and enable necessary modules for SSL reverse proxy configuration with Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/configuring-ssl-reverse-proxy.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt-get update\napt-get install apache2\na2enmod proxy_http\na2enmod proxy\na2enmod ssl\na2enmod proxy_wstunnel\na2enmod rewrite\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js and Dependencies\nDESCRIPTION: Configures and installs Node.js 12.x, MongoDB, and other required dependencies\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-kali.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get -y update && sudo apt-get install -y curl && curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y build-essential libcurl3 mongodb-org-server mongodb-org nodejs graphicsmagick\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g inherits n && sudo n 12.18.4\n```\n\n----------------------------------------\n\nTITLE: Showing Complex Email Signature Format in Markdown\nDESCRIPTION: This snippet illustrates a more complex email signature format that includes multiple lines and a disclaimer, which may cause issues with the direct reply feature.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/email/direct-email-reply.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nHello\n\nMr Rick Olson\nGalactic President Superstar Mc Awesomeville\nGitHub\n\n**********************DISCLAIMER***********************************\n* Note: blah blah blah                                            *\n**********************DISCLAIMER***********************************\n```\n```\n\n----------------------------------------\n\nTITLE: Inviting an Agent to Email Inbox using Rocket.Chat Command\nDESCRIPTION: This snippet demonstrates how to invite another agent to an email inbox conversation using a Rocket.Chat slash command. The command format is '/invite @username'.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel-agents-guides/email-inboxes.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/invite @username\n```\n\n----------------------------------------\n\nTITLE: Resetting CDN Prefix in MongoDB for Rocket.Chat\nDESCRIPTION: MongoDB commands to reset the CDN_PREFIX setting to an empty value in the Rocket.Chat database. This can be used as a troubleshooting step when the CDN configuration prevents access to the Rocket.Chat instance.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/cdn.md#2025-04-06_snippet_0\n\nLANGUAGE: mongodb\nCODE:\n```\ndb.rocketchat_settings.update({_id:\"CDN_PREFIX\"},{$set:{\"value\":\"\"}})\n```\n\n----------------------------------------\n\nTITLE: IBM Cloud CLI Login\nDESCRIPTION: Command to log into the IBM Cloud command-line interface\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-ibm-cloud.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nibmcloud cf login\n```\n\n----------------------------------------\n\nTITLE: Illustrating Email Signature Format in Markdown\nDESCRIPTION: This snippet demonstrates a typical email signature format that uses dashes to separate the signature from the message body.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/email/direct-email-reply.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nHello\n\n--\nRick\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Premium Feature Icon in Markdown\nDESCRIPTION: This code snippet shows how to embed an image in Markdown to indicate a premium feature. It uses a figure element with an empty figcaption.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel/tags.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<figure><img src=\"../../.gitbook/assets/Premium.svg\" alt=\"\"><figcaption></figcaption></figure>\n```\n\n----------------------------------------\n\nTITLE: Cautious Rocket.Chat Upgrade Path\nDESCRIPTION: Presents an even more cautious upgrade path for Rocket.Chat with smaller incremental version jumps. This approach minimizes potential issues by making more gradual version transitions.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/support-faqs.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n -> 073.x - 1.0.x -> 1.1.x -> 1.2.x -> 1.3.x -> 2.0.x -> 2.1.x\n```\n\n----------------------------------------\n\nTITLE: Cautious Rocket.Chat Upgrade Path\nDESCRIPTION: Presents an even more cautious upgrade path for Rocket.Chat with smaller incremental version jumps. This approach minimizes potential issues by making more gradual version transitions.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/support-faqs.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n -> 073.x - 1.0.x -> 1.1.x -> 1.2.x -> 1.3.x -> 2.0.x -> 2.1.x\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Google Compute Engine VM\nDESCRIPTION: This command downloads and installs Docker on the Google Compute Engine VM instance.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-google-compute-engine.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo wget -qO- https://get.docker.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Testing AMI Connection with Asterisk Commands\nDESCRIPTION: TCL commands used to debug and verify the AMI connection status with Asterisk server. The first command enables AMI debugging, while the second displays currently connected AMI users.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-voice-channel/voice-channel-admin-guide/configure-with-an-active-pbx-server/README.md#2025-04-06_snippet_0\n\nLANGUAGE: tcl\nCODE:\n```\nmanager set debug on\nmanager show connected\n```\n\n----------------------------------------\n\nTITLE: Creating a Backup of Rocket.Chat Data\nDESCRIPTION: Command to create a backup of the Rocket.Chat server data, which will generate a compressed archive file with all necessary data.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap run rocketchat-server.backupdb\n```\n\n----------------------------------------\n\nTITLE: Creating a Backup of Rocket.Chat Data\nDESCRIPTION: Command to create a backup of the Rocket.Chat server data, which will generate a compressed archive file with all necessary data.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap run rocketchat-server.backupdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notifications in Rocket.Chat\nDESCRIPTION: This snippet outlines the steps to enable push notifications in Rocket.Chat. It guides users through accessing their account settings, navigating to notification preferences, and selecting the types of messages for which they want to receive push notifications.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-mobile/push-notifications/push-notifications-user-guide.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Click your **avatar** from the sidebar to access the [user panel](https://docs.rocket.chat/use-rocket.chat/user-guides/user-panel).\n* Select **My Account**.\n* Click **Preferences**, then select **Notifications.**\n* Select the type of messages you want to **Send Push Notifications For.**\n* Click **Save Changes.**\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Hint for OTR Beta Status in Markdown\nDESCRIPTION: This snippet uses Markdown and a custom hint syntax to display an informational message about the beta status of the OTR feature, including its current limitations.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/user-guides/messages/off-the-record-otr-messaging-user-guide.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nThis feature is currently in beta. Search operations will not find encrypted messages of encrypted rooms. The mobile apps and multi-DMs may not support the encrypted messages (currently under implementation). File Uploads will not be encrypted in this version.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: E2E Message Structure in JavaScript\nDESCRIPTION: Object structure for encrypted messages showing the format used for transmission.\nSOURCE: https://github.com/RocketChat/docs/blob/main/customer-center/security-center/end-to-end-encryption-specifications.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfinal_message: {\n  msg: <encrypted_message>,\n  T: \"e2e\" }\n```\n\n----------------------------------------\n\nTITLE: User Data Field Mapping Configuration\nDESCRIPTION: JSON configuration for mapping user data fields between ADFS and Rocket.Chat, including username, email, and display name templates.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/saml/active-directory-federation-services.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \n    \"username\":\"username\", \n    \"email\":\"email\", \"name\": \n    { \"fieldName\": \"cn\", \n      \"template\": \"__cn[0]__\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Secondary Brand Colors in Hex Format\nDESCRIPTION: The hex color codes for Rocket.Chat's secondary brand colors including purple, green, and monochrome options. These colors provide variety to the visual identity and can be used for various design elements.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/brand-and-visual-guidelines/colors.md#2025-04-06_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nDark Purple: #9F22C7\nLight Purple: #CA71E7\nLight Green: #2DEDA5\nDark Green: #148660\nWhite: #F7F8FA\nBlack: #2F343D\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Spot Instance for Rocket.Chat Deployment\nDESCRIPTION: This JSON configuration file sets up an AWS spot instance request for deploying Rocket.Chat. It specifies instance type, AMI, subnet, security group, and IAM profile. The spot price is set to $0.015 for a one-time request.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"InstanceCount\": 1,\n  \"SpotPrice\": \"0.015\",\n  \"LaunchSpecification\":\n    {\n      \"ImageId\": \"ami-49570529\",\n      \"InstanceType\": \"m3.medium\",\n      \"SubnetId\": \"subnet-########\",\n      \"KeyName\": \"tinyjoy\",\n      \"IamInstanceProfile\": {\n        \"Arn\": \"arn:aws:iam::############:instance-profile/IAMS-PROFILE-NAME\"\n      },\n      \"SecurityGroupIds\": [\"sg-########\"]\n    },\n  \"Type\": \"one-time\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Trello Help Command in Rocket.Chat\nDESCRIPTION: Command to access Trello help documentation within Rocket.Chat workspace\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/trello/using-the-trello-app.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/trello help\n```\n\n----------------------------------------\n\nTITLE: Minimum Rocket.Chat Version Requirement\nDESCRIPTION: Specifies the oldest supported version of Rocket.Chat that is compatible with the Whatsapp integration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/whatsapp-business-app-faqs.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3.14.0\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Docker Compose YAML configuration for setting up Rocket.Chat with MongoDB replica set\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/aliyun.md#2025-04-06_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\n\nservices:\n  rocketchat:\n    image: rocket.chat:latest\n    restart: unless-stopped\n    volumes:\n      - ./uploads:/app/uploads\n    environment:\n      - PORT=3000\n      - ROOT_URL=http://chat.inumio.com\n      - MONGO_URL=mongodb://mongo:27017/rocketchat\n      - MONGO_OPLOG_URL=mongodb://mongo:27017/local\n      - Accounts_UseDNSDomainCheck=True\n    depends_on:\n      - mongo\n    ports:\n      - 8818:3000\n\n  mongo:\n    image: mongo\n    restart: unless-stopped\n    volumes:\n     - $PWD/data:/data/db\n     - $PWD/dump:/dump\n    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1\n\n  mongo-init-replica:\n    image: mongo\n    command: 'bash -c \"for i in `seq 1 30`; do mongo mongo/rocketchat --eval \\\"rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' } ]})\\\" && s=$$? && break || s=$$?; echo \\\"Tried $$i times. Waiting 5 secs...\\\"; sleep 5; done; (exit $$s)\"'\n    depends_on:\n      - mongo\n```\n\n----------------------------------------\n\nTITLE: Event Response Actions\nDESCRIPTION: Quick action buttons available for responding to meeting invitations within Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/google-calendar/using-the-google-calendar-app.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nAccept, Decline, Maybe\n```\n\n----------------------------------------\n\nTITLE: Creating Rocket.Chat SystemD Service File\nDESCRIPTION: Creates and configures the systemd service file for Rocket.Chat with environment variables.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF |sudo tee -a /lib/systemd/system/rocketchat.service\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\n[Service]\nExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\nEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs01 MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs01 ROOT_URL=http://localhost:3000/ PORT=3000\n[Install]\nWantedBy=multi-user.target\nEOFash\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Two Factor Authentication\nDESCRIPTION: Structured markdown documentation explaining the setup and management of two-factor authentication in Rocket.Chat, including both TOTP and email-based methods, with detailed steps for enabling and disabling each option.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/user-guides/security-bundle/two-factor-authentication-user-guide.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Secure your account with two factor authentication.\n---\n\n# Two Factor Authentication User Guide\n\nWith the ability to extensively use Rocket.Chat on multiple platforms, there is the risk of exposing your account details. Rocket.Chat two-factor authentication (2FA) provides additional protection for workspace users by requiring them to provide two forms of authentication before accessing their accounts.\n```\n\n----------------------------------------\n\nTITLE: Referencing Anonymous Write Setting in Rocket.Chat Markdown\nDESCRIPTION: This snippet shows how to reference the 'Allow Anonymous Write' setting in Markdown within a table cell. It's used to describe conditions for anonymous user participation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<code>Allow Anonymous Write</code>\n```\n\n----------------------------------------\n\nTITLE: Install and Set Permissions\nDESCRIPTION: Commands to install dependencies and set proper permissions for the Rocket.Chat installation\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/updating-rocket.chat.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/bundle/programs/server && npm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv /tmp/bundle /opt/Rocket.Chat\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Using Instagram Direct App Shortcuts in Rocket.Chat\nDESCRIPTION: List of shortcut commands available for the Instagram Direct app within Rocket.Chat. These shortcuts provide quick access to various functions of the integration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/instagram-direct/README.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* **`/instagram authorize`::** Starts the Instagram authorization process to connect your Instagram accounts.\n* **`/instagram unauthorize`:** Revoke Instagram authorization to remove all connected Instagram accounts.\n* **`/instagram edit pageId`:** Edit Page configuration for the given pageId.\n* **`/instagram edit username`:** Edit PageInstagram configuration for the given Instagram username.\n* **`/instagram help`:** Shows help message.\n```\n\n----------------------------------------\n\nTITLE: Stop Rocket.Chat Service Command\nDESCRIPTION: Command to stop the Rocket.Chat service before performing the update\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/updating-rocket.chat.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop rocketchat\n```\n\n----------------------------------------\n\nTITLE: Syncloud Platform Markdown Content\nDESCRIPTION: Markdown content describing Syncloud platform features and linking to the main website and hardware options.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/syncloud.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Run Rocket.Chat on your easy to use personal device\n---\n\n# Syncloud\n\n* Full control self hosting solution\n* 100% [Open source](https://github.com/syncloud/platform)\n* One click app installation\n* Various [cheap personal server devices](https://syncloud.org/hardware.html) to choose from\n* Free https certificate from Let's Encrypt\n\nRead more at [syncloud.org](https://syncloud.org)\n\n[![Syncloud](https://syncloud.org/images/logo\\_min.svg)](https://syncloud.org)\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Header and Link for Rocket.Chat Developer Documentation\nDESCRIPTION: This Markdown snippet provides a header and a hyperlink to the new location of Rocket.Chat's developer documentation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/developer-documentation.md#2025-04-06_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Development Docs\n\nRocket.Chat Developer documentation has been moved to [http://developer.rocket.chat/](http://developer.rocket.chat/)\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Service Terms\nDESCRIPTION: A simple markdown header indicating the start of a service-specific terms section.\nSOURCE: https://github.com/RocketChat/docs/blob/main/applicable-terms/additional-terms/service-specific-terms/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Service-Specific Terms\n```\n\n----------------------------------------\n\nTITLE: Deprecation Notice in Markdown\nDESCRIPTION: Markdown formatted warning message indicating that basic federation is deprecated from Rocket.Chat 6.0 onwards, with a link to new federation documentation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation/rocket.chat-federation.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Rocket.Chat Basic Federation\n\n{% hint style=\"warning\" %}\n![](<../../.gitbook/assets/Deprecated (1).png>) Rocket.Chat basic federation is deprecated as from Rocket.Chat `6.0`. We recommend federating using [federation-admin-guide](federation-admin-guide/ \"mention\").\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microservices Components\nDESCRIPTION: Basic YAML configuration structure for individual microservices components in values.yml file.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/microservices.md#2025-04-06_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npresence: {}\nddpStreamer: {}\naccount: {}\nauthorization: {}\nstreamHub: {}\n```\n\n----------------------------------------\n\nTITLE: Updating Rocket.Chat Container\nDESCRIPTION: Commands to stop, remove, and restart the Rocket.Chat container after pulling a new image version.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose stop rocketchat\ndocker compose rm rocketchat\ndocker compose up -d rocketchat\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolithic Deployment for Federated Rocket.Chat in YAML\nDESCRIPTION: YAML configuration for deploying a monolithic federated Rocket.Chat workspace using Helm. Includes settings for image, MongoDB, ingress, and federation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation/federation-admin-guide/deploy-a-federated-rocket.chat-workspace.md#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n pullPolicy: IfNotPresent\n repository: registry.rocket.chat/rocketchat/rocket.chat\n tag: <release> #Replace it with your target release\n\n\nmongodb:\n enabled: true  #For test purposes, a single mongodb pod is deployed, consider an external MongoDB cluster for production environments\n auth:\n   passwords:\n     - rocketchat\n   rootPassword: rocketchatroot\n\n\nmicroservices:\n enabled: false  #This must be set to false\nhost: domain.xyz  #This is the domain for your Rocket.Chat server, Replace it with your own domain\ningress:\n enabled: true\n ingressClassName: nginx  # State the ingress controller that is installed in the K8s cluster\n annotations:\n   cert-manager.io/cluster-issuer: production-cert-issuer # Replace with the name of your ClusterIssuer\n tls:\n   - secretName: federation #This is the name of the secret - You can use a different name if needed\n     hosts:\n       - domain.xyz #This is the domain for your Rocket.Chat server, Replace it with your own domain \n       - synapse.domain.xyz #This is the domain for your Synapse server, Replace it with your own domain \n\nfederation:\n enabled: true\n host: synapse.domain.xyz #This is the domain for your Synapse server, Replace it with your own domain \n persistence:\n   enabled: true\n   existingClaim: synapse-helm #Replace with the name of your persistent volume claim\n\npostgresql:\n enabled: true\n```\n\n----------------------------------------\n\nTITLE: Using Invite Command in Rocket.Chat Omnichannel\nDESCRIPTION: Demonstrates the slash command syntax for inviting other agents or managers to an ongoing Omnichannel chat. The command requires the username of the user to invite preceded by the @ symbol.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel-agents-guides/omnichannel-conversation.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/invite @<username>\n```\n\n----------------------------------------\n\nTITLE: Restarting Rocket.Chat Docker Container\nDESCRIPTION: Command to restart the Rocket.Chat container to resolve enterprise trial activation issues. This helps sync the workspace status with cloud portal changes.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/federation-faqs/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker restart rocketchat\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Commands for Rocket.Chat Deployment\nDESCRIPTION: Commands to start Rocket.Chat server using Docker Compose and monitor its logs. The first command starts the containers defined in docker-compose.yml, while the second command follows the Rocket.Chat container logs.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-windows-10.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\ndocker compose logs -f rocketchat\n```\n\n----------------------------------------\n\nTITLE: Displaying User Role in Rocket.Chat\nDESCRIPTION: This code snippet shows how the 'user' role is assigned in Rocket.Chat. It's a standard role for all workspace members, allowing them to join rooms, send messages, upload files, and participate in communications.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>user</code>\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Parameter for File Upload Size\nDESCRIPTION: Configuration parameter in Nginx to modify the maximum allowed file upload size. This setting needs to be adjusted when users encounter 'Request Entity Too Large' errors during file uploads.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/file-upload/file-upload-faqs.md#2025-04-06_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nclient_max_body_size\n```\n\n----------------------------------------\n\nTITLE: Defining Highlight Gradient Colors in Hex Format\nDESCRIPTION: The hex color codes for gradient highlight effects in Rocket.Chat's design system. These gradients are specifically designed for use in the highlighting shape element and transition from a light color to white.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/brand-and-visual-guidelines/colors.md#2025-04-06_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nLight red highlight: #FEECEF to #FFFFFF\nLight blue highlight: #E8F1FE to #FFFFFF\nLight purple highlight: #F5E9F9 to #FFFFFF\nLight green highlight: #EAFCF6 to #FFFFFF\n```\n\n----------------------------------------\n\nTITLE: Mapping Keycloak Groups to Rocket.Chat Rooms in JSON\nDESCRIPTION: JSON configuration for mapping Keycloak groups to Rocket.Chat rooms. This is used in the OAuth Group Channel Map field to automatically add users from specific Keycloak groups to designated Rocket.Chat rooms.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/openid-connect/keycloak.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keycloak-group\": [\"rocket-chat-room-name-1\", \"rocket-chat-room-name-2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: Command to install Node.js dependencies for Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(cd /tmp/bundle/programs/server; npm i)\n```\n\n----------------------------------------\n\nTITLE: Updating Rocket.Chat on Kubernetes\nDESCRIPTION: Command to update an existing Rocket.Chat deployment using Helm.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-kubernetes.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade rocketchat -f values.yaml rocketchat/rocketchat\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB in Ubuntu Snaps Installation\nDESCRIPTION: Commands to connect to MongoDB and select the database in a Rocket.Chat installation using Ubuntu Snaps.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/restoring-an-admin-user.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo rocketchat-server.mongo\n```\n\nLANGUAGE: sql\nCODE:\n```\nuse parties\n```\n\n----------------------------------------\n\nTITLE: Formatting Direct Message Files for Rocket.Chat Import\nDESCRIPTION: Shows the required format for direct message CSV files placed in the 'directmessages' directory. Each line contains sender username, receiver username, timestamp, and message content.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/data-migration/import-from-csv.md#2025-04-06_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"bradley.hilton\",\"billy.bob\",\"1479162481336\",\"this is a test message\"\n\"billy.bob\",\"bradley.hilton\",\"1479162481654\",\"this is another message, a test message\"\n```\n\n----------------------------------------\n\nTITLE: Let's Encrypt SSL Installation\nDESCRIPTION: Commands to clone and run Let's Encrypt certificate generation\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt\ncd /opt/letsencrypt && ./letsencrypt-auto certonly --standalone --email YOUR@EMAIL.ADDRESS -d YOUR.SERVER.NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring ADFS Endpoints in Rocket.Chat\nDESCRIPTION: Example URLs for configuring Custom Entry Point and IDP SLO Redirect URL in Rocket.Chat SAML settings.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/saml/active-directory-federation-services.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCustom Entry Point: https://<windows-server-name-domain>/adfs/ls/\n\nIDP SLO Redirect URL: https://<windows-server-name-domain>/adfs/ls/?wa=wsignout1.0\n```\n\n----------------------------------------\n\nTITLE: Encryption REST API Routes\nDESCRIPTION: Collection of REST API endpoints for handling encryption operations in Rocket.Chat. Includes endpoints for fetching group keys, managing keychains, and updating encryption keys.\nSOURCE: https://github.com/RocketChat/docs/blob/main/customer-center/security-center/end-to-end-encryption-specifications.md#2025-04-06_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET e2e.fetchGroupE2EKey(rid)\n```\n\nLANGUAGE: http\nCODE:\n```\nGET e2e.fetchKeychain(uid)\n```\n\nLANGUAGE: http\nCODE:\n```\nGET e2e.fetchMyKeys()\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST e2e.addKeyToChain(RSAPubKey, RSAEPrivKey)\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST e2e.emptyKeychain()\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST e2e.updateGroupE2EKey(uid, rid, key)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server Block for Rocket.Chat\nDESCRIPTION: This Nginx server block configuration sets up SSL and proxying for Rocket.Chat. It includes SSL certificate settings, proxy settings for WebSocket support, and a redirect from HTTP to HTTPS.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 443 ssl;\n  server_name YOUR.SERVER.NAME;\n  ssl_certificate /etc/letsencrypt/live/YOUR.SERVER.NAME/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/YOUR.SERVER.NAME/privkey.pem;\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n  ssl_prefer_server_ciphers on;\n  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n  root /usr/share/nginx/html;\n  index index.html index.htm;\n  # Make site accessible from http://localhost/\n  server_name localhost;\n  location / {\n    proxy_pass http://localhost:3000/;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_set_header X-Nginx-Proxy true;\n    proxy_redirect off;\n  }\n}\nserver {\n  listen 80;\n  server_name YOUR.SERVER.NAME;\n  return 301 https://$host$request_uri;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Generated SSL Keys\nDESCRIPTION: Command to view the generated SSL key files in the current directory with detailed information.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/salesforce-crm-integration/README.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nls -lrt\n```\n\n----------------------------------------\n\nTITLE: Listing Google Drive Slash Commands in Markdown\nDESCRIPTION: This snippet shows the available slash commands for the Google Drive app in Rocket.Chat, including help, connect, disconnect, create, and files commands.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/google-drive/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  * **/google-drive help:** shows the help list.\n  * **/google-drive connect:** starts the process to link your Google Account.\n  * **/google-drive disconnect:** remove your linked Google Account.\n  * **/google-drive create:** creates a new Google File and saves it on your Google Drive.\n  * **/google-drive files:** opens the contextual bar with your Google Drive files list.\n```\n\n----------------------------------------\n\nTITLE: Disabling Domain Check in Rocket.Chat via MongoDB\nDESCRIPTION: Commands to connect to the MongoDB instance and disable the DNS domain check feature in Rocket.Chat, which validates email addresses. This involves port-forwarding to the MongoDB pod and executing database commands.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/openshift.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# oc port-forward <mongodb_pod> 27017\n# mongo localhost:27017\n\n> use rocketchat\n> db.auth('rocketchat-admin','rocketchat')\n> db.rocketchat_settings.update({_id:'Accounts_UseDNSDomainCheck'},{$set:{value:false}})\n```\n\n----------------------------------------\n\nTITLE: Deploying Rocket.Chat with Docker Compose\nDESCRIPTION: Command to start Rocket.Chat containers using Docker Compose in detached mode.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/rocket.chat-air-gapped-deployment/README.md#2025-04-06_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyboard Shortcuts Table in Markdown\nDESCRIPTION: This Markdown table lists various keyboard shortcuts for Rocket.Chat, including their key combinations and descriptions. It covers actions like search, message editing, navigation, and text formatting.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/user-guides/keyboard-shortcuts.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                Shortcut               |              Description             |\n| :-----------------------------------: | :----------------------------------: |\n|      `Command` (or `Ctrl`) + `k`      |        Open Room / User search       |\n|     `Control` (or `Shift`) + `ESC`    |       Clear all unread messages      |\n|               `Up Arrow`              |         Edit previous message        |\n|  `Command` (or `Ctrl`) + `Left Arrow` | Move to the beginning of the message |\n|   `Command` (or `Ctrl`) + `Up Arrow`  | Move to the beginning of the message |\n| `Command` (or `Ctrl`) + `Right Arrow` |    Move to the end of the message    |\n|  `Command` (or `Ctrl`) + `Down Arrow` |    Move to the end of the message    |\n|    `Control` (or `Shift`) + `Enter`   |   New line in message compose input  |\n|       `Command` (or `Ctrl`) +`b`      |                 Bold                 |\n|      `Command` (or `Ctrl`) + `i`      |                Italic                |\n|      `Command` (or `Ctrl`) + `c`      |                 Copy                 |\n|      `Command` (or `Ctrl`) + `v`      |                 Paste                |\n|      `Command` (or `Ctrl`) + `x`      |                  Cut                 |\n```\n\n----------------------------------------\n\nTITLE: System and User Information Permission Codes\nDESCRIPTION: Permission codes for accessing system features and user information, including device management, federation data, and user profiles.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/README.md#2025-04-06_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nview-device-management\\nview-federation-data\\nview-full-other-user-info\\nview-history\\nview-import-operations\\nview-join-code\n```\n\n----------------------------------------\n\nTITLE: Checking Asterisk Module Status\nDESCRIPTION: This command is used to check if specific Asterisk modules are loaded. It's part of the process to verify WebSocket and mini-HTTP functionality in Asterisk.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-voice-channel/voice-channel-admin-guide/configure-without-previously-having-a-pbx-server/README.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule show like <module_name>\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from GitHub Repository Events in Rocket.Chat\nDESCRIPTION: This command unsubscribes the user from all events of a specific GitHub repository, stopping notifications in the Rocket.Chat room.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/github-app/using-github-app.md#2025-04-06_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n/github <username>/<repository name> unsubscribe\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies on Kali\nDESCRIPTION: Updates package list and installs MongoDB repository keys and configuration\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-kali.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get -y update\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y dirmngr gnupg && sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.0 main\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list\n```\n\n----------------------------------------\n\nTITLE: Defining Anonymous Role in Rocket.Chat\nDESCRIPTION: This code defines the 'anonymous' role for unauthenticated visitors on a Rocket.Chat workspace. Anonymous users do not have a specified username.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/roles-in-rocket.chat.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<code>anonymous</code>\n```\n\n----------------------------------------\n\nTITLE: Verifying Private Key\nDESCRIPTION: Command to verify and display the private key contents while checking its consistency.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/salesforce-crm-integration/README.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rsa -in privatekey.pem -check\n```\n\n----------------------------------------\n\nTITLE: Cloning Rocket.Chat Repository\nDESCRIPTION: Command to clone the latest version of Rocket.Chat from GitHub repository\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-ibm-cloud.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/RocketChat/Rocket.Chat.git\n```\n\n----------------------------------------\n\nTITLE: Viewing Rocket.Chat Snap Configuration Variables\nDESCRIPTION: Command to display the current configuration variables for the Rocket.Chat server snap installation, showing settings like port, MongoDB URL, and site URL.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnap get rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenLDAP Server with Docker Compose\nDESCRIPTION: This YAML configuration sets up an Osixia OpenLDAP server using Docker Compose. It defines the environment variables, volumes, and ports for the LDAP server.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/ldap/ldap-setup-example.md#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  openldap:\n    image: osixia/openldap:1.3.0\n    container_name: rc-openldap\n    environment:\n      LDAP_LOG_LEVEL: \"256\"\n      LDAP_ORGANISATION: \"rcldap\"\n      LDAP_DOMAIN: \"rcldap.com.br\"\n      LDAP_ADMIN_PASSWORD: \"admin\"\n    volumes:\n      - /var/lib/ldap\n      - /etc/ldap/slapd.d\n      - /container/service/slapd/assets/certs/\n    ports:\n      - \"389:389\"\n      - \"636:636\"\n```\n\n----------------------------------------\n\nTITLE: Installing django-rocketchat-auth Package in Python\nDESCRIPTION: Command to install the django-rocketchat-auth package using pip.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/django-rocketchat-auth-1.2.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npip install django-rocketchat-auth\n```\n\n----------------------------------------\n\nTITLE: Starting Rocket.Chat Server Service\nDESCRIPTION: Command to start the Rocket.Chat server service after completing a backup or restore operation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-snaps.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo service snap.rocketchat-server.rocketchat-server start\n```\n\n----------------------------------------\n\nTITLE: Azure Alert Webhook Schema (JavaScript)\nDESCRIPTION: This code snippet illustrates the schema of the incoming message from Azure Alert webhooks. It includes details such as alert status, context information, and custom properties.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/azure-alerts.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\"status\": \"Activated\",\n\"context\": {\n            \"timestamp\": \"2015-08-14T22:26:41.9975398Z\",\n            \"id\": \"/subscriptions/s1/resourceGroups/useast/providers/microsoft.insights/alertrules/ruleName1\",\n            \"name\": \"ruleName1\",\n            \"description\": \"some description\",\n            \"conditionType\": \"Metric\",\n            \"condition\": {\n                        \"metricName\": \"Requests\",\n                        \"metricUnit\": \"Count\",\n                        \"metricValue\": \"10\",\n                        \"threshold\": \"10\",\n                        \"windowSize\": \"15\",\n                        \"timeAggregation\": \"Average\",\n                        \"operator\": \"GreaterThanOrEqual\"\n                },\n            \"subscriptionId\": \"s1\",\n            \"resourceGroupName\": \"useast\",\n            \"resourceName\": \"mysite1\",\n            \"resourceType\": \"microsoft.foo/sites\",\n            \"resourceId\": \"/subscriptions/s1/resourceGroups/useast/providers/microsoft.foo/sites/mysite1\",\n            \"resourceRegion\": \"centralus\",\n            \"portalLink\": \"https://portal.azure.com/#resource/subscriptions/s1/resourceGroups/useast/providers/microsoft.foo/sites/mysite1\"\n},\n\"properties\": {\n              \"key1\": \"value1\",\n              \"key2\": \"value2\"\n              }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Rocket.Chat Service\nDESCRIPTION: Command to enable and start the Rocket.Chat service using systemd.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-debian.md#2025-04-06_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now rocketchat\n```\n\n----------------------------------------\n\nTITLE: Telegram Webhook URL Format\nDESCRIPTION: URL format for setting up the Telegram webhook connection to Rocket.Chat's incoming webhook.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/simple-telegram-bot.md#2025-04-06_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nhttps://api.telegram.org/bot<my-telegram-authorization-token>/setwebhook?url=<Incoming_Webhook_Link_from_Rocket.Chat>\n```\n\n----------------------------------------\n\nTITLE: Listing Rocket.Chat Permission Codes in Markdown Table\nDESCRIPTION: A markdown table that displays Rocket.Chat permission codes with their readable names and descriptions. These codes are used to configure user roles and permissions within the Rocket.Chat platform.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Edit Other User Active Status                                         | `edit-other-user-active-status`                  | Permission to enable or disable other accounts. Accessible from Administration -> Users.                                                                                                                                                                                                                         |\n| Edit Other User Avatar                                                | `edit``-``other``-user-``avatar`                 | Permission to edit other users avatar.                                                                                                                                                                                                                                                                           |\n| Edit Other User E2E Encryption                                        | `edit``-``other``-``user``-``e2e``e`             | Permision to edit other users E2E key.                                                                                                                                                                                                                                                                           |\n| Edit Other User Information                                           | `edit-other-user-info`                           | Permission to change other user's name, username or email address. Accessible from Administration -> Users.                                                                                                                                                                                                      |\n| Edit Other User Password                                              | `edit-other-user-password`                       | Permission to modify other user's passwords. Requires edit-other-user-info permission. Accessible from Administration -> Users.                                                                                                                                                                                  |\n| Edit Other User Two Factor TOTP                                       | `edit``-``other``-``user``-``totp`               | Permission to edit other user TOTP.                                                                                                                                                                                                                                                                              |\n| Edit Privileged Setting                                               | `edit-privileged-setting`                        | Permission to edit privileged settings.                                                                                                                                                                                                                                                                          |\n| Edit Room                                                             | `edit-room`                                      | Permission to edit a room's name, topic, type (private or public status) and status (active or archived).                                                                                                                                                                                                        |\n| Edit Room Avatar                                                      | `edit``-``room``-``avatar`                       | Permission to edit a room avatar.                                                                                                                                                                                                                                                                                |\n| Edit Room's Retention Policy                                          | `edit-room-retention-policy`                     | Permission to edit's a room's retention policy.                                                                                                                                                                                                                                                                  |\n| Edit Team                                                             | `edit``-``team`                                  | Permission to edit a team.                                                                                                                                                                                                                                                                                       |\n| Edit Team Channel                                                     | `edit``-``team``-``channel`                      | Permission to add a team channel                                                                                                                                                                                                                                                                                 |\n| Edit Team Member                                                      | `edit``-``team``-``member`                       | Permission to add a team member.                                                                                                                                                                                                                                                                                 |\n| Force Delete Message                                                  | `force-delete-message`                           | Permission to forcefully delete messages, independent of any deletion blocking setting.                                                                                                                                                                                                                          |\n| Inbound Voip Calls                                                    | `inbound``-``voip``-``calls`                     |                                                                                                                                                                                                                                                                                                                  |\n| Join Without Join Code                                                | `join-without-join-code`                         | Permission to bypass join codes when entering a channel with a join code set.                                                                                                                                                                                                                                    |\n| Leave Channels                                                        | `leave-c`                                        | Permission to leave the public channel.                                                                                                                                                                                                                                                                          |\n| Leave Private Groups                                                  | `leave-p`                                        | Permission to leave the private channel.                                                                                                                                                                                                                                                                         |\n| Logout Device Management                                              | `logout``-``device``-``management`               | Permission to log out device management                                                                                                                                                                                                                                                                          |\n| Logout Other User                                                     | `logout``-``other``-``user`                      | Permission to log out other users.                                                                                                                                                                                                                                                                               |\n| Mail Messages                                                         | `mail-messages`                                  | Permission to use the \"Mail Messages\" tool in the channel actions menu.                                                                                                                                                                                                                                          |\n| Manage Agent Extension Association                                    | `manage``-``agent``-``extension``-``association` | Permission to manange extension association.                                                                                                                                                                                                                                                                     |\n| Manage Apps                                                           | `manage-apps`                                    | Permission to manage all apps. Accessible from Administration -> Apps.                                                                                                                                                                                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Restarting Server After Token Configuration\nDESCRIPTION: Command to restart the Rocket.Chat server after setting the registration token\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart snap.rocketchat-server.rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Creating Rocket.Chat User and Setting Permissions\nDESCRIPTION: Creates a system user for Rocket.Chat and sets appropriate permissions.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd -M rocketchat && sudo usermod -L rocketchat\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Examining Rocket.Chat Migration Collection Document\nDESCRIPTION: Shows the structure of the migration control document in Rocket.Chat's database. This single document controls migration actions with fields for version tracking, a lock indicator, and document ID.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/advanced-workspace-management/database-migration.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\"_id\": \"control\",\"locked\":false, \"version\":19}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data Field Map in JSON for SAML Integration\nDESCRIPTION: This JSON snippet demonstrates how to configure the User Data Field Map for SAML integration in Rocket.Chat. It shows mappings for email, username (with regex), name (combining first and last name), and a custom identifier.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/saml/saml-configuration.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"mail\",\n  \"username\": {\n    \"fieldName\": \"mail\",\n    \"regex\": \"(.*)@.+$\",\n    \"template\": \"user-__regex__\"\n  },\n  \"name\": {\n   \"fieldNames\": [\n      \"firstName\",\n      \"lastName\"\n    ],\n    \"template\": \"__firstName__ __lastName__\"\n  },\n  \"__identifier__\": \"uid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Zapier Triggers Reference\nDESCRIPTION: Code block listing available trigger commands in Rocket.Chat Zapier integration, including channel creation, message posting, and user notifications.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/zapier-app/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nNew channel\nNew message posted anywhere\nNew message posted on public channel\nNew message posted on private channel\nMessage pinned anywhere\nNew private channel\nStarred message anywhere\nNew user\nMentioned on public channel\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Permission Codes Table\nDESCRIPTION: Markdown table containing permission names, their corresponding permission codes, and detailed descriptions of each permission's functionality in Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/permissions/README.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Manage User Status | `manage-user-status` | Permission to manage user status. |\n| Manage Voip Call Settings | `manage-voip-call-settings` | Permission to manage Voip call settings. |\n| Manage Voip Contact Center Settings | `manage-voip-contact-center-settings` | Permission to manage Voip contact center. |\n| Mention All | `mention-all` | Permission to mention everyone in a channel. |\n| Mention Here | `mention-here` | Permission to notify active users in a channel. |\n| Impersonate Other Users | `message-impersonate` | Permission to impersonate other users using message alias. |\n| Mute User | `mute-user` | Permission to mute other users in the same channel. |\n| On Hold Omnichannel Room | `on-hold-livechat-room` | Permission to put a room on hold. |\n| On Hold Others Omnichannel Room | `on-hold-others-livechat-room` | Permission to put livechat room on hold for others. |\n| Outbound Voip Calls | `outbound-voip-calls` | Permission to outbound voip calls. |\n| Pin Message | `pin-message` | Permission to pin a message in a channel. |\n| Post ReadOnly | `post-readonly` | Permission to post messages on read-only channels. |\n| Preview Public Channel | `preview-c-room` | Permission to preview public channels. |\n| Register On Cloud | `register-on-cloud` | Permission to register a workspace manually. |\n| Remove Canned Responses | `remove-canned-responses` | Permission to remove canned responses. |\n| Remove Closed Omnichannel Room | `remove-closed-livechat-rooms` | Permission to close Live Chat rooms. |\n| Remove Omnichannel Departments | `remove-livechat-department` | Permision to remove omnichannel departments. |\n| Remove Slackbridge Links | `remove-slackbridge-links` | Permission to remove slackbridge links |\n| Remove Team Channel | `remove-team-channel` | Permission to remove a channel from a team. |\n| Remove User | `remove-user` | Permission to remove users from channels. |\n| Request PDF Transcript | `request-pdf-transcript` | Permission to request a PDF transcript for a chat. |\n| Restart the server | `restart_server` | Permission to reset the server. |\n| Reset Other User E2E | `reset-other-user-e2e-key` | Permission to set E2E key.\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Configuration File with Replication Settings\nDESCRIPTION: This command appends the replication configuration to the MongoDB configuration file using echo and tee.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/configure-a-replica-set-for-mongodb.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"replication:\\n  replSetName: \\\"rs01\\\"\" | sudo tee -a /etc/mongod.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Storage Engine and Replication\nDESCRIPTION: Sets up MongoDB storage engine and configures replication settings.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo sed -i \"s/^#  engine:/  engine: mmapv1/\"  /etc/mongod.conf\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo sed -i \"s/^#replication:/replication:\\n  replSetName: rs01/\" /etc/mongod.conf\n```\n\n----------------------------------------\n\nTITLE: Adding rocketchat_auth to INSTALLED_APPS in Django settings\nDESCRIPTION: Configuration snippet to add the rocketchat_auth app to the INSTALLED_APPS setting in Django's settings.py file.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/django-rocketchat-auth-1.2.md#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...\n    'rocketchat_auth',\n)\n```\n\n----------------------------------------\n\nTITLE: Remote MongoDB Restore Command\nDESCRIPTION: Command for restoring MongoDB data to a remote instance using URI connection string to specify host and port.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-backup-and-restore.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmongorestore --uri=\"mongodb://<host URL/IP>:<Port>\" /dump\n```\n\n----------------------------------------\n\nTITLE: Configuring Voxtelesys SMS Gateway in Rocket.Chat\nDESCRIPTION: This snippet outlines the configuration settings for the Voxtelesys SMS gateway in Rocket.Chat. It includes authentication, API URL, file upload settings, and media type specifications.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/sms.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* **Auth Token**: Your Voxtelesys auth token\n* **URL**: The Voxtelesys URL e.g `https://smsapi.voxtelesys.net/api/v1/sms`\n* **File Uploads Enabled**: When enabled, file uploads are made available\n* **Accepted Media Types**: Comma-separated list of media types. Leave it blank for accepting all media types.\n```\n\n----------------------------------------\n\nTITLE: Overwriting Existing Rocket.Chat Setting\nDESCRIPTION: Forces a new value for an existing setting using the OVERWRITE_SETTING_ prefix, regardless of its current value.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/deployment-environment-variables/manage-settings-using-environmental-variables.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOVERWRITE_SETTING_FileUpload_Storage_Type=GoogleCloudStorage\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Dependencies on Ubuntu\nDESCRIPTION: Commands to update Ubuntu package lists and install curl\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/aliyun.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get update\n```\n\nLANGUAGE: bash\nCODE:\n```\napt-get install curl\n```\n\n----------------------------------------\n\nTITLE: Installing Docker and Docker Compose\nDESCRIPTION: Commands for installing Docker and Docker Compose, including verification steps\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/aliyun.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.docker.com/ | sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/docker/compose/releases/download/1.5.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x /usr/local/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Enabling Stunnel Automatic Startup\nDESCRIPTION: This bash command modifies the Stunnel configuration file to enable automatic startup by changing the ENABLED variable to 1.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/ldap/ldap-setup-example.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Change to one to enable stunnel automatic startup\nENABLED=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Stunnel for LDAP SSL Connection\nDESCRIPTION: This configuration file sets up Stunnel to create a secure connection to the LDAP server. It defines the options and connection details for LDAPS (LDAP over SSL).\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/ldap/ldap-setup-example.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\noptions = NO_SSLv2\n\n[ldaps]\nclient = yes\naccept = 389\nconnect = your_ldap_server.com:636\n```\n\n----------------------------------------\n\nTITLE: Installing Rocket.Chat\nDESCRIPTION: Commands for downloading and installing Rocket.Chat from GitHub repository.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/freebsd/README.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export PATH=$PATH:$HOME/meteor\n$ cd $HOME\n$ git clone https://github.com/RocketChat/Rocket.Chat.git\n$ cd Rocket.Chat\n$ npm install --clang=1 bcrypt\n$ meteor\n```\n\n----------------------------------------\n\nTITLE: Adding Rocket.Chat Helm Chart Repository in Bash\nDESCRIPTION: Bash command to add the Rocket.Chat Helm chart repository for deploying Rocket.Chat on Kubernetes.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-federation/federation-admin-guide/deploy-a-federated-rocket.chat-workspace.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add rocketchat https://rocketchat.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Configuring User Permissions\nDESCRIPTION: Creates rocketchat user and sets appropriate permissions\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-ubuntu.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd -M rocketchat && sudo usermod -L rocketchat\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Pushing Rocket.Chat Docker Image to OpenShift Registry\nDESCRIPTION: Commands to pull the Rocket.Chat Docker image from Docker Hub and push it to the internal OpenShift registry. This step is necessary for deploying Rocket.Chat on OpenShift.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/openshift.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.rocket.chat/rocketchat/rocket.chat\ndocker tag rocketchat/rocket.chat hub.openshift.rhel-cdk.10.1.2.2.xip.io/openshift/rocket-chat\ndocker push hub.openshift.rhel-cdk.10.1.2.2.xip.io/openshift/rocket-chat\n```\n\n----------------------------------------\n\nTITLE: Google Calendar Settings Command\nDESCRIPTION: Slash command to access Google Calendar app settings where users can manage notifications, daily summaries, and OAuth authentication.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/google-calendar/using-the-google-calendar-app.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/google-calendar settings\n```\n\n----------------------------------------\n\nTITLE: Cloning Rocket.Chat Repository\nDESCRIPTION: These commands clone the Rocket.Chat repository from GitHub and navigate into the project directory.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/galaxy.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/RocketChat/Rocket.Chat.git\ncd Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Initiating MongoDB Replica Set\nDESCRIPTION: These commands start the MongoDB shell and initiate the replica set. The output shows a successful initiation.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/configure-a-replica-set-for-mongodb.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmongo\n> rs.initiate()\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Authentication in Docker Compose\nDESCRIPTION: Example of setting MongoDB authentication environment variables in a docker-compose.yml file. This configuration includes both the main database connection and the oplog connection required for Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-uri-authentication.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenvironment:\n      - \"MONGO_URL=mongodb://rctestuser:mymongopassword@mongo:27017/rocketchat?authSource=admin\"\n      - \"MONGO_OPLOG_URL=mongodb://rctestuser:mymongopassword@mongo:27017/local?authSource=admin\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Channels CSV File for Rocket.Chat Import\nDESCRIPTION: Shows the required format for the channels.csv file. Each line contains channel name, creator username, privacy setting (public/private), and members separated by semicolons.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/data-migration/import-from-csv.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"general\",\"bradley.hilton\",\"public\",\"\"\n\"otherChannelName\",\"billy.bob\",\"public\",\"\"\n\"random\",\"bradley.hilton\",\"public\",\"billy.bob;graywolf336\"\n\"privateArea\",\"bradley.hilton\",\"private\",\"graywolf336\"\n```\n\n----------------------------------------\n\nTITLE: Processing Nixstats Notifications in Rocket.Chat via Incoming Webhook\nDESCRIPTION: This script processes incoming notifications from Nixstats and formats them for display in Rocket.Chat. It handles both domain and server notifications, creating a message with the subject and an attachment containing a link back to the Nixstats dashboard.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/nixstats-notification.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* exported Script */\n/* globals console, _, s */\n\n/** Global Helpers\n *\n * console - A normal console instance\n * _       - An underscore instance\n * s       - An underscore string instance\n */\n\nclass Script {\n  /**\n   * @params {object} request\n   */\n  process_incoming_request({ request }) {\n    var url;\n    var url_title;\n    if(request.content.domain_id)\n    {\n      url = 'https://nixstats.com/domains/'+request.content.domain_id;\n      url_title = request.content.name+\" @ nixstats.com\";\n    }\n    else\n    {\n      url = 'https://nixstats.com/server/'+request.content.server_id;\n      url_title = request.content.server_name+\" @ nixstats.com\";\n    }\n    return {\n     content:{\n        text: request.content.subject,\n        \"attachments\": [\n          {\n            \"author_name\": url_title,\n            \"author_link\": url,\n            \"author_icon\": \"https://nixstats.com/images/favicon.png\"\n          }\n          ]\n       }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Rocket.Chat to Galaxy Servers\nDESCRIPTION: This command deploys the Rocket.Chat application to Galaxy servers. It requires specifying the deployment region, hostname, and path to the settings file.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/galaxy.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEPLOY_HOSTNAME=[region] meteor deploy [hostname] --settings [filepath.json]\n```\n\n----------------------------------------\n\nTITLE: Payload Format for External Service Trigger in Rocket.Chat\nDESCRIPTION: This JSON structure represents the payload sent by Rocket.Chat to an external service when using the 'Send a Message (External Service)' trigger action. It includes the visitor's token and metadata.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/omnichannel/livechat-triggers.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"visitorToken\": \"36b5316b579bd4a7ba55e6738f554a32c7fbe5621fcba842cd08aca2b7986d92\",\n    \"metadata\": [\n        { \"key\": \"name\", \"value\": \"Morgan\" },\n        { \"key\": \"serviceId\", \"value\" : \"12345\"}\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Installation and Configuration\nDESCRIPTION: Complete set of commands to install and configure Rocket.Chat, including user creation, dependency installation, and environment setup\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngroupadd -g 2000 rocket\nuseradd -g rocket -u 2000 rocket\n\ncd /opt\ncurl -L https://releases.rocket.chat/latest/download -o rocket.chat.tgz\ntar zxvf rocket.chat.tgz\nmv bundle Rocket.Chat\nchown -R rocket:rocket /opt/Rocket.Chat\n\nsu - rocket\ncd /opt/Rocket.Chat/programs/server\nnpm install\ncd ../..\n\nexport ROOT_URL=http://YOUR.SERVER.NAME/\nexport MONGO_URL=mongodb://rocket:4rgl3b4rgl3@localhost:27017/rocketchat\nexport PORT=3000\n\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB and Rocket.Chat Services\nDESCRIPTION: Commands to enable and start MongoDB and Rocket.Chat services\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-ubuntu.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now mongod\n```\n\nLANGUAGE: bash\nCODE:\n```\nmongo --eval \"printjson(rs.initiate())\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now rocketchat\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Series of zypper commands to add MongoDB repo and install required packages\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzypper addrepo http://download.opensuse.org/repositories/server:database/openSUSE_Leap_42.2/server:database.repo\nzypper refresh\nzypper -n update\nzypper -n install mongodb nodejs4 npm4 nginx GraphicsMagick gcc-c++\n```\n\n----------------------------------------\n\nTITLE: FreeBSD RC Script for Rocket.Chat Service\nDESCRIPTION: A basic RC script for managing the Rocket.Chat service on FreeBSD, including environment configuration and service controls.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/freebsd/deploying-rocket.chat-server-binaries-on-a-freebsd-system.md#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\n# PROVIDE: rocketchat\n# REQUIRE: LOGIN mongod\n# KEYWORD: shutdown\n#\n# Add the following lines to /etc/rc.conf.local or /etc/rc.conf\n# to enable this service:\n#\n# rocketchat_enable (bool): Set to \"NO\" by default.\n# rocketchat_env (str): List of environment variables passed to rocketchat\n#\n\n. /etc/rc.subr\n\nname=\"rocketchat\"\nrcvar=rocketchat_enable\n\nload_rc_config $name\n\n: ${rocketchat_enable=\"NO\"}\n: ${rocketchat_env=\"MONGO_URL=mongodb://localhost:27017/rocketchat PORT=3000\"}\n: ${rocketchat_user=\"rocketchat\"}\n: ${rocketchat_group=\"rocketchat\"}\n\ncommand=/home/rocketchat/meteor/dev_bundle/bin/node\ncommand_args=\"/home/rocketchat/Rocket.Chat/.meteor/local/build/main.js\"\n\nrun_rc_command \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Recreating Rocket.Chat Container\nDESCRIPTION: Docker Compose command to recreate the Rocket.Chat container with updated configuration.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d rocketchat --force-recreate\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Rocket.Chat\nDESCRIPTION: Downloads the latest Rocket.Chat release and extracts it to a temporary location\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-kali.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://releases.rocket.chat/latest/download -o /tmp/rocket.chat.tgz\n```\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzf /tmp/rocket.chat.tgz -C /tmp\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/bundle/programs/server && npm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv /tmp/bundle /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Displaying Jitsi Conference URL Example in Markdown\nDESCRIPTION: This code snippet demonstrates the format of a Jitsi conference URL, highlighting the use of a title prefix in the URL structure.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/rocket.chat-conference-call/conference-call-admin-guide/jitsi-app.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`https://jitsi.test.rocket.chat/RocketChat663b75818a8cfe91babdc15e`\n```\n\n----------------------------------------\n\nTITLE: Starting Rocket.Chat Service\nDESCRIPTION: Enables and starts the Rocket.Chat service using systemctl.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable rocketchat && sudo systemctl start rocketchat\n```\n\n----------------------------------------\n\nTITLE: Creating New Nginx Configuration File\nDESCRIPTION: Command to create a new Nginx configuration file using the nano text editor. This file will contain the reverse proxy configuration for Rocket.Chat.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-aws.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /etc/nginx/sites-available/default\n```\n\n----------------------------------------\n\nTITLE: Installing Certbot for SSL Certificate Management\nDESCRIPTION: Commands to install Certbot using snap and run it to obtain SSL certificates for Nginx.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/additional-configurations/setting-up-client-ssl-certificate-authentication-for-rocket.chat.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install --classic certbot\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot --nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Main Settings for Rocket.Chat\nDESCRIPTION: This Nginx configuration file sets up the main server settings, including worker processes, SSL settings, logging, and Gzip compression. It also includes virtual host configurations from separate files.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/opensuse-leap-42.2.md#2025-04-06_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nuser rocket;\nworker_processes auto;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\nhttp {\n\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    ##\n    # Gzip Settings\n    ##\n\n    gzip on;\n    gzip_disable \"msie6\";\n\n    # gzip_vary on;\n    # gzip_proxied any;\n    # gzip_comp_level 6;\n    # gzip_buffers 16 8k;\n    # gzip_http_version 1.1;\n    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n\n\n#mail {\n#   # See sample authentication script at:\n#   # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript\n#\n#   # auth_http localhost/auth.php;\n#   # pop3_capabilities \"TOP\" \"USER\";\n#   # imap_capabilities \"IMAP4rev1\" \"UIDPLUS\";\n#\n#   server {\n#       listen     localhost:110;\n#       protocol   pop3;\n#       proxy      on;\n#   }\n#\n#   server {\n#       listen     localhost:143;\n#       protocol   imap;\n#       proxy      on;\n#   }\n#}\n```\n\n----------------------------------------\n\nTITLE: Processing Sentry Events in JavaScript for Rocket.Chat Webhook\nDESCRIPTION: This script processes incoming Sentry event data and formats it into a Rocket.Chat message. It extracts the project name, error message, and culprit from the Sentry event and returns a formatted text message.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/sentry.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Script {\n\n  process_incoming_request({request}) {\n    // console is a global helper to improve debug\n    // console.log(request.content);\n\n    return {\n      content: {\n        text: \"Error in project *\" + request.content.project + \"\\n*Message:* \" +\n          request.content.message + \"\\n*Culprit:* \" + request.content.culprit\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies on Ubuntu\nDESCRIPTION: Installs essential packages needed for Rocket.Chat including curl, build-essential, and graphicsmagick\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-ubuntu.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y curl build-essential graphicsmagick\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy Server for SSL Reverse Proxy\nDESCRIPTION: Command to download and install Caddy server for use as an SSL reverse proxy with automatic Let's Encrypt certificate provisioning.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/configuring-ssl-reverse-proxy.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://getcaddy.com | bash\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB and Starting Services\nDESCRIPTION: Sets up MongoDB storage engine, replication, and starts required services\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-on-kali.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo sed -i \"s/^#  engine:/  engine: wiredTiger/\"  /etc/mongod.conf\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo sed -i \"s/^#replication:/replication:\\n  replSetName: rs01/\" /etc/mongod.conf\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable mongod && sudo systemctl start mongod\n```\n\nLANGUAGE: bash\nCODE:\n```\nmongo --eval \"printjson(rs.initiate())\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable rocketchat && sudo systemctl start rocketchat\n```\n\n----------------------------------------\n\nTITLE: Moving Rocket.Chat to Installation Directory\nDESCRIPTION: Moves the extracted Rocket.Chat files to the /opt directory\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-ubuntu.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv /tmp/bundle /opt/Rocket.Chat\n```\n\n----------------------------------------\n\nTITLE: Handling GitLab Build Event in JavaScript\nDESCRIPTION: This function processes a GitLab build event and formats it for Rocket.Chat notification. It includes details about the build name, status, and project.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/integrations/gitlab.md#2025-04-06_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbuildEvent(data) {\n    const user = {\n        name: data.user_name,\n        avatar_url: data.user_avatar\n    };\n\n    return {\n        content: {\n            username: `gitlab/${data.repository.name}`,\n            icon_url: '',\n            attachments: [\n                makeAttachment(user, `build named *${data.build_name}* returned *${data.build_status}* for [${data.project_name}](${data.repository.homepage})`, this.createColor(data.build_status))\n            ]\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Start Rocket.Chat Service\nDESCRIPTION: Command to start the Rocket.Chat service after completing the update\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/updating-rocket.chat.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start rocketchat\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Rocket.Chat Snap Services\nDESCRIPTION: This command checks the current status of all services provided by the Rocket.Chat Snap package. It shows whether each service (MongoDB, Caddy, Rocket.Chat) is running or not.\nSOURCE: https://github.com/RocketChat/docs/blob/main/resources/frequently-asked-questions/deployment-faq/snaps-faq.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnap services rocketchat-server\n```\n\n----------------------------------------\n\nTITLE: Inviting Mod Bot to Private Room\nDESCRIPTION: Command to invite the mod-perspective.bot user to a private room to enable content moderation in that room. This is necessary because the app will not report messages or operate in private rooms by default due to privacy considerations.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/content-moderation-apps/mod-perspective-app/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/invite mod-perspective.bot\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure\nDESCRIPTION: Commands to create necessary directories for Rocket.Chat and MongoDB\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/aliyun.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /home/rocketchat\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /home/rocketchat\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir data\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir dump\n```\n\n----------------------------------------\n\nTITLE: Telegram Message Formatting Code Options\nDESCRIPTION: Code options available for text formatting in Telegram messages, including None, Html, Markdown, and MarkdownV2 formats.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/omnichannel-apps/telegram-app/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nNone\nHtml\nMarkdown\nMarkdownV2\n```\n\n----------------------------------------\n\nTITLE: Adding Rocket.Chat Helm Repository\nDESCRIPTION: Command to add the official Rocket.Chat helm repository to your local system for deployment.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/microservices.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add rocketchat https://rocketchat.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Building Meteor Development Bundle\nDESCRIPTION: Commands for cloning and building the FreeBSD-compatible Meteor development bundle.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/unsupported-methods/freebsd/README.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd $HOME\n$ git clone -b freebsd https://github.com/williambr/meteor\n$ cd meteor\n$ ./scripts/build-mongo-for-dev-bundle.sh\n$ ./scripts/build-node-for-dev-bundle.sh\n$ ./scripts/generate-dev-bundle.sh\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB Backup Command Structure\nDESCRIPTION: Basic command structure for backing up a MongoDB standalone instance using mongodump. This command assumes the database is on localhost:27017 with no authentication if no options are specified.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-backup-and-restore.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmongodump <options> <connection-string>\n```\n\n----------------------------------------\n\nTITLE: Using Template Tags for Username Field in LDAP Configuration\nDESCRIPTION: Example of using template tags to create a username format from LDAP fields. This snippet demonstrates how to combine the given name and surname fields to generate a username in the format 'firstname.lastname'.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/authentication/ldap/ldap-data-sync-settings.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#{givenName}.#{sn}\n```\n\n----------------------------------------\n\nTITLE: Querying Node.js Version via API Using curl\nDESCRIPTION: Command line example showing how to query the Rocket.Chat releases API using curl and jq to retrieve the supported Node.js version for the latest release.\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/check-node.js-version.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n~ via  v12.22.11 took 25s\n➜ curl https://releases.rocket.chat/latest/info -s | jq '.nodeVersion' -r\n14.18.3\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Policy Archive\nDESCRIPTION: Markdown structure for organizing and displaying Rocket.Chat's policy documentation, including collapsible sections for notices and file attachments for various policy documents.\nSOURCE: https://github.com/RocketChat/docs/blob/main/customer-center/legal-center/historical-agreements-and-policy-archive.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: >\n  Rocket.Chat is committed to transparency as part of its values. As such, we\n  provide previous versions of our Agreements and Policies.\n---\n\n# Historical Agreements and Policy Archive\n\n<details>\n\n<summary>NOTICES AND ANNOUNCEMENTS</summary>\n\n**Professional Services Agreement Updates:** Effective today, revisions to our Professional Services Agreement are in force for new contracts. We have made updates to Clause 8 concerning intellectual property rights, along with a refinement of the language in Clause 2.2.\n\n**Privacy Policy Updates:** As of October 20th, 2023. These updates will be effective from today, except for the changes related to  \"[workspace tracking and statistics data](historical-agreements-and-policy-archive.md#the-type-of-data-we-collect),\" which will be implemented upon the release of Rocket.Chat version 6.5.\n\n[**Deprecation Notice:**](https://www.rocket.chat/blog/deprecation-notice-cloud-services-mobile-and-desktop-apps-for-legacy-unsupported-versions) As of June 27, 2023, Rocket.Chat, we announce that effective October 1, 2023, support will be discontinued for legacy unsupported versions.\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Example File\nDESCRIPTION: Command to copy the example environment file to create a new .env file if you've cloned the GitHub repository.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/deploy-with-docker-and-docker-compose.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB Services\nDESCRIPTION: Enables and starts MongoDB services with replication initialization.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/additional-deployment-methods/deploy-with-centos.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable mongod && sudo systemctl start mongod\n```\n\nLANGUAGE: bash\nCODE:\n```\nmongo --eval \"printjson(rs.initiate())\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB WiredTiger Configuration\nDESCRIPTION: Configuration snippet showing WiredTiger engine setting in MongoDB config file\nSOURCE: https://github.com/RocketChat/docs/blob/main/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[...]\nengine: wiredTiger\n[...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Piwik Sites in JSON Format\nDESCRIPTION: JSON configuration example for tracking data to multiple Piwik/Matomo websites simultaneously. Each object defines a tracker URL and site ID for a different Piwik instance.\nSOURCE: https://github.com/RocketChat/docs/blob/main/use-rocket.chat/workspace-administration/settings/analytics.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[ { \"trackerURL\" : \"https://my.piwik.domain2/\" , \"siteId\" : 42 }, { \"trackerURL\" : \"https://my.piwik.domain3/\" , \"siteId\" : 15 } ]\n```\n\n----------------------------------------\n\nTITLE: Starting Zoom Meetings with Slash Commands in Rocket.Chat\nDESCRIPTION: Commands for initiating Zoom meetings from within a Rocket.Chat room. Includes basic meeting creation and the option to specify a meeting topic.\nSOURCE: https://github.com/RocketChat/docs/blob/main/extend-rocket.chat-capabilities/rocket.chat-marketplace/rocket.chat-public-apps-guides/zoom/using-the-zoom-app.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/zoom start\n```\n\nLANGUAGE: bash\nCODE:\n```\n/zoom start <topic>\n```\n\nLANGUAGE: bash\nCODE:\n```\n/zoom start Designers Daily Standup\n```\n\n----------------------------------------\n\nTITLE: Adding Rocket.Chat Templates to OpenShift\nDESCRIPTION: Commands to clone the Rocket.Chat OpenShift repository and add templates and ImageStream to the OpenShift namespace. This prepares the necessary configurations for deployment.\nSOURCE: https://github.com/RocketChat/docs/blob/main/deploy/deploy-rocket.chat/scaling-rocket.chat/automation-tools/openshift.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rimolive/rocketchat-openshift\noc create -n openshift -f rocket-chat-is.json\noc create -n openshift -f rocket-chat-ephemeral.json\n```"
  }
]