[
  {
    "owner": "bucketeer-io",
    "repo": "bucketeer",
    "content": "TITLE: Installing and Running Bucketeer Console Project\nDESCRIPTION: Steps to clone the repository, install dependencies, and run the project in development mode.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/dashboard/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Clone the repository locally.\n2. Run `yarn install`.\n3. Run `yarn start` for development mode.\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Indexes for Pagination Performance\nDESCRIPTION: Defines essential MongoDB indexes to optimize pagination performance, focusing on created_at and feature_id fields that are commonly used in sorting and filtering operations.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Primary indexes for pagination\ndb.features.createIndex({ created_at: -1, _id: 1 })\ndb.evaluations.createIndex({ feature_id: 1, created_at: -1 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-based Pagination in MongoDB\nDESCRIPTION: Demonstrates cursor-based pagination implementation in MongoDB using the $gt operator on _id for efficient paging through large datasets with consistent performance.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  find: \"collection_name\",\n  sort: { _id: 1 },\n  limit: pageSize,\n  filter: {\n    _id: { $gt: lastSeenId }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube and Dependent Services for Bucketeer Development\nDESCRIPTION: This command sets up Minikube and services that Bucketeer depends on, including MySQL, Redis, Google Pub/Sub Emulator, and Google Big Query Emulator. It also creates necessary database tables and configures host entries.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/DEVELOPMENT.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake start-minikube\n```\n\n----------------------------------------\n\nTITLE: Converting Ordered Feature Query from SQL to MongoDB\nDESCRIPTION: Shows how to convert a SQL query that orders features by creation date into an equivalent MongoDB query with sorting.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- SQL\nSELECT * FROM feature \nWHERE environment_namespace = 'default'\nORDER BY created_at DESC;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n-- MongoDB\ndb.feature.find({\n  environment_namespace: \"default\"\n}).sort({\n  created_at: -1\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Evaluation Events Table with TimescaleDB\nDESCRIPTION: This snippet creates an evaluation_events table, converts it to a TimescaleDB hypertable, and sets up compression and retention policies for efficient time-series data management.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Create regular table first\nCREATE TABLE evaluation_events (\n    id VARCHAR(255),\n    environment_id VARCHAR(255),\n    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,\n    feature_id VARCHAR(255),\n    feature_version INTEGER,\n    user_id VARCHAR(255),\n    user_data JSONB,\n    variation_id VARCHAR(255),\n    reason VARCHAR(255),\n    tag VARCHAR(255),\n    source_id VARCHAR(255)\n);\n\n-- Convert to hypertable with 1 month chunks\nSELECT create_hypertable('evaluation_events', 'timestamp',\n    chunk_time_interval => INTERVAL '1 month');\n\n-- Create compression policy\nALTER TABLE evaluation_events SET (\n    timescaledb.compress,\n    timescaledb.compress_segmentby = 'environment_id,feature_id',\n    timescaledb.compress_orderby = 'timestamp DESC'\n);\n\n-- Automatically compress chunks older than 7 days\nSELECT add_compression_policy('evaluation_events', \n    INTERVAL '7 days');\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to AWS SNS in Go\nDESCRIPTION: Implementation of an AWS SNS message publisher in Go that demonstrates how to publish multiple messages to an SNS topic sequentially. The code includes a service interface for testing, configuration setup, and error handling.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0039-research-cloud-services.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/sns\"\n)\n\n// SNSPublishAPI defines the interface for the Publish function.\n// We use this interface to test the function using a mocked service.\ntype SNSPublishAPI interface {\n\tPublish(ctx context.Context,\n\t\tparams *sns.PublishInput,\n\t\toptFns ...func(*sns.Options)) (*sns.PublishOutput, error)\n}\n\n// PublishMessage publishes a message to an Amazon Simple Notification Service (Amazon SNS) topic\n// Inputs:\n//     c is the context of the method call, which includes the Region\n//     api is the interface that defines the method call\n//     input defines the input arguments to the service call.\n// Output:\n//     If success, a PublishOutput object containing the result of the service call and nil\n//     Otherwise, nil and an error from the call to Publish\nfunc PublishMessage(c context.Context, api SNSPublishAPI, input *sns.PublishInput) (*sns.PublishOutput, error) {\n\treturn api.Publish(c, input)\n}\n\nfunc main() {\n\tmsg := flag.String(\"m\", \"\", \"The message to send to the subscribed users of the topic\")\n\ttopicARN := flag.String(\"t\", \"\", \"The ARN of the topic to which the user subscribes\")\n\n\tflag.Parse()\n\n\tif *msg == \"\" || *topicARN == \"\" {\n\t\tfmt.Println(\"You must supply a message and topic ARN\")\n\t\tfmt.Println(\"-m MESSAGE -t TOPIC-ARN\")\n\t\treturn\n\t}\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(\"ap-northeast-1\"))\n\tif err != nil {\n\t\tpanic(\"configuration error, \" + err.Error())\n\t}\n\n\tclient := sns.NewFromConfig(cfg)\n\n\tmsgs := []string{\"1\", \"2\", \"3\", \"4\", \"5\"}\n\n\tfor _, m := range msgs {\n\t\tinput := &sns.PublishInput{\n\t\t\tMessage:  &m,\n\t\t\tTopicArn: topicARN,\n\t\t}\n\n\t\t_, err := PublishMessage(context.TODO(), client, input)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Got an error publishing the message:\")\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t}\n\n\t// fmt.Println(\"Message ID: \" + *result.MessageId)\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying All Bucketeer Services\nDESCRIPTION: This command deploys all Bucketeer services at once in the development environment. It uses Helm to manage the deployment process.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/DEVELOPMENT.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake deploy-bucketeer\n```\n\n----------------------------------------\n\nTITLE: AWS SQS Message Processing Implementation in Go\nDESCRIPTION: Demonstrates how to interact with Amazon SQS queues including getting queue URLs, receiving messages, and deleting messages. Uses AWS SDK v2 for Go with proper interface definitions and error handling.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0039-research-cloud-services.md#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/sqs\"\n\t\"github.com/aws/aws-sdk-go-v2/service/sqs/types\"\n)\n\n// SQSReceiveMessageAPI defines the interface for the GetQueueUrl function.\n// We use this interface to test the function using a mocked service.\ntype SQSReceiveMessageAPI interface {\n\tGetQueueUrl(ctx context.Context,\n\t\tparams *sqs.GetQueueUrlInput,\n\t\toptFns ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error)\n\n\tReceiveMessage(ctx context.Context,\n\t\tparams *sqs.ReceiveMessageInput,\n\t\toptFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error)\n}\n\ntype SQSDeleteMessageAPI interface {\n\tGetQueueUrl(ctx context.Context,\n\t\tparams *sqs.GetQueueUrlInput,\n\t\toptFns ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error)\n\n\tDeleteMessage(ctx context.Context,\n\t\tparams *sqs.DeleteMessageInput,\n\t\toptFns ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error)\n}\n\n// GetQueueURL gets the URL of an Amazon SQS queue.\n// Inputs:\n//     c is the context of the method call, which includes the AWS Region.\n//     api is the interface that defines the method call.\n//     input defines the input arguments to the service call.\n// Output:\n//     If success, a GetQueueUrlOutput object containing the result of the service call and nil.\n//     Otherwise, nil and an error from the call to GetQueueUrl.\nfunc GetQueueURL(c context.Context, api SQSReceiveMessageAPI, input *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error) {\n\treturn api.GetQueueUrl(c, input)\n}\n\n// RemoveMessage deletes a message from an Amazon SQS queue.\n// Inputs:\n//     c is the context of the method call, which includes the AWS Region.\n//     api is the interface that defines the method call.\n//     input defines the input arguments to the service call.\n// Output:\n//     If success, a DeleteMessageOutput object containing the result of the service call and nil.\n//     Otherwise, nil and an error from the call to DeleteMessage.\nfunc RemoveMessage(c context.Context, api SQSDeleteMessageAPI, input *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {\n\treturn api.DeleteMessage(c, input)\n}\n\n// GetMessages gets the most recent message from an Amazon SQS queue.\n// Inputs:\n//     c is the context of the method call, which includes the AWS Region.\n//     api is the interface that defines the method call.\n//     input defines the input arguments to the service call.\n// Output:\n//     If success, a ReceiveMessageOutput object containing the result of the service call and nil.\n//     Otherwise, nil and an error from the call to ReceiveMessage.\nfunc GetMessages(c context.Context, api SQSReceiveMessageAPI, input *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {\n\treturn api.ReceiveMessage(c, input)\n}\n\nfunc main() {\n\tqueue := flag.String(\"q\", \"\", \"The name of the queue\")\n\ttimeout := flag.Int(\"t\", 5, \"How long, in seconds, that the message is hidden from others\")\n\tflag.Parse()\n\n\tif *queue == \"\" {\n\t\tfmt.Println(\"You must supply the name of a queue (-q QUEUE)\")\n\t\treturn\n\t}\n\n\tif *timeout < 0 {\n\t\t*timeout = 0\n\t}\n\n\tif *timeout > 12*60*60 {\n\t\t*timeout = 12 * 60 * 60\n\t}\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(\"ap-northeast-1\"))\n\tif err != nil {\n\t\tpanic(\"configuration error, \" + err.Error())\n\t}\n\n\tclient := sqs.NewFromConfig(cfg)\n\n\tgQInput := &sqs.GetQueueUrlInput{\n\t\tQueueName: queue,\n\t}\n\n\t// Get URL of queue\n\turlResult, err := GetQueueURL(context.TODO(), client, gQInput)\n\tif err != nil {\n\t\tfmt.Println(\"Got an error getting the queue URL:\")\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tqueueURL := urlResult.QueueUrl\n\n\tgMInput := &sqs.ReceiveMessageInput{\n\t\tMessageAttributeNames: []string{\n\t\t\tstring(types.QueueAttributeNameAll),\n\t\t},\n\t\tQueueUrl:            queueURL,\n\t\tMaxNumberOfMessages: 1,\n\t\tVisibilityTimeout:   int32(*timeout),\n\t}\n\n\tmsgResult, err := GetMessages(context.TODO(), client, gMInput)\n\tif err != nil {\n\t\tfmt.Println(\"Got an error receiving messages:\")\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfor _, m := range msgResult.Messages {\n\t\tfmt.Println(\"Message ID:     \" + *m.MessageId)\n\t\tfmt.Println(\"Message Handle: \" + *m.ReceiptHandle)\n\t\tfmt.Println(\"Message Handle: \" + *m.Body)\n\n\t\tdMInput := &sqs.DeleteMessageInput{\n\t\t\tQueueUrl:      queueURL,\n\t\t\tReceiptHandle: m.ReceiptHandle,\n\t\t}\n\n\t\t_, err = RemoveMessage(context.TODO(), client, dMInput)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Got an error deleting the message:\")\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Bucketeer\nDESCRIPTION: This command runs the E2E tests for the Bucketeer project. It sets up various environment variables including URLs, certificate paths, and API keys before executing the tests.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/DEVELOPMENT.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nWEB_GATEWAY_URL=web-gateway.bucketeer.io \\\nGATEWAY_URL=api-gateway.bucketeer.io \\\nWEB_GATEWAY_CERT_PATH=/workspaces/bucketeer/tools/dev/cert/tls.crt \\\nGATEWAY_CERT_PATH=/workspaces/bucketeer/tools/dev/cert/tls.crt \\\nSERVICE_TOKEN_PATH=/workspaces/bucketeer/tools/dev/cert/service-token \\\nAPI_KEY_PATH=/workspaces/bucketeer/tools/dev/cert/api_key_client \\\nAPI_KEY_SERVER_PATH=/workspaces/bucketeer/tools/dev/cert/api_key_server \\\nENVIRONMENT_ID=e2e \\\nORGANIZATION_ID=default \\\nmake e2e\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Interface and Service Structure in Go\nDESCRIPTION: This snippet demonstrates how to define an interface for account storage operations and structure an API service using this interface. It also shows how to implement transaction handling using a DB client.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/new-storage-architecture.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Define the API required for storage with an interface\ntype AccountStorage interface {\n\tCreateAccount(ctx context.Context, a *domain.AccountV2) error\n\tUpdateAccount(ctx context.Context, a *domain.AccountV2) error\n\tDeleteAccount(ctx context.Context, a *domain.AccountV2) error\n\tGetAccount(ctx context.Context, email, organizationID string) (*domain.AccountV2, error)\n  ...\n}\n\n// The API service maintains instances based on the required storage interface.\ntype AccountService struct {\n\taccountStorage    v2.AccountStorage     // storage instance\n\tpublisher         publisher.Publisher\n\topts              *options\n\tlogger            *zap.Logger\n}\n\nfunc (s *AccountService) updateAccount(\n\tctx context.Context,\n\teditor *eventproto.Editor,\n\temail, organizationID string,\n) error {\n  // No DB operations such as transaction processing are performed, just call Update.\n\treturn s.accountStorage.UpdateAccount(ctx, account)\n}\n\ntype Client interface {\n  // Use when transaction processing is required\n\tRunInTransaction(ctx context.Context, tx Transaction, f func() error) error\n}\n\nfunc (c *client) RunInTransaction(ctx context.Context, f func() error) error {\n\ttx, err := c.BeginTx(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"client: begin tx: %w\", err)\n\t}\n\tctx = context.WithValue(ctx, transactionKey, tx)\n\treturn c.runInTransaction(ctx, tx, f)\n}\n\nfunc (c *client) runInTransaction(ctx context.Context, tx Transaction, f func() error) error {\n\tvar err error\n\tdefer record()(operationRunInTransaction, &err)\n\tdefer func() {\n\t\tif err != nil {\n\t\t\ttx.Rollback() // nolint:errcheck\n\t\t}\n\t}()\n\tif err = f(); err == nil {\n\t\terr = tx.Commit()\n\t}\n\treturn err\n}\n\n// Called when executing a query on the storage layer\nfunc (c *client) QueryExecer(ctx context.Context) mysql.QueryExecer {\n\ttx, ok := ctx.Value(transactionKey).(mysql.Transaction)\n\tif ok {\n\t\treturn tx\n\t}\n\treturn c\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Time-Series Queries with TimescaleDB\nDESCRIPTION: This snippet provides examples of efficient time-series queries using TimescaleDB features, including time-range queries and continuous aggregates.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- Efficient time-range queries\nSELECT feature_id, COUNT(*)\nFROM evaluation_events\nWHERE timestamp >= NOW() - INTERVAL '7 days'\nGROUP BY feature_id;\n\n-- Using continuous aggregates\nSELECT day, feature_id, total_evaluations\nFROM daily_evaluation_metrics\nWHERE day >= NOW() - INTERVAL '30 days'\nORDER BY day DESC;\n```\n\n----------------------------------------\n\nTITLE: Implementing ListOptions for Query Condition Specification in Go\nDESCRIPTION: This code defines structures for specifying list options, filters, and ordering in queries. It demonstrates how to use these structures to create a flexible and reusable way of specifying query conditions at the API layer.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/new-storage-architecture.md#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Options for specifying conditions structure\ntype ListOptions struct {\n\tLimit   int\n\tFilters []ListFilter\n\tOrders  []Order\n\tCursor  string\n}\n\ntype ListFilter struct {\n\tField    string\n\tOperator Operator\n\tValue    interface{}\n}\n\ntype Operator int\n\nconst (\n\tOperatorEqual = 1\n\tOperatorNotEqual\n\t....\n)\n\ntype Order struct {\n\tField     string\n\tDirection OrderDirection\n}\n\ntype OrderDirection int\n\nconst (\n\tAsc OrderDirection = 1\n\tDesc\n)\n\n\n// Example\nListOptions{\n\tLimit: 10,\n\tFilters: []ListFilter{\n\t\t{\n\t\t\tField:    \"organization_id\",\n\t\t\tOperator: OperatorEqual,\n\t\t\tValue:    \"organization_id-1\",\n\t\t},\n\t},\n\tOrders: []Order{\n\t\t{\n\t\t\tField: \"email\",\n\t\t\tDirection: Asc,\n\t\t},\n\t},\n}\n\n// Example for List\ntype AccountStorage interface {\n\tListAccounts(\n\t\tctx context.Context,\n\t\tlistOptions *storage.ListOptions,   // Condition specification options\n\t) ([]*proto.AccountV2, int, int64, error)\n}\n\nfunc (s *accountStorage) ListAccountsMySQL(\n\tctx context.Context,\n\tlistOptions *storage.ListOptions,\n) ([]*proto.AccountV2, int, int64, error) {\n  whereParts := s.getWhereParts(listOptions.filters)   // Convert to the Where clause\n\twhereSQL, whereArgs := mysql.ConstructWhereSQLString(whereParts)\n\n\torderBySQL := mysql.ConstructOrderBySQLString(listOptions.orders)  //Convert to the Order clause\n\tlimitOffsetSQL := mysql.ConstructLimitOffsetSQLString(listOptions.limit, listOptions.cursor)\n\tquery := fmt.Sprintf(\n\t\tselectAccountsV2SQL,\n\t\twhereSQL,\n\t\torderBySQL,\n\t\tlimitOffsetSQL,\n\t)\n\trows, err := s.qe(ctx).QueryContext(ctx, query, whereArgs...)\n\n・・・・\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Segment User Count Query from SQL to MongoDB\nDESCRIPTION: Shows how to transform a SQL query with LEFT JOIN and COUNT for segment user statistics into a MongoDB aggregation pipeline with $lookup and $size.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- SQL\nSELECT s.*, COUNT(su.user_id) as user_count\nFROM segment s\nLEFT JOIN segment_user su ON s.id = su.segment_id\nWHERE s.environment_namespace = 'default'\nAND s.deleted = false\nGROUP BY s.id;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n-- MongoDB\ndb.segment.aggregate([\n  {\n    $match: {\n      environment_namespace: \"default\",\n      deleted: false\n    }\n  },\n  {\n    $lookup: {\n      from: \"segment_user\",\n      localField: \"id\",\n      foreignField: \"segment_id\",\n      as: \"users\"\n    }\n  },\n  {\n    $project: {\n      id: 1,\n      name: 1,\n      description: 1,\n      rules: 1,\n      user_count: { $size: \"$users\" }\n    }\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Flag Triggers Table in SQL\nDESCRIPTION: SQL script to create the 'flag_triggers' table for storing flag trigger data. The table includes fields for trigger details, feature association, and metadata.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/autoops-flag-trigger.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `flag_triggers`\n(\n    `id`                    varchar(255) NOT NULL,\n    `feature_id`            varchar(255) NOT NULL,\n    `environment_namespace` varchar(255) NOT NULL,\n    `name`                  VARCHAR(255) NOT NULL default '',\n    `type`                  int          NOT NULL,\n    `action`                tinyint(1) NOT NULL,\n    `description`           text         NOT NULL default '',\n    `trigger_times`         int          NOT NULL,\n    `last_triggered_at`     bigint       NOT NULL,\n    `uuid`                  varchar(512) NOT NULL default '',\n    `disabled`              tinyint(1) NOT NULL DEFAULT '0',\n    `deleted`               tinyint(1) NOT NULL DEFAULT '0',\n    `created_at`            bigint       NOT NULL,\n    `updated_at`            bigint       NOT NULL,\n    PRIMARY KEY (`id`, `environment_namespace`),\n    CONSTRAINT `foreign_flag_triggers_feature_id_environment_namespace` FOREIGN KEY (`feature_id`, `environment_namespace`) REFERENCES `feature` (`id`, `environment_namespace`)\n)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Creating Progressive Rollout Database Table in SQL\nDESCRIPTION: SQL schema definition for the ops_progressive_rollout table that stores progressive rollout configurations with foreign key constraints.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0041-progressive-rollout.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `ops_progressive_rollout` (\n  `id` VARCHAR(255) NOT NULL,\n  `feature_id` VARCHAR(255) NOT NULL,\n  `clause` JSON NOT NULL,\n  `status` INT(11) NOT NULL,\n  `type` INT(11) NOT NULL,\n  `created_at` BIGINT(20) NOT NULL,\n  `updated_at` BIGINT(20) NOT NULL,\n  `environment_namespace` VARCHAR(255) NOT NULL,\n  PRIMARY KEY (`id`, `environment_namespace`),\n  CONSTRAINT `foreign_progressive_rollout_feature_id_environment_namespace`\n    FOREIGN KEY (`feature_id`, `environment_namespace`)\n    REFERENCES `feature` (`id`, `environment_namespace`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscriber Run Method in Go\nDESCRIPTION: Run method implementation for the Subscriber struct that handles message pulling and processing using error groups for concurrent execution.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/batch-service-pubsub-improvement.md#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage subscriber\n\nfunc (s Subscriber) Run(ctx context.Context) {\n\tpuller := createPuller(ctx, s.configuration)\n\tgroup := errgroup.Group{}\n\tgroup.Go(func() error {\n\t\tpuller.Pull(ctx, func(ctx context.Context, msg *puller.Message) {\n\t\t\ts.processor(msg)\n\t\t})\n\t\treturn nil\n\t})\n\tgroup.Go(func() error {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase msg, ok := <-puller.MessageCh():\n\t\t\t\tif !ok {\n\t\t\t\t\tlogger.error(\"receive msg error\")\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\ts.processor(msg)\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning Redis Keys for Deletion\nDESCRIPTION: Demonstrates how to use the Redis SCAN command to retrieve keys matching a specific pattern for deletion. This is part of the data deletion workflow to remove keys older than 31 days.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0002-improve-evaluation-count.md#2025-04-14_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nscan 0 \"ec:daily_timestamp*\"\n```\n\n----------------------------------------\n\nTITLE: Converting Project-Organization Join Query from SQL to MongoDB\nDESCRIPTION: Demonstrates how to transform a SQL join query between projects and organizations into a MongoDB aggregation pipeline using $lookup and $unwind operators.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- SQL\nSELECT p.*, o.name as org_name \nFROM project p\nJOIN organization o ON p.organization_id = o.id\nWHERE p.disabled = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n-- MongoDB\ndb.project.aggregate([\n  {\n    $match: { disabled: false }\n  },\n  {\n    $lookup: {\n      from: \"organization\",\n      localField: \"organization_id\",\n      foreignField: \"id\",\n      as: \"organization\"\n    }\n  },\n  {\n    $unwind: \"$organization\"\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiPubSub Methods in Go\nDESCRIPTION: Implementation of constructor and management methods for MultiPubSub including subscriber addition and start functionality.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/batch-service-pubsub-improvement.md#2025-04-14_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage subscriber\n\nfunc NewMultiPubSub(logger zap.logger) *MultiPubSub {\n\treturn *MultiPubSub{\n\t\tsubscribers: make([]Subscriber),\n\t\tlogger:      logger,\n\t}\n}\n\nfunc (m MultiPubSub) AddSubscriber(subscriber Subscriber) {\n\tm.subscribers = append(m.subscribers, subscriber)\n}\n\nfunc (m MultiPubSub) Start(multiPubSub *MultiPubSub) {\n\tfor _, subscriber := range multiPubSub.subscribers {\n\t\tgo subscriber.Start()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Amazon ElastiCache with Redis and MySQL in Go\nDESCRIPTION: Demonstrates how to implement caching using Amazon ElastiCache with Redis and MySQL database integration. The code shows cache fetching, database querying, and cache updating patterns with proper error handling and JSON serialization.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0039-research-cloud-services.md#2025-04-14_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Based on https://github.com/aws-samples/amazon-elasticache-samples\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/go-redis/redis/v8\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar ctx = context.Background()\n\ntype redisClient struct {\n\tredis *redis.Client\n\tmysql *sql.DB\n}\n\nfunc (c *redisClient) fetch(ctx context.Context, query string) (interface{}, error) {\n\tval, err := c.redis.Get(ctx, query).Bytes()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tsamples := []Sample{}\n\terr = json.Unmarshal(val, &samples)\n\treturn samples, err\n}\n\nvar dbName string = \"tutorial\"\nvar dbUser string = \"admin\"\nvar dbHost string = \"xxxxxxxxxxxxxxxxxxx.rds.amazonaws.com\"\nvar dbPort int = 3306\nvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\nvar dbPass = \"PASS\"\nvar query = \"SELECT * FROM planet\"\n\nfunc main() {\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?collation=utf8mb4_bin\",\n\t\tdbUser, dbPass, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trdb := redis.NewClient(&redis.Options{\n\t\tAddr: \"xxxxxxxxxxxxxxxxxxx.cache.amazonaws.com:6379\",\n\t})\n\n\tclient := redisClient{redis: rdb}\n\ta, err := client.redis.Ping(ctx).Result()\n\tfmt.Println(a)\n\n\tval, err := client.fetch(ctx, query)\n\tif err != nil {\n\t\tif err == redis.Nil {\n\t\t\tsamples := []Sample{}\n\t\t\tvar sample Sample\n\n\t\t\trows, err := db.Query(query)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tdefer rows.Close()\n\n\t\t\tfor rows.Next() {\n\t\t\t\tif err := rows.Scan(&sample.Id, &sample.Name); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tsamples = append(samples, sample)\n\t\t\t}\n\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\n\t\t\tfmt.Println(samples)\n\n\t\t\tdecoded, err := json.Marshal(samples)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tfmt.Printf(\"%s\\n\", decoded)\n\n\t\t\trdb.SetEX(ctx, query, string(decoded), 5*time.Second).Err()\n\t\t}\n\t}\n\tfmt.Println(\"key\", val)\n}\n\ntype Sample struct {\n\tId   string `json:\"id\"`\n\tName string `json:\"name\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Package-Level Error Generation in Go\nDESCRIPTION: Implementation of NewError() function that generates standardized error responses with GRPC status and details. Handles multiple error cases and supports additional metadata.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/move-i18n-logic-to-frontend.md#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewError(status *gstatus.Status, anoterDetailData ...map[string]string) error {\n\tdomain := \"account.bucketeer.io\"\n\tvar details []*errdetails.ErrorInfo\n\tvar reason string\n\tvar messageKey string\n\tvar metadatas []map[string]string\n\tif status == statusEmailIsEmpty {\n\t\treason = \"INVALID\"\n\t\tmessageKey = \"account.invalid.empty\"\n\t\tmetadatas = []map[string]string{\n\t\t\t{\n\t\t\t\t\"messageKey\": messageKey,\n\t\t\t\t\"feild\":      \"email\",\n\t\t\t},\n\t\t}\n\t} else if status == statusInvalidEmail {\n\t\treason = \"INVALID\"\n\t\tmessageKey = \"account.invalid.format\"\n\t\tmetadatas = []map[string]string{\n\t\t\t{\n\t\t\t\t\"messageKey\": messageKey,\n\t\t\t\t\"feild\":      \"email\",\n\t\t\t},\n\t\t}\n\t} else if {\n          ...\n        }\n\n        // when adding multiple details\n\tfor _, md := range anoterDetailData {\n\t\tfor k, v := range md {\n\t\t\tmetadatas = append(metadatas, map[string]string{\n\t\t\t\t\"messageKey\": messageKey,\n\t\t\t\tk:            v,\n\t\t\t})\n\t\t}\n\t}\n\n\tfor _, md := range metadatas {\n\t\tdetails = append(details, &errdetails.ErrorInfo{\n\t\t\tReason:   reason,\n\t\t\tDomain:   domain,\n\t\t\tMetadata: md,\n\t\t})\n\t}\n\n\tdetailMessages := make([]protoiface.MessageV1, len(details))\n\tfor i, d := range details {\n\t\tdetailMessages[i] = d\n\t}\n\tdt, err := status.WithDetails(detailMessages...)\n\tif err != nil {\n\t\treturn statusInternal.Err()\n\t}\n\treturn dt.Err()\n}\n```\n\n----------------------------------------\n\nTITLE: RDS IAM Authentication Implementation in Go\nDESCRIPTION: Demonstrates how to connect to an AWS RDS instance using IAM authentication with SSL/TLS security. Includes certificate handling and token generation.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0039-research-cloud-services.md#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/rds/auth\"\n\t\"github.com/go-sql-driver/mysql\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype Sample struct {\n\tid  string\n\tnum int\n}\n\nfunc main() {\n\n\tvar dbName string = \"mydb\"\n\tvar dbUser string = \"iam_user\"\n\tvar dbHost string = \"xxxxxxxxxxxxxxxxxxxx.rds.amazonaws.com\"\n\tvar dbPort int = 3306\n\tvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\n\tvar region string = \"ap-northeast-1\"\n\tvar pemFile string = \"xxxxxxxxxx.pem\"\n\n\tcaCertPool := x509.NewCertPool()\n\tpem, err := ioutil.ReadFile(pemFile)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif ok := caCertPool.AppendCertsFromPEM(pem); !ok {\n\t\tpanic(\"fail\")\n\t}\n\tmysql.RegisterTLSConfig(\"rds\", &tls.Config{\n\t\tClientCAs:          caCertPool,\n\t\tInsecureSkipVerify: true,\n\t})\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tpanic(\"configuration error: \" + err.Error())\n\t}\n\n\tauthenticationToken, err := auth.BuildAuthToken(\n\t\tcontext.TODO(), dbEndpoint, region, dbUser, cfg.Credentials)\n\tif err != nil {\n\t\tpanic(\"failed to create authentication token: \" + err.Error())\n\t}\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?allowCleartextPasswords=true&tls=rds\",\n\t\tdbUser, authenticationToken, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(\"hoge\")\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar sample Sample\n\n\terr = db.QueryRow(\"select * from sample where id = 'hogehoge';\").Scan(&sample.id, &sample.num)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(sample.id, sample.num)\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Auto Ops Rule Table Schema in SQL\nDESCRIPTION: SQL script to alter the 'auto_ops_rule' table structure, adding new columns for status and stopped_at, while removing triggered_at and deleted columns. This change supports the new multi-schedule feature implementation.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/multi-schedules.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `auto_ops_rule` (\n  `id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,\n  `feature_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,\n  `ops_type` int NOT NULL,\n  `clauses` json NOT NULL,\n  `status` int NOT NULL,                       # <-- add\n#  `triggered_at` bigint NOT NULL,                <-- delete\n  `created_at` bigint NOT NULL,\n  `updated_at` bigint NOT NULL,\n#  `deleted` tinyint(1) NOT NULL DEFAULT '0',     <-- delete\n  `stopped_at` bigint NOT NULL,                # <-- add\n  `environment_namespace` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,\n  PRIMARY KEY (`id`,`environment_namespace`),\n  KEY `foreign_auto_ops_rule_feature_id_environment_namespace` (`feature_id`,`environment_namespace`),\n  CONSTRAINT `foreign_auto_ops_rule_feature_id_environment_namespace` FOREIGN KEY (`feature_id`, `environment_namespace`) REFERENCES `feature` (`id`, `environment_namespace`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Access for NodePort, LoadBalancer, and ClusterIP\nDESCRIPTION: This snippet provides conditional logic to handle different Kubernetes service types and outputs the appropriate commands for accessing the service. It uses Helm templating to dynamically generate the configuration based on the service type specified in the values file.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/manifests/bucketeer/charts/api/templates/NOTES.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"api.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ template \"api.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template \"api.fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.externalPort }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app={{ template \"api.name\" . }},release={{ template \"api.fullname\" . }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl port-forward $POD_NAME 8080:80\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Creating API Key for Server SDK in Bucketeer\nDESCRIPTION: This command creates an API key for the Server SDK in the Bucketeer environment. It sets various environment variables and uses a make command to generate the key.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/DEVELOPMENT.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nWEB_GATEWAY_URL=web-gateway.bucketeer.io \\\nWEB_GATEWAY_CERT_PATH=/workspaces/bucketeer/tools/dev/cert/tls.crt \\\nSERVICE_TOKEN_PATH=/workspaces/bucketeer/tools/dev/cert/service-token \\\nAPI_KEY_NAME=\"e2e-test-$(date +%s)-server\" \\\nAPI_KEY_PATH=/workspaces/bucketeer/tools/dev/cert/api_key_server \\\nAPI_KEY_ROLE=SDK_SERVER \\\nENVIRONMENT_ID=e2e \\\nmake create-api-key\n```\n\n----------------------------------------\n\nTITLE: Adding API Key Metadata to Request Context in Go\nDESCRIPTION: Go code that adds API key maintainer information to the request context metadata before forwarding to the Web gRPC service. This enables tracking of who is using the API key.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/public-api-get-editor-for-audit-log.md#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconst APIKeyMaintainerMDKey string = \"apikey-maintainer\"\nconst APIKeyNameMDKey string = \"apikey-name\"\nconst APIKeyTokenMDKey string = \"apikey-token\"\n\nheaderMetadata := metadata.New(map[string]string{\n    APIKeyMaintainerMDKey: envAPIKey.ApiKey.Maintainer,\n    APIKeyNameMDKey:       envAPIKey.ApiKey.Name,\n    APIKeyTokenMDKey:      envAPIKey.ApiKey.APIKey,\n})\nctx = metadata.NewOutgoingContext(ctx, headerMetadata)\n```\n\n----------------------------------------\n\nTITLE: Implementing PubSub Subscription Management in Go\nDESCRIPTION: This code snippet demonstrates how to manage PubSub subscriptions in Go. It includes methods for subscribing, unsubscribing, and checking the running status of a PubSub puller.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/serverless-for-background-services.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"go.uber.org/zap\"\n\ntype Persister struct {\n\tclient pubsub.Client\n\topts   *options\n\tlogger *zap.Logger\n\tctx    context.Context\n\tcancel func()\n}\n\nfunc (p Persister) subscribe(ctx context.Context) {\n\tpuller := client.createPuller(ctx)\n\tcctx, cancel := context.WithCancel(ctx)\n\tp.cancel = cancel\n\tpuller.Run(cctx, func() {\n\t\t// process events\n\t})\n}\n\nfunc (p Persister) unsubscribe() {\n\tp.cancel()\n\tp.cancel = nil\n}\n\nfunc (p Persister) IsRunning() bool {\n\treturn p.cancel != nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MAU Table Schema in CloudSQL\nDESCRIPTION: SQL schema definition for the new MAU table with partitioning by yearmonth. Includes columns for user_id, yearmonth, source_id, event_count, timestamps, and environment namespace.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0003-improve-mau-count-speed.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `mau` (\n  `user_id` VARCHAR(255) NOT NULL,\n  `yearmonth` VARCHAR(6) NOT NULL,\n  `source_id` VARCHAR(30) NOT NULL,\n  `event_count` INT(11) UNSIGNED NOT NULL,\n  `created_at` BIGINT(20) NOT NULL,\n  `updated_at` BIGINT(20) NOT NULL,\n  `environment_namespace` VARCHAR(255) NOT NULL,\n  PRIMARY KEY (`environment_namespace`, `yearmonth`, `source_id`, `user_id`)\n)\nPARTITION BY RANGE COLUMNS(`yearmonth`) (\n  PARTITION p202211 VALUES LESS THAN ('202212'),\n  PARTITION p202212 VALUES LESS THAN ('202301'),\n  PARTITION p202301 VALUES LESS THAN ('202302')\n);\n```\n\n----------------------------------------\n\nTITLE: Standardizing DB Client Usage in Storage Layer in Go\nDESCRIPTION: This snippet shows how to standardize the use of DB client instances in the storage layer. It demonstrates holding a MySQL client in the storage struct and using it for database operations.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/new-storage-architecture.md#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype accountStorage struct {\n\tclient mysql.Client  // MySQL Client\n}\n\nfunc (s *accountStorage) UpdateAccount(ctx context.Context, a *domain.AccountV2) error {\n  result, err := s.client.QueryExecer(ctx).ExecContext(\n                           ctx,\n                           updateAccountV2SQL,\n                           a.Name,\n                           a.FirstName,\n                           a.LastName,\n                           a.Language,\n                           a.AvatarImageUrl,\n                           a.AvatarFileType,\n                           a.AvatarImage,\n                           int32(a.OrganizationRole),\n                           mysql.JSONObject{Val: a.EnvironmentRoles},\n                           a.Disabled,\n                           a.UpdatedAt,\n                           a.LastSeen,\n                           mysql.JSONObject{Val: a.SearchFilters},\n                           a.Email,\n                           a.OrganizationId,\n                           )\n  if err != nil {\n    return err\n  }\n  rowsAffected, err := result.RowsAffected()\n  if err != nil {\n    return err\n  }\n  if rowsAffected != 1 {\n    return ErrAccountUnexpectedAffectedRows\n  }\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Converting MySQL Data Types to PostgreSQL\nDESCRIPTION: This snippet demonstrates how to convert common MySQL data types to their PostgreSQL equivalents. It covers unsigned integers, datetime, and boolean types.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- MySQL\nUNSIGNED INTEGER -> INTEGER CHECK (column_name >= 0)\nDATETIME -> TIMESTAMP WITH TIME ZONE\nBOOL -> BOOLEAN\n```\n\n----------------------------------------\n\nTITLE: Defining CreateFlagTriggerRequest Message in Protocol Buffers\nDESCRIPTION: Protocol Buffers definition for the CreateFlagTriggerRequest message used in the CreateFlagTrigger API endpoint. It includes fields for feature ID, environment namespace, name, type, action, and description.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/autoops-flag-trigger.md#2025-04-14_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nmessage CreateFlagTriggerRequest {\n    string feature_id = 1;\n    string environment_namespace = 2;\n    string name = 3;\n    int32 type = 4;\n    int32 action = 5;\n    string description = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PubSub Configuration Structure in Go\nDESCRIPTION: Configuration struct that holds settings for PubSub subscriber including project details, subscription name, topic, and puller settings.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/batch-service-pubsub-improvement.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage subscriber\n\ntype Configuration struct {\n\tproject                      string\n\tsubscription                 string\n\ttopic                        string\n\tpullerNumGoroutines          int\n\tpullerMaxOutstandingMessages int\n\tpullerMaxOutstandingBytes    int\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscriber Structure in Go\nDESCRIPTION: Subscriber struct that combines configuration and processor for handling PubSub messages.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/batch-service-pubsub-improvement.md#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage subscriber\n\ntype Subscriber struct {\n\tname          string\n\tconfiguration Configuration\n\tprocessor     Processor\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAPIKeyRequest Protobuf Message with Maintainer Field\nDESCRIPTION: Protobuf message definition for the CreateAPIKeyRequest that includes a new 'maintainer' field to store the email of the API key maintainer.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/public-api-get-editor-for-audit-log.md#2025-04-14_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CreateAPIKeyRequest {\n  string environment_namespace = 1;\n  string name = 2;\n  account.APIKey.Role role = 3;\n  string maintainer = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Protocol Buffer Definitions for GetEvaluations in Bucketeer\nDESCRIPTION: Updates to the protocol buffer definitions for GetEvaluationsRequest, GetEvaluationsResponse, and UserEvaluations messages. Adds new fields for timestamp-based evaluations and handling archived features.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0042-evaluation-for-updated-features.md#2025-04-14_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetEvaluationsRequest {  \n  string tag = 1;  \n  user.User user = 2;  \n  string user_evaluations_id = 3;  \n  string feature_id = 4 [deprecated = true]; // instead, use GetEvaluation API  \n  bucketeer.event.client.SourceId source_id = 5;  \n  int64 evaluated_at = 6;  \n  bool is_user_attributes_updated = 7;  \n}\n\nmessage GetEvaluationsResponse {\n  feature.UserEvaluations.State state = 1;\n  feature.UserEvaluations evaluations = 2;\n  string user_evaluations_id = 3;\n} \n\nmessage UserEvaluations {\n  enum State {\n    QUEUED = 0;\n    PARTIAL = 1;\n    FULL = 2;\n  }\n  string id = 1;\n  repeated Evaluation evaluations = 2;\n  int64 created_at = 3;\n  repeated string archived_feature_ids = 4;\n  bool force_update = 5;    \n}\n```\n\n----------------------------------------\n\nTITLE: Adding Both API Key Maintainer and Editor to Context in Option 2\nDESCRIPTION: Go code for Option 2 that adds both the API key maintainer and specific editor information to the request context, allowing for more precise audit logging of who performed an action.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/public-api-get-editor-for-audit-log.md#2025-04-14_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// get editor and pass to context\nconst (\n    APIKeyMaintainerMDKey = \"apikey-creator\"\n\t// ... other keys to identify apikey\n    APIEditorMDKey        = \"api-editor\"\n)\n\nheaderMetadata := metadata.New(map[string]string{\n    APIKeyMaintainerMDKey: envAPIKey.ApiKey.Maintainer,\n\t// ... other keys to identify apikey\n    APIEditorMDKey:     req.UpdaterEmail.value,\n})\nctx = metadata.NewOutgoingContext(ctx, headerMetadata)\n```\n\n----------------------------------------\n\nTITLE: Defining Progressive Rollout Protobuf Messages\nDESCRIPTION: Protobuf message definitions for progressive rollout types, status, and core functionality.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0041-progressive-rollout.md#2025-04-14_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nmessage ProgressiveRollout {\n  enum Type {\n    MANUAL_SCHEDULE = 0;\n    TEMPLATE_SCHEDULE = 1;\n  }\n  enum Status {\n    WAITING = 0;\n    RUNNING = 1;\n    FINISHED = 2;\n  }\n  string id = 1;\n  string feature_id = 2;\n  google.protobuf.Any clause = 3;\n  Status status = 4;\n  int64 created_at = 5;\n  int64 updated_at = 6;\n  Type type = 7;\n}\n```\n\nLANGUAGE: proto\nCODE:\n```\nmessage ProgressiveRolloutSchedule {\n  string schedule_id = 1;\n  int64 execute_at = 2;\n  int32 weight = 3;\n  int64 triggered_at = 4;\n}\n\nmessage ProgressiveRolloutManualScheduleClause {\n  repeated ProgressiveRolloutSchedule schedules = 1;\n  string variation_id = 2;\n}\n\nmessage ProgressiveRolloutTemplateScheduleClause {\n  enum Interval {\n    UNKNOWN = 0;\n    HOURLY = 1;\n    DAILY = 2;\n    WEEKLY = 3;\n  }\n  repeated ProgressiveRolloutSchedule schedules = 1;\n  Interval interval = 2;\n  int64 increments = 3;\n  string variation_id = 4;\n}\n```\n\nLANGUAGE: proto\nCODE:\n```\nmessage CreateProgressiveRolloutCommand {\n  string feature_id = 1;\n  optional ProgressiveRolloutManualScheduleClause\n      progressive_rollout_manual_schedule_clause = 2;\n  optional ProgressiveRolloutTemplateScheduleClause\n      progressive_rollout_template_schedule_clause = 3;\n}\n\nmessage DeleteProgressiveRolloutCommand {}\n\nmessage AddProgressiveRolloutManualScheduleClauseCommand {\n  ProgressiveRolloutManualScheduleClause clause = 1;\n}\n\nmessage AddProgressiveRolloutTemplateScheduleClauseCommand {\n  ProgressiveRolloutTemplateScheduleClause clause = 1;\n}\n\nmessage ChangeProgressiveRolloutScheduleTriggeredAtCommand {\n  string schedule_id = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Both API Key Maintainer and Editor from Context in Option 2\nDESCRIPTION: Go code for Option 2 that extracts both the API key maintainer and editor information from the request context and formats them for comprehensive audit logging.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/public-api-get-editor-for-audit-log.md#2025-04-14_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// get editor from context\nmd, ok := metadata.FromIncomingContext(ctx)\nif ok {\n    apiKeyMaintainer := md.Get(APIKeyMaintainerMDKey)\n    apiEditor := md.Get(APIEditorMDKey)\n    \n    editors := fmt.Sprint(\"API creator: %s, Editor: %s\",\n        apiKeyMaintainer,\n        apiEditor,\n    )\n    // verify maintainer email then forming *eventproto.Editor ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MultiPubSub Structure in Go\nDESCRIPTION: Main structure for managing multiple PubSub subscribers with logging capability.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/batch-service-pubsub-improvement.md#2025-04-14_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage subscriber\n\nimport \"go.uber.org/zap\"\n\ntype MultiPubSub struct {\n\tsubscribers []Subscriber\n\tlogger      zap.Logger\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting FlagTriggerSecret in Go\nDESCRIPTION: Go code snippet demonstrating how to encrypt the FlagTriggerSecret to generate the trigger URL secret. It uses a hypothetical crypto.EncrypterDecrypter object.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/autoops-flag-trigger.md#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntrigger_url_secret = crypto.EncrypterDecrypter.Encrypt(FlagTriggerSecret)\n```\n\n----------------------------------------\n\nTITLE: Converting MySQL Auto-increment to PostgreSQL Serial\nDESCRIPTION: This snippet shows how to convert MySQL's auto-increment column definition to PostgreSQL's serial type for automatically incrementing integer columns.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- MySQL\nid INT AUTO_INCREMENT\n\n-- PostgreSQL\nid SERIAL\n```\n\n----------------------------------------\n\nTITLE: Defining Message Processor Type in Go\nDESCRIPTION: Type definition for the processor function that handles PubSub messages.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/batch-service-pubsub-improvement.md#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage subscriber\n\ntype Processor func(msg *puller.Message)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Goal Events Table with TimescaleDB\nDESCRIPTION: This snippet creates a goal_events table, converts it to a TimescaleDB hypertable, and sets up compression and retention policies for efficient time-series data management.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE goal_events (\n    id VARCHAR(255),\n    environment_id VARCHAR(255),\n    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,\n    goal_id VARCHAR(255),\n    value DOUBLE PRECISION,\n    user_id VARCHAR(255),\n    user_data JSONB,\n    tag VARCHAR(255),\n    source_id VARCHAR(255),\n    feature_id VARCHAR(255),\n    feature_version INTEGER,\n    variation_id VARCHAR(255),\n    reason VARCHAR(255)\n);\n\n-- Convert to hypertable with 1 month chunks\nSELECT create_hypertable('goal_events', 'timestamp',\n    chunk_time_interval => INTERVAL '1 month');\n\n-- Create compression policy\nALTER TABLE goal_events SET (\n    timescaledb.compress,\n    timescaledb.compress_segmentby = 'environment_id,goal_id,feature_id',\n    timescaledb.compress_orderby = 'timestamp DESC'\n);\n\n-- Automatically compress chunks older than 7 days\nSELECT add_compression_policy('goal_events', \n    INTERVAL '7 days');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Service URLs\nDESCRIPTION: Template logic that provides appropriate commands to get the application URL based on the service type (NodePort, LoadBalancer, or ClusterIP). Includes environment variable exports and kubectl commands specific to each service type configuration.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/manifests/bucketeer/charts/batch/templates/NOTES.txt#2025-04-14_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"batch-server.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ template \"batch-server.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template \"batch-server.fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app={{ template \"batch-server.name\" . }},release={{ template \"batch-server.fullname\" . }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl port-forward $POD_NAME 8080:80\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Converting Auto Ops Rule-Feature Join Query from SQL to MongoDB\nDESCRIPTION: Demonstrates how to convert a SQL join query between auto_ops_rule and feature tables into a MongoDB aggregation pipeline using $lookup and $unwind.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- SQL\nSELECT r.*, f.name as feature_name\nFROM auto_ops_rule r\nJOIN feature f ON r.feature_id = f.id\nWHERE r.environment_namespace = 'default'\nAND r.deleted = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n-- MongoDB\ndb.auto_ops_rule.aggregate([\n  {\n    $match: {\n      environment_namespace: \"default\",\n      deleted: false\n    }\n  },\n  {\n    $lookup: {\n      from: \"feature\",\n      localField: \"feature_id\",\n      foreignField: \"id\",\n      as: \"feature\"\n    }\n  },\n  {\n    $unwind: \"$feature\"\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Access for Different Kubernetes Service Types\nDESCRIPTION: A Helm template that detects the service type (NodePort, LoadBalancer, or ClusterIP) and outputs appropriate commands to access the service. Handles port forwarding, IP exposure, and provides user instructions based on the service configuration.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/manifests/bucketeer/charts/web/templates/NOTES.txt#2025-04-14_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"web.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ template \"web.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template \"web.fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.httpPort }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app={{ template \"web.name\" . }},release={{ template \"web.fullname\" . }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl port-forward $POD_NAME 8080:80\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Service URL with Helm Templates\nDESCRIPTION: This Helm template generates commands to obtain the URL for accessing a Kubernetes service. It handles different scenarios including Ingress, NodePort, LoadBalancer, and ClusterIP service types. The template uses conditional statements to determine the appropriate method for each service type.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/manifests/localenv/dependencies/pubsub/templates/NOTES.txt#2025-04-14_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"pubsub.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"pubsub.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"pubsub.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"pubsub.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Converting Experiment-Goal Join Query from SQL to MongoDB\nDESCRIPTION: Demonstrates migrating a SQL join between experiments and goals tables to a MongoDB aggregation pipeline with $lookup for related data.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- SQL\nSELECT e.*, g.name as goal_name \nFROM experiment e\nJOIN goal g ON e.goal_id = g.id \nWHERE e.environment_namespace = 'default' \nAND e.archived = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n-- MongoDB\ndb.experiment.aggregate([\n  {\n    $match: {\n      environment_namespace: \"default\",\n      archived: false\n    }\n  },\n  {\n    $lookup: {\n      from: \"goal\",\n      localField: \"goal_id\",\n      foreignField: \"id\",\n      as: \"goal\"\n    }\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Service Types\nDESCRIPTION: This script determines the application URL based on the Kubernetes service configuration. It handles Ingress, NodePort, LoadBalancer, and ClusterIP service types, using kubectl commands and Go templating to extract the necessary information.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/manifests/localenv/dependencies/bq/templates/NOTES.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"bq.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"bq.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"bq.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"bq.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS KMS Encryption in Go\nDESCRIPTION: Demonstrates encryption and decryption using AWS Key Management Service (KMS). Implements an interface for encrypting and decrypting data using KMS with proper error handling and AWS SDK configuration.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0039-research-cloud-services.md#2025-04-14_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/kms\"\n)\n\nconst keyID = \"<KEY ID>\"\n\nfunc main() {\n\tctx := context.TODO()\n\tstr := `{\"body\":{\"Alert id\": 123}}`\n\n\ta, _ := NewAwsKMSCrypto(ctx, keyID, \"ap-northeast-1\")\n\tjson := []byte(str)\n\tresult, err := a.Encrypt(ctx, json)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdecripted, err := a.Decrypt(ctx, result)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(decripted)) // => {\"body\":{\"Alert id\": 123}}\n}\n\ntype EncrypterDecrypter interface {\n\tEncrypt(ctx context.Context, data []byte) ([]byte, error)\n\tDecrypt(ctx context.Context, data []byte) ([]byte, error)\n}\n\ntype awsKMSCrypto struct {\n\tclient *kms.Client\n\tkeyID  string\n}\n\nfunc NewAwsKMSCrypto(\n\tctx context.Context,\n\tkeyID, region string,\n) (EncrypterDecrypter, error) {\n\tcfg, err := config.LoadDefaultConfig(\n\t\tctx,\n\t\tconfig.WithRegion(region),\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tclient := kms.NewFromConfig(cfg)\n\treturn awsKMSCrypto{\n\t\tclient: client,\n\t\tkeyID:  keyID,\n\t}, nil\n}\n\nfunc (c awsKMSCrypto) Encrypt(ctx context.Context, data []byte) ([]byte, error) {\n\tresp, err := c.client.Encrypt(ctx, &kms.EncryptInput{\n\t\tPlaintext: data,\n\t\tKeyId:     &c.keyID,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp.CiphertextBlob, nil\n}\n\nfunc (c awsKMSCrypto) Decrypt(ctx context.Context, data []byte) ([]byte, error) {\n\tresp, err := c.client.Decrypt(ctx, &kms.DecryptInput{\n\t\tCiphertextBlob: data,\n\t\tKeyId:          &c.keyID,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp.Plaintext, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving NodePort Application URL in Kubernetes\nDESCRIPTION: Commands to obtain the application URL when using NodePort service type by getting the node IP and port from the Kubernetes cluster.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/manifests/bucketeer/charts/subscriber/templates/NOTES.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"subscriber.fullname\" . }})\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\necho http://$NODE_IP:$NODE_PORT\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Development Server\nDESCRIPTION: Command to start the web console in development mode for local testing and development.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/web-v2/README.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Retrieving LoadBalancer Application URL in Kubernetes\nDESCRIPTION: Commands to obtain the application URL when using LoadBalancer service type by getting the external IP address allocated by the cloud provider.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/manifests/bucketeer/charts/subscriber/templates/NOTES.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template \"subscriber.fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\necho http://$SERVICE_IP:{{ .Values.service.port }}\n```\n\n----------------------------------------\n\nTITLE: Building the Web Console for Production\nDESCRIPTION: Command to build the web console for production deployment, creating optimized static files.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/web-v2/README.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Converting Basic Feature Queries from SQL to MongoDB\nDESCRIPTION: Shows how to migrate a simple SQL query for retrieving non-archived, non-deleted features in a specific environment namespace to an equivalent MongoDB query.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- SQL\nSELECT * FROM feature \nWHERE environment_namespace = 'default' \nAND archived = false \nAND deleted = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n-- MongoDB\ndb.feature.find({\n  environment_namespace: \"default\",\n  archived: false,\n  deleted: false\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHog Helm Chart Values\nDESCRIPTION: This YAML configuration sets up values for the PostHog Helm chart, specifying cloud provider and ingress settings.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0040-multi-cloud-infra.md#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncloud: 'aws'\ningress:\n  hostname: <your-hostname>\n  nginx:\n      enabled: true\nexternalPostgresql:\n  # -- External PostgreSQL service host.\n  postgresqlHost:\n  # -- External PostgreSQL service port.\n  postgresqlPort: 5432\n```\n\n----------------------------------------\n\nTITLE: Linting Web Console Code\nDESCRIPTION: Command to run the linter on the codebase to ensure code quality and consistency.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/web-v2/README.md#2025-04-14_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Deleting E2E Test Data from MySQL in Bucketeer Dev Container\nDESCRIPTION: This command deletes the E2E test data from the MySQL database in the Bucketeer development container. It's useful for cleaning up after running tests.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/DEVELOPMENT.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake delete-dev-container-mysql-data\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting Specific E2E Test Data from MySQL\nDESCRIPTION: Example command that deletes data created by an e2e test with the test_id 'example'. It uses specific MySQL connection parameters including environment variables.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/delete-e2e-data-mysql/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hack/delete-e2e-data-mysql delete \\\n  --mysql-user=sample \\\n  --mysql-pass=${MYSQL_PASS} \\\n  --mysql-host=${MYSQL_HOST} \\\n  --mysql-port=3306 \\\n  --mysql-db-name=${DB_NAME} \\\n  --test-id=example \\\n  --no-profile \\\n  --no-gcp-trace-enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring TimescaleDB Optimizations\nDESCRIPTION: This snippet demonstrates TimescaleDB-specific optimizations, including enabling parallel query execution, setting retention policies, and creating a background job for continuous aggregate refresh.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable parallel query for hypertables\nALTER DATABASE bucketeer SET timescaledb.max_parallel_chunk_scan = 4;\n\n-- Set retention policy (e.g., keep 1 year of raw data)\nSELECT add_retention_policy('evaluation_events', INTERVAL '1 year');\nSELECT add_retention_policy('goal_events', INTERVAL '1 year');\n\n-- Create cagg refresh background job\nSELECT add_job('refresh_continuous_aggregate', '1h');\n```\n\n----------------------------------------\n\nTITLE: Building the Redis Data Copy Tool\nDESCRIPTION: Commands to build the Redis data copy tool binary locally or for Linux, and to create a Docker image of the tool.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/tools/redis/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake build-linux\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-build\n```\n\n----------------------------------------\n\nTITLE: Executing API Key Creation Command in Go for Bucketeer\nDESCRIPTION: This command runs a Go script to create an API key for the Bucketeer project. It requires various parameters such as certificate path, web gateway address, service token, key name, role, output file path, and environment ID. The command also includes options to disable profile and GCP trace.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/create-api-key/README.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo run ./hack/create-api-key create \\\n  --cert=full-path-to-certificate \\\n  --web-gateway=web-gateway-address \\\n  --service-token=full-path-to-service-token-file \\\n  --name=key-name \\\n  --role=key-role \\\n  --output=full-path-to-output-file \\\n  --environment-id=environment-id \\\n  --no-profile \\\n  --no-gcp-trace-enabled\n```\n\n----------------------------------------\n\nTITLE: Running the Redis Data Copy Tool\nDESCRIPTION: Command to build and run the Redis data copy tool binary.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/tools/redis/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Running Bucketeer Project Creation Command in Go\nDESCRIPTION: Command for creating a new project in Bucketeer with options for certificate path, web gateway address, service token, project name, URL code, description, environment creation, and trace settings. The description and create-environment flags are optional.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/create-project/README.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo run ./hack/create-project create \\\n  --cert=full-path-to-certificate \\\n  --web-gateway=web-gateway-address \\\n  --service-token=full-path-to-service-token-file \\\n  --name=\"Project name\" \\\n  --url-code=url-code \\\n  --description=\"Project description\" \\\n  --create-environment=dev \\\n  --no-profile \\\n  --no-gcp-trace-enabled\n```\n\n----------------------------------------\n\nTITLE: RDS Basic Connection Implementation in Go\nDESCRIPTION: Shows how to establish a basic connection to an AWS RDS MySQL instance using the standard database/sql package with the MySQL driver.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0039-research-cloud-services.md#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\n\tvar dbName string = \"mydb\"\n\tvar dbUser string = \"admin\"\n\tvar dbHost string = \"xxxxxxxxxxxxxxxxxxxxxxxx.rds.amazonaws.com\"\n\tvar dbPort int = 3306\n\tvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\n\tvar dbPass = \"PASS\"\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?collation=utf8mb4_bin\",\n\t\tdbUser, dbPass, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(\"hoge\")\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar sample Sample\n\n\terr = db.QueryRow(\"select * from sample where id = 'hogehoge';\").Scan(&sample.id, &sample.num)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(sample.id, sample.num)\n}\n\ntype Sample struct {\n\tid  string\n\tnum int\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Redis Data Copy Tool\nDESCRIPTION: Commands to push the Docker image to GitHub Container Registry and deploy to Kubernetes. Requires PAT and GITHUB_USER_NAME environment variables for ghcr push.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/tools/redis/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-push-ghcr\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake kubectl-apply\n```\n\n----------------------------------------\n\nTITLE: Configuring PipeCD Control Plane in YAML\nDESCRIPTION: This YAML configuration sets up the PipeCD control plane, specifying datastore and filestore settings for deployment on various cloud platforms.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0040-multi-cloud-infra.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: \"pipecd.dev/v1beta1\"\nkind: ControlPlane\nspec:\n  stateKey: {RANDOM_STRING}\n  datastore:\n    type: FIRESTORE or MySQL\n    config:\n      namespace: pipecd\n      environment: dev\n      project: {YOUR_GCP_PROJECT_NAME}\n      credentialsFile: /etc/pipecd-secret/firestore-service-account\n  filestore:\n    type: GCS or AWS S3 or MINIO\n    config:\n      bucket: {YOUR_BUCKET_NAME}\n      credentialsFile: /etc/pipecd-secret/gcs-service-account\n```\n\n----------------------------------------\n\nTITLE: Running Service Token Generation Command with Go\nDESCRIPTION: This command runs a Go script to generate a service token with specific parameters including issuer, audience, email, role, and file paths. The command includes flags to disable profiling and GCP trace.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/generate-service-token/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hack/generate-service-token generate \\\n  --issuer=issuer \\\n  --audience=audience \\\n  --email=email \\\n  --role=role \\\n  --key=full-path-to-private-key \\\n  --output=full-path-to-output-file \\\n  --no-profile \\\n  --no-gcp-trace-enabled\n```\n\n----------------------------------------\n\nTITLE: Installing PipeCD using Helm\nDESCRIPTION: This shell command installs PipeCD using Helm, specifying various configuration files and secrets for the deployment.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0040-multi-cloud-infra.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ helm install pipecd oci://ghcr.io/pipe-cd/chart/pipecd --version v0.39.0 --namespace={NAMESPACE} \\\n  --set-file config.data=path-to-control-plane-configuration-file \\\n  --set-file secret.encryptionKey.data=path-to-encryption-key-file \\\n  --set-file secret.firestoreServiceAccount.data=path-to-service-account-file \\\n  --set-file secret.gcsServiceAccount.data=path-to-service-account-file\n```\n\n----------------------------------------\n\nTITLE: Releasing Bucketeer Evaluation Module to NPM\nDESCRIPTION: This snippet outlines the process for releasing the Bucketeer evaluation module to NPM. It includes setting up the NPM token, initializing the project, generating protocol buffers, building the module, and publishing it.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/evaluation/typescript/README.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport NPM_TOKEN=\"YOUR_NPM_TOKEN\"\nmake init\nmake gen_proto\nmake build\nmake publish\n```\n\n----------------------------------------\n\nTITLE: Example Environment Configuration for API Endpoints\nDESCRIPTION: Sample environment configuration showing how to set the API endpoint and authentication redirect URL for local development.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/web-v2/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEV_WEB_API_ENDPOINT=https://example.com\nDEV_AUTH_REDIRECT_ENDPOINT=http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Adjusting GROUP BY Clauses for PostgreSQL\nDESCRIPTION: This snippet illustrates the difference in GROUP BY handling between MySQL and PostgreSQL, where PostgreSQL requires all non-aggregated columns to be included in the GROUP BY clause.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- MySQL allows columns not in GROUP BY\nSELECT id, name, COUNT(*) FROM features GROUP BY id;\n\n-- PostgreSQL requires all non-aggregated columns\nSELECT id, name, COUNT(*) FROM features GROUP BY id, name;\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File for Web Console\nDESCRIPTION: Command to create a local environment configuration file by copying the example template.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/web-v2/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Enabling TimescaleDB Extension in PostgreSQL\nDESCRIPTION: This SQL command enables the TimescaleDB extension in PostgreSQL, which is necessary for implementing time-series data functionality.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable TimescaleDB extension\nCREATE EXTENSION IF NOT EXISTS timescaledb;\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure in JSON\nDESCRIPTION: Example JSON structure for error responses using GRPC's ErrorInfo format. Includes reason, domain, and metadata fields for structured error information.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/move-i18n-logic-to-frontend.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reason\": \"INVALID\"\n  \"domain\": \"account.bucketeer.io\",\n  \"metadata\": {\n      \"messageKey\": \"account.invalid.format\",\n      \"field\": \"email\",\n      \"value\": \"email.com\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Accounts in Bucketeer via Command Line\nDESCRIPTION: Command for creating a new user account in Bucketeer with specified permissions. Requires certificate path, gateway address, service token, and user details. Optional flags include admin privileges and disabling of profile and GCP trace features.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/create-account/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hack/create-account create \\\n  --cert=full-path-to-certificate \\\n  --web-gateway=web-gateway-address \\\n  --service-token=full-path-to-service-token-file \\\n  --email=email \\\n  --role=role \\\n  --environment-id=environment-id \\\n  --is-admin(optional) \\\n  --no-profile \\\n  --no-gcp-trace-enabled\n```\n\n----------------------------------------\n\nTITLE: JSON Responses for Differential Evaluation in Bucketeer\nDESCRIPTION: Example JSON responses for Pattern C scenarios, showing differential evaluation and update with various combinations of evaluated and archived features.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0042-evaluation-for-updated-features.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// Pattern C-1\n{\n  \"Evaluations\": {\n    \"Id\": \"xxx\",\n    \"CreatedAt\": 1680274800,\n    \"Evaluations\": [{\"featureId\": \"featureA\", ...}, {\"featureId\":  \"featureB\", ...}, ...],\n    \"ArchivedFeatures\": [\"featureX\", \"featureY\"],\n    \"ForceUpdate\": false,\n  },\n  \"UserEvaluationsID\": \"yyy\"\n}\n\n// Pattern C-2\n{\n  \"Evaluations\": {\n    \"Id\": \"xxx\",\n    \"CreatedAt\": 1680274800,\n    \"Evaluations\": [{\"featureId\": \"featureA\", ...}, {\"featureId\":  \"featureB\", ...}, ...],\n    \"ArchivedFeatures\": [],\n    \"ForceUpdate\": false,\n  },\n  \"UserEvaluationsID\": \"yyy\"\n}\n\n// Pattern C-3\n{\n  \"Evaluations\": {\n    \"Id\": \"xxx\",\n    \"CreatedAt\": 1680274800,\n    \"Evaluations\": [],\n    \"ArchivedFeatures\": [\"featureX\", \"featureY\"],\n    \"ForceUpdate\": false,\n  },\n  \"UserEvaluationsID\": \"yyy\"\n}\n\n// Pattern C-4\n{\n  \"Evaluations\": {\n    \"Id\": \"xxx\",\n    \"CreatedAt\": 1680274800,\n    \"Evaluations\": [],\n    \"ArchivedFeatures\": [],\n    \"ForceUpdate\": false,\n  },\n  \"UserEvaluationsID\": \"yyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Bucketeer Web Console\nDESCRIPTION: Command to install required dependencies for the web console using yarn package manager.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/web-v2/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Full Evaluation and Force Update in Bucketeer\nDESCRIPTION: Example JSON response for Pattern B where all feature flags are evaluated and force update is set to true.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0042-evaluation-for-updated-features.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Evaluations\": {\n    \"Id\": \"xxx\",\n    \"CreatedAt\": 1680274800,\n    \"Evaluations\": [{\"featureId\": \"featureA\", ...}, {\"featureId\":  \"featureB\", ...}, ...],\n    \"ArchivedFeatures\": [],\n    \"ForceUpdate\": true,\n  },\n  \"UserEvaluationsID\": \"yyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Progressive Rollout Clause in Go\nDESCRIPTION: Go struct definition for progressive rollout clause that specifies variation IDs and schedules with weights and timestamps.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0041-progressive-rollout.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n&autoopsproto.ProgressiveRolloutClause{\n\t// The another varition id is vid-2\n\tVariationId: \"vid-1\",\n\tSchedules: []*autoopsproto.ProgressiveRolloutSchedule{\n\t\t{\n\t\t\t// '2023-01-01 03:00:00'\n\t\t\tTime: 1672509600,\n\t\t\tWeight: 20000,\n\t\t},\n\t\t{\n\t\t\t// '2023-01-01 06:00:00'\n\t\t\tTime: 1672520400,\n\t\t\tWeight: 40000,\n\t\t},\n\t\t{\n\t\t\t// '2023-01-01 09:00:00'\n\t\t\tTime: 1672531200,\n\t\t\tWeight: 60000,\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Translation Files for Internationalization\nDESCRIPTION: Command to generate translation JSON files when the messages file is modified. This needs to be run to update the internationalization resources.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/web-v2/README.md#2025-04-14_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn translate\n```\n\n----------------------------------------\n\nTITLE: JSON Response for No Evaluation in Bucketeer\nDESCRIPTION: Example JSON response for Pattern A where no evaluation is performed due to unchanged UserEvaluationID.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0042-evaluation-for-updated-features.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Evaluations\": null, \n  \"UserEvaluationsID\": \"yyy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Single Bucketeer Backend Service\nDESCRIPTION: This command demonstrates how to deploy a single Bucketeer service, specifically the backend service. It uses Helm with custom values for development.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/DEVELOPMENT.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install backend manifests/bucketeer/charts/backend/ --values manifests/bucketeer/charts/backend/values.dev.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Go Script to Delete E2E Test Data from MySQL\nDESCRIPTION: Command to delete end-to-end test data from a MySQL database using a Go script. The command accepts MySQL connection parameters and an optional test ID.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/delete-e2e-data-mysql/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hack/delete-e2e-data-mysql delete \\\n  --mysql-user=<MYSQL_USER> \\\n  --mysql-pass=<MYSQL_PASS> \\\n  --mysql-host=<MYSQL_HOST> \\\n  --mysql-port=<MYSQL_PORT> \\\n  --mysql-db-name=<MYSQL_DB_NAME> \\\n  --test-id=<TEST_ID> \\ # optional\n  --no-profile \\\n  --no-gcp-trace-enabled\n```\n\n----------------------------------------\n\nTITLE: Converting MySQL String Functions to PostgreSQL\nDESCRIPTION: This snippet demonstrates the conversion of common MySQL string and date functions to their PostgreSQL equivalents, including CONCAT, IFNULL, and NOW().\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/postgresql-storage-implementation.md#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- MySQL\nCONCAT(str1, str2) -> same in PostgreSQL\nIFNULL() -> COALESCE()\nNOW() -> CURRENT_TIMESTAMP\n```\n\n----------------------------------------\n\nTITLE: Creating API Key for Client SDK in Bucketeer\nDESCRIPTION: This command creates an API key for the Client SDK in the Bucketeer environment. It sets various environment variables and uses a make command to generate the key.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/DEVELOPMENT.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nWEB_GATEWAY_URL=web-gateway.bucketeer.io \\\nWEB_GATEWAY_CERT_PATH=/workspaces/bucketeer/tools/dev/cert/tls.crt \\\nSERVICE_TOKEN_PATH=/workspaces/bucketeer/tools/dev/cert/service-token \\\nAPI_KEY_NAME=\"e2e-test-$(date +%s)-client\" \\\nAPI_KEY_PATH=/workspaces/bucketeer/tools/dev/cert/api_key_client \\\nAPI_KEY_ROLE=SDK_CLIENT \\\nENVIRONMENT_ID=e2e \\\nmake create-api-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Growth Book Data Source\nDESCRIPTION: This YAML configuration sets up a data source for Growth Book, specifying connection parameters for a PostgreSQL database.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0040-multi-cloud-infra.md#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndatasources:\n  warehouse:\n    type: postgres # or \"redshift\" or \"mysql\" or \"clickhouse\"\n    name: Main Warehouse\n    params:\n      host: localhost\n      port: 5432\n      user: root\n      password: ${POSTGRES_PW} # use env for secrets\n      database: growthbook\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Bucketeer Envoy\nDESCRIPTION: Command to build the custom Envoy Docker image with curl and wget installed.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/tools/envoy/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build\n```\n\n----------------------------------------\n\nTITLE: Generating Migration File with Make Command\nDESCRIPTION: Make command to generate a migration file for Bucketeer using Atlas. Requires specifying a migration name and database connection details.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/migration/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake create-migration NAME=<MIGRATION_FILE_NAME> HOST=localhost USER=bucketeer PASS=bucketeer PORT=3306 DB=bucketeer\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to GitHub Container Registry\nDESCRIPTION: Command to push the custom Envoy Docker image to GitHub Container Registry. Requires appropriate permissions and a personal access token.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/tools/envoy/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPAT=${GITHUB_PERSONAL_ACCESS_TOKEN} \\\nGITHUB_USER_NAME=${GITHUB_USER_NAME} \\\nmake docker-push-ghcr\n```\n\n----------------------------------------\n\nTITLE: Configuring FeatureHub Application Properties\nDESCRIPTION: This configuration file sets up application properties for FeatureHub, including database and messaging settings.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0040-multi-cloud-infra.md#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ndb.url=jdbc:postgresql://db:5432/featurehub\ndb.username=featurehub\ndb.password=featurehub\ndb.connections=10\nnats.urls=nats://nats:4222\ndacha1.enabled=false\ndacha2.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Running Create Environment Command in Go\nDESCRIPTION: Command to create a new environment in Bucketeer using the create-environment script. Requires certificate path, web gateway address, service token file path, environment ID, and project ID. Optionally accepts an environment description.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/create-environment/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hack/create-environment create \\\n  --cert=full-path-to-certificate \\\n  --web-gateway=web-gateway-address \\\n  --service-token=full-path-to-service-token-file \\\n  --id=environment-id \\\n  --description=optional-environment-description \\\n  --project-id=project-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Mastodon Environment Variables\nDESCRIPTION: This configuration file sets up environment variables for a Mastodon instance, including database, Redis, and Elasticsearch settings.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0040-multi-cloud-infra.md#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Redis\n# -----\nREDIS_HOST=localhost\nREDIS_PORT=6379\n\n# PostgreSQL\n# ----------\nDB_HOST=/var/run/postgresql\nDB_USER=mastodon\nDB_NAME=mastodon_production\nDB_PASS=\nDB_PORT=5432\n\n# Elasticsearch (optional)\n# ------------------------\nES_ENABLED=true\nES_HOST=localhost\nES_PORT=9200\n# Authentication for ES (optional)\nES_USER=elastic\nES_PASS=password\n```\n\n----------------------------------------\n\nTITLE: Extracting API Key Metadata from Context in Go\nDESCRIPTION: Go code to extract API key maintainer information from the request context metadata when receiving a request. This allows identification of the API key user for audit logging.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/public-api-get-editor-for-audit-log.md#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmd, ok := metadata.FromIncomingContext(ctx)\nif ok {\n    apiKeyMaintainer := md.Get(APIKeyMaintainerMDKey)\n\tapiKeyName := md.Get(APIKeyNameMDKey)\n\tapiKeyToken := md.Get(APIKeyTokenMDKey)\n    apiKeyTokenShadowed := apiKeyToken[len(apiKeyToken)-8:] // shadowed token example\n    // verify maintainer email then form *eventproto.Editor ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Pod in Kubernetes for Bucketeer\nDESCRIPTION: Commands to connect to MySQL within the Kubernetes pod. First, access the MySQL pod shell, then connect to the MySQL database using credentials from values.dev.yaml.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/migration/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it localenv-mysql-0 -- /bin/sh\nmysql -h localhost -u bucketeer -p bucketeer\n```\n\n----------------------------------------\n\nTITLE: Separate Error Event Types (Plan A)\nDESCRIPTION: Defines separate Go structs for InternalErrorCountMetricsEvent and TimeoutErrorCountMetricsEvent with explicit fields for Event and Tag.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0038-adding-metrics-event-type.md#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype InternalErrorCountMetricsEvent struct {\n    Event string\n    Tag string\n}\n\ntype TimeoutErrorCountMetricsEvent struct {\n    Event string\n    Tag string\n}\n```\n\n----------------------------------------\n\nTITLE: Building Bucketeer Evaluation Module for Node.js\nDESCRIPTION: This command builds the Bucketeer evaluation module for Node.js.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/evaluation/typescript/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Unified Error Metrics Event (Plan B)\nDESCRIPTION: Proposes a single ErrorMetricsEvent struct that uses an Error field to differentiate between error types. This approach provides more abstraction.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0038-adding-metrics-event-type.md#2025-04-14_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype ErrorMetricsEvent struct {\n    Event string\n    Error string\n    Labels map[string]string \n}\n```\n\n----------------------------------------\n\nTITLE: Final Metrics Event Type Structures\nDESCRIPTION: The decided final implementation of metrics event types with Metadata field (renamed from Labels) for all event types. These structures will be implemented across the Bucketeer system.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0038-adding-metrics-event-type.md#2025-04-14_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype LatencyMetricsEvent struct {\n    Event string\n\tMetadata   map[string]string\n\tDuration time.Duration    \n}\n\ntype SizeMetricsEvent struct {\n    Event string\n\tMetadata   map[string]string\n\tSizeByte int32\n}\n\ntype InternalErrorCountMetricsEvent struct {\n    Event string\n    Metadata   map[string]string\n}\n\ntype TimeoutErrorCountMetricsEvent struct {\n    Event string\n    Metadata   map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Feature Flag Dependencies in Bucketeer\nDESCRIPTION: Mermaid graph showing the dependency relationships between multiple feature flags, used to illustrate evaluation patterns.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0042-evaluation-for-updated-features.md#2025-04-14_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    id1((A)) --> id5((E)) --> id7((G)) --> id8((H)) --> id9((I)) --> id11((K))\n    id1((A)) --> id6((F))\n    id8((H)) --> id10((J))\n    \n    id2((B))\n    \n    id3((C)) --> id12((L)) --> id13((M))\n    id12((L)) --> id14((N))\n    \n    id4((D))\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding MySQL Service in Kubernetes\nDESCRIPTION: Command to port-forward the MySQL service to allow local access on port 3306 before creating migration files.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/migration/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/localenv-mysql 3306:3306\n```\n\n----------------------------------------\n\nTITLE: Creating Migration File Manually with Atlas\nDESCRIPTION: Command to manually create a new migration file in the MySQL directory when no structural changes are needed.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/migration/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate new <file_name> --dir \"file://migration/mysql\"\n```\n\n----------------------------------------\n\nTITLE: Proposed Metrics Event Types with Labels Field (Plan A)\nDESCRIPTION: Defines Go structs for LatencyMetricsEvent and SizeMetricsEvent that use a Labels map for metadata. This approach provides flexibility for tracking various metrics attributes.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0038-adding-metrics-event-type.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype LatencyMetricsEvent struct {\n    Event string\n\tLabels   map[string]string\n\tDuration time.Duration    \n}\n\ntype SizeMetricsEvent struct {\n    Event string\n\tLabels   map[string]string\n\tSizeByte int32\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Table with Go Script in Shell\nDESCRIPTION: This command runs a Go script to create a BigQuery table. It uses the 'create' subcommand and disables GCP trace and profiling.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/create-big-query-table/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./hack/create-big-query-table create --no-gcp-trace-enabled --no-profile\n```\n\n----------------------------------------\n\nTITLE: Updating EnvironmentAPIKey Protobuf Message with Maintainer and ID Fields\nDESCRIPTION: Enhanced EnvironmentAPIKey protobuf message that includes new 'maintainer' and 'id' fields to support API key maintainer tracking in responses.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/public-api-get-editor-for-audit-log.md#2025-04-14_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage EnvironmentAPIKey {\n  string environment_namespace = 1 [deprecated = true];\n  APIKey api_key = 2;\n  bool environment_disabled = 3;\n  string project_id = 4 [deprecated = true];\n  environment.EnvironmentV2 environment = 5;\n  string project_url_code = 6;\n  string maintainer = 7;\n  string id = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting MAU Event Data\nDESCRIPTION: SQL query for inserting or updating MAU events, incrementing the event_count when a user record already exists.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0003-improve-mau-count-speed.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO mau (\n  user_id,\n  yearmonth,\n  source_id,\n  event_count,\n  created_at,\n  updated_at,\n  environment_namespace\n) VALUES (\n  ?, ?, ?, ?, ?, ?, ?\n) ON DUPLICATE KEY UPDATE\n  event_count = event_count + 1\n  updated_at = VALUES(1668737826),\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateFeatureRequest with Editor Email in Option 2\nDESCRIPTION: Protobuf message definition for UpdateFeatureRequest with an additional 'updater_email' field that allows clients to specify who is making the change, enhancing audit log precision.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/public-api-get-editor-for-audit-log.md#2025-04-14_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage UpdateFeatureRequest {\n  string comment = 1;\n  string id = 2;\n  google.protobuf.StringValue name = 3;\n  google.protobuf.StringValue description = 4;\n  repeated string tags = 5;\n  google.protobuf.BoolValue enabled = 6;\n  google.protobuf.BoolValue archived = 7;\n  repeated feature.Variation variations = 8;\n  repeated feature.Prerequisite prerequisites = 9;\n  repeated feature.Target targets = 10;\n  repeated feature.Rule rules = 11;\n  feature.Strategy default_strategy = 12;\n  google.protobuf.StringValue off_variation = 13;\n  google.protobuf.StringValue updater_email = 14;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving MAU Counts\nDESCRIPTION: SQL query to retrieve total user count and event count for a specific namespace and yearmonth.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0003-improve-mau-count-speed.md#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  COUNT(*) as user_count,\n  IFNULL(SUM(event_count), 0) as event_count\nFROM\n  mau\nwhere\n  environment_namespace = 'namespace' AND\n  yearmonth = '202212'\n```\n\n----------------------------------------\n\nTITLE: Task Breakdown Table in Markdown\nDESCRIPTION: A markdown table presenting the tasks, descriptions, and time estimations for implementing API key maintainer functionality. It includes updates to APIKey APIs, UI changes, data migration, and two options for implementing an overwrite editor mechanism.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/public-api-get-editor-for-audit-log.md#2025-04-14_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Task                                            | Description                                                                                                                                                                                                                                                      | Time estimation |\n|:------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------:|\n| Update APIKey APIs                              | - Add column `maintainer` and `api_key` in `api_key` table <br/>- Update `CreateAPIKey`: add `maintainer` in request and response<br/>- Update `ListAPIKeys` and `GetAPIKeyBySearchingAllEnvironments`: add `maintainer` in `api_key` object response            |   1 - 2 days    |\n| Update APIKey UI                                | - Add API key maintainer email field in the create new API key screen and in the list API keys screen.                                                                                                                                                           |                 |\n| Create data migration (migration plan)          | - In migration plan                                                                                                                                                                                                                                              |   2 - 3 days    |\n| (Option 1) Implement overwrite editor mechanism | - Get API creator of APIKey and save to context before call web gRPC API (every create/update public APIs) <br/>- Overwrite editor if API creator in context metadata is not nil                                                                                 |  1 - 2.5 days   |\n| (Option 2) Implement overwrite editor mechanism | - Change request body message of every create/update public APIs, also change the API description document <br/>- Get API creator of APIKey, form editors then forward to gRPC web service <br/>- Overwrite editor if API creator in context metadata is not nil |   3 - 5 days    |\n```\n\n----------------------------------------\n\nTITLE: Setting up Bucketeer Evaluation Module for Node.js\nDESCRIPTION: This snippet shows the initial setup process for the Bucketeer evaluation module. It includes exporting the NPM token, initializing the project, and generating protocol buffers.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/evaluation/typescript/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport NPM_TOKEN=\"YOUR_NPM_TOKEN\"\nmake init\nmake gen_proto\n```\n\n----------------------------------------\n\nTITLE: Accessing ClusterIP Application with Port Forwarding in Kubernetes\nDESCRIPTION: Commands to set up port forwarding to access the application when using ClusterIP service type, which is only accessible within the cluster.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/manifests/bucketeer/charts/subscriber/templates/NOTES.txt#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app={{ template \"subscriber.name\" . }},release={{ template \"subscriber.fullname\" . }}\" -o jsonpath=\"{.items[0].metadata.name}\")\necho \"Visit http://127.0.0.1:8080 to use your application\"\nkubectl port-forward $POD_NAME 8080:80\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Bucketeer Evaluation Module\nDESCRIPTION: This command executes the unit tests for the Bucketeer evaluation module.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/evaluation/typescript/README.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Google Artifact Registry\nDESCRIPTION: Command to push the custom Envoy Docker image to Google Artifact Registry. Requires appropriate permissions and prior setup of GAR authentication.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/tools/envoy/README.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-push-gar\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Build Artifacts\nDESCRIPTION: Command to remove the binary and other build artifacts.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/tools/redis/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake clean\n```\n\n----------------------------------------\n\nTITLE: Updating Migration File Hash with Atlas\nDESCRIPTION: Command to update the hash of Atlas migration files after editing a migration file manually. Should be rerun if the SQL statement changes.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/migration/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate hash --dir \"file://migration/mysql\"\n```\n\n----------------------------------------\n\nTITLE: Installing PostHog using Helm\nDESCRIPTION: This console command installs PostHog using Helm, specifying the chart repository and custom values file.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0040-multi-cloud-infra.md#2025-04-14_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add posthog https://posthog.github.io/charts-clickhouse/\n$ helm repo update\n$ helm upgrade --install -f values.yaml --timeout 30m --create-namespace --namespace posthog posthog posthog/posthog --wait --wait-for-jobs --debug\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Comparison in Markdown\nDESCRIPTION: Shows the version comparison link between v1.2.0 and v1.3.0 using Markdown syntax. This is typically used in changelogs to provide quick access to the diff between versions.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.3.0](https://github.com/bucketeer-io/bucketeer/compare/v1.2.0...v1.3.0) (2025-02-28)\n```\n\n----------------------------------------\n\nTITLE: Configuring Growth Book with Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up Growth Book with a MongoDB backend for basic functionality without feature flags.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0040-multi-cloud-infra.md#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  mongo:\n    image: \"mongo:latest\"\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=root\n      - MONGO_INITDB_ROOT_PASSWORD=password\n  growthbook:\n    image: \"growthbook/growthbook:latest\"\n    ports:\n      - \"3000:3000\"\n      - \"3100:3100\"\n    depends_on:\n      - mongo\n    environment:\n      - MONGODB_URI=mongodb://root:password@mongo:27017/\n    volumes:\n      - uploads:/usr/local/src/app/packages/back-end/uploads\nvolumes:\n  uploads:\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for E2E Data Deletion Tool\nDESCRIPTION: Commands to build and push a Docker image for the E2E data deletion tool. Requires setting up a Personal Access Token with 'write:packages' permission and GitHub credentials.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/hack/delete-e2e-data-mysql/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake deps\n\nexport PAT=<PERSONAL_ACCESS_TOKEN>\nexport GITHUB_USER_NAME=<GITHUB_USER_NAME>\nexport TAG=<TAG>\n\nmake docker-build\nmake docker-push\n```\n\n----------------------------------------\n\nTITLE: Proposed Metrics Event Types with Explicit Fields (Plan B)\nDESCRIPTION: Defines Go structs for LatencyMetricsEvent and SizeMetricsEvent with explicit Tag and Status fields instead of a generic Labels map. This approach has more rigid structure.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0038-adding-metrics-event-type.md#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype LatencyMetricsEvent struct {\n    Event string\n\tTag string\n    Status string\n\tDuration time.Duration    \n}\n\ntype SizeMetricsEvent struct {\n    Event string\n\tTag string\n    Status string\n\tSizeByte int32\n}\n```\n\n----------------------------------------\n\nTITLE: Request Validation with Error Handling\nDESCRIPTION: Example of request validation using the NewError() function for error generation with additional metadata.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/move-i18n-logic-to-frontend.md#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc validateGetAccountV2Request(req *accountproto.GetAccountV2Request, localizer locale.Localizer) error {\n\tif !verifyEmailFormat(req.Command.Email) {\n\t\treturn NewError(statusInvalidEmail,\n                                map[string]string{\n                                  \"value\": req.Command.Email,\n                                }\n                       )\n\t}\n...\n```\n\n----------------------------------------\n\nTITLE: Bucketeer Console Project Scripts\nDESCRIPTION: Available scripts for development, production builds, and code styling checks.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/ui/dashboard/README.md#2025-04-14_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- `yarn start`: Start the web app in development mode.\n- `yarn serve`: Start the web app in production mode.\n- `yarn build`: Build for production.\n- `yarn style:all`: Run type check, lint check, and prettier check on all files.\n- `yarn style:lint`: Run lint check on all files.\n- `yarn style:prettier`: Format all files with Prettier.\n```\n\n----------------------------------------\n\nTITLE: Linting Bucketeer Evaluation Module\nDESCRIPTION: This command runs the linter on the Bucketeer evaluation module codebase.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/evaluation/typescript/README.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Legacy Error Handling Code\nDESCRIPTION: Example of the previous error handling implementation using LocalizedMessage that will be removed in favor of the new ErrorInfo approach.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/move-i18n-logic-to-frontend.md#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc validateGetAccountV2Request(req *accountproto.GetAccountV2Request, localizer locale.Localizer) error {\n\tif req.Email == \"\" {\n\t\tdt, err := statusEmailIsEmpty.WithDetails(\n\t\t\t&errdetails.ErrorInfo{\n\t\t\t\tReason: \"INVALID\",\n\t\t\t\tDomain: \"account.bucketeer.io\",\n\t\t\t\tMetadata: map[string]string{\n\t\t\t\t\t\"messageKey\": \"account.invalid.empty\",\n\t\t\t\t\t\"feild\":      \"email\",\n\t\t\t\t},\n\t\t\t})\n\t\tif err != nil {\n\t\t\treturn statusInternal.Err()\n\t\t}\n\t\treturn dt.Err()\n\t}\n...\n```\n\n----------------------------------------\n\nTITLE: Visualizing Evaluation Flow for Feature Flags in Bucketeer\nDESCRIPTION: Mermaid flowchart depicting the decision process for evaluating feature flags based on UserEvaluationsID, evaluation timing, and user attribute updates.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0042-evaluation-for-updated-features.md#2025-04-14_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nA[Start] --> B{Same\\nUserEvaluationsID?}\nB -- Yes --> C[Pattern A:\\nNo Evaluation]\nB -- UEID is empty --> E\nB -- No --> D{Evaluation\\nover a month?}\nD -- Yes --> E[Pattern B:\\nEvaluation all and force update]\nD -- No --> F{Any updated features\\nfrom previous evaluation?}\nF -- No --> J{Is user attributes updated?}\nJ -- NO --> E\nJ -- Yes --> I[Pattern C:\\nDifferential evaluation and differential update]\nF -- Yes --> I\n```\n\n----------------------------------------\n\nTITLE: Alternative Abstraction for Metrics Events (Plan B)\nDESCRIPTION: Proposes a single MetricsEvent struct that uses a Type field to differentiate between Size and Latency metrics. This approach provides more abstraction but less type safety.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/0038-adding-metrics-event-type.md#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype MetricsEvent struct {\n    Event string // GetEvaluations, GetEvaluation, ...\n    Type string // Size or Latency, ...\n\tLabels map[string]string   \n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlagTriggerSecret Struct in Go\nDESCRIPTION: Go struct definition for FlagTriggerSecret, used to generate and validate trigger URL secrets. It includes fields for ID, FeatureID, Action, and UUID.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/autoops-flag-trigger.md#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage flagtrigger\n\ntype FlagTriggerSecret struct {\n\tID        string `json:\"id\"`\n\tFeatureID string `json:\"feature_id\"`\n\tAction    int    `json:\"action\"`\n\tUUID      string `json:\"uuid\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset-based Pagination in MongoDB\nDESCRIPTION: Shows a simpler offset-based pagination approach in MongoDB using skip and limit parameters, which is suitable for smaller datasets or simpler use cases.\nSOURCE: https://github.com/bucketeer-io/bucketeer/blob/main/docs/rfcs/mongodb-storage-implementation.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  find: \"collection_name\",\n  skip: offset,\n  limit: pageSize\n}\n```"
  }
]