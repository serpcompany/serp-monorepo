[
  {
    "owner": "upsonic",
    "repo": "upsonic",
    "content": "TITLE: Implementing Multi-Agent Task Distribution in Upsonic\nDESCRIPTION: Complex example showcasing multi-agent collaboration in Upsonic. The code defines structured response formats, creates specialized agents, sets up interdependent tasks with specified tools and contexts, and executes them using the MultiAgent orchestrator.\nSOURCE: https://github.com/upsonic/upsonic/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom upsonic import Agent, Task, MultiAgent, ObjectResponse\nfrom upsonic.tools import Search\nfrom typing import List\n\n# Targeted Company and Our Company\nour_company = \"https://redis.io/\"\ntargeted_url = \"https://upsonic.ai/\"\n\n\n# Response formats\nclass CompanyResearch(ObjectResponse):\n   industry: str\n   product_focus: str\n   company_values: List[str]\n   recent_news: List[str]\n\nclass Mail(ObjectResponse):\n   subject: str\n   content: str\n\n\n# Creating Agents\nresearcher = Agent(\n   \"Company Researcher\",\n   company_url=our_company\n)\n\nstrategist = Agent(\n   \"Outreach Strategist\", \n   company_url=our_company\n)\n\n\n# Creating Tasks and connect\ncompany_task = Task(\n   \"Research company website and analyze key information\",\n\n   context=[targeted_url],\n   tools=[Search],\n   response_format=CompanyResearch\n)\n\nposition_task = Task(\n   \"Analyze Senior Developer position context and requirements\",\n   context=[company_task, targeted_url],\n)\n\nmessage_task = Task(\n   \"Create personalized outreach message using research\",\n   context=[company_task, position_task, targeted_url],\n   response_format=Mail\n)\n\n\n# Run the Tasks over agents\nresults = MultiAgent.do(\n   [researcher, strategist],\n   [company_task, position_task, message_task]\n)\n\n\n# Print the results\nprint(f\"Company Industry: {company_task.response.industry}\")\nprint(f\"Company Focus: {company_task.response.product_focus}\")\nprint(f\"Company Values: {company_task.response.company_values}\")\nprint(f\"Company Recent News: {company_task.response.recent_news}\")\nprint(f\"Position Analyze: {position_task.response}\")\nprint(f\"Outreach Message Subject: {message_task.response.subject}\")\nprint(f\"Outreach Message Content: {message_task.response.content}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Reliability Layer in Python\nDESCRIPTION: This snippet demonstrates how to initialize an agent with a reliability layer to prevent hallucinations. The code sets up a ReliabilityLayer class with a hallucination prevention parameter and creates an Agent instance that uses this layer with the GPT-4o model.\nSOURCE: https://github.com/upsonic/upsonic/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ReliabilityLayer:\n  prevent_hallucination = 10\n\nagent = Agent(\"Coder\", reliability_layer=ReliabilityLayer, model=\"openai/gpt4o\")\n```\n\n----------------------------------------\n\nTITLE: Integrating MCP Tools with Upsonic Agent\nDESCRIPTION: Example of using Model Context Protocol (MCP) with Upsonic. The code defines an MCP configuration, creates a structured response format, initializes an agent, and creates a task that uses the MCP tool to analyze web content.\nSOURCE: https://github.com/upsonic/upsonic/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom upsonic import Agent, Task, ObjectResponse\n\n# Define Fetch MCP configuration\nclass FetchMCP:\n    command = \"uvx\"\n    args = [\"mcp-server-fetch\"]\n\n# Create response format for web content\nclass WebContent(ObjectResponse):\n    title: str\n    content: str\n    summary: str\n    word_count: int\n\n# Initialize agent\nweb_agent = Agent(\n    \"Web Content Analyzer\",\n    model=\"openai/gpt-4o\",  # You can use other models\n)\n\n# Create a task to analyze a web page\ntask = Task(\n    description=\"Fetch and analyze the content from url. Extract the main content, title, and create a brief summary.\",\n    context=[\"https://upsonic.ai\"],\n    tools=[FetchMCP],\n    response_format=WebContent\n)\n    \n# Usage\nresult = web_agent.print_do(task)\nprint(result.title)\nprint(result.summary)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Upsonic Agent Task\nDESCRIPTION: Simple example of creating and executing a task with an Upsonic agent. The code initializes a Task with a question, creates an Agent named \"Coder\", and uses the print_do method to display the result.\nSOURCE: https://github.com/upsonic/upsonic/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom upsonic import Task, Agent\n\ntask = Task(\"Who developed you?\")\n\nagent = Agent(\"Coder\")\n\nagent.print_do(task)\n```\n\n----------------------------------------\n\nTITLE: Making Direct LLM Calls with Upsonic\nDESCRIPTION: Example of making direct LLM calls without agent abstraction. This approach is suitable for simpler tasks that don't require the full agent framework. The code creates a Direct instance with a specified model and executes a simple task.\nSOURCE: https://github.com/upsonic/upsonic/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom upsonic import Task, Direct\n\ndirect = Direct(model=\"openai/gpt-4o\")\n\ntask = Task(\"Where can I use agents in real life?\")\n\ndirect.print_do(task)\n```\n\n----------------------------------------\n\nTITLE: Installing Upsonic via pip\nDESCRIPTION: Command to install the Upsonic package from PyPI using pip. This is the standard installation method for adding Upsonic to a Python environment.\nSOURCE: https://github.com/upsonic/upsonic/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install upsonic\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: Shell command to set the OPENAI_API_KEY environment variable, which is required for Upsonic to authenticate with OpenAI's API services.\nSOURCE: https://github.com/upsonic/upsonic/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=sk-***\n```\n\n----------------------------------------\n\nTITLE: Disabling Upsonic Telemetry via Environment Variable\nDESCRIPTION: Code example showing how to disable anonymous telemetry collection in Upsonic by setting an environment variable. By default, Upsonic collects anonymous usage data to improve development focus.\nSOURCE: https://github.com/upsonic/upsonic/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"UPSONIC_TELEMETRY\"] = \"False\"\n```"
  }
]