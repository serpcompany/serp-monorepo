[
  {
    "owner": "python-thread",
    "repo": "thread",
    "content": "TITLE: Getting Thread Return Value\nDESCRIPTION: Example of retrieving the return value from a thread's target function\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.get_return_value()\n```\n\n----------------------------------------\n\nTITLE: Adding Thread Hooks\nDESCRIPTION: Demonstrates how to add hooks that execute after thread completion with the result as argument\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = lambda x: x+1, args = (2,))\nworker.add_hook(lambda x: print(f'Worker Hook: {x}')\nworker.start()\n\n# > Worker Hook: 3\n# Program ends\n```\n\n----------------------------------------\n\nTITLE: Basic ConcurrentProcessing Initialization Examples in Python\nDESCRIPTION: Shows different ways to initialize the ConcurrentProcessing class with both positional and keyword arguments. Demonstrates how to pass a function and dataset to process.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nthread.ConcurrentProcessing(lambda x: x + 1, [])\nthread.ConcurrentProcessing(function = lambda x: x + 1, dataset = [])\n```\n\n----------------------------------------\n\nTITLE: Initializing Threads On-Demand in Python\nDESCRIPTION: Demonstrates how to create and start a thread using the on-demand approach. Shows both the recommended way using keyword arguments and the alternative approach.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef my_target(): ...\n\n# Recommended way\nmy_thread = Thread(\n  target = my_target\n)\n\n# OR\n# Not the recommended way\nmy_thread = Thread(my_target)\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_thread.start()\n```\n\n----------------------------------------\n\nTITLE: Starting Parallel Processing Threads in Python\nDESCRIPTION: Demonstrates how to initialize and start parallel processing using the ParallelProcessing class. Takes a function and dataset as input parameters and begins thread execution.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.ParallelProcessing(function = my_func, dataset = [1, 2, 3])\nworker.start()\n```\n\n----------------------------------------\n\nTITLE: Getting Thread Return Value\nDESCRIPTION: Example showing how to get the return value from a thread using get_return_value() method, which blocks until thread completion.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.get_return_value()\n```\n\n----------------------------------------\n\nTITLE: Using Decorated Functions for Automatic Thread Spawning in Python\nDESCRIPTION: This example demonstrates how to use the @thread.processor decorator to automatically spawn new threads for a function. The decorated function runs in the background every time it is called.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/examples/processing.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport thread\n\n@thread.processor\ndef my_processor(x):\n  time.wait(5)\n  print('My processing task is complete.')\n  return x\n\nworker = my_background_task([1, 2, 3])\nprint('Started processing task.')\n\nworker.join()\nworker.get_return_values() # [1, 2, 3]\n\n# Terminal output:\n# > Started processing task.\n# > My processing task is complete.\n```\n\n----------------------------------------\n\nTITLE: Joining Threads\nDESCRIPTION: Shows how to wait for thread completion using join() with optional timeout\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nworker = thread.Thread(target = my_target)\nworker.join(5)\nworker.join()\n```\n\n----------------------------------------\n\nTITLE: Ignoring Exceptions in Python Thread\nDESCRIPTION: Shows how to ignore specific exception types using ignore_errors parameter. Specified exceptions will not be stored or raised when they occur.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/exceptions.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Thread\n\ndef bad_function():\n  raise RuntimeError('>:cc')\n\n# Ignore error\nthread2 = Thread(\n  target = bad_function,\n  ignore_errors = [RuntimeError]\n)\nthread2.start()\nthread2.join()\nprint(thread2._errors) # list[]\n```\n\n----------------------------------------\n\nTITLE: ConcurrentProcessing Usage Patterns with Type Inference in Python\nDESCRIPTION: Demonstrates best practices for type inference when using ConcurrentProcessing. Compares lambda functions versus named functions for better LSP/Linter support.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ConcurrentProcessing\n\nworker = ConcurrentProcessing(function = lambda x: x + 1, dataset = [1, 2, 3])\nworker.start()\nworker.join()\n\nworker.results # This will be inferred as Unknown by your LSP/Linter\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ConcurrentProcessing\n\ndef my_target(x: int) -> int:\n  return x + 1\n\nworker = ConcurrentProcessing(function = my_target, dataset = [1, 2, 3])\nworker.start()\nworker.join()\n\nworker.results # This will be inferred as a list[int]\n```\n\n----------------------------------------\n\nTITLE: Starting a Thread\nDESCRIPTION: Example of how to start a thread using the start() method\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Safety in Python Threads with Annotations\nDESCRIPTION: This snippet showcases how to use type annotations in Python 3.9+ to ensure type safety when working with threads. It demonstrates annotating a function and using it with thread.ParallelProcessing.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/examples/processing.mdx#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\ndef processor_function(x: int) -> int:\n  return x + 1\n\nworker = thread.ParallelProcessing(function=processor_function, dataset=(1,))\nworker.start()\nreturned = worker.get_return_value() # list[int]\n```\n\n----------------------------------------\n\nTITLE: On-Demand Initialization of ConcurrentProcessing\nDESCRIPTION: Python code demonstrating how to initialize the ConcurrentProcessing class with a function and dataset, showing both recommended and alternative approaches.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef my_data_processor(Data_In) -> Data_Out: ...\n\n# Recommended way\nmy_processor = ConcurrentProcessing(\n  function = my_data_processor,\n  dataset = [i in range(0, n)]\n)\n\n# OR\n# Not the recommended way\nmy_processor = ConcurrentProcessing(my_data_processor, [i in range(0, n)])\n```\n\n----------------------------------------\n\nTITLE: Using Decorator Approach for ConcurrentProcessing\nDESCRIPTION: Python code showing how to use the thread.processor decorator to create concurrent processing functions. This approach modifies the function signature to accept datasets.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n@thread.processor\ndef my_target(Data_In, arg1, arg2, *, arg3: bool = False) -> Data_Out: ...\n\ndataset: Sequence[type[Data_In]]\nworker = my_target(dataset, arg1, arg2, arg3 = True) # thread.ConcurrentProcessing()\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling with ignore_errors Parameter\nDESCRIPTION: Shows how to specify which exceptions should be ignored during thread execution. Demonstrates ignoring all exceptions, specific exceptions, and the impact on execution flow.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n# This ignores all exceptions\n# thread.errors = []\n# hooks begin execution\nthread.Thread(target = raiseRuntimeError, ignore_errors = (Exception,))\n\n# This propagates the exception\n# thread.errors = [RuntimeError]\n# thread is killed\nthread.Thread(target = raiseRuntimeError, ignore_errors = [TypeError])\n\n# This ignores RuntimeError\n# thread.errors = []\n# hooks begin execution\nthread.Thread(target = raiseRuntimeError, ignore_errors = [RuntimeError])\n```\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\ndef my_target():\n  print('Before raise')\n  raise Exception('oh no!')\n  print('After raise')\n\nthread.Thread(target = my_target, ignore_errors = (Exception,))\nthread.start()\n\n# > Before raise\n# Program End\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Threading Implementation in Python\nDESCRIPTION: Demonstrates type-safe threading implementation for Python 3.9+ using type annotations. Shows how to properly type-hint threaded functions and retrieve return values with correct typing.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/examples/threading.mdx#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\ndef background_function(x: int) -> int:\n  return x + 1\n\nworker = Thread(target=background_function, args=(5,))\nworker.start()\nreturned = worker.get_return_value() # int\n```\n\n----------------------------------------\n\nTITLE: Using ConcurrentProcessing with Custom Dataset Types\nDESCRIPTION: Python example showing how to use ConcurrentProcessing with dataset types that don't natively implement __len__ and __getitem__ methods by providing custom _length and _get_value functions.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ConcurrentProcessing\n\nmyDataFrame: ...\n\nprocess = ConcurrentProcessing(\n  function = lambda x: x + 1,\n  dataset = myDataFrame,\n  _length = myDataFrame.getLength(),\n  _get_value = lambda d, i: d.getIndex(i)\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Thread Package Components\nDESCRIPTION: Example showing how to import the Thread package and its main components (Thread and ConcurrentProcessing classes) into a Python project.\nSOURCE: https://github.com/python-thread/thread/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nfrom thread import Thread, ConcurrentProcessing\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Names in Python\nDESCRIPTION: Demonstrates how to assign a custom name to a thread. By default, threads receive auto-generated names following Python's threading convention.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nthread.Thread(target = my_target, name = 'my_thread')\n```\n\n----------------------------------------\n\nTITLE: Creating On-Demand Threads for Parallel Processing in Python\nDESCRIPTION: This snippet shows how to create and start an on-demand thread for parallel processing. It uses the thread.ParallelProcessing class to create a worker that executes a function with a given dataset.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/examples/processing.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport thread\n\ndef my_processor(x):\n  time.wait(5)\n  print('My processing task is complete.')\n  return x\n\nworker = thread.ParallelProcessing(function=my_processor, dataset=(1,))\nworker.start()\n\nprint('Started processing task.')\n\nworker.join() # Halt the main thread until the threads finish.\nworker.get_return_values() # [1]\n\n# Terminal output:\n# > Started processing task.\n# > My processing task is complete.\n```\n\n----------------------------------------\n\nTITLE: Initializing ParallelProcessing On-Demand\nDESCRIPTION: Shows how to create a parallel processing object by directly initializing it with a function and dataset.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef my_data_processor(Data_In) -> Data_Out: ...\n\n# Recommended way\nmy_processor = ParallelProcessing(\n  function = my_data_processor,\n  dataset = [i in range(0, n)]\n)\n\n# OR\n# Not the recommended way\nmy_processor = ParallelProcessing(my_data_processor, [i in range(0, n)])\n```\n\n----------------------------------------\n\nTITLE: Python Thread Start Method Example\nDESCRIPTION: Shows how to start a thread using the start() method.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_thread.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing ParallelProcessing with Lambda Function in Python\nDESCRIPTION: Demonstrates two ways to initialize the ParallelProcessing class using a lambda function. The first method uses positional arguments, while the second uses keyword arguments.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nthread.ParallelProcessing(lambda x: x + 1, [])\nthread.ParallelProcessing(function = lambda x: x + 1, dataset = [])\n```\n\n----------------------------------------\n\nTITLE: Joining Concurrent Processing Threads in Python\nDESCRIPTION: Demonstrates the use of the join() method to halt current thread execution until ConcurrentProcessing completes or exceeds a timeout. The timeout parameter is optional.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nworker = thread.ConcurrentProcessing(function = my_func, dataset = [1, 2, 3])\nworker.join(5)\nworker.join()\n```\n\n----------------------------------------\n\nTITLE: Python Thread Initialization Examples\nDESCRIPTION: Demonstrates different ways to initialize and start a thread using the Thread class.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef my_target(): ...\n\n# Recommended way\nmy_thread = Thread(\n  target = my_target\n)\n\n# OR\n# Not the recommended way\nmy_thread = Thread(my_target)\n```\n\n----------------------------------------\n\nTITLE: Customizing Thread Behavior with Decorator Arguments\nDESCRIPTION: Python code example showing how to pass keyword arguments to the thread.processor decorator to customize thread behavior.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n@thread.processor(name = 'my_thread', suppress_errors = True)\ndef my_target(): ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread Errors List\nDESCRIPTION: Example showing how to access the errors list attribute of a Thread instance which contains non-ignored errors raised by the thread.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.errors\n```\n\n----------------------------------------\n\nTITLE: Starting a ConcurrentProcessing Task\nDESCRIPTION: Simple Python code showing how to execute a concurrent processing task using the start() method.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmy_processor.start()\n```\n\n----------------------------------------\n\nTITLE: Custom _length Implementation for ConcurrentProcessing\nDESCRIPTION: Shows how to specify the dataset length using either a static value or a function that calculates length dynamically.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ConcurrentProcessing\n\ndataset: MyDatasetType = ...\n\nConcurrentProcessing(\n  function = my_function,\n  dataset = dataset,\n  _length = 5,\n)\n\ndef get_length(dataset: MyDatasetType) -> int: ...\nConcurrentProcessing(\n  function = my_function,\n  dataset = dataset,\n  _length = get_length,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Dataset Accessors in Thread v1.1.0+\nDESCRIPTION: Shows how to use custom _length and _get_value functions to make any dataset type compatible with ParallelProcessing.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom thread import ParallelProcessing\n\nmyDataFrame: ...\n\nprocess = ParallelProcessing(\n  function = lambda x: x + 1,\n  dataset = myDataFrame,\n  _length = myDataFrame.getLength(),\n  _get_value = lambda d, i: d.getIndex(i)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing On-Demand Threading in Python\nDESCRIPTION: Demonstrates how to create and start a thread manually using thread.Thread class. Shows how to perform background tasks with explicit thread start and join operations.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/examples/threading.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport thread\n\ndef my_background_task():\n  time.wait(5)\n  print('My background task is complete.')\n\nworker = thread.Thread(target=my_background_task)\nworker.start()\n\nprint('Started background task.')\n\nworker.join() # Halt the main thread until the background thread finishes.\n\n# Terminal output:\n# > Started background task.\n# > My background task is complete.\n```\n\n----------------------------------------\n\nTITLE: Comparing Lambda and Named Function Usage in ParallelProcessing\nDESCRIPTION: Illustrates the difference between using a lambda function and a named function in ParallelProcessing. The named function approach provides better type inference for LSP/Linter.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ParallelProcessing\n\nworker = ParallelProcessing(function = lambda x: x + 1, dataset = [1, 2, 3])\nworker.start()\nworker.join()\n\nworker.results # This will be inferred as Unknown by your LSP/Linter\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ParallelProcessing\n\ndef my_target(x: int) -> int:\n  return x + 1\n\nworker = ParallelProcessing(function = my_target, dataset = [1, 2, 3])\nworker.start()\nworker.join()\n\nworker.results # This will be inferred as a list[int]\n```\n\n----------------------------------------\n\nTITLE: Installing Thread using pip\nDESCRIPTION: Command to install Thread library using pip package manager.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/installation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install thread\n```\n\n----------------------------------------\n\nTITLE: Ignoring Exceptions in Python Thread\nDESCRIPTION: Demonstrates how to use ignore_errors parameter to specify which exception types should be ignored completely, preventing them from being stored or raised.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/exceptions.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Thread\n\ndef bad_function():\n  raise RuntimeError('>:cc')\n\n# Ignore error\nthread2 = Thread(\n  target = bad_function,\n  ignore_errors = [RuntimeError]\n)\nthread2.start()\nthread2.join()\nprint(thread2._errors) # list[]\n```\n\n----------------------------------------\n\nTITLE: Python Thread Decorator Usage\nDESCRIPTION: Shows how to use the thread.threaded decorator to create threaded functions.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n@thread.threaded\ndef my_target(): ...\n\nworker = my_target() # thread.Thread()\n```\n\n----------------------------------------\n\nTITLE: Importing Thread in Python\nDESCRIPTION: Code snippet showing how to import the Thread library in a Python file.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/installation.mdx#2025-04-20_snippet_5\n\nLANGUAGE: py\nCODE:\n```\nimport thread\n```\n\n----------------------------------------\n\nTITLE: Using Thread's parallel processing\nDESCRIPTION: Command to invoke the ParallelProcessing class for concurrent execution of tasks.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nthread process\n```\n\n----------------------------------------\n\nTITLE: Installing thread with pipx\nDESCRIPTION: Installing the thread Python library using pipx for isolated environments.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/installation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npipx install thread \n```\n\n----------------------------------------\n\nTITLE: Configuring Graceful Exit in Python Thread Library\nDESCRIPTION: Code example showing how to enable or disable the graceful exit feature which schedules non-daemonized threads to be killed when the program receives SIGINT or SIGTERM signals.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/configuration.mdx#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Settings\n\nSettings.get_graceful_exit(True)\nSettings.get_graceful_exit(False)\n```\n\n----------------------------------------\n\nTITLE: Passing Keyword Arguments to Thread Target Functions\nDESCRIPTION: Demonstrates how to provide keyword arguments to the target function using the kwargs parameter. Shows different ways to create the kwargs dictionary.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nthread.Thread(target = my_target, kwargs = {'foo': 'bar'})\nthread.Thread(target = my_target, kwargs = dict(foo = 'bar'))\n```\n\n----------------------------------------\n\nTITLE: Parallel Processing Examples with Thread CLI\nDESCRIPTION: Examples demonstrating parallel processing functionality using both interpreted and imported methods\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/command-line-interface.mdx#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nthread process 'lambda x: x**2' '[ i for i in range(1000) ]'\n```\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n# Start processing\nworker = thread.ParallelProcessing(\n  function = lambda x: x**2,\n  dataset = [ i for i in range(1000) ]\n)\nworker.start()\nworker.join()\n\n# Write output to \"./output.json\"\nwith open('./output.json', 'w') as output:\n  output.write(worker.results)\n```\n\nLANGUAGE: sh\nCODE:\n```\nthread process 'clean_data:clean' './dirty_data.csv'\n```\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nfrom .clean_data import clean\n\n# Read files\nwith open('./dataset.csv', 'r') as dataset:\n  data = dataset.readlines()\n\n# Starts processing\nworker = thread.ParallelProcessing(\n  function = clean,\n  dataset = data,\n)\nworker.start()\nworker.join()\n\n# Writes to \"output.json\"\nwith open('./output.json', 'w') as output:\n  output.write(worker.results)\n```\n\n----------------------------------------\n\nTITLE: Starting Concurrent Processing in Python\nDESCRIPTION: Demonstrates how to start processing using the ConcurrentProcessing class. The start() method is used to begin the execution of concurrent tasks.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.ConcurrentProcessing(function = my_func, dataset = [1, 2, 3])\nworker.start()\n```\n\n----------------------------------------\n\nTITLE: Python equivalent of inline lambda processing\nDESCRIPTION: Python code showing the equivalent implementation of the parallel square calculation using the Thread library directly.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_13\n\nLANGUAGE: py\nCODE:\n```\nimport thread\n\n# Start processing\nworker = thread.ParallelProcessing(\n  function = lambda x: x**2,\n  dataset = [ i for i in range(1000) ]\n)\nworker.start()\nworker.join()\n\n# Write output to \"./output.json\"\nwith open('./output.json', 'w') as output:\n  output.write(worker.results)\n```\n\n----------------------------------------\n\nTITLE: Adding Thread Hook\nDESCRIPTION: Example demonstrating how to add a hook function that executes after thread completion, receiving the thread's output as an argument.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = lambda x: x+1, args = (2,))\nworker.add_hook(lambda x: print(f'Worker Hook: {x}')\nworker.start()\n\n# > Worker Hook: 3\n# Program ends\n```\n\n----------------------------------------\n\nTITLE: Suppressing Exceptions in Python Thread\nDESCRIPTION: Demonstrates how to suppress exceptions in a thread using suppress_errors flag. When enabled, exceptions are stored in Thread._errors attribute instead of being raised.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/exceptions.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Thread\n\ndef bad_function():\n  raise RuntimeError('>:cc')\n\n# Suppress exceptions\nthread1 = Thread(\n  target = bad_function,\n  suppress_errors = True\n)\nthread1.start()\nthread1.join()\nprint(thread1._errors) # list[RuntimeError('>:cc')]\n```\n\n----------------------------------------\n\nTITLE: Importing ConcurrentProcessing Class\nDESCRIPTION: Code examples showing different ways to import the ConcurrentProcessing class from the thread module in Python.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nthread.ConcurrentProcessing\n\nfrom thread import ConcurrentProcessing\n```\n\n----------------------------------------\n\nTITLE: Installing Thread CLI with pip\nDESCRIPTION: Command to install the Thread CLI package using pip package manager.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install thread-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Graceful Exit in Python Thread Library\nDESCRIPTION: Shows how to enable or disable graceful exit functionality using the Settings class. When enabled, non-daemonized threads will be killed with Thread.kill() upon receiving SIGINT or SIGTERM signals.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/configuration.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Settings\n\nSettings.get_graceful_exit(True)\nSettings.get_graceful_exit(False)\n```\n\n----------------------------------------\n\nTITLE: Using Thread Decorators in Python\nDESCRIPTION: Shows how to use the @thread.threaded decorator to automatically spawn new threads for function execution. Simplifies thread creation by handling it at the function definition level.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/examples/threading.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport thread\n\n@thread.threaded\ndef my_background_task():\n  time.wait(5)\n  print('My background task is complete.')\n\nworker = my_background_task()\nprint('Started background task.')\n\nworker.join()\n\n# Terminal output:\n# > Started background task.\n# > My background task is complete.\n```\n\n----------------------------------------\n\nTITLE: Installing Thread CLI from Source\nDESCRIPTION: Steps to install Thread CLI by building from source code\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/command-line-interface.mdx#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Clone this repository\ngit clone https://github.com/python-thread/thread-cli\n\n# Install the upstream package\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Suppressing Error Propagation in Threads\nDESCRIPTION: Shows how to use the suppress_errors parameter to prevent exceptions from being propagated while still logging them to Thread.errors.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n# Thread.errors = [RuntimeError]\n# hooks begin execution\nthread.Thread(target = raiseRuntimeError, suppress_errors = True)\n```\n\n----------------------------------------\n\nTITLE: Thread Count Determination in ParallelProcessing\nDESCRIPTION: Formula used to determine the optimal number of threads for parallel processing, ensuring efficiency while preventing redundant threads.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nthread_count = min(max_threads, len(dataset))\n```\n\n----------------------------------------\n\nTITLE: Killing Parallel Processing Threads in Python\nDESCRIPTION: Demonstrates how to schedule thread termination with optional yielding and timeout parameters. Can wait for thread termination if yielding is True.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.ParallelProcessing(function = my_func, dataset = [1, 2, 3])\nworker.kill(True, 10)\nworker.kill(False)\nworker.kill()\n```\n\n----------------------------------------\n\nTITLE: Chunk Structure in ParallelProcessing\nDESCRIPTION: Example of how the dataset is split into chunks for parallel processing, maintaining the order of data.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nchunks = [[1, 2, 3, ...], [50, 51, 52, ...], ...]\n```\n\n----------------------------------------\n\nTITLE: Installing Thread CLI with Package Managers\nDESCRIPTION: Instructions for installing Thread CLI using different package managers including pip, pipx and poetry\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/command-line-interface.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install thread-cli\n```\n\nLANGUAGE: sh\nCODE:\n```\npipx install thread-cli\n```\n\nLANGUAGE: sh\nCODE:\n```\npoetry add thread-cli\n# OR\npoetry install thread-cli\n```\n\n----------------------------------------\n\nTITLE: Traditional Sequential Data Processing Example\nDESCRIPTION: A Python code example demonstrating the traditional sequential approach to processing data with a for loop, which can be inefficient for large datasets.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmy_dataset = [] # Large dataset\ndef my_data_processor(Data_In) -> Data_Out:\n  ...\n\nprocessed_data = []\nfor data in my_dataset:\n  processed_data = my_data_processor(data)\n\nprint(processed_data) # Processed data\n```\n\n----------------------------------------\n\nTITLE: Joining Parallel Processing Threads in Python\nDESCRIPTION: Shows how to wait for thread completion using join() method with optional timeout parameter. Returns boolean indicating if threads completed within timeout period.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nworker = thread.ParallelProcessing(function = my_func, dataset = [1, 2, 3])\nworker.join(5)\nworker.join()\n```\n\n----------------------------------------\n\nTITLE: Traditional For Loop Processing in Python\nDESCRIPTION: Example of processing data with a traditional for loop, which is simple but not optimized for large datasets.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nmy_dataset = [] # Large dataset\ndef my_data_processor(Data_In) -> Data_Out:\n  ...\n\nprocessed_data = []\nfor data in my_dataset:\n  processed_data = my_data_processor(data)\n\nprint(processed_data) # Processed data\n```\n\n----------------------------------------\n\nTITLE: Killing Threads\nDESCRIPTION: Demonstrates how to schedule a thread to be killed with optional yielding and timeout\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.kill(True, 10)\nworker.kill(False)\nworker.kill()\n```\n\n----------------------------------------\n\nTITLE: HookRuntimeError Traceback Example\nDESCRIPTION: Shows the format of error traceback when a HookRuntimeError occurs, displaying the function name and specific error that was raised during hook execution.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/exceptions.mdx#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHookRuntimeError: Encountered runtime errors in hooks\n\n1. my_function\n>>>>>>>>>>\n/usr/home/proj/main.py:50\nZeroDivisionError:\n<<<<<<<<<<\n\n2. my_otherfunction\n>>>>>>>>>>\nImportError:\n<<<<<<<<<<\n```\n\n----------------------------------------\n\nTITLE: Joining Thread\nDESCRIPTION: Example showing how to wait for thread completion using join() method, with optional timeout parameter.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nworker = thread.Thread(target = my_target)\nworker.join(5)\nworker.join()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Exceptions in Python Thread\nDESCRIPTION: Shows how to initialize a thread with suppress_errors=True to store exceptions in Thread._errors attribute rather than raising them.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/exceptions.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Thread\n\ndef bad_function():\n  raise RuntimeError('>:cc')\n\n# Suppress exceptions\nthread1 = Thread(\n  target = bad_function,\n  suppress_errors = True\n)\nthread1.start()\nthread1.join()\nprint(thread1._errors) # list[RuntimeError('>:cc')]\n```\n\n----------------------------------------\n\nTITLE: Running Thread CLI Basic Commands\nDESCRIPTION: Basic commands for running and getting help with Thread CLI\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/command-line-interface.mdx#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nthread\n```\n\nLANGUAGE: sh\nCODE:\n```\nthread -h/--help\n```\n\n----------------------------------------\n\nTITLE: Combined Exception Handling in Python Thread\nDESCRIPTION: Demonstrates using both suppress_errors and ignore_errors together. Shows how non-ignored errors are still suppressed when suppress_errors is true.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/exceptions.mdx#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Non-ignored error with suppressing\nthread4 = Thread(\n  target = bad_function,\n  ignore_errors = [ValueError],\n  suppress_errors = True\n)\nthread4.start()\nthread4.join()\nprint(thread4._errors) # list[RuntimeError(':<<')]\n```\n\n----------------------------------------\n\nTITLE: Hook Runtime Error Traceback Example\nDESCRIPTION: Shows the format of HookRuntimeError traceback when hooks raise exceptions. Demonstrates how errors are formatted in the error message.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/exceptions.mdx#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHookRuntimeError: Encountered runtime errors in hooks\n\n1. my_function\n>>>>>>>>>>\n/usr/home/proj/main.py:50\nZeroDivisionError:\n<<<<<<<<<<\n\n2. my_otherfunction\n>>>>>>>>>>\nImportError:\n<<<<<<<<<<\n```\n\n----------------------------------------\n\nTITLE: Specifying Dataset Length in ParallelProcessing\nDESCRIPTION: Shows how to specify the dataset length using the _length parameter in ParallelProcessing. This can be done with a fixed integer or a function. Available in v1.1.0+.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ParallelProcessing\n\ndataset: MyDatasetType = ...\n\nParallelProcessing(\n  function = my_function,\n  dataset = dataset,\n  _length = 5,\n)\n\ndef get_length(dataset: MyDatasetType) -> int: ...\nParallelProcessing(\n  function = my_function,\n  dataset = dataset,\n  _length = get_length,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Verbosity Level in Python Thread Library\nDESCRIPTION: Example demonstrating how to set the verbosity level that controls what is printed to the terminal. This feature is available in thread v1.0.1 and later.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/configuration.mdx#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Settings\n\nSettings.set_verbosity(1)\nSettings.set_verbosity('normal')\n```\n\n----------------------------------------\n\nTITLE: Custom _get_value Implementation for ConcurrentProcessing\nDESCRIPTION: Demonstrates how to customize value retrieval from a dataset using the _get_value parameter with different implementations.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ConcurrentProcessing\n\ndataset: MyDatasetType = ...\n\nConcurrentProcessing(\n  function = my_function,\n  dataset = dataset,\n  _get_value = lambda d, index: d[index],\n)\n\nConcurrentProcessing(\n  function = my_function,\n  dataset = dataset,\n  _get_value = lambda d, index: d.getIndex(index),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Verbosity Levels in Python Thread Library\nDESCRIPTION: Demonstrates how to adjust the verbosity level which controls what is printed to the terminal. This feature is available in thread v1.0.1 and later.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/configuration.mdx#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Settings\n\nSettings.set_verbosity(1)\nSettings.set_verbosity('normal')\n```\n\n----------------------------------------\n\nTITLE: Using Custom _get_value Function in ParallelProcessing\nDESCRIPTION: Demonstrates how to use a custom _get_value function with ParallelProcessing for different dataset types. This feature is available in v1.1.0+.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import ParallelProcessing\n\ndataset: MyDatasetType = ...\n\nParallelProcessing(\n  function = my_function,\n  dataset = dataset,\n  _get_value = lambda d, index: d[index],\n)\n\nParallelProcessing(\n  function = my_function,\n  dataset = dataset,\n  _get_value = lambda d, index: d.getIndex(index),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Return Values from Concurrent Processing in Python\nDESCRIPTION: Illustrates how to get return values from concurrent processing using the get_return_values() method. This method halts execution until processing completes and returns the results.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.ConcurrentProcessing(function = my_func, dataset = [1, 2, 3])\nworker.get_return_values()\n```\n\n----------------------------------------\n\nTITLE: Comparing Verbosity Levels in Python Thread Library\nDESCRIPTION: Example showing how Verbosity objects can be compared against strings, integers, and other Verbosity objects with equivalent mappings between numeric and string representations.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/configuration.mdx#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom thread.utils.config import Verbosity, Settings\n\n# Mapping\nVerbosity(0) == Verbosity('quiet')\nVerbosity(1) == Verbosity('normal')\nVerbosity(2) == Verbosity('verbose')\n\n# Comparison\nVerbosity(0) < 1          # True\nVerbosity(1) < 'verbose'  # True\nVerbosity(2) == 'verbose' # True\n```\n\n----------------------------------------\n\nTITLE: Creating Decorator-Based Threads in Python\nDESCRIPTION: Shows how to use the thread.threaded decorator to automatically run a function in a new thread. The decorated function returns a Thread object when called.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n@thread.threaded\ndef my_target(): ...\n\nworker = my_target() # thread.Thread()\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread Errors List\nDESCRIPTION: Demonstrates how to access the list of non-ignored errors raised by the thread\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.errors\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Status\nDESCRIPTION: Example showing how to check if a thread is still alive using the is_alive() method.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.is_alive()\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread Hooks\nDESCRIPTION: Shows how to access the list of hooks added to the thread that will be executed in order\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.hooks\n```\n\n----------------------------------------\n\nTITLE: Python Thread Decorator with Arguments\nDESCRIPTION: Demonstrates using the thread.threaded decorator with configuration arguments.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n@thread.threaded(name = 'my_thread', suppress_errors = True)\ndef my_target(): ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread Hooks List\nDESCRIPTION: Example showing how to access the hooks list attribute of a Thread instance which contains functions to be executed after thread completion.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.hooks\n```\n\n----------------------------------------\n\nTITLE: Python equivalent of imported function processing\nDESCRIPTION: Python code showing the equivalent implementation of processing CSV data using an imported function with the Thread library directly.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_15\n\nLANGUAGE: py\nCODE:\n```\nimport thread\nfrom .clean_data import clean\n\n# Read files\nwith open('./dataset.csv', 'r') as dataset:\n  data = dataset.readlines()\n\n# Starts processing\nworker = thread.ParallelProcessing(\n  function = clean,\n  dataset = data,\n)\nworker.start()\nworker.join()\n\n# Writes to \"output.json\"\nwith open('./output.json', 'w') as output:\n  output.write(worker.results)\n```\n\n----------------------------------------\n\nTITLE: Thread CLI Command Examples\nDESCRIPTION: Examples of various Thread CLI commands including docs, help, report, and config\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/command-line-interface.mdx#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nthread docs\n```\n\nLANGUAGE: sh\nCODE:\n```\nthread help\n```\n\nLANGUAGE: sh\nCODE:\n```\nthread report\n```\n\nLANGUAGE: sh\nCODE:\n```\nthread config\n```\n\nLANGUAGE: sh\nCODE:\n```\nthread process\n```\n\n----------------------------------------\n\nTITLE: Thread Count Determination Algorithm for ConcurrentProcessing\nDESCRIPTION: Python code showing how the ConcurrentProcessing class determines the optimal number of threads based on the maximum allowed threads and dataset size.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nthread_count = min(max_threads, len(dataset))\n```\n\n----------------------------------------\n\nTITLE: Building Thread CLI from source\nDESCRIPTION: Steps to install Thread CLI by cloning the repository and installing the package locally.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Clone this repository\ngit clone https://github.com/python-thread/thread-cli\n\n# Install the upstream package\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Using Keyword Arguments with Thread Decorators in Python\nDESCRIPTION: Demonstrates how to pass configuration options to the thread.threaded decorator using keyword arguments to customize thread behavior.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\n@thread.threaded(name = 'my_thread', suppress_errors = True)\ndef my_target(): ...\n```\n\n----------------------------------------\n\nTITLE: Installing Thread CLI with poetry\nDESCRIPTION: Commands to install the Thread CLI package using poetry dependency management.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry add thread-cli # OR poetry install thread-cli\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Thread Processor Decorator\nDESCRIPTION: Shows how to customize thread behavior by passing keyword arguments to the processor decorator.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nimport thread\n\n@thread.processor(name = 'my_thread', suppress_errors = True)\ndef my_target(): ...\n```\n\n----------------------------------------\n\nTITLE: Setting up Thread CLI Development Environment\nDESCRIPTION: Instructions for setting up a development environment for Thread CLI\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/command-line-interface.mdx#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Clone this repository\ngit clone https://github.com/python-thread/thread-cli\n\n# Install poetry\npip install poetry\n\n# Install dependencies\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Importing thread in Python\nDESCRIPTION: Basic example showing how to import the thread library in a Python file.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/installation.mdx#2025-04-20_snippet_5\n\nLANGUAGE: py\nCODE:\n```\nimport thread\n```\n\n----------------------------------------\n\nTITLE: Killing Thread\nDESCRIPTION: Example showing how to schedule a thread to be killed using kill() method, with optional yielding and timeout parameters.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.kill(True, 10)\nworker.kill(False)\nworker.kill()\n```\n\n----------------------------------------\n\nTITLE: Setting up Thread CLI for development\nDESCRIPTION: Instructions for setting up a development environment for Thread CLI using poetry.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Clone this repository\ngit clone https://github.com/python-thread/thread-cli\n\n# Install poetry\npip install poetry\n\n# Install dependencies\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thread Return Values in Python\nDESCRIPTION: Demonstrates how to get return values from parallel processing threads. Blocks execution until processing completes and returns function results.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.ParallelProcessing(function = my_func, dataset = [1, 2, 3])\nworker.get_return_values()\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Status\nDESCRIPTION: Shows how to check if a thread is still alive using is_alive() method\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.is_alive()\n```\n\n----------------------------------------\n\nTITLE: Setting up a development environment for thread\nDESCRIPTION: Instructions for setting up a development environment for contributing to the thread library using Poetry.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/installation.mdx#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Clone this repository\ngit clone https://github.com/python-thread/thread\n\n# Install poetry\npip install poetry\n\n# Install dependencies\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Status in Python\nDESCRIPTION: Shows how to check if threads are still running using the is_alive() method. Returns a boolean indicating thread status.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.ParallelProcessing(function = my_func, dataset = [1, 2, 3])\nworker.is_alive()\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Status in Python\nDESCRIPTION: Shows how to check if threads are still alive using the is_alive() method of the ConcurrentProcessing class. This method returns a boolean indicating the thread status.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.ConcurrentProcessing(function = my_func, dataset = [1, 2, 3])\nworker.is_alive()\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest\nDESCRIPTION: Commands for running tests using Pytest or npm test command. Shows how to execute tests with verbose output.\nSOURCE: https://github.com/python-thread/thread/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# To test your code, run:\nnpm test\n\n# Or\npytest -sv .\n```\n\n----------------------------------------\n\nTITLE: Killing Concurrent Processing Threads in Python\nDESCRIPTION: Shows how to schedule threads for termination using the kill() method. It can be used with or without yielding and timeout parameters. Note that this method only schedules termination and doesn't immediately kill threads.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.ConcurrentProcessing(function = my_func, dataset = [1, 2, 3])\nworker.kill(True, 10)\nworker.kill(False)\nworker.kill()\n```\n\n----------------------------------------\n\nTITLE: Building Thread from source\nDESCRIPTION: Steps to clone the Thread repository and install the package from source using pip.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/installation.mdx#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Clone this repository\ngit clone https://github.com/python-thread/thread\n\n# Install the upstream package\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Parallel processing with imported function\nDESCRIPTION: Example of using Thread CLI to process CSV data with an imported cleaning function.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nthread process 'clean_data:clean' './dirty_data.csv'\n```\n\n----------------------------------------\n\nTITLE: Installing thread with pip\nDESCRIPTION: Installing the thread Python library using pip package manager.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/installation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install thread \n```\n\n----------------------------------------\n\nTITLE: Example of Runtime Type Safety Limitation in Python Thread\nDESCRIPTION: Demonstrates how thread will not raise type errors at runtime even when incorrect types are passed. The function expects an integer but receives a string, which will cause a runtime error due to invalid operations rather than type checking.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/cautions/type-safety.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\ndef draw(x: int, y: int) -> bool: ...\nworker = thread.Thread(target=draw, args=(thread,), kwargs={'y': ':<'}) # This will not be underlined by your LSP/linter\n\n# Other methods from Thread are not affected\nworker.result # Will be typed as bool\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Messages with Conventional Commits\nDESCRIPTION: Examples demonstrating proper commit message formatting using conventional commits specification. Shows how to prefix commits with type indicators like docs and revert.\nSOURCE: https://github.com/python-thread/thread/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m \"docs: Added README.md\"\ngit commit -m \"revert: Removed README.md\"\ngit commit -m \"docs: Moved README.md\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Thread\nDESCRIPTION: Example showing how to start a thread using the start() method.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nworker = thread.Thread(target = my_target)\nworker.start()\n```\n\n----------------------------------------\n\nTITLE: Installing Thread using pipx\nDESCRIPTION: Command to install Thread library using pipx package manager.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/installation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npipx install thread\n```\n\n----------------------------------------\n\nTITLE: ParamSpec Type Annotation Limitation in Python Thread Library\nDESCRIPTION: Shows the implementation challenge with ParamSpec that prevents proper type checking for args and kwargs in Thread initialization. The required syntax for ParamSpec differs from what's needed for the Thread class implementation.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/cautions/type-safety.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nP = ParamSpec('P')\nT = TypeVar('T')\n\n# What is required by ParamSpec.args and ParamSpec.kwargs\ndef __init__(\n  self,\n  target: Callable[P, T],\n  *args: P.args,\n  **kwargs: P.kwargs\n) -> None: ...\n\n# What we need\ndef __init__(\n  self,\n  target: Callable[P, T],\n  args: P.args,\n  kwargs: P.kwargs,\n  *threadingArgs,\n  **threadKwargs\n) -> None: ...\n```\n\n----------------------------------------\n\nTITLE: Opening Thread documentation\nDESCRIPTION: Command to open the Thread CLI documentation in a web browser.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nthread docs\n```\n\n----------------------------------------\n\nTITLE: Initializing ParallelProcessing with Different Dataset Types\nDESCRIPTION: Shows how to initialize ParallelProcessing with different dataset types. The second example demonstrates a case that would be flagged by LSP/Linter.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\ndef my_function(x: int) -> int:\n  ...\n\nthread.ParallelProcessing(function = my_function, dataset = [1, 2, 3])\nthread.ParallelProcessing(function = my_function, dataset = ('hi')) # This will be highlighted by your LSP/Linter\n```\n\n----------------------------------------\n\nTITLE: Installing thread with poetry\nDESCRIPTION: Installing the thread Python library using Poetry dependency management.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/installation.mdx#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry add thread # OR poetry install thread \n```\n\n----------------------------------------\n\nTITLE: Converting Dataset for Thread v1.0.1 and Below\nDESCRIPTION: Shows the workaround for making datasets compatible with ParallelProcessing in older versions by converting to a supported type.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom thread import ParallelProcessing\n\nmyDataFrame: ...\n\ncompatibleDataset = [ ... ] # Convert to a supported dataset type\n\nprocess = ParallelProcessing(function = lambda x: x + 1, dataset = compatibleDataset)\n```\n\n----------------------------------------\n\nTITLE: Reporting issues with Thread CLI\nDESCRIPTION: Command to report issues with Thread CLI by opening the issue tracker.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nthread report\n```\n\n----------------------------------------\n\nTITLE: Installing Thread using poetry\nDESCRIPTION: Commands to install Thread library using poetry package manager. Provides two options: adding to existing project or installing it.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/installation.mdx#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry add thread # OR poetry install thread\n```\n\n----------------------------------------\n\nTITLE: Installing Thread CLI with pipx\nDESCRIPTION: Command to install the Thread CLI package using pipx for isolated environments.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npipx install thread-cli\n```\n\n----------------------------------------\n\nTITLE: Starting Parallel Processing Execution\nDESCRIPTION: Shows how to execute the parallel processing task using the start method.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nmy_processor.start()\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Thread Target Functions\nDESCRIPTION: Shows how to provide positional arguments to the target function using the args parameter. Supports both tuples and lists for argument sequences.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nthread.Thread(target = my_target, args = ('foo', 'bar'))\nthread.Thread(target = my_target, args = ['foo', 'bar'])\n```\n\n----------------------------------------\n\nTITLE: Python Thread Class Import Examples\nDESCRIPTION: Shows different ways to import the Thread class from the thread module.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nthread.Thread\n\nfrom thread import Thread\n```\n\n----------------------------------------\n\nTITLE: Comparing Verbosity Levels in Python Thread Library\nDESCRIPTION: Shows how to compare Verbosity objects with strings, integers, and other Verbosity objects. This demonstrates the mapping between numeric values and named verbosity levels.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/configuration.mdx#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom thread.utils.config import Verbosity, Settings\n\n# Mapping\nVerbosity(0) == Verbosity('quiet')\nVerbosity(1) == Verbosity('normal')\nVerbosity(2) == Verbosity('verbose')\n\n# Comparison\nVerbosity(0) < 1          # True\nVerbosity(1) < 'verbose'  # True\nVerbosity(2) == 'verbose' # True\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread CLI configuration\nDESCRIPTION: Command to access and modify Thread CLI configuration (noted as coming soon).\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nthread config\n```\n\n----------------------------------------\n\nTITLE: Importing the Thread Class in Python\nDESCRIPTION: Shows different ways to import the Thread class from the thread module. Demonstrates both importing the entire module and importing just the Thread class.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport thread\nthread.Thread\n\nfrom thread import Thread\n```\n\n----------------------------------------\n\nTITLE: Importing Thread Settings in Python\nDESCRIPTION: Example of how to import the Settings class from the thread module. This is required before configuring any thread settings.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/configuration.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Settings\n```\n\n----------------------------------------\n\nTITLE: Importing ParallelProcessing in Python\nDESCRIPTION: Shows two ways to import the ParallelProcessing class from the thread module.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport thread\nthread.ParallelProcessing\n\nfrom thread import ParallelProcessing\n```\n\n----------------------------------------\n\nTITLE: Using Decorated Function for Parallel Processing\nDESCRIPTION: Shows how to use the thread.processor decorator to create functions that automatically run in parallel threads.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nimport thread\n\n@thread.processor\ndef my_target(Data_In, arg1, arg2, *, arg3: bool = False) -> Data_Out: ...\n\ndataset: Sequence[type[Data_In]]\nworker = my_target(dataset, arg1, arg2, arg3 = True) # thread.ParallelProcessing()\n```\n\n----------------------------------------\n\nTITLE: Installing Thread Package via pip\nDESCRIPTION: Command to install or upgrade the Thread package using pip package manager.\nSOURCE: https://github.com/python-thread/thread/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -U thread\n```\n\n----------------------------------------\n\nTITLE: Dataset Type Compatibility Example in ConcurrentProcessing\nDESCRIPTION: Shows how to use the dataset parameter with proper type hints and demonstrates potential LSP/Linter warnings when types don't match.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\ndef my_function(x: int) -> int:\n  ...\n\nthread.ConcurrentProcessing(function = my_function, dataset = [1, 2, 3])\nthread.ConcurrentProcessing(function = my_function, dataset = ('hi')) # This will be highlighted by your LSP/Linter\n```\n\n----------------------------------------\n\nTITLE: Importing Thread Settings in Python\nDESCRIPTION: Example of how to import the Settings class from the thread module to access configuration options.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/configuration.mdx#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Settings\n```\n\n----------------------------------------\n\nTITLE: Specifying the Target Function for Thread Initialization\nDESCRIPTION: Shows how to provide a target function to Thread initialization, with examples using direct assignment and keyword arguments. Includes best practices for type inference.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport thread\n\nthread.Thread(lambda x: x + 1)\nthread.Thread(target = lambda x: x + 1)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Thread\n\nworker = Thread(target = lambda x: x + 1)\nworker.start()\nworker.join()\n\nworker.result # This will be inferred as Unknown by your LSP/Linter\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom thread import Thread\n\ndef my_target(x: int) -> int:\n  return x + 1\n\nworker = Thread(target = my_target)\nworker.start()\nworker.join()\n\nworker.result # This will be inferred as int\n```\n\n----------------------------------------\n\nTITLE: Setting up Thread development environment\nDESCRIPTION: Steps to clone the Thread repository, install poetry, and set up the development environment with all dependencies.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/installation.mdx#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Clone this repository\ngit clone https://github.com/python-thread/thread\n\n# Install poetry\npip install poetry\n\n# Install dependencies\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Components for Thread Cautions in React\nDESCRIPTION: This JSX code creates a card layout for displaying cautions related to using Thread, specifically for type safety and parallelism topics.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/cautions.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Cards>\n  <Card\n    title=\"Type Safety\"\n    href=\"/learn/cautions/type-safety\"\n    icon={<LightningBoltIcon />}\n  />\n  <Card\n    title=\"Parallelism\"\n    href=\"/learn/cautions/parallelism\"\n    icon={<GridIcon />}\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Combining Suppression and Ignoring in Python Thread\nDESCRIPTION: Illustrates how to use both suppress_errors and ignore_errors together, where specified exceptions are ignored while others are suppressed but still stored.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/exceptions.mdx#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Non-ignored error with suppressing\nthread4 = Thread(\n  target = bad_function,\n  ignore_errors = [ValueError],\n  suppress_errors = True\n)\nthread4.start()\nthread4.join()\nprint(thread4._errors) # list[RuntimeError(':<<')]\n```\n\n----------------------------------------\n\nTITLE: Building thread from source\nDESCRIPTION: Instructions for cloning the repository and installing the thread package from source code.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/installation.mdx#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Clone this repository\ngit clone https://github.com/python-thread/thread\n\n# Install the upstream package\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Importing React Icons for Thread Examples Navigation\nDESCRIPTION: Imports specific icon components from the Radix UI React Icons library for use in the example navigation cards. These icons provide visual cues for the different example categories.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/examples.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pencil1Icon, BarChartIcon } from \"@radix-ui/react-icons\";\nimport { Card, Cards } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Getting help with Thread CLI\nDESCRIPTION: Command to open the help resources for Thread CLI in a browser.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nthread help\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for Documentation Layout in JSX\nDESCRIPTION: This code imports various icon components from the @radix-ui/react-icons library, along with Cards and Card components from nextra/components. These components are used to create the navigation cards in the documentation interface.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  LightningBoltIcon,\n  ExclamationTriangleIcon,\n  GearIcon,\n  MixIcon,\n  CodeIcon,\n} from \"@radix-ui/react-icons\";\nimport { Cards, Card } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Viewing Thread CLI help\nDESCRIPTION: Command to display the help information for Thread CLI commands and options.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nthread -h/--help\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentWrapper Component in React\nDESCRIPTION: Creates a collapsible details component for wrapping argument documentation with custom styling.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function ArgumentWrapper({ children, className, ...props }) {\n  return (\n    <details\n      {...props}\n      className={cn(\n        \"last-of-type:mb-0 rounded-lg bg-neutral-50 dark:bg-neutral-800 p-2 mt-4\",\n        className,\n      )}\n    >\n      {children}\n    </details>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Thread CLI\nDESCRIPTION: Basic command to run the Thread CLI tool after installation.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nthread\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Root App Component with Global Styles\nDESCRIPTION: Defines the main App component that wraps all pages in a Next.js application. It imports global CSS styles and passes pageProps to child components using spread operator.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/_app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@/styles/globals.css\";\n\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Linting Tools\nDESCRIPTION: Commands for running and fixing linting using npm scripts. Uses Ruff, ESLint and Prettier for code style enforcement.\nSOURCE: https://github.com/python-thread/thread/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# To lint your code, run:\nnpm run lint\n\n# To fix any linting errors, run:\nnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Defining Link Variant Styles\nDESCRIPTION: This snippet defines a linkVariant object with default styles for different link variants using the cn utility function.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/index.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const linkVariant = {\n  default: cn(\n    \"bg-neutral-100 dark:bg-neutral-800 hover:bg-neutral-200 dark:hover:bg-neutral-700 border border-neutral-300 dark:border-neutral-700\",\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Printing a Message in Python\nDESCRIPTION: A simple Python print statement that outputs a greeting message to the console. This demonstrates basic string output functionality in Python.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/thread/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hey I am some example code!\")\n```\n\n----------------------------------------\n\nTITLE: Defining Text Component in React\nDESCRIPTION: Creates a styled paragraph element with consistent margins for documentation text.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function Text({ children, className, ...props }) {\n  return (\n    <p {...props} className={cn(\"nx-mt-0\", className)}>\n      {children}\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Definitions for Arguments Display\nDESCRIPTION: Defines React components for displaying argument documentation including ArgumentWrapper, ArgumentBody, ArgumentExtra, and TabbedData components. These components are used to format and display documentation content.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/thread-class.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ArgumentWrapper({ children, className, ...props }) {\n  return (\n    <details\n      {...props}\n      className={cn(\n        \"last-of-type:mb-0 rounded-lg bg-neutral-50 dark:bg-neutral-800 p-2 mt-4\",\n        className,\n      )}\n    >\n      {children}\n    </details>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentBody Component in React/JSX\nDESCRIPTION: A React component that formats the body content of an argument documentation section with appropriate padding and styling.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/configuration.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport function ArgumentBody({ children, className, ...props }) {\n  return (\n    <div {...props} className={cn(\"nx-p-2\", className)}>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Cards for Thread Examples\nDESCRIPTION: Sets up a card-based navigation interface using Nextra components. Each card represents a different example category with a title, link to the respective documentation page, and an appropriate icon.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/examples.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card\n    title=\"Threading\"\n    href=\"/learn/examples/threading\"\n    icon={<Pencil1Icon />}\n  />\n  <Card\n    title=\"Data Processing\"\n    href=\"/learn/examples/processing\"\n    icon={<BarChartIcon />}\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Parallel processing example with inline lambda\nDESCRIPTION: Example of using Thread CLI to process a list of numbers with a square function in parallel.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/command-line-interface.mdx#2025-04-20_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nthread process 'lambda x: x**2' '[ i for i in range(1000) ]'\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Component for Display Cards\nDESCRIPTION: This component renders a feature card with title, description, version tag, and optional link. It includes custom styling with hover effects and conditional rendering logic.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/index.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Feature({\n  title,\n  description,\n  version = false,\n  href = false,\n  ...props\n}) {\n  return (\n    <div\n      {...props}\n      className=\"flex flex-col h-96 w-72 pt-20 border dark:border-neutral-800 bg-neutral-100/90 dark:bg-neutral-900/80 relative rounded px-4 py-6 bg-[linear-gradient(45deg,transparent_25%,rgba(68,68,68,.2)_50%,transparent_75%,transparent_100%)] bg-[length:250%_250%,100%_100%] overflow-hidden bg-[position:-100%_0,0_0] bg-no-repeat hover:transition-[background-position_0s_ease] hover:bg-[position:200%_0,0_0] hover:duration-[1500ms]\"\n    >\n      {version ? (\n        <p className=\"nx-mt-0 mb-1 text-xs bg-clip-text text-transparent bg-gradient-radial from-pink-500 to-violet-500\">\n          {version}\n        </p>\n      ) : (\n        <div className=\"nx-mt-0 h-4 mb-1\"></div>\n      )}\n      <p className=\"nx-mt-0 mb-2 text-2xl font-bold\">{title}</p>\n      <p className=\"nx-mt-0 text-sm font-normal text-neutral-600 dark:text-neutral-300\">\n        {description}\n      </p>\n      {href && (\n        <Link\n          href={href}\n          className=\"absolute bottom-4 right-4 text-neutral-600/80 dark:text-neutral-300/80 hover:text-neutral-600 dark:hover:text-neutral-300 flex items-center gap-1 hover:gap-2 hover:right-3 transition-all\"\n        >\n          <span>Read More</span>\n          <ArrowRightIcon />\n        </Link>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Text React Component\nDESCRIPTION: This snippet defines a Text component that renders a paragraph with customizable styling.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/index.mdx#2025-04-20_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nexport function Text({ children, className }) {\n  return (\n    <p className={cn(\"text-sm font-medium nx-mt-0\", className)}>{children}</p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TabbedData Component in React\nDESCRIPTION: Creates a tabbed interface for displaying different types of thread statuses or exceptions.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function TabbedData({ type, keys = [] }) {\n  return (\n    <Tabs items={keys}>\n      {keys.map((key, i) => (\n        <Tabs.Tab key={i}>\n          {type === \"status\" ? ThreadStatuses[key] : ThreadExceptions[key]}\n        </Tabs.Tab>\n      ))}\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentExtra Component in React/JSX\nDESCRIPTION: A React component that adds supplementary information to argument documentation with specific margin and text styling.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/configuration.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport function ArgumentExtra({ children, className, ...props }) {\n  return (\n    <span {...props} className={cn(\"ml-4 text-neutral-500\", className)}>\n      {children}\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentExtra Component in React\nDESCRIPTION: Creates a styled span element for displaying supplementary information in argument documentation.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function ArgumentExtra({ children, className, ...props }) {\n  return (\n    <span {...props} className={cn(\"ml-4 text-neutral-500\", className)}>\n      {children}\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StatusBadge React Component\nDESCRIPTION: This snippet defines a StatusBadge component that renders a customizable badge with variant styling for different status types.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/index.mdx#2025-04-20_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nexport function StatusBadge({ children, variant = \"beta\", className }) {\n  return (\n    <span\n      className={cn(\n        \"px-2 py-1 rounded-md nx-mt-0\",\n        statusVariant[variant],\n        className,\n      )}\n    >\n      {children}\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Balanced Text Component in React/JSX\nDESCRIPTION: Defines a Balanced React component that wraps content with balanced text wrapping and specific styling. It forwards additional props to the underlying div element.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/about.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport function Balanced({ children, className = \"\", ...props }) {\n  return (\n    <div\n      className={\"nx-mt-6 nx-leading-7 first:nx-mt-0 \" + className}\n      style={{ textWrap: \"balance\" }}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentWrapper React Component\nDESCRIPTION: A React component that creates a collapsible details element with custom styling for displaying arguments in documentation.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function ArgumentWrapper({ children, className, ...props }) {\n  return (\n    <details\n      {...props}\n      className={cn(\n        \"last-of-type:mb-0 rounded-lg bg-neutral-50 dark:bg-neutral-800 p-2 mt-4\",\n        className,\n      )}\n    >\n      {children}\n    </details>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components from Next.js and Nextra\nDESCRIPTION: Imports the Link and Image components from Next.js, and the Callout component from Nextra for use in the documentation page.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/about.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in JSX\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video using JSX. It creates an iframe with specific attributes for video playback and includes a caption below the video.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/cautions/parallelism.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className='mt-5'>\n  <iframe\n    className='aspect-video w-full'\n    src='https://www.youtube.com/embed/XVcRQ6T9RHo'\n    allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture'\n    allowFullScreen\n  />\n\n  <span className='text-sm text-center'>\n    (Thanks Tim for letting us embed your video!)\n  </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Component with Image and Role in React/JSX\nDESCRIPTION: Defines a Profile React component that displays a linked avatar image and role label. It takes href (link URL), imgLink (image source), and role (text label) as props.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/about.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport function Profile({ href, imgLink, role }) {\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Link\n        href={href}\n        target=\"_blank\"\n        className=\"rounded-full h-36 w-36 overflow-hidden flex justify-center items-center\"\n      >\n        <Image src={imgLink} alt={href} width={256} height={256} />\n      </Link>\n      <span className=\"text-lg font-normal\">{role}</span>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating 404 Error Page with React and Nextra Theme\nDESCRIPTION: React component that renders a 404 error page with a styled 'Go back home' link and Nextra's NotFoundPage component. Uses Next.js Link component for navigation and className styling for responsive design.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/404.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"w-full pt-10 flex flex-col items-center\">\n  # Page Not Found\n  <Link\n    href=\"/\"\n    className=\"mb-4 mt-12 nx-text-lg nx-font-semibold flex bg-neutral-200 dark:bg-neutral-800 hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors nx-px-4 nx-py-2 nx-rounded\"\n  >\n    Go back home\n  </Link>\n  <NotFoundPage />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing React Icons for Documentation Navigation\nDESCRIPTION: Import statement for various icons from Radix UI React Icons library and Cards/Card components from Nextra, used for documentation navigation.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  LightningBoltIcon,\n  ExclamationTriangleIcon,\n  GearIcon,\n  MixIcon,\n  CodeIcon,\n} from \"@radix-ui/react-icons\";\nimport { Cards, Card } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components for Thread Documentation in React\nDESCRIPTION: This code snippet imports necessary icons from Radix UI and card components from Nextra to create a documentation layout for Thread cautions.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/learn/cautions.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { LightningBoltIcon, GridIcon } from \"@radix-ui/react-icons\";\nimport { Card, Cards } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Defining Container Div with Flexbox Layout\nDESCRIPTION: This snippet creates a container div with flexbox layout and centering styles.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/index.mdx#2025-04-20_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<div className='w-full flex-col flex items-center pt-12'>\n```\n\n----------------------------------------\n\nTITLE: Defining TabbedData React Component\nDESCRIPTION: A React component that renders tabbed data for thread statuses or exceptions using Nextra's Tabs component.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport function TabbedData({ type, keys = [] }) {\n  return (\n    <Tabs items={keys}>\n      {keys.map((key, i) => (\n        <Tabs.Tab key={i}>\n          {type === \"status\" ? ThreadStatuses[key] : ThreadExceptions[key]}\n        </Tabs.Tab>\n      ))}\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text React Component\nDESCRIPTION: A simple React component for rendering text paragraphs with consistent styling.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Text({ children, className, ...props }) {\n  return (\n    <p {...props} className={cn(\"nx-mt-0\", className)}>\n      {children}\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentBody React Component\nDESCRIPTION: A React component that renders a styled div for argument details content in documentation.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport function ArgumentBody({ children, className, ...props }) {\n  return (\n    <div {...props} className={cn(\"nx-p-2\", className)}>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentBody Component in React\nDESCRIPTION: Creates a container for the body content of an argument documentation section.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/v1/parallel-processing.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function ArgumentBody({ children, className, ...props }) {\n  return (\n    <div {...props} className={cn(\"nx-p-2\", className)}>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentWrapper Component in React/JSX\nDESCRIPTION: A React component that creates a collapsible details element for displaying argument documentation. It includes styling with conditional class names using the cn utility.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/configuration.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function ArgumentWrapper({ children, className, ...props }) {\n  return (\n    <details\n      {...props}\n      className={cn(\n        \"last-of-type:mb-0 rounded-lg bg-neutral-50 dark:bg-neutral-800 p-2 mt-4\",\n        className,\n      )}\n    >\n      {children}\n    </details>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VersionLink React Component\nDESCRIPTION: This snippet defines a VersionLink component that renders a customizable link with variant styling and external link handling.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/index.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nexport function VersionLink({\n  variant = \"default\",\n  className,\n  href,\n  ...props\n}) {\n  return (\n    <Link\n      {...props}\n      href={href}\n      target={href.startsWith(\"http\") ? \"_blank\" : \"_self\"}\n      className={cn(\n        \"flex items-center justify-center text-center gap-2 px-4 py-2 rounded-md transition-colors\",\n        \"text-neutral-800 dark:text-neutral-50\",\n        \"h-44\",\n        linkVariant[variant],\n        className,\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Status Badge Variant Styles\nDESCRIPTION: This snippet defines statusVariant object with color styles for different status types using the cn utility function.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/index.mdx#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const statusVariant = {\n  latest: cn(\"bg-blue-200 dark:bg-blue-700/50\"),\n  stable: cn(\"bg-green-200 dark:bg-green-800/50\"),\n  beta: cn(\"bg-yellow-200 dark:bg-yellow-500/50\"),\n  dev: cn(\"bg-purple-200 dark:bg-purple-700/50\"),\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for React Components\nDESCRIPTION: This snippet imports necessary dependencies from Next.js, Radix UI, and a custom utility function.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from \"next/link\";\nimport { ExternalLinkIcon } from \"@radix-ui/react-icons\";\n\nimport { cn } from \"@utils\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Release History Component in JSX\nDESCRIPTION: This JSX code snippet renders a component that displays the release history of the Python Thread project. It includes sections for the latest stable releases and a detailed list of all past releases with their respective dates and status badges.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/index.mdx#2025-04-20_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"flex flex-wrap items-center justify-center gap-8 mt-12\">\n  <VersionLink\n    className=\"w-56 flex-col justify-between items-start\"\n    href=\"/docs/v2\"\n  >\n    <div className=\"flex flex-row items-center gap-2\">\n      <ExternalLinkIcon className=\"w-6 h-6\" />\n      <Text className=\"text-lg font-bold\">Latest v2.0.5</Text>\n    </div>\n    <Text className=\"text-sm font-light text-left ml-4\">\n      This is the latest ***stable*** release.\n    </Text>\n    <div className=\"flex flex-row self-end mt-auto mb-1 gap-2\">\n      <StatusBadge variant=\"latest\">latest</StatusBadge>\n      <StatusBadge variant=\"stable\">stable</StatusBadge>\n    </div>\n  </VersionLink>\n  <VersionLink\n    className=\"w-56 flex-col justify-between items-start\"\n    href=\"/docs/v1\"\n  >\n    <div className=\"flex flex-row items-center gap-2\">\n      <ExternalLinkIcon className=\"w-6 h-6\" />\n      <Text className=\"text-lg font-bold\">v1.1.1</Text>\n    </div>\n    <Text className=\"text-sm font-light text-left ml-4\">\n      This is the last ***stable*** v1.1.1 release.\n    </Text>\n    <div className=\"flex flex-row self-end mt-auto mb-1 gap-2\">\n      <StatusBadge variant=\"stable\">stable</StatusBadge>\n    </div>\n  </VersionLink>\n</div>\n\n<div className=\"w-[95%] md:w-3/5 mt-10 mb-5 h-[0.1rem] mx-auto rounded bg-black/50 dark:bg-white/50\" />\n\n<div className=\"mx-auto items-center flex flex-col gap-4 md:min-w-[30rem] w-5/6 md:w-2/5\">\n  <Link\n    target=\"_blank\"\n    href=\"https://github.com/python-thread/thread\"\n    className=\"flex flex-row w-full justify-between px-4 py-2 rounded-md items-center text-sm font-light hover:bg-neutral-100/40 dark:hover:bg-neutral-800/20 transition-all\"\n  >\n    <div className=\"flex flex-col justify-between\">\n      <h1 className=\"font-normal text-lg\">Development</h1>\n      <p>Now</p>\n    </div>\n    <StatusBadge variant=\"dev\">dev</StatusBadge>\n  </Link>\n  <Link\n    target=\"_blank\"\n    href=\"/github/v2.0.5\"\n    className=\"flex flex-row w-full justify-between px-4 py-2 rounded-md items-center text-sm font-light hover:bg-neutral-100/40 dark:hover:bg-neutral-800/20 transition-all\"\n  >\n    <div className=\"flex flex-col justify-between\">\n      <h1 className=\"font-normal text-lg\">Release v2.0.5</h1>\n      <p>14 July 2024</p>\n    </div>\n    <StatusBadge variant=\"stable\">stable</StatusBadge>\n  </Link>\n  <!-- Additional release links omitted for brevity -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating React Component Functions for Thread Documentation UI\nDESCRIPTION: Defines several React component functions used for documentation formatting. These components provide consistent styling for argument details, wrapper containers, and tabbed data display in the documentation UI.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/thread-class.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ArgumentWrapper({ children, className, ...props }) {\n  return (\n    <details\n      {...props}\n      className={cn(\n        \"last-of-type:mb-0 rounded-lg bg-neutral-50 dark:bg-neutral-800 p-2 mt-4\",\n        className,\n      )}\n    >\n      {children}\n    </details>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ArgumentBody({ children, className, ...props }) {\n  return (\n    <div {...props} className={cn(\"nx-p-2\", className)}>\n      {children}\n    </div>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ArgumentExtra({ children, className, ...props }) {\n  return (\n    <span {...props} className={cn(\"ml-4 text-neutral-500\", className)}>\n      {children}\n    </span>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function TabbedData({ type, keys = [] }) {\n  return (\n    <Tabs items={keys}>\n      {keys.map((key, i) => (\n        <Tabs.Tab key={i}>\n          {type === \"status\" ? ThreadStatuses[key] : ThreadExceptions[key]}\n        </Tabs.Tab>\n      ))}\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentExtra React Component\nDESCRIPTION: A React component that renders additional information for arguments with neutral styling.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/docs/latest/concurrent-processing.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport function ArgumentExtra({ children, className, ...props }) {\n  return (\n    <span {...props} className={cn(\"ml-4 text-neutral-500\", className)}>\n      {children}\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SmoothScroll Component in React\nDESCRIPTION: This component defines a button that smoothly scrolls to a specified element ID when clicked. It uses the scrollIntoView method with smooth behavior.\nSOURCE: https://github.com/python-thread/thread/blob/main/docs/src/pages/index.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function SmoothScroll({ scrollTo, children, ...props }) {\n  return (\n    <button\n      {...props}\n      onClick={() =>\n        document\n          .getElementById(scrollTo)\n          ?.scrollIntoView({ behavior: \"smooth\" })\n      }\n    >\n      {children}\n    </button>\n  );\n}\n```"
  }
]