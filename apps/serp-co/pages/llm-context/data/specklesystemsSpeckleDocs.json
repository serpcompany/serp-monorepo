[
  {
    "owner": "specklesystems",
    "repo": "speckle-docs",
    "content": "TITLE: Defining a Box Class in Speckle Objects Kit\nDESCRIPTION: Example of a Box class implementation in the Speckle Objects kit that inherits from Base and implements multiple interfaces. The class includes properties for the box's dimensions, bounding box, area, and volume, with constructors for serialization and initialization.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Box : Base, IHasVolume, IHasArea, IHasBoundingBox\n{\n  public Plane basePlane { get; set; }\n\n  public Interval xSize { get; set; }\n\n  public Interval ySize { get; set; }\n\n  public Interval zSize { get; set; }\n\n  public Box bbox { get; }\n\n  public double area { get; set; }\n\n  public double volume { get; set; }\n\n  public Box() { }\n\n  public Box(Plane basePlane, Interval xSize, Interval ySize, Interval zSize, string units = Units.Meters, string applicationId = null)\n  {\n    this.basePlane = basePlane;\n    this.xSize = xSize;\n    this.ySize = ySize;\n    this.zSize = zSize;\n    this.applicationId = applicationId;\n    this.units = units;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Speckle Viewer Constructor\nDESCRIPTION: Constructor for creating a new Viewer instance that requires an HTML container element and viewer parameters.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Viewer(container: HTMLElement, params: ViewerParams)\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Speckle Stream in C#\nDESCRIPTION: Shows how to send data to a Speckle stream using the Helpers.Send method. This method simplifies the process of sending data to a specified stream URL or ID with a commit message.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/dotnet.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Api;\n\nvar commitId = Helpers.Send(\"Stream URL or ID\", data, \"My commit message\").Result;\n```\n\n----------------------------------------\n\nTITLE: Loading Speckle Converter in C#\nDESCRIPTION: Demonstrates how to load a Speckle converter using the KitManager from Core. This code snippet shows how to get the default kit and load a converter for a specific application, allowing access to conversion methods without direct references to the converter or kit.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/connectors-dev.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar kit = KitManager.GetDefaultKit();\nvar converter = kit.LoadConverter(APP_NAME);\n// then stuff like converter.ConvertToNative(obj);\n```\n\n----------------------------------------\n\nTITLE: Attaching Annotations to Objects in Python\nDESCRIPTION: This example demonstrates how to attach different types of annotations (error, warning, and info) to specific objects within an automation run using Python. The function shows how to provide structured feedback for structural analysis, load analysis, and cost analysis.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-results.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom speckle_automate import AutomateContext\n\ndef automate_function(runCtx: AutomateContext):\n    # Example: Structural validation\n    runCtx.attach_error_to_objects(\n        \"Structural Analysis\",\n        [\"obj_id_1\", \"obj_id_2\"],\n        \"Beam span exceeds maximum allowable length\"\n    )\n    \n    runCtx.attach_warning_to_objects(\n        \"Load Analysis\",\n        [\"obj_id_3\"],\n        \"Load approaching maximum capacity\"\n    )\n    \n    runCtx.attach_info_to_objects(\n        \"Cost Analysis\",\n        [\"obj_id_4\", \"obj_id_5\"],\n        \"Material cost optimized\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Filtering Speckle Objects During Traversal\nDESCRIPTION: Examples of how to filter specific object types while traversing Speckle data. The first example shows filtering for Wall objects, while the second demonstrates filtering by a volume property value.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/traversal.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nList<Wall> walls = traversalFunc.Traverse(commitObject)\n      .Select(c => c.current)\n      .OfType<Wall>()\n      .ToList();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nList<Base> smallThings = traversalFunc\n      .Traverse(commitObject)\n      .Select(c => c.current)\n      .Where(b => b[\"Volume\"] is double and < 20)\n      .ToList();\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Traversal Function in C#\nDESCRIPTION: This snippet shows the implementation of the default traversal function in C#. It defines rules for convertible and non-convertible objects, determining which properties should be traversed.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/traversal.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static GraphTraversal CreateTraverseFunc(ISpeckleConverter converter)\n{\n    var convertibleRule = TraversalRule.NewTraversalRule()\n        .When(converter.CanConvertToNative) //NOTE: only one `When` clause needs to evaluate true, for this rule to hold true \n        .When(HasDisplayValue)\n        .ContinueTraversing(ElementsAliases);\n\n    var defaultRule = TraversalRule.NewTraversalRule()\n        .When(_ => true) //Always evaluates true\n        .ContinueTraversing(AllMembers); //AllMembers returns all non-obsolete members (instance & dynamic)\n\n    return new GraphTraversal(convertibleRule, defaultRule);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Inputs in Python with Pydantic Fields\nDESCRIPTION: This snippet demonstrates how to define function inputs in Python using the Pydantic Field class. It shows how to create various UI elements including text inputs, numerical values with defaults, dropdown selections, and read-only fields.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/making-your-function.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FunctionInputs(AutomateBase):\n\t\ttext_input: str = Field(\n\t\t\ttitle=\"Text Input\",\n\t\t\tdescription=\"Values given in this field will be available with the `text_input` key.\"\n\t\t)\n\t\t\n\t\tscalar_value: float = Field(\n\t\t\tdefault=25.0,\n\t\t\ttitle=\"Numerical value\",\n\t\t\tdescription=( \"Annotating a field and providing a default value will tell the \" \n\t\t\t\t\t\t\t\t\t\t\t\"Automate UI to treat the input field as a number\" )\n\t\t)\n\t\t\n\t\tselection: str = Field(\n\t\t\tdefault=Selection.default,\n\t\t\ttitle=\"Select an option\",\n\t\t\tdescription=( \"Specifying a class and value as the default will provide the \"\n\t\t\t\t\t\t\t\t\t\t\t\"UI with a drop-down selection, preselecting the default value\",\n\t\t\tjson_scheme_extra={\n\t\t\t\t\"examples\": [\"default\", \"option 2\", \"option 3\"]\n\t\t\t}\n\t\t)\n\t\t\n\t\tread_only: str = Field(\n\t\t\tdefault=\"Placeholder\",\n\t\t\ttitle=\"Disabled Input Field\",\n\t\t\tdescription=( \"Marking a field as readOnly will disable the UI input,\"\n\t\t\t\t\t\t\t\t\t\t\t\"which can be used to mock input UI for future revision \"\n\t\t\t\t\t\t\t\t\t\t\t\"or pass values specific to a function revision.\" ) \n\t\t)\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from Speckle Server\nDESCRIPTION: Shows how to receive an object back from the Speckle server and deserialize it.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# this receives the object back from the transport.\n# the received data will be deserialised back into a `Block` \nreceived_base = operations.receive(obj_id=hash, remote_transport=transport)\n```\n\n----------------------------------------\n\nTITLE: Direct Usage of Base Object as Dynamic Object in C#\nDESCRIPTION: Demonstrates how to use a raw Base object as a custom data structure by leveraging its dynamic object capabilities, showing both dot notation and dictionary-style property access.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar myObject = new Base();\n\n// setting properties using dot notation requires cast to dynamic\n((dynamic)myObject).myNewProperty = \"foo\";\n\n// alternatively, just pretend it's a dictionary!\nmyObject[\"myNewProperty2\"] = \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Implementing a Base Object Flattening Extension Method in C#\nDESCRIPTION: A C# extension method that recursively flattens a Speckle Base object into all its constituent parts, traversing through nested objects, dictionaries, and collections to produce a flattened enumerable of Base objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/FilteringData.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class Extensions\n{\n  // Flattens a base object into all its constituent parts.\n  public static IEnumerable<Base> Flatten(this Base obj)\n  {\n    yield return obj;\n\n    var props = obj.GetDynamicMemberNames();\n    foreach (var prop in props)\n    {\n      var value = obj[prop];\n      if (value == null) continue;\n\n      if (value is Base b)\n      {\n        var nested = b.Flatten();\n        foreach (var child in nested) yield return child;\n      }\n\n      if (value is IDictionary dict)\n      {\n        foreach (var dictValue in dict.Values)\n        {\n          if (dictValue is Base lb)\n          {\n            foreach (var lbChild in lb.Flatten()) yield return lbChild;\n          }\n        }\n      }\n\n      if (value is IEnumerable enumerable)\n      {\n        foreach (var listValue in enumerable)\n        {\n          if (listValue is Base lb)\n          {\n            foreach (var lbChild in lb.Flatten()) yield return lbChild;\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Annotations to Objects in C#\nDESCRIPTION: This example demonstrates how to attach different types of annotations (error, warning, and info) to specific objects within an automation run using C#. The method shows how to provide structured feedback for structural analysis, load analysis, and cost analysis.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-results.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void Run(AutomationContext context)\n{\n    context.AttachErrorToObjects(\n        \"Structural Analysis\",\n        new[] { \"obj_id_1\", \"obj_id_2\" },\n        \"Beam span exceeds maximum allowable length\"\n    );\n    \n    context.AttachWarningToObjects(\n        \"Load Analysis\",\n        new[] { \"obj_id_3\" },\n        \"Load approaching maximum capacity\"\n    );\n    \n    context.AttachInfoToObjects(\n        \"Cost Analysis\",\n        new[] { \"obj_id_4\", \"obj_id_5\" },\n        \"Material cost optimized\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Speckle Server\nDESCRIPTION: Demonstrates how to send a Block object to a Speckle server using ServerTransport and create a commit.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.transports.server import ServerTransport\nfrom specklepy.api import operations\n\n# here's the data you want to send\nblock = Block(length=2, height=4)\n\n# next create a server transport - this is the vehicle through which you will send and receive\ntransport = ServerTransport(client=client, stream_id=new_stream_id)\n\n# this serialises the block and sends it to the transport\nhash = operations.send(base=block, transports=[transport])\n\n# you can now create a commit on your stream with this object\ncommid_id = client.commit.create(\n    stream_id=new_stream_id, \n    object_id=hash, \n    message=\"this is a block I made in speckle-py\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Receiving from Speckle Stream in C#\nDESCRIPTION: Shows a more detailed approach to receiving data from a Speckle stream. It demonstrates how to receive the last commit of a stream from a specific branch, providing more control over the receiving process.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/dotnet.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Api;\nusing Speckle.Core.Models;\nusing Speckle.Core.Transports;\n\n\n\nvar streamId = \"streamId\";\nvar branchName = \"main\";\nvar client = new Client(account);\nvar branch = await client.BranchGet(streamId, branchName, 1);\nvar objectId = branch.commits.items[0].referencedObject; // take last commit\n\nvar transport = new ServerTransport(account, streamId);\n\nvar data = await Operations.Receive(\n  objectId,\n  remoteTransport: transport,\n  onErrorAction: onErrorAction,\n  onProgressAction: onProgressAction,\n  onTotalChildrenCountKnown: onTotalChildrenCountKnown,\n  disposeTransports: true\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Success/Failure Reporting in C# Automation Function\nDESCRIPTION: This C# code shows how to implement proper execution status reporting in a Speckle automation function. It demonstrates using async/await patterns with try-catch blocks to handle exceptions and explicitly marking the run as successful or failed based on data processing results.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-success.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task Run(AutomationContext context)\n{\n    try\n    {\n        // Function logic\n        var results = ProcessData();\n        if (results.IsValid)\n        {\n            await context.MarkRunSuccess(\n                \"Analysis completed successfully: Found 5 valid elements\"\n            );\n        }\n        else\n        {\n            await context.MarkRunFailed(\n                \"Analysis completed but found invalid elements\"\n            );\n        }\n    }\n    catch (Exception ex)\n    {\n        await context.MarkRunFailed(ex.Message);\n        throw;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from Speckle Stream in C#\nDESCRIPTION: Illustrates how to receive data from a Speckle stream using the Helpers.Receive method. This simplified approach allows receiving data from a specified stream URL or ID.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/dotnet.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Api;\n\nvar data = Helpers.Receive(\"Stream URL or ID\").Result;\n```\n\n----------------------------------------\n\nTITLE: Basic Data Sending with Default Transport in C#\nDESCRIPTION: Demonstrates the basic usage of sending data using Speckle's default transport (SQLite). Creates a Base object with columns and rooms, then sends it using the Operations.Send method.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/transports.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar myData = new Base();\nmyData[\"@columns\"] = new List<Columns>() { ... the columns };\nmyData[\"@rooms\"] = new List<Rooms>() { ... the rooms};\n\nvar myDataId = await Operations.Send( myData );\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL API for Object Operations\nDESCRIPTION: Shows how to use the GraphQL API to send and receive objects with serialization.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.objects import Base\nfrom specklepy.serialization.base_object_serializer import BaseObjectSerializer\n\n# create a test base object\ntest_base = Base()\ntest_base.testing = \"a test base obj\"\n\n# run it through the serialiser\ns = BaseObjectSerializer()\nhash, obj = s.traverse_base(test_base)\n\n# send it to the server\nobjCreate = client.object.create(stream_id=\"stream id\", objects=[obj])\n\nreceived_base = client.object.get(\"stream id\", hash)\n```\n\n----------------------------------------\n\nTITLE: Handling Schema Breaking Changes with SchemaDeprecated\nDESCRIPTION: Example showing how to handle breaking changes in object schemas by using the SchemaDeprecated attribute on the existing constructor while adding a new constructor with updated parameters. This approach ensures backward compatibility while enabling new functionality.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic double width;\npublic double height;\n\n[SchemaDeprecated, SchemaInfo(\"Beam\", \"Creates a Speckle beam\", \"BIM\", \"Structure\")]\npublic Beam([SchemaMainParam] ICurve baseLine)\n{\n    this.baseLine = baseLine;\n    this.height = 1.0;\n    this.width = 1.0;\n}\n\n[SchemaInfo(\"Beam\", \"Creates a Speckle beam\", \"BIM\", \"Structure\")]\npublic Beam([SchemaMainParam] ICurve baseLine, double height, double width)\n{\n    this.baseLine = baseLine;\n    this.height = height;\n    this.width = width;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Nested Instance Transforms in C#\nDESCRIPTION: This snippet demonstrates how to create nested instances and calculate their total transformations. It shows the creation of child instances, a parent instance, and the calculation of total transforms for nested instances.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// create two instances of the same definition\nTransform transform1;\nTransform transform2;\nvar childDefinition = new BlockDefinition(){ geometry = myGeometry };\n\nvar myInstance1 = new BlockInstance(){ \n  transform = transform1, \n  definition = childDefinition };\n\nvar myInstance2 = new BlockInstance(){ \n  transform = transform2, \n  definition = childDefinition };\n\n// use these two instances in the definition of a parent instance\nTransform parentTransform;\nvar parentDefinition = new BlockDefinition(){ geometry = new List<Base>(){myInstance1, myInstance2} };\n\nvar parentInstance = new BlockInstance() {\n  transform = parentTransform, \n  definition = parentDefinition };\n\n// total transformations of the geometry inside myInstance1 and myInstance2\nvar totalTransform1 = transform1.matrix * parentTransform.Matrix;\nvar totalTransform2 = transform2.matrix * parentTransform.Matrix;\n```\n\n----------------------------------------\n\nTITLE: Initializing FilteringExtension in Speckle Viewer (TypeScript)\nDESCRIPTION: This snippet shows how to create and add the FilteringExtension to the Speckle Viewer. The extension is added at initialization time and provides all filtering functionality.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst filteringExtension = viewer.createExtension(FilteringExtension);\n```\n\n----------------------------------------\n\nTITLE: Initializing Speckle Viewer Instance\nDESCRIPTION: Creates and initializes a new Speckle viewer instance by targeting the HTML container. This setup is required before any viewer functionality can be used.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/basic-example.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** Get the HTML container */\nconst container = document.getElementById(\"renderer\");\n\n/** Create Viewer instance */\nconst viewer = new Viewer(container);\n/** Initialise the viewer */\nawait viewer.init();\n```\n\n----------------------------------------\n\nTITLE: Implementing ISpeckleConverter Interface in C#\nDESCRIPTION: This code snippet shows the basic structure of a class implementing the ISpeckleConverter interface. It includes method stubs for converting objects between Speckle and native formats, as well as properties for converter metadata.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/connectors-dev.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConverterAECApp : ISpeckleConverter\n{\n  public string Description => throw new NotImplementedException();\n\n  public string Name => throw new NotImplementedException();\n\n  public string Author => throw new NotImplementedException();\n\n  public string WebsiteOrEmail => throw new NotImplementedException();\n\n  public HashSet<Exception> ConversionErrors => throw new NotImplementedException();\n\n  public bool CanConvertToNative(Base @object)\n  {\n    throw new NotImplementedException();\n  }\n\n  public bool CanConvertToSpeckle(object @object)\n  {\n    throw new NotImplementedException();\n  }\n\n  public object ConvertToNative(Base @object)\n  {\n    throw new NotImplementedException();\n  }\n\n  public List<object> ConvertToNative(List<Base> objects)\n  {\n    throw new NotImplementedException();\n  }\n\n  public Base ConvertToSpeckle(object @object)\n  {\n    throw new NotImplementedException();\n  }\n\n  public List<Base> ConvertToSpeckle(List<object> objects)\n  {\n    throw new NotImplementedException();\n  }\n\n  public IEnumerable<string> GetServicedApplications()\n  {\n    throw new NotImplementedException();\n  }\n\n  public void SetContextDocument(object doc)\n  {\n    throw new NotImplementedException();\n  }\n\n  public void SetContextObjects(List<ApplicationPlaceholderObject> objects)\n  {\n    throw new NotImplementedException();\n  }\n\n  public void SetPreviousContextObjects(List<ApplicationPlaceholderObject> objects)\n  {\n    throw new NotImplementedException();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Success/Failure Reporting in Python Automation Function\nDESCRIPTION: This Python code demonstrates how to properly report execution status in a Speckle automation function. It shows how to use try-except blocks to catch errors and how to explicitly mark a run as successful or failed based on the results of processing data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-success.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def automate_function(runCtx: AutomateContext):\n    try:\n        # Function logic\n        results = process_data()\n        if results.is_valid:\n            await runCtx.mark_run_success(\n                \"Analysis completed successfully: Found 5 valid elements\"\n            )\n        else:\n            await runCtx.mark_run_failed(\n                \"Analysis completed but found invalid elements\"\n            )\n    except Exception as ex:\n        await runCtx.mark_run_failed(str(ex))\n        raise\n```\n\n----------------------------------------\n\nTITLE: Structuring Data with Speckle Base Object in C#\nDESCRIPTION: Demonstrates how to create and populate a Speckle Base object to structure data flexibly. The example shows creating a building object with floors, walls, and a name property.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/dotnet.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Models;\n\nvar myBuilding = new Base()\n\nmyBuilding[ \"@floors\" ] = myFloors;\nmyBuilding[ \"@walls\" ] = myWalls;\nmyBuilding[ \"name\" ] = \"Southwood Park\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Material Properties and Carbon Data in Python\nDESCRIPTION: This function processes a building level, calculating volume, mass, and embodied carbon for each element type, and returns a pandas DataFrame with the results.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef construct_carbon_df(level: Base):\n    data = {\"element\": [], \"volume\": [], \"mass\": [], \"embodied carbon\": []}\n\n    # get the attributes on the level object\n    names = level.get_dynamic_member_names()\n    # iterate through and find the elements with a `volume` attribute\n    for name in names:\n        prop = level[name]\n        if isinstance(prop, Base):\n            if not hasattr(prop, \"volume\"):\n                break\n            # if it has a volume, use the material attribute to calculated\n            # the embodied carbon\n            data[\"volume\"].append(prop.volume)\n            data[\"mass\"].append(data[\"volume\"][-1] * prop[\"@material\"].density)\n            data[\"embodied carbon\"].append(\n                data[\"mass\"][-1] * prop[\"@material\"].embodied_carbon\n            )\n        elif isinstance(prop, list):\n            if not hasattr(prop[0], \"volume\"):\n                break\n            data[\"volume\"].append(sum(p.volume for p in prop))\n            data[\"mass\"].append(data[\"volume\"][-1] * prop[0][\"@material\"].density)\n            data[\"embodied carbon\"].append(\n                data[\"mass\"][-1] * prop[0][\"@material\"].embodied_carbon\n            )\n        data[\"element\"].append(name[1:]) # removing the prepending `@`\n\n    return pd.DataFrame(data)\n```\n\n----------------------------------------\n\nTITLE: Implementing the ITransport Interface in C#\nDESCRIPTION: The core interface that must be implemented to create a custom transport in Speckle. It defines methods for saving and retrieving objects, including copying objects between transports.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/transports-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ITransport\n{\n  public string TransportName { get; set; }\n\n  /// <summary>\n  /// Saves an object.\n  /// </summary>\n  /// <param name=\"id\">The hash of the object.</param>\n  /// <param name=\"serializedObject\">The full string representation of the object.</param>\n  public void SaveObject(string id, string serializedObject);\n\n  /// <summary>\n  /// Saves an object, retrieving its serialised version from the provided transport.\n  /// </summary>\n  /// <param name=\"id\">The hash of the object.</param>\n  /// <param name=\"sourceTransport\">The transport from where to retrieve it.</param>\n  public void SaveObject(string id, ITransport sourceTransport);\n\n  /// <summary>\n  /// Gets an object.\n  /// </summary>\n  /// <param name=\"id\">The object's hash.</param>\n  public string GetObject(string id);\n\n  /// <summary>\n  /// Copies the parent object and all its children to the provided transport.\n  /// </summary>\n  /// <param name=\"id\">The id of the object you want to copy.</param>\n  /// <param name=\"targetTransport\">The transport you want to copy the object to.</param>\n  public Task<string> CopyObjectAndChildren(string id, ITransport targetTransport);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Intersection Method in TypeScript\nDESCRIPTION: Method for intersecting a point in NDC coordinates with scene objects. Uses acceleration structures for efficient ray casting and supports filtering by object layers, bounds checking, and nearest hit detection.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/intersections-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nintersect(\n    scene: Scene,\n    camera: Camera,\n    point: Vector2,\n    castLayers: ObjectLayers.STREAM_CONTENT_MESH,\n    nearest?: boolean,\n    bounds?: Box3,\n    firstOnly?: boolean,\n    tasOnly?: boolean\n  ): Array<ExtendedMeshIntersection> | null\n\nintersect(\n    scene: Scene,\n    camera: Camera,\n    point: Vector2,\n    castLayers?: Array<ObjectLayers>,\n    nearest?: boolean,\n    bounds?: Box3,\n    firstOnly?: boolean,\n    tasOnly?: boolean\n  ): Array<ExtendedIntersection> | null\n```\n\n----------------------------------------\n\nTITLE: Initializing Speckle Viewer with TypeScript\nDESCRIPTION: Implements the main viewer setup using TypeScript, including viewer initialization, extension setup for camera control and selection, and data loading from Speckle streams. Uses the @speckle/viewer package and its core components.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/basic-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Viewer,\n  DefaultViewerParams,\n  SpeckleLoader,\n  UrlHelper,\n} from \"@speckle/viewer\";\nimport { CameraController, SelectionExtension } from \"@speckle/viewer\";\n\nasync function main() {\n  /** Get the HTML container */\n  const container = document.getElementById(\"renderer\");\n\n  /** Configure the viewer params */\n  const params = DefaultViewerParams;\n  params.showStats = true;\n  params.verbose = true;\n\n  /** Create Viewer instance */\n  const viewer = new Viewer(container, params);\n  /** Initialise the viewer */\n  await viewer.init();\n\n  /** Add the stock camera controller extension */\n  viewer.createExtension(CameraController);\n  /** Add the selection extension for extra interactivity */\n  viewer.createExtension(SelectionExtension);\n\n  /** Create a loader for the speckle stream */\n  const urls = await UrlHelper.getResourceUrls(\n    \"https://app.speckle.systems/projects/7591c56179/models/32213f5381\"\n  );\n  for (const url of urls) {\n    const loader = new SpeckleLoader(viewer.getWorldTree(), url, \"\");\n    /** Load the speckle data */\n    await viewer.loadObject(loader, true);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Initializing Speckle Connector Class in C#\nDESCRIPTION: Defines the basic structure of a Speckle connector class, including required attributes and methods. This class serves as the entry point for the connector's functionality.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/workspaces/workspace-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Kits;\nusing System;\n\nnamespace MyConnector\n{\n  public class MyConnector : ISpeckleKit\n  {\n    public string Name => \"My Connector\";\n    public string Description => \"A brief description of what your connector does\";\n    public string Author => \"Your Name\";\n    public string WebsiteOrEmail => \"your@email.com\";\n\n    public IEnumerable<Type> Types => new[]\n    {\n      typeof(MyConverterA),\n      typeof(MyConverterB)\n    };\n\n    public IEnumerable<string> Converters => new[]\n    {\n      \"Speckle.Core.Models.BuiltElements\",\n      \"Speckle.Core.Models.Geometry\"\n    };\n\n    public ISpeckleConverter LoadConverter(string app)\n    {\n      switch (app.ToLower())\n      {\n        case \"application a\":\n          return new MyConverterA();\n        case \"application b\":\n          return new MyConverterB();\n        default:\n          throw new Exception(\"Application not supported\");\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Host Instance Transforms in C#\nDESCRIPTION: This snippet shows how to handle hosted instances in Speckle. It demonstrates that when calculating the total transformation of a hosted instance, the host instance's transform should not be applied.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// using the same instances as above, let's host the second instance on the first\nBlockInstance myInstance1;\nBlockInstance myInstance2;\nmyInstance1[\"elements\"] = new List<Base>(){ myInstance2 };\n\n// total transformations of the geometry inside myInstance1 and myInstance2\nvar totalTransform1 = transform1.matrix;\nvar totalTransform2 = transform2.matrix;\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Requests with Personal Access Tokens in JavaScript\nDESCRIPTION: This code demonstrates how to make an authenticated GraphQL request to the Speckle API using a Personal Access Token. The token is passed in the Authorization header with the 'Bearer' prefix, which allows the request to act on behalf of the authenticated user.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet res = await fetch('/graphql', {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer ' + token, // <- Passing in the token!\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ query: `{ user { id streams { totalCount } } }` })\n})\n\n```\n\n----------------------------------------\n\nTITLE: Flattening Speckle Model Objects in Python\nDESCRIPTION: A recursive function to flatten all objects in a Speckle model into a single list. Useful for bulk operations or quick queries without navigating complex nested structures.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef flatten(base):\n    \"\"\"Recursively flattens all objects in a Speckle model into a list.\"\"\"\n    flattened = []\n\n    def traverse(obj):\n        if obj is None:\n            return\n        flattened.append(obj)\n        for key, value in obj.__dict__.items():\n            if isinstance(value, list):\n                for item in value:\n                    traverse(item)\n            elif hasattr(value, \"__dict__\"):  # Check if it's a nested object\n                traverse(value)\n\n    traverse(base)\n    return flattened\n```\n\n----------------------------------------\n\nTITLE: Implementing ConvertToSpeckle Method in Revit Converter\nDESCRIPTION: Example of the ConvertToSpeckle method in the ConverterRevit class, which converts Revit objects to Speckle objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/kits-dev.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic Base ConvertToSpeckle(object @object)\n{\n  Base returnObject = null;\n  switch (@object)\n  {\n    case DB.DetailCurve o:\n      returnObject = DetailCurveToSpeckle(o);\n      break;\n    case DB.DirectShape o:\n      returnObject = DirectShapeToSpeckle(o);\n      break;\n    case DB.FamilyInstance o:\n      returnObject = FamilyInstanceToSpeckle(o);\n      break;\n    case DB.Floor o:\n      returnObject = FloorToSpeckle(o);\n      break;\n    // etc ...\n    default:\n      ConversionErrors.Add(new Error(\"Type not supported\", $\"Cannot convert {@object.GetType()} to Speckle\"));\n      returnObject = null;\n      break;\n  }\n\n  return returnObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Viewer Extensions in TypeScript\nDESCRIPTION: This snippet demonstrates how to enable various extensions in the new Speckle viewer API. It includes camera controller, selection, sections, measurements, filtering, explode, and diff extensions.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/migration-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cameraController = this.createExtension(CameraController)\nconst selection = this.createExtension(LegacySelectionExtension)\nconst sections = this.createExtension(SectionTool)\nconst sectionOutlines = this.createExtension(SectionOutlines)\nconst measurements = this.createExtension(MeasurementsExtension)\nconst filtering = this.createExtension(FilteringExtension)\nconst explodeExtension = this.createExtension(ExplodeExtension)\nconst diffExtension = this.createExtension(DiffExtension)\n```\n\n----------------------------------------\n\nTITLE: Adding Schema Information Attributes to a Beam Class\nDESCRIPTION: Example demonstrating how to use SchemaInfo and SchemaMainParam attributes to make a class discoverable in host applications like Grasshopper's Create Schema Object node. These attributes provide human-readable names and mark the main geometry parameter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[SchemaInfo(\"Beam\", \"Creates a Speckle beam\", \"BIM\", \"Structure\")]\npublic Beam([SchemaMainParam] ICurve baseLine)\n{\n    this.baseLine = baseLine;\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Objects from Speckle Server using Python\nDESCRIPTION: Demonstrates how to authenticate a SpeckleClient, retrieve commit data, and receive objects using ServerTransport. The code establishes connection to Speckle server and fetches building level data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.api import operations\nfrom specklepy.api.client import SpeckleClient\nfrom specklepy.api.credentials import get_default_account\nfrom specklepy.transports.server import ServerTransport\n\n# create and authenticate a client\nclient = SpeckleClient(host=HOST)\naccount = get_default_account()\nclient.authenticate_with_account(account)\n\n# get the specified commit data\ncommit = client.commit.get(STREAM_ID, COMMIT_ID)\n\n# create an authenticated server transport from the client and receive the commit obj\ntransport = ServerTransport(client=client, stream_id=STREAM_ID)\nres = operations.receive(commit.referencedObject, transport)\n\n# get the list of levels from the received object\nlevels = res[\"data\"]\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Base Class in C#\nDESCRIPTION: Demonstrates how to create custom classes that inherit from Base, combining strongly typed properties with dynamic capabilities, with examples of accessing both types of properties.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Point : Base {\n  // define a set of strongly typed properties\n  public double x { get; set; }\n  public double y { get; set; }\n  public double z { get; set; }\n}\n\n// Strongly typed props behave as you would expect them to:\nvar myPt = new Point();\nmyPt.x = 10;\nvar whatIsX = myPt.x;\n\n// With a dynamic property, things are a bit more verbose, but still manageable:\n((dynamic)myPt).bar = \"baz\";\nvar whatIsBar = ((dynamic)myPt).bar as string; // \"baz\"\n\n// Alternative syntax, if you actually pass the property name at runtime:\nvar whatIsBar = myPt[\"bar\"] as string; // \"baz\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Ray Intersection Method in TypeScript\nDESCRIPTION: Method for intersecting a provided ray with scene objects. Utilizes acceleration structures for efficient intersection testing and supports layer filtering, bounds checking, and nearest hit detection.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/intersections-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nintersectRay(\n    scene: Scene,\n    camera: Camera,\n    ray: Ray,\n    castLayers: ObjectLayers.STREAM_CONTENT_MESH,\n    nearest?: boolean,\n    bounds?: Box3,\n    firstOnly?: boolean,\n    tasOnly?: boolean\n  ): Array<ExtendedMeshIntersection> | null\nintersectRay(\n    scene: Scene,\n    camera: Camera,\n    ray: Ray,\n    castLayers?: Array<ObjectLayers>,\n    nearest?: boolean,\n    bounds?: Box3,\n    firstOnly?: boolean,\n    tasOnly?: boolean\n  ): Array<ExtendedIntersection> | null\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Checks and Actions Classes in Python\nDESCRIPTION: Defines two utility classes for element validation and manipulation. ElementChecks provides methods for type checking and property validation, while ElementActions handles element modifications and metric calculations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ElementChecks:\n    @staticmethod\n    def is_type(type_name: str):\n    return lambda obj: obj.speckle_type == type_name\n    \n        @staticmethod\n        def has_property(prop_name: str, min_value: float = None):\n            def check(obj):\n                value = getattr(obj, prop_name, None)\n                return value is not None and (min_value is None or value > min_value)\n            return check\n        \n        @staticmethod\n        def meets_criteria(criteria: dict):\n            return lambda obj: all(\n                getattr(obj, prop) == value \n                for prop, value in criteria.items()\n            )\n\nclass ElementActions:\n    @staticmethod\n    def tag_for_review(elem: Base, reason: str):\n    if \"review_notes\" not in elem.parameters:\n    elem.parameters[\"review_notes\"] = []\n    elem.parameters[\"review_notes\"].append(reason)\n    \n        @staticmethod\n        def calculate_metrics(elem: Base) -> dict:\n            return {\n                \"volume\": getattr(elem, \"volume\", 0),\n                \"material\": elem.parameters.get(\"material\", \"unknown\"),\n                \"level\": getattr(elem, \"level\", \"unknown\")\n            }\n```\n\n----------------------------------------\n\nTITLE: Using Element Checks in Python\nDESCRIPTION: Demonstrates how to use the ElementChecks and ElementActions classes to analyze beams in a project. Shows filtering for large beams and applying review tags.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_project(base):\n    is_beam = ElementChecks.is_type(\"Objects.BuiltElements.Beam\")\n    is_large = ElementChecks.has_property(\"volume\", 10.0)\n    \n    for elem in base.query(lambda o: is_beam(o) and is_large(o)):\n        ElementActions.tag_for_review(elem, \"Large beam needs review\")\n        metrics = ElementActions.calculate_metrics(elem)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Speckle Server Locally with Yarn\nDESCRIPTION: A sequence of bash commands to clone the Speckle Server repository, set up the development environment, and run the server locally. This includes enabling corepack, installing dependencies, building packages, and starting Docker services.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-local-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:specklesystems/speckle-server.git\ncd speckle-server\ncorepack enable\nyarn\nyarn build\nyarn dev:docker:up\ncp packages/server/.env-example packages/server/.env\ncp packages/server/.env.test-example packages/server/.env.test\ncp packages/frontend-2/.env.example packages/frontend-2/.env\ncp packages/dui3/.env.example packages/dui3/.env\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: GetId Method for Base Objects in C#\nDESCRIPTION: The method signature for getting the ID (unique hash) of a Base object explicitly, with notes about the cost of this operation and the option to decompose the object during hashing.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Gets the id (a unique hash) of this object. ⚠️ This method fully serializes the object, which in the case of large objects (with many sub-objects), has a tangible cost.\n/// <para><b>Hint:</b> Objects that are retrieved/pulled from a server/local cache do have an id (hash) property pre-populated.</para>\n/// <para><b>Note:</b>The hash of a decomposed object differs from the hash of a non-decomposed object.</para>\n/// </summary>\n/// <param name=\"decompose\">If true, will decompose the object in the process of hashing.</param>\n/// <returns></returns>\npublic string GetId(bool decompose = false) { }\n```\n\n----------------------------------------\n\nTITLE: Creating Speckle Object in Python\nDESCRIPTION: Creates a Speckle Base object with custom properties in Python, demonstrating property assignment with both single values and lists.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/grasshopper.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nspeckleObject = Base()\nspeckleObject[\"aProperty\"] = \"A single item value\"\nspeckleObject[\"aListProperty\"] = [ 1, 2, 3, 4, 5 ]\na = speckleObject\n```\n\n----------------------------------------\n\nTITLE: Querying Revit Parameters for a Specific Object Using GraphQL\nDESCRIPTION: This query fetches Revit parameters (family, category, etc.) for a specific child object within a stream. It uses a variable to filter objects by their applicationId, demonstrating how to target specific BIM elements.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-graphql-api.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery($myQuery:[JSONObject!]){\n    stream(id:\"c6b0c4077a\"){\n        object(id:\"0d0a4abc6a5fcc763e6c850dd3d5ecab\"){\n            totalChildrenCount\n            children(query: $myQuery select:[\"parameters\", \"speckle_type\", \"type\", \"family\", \"category\"]){\n                totalCount\n                cursor\n                objects{\n                    id\n                    data\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Speckle Model Data\nDESCRIPTION: Demonstrates how to load model data from a Speckle stream using the UrlHelper utility and SpeckleLoader. This process handles URL parsing and data loading into the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/basic-example.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/** Create a loader for the speckle stream */\nconst urls = await UrlHelper.getResourceUrls(\n  \"https://app.speckle.systems/projects/24c98619ac/models/38639656b8\"\n);\nfor (const url of urls) {\n  const loader = new SpeckleLoader(viewer.getWorldTree(), url, \"\");\n  /** Load the speckle data */\n  await viewer.loadObject(loader, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Speckle .NET SDK without Manager in C#\nDESCRIPTION: Shows how to use the Speckle .NET SDK in environments where Speckle Manager is not available. It demonstrates creating an Account object with a personal access token and using it to initialize a Client for API operations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/dotnet.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Api;\nusing Speckle.Core.Credentials;\nusing System;\n\nnamespace SpeckleSampleApp\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      var account = new Account();\n      account.token = \"YOUR-PERSONAL-ACCESS-TOKEN\";\n      account.serverInfo = new ServerInfo\n      {\n        url = \"https://app.speckle.systems/\"\n      };\n\n      var client = new Client(account);\n      var stream = client.StreamGet(\"5dfbeb49c9\").Result;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Isolating Objects in Speckle Viewer (TypeScript)\nDESCRIPTION: This snippet shows how to isolate specific objects (floors in this example) in the Speckle Viewer. It finds all floor nodes in the world tree and then uses the FilteringExtension to isolate these objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-example.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst floorNodes = viewer.getWorldTree().findAll((node: TreeNode) => {\n  if (!node.model.raw.speckle_type) return;\n  return node.model.raw.speckle_type.includes(\"RevitFloor\");\n});\n\nconst filteringState = filtering.isolateObjects(\n  floorNodes.map((node: TreeNode) => node.model.id)\n);\n```\n\n----------------------------------------\n\nTITLE: Using Default Traversal Function in Speckle\nDESCRIPTION: Example of how to use the DefaultTraversal function to process hierarchical Speckle data. This demonstrates initializing traversal, receiving a commit object, and iterating through the object tree while maintaining parent-child relationships.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/traversal.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task Foo(string myStream, ISpeckleConverter myConverter)\n{\n    // Initialize traversal function with the given converter\n    var traversalFunc = DefaultTraversal.CreateTraverseFunc(myConverter);\n\n    // Receive commit object from the stream\n    Base commitObject = await Helpers.Receive(myStream);\n\n    // Traverse the commit object\n    foreach (TraversalContext context in traversalFunc.Traverse(commitObject))\n    {\n        // Get the current object in traversal\n        Base current = context.current;\n\n        // Get the parent of the current object\n        TraversalContext? parent = context.parent;\n\n        // Perform some operation on the current object\n        // Replace `DoWork` with your actual functionality\n        DoWork(current);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Revit Traversal Function in C#\nDESCRIPTION: This snippet demonstrates the implementation of a Revit-specific traversal function in C#. It defines rules for convertible objects, objects with display values, and a default rule for all other objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/traversal.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static GraphTraversal CreateRevitTraversalFunc(ISpeckleConverter converter)\n  {\n    var convertibleRule = TraversalRule.NewTraversalRule()\n      .When(converter.CanConvertToNative)\n      .ContinueTraversing(None);\n\n    var displayValueRule = TraversalRule.NewTraversalRule()\n      .When(HasDisplayValue)\n      .ContinueTraversing(ElementsAliases);\n\n    var defaultRule = TraversalRule.NewTraversalRule()\n      .When(_ => true)\n      .ContinueTraversing(AllMembers);\n\n    return new GraphTraversal(convertibleRule, displayValueRule, defaultRule);\n  }\n```\n\n----------------------------------------\n\nTITLE: Raycasting Against Top-Level BVH in TypeScript\nDESCRIPTION: Implements the raycast method, which performs raycasting against the top-level BVH and then the bottom-level BVHs if intersections are found. It takes a Ray and material/side parameters and returns an array of ExtendedIntersection objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nraycast(\n    ray: Ray,\n    materialOrSide: Side | Material | Material[] = FrontSide\n): ExtendedIntersection[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Traversal Function in Python\nDESCRIPTION: This snippet shows the implementation of the default traversal function in Python. It defines rules for convertible objects and a default rule for all other objects, using callable functions for predicates and member selection.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/traversal.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_default_traversal_func(can_convert_to_native: Callable[[Base], bool]) -> GraphTraversal:\n    \"\"\"\n    Initialize traversal function for traversing a speckle commit object.\n    \"\"\"\n    # Rule for convertible objects\n    convertible_rule = TraversalRule(\n      [can_convert_to_native],\n      lambda _: {\"elements\", \"@elements\"},\n    )\n\n    default_rule = TraversalRule(\n      [lambda _: True],\n      lambda o: o.get_member_names(),\n    )\n\n    return GraphTraversal([convertible_rule, default_rule])\n```\n\n----------------------------------------\n\nTITLE: Optimizing Mesh Definition in C# for Speckle\nDESCRIPTION: Shows how to optimize the definition of a Mesh class in C# for Speckle. By using a typed array of doubles instead of a list of Point objects for vertices, serialization becomes faster and more memory-efficient.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/decomposition.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Mesh : Base\n{\n    public List<Point> vertices { get; set; }\n    // ...\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Mesh : Base\n{\n  // Typed array of 3\n    public List<double> vertices { get; set; }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Text and Number Inputs\nDESCRIPTION: Demonstrates how to create basic text and number input fields with validation rules using Pydantic Fields in Python. Includes project name as string and maximum length as float with range constraints.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FunctionInputs(AutomateBase):\n    project_name: str = Field(\n        title=\"Project Name\",\n        description=\"Enter the project identifier\"\n    )\n    \n    max_length: float = Field(\n        default=10.0,\n        title=\"Maximum Length\",\n        description=\"Maximum allowed length in meters\",\n        gt=0,\n        lt=100  # Prevents users entering unrealistic values\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing SpeckleClient Authentication\nDESCRIPTION: Shows how to create and authenticate a SpeckleClient using either default accounts or tokens. Demonstrates connection to both remote and local Speckle servers.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.api.client import SpeckleClient\nfrom specklepy.api.credentials import get_default_account\n\n# initialise the client\nclient = SpeckleClient(host=\"your-server.com\") # or whatever your host is\n# client = SpeckleClient(host=\"localhost:3000\", use_ssl=False) or use local server\n\n# authenticate the client with a token\naccount = get_default_account()\nclient.authenticate_with_account(account)\n\n# if you're in an environment without accounts, you can construct an Account object yourself\n# or authenticate with just a token\n# client.authenticate_with_token(\"YOUR_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Filtering and Collecting Speckle Elements in Python\nDESCRIPTION: A function to collect specific elements from a Speckle model based on defined criteria. Useful for quick inventory or rule-based validation of elements.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef collect_elements(base):\n    # Define reusable conditions\n    is_beam = lambda obj: obj.speckle_type == \"Objects.BuiltElements.Beam\"\n    is_long = lambda obj: getattr(obj, \"length\", 0) > 10.0\n    has_material = lambda obj: \"material\" in obj.parameters\n    \n    # Combine for complex queries\n    return base.query(lambda obj: \n        is_beam(obj) and is_long(obj) and has_material(obj)\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeserialized Method in C#\nDESCRIPTION: Example of using the [OnDeserialized] attribute to handle reference loops after deserialization in a Speckle object model.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/kits-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n  [OnDeserialized]\n  internal void onDeserialized(StreamingContext context)\n  {\n    Edges.ForEach(e => e.Brep = this);\n    Loops.ForEach(l => l.Brep = this);\n    Trims.ForEach(t => t.Brep = this);\n    Faces.ForEach(f => f.Brep = this);\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unique Levels from Speckle Data using LINQ in C#\nDESCRIPTION: A LINQ query that finds all Level objects, casts them to the correct type, groups them by name to remove duplicates, and returns the first instance of each unique level.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/FilteringData.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Note: to get only the unique levels, we need to de-duplicate them.\nvar levels = flatData.FindAll(obj => obj is Objects.BuiltElements.Level).Cast<Objects.BuiltElements.Level>().GroupBy(level => level.name).Select(g => g.First()).ToList();\n```\n\n----------------------------------------\n\nTITLE: Multi-Transport Data Sending in C#\nDESCRIPTION: Shows how to send data to multiple transports simultaneously, including multiple server transports and custom transports.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/transports.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar myRevisionId = await Operations.Send(\n\tmyData,\n\ttransports: new ITransport[] {\n\t  new ServerTransport( args ), // imagine this one server...\n\t  new ServerTransport( args ), // ... and this is a different one! you're basically pushing to multiple remotes!\n\t  new MyCustomTransport( args ) // ... and, why not another transport?\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Speckle Converter Class in C#\nDESCRIPTION: Shows the structure of a Speckle converter class, which handles the conversion of objects between Speckle and the target application. This example includes methods for converting to and from Speckle objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/workspaces/workspace-settings.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Models;\nusing System.Collections.Generic;\n\nnamespace MyConnector\n{\n  public class MyConverterA : ISpeckleConverter\n  {\n    public string Name => \"My Converter A\";\n    public string Description => \"Converts objects for Application A\";\n    public string Author => \"Your Name\";\n    public string WebsiteOrEmail => \"your@email.com\";\n\n    public IEnumerable<string> GetServicedApplications() => new[] { \"Application A\" };\n\n    public Base ConvertToSpeckle(object @object)\n    {\n      // Implement conversion logic here\n      throw new NotImplementedException();\n    }\n\n    public object ConvertToNative(Base @object)\n    {\n      // Implement conversion logic here\n      throw new NotImplementedException();\n    }\n\n    public List<Base> ConvertToSpeckle(List<object> objects)\n    {\n      // Implement batch conversion logic here\n      throw new NotImplementedException();\n    }\n\n    public List<object> ConvertToNative(List<Base> objects)\n    {\n      // Implement batch conversion logic here\n      throw new NotImplementedException();\n    }\n\n    public bool CanConvertToSpeckle(object @object)\n    {\n      // Implement logic to determine if the object can be converted\n      throw new NotImplementedException();\n    }\n\n    public bool CanConvertToNative(Base @object)\n    {\n      // Implement logic to determine if the Speckle object can be converted\n      throw new NotImplementedException();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Speckle Data in C#\nDESCRIPTION: Demonstrates how to serialize Speckle data to JSON and deserialize it back to objects using the Operations.Serialize and Operations.Deserialize methods.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/dotnet.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Api;\nusing Speckle.Core.Models;\n\nvar json = Operations.Serialize(data);\n\nvar data = Operations.Deserialize(json);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuex Store for Speckle Authentication in JavaScript\nDESCRIPTION: This snippet sets up the Vuex store with state, getters, mutations, and actions for handling Speckle authentication, user data, and server information. It includes methods for logging out, exchanging access codes, and fetching user data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nimport {\n  exchangeAccessCode,\n  getStreamCommits,\n  getUserData,\n  goToSpeckleAuthPage,\n  speckleLogOut\n} from \"@/speckleUtils\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    user: null,\n    serverInfo: null\n  },\n  getters: {\n    isAuthenticated: state => state.user != null\n  },\n  mutations: {\n    setUser(state, user) {\n      state.user = user\n    },\n    setServerInfo(state, info) {\n      state.serverInfo = info\n    }\n  },\n  actions: {\n    logout(context) {\n      // Wipe the state\n      context.commit(\"setUser\", null)\n      context.commit(\"setServerInfo\", null)\n      // Wipe the tokens\n      speckleLogOut()\n    },\n    exchangeAccessCode(context, accessCode) {\n      // Here, we could save the tokens to the store if necessary.\n      return exchangeAccessCode(accessCode)\n    },\n    async getUser(context) {\n      try {\n        var json = await getUserData()\n        var data = json.data\n        context.commit(\"setUser\", data.user)\n        context.commit(\"setServerInfo\", data.serverInfo)\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    redirectToAuth() {\n      goToSpeckleAuthPage()\n    }\n  },\n  modules: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Building Elements by Level using LINQ in C#\nDESCRIPTION: A LINQ query that groups Speckle building elements by their associated level and generates a summary of the element count per level, demonstrating advanced data manipulation techniques.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/FilteringData.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar elementsByLevel = flatData.FindAll(obj => obj[\"level\"] != null).GroupBy(obj => ((Base)obj[\"level\"])[\"name\"]);\nforeach(var grouping in elementsByLevel) {\n  Console.WriteLine($\"On level {grouping.Key} there are {grouping.Count()} elements.\");\n}\n```\n\n----------------------------------------\n\nTITLE: C# Basic Input Field Implementation\nDESCRIPTION: C# equivalent of basic input fields using DisplayName and Description attributes. Includes range validation for numeric values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FunctionInputs\n{\n    [DisplayName(\"Project Name\")]\n    [Description(\"Enter the project identifier\")]\n    public string ProjectName { get; set; }\n\n    [Range(0, 100)]  // Validates user input\n    [DisplayName(\"Maximum Length\")]\n    [Description(\"Maximum allowed length in meters\")] \n    public double MaxLength { get; set; } = 10.0;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a Revit Beam to a Speckle Object\nDESCRIPTION: Implementation of the BeamToSpeckle method that converts a Revit FamilyInstance beam to a RevitBeam Speckle object. The method extracts the base geometry, type information, level, and parameters from the Revit object.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate RevitBeam BeamToSpeckle(DB.FamilyInstance revitBeam)\n{\n  var baseGeometry = LocationToSpeckle(revitBeam);\n  var baseLine = baseGeometry as ICurve;\n  if (baseLine == null)\n  {\n    throw new Exception(\"Only line based Beams are currently supported.\");\n  }\n\n  var speckleBeam = new RevitBeam();\n  speckleBeam.type = Doc.GetElement(revitBeam.GetTypeId()).Name;\n  speckleBeam.baseLine = baseLine;\n  speckleBeam.level = ConvertAndCacheLevel(revitBeam, BuiltInParameter.INSTANCE_REFERENCE_LEVEL_PARAM);\n  speckleBeam[\"@displayMesh\"] = GetElementMesh(revitBeam);\n\n  GetAllRevitParamsAndIds(speckleBeam, revitBeam);\n\n  return speckleBeam;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with GraphQL Query in Google Apps Scripts\nDESCRIPTION: This function demonstrates how to query the Speckle GraphQL API to retrieve current user information using Google Apps Scripts. It sets up the appropriate HTTP request with authentication headers and logs the response. Replace the placeholder URL and token with your Speckle server address and personal access token.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/js-app-script.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getMe() {\n  let url = \"https://YOUR_SERVER_ADDRESS/graphql\";\n  let graphql = JSON.stringify({\n    query: `query User {\n                      user{\n                        id,\n                        email,\n                        name\n                      }\n                    }`,\n    variables: null,\n  });\n  let params = {\n    method: \"POST\",\n    payload: graphql,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer YOUR_PERSONAL_TOKEN\",\n    },\n  };\n  var response = UrlFetchApp.fetch(url, params);\n\n  Logger.log(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flattened Speckle Model in C#\nDESCRIPTION: Example usage of the Flatten method to process all objects in a Speckle model.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nList<Base> allObjects = SpeckleUtils.Flatten(mySpeckleModel);\nConsole.WriteLine($\"Flattened model contains {allObjects.Count} elements.\");\n```\n\n----------------------------------------\n\nTITLE: Generating PDF Report in Python for Speckle Automate\nDESCRIPTION: This function generates a PDF report using the FPDF library and stores it as a file artifact in Speckle Automate. It takes data as input and creates a temporary file before storing the result.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-artefacts.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport tempfile\nfrom fpdf import FPDF\n\ndef generate_pdf_report(data, filename):\n    with tempfile.TemporaryDirectory() as temp_dir:\n        temp_file_path = os.path.join(temp_dir, filename)\n        pdf = FPDF()\n        pdf.add_page()\n        pdf.set_font(\"Arial\", size=12)\n        pdf.cell(200, 10, txt=\"Analysis Report\", ln=True, align=\"C\")\n        pdf.cell(200, 10, txt=\"Results Summary\", ln=True)\n        \n        for key, value in data.items():\n            pdf.cell(200, 10, txt=f\"{key}: {value}\", ln=True)\n        \n        pdf.output(temp_file_path)\n        automation_context.store_file_result(temp_file_path, \"application/pdf\")\n```\n\n----------------------------------------\n\nTITLE: Sending Updated Objects to Speckle Server\nDESCRIPTION: Demonstrates the complete process of updating objects with materials data and sending them back to the Speckle server, including branch creation and commit management.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = SpeckleClient(host=HOST)\naccount = get_default_account()\nclient.authenticate_with_account(account)\n\ncommit = client.commit.get(STREAM_ID, COMMIT_ID)\n\ntransport = ServerTransport(client=client, stream_id=STREAM_ID)\nres = operations.receive(commit.referencedObject, transport)\n\n# get the list of levels from the received object\nlevels = res[\"data\"]\n\n# add the materials data to our levels\nlevels = [add_materials_data(level) for level in levels]\n\n# create a branch if you'd like\nbranch_name = \"🐍 demo\"\nbranches = client.branch.list(STREAM_ID)\nhas_res_branch = any(b.name == branch_name for b in branches)\nif not has_res_branch:\n    client.branch.create(\n        STREAM_ID, name=branch_name, description=\"new stuff from py\"\n    )\n\n# create a base object to hold the list of levels\nbase = Base(data=levels)\n# and send the data to the server and get back the hash of the object\nobj_id = operations.send(base, [transport])\n\n# now create a commit on that branch with your updated data!\ncommid_id = client.commit.create(\n    STREAM_ID,\n    obj_id,\n    branch_name,\n    message=\"add detached materials\",\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Windows from Speckle Data using LINQ in C#\nDESCRIPTION: A LINQ query that filters flattened Speckle data to find all elements categorized as 'Windows' using dynamic property access.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/FilteringData.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar windows = flatData.FindAll(obj => (string)obj[\"category\"] == \"Windows\");\n```\n\n----------------------------------------\n\nTITLE: Receiving Globals from Speckle Stream using Python\nDESCRIPTION: This snippet demonstrates how to retrieve the latest version of globals from a Speckle stream using Python. It initializes a client, authenticates, gets the 'globals' branch, retrieves the latest commit, and receives the globals object.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/web.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# initialise and authenticate your client\nstream_id = \"62e5ff6a2b\"\naccount = get_default_account()\nclient = SpeckleClient(host=account.serverInfo.url)\nclient.authenticate_with_account(account)\ntransport = ServerTransport(client=client, stream_id=stream_id)\n\n# get the `globals` branch\nbranch = client.branch.get(stream_id, \"globals\")\n\n# get the latest commit\nlatest_commit = branch.commits.items[0]\n\n# receive the globals object\nglobs = operations.receive(latest_commit.referencedObject, transport)\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Signature in Node.js\nDESCRIPTION: This JavaScript code for Node.js shows how to validate the X-WEBHOOK-SIGNATURE header to ensure the authenticity of incoming webhook requests. It uses the crypto module to compute and compare signatures.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-webhooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst * as crypto from 'crypto'\n\nconst secret = 'YOUR_SECRET_HERE'\nconst expectedSignature = crypto\n    .createHmac('sha256', secret)\n    .update(request.body.payload)\n    .digest('hex')\nconst signatureFromHeader = request.headers['x-webhook-signature']\n\nif (signatureFromHeader != expectedSignature) response.status(401).send('Ignoring request with invalid signature')\n```\n\n----------------------------------------\n\nTITLE: Using KitManager to Load Speckle Kits and Converters\nDESCRIPTION: Example of using the KitManager to get available kits, select a specific kit, and load a converter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/kits-dev.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Get a list of all available kits\nvar kits = KitManager.Kits\n\n// Get a specific kit by name or from the assembly full name\nvar kitByName = KitManager.Kits.FirstOrDefault(kit => kit.Name == \"CoreKit\");\nvar kitFromAssembly = KitManager.GetKit(typeof(CoreKit).Assembly.FullName);\n\n// Load the default Objects kit and the included Revit converter\nvar kit = KitManager.GetDefaultKit();\nvar converter = kit.LoadConverter(ConnectorRevitUtils.RevitAppName);\nconverter.SetContextDocument(CurrentDoc.Document);\n```\n\n----------------------------------------\n\nTITLE: Display Properties for Base Objects in C#\nDESCRIPTION: Shows the additional display properties commonly used in Base objects for rendering in the Speckle web viewer, including displayValue for geometric representation and bbox for object selection.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Class definition with additional display properties\npublic class Foo : Base {\n\t[DetachProperty]\n\tpublic List<Mesh> displayValue { get; set; } // Mesh objects that represent the geometry of this Base object, e.g. used to render surfaces, or solid objects in our viewer\n\t// or\n\t[DetachProperty]\n\tpublic Polyline displayValue { get; set; } // a polyline used to render complex curve objects in our viewer\n\t\n\tpublic Box bbox { get; set; } // a bounding box used to assist with object selection in our viewer\n}\n```\n\n----------------------------------------\n\nTITLE: First Raycast Hit Against Top-Level BVH in TypeScript\nDESCRIPTION: Implements the raycastFirst method, which is similar to raycast but stops at the first intersection found. It takes the same parameters as raycast but returns a single ExtendedIntersection object.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nraycastFirst(\n    ray: Ray,\n    materialOrSide: Side | Material | Material[] = FrontSide\n): ExtendedIntersection\n```\n\n----------------------------------------\n\nTITLE: Implementing ConvertToSpeckle Method in a Converter\nDESCRIPTION: Implementation of the ConvertToSpeckle method from the ConverterRevit class, which converts native Revit objects to Speckle objects. The method uses a switch statement to determine the correct conversion routine based on the input object type.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic Base ConvertToSpeckle(object @object)\n{\n  Base returnObject = null;\n  switch (@object)\n  {\n    case DB.DetailCurve o:\n      returnObject = DetailCurveToSpeckle(o);\n      break;\n    case DB.DirectShape o:\n      returnObject = DirectShapeToSpeckle(o);\n      break;\n    case DB.FamilyInstance o:\n      returnObject = FamilyInstanceToSpeckle(o);\n      break;\n    case DB.Floor o:\n      returnObject = FloorToSpeckle(o);\n      break;\n    // etc ...\n    default:\n      ConversionErrors.Add(new Error(\"Type not supported\", $\"Cannot convert {@object.GetType()} to Speckle\"));\n      returnObject = null;\n      break;\n  }\n\n  return returnObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Wall Class Definition in Speckle\nDESCRIPTION: Definition of a Wall class in Speckle showing how objects can contain multiple representations including baseline curves and display meshes that should be handled contextually during traversal.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/traversal.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Wall : Base\n{\n    public double height { get; set; }\n\n    public ICurve baseLine { get; set; }\n\n    public string units { get; set; }\n\n    [DetachProperty]\n    public List<Base> elements { get; set; }\n\n    [DetachProperty]\n    public List<Mesh> displayValue { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Game-Time Data Reception in Unity\nDESCRIPTION: Example code showing how to initialize and receive data using the Receiver component at runtime\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unity.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar receiver = myGameObject.AddComponent<Receiver>();\nreceiver.Init(projectId);\nreceiver.Receive();\n```\n\n----------------------------------------\n\nTITLE: Data Export from Speckle Model in Python Automate Function\nDESCRIPTION: An asynchronous function to extract specific data from a Speckle model and generate a report. Useful for creating BOQs, compliance reports, or exporting data for external systems.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def export_data(base, automate_context):\n    # Define data extraction rules\n    def extract_metrics(elem):\n        return {\n            \"id\": elem.id,\n            \"type\": elem.speckle_type,\n            \"volume\": getattr(elem, \"volume\", 0)\n        }\n    \n    data = [extract_metrics(elem) \n            for elem in base.query(lambda o: \"BuiltElements\" in o.speckle_type)]\n    \n    report = create_report(data)\n    await automate_context.store_file_result(\n        \"analysis.pdf\",\n        report,\n        \"application/pdf\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a New Speckle Stream with GraphQL Mutation in Google Apps Scripts\nDESCRIPTION: This function demonstrates how to execute a GraphQL mutation to create a new Speckle stream using Google Apps Scripts. It configures the request with variables for stream name and description, adds the necessary authentication, and logs the response. You must replace the placeholder URL and token with your actual values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/js-app-script.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createStream() {\n  let url = \"https://YOUR_SERVER_ADDRESS/graphql\";\n  let graphql = JSON.stringify({\n    query: `mutation streamCreate($myStream: StreamCreateInput!) { streamCreate(stream: $myStream) }`,\n    variables: {\n      myStream: {\n        name: \"Sample Stream\",\n        description: \"Created from Google Sheets!\",\n      },\n    },\n  });\n  let params = {\n    method: \"POST\",\n    payload: graphql,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer YOUR_PERSONAL_TOKEN\",\n    },\n  };\n  var response = UrlFetchApp.fetch(url, params);\n\n  Logger.log(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Receiving with Default Transport in C#\nDESCRIPTION: Demonstrates how to receive data using the default transport, retrieving previously sent data using its ID.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/transports.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar myDataId = await Operations.Send( myData );\n\nvar myData = await Operations.Receive( myDataId );\n```\n\n----------------------------------------\n\nTITLE: Implementing Chunkable Attribute for Mesh Class in C#\nDESCRIPTION: This snippet demonstrates how to use the Chunkable attribute along with DetachProperty to efficiently store large lists in a Mesh class. It chunks arrays into batches of 20,000 numbers for vertices, faces, colors, and texture coordinates.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/decomposition.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Mesh : Base\n{\n    [DetachProperty]\n    [Chunkable(20000)] // Chunks this array into batches of 20k numbers\n    public List<double> vertices { get; set; } = new List<double>();\n\n    [DetachProperty]\n    [Chunkable(20000)] // Chunks this array into batches of 20k numbers\n    public List<int> faces { get; set; } = new List<int>();\n\n    [DetachProperty]\n    [Chunkable(20000)] // Chunks this array into batches of 20k numbers\n    public List<int> colors { get; set; } = new List<int>();\n\n    [DetachProperty]\n    [Chunkable(20000)] // Chunks this array into batches of 20k numbers\n    public List<double> textureCoordinates { get; set; } = new List<double>();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConvertToNative Method for Custom Converter in C++\nDESCRIPTION: Example of implementing the ConvertToNative method for a custom converter in C++. This method performs the actual conversion from a Speckle object to a native Unreal Engine object.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nUObject* UMyConverter::ConvertToNative_Implementation(const UBase* SpeckleBase, UWorld* World, TScriptInterface<ISpeckleConverter>& AvailableConverters)\n{\n\tconst UMyObjectModel* m = Cast<UMyObjectModel>(SpeckleBase);\n\t\n\tif(m == nullptr) return nullptr;\n\t\n\treturn MyObjectToNative(m);\n}\n\nAActor* UMyConverter::MyObjectToNative(const UMyObjectModel* MyObject, UWorld* World)\n{\n\t// Conversion logic here!!\n\t// Convert MyObject into an Actor that we return\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BeamToSpeckle Method in Revit Converter\nDESCRIPTION: Example of the BeamToSpeckle method in the ConverterRevit class, which converts a Revit beam to a Speckle RevitBeam object.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/kits-dev.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate RevitBeam BeamToSpeckle(DB.FamilyInstance revitBeam)\n{\n  var baseGeometry = LocationToSpeckle(revitBeam);\n  var baseLine = baseGeometry as ICurve;\n  if (baseLine == null)\n  {\n    throw new Exception(\"Only line based Beams are currently supported.\");\n  }\n\n  var speckleBeam = new RevitBeam();\n  speckleBeam.type = Doc.GetElement(revitBeam.GetTypeId()).Name;\n  speckleBeam.baseLine = baseLine;\n  speckleBeam.level = ConvertAndCacheLevel(revitBeam, BuiltInParameter.INSTANCE_REFERENCE_LEVEL_PARAM);\n  speckleBeam[\"@displayMesh\"] = GetElementMesh(revitBeam);\n\n  GetAllRevitParamsAndIds(speckleBeam, revitBeam);\n\n  return speckleBeam;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RenderMaterial Interface for Speckle Materials\nDESCRIPTION: Interface for material properties of meshes in Speckle, including color, opacity, roughness, metalness, and vertex colors.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RenderMaterial {\n  id: string;\n  color: number;\n  opacity: number;\n  roughness: number;\n  metalness: number;\n  vertexColors: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Timber Walls in Speckle Data using LINQ in C#\nDESCRIPTION: A code example that receives a Revit commit from Speckle, flattens the data structure, and uses LINQ to filter for timber walls based on their type property.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/FilteringData.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\nusing Speckle.Core.Api;\nusing Speckle.Core.Models;\n\n// Note: some boilerplate code removed.\n\n// Receive a revit commit (note: you will need a local account on app.speckle.systems for this to work!)\nvar data = Helpers.Receive(\"https://app.speckle.systems/streams/0d3cb7cb52/commits/681cdd572c\").Result;\nvar flatData = data.Flatten().ToList();\n\nvar timberWalls = flatData.FindAll(obj => obj is Objects.BuiltElements.Revit.RevitWall wall && wall.type == \"Wall - Timber Clad\");\n```\n\n----------------------------------------\n\nTITLE: Building Acceleration Structure for BatchObject in TypeScript\nDESCRIPTION: Demonstrates how to build an AccelerationStructure for a BatchObject. This method can use either the render view's geometry or an optional provided BVH.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-object-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuildAccelerationStructure(bvh?: MeshBVH)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Collecting Speckle Elements in C#\nDESCRIPTION: A method to collect specific elements from a Speckle model based on defined criteria. Useful for quick inventory or rule-based validation of elements.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic IEnumerable<Base> CollectElements(Base baseObject)\n{\n    return baseObject.Traverse<Beam>()\n        .Where(b => b.length > 10.0)\n        .Where(b => b.Parameters.ContainsKey(\"material\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Set Color Filter Method\nDESCRIPTION: Method to apply a color filter based on property information with optional ghosting.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetColorFilter(prop: PropertyInfo, ghost = true): FilteringState\n```\n\n----------------------------------------\n\nTITLE: Using BaseObjectSerializer in Speckle Python\nDESCRIPTION: Demonstrates the usage of BaseObjectSerializer for traversing, serializing, and deserializing Base objects, including handling of detached bases.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.objects import Base\nfrom specklepy.serialization.base_object_serializer import BaseObjectSerializer\n\ndetached_base = Base()\ndetached_base.name = \"a detached base\"\n\nbase_obj = Base()\nbase_obj.name = \"my base\"\nbase_obj[\"@nested\"] = detached_base\n\nserializer = BaseObjectSerializer()\nhash, obj_dict = serializer.traverse_base(base_obj)\n\nhash, serialized = serializer.write_json(base_obj)\ndeserialized = serializer.read_json(serialized)\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Analysis of Speckle Model in Python\nDESCRIPTION: A function to analyze the structural relationships in a Speckle model. Useful for structural stability checks or logical grouping validation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_structure(base):\n    # Define context-specific rules\n    def has_sufficient_support(floor, columns):\n        return len(columns) >= 4\n    \n    for floor in base.query(lambda o: o.speckle_type == \"Objects.BuiltElements.Floor\"):\n        beams = floor.query(lambda o: o.speckle_type == \"Objects.BuiltElements.Beam\")\n        columns = floor.query(lambda o: o.speckle_type == \"Objects.BuiltElements.Column\")\n        \n        if not has_sufficient_support(floor, columns):\n            floor.parameters[\"structural_review\"] = \"insufficient_support\"\n```\n\n----------------------------------------\n\nTITLE: Constructing TopLevelAccelerationStructure in TypeScript\nDESCRIPTION: Creates a new TopLevelAccelerationStructure instance with a group of BatchObjects. This constructor populates and constructs the top-level acceleration structure.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(batchObjects: BatchObject[])\n```\n\n----------------------------------------\n\nTITLE: Model Augmentation in Speckle Automate Python Function\nDESCRIPTION: An asynchronous function to analyze and tag elements in a Speckle model, creating a new version with analysis results. Useful for adding custom insights or enriching models with additional properties.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def analyze_and_tag(base, automate_context):\n    # Define reusable tagging function\n    def tag_element(elem, result):\n        elem.parameters[\"analysis_status\"] = result\n        \n    def analyze_element(elem):\n        return \"pass\" if check_conditions(elem) else \"review\"\n    \n    modified = []\n    for elem in base.query(lambda o: \"BuiltElements\" in o.speckle_type):\n        elem_copy = elem.duplicate()\n        tag_element(elem_copy, analyze_element(elem))\n        modified.append(elem_copy)\n        \n    await automate_context.create_new_version_in_project(\n        modified,\n        \"Analysis Results\",\n        \"Added analysis tags\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Operations and Transports\nDESCRIPTION: Demonstrates using operations and transports for sending and receiving objects, with examples of memory transport usage.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.transports.memory import MemoryTransport\nfrom specklepy.api import operations\n\ntransport = MemoryTransport()\nbase_obj = Base()\n\n# this serialises the object and sends it to the transport\nhash = operations.send(base=base_obj, transports=[transport])\n\n# if the object had detached objects, you can see these as well\nsaved_objects = transport.objects # a dict with the obj hash as the key\n\n# this receives an object from the given transport, deserialises it,\n# and recomposes it into a base object.\n# you can optionally provide a local_transport which will default to\n# the `SQLiteTransport` pointing at your local cache\nreceived_base = operations.receive(obj_id=hash, remote_transport=transport)\n```\n\n----------------------------------------\n\nTITLE: Defining Function Inputs in C# with Attributes\nDESCRIPTION: This code shows how to define function inputs in C# using attributes. It demonstrates required string inputs, numerical inputs with ranges, and inputs with custom display names and descriptions.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/making-your-function.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#FunctionInputs.cs\n\nstruct FunctionInputs\n{\n\t[Required]\n\tpublic string TextInput; // A required string input. UI will infer the Property Title\n\n\t[Range(0.0, 100.0)]\n\tpublic float ScalarValue; // A float variable between 0 and 100\n\n\t[DisplayName(\"Specific Input Title\")]\n\t[Description(\"This is a description for the example input.\")]\n\tpublic string DecoratedInput; // A range of Attributes applied.\t\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract GeometryConverter Class Definition (TypeScript)\nDESCRIPTION: This snippet shows the abstract GeometryConverter class with three methods that need to be implemented: getSpeckleType, convertNodeToGeometryData, and disposeNodeGeometryData.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loaders.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npublic abstract getSpeckleType(node: NodeData): SpeckleType\npublic abstract convertNodeToGeometryData(node: NodeData): GeometryData\npublic abstract disposeNodeGeometryData(node: NodeData): void\n```\n\n----------------------------------------\n\nTITLE: Handling Access Code Exchange in Vue Router\nDESCRIPTION: Configures a Vue Router navigation guard to automatically exchange the access code for tokens when present in the URL. This ensures seamless authentication flow after the user is redirected back from the Speckle auth page.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport store from '@/store'\n\nrouter.beforeEach(async (to, from, next) => {\n  if (to.query.access_code) {\n    try {\n      await store.dispatch(\"exchangeAccessCode\", to.query.access_code)\n    } catch (err) {\n      console.warn(\"exchange failed\", err)\n    }\n    next(\"/\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Transport Configuration in C#\nDESCRIPTION: Demonstrates setting up custom local and server transports with specific storage locations, bypassing the global cache.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/transports.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar customLocalTransport = new SQLiteTransport( basePath: @\"{localFolderPath}/.speckle\" );\nvar serverTransport = new ServerTransport(...);\n\nvar myDataId = await Operations.Send(\n  myData,\n  transports: new ITransport[] { customLocalTransport, serverTransport },\n  useDefaultCache: false // will bypass the global cache!\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a BaseInstance Class in C#\nDESCRIPTION: This snippet demonstrates the implementation of a BaseInstance class that inherits from Instance<Base>. It shows how to override methods for getting transformable and transformed geometry, and how to create and use instances of this class.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// An instance class with definition of type Base\npublic class BaseInstance: Instance<Base>\n{\n\t// We're expecting transformable geometry to be in the `displayValue` property\n  protected override IEnumerable<Base> GetTransformableGeometry()\n  {\n\t\tvar display = typedDefinition[\"displayValue\"] as List<Base>;\n    var allChildren = display ?? new List<Base>();\n    return allChildren;\n  }\n\n  [SchemaComputed(\"transformedGeometry\")]\n  public override IEnumerable<ITransformable> GetTransformedGeometry()\n  {\n    var transformed = base.GetTransformedGeometry().ToList();\n    return transformed;\n  }\n}\n\n// A base with two meshes as its displayValue\nvar definition = new Base();\ndefinition[\"displayValue\"] = new List<Mesh>(){ mesh1, mesh2 };\n\n// an instance of this base\nvar instance = new BaseInstance();\ninstance.definition = definition;\ninstance.transform = new Transform(matrix1, units);\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Fields in Speckle Records for Power BI\nDESCRIPTION: This example shows how to access nested fields within a Speckle Record in Power BI. It demonstrates retrieving the 'value' of a specific parameter from a nested 'parameters' record.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/powerbi/working-with-records.md#2025-04-22_snippet_1\n\nLANGUAGE: PowerQuery\nCODE:\n```\n[data][parameters][parameter_name_1][value]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router for Speckle Authentication in JavaScript\nDESCRIPTION: This snippet updates the router.beforeEach implementation to handle access code exchange and user authentication checks on route changes. It ensures proper redirection based on authentication status.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach(async (to, from, next) => {\n  if (to.query.access_code) {\n    // If the route contains an access code, exchange it\n    try {\n      await store.dispatch(\"exchangeAccessCode\", to.query.access_code)\n    } catch (err) {\n      console.warn(\"exchange failed\", err)\n    }\n    // Whatever happens, go home.\n    next(\"/\")\n  } else {\n    try {\n      // Check on every route change if you still have access.\n      var goto = await store.dispatch(\"getUser\")\n      next(goto)\n    } catch (err) {\n      next(\"/\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Transport Data Receiving in C#\nDESCRIPTION: Shows how to receive data using a specific remote transport instead of the default one.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/transports.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar myData = await Operations.Receive(\n\tmyDataId,\n\tremoteTransport: new ServerTransport( ... ) // where you want to receive things from!\n);\n```\n\n----------------------------------------\n\nTITLE: Constructing Points DataFrame for 3D Scatter Plot in Python\nDESCRIPTION: This function iterates through building levels, extracting vertex data from columns and floor slabs to create a pandas DataFrame for 3D visualization.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndef construct_points_df(levels: List[Base]):\n    # initialise a pandas data frame\n    df_vertices = pd.DataFrame(columns=(\"x\", \"y\", \"z\", \"element\"))\n\n    vertices = []\n    for level in levels:\n        # add column vertices\n        columns = level[\"@columns\"]\n        for column in columns:\n            points = column.Vertices\n            for p in points:\n                vertices.append({\"x\": p.x, \"y\": p.y, \"z\": p.z, \"element\": \"columns\"})\n        # add floor slab vertices\n        floorslab = level[\"@floorSlab\"]\n        points = floorslab.Vertices\n        for p in points:\n            vertices.append({\"x\": p.x, \"y\": p.y, \"z\": p.z, \"element\": \"floorSlab\"})\n\n    return df_vertices.append(vertices)\n```\n\n----------------------------------------\n\nTITLE: Coloring Objects by Properties in Speckle Viewer (TypeScript)\nDESCRIPTION: This snippet demonstrates how to apply color filtering based on object properties in the Speckle Viewer. It finds a specific property ('level.name' in this case) and uses it to set a color filter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-example.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/** Find the 'level.name' property info*/\nconst propertyInfo: PropertyInfo = properties.find((value) => {\n  return value.key === \"level.name\";\n}) as PropertyInfo;\n\nconst filteringState = filtering.setColorFilter(propertyInfo);\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Speckle Server\nDESCRIPTION: This YAML file defines the Docker Compose configuration for deploying Speckle Server and its dependencies. It includes services for PostgreSQL, Redis, MinIO, and various Speckle components.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-manualsetup.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2.3\"\nname: \"speckle-server\"\n\nservices:\n  ####\n  # Speckle Server dependencies\n  #######\n  postgres:\n    image: \"postgres:14.5-alpine\"\n    restart: always\n    environment:\n      POSTGRES_DB: speckle\n      POSTGRES_USER: speckle\n      POSTGRES_PASSWORD: speckle\n    volumes:\n      - postgres-data:/var/lib/postgresql/data/\n    healthcheck:\n      # the -U user has to match the POSTGRES_USER value\n      test: [\"CMD-SHELL\", \"pg_isready -U speckle\"]\n      interval: 5s\n      timeout: 5s\n      retries: 30\n\n  redis:\n    image: \"redis:7-alpine\"\n    restart: always\n    volumes:\n      - redis-data:/data\n    ports:\n      - \"127.0.0.1:6379:6379\"\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\"]\n      interval: 5s\n      timeout: 5s\n      retries: 30\n\n  minio:\n    image: \"minio/minio\"\n    command: server /data --console-address \":9001\"\n    restart: always\n    volumes:\n      - minio-data:/data\n    healthcheck:\n      test: [\"CMD\", \"mc\", \"ready\", \"local\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  ####\n  # Speckle Server\n  #######\n  speckle-ingress:\n    image: speckle/speckle-docker-compose-ingress:2\n    restart: always\n    ports:\n      - \"0.0.0.0:80:8080\"\n    environment:\n      FILE_SIZE_LIMIT_MB: \"100\"\n      NGINX_ENVSUBST_OUTPUT_DIR: \"/etc/nginx\"\n\n  speckle-frontend-2:\n    image: speckle/speckle-frontend-2:2\n    restart: always\n    environment:\n      NUXT_PUBLIC_SERVER_NAME: \"local\"\n      # TODO: Change NUXT_PUBLIC_API_ORIGIN to the URL of the speckle server, as accessed from the network. This is the same value as should be used for the CANONICAL_URL in the server section below.\n      NUXT_PUBLIC_API_ORIGIN: \"http://127.0.0.1\"\n      NUXT_PUBLIC_BACKEND_API_ORIGIN: \"http://speckle-server:3000\"\n      # TODO: Change NUXT_PUBLIC_BASE_URL to the URL of the speckle frontend, as accessed from the network. This is the same value as should be used for the CANONICAL_URL in the server section below.\n      NUXT_PUBLIC_BASE_URL: \"http://127.0.0.1\"\n      NUXT_PUBLIC_LOG_LEVEL: 'warn'\n      NUXT_REDIS_URL: \"redis://redis\"\n\n  speckle-server:\n    image: speckle/speckle-server:2\n    restart: always\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"/nodejs/bin/node\",\n          \"-e\",\n          \"try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }\",\n        ]\n      interval: 10s\n      timeout: 3s\n      retries: 30\n\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n      minio:\n        condition: service_healthy\n    environment:\n      # TODO: Change this to the URL of the speckle server, as accessed from the network\n      CANONICAL_URL: \"http://127.0.0.1\"\n      SPECKLE_AUTOMATE_URL: \"http://127.0.0.1:3030\"\n\n      REDIS_URL: \"redis://redis\"\n\n      S3_ENDPOINT: \"http://minio:9000\"\n      S3_ACCESS_KEY: \"minioadmin\"\n      S3_SECRET_KEY: \"minioadmin\"\n      S3_BUCKET: \"speckle-server\"\n      S3_CREATE_BUCKET: \"true\"\n\n      FILE_SIZE_LIMIT_MB: 100\n\n      # TODO: Change this to a unique secret for this server\n      SESSION_SECRET: \"TODO:ReplaceWithLongString\"\n\n      STRATEGY_LOCAL: \"true\"\n      DEBUG: \"speckle:*\"\n\n      POSTGRES_URL: \"postgres\"\n      POSTGRES_USER: \"speckle\"\n      POSTGRES_PASSWORD: \"speckle\"\n      POSTGRES_DB: \"speckle\"\n      ENABLE_MP: \"false\"\n\n      # TODO: Change this to the URL of the speckle server, as accessed from the network\n      FRONTEND_ORIGIN: \"http://127.0.0.1\"\n\n  preview-service:\n    image: speckle/speckle-preview-service:2\n    restart: always\n    depends_on:\n      speckle-server:\n        condition: service_healthy\n    mem_limit: \"1000m\"\n    memswap_limit: \"1000m\"\n    environment:\n      DEBUG: \"preview-service:*\"\n      PG_CONNECTION_STRING: \"postgres://speckle:speckle@postgres/speckle\"\n\n  webhook-service:\n    image: speckle/speckle-webhook-service:2\n    restart: always\n    depends_on:\n      speckle-server:\n        condition: service_healthy\n    environment:\n      DEBUG: \"webhook-service:*\"\n      PG_CONNECTION_STRING: \"postgres://speckle:speckle@postgres/speckle\"\n      WAIT_HOSTS: postgres:5432\n\n  fileimport-service:\n    image: speckle/speckle-fileimport-service:2\n    restart: always\n    depends_on:\n      speckle-server:\n        condition: service_healthy\n    environment:\n      DEBUG: \"fileimport-service:*\"\n      PG_CONNECTION_STRING: \"postgres://speckle:speckle@postgres/speckle\"\n      WAIT_HOSTS: postgres:5432\n\n      S3_ENDPOINT: \"http://minio:9000\"\n      S3_ACCESS_KEY: \"minioadmin\"\n      S3_SECRET_KEY: \"minioadmin\"\n      S3_BUCKET: \"speckle-server\"\n\n      SPECKLE_SERVER_URL: \"http://speckle-server:3000\"\n\nnetworks:\n  default:\n    name: speckle-server\n\nvolumes:\n  postgres-data:\n  redis-data:\n  minio-data:\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Automation Run Metadata in Speckle Automate\nDESCRIPTION: This JSON schema defines the structure of metadata for an Automation Function Run in Speckle Automate. It includes properties for Speckle token, function inputs, and detailed automation run data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-specification.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://automate.speckle.systems/automationfunctionrunmetadata.schema.json\",\n  \"title\": \"Automation Run Metadata\",\n  \"description\": \"The metadata describing an Automation Function Run.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"speckleToken\": {\n      \"type\": \"string\",\n      \"description\": \"The token for accessing the Speckle API. This Token SHALL be limited in scope to the Speckle model which triggered the Function to run as part of an Automation.\"\n    },\n    \"functionInputs\": {\n      \"type\": \"object\",\n      \"description\": \"The configuration values for a Function within an Automation.\",\n      \"properties\": {\n        \"additionalProperties\": \"true\"\n      }\n    },\n    \"automationRunData\": {\n      \"type\": \"object\",\n      \"description\": \"The metadata describing the Automation Run.\",\n      \"properties\": {\n        \"projectId\": {\n          \"type\": \"string\",\n          \"description\": \"The ID of the Speckle project which contains the Speckle model which is associated with the Automation.\"\n        },\n        \"modelId\": {\n          \"type\": \"string\",\n          \"description\": \"The ID of the Speckle model which is associated with the Automation. A change to this model may have caused the Automation to run.\"\n        },\n        \"branchName\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the Speckle branch. 'Branch' is now known as 'model' except in the Speckle API, where 'branch' wording is retained to provide backwards compatibility and ensure ongoing stability of the API.\"\n        },\n        \"versionId\": {\n          \"type\": \"string\",\n          \"description\": \"The version of the Speckle model. This is the version which was created as a result of the change which triggered the Automation to run. Or, in the case of an Automation being manually triggered by a user, it is the current version of the Speckle model.\"\n        },\n        \"speckleServerUrl\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the Speckle Server which contains the Speckle project and Speckle model which is associated with the Automation.\"\n        },\n        \"automationId\": {\n          \"type\": \"string\",\n          \"description\": \"The ID of the Automation which is being run.\"\n        },\n        \"automationRevisionId\": {\n          \"type\": \"string\",\n          \"description\": \"The ID of the revision of the Automation which is being run.\"\n        },\n        \"automationRunId\": {\n          \"type\": \"string\",\n          \"description\": \"The ID which defines the current run of the Automation. This is a unique ID which is generated for each run of an Automation.\"\n        },\n        \"functionName\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the Function which is being run.\"\n        },\n        \"functionId\": {\n          \"type\": \"string\",\n          \"description\": \"A unique id of the Function which is being run. This includes a hyphen concatenated string containing the Automation ID, the Automation version ID, the Function Id, the Function Version ID, and a unique number which identifies this running instance within the context of the running Automation.\"\n        },\n        \"functionLogo\": {\n          \"type\": \"string\",\n          \"description\": \"Base64 encoded string of the Function logo.\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Data Display in Home.vue for Speckle Integration\nDESCRIPTION: A complete Vue.js component that displays stream information and commits in a data table with selectable columns. The component includes computed properties for data manipulation, watchers for pagination handling, and styling for the interface.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<template lang=\"html\">\n  <WelcomeView v-if=\"!$store.getters.isAuthenticated\" />\n  <v-container v-else class=\"home pa-6\">\n    <stream-search\n      @selected=\"$store.dispatch('handleStreamSelection', $event)\"\n    />\n    <h2 class=\"pt-6 primary--text\">\n      <span v-if=\"selectedStream\">\n        {{ selectedStream.name }} — {{ selectedStream.id }}\n        <v-btn\n          outlined\n          text\n          small\n          class=\"ml-3\"\n          :href=\"serverUrl + '/streams/' + selectedStream.id\"\n        >\n          View in server\n        </v-btn>\n        <v-btn\n          outlined\n          text\n          small\n          class=\"ml-3\"\n          color=\"error\"\n          @click=\"$store.dispatch('clearStreamSelection')\"\n        >\n          Clear selection\n        </v-btn>\n      </span>\n      <span v-else>\n        <em>No stream selected. Find one using the search bar 👆🏼</em>\n      </span>\n    </h2>\n\n    <div class=\"pt-6\">\n      <v-select\n        v-model=\"selectedKeys\"\n        :items=\"availableKeys\"\n        chips\n        label=\"Select data to display\"\n        multiple\n      ></v-select>\n      <h3 class=\"pa-2 primary--text\">Stream commits:</h3>\n      <v-data-table\n        :loading=\"loading\"\n        :headers=\"filteredHeaders\"\n        :items=\"commits ? commits.items : []\"\n        :options.sync=\"options\"\n        :server-items-length=\"commits ? commits.totalCount : null\"\n        disable-sort\n        disable-filtering\n        :disable-pagination=\"loading\"\n        class=\"elevation-1\"\n      ></v-data-table>\n    </div>\n  </v-container>\n</template>\n\n<script>\nimport StreamSearch from \"@/components/StreamSearch\"\nimport WelcomeView from \"@/components/WelcomeView\"\n\nexport default {\n  name: \"HomeView\",\n  components: { WelcomeView, StreamSearch },\n  data: () => {\n    return {\n      loading: false,\n      options: {\n        itemsPerPage: 5\n      },\n      serverUrl: process.env.VUE_APP_SERVER_URL,\n      selectedKeys: [\"id\", \"message\", \"branchName\", \"authorName\"]\n    }\n  },\n  mounted() {\n    var storedOpts = this.$store.state.tableOptions\n    if (storedOpts) this.options = storedOpts\n  },\n  methods: {},\n  computed: {\n    selectedStream: function() {\n      return this.$store.state.currentStream\n    },\n    previousCursors: function() {\n      return this.$store.state.previousCursors || [null]\n    },\n    commits: function() {\n      return this.$store.state.latestCommits\n    },\n    availableKeys: function() {\n      var keys = {}\n      this.commits?.items.forEach(obj => {\n        Object.keys(obj).forEach(key => {\n          if (!keys[key]) {\n            keys[key] = true\n          }\n        })\n      })\n      return Object.keys(keys)\n    },\n    filteredHeaders: function() {\n      return this.selectedKeys.map(key => {\n        return { text: key, value: key }\n      })\n    }\n  },\n  watch: {\n    options: {\n      async handler(val, oldval) {\n        this.$store.commit(\"setTableOptions\", val)\n        if (oldval.page && val.page != oldval.page) {\n          if (val.page > oldval.page) {\n            this.loading = true\n            var cursor = this.$store.state.latestCommits.cursor\n            await this.$store.dispatch(\"getCommits\", cursor)\n            this.$store.commit(\"addCursorToPreviousList\", cursor)\n            this.loading = false\n          } else {\n            console.log(\"page down\")\n            this.loading = true\n            await this.$store.dispatch(\n              \"getCommits\",\n              this.previousCursors[val.page - 1]\n            )\n            this.loading = false\n          }\n        }\n      },\n      deep: true\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n#viewer {\n  min-height: 500px;\n}\n\n.v-data-footer__select {\n  display: none !important;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Connector Bindings for Host Application\nDESCRIPTION: Template class implementing the ConnectorBindings abstract class, showing required method implementations for connecting the UI with the host application.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/connectors-dev.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConnectorBindingsAECApp : ConnectorBindings\n  {\n    public override string GetActiveViewName()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override List<MenuItem> GetCustomStreamMenuItems()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override string GetDocumentId()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override string GetDocumentLocation()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override string GetFileName()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override string GetHostAppName()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override List<string> GetObjectsInView()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override List<string> GetSelectedObjects()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override List<ISelectionFilter> GetSelectionFilters()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override List<StreamState> GetStreamsInFile()\n    {\n      throw new NotImplementedException();\n    }\n\n    public override Task<StreamState> ReceiveStream(StreamState state, ProgressViewModel progress)\n    {\n      throw new NotImplementedException();\n    }\n\n    public override void SelectClientObjects(string args)\n    {\n      throw new NotImplementedException();\n    }\n\n    public override Task SendStream(StreamState state, ProgressViewModel progress)\n    {\n      throw new NotImplementedException();\n    }\n\n    public override void WriteStreamsToFile(List<StreamState> streams)\n    {\n      throw new NotImplementedException();\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Batch Implementation Classes\nDESCRIPTION: Class definitions for various batch implementations including lines, meshes, instanced meshes, points, and text.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass LineBatch implements Batch {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MeshBatch implements Batch {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass InstancedMeshBatch implements Batch {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass PointBatch implements Batch {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass TextBatch implements Batch {}\n```\n\n----------------------------------------\n\nTITLE: Custom Transport Data Receiving with Local Cache in C#\nDESCRIPTION: Shows how to receive data using a custom local transport for caching instead of the global cache.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/transports.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar myData = await Operations.Receive(\n  objectId: myDataId,\n  remoteTransport: serverTransport,\n  localTransport: customLocalTransport // will use this one instead of the global cache!\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Input Event Handler in TypeScript\nDESCRIPTION: Method for registering event handlers for various input events in the Speckle Viewer. Takes an event type and a handler function as parameters.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/input-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\non(eventType: InputEvent, handler: (arg) => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining Box Class in Speckle Object Model\nDESCRIPTION: Example of creating a Box class that inherits from Base and implements various interfaces in the Speckle object model.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/kits-dev.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Box : Base, IHasVolume, IHasArea, IHasBoundingBox\n{\n  public Plane basePlane { get; set; }\n\n  public Interval xSize { get; set; }\n\n  public Interval ySize { get; set; }\n\n  public Interval zSize { get; set; }\n\n  public Box bbox { get; }\n\n  public double area { get; set; }\n\n  public double volume { get; set; }\n\n  public Box() { }\n\n  public Box(Plane basePlane, Interval xSize, Interval ySize, Interval zSize, string units = Units.Meters, string applicationId = null)\n  {\n    this.basePlane = basePlane;\n    this.xSize = xSize;\n    this.ySize = ySize;\n    this.zSize = zSize;\n    this.applicationId = applicationId;\n    this.units = units;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Diff Comparison Method in TypeScript\nDESCRIPTION: Asynchronous method to compare two Speckle models provided as URLs. It loads the models if needed and returns a DiffResult containing arrays of unchanged, added, removed and modified nodes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/diff-extension-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync diff(\n    urlA: string,\n    urlB: string,\n    mode: VisualDiffMode,\n    authToken?: string\n  ): Promise<DiffResult>\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Annotations in Python\nDESCRIPTION: This example shows how to enrich annotations with additional metadata for improved interpretability and visualization. It demonstrates adding currency and cost-saved information to a cost analysis annotation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-results.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrunCtx.attach_info_to_objects(\n    \"Cost Analysis\",\n    [\"obj_id_4\", \"obj_id_5\"],\n    \"Material cost optimized\",\n    metadata={\"currency\": \"USD\", \"cost_saved\": 5000}\n)\n```\n\n----------------------------------------\n\nTITLE: Refitting Top-Level Acceleration Structure in TypeScript\nDESCRIPTION: Implements the refit method, which rebuilds the top-level acceleration structure. This needs to be called whenever any of the comprising batch objects update their transformation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nrefit(): void\n```\n\n----------------------------------------\n\nTITLE: Working with Base Objects\nDESCRIPTION: Demonstrates basic usage of Base objects including attribute assignment and nesting.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.objects import Base\n\n# creating a base we will nest within a parent base\ndetached_base = Base()\ndetached_base.name = \"a detached base\"\n\n# creating our parent base object\nbase_obj = Base()\n\n# attributes can be added using dot or dict notation\nbase_obj.name = \"my base\"\nbase_obj[\"colour\"] = \"lilac\"\n\n# other base objects can be nested within.\n```\n\n----------------------------------------\n\nTITLE: Managing Streams and Branches\nDESCRIPTION: Shows various operations for managing streams, branches and commits using the SpeckleClient API.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# get a list of your most recent streams\nstream_list = client.stream.list()\n\n# search your streams\nresults = client.stream.search(\"mech\")\n\n# create a stream\nnew_stream_id = client.stream.create(name=\"a shiny new stream\")\n\n# get a stream\nnew_stream = client.stream.get(id=new_stream_id)\n\n# get list of commits\ncommits = client.commit.list(\"stream_id\")\n\n# get a specific commit\ncommit = client.commit.get(\"stream_id\", \"commit_id\")\n\n# create a commit\ncommit_id = client.commit.create(\n    stream_id=\"stream_id\", object_id=\"object_id\", message=\"this is a commit message to describe the commit\")\n\n# delete a commit\ndeleted = client.commit.delete(\"stream_id\", \"commit_id\")\n\n# get a list of branches\nbranches = client.branch.list(\"stream_id\")\n\n# create a branch\nbranch_id = client.branch.create(\"stream_id\", \"branch name\", \"a description of the branch\")\n\n# get a specific branch\nbranch = client.branch.get(\"stream_id\", \"branch name\")\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Signature in Python\nDESCRIPTION: This snippet demonstrates how to validate the X-WEBHOOK-SIGNATURE header in Python to ensure the authenticity of incoming webhook requests. It uses the hmac library to compute and compare signatures.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-webhooks.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport hmac\n# ...\n\nexpected_signature = hmac.new(SHARED_SECRET.encode(), payload_json.encode(), 'sha256').hexdigest()\nif not hmac.compare_digest(expected_signature, SIGNATURE_FROM_HEADER):\n    print('Ignoring request with invalid signature')\n    return\n```\n\n----------------------------------------\n\nTITLE: Extending Speckle Viewer with Measurement Tool in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up the Speckle Viewer with additional functionality, specifically the measurement tool extension. It initializes the viewer, adds camera controller and measurement extensions, and loads Speckle data from a URL.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/advanced-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Viewer,\n  DefaultViewerParams,\n  SpeckleLoader,\n  UrlHelper,\n  CameraController,\n  MeasurementsExtension\n} from \"@speckle/viewer\";\n\n\nasync function main() {\n  /** Get the HTML container */\n  const container = document.getElementById(\"renderer\") as HTMLElement;\n\n  /** Configure the viewer params */\n  const params = DefaultViewerParams;\n  params.verbose = true;\n\n  /** Create Viewer instance */\n  const viewer = new Viewer(container, params);\n  /** Initialise the viewer */\n  await viewer.init();\n\n  /** Add the stock camera controller extension */\n  viewer.createExtension(CameraController);\n  /** Add mesurements extension */\n  const measurements = viewer.createExtension(MeasurementsExtension);\n\n  const urls = await UrlHelper.getResourceUrls(\n    \"https://app.speckle.systems/projects/7591c56179/models/32213f5381\"\n  );\n  for (const url of urls) {\n    const loader = new SpeckleLoader(viewer.getWorldTree(), url, \"\");\n    /** Load the speckle data */\n    await viewer.loadObject(loader, true);\n  }\n\n  measurements.enabled = true;\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Fetching and Applying Materials to RenderViews\nDESCRIPTION: Demonstrates the complete process of getting a render tree, fetching render views for a specific node, and applying material properties to those render views.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-rendering.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst nodeId = \"2f1bd7295481641c888f09b5fbb6dc2b\";\nconst renderTree = worldTree.getRenderTree(nodeId);\n// Get all render views starting from the root of the render tree\nconst node = worldTree.findId(nodeId);\nconst rvs = renderTree.getRenderViewsForNode(node);\n// Define some material parameters\nconst materialData = {\n  color: 0xee0022,\n  opacity: 1,\n  roughness: 1,\n  metalness: 0,\n  vertexColors: false,\n};\n// Apply material\nviewer.setMaterial(rvs, materialData);\n```\n\n----------------------------------------\n\nTITLE: Extracting Rooms from Speckle Data using LINQ in C#\nDESCRIPTION: A LINQ query that filters flattened Speckle data to find all Room objects using type checking against the Objects.BuiltElements.Room class.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/FilteringData.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar rooms = flatData.FindAll(obj => obj is Objects.BuiltElements.Room);\n```\n\n----------------------------------------\n\nTITLE: Game-Time Data Sending in Unity\nDESCRIPTION: Example code demonstrating how to send data using the Sender component at runtime\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unity.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar sender = myGameObject.AddComponent<Sender>();\nsender.Send(projectId, objs);\n```\n\n----------------------------------------\n\nTITLE: Adding RenderTree in SpeckleRenderer\nDESCRIPTION: Asynchronous generator function to add a render tree to the scene. It builds batches and adds them to the scene, yielding after each batch creation to allow for user-defined code execution.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync *addRenderTree(subtreeId: string): AsyncGenerator<any, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: Getting Atomic Parent in RenderTree (TypeScript)\nDESCRIPTION: Retrieves the closest atomic parent of the provided node. An atomic node represents a standalone object like a door or window.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAtomicParent(node: TreeNode): TreeNode\n```\n\n----------------------------------------\n\nTITLE: Loading OBJ Data from URL into Viewer\nDESCRIPTION: This snippet shows how to load OBJ data into the viewer using the ObjLoader. It creates a loader for the OBJ data from a URL and then loads the object into the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loading-example.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst objUrl: string = '<your OBJ resource URL>'\n/** Create a loader for the .obj data */\nconst loader = new ObjLoader(viewer.getWorldTree(), objUrl);\n/** Load the obj data */\nawait viewer.loadObject(loader, true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vuex-Persist for Data Persistence in Speckle Vue.js App\nDESCRIPTION: Code snippet showing how to implement data persistence in a Vue.js application using vuex-persist. This enables the application to retain user selection and commit results across page refreshes by storing state in localStorage.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport VuexPersistence from \"vuex-persist\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst vuexLocal = new VuexPersistence({\n  storage: window.localStorage,\n  key: `${APP_NAME}.vuex`\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default new Vuex.Store({\n  plugins: [vuexLocal.plugin],\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Traversal Rules in C#\nDESCRIPTION: This snippet illustrates how to create custom traversal rules using the TraversalRule builder in C#. It shows the basic structure for defining predicate functions and member selection functions.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/traversal.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbool predicateFunction(Base b) {... }\nIEnumerable<string> memberSelectionFunction(Base b) {... }\n    \nvar myCustomRule = TraversalRule.NewTraversalRule()\n        .When(predicateFunction)\n        .ContinueTraversing(memberSelectionFunction);\n```\n\n----------------------------------------\n\nTITLE: Resource Accessor in TypeScript\nDESCRIPTION: Getter method that returns the loader's resource string identifier.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loader-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget resource(): string\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Fetch in JavaScript\nDESCRIPTION: Defines functions to fetch user data from the Speckle server using GraphQL. This includes a query for user and server information, and utility functions to make authenticated API calls.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userInfoQuery } from \"@/speckleQueries\"\n\nexport async function speckleFetch(query) {\n  let token = localStorage.getItem(TOKEN)\n  if (token)\n    try {\n      var res = await fetch(`${SERVER_URL}/graphql`, {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + token,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          query: query\n        })\n      })\n      return await res.json()\n    } catch (err) {\n      console.error(\"API call failed\", err)\n    }\n  else return Promise.reject(\"You are not logged in (token does not exist)\")\n}\n\nexport const getUserData = () => speckleFetch(userInfoQuery())\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Speckle Viewer\nDESCRIPTION: Sets up the basic HTML structure with a full-screen container div for the Speckle viewer. Includes necessary meta tags and links to the TypeScript source file.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/basic-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Parcel Sandbox</title>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n\n  <body>\n    <div id=\"renderer\" style=\"width:100%;height:100%;left:0px;top:0px;position:absolute\" />\n\n    <script src=\"src/index.ts\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading Speckle Data into Viewer\nDESCRIPTION: This snippet demonstrates how to load Speckle data into the viewer using the SpeckleLoader. It first retrieves resource URLs and then iterates through them to load each object into the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loading-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst urls = await UrlHelper.getResourceUrls(\n  \"https://app.speckle.systems/projects/7591c56179/models/32213f5381\"\n);\nfor (const url of urls) {\n  const loader = new SpeckleLoader(viewer.getWorldTree(), url, \"\");\n  /** Load the speckle data */\n  await viewer.loadObject(loader, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Speckle Authentication Functions in JavaScript\nDESCRIPTION: Defines constants and functions for Speckle authentication, including redirecting to auth page, exchanging access code for tokens, and logging out. These functions interact with localStorage and the Speckle server.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const APP_NAME = process.env.VUE_APP_SPECKLE_NAME\nexport const SERVER_URL = process.env.VUE_APP_SERVER_URL\nexport const TOKEN = `${APP_NAME}.AuthToken`\nexport const REFRESH_TOKEN = `${APP_NAME}.RefreshToken`\nexport const CHALLENGE = `${APP_NAME}.Challenge`\n\nexport function goToSpeckleAuthPage() {\n  var challenge =\n    Math.random()\n      .toString(36)\n      .substring(2, 15) +\n    Math.random()\n      .toString(36)\n      .substring(2, 15)\n  localStorage.setItem(CHALLENGE, challenge)\n  window.location = `${SERVER_URL}/authn/verify/${process.env.VUE_APP_SPECKLE_ID}/${challenge}`\n}\n\nexport function speckleLogOut() {\n  localStorage.removeItem(TOKEN)\n  localStorage.removeItem(REFRESH_TOKEN)\n}\n\nexport async function exchangeAccessCode(accessCode) {\n  var res = await fetch(`${SERVER_URL}/auth/token/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      accessCode: accessCode,\n      appId: process.env.VUE_APP_SPECKLE_ID,\n      appSecret: process.env.VUE_APP_SPECKLE_SECRET,\n      challenge: localStorage.getItem(CHALLENGE)\n    })\n  })\n  var data = await res.json()\n  if (data.token) {\n    localStorage.removeItem(CHALLENGE)\n    localStorage.setItem(TOKEN, data.token)\n    localStorage.setItem(REFRESH_TOKEN, data.refreshToken)\n  }\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Speckle Model Objects in C#\nDESCRIPTION: A static method to recursively flatten all objects in a Speckle model into a list. Useful for bulk operations or quick queries without navigating complex nested structures.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing Speckle.Core.Models;\n\npublic static class SpeckleUtils\n{\n    public static List<Base> Flatten(Base baseObject)\n    {\n        var flattened = new List<Base>();\n\n        void Traverse(Base obj)\n        {\n            if (obj == null) return;\n            flattened.Add(obj);\n\n            foreach (var prop in obj.GetDynamicMembers())\n            {\n                var value = obj[prop];\n\n                if (value is List<Base> list)\n                {\n                    foreach (var item in list)\n                        Traverse(item);\n                }\n                else if (value is Base nestedObj)\n                {\n                    Traverse(nestedObj);\n                }\n            }\n        }\n\n        Traverse(baseObject);\n        return flattened;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Object Properties in Speckle Viewer (TypeScript)\nDESCRIPTION: This code retrieves the object properties from the Speckle Viewer. These properties are necessary for color filtering operations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-example.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst properties: PropertyInfo[] = await viewer.getObjectProperties();\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Speckle Streams\nDESCRIPTION: Demonstrates how to create a new stream and retrieve it using the SpeckleClient API.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# create a new stream. this returns the stream id\nnew_stream_id = client.stream.create(name=\"a shiny new stream\")\n\n# use that stream id to get the stream from the server\nnew_stream = client.stream.get(id=new_stream_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Loader Constructor in TypeScript\nDESCRIPTION: Constructor for the Loader class that takes a resource identifier and optional resource data as parameters.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loader-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(resource: string, resourceData?: string | ArrayBuffer)\n```\n\n----------------------------------------\n\nTITLE: Performing Ray Intersection Tests in TypeScript\nDESCRIPTION: Methods for performing ray intersection tests against the BVH. These are optimized versions of three.js raycasting that leverage the BVH structure for improved performance.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nraycast(\n    ray: Ray,\n    materialOrSide: Side | Material | Material[] = FrontSide\n): Intersection<Object3D<Event>>[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nraycastFirst(\n    ray: Ray,\n    materialOrSide: Side | Material | Material[] = FrontSide\n): Intersection<Object3D<Event>>[]\n```\n\n----------------------------------------\n\nTITLE: Building RenderTree with GeometryConverter (TypeScript)\nDESCRIPTION: This snippet demonstrates how to build a RenderTree using a custom GeometryConverter. It creates an instance of the converter and calls the buildRenderTree method.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loaders.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst geometryConverter = new MyGeometryConverter();\nrenderTree.buildRenderTree(geometryConverter);\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes Using Generic Criteria\nDESCRIPTION: Example of searching nodes using custom criteria with the findAll method.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-data.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst nodes = viewer.getWorldTree().findAll((node: TreeNode) => {\n    if(<criteria>) return true\n})\n```\n\n----------------------------------------\n\nTITLE: Creating WelcomeView Component in Vue.js\nDESCRIPTION: This component displays a welcome message for non-authenticated users. It's a simple view encouraging users to log in to access their Speckle data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<template lang=\"html\">\n  <v-container\n    fill-height\n    fluid\n    class=\"home flex-column justify-center align-center primary--text\"\n  >\n    <h1>Welcome to the Speckle Demo App!</h1>\n    <h3>This app part of our developer guides</h3>\n    <p>Please log in to access you Speckle data.</p>\n  </v-container>\n</template>\n<script>\nexport default {\n  name: \"WelcomeView\"\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Types and Interface in TypeScript\nDESCRIPTION: Enum and interface definitions for asset types and asset configuration including texture and font assets.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nenum AssetType {\n  TEXTURE_8BPP = 'png', \n  TEXTURE_HDR = 'hdr',\n  TEXTURE_EXR = 'exr',\n  FONT_JSON = 'font-json'\n}\n\ninterface Asset {\n  id: string\n  src: string\n  type: AssetType\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Visualization with Metadata in Python\nDESCRIPTION: This example demonstrates how to use special metadata keys to enable gradient-based visualization in the model viewer. It shows how to apply gradient values to a list of objects for visual representation of data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-results.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrunCtx.attach_info_to_objects(\n    \"Gradient Visualization\",\n    all_object_ids,\n    \"Values applied to objects in list order\",\n    metadata={\"gradient\": True, \"gradientValues\": gradient_values}\n)\n```\n\n----------------------------------------\n\nTITLE: Simplified Base Class Definition in C#\nDESCRIPTION: A simplified definition of the Base class, showing its core properties including id (hash), applicationId, speckle_type discriminator, and totalChildrenCount.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Simplified class definition:\npublic class Base {\n\tpublic string id { get; set; } // this is the unique hash, generated from the serialized object\n    \tpublic string applicationId { get; set; } // a secondary (optional) identity value, for example the host application object id\n\tpublic string speckle_type { get; } // this is the discriminator comprised of assembly name and inheritance\n\tpublic long totalChildrenCount { get; } // this is the total number of detachable objects\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Selection Extension in TypeScript for Speckle Viewer\nDESCRIPTION: This code snippet shows the main implementation of a box selection extension for the Speckle Viewer. It includes the setup of the viewer, creation of the box selection tool, and handling of selection events.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/box-selection-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewerEvent, Color } from '@speckle/viewer';\nimport { Viewer } from '@speckle/viewer';\n\nconst viewer = new Viewer({\n  container: document.getElementById('app'),\n  showStats: true\n});\n\nviewer.on(ViewerEvent.LoadComplete, () => {\n  console.log('Loaded!');\n});\n\nviewer.loadObject(\"https://speckle.xyz/streams/3073b96e86/objects/e05a63c0c6e6f88594cc417b15cd5b77\");\n\nviewer.createSelectionHelper();\n\nviewer.on(ViewerEvent.WorldClick, () => {\n  viewer.clearSelection();\n});\n\nviewer.on(ViewerEvent.ObjectSelection, (args) => {\n  console.log(args);\n});\n\nconst boxSelectionTool = viewer.getExtension('BoxSelection');\nboxSelectionTool.enabled = true;\nboxSelectionTool.selectOnRelease = true;\nboxSelectionTool.fillColor = new Color(0, 0, 255, 0.1);\nboxSelectionTool.strokeColor = new Color(0, 0, 255, 1);\n\nboxSelectionTool.on('selection', (selection) => {\n  console.log('Box selection:', selection);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Object Collections with Base in C#\nDESCRIPTION: Shows how to define object collections using Base as a container for groups of elements, such as those from different layers in a source application.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar myCommit = new Base();\nmyCommit[\"RhinoLayer-A\"] = new List<Base>() { ... };\nmyCommit[\"RhinoLayer-B\"] = new List<Point>() { ... };\nmyCommit[\"RhinoLayer-A:RhinoLayer-C\"] = new List<String>() { ... };\n```\n\n----------------------------------------\n\nTITLE: C# Implementation of Project Analysis\nDESCRIPTION: C# version of the project analysis functionality, showing how to use similar element checking patterns in a statically typed language.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic void AnalyzeProject(Base baseObject)\n{\n    Func<Base, bool> isBeam = ElementChecks.IsType(\"Objects.BuiltElements.Beam\");\n    Func<Base, bool> isLarge = ElementChecks.HasProperty(\"volume\", 10.0);\n\n    foreach (var elem in baseObject.Query(o => isBeam(o) && isLarge(o)))\n    {\n        ElementActions.TagForReview(elem, \"Large beam needs review\");\n        var metrics = ElementActions.CalculateMetrics(elem);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Explosion Animation in TypeScript\nDESCRIPTION: Method that controls the explosion animation by updating object translations based on an interpolation time value. Objects move from their original positions (0) to maximum positions (1) determined by scene size.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/explode-extension-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetExplode(time: number): void\n```\n\n----------------------------------------\n\nTITLE: Accessing Speckle Properties in Unity\nDESCRIPTION: Code example showing how to read and write metadata using the SpeckleProperties component\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unity.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nSpeckleProperties props = myGameObject.GetComponent<SpeckleProperties>();\n\n// props.Data is a IDictionary<string, object>\n\n// you can check for a property like this:\nif(pros.Data.ContainsKey(\"area\")\n   && Data[\"area\"] is int area)\n{\n    Debug.Log(area);\n}\n\n//And Add a property like this\npros.Data.Add(\"area\", 250);\n```\n\n----------------------------------------\n\nTITLE: Object Management Methods in TypeScript\nDESCRIPTION: Methods for managing BatchObjects and render views including getObject, getObjects and renderViewFromIntersection.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetObject(rv: NodeRenderView): BatchObject\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetObjects(): BatchObject[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrenderViewFromIntersection(intersection: ExtendedIntersection): NodeRenderView\n```\n\n----------------------------------------\n\nTITLE: Filtering by Parameter Value Using JSON Query Variable\nDESCRIPTION: This JSON query variable filters objects by comparing a specific parameter's value against a numeric threshold. It demonstrates using the less-than operator to return only objects with parameter values below 5.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-graphql-api.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"myQuery\": [\n        {\n            \"field\":\"parameters[0].value\",\n            \"value\":5,\n            \"operator\":\"<\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resize Handler\nDESCRIPTION: Method called whenever the viewer is resized to handle layout updates.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/extension-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonResize()\n```\n\n----------------------------------------\n\nTITLE: Defining SelectionExtensionOptions Interface in TypeScript\nDESCRIPTION: Defines the interface for configuring visual selection appearance in the Speckle Viewer, including selection and hover material data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/selection-extension-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectionExtensionOptions {\n  selectionMaterialData: RenderMaterial & DisplayStyle & MaterialOptions;\n  hoverMaterialData?: RenderMaterial & DisplayStyle & MaterialOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Loader Class Definition (TypeScript)\nDESCRIPTION: This snippet defines the abstract Loader class with three methods: load, cancel, and dispose. These methods need to be implemented by concrete loader classes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loaders.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic abstract load(): Promise<boolean>\npublic abstract cancel()\npublic abstract dispose()\n```\n\n----------------------------------------\n\nTITLE: Subclassing Speckle Base Objects in Python\nDESCRIPTION: Shows how to create custom objects by subclassing the Base class, including setting typed attributes and overriding the speckle_type.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.objects import Base\nfrom specklepy.objects.geometry import Point\n\nclass Line(Base):\n    start: Point = None\n    end: Point = None\n\nclass AlternativeLine(Base, speckle_type=\"Line_Two\"):\n    \"\"\"\n    The `speckle_type` is automatically populated by the class name.\n    You can override this behaviour as demonstrated here.\n    \"\"\"\n    a: Point = None\n    b: Point = None\n\n# look, a new custom line!\nline = Line(end=Point(x=1, y=0, z=2))\n\n# adding dynamic attributes as normal\nline.blah = \"blah\"\nline[\"colour\"] = \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Managing Secret Inputs in Python\nDESCRIPTION: This snippet demonstrates how to create a secret input field in Python using Pydantic's SecretStr type, which will be securely stored by Automate and only passed as plain text within the AutomateContext at runtime.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/making-your-function.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom Pydantic import SecretStr\n\nclass FunctionInputs(AutomateBase):\n\n\t\tsecret_input: SecretStr = Field(\n\t\t\ttitle=\"Secret Input\",\n\t\t\tdescription=( \"Marking a field as readOnly will disable the UI input,\"\n\t\t\t\t\t\t\t\t\t\t\t\"which can be used to mock input UI for future revision \"\n\t\t\t\t\t\t\t\t\t\t\t\"or pass values specific to a function revision.\" ) \n\t\t)\n```\n\n----------------------------------------\n\nTITLE: Creating StreamSearch Component in Vue.js\nDESCRIPTION: This component implements a search functionality for Speckle streams. It uses v-autocomplete for the search input and displays search results with stream details. The component emits selected stream data to the parent component.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-autocomplete\n    v-model=\"selectedSearchResult\"\n    :items=\"streams.items\"\n    :search-input.sync=\"search\"\n    no-filter\n    counter=\"2\"\n    rounded\n    filled\n    dense\n    flat\n    hide-no-data\n    hide-details\n    placeholder=\"Streams Search\"\n    item-text=\"name\"\n    item-value=\"id\"\n    return-object\n    clearable\n    append-icon=\"\"\n    @update:search-input=\"debounceInput\"\n  >\n    <template #item=\"{ item }\">\n      <v-list-item-content>\n        <v-list-item-title>\n          <v-row class=\"pa-0 ma-0\">\n            {{ item.name }}\n            <v-spacer></v-spacer>\n            <span class=\"streamid\">{{ item.id }}</span>\n          </v-row>\n        </v-list-item-title>\n        <v-list-item-subtitle class=\"caption\">\n          Updated\n          <time-ago :datetime=\"item.updatedAt\"></time-ago>\n        </v-list-item-subtitle>\n      </v-list-item-content>\n    </template>\n  </v-autocomplete>\n</template>\n\n<script>\nimport { debounce } from \"debounce\"\nimport { searchStreams } from \"@/speckleUtils\"\nimport { TimeAgo } from 'vue2-timeago'\n\nexport default {\n  name: \"StreamSearch\",\n  data: () => ({\n    search: \"\",\n    streams: { items: [] },\n    selectedSearchResult: null\n  }),\n  components: { TimeAgo },\n  watch: {\n    selectedSearchResult(val) {\n      this.search = \"\"\n      this.streams.items = []\n      if (val) this.$emit(\"selected\", val)\n    }\n  },\n  methods: {\n    async fetchSearchResults(e) {\n      if (!e || e?.length < 3) return\n      var json = await searchStreams(e)\n      this.streams = json.data.streams\n    },\n    debounceInput: debounce(function(e) {\n      this.fetchSearchResults(e)\n    }, 300)\n  }\n}\n</script>\n\n<style scoped></style>\n```\n\n----------------------------------------\n\nTITLE: Loading OBJ Data from String or ArrayBuffer into Viewer\nDESCRIPTION: This snippet demonstrates how to load OBJ data into the viewer using the ObjLoader, but with the data provided as a string or ArrayBuffer instead of a URL. It creates a loader for the OBJ data and then loads the object into the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loading-example.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst objData:string | ArrayBuffer = '<your OBJ resource data>'\n/** Create a loader for the .obj data */\nconst loader = new ObjLoader(viewer.getWorldTree(), '<user defined id>', objData);\n/** Load the obj data */\nawait viewer.loadObject(loader, true);\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Sending to Speckle Stream in C#\nDESCRIPTION: Demonstrates a more detailed approach to sending data to a Speckle stream. It uses lower-level functions to provide more control over the sending process, including specifying the transport and creating a commit.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/dotnet.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Speckle.Core.Api;\nusing Speckle.Core.Models;\nusing Speckle.Core.Transports;\n\n\n\nvar streamId = \"streamId\";\nvar branchName = \"main\";\nvar client = new Client(account);\n\nvar transport = new ServerTransport(account, streamId);\n\nvar objectId = await Operations.Send(\n  data,\n  new List<ITransport> { transport },\n  useDefaultCache,\n  onProgressAction,\n  onErrorAction, disposeTransports: true);\n\nvar commitId = await client.CommitCreate(\n  new CommitCreateInput\n  {\n    streamId = sw.StreamId,\n    branchName = branchName,\n    objectId = objectId,\n    message = message,\n    sourceApplication = sourceApplication,\n    totalChildrenCount = totalChildrenCount,\n  });\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes by ID with Subtree Specification\nDESCRIPTION: Shows how to search for nodes in a specific subtree using both ID and subtreeId parameters.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-data.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst subtreeId = 1\nconst nodes = viewer.getWorldTree().findId('6ddd42ca007461a3a33375b193bdf9b0', subtreeId)\n```\n\n----------------------------------------\n\nTITLE: Data Export from Speckle Model in C# Automate Function\nDESCRIPTION: An asynchronous method to extract specific data from a Speckle model and generate a report. Useful for creating BOQs, compliance reports, or exporting data for external systems.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task ExportData(Base baseObject, AutomationContext automateContext)\n{\n    // Define data extraction rules\n    Dictionary<string, object> ExtractMetrics(Base elem)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"id\", elem.id },\n            { \"type\", elem.speckle_type },\n            { \"volume\", elem.GetProperty(\"volume\", 0) }\n        };\n    }\n\n    var data = baseObject.Query(o => o.speckle_type.Contains(\"BuiltElements\"))\n                         .Select(elem => ExtractMetrics(elem))\n                         .ToList();\n\n    var report = CreateReport(data);\n    await automateContext.StoreFileResult(\n        \"analysis.pdf\",\n        report,\n        \"application/pdf\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Speckle Server with Docker Compose\nDESCRIPTION: Command to build and start the Speckle Server components using docker-compose-speckle.yml. This starts the frontend, server, and various services required for a complete Speckle Server deployment.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-manualsetup.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd [PATH_TO_SPECKLE-SERVER_REPOSITORY]\ndocker compose -f docker-compose-speckle.yml up --build -d\n```\n\n----------------------------------------\n\nTITLE: Building BVH from Geometry Data in TypeScript\nDESCRIPTION: Static method to construct a new MeshBVH from raw geometry data. This allows creation of BVHs from custom geometry without using three.js meshes directly.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic buildBVH(\n    indices: number[],\n    position: Float32Array,\n    options: BVHOptions = DefaultBVHOptions,\n    transform?: Matrix4\n): MeshBVH\n```\n\n----------------------------------------\n\nTITLE: Measurement Options Interface Definition in TypeScript\nDESCRIPTION: Interface defining the configuration options for measurements, including visibility, type, vertex snapping, units and precision settings.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MeasurementOptions {\n  visible: boolean;\n  type?: MeasurementType;\n  vertexSnap?: boolean;\n  units?: string;\n  precision?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chunkable and Detachable Properties in Speckle Python\nDESCRIPTION: Illustrates how to set up chunkable and detachable properties when subclassing Base, including the use of properties and typed attributes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.objects import Base\nfrom typing import List\n\n# members that are chunked upon sending are stored in a dictionary\n# with the name as the key and the maximum chunk size as the value\nCHUNKABLE_PROPS = {\n    \"vertices\": 1000,\n    \"faces\": 100,\n    \"colors\": 100,\n    \"textureCoordinates\": 100,\n    \"test_bases\": 10,\n}\n\n# detachable members are just added to an internal set by name\nDETACHABLE = {\"detach_this\", \"origin\"}\n\n# you can pass a chunkables dict and a detachables as keyword arguments when writing your class\nclass FakeMesh(Base, chunkable=CHUNKABLE_PROPS, detachable=DETACHABLE):\n    vertices: List[float] = None\n    faces: List[int] = None\n    colors: List[int] = None\n    textureCoordinates: List[float] = None\n    test_bases: List[Base] = None\n    detach_this: Base = None\n    _origin: Point = None\n\n    # properties are also picked up and serialised as you'd expect\n    @property\n    def origin(self):\n        return self._origin\n\n    @origin.setter\n    def origin(self, value: Point):\n        self._origin = value\n```\n\n----------------------------------------\n\nTITLE: Setting Batch Material Method Definition\nDESCRIPTION: Method to set the default material for a batch.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetBatchMaterial(material: Material): void\n```\n\n----------------------------------------\n\nTITLE: Controlling Section Tool Programmatically in TypeScript\nDESCRIPTION: Demonstrates how to programmatically control the section tool by toggling it and setting a custom section box size based on the scene dimensions.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/more-extensions-example.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** Enable the section tool */\nsections.toggle();\n\n/** Programatically apply a section box */\nconst box = new Box3().copy(viewer.getRenderer().sceneBox);\nbox.max.z *= 0.6;\nsections.setBox(box);\n```\n\n----------------------------------------\n\nTITLE: Updating App.vue for Speckle Authentication in Vue.js\nDESCRIPTION: This snippet modifies the App.vue file to use the Vuex store for authentication status and display user information. It updates the isAuthenticated computed property and adds a welcome message with user and server details.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nisAuthenticated() {\n  return this.$store.getters.isAuthenticated\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div v-if=\"isAuthenticated\">\n  Welcome\n  <b>{{ $store.state.user.name }}</b>\n  ! You are connected to\n  <b>\n    {{ $store.state.serverInfo.company }}'s\n    <em>{{ $store.state.serverInfo.name }}</em>\n  </b>\n</div>\n\n<v-spacer></v-spacer>\n```\n\n----------------------------------------\n\nTITLE: Stream Commits Fetch Utility Function\nDESCRIPTION: Utility function that uses speckleFetch to execute the stream commits GraphQL query.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStreamCommits = (streamId, itemsPerPage, cursor) =>\n  speckleFetch(streamCommitsQuery(streamId, itemsPerPage, cursor))\n```\n\n----------------------------------------\n\nTITLE: Creating Login/Logout UI in Vue.js\nDESCRIPTION: Implements a Vue.js component with a login/logout button that interacts with the Vuex store for authentication. The component uses Vuetify for styling and conditionally renders based on authentication status.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template lang=\"html\">\n  <v-app>\n    <v-app-bar app color=\"primary\" dark>\n      <div class=\"d-flex align-center\">\n        <v-img\n          alt=\"Speckle Logo\"\n          class=\"shrink mr-2\"\n          contain\n          :src=\"require(`@/assets/img.png`)\"\n          transition=\"scale-transition\"\n          width=\"40\"\n          height=\"24\"\n        />\n        <h3>SPECKLE DEMO APP</h3>\n      </div>\n\n      <v-spacer></v-spacer>\n\n      <v-btn\n        outlined\n        v-if=\"!isAuthenticated\"\n        @click=\"$store.dispatch('redirectToAuth')\"\n      >\n        <span>Login with Speckle</span>\n      </v-btn>\n      <v-btn outlined v-else @click=\"$store.dispatch('logout')\">\n        Log out\n      </v-btn>\n    </v-app-bar>\n\n    <v-main>\n      <!-- <router-view /> -->\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  computed: {\n    isAuthenticated() {\n      return false\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Material Management Methods in TypeScript\nDESCRIPTION: Core methods for getting and setting materials on render views, including getBatchMaterial, getMaterial, and setMaterial with multiple overloads.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetBatchMaterial(rv: NodeRenderView): Material\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetMaterial(rv: NodeRenderView): Material\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetMaterial(rvs: NodeRenderView[], material: Material): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetMaterial(\n    rvs: NodeRenderView[],\n    material: RenderMaterial & DisplayStyle & MaterialOptions\n): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetMaterial(rvs: NodeRenderView[], material: FilterMaterial): void\n```\n\n----------------------------------------\n\nTITLE: Styling Dash App for Speckle Data Visualization with CSS\nDESCRIPTION: This CSS code provides styling for the Dash application, creating a responsive layout with a header and card-based design for displaying Speckle data visualizations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  font-family: \"Roboto\", sans-serif;\n  margin: 0;\n  background-color: #f0f0f0;\n}\n\n.header {\n  background-color: #0a2948;\n  height: 256px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.header-title {\n  color: #fafafa;\n  font-size: 48px;\n  font-weight: bold;\n  text-align: center;\n  font-family: \"Space Mono\";\n  margin: 0 auto;\n}\n\n.header-description {\n  color: #fafafa;\n  margin: 4px auto;\n  text-align: center;\n  max-width: 450px;\n}\n\n.container {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n  max-width: 1200;\n  padding-right: 10px;\n  padding-left: 10px;\n  margin-top: 32px;\n}\n\n.card {\n  display: flex;\n  margin: 1em;\n  box-shadow: 0 20px 40px -14px rgba(0, 0, 0, 0.25);\n  @media {\n    width: 48%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subtree Method\nDESCRIPTION: Adds a TreeNode as the root of a subtree with its own NodeMap for optimized searching.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddSubtree(node: TreeNode): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Commits Query in JavaScript\nDESCRIPTION: GraphQL query function to fetch stream commits with pagination support using cursor-based navigation. Accepts streamId, itemsPerPage, and cursor parameters.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport const streamCommitsQuery = (streamId, itemsPerPage, cursor) => `query {\n    stream(id: \"${streamId}\"){\n      commits(limit: ${itemsPerPage}, cursor: ${cursor ? '\"' + cursor + '\"' : null}) {\n        totalCount\n        cursor\n        items{\n          id\n          message\n          branchName\n          sourceApplication\n          referencedObject\n          authorName\n          createdAt\n        }\n      }\n    }\n  }`\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Application using CLI\nDESCRIPTION: Command to create a new Vue.js application using Vue CLI, which sets up the initial project structure and dependencies.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvue create speckle-demo-app\n```\n\n----------------------------------------\n\nTITLE: Pipeline Render Method\nDESCRIPTION: Main render loop implementation that manages the pipeline's rendering process.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nrender(): boolean\n```\n\n----------------------------------------\n\nTITLE: Getting RenderView Nodes for a Node in RenderTree (TypeScript)\nDESCRIPTION: Returns all TreeNodes that have a displayable NodeRenderView descending from the given node.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRenderViewNodesForNode(node: TreeNode): TreeNode[]\n```\n\n----------------------------------------\n\nTITLE: Using StreamWrapper for URL Parsing\nDESCRIPTION: Demonstrates the StreamWrapper helper class for parsing Speckle URLs and getting authenticated clients and transports.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.api.wrapper import StreamWrapper\n\n# provide any stream, branch, commit, object, or globals url\nwrapper = StreamWrapper(\"https://app.speckle.systems/streams/3073b96e86/commits/604bea8cc6\")\n\n# get an authenticated SpeckleClient if you have a local account for the server\nclient = wrapper.get_client()\n\n# get an authenticated ServerTransport if you have a local account for the server\ntransport = wrapper.get_transport()\n```\n\n----------------------------------------\n\nTITLE: Defining IntersectionQueryResult Interface in TypeScript\nDESCRIPTION: Interface for the results of intersection queries, containing an array of intersected objects with their GUIDs, optional object data, and intersection points.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/queries-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IntersectionQueryResult {\n  objects: Array<{\n    guid: string\n    object?: Record<string, unknown>\n    point: { x: number; y: number; z: number }\n  }> | null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Late Update Method\nDESCRIPTION: Update method called after the viewer's main update. Takes optional deltaTime parameter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/extension-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonLateUpdate(deltaTime?: number)\n```\n\n----------------------------------------\n\nTITLE: Creating New Model Version in C# for Speckle Automate\nDESCRIPTION: This C# code snippet demonstrates how to create a new model version in Speckle Automate. It includes a method to create the version and another to link the source and target models.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-artefacts.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar newVersion = await CreateNewVersion(\n                           automationContext,\n                           versionCollection,\n                           targetModelName,\n                           revitCategory,\n                           objects.Count\n                       );\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait LinkSourceAndTargetModels(automationContext, targetModelName, newVersion);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static async Task LinkSourceAndTargetModels(\n     AutomationContext context,\n     string targetModelName,\n     string newVersion\n )\n {\n     var targetModelId = await FindTargetModelId(context, targetModelName);\n\n     if (!string.IsNullOrEmpty(targetModelId))\n     {\n         var modelVersionIdentifier = $\"{targetModelId}@{newVersion}\";\n         context.SetContextView([modelVersionIdentifier], false);\n     }\n }\n \n private static async Task<string> FindTargetModelId(\n     AutomationContext context,\n     string targetModelName\n )\n {\n     var project = await context.SpeckleClient.Project.GetWithModels(\n         projectId: context.AutomationRunData.ProjectId,\n         modelsLimit: 1,\n         modelsFilter: new ProjectModelsFilter(\n             search: targetModelName,\n             contributors: null,\n             sourceApps: null,\n             ids: null,\n             excludeIds: null,\n             onlyWithVersions: false\n         )\n     );\n\n     return project.models?.items.FirstOrDefault()?.id ?? string.Empty;\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Building Method in TypeScript\nDESCRIPTION: Method implementation for constructing a renderable batch by building geometry and setting up render objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuildBatch();\n```\n\n----------------------------------------\n\nTITLE: Defining ViewerParams Interface in TypeScript\nDESCRIPTION: Interface defining viewer initialization parameters including stats display, environment source, and verbosity.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ViewerParams {\n  showStats: boolean;\n  environmentSrc: Asset;\n  verbose: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Spatial Data in TypeScript\nDESCRIPTION: Methods for transforming spatial data between world space and the acceleration structure's local space. These are used internally by other methods to ensure correct coordinate transformations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntransformInput<T extends Vector3 | Ray | Box3>(input: T): T\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntransformOutput<T extends Vector3 | Ray | Box3>(output: T): T\n```\n\n----------------------------------------\n\nTITLE: C# Secure Input Implementation\nDESCRIPTION: Demonstrates secure input field implementation in C# using the Secret attribute.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-inputs.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FunctionInputs\n{\n    [Secret]  // Marks this as sensitive data\n    [DisplayName(\"API Key\")]\n    public string ApiKey { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Speckle Type from Node Data\nDESCRIPTION: Abstract method that determines the SpeckleType based on provided NodeData. Returns an opinionated SpeckleType classification for the node.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/geometry-converter-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract getSpeckleType(node: NodeData): SpeckleType\n```\n\n----------------------------------------\n\nTITLE: Using Flattened Speckle Model in Python\nDESCRIPTION: Example usage of the flatten function to process all objects in a Speckle model.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-data.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nall_objects = flatten(my_speckle_model)\nprint(f\"Flattened model contains {len(all_objects)} elements.\")\n```\n\n----------------------------------------\n\nTITLE: Starting Speckle Server Dependencies with Docker Compose\nDESCRIPTION: Command to start PostgreSQL, Redis, and MinIO dependencies using docker-compose-deps.yml. These containers provide the database, caching, and storage services required by Speckle Server.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-manualsetup.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd [PATH_TO_SPECKLE-SERVER_REPOSITORY]\ndocker compose -f docker-compose-deps.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Vuex Store Implementation for Stream Management\nDESCRIPTION: Complete Vuex store implementation with state management for user authentication, stream selection, and commit pagination. Includes mutations and actions for handling stream data and cursors.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nimport {\n  APP_NAME,\n  exchangeAccessCode,\n  getStreamCommits,\n  getUserData,\n  goToSpeckleAuthPage,\n  speckleLogOut\n} from \"@/speckleUtils\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    user: null,\n    serverInfo: null,\n    currentStream: null,\n    latestCommits: null,\n    previousCursors: [null],\n    tableOptions: null\n  },\n  getters: {\n    isAuthenticated: state => state.user != null\n  },\n  mutations: {\n    setUser(state, user) {\n      state.user = user\n    },\n    setServerInfo(state, info) {\n      state.serverInfo = info\n    },\n    setCurrentStream(state, stream) {\n      state.currentStream = stream\n    },\n    setCommits(state, commits) {\n      state.latestCommits = commits\n    },\n    setTableOptions(state, options) {\n      state.tableOptions = options\n    },\n    resetPrevCursors(state) {\n      state.previousCursors = [null]\n    },\n    addCursorToPreviousList(state, cursor) {\n      state.previousCursors.push(cursor)\n    }\n  },\n  actions: {\n    logout(context) {\n      context.commit(\"setUser\", null)\n      context.commit(\"setServerInfo\", null)\n      context.commit(\"setCurrentStream\", null)\n      context.commit(\"setCommits\", null)\n      context.commit(\"setTableOptions\", null)\n      context.commit(\"resetPrevCursors\")\n      speckleLogOut()\n    },\n    exchangeAccessCode(context, accessCode) {\n      return exchangeAccessCode(accessCode)\n    },\n    async getUser(context) {\n      try {\n        var json = await getUserData()\n        var data = json.data\n        context.commit(\"setUser\", data.user)\n        context.commit(\"setServerInfo\", data.serverInfo)\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    redirectToAuth() {\n      goToSpeckleAuthPage()\n    },\n    async handleStreamSelection(context, stream) {\n      context.commit(\"setCurrentStream\", stream)\n      context.commit(\"setTableOptions\", { itemsPerPage: 5 })\n      context.commit(\"resetPrevCursors\")\n      var json = await getStreamCommits(stream.id, 5, null)\n      context.commit(\"setCommits\", json.data.stream.commits)\n    },\n    async getCommits(context, cursor) {\n      var json = await getStreamCommits(\n        context.state.currentStream.id,\n        5,\n        cursor\n      )\n      context.commit(\"setCommits\", json.data.stream.commits)\n    },\n    clearStreamSelection(context) {\n      context.commit(\"setCurrentStream\", null)\n      context.commit(\"setCommits\", null)\n      context.commit(\"setTableOptions\", null)\n      context.commit(\"resetPrevCursors\", [null])\n    }\n  },\n  modules: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Set User Object Colors Method\nDESCRIPTION: Method to apply custom colors to groups of objects. More performant than applying multiple materials.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetUserObjectColors(\n    groups: { objectIds: string[]; color: string }[]\n): FilteringState\n```\n\n----------------------------------------\n\nTITLE: Defining Material Classes in Python\nDESCRIPTION: Creates material classes by subclassing Base with density and embodied carbon properties. Includes a mapping dictionary to associate building elements with materials.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Concrete(Base):\n    density: str = 2400\n    embodied_carbon = 0.159\n\n\nclass Glass(Base):\n    density: str = 2500\n    embodied_carbon = 0.85\n\n\nclass Steel(Base):\n    density: str = 7800\n    embodied_carbon = 1.37\n\n\nMATERIALS_MAPPING = {\n    \"@floorSlab\": \"Concrete\",\n    \"@banister\": \"Glass\",\n    \"@facade\": \"Glass\",\n    \"@columns\": \"Steel\",\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Filters Method\nDESCRIPTION: Method to remove all active filters from the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nresetFilters(): FilteringState\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Stream Menu Items in C#\nDESCRIPTION: This snippet demonstrates how to register custom menu items for streams in a Speckle connector. It shows how to create a list of menu items with nested submenus and associate actions with them.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/connectors-dev.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic override List<MenuItem> GetCustomStreamMenuItems()\n{\n  var menuItems = new List<MenuItem>\n  {\n    new MenuItem { Header=\"Test link\", Icon=\"Home\", Action =OpenLink},\n    new MenuItem { Header=\"More items\", Icon=\"List\", Items = new List<MenuItem>\n    {\n      new MenuItem { Header=\"Sub item 1\", Icon=\"Account\" },\n      new MenuItem { Header=\"Sub item 2\", Icon=\"Clock\" },\n    }\n    },\n  };\n  return menuItems;\n}\n\npublic void OpenLink(StreamState state)\n{\n  //to open urls in .net core you must set UseShellExecute = true\n  Process.Start(new ProcessStartInfo(state.ServerUrl) { UseShellExecute = true });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Node Ancestors Method\nDESCRIPTION: Returns an array of ancestor nodes in hierarchical order for a given node.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetAncestors(node: TreeNode): TreeNode[]\n```\n\n----------------------------------------\n\nTITLE: Updating Visual Diff Display in TypeScript\nDESCRIPTION: Method to update the current visual diff display with optional time interpolation and mode parameters.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/diff-extension-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nupdateVisualDiff(time?: number, mode?: VisualDiffMode): void\n```\n\n----------------------------------------\n\nTITLE: Default Measurements Options Constants in TypeScript\nDESCRIPTION: Default configuration options for the measurements tool including visibility, type, vertex snapping, units and precision settings.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst DefaultMeasurementsOptions = {\n  visible: true,\n  type: MeasurementType.POINTTOPOINT,\n  vertexSnap: true,\n  units: \"m\",\n  precision: 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Controller to Speckle Viewer\nDESCRIPTION: Adds the default camera controller extension to enable camera manipulation within the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/basic-example.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/** Add the stock camera controller extension */\nviewer.createExtension(CameraController);\n```\n\n----------------------------------------\n\nTITLE: Building RenderTree with GeometryConverter in TypeScript\nDESCRIPTION: Builds the render tree using the provided GeometryConverter. This process constructs each node's NodeRenderView, prepares geometry and materials, and executes transformations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRenderTree(geometryConverter: GeometryConverter): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Camera Event Subscription - TypeScript\nDESCRIPTION: Method for subscribing to camera events with typed event payload handling.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\non<T extends CameraEvent>(\n  eventType: T,\n  listener: (arg: CameraEventPayload[T]) => void\n): void\n```\n\n----------------------------------------\n\nTITLE: GeometryData Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of GeometryData, which contains raw geometry information including attributes, transformations, and metadata.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GeometryData {\n  attributes: Partial<Record<GeometryAttributes, number[]>>;\n  bakeTransform: Matrix4;\n  transform: Matrix4;\n  metaData?: Record<string, any>;\n  instanced?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SpecklePy using pip\nDESCRIPTION: This snippet shows how to install the Speckle Python SDK using pip. It's a simple command that can be run in the console to install the 'specklepy' package.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/python.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install specklepy\n```\n\n----------------------------------------\n\nTITLE: Defining Classes with Detachable Properties in C#\nDESCRIPTION: Demonstrates how to use the [DetachProperty] attribute to create detachable properties in C# classes for Speckle. This allows certain properties to be stored separately and referenced, improving efficiency and flexibility in data structuring.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/decomposition.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Building : Base {\n  [DetachProperty] // this attribute tells Speckle to store the value of the Site separately.\n  public Site Site { get; set; }\n  public List<Level> Levels { get; set; }\n  public Owner { get; set; }\n}\n\npublic class Level : Base {\n  public double height { get; set; } = 3.2;\n  public double baseElevation {get; set; } = 0;\n\n  [DetachProperty]\n  public List<Base> Elements { get; set; } // The actual walls, floors, columns, etc.\n}\n\n// Define a site globally\nvar mySite = new Site();\n\n// Reference the same site in both buildings.\nbuildingA.Site = mySite;\nbuildingB.Site = mySite;\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Geometry Data\nDESCRIPTION: Abstract method that converts NodeData into viewer-specific GeometryData format.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/geometry-converter-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nabstract convertNodeToGeometryData(node: NodeData): GeometryData\n```\n\n----------------------------------------\n\nTITLE: Setting IndirectIBL in SpeckleRenderer\nDESCRIPTION: Setter to set the texture for indirect image based lighting. Works as per existing three.js Scene documentation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nset indirectIBL(texture: Texture)\n```\n\n----------------------------------------\n\nTITLE: Embedding 3D Viewer in HTML\nDESCRIPTION: Example of embedding the Speckle 3D viewer using an iframe element. The viewer allows visualization of geometric data directly in the browser.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/web.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://app.speckle.systems/projects/a632e7a784/models/1b47b19207#embed=%7B%22isEnabled%22%3Atrue%7D\" width=600 height=400></iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining NodeData Model Structure in TypeScript\nDESCRIPTION: Detailed structure of the NodeData model that contains raw data, children nodes, and rendering properties for the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-data.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    raw: { [prop: string]: any }\n    children: TreeNode[]\n    atomic: boolean\n    subtreeId?: number\n    renderView?: NodeRenderView\n    instanced?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Child Node Method\nDESCRIPTION: Adds a TreeNode as a child of the specified parent node.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddNode(node: TreeNode, parent: TreeNode): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer Control in TypeScript Rendering Pass\nDESCRIPTION: Public method for enabling or disabling specific object layers in a rendering pass. Takes an ObjectLayers enum value and a boolean flag to control layer visibility.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/base-g-pass-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenableLayer(layer: ObjectLayers, value: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Defining PointQuery Interface in TypeScript\nDESCRIPTION: Interface for point-based operations like projection and unprojection. Extends the base Query interface and specifies the point coordinates and operation type.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/queries-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PointQuery extends Query {\n  point: { x: number; y: number; z?: number; w?: number }\n  operation: 'Project' | 'Unproject'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Converter Class in C++\nDESCRIPTION: Example of defining a custom converter class in C++ by implementing the ISpeckleConverter interface. This class is responsible for converting Speckle objects to native Unreal Engine objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nUCLASS(BlueprintType, Blueprintable)\nclass SPECKLEUNREAL_API UMyConverter : public UObject, public ISpeckleConverter\n{\n\tGENERATED_BODY()\n\npublic:\n\tvirtual UObject* ConvertToNative_Implementation(const UBase* SpeckleBase, UWorld*, TScriptInterface<ISpeckleConverter>&) override;\n\t\n\tvirtual bool CanConvertToNative_Implementation(TSubclassOf<UBase> BaseType) override;\n\n}\n```\n\n----------------------------------------\n\nTITLE: BIM Parameter Data Structure Example\nDESCRIPTION: JSON representation showing how BIM parameters and data are stored in the Speckle object model for Revit elements like rooms. Includes both type and instance parameters nested under the parameters property.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/revit.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parameters\": {\n    \"name\": \"Room Name\",\n    \"area\": 100,\n    \"number\": \"101\",\n    \"geometry\": {...},\n    \"type_parameters\": {...},\n    \"instance_parameters\": {...}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Measurement Property in TypeScript\nDESCRIPTION: Getter method to retrieve the currently ongoing measurement. Returns null if no measurement is active.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget activeMeasurement(): Measurement\n```\n\n----------------------------------------\n\nTITLE: Computing Node Transform in RenderTree (TypeScript)\nDESCRIPTION: Computes the final world space transformation for a given TreeNode. Note that for non-instanced nodes, this returns the identity transformation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ncomputeTransform(node: TreeNode): Matrix4\n```\n\n----------------------------------------\n\nTITLE: Accessing the Axis-Aligned Bounding Box in TypeScript\nDESCRIPTION: Retrieves the axis-aligned bounding box of the render view's geometry. Note that this does not account for user or instance transformations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget aabb(): Box3\n```\n\n----------------------------------------\n\nTITLE: Creating Viewer Extension\nDESCRIPTION: Generic method for creating and registering a new extension of specified type.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateExtension<T extends Extension>(type: new () => T): T\n```\n\n----------------------------------------\n\nTITLE: Hiding Objects in Speckle Viewer (TypeScript)\nDESCRIPTION: This code demonstrates how to hide specific objects (walls in this case) in the Speckle Viewer. It first finds all wall nodes in the world tree, then uses the FilteringExtension to hide these objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-example.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallNodes = viewer.getWorldTree().findAll((node: TreeNode) => {\n  if (!node.model.raw.speckle_type) return;\n  return node.model.raw.speckle_type.includes(\"RevitWall\");\n});\n\nconst filteringState = filtering.hideObjects(\n  wallNodes.map((node: TreeNode) => node.model.id)\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Color to Objects in Speckle Viewer\nDESCRIPTION: JavaScript example showing how to apply a gradient color to objects in the Speckle Viewer based on a numeric property ('baseLine.start.x' in this case).\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/js-old.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nv.applyFilter({colorBy: { property: 'baseLine.start.x', type: 'gradient', minValue: -7200, maxValue: 33000, 'gradientColors': ['white', 'CornflowerBlue', 'BlueViolet'] } } )\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Node Structure in TypeScript\nDESCRIPTION: Basic structure of a node in the WorldTree hierarchy, containing model data, children array, and parent reference.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    model: NodeData\n    children: Array<TreeNode>\n    parent: TreeNode\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Renderable Nodes by Type in RenderTree (TypeScript)\nDESCRIPTION: Retrieves all renderable nodes of the specified SpeckleTypes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRenderableNodes(...types: SpeckleType[]): TreeNode[]\n```\n\n----------------------------------------\n\nTITLE: Finding Node by ID Method\nDESCRIPTION: Finds nodes by ID with optional subtree specification for optimized searching.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfindId(id: string, subtreeId?: number): TreeNode[]\n```\n\n----------------------------------------\n\nTITLE: Setting Batch Data for NodeRenderView in TypeScript\nDESCRIPTION: Sets the batch-related data for the render view, including batch ID, start index, count, and optional vertex start and end indices.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetBatchData(\n    id: string,\n    start: number,\n    count: number,\n    vertStart?: number,\n    vertEnd?: number\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Closest Point on BVH in TypeScript\nDESCRIPTION: Implements the closestPointToPoint method, which returns the closest point on the BVH to the provided point in space. It takes a Vector3 as input and returns a HitPointInfo object or null.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclosestPointToPoint(point: Vector3): HitPointInfo | null\n```\n\n----------------------------------------\n\nTITLE: Installing Unity Package via Git URL\nDESCRIPTION: Command to install the Speckle Unity connector package through the Unity Package Manager\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unity.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/specklesystems/speckle-unity.git?path=/Packages/systems.speckle.speckle-unity\n```\n\n----------------------------------------\n\nTITLE: Dynamic Property Detachment in C# for Speckle\nDESCRIPTION: Illustrates how to dynamically add detachable properties in Speckle using C#. By prepending property names with '@', these properties are stored separately and can be referenced by multiple objects, allowing for flexible data structuring.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/decomposition.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// We're grossly simplifying in this example. Here are our two building levels:\nvar level_1, level_2;\n\n// The philosophical slab instance. Does it belong to level 1 or level 2?\nvar slab_between_1_and_2 = new Slab();\n\n// Well, it belongs to both! Notice the \"@\" character at the beginning of\n// the dynamic property assignment - it's the Speckle convention for \"detaching\"\n// dynamically added properties.\nlevel_1[\"@topSlab\"] = slab_between_1_and_2;\nlevel_2[\"@bottomSlab\"] = slab_between_1_and_2;\n```\n\n----------------------------------------\n\nTITLE: Constructing a NodeRenderView in TypeScript\nDESCRIPTION: Creates a new NodeRenderView instance with the given NodeRenderData.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: NodeRenderData)\n```\n\n----------------------------------------\n\nTITLE: LoaderEventPayload Interface in TypeScript\nDESCRIPTION: Interface defining the payload types for different loader events, mapping event types to their corresponding data structures.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loader-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LoaderEventPayload {\n  [LoaderEvent.LoadProgress]: { progress: number; id: string }\n  [LoaderEvent.LoadCancelled]: string\n  [LoaderEvent.LoadWarning]: { message: string }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Coloring Objects in Speckle Viewer\nDESCRIPTION: JavaScript example demonstrating how to apply filters and colors to objects in the Speckle Viewer. This snippet filters and colors levels by name, showing filtered-out objects with low opacity.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/js-old.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nv.applyFilter({filterBy: {'level.name': ['3FL', '4FL', '7FL']}, colorBy: { property: 'level.name', type: 'category', values: {'3FL': '#F0FFFF', '4FL': '#6495ED', '7FL': '#7B68EE'} }, ghostOthers: true } )\n```\n\n----------------------------------------\n\nTITLE: Getting Camera Aspect Ratio - TypeScript\nDESCRIPTION: Accessor method to get the current display aspect ratio of the camera.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget aspect(): number\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Block Object\nDESCRIPTION: Shows how to create a custom Block class inheriting from Base with geometric properties and detachable attributes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom specklepy.objects import Base\nfrom specklepy.objects.geometry import Point\n\nclass Block(Base):\n    length: float\n    width: float\n    height: float\n    origin: Point = None\n\n    def __init__(self, length=1.0, width=1.0, height=1.0, origin=Point(), **kwargs) -> None:\n        super().__init__(**kwargs)\n        # mark the origin as a detachable attribute\n        self.add_detachable_attrs({\"origin\"})\n\n        self.length = length\n        self.width = width\n        self.height = height\n        self.origin = origin\n```\n\n----------------------------------------\n\nTITLE: NodeRenderData Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of NodeRenderData, which represents the core data for renderable objects in the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NodeRenderData {\n  id: string;\n  subtreeId: number;\n  speckleType: SpeckleType;\n  geometry: GeometryData;\n  renderMaterial: RenderMaterial;\n  displayStyle: DisplayStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Lighting Configuration Methods in TypeScript\nDESCRIPTION: Methods for configuring lighting including sun light and shadow catching functionality.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetSunLightConfiguration(config: SunLightConfiguration): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdateShadowCatcher(force?: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Accessing RenderTree ID in TypeScript\nDESCRIPTION: Gets the id of the render tree's root node.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget id(): string\n```\n\n----------------------------------------\n\nTITLE: Getting RenderTree Instance in Speckle Viewer\nDESCRIPTION: Demonstrates how to obtain a RenderTree instance for the entire world tree in the Speckle Viewer. The RenderTree provides access to rendering-related functionality.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-rendering.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst renderTree = worldTree.getRenderTree();\n```\n\n----------------------------------------\n\nTITLE: Transforming BatchObject with TRS in TypeScript\nDESCRIPTION: Shows how to transform a BatchObject using translation, rotation, scale, and pivot values. This method allows for complex transformations of the object.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-object-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic transformTRS(\n    translation: VectorLike,\n    euler?: VectorLike,\n    scale?: VectorLike,\n    pivot?: VectorLike\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Materials Data to Speckle Objects\nDESCRIPTION: Function to iterate through building elements and add appropriate material properties as detached attributes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_materials_data(level: Base) -> Base:\n    # first, get all the attribute names\n    names = level.get_member_names()\n    # then iterate through them to check if they exist in our mapping\n    for name in names:\n        if name not in MATERIALS_MAPPING.keys():\n            break\n        # if they do, use this class method to get the class and init it\n        material = Base.get_registered_type(MATERIALS_MAPPING[name])()\n        # now we can add a `@material` attribute dynamically to each object.\n        # note that we're making it detachable with the `@`\n        prop = level[name]\n        if isinstance(prop, Base):\n            prop[\"@material\"] = material\n        elif isinstance(prop, list):\n            for item in prop:\n                item[\"@material\"] = material\n    return level\n```\n\n----------------------------------------\n\nTITLE: Configuring Speckle Ingress Service with Traefik Labels in Docker Compose\nDESCRIPTION: This YAML snippet shows how to configure the Speckle ingress service with Traefik labels for HTTPS routing. It includes environment variables and labels for Traefik integration.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-manualsetup.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspeckle-ingress:\n  image: speckle/speckle-docker-compose-ingress:2\n  restart: always\n  ports: [] #TODO remove all exposed ports\n  environment:\n    FILE_SIZE_LIMIT_MB: \"100\"\n    NGINX_ENVSUBST_OUTPUT_DIR: \"/etc/nginx\"\n  #TODO add these labels\n  labels:\n    - \"traefik.enable=true\"\n    #TODO: replace `example.com` with your domain. This should just be the domain, and do not include the protocol (http/https).\n    - \"traefik.http.routers.speckle-ingress.rule=Host(`example.com`)\"\n    - \"traefik.http.routers.speckle-ingress.entrypoints=websecure\"\n    - \"traefik.http.routers.speckle-ingress.tls.certresolver=myresolver\"\n    - \"traefik.http.services.speckle-ingress.loadbalancer.server.port=8080\"\n```\n\n----------------------------------------\n\nTITLE: Managing Secret Inputs in C#\nDESCRIPTION: This snippet shows how to mark an input field as secret in C#, which will cause the Automate UI to obfuscate the input and store it securely as encrypted data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/making-your-function.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstruct FunctionInputs\n{\n\t[Secret]\n\tpublic string SecretInput; // Mark a field as secret for passwords and 3rd party tokens\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Controller Options - TypeScript\nDESCRIPTION: Accessor methods to get or set the current camera controller options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget options(): CameraControllerOptions\nset options(value: CameraControllerOptions)\n```\n\n----------------------------------------\n\nTITLE: DiffResult Interface Definition in TypeScript\nDESCRIPTION: Interface defining the structure of diff comparison results, containing arrays for unchanged, added, removed, and modified nodes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/diff-extension-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DiffResult {\n  unchanged: Array<TreeNode>;\n  added: Array<TreeNode>;\n  removed: Array<TreeNode>;\n  modified: Array<Array<TreeNode>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Properties in Markdown\nDESCRIPTION: Lists the three main properties of a Collection object in Speckle: name, collectionType, and elements. These properties allow for flexible representation of hierarchical structures in 3D models.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n> `name` - Any (non-empty) human-readable `string` name, one not necessarily unique.\n>\n> `collectionType` - Any `string` value describing the type of collection, used for convenience, and specific interop.\n>\n> `elements` - A `List<Base>` representing child objects, may include nested `Collection` objects.\n```\n\n----------------------------------------\n\nTITLE: Creating Dash App Layout for Speckle Data Visualization in Python\nDESCRIPTION: This code sets up a Dash application layout to display multiple Plotly figures in a responsive web interface, including 3D scatter plots and charts for building data visualization.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom demo_specklepy.speckle_data import get_figures\n\nexternal_stylesheets = [\n    {\n        \"href\": \"https://fonts.googleapis.com/css2?\"\n        \"family=Roboto:wght@400;700&display=swap\"\n        \"family=Space+Mono:wght@400;700&display=swap\",\n        \"rel\": \"stylesheet\",\n    },\n]\n\napp = dash.Dash(__name__, external_stylesheets=external_stylesheets)\napp.title = \"speckle-py demo\"\n\n# wrapped the figure plotting code into a function to return the `figures` dict here\nfigures = get_figures()\n\napp.layout = html.Div(\n    children=[\n        html.Div(\n            children=[\n                html.H1(children=\"speckle-py example\", className=\"header-title\"),\n                html.P(\n                    children=\"\"\"\n                    Speckle is the open source data platform for AEC.\n                    We free your data from proprietary file formats so you can own\n                    and access your data wherever you need it - including Python!\n                    \"\"\",\n                    className=\"header-description\",\n                ),\n            ],\n            className=\"header\",\n        ),\n        html.Div(\n            children=[\n                html.Div(\n                    children=[\n                        dcc.Graph(id=\"example-3d-scatter\", figure=figures[\"vertices\"])\n                    ],\n                    className=\"card\",\n                ),\n                html.Div(\n                    children=[\n                        dcc.Graph(id=\"volume-pie-chart\", figure=figures[\"volumes\"])\n                    ],\n                    className=\"card\",\n                ),\n                html.Div(\n                    children=[\n                        dcc.Graph(id=\"carbon-bar-graph\", figure=figures[\"carbon bar\"])\n                    ],\n                    className=\"card\",\n                ),\n                html.Div(\n                    children=[\n                        dcc.Graph(id=\"carbon-pie-chart\", figure=figures[\"carbon pie\"])\n                    ],\n                    className=\"card\",\n                ),\n            ],\n            className=\"wrapper\",\n        ),\n    ],\n)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Getting Root Node Accessor\nDESCRIPTION: Accessor that returns the root TreeNode of the tree.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget root(): TreeNode\n```\n\n----------------------------------------\n\nTITLE: Cancelling RenderTree in SpeckleRenderer\nDESCRIPTION: Method to cancel ongoing render tree adding operations. Effective cancellation happens as soon as the current running generator step yields.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncancelRenderTree(subtreeId: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining Subtree ID Property in TypeScript\nDESCRIPTION: Property definition for the identifier of the subtree containing the batch.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsubtreeId: number;\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes by ID in Speckle Viewer\nDESCRIPTION: Demonstrates how to search for nodes using their ID in the WorldTree structure.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-data.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst nodes = viewer.getWorldTree().findId('6ddd42ca007461a3a33375b193bdf9b0')\n```\n\n----------------------------------------\n\nTITLE: Stream URL Formats in Dynamo\nDESCRIPTION: Examples of different URL formats used to identify Speckle Streams, including main branch, specific branch, commit, and object URLs.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/dynamo.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://app.speckle.systems/streams/3073b96e86\nhttps://app.speckle.systems/streams/3073b96e86/branches/dev\nhttps://app.speckle.systems/streams/3073b96e86/commits/604bea8cc6\nhttps://app.speckle.systems/streams/3073b96e86/objects/df7b8bafccefa791d82939dd36541189\n```\n\n----------------------------------------\n\nTITLE: Detaching Nested Base Objects in Python\nDESCRIPTION: Demonstrates how to detach a nested Base object when sending by prepending the attribute name with '@'.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-examples.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbase_obj[\"@nested\"] = detached_base\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Mesh Intersection Interface in TypeScript\nDESCRIPTION: Interface extending MeshIntersection type with specific Speckle mesh object types and batch object property.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/intersections-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExtendedMeshIntersection extends MeshIntersection {\n  batchObject: BatchObject\n  object: SpeckleMesh | SpeckleInstancedMesh\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Implementation in ProgressiveGPass\nDESCRIPTION: Base class render implementation that handles progressive rendering across multiple frames. Returns true while frameIndex is less than accumulationFrames, false otherwise.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/progressive-g-pass-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrender(\n    renderer: WebGLRenderer,\n    camera?: PerspectiveCamera | OrthographicCamera | null,\n    scene?: Scene\n  ): boolean\n```\n\n----------------------------------------\n\nTITLE: Orthographic Camera Enable - TypeScript\nDESCRIPTION: Method to enable the orthographic camera projection.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetOrthoCameraOn(): void\n```\n\n----------------------------------------\n\nTITLE: Remove User Object Colors Method\nDESCRIPTION: Method to remove any user-defined color filters from the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveUserObjectColors(): FilteringState\n```\n\n----------------------------------------\n\nTITLE: Creating Pie and Bar Charts with Plotly Express in Python\nDESCRIPTION: This code snippet generates pie and bar charts using Plotly Express to visualize volumes and embodied carbon of building elements.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# take the first level from our levels list and construct a data frame\ndf_carbon = construct_carbon_df(levels[0])\n\n# let's add them all to a dict to keep the together\nfigures = {}\n\nfigures[\"volumes\"] = px.pie(\n    df_carbon,\n    values=\"volume\",\n    names=\"element\",\n    color=\"element\",\n    title=\"Volumes of Elements Per Floor (m3)\",\n)\n\nfigures[\"carbon bar\"] = px.bar(\n    df_carbon,\n    x=\"element\",\n    y=\"embodied carbon\",\n    color=\"element\",\n    title=\"Embodied Carbon Per Floor (kgC02)\",\n)\n\nfigures[\"carbon pie\"] = px.pie(\n    df_carbon,\n    values=\"embodied carbon\",\n    names=\"element\",\n    color=\"element\",\n    title=\"Embodied Carbon Per Floor (kgC02)\",\n)\n```\n\n----------------------------------------\n\nTITLE: Un-Isolate Objects Method\nDESCRIPTION: Method to remove isolation from specified objects with options for descendant inclusion and ghosting.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nunIsolateObjects(\n    objectIds: string[],\n    stateKey: string = null,\n    includeDescendants = true,\n    ghost = true\n  ): FilteringState\n```\n\n----------------------------------------\n\nTITLE: SmoothOrbitControlsOptions Interface Definition (TypeScript)\nDESCRIPTION: Interface defining the configuration options for SmoothOrbitControls, including sensitivity settings, angle limits, and behavior flags.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/smooth-orbit-controls-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SmoothOrbitControlsOptions {\n  enableOrbit?: boolean\n  enableZoom?: boolean\n  enablePan?: boolean\n  orbitSensitivity?: number\n  zoomSensitivity?: number\n  panSensitivity?: number\n  inputSensitivity?: number\n  minimumRadius?: number\n  maximumRadius?: number\n  minimumPolarAngle?: number\n  maximumPolarAngle?: number\n  minimumAzimuthalAngle?: number\n  maximumAzimuthalAngle?: number\n  infiniteZoom?: boolean\n  zoomToCursor?: boolean\n  damperDecay?: number\n  orbitAroundCursor?: boolean\n  showOrbitPoint?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Render Object Property in TypeScript\nDESCRIPTION: Property definition for the renderable object that can be a Mesh, LineSegment2, Points, or Text.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrenderObject: Object3D;\n```\n\n----------------------------------------\n\nTITLE: Initializing Section Tool Extensions in TypeScript\nDESCRIPTION: Creates section tool and section outlines extensions in the Speckle viewer. These provide 6 customizable section planes aligned as an axis box with optional outline display.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/more-extensions-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sections = viewer.createExtension(SectionTool);\nviewer.createExtension(SectionOutlines);\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes Method\nDESCRIPTION: Searches through the tree using a predicate function and returns matching nodes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfindAll(predicate: SearchPredicate, node?: TreeNode): TreeNode[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Undiff Operation in TypeScript\nDESCRIPTION: Asynchronous method to revert visual diffing and unload models that were previously loaded for diffing purposes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/diff-extension-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync undiff(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining FilterMaterialType Enum for Speckle Materials\nDESCRIPTION: Enum defining the available types of filter materials in Speckle.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nenum FilterMaterialType {\n  GHOST,\n  GRADIENT,\n  COLORED,\n  HIDDEN,\n}\n```\n\n----------------------------------------\n\nTITLE: Extending BatchObject for Instanced Objects in TypeScript\nDESCRIPTION: Defines the InstancedBatchObject class, which extends BatchObject. This class is used for instanced objects and includes additional required logic.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-object-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass InstancedBatchObject extends BatchObject\n```\n\n----------------------------------------\n\nTITLE: Disable Camera Rotations - TypeScript\nDESCRIPTION: Method to disable all camera controls rotation capabilities.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndisableRotations(): void\n```\n\n----------------------------------------\n\nTITLE: Python Gradient Visualization Example\nDESCRIPTION: Example showing how to use metadata keys for gradient visualization in the model view UI by attaching information to objects with gradient values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-context.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nautomate_context.attach_info_to_objects(\n    category=\"Gradient Visualization\",\n    metadata={\"gradient\": True, \"gradientValues\": gradient_values},\n    message=\"Values applied to objects in list order\",\n    object_ids=all_object_ids,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Base Query Interface in TypeScript\nDESCRIPTION: Base interface for all query operations, containing an optional ID and required operation type.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/queries-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Query {\n  id?: string \n  operation: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Search Query in JavaScript\nDESCRIPTION: This snippet defines a GraphQL query for searching streams and a utility function to fetch search results. It's used in the SpeckleSearch component for stream searching functionality.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport const streamSearchQuery = search => `query {\n      streams(query: \"${search}\") {\n        totalCount\n        cursor\n        items {\n          id\n          name\n          updatedAt\n        }\n      }\n    }`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Update the import to include the streamSearchQuery\nimport { userInfoQuery, streamSearchQuery } from \"@/speckleQueries\"\n\nexport const searchStreams = e => speckleFetch(streamSearchQuery(e))\n```\n\n----------------------------------------\n\nTITLE: Managing ClippingPlanes in SpeckleRenderer\nDESCRIPTION: Accessor to get or set the clipping planes for the scene. Anything outside the volume determined by the clipping planes will be visually clipped.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget clippingPlanes(): Plane[]\nset clippingPlanes(value: Plane[])\n```\n\n----------------------------------------\n\nTITLE: Setting position and target in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract method to set the controller's goal position and rotation based on a given location and a target to look at.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nabstract fromPositionAndTarget(position: Vector3, target: Vector3): void\n```\n\n----------------------------------------\n\nTITLE: Defining FilterMaterial Interface for Speckle Materials\nDESCRIPTION: Interface for pre-defined filter materials with minimal configuration, including filterType and optional ramp-related properties.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FilterMaterial {\n  filterType: FilterMaterialType;\n  rampIndex?: number;\n  rampIndexColor?: Color;\n  rampTexture?: Texture;\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Selecting and Unselecting Objects in TypeScript\nDESCRIPTION: Demonstrates methods for programmatically selecting and unselecting objects in the Speckle Viewer by their IDs.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/selection-extension-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nselectObjects(ids: Array<string>, multiSelect = false): void\n\nunselectObjects(ids?: Array<string>): void\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from Speckle Records in Power BI\nDESCRIPTION: This snippet demonstrates how to extract a specific field value from a Speckle Record in Power BI using the lookup operator. It accesses the 'category' field from the 'data' column.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/powerbi/working-with-records.md#2025-04-22_snippet_0\n\nLANGUAGE: PowerQuery\nCODE:\n```\n[data][category]\n```\n\n----------------------------------------\n\nTITLE: Hide Objects Method\nDESCRIPTION: Method to hide specified objects in the viewer. Takes object IDs and optional parameters for state management and visualization options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhideObjects(\n    objectIds: string[],\n    stateKey: string = null,\n    includeDescendants = false,\n    ghost = false\n  ): FilteringState\n```\n\n----------------------------------------\n\nTITLE: VisualDiffMode Enum Definition in TypeScript\nDESCRIPTION: Enumeration defining visual diff display modes: PLAIN for transparency-based comparison and COLORED for color-coded differences.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/diff-extension-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nenum VisualDiffMode {\n  PLAIN,\n  COLORED,\n}\n```\n\n----------------------------------------\n\nTITLE: Node Data Interface Definition\nDESCRIPTION: Defines the data structure for TreeNodes including ID, raw data, children, and various flags.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NodeData {\n  id: string;\n  raw: { [prop: string]: any };\n  children: TreeNode[];\n  atomic: boolean;\n  subtreeId?: number;\n  renderView?: NodeRenderView;\n  instanced?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Camera Controls - TypeScript\nDESCRIPTION: Accessor method to get the current SpeckleControls implementation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget controls(): SpeckleControls\n```\n\n----------------------------------------\n\nTITLE: Installing Speckle Command in Rhino\nDESCRIPTION: Command to open the Speckle connector interface in Rhino. Shows usage of the 'Speckle' command to launch the Desktop UI window.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/rhino.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSpeckle\n```\n\n----------------------------------------\n\nTITLE: Manual Account Configuration JSON Structure\nDESCRIPTION: JSON structure required for manually adding a Speckle account without using Manager. Contains token, server info and user info fields that must be saved in the appropriate system directory.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/manager.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"YOUR-TOKEN-HERE\",\n  \"serverInfo\": {\n    \"name\": \"Server Name\",\n    \"company\": \"Company Name\",\n    \"url\": \"https://YOUR-SERVE-URL-HERE\"\n  },\n  \"userInfo\": {\n    \"id\": \"YOUR-USER-ID\",\n    \"name\": \"First Last\",\n    \"email\": \"firstlast@email.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Speckle Object in C#\nDESCRIPTION: Creates a basic Speckle Base object with custom properties including a string value and a list of numbers. Demonstrates basic object creation and property assignment in C#.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/grasshopper.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar speckleObject = new Speckle.Core.Models.Base();\nspeckleObject[\"aProperty\"] = \"A property value\";\nspeckleObject[\"aListProperty\"] = new List<double>{ 1, 2, 3, 4, 5 };\nA = speckleObject;\n```\n\n----------------------------------------\n\nTITLE: Camera Controller Options Type - TypeScript\nDESCRIPTION: Type definition and default values for camera controller options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraControllerOptions = SmoothOrbitControlsOptions &\n  { nearPlaneCalculation?: NearPlaneCalculation }\n\nexport const DefaultOrbitControlsOptions: Required<CameraControllerOptions> = {\n  enableOrbit: true,\n  enableZoom: true,\n  enablePan: true,\n  orbitSensitivity: 1,\n  zoomSensitivity: 1,\n  panSensitivity: 1,\n  inputSensitivity: 1,\n  minimumRadius: 0,\n  maximumRadius: Infinity,\n  minimumPolarAngle: 0,\n  maximumPolarAngle: Math.PI,\n  minimumAzimuthalAngle: -Infinity,\n  maximumAzimuthalAngle: Infinity,\n  infiniteZoom: true,\n  zoomToCursor: true,\n  orbitAroundCursor: true,\n  showOrbitPoint: true,\n  damperDecay: 30,\n  nearPlaneCalculation: NearPlaneCalculation.ACCURATE\n}\n```\n\n----------------------------------------\n\nTITLE: Defining up vector accessor in SpeckleControls (TypeScript)\nDESCRIPTION: Getter and setter for the up vector used to compute camera position and rotation. Default is (0, 1, 0), but Speckle data uses (0, 0, 1) as up.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npublic get up() \npublic set up(value: Vector3)\n```\n\n----------------------------------------\n\nTITLE: Fitting to sphere in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract method to position and orient controls according to an input Sphere. The sphere is provided in a coordinate system where up is (0, 1, 0).\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nabstract fitToSphere(sphere: Sphere): void\n```\n\n----------------------------------------\n\nTITLE: Defining ISpeckleConverter Interface in C++\nDESCRIPTION: Declaration of the ISpeckleConverter interface, which encapsulates conversion functions and settings for specific types. This interface is used to create modular converters for different Speckle object types.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nclass ISpeckleConverter\n{\n    // Interface methods not shown\n};\n```\n\n----------------------------------------\n\nTITLE: Get Filtering State Accessor\nDESCRIPTION: Accessor method that returns the current FilteringState object containing the viewer's filtering configuration.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget filteringState(): FilteringState\n```\n\n----------------------------------------\n\nTITLE: Show Objects Method\nDESCRIPTION: Method to make specified objects visible in the viewer with options for state management and descendant inclusion.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nshowObjects(\n    objectIds: string[],\n    stateKey: string = null,\n    includeDescendants = false\n  ): FilteringState\n```\n\n----------------------------------------\n\nTITLE: Measurement Type Enum Definition in TypeScript\nDESCRIPTION: Enumeration defining the available measurement types: PERPENDICULAR and POINTTOPOINT.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenum MeasurementType {\n  PERPENDICULAR,\n  POINTTOPOINT,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Light Configuration Interface\nDESCRIPTION: Interface defining light configuration options including shadow casting, intensity, and color settings.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LightConfiguration {\n  enabled?: boolean;\n  castShadow?: boolean;\n  intensity?: number;\n  color?: number;\n  indirectLightIntensity?: number;\n  shadowcatcher?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Reverse Proxy for HTTPS in Docker Compose\nDESCRIPTION: This YAML snippet defines a Traefik reverse proxy service in Docker Compose for handling HTTPS connections. It sets up automatic TLS certificate acquisition using Let's Encrypt.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-manualsetup.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  reverse-proxy:\n    image: traefik:v2.10\n    restart: always\n    command:\n      - \"--providers.docker=true\"\n      - \"--providers.docker.exposedbydefault=false\"\n      - \"--entrypoints.websecure.address=:443\"\n      - \"--certificatesresolvers.myresolver.acme.tlschallenge=true\"\n      # To use Let's Encrypt staging server instead of production, uncomment the following line\n      #- \"--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory\"\n      # TODO: replace `{your@example.com}` with your actual email\n      - \"--certificatesresolvers.myresolver.acme.email=your@example.com\"\n      - \"--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json\"\n      # To enable the Traefik web UI (enabled by --api.insecure=true); this is not recommended as it will expose the Traefik dashboard to the internet\n      #- \"--api.insecure=true\"\n\n    ports:\n      # The HTTPS port (required for Traefik to listen to HTTPS requests)\n      - \"443:443\"\n      # The Traefik Web UI port if enabled by --api.insecure=true\n      - \"8080:8080\"\n    volumes:\n      - \"./letsencrypt:/letsencrypt\"\n      # So that Traefik can listen to the Docker events\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Hash ID in C#\nDESCRIPTION: Shows how to access the hash ID of a Base object, which will be populated only after serialization, and how to explicitly generate it if needed before serialization.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar x = myObject.id; // will be populated only if this object has been previously serialised!\n```\n\n----------------------------------------\n\nTITLE: Camera Event Payload Interface - TypeScript\nDESCRIPTION: Interface defining the payload types for different camera events.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CameraEventPayload {\n  [CameraEvent.Stationary]: void\n  [CameraEvent.Dynamic]: void\n  [CameraEvent.FrameUpdate]x: boolean\n  [CameraEvent.ProjectionChanged]: CameraProjection\n}\n```\n\n----------------------------------------\n\nTITLE: Perspective Camera Enable - TypeScript\nDESCRIPTION: Method to enable the perspective camera projection.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetPerspectiveCameraOn(): void\n```\n\n----------------------------------------\n\nTITLE: Pass List Property Definition\nDESCRIPTION: Protected property that stores the pipeline's ordered GPass objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprotected passList: Array<GPass>;\n```\n\n----------------------------------------\n\nTITLE: Toggling SectionTool State in TypeScript\nDESCRIPTION: Toggles the enabled state of the SectionTool extension.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntoggle(): void\n```\n\n----------------------------------------\n\nTITLE: Defining MaterialConverter Class in C++\nDESCRIPTION: Declaration of the MaterialConverter class, which handles the conversion of Speckle RenderMaterial properties to Unreal Engine MaterialInstances. It includes functionality for material overrides and prioritization.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nclass MaterialConverter : public ISpeckleConverter\n{\n    // Properties for base materials and overrides\n    UPROPERTY(EditAnywhere, Category = \"Material Conversion\")\n    UMaterial* BaseMeshOpaqueMaterial;\n\n    UPROPERTY(EditAnywhere, Category = \"Material Conversion\")\n    UMaterial* BaseMeshTransparentMaterial;\n\n    UPROPERTY(EditAnywhere, Category = \"Material Overrides\")\n    TMap<FString, UMaterialInterface*> MaterialOverridesById;\n\n    UPROPERTY(EditAnywhere, Category = \"Material Overrides\")\n    TArray<FMaterialOverride> MaterialOverridesByName;\n\n    // Implementation details not shown\n};\n```\n\n----------------------------------------\n\nTITLE: Speckle Object Structure Example\nDESCRIPTION: JSON representation of the Speckle object structure showing how building levels are organized with their components including facades, columns, banisters, and floor slabs.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\":  \"idfcaf8b9e145241dsdfa915885d87cda2\",\n    \"speckle_type\": \"Base\",\n    \"data\": [\n        {\n            \"id\":  \"ide6acabd37e865ce87a5sdf444d733877\",\n            \"speckle_type\": \"Base\",\n            \"@facade\": [ { ... }, ... ],\n            \"@columns\": [ { ... }, ... ],\n            \"@banister\": { ... },\n            \"@floorSlab\": { ... }\n        },\n        {\n            ...\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Layers in SpeckleRenderer\nDESCRIPTION: Method to enable or disable ObjectLayers from rendering. By default, all layers are enabled.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenableLayers(layers: ObjectLayers[], value: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Defining ViewerEventPayload Interface in TypeScript\nDESCRIPTION: Interface mapping viewer events to their corresponding payload types.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ViewerEventPayload {\n  [ViewerEvent.ObjectClicked]: SelectionEvent | null\n  [ViewerEvent.ObjectDoubleClicked]: SelectionEvent | null\n  [ViewerEvent.LoadComplete]: string\n  [ViewerEvent.UnloadComplete]: string\n  [ViewerEvent.UnloadAllComplete]: void\n  [ViewerEvent.Busy]: boolean\n  [ViewerEvent.FilteringStateSet]: FilteringState\n  [ViewerEvent.LightConfigUpdated]: LightConfiguration\n}\n```\n\n----------------------------------------\n\nTITLE: GeometryType Enum Definition in TypeScript\nDESCRIPTION: Defines the supported geometry types in the viewer as an enumeration.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum GeometryType {\n  MESH,\n  LINE,\n  POINT,\n  POINT_CLOUD,\n  TEXT,\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Objects and Nodes in TypeScript\nDESCRIPTION: Shows methods for getting currently selected objects and nodes in the Speckle Viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/selection-extension-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetSelectedObjects(): Array<Record<string, unknown>>\n\ngetSelectedNodes(): Array<TreeNode>\n```\n\n----------------------------------------\n\nTITLE: Type Definitions in TypeScript\nDESCRIPTION: Type definitions for rendering statistics and sun light configuration.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  objects: number\n  batchCount: number\n  drawCalls: number\n  trisCount: number\n  vertCount: number\n  batchDetails: Array<{\n    drawCalls: number\n    minDrawCalls: number\n    tris: number\n    verts: number\n  }>\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SunLightConfiguration extends LightConfiguration {\n  elevation?: number;\n  azimuth?: number;\n  radius?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Camera View Methods - TypeScript\nDESCRIPTION: Overloaded methods for setting camera view based on object IDs, view models, or explicit bounds.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetCameraView(objectIds: string[], transition: boolean, fit?: number): void\n\nsetCameraView(\n    view: CanonicalView | SpeckleView | InlineView | PolarView,\n    transition: boolean,\n    fit?: number\n  ): void\n\nsetCameraView(bounds: Box3, transition: boolean, fit?: number): void\n```\n\n----------------------------------------\n\nTITLE: Defining SelectionEvent Type in TypeScript\nDESCRIPTION: Type definition for selection events in the viewer, including multiple selection status and hit detection information.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype SelectionEvent = {\n  multiple: boolean;\n  event?: PointerEvent;\n  hits: Array<{\n    node: TreeNode;\n    point: Vector3;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Camera Event Enum - TypeScript\nDESCRIPTION: Enumeration of available camera events.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraEvent {\n  Stationary = 'stationary',\n  Dynamic = 'dynamic',\n  FrameUpdate = 'frame-update',\n  ProjectionChanged = 'projection-changed'\n}\n```\n\n----------------------------------------\n\nTITLE: Passes Accessor Definition\nDESCRIPTION: Getter method that returns the current ordered pass list.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget passes(): Array<GPass>;\n```\n\n----------------------------------------\n\nTITLE: Setting Section Box Bounds in TypeScript\nDESCRIPTION: Sets the bounds of the section box with an optional offset.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetBox(targetBox: Box3, offset = 0): void\n```\n\n----------------------------------------\n\nTITLE: Setting Target in SmoothOrbitControls (TypeScript)\nDESCRIPTION: Method to set the origin of the spherical coordinate system for the orbit controls.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/smooth-orbit-controls-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetTarget(x: number, y: number, z: number): void\n```\n\n----------------------------------------\n\nTITLE: Renderer Control Methods in TypeScript\nDESCRIPTION: Methods for controlling renderer behavior including removing render trees, resetting materials and pipeline, and resizing.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nremoveRenderTree(subtreeId: string)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresetMaterials(): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresetPipeline(): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresize(width: number, height: number): void\n```\n\n----------------------------------------\n\nTITLE: Using Stackblitz Embed Component in Vue\nDESCRIPTION: A Vue component for embedding a Stackblitz project with height customization. This example demonstrates how to include an external Stackblitz project with specific embed options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/viewer.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<Stackblitz projectId=\"css-custom-prop-color-values\" :embedOptions=\"{height: 1000}\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining MaterialOptions Interface for Speckle Materials\nDESCRIPTION: Interface for custom material options in Speckle, including stencil outlines, point size, and depth write.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MaterialOptions {\n  stencilOutlines?: StencilOutlineType;\n  pointSize?: number;\n  depthWrite?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Stackblitz Project in HTML\nDESCRIPTION: This snippet demonstrates how to embed a Stackblitz project within an HTML page using Vue custom components. It sets up a preview of the 'speckle-animation-text' project with specific embedding options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/categorize-example.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Stackblitz projectId='speckle-animation-text' :embedOptions=\"{ \n    height: 500,\n    openFile: 'src/main.ts',\n    view: 'preview',\n    hideExplorer: true,\n    hideNavigation: true }\" \n/>\n```\n\n----------------------------------------\n\nTITLE: Defining QueryOperation Type in TypeScript\nDESCRIPTION: Union type defining all possible query operation values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/queries-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype QueryOperation = 'Project' | 'Unproject' | 'Occlusion' | 'Pick'\n```\n\n----------------------------------------\n\nTITLE: Getting RenderViews for a Node ID in RenderTree (TypeScript)\nDESCRIPTION: Retrieves all displayable NodeRenderViews descending from the node with the provided id.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRenderViewsForNodeId(id: string): NodeRenderView[]\n```\n\n----------------------------------------\n\nTITLE: Abstract Dispose Method in TypeScript\nDESCRIPTION: Abstract method for disposing of the loader and freeing allocated resources.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loader-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nabstract dispose()\n```\n\n----------------------------------------\n\nTITLE: Set Camera Clipping Planes - TypeScript\nDESCRIPTION: Method to adapt camera's near and far clipping planes based on scene volume.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetCameraPlanes(targetVolume: Box3, offsetScale: number = 1)\n```\n\n----------------------------------------\n\nTITLE: Managing SectionTool Visibility in TypeScript\nDESCRIPTION: Gets or sets the visibility of the section box in the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget visible(): boolean\nset visible(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Render Target\nDESCRIPTION: Static method to create an MRT enabled three.js render target with configurable color attachments and options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstatic createMultipleRenderTarget(\n    count: number,\n    options?: WebGLRenderTargetOptions,\n    width?: number,\n    height?: number\n  ): WebGLMultipleRenderTargets\n```\n\n----------------------------------------\n\nTITLE: Retrieving BatchObject Accessors in TypeScript\nDESCRIPTION: Shows how to use various accessors of the BatchObject class, including aabb, accelerationStructure, batchIndex, localOrigin, and renderView. These provide access to key object properties and related structures.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-object-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget aabb(): Box3\nget accelerationStructure(): AccelerationStructure\nget batchIndex(): number\nget localOrigin(): Vector3\nget renderView(): NodeRenderView\n```\n\n----------------------------------------\n\nTITLE: Retrieving Section Box Bounds in TypeScript\nDESCRIPTION: Gets the current bounds of the section box as a Box3 object.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetBox(): Box3\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Dropdown Configuration\nDESCRIPTION: Demonstrates dropdown implementation using JSON schema for more flexible option definition.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreport_type: str = Field(\n    default=\"detailed\",\n    title=\"Report Type\",\n    json_schema_extra={\n        \"oneOf\": [\n            {\"const\": \"detailed\", \"title\": \"Detailed Report\"},\n            {\"const\": \"summary\", \"title\": \"Summary Report\"}\n        ]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: DrawGroup Interface Definition\nDESCRIPTION: Interface formalizing three.js's draw group concept, used for rendering batch parts with different materials.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DrawGroup {\n  start: number;\n  count: number;\n  materialIndex?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing BatchObject in TypeScript\nDESCRIPTION: Creates a new BatchObject instance with a renderView and batchIndex. This constructor populates and constructs the batch object.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-object-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(renderView: NodeRenderView, batchIndex: number)\n```\n\n----------------------------------------\n\nTITLE: C# Enum Dropdown Implementation\nDESCRIPTION: Implements dropdown selection using C# enums with description attributes for user-friendly display text.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum AnalysisType\n{\n    [Description(\"Structural Analysis\")]  // What users see in the dropdown\n    Structural,                          // What your code receives\n    [Description(\"Thermal Analysis\")]\n    Thermal,\n    [Description(\"Cost Analysis\")]\n    Cost\n}\n\npublic class FunctionInputs\n{\n    [DisplayName(\"Analysis Type\")]\n    public AnalysisType Type { get; set; } = AnalysisType.Structural;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Camera Events in TypeScript\nDESCRIPTION: Adds an event listener for camera events in the SectionTool.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\non(e: CameraEvent, handler: (data: boolean) => void)\n```\n\n----------------------------------------\n\nTITLE: Updated SelectionEvent Type Definition in TypeScript\nDESCRIPTION: This code snippet shows the updated structure of the SelectionEvent type in the new API. It now includes an array of hits, each containing a node and a point.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/migration-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SelectionEvent = {\n  multiple: boolean\n  event?: PointerEvent\n  hits: Array<{\n    node: TreeNode\n    point: Vector3\n  }>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Single Render Target\nDESCRIPTION: Static method to create a standard three.js render target with configurable options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic createRenderTarget(\n    options?: WebGLRenderTargetOptions,\n    width?: number,\n    height?: number\n  ): WebGLRenderTarget\n```\n\n----------------------------------------\n\nTITLE: Querying BVH Bounding Box in TypeScript\nDESCRIPTION: Retrieves the axis-aligned bounding box (AABB) of the entire BVH. This is useful for quick spatial queries and frustum culling.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetBoundingBox(target?: Box3): Box3\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Scatter Plot with Plotly Express in Python\nDESCRIPTION: This code snippet uses Plotly Express to create an interactive 3D scatter plot from the DataFrame of building element vertices.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/py-sample.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf_vertices = construct_points_df(levels)\n\nfig = px.scatter_3d(\n    df_vertices,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    color=\"element\",\n    opacity=0.7,\n    title=\"Element Vertices (m)\",\n)\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Setting up Speckle Guide Development Environment\nDESCRIPTION: Steps to set up and run the Speckle Guide documentation locally. Requires Node 18, and involves installing dependencies and starting the development server.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining ViewerEvent Enum in TypeScript\nDESCRIPTION: Enum defining all possible viewer events that can be emitted.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nenum ViewerEvent {\n  ObjectClicked = \"object-clicked\",\n  ObjectDoubleClicked = \"object-doubleclicked\",\n  DownloadComplete = \"download-complete\",\n  LoadComplete = \"load-complete\",\n  LoadProgress = \"load-progress\",\n  UnloadComplete = \"unload-complete\",\n  LoadCancelled = \"load-cancelled\",\n  UnloadAllComplete = \"unload-all-complete\",\n  Busy = \"busy\",\n  FilteringStateSet = \"filtering-state-set\",\n  LightConfigUpdated = \"light-config-updated\",\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Speckle SketchUp Repository\nDESCRIPTION: Command to clone the Speckle SketchUp connector repository from GitHub. This is the first step in the manual installation process, requiring git to be installed on the system.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/sketchup/manual-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/specklesystems/speckle-sketchup\n```\n\n----------------------------------------\n\nTITLE: Defining SearchPredicate Type in TypeScript\nDESCRIPTION: Defines a type for search predicate functions used in tree traversal methods like findAll, walk, and walkAsync. The predicate takes a TreeNode parameter and returns a boolean indicating match status or traversal continuation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype SearchPredicate = (node: TreeNode) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Performing Shape Intersection Tests in TypeScript\nDESCRIPTION: Generic method for intersecting the BVH with various shapes or custom intersection logic. This provides a flexible way to perform complex spatial queries against the BVH.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nshapecast(\n    callbacks: {\n      intersectsBounds: (\n        box: Box3,\n        isLeaf: boolean,\n        score: number | undefined,\n        depth: number,\n        nodeIndex: number\n      ) => ShapecastIntersection | boolean\n\n      traverseBoundsOrder?: (box: Box3) => number\n    } & (\n      | {\n          intersectsRange: (\n            triangleOffset: number,\n            triangleCount: number,\n            contained: boolean,\n            depth: number,\n            nodeIndex: number,\n            box: Box3\n          ) => boolean\n        }\n      | {\n          intersectsTriangle: (\n            triangle: ExtendedTriangle,\n            triangleIndex: number,\n            contained: boolean,\n            depth: number\n          ) => boolean | void\n        }\n    )\n  ): boolean\n```\n\n----------------------------------------\n\nTITLE: Secure Input Field Implementation in Python\nDESCRIPTION: Shows how to implement secure input fields for sensitive data using Pydantic's SecretStr type.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import SecretStr\n\nclass FunctionInputs(AutomateBase):\n    api_key: SecretStr = Field(\n        title=\"API Key\",\n        description=\"Enter your API key\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Clear Measurements Method in TypeScript\nDESCRIPTION: Method to remove all measurements, including both finished and ongoing measurements.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclearMeasurements(): void\n```\n\n----------------------------------------\n\nTITLE: Accessing BatchObject Properties in TypeScript\nDESCRIPTION: Demonstrates how to access the transform and transformInv properties of a BatchObject. These properties represent the object's immediate transformation and inverse transformation respectively.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-object-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: Matrix4;\ntransformInv: Matrix4;\n```\n\n----------------------------------------\n\nTITLE: Disposing of Geometry in NodeRenderView in TypeScript\nDESCRIPTION: Disposes of the individual geometry of the render view to reduce memory footprint after batching.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ndisposeGeometry(): void\n```\n\n----------------------------------------\n\nTITLE: Declaring StaticMeshConverter Class in C++\nDESCRIPTION: Header declaration for the StaticMeshConverter class, which creates a UStaticMeshComponent from Speckle mesh objects. This converter produces faster rendering meshes that can be saved as assets and used with baked lighting.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include \"SpeckleUnrealStaticMesh.h\"\n\nclass StaticMeshConverter : public ISpeckleConverter\n{\n    // Implementation details not shown\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving RenderViews for a Node in RenderTree (TypeScript)\nDESCRIPTION: Gets all displayable NodeRenderViews descending from the given node.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRenderViewsForNode(node: TreeNode): NodeRenderView[]\n```\n\n----------------------------------------\n\nTITLE: Opening Project in VSCode\nDESCRIPTION: Command to open the newly created project in Visual Studio Code IDE.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode speckle-demo-app\n```\n\n----------------------------------------\n\nTITLE: Rendering Camera Control - TypeScript\nDESCRIPTION: Accessor methods to get or set the current rendering camera, supporting both perspective and orthographic cameras.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nget renderingCamera(): PerspectiveCamera | OrthographicCamera\nset renderingCamera(value: PerspectiveCamera | OrthographicCamera)\n```\n\n----------------------------------------\n\nTITLE: Initializing WorldTree Constructor\nDESCRIPTION: Creates a new instance of the WorldTree class.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew WorldTree();\n```\n\n----------------------------------------\n\nTITLE: Updating Home View for Stream Search in Vue.js\nDESCRIPTION: This snippet modifies the Home.vue view to include the StreamSearch component and display selected stream information. It conditionally renders content based on authentication status and stream selection.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template lang=\"html\">\n  <WelcomeView v-if=\"!$store.getters.isAuthenticated\" />\n  <v-container v-else class=\"home pa-6\">\n    <stream-search\n      @selected=\"$store.dispatch('handleStreamSelection', $event)\"\n    />\n    <h2 class=\"pt-6 primary--text\">\n      <span v-if=\"selectedStream\">\n        {{ selectedStream.name }} — {{ selectedStream.id }}\n        <v-btn\n          outlined\n          text\n          small\n          class=\"ml-3\"\n          :href=\"serverUrl + '/streams/' + selectedStream.id\"\n        >\n          View in server\n        </v-btn>\n        <v-btn\n          outlined\n          text\n          small\n          class=\"ml-3\"\n          color=\"error\"\n          @click=\"$store.dispatch('clearStreamSelection')\"\n        >\n          Clear selection\n        </v-btn>\n      </span>\n      <span v-else>\n        <em>No stream selected. Find one using the search bar 👆🏼</em>\n      </span>\n    </h2>\n  </v-container>\n</template>\n\n<script>\nimport StreamSearch from \"@/components/StreamSearch\"\nimport WelcomeView from \"@/views/WelcomeView\"\n\nexport default {\n  name: \"HomeView\",\n  components: { WelcomeView, StreamSearch },\n  data: () => {\n    return {\n      serverUrl: process.env.VUE_APP_SERVER_URL\n    }\n  },\n  methods: {},\n  computed: {\n    selectedStream: function() {\n      return this.$store.state.currentStream\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enum-based Dropdown Implementation in Python\nDESCRIPTION: Creates a dropdown menu using Python Enum class for analysis type selection. Provides fixed options for structural, thermal, and cost analysis.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AnalysisType(str, Enum):\n    STRUCTURAL = \"structural\"\n    THERMAL = \"thermal\" \n    COST = \"cost\"\n\nclass FunctionInputs(AutomateBase):\n    analysis_type: AnalysisType = Field(\n        default=AnalysisType.STRUCTURAL,\n        title=\"Analysis Type\", \n        description=\"Select analysis method\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Selected Measurement Property Accessor in TypeScript\nDESCRIPTION: Getter method to retrieve the currently selected measurement. Returns null if no measurement is selected.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget selectedMeasurement(): Measurement\n```\n\n----------------------------------------\n\nTITLE: Inline View Type - TypeScript\nDESCRIPTION: Type definition for inline camera view with position and target vectors.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype InlineView = {\n  position: Vector3;\n  target: Vector3;\n};\n```\n\n----------------------------------------\n\nTITLE: Render Pass Method - TypeScript\nDESCRIPTION: Main render function for the pass that takes a WebGL renderer, camera and scene. Returns boolean indicating if more rendering is needed.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/g-pass-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrender(\n    renderer: WebGLRenderer,\n    camera?: PerspectiveCamera | OrthographicCamera | null,\n    scene?: Scene\n  ): boolean\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Speckle Blender Repository\nDESCRIPTION: Commands for cloning the Speckle Blender repository, creating a local environment with Poetry, and exporting dependencies for development purposes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/blender.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/specklesystems/speckle-blender\ncd ./speckle-blender\npoetry lock --no-update\npoetry install --with dev\n```\n\n----------------------------------------\n\nTITLE: Shapecasting Against Top-Level BVH in TypeScript\nDESCRIPTION: Implements the shapecast method, which provides a generic mechanism to intersect the BVH with various shapes/objects. It takes ExtendedShapeCastCallbacks as a parameter and returns a boolean.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nshapecast(callbacks: ExtendedShapeCastCallbacks): boolean\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Speckle Server on DigitalOcean\nDESCRIPTION: This command runs the setup script to reconfigure an existing Speckle Server installation on a DigitalOcean droplet. It should be executed via SSH after logging into the droplet.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/opt/speckle-server/setup.py\n```\n\n----------------------------------------\n\nTITLE: Implementing ProgressivePipeline Methods in TypeScript\nDESCRIPTION: Method declarations for handling stage transitions and accumulation completion in the ProgressivePipeline class.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/progressive-pipeline-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonStationaryBegin(): void\nonStationaryEnd(): void\nonAccumulationComplete(): void\n```\n\n----------------------------------------\n\nTITLE: Copying Backup File from Docker Container\nDESCRIPTION: Docker command to copy the backup file from pgAdmin container to local machine\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp speckle-server-pgadmin-1:'/var/lib/pgadmin/storage/admin_localhost.com/BACKUP_FILE_NAME' .\n```\n\n----------------------------------------\n\nTITLE: Getting Specific RenderTree by Object ID\nDESCRIPTION: Shows how to get a RenderTree instance for a specific part of the model by providing an object ID. This creates a more focused render tree for better performance.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-rendering.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst renderTree = worldTree.getRenderTree(\"2f1bd7295481641c888f09b5fbb6dc2b\");\n```\n\n----------------------------------------\n\nTITLE: Object Upload Request Body Example\nDESCRIPTION: Example JSON structure for uploading a batch of objects to the Speckle Server. Shows the format with object ID, type, and properties.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-rest-api.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\"id\": \"9b2cdb21da092dbd3558a4bc55b2cf7e\", \"speckle_type\": \"Base\", \"totalChildrenCount\": 0, \"numbers\": [0.04667752874618203, 0.16370857295385177, 0.1008153029515465]}]\n```\n\n----------------------------------------\n\nTITLE: GeometryAttributes Enum Definition in TypeScript\nDESCRIPTION: Defines the supported geometry attributes in the viewer as an enumeration.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum GeometryAttributes {\n  POSITION = \"POSITION\",\n  COLOR = \"COLOR\",\n  NORMAL = \"NORMAL\",\n  UV = \"UV\",\n  TANGENT = \"TANGENT\",\n  INDEX = \"INDEX\",\n}\n```\n\n----------------------------------------\n\nTITLE: Isolate Objects Method\nDESCRIPTION: Method to isolate specified objects by hiding all others. Includes options for descendant inclusion and ghosting.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisolateObjects(\n    objectIds: string[],\n    stateKey: string = null,\n    includeDescendants = true,\n    ghost = true\n  ): FilteringState\n```\n\n----------------------------------------\n\nTITLE: Canonical View Type - TypeScript\nDESCRIPTION: Type definition for supported canonical camera views.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype CanonicalView =\n  | \"front\"\n  | \"back\"\n  | \"up\"\n  | \"top\"\n  | \"down\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"3d\"\n  | \"3D\";\n```\n\n----------------------------------------\n\nTITLE: Purging RenderTree in TypeScript\nDESCRIPTION: Purges the render tree, making it no longer usable.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\npurge(): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Enable/Disable Accessor\nDESCRIPTION: Defines getter and setter for enabling/disabling extension functionality. All extensions must implement this property.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/extension-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget enabled(): boolean\nset enabled(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Renderable RenderViews by Type in RenderTree (TypeScript)\nDESCRIPTION: Similar to getRenderableNodes, but returns the mapped NodeRenderViews of the renderable nodes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRenderableRenderViews(...types: SpeckleType[]): NodeRenderView[]\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Version\nDESCRIPTION: Git command to checkout a specific version tag of Speckle Server.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout tags/2.9.0 -b main\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer Application in TypeScript Rendering Pass\nDESCRIPTION: Protected method for applying object layers in a rendering pass. Takes an optional Camera parameter and returns void.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/base-g-pass-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprotected applyLayers(camera: Camera | null)\n```\n\n----------------------------------------\n\nTITLE: Cloning Speckle Server Repository\nDESCRIPTION: Command to clone the Speckle Server repository from GitHub.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/specklesystems/speckle-server.git\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Dependencies Accessor\nDESCRIPTION: Gets an array of extension constructors that need to be injected when this extension is created. Used for dependency injection during extension creation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/extension-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget inject(): Array<Constructor<Extension>>\n```\n\n----------------------------------------\n\nTITLE: Measurement Abstract Class Definition in TypeScript\nDESCRIPTION: Abstract base class that extends Object3D for all measurement types.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Measurement extends Object3D\n```\n\n----------------------------------------\n\nTITLE: Defining VectorLike Type in TypeScript\nDESCRIPTION: Defines the VectorLike type, which is an archetype for Vector2, Vector3, and Vector4. It's used in various methods of the BatchObject class.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-object-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype VectorLike = { x: number; y: number; z?: number; w?: number };\n```\n\n----------------------------------------\n\nTITLE: Property Info Interface Definition\nDESCRIPTION: Interface definition for property information used in filtering, including key, object count, and type.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PropertyInfo {\n  key: string;\n  objectCount: number;\n  type: \"number\" | \"string\";\n}\n```\n\n----------------------------------------\n\nTITLE: TreeNode Runtime Structure Example\nDESCRIPTION: Illustrates the runtime structure of a TreeNode object, showing its properties including children array, configuration object, model data, and parent reference.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  children: Node[]\n  config: {childrenPropertyName: 'children', modelComparatorFn: undefined}\n  model: NodeData\n  parent: TreeNode\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Object Load Operation\nDESCRIPTION: Method to cancel ongoing loading operations with optional unloading of current progress.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncancelLoad(url: string, unload?: boolean): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining TreeNode Type in TypeScript\nDESCRIPTION: Defines a type alias for tree nodes using the TreeModel library's Node interface with NodeData generic parameter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype TreeNode = TreeModel.Node<NodeData>;\n```\n\n----------------------------------------\n\nTITLE: Constructing AccelerationStructure in TypeScript\nDESCRIPTION: Constructs an AccelerationStructure object with a given MeshBVH. This is the primary way to initialize the acceleration structure with a pre-built BVH.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(bvh: MeshBVH)\n```\n\n----------------------------------------\n\nTITLE: HTML Banner for Important Information in Markdown\nDESCRIPTION: This HTML snippet creates a banner to highlight important information about the PowerBI data connector and model viewer visual. It uses custom classes for styling and emphasizes the upcoming changes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/powerbi-visual/visual-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"banner-ribbon\">\n  <span><b>Important</b>: This guide features the V2 PowerBI data connector and model viewer visual.</span>\n  <span class=\"next-gen\">Next Gen is on its way, radically changing how the PowerBI connector works!</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Protected Viewer Field in TypeScript Extension Class\nDESCRIPTION: Defines a protected field that holds a reference to the viewer implementation instance that created the extension.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/extension-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprotected viewer: IViewer\n```\n\n----------------------------------------\n\nTITLE: Navigating to UI Folder\nDESCRIPTION: Command to change directory to the UI folder within the cloned repository. This step is necessary before building the user interface.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/sketchup/manual-installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd speckle-sketchup/ui\n```\n\n----------------------------------------\n\nTITLE: Setting Field of View in SmoothOrbitControls (TypeScript)\nDESCRIPTION: Method to set the field of view when the camera is a PerspectiveCamera.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/smooth-orbit-controls-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetFieldOfView(fov: number)\n```\n\n----------------------------------------\n\nTITLE: Constructing a RenderTree in TypeScript\nDESCRIPTION: Creates a new RenderTree instance. The recommended way is to use the getRenderTree method in WorldTree.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(tree: WorldTree, subtreeRoot: TreeNode)\n```\n\n----------------------------------------\n\nTITLE: C# Function Execution Entry Point\nDESCRIPTION: This snippet shows the main executable method for a C# Automate function using the dotnet SDK. It demonstrates how to configure the entry point to run the AutomateFunction with the defined FunctionInputs.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/making-your-function.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#Program.cs\n\nreturn await AutomationRunner\n  .Main<FunctionInputs>(args, AutomateFunction.Run)\n  .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Computing Axis-Aligned Bounding Box in TypeScript\nDESCRIPTION: Computes the axis-aligned bounding box for the render view's geometry.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-view-api.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ncomputeAABB(): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Early Update Method\nDESCRIPTION: Update method called before the viewer's main update. Takes optional deltaTime parameter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/extension-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonEarlyUpdate(deltaTime?: number)\n```\n\n----------------------------------------\n\nTITLE: Defining SectionTool Events in TypeScript\nDESCRIPTION: Enumerates the events that can be emitted by the SectionTool extension.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nenum SectionToolEvent {\n  DragStart = \"section-box-drag-start\",\n  DragEnd = \"section-box-drag-end\",\n  Updated = \"section-box-changed\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateFlags Enum in TypeScript\nDESCRIPTION: Enum defining bit flags for different rendering update aspects using binary values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nenum UpdateFlags {\n  RENDER = 0b1,\n  SHADOWS = 0b10,\n  CLIPPING_PLANES = 0b100,\n  RENDER_RESET = 0b1000\n}\n```\n\n----------------------------------------\n\nTITLE: BatchUpdateRange Interface Definition\nDESCRIPTION: Interface defining a region in a batch, representing either a specific object or an index range spanning multiple objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BatchUpdateRange {\n  offset: number;\n  count: number;\n  material?: Material;\n  materialOptions?: FilterMaterialOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtendedShapeCastCallbacks Type in TypeScript\nDESCRIPTION: Defines the ExtendedShapeCastCallbacks type, which extends the three-mesh-bvh shapecast callbacks with additional top-level acceleration structure stages. It includes various callback functions for intersection testing and traversal.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ExtendedShapeCastCallbacks = {\n  intersectsTAS?: (\n    box: Box3,\n    isLeaf: boolean,\n    score: number | undefined,\n    depth: number,\n    nodeIndex: number\n  ) => ShapecastIntersection | boolean;\n  intersectTASRange?: (\n    batchObject: BatchObject\n  ) => ShapecastIntersection | boolean;\n  intersectsBounds: (\n    box: Box3,\n    isLeaf: boolean,\n    score: number | undefined,\n    depth: number,\n    nodeIndex: number\n  ) => ShapecastIntersection | boolean;\n\n  traverseBoundsOrder?: (box: Box3) => number;\n} & (\n  | {\n      intersectsRange: (\n        triangleOffset: number,\n        triangleCount: number,\n        contained: boolean,\n        depth: number,\n        nodeIndex: number,\n        box: Box3\n      ) => boolean;\n    }\n  | {\n      intersectsTriangle: (\n        triangle: ExtendedTriangle,\n        triangleIndex: number,\n        contained: boolean,\n        depth: number,\n        batchObject?: BatchObject\n      ) => boolean | void;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Banner HTML for PowerBI Visual Documentation\nDESCRIPTION: HTML structure for displaying an important notice banner about the V2 PowerBI data connector and model viewer visual, with styling for emphasis and next generation announcement.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/powerbi-visual/general-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"banner-ribbon\">\n  <span><b>Important</b>: This guide features the V2 PowerBI data connector and model viewer visual.</span>\n  <span class=\"next-gen\">Next Gen is on its way, radically changing how the PowerBI connector works!</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining PointQueryResult Interface in TypeScript\nDESCRIPTION: Interface defining the result structure for point queries, containing coordinate components with optional z and w values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/queries-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PointQueryResult {\n  x: number\n  y: number\n  z?: number\n  w?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Checking pgAdmin Docker Container Status\nDESCRIPTION: Command to check if pgAdmin container is running using Docker's ps command with filter\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps --filter name='pgadmin'\n```\n\n----------------------------------------\n\nTITLE: Embedding Stream Preview URLs in Markdown\nDESCRIPTION: Examples of how to embed Speckle preview images in markdown documents. Shows the syntax for including both commit and object previews using image tags.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-stream-previews.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![speckle haus commit](https://app.speckle.systems/preview/3073b96e86/commits/604bea8cc6)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n![speckle haus object](https://app.speckle.systems/preview/3073b96e86/objects/1a2a5fd7ff5c6e6b2382f513d19eb3d5)\n```\n\n----------------------------------------\n\nTITLE: Getting Clear Color Value - TypeScript\nDESCRIPTION: Gets the current clear color value for the pass represented as a number with RGB components encoded as bitwise values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/g-pass-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget clearColor(): number | undefined\n```\n\n----------------------------------------\n\nTITLE: Setting Visible Range Method Definition\nDESCRIPTION: Method to set visibility of objects within the batch. Implementation specific with constraints for mesh batches.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisibleRange(range: BatchUpdateRange[]): void\n```\n\n----------------------------------------\n\nTITLE: Cancelling RenderTree Build in TypeScript\nDESCRIPTION: Cancels any ongoing tree building operations. If no building is in progress, this method has no effect.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ncancelBuild(): void\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Intersection Interface in TypeScript\nDESCRIPTION: Interface extending Three.js's default Intersection type with additional properties for batch objects and point materials.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/intersections-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExtendedIntersection extends Intersection {\n  batchObject?: BatchObject;\n  pointOnLine?: Material;\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Enable/Disable Toggle - TypeScript\nDESCRIPTION: Accessor methods to get or set whether the camera extension is enabled.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget enabled(): boolean\nset enabled(val: boolean)\n```\n\n----------------------------------------\n\nTITLE: LoaderEvent Enum Definition in TypeScript\nDESCRIPTION: Enumeration of basic events that Loader implementations should use, including progress, cancellation, and warning events.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loader-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum LoaderEvent {\n  LoadProgress = 'load-progress',\n  LoadCancelled = 'load-cancelled',\n  LoadWarning = 'load-warning'\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Speckle Sharp Repository Structure\nDESCRIPTION: A text-based tree diagram showing the structure of the speckle-sharp repository, which contains the .NET SDK, various connectors (Rhino, Revit, Grasshopper, Dynamo, AutoCAD Civil), desktop UI, and Objects components.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n└── speckle-sharp\n    ├── core\n    ├── connector revit\n    ├── connector rhino\n    ├── connector dynamo\n    ├── connector grasshopper\n    ├── connector autocadcivil\n    ├── desktopui\n    └── objects\n        ├── objects\n        └── converters\n            ├── revit\n            ├── rhinogh\n            ├── dynamo\n            └── autocadcivil\n```\n\n----------------------------------------\n\nTITLE: Defining SpeckleConverterComponent Class in C++\nDESCRIPTION: Declaration of the SpeckleConverterComponent class, which provides conversion functionality for Speckle objects to native UE Actors. This class uses modular converter logic implemented through the ISpeckleConverter interface.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nclass SpeckleConverterComponent : public UActorComponent\n{\n    // Implementation details not shown\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Instances Method\nDESCRIPTION: Returns all instances in a specified subtree grouped by their instance IDs.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetInstances(subtree: string): { [id: string]: Record<string, TreeNode> }\n```\n\n----------------------------------------\n\nTITLE: Pipeline Reset Method\nDESCRIPTION: Method to reset the pipeline to its initial state.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nreset(): void\n```\n\n----------------------------------------\n\nTITLE: Setting Draw Ranges Method Definition\nDESCRIPTION: Method to set materials for specific objects in the batch using draw ranges.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetDrawRanges(ranges: BatchUpdateRange[]): void\n```\n\n----------------------------------------\n\nTITLE: Getting Node Count Accessor\nDESCRIPTION: Accessor that returns the total number of nodes in the tree.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/world-tree-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget nodeCount(): number\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instances in RenderTree (TypeScript)\nDESCRIPTION: Calls the underlying WorldTree getInstances method with the render tree's id as the argument.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/render-tree-api.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetInstances(): { [id: string]: Record<string, TreeNode> }\n```\n\n----------------------------------------\n\nTITLE: Defining Default Selection Extension Options in TypeScript\nDESCRIPTION: Specifies the default options for the SelectionExtension, including default selection material properties.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/selection-extension-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst DefaultSelectionExtensionOptions: SelectionExtensionOptions = {\n  selectionMaterialData: {\n    id: MathUtils.generateUUID(),\n    color: 0x047efb,\n    opacity: 1,\n    roughness: 1,\n    metalness: 0,\n    vertexColors: false,\n    lineWeight: 1,\n    stencilOutlines: true,\n    pointSize: 4,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Material Method in TypeScript\nDESCRIPTION: Method implementation for retrieving the material for a specific render view.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetMaterial(renderView: NodeRenderView): Material\n```\n\n----------------------------------------\n\nTITLE: Initializing ProgressivePipeline Constructor in TypeScript\nDESCRIPTION: Constructor for the ProgressivePipeline class, taking a SpeckleRenderer instance as a parameter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/progressive-pipeline-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(speckleRenderer: SpeckleRenderer)\n```\n\n----------------------------------------\n\nTITLE: Getting AllObjects in SpeckleRenderer\nDESCRIPTION: Accessor to get the parent three.js object for all loaded scene content.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-renderer-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget allObjects(): Object3D\n```\n\n----------------------------------------\n\nTITLE: Filtering State Type Definition\nDESCRIPTION: Type definition for the FilteringState object that tracks the current state of all filtering operations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype FilteringState = {\n  selectedObjects?: string[];\n  hiddenObjects?: string[];\n  isolatedObjects?: string[];\n  colorGroups?: Record<string, string>[];\n  userColorGroups?: { ids: string[]; color: string }[];\n  activePropFilterKey?: string;\n  passMin?: number | null;\n  passMax?: number | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Remove Color Filter Method\nDESCRIPTION: Method to remove any active color filters from the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/filtering-extension-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nremoveColorFilter(): FilteringState\n```\n\n----------------------------------------\n\nTITLE: Defining Batch ID Property in TypeScript\nDESCRIPTION: Property definition for the unique identifier of the batch following three.js UUID format.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nid: string;\n```\n\n----------------------------------------\n\nTITLE: Accessing AccelerationStructure Property in TypeScript\nDESCRIPTION: Defines the accelerationStructure property, which represents the top-level AccelerationStructure built on top of the group of bottom-level BVHs. This structure is in world space.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\naccelerationStructure: AccelerationStructure;\n```\n\n----------------------------------------\n\nTITLE: Getting Bounding Box of Top-Level BVH in TypeScript\nDESCRIPTION: Implements the getBoundingBox method, which retrieves the axis-aligned bounding box (AABB) of the entire top-level BVH. It optionally takes a target Box3 and returns a Box3.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/top-level-acceleration-structure-api.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetBoundingBox(target?: Box3): Box3\n```\n\n----------------------------------------\n\nTITLE: Setting Radius in SmoothOrbitControls (TypeScript)\nDESCRIPTION: Method to set the radius value for the orbit controls.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/smooth-orbit-controls-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetRadius(radius: number): void\n```\n\n----------------------------------------\n\nTITLE: Defining options accessor in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract getter and setter for any options the controls implementation might need. Returns a partial record of string keys and unknown values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract get options(): Partial<Record<string, unknown>>\nabstract set options(value: Partial<Record<string, unknown>>)\n```\n\n----------------------------------------\n\nTITLE: Input Event Type Enumeration in TypeScript\nDESCRIPTION: Enumeration defining the available input event types including pointer events, clicks, and keyboard events.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/input-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum InputEvent {\n  PointerDown,\n  PointerUp,\n  PointerMove,\n  Click,\n  DoubleClick,\n  KeyUp,\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Speckle Server with Docker Compose\nDESCRIPTION: This bash command starts the Speckle Server and its dependencies using Docker Compose. It runs the containers in detached mode.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-manualsetup.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd /opt/speckle\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Getting camera position in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract method to get the current goal position of the control's target camera.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nabstract getPosition(): Vector3\n```\n\n----------------------------------------\n\nTITLE: Defining WorldClass in TypeScript\nDESCRIPTION: Class definition for World utility that manages world dimensions and coordinates for loaded objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass World {\n  readonly worldBox: Box3\n  get worldSize(): Box3\n  get worldOrigin(): Vector3\n\n  expandWorld(box: Box3)\n  reduceWorld(box: Box3)\n  updateWorld()\n  resetWorld()\n  getRelativeOffset(offsetAmount: number = 0.001): number\n```\n\n----------------------------------------\n\nTITLE: Accessing Base Uniforms in SpeckleMaterial\nDESCRIPTION: Getter for the base three.js uniforms of the material. Returns an object containing the uniforms.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprotected get baseUniforms(): { [uniform: string]: IUniform }\n```\n\n----------------------------------------\n\nTITLE: Accessing Vertex Positions in TypeScript\nDESCRIPTION: Retrieves the position of a specific vertex in the BVH's geometry. This allows direct access to geometry data without going through the three.js Geometry class.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetVertexAtIndex(index: number): Vector3\n```\n\n----------------------------------------\n\nTITLE: Getting Pipeline Passes\nDESCRIPTION: Method to retrieve all passes with a specified name.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetPass(name: string): GPass[]\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting SectionToolOutlines Enabled State in TypeScript\nDESCRIPTION: This code snippet shows how to get and set the 'enabled' state of the SectionToolOutlines extension. It uses a getter and setter to control whether the extension is active or not.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-outlines-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget enabled(): boolean\nset enabled(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Defining SpeckleView Type in TypeScript\nDESCRIPTION: Type definition for Speckle view configuration including name, ID, and view data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpeckleView = {\n  name: string;\n  id: string;\n  view: Record<string, unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Camera Field of View Control - TypeScript\nDESCRIPTION: Accessor methods to get or set the perspective camera's field of view.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget fieldOfView(): number\nset fieldOfView(value: number)\n```\n\n----------------------------------------\n\nTITLE: Accessing BVH and Geometry in TypeScript\nDESCRIPTION: Getter methods for accessing the backing BVH and associated three.js geometry. These provide access to the underlying data structures used by the acceleration structure.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget bvh(): MeshBVH\n```\n\nLANGUAGE: typescript\nCODE:\n```\nget geometry(): BufferGeometry\n```\n\n----------------------------------------\n\nTITLE: Getting camera target in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract method to get the current goal look position of the control's target camera.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nabstract getTarget(): Vector3\n```\n\n----------------------------------------\n\nTITLE: Camera Toggle - TypeScript\nDESCRIPTION: Method to switch between perspective and orthographic camera projections.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntoggleCameras(): void\n```\n\n----------------------------------------\n\nTITLE: Setting Point Size in SpeckleMaterial\nDESCRIPTION: Setter for the point size in point materials.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprotected set pointSize(value: number)\n```\n\n----------------------------------------\n\nTITLE: Defining Speckle Type Enumeration\nDESCRIPTION: Enum definition for various geometry types supported by the Speckle viewer, including 3D primitives, curves, and specialized types like RevitInstance.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/geometry-converter-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nenum SpeckleType {\n  View3D = \"View3D\",\n  BlockInstance = \"BlockInstance\",\n  Pointcloud = \"Pointcloud\",\n  Brep = \"Brep\",\n  Mesh = \"Mesh\",\n  Point = \"Point\",\n  Line = \"Line\",\n  Polyline = \"Polyline\",\n  Box = \"Box\",\n  Polycurve = \"Polycurve\",\n  Curve = \"Curve\",\n  Circle = \"Circle\",\n  Arc = \"Arc\",\n  Ellipse = \"Ellipse\",\n  RevitInstance = \"RevitInstance\",\n  Text = \"Text\",\n  Transform = \"Transform\",\n  Unknown = \"Unknown\",\n}\n```\n\n----------------------------------------\n\nTITLE: Enabled Property Accessor in TypeScript\nDESCRIPTION: Getter and setter methods to enable or disable the extension.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget enabled(): boolean\nset enabled(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Detaching Properties in Base Objects with @ Symbol in C#\nDESCRIPTION: Explains how to detach properties in Base objects by prepending @ to property names, which stores the property value as a reference to another object for efficient serialization.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/base.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Foo : Base { }\npublic class Bar : Base { }\n\nvar foo = new Foo();\nvar bar = new Bar();\n\nfoo[\"@bar\"] = bar;\n```\n\n----------------------------------------\n\nTITLE: Enable Camera Rotations - TypeScript\nDESCRIPTION: Method to enable all camera controls rotation capabilities.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nenableRotations(): void\n```\n\n----------------------------------------\n\nTITLE: Accessing Clear Alpha Value - TypeScript\nDESCRIPTION: Gets the current alpha clear value for the pass. Returns undefined if the pass does not clear alpha.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/g-pass-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget clearAlpha(): number | undefined\n```\n\n----------------------------------------\n\nTITLE: Getting Clear Flags - TypeScript\nDESCRIPTION: Gets the WebGL buffer clear flags that determine what gets cleared by the pass. Returns a bitmask of WebGL constants.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/g-pass-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget clearFlags(): number | undefined\n```\n\n----------------------------------------\n\nTITLE: Accessing SelectionExtension Properties in TypeScript\nDESCRIPTION: Demonstrates how to get and set the 'enabled' and 'options' properties of the SelectionExtension class.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/selection-extension-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget enabled(): boolean\nset enabled(value: boolean)\n\nget options(): SelectionExtensionOptions\nset options(value: SelectionExtensionOptions)\n```\n\n----------------------------------------\n\nTITLE: Jumping to goal in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract method to immediately set the control's target camera position and rotation to their goal values, skipping any potential camera animation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nabstract jumpToGoal(): void\n```\n\n----------------------------------------\n\nTITLE: Setting Orbit in SmoothOrbitControls (TypeScript)\nDESCRIPTION: Method to set the absolute orbital goal of the camera. The change is applied over multiple frames based on the configured dampening value.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/smooth-orbit-controls-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetOrbit(\n    goalTheta?: number,\n    goalPhi?: number,\n    goalRadius?: number\n): boolean\n```\n\n----------------------------------------\n\nTITLE: Copying Material Properties in SpeckleMaterial\nDESCRIPTION: Method to copy properties from one Material to another, optimized for the viewer's needs.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfastCopy(from: Material, to: Material)\n```\n\n----------------------------------------\n\nTITLE: Remove Measurement Method in TypeScript\nDESCRIPTION: Method to remove any currently ongoing measurements.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMeasurement(): void\n```\n\n----------------------------------------\n\nTITLE: Accessing Viewer Utils Property\nDESCRIPTION: Getter method to access the Utils interface of the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget Utils(): Utils\n```\n\n----------------------------------------\n\nTITLE: Building Speckle Viewer Package\nDESCRIPTION: Commands for installing dependencies and building the Speckle Viewer package in the web monorepo.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/quickstart.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/viewer\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Disposing Node Geometry Data\nDESCRIPTION: Abstract method that handles cleanup and disposal of node geometry data.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/geometry-converter-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nabstract disposeNodeGeometryData(node: NodeData): void\n```\n\n----------------------------------------\n\nTITLE: Implementing ProgressivePipeline Accessor in TypeScript\nDESCRIPTION: Getter method for retrieving all passes from the three rendering stages combined.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/progressive-pipeline-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget passes(): Array<GPass>;\n```\n\n----------------------------------------\n\nTITLE: Accessing SectionTool Enabled State in TypeScript\nDESCRIPTION: Gets or sets the enabled state of the SectionTool extension.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget enabled(): boolean\nset enabled(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Initializing Avalonia DesktopUI for Speckle Connector\nDESCRIPTION: Code for instantiating and launching the Speckle DesktopUI using Avalonia framework. Includes window management and application building configuration.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/connectors-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static Window MainWindow { get; private set; }\n\npublic static AppBuilder BuildAvaloniaApp() => AppBuilder.Configure<DesktopUI2.App>()\n  .UsePlatformDetect()\n  .With(new SkiaOptions { MaxGpuResourceSizeBytes = 8096000 })\n  .With(new Win32PlatformOptions { AllowEglInitialization = true, EnableMultitouch = false })\n  .LogToTrace()\n  .UseReactiveUI();\n\nprotected override Result Command()\n{\n  CreateOrFocusSpeckle();\n  return Result.Success;\n}\n\npublic static void CreateOrFocusSpeckle()\n{\n  if (MainWindow == null)\n  {\n    BuildAvaloniaApp().Start(AppMain, null);\n  }\n\n  MainWindow.Show();\n}\n\nprivate static void AppMain(Application app, string[] args)\n{\n  var viewModel = new MainWindowViewModel();\n  MainWindow = new MainWindow\n  {\n    DataContext = viewModel\n  };\n\n  Task.Run(() => app.Run(MainWindow));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Damper Decay Time in SmoothOrbitControls (TypeScript)\nDESCRIPTION: Method to set the dampening values for the control. A larger value smoothens out the camera's movement.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/smooth-orbit-controls-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetDamperDecayTime(decayMilliseconds: number)\n```\n\n----------------------------------------\n\nTITLE: Enabling Stencil Outlines in SpeckleMaterial\nDESCRIPTION: Setter to enable stencil outlines for the material.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprotected set stencilOutline(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Setting Clipping Planes\nDESCRIPTION: Method to propagate clipping planes to the pipeline's constituent passes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsetClippingPlanes(planes: Plane[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining IntersectionQuery Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure for intersection queries that test for geometry intersections or occlusions. Extends the base Query interface and includes point coordinates, optional tolerance, and operation type.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/queries-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IntersectionQuery extends Query {\n  point: { x: number; y: number; z?: number; w?: number }\n  tolerance?: number\n  operation: 'Occlusion' | 'Pick'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Utils Interface in TypeScript\nDESCRIPTION: Interface defining utility methods for coordinate space conversion between screen and NDC.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Utils {\n  screenToNDC(\n    x: number,\n    y: number,\n    width?: number,\n    height?: number\n  ): { x: number; y: number };\n  NDCToScreen(\n    x: number,\n    y: number,\n    width?: number,\n    height?: number\n  ): { x: number; y: number };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Batch Buffers Method Definition\nDESCRIPTION: Method to update batch buffers based on MaterialOptions from BatchUpdateRange. Implementation specific.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetBatchBuffers(range: BatchUpdateRange[]): void\n```\n\n----------------------------------------\n\nTITLE: Managing Frame Index in ProgressiveGPass\nDESCRIPTION: Getter and setter for tracking the current frame index within the convergence/accumulation cycle.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/progressive-g-pass-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget frameIndex(): number \nset frameIndex(value: number) \n```\n\n----------------------------------------\n\nTITLE: Abstract Load Method in TypeScript\nDESCRIPTION: Abstract method that handles resource loading and returns a promise indicating success or failure.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loader-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nabstract load(): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining QueryArgsResultMap Type in TypeScript\nDESCRIPTION: Type definition mapping query operations to their corresponding result types, supporting extensibility through index signature.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/queries-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype QueryArgsResultMap = {\n  Project: PointQueryResult\n  Unproject: PointQueryResult\n  Occlusion: IntersectionQueryResult\n  Pick: IntersectionQueryResult\n} & { [key: string]: unknown }\n```\n\n----------------------------------------\n\nTITLE: Adjusting Orbit in SmoothOrbitControls (TypeScript)\nDESCRIPTION: Method to adjust the current controller's target camera spherical coordinates by providing deltas for theta, phi, and zoom.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/smooth-orbit-controls-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nadjustOrbit(deltaTheta: number, deltaPhi: number, deltaZoom: number): void\n```\n\n----------------------------------------\n\nTITLE: Defining Mesh Intersection Interface in TypeScript\nDESCRIPTION: Basic interface extending Intersection type with face-specific properties for mesh intersections.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/intersections-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MeshIntersection extends Intersection {\n  face: Face\n  faceIndex: number\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Speckle Server via Helm\nDESCRIPTION: Command to deploy Speckle Server using Helm chart with custom values configuration. Creates a new namespace if it doesn't exist.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade my-speckle-server speckle/speckle-server \\\n --values values.yaml \\\n --namespace speckle \\\n --install --create-namespace \\\n --kube-context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variables for Speckle Testing\nDESCRIPTION: List of required environment variables for setting up test automations in Speckle Automate. These variables are essential for connecting to the Speckle server and identifying the test automation resources.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/function-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSPECKLE_TOKEN\nSPECKLE_SERVER_URL\nSPECKLE_PROJECT_ID\nSPECKLE_AUTOMATION_ID\n```\n\n----------------------------------------\n\nTITLE: Configuring BVH Construction Options in TypeScript\nDESCRIPTION: Interface definition for options used when constructing a new BVH. This allows customization of the BVH generation process for different performance characteristics.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BVHOptions {\n  strategy: SplitStrategy\n  maxDepth: number\n  maxLeafTris: number\n  verbose: boolean\n  useSharedArrayBuffer: boolean\n  setBoundingBox: boolean\n  onProgress?: () => void\n  [SKIP_GENERATION]: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SunLightConfiguration Interface in TypeScript\nDESCRIPTION: Interface extending LightConfiguration for sun light specific properties including elevation, azimuth, and radius.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SunLightConfiguration extends LightConfiguration {\n  elevation?: number;\n  azimuth?: number;\n  radius?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressivePipeline Properties in TypeScript\nDESCRIPTION: Declaration of protected properties for the ProgressivePipeline class, including flags and stage-related variables.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/progressive-pipeline-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprotected accumulating: boolean;\nprotected accumulationFrameCount: number;\nprotected accumulationFrameIndex: number;\nprotected dynamicStage: Array<GPass>;\nprotected progressiveStage: Array<GPass>;\nprotected passthroughStage: Array<GPass>;\n```\n\n----------------------------------------\n\nTITLE: Measurement Options Property Accessor in TypeScript\nDESCRIPTION: Getter and setter methods for the extension options configuration.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/measurements-tool-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget options(): MeasurementOptions\nset options(value: MeasurementOptions)\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayStyle Interface for Speckle Materials\nDESCRIPTION: Interface definition for material properties on lines, including id, color, lineWeight, and optional opacity.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DisplayStyle {\n  id: string;\n  color: number;\n  lineWeight: number;\n  opacity?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Configuration file content for storing Speckle application credentials and server settings as environment variables.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_5\n\nLANGUAGE: env\nCODE:\n```\n# The Speckle Application Id\nVUE_APP_SPECKLE_ID=YOUR_APP_ID \n\n# The Speckle Application Secret\nVUE_APP_SPECKLE_SECRET=YOUR_APP_SECRET\n\nVUE_APP_SERVER_URL=https://app.speckle.systems\nVUE_APP_SPECKLE_NAME=\"Speckle Demo App\"\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Speckle Viewer\nDESCRIPTION: Basic HTML structure with a container div element for the Speckle viewer. The container is identified with an ID 'renderer' which will be used to initialize the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/basic-example.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    ...\n  </head>\n\n  <body>\n    ...\n    <div id=\"renderer\">\n    ...\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining QueryResult Type in TypeScript\nDESCRIPTION: Union type for all possible query result types.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/queries-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype QueryResult = PointQueryResult | IntersectionQueryResult\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Ingress Controller\nDESCRIPTION: Deploys NGINX ingress controller with CertManager integration for managing external traffic and SSL termination.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncontroller:\n  replicaCount: 2\n  publishService:\n    enabled: true\n  config:\n    http2-max-concurrent-streams: \"512\"\n    use-http2: \"true\"\n    keep-alive-requests: \"1000\"\n```\n\n----------------------------------------\n\nTITLE: Python Function Execution Entry Point\nDESCRIPTION: This code shows the essential execution entry point for a Python-based Automate function. It demonstrates how to configure the main execution block to call the automate function with the proper input parameters.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/making-your-function.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    execute_automate_function(automate_function, FunctionInputs)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Tree Walking in WorldTree\nDESCRIPTION: Shows how to traverse the tree asynchronously using the walkAsync method.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-data.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nawait viewer.getWorldTree().walkAsync((node: TreeNode) => {\n    // do whatever is needed\n    return true\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Clear Operation in TypeScript Rendering Pass\nDESCRIPTION: Protected method for clearing render targets in a rendering pass. Takes a WebGLRenderer parameter from Three.js and returns void.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/base-g-pass-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprotected clear(renderer: WebGLRenderer)\n```\n\n----------------------------------------\n\nTITLE: Object Visibility Enum - TypeScript\nDESCRIPTION: Enum defining visibility categories for objects in the render pass.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/g-pass-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum ObjectVisibility {\n  OPAQUE = 'opaque',\n  TRANSPARENT = 'transparent',\n  DEPTH = 'depth',\n  STENCIL = 'stencil'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Viewer World Property\nDESCRIPTION: Getter method to access the World class instance of the viewer.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget World(): World\n```\n\n----------------------------------------\n\nTITLE: Defining Vector-like Types in TypeScript\nDESCRIPTION: Type definition for vector-like objects used in the acceleration structure. This provides a common interface for working with different vector types.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/acceleration-structure-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype VectorLike = { x: number; y: number; z?: number; w?: number };\n```\n\n----------------------------------------\n\nTITLE: Declaring ProceduralMeshConverter Class in C++\nDESCRIPTION: Header declaration for the ProceduralMeshConverter class, which creates a UProceduralMeshComponent from Speckle mesh objects. This converter allows for runtime editing of vertices and faces but is slower to render.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include \"Conversion/Converters/ProceduralMeshConverter.h\"\n\nclass ProceduralMeshConverter : public ISpeckleConverter\n{\n    // Implementation details not shown\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Objects in Speckle Viewer (TypeScript)\nDESCRIPTION: This snippet shows the method signature for loading objects in the Speckle viewer. It takes a Loader object as a parameter and returns a Promise.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loaders.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nloadObject(loader: Loader): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Priority Classes\nDESCRIPTION: Defines priority classes for Kubernetes resource management, establishing high, medium, and low priority levels for different service types.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: high-priority\nvalue: 100\nglobalDefault: false\ndescription: \"High priority (100) for business-critical services\"\n---\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: medium-priority\nvalue: 50\nglobalDefault: true\ndescription: \"Medium priority (50) - dev/test services\"\n---\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: low-priority\nvalue: -100\nglobalDefault: false\ndescription: \"Low priority (-100) - Non-critical microservices\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Updated Docker Compose\nDESCRIPTION: Command to deploy the Docker Compose file with updated Postgres version.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f ./docker-compose-deps.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Count Method in TypeScript\nDESCRIPTION: Method implementation for retrieving the batch's primitive count.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetCount(): number\n```\n\n----------------------------------------\n\nTITLE: Mapping SectionTool Event Payloads in TypeScript\nDESCRIPTION: Defines the payload types for different SectionTool events.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SectionToolEventPayload {\n  [SectionToolEvent.DragStart]: void\n  [SectionToolEvent.DragEnd]: void\n  [SectionToolEvent.Updated]: Plane[]\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Camera Events in TypeScript\nDESCRIPTION: Removes an event listener for camera events in the SectionTool.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/section-tool-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveListener(e: CameraEvent, handler: (data: unknown) => void)\n```\n\n----------------------------------------\n\nTITLE: Setting target camera in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract setter for the camera that will be controlled by this controls instance. Accepts only PerspectiveCamera or OrthographicCamera instances.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nabstract set targetCamera(target: PerspectiveCamera | OrthographicCamera)\n```\n\n----------------------------------------\n\nTITLE: Disposing SpeckleControls (TypeScript)\nDESCRIPTION: Abstract method to dispose of the controls implementation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nabstract dispose(): void\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secrets for Speckle Server\nDESCRIPTION: Creates a Kubernetes secret to store sensitive configuration values including Redis, Postgres, S3, session and email credentials. These secrets are stored in the speckle namespace.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic server-vars \\\n  --context \"${YOUR_CLUSTER_CONTEXT_NAME}\" \\\n  --namespace speckle \\\n  --from-literal=redis_url=\"${YOUR_REDIS_CONNECTION_STRING}\" \\\n  --from-literal=postgres_url=\"${YOUR_POSTGRES_CONNECTION_STRING}\" \\\n  --from-literal=s3_secret_key=\"${YOUR_SPACES_SECRET}\" \\\n  --from-literal=session_secret=\"${YOUR_SECRET}\" \\\n  --from-literal=email_password=\"${YOUR_EMAIL_SERVER_PASSWORD}\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Secret Details\nDESCRIPTION: Commands to verify and view secret contents in the Kubernetes cluster, including options to view specific secret values and edit existing secrets.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret server-vars --namespace speckle --context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret server-vars --context \"${YOUR_CLUSTER_CONTEXT_NAME}\" \\\n  --namespace speckle \\\n  --output jsonpath='{.data.redis_url}' | base64 --decode\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl edit secrets server-vars --namespace speckle --context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Starting pgAdmin with Docker Compose\nDESCRIPTION: Command to start pgAdmin container in detached mode using Docker Compose\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose --file docker-compose-pgadmin.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Defining PropertyInfo Interface in TypeScript\nDESCRIPTION: Interface defining the structure of property information with key, object count, and type fields.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PropertyInfo {\n  key: string;\n  objectCount: number;\n  type: \"number\" | \"string\";\n}\n```\n\n----------------------------------------\n\nTITLE: Speckle Renderer Property Definition\nDESCRIPTION: Protected property that stores the hosting speckle renderer instance.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprotected speckleRenderer: SpeckleRenderer;\n```\n\n----------------------------------------\n\nTITLE: Pass Options Interface - TypeScript\nDESCRIPTION: Empty interface that concrete pass implementations can extend to define their options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/g-pass-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PassOptions {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuex Store for Speckle Authentication in JavaScript\nDESCRIPTION: Sets up a Vuex store with actions for logging out, exchanging access code, and redirecting to authentication. This centralizes the authentication logic for use throughout the Vue.js application.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nimport {\n  exchangeAccessCode,\n  getUserData,\n  goToSpeckleAuthPage,\n  speckleLogOut\n} from \"@/speckleUtils\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {},\n  getters: {},\n  mutations: {},\n  actions: {\n    logout(context) {\n      speckleLogOut()\n    },\n    exchangeAccessCode(context, accessCode) {\n      return exchangeAccessCode(accessCode)\n    },\n    redirectToAuth() {\n      goToSpeckleAuthPage()\n    }\n  },\n  modules: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Depth Method in TypeScript\nDESCRIPTION: Method implementation for retrieving the batch's depth pass update range.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetDepth(): BatchUpdateRange\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Cluster Contexts\nDESCRIPTION: This command lists all available Kubernetes cluster contexts, which is useful for identifying the correct cluster to use in subsequent commands.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl config get-contexts\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository\nDESCRIPTION: Command to update Helm repositories to fetch latest charts information.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Displaying Speckle Server Repository Structure\nDESCRIPTION: A text-based tree diagram showing the structure of the speckle-server repository, which contains the server backend, frontend web application, and 3D viewer components.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n└── speckle-server\n    ├── server\n    ├── frontend\n    └── viewer\n```\n\n----------------------------------------\n\nTITLE: Removing Postgres Container\nDESCRIPTION: Command to remove the Postgres container while preserving its volume.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker rm speckle-server-postgres-1\n```\n\n----------------------------------------\n\nTITLE: Building User Interface for Speckle SketchUp Connector\nDESCRIPTION: NPM commands to install dependencies and build the user interface for the Speckle SketchUp connector. These steps are part of the manual installation process.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/sketchup.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Initializing GeometryConverter Constructor\nDESCRIPTION: Default constructor for the GeometryConverter abstract class.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/geometry-converter-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor();\n```\n\n----------------------------------------\n\nTITLE: Polar View Type - TypeScript\nDESCRIPTION: Type definition for camera view using polar coordinates.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype PolarView = {\n  azimuth: number;\n  polar: number;\n  radius?: number;\n  origin?: Vector3;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Token Scopes in Speckle 2.0\nDESCRIPTION: This code snippet defines the available token scopes in Speckle 2.0. Each scope has a name and description that explains what actions it permits, such as setting up the server, managing tokens, working with streams, and accessing user information.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet coreModuleScopes = [\n  {\n    name: \"server:setup\",\n    description: \"Edit server information.\",\n  },\n  {\n    name: \"tokens:read\",\n    description: `Access your api tokens.`,\n  },\n  {\n    name: \"tokens:write\",\n    description: `Create and delete api tokens on your behalf.`,\n  },\n  {\n    name: \"streams:read\",\n    description:\n      \"Read your streams & and any associated information (branches, tags, comments, objects, etc.)\",\n  },\n  {\n    name: \"streams:write\",\n    description:\n      \"Create streams on your behalf and read your streams & any associated information (any associated information (branches, tags, comments, objects, etc.)\",\n  },\n  {\n    name: \"profile:read\",\n    description: `Read your profile information`,\n  },\n  {\n    name: \"profile:email\",\n    description: `Access your email.`,\n  },\n  {\n    name: \"users:read\",\n    description: `Read other users' profile on your behalf.`,\n  },\n  {\n    name: \"users:email\",\n    description: \"Access the emails of other users.\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Updating SpeckleControls (TypeScript)\nDESCRIPTION: Abstract method for the control's update loop. Takes an optional delta parameter for frame delta time.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nabstract update(delta?: number): boolean\n```\n\n----------------------------------------\n\nTITLE: Filtering by ApplicationId Using JSON Query Variable\nDESCRIPTION: This JSON object defines a query filter to match objects by their applicationId property. Used as a variable in GraphQL queries to target specific Revit elements with a unique identifier.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-graphql-api.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"myQuery\": [\n        {\n            \"field\":\"applicationId\",\n            \"value\":\"6cbabf1d-e8d0-47f0-ac4d-9a7923128d37-0006fb07\",\n            \"operator\":\"=\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing cURL Request for Function Creation\nDESCRIPTION: This command is used to make a POST request to create a new Function in Speckle Automate. It's provided as a workaround for a known limitation in the Interactive API Docs.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/automate/register-existing-function-repository.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v --request POST https://automate.speckle.dev/api/v1/functions\n```\n\n----------------------------------------\n\nTITLE: Copying Backup File to pgAdmin Container\nDESCRIPTION: Docker command to copy backup file into pgAdmin container storage.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp BACKUP_FILE_NAME speckle-server-pgadmin-1:'/var/lib/pgadmin/storage/admin_localhost.com/'\n```\n\n----------------------------------------\n\nTITLE: Removing Postgres Volume\nDESCRIPTION: Command to remove the Postgres Docker volume before upgrade.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume rm speckle-server_postgres-data\n```\n\n----------------------------------------\n\nTITLE: Defining enabled accessor in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract getter and setter for the enabled state of the controls. Returns a boolean indicating if the controls are enabled.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nabstract get enabled(): boolean\nabstract set enabled(value: boolean)\n```\n\n----------------------------------------\n\nTITLE: Drawing Size Property Definition\nDESCRIPTION: Protected property that stores the final display size for the pipeline in pixels with DPR factored in.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprotected drawingSize: Vector2;\n```\n\n----------------------------------------\n\nTITLE: Clear Flags Enum - TypeScript\nDESCRIPTION: Enum defining WebGL constants for buffer clearing operations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/g-pass-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nenum ClearFlags {\n  COLOR = 0x00000100,\n  DEPTH = 0x00000400,\n  STENCIL = 0x00004000\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Event Unsubscription - TypeScript\nDESCRIPTION: Method for unsubscribing from camera events by removing event handlers.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nremoveListener(e: CameraEvent, handler: (data: unknown) => void)\n```\n\n----------------------------------------\n\nTITLE: Pipeline Resize Method\nDESCRIPTION: Method to resize the pipeline with new dimensions, expecting final values with DPR factored in.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nresize(width: number, height: number): void\n```\n\n----------------------------------------\n\nTITLE: Room Parameter Structure Example\nDESCRIPTION: Example showing the JSON structure of a Revit room's parameter data after conversion to Speckle format. Includes internal Revit parameter names, display names, values, and metadata like shared and readonly status.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/revit/features.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ROOM_AREA\": {\n    \"name\": \"Area\",\n    \"value\": \"2233.64\",\n    \"isShared\": true,\n    \"isReadOnly\": true,\n    \"speckleType\": \"Objects.BuiltElements.Revit.Parameter\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Line Installation Arguments for Speckle Manager\nDESCRIPTION: Command line arguments for programmatically installing Speckle Manager. Options include silent installation and choosing between system-wide or local user installation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/installing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/SILENT /SUPPRESSMSGBOXES\n/ALLUSERS\n/CURRENTUSER\n```\n\n----------------------------------------\n\nTITLE: Checking Postgres Docker Container\nDESCRIPTION: Command to list Docker containers filtered by 'postgres' name to identify the Postgres container and version.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps --filter name='postgres'\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Namespaces\nDESCRIPTION: This command lists all namespaces in the specified Kubernetes cluster, allowing verification of the newly created 'speckle' namespace.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get namespace --context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Material Property in TypeScript\nDESCRIPTION: Definition of the batchMaterial property that specifies the default material for grouped batch objects.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbatchMaterial: Material;\n```\n\n----------------------------------------\n\nTITLE: Installing CertManager via Helm\nDESCRIPTION: Commands to install and configure CertManager for SSL certificate management using Let's Encrypt as the Certificate Authority.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add jetstack https://charts.jetstack.io\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade cert-manager jetstack/cert-manager --namespace cert-manager --version v1.8.0 --set installCRDs=true --install --create-namespace --kube-context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Abstract Cancel Method in TypeScript\nDESCRIPTION: Abstract method for canceling ongoing loading processes and cleaning up resources.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/loader-api.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nabstract cancel()\n```\n\n----------------------------------------\n\nTITLE: Python Script Library Import\nDESCRIPTION: Imports required Speckle libraries in Python script node using clr. Sets up references to netstandard and SpeckleCore2 assemblies.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/grasshopper.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport clr\nclr.AddReferenceToFileAndPath(\"C:\\\\Windows\\\\Microsoft.NET\\\\assembly\\\\GAC_MSIL\\\\netstandard\\\\v4.0_2.0.0.0__cc7b13ffcd2ddd51\\\\netstandard.dll\")\nclr.AddReferenceToFileAndPath(\"C:\\\\Users\\\\USERNAME\\\\AppData\\\\Roaming\\\\Grasshopper\\\\Libraries\\\\SpeckleGrasshopper2\\\\SpeckleCore2.dll\")\nimport Speckle.Core.Models.Base as Base\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Dependencies\nDESCRIPTION: Command to install additional npm packages including vuex-persist for state storage, vue2-timeago for date formatting, and debounce utility.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vuex-persist vue2-timeago debounce\n```\n\n----------------------------------------\n\nTITLE: Rhino Mapper Command\nDESCRIPTION: Command to open the Rhino Mapper interface for BIM element mapping.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/rhino.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSpeckleMappings\n```\n\n----------------------------------------\n\nTITLE: Starting Webpack Live Reload Server for Speckle Viewer Development\nDESCRIPTION: Command to start a webpack live reload server for development purposes. This allows access to an example at http://localhost:9000/example.html.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/js-old.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Container Output\nDESCRIPTION: Example output showing container details including ID, image version, and container name.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nCONTAINER ID   IMAGE                COMMAND                  CREATED       STATUS       PORTS                      NAMES\n510e024a4700   postgres:13-alpine   \"docker-entrypoint.s…\"   2 hours ago   Up 2 hours   127.0.0.1:5432->5432/tcp   speckle-server-postgres-1\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Speckle\nDESCRIPTION: This command creates a new namespace called 'speckle' in the specified Kubernetes cluster, isolating Speckle resources from other applications.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace speckle --context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Checking if camera is stationary in SpeckleControls (TypeScript)\nDESCRIPTION: Abstract method to determine whether the control's camera target is stationary or not.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-controls-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nabstract isStationary(): boolean\n```\n\n----------------------------------------\n\nTITLE: Stopping Postgres Container\nDESCRIPTION: Command to stop the Postgres Docker container before upgrade.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker stop speckle-server-postgres-1\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Vue.js development server which makes the application available at localhost:8080.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Layer Naming Convention for Received Data in AutoCAD/Civil 3D\nDESCRIPTION: When receiving geometry from Speckle projects in AutoCAD or Civil 3D, layers are created with a specific prefix format. The prefix contains project information, and any layer information from the incoming project is appended using AutoCAD's standard delimiter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/autocadcivil.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproject[ model @ version id ]\n```\n\n----------------------------------------\n\nTITLE: Defining Geometry Type Property in TypeScript\nDESCRIPTION: Property definition for the geometry type of the batch.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngeometryType: GeometryType;\n```\n\n----------------------------------------\n\nTITLE: Adding Vuetify UI Framework\nDESCRIPTION: Command to add Vuetify UI framework to the Vue.js project using Vue CLI add command.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/apps.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvue add vuetify\n```\n\n----------------------------------------\n\nTITLE: Building Speckle Viewer Library\nDESCRIPTION: Command to build the Speckle Viewer library for production use.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/js-old.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: PgAdmin Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for setting up pgAdmin with necessary environment variables, volumes and network settings\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  pgadmin:\n    image: dpage/pgadmin4\n    restart: always\n    environment:\n      PGADMIN_DEFAULT_EMAIL: 'admin@localhost.com'\n      PGADMIN_DEFAULT_PASSWORD: 'admin'\n    volumes:\n      - pgadmin-data:/var/lib/pgadmin\n    ports:\n      - '127.0.0.1:16543:80'\n\nnetworks:\n  default:\n    name: speckle-server\n\nvolumes:\n  pgadmin-data:\n```\n\n----------------------------------------\n\nTITLE: Configuring Let's Encrypt Certificate Issuers\nDESCRIPTION: Creates staging and production certificate issuers for Let's Encrypt integration with CertManager.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-staging\nspec:\n  acme:\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    email: ${YOUR_EMAIL_ADDRESS}\n    privateKeySecretRef:\n      name: letsencrypt-staging\n    solvers:\n    - http01:\n        ingress:\n          class:  nginx\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: ${YOUR_EMAIL_ADDRESS}\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class:  nginx\n```\n\n----------------------------------------\n\nTITLE: Defining Render Views Property in TypeScript\nDESCRIPTION: Property definition for the collection of render views that compose the batch.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/batch-api.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrenderViews: NodeRenderView[]\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Status\nDESCRIPTION: Command to check the status of all Docker containers.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Redirect Component for SketchUp Documentation\nDESCRIPTION: This code snippet uses a Vue Redirect component to automatically forward users from the current page to the official SketchUp connector documentation on the Speckle Systems website.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/redirect/sketchup.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<Redirect url=\"https://www.speckle.systems/connectors/sketchup\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Speckle Viewer via NPM\nDESCRIPTION: Command to install the @speckle/viewer package as a project dependency using npm. The --save flag adds it to package.json dependencies.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @speckle/viewer\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Speckle Server without Dependencies\nDESCRIPTION: This YAML file provides a Docker Compose configuration for running Speckle Server without bundled dependencies. It includes services for the ingress, frontend, server, and various microservices.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-manualsetup.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2.3\"\nservices:\n  speckle-ingress:\n    image: speckle/speckle-docker-compose-ingress:2\n    restart: always\n    ports:\n      - \"0.0.0.0:80:8080\"\n    environment:\n      FILE_SIZE_LIMIT_MB: \"100\"\n      NGINX_ENVSUBST_OUTPUT_DIR: \"/etc/nginx\"\n\n  speckle-frontend-2:\n    image: speckle/speckle-frontend-2:2\n    restart: always\n    environment:\n      NUXT_PUBLIC_SERVER_NAME: \"local\"\n      # TODO: Change NUXT_PUBLIC_API_ORIGIN to the URL of the speckle server, as accessed from the network. This is the same value as should be used for the CANONICAL_URL in the server section below.\n      NUXT_PUBLIC_API_ORIGIN: \"http://127.0.0.1\"\n      NUXT_PUBLIC_BACKEND_API_ORIGIN: \"http://speckle-server:3000\"\n      # TODO: Change NUXT_PUBLIC_BASE_URL to the URL of the speckle frontend, as accessed from the network. This is the same value as should be used for the CANONICAL_URL in the server section below.\n      NUXT_PUBLIC_BASE_URL: \"http://127.0.0.1\"\n      NUXT_PUBLIC_LOG_LEVEL: 'warn'\n      NUXT_REDIS_URL: \"redis://redis\"\n\n  speckle-server:\n    image: speckle/speckle-server:2\n    restart: always\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"/nodejs/bin/node\",\n          \"-e\",\n          \"try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }\",\n        ]\n      interval: 10s\n      timeout: 3s\n      retries: 30\n    environment:\n      # TODO: Change this to the URL of the speckle server, as accessed from the network\n      CANONICAL_URL: \"http://127.0.0.1\"\n\n      # TODO: Change this to a unique secret for this server\n      SESSION_SECRET: \"TODO:ReplaceWithLongString\"\n\n      STRATEGY_LOCAL: \"true\"\n      DEBUG: \"speckle:*\"\n\n      # TODO: Change to PostgreSQL connection details:\n      POSTGRES_URL: \"postgres\"\n      POSTGRES_USER: \"speckle\"\n      POSTGRES_PASSWORD: \"speckle\"\n      POSTGRES_DB: \"speckle\"\n\n      # TODO: Change to redis connection string:\n      REDIS_URL: \"redis://redis\"\n\n      # TODO: Change to ObjectStorage connection information (s3-compatible):\n      S3_ENDPOINT: \"http://minio:9000\"\n      S3_ACCESS_KEY: \"minioadmin\"\n      S3_SECRET_KEY: \"minioadmin\"\n      S3_BUCKET: \"speckle-server\"\n\n      # TODO: Change this to the URL of the speckle server, as accessed from the network\n      FRONTEND_ORIGIN: \"http://127.0.0.1\"\n\n  preview-service:\n    image: speckle/speckle-preview-service:2\n    restart: always\n    depends_on:\n      speckle-server:\n        condition: service_healthy\n    mem_limit: \"1000m\"\n    memswap_limit: \"1000m\"\n    environment:\n      DEBUG: \"preview-service:*\"\n\n      # TODO: Change to PostgreSQL connection string:\n      PG_CONNECTION_STRING: \"postgres://speckle:speckle@postgres/speckle\"\n\n  webhook-service:\n    image: speckle/speckle-webhook-service:2\n    restart: always\n    depends_on:\n      speckle-server:\n        condition: service_healthy\n    environment:\n      DEBUG: \"webhook-service:*\"\n\n      # TODO: Change to PostgreSQL connection string:\n      PG_CONNECTION_STRING: \"postgres://speckle:speckle@postgres/speckle\"\n\n  fileimport-service:\n    image: speckle/speckle-fileimport-service:2\n    restart: always\n    depends_on:\n      speckle-server:\n        condition: service_healthy\n    environment:\n      DEBUG: \"fileimport-service:*\"\n      SPECKLE_SERVER_URL: \"http://speckle-server:3000\"\n\n      # TODO: Change to PostgreSQL connection string:\n      PG_CONNECTION_STRING: \"postgres://speckle:speckle@postgres/speckle\"\n\n      # TODO: Change to ObjectStorage connection information (s3-compatible):\n      S3_ENDPOINT: \"http://minio:9000\"\n      S3_ACCESS_KEY: \"minioadmin\"\n      S3_SECRET_KEY: \"minioadmin\"\n      S3_BUCKET: \"speckle-server\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Speckle SketchUp Connector Repository\nDESCRIPTION: Git command to clone the Speckle SketchUp connector repository. This is the first step in the manual installation process.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/sketchup.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/specklesystems/speckle-sketchup\n```\n\n----------------------------------------\n\nTITLE: Object Download Response Format\nDESCRIPTION: Example of the text/plain response format for object downloads, showing the tab-separated format of object_id and content.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-rest-api.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{object_id}\\t{object_content}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Layers Enum\nDESCRIPTION: Enumeration defining different rendering layers for various object types and functionality.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-api.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nenum ObjectLayers {\n  STREAM_CONTENT_MESH = 10,\n  STREAM_CONTENT_LINE = 11,\n  STREAM_CONTENT_POINT = 12,\n  STREAM_CONTENT_TEXT = 13,\n  STREAM_CONTENT_POINT_CLOUD = 14,\n\n  NONE = 0,\n  STREAM_CONTENT = 1,\n  PROPS = 2,\n  SHADOWCATCHER = 3,\n  OVERLAY = 4,\n  MEASUREMENTS = 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Frontend with Viewer\nDESCRIPTION: Commands for bootstrapping the Frontend package with the Viewer using Lerna package manager.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/quickstart.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/frontend\nlerna bootstrap\n```\n\n----------------------------------------\n\nTITLE: Navigating to Repository Directory\nDESCRIPTION: Command to change directory to the cloned repository.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncd speckle-server\n```\n\n----------------------------------------\n\nTITLE: Adding Speckle Helm Repository\nDESCRIPTION: Command to add the Speckle Helm repository to your local Helm configuration.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add speckle https://specklesystems.github.io/helm\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Method\nDESCRIPTION: Render method called after the viewer's main render cycle completes.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/extension-api.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonRender()\n```\n\n----------------------------------------\n\nTITLE: Listing Postgres Volumes\nDESCRIPTION: Command to list Docker volumes filtered by 'postgres' name.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-database-migration.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume ls --filter name='postgres'\n```\n\n----------------------------------------\n\nTITLE: Locating SketchUp Plugins Folder (Windows)\nDESCRIPTION: Example path for the SketchUp Plugins folder on Windows. Users need to replace {YOU} with their username and {SketchUp_VERSION} with their SketchUp version number.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/sketchup/manual-installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nC:\\Users\\{YOU}\\AppData\\Roaming\\SketchUp\\`{SketchUp_VERSION}\\SketchUp\\Plugins\n```\n\n----------------------------------------\n\nTITLE: Notice Banner HTML Component\nDESCRIPTION: HTML component displaying a notice banner about V2 connectors and upcoming Next Gen connectors. Uses a banner-ribbon class for styling with nested spans for content organization.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/connectors.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"banner-ribbon\">\n  <span><b>Notice</b>: This user guide is based on V2 connectors.</span>\n  <span class=\"next-gen\">Next Gen connectors are coming soon, bringing significant changes to the documentation and features!</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining StencilOutlineType Enum for Speckle Materials\nDESCRIPTION: Enum defining the types of stencil outlines available for Speckle materials.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/speckle-material-api.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nenum StencilOutlineType {\n  NONE,\n  OVERLAY,\n  OUTLINE_ONLY,\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Redirection Component Implementation\nDESCRIPTION: Frontmatter configuration and Vue component to redirect users to the Speckle community website.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/redirect/community.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar: false\n---\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Redirect url=\"https://speckle.community/\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Speckle Deployment\nDESCRIPTION: This command creates a directory for the Speckle deployment on the system.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-manualsetup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/speckle/\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Payload Structure in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of a typical webhook payload in Speckle. It includes fields such as streamId, userId, activityMessage, and detailed event data. The payload structure remains consistent, with variations in the event.data field based on the triggering event.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-webhooks.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"streamId\": \"48364aff6b\",\n    \"userId\": \"1234abcdef\",\n    \"activityMessage\": \"Stream metadata changed\",        \n    \"event\": {\n        \"event_name\": \"stream_update\",\n        \"data\": {\n            \"old\": {\n                \"id\": \"48364aff6b\",\n                \"name\": \"Golden Nugget \\ud83c\\udf3b\",    \n                \"description\": \"revit model\",\n                \"isPublic\": false,\n                \"clonedFrom\": null,\n                \"createdAt\": \"2021-06-29T09:09:02.993Z\", \n                \"updatedAt\": \"2021-07-23T14:17:18.660Z\"  \n            },\n            \"new\": {\n                \"id\": \"48364aff6b\",\n                \"name\": \"Golden Nugget \\ud83c\\udf3b\",    \n              \"description\": \"revit model for cool and \ngood times \\ud83c\\udf1e\",\n                \"isPublic\": true\n            }\n        }\n    },\n    \"server\": { ... },\n    \"stream\": { ... },\n    \"user\": { ... },\n    \"webhook\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Paths for Revit Plugin Locations\nDESCRIPTION: Lists the common directory paths where Revit plugins can be installed and where DLL conflicts might occur. These paths should be checked when troubleshooting plugin conflicts.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/FAQs.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n%appdata%\\Autodesk\\Revit\\Addins\\                 NOTE: the variable \"%appdata%\"\" can be copy/pasted in your windows explorer window\n%appdata%\\Autodesk\\ApplicationPlugins\\\nC:\\ProgramData\\Autodesk\\Revit\\Addins\\\nC:\\ProgramData\\Autodesk\\ApplicationPlugins\\\nC:\\Program Files\\Autodesk\\Revit 20XX\\AddIns\\\n%appdata%\\Dynamo\\Dynamo Revit\\2.XX\\packages\\     NOTE: dynamo plugins can conflict too!\n```\n\n----------------------------------------\n\nTITLE: Updating Speckle Configuration\nDESCRIPTION: Command to update an existing Speckle Server deployment with new configuration values.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade my-speckle-server --values values.yaml --kube-context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Typora\nDESCRIPTION: YAML frontmatter configuration for Typora document specifying image copy directory.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntypora-copy-images-to: img-interop\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Stackblitz Project in Vue Component\nDESCRIPTION: This code snippet shows how to embed a Stackblitz project within a Vue component. It specifies the project ID, height, initial file to open, view mode, and UI options.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/object-manipulation-example.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<Stackblitz projectId='speckle-extended-selection' :embedOptions=\"{ \n    height: 500,\n    openFile: 'src/main.ts',\n    view: 'preview',\n    hideExplorer: true,\n    hideNavigation: true }\" \n/>\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Deployments\nDESCRIPTION: Command to verify the status of all deployed Helm charts across all namespaces.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nhelm list --all-namespaces --kube-context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Camera Projection Enum - TypeScript\nDESCRIPTION: Enumeration of camera projection types.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/camera-controller-api.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraProjection {\n  PERSPECTIVE,\n  ORTHOGRAPHIC,\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Node Connectivity\nDESCRIPTION: This command retrieves and displays the nodes in the specified Kubernetes cluster, confirming successful connection and cluster setup.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-setup-k8s.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes --context \"${YOUR_CLUSTER_CONTEXT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Parse Method for Custom Object Model in C++\nDESCRIPTION: Example of implementing the Parse method for a custom Object Model in C++. This method is responsible for deserializing JSON data into the object's properties.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nbool UMyObjectModel::Parse(const TSharedPtr<FJsonObject> Obj, const TScriptInterface<ITransport> ReadTransport)\n{\n\tif(!Super::Parse(Obj, ReadTransport)) return false;\n\n\t// Add your own JSON parsing here!\n\t// Remove explicit properties from DynamicProperties array\n\t\n\t// Simple example of parsing an optional number property:\n\tif(Obj->TryGetNumberField(\"myProperty\", MyProperty)) DynamicProperties.Remove(\"myProperty\");\n\t\n\t// Simple example of parsing an required number property:\n\tif(!Obj->TryGetNumberField(\"myProperty\", MyProperty)) return false; // Return false on error, rather than fatal assertions\n\tDynamicProperties.Remove(\"myProperty\");\n\t\n\t//Return true if parsed successfully\n\treturn true;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Objects by Parameter Value in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to filter objects based on parameter values. It selects only the parameter name and value fields from matched objects, allowing for targeted data retrieval based on numeric comparisons.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/dev/server-graphql-api.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery($myQuery:[JSONObject!]){\n    stream(id:\"c6b0c4077a\"){\n        object(id:\"0d0a4abc6a5fcc763e6c850dd3d5ecab\"){\n            totalChildrenCount\n            children(query: $myQuery select:[\"parameters[0]\".value, \"parameters[0].name\"]){\n                totalCount\n                cursor\n                objects{\n                    id\n                    data\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Speckle SketchUp UI\nDESCRIPTION: Commands to install dependencies and build the user interface for the Speckle SketchUp connector. This process creates an 'html' folder inside the 'speckle_connector' directory.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/sketchup/manual-installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Accessing Frame Accumulation Count in ProgressiveGPass\nDESCRIPTION: Getter and setter for managing the total number of frames needed for pass convergence/accumulation.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/progressive-g-pass-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget accumulationFrames(): number \nset accumulationFrames(value: number) \n```\n\n----------------------------------------\n\nTITLE: Cloning Speckle Unreal Repository\nDESCRIPTION: Git command to clone the Speckle Unreal plugin repository into your project's Plugins directory.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/unreal.md#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/specklesystems/speckle-unreal\n```\n\n----------------------------------------\n\nTITLE: Synchronous Tree Walking in WorldTree\nDESCRIPTION: Demonstrates how to traverse the tree synchronously using the walk method.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/viewer-data.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nviewer.getWorldTree().walk((node: TreeNode) => {\n    // do whatever is needed\n    return true\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Pipeline Constructor\nDESCRIPTION: Constructor for creating a new Pipeline instance that takes a SpeckleRenderer parameter.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(speckleRenderer: SpeckleRenderer)\n```\n\n----------------------------------------\n\nTITLE: Pipeline Render Callbacks\nDESCRIPTION: Callback methods for before and after pipeline rendering operations.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/viewer/rendering-pipeline-api/pipeline-api.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nonAfterPipelineRender(): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nonBeforePipelineRender(): void\n```\n\n----------------------------------------\n\nTITLE: Legacy Speckle Panel Command\nDESCRIPTION: Legacy command reference for opening the Speckle panel in older versions.\nSOURCE: https://github.com/specklesystems/speckle-docs/blob/main/user/rhino.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSpecklePanel\n```"
  }
]