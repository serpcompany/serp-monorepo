[
  {
    "owner": "mongodb",
    "repo": "motor",
    "content": "TITLE: Document Insertion with Motor\nDESCRIPTION: Demonstrates how to insert single and multiple documents into MongoDB using Motor's async methods\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def do_insert():\n    document = {\"key\": \"value\"}\n    result = await db.test_collection.insert_one(document)\n    print(\"result %s\" % repr(result.inserted_id))\n\nimport asyncio\nloop = client.get_io_loop()\nloop.run_until_complete(do_insert())\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Type Hints with Motor\nDESCRIPTION: Shows basic implementation of type hints with AsyncIOMotorClient using the default unspecified document type. This pattern allows Python type checkers to verify code correctness.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\n\nasync def main():\n    client: AsyncIOMotorClient = AsyncIOMotorClient()\n    collection = client.test.test\n    inserted = await collection.insert_one({\"x\": 1, \"tags\": [\"dog\", \"cat\"]})\n    retrieved = await collection.find_one({\"x\": 1})\n    assert isinstance(retrieved, dict)\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic CSFLE with Local Encryption Rules in Motor\nDESCRIPTION: Example demonstrating how to implement automatic client-side field level encryption using a schema map with local encryption rules. This approach provides enhanced security by not relying on server-provided JSON schemas.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/encryption.rst#2025-04-17_snippet_1\n\nLANGUAGE: python3\nCODE:\n```\n# auto_csfle_example.py\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with Motor\nDESCRIPTION: Examples of querying documents using find_one() and find() with async/await patterns\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def do_find_one():\n    document = await db.test_collection.find_one({\"i\": {\"$lt\": 1}})\n    pprint.pprint(document)\n\nasync def do_find():\n    cursor = db.test_collection.find({\"i\": {\"$lt\": 5}}).sort(\"i\")\n    for document in await cursor.to_list(length=100):\n        pprint.pprint(document)\n```\n\n----------------------------------------\n\nTITLE: Async Iteration Over Cursor\nDESCRIPTION: Shows how to use async for loops to iterate over MongoDB cursor results\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def do_find():\n    cursor = db.test_collection.find({\"i\": {\"$lt\": 4}})\n    cursor.sort(\"i\", -1).skip(1).limit(2)\n    async for document in cursor:\n        pprint.pprint(document)\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB Database with AsyncIOMotorClient in Python\nDESCRIPTION: Shows two equivalent ways to access a MongoDB database from an AsyncIOMotorClient instance: using dictionary-style notation or attribute-style notation. Both methods return an AsyncIOMotorDatabase instance for the specified database name.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/asyncio_motor_client.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient[db_name] || client.db_name\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Encryption in Motor with AsyncIOMotorClientEncryption\nDESCRIPTION: Example demonstrating explicit encryption implementation using the AsyncIOMotorClientEncryption class, which is available in MongoDB community edition and doesn't require the mongocryptd process.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/encryption.rst#2025-04-17_snippet_3\n\nLANGUAGE: python3\nCODE:\n```\n# explicit_encryption_example.py\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with Motor in Python\nDESCRIPTION: This snippet demonstrates how to find documents in a MongoDB collection using Motor. It queries for documents where 'i' is less than 5, sorts them, and prints the results.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def do_find():\n    cursor = db.test_collection.find({\"i\": {\"$lt\": 5}}).sort(\"i\")\n    for document in await cursor.to_list(length=100):\n        pprint.pprint(document)\n\nIOLoop.current().run_sync(do_find)\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents in MongoDB with Motor AsyncIO\nDESCRIPTION: This snippet demonstrates how to replace an entire document except its _id field using Motor's AsyncIOMotorCollection.replace_one method. It finds a document where the field 'i' equals 50, then replaces it with a new document containing only '_id' and 'key' fields.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def do_replace():\n    coll = db.test_collection\n    old_document = await coll.find_one({\"i\": 50})\n    print(\"found document: %s\" % pprint.pformat(old_document))\n    _id = old_document[\"_id\"]\n    result = await coll.replace_one({\"_id\": _id}, {\"key\": \"value\"})\n    print(\"replaced %s document\" % result.modified_count)\n    new_document = await coll.find_one({\"_id\": _id})\n    print(\"document is now %s\" % pprint.pformat(new_document))\n\nloop = client.get_io_loop()\nloop.run_until_complete(do_replace())\n```\n\n----------------------------------------\n\nTITLE: Using TypedDict with Motor Collections\nDESCRIPTION: Shows how to use TypedDict to define a schema for documents in a collection, providing better type checking for document fields while noting that _id is automatically added by MongoDB.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypedDict\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom motor.motor_asyncio import AsyncIOMotorCollection\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n\n\nasync def main():\n    client: AsyncIOMotorClient = AsyncIOMotorClient()\n    collection: AsyncIOMotorCollection[Movie] = client.test.test\n    inserted = await collection.insert_one(Movie(name=\"Jurassic Park\", year=1993))\n    result = await collection.find_one({\"name\": \"Jurassic Park\"})\n    assert result is not None\n    assert result[\"year\"] == 1993\n    # This will raise a type-checking error, despite being present, because it is added by Motor.\n    assert result[\"_id\"]  # type:ignore[typeddict-item]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of pymongo.timeout with Motor\nDESCRIPTION: Demonstrates how to use the pymongo.timeout context manager to set a 10-second timeout for an insert_one operation in Motor. This timeout applies to the entire operation including server selection, connection checkout, and execution.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/timeouts.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pymongo\nimport motor.motor_asyncio\nclient = motor.motor_asyncio.AsyncIOMotorClient()\ncoll = client.test.test\nwith pymongo.timeout(10):\n    await coll.insert_one({\"name\": \"Nunu\"})\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Document Insertion\nDESCRIPTION: Examples of inserting documents into MongoDB using Motor's async operations, including single and batch inserts\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def do_insert():\n    document = {\"key\": \"value\"}\n    result = await db.test_collection.insert_one(document)\n    print(\"result %s\" % repr(result.inserted_id))\n\nIOLoop.current().run_sync(do_insert)\n\nasync def do_insert():\n    for i in range(2000):\n        await db.test_collection.insert_one({\"i\": i})\n\nasync def do_insert():\n    result = await db.test_collection.insert_many([{\"i\": i} for i in range(2000)])\n    print(\"inserted %d docs\" % (len(result.inserted_ids),))\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Documents with update_many in Motor AsyncIO\nDESCRIPTION: This snippet demonstrates using the update_many method to update all documents that match a query. It updates all documents where 'i' is greater than 100 by setting a new field 'key' to 'value'.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait coll.update_many({'i': {'$gt': 100}},\n                   {'$set': {'key': 'value'}})\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Dictionary Type with Motor\nDESCRIPTION: Demonstrates how to use a more explicit Dict[str, Any] type annotation with AsyncIOMotorClient for better type checking of document structures.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Dict\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\n\nasync def main():\n    client: AsyncIOMotorClient[Dict[str, Any]] = AsyncIOMotorClient()\n    collection = client.test.test\n    inserted = await collection.insert_one({\"x\": 1, \"tags\": [\"dog\", \"cat\"]})\n    retrieved = await collection.find_one({\"x\": 1})\n    assert isinstance(retrieved, dict)\n```\n\n----------------------------------------\n\nTITLE: Handling Timeout Exceptions with Motor\nDESCRIPTION: Demonstrates how to catch and identify timeout exceptions using the PyMongoError.timeout property. This example shows a case where the operation exceeds the specified timeout due to an asyncio.sleep call.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/timeouts.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    with pymongo.timeout(10):\n        await coll.insert_one({\"name\": \"Nunu\"})\n        await asyncio.sleep(10)\n        # The deadline has now expired, the next operation will raise\n        # a timeout exception.\n        await coll.find_one({\"name\": \"Nunu\"})\nexcept PyMongoError as exc:\n    if exc.timeout:\n        print(f\"block timed out: {exc!r}\")\n    else:\n        print(f\"failed with non-timeout error: {exc!r}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tailable Cursor for MongoDB Oplog with Motor\nDESCRIPTION: This example demonstrates how to use a tailable cursor to continuously monitor the oplog of a MongoDB replica set. The code uses CursorType.TAILABLE_AWAIT to keep the cursor open and the oplog_replay option for optimization when querying before MongoDB 4.4. The function finds the latest oplog entry and then continuously polls for new entries.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/tailable-cursors.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom asyncio import sleep\nfrom pymongo.cursor import CursorType\n\n\nasync def tail_oplog_example():\n    oplog = client.local.oplog.rs\n    first = await oplog.find().sort(\"$natural\", pymongo.ASCENDING).limit(-1).next()\n    print(first)\n    ts = first[\"ts\"]\n\n    while True:\n        # For a regular capped collection CursorType.TAILABLE_AWAIT is the\n        # only option required to create a tailable cursor. When querying the\n        # oplog, the oplog_replay option enables an optimization to quickly\n        # find the 'ts' value we're looking for. The oplog_replay option\n        # can only be used when querying the oplog. Starting in MongoDB 4.4\n        # this option is ignored by the server as queries against the oplog\n        # are optimized automatically by the MongoDB query engine.\n        cursor = oplog.find(\n            {\"ts\": {\"$gt\": ts}},\n            cursor_type=CursorType.TAILABLE_AWAIT,\n            oplog_replay=True,\n        )\n        while cursor.alive:\n            async for doc in cursor:\n                ts = doc[\"ts\"]\n                print(doc)\n            # We end up here if the find() returned no documents or if the\n            # tailable cursor timed out (no new documents were added to the\n            # collection for more than 1 second).\n            await sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Deleting Individual Documents with delete_one in Motor AsyncIO\nDESCRIPTION: This snippet shows how to delete a single document using delete_one method. It counts the documents before and after deletion to verify that one document was removed. The query targets the first document where 'i' is greater than or equal to 1000.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def do_delete_one():\n    coll = db.test_collection\n    n = await coll.count_documents({})\n    print(\"%s documents before calling delete_one()\" % n)\n    result = await db.test_collection.delete_one({\"i\": {\"$gte\": 1000}})\n    print(\"%s documents after\" % (await coll.count_documents({})))\n\nloop = client.get_io_loop()\nloop.run_until_complete(do_delete_one())\n```\n\n----------------------------------------\n\nTITLE: Using TypedDict with Motor Bulk Write Operations\nDESCRIPTION: Demonstrates how to use TypedDict with bulk_write operations, showing how InsertOne and ReplaceOne operators are generic and can be used with typed documents.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypedDict\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom motor.motor_asyncio import AsyncIOMotorCollection\nfrom pymongo.operations import InsertOne\n\n\nasync def main():\n    client: AsyncIOMotorClient = AsyncIOMotorClient()\n    collection: AsyncIOMotorCollection[Movie] = client.test.test\n    inserted = await collection.bulk_write(\n        [InsertOne(Movie(name=\"Jurassic Park\", year=1993))]\n    )\n    result = await collection.find_one({\"name\": \"Jurassic Park\"})\n    assert result is not None\n    assert result[\"year\"] == 1993\n    # This will raise a type-checking error, despite being present, because it is added by Motor.\n    assert result[\"_id\"]  # type:ignore[typeddict-item]\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB Database with MotorClient in Python\nDESCRIPTION: Demonstrates how to access a MongoDB database using the MotorClient class. The database can be accessed using either dictionary-style notation or attribute-style notation. Invalid database names will raise an InvalidName error.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/motor_client.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient[db_name] || client.db_name\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB Sub-collections in Motor with Python\nDESCRIPTION: Demonstrates the syntax for accessing sub-collections from a MotorCollection instance. Shows both dictionary-style and attribute-style access patterns. Invalid collection names will raise a pymongo.errors.InvalidName exception.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/motor_collection.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nc[name] || c.name\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Change Stream with Motor and Tornado WebSockets in Python\nDESCRIPTION: This code demonstrates how to create a web application that watches a MongoDB collection for changes using Motor's watch() method and broadcasts those changes to connected clients via Tornado WebSockets. It includes a complete implementation with handlers for WebSocket connections and a basic HTML page to display the changes.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/tornado_change_stream_example.rst#2025-04-17_snippet_0\n\nLANGUAGE: python3\nCODE:\n```\ntornado_change_stream_example.py\n  :language: python3\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Documents with delete_many in Motor AsyncIO\nDESCRIPTION: This snippet demonstrates batch deletion using delete_many method. It removes all documents where 'i' is greater than or equal to 1000 and shows the document count before and after deletion to verify the number of documents removed.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def do_delete_many():\n    coll = db.test_collection\n    n = await coll.count_documents({})\n    print(\"%s documents before calling delete_many()\" % n)\n    result = await db.test_collection.delete_many({\"i\": {\"$gte\": 1000}})\n    print(\"%s documents after\" % (await coll.count_documents({})))\n\nloop = client.get_io_loop()\nloop.run_until_complete(do_delete_many())\n```\n\n----------------------------------------\n\nTITLE: Modeling Document Types with TypedDict in Motor\nDESCRIPTION: Shows three approaches to handle the auto-generated _id field with TypedDict: 1) not specifying it and using type:ignore, 2) explicitly requiring it, and 3) using NotRequired to make it optional but type-safe.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypedDict, NotRequired\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom motor.motor_asyncio import AsyncIOMotorCollection\nfrom bson import ObjectId\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n\n\nclass ExplicitMovie(TypedDict):\n    _id: ObjectId\n    name: str\n    year: int\n\n\nclass NotRequiredMovie(TypedDict):\n    _id: NotRequired[ObjectId]\n    name: str\n    year: int\n\n\nasync def main():\n    client: AsyncIOMotorClient = AsyncIOMotorClient()\n    collection: AsyncIOMotorCollection[Movie] = client.test.test\n    inserted = await collection.insert_one(Movie(name=\"Jurassic Park\", year=1993))\n    result = await collection.find_one({\"name\": \"Jurassic Park\"})\n    assert result is not None\n    # This will yield a type-checking error, despite being present, because it is added by Motor.\n    assert result[\"_id\"]  # type:ignore[typeddict-item]\n\n    collection: AsyncIOMotorCollection[ExplicitMovie] = client.test.test\n    # Note that the _id keyword argument must be supplied\n    inserted = await collection.insert_one(\n        ExplicitMovie(_id=ObjectId(), name=\"Jurassic Park\", year=1993)\n    )\n    result = await collection.find_one({\"name\": \"Jurassic Park\"})\n    assert result is not None\n    # This will not raise a type-checking error.\n    assert result[\"_id\"]\n\n    collection: AsyncIOMotorCollection[NotRequiredMovie] = client.test.test\n    # Note the lack of _id, similar to the first example\n    inserted = await collection.insert_one(\n        NotRequiredMovie(name=\"Jurassic Park\", year=1993)\n    )\n    result = await collection.find_one({\"name\": \"Jurassic Park\"})\n    assert result is not None\n    # This will not raise a type-checking error, despite not being provided explicitly.\n    assert result[\"_id\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Sub-collections in AsyncIOMotorCollection\nDESCRIPTION: Shows two equivalent ways to access a sub-collection from an AsyncIOMotorCollection instance. This can be done using either dictionary-style access (c[name]) or attribute-style access (c.name).\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/asyncio_motor_collection.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nc[name] || c.name\n```\n\n----------------------------------------\n\nTITLE: Accessing Collections in MotorDatabase with Python\nDESCRIPTION: Demonstrates how to access a collection within a MotorDatabase instance. This can be done using either square bracket notation or dot notation. The method returns a MotorCollection object for the specified collection name.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/motor_database.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb[collection_name] || db.collection_name\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents with Motor in Python\nDESCRIPTION: This snippet demonstrates how to replace a document in a MongoDB collection using Motor. It finds a document, replaces it with a new one, and then retrieves the updated document.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def do_replace():\n    coll = db.test_collection\n    old_document = await coll.find_one({\"i\": 50})\n    print(\"found document: %s\" % pprint.pformat(old_document))\n    _id = old_document[\"_id\"]\n    result = await coll.replace_one({\"_id\": _id}, {\"key\": \"value\"})\n    print(\"replaced %s document\" % result.modified_count)\n    new_document = await coll.find_one({\"_id\": _id})\n    print(\"document is now %s\" % pprint.pformat(new_document))\n\nIOLoop.current().run_sync(do_replace)\n```\n\n----------------------------------------\n\nTITLE: Main Function for aiohttp Web Application with Motor AsyncIO\nDESCRIPTION: This snippet shows the main function that starts the aiohttp web server. It calls the setup_db function to initialize the database, creates an aiohttp Application instance, stores the database handle on the application, sets up routing, and starts the web server.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasync def make_app():\n    # Setup the database connection and initialize data\n    db = await setup_db()\n    \n    # Create the application instance\n    app = web.Application()\n    \n    # Store the database handle on the application instance\n    app['db'] = db\n    \n    # Configure routes\n    app.router.add_get('/pages/{id}', serve_pages)\n    \n    return app\n\nif __name__ == '__main__':\n    app = make_app()\n    web.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Updating Document Fields in MongoDB with Motor AsyncIO\nDESCRIPTION: This snippet shows how to use the update_one method with MongoDB's $set operator to modify specific fields in a document while leaving others unchanged. It updates a document where 'i' equals 51 by setting a new 'key' field to 'value'.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def do_update():\n    coll = db.test_collection\n    result = await coll.update_one({\"i\": 51}, {\"$set\": {\"key\": \"value\"}})\n    print(\"updated %s document\" % result.modified_count)\n    new_document = await coll.find_one({\"i\": 51})\n    print(\"document is now %s\" % pprint.pformat(new_document))\n\nloop = client.get_io_loop()\nloop.run_until_complete(do_update())\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Client Type Annotation in Motor MongoDB\nDESCRIPTION: This example shows a common mypy error when forgetting to add a type annotation for an AsyncIOMotorClient object. It also provides the solution by demonstrating the correct type annotation.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\nclient = AsyncIOMotorClient()  # error: Need type annotation for \"client\"\n```\n\n----------------------------------------\n\nTITLE: Correcting Actual Type Errors in Motor MongoDB Operations\nDESCRIPTION: This example demonstrates how mypy can catch actual errors in MongoDB operations. It shows an incorrect use of insert_one and provides the correct solution.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom typing import Mapping\n\n\nasync def main():\n    client: AsyncIOMotorClient = AsyncIOMotorClient()\n    await client.test.test.insert_one(\n        [{}]\n    )  # error: Argument 1 to \"insert_one\" of \"Collection\" has\n    # incompatible type \"List[Dict[<nothing>, <nothing>]]\";\n    # expected \"Mapping[str, Any]\"\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with Motor in Python\nDESCRIPTION: This example shows how to update a document in a MongoDB collection using Motor. It uses the $set operator to update a specific field in the document.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync def do_update():\n    coll = db.test_collection\n    result = await coll.update_one({\"i\": 51}, {\"$set\": {\"key\": \"value\"}})\n    print(\"updated %s document\" % result.modified_count)\n    new_document = await coll.find_one({\"i\": 51})\n    print(\"document is now %s\" % pprint.pformat(new_document))\n\nIOLoop.current().run_sync(do_update)\n```\n\n----------------------------------------\n\nTITLE: Registering Command Listener in Python for Motor\nDESCRIPTION: This code snippet shows how to register an instance of the custom CommandListener with PyMongo's monitoring system. This enables logging of MongoDB commands executed through Motor.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/monitoring.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmonitoring.register(MyCommandLogger())\n```\n\n----------------------------------------\n\nTITLE: Performing Unordered Bulk Write Operations\nDESCRIPTION: Demonstrates unordered bulk write operations where operations can be executed in parallel. Shows how operations continue executing even when some operations fail.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/bulk.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def f():\n    requests = [\n        InsertOne({\"_id\": 1}),\n        DeleteOne({\"_id\": 2}),\n        InsertOne({\"_id\": 3}),\n        ReplaceOne({\"_id\": 4}, {\"i\": 1}),\n    ]\n    try:\n        await db.test.bulk_write(requests, ordered=False)\n    except BulkWriteError as bwe:\n        pprint(bwe.details)\n```\n\n----------------------------------------\n\nTITLE: Implementing Topology Listener in Python for Motor\nDESCRIPTION: This snippet shows a custom TopologyListener subclass for monitoring topology changes. It logs events when the topology opens, closes, or its description changes.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/monitoring.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyTopologyLogger(monitoring.TopologyListener):\n    def opened(self, event):\n        print(\"Topology with id {0.topology_id} opened\".format(event))\n\n    def description_changed(self, event):\n        print(\"Topology description changed from {0.previous_description} to {0.new_description}\".format(event))\n\n    def closed(self, event):\n        print(\"Topology with id {0.topology_id} closed\".format(event))\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Insert with Motor and MongoDB\nDESCRIPTION: Demonstrates how to insert multiple documents in a batch using insert_many(). The example inserts 10,000 documents with incrementing values.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/bulk.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def f():\n    await db.test.insert_many(({\"i\": i} for i in range(10000)))\n    count = await db.test.count_documents({})\n    print(\"Final count: %d\" % count)\n\nIOLoop.current().run_sync(f)\n```\n\n----------------------------------------\n\nTITLE: Creating MotorClient with Monitoring in Python\nDESCRIPTION: This example demonstrates how to create a MotorClient instance, which will automatically use the registered listeners for monitoring MongoDB commands and operations.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/monitoring.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = MotorClient()\ncollection = client.test.collection\nyield collection.insert_one({'_id': 1})\n```\n\n----------------------------------------\n\nTITLE: Using Modern Coroutine Pattern with Motor 2.0\nDESCRIPTION: Demonstrates the recommended async/await pattern for Motor 2.0, which provides better readability and exception handling.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def do_find():\n    try:\n        result = await collection.find_one({})\n        print(result)\n    except Exception as exc:\n        print(exc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed BSON Decoding with CodecOptions in Python\nDESCRIPTION: This snippet demonstrates how to use CodecOptions to specify the document type returned by BSON decoding functions. It creates a custom dictionary class, encodes a document, and then decodes it using the specified options.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Dict\nfrom bson import CodecOptions, encode, decode\n\n\nclass MyDict(Dict[str, Any]):\n    pass\n\n\ndef foo(self):\n    return \"bar\"\n\n\noptions = CodecOptions(document_class=MyDict)\ndoc = {\"x\": 1, \"y\": 2}\nbsonbytes = encode(doc, codec_options=options)\nrt_document = decode(bsonbytes, codec_options=options)\nassert rt_document.foo() == \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Executing Raw MongoDB Commands with Motor AsyncIO\nDESCRIPTION: This snippet shows how to execute raw MongoDB commands using the command method. It demonstrates the 'distinct' command to get all unique values of the 'i' field in the collection, using bson.SON to ensure the command parameters are in the correct order.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom bson import SON\nasync def use_distinct_command():\n    response = await db.command(SON([(\"distinct\", \"test_collection\"), (\"key\", \"i\")]))\n\nloop = client.get_io_loop()\nloop.run_until_complete(use_distinct_command())\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with Motor\nDESCRIPTION: Example of querying documents using Motor's find_one method with filter conditions\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def do_find_one():\n    document = await db.test_collection.find_one({\"i\": {\"$lt\": 1}})\n    pprint.pprint(document)\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Encryption with Automatic Decryption in Motor\nDESCRIPTION: Example showing how to configure automatic decryption with explicit encryption by setting bypass_auto_encryption=True in AutoEncryptionOpts, which is supported for all MongoDB users including community edition.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/encryption.rst#2025-04-17_snippet_4\n\nLANGUAGE: python3\nCODE:\n```\n# explicit_encryption_automatic_decryption_example.py\n```\n\n----------------------------------------\n\nTITLE: Replacing modifiers Parameter with Direct Options in MongoDB Motor find Method\nDESCRIPTION: Shows how to migrate from the removed modifiers parameter to using direct method parameters for queries with find(). This provides a cleaner API for specifying query options.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncursor = await coll.find({}, modifiers={\n    \"$comment\": \"comment\",\n    \"$hint\": {\"_id\": 1},\n    \"$min\": {\"_id\": 0},\n    \"$max\": {\"_id\": 6},\n    \"$maxTimeMS\": 6000,\n    \"$returnKey\": False,\n    \"$showDiskLoc\": False,\n})\n```\n\nLANGUAGE: python\nCODE:\n```\ncursor = await coll.find(\n    {},\n    comment=\"comment\",\n    hint={\"_id\": 1},\n    min={\"_id\": 0},\n    max={\"_id\": 6},\n    max_time_ms=6000,\n    return_key=False,\n    show_record_id=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Serving Compressed Static Content from GridFS using AIOHTTPGridFS and aiohttp in Python\nDESCRIPTION: This code snippet shows how to set up an aiohttp web application that serves pre-compressed static content from MongoDB's GridFS. It uses Motor's AIOHTTPGridFS class to handle GridFS operations asynchronously. The example includes setting up the MongoDB client, creating the GridFS bucket, and configuring the aiohttp application with the AIOHTTPGridFS middleware.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/aiohttp_gridfs_example.rst#2025-04-17_snippet_0\n\nLANGUAGE: python3\nCODE:\n```\nimport asyncio\n\nfrom aiohttp import web\nfrom motor.aiohttp import AIOHTTPGridFS\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\n\nasync def main():\n    client = AsyncIOMotorClient()\n    db = client.test_database\n    # Create the GridFS bucket.\n    bucket = AsyncIOMotorGridFSBucket(db)\n\n    # Create an aiohttp server using AIOHTTPGridFS.\n    gridfs_handler = AIOHTTPGridFS(bucket)\n    app = web.Application()\n    app.router.add_get(\"/fs/{name}\", gridfs_handler)\n    runner = web.AppRunner(app)\n    await runner.setup()\n    site = web.TCPSite(runner, \"localhost\", 8080)\n    await site.start()\n    print(\"Serving GridFS files on http://localhost:8080/fs/\")\n    print(\"Try visiting http://localhost:8080/fs/my_file\")\n    await asyncio.Event().wait()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Applying Sort, Skip, and Limit to Motor Query in Python\nDESCRIPTION: This snippet demonstrates how to modify a Motor query by applying sort, skip, and limit operations before iterating over the results.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def do_find():\n    cursor = db.test_collection.find({\"i\": {\"$lt\": 4}})\n    # Modify the query before iterating\n    cursor.sort(\"i\", -1).skip(1).limit(2)\n    async for document in cursor:\n        pprint.pprint(document)\n\nIOLoop.current().run_sync(do_find)\n```\n\n----------------------------------------\n\nTITLE: Executing MongoDB Commands with Motor in Python\nDESCRIPTION: This example shows how to execute a MongoDB command using Motor. It demonstrates the use of the distinct command to get unique values for a field in a collection.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom bson import SON\nasync def use_distinct_command():\n    response = await db.command(SON([(\"distinct\", \"test_collection\"), (\"key\", \"i\")]))\n\nIOLoop.current().run_sync(use_distinct_command)\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Timeouts in Motor\nDESCRIPTION: Illustrates how nested timeout context managers work. The nested deadline is capped by the outer deadline, and can only be shortened, not extended. When exiting a nested block, the previous deadline is restored.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/timeouts.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith pymongo.timeout(5):\n    await coll.find_one()  # Uses the 5 second deadline.\n    with pymongo.timeout(3):\n        await coll.find_one() # Uses the 3 second deadline.\n    await coll.find_one()  # Uses the original 5 second deadline.\n    with pymongo.timeout(10):\n        await coll.find_one()  # Still uses the original 5 second deadline.\n    await coll.find_one()  # Uses the original 5 second deadline.\n```\n\n----------------------------------------\n\nTITLE: Executing Ordered Bulk Write Operations\nDESCRIPTION: Shows how to perform multiple write operations in order using bulk_write(). Includes delete, insert, update, and replace operations that are executed sequentially.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/bulk.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pprint import pprint\nfrom pymongo import InsertOne, DeleteMany, ReplaceOne, UpdateOne\nasync def f():\n    result = await db.test.bulk_write(\n        [\n            DeleteMany({}),  # Remove all documents from the previous example.\n            InsertOne({\"_id\": 1}),\n            InsertOne({\"_id\": 2}),\n            InsertOne({\"_id\": 3}),\n            UpdateOne({\"_id\": 1}, {\"$set\": {\"foo\": \"bar\"}}),\n            UpdateOne({\"_id\": 4}, {\"$inc\": {\"j\": 1}}, upsert=True),\n            ReplaceOne({\"j\": 1}, {\"j\": 2}),\n        ]\n    )\n    pprint(result.bulk_api_result)\n```\n\n----------------------------------------\n\nTITLE: Counting Documents with Motor in Python\nDESCRIPTION: This example shows how to count documents in a MongoDB collection using Motor. It demonstrates counting all documents and documents matching a specific query.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def do_count():\n    n = await db.test_collection.count_documents({})\n    print(\"%s documents in collection\" % n)\n    n = await db.test_collection.count_documents({\"i\": {\"$gt\": 1000}})\n    print(\"%s documents where i > 1000\" % n)\n\nIOLoop.current().run_sync(do_count)\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Motor in Python\nDESCRIPTION: This snippet demonstrates how to delete documents from a MongoDB collection using Motor. It shows both delete_one() and delete_many() methods.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nasync def do_delete_one():\n    coll = db.test_collection\n    n = await coll.count_documents({})\n    print(\"%s documents before calling delete_one()\" % n)\n    result = await db.test_collection.delete_one({\"i\": {\"$gte\": 1000}})\n    print(\"%s documents after\" % (await coll.count_documents({})))\n\nIOLoop.current().run_sync(do_delete_one)\n```\n\n----------------------------------------\n\nTITLE: Configuring Motor Client with RawBSONDocument Type\nDESCRIPTION: Shows how to configure AsyncIOMotorClient to use RawBSONDocument as the document type for BSON document decoding, which preserves the original BSON representation.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom bson.raw_bson import RawBSONDocument\n\n\nasync def main():\n    client = AsyncIOMotorClient(document_class=RawBSONDocument)\n    collection = client.test.test\n    inserted = await collection.insert_one({\"x\": 1, \"tags\": [\"dog\", \"cat\"]})\n    result = await collection.find_one({\"x\": 1})\n    assert isinstance(result, RawBSONDocument)\n```\n\n----------------------------------------\n\nTITLE: Request Handler for aiohttp Web Application with Motor AsyncIO\nDESCRIPTION: This snippet implements a request handler for the aiohttp web application. It fetches a document from MongoDB based on the URL path parameter and returns its HTML content, or a 404 error if the document doesn't exist.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nasync def serve_pages(request):\n    # We get the database from the request's app instance\n    db = request.app['db']\n    page_id = request.match_info['id']\n    document = await db.pages.find_one({'_id': page_id})\n    if not document:\n        return web.HTTPNotFound(text='No such page')\n    \n    return web.Response(body=document['body'], content_type='text/html')\n```\n\n----------------------------------------\n\nTITLE: Creating a GridFS File and Setting Metadata in Motor\nDESCRIPTION: Demonstrates the asynchronous approach to creating a GridFS file and setting metadata in Motor. Unlike PyMongo where metadata can be set directly as attributes, Motor requires the use of the set method with await.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/differences.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def f():\n    fs = motor.motor_tornado.MotorGridFSBucket(db)\n    grid_in = fs.open_upload_stream('test_file')\n    await grid_in.close()\n\n    # Sends update to server.\n    await grid_in.set('my_field', 'my_value')\n```\n\n----------------------------------------\n\nTITLE: Asynchronous GridFS Upload Using Context Manager\nDESCRIPTION: Example of uploading a file to GridFS using async/await syntax and context manager for automatic cleanup.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def upload():\n    my_db = MotorClient().test\n    fs = MotorGridFSBucket(my_db)\n    async with await fs.open_upload_stream(\n                \"test_file\", metadata={\"contentType\": \"text/plain\"}) as gridin:\n        await gridin.write(b'First part\\n')\n        await gridin.write(b'Second part')\n\n    # gridin is now closed automatically.\n```\n\n----------------------------------------\n\nTITLE: Checking MotorDatabase Existence with None Comparison in MongoDB Motor\nDESCRIPTION: Shows how to properly check for database existence by comparing with None instead of using boolean evaluation, which now raises NotImplementedError.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nif database:\n```\n\nLANGUAGE: python\nCODE:\n```\nif database is not None:\n```\n\n----------------------------------------\n\nTITLE: Handling Bulk Write Errors\nDESCRIPTION: Example showing error handling for bulk write operations when a duplicate key error occurs. Demonstrates how to access error details through the BulkWriteError exception.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/bulk.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pymongo import InsertOne, DeleteOne, ReplaceOne\nfrom pymongo.errors import BulkWriteError\nasync def f():\n    requests = [\n        ReplaceOne({\"j\": 2}, {\"i\": 5}),\n        InsertOne({\"_id\": 4}),  # Violates the unique key constraint on _id.\n        DeleteOne({\"i\": 5}),\n    ]\n    try:\n        await db.test.bulk_write(requests)\n    except BulkWriteError as bwe:\n        pprint(bwe.details)\n```\n\n----------------------------------------\n\nTITLE: Using timeout for Multiple Operations\nDESCRIPTION: Shows how to apply a single timeout to multiple sequential MongoDB operations. Both the insert_one and find_one operations must complete within a total of 10 seconds, otherwise a timeout error is raised.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/timeouts.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith pymongo.timeout(10):\n    await coll.insert_one({\"name\": \"Nunu\"})\n    await coll.find_one({\"name\": \"Nunu\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Digest with GridFS in MongoDB Motor\nDESCRIPTION: Demonstrates how to implement a custom file digest mechanism for GridFS after the removal of built-in checksums. This example computes a SHA-256 hash and stores it as metadata.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nmy_db = MotorClient().test\nfs = GridFSBucket(my_db)\ngrid_in = fs.open_upload_stream(\"test_file\")\nfile_data = b'...'\nsha356 = hashlib.sha256(file_data).hexdigest()\nawait grid_in.write(file_data)\ngrid_in.sha356 = sha356  # Set the custom 'sha356' field\nawait grid_in.close()\n```\n\n----------------------------------------\n\nTITLE: Handling Incompatible Types in Motor MongoDB Inserts\nDESCRIPTION: This snippet illustrates a mypy error that occurs when using the generic form of AsyncIOMotorClient without proper type specification. It shows the error and provides the solution using a more specific type annotation.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\n\nasync def main():\n    client: AsyncIOMotorClient = AsyncIOMotorClient()\n    await client.test.test.insert_many(\n        {\"a\": 1}\n    )  # error: Dict entry 0 has incompatible type \"str\": \"int\";\n    # expected \"Mapping[str, Any]\": \"int\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Listener in Python for Motor\nDESCRIPTION: This snippet demonstrates how to create a custom CommandListener subclass to log MongoDB commands. It overrides the started, succeeded, and failed methods to provide detailed logging of command execution.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/monitoring.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCommandLogger(monitoring.CommandListener):\n    def started(self, event):\n        print(\"Command {0.command_name} with request id {0.request_id} started on server {0.connection_id}\".format(event))\n\n    def succeeded(self, event):\n        print(\"Command {0.command_name} with request id {0.request_id} on server {0.connection_id}\"\n              \" succeeded in {0.duration_micros} microseconds\".format(event))\n\n    def failed(self, event):\n        print(\"Command {0.command_name} with request id {0.request_id} on server {0.connection_id}\"\n              \" failed in {0.duration_micros} microseconds\".format(event))\n```\n\n----------------------------------------\n\nTITLE: Python 3.5 Async/Await with Motor MongoDB\nDESCRIPTION: Shows how to use Python 3.5's native coroutines with async/await syntax for MongoDB operations using Motor driver.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def f():\n    await collection.insert({'_id': 1})\n\nasync def f():\n    async for doc in collection.find():\n        do_something_with(doc)\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Replica Set Connection with Motor Client\nDESCRIPTION: Shows how to connect to a MongoDB replica set using MotorClient with either a connection string URI or explicit parameters.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMotorClient(\"mongodb://hostname/?replicaSet=my-rs\")\nMotorClient(host, port, replicaSet=\"my-rs\")\n```\n\n----------------------------------------\n\nTITLE: Typed Command Execution with Motor\nDESCRIPTION: Demonstrates how to specify document types for command responses by providing a custom CodecOptions. This enables type checking for MongoDB command results.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom bson.raw_bson import RawBSONDocument\nfrom bson import CodecOptions\n\n\nasync def main():\n    client: AsyncIOMotorClient = AsyncIOMotorClient()\n    options = CodecOptions(RawBSONDocument)\n    result = await client.admin.command(\"ping\", codec_options=options)\n    assert isinstance(result, RawBSONDocument)\n```\n\n----------------------------------------\n\nTITLE: Establishing Authenticated Connection with Motor in Python\nDESCRIPTION: This snippet demonstrates how to create an authenticated connection to MongoDB using Motor. It uses a MongoDB connection URI that includes the username, password, host, port, and database name.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/authentication.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nuri = \"mongodb://user:pass@localhost:27017/database_name\"\nclient = motor.motor_tornado.MotorClient(uri)\n```\n\n----------------------------------------\n\nTITLE: Documenting AsyncIOMotorClientEncryption Class in reStructuredText\nDESCRIPTION: A reStructuredText directive that sets up the documentation for the AsyncIOMotorClientEncryption class from the motor.motor_asyncio module, including all of its members. The directive uses Sphinx's autoclass feature to automatically generate API documentation.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/asyncio_motor_client_encryption.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:class:`~motor.motor_asyncio.AsyncIOMotorClientEncryption`\n==========================================================\n\n.. currentmodule:: motor.motor_asyncio\n\n.. autoclass:: AsyncIOMotorClientEncryption\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Limits\nDESCRIPTION: Example of fetching server limits using the hello command instead of the removed max_bson_size, max_message_size, and max_write_batch_size properties.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndoc = await client.admin.command('hello')\nmax_bson_size = doc['maxBsonObjectSize']\nmax_message_size = doc['maxMessageSizeBytes']\nmax_write_batch_size = doc['maxWriteBatchSize']\n```\n\n----------------------------------------\n\nTITLE: Using SON Mapping Type with Motor\nDESCRIPTION: Demonstrates how to use bson.SON as a document class with Motor, requiring explicit key and value types. SON is a subclass of collections.abc.Mapping that maintains key order.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom bson import SON\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\n\nasync def main():\n    client = AsyncIOMotorClient(document_class=SON[str, int])\n    collection = client.test.test\n    inserted = await collection.insert_one({\"x\": 1, \"y\": 2})\n    result = await collection.find_one({\"x\": 1})\n    assert result is not None\n    assert result[\"x\"] == 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Field Level Encryption Enforcement in Motor\nDESCRIPTION: Example showing how to configure server-side enforcement of field level encryption using JSON schema validation with the AsyncIOMotorClientEncryption class to create encryption keys.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/encryption.rst#2025-04-17_snippet_2\n\nLANGUAGE: python3\nCODE:\n```\n# server_fle_enforcement_example.py\n```\n\n----------------------------------------\n\nTITLE: AsyncIOMotorCommandCursor Class Reference (RST)\nDESCRIPTION: ReStructuredText documentation for the AsyncIOMotorCommandCursor class, which provides async iteration over MongoDB command results.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/cursors.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:class:`~motor.motor_asyncio.AsyncIOMotorCommandCursor`\n=======================================================\n\n.. currentmodule:: motor.motor_asyncio\n\n.. autoclass:: AsyncIOMotorCommandCursor\n  :members:\n  :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Executing fsyncUnlock Command\nDESCRIPTION: Example of running the fsyncUnlock command directly using MotorDatabase.command instead of the removed MotorClient.unlock method.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait client.admin.command('fsyncUnlock')\n```\n\n----------------------------------------\n\nTITLE: Handling Read-Only RawBSONDocument in Motor MongoDB\nDESCRIPTION: This snippet shows a type error that occurs when trying to modify a RawBSONDocument, which is read-only. It demonstrates the correct usage of RawBSONDocument and the error that occurs when attempting to modify it.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom bson.raw_bson import RawBSONDocument\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\n\nasync def main():\n    client = AsyncIOMotorClient(document_class=RawBSONDocument)\n    coll = client.test.test\n    doc = {\"my\": \"doc\"}\n    await coll.insert_one(doc)\n    retrieved = await coll.find_one({\"_id\": doc[\"_id\"]})\n    assert retrieved is not None\n    assert len(retrieved.raw) > 0\n    retrieved[\"foo\"] = \"bar\"  # error: Unsupported target for indexed assignment\n    # (\"RawBSONDocument\")  [index]\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB Collections in AsyncIOMotorDatabase\nDESCRIPTION: Shows two equivalent syntaxes for accessing MongoDB collections from an AsyncIOMotorDatabase instance. Both syntaxes return an AsyncIOMotorCollection object and will raise an InvalidName error if an invalid collection name is provided.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/asyncio_motor_database.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb[collection_name] || db.collection_name\n```\n\n----------------------------------------\n\nTITLE: Documenting MotorGridIn Class in Python\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the MotorGridIn class, including all its members.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/gridfs.rst#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: MotorGridIn\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Replacing profiling_level Method with profile Command in MongoDB Motor\nDESCRIPTION: Demonstrates how to replace the removed profiling_level() method with the MongoDB profile command. This change retrieves the current profiling level using the raw command interface.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlevel = db.profiling_level()\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile = await db.command('profile', -1)\nlevel = profile['was']\n```\n\n----------------------------------------\n\nTITLE: Using Async Context Manager for Sessions in Motor 2.0\nDESCRIPTION: Demonstrates the recommended way to use the asynchronous context manager pattern with client sessions in Motor 2.0.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync with client.start_session() as session:\n    doc = await client.db.collection.find_one({}, session=session)\n```\n\n----------------------------------------\n\nTITLE: Using Async For Loop with Motor Cursor in Python\nDESCRIPTION: This example shows how to use an async for loop to iterate over MongoDB documents returned by a Motor cursor. It finds documents where 'i' is less than 2.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def do_find():\n    c = db.test_collection\n    async for document in c.find({\"i\": {\"$lt\": 2}}):\n        pprint.pprint(document)\n\nIOLoop.current().run_sync(do_find)\n```\n\n----------------------------------------\n\nTITLE: Importing MotorClientSession from motor.motor_tornado\nDESCRIPTION: This snippet shows how to import the MotorClientSession class from the motor.motor_tornado module. MotorClientSession is used for managing a sequence of operations in an asynchronous MongoDB context with Tornado.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/motor_client_session.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_tornado import MotorClientSession\n```\n\n----------------------------------------\n\nTITLE: Replacing set_profiling_level Method with profile Command in MongoDB Motor\nDESCRIPTION: Shows how to replace the removed set_profiling_level() method with the MongoDB profile command to configure database profiling with custom filters.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndb.set_profiling_level(pymongo.ALL, filter={'op': 'query'})\n```\n\nLANGUAGE: python\nCODE:\n```\nres = await db.command('profile', 2, filter={'op': 'query'})\n```\n\n----------------------------------------\n\nTITLE: Creating Collections in Motor\nDESCRIPTION: Shows how to create a capped collection in Motor using the create_collection method. Unlike PyMongo which supports two styles of collection creation, Motor only supports the explicit create_collection approach due to its asynchronous nature.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/differences.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def f():\n    await db.create_collection(\"collection1\", capped=True, size=1000)\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Client Connection\nDESCRIPTION: Examples of creating AsyncIOMotorClient connections to MongoDB using different connection methods\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport motor.motor_asyncio\nclient = motor.motor_asyncio.AsyncIOMotorClient()\n\n# With explicit host and port\nclient = motor.motor_asyncio.AsyncIOMotorClient(\"localhost\", 27017)\n\n# Using connection URI\nclient = motor.motor_asyncio.AsyncIOMotorClient(\"mongodb://localhost:27017\")\n```\n\n----------------------------------------\n\nTITLE: Importing MotorClientEncryption Class from motor.motor_tornado\nDESCRIPTION: This snippet shows how to import the MotorClientEncryption class from the motor.motor_tornado module. It is typically used for client-side field level encryption in MongoDB with Motor and Tornado.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/motor_client_encryption.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom motor.motor_tornado import MotorClientEncryption\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Concern for Bulk Operations\nDESCRIPTION: Shows how to configure write concern for bulk operations and handle write concern errors. Sets a write concern of w=4 with a 1ms timeout.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/bulk.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pymongo import WriteConcern\nasync def f():\n    coll = db.get_collection(\"test\", write_concern=WriteConcern(w=4, wtimeout=1))\n    try:\n        await coll.bulk_write([InsertOne({\"a\": i}) for i in range(4)])\n    except BulkWriteError as bwe:\n        pprint(bwe.details)\n```\n\n----------------------------------------\n\nTITLE: Migrating from current_op Method to $currentOp Aggregation in MongoDB with Motor\nDESCRIPTION: Shows how to migrate from the deprecated client.admin.current_op() method to using the $currentOp aggregation pipeline stage instead. This approach provides a more flexible way to access operation information.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nops = client.admin.current_op()['inprog']\n```\n\nLANGUAGE: python\nCODE:\n```\nops = await client.admin.aggregate([{'$currentOp': {}}]).to_list()\n```\n\n----------------------------------------\n\nTITLE: Tornado Application Setup with Motor\nDESCRIPTION: Example of initializing a Tornado web application with Motor client and database configuration\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb = motor.motor_tornado.MotorClient().test_database\n\napplication = tornado.web.Application([\n    (r'/', MainHandler)\n], db=db)\n\napplication.listen(8888)\ntornado.ioloop.IOLoop.current().start()\n```\n\n----------------------------------------\n\nTITLE: Specifying pymongo Dependency Version Range\nDESCRIPTION: Declares a dependency on pymongo package with version constraints. Requires pymongo version 4.9 or higher but strictly less than version 5.0 to ensure compatibility with Motor MongoDB driver.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npymongo>=4.9,<5.0\n```\n\n----------------------------------------\n\nTITLE: Session Handling in Motor 2.0 with Coroutines\nDESCRIPTION: Shows the updated asynchronous pattern for client sessions in Motor 2.0, where start_session and end_session are now coroutines.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsession = await client.start_session()\ndoc = await client.db.collection.find_one({}, session=session)\nawait session.end_session()\n```\n\n----------------------------------------\n\nTITLE: Migrating from reindex Method to reIndex Command in MongoDB Motor\nDESCRIPTION: Demonstrates how to replace the removed reindex() method with the direct reIndex command to rebuild collection indexes.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresult = await database.my_collection.reindex()\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = await database.command('reIndex', 'my_collection')\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Client Connections\nDESCRIPTION: Various ways to create a MotorClient instance for connecting to MongoDB, including default connection, specific host/port, and URI formats\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = motor.motor_tornado.MotorClient()\n\nclient = motor.motor_tornado.MotorClient(\"localhost\", 27017)\n\nclient = motor.motor_tornado.MotorClient(\"mongodb://localhost:27017\")\n\nclient = motor.motor_tornado.MotorClient('mongodb://host1,host2/?replicaSet=my-replicaset-name')\n```\n\n----------------------------------------\n\nTITLE: Defining PyMongo AWS Dependencies for Motor\nDESCRIPTION: Specifies the required PyMongo version with AWS support. Requires PyMongo version 4.5 or higher but less than version 5, with AWS extras included.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/aws.txt#2025-04-17_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\npymongo[aws]>=4.5,<5\n```\n\n----------------------------------------\n\nTITLE: Using Context Manager for Sessions in Motor 1.x\nDESCRIPTION: Demonstrates how to use a context manager with client sessions in Motor 1.x.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith client.start_session() as session:\n    doc = client.db.collection.find_one({}, session=session)\n```\n\n----------------------------------------\n\nTITLE: Querying system.profile Collection Instead of Using profiling_info in MongoDB Motor\nDESCRIPTION: Demonstrates how to query the system.profile collection directly instead of using the removed profiling_info() method to retrieve profiling information.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprofiling_info = db.profiling_info()\n```\n\nLANGUAGE: python\nCODE:\n```\nprofiling_info = await db['system.profile'].find().to_list()\n```\n\n----------------------------------------\n\nTITLE: Database Setup for aiohttp Web Application with Motor AsyncIO\nDESCRIPTION: This snippet shows the setup function for an aiohttp web application using Motor. It creates a database connection, drops any existing 'pages' collection, and inserts two sample HTML documents to be served by the web application.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync def setup_db():\n    client = AsyncIOMotorClient()\n    db = client.test\n    \n    # Start clean\n    await db.pages.drop()\n    \n    # Insert two documents\n    await db.pages.insert_many([\n        {'_id': 'page-one', 'body': '<h1>Hello!</h1>'},\n        {'_id': 'page-two', 'body': '<h1>Goodbye!</h1>'}\n    ])\n    \n    return db\n```\n\n----------------------------------------\n\nTITLE: Specifying pymongo[srv] Dependency Version Requirement\nDESCRIPTION: Defines the version requirement for the pymongo[srv] package, which must be at least version 4.5 but less than version 5. This ensures compatibility with the MongoDB Motor project while allowing for minor version updates.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/srv.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npymongo[srv]>=4.5,<5\n```\n\n----------------------------------------\n\nTITLE: Using TypedDict with Motor Database\nDESCRIPTION: Shows how to apply TypedDict to an entire database, enforcing a schema across all collections. This is less common but useful for databases with uniform document structure.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/type_hints.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypedDict\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom motor.motor_asyncio import AsyncIOMotorDatabase\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n\n\nasync def main():\n    client: AsyncIOMotorClient = AsyncIOMotorClient()\n    db: AsyncIOMotorDatabase[Movie] = client.test\n    collection = db.test\n    inserted = await collection.insert_one({\"name\": \"Jurassic Park\", \"year\": 1993})\n    result = await collection.find_one({\"name\": \"Jurassic Park\"})\n    assert result is not None\n    assert result[\"year\"] == 1993\n```\n\n----------------------------------------\n\nTITLE: MongoDB Aggregation Pipeline Usage in Motor\nDESCRIPTION: Demonstrates different ways to use aggregation pipelines in Motor, including both pre-0.5 and post-0.5 syntax, and compatibility with older MongoDB versions.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Motor 0.4 and older, no longer supported.\ncursor = yield collection.aggregate(pipeline, cursor={})\nwhile (yield cursor.fetch_next):\n    doc = cursor.next_object()\n    print(doc)\n\n# Motor 0.5: no \"cursor={}\", no \"yield\".\ncursor = collection.aggregate(pipeline)\nwhile (yield cursor.fetch_next):\n    doc = cursor.next_object()\n    print(doc)\n\n# Motor 0.5, Python 3.5.\nasync for doc in collection.aggregate(pipeline):\n    print(doc)\n\n# Motor 0.5 with MongoDB 2.4 and older.\nreply = yield collection.aggregate(cursor=False)\nfor doc in reply['results']:\n    print(doc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Listener in Python for Motor\nDESCRIPTION: This code defines a custom ServerListener subclass to monitor server state changes. It overrides methods to log when a server is added, removed, or its description changes.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/monitoring.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyServerLogger(monitoring.ServerListener):\n    def opened(self, event):\n        print(\"Server {0.server_address} added to topology {0.topology_id}\".format(event))\n\n    def description_changed(self, event):\n        print(\"Server {0.server_address} description changed from {0.previous_description} to {0.new_description}\".format(event))\n\n    def closed(self, event):\n        print(\"Server {0.server_address} removed from topology {0.topology_id}\".format(event))\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous DNS Resolution with Motor 0.2\nDESCRIPTION: Examples of configuring Tornado's asynchronous DNS resolver interface for use with Motor 0.2, showing both the threaded resolver and the c-ares resolver options.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Using threaded resolver:\nResolver.configure('tornado.netutil.ThreadedResolver')\n\n# Or using c-ares resolver:\nResolver.configure('tornado.platform.caresresolver.CaresResolver')\n```\n\n----------------------------------------\n\nTITLE: Accessing Database with Underscore Names in Python\nDESCRIPTION: Demonstrates how to access MongoDB databases and collections whose names begin with underscores, showing both the deprecated property access and the recommended dict-style access.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Now raises AttributeError.\ndb = MotorClient()._mydatabase\ncollection = db._mycollection\nsubcollection = collection._subcollection\n\n# Continues to work the same as previous Motor versions.\ndb = MotorClient()['_mydatabase']\ncollection = db['_mycollection']\n\n# New in Motor 0.6\nsubcollection = collection['_subcollection']\n```\n\n----------------------------------------\n\nTITLE: Installing Field Level Encryption Support\nDESCRIPTION: Command to install Motor with Client-Side Field Level Encryption support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[encryption]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Heartbeat Listener in Python for Motor\nDESCRIPTION: This code defines a custom ServerHeartbeatListener subclass to monitor server heartbeat events. It logs when a heartbeat is started, succeeded, or failed.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/monitoring.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyServerHeartbeatLogger(monitoring.ServerHeartbeatListener):\n    def started(self, event):\n        print(\"Heartbeat sent to server {0.connection_id}\".format(event))\n\n    def succeeded(self, event):\n        print(\"Heartbeat to server {0.connection_id} succeeded with reply {0.reply}\".format(event))\n\n    def failed(self, event):\n        print(\"Heartbeat to server {0.connection_id} failed with error {0.reply}\".format(event))\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB with Tornado in Motor 0.2\nDESCRIPTION: Example of connecting to MongoDB using Motor 0.2 and testing the connection with Tornado's IOLoop.run_sync() instead of the removed open_sync() method.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nloop = tornado.ioloop.IOLoop.current()\nclient = motor.motor_tornado.MotorClient(host, port)\ntry:\n    loop.run_sync(client.open)\nexcept pymongo.errors.ConnectionFailure:\n    print \"Can't connect\"\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Futures in Motor 2.0\nDESCRIPTION: Shows how to adapt callback-style code to work with Motor 2.0 by adding callbacks to Futures instead of passing them as parameters.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef callback(future):\n    try:\n        result = future.result()\n        print(result)\n    except Exception as exc:\n        print(exc)\n\n\nfuture = collection.find_one({})\nfuture.add_done_callback(callback)\n```\n\n----------------------------------------\n\nTITLE: Checking PyMongo Version and C Extensions\nDESCRIPTION: Command to verify the PyMongo version and whether C extensions are enabled, which affects performance.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -c \"import pymongo; print(pymongo.version); print(pymongo.has_c())\"\n```\n\n----------------------------------------\n\nTITLE: Checking if MongoDB Server is Locked in Motor\nDESCRIPTION: Demonstrates how to check if a MongoDB server has been fsyncLocked using Motor's asynchronous operations. Unlike PyMongo which provides a simple is_locked property, Motor requires executing a current_op command and checking for the fsyncLock field.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/differences.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult = await client.admin.current_op()\nlocked = bool(result.get('fsyncLock', None))\n```\n\n----------------------------------------\n\nTITLE: Checking OpenSSL Version in Bash\nDESCRIPTION: Command to check the installed OpenSSL version on Linux or non-macOS Unix systems. This is useful for verifying TLS 1.1 or newer support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl version\n```\n\n----------------------------------------\n\nTITLE: Single-line Callback with Futures in Motor 2.0\nDESCRIPTION: A more concise way to add a callback to a Future returned by Motor 2.0 operations.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncollection.find_one({}).add_done_callback(callback)\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for MongoDB Motor Python Driver\nDESCRIPTION: Specifies the required Python packages for developing and testing the Motor MongoDB driver. Includes testing tools (pytest, mockupdb), async frameworks (tornado, aiohttp), encryption support, and conditional dependencies based on Python version.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/test.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=7\nmockupdb\ntornado>=5\naiohttp>=3.8.7\nmotor[encryption]\ncffi>=1.17.0rc1;python_version==\"3.13\"\npytest_asyncio\n```\n\n----------------------------------------\n\nTITLE: Cursor Slicing in Motor vs PyMongo\nDESCRIPTION: Demonstrates the difference in cursor slicing behavior between Motor and PyMongo. While PyMongo may raise an IndexError when accessing an index beyond available documents, Motor simply applies skip and limit operations returning an empty result without errors.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/differences.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def f():\n    cursor = db.collection.find()[100]\n\n    # Iterates zero or one time.\n    async for doc in cursor:\n        print(doc)\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB Server\nDESCRIPTION: Command to start the MongoDB daemon process\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mongod\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with GSSAPI Authentication Support\nDESCRIPTION: Command to install Motor with GSSAPI authentication support for Kerberos authentication.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[gssapi]\"\n```\n\n----------------------------------------\n\nTITLE: Executing fsync Command\nDESCRIPTION: Example of running the fsync command directly using MotorDatabase.command instead of the removed MotorClient.fsync method.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait client.admin.command('fsync', lock=True)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous GridFS File Reading\nDESCRIPTION: Shows how to read a GridFS file chunk by chunk using async iteration.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def read_file(file_id):\n    fs = motor.motor_tornado.MotorGridFS(db)\n    gridout = await fs.get(file_id)\n\n    async for chunk in gridout:\n        sys.stdout.write(chunk)\n\n    sys.stdout.flush()\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with AWS Authentication Support\nDESCRIPTION: Command to install Motor with support for MONGODB-AWS authentication mechanism.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[aws]\"\n```\n\n----------------------------------------\n\nTITLE: Checking TLS Version with Python Requests\nDESCRIPTION: Python command to check the TLS version supported by the current Python interpreter using the requests module and an external service.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/configuration.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -c \"import requests; print(requests.get('https://www.howsmyssl.com/a/check', verify=False).json()['tls_version'])\"\n```\n\n----------------------------------------\n\nTITLE: Checking MotorCollection Existence with None Comparison in MongoDB Motor\nDESCRIPTION: Shows how to properly check for collection existence by comparing with None instead of using boolean evaluation, which now raises NotImplementedError.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif collection:\n```\n\nLANGUAGE: python\nCODE:\n```\nif collection is not None:\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with Field Level Encryption\nDESCRIPTION: Command to install Motor with Client-Side Field Level Encryption support for encrypting sensitive data.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[encryption]\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Configuration Options\nDESCRIPTION: Updated way to access client configuration options using the new options property instead of individual helper properties.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.options.event_listeners\nclient.options.local_threshold_ms\nclient.options.server_selection_timeout\nclient.options.pool_options.max_pool_size\nclient.options.pool_options.min_pool_size\nclient.options.pool_options.max_idle_time_seconds\n```\n\n----------------------------------------\n\nTITLE: Adding Required hint Parameter with min/max Queries in MongoDB Motor\nDESCRIPTION: Demonstrates how to add the now-required hint parameter when using min or max in find queries to ensure the correct index is used.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ncursor = await coll.find({}, min={'x', min_value})\n```\n\nLANGUAGE: python\nCODE:\n```\ncursor = await coll.find({}, min={'x', min_value}, hint=[('x', ASCENDING)])\n```\n\n----------------------------------------\n\nTITLE: Installing GSSAPI Authentication Support\nDESCRIPTION: Command to install Motor with GSSAPI authentication support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[gssapi]\"\n```\n\n----------------------------------------\n\nTITLE: Converting from WaitOp Pattern to Futures in Motor 0.2\nDESCRIPTION: Example of converting code that used Motor 0.1's WaitOp pattern to the new Futures-based approach in Motor 0.2, showing how to work with cursor results asynchronously.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Old style with Motor 0.1:\n@gen.engine\ndef get_some_documents():\n    cursor = collection.find().sort('_id').limit(2)\n    cursor.to_list(callback=(yield gen.Callback('key')))\n    do_something_while_we_wait()\n    try:\n        documents = yield motor.WaitOp('key')\n        print documents\n    except Exception, e:\n        print e\n\n# New style with Motor 0.2:\n@gen.coroutine\ndef f():\n    cursor = collection.find().sort('_id').limit(2)\n    future = cursor.to_list(2)\n    do_something_while_we_wait()\n    try:\n        documents = yield future\n        print documents\n    except Exception, e:\n        print e\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit _id Projection Instead of Empty Projection in MongoDB Motor\nDESCRIPTION: Shows how to explicitly request only the _id field instead of using an empty projection, which now returns the entire document instead of just the _id field.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nawait coll.find({}, projection={})\n```\n\nLANGUAGE: python\nCODE:\n```\nawait coll.find({}, projection={\"_id\":1})\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Authentication Support\nDESCRIPTION: Command to install Motor with MongoDB-AWS authentication support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[aws]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with Snappy Compression\nDESCRIPTION: Command to install Motor with Snappy compression support for wire protocol compression.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[snappy]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with Zstandard Compression\nDESCRIPTION: Command to install Motor with Zstandard compression support for wire protocol compression.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[zstd]\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB via Unix Domain Socket\nDESCRIPTION: Demonstrates how to connect to MongoDB using a Unix domain socket path that must be URL-encoded.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npath = \"/tmp/mongodb-27017.sock\"\nMotorClient(\"mongodb://%s\" % urllib.parse.quote_plus(path))\n```\n\n----------------------------------------\n\nTITLE: Installing Zstandard Compression Support\nDESCRIPTION: Command to install Motor with Zstandard wire protocol compression support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[zstd]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Snappy Compression Support\nDESCRIPTION: Command to install Motor with Snappy wire protocol compression support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[snappy]\"\n```\n\n----------------------------------------\n\nTITLE: Installing OCSP Support\nDESCRIPTION: Command to install Motor with OCSP (Online Certificate Status Protocol) support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[ocsp]\"\n```\n\n----------------------------------------\n\nTITLE: Installing SRV URI Support\nDESCRIPTION: Command to install Motor with support for mongodb+srv:// URIs.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[srv]\"\n```\n\n----------------------------------------\n\nTITLE: PyMongo JavaScript Stored Procedure Example\nDESCRIPTION: Shows how PyMongo supports JavaScript procedures stored in MongoDB, which is a feature not supported in Motor. This example demonstrates defining and calling a stored JavaScript function.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/differences.rst#2025-04-17_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> db.system_js.my_func = \"function(x) { return x * x; }\"\n>>> db.system_js.my_func(2)\n4.0\n```\n\n----------------------------------------\n\nTITLE: Installing All Optional Dependencies\nDESCRIPTION: Command to install Motor with all available optional dependencies including GSSAPI, AWS, OCSP, Snappy, SRV, Zstandard, and encryption support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[gssapi,aws,ocsp,snappy,srv,zstd,encryption]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Motor Python Package\nDESCRIPTION: Command to install the Motor MongoDB driver using pip package manager. This is the recommended way to install Motor in your Python environment.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install motor\n```\n\n----------------------------------------\n\nTITLE: Checking MongoDB Lock Status in Motor 0.2\nDESCRIPTION: Example of how to check if MongoDB is locked after the removal of the is_locked method in Motor 0.2, using the admin.current_op() command instead.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Old approach with Motor 0.1:\nlocked = yield motor.Op(client.is_locked)\n\n# New approach with Motor 0.2:\nresult = yield client.admin.current_op()\nlocked = bool(result.get('fsyncLock', None))\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with Compression Support\nDESCRIPTION: pip command to install Motor with optional dependencies for Snappy and Zstandard compression support.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/configuration.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m pip install \"motor[snappy, zstd]\"\n```\n\n----------------------------------------\n\nTITLE: Setting Motor Version Requirements\nDESCRIPTION: Configuring the Motor version requirements in requirements.txt to prepare for migration to 3.0.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmotor >= 2.5, < 3.0\n```\n\n----------------------------------------\n\nTITLE: Converting from WaitAllOps Pattern to Futures List in Motor 0.2\nDESCRIPTION: Example showing how to convert code that used Motor 0.1's WaitAllOps pattern to yield a list of Futures in Motor 0.2, demonstrating parallel MongoDB queries.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Old style with Motor 0.1:\n@gen.engine\ndef get_two_documents_in_parallel(collection):\n    collection.find_one(\n        {'_id': 1}, callback=(yield gen.Callback('one')))\n\n    collection.find_one(\n        {'_id': 2}, callback=(yield gen.Callback('two')))\n\n    try:\n        doc_one, doc_two = yield motor.WaitAllOps(['one', 'two'])\n        print doc_one, doc_two\n    except Exception, e:\n        print e\n\n# New style with Motor 0.2:\n@gen.coroutine\ndef get_two_documents_in_parallel(collection):\n    future_0 = collection.find_one({'_id': 1})\n    future_1 = collection.find_one({'_id': 2})\n\n    try:\n        doc_one, doc_two = yield [future_0, future_1]\n        print doc_one, doc_two\n    except Exception, e:\n        print e\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Client-Side Field Level Encryption Dependencies\nDESCRIPTION: Command to install Motor driver with encryption support, which includes the pymongocrypt dependency required for client-side field level encryption.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/examples/encryption.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install 'motor[encryption]'\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with MongoDB Operations in Motor 0.2\nDESCRIPTION: Example of using callbacks with Motor 0.2 to handle the result of a MongoDB query operation, demonstrating that the callback approach is still supported alongside the new Futures-based API.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef callback(document, error):\n    if error:\n        logging.error(\"Oh no!\")\n    else:\n        print document\n\ncollection.find_one({'_id': my_id}, callback=callback)\n```\n\n----------------------------------------\n\nTITLE: AsyncIOMotorCursor Class Reference (RST)\nDESCRIPTION: ReStructuredText documentation for the AsyncIOMotorCursor class, which provides async iteration over MongoDB query results.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/cursors.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:class:`~motor.motor_asyncio.AsyncIOMotorCursor`\n================================================\n\n.. currentmodule:: motor.motor_asyncio\n\n.. autoclass:: AsyncIOMotorCursor\n  :members:\n  :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Motor MongoDB Driver via pip\nDESCRIPTION: Basic installation command for Motor MongoDB driver using pip package manager.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install motor\n```\n\n----------------------------------------\n\nTITLE: Documenting AsyncIOMotorClientSession Class in Python\nDESCRIPTION: This code snippet uses Sphinx documentation syntax to generate documentation for the AsyncIOMotorClientSession class from the motor.motor_asyncio module. It includes all members of the class in the documentation.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/asyncio_motor_client_session.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: motor.motor_asyncio.AsyncIOMotorClientSession\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with All Optional Dependencies\nDESCRIPTION: Command to install Motor with all optional dependencies for full functionality including authentication methods, compression, and encryption.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[gssapi,aws,ocsp,snappy,srv,zstd,encryption]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with pip\nDESCRIPTION: Basic installation command for Motor using pip package manager.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install motor\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation with Sphinx\nDESCRIPTION: Sphinx autoclass directive that automatically documents the AsyncIOMotorChangeStream class and all its members. This generates comprehensive API documentation for the class.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/asyncio_motor_change_stream.rst#2025-04-17_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: AsyncIOMotorChangeStream\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with OCSP Support\nDESCRIPTION: Command to install Motor with Online Certificate Status Protocol (OCSP) support for enhanced security.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[ocsp]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Motor from Source\nDESCRIPTION: Command to install Motor directly from source code after cloning the repository.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/installation.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install .\n```\n\n----------------------------------------\n\nTITLE: Using Callback Pattern in Motor 1.x\nDESCRIPTION: Demonstrates the original callback API pattern used in earlier versions of Motor before the adoption of Futures and coroutines.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef callback(result, error):\n    if error:\n        print(error)\n    else:\n        print(result)\n\n\ncollection.find_one({}, callback=callback)\n```\n\n----------------------------------------\n\nTITLE: Installing Motor with SRV URI Support\nDESCRIPTION: Command to install Motor with support for mongodb+srv:// URIs used in MongoDB Atlas connections.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install \"motor[srv]\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings\nDESCRIPTION: Commands to enable runtime warnings or convert warnings to errors for identifying deprecated functionality.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-3.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -Wd <your application>\n\npython -Wd -Werror <your application>\n```\n\n----------------------------------------\n\nTITLE: Session Handling in Motor 1.x\nDESCRIPTION: Shows how client sessions were managed in Motor 1.x with synchronous start_session and end_session methods.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsession = client.start_session()\ndoc = await client.db.collection.find_one({}, session=session)\nsession.end_session()\n```\n\n----------------------------------------\n\nTITLE: Installing Motor and Tornado Dependencies\nDESCRIPTION: Command to install required Python packages using pip\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-tornado.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install tornado motor\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Pre-commit Hooks for Motor Project\nDESCRIPTION: Commands for installing pre-commit and running linting checks. Pre-commit is used for managing code style consistency in the Motor codebase.\nSOURCE: https://github.com/mongodb/motor/blob/master/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit  # or brew install pre-commit for global install.\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox in Motor Project\nDESCRIPTION: Commands for running the test suite using tox. This is the minimal test command that uses the Python version in your path to run the Motor test suite.\nSOURCE: https://github.com/mongodb/motor/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntox -m test\n```\n\n----------------------------------------\n\nTITLE: Running Doctests in Motor Project\nDESCRIPTION: Command for running doctests using tox with Python 3.9+ and MongoDB 5.0 instance on port 27017.\nSOURCE: https://github.com/mongodb/motor/blob/master/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntox -m doctest\n```\n\n----------------------------------------\n\nTITLE: Running Linters with Tox in Motor Project\nDESCRIPTION: Command for manually running linting checks using tox, which will execute the pre-commit hooks to ensure code quality.\nSOURCE: https://github.com/mongodb/motor/blob/master/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntox -m lint\n```\n\n----------------------------------------\n\nTITLE: Specifying pymongo Dependency with GSSAPI Support\nDESCRIPTION: This dependency specification requires pymongo with GSSAPI authentication support installed. It constrains the version to be at least 4.5 but less than 5.0, ensuring compatibility with the Motor driver while allowing for minor updates.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/gssapi.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npymongo[gssapi]>=4.5,<5\n```\n\n----------------------------------------\n\nTITLE: Installing Motor 1.3 with requirements.txt\nDESCRIPTION: Specifies the dependency constraint for Motor 1.3 in a requirements.txt file as an intermediate step before migrating to Motor 2.0.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/migrate-to-motor-2.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmotor >= 1.3, < 2.0\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module in Sphinx Documentation\nDESCRIPTION: Sphinx directive that sets the current module context to motor.motor_asyncio for the documentation that follows.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/asyncio_motor_change_stream.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: motor.motor_asyncio\n```\n\n----------------------------------------\n\nTITLE: Specifying pymongo Dependency with Snappy Compression for Motor MongoDB Driver\nDESCRIPTION: This requirement specification defines a dependency on pymongo with snappy compression support. It restricts the version to be at least 4.5 but less than 5, ensuring compatibility with the current Motor MongoDB driver implementation.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/snappy.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npymongo[snappy]>=4.5,<5\n```\n\n----------------------------------------\n\nTITLE: Using Futures with Motor 0.2 for MongoDB Operations\nDESCRIPTION: Example of using Tornado's coroutine syntax with Motor 0.2 to retrieve a document from MongoDB, showing the more concise syntax compared to Motor 0.1's approach with motor.Op.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/changelog.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Old style:\ndocument = yield motor.Op(collection.find_one, {'_id': my_id})\n\n# New style:\ndocument = yield collection.find_one({'_id': my_id})\n```\n\n----------------------------------------\n\nTITLE: Documenting MotorGridFSBucket Class in Python\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the MotorGridFSBucket class, including all its members.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/gridfs.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: MotorGridFSBucket\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Specifying PyMongo Dependency with ZSTD Compression Support\nDESCRIPTION: Specifies the PyMongo dependency with zstd compression support required for the Motor project. The version constraint requires PyMongo version 4.5 or higher but less than version 5, ensuring compatibility while allowing for minor version updates.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/zstd.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npymongo[zstd]>=4.5,<5\n```\n\n----------------------------------------\n\nTITLE: Specifying pymongo Dependency with OCSP Support for Motor\nDESCRIPTION: This snippet defines the dependency requirement for pymongo with OCSP (Online Certificate Status Protocol) support. It specifies that any version from 4.5 up to but not including 5 is acceptable for the Motor driver to function properly.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/ocsp.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npymongo[ocsp]>=4.5,<5\n```\n\n----------------------------------------\n\nTITLE: Documenting MotorGridOut Class in Python\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the MotorGridOut class, including all its members.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/gridfs.rst#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: MotorGridOut\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for MongoDB Motor Project\nDESCRIPTION: This snippet lists the required Python packages and their version constraints for the MongoDB Motor project. It includes web frameworks like tornado and aiohttp, as well as documentation tools like Sphinx and related packages.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/docs.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntornado\naiohttp\nsphinx>=5.3,<8\nsphinx_rtd_theme>=2,<3\nreadthedocs-sphinx-search~=0.3\nfuro==2024.8.6\n```\n\n----------------------------------------\n\nTITLE: Documenting MotorGridOutCursor Class in Python\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the MotorGridOutCursor class, including all its members.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/gridfs.rst#2025-04-17_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: MotorGridOutCursor\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Specifying pymongo with encryption dependency for MongoDB Motor\nDESCRIPTION: This requirements specification indicates that the MongoDB Motor project depends on pymongo with encryption capabilities. It constrains the pymongo version to be at least 4.5 but less than 5.0, ensuring compatibility while allowing for minor version updates.\nSOURCE: https://github.com/mongodb/motor/blob/master/requirements/encryption.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npymongo[encryption]>=4.5,<5\n```\n\n----------------------------------------\n\nTITLE: Checking Tornado Version\nDESCRIPTION: Command to check the Tornado framework version when using Motor with Tornado applications.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -c \"import tornado; print(tornado.version)\"\n```\n\n----------------------------------------\n\nTITLE: Referencing AsyncIOMotorChangeStream Class in reST Documentation\nDESCRIPTION: ReStructuredText directive that references the AsyncIOMotorChangeStream class from the motor.motor_asyncio module. This sets up the class for documentation generation using Sphinx.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/asyncio_motor_change_stream.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:class:`~motor.motor_asyncio.AsyncIOMotorChangeStream`\n```\n\n----------------------------------------\n\nTITLE: Checking Motor Version\nDESCRIPTION: Command to check the exact version of Motor installed, which is useful for troubleshooting and ensuring compatibility.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -c \"import motor; print(motor.version)\"\n```\n\n----------------------------------------\n\nTITLE: Importing Motor GridFS Classes in Python\nDESCRIPTION: This snippet shows how to import the current module for Motor GridFS classes. It sets up the context for the rest of the documentation.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/gridfs.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: motor.motor_tornado\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version\nDESCRIPTION: Command to check the exact Python version being used, including patch level, to help with troubleshooting issues.\nSOURCE: https://github.com/mongodb/motor/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -c \"import sys; print(sys.version)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for motor.web Module\nDESCRIPTION: This restructuredtext directive configures Sphinx to automatically generate documentation for the motor.web module. It includes all module members while excluding inherited members.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/web.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: motor.web\n   :members:\n   :no-inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Executing Motor Release Version Tagging and Pushing\nDESCRIPTION: A sequence of Git commands to update version numbers, tag the release, and push changes to the repository. This includes bumping the version from development to release, creating a tag, then immediately bumping to the next development version.\nSOURCE: https://github.com/mongodb/motor/blob/master/RELEASE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ # Bump to release version number\n$ git commit -a -m \"BUMP <release version number>\"\n$ git tag -a \"<release version number>\" -m \"BUMP <release version number>\"\n$ # Bump to dev version number\n$ git commit -a -m \"BUMP <dev version number>\"\n$ git push\n$ git push --tags\n```\n\n----------------------------------------\n\nTITLE: Creating Sphinx Documentation TOC for Motor Tornado API\nDESCRIPTION: A reStructuredText table of contents (toctree) directive that organizes the Motor Tornado API documentation into logical sections, including client operations, databases, collections, and other components.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n\n    motor_client\n    motor_client_session\n    motor_database\n    motor_collection\n    motor_change_stream\n    motor_client_encryption\n    cursors\n    gridfs\n    web\n```\n\n----------------------------------------\n\nTITLE: MongoDB Setup Command\nDESCRIPTION: Command to start MongoDB server on default host and port\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/tutorial-asyncio.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mongod\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in RestructuredText\nDESCRIPTION: RestructuredText toctree directive defining the structure of Motor's AsyncIO API documentation with links to related sections and components.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-asyncio/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n\n    asyncio_motor_client\n    asyncio_motor_client_session\n    asyncio_motor_database\n    asyncio_motor_collection\n    asyncio_motor_change_stream\n    asyncio_motor_client_encryption\n    cursors\n    asyncio_gridfs\n    aiohttp\n\n.. seealso:: :doc:`../tutorial-asyncio`\n```\n\n----------------------------------------\n\nTITLE: Cross-Reference to Tutorial in Motor Documentation\nDESCRIPTION: A reStructuredText directive that creates a cross-reference to the Tornado tutorial in the Motor documentation using the seealso directive.\nSOURCE: https://github.com/mongodb/motor/blob/master/doc/api-tornado/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. seealso:: :doc:`../tutorial-tornado`\n```"
  }
]