[
  {
    "owner": "bluesky-social",
    "repo": "expo",
    "content": "TITLE: Running Terminal Commands for Creating Expo and React Native Projects\nDESCRIPTION: This code snippet demonstrates three different ways to create a new Expo or React Native project, including using create-expo-app with prebuild, create-expo-app with a bare minimum template, and react-native init with install-expo-modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app MyApp && cd MyApp && npx expo prebuild\n\n$ npx create-expo-app --template bare-minimum\n\n$ npx react-native init MyApp && cd MyApp && npx install-expo-modules\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo development server\nDESCRIPTION: Command to start the Expo development server which will allow running the app on mobile devices with Expo Go or on web browsers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications in a React Native App\nDESCRIPTION: A complete example of implementing push notifications in a React Native app using expo-notifications. It demonstrates registering for push notifications, handling notification reception and responses, and scheduling notifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! 📬\",\n      body: 'Here is the notification body',\n      data: { data: 'goes here' },\n    },\n    trigger: { seconds: 2 },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n\n  if (Platform.OS === 'android') {\n    await Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    // Learn more about projectId:\n    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid\n    token = (await Notifications.getExpoPushTokenAsync({ projectId: 'your-project-id' })).data;\n    console.log(token);\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications Workflow in Expo-Notifications (React Native, TSX)\nDESCRIPTION: This React Native component demonstrates the complete workflow for push notifications using the expo-notifications, expo-device, and expo-constants packages. It handles permissions, fetches device and Expo push tokens, sets up Android channels, listens for incoming notifications and responses, and lets users schedule a sample notification. Key parameters include platform-specific configuration, notification channel setup, and notification handler logic. Inputs are user interactions (button presses), and outputs are display of token/channel data and scheduled notifications. Requires running on a physical device, with all dependencies installed in an Expo-managed app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);\n  const [notification, setNotification] = useState<Notifications.Notification | undefined>(\n    undefined\n  );\n  const notificationListener = useRef<Notifications.Subscription>();\n  const responseListener = useRef<Notifications.Subscription>();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));\n\n    if (Platform.OS === 'android') {\n      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));\n    }\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      notificationListener.current &&\n        Notifications.removeNotificationSubscription(notificationListener.current);\n      responseListener.current &&\n        Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <Text>{`Channels: ${JSON.stringify(\n        channels.map(c => c.id),\n        null,\n        2\n      )}`}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! \\ud83d\\udce8\",\n      body: 'Here is the notification body',\n      data: { data: 'goes here', test: { test1: 'more data' } },\n    },\n    trigger: { seconds: 2 },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n\n  if (Platform.OS === 'android') {\n    await Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    // Learn more about projectId:\n    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid\n    // EAS projectId is used here.\n    try {\n      const projectId =\n        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;\n      if (!projectId) {\n        throw new Error('Project ID not found');\n      }\n      token = (\n        await Notifications.getExpoPushTokenAsync({\n          projectId,\n        })\n      ).data;\n      console.log(token);\n    } catch (e) {\n      token = `${e}`;\n    }\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  return token;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations Using expo-sqlite in JavaScript\nDESCRIPTION: Shows basic CRUD (Create, Read, Update, Delete) operations using the expo-sqlite API with async methods. It covers creating a table, inserting, updating, deleting, and querying data using execAsync, runAsync, getFirstAsync, getAllAsync, and getEachAsync. Key dependencies: expo-sqlite module and a compatible environment (Expo/React Native). Parameters include SQL queries and parameter bindings; outputs vary per operation (result objects, row data). Some methods do not escape inputs; parameterized bindings are recommended to avoid SQL injection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\n// `execAsync()` is useful for bulk queries when you want to execute altogether.\n// Please note that `execAsync()` does not escape parameters and may lead to SQL injection.\nawait db.execAsync(`\nPRAGMA journal_mode = WAL;\nCREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\nINSERT INTO test (value, intValue) VALUES ('test1', 123);\nINSERT INTO test (value, intValue) VALUES ('test2', 456);\nINSERT INTO test (value, intValue) VALUES ('test3', 789);\n`);\n\n// `runAsync()` is useful when you want to execute some write operations.\nconst result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);\nconsole.log(result.lastInsertRowId, result.changes);\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array\nawait db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object\n\n// `getFirstAsync()` is useful when you want to get a single row from the database.\nconst firstRow = await db.getFirstAsync('SELECT * FROM test');\nconsole.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n// `getAllAsync()` is useful when you want to get all results as an array of objects.\nconst allRows = await db.getAllAsync('SELECT * FROM test');\nfor (const row of allRows) {\n  console.log(row.id, row.value, row.intValue);\n}\n\n// `getEachAsync()` is useful when you want to iterate SQLite query cursor.\nfor await (const row of db.getEachAsync('SELECT * FROM test')) {\n  console.log(row.id, row.value, row.intValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Fetch Tasks in React Native\nDESCRIPTION: A complete example showing how to define, register and manage background fetch tasks in a React Native application using expo-background-fetch and expo-task-manager. The code demonstrates task definition, registration with configuration options, and a functional component to control the background fetch status.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\n\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\n\n// 1. Define the task by providing a name and the function that should be executed\n// Note: This needs to be called in the global scope (e.g outside of your React components)\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  const now = Date.now();\n\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\n\n  // Be sure to return the successful result type!\n  return BackgroundFetch.BackgroundFetchResult.NewData;\n});\n\n// 2. Register the task at some point in your app by providing the same name,\n// and some configuration options for how the background fetch should behave\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 60 * 15, // 15 minutes\n    stopOnTerminate: false, // android only,\n    startOnBoot: true, // android only\n  });\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background fetch calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundFetchAsync() {\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n}\n\nexport default function BackgroundFetchScreen() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundFetch.getStatusAsync();\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\n    setStatus(status);\n    setIsRegistered(isRegistered);\n  };\n\n  const toggleFetchTask = async () => {\n    if (isRegistered) {\n      await unregisterBackgroundFetchAsync();\n    } else {\n      await registerBackgroundFetchAsync();\n    }\n\n    checkStatusAsync();\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background fetch status:{' '}\n          <Text style={styles.boldText}>\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\n          </Text>\n        </Text>\n        <Text>\n          Background fetch task name:{' '}\n          <Text style={styles.boldText}>\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.textContainer}></View>\n      <Button\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\n        onPress={toggleFetchTask}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications in Expo React Native Application\nDESCRIPTION: Complete example demonstrating push notification setup including token registration, notification handling, scheduling, and UI display. Includes channel management for Android and permission handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);\n  const [notification, setNotification] = useState<Notifications.Notification | undefined>(\n    undefined\n  );\n  const notificationListener = useRef<Notifications.Subscription>();\n  const responseListener = useRef<Notifications.Subscription>();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));\n\n    if (Platform.OS === 'android') {\n      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));\n    }\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      notificationListener.current &&\n        Notifications.removeNotificationSubscription(notificationListener.current);\n      responseListener.current &&\n        Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <Text>{`Channels: ${JSON.stringify(\n        channels.map(c => c.id),\n        null,\n        2\n      )}`}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Implementation in React Native\nDESCRIPTION: Complete example of implementing a camera view with front/back camera toggle functionality, including permission handling and styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CameraView, CameraType, useCameraPermissions } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [facing, setFacing] = useState<CameraType>('back');\n  const [permission, requestPermission] = useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading.\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet.\n    return (\n      <View style={styles.container}>\n        <Text style={styles.message}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraFacing() {\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\n  }\n\n  return (\n    <View style={styles.container}>\n      <CameraView style={styles.camera} facing={facing}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </CameraView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  message: {\n    textAlign: 'center',\n    paddingBottom: 10,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Sounds with Expo-AV in React Native (JSX)\nDESCRIPTION: Shows how to record audio with expo-av in a React Native app, handling permissions, audio mode, recording start/stop, and cleanup. Requires expo-av, expo-asset, and react-native. Uses hooks for permission and state management. The button manages recording state, requests permissions if needed, and configures iOS audio mode. Results are logged with the URI of the stored recording. Proper use of try/catch, asynchronous APIs, and returning audio mode to non-record state is demonstrated. Design considers iOS route quirks and permissions. Inputs are user taps; outputs are recorded files stored at URIs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\\nimport { View, StyleSheet, Button } from 'react-native';\\nimport { Audio } from 'expo-av';\\n\\nexport default function App() {\\n  const [recording, setRecording] = useState();\\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\\n\\n  async function startRecording() {\\n    try {\\n      /* @info */ if (permissionResponse.status !== 'granted') {\\n        console.log('Requesting permission..');\\n        await requestPermission();\\n      }\\n      await Audio.setAudioModeAsync({\\n        allowsRecordingIOS: true,\\n        playsInSilentModeIOS: true,\\n      }); /* @end */\\n\\n      console.log('Starting recording..');\\n      /* @info */ const { recording } = await Audio.Recording.createAsync(\\n        /* @end */ Audio.RecordingOptionsPresets.HIGH_QUALITY\\n      );\\n      setRecording(recording);\\n      console.log('Recording started');\\n    } catch (err) {\\n      console.error('Failed to start recording', err);\\n    }\\n  }\\n\\n  async function stopRecording() {\\n    console.log('Stopping recording..');\\n    setRecording(undefined);\\n    /* @info */ await recording.stopAndUnloadAsync(); /* @end */\\n    /* @info iOS may reroute audio playback to the phone earpiece when recording is allowed, so disable once finished. */ await Audio.setAudioModeAsync(\\n      {\\n        allowsRecordingIOS: false,\\n      }\\n    ); /* @end */\\n    /* @info */ const uri = recording.getURI(); /* @end */\\n    console.log('Recording stopped and stored at', uri);\\n  }\\n\\n  return (\\n    <View style={styles.container}>\\n      <Button\\n        title={recording ? 'Stop Recording' : 'Start Recording'}\\n        onPress={recording ? stopRecording : startRecording}\\n      />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    backgroundColor: '#ecf0f1',\\n    padding: 10,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo App with TypeScript\nDESCRIPTION: An example of using app.config.ts for TypeScript-based configuration, providing type checking and autocompletion.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpoConfig, ConfigContext } from 'expo/config';\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  slug: 'my-app',\n  name: 'My App',\n});\n```\n\n----------------------------------------\n\nTITLE: Default eas.json Configuration\nDESCRIPTION: The default configuration for eas.json generated in a new project, defining development, preview, and production build profiles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ImagePicker in React Native\nDESCRIPTION: Example of how to use the ImagePicker component in a React Native application. This code demonstrates picking an image from the camera roll and displaying it.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Image, View, Platform } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Text-to-Speech Implementation in React Native\nDESCRIPTION: This React Native component demonstrates the fundamental usage of the `expo-speech` library. It imports the necessary modules, defines a function `speak` that utilizes `Speech.speak()` to vocalize a string ('1' in this case), and renders a button. Pressing the button triggers the `speak` function, causing the device to output the specified text as speech.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnails with Expo-video-thumbnails (React Native, JSX)\nDESCRIPTION: This snippet provides a full React Native functional component that demonstrates how to generate an image thumbnail from a remote video file using the Expo-video-thumbnails library. It imports necessary modules, uses React hooks for state management, and defines an asynchronous function to call VideoThumbnails.getThumbnailAsync with a video URL and specific timestamp. The generated thumbnail URI is then used to display an Image component. Dependencies: expo-video-thumbnails, react-native, and react. Inputs: None directly; when the button is pressed, it tries to generate a thumbnail for the provided video. Outputs: Renders a button, displays the generated thumbnail image, and shows its URI. Key parameters include the video URI and the timestamp (time: 15000 milliseconds). This example is limited to generating one thumbnail per button press and uses hardcoded video and timestamp values.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Video Playback with Controls in React Native using Expo AV\nDESCRIPTION: This React Native functional component demonstrates how to use the `Video` component from `expo-av` to display and control a video. It utilizes `useRef` to access the video player instance and `useState` to manage playback status. The example includes a button to toggle play/pause based on the `status.isPlaying` property, uses native controls, enables looping, sets the resize mode to contain, and updates state based on playback status changes. Dependencies include `react`, `react-native`, `expo-av`, and `expo-asset`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Video, ResizeMode } from 'expo-av';\n\nexport default function App() {\n  const video = useRef(null);\n  const [status, setStatus] = useState({});\n  return (\n    <View style={styles.container}>\n      <Video\n        ref={video}\n        style={styles.video}\n        source={{\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        }}\n        useNativeControls\n        resizeMode={ResizeMode.CONTAIN}\n        isLooping\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\n      />\n      <View style={styles.buttons}>\n        <Button\n          title={status.isPlaying ? 'Pause' : 'Play'}\n          onPress={() =>\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n  },\n  video: {\n    alignSelf: 'center',\n    width: 320,\n    height: 200,\n  },\n  buttons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearGradient in a React Native Expo App (TypeScript)\nDESCRIPTION: This code demonstrates how to use the LinearGradient component from the expo-linear-gradient package within a React Native functional component, utilizing TypeScript (TSX). The example shows two gradient components: one as a background and another as a styled button overlaying the background. Dependencies include react-native and expo-linear-gradient. Key parameters include the colors array for gradient transitions and style objects for positioning. Inputs include an array of color strings and optional styling; outputs are rendered UI views with the desired gradients and child components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\\nimport { LinearGradient } from 'expo-linear-gradient';\\n\\nexport default function App() {\\n  return (\\n    <View style={styles.container}>\\n      <LinearGradient\\n        // Background Linear Gradient\\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\\n        style={styles.background}\\n      />\\n      <LinearGradient\\n        // Button Linear Gradient\\n        colors={['#4c669f', '#3b5998', '#192f6a']}\\n        style={styles.button}>\\n        <Text style={styles.text}>Sign in with Facebook</Text>\\n      </LinearGradient>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    backgroundColor: 'orange',\\n  },\\n  background: {\\n    position: 'absolute',\\n    left: 0,\\n    right: 0,\\n    top: 0,\\n    height: 300,\\n  },\\n  button: {\\n    padding: 15,\\n    alignItems: 'center',\\n    borderRadius: 5,\\n  },\\n  text: {\\n    backgroundColor: 'transparent',\\n    fontSize: 15,\\n    color: '#fff',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Video Playback with Controls using Expo AV in React Native\nDESCRIPTION: This snippet demonstrates how to use the `Video` component from `expo-av` in a React Native application. It utilizes `useRef` to get a reference to the video player instance and `useState` to manage the playback status. A button allows users to play or pause the video by calling `playAsync()` or `pauseAsync()` on the video reference. The example includes basic styling and configuration properties like `source`, `useNativeControls`, `resizeMode`, and `isLooping`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Video, ResizeMode } from 'expo-av';\n\nexport default function App() {\n  const video = useRef(null);\n  const [status, setStatus] = useState({});\n  return (\n    <View style={styles.container}>\n      <Video\n        ref={video}\n        style={styles.video}\n        source={{\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        }}\n        useNativeControls\n        resizeMode={ResizeMode.CONTAIN}\n        isLooping\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\n      />\n      <View style={styles.buttons}>\n        <Button\n          title={status.isPlaying ? 'Pause' : 'Play'}\n          onPress={() =>\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\n/* @hide const styles = StyleSheet.create({ ... }); */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n  },\n  video: {\n    alignSelf: 'center',\n    width: 320,\n    height: 200,\n  },\n  buttons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications in a React Native App (JSX)\nDESCRIPTION: This React Native functional component demonstrates registering for push notifications using `expo-notifications` and `expo-device`. It fetches the Expo push token, sets up listeners for received notifications and notification responses, displays the token and notification details, and includes a button to schedule a local notification. It requires a physical device for testing push notifications and sets up a default notification channel for Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! 📬\",\n      body: 'Here is the notification body',\n      data: { data: 'goes here' },\n    },\n    trigger: { seconds: 2 },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n\n  if (Platform.OS === 'android') {\n    await Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    // Learn more about projectId:\n    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid\n    token = (await Notifications.getExpoPushTokenAsync({ projectId: 'your-project-id' })).data;\n    console.log(token);\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a URL with Expo WebBrowser in React Native\nDESCRIPTION: Provides a basic example of opening a web URL using `WebBrowser.openBrowserAsync` within a React Native functional component. It imports the `expo-web-browser` library, defines an asynchronous function to handle the button press, opens 'https://expo.dev', and displays the result. Dependencies include `react`, `react-native`, `expo-web-browser`, and `expo-constants`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\n/* @hide */\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: React Native Hello World Example\nDESCRIPTION: Basic React Native component structure showing a centered 'Hello world' text. Demonstrates fundamental styling with StyleSheet and basic component layout using flexbox.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Hello world!</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Background Fetch with Expo in React Native (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use expo-background-fetch and expo-task-manager in a React Native (TypeScript) application. It covers defining a background task, registering/unregistering it with configuration options (e.g., interval, behavior on terminate/reboot), checking status, and toggling registration through UI. Dependencies include 'expo-background-fetch', 'expo-task-manager', and 'react-native'. Key parameters include minimumInterval, stopOnTerminate, and startOnBoot for scheduling; the task name for identification; and functions for registration and unregistration. Inputs are user interaction (button press) and system background events, and outputs are logs and UI updates indicating task state. The demo should be called from a direct React Native app context and is limited to running when the app is backgrounded, not terminated.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\n\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\n\n// 1. Define the task by providing a name and the function that should be executed\n// Note: This needs to be called in the global scope (e.g outside of your React components)\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  const now = Date.now();\n\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\n\n  // Be sure to return the successful result type!\n  return BackgroundFetch.BackgroundFetchResult.NewData;\n});\n\n// 2. Register the task at some point in your app by providing the same name,\n// and some configuration options for how the background fetch should behave\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 60 * 15, // 15 minutes\n    stopOnTerminate: false, // android only,\n    startOnBoot: true, // android only\n  });\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background fetch calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundFetchAsync() {\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n}\n\nexport default function BackgroundFetchScreen() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundFetch.getStatusAsync();\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\n    setStatus(status);\n    setIsRegistered(isRegistered);\n  };\n\n  const toggleFetchTask = async () => {\n    if (isRegistered) {\n      await unregisterBackgroundFetchAsync();\n    } else {\n      await registerBackgroundFetchAsync();\n    }\n\n    checkStatusAsync();\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background fetch status:{' '}\n          <Text style={styles.boldText}>\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\n          </Text>\n        </Text>\n        <Text>\n          Background fetch task name:{' '}\n          <Text style={styles.boldText}>\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.textContainer}></View>\n      <Button\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\n        onPress={toggleFetchTask}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Operations with SQLite in Expo\nDESCRIPTION: Demonstrates common database operations including creating tables, inserting, updating, and querying data using various methods like execAsync(), runAsync(), getFirstAsync(), and getAllAsync()\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.execAsync(`\nPRAGMA journal_mode = WAL;\nCREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\nINSERT INTO test (value, intValue) VALUES ('test1', 123);\nINSERT INTO test (value, intValue) VALUES ('test2', 456);\nINSERT INTO test (value, intValue) VALUES ('test3', 789);\n`);\n\nconst result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);\nconsole.log(result.lastInsertRowId, result.changes);\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa');\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']);\nawait db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' });\n\nconst firstRow = await db.getFirstAsync('SELECT * FROM test');\nconsole.log(firstRow.id, firstRow.value, firstRow.intValue);\n\nconst allRows = await db.getAllAsync('SELECT * FROM test');\nfor (const row of allRows) {\n  console.log(row.id, row.value, row.intValue);\n}\n\nfor await (const row of db.getEachAsync('SELECT * FROM test')) {\n  console.log(row.id, row.value, row.intValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notification Deep Linking in React Navigation - TypeScript\nDESCRIPTION: This TypeScript React snippet sets up a NavigationContainer using React Navigation, with linking configured to respond to both standard deep links and URLs from incoming push notifications via expo-notifications. It asynchronously retrieves the initial URL, prioritizing deep links and falling back to notification data. Subscriptions handle incoming URL events and notification responses, ensuring navigation actions react promptly to incoming data. Dependencies include react-native, @react-navigation/native, and expo-notifications. Key parameters are the subscribed notification listeners and navigation functions. Inputs are deep link URLs and notification payloads; output is navigation within the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          // First, you may want to do the default deep link handling\n          // Check if app was opened from a deep link\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          // Handle URL from expo push notifications\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          // Listen to incoming links from deep linking\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          // Listen to expo push notifications\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n\n            // Any custom logic to see whether the URL needs to be handled\n            //...\n\n            // Let React Navigation handle the URL\n            listener(url);\n          });\n\n          return () => {\n            // Clean up the event listeners\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating useSQLiteContext() Hook with React.Suspense in React Native (TSX)\nDESCRIPTION: Shows how to wrap the SQLiteProvider and React components within a React.Suspense boundary to defer UI rendering until the database is ready. The useSuspense property enables this feature, ensuring fallback UI is displayed until init is complete. Requires expo-sqlite, React 18+, and use of SQLiteProvider with useSuspense; fallback prop provides alternative content during database loading. Useful for delaying database-dependent rendering in asynchronous app setups.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { Suspense } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback={<Fallback />}>\n        <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded} useSuspense>\n          <Header />\n          <Content />\n        </SQLiteProvider>\n      </Suspense>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Picking and Displaying an Image using expo-image-picker (TypeScript)\nDESCRIPTION: This React Native component example, written in TypeScript, demonstrates how to use `expo-image-picker`. It defines a function `pickImage` that calls `ImagePicker.launchImageLibraryAsync` to open the device's image library. The function allows image editing, sets an aspect ratio, specifies quality, and updates the component's state with the selected image's URI to display it using the `Image` component. No explicit permission request is needed for `launchImageLibraryAsync`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Expo CLI Command Overview\nDESCRIPTION: Lists the basic command structure and available commands in Expo CLI including start, export, run, install, and authentication commands.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage\n  $ npx expo <command>\n\nCommands\n  start, export\n  run:ios, run:android, prebuild\n  install, customize, config\n  login, logout, whoami, register\n\nOptions\n  --version, -v   Version number\n  --help, -h      Usage info\n```\n\n----------------------------------------\n\nTITLE: Using the Expo Image Component in React Native\nDESCRIPTION: Demonstrates how to import and use the `Image` component from `expo-image` in a React Native application. It shows setting the image source, providing a Blurhash placeholder, applying content fit (`cover`), and adding a transition effect. Basic styling using `StyleSheet` is also included.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={{ blurhash }}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Descope OAuth Authentication with Expo Auth Session\nDESCRIPTION: Demonstrates implementing OAuth authentication flow using Descope as the provider. The code handles authentication request, token exchange, and logout functionality using expo-auth-session.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst descopeUrl = `https://api.descope.com/${descopeProjectId}`;\nconst redirectUri = AuthSession.makeRedirectUri();\n\nexport default function App() {\n  const [authTokens, setAuthTokens] = useState(null);\n  const discovery = AuthSession.useAutoDiscovery(descopeUrl);\n\n  const [request, response, promptAsync] = AuthSession.useAuthRequest(\n    {\n      clientId: descopeProjectId,\n      responseType: AuthSession.ResponseType.Code,\n      redirectUri,\n      usePKCE: true,\n      scopes: ['openid', 'profile', 'email'],\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response) {\n      if (response.error) {\n        console.error(\n          'Authentication error',\n          response.params.error_description || 'something went wrong'\n        );\n        return;\n      }\n      if (response.type === 'success') {\n        const exchangeFn = async (exchangeTokenReq) => {\n          try {\n            const exchangeTokenResponse = await AuthSession.exchangeCodeAsync(\n              exchangeTokenReq,\n              discovery\n            );\n            setAuthTokens(exchangeTokenResponse);\n          } catch (error) {\n            console.error(error);\n          }\n        };\n\n        exchangeFn({\n          clientId: descopeProjectId,\n          code: response.params.code,\n          redirectUri,\n          extraParams: {\n            code_verifier: request.codeVerifier,\n          },\n        });\n      }\n    }\n  }, [discovery, request, response]);\n\n  const logout = async () => {\n    const revokeResponse = await AuthSession.revokeAsync(\n      {\n        clientId: descopeProjectId,\n        token: authTokens.refreshToken,\n      },\n      discovery\n    );\n    if (revokeResponse) {\n      setAuthTokens(null);\n    }\n  };\n\n  return (\n    <View>\n      {authTokens ? (\n        <Button title=\"Logout\" onPress={logout} />\n      ) : (\n        <Button\n          disabled={!request}\n          title=\"Login\"\n          onPress={promptAsync}\n        />\n      )}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Component in Expo Router (Universal)\nDESCRIPTION: This snippet demonstrates how to create a universal page component that renders text using the React Native Text component. It's suitable for all platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/create-pages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\n\nexport default function Page() {\n  return <Text>Top-level page</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ImagePicker in JavaScript/TypeScript\nDESCRIPTION: Shows how to import the ImagePicker module from the expo-image-picker package for use in React Native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\n```\n\n----------------------------------------\n\nTITLE: Saving and Retrieving Secure Values with SecureStore in React Native (JSX)\nDESCRIPTION: This React Native component example demonstrates saving and retrieving key-value pairs using expo-secure-store on iOS and Android. It provides UI inputs for keys and values, calls SecureStore.setItemAsync to store data, and uses SecureStore.getItemAsync to retrieve data. Prerequisites include installing expo-secure-store and react-native; size limit for stored values is 2048 bytes. User interactions are handled via standard TextInput and Button components with styles. Alerts display retrieved values or indicate if no value is found.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\\nimport * as SecureStore from 'expo-secure-store';\\n\\nasync function save(key, value) {\\n  await SecureStore.setItemAsync(key, value);\\n}\\n\\nasync function getValueFor(key) {\\n  let result = await SecureStore.getItemAsync(key);\\n  if (result) {\\n    alert(\\\"\\ud83d\\udd10 Here's your value \\ud83d\\udd10 \\n\\\" + result);\\n  } else {\\n    alert('No values stored under that key.');\\n  }\\n}\\n\\nexport default function App() {\\n  const [key, onChangeKey] = useState('Your key here');\\n  const [value, onChangeValue] = useState('Your value here');\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\\n      {/* @hide Add some TextInput components... */}\\n\\n      <TextInput\\n        style={styles.textInput}\\n        clearTextOnFocus\\n        onChangeText={text => onChangeKey(text)}\\n        value={key}\\n      />\\n      <TextInput\\n        style={styles.textInput}\\n        clearTextOnFocus\\n        onChangeText={text => onChangeValue(text)}\\n        value={value}\\n      />\\n      {/* @end */}\\n      <Button\\n        title=\\\"Save this key/value pair\\\"\\n        onPress={() => {\\n          save(key, value);\\n          onChangeKey('Your key here');\\n          onChangeValue('Your value here');\\n        }}\\n      />\\n      <Text style={styles.paragraph}>\\ud83d\\udd10 Enter your key \\ud83d\\udd10</Text>\\n      <TextInput\\n        style={styles.textInput}\\n        onSubmitEditing={event => {\\n          getValueFor(event.nativeEvent.text);\\n        }}\\n        placeholder=\\\"Enter the key for the value you want to get\\\"\\n      />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    paddingTop: 10,\\n    backgroundColor: '#ecf0f1',\\n    padding: 8,\\n  },\\n  paragraph: {\\n    marginTop: 34,\\n    margin: 24,\\n    fontSize: 18,\\n    fontWeight: 'bold',\\n    textAlign: 'center',\\n  },\\n  textInput: {\\n    height: 35,\\n    borderColor: 'gray',\\n    borderWidth: 0.5,\\n    padding: 4,\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component to Handle Image Selection\nDESCRIPTION: Updates the Button component to receive and use the onPress prop that will trigger the image picker functionality when the button is pressed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Button({ label, theme, onPress}) {\n  // ...rest of the code remains same\n  if (theme === \"primary\") {\n    return (\n      <View>\n        {/* ...rest of the code remains same */}\n        <Pressable\n          style={[styles.button, { backgroundColor: '#fff' }]}\n          onPress={onPress}\n        >\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Screen Orientation API (JavaScript)\nDESCRIPTION: Shows how to import the ScreenOrientation module from expo-screen-orientation using ES module syntax in JavaScript. This statement is required in any JavaScript or TypeScript file where you intend to programmatically manage screen orientation at runtime. No parameters are required at import, and the resulting ScreenOrientation object provides API methods for setting or querying device orientation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in Expo Router\nDESCRIPTION: This snippet demonstrates how to access dynamic route parameters using the useLocalSearchParams hook in Expo Router. It retrieves the 'slug' parameter from the URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/create-pages.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams } from 'expo-router';\nimport { Text } from 'react-native';\n\nexport default function Page() {\n  const { slug } = useLocalSearchParams();\n\n  return <Text>Blog post: {slug}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage State Hook in TypeScript\nDESCRIPTION: This snippet defines a custom hook useStorageState for persisting tokens securely on native platforms using expo-secure-store and in local storage on web. It handles async state management and provides a consistent API across platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport  { useEffect, useCallback, useReducer } from 'react';\nimport * as SecureStore from 'expo-secure-store';\nimport { Platform } from 'react-native';\n\ntype UseStateHook<T> = [[boolean, T | null], (value: T | null) => void];\n\nfunction useAsyncState<T>(\n  initialValue: [boolean, T | null] = [true, null],\n): UseStateHook<T> {\n  return useReducer(\n    (state: [boolean, T | null], action: T | null = null): [boolean, T | null] => [false, action],\n    initialValue\n  ) as UseStateHook<T>;\n}\n\nexport async function setStorageItemAsync(key: string, value: string | null) {\n  if (Platform.OS === 'web') {\n    try {\n      if (value === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, value);\n      }\n    } catch (e) {\n      console.error('Local storage is unavailable:', e);\n    }\n  } else {\n    if (value == null) {\n      await SecureStore.deleteItemAsync(key);\n    } else {\n      await SecureStore.setItemAsync(key, value);\n    }\n  }\n}\n\nexport function useStorageState(key: string): UseStateHook<string> {\n  // Public\n  const [state, setState] = useAsyncState<string>();\n\n  // Get\n  useEffect(() => {\n    if (Platform.OS === 'web') {\n      try {\n        if (typeof localStorage !== 'undefined') {\n          setState(localStorage.getItem(key));\n        }\n      } catch (e) {\n        console.error('Local storage is unavailable:', e);\n      }\n    } else {\n      SecureStore.getItemAsync(key).then(value => {\n        setState(value);\n      });\n    }\n  }, [key]);\n\n  // Set\n  const setValue = useCallback(\n    (value: string | null) => {\n      setState(value);\n      setStorageItemAsync(key, value);\n    },\n    [key]\n  );\n\n  return [state, setValue];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Battery Level in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the useBatteryLevel hook from expo-battery to display the current battery level in a React Native application. It creates a simple component that renders the battery level as text.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Notification Display Setup in Expo\nDESCRIPTION: Simple example showing how to configure notification handler and schedule a basic notification with title and body content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call the method\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network State Changes with NetInfo in JavaScript\nDESCRIPTION: Shows how to use `NetInfo.addEventListener` to register a listener function that gets called whenever the network state changes. The function receives the updated state object. The `addEventListener` call returns an `unsubscribe` function which can be called later to remove the listener.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Complete Localization Example in Expo\nDESCRIPTION: Full implementation example showing localization with styling, fallback support, and locale display.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { View, StyleSheet, Text } from 'react-native';\nimport { getLocales } from 'expo-localization';\nimport { I18n } from 'i18n-js';\n\nconst translations = {\n  en: { welcome: 'Hello', name: 'Charlie' },\n  ja: { welcome: 'こんにちは' },\n};\nconst i18n = new I18n(translations);\n\ni18n.locale = getLocales()[0].languageCode ?? 'en';\n\ni18n.enableFallback = true;\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>\n        {i18n.t('welcome')} {i18n.t('name')}\n      </Text>\n      <Text>Current locale: {i18n.locale}</Text>\n      <Text>Device locale: {getLocales()[0].languageCode}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  text: {\n    fontSize: 20,\n    marginBottom: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Expo Push Token and Uploading to Server in TypeScript\nDESCRIPTION: This function registers a device for push notifications by fetching an Expo push token and uploading it to a server. It handles both managed and bare workflow by conditionally setting the experienceId parameter.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\n\nexport async function registerForPushNotificationsAsync(userId: string) {\n  let experienceId = undefined;\n  if (!Constants.manifest) {\n    // Absence of the manifest means we're in bare workflow\n    experienceId = '@username/example';\n  }\n  const expoPushToken = await Notifications.getExpoPushTokenAsync({\n    experienceId,\n  });\n  await fetch('https://example.com/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      userId,\n      expoPushToken,\n    }),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Location Permissions and Reading Current Position (JavaScript/React Native)\nDESCRIPTION: This is a functional React Native component that uses expo-location to request location permissions and fetch the user's current position asynchronously. Dependencies include expo-location and react-native, and optionally expo-device for emulator checks. useEffect is used to initiate the permission request and location call on mount. Handles both Android/iOS permission flows and displays location or error in the UI. Inputs: none directly; outputs: displayed location as JSON string or error message. Limitations: Requires physical device for Android in Snack, and user must grant location permissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { Platform, Text, View, StyleSheet } from 'react-native';\\n/* @hide */\\nimport * as Device from 'expo-device';\\n/* @end */\\nimport * as Location from 'expo-location';\\n\\nexport default function App() {\\n  const [location, setLocation] = useState(null);\\n  const [errorMsg, setErrorMsg] = useState(null);\\n\\n  useEffect(() => {\\n    (async () => {\\n      /* @hide */\\n      if (Platform.OS === 'android' && !Device.isDevice) {\\n        setErrorMsg(\\n          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'\\n        );\\n        return;\\n      }\\n      /* @end */\\n      let { status } = await Location.requestForegroundPermissionsAsync();\\n      if (status !== 'granted') {\\n        setErrorMsg('Permission to access location was denied');\\n        return;\\n      }\\n\\n      let location = await Location.getCurrentPositionAsync({});\\n      setLocation(location);\\n    })();\\n  }, []);\\n\\n  let text = 'Waiting..';\\n  if (errorMsg) {\\n    text = errorMsg;\\n  } else if (location) {\\n    text = JSON.stringify(location);\\n  }\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.paragraph}>{text}</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    padding: 20,\\n  },\\n  paragraph: {\\n    fontSize: 18,\\n    textAlign: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation with React Native and Expo\nDESCRIPTION: Initial implementation of a checkbox using useState hook and Ionicons from @expo/vector-icons. Creates a toggleable checkbox with basic styling and state management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/implementing-a-checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Pressable, StyleSheet, Text, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\nfunction MyCheckbox() {\n  const [checked, setChecked] = useState(false);\n  return (\n    <Pressable\n      style={[styles.checkboxBase, checked && styles.checkboxChecked]}\n      onPress={() => setChecked(!checked)}>\n      {checked && <Ionicons name=\"checkmark\" size={24} color=\"white\" />}\n    </Pressable>\n  );\n}\n\nexport default function App() {\n  return (\n    <View style={styles.appContainer}>\n      <Text style={styles.appTitle}>Checkbox Example</Text>\n      <View style={styles.checkboxContainer}>\n        <MyCheckbox />\n        <Text style={styles.checkboxLabel}>{`⬅️ Click!`}</Text>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Giphy GIFs with Expo FileSystem in TypeScript\nDESCRIPTION: This TypeScript example shows how to download, cache, retrieve, and manage GIF files from Giphy using expo-file-system. It includes functions for ensuring directory existence, downloading multiple GIFs, getting single GIFs, and deleting all cached GIFs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BarCodeScanner Component in React Native\nDESCRIPTION: Complete example showing how to implement a barcode scanner with permission handling, scanning functionality, and UI feedback in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default function App() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    const getBarCodeScannerPermissions = async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    };\n\n    getBarCodeScannerPermissions();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Checking for Updates with expo-updates in React Native\nDESCRIPTION: Demonstrates how to manually check for, download, and apply updates within a React Native application using the `expo-updates` library. This example shows using `Updates.checkForUpdateAsync` to see if an update is available, `Updates.fetchUpdateAsync` to download it, and `Updates.reloadAsync` to restart the app with the new update. This approach requires disabling the default automatic check by setting `checkAutomatically` to `ON_ERROR_RECOVERY` or `NEVER`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      // You can also add an alert() to see the error message in case of an error when fetching updates.\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Operations with SQLite in Expo\nDESCRIPTION: Demonstrates core database operations including table creation, insertion, updates, deletions, and different query methods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.execAsync(`\nPRAGMA journal_mode = WAL;\nCREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\nINSERT INTO test (value, intValue) VALUES ('test1', 123);\nINSERT INTO test (value, intValue) VALUES ('test2', 456);\nINSERT INTO test (value, intValue) VALUES ('test3', 789);\n`);\n\nconst result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);\nconsole.log(result.lastInsertRowId, result.changes);\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa');\nawait db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']);\nawait db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' });\n\nconst firstRow = await db.getFirstAsync('SELECT * FROM test');\nconsole.log(firstRow.id, firstRow.value, firstRow.intValue);\n\nconst allRows = await db.getAllAsync('SELECT * FROM test');\nfor (const row of allRows) {\n  console.log(row.id, row.value, row.intValue);\n}\n\nfor await (const row of db.getEachAsync('SELECT * FROM test')) {\n  console.log(row.id, row.value, row.intValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Safe Area Context using SafeAreaProvider in React Native/JSX\nDESCRIPTION: This example shows the required usage of SafeAreaProvider from react-native-safe-area-context at the root of the app to enable proper propagation of inset data. All components below the provider can then use the safe area context or the useSafeAreaInsets hook. This is especially necessary for proper functioning on platforms like the web or modals in apps with react-native-screens.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a Background Fetch Task in React Native\nDESCRIPTION: This code demonstrates a complete implementation of background fetch functionality, including task definition, registration, status checking, and UI for toggling the background task. It shows how to use expo-background-fetch with expo-task-manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\n\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\n\n// 1. Define the task by providing a name and the function that should be executed\n// Note: This needs to be called in the global scope (e.g outside of your React components)\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  const now = Date.now();\n\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\n\n  // Be sure to return the successful result type!\n  return BackgroundFetch.BackgroundFetchResult.NewData;\n});\n\n// 2. Register the task at some point in your app by providing the same name,\n// and some configuration options for how the background fetch should behave\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 60 * 15, // 15 minutes\n    stopOnTerminate: false, // android only,\n    startOnBoot: true, // android only\n  });\n}\n\n// 3. (Optional) Unregister tasks by specifying the task name\n// This will cancel any future background fetch calls that match the given name\n// Note: This does NOT need to be in the global scope and CAN be used in your React components!\nasync function unregisterBackgroundFetchAsync() {\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n}\n\nexport default function BackgroundFetchScreen() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundFetch.getStatusAsync();\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\n    setStatus(status);\n    setIsRegistered(isRegistered);\n  };\n\n  const toggleFetchTask = async () => {\n    if (isRegistered) {\n      await unregisterBackgroundFetchAsync();\n    } else {\n      await registerBackgroundFetchAsync();\n    }\n\n    checkStatusAsync();\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background fetch status:{' '}\n          <Text style={styles.boldText}>\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\n          </Text>\n        </Text>\n        <Text>\n          Background fetch task name:{' '}\n          <Text style={styles.boldText}>\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.textContainer}></View>\n      <Button\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\n        onPress={toggleFetchTask}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAvoidingView in React Native\nDESCRIPTION: This snippet demonstrates how to use KeyboardAvoidingView to adjust the layout when the keyboard appears, ensuring the TextInput remains visible. It uses different behaviors for iOS and Android platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardAvoidingView, TextInput } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : undefined} style={{ flex: 1 }}>\n      <TextInput placeholder=\"Type here...\" />\n    </KeyboardAvoidingView>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notification Event Listeners in React Native\nDESCRIPTION: This snippet demonstrates how to set up notification event listeners using expo-notifications in a React Native app. It includes listeners for receiving notifications and handling user interactions with notifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n  notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n    setNotification(notification);\n  });\n\n  responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n    console.log(response);\n  });\n\n  return () => {\n    Notifications.removeNotificationSubscription(notificationListener.current);\n    Notifications.removeNotificationSubscription(responseListener.current);\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Modes in Expo app.json (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the app.json file to enable background location, fetch, and remote notification features on iOS devices when using expo-task-manager in a React Native project. Add the necessary keys to the UIBackgroundModes array under infoPlist in the ios section. This is required for standalone builds and will allow the app to perform specified tasks while running in the background.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"ios\\\": {\\n      \\\"infoPlist\\\": {\\n        \\\"UIBackgroundModes\\\": [\\\"location\\\", \\\"fetch\\\", \\\"remote-notification\\\"]\\n      }\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering and Controlling a Lottie Animation in React Native with Expo (TSX)\nDESCRIPTION: This snippet provides a complete functional React Native component using lottie-react-native to display and control a Lottie animation. It demonstrates setting up a ref with useRef, managing animation playback with Button, and styling components using StyleSheet. Dependencies include lottie-react-native, react, and react-native. The animation JSON file must be available at the specified assets path. The sample allows users to restart the animation, with expected input being a valid Lottie JSON animation file and outputs being the rendered, interactive animation UI in the Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Android Notification Object Structure\nDESCRIPTION: This JSON snippet shows the structure of a notification object received by the addNotificationReceivedListener callback on Android. It includes details about the notification content, trigger, and custom data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    \"trigger\": {\n      \"remoteMessage\": {\n        \"originalPriority\": 2,\n        \"sentTime\": 1724782348210,\n        \"notification\": {\n          \"usesDefaultVibrateSettings\": false,\n          \"color\": null,\n          \"channelId\": null,\n          \"visibility\": null,\n          \"sound\": null,\n          \"tag\": null,\n          \"bodyLocalizationArgs\": null,\n          \"imageUrl\": null,\n          \"title\": \"Chat App\",\n          \"ticker\": null,\n          \"eventTime\": null,\n          \"body\": \"New message from John Doe\",\n          \"titleLocalizationKey\": null,\n          \"notificationPriority\": null,\n          \"icon\": null,\n          \"usesDefaultLightSettings\": false,\n          \"sticky\": false,\n          \"link\": null,\n          \"titleLocalizationArgs\": null,\n          \"bodyLocalizationKey\": null,\n          \"usesDefaultSound\": false,\n          \"clickAction\": null,\n          \"localOnly\": false,\n          \"lightSettings\": null,\n          \"notificationCount\": null\n        },\n        \"data\": {\n          \"channelId\": \"default\",\n          \"message\": \"New message from John Doe\",\n          \"title\": \"Chat App\",\n          \"body\": \"{\\\"senderId\\\":\\\"user123\\\",\\\"senderName\\\":\\\"John Doe\\\",\\\"messageId\\\":\\\"msg789\\\",\\\"conversationId\\\":\\\"conversation-456\\\",\\\"messageType\\\":\\\"text\\\",\\\"timestamp\\\":1724766427}\",\n          \"scopeKey\": \"@betoatexpo/expo-notifications-app\",\n          \"experienceId\": \"@betoatexpo/expo-notifications-app\",\n          \"projectId\": \"51092087-87a4-4b12-8008-145625477434\"\n        },\n        \"to\": null,\n        \"ttl\": 0,\n        \"collapseKey\": \"dev.expo.notificationsapp\",\n        \"messageType\": null,\n        \"priority\": 2,\n        \"from\": \"115310547649\",\n        \"messageId\": \"0:1724782348220771%0f02879c0f02879c\"\n      },\n      \"channelId\": \"default\",\n      \"type\": \"push\"\n    },\n    \"content\": {\n      \"autoDismiss\": true,\n      \"title\": \"Chat App\",\n      \"badge\": null,\n      \"sticky\": false,\n      \"sound\": \"default\",\n      \"body\": \"New message from John Doe\",\n      \"subtitle\": null,\n      \"data\": {\n        \"senderId\": \"user123\",\n        \"senderName\": \"John Doe\",\n        \"messageId\": \"msg789\",\n        \"conversationId\": \"conversation-456\",\n        \"messageType\": \"text\",\n        \"timestamp\": 1724766427\n      }\n    },\n    \"identifier\": \"0:1724782348220771%0f02879c0f02879c\"\n  },\n  \"date\": 1724782348210\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Navigation for Push Notifications in TypeScript\nDESCRIPTION: This code snippet shows how to configure React Navigation's manual linking to handle incoming redirects from push notifications. It includes setting up the NavigationContainer with custom linking configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n\n            listener(url);\n          });\n\n          return () => {\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Channel and Scheduling on Android 8.0+\nDESCRIPTION: This TypeScript code shows how to set up a notification channel with a custom sound for Android 8.0+ and schedule a notification using that channel. It includes setting the channel properties and defining the notification content with the appropriate channelId.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below\n});\n\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email-sound.wav', // <- for Android below 8.0\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails', // <- for Android 8.0+, see definition above\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Splash Screen Control in React Native with Expo\nDESCRIPTION: This example demonstrates how to keep the splash screen visible while loading app resources and then hide it when the app has rendered initial content. It uses the SplashScreen.preventAutoHideAsync() and SplashScreen.hideAsync() methods from expo-splash-screen.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Please remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! 👋</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notification Deep Links with Expo Router in TSX\nDESCRIPTION: Implements a custom React hook `useNotificationObserver` using `expo-notifications` and `expo-router`. This hook listens for both initial and subsequent push notification responses, extracts a URL from the notification's data payload, and navigates to that URL using `router.push`. It should be used in the root layout component to ensure notification-triggered navigation is handled correctly.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n app/_layout.tsx\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        /* @info Push the URL. You may want to verify the format before navigating. */\n        router.push(url);\n        /* @end */\n      }\n    }\n\n    /* @info Handle the initial push notification. */\n    Notifications.getLastNotificationResponseAsync() /* @end */\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    /* @info Listen for runtime notifications. */\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      /* @end */\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  /* @info Observe at the root. Ensure this layout never returns <b>null</b> or the navigation will go unhandled. */\n  useNotificationObserver();\n  /* @end */\n\n  return <Slot />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network State Changes - React Native NetInfo - JavaScript\nDESCRIPTION: Illustrates how to set up a subscription to track real-time changes in network status using NetInfo.addEventListener. The callback receives updates with a state object whenever network state changes; unsubscribe by calling the returned function. Requires @react-native-community/netinfo and works on all supported platforms. Inputs: none. Outputs: logs connection type and status on every change.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Basic Expo Crypto Implementation in React Native\nDESCRIPTION: Example React Native component demonstrating basic usage of expo-crypto to generate SHA256 hash of a string. Uses useEffect hook to perform the crypto operation asynchronously and displays a simple UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Crypto from 'expo-crypto';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        'GitHub stars are neat 🌟'\n      );\n      console.log('Digest: ', digest);\n      /* Some crypto operation... */\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Crypto Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-camera in app.json\nDESCRIPTION: Configuration example for the expo-camera plugin in app.json, specifying camera and microphone permission messages and enabling audio recording on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existing SQLite Database in Expo\nDESCRIPTION: Function to open an existing SQLite database file by copying it from assets to the app's document directory\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\nimport * as SQLite from 'expo-sqlite';\nimport { Asset } from 'expo-asset';\n\nasync function openDatabase(pathToDatabaseFile: string): Promise<SQLite.WebSQLDatabase> {\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\n  }\n  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();\n  await FileSystem.copyAsync({\n    from: asset.localUri,\n    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',\n  });\n  return SQLite.openDatabase('myDatabaseName.db');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Component Usage in React Native with Expo\nDESCRIPTION: Demonstrates how to use the Image component from expo-image in a React Native app with a blurhash placeholder, content fitting, and transition animation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={{ blurhash }}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rotating and Flipping Images with expo-image-manipulator in React Native\nDESCRIPTION: This snippet demonstrates how to use expo-image-manipulator to rotate an image 90 degrees clockwise and then flip it vertically. It uses React hooks to manage state and includes a button to trigger the image manipulation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Image, StyleSheet, View } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';\n\nexport default function App() {\n  const [ready, setReady] = useState(false);\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const image = Asset.fromModule(require('./assets/snack-icon.png'));\n      await image.downloadAsync();\n      setImage(image);\n      setReady(true);\n    })();\n  }, []);\n\n  const _rotate90andFlip = async () => {\n    const manipResult = await manipulateAsync(\n      image.localUri || image.uri,\n      [{ rotate: 90 }, { flip: FlipType.Vertical }],\n      { compress: 1, format: SaveFormat.PNG }\n    );\n    setImage(manipResult);\n  };\n\n  const _renderImage = () => (\n    <View style={styles.imageContainer}>\n      <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {ready && image && _renderImage()}\n      <Button title=\"Rotate and Flip\" onPress={_rotate90andFlip} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  imageContainer: {\n    marginVertical: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Location Task with Expo TaskManager (React Native, JSX/JavaScript)\nDESCRIPTION: Shows how to request necessary permissions, start background location updates, and define a background task handler using expo-task-manager and expo-location. This example is implemented as a React Native component that exposes a button to initiate background location updates and includes the task registration to process background location data. Dependencies: expo-task-manager, expo-location; inputs include user interaction; outputs are permission status and background location event handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\\nimport { Button, View, StyleSheet } from 'react-native';\\nimport * as TaskManager from 'expo-task-manager';\\nimport * as Location from 'expo-location';\\n\\nconst LOCATION_TASK_NAME = 'background-location-task';\\n\\nconst requestPermissions = async () => {\\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\\n  if (foregroundStatus === 'granted') {\\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\\n    if (backgroundStatus === 'granted') {\\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\\n        accuracy: Location.Accuracy.Balanced,\\n      });\\n    }\\n  }\\n};\\n\\nconst PermissionsButton = () => (\\n  <View style={styles.container}>\\n    <Button onPress={requestPermissions} title=\\\"Enable background location\\\" />\\n  </View>\\n);\\n\\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\\n  if (error) {\\n    // Error occurred - check `error.message` for more details.\\n    return;\\n  }\\n  if (data) {\\n    const { locations } = data;\\n    // do something with the locations captured in the background\\n  }\\n});\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\\n\\nexport default PermissionsButton;\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Gradients in React Native with expo-linear-gradient\nDESCRIPTION: A complete example demonstrating how to use LinearGradient components in a React Native application. The example includes both a background gradient and a button with gradient styling, along with the necessary styles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\n        style={styles.background}\n      />\n      <LinearGradient\n        // Button Linear Gradient\n        colors={['#4c669f', '#3b5998', '#192f6a']}\n        style={styles.button}>\n        <Text style={styles.text}>Sign in with Facebook</Text>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'orange',\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: 300,\n  },\n  button: {\n    padding: 15,\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  text: {\n    backgroundColor: 'transparent',\n    fontSize: 15,\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Camera Usage in React Native\nDESCRIPTION: A complete example of implementing a basic camera interface in React Native using the Camera component from expo-camera. It includes permission handling, camera type toggling, and styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera, CameraType } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [type, setType] = useState(CameraType.back);\n  const [permission, requestPermission] = Camera.useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet\n    return (\n      <View style={styles.container}>\n        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraType() {\n    setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statements with expo-sqlite in TypeScript\nDESCRIPTION: Illustrates how to compile and execute prepared SQL statements using expo-sqlite in TypeScript. Shows creation of prepared statements via prepareAsync, execution via executeAsync (with named parameters), result set iteration, and resource finalization to release statement handles. Useful for repeated executions, safe parameter binding, and improved performance. Relies on expo-sqlite and TypeScript type annotations for result rows; finalization of prepared statements is mandatory for resource management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst statement = await db.prepareAsync(\n  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'\n);\ntry {\n  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });\n  console.log('bbb and 101:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });\n  console.log('ccc and 102:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });\n  console.log('ddd and 103:', result.lastInsertRowId, result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n\nconst statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');\ntry {\n  const result = await statement2.executeAsync<{ value: string; intValue: number }>({\n    $intValue: 100,\n  });\n\n  // `getFirstAsync()` is useful when you want to get a single row from the database.\n  const firstRow = await result.getFirstAsync();\n  console.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.\n  await result.resetAsync();\n\n  // `getAllAsync()` is useful when you want to get all results as an array of objects.\n  const allRows = await result.getAllAsync();\n  for (const row of allRows) {\n    console.log(row.value, row.intValue);\n  }\n\n  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.\n  await result.resetAsync();\n\n  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.\n  for await (const row of result) {\n    console.log(row.value, row.intValue);\n  }\n} finally {\n  await statement2.finalizeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Progress Tracking in Expo FileSystem\nDESCRIPTION: This example demonstrates how to download files with progress tracking, pause downloads, save download state across app restarts, and resume downloads using expo-file-system's DownloadResumable API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Rewriting URLs in Root Layout with usePathname in TypeScript React\nDESCRIPTION: This code snippet shows how to use the usePathname hook in a root _layout.tsx file to react to URL changes and implement conditional redirects based on user permissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/native-intent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, Redirect } from 'expo-router';\n\nexport default function RootLayout() {\n  const pathname = usePathname();\n\n  if (pathname && !isUserAllowed(pathname)) {\n    return <Redirect href=\"/home\" />;\n  }\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Playing and Controlling Video with expo-av in React Native (JSX)\nDESCRIPTION: This snippet demonstrates a complete React Native component that plays inline video with play/pause controls using the Video component from expo-av. Dependencies include 'expo-av' for video and 'expo-asset' for asset management, as well as React Native core modules. The key parameters are the video source URI, native controls, looping behavior, and play status. The component uses a ref to control video playback and state to track the current play status. Input is user interaction with the play/pause button, and output is the rendered video and control button. Styling uses standard React Native StyleSheet. Limitations include focus on basic playback; advanced controls would require further customization.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/video-av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\\nimport { View, StyleSheet, Button } from 'react-native';\\nimport { Video, ResizeMode } from 'expo-av';\\n\\nexport default function App() {\\n  const video = useRef(null);\\n  const [status, setStatus] = useState({});\\n  return (\\n    <View style={styles.container}>\\n      <Video\\n        ref={video}\\n        style={styles.video}\\n        source={{\\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\\n        }}\\n        useNativeControls\\n        resizeMode={ResizeMode.CONTAIN}\\n        isLooping\\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\\n      />\\n      <View style={styles.buttons}>\\n        <Button\\n          title={status.isPlaying ? 'Pause' : 'Play'}\\n          onPress={() =>\\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\\n          }\\n        />\\n      </View>\\n    </View>\\n  );\\n}\\n\\n/* @hide const styles = StyleSheet.create({ ... }); */\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    backgroundColor: '#ecf0f1',\\n  },\\n  video: {\\n    alignSelf: 'center',\\n    width: 320,\\n    height: 200,\\n  },\\n  buttons: {\\n    flexDirection: 'row',\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n  },\\n});\\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Resumable Operations in Expo FileSystem (JavaScript)\nDESCRIPTION: Demonstrates how to download a file using `FileSystem.createDownloadResumable`. It shows how to track progress, handle completion or errors, pause the download, save its state to `AsyncStorage` for persistence, and resume the download later, potentially after an app restart.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js Component.js\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Navigation with Expo Router\nDESCRIPTION: Setup for handling push notification deep linking using Expo Router. Implements notification observers and URL-based navigation handling in the root layout.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        router.push(url);\n      }\n    }\n\n    Notifications.getLastNotificationResponseAsync()\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  useNotificationObserver();\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Imgur OAuth Authentication in Expo\nDESCRIPTION: Example of implementing Imgur OAuth authentication flow using expo-auth-session. Includes setup of authorization endpoints, handling redirect URIs, and processing the authentication response.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button, Platform } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: 'https://api.imgur.com/oauth2/authorize',\n  tokenEndpoint: 'https://api.imgur.com/oauth2/token',\n};\n\nexport default function App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      clientSecret: 'CLIENT_SECRET',\n      redirectUri: makeRedirectUri({\n        scheme: 'your.app',\n      }),\n      scopes: [],\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Fetch Tasks in React Native\nDESCRIPTION: Complete example demonstrating how to implement background fetch functionality in a React Native application using expo-background-fetch and expo-task-manager. Shows task definition, registration, status management, and UI implementation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\n\nconst BACKGROUND_FETCH_TASK = 'background-fetch';\n\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  const now = Date.now();\n\n  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);\n\n  return BackgroundFetch.BackgroundFetchResult.NewData;\n});\n\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 60 * 15, // 15 minutes\n    stopOnTerminate: false, // android only,\n    startOnBoot: true, // android only\n  });\n}\n\nasync function unregisterBackgroundFetchAsync() {\n  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n}\n\nexport default function BackgroundFetchScreen() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [status, setStatus] = useState(null);\n\n  useEffect(() => {\n    checkStatusAsync();\n  }, []);\n\n  const checkStatusAsync = async () => {\n    const status = await BackgroundFetch.getStatusAsync();\n    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);\n    setStatus(status);\n    setIsRegistered(isRegistered);\n  };\n\n  const toggleFetchTask = async () => {\n    if (isRegistered) {\n      await unregisterBackgroundFetchAsync();\n    } else {\n      await registerBackgroundFetchAsync();\n    }\n\n    checkStatusAsync();\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.textContainer}>\n        <Text>\n          Background fetch status:{' '}\n          <Text style={styles.boldText}>\n            {status && BackgroundFetch.BackgroundFetchStatus[status]}\n          </Text>\n        </Text>\n        <Text>\n          Background fetch task name:{' '}\n          <Text style={styles.boldText}>\n            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.textContainer}></View>\n      <Button\n        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}\n        onPress={toggleFetchTask}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  textContainer: {\n    margin: 10,\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Playback Controls with Expo Video (React Native, JSX)\nDESCRIPTION: This example demonstrates creating a basic video player in a React Native app using expo-video, managing playback state, and showing Play/Pause controls. It relies on the expo-video package (with VideoView and useVideoPlayer), React hooks (useRef, useState, useEffect), and core React Native components like View, StyleSheet, and Button. The player is initialized with looping and auto-play, and the UI updates when playing state changes. The code expects a valid video URL and requires expo-video and react-native as dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useVideoPlayer, VideoView } from 'expo-video';\\nimport { useEffect, useRef, useState } from 'react';\\nimport { PixelRatio, StyleSheet, View, Button } from 'react-native';\\n\\nconst videoSource =\\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\\n\\nexport default function VideoScreen() {\\n  const ref = useRef(null);\\n  const [isPlaying, setIsPlaying] = useState(true);\\n  const player = useVideoPlayer(videoSource, player => {\\n    player.loop = true;\\n    player.play();\\n  });\\n\\n  useEffect(() => {\\n    const subscription = player.addListener('playingChange', isPlaying => {\\n      setIsPlaying(isPlaying);\\n    });\\n\\n    return () => {\\n      subscription.remove();\\n    };\\n  }, [player]);\\n\\n  return (\\n    <View style={styles.contentContainer}>\\n      <VideoView\\n        ref={ref}\\n        style={styles.video}\\n        player={player}\\n        allowsFullscreen\\n        allowsPictureInPicture\\n      />\\n      <View style={styles.controlsContainer}>\\n        <Button\\n          title={isPlaying ? 'Pause' : 'Play'}\\n          onPress={() => {\\n            if (isPlaying) {\\n              player.pause();\\n            } else {\\n              player.play();\\n            }\\n            setIsPlaying(!isPlaying);\\n          }}\\n        />\\n      </View>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  contentContainer: {\\n    flex: 1,\\n    padding: 10,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    paddingHorizontal: 50,\\n  },\\n  video: {\\n    width: 350,\\n    height: 275,\\n  },\\n  controlsContainer: {\\n    padding: 10,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters in React Native with Expo Router\nDESCRIPTION: This code snippet shows how to access parameters from dynamic segments in a route component using the useLocalSearchParams hook from Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/dynamic-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function DetailsScreen() {\n  const { id } = useLocalSearchParams();\n\n  return (\n    <View style={styles.container}>\n      <Text>Details of user {id} </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading and Managing Files with expo-file-system in JavaScript\nDESCRIPTION: This snippet demonstrates how to download files, pause and resume downloads, and manage download progress using the FileSystem API. It also shows how to persist download information across app restarts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\n//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Update Check Implementation in React Native\nDESCRIPTION: Example showing how to implement manual update checking in a React Native app using expo-updates. The code demonstrates checking for updates, fetching them if available, and reloading the app with the new update. It includes error handling and a simple button interface.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      // You can also add an alert() to see the error message in case of an error when fetching updates.\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch OAuth Authentication in React Native\nDESCRIPTION: This snippet demonstrates how to set up Twitch OAuth authentication using Expo Auth Session. It includes the necessary endpoint configuration, auth request setup with PKCE, and a button to initiate the login process. The code handles the auth response and extracts the authorization code for further processing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\n// Endpoint\nconst discovery = {\n  authorizationEndpoint: 'https://id.twitch.tv/oauth2/authorize',\n  tokenEndpoint: 'https://id.twitch.tv/oauth2/token',\n  revocationEndpoint: 'https://id.twitch.tv/oauth2/revoke',\n};\n\nexport default function App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      scopes: ['openid', 'user:read:email', 'channel:manage:broadcast'],\n      redirectUri: makeRedirectUri({\n        scheme: 'your.app'\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Video Component from Expo AV in JavaScript\nDESCRIPTION: This code shows the standard ES6 import statement required to use the `Video` component within a JavaScript or TypeScript file. It imports the `Video` component directly from the `expo-av` package, making it available for use in the application's UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Basic Image Picker Implementation in React Native\nDESCRIPTION: A complete example of using expo-image-picker to select images from the device library and display them in a React Native application. Includes state management and styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Screen Orientation Plugin in app.json (JSON)\nDESCRIPTION: Demonstrates how to statically configure the expo-screen-orientation package using the config plugin in your app.json file. This requires setting parameters such as requireFullScreen and initialOrientation under the expo.ios and plugins arrays. These settings determine the default screen orientation behavior and are effective after rebuilding the app binary. This approach is suitable for locking orientation and specifying platform-dependent options at build time.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"ios\\\": {\\n      \\\"requireFullScreen\\\": true\\n    },\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-screen-orientation\\\",\\n        {\\n          \\\"initialOrientation\\\": \\\"DEFAULT\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App Entry Point\nDESCRIPTION: Custom entry point configuration for Expo apps in a monorepo environment using registerRootComponent.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Minimal Production Build Configuration\nDESCRIPTION: A minimal configuration for the production build profile, typically used for builds submitted to app stores.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {}\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Notification Handler for Foreground Notifications\nDESCRIPTION: Example of implementing setNotificationHandler to control how notifications are displayed when the app is in the foreground. This example always shows the notification alert but doesn't play sounds or set badges.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: GIF Management System with Expo FileSystem\nDESCRIPTION: Implementation of a GIF management system that handles downloading, caching, and sharing GIF files using expo-file-system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n  return fileUri;\n}\n\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic and Custom Checkboxes with expo-checkbox in React Native\nDESCRIPTION: This example demonstrates how to use the expo-checkbox component to create normal, custom-colored, and disabled checkboxes in a React Native application. It shows state management with useState and proper styling for checkbox layouts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Normal checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox\n          style={styles.checkbox}\n          value={isChecked}\n          onValueChange={setChecked}\n          color={isChecked ? '#4630EB' : undefined}\n        />\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n    marginVertical: 32,\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic BlurView Usage Example in React Native\nDESCRIPTION: Demonstrates how to implement BlurView component with different intensities and tints. Creates a layout with multiple colored boxes and overlays three blur views with different configurations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { BlurView } from 'expo-blur';\n\nexport default function App() {\n  const text = 'Hello, my container is blurring contents underneath!';\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.background}>\n        {[...Array(20).keys()].map(i => (\n          <View\n            key={`box-${i}`}\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\n          />\n        ))}\n      </View>\n      <BlurView intensity={100} style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\n      </BlurView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  blurContainer: {\n    flex: 1,\n    padding: 20,\n    margin: 16,\n    textAlign: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    borderRadius: 20,\n  },\n  background: {\n    flex: 1,\n    flexWrap: 'wrap',\n    ...StyleSheet.absoluteFill,\n  },\n  box: {\n    width: '25%',\n    height: '20%',\n  },\n  boxEven: {\n    backgroundColor: 'orangered',\n  },\n  boxOdd: {\n    backgroundColor: 'gold',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Expo app with create-expo-app\nDESCRIPTION: Commands to create a new Expo app named StickerSmash using the blank template and navigate to the project directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project named StickerSmash\n$ npx create-expo-app StickerSmash --template blank\n\n# Navigate to the project directory\n$ cd StickerSmash\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected App Layout in Expo Router\nDESCRIPTION: This snippet creates a nested layout route that checks for user authentication before rendering child routes. It redirects unauthenticated users to the sign-in screen and handles loading states.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { Redirect, Stack } from 'expo-router';\n\nimport { useSession } from '../../ctx';\n\nexport default function AppLayout() {\n  const { session, isLoading } = useSession();\n\n  // You can keep the splash screen open, or render a loading screen like we do here.\n  if (isLoading) {\n    return <Text>Loading...</Text>;\n  }\n\n  // Only require authentication within the (app) group's layout as users\n  // need to be able to access the (auth) group and sign in again.\n  if (!session) {\n    // On web, static rendering will stop here as the user is not authenticated\n    // in the headless Node process that the pages are rendered in.\n    return <Redirect href=\"/sign-in\" />;\n  }\n\n  // This layout can be deferred because it's not the root layout.\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Checking and Applying Updates in React Native (JSX)\nDESCRIPTION: This JSX code demonstrates how to manually check for, download, and apply over-the-air (OTA) updates in a React Native application using the `expo-updates` library. It defines an asynchronous function `onFetchUpdateAsync` that uses `Updates.checkForUpdateAsync` to see if an update is available, `Updates.fetchUpdateAsync` to download it, and `Updates.reloadAsync` to restart the app with the new update. An error handling mechanism using a try-catch block is included.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      // You can also add an alert() to see the error message in case of an error when fetching updates.\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications in Expo React Native App\nDESCRIPTION: A complete example of how to register for, send, and receive push notifications in a React Native app using Expo. It includes setting up notification handlers, sending notifications, and managing permissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nasync function sendPushNotification(expoPushToken: string) {\n  const message = {\n    to: expoPushToken,\n    sound: 'default',\n    title: 'Original Title',\n    body: 'And here is the body!',\n    data: { someData: 'goes here' },\n  };\n\n  await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  });\n}\n\nfunction handleRegistrationError(errorMessage: string) {\n  alert(errorMessage);\n  throw new Error(errorMessage);\n}\n\nasync function registerForPushNotificationsAsync() {\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      handleRegistrationError('Permission not granted to get push token for push notification!');\n      return;\n    }\n    const projectId =\n      Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;\n    if (!projectId) {\n      handleRegistrationError('Project ID not found');\n    }\n    try {\n      const pushTokenString = (\n        await Notifications.getExpoPushTokenAsync({\n          projectId,\n        })\n      ).data;\n      console.log(pushTokenString);\n      return pushTokenString;\n    } catch (e: unknown) {\n      handleRegistrationError(`${e}`);\n    }\n  } else {\n    handleRegistrationError('Must use physical device for push notifications');\n  }\n}\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [notification, setNotification] = useState<Notifications.Notification | undefined>(\n    undefined\n  );\n  const notificationListener = useRef<Notifications.Subscription>();\n  const responseListener = useRef<Notifications.Subscription>();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync()\n      .then(token => setExpoPushToken(token ?? ''))\n      .catch((error: any) => setExpoPushToken(`${error}`));\n\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      notificationListener.current &&\n        Notifications.removeNotificationSubscription(notificationListener.current);\n      responseListener.current &&\n        Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'space-around' }}>\n      <Text>Your Expo push token: {expoPushToken}</Text>\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View>\n      <Button\n        title=\"Press to Send Notification\"\n        onPress={async () => {\n          await sendPushNotification(expoPushToken);\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accelerometer Monitoring in React Native with Expo\nDESCRIPTION: A complete React Native component that demonstrates how to subscribe to accelerometer data, control update intervals, and toggle the accelerometer on and off. The example shows how to use useState and useEffect hooks to manage the subscription and display real-time x, y, and z acceleration values.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\n  const _fast = () => Accelerometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(Accelerometer.addListener(setData));\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Haptics Usage Example in React Native\nDESCRIPTION: A comprehensive React Native example that demonstrates how to implement various haptic feedback types including selection, notification (success, error, warning), and impact feedback (light, medium, heavy) using the expo-haptics library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => Haptics.selectionAsync()} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              )\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              )\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              )\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notification Deep Linking in Expo Router - TypeScript\nDESCRIPTION: This TypeScript React snippet observes incoming and initial push notifications using expo-notifications and redirects the user to the appropriate URL within an Expo Router navigation context. It uses useEffect for setting up event listeners and cleans up on component unmount. The key dependencies are expo-notifications and expo-router. The function useNotificationObserver listens for notification events and forwards their URL payloads to the router; Layout serves as the root layout to ensure navigation events are not missed. Expected inputs are push notifications containing a 'url' in their data payload; the component must not return null. Outputs are navigation actions within the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        /* @info Push the URL. You may want to verify the format before navigating. */\n        router.push(url);\n        /* @end */\n      }\n    }\n\n    /* @info Handle the initial push notification. */\n    Notifications.getLastNotificationResponseAsync() /* @end */\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    /* @info Listen for runtime notifications. */\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      /* @end */\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  /* @info Observe at the root. Ensure this layout never returns <b>null</b> or the navigation will go unhandled. */\n  useNotificationObserver();\n  /* @end */\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keyboard Animation Hook in React Native\nDESCRIPTION: This snippet defines a custom hook 'useGradualAnimation' that uses the 'useKeyboardHandler' hook from react-native-keyboard-controller. It tracks the keyboard height during animation frames, returning a shared value for use in animations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardHandler } from 'react-native-keyboard-controller';\nimport Animated, { useAnimatedStyle, useSharedValue } from 'react-native-reanimated';\n\nconst useGradualAnimation = () => {\n  const height = useSharedValue(0);\n\n  useKeyboardHandler(\n    {\n      onMove: event => {\n        'worklet';\n        height.value = Math.max(event.height, 0);\n      },\n    },\n    []\n  );\n  return { height };\n};\n```\n\n----------------------------------------\n\nTITLE: Scheduling Notification with Channel ID for Android 8.0+ (TypeScript)\nDESCRIPTION: TypeScript code for scheduling a notification with proper sound configuration for different Android versions. It includes both the sound property for pre-8.0 devices and the channelId for Android 8.0+.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email-sound.wav', // <- for Android below 8.0\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails', // <- for Android 8.0+, see definition above\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Barcode Scanner with React Native and Expo\nDESCRIPTION: A complete React Native component that demonstrates how to implement barcode scanning functionality using expo-barcode-scanner. The example handles permission requests, scanning state, and provides feedback when a barcode is detected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default function App() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    const getBarCodeScannerPermissions = async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    };\n\n    getBarCodeScannerPermissions();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic MapView with react-native-maps in React Native (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to render a MapView using the react-native-maps library within a styled React Native app. It imports MapView and wraps it in a container View styled using StyleSheet. Dependencies needed include React, React Native, and react-native-maps. The styles ensure the map fills the available space (100% width and height). The only required parameter is the style; further properties (e.g., region, provider) can be added as needed. The output is a functional app component rendering a basic, full-screen interactive map; no markers or custom controls are present. Error handling, custom regions, and multiple providers require further implementation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from 'react';\\nimport MapView from 'react-native-maps';\\nimport { StyleSheet, View } from 'react-native';\\n\\nexport default function App() {\\n  return (\\n    <View style={styles.container}>\\n      <MapView style={styles.map} />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n  },\\n  map: {\\n    width: '100%',\\n    height: '100%',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Video Component References in React\nDESCRIPTION: Example showing how to get access to the Video component's reference for controlling playback.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_handleVideoRef = component => {\n  const playbackObject = component;\n  ...\n}\n\nrender() {\n  return (\n      <Video\n        ref={this._handleVideoRef}\n      />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with Expo Audio\nDESCRIPTION: Example showing how to load and play audio files using expo-av's Audio API. Demonstrates proper sound loading, playback control, and cleanup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    const { sound } = await Audio.Sound.createAsync(\n      require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await sound.playAsync();\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          sound.unloadAsync();\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using expo-print for Printing and Sharing in React Native\nDESCRIPTION: A comprehensive React Native component example demonstrating the usage of `expo-print`. It shows how to print HTML content directly using `Print.printAsync`, save HTML content to a PDF file using `Print.printToFileAsync`, share the generated PDF using `expo-sharing`, and select a printer on iOS using `Print.selectPrinterAsync`. The example includes state management for the selected printer and platform-specific UI for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url, // iOS only\n    }); /* @end */\n  };\n\n  const printToFile = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ const { uri } = await Print.printToFileAsync({ html }); /* @end */\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    /* @info */ const printer = await Print.selectPrinterAsync(); // iOS only\n    /* @end */\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Print\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\"Print to PDF file\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\"Select printer\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    flexDirection: 'column',\n    padding: 8,\n  },\n  spacer: {\n    height: 8,\n  },\n  printer: {\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Native Barometer Implementation\nDESCRIPTION: Complete example of implementing a barometer sensor interface in React Native. Shows how to subscribe to barometer readings, display pressure and relative altitude data, and toggle the sensor listener. Includes styling and platform-specific handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { Barometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggleListener = () => {\n    subscription ? unsubscribe() : subscribe();\n  };\n\n  const subscribe = () => {\n    setSubscription(Barometer.addListener(setData));\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  return (\n    <View style={styles.wrapper}>\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\n      <Text>Pressure: {pressure} hPa</Text>\n      <Text>\n        Relative Altitude:{' '}\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\n      </Text>\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\n        <Text>Toggle listener</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n    marginTop: 15,\n  },\n  wrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic and Custom Checkbox Components in React Native\nDESCRIPTION: This code snippet demonstrates how to use the Checkbox component from expo-checkbox in a React Native application. It shows examples of a normal checkbox, a custom colored checkbox, and a disabled checkbox. The component uses React hooks for state management and includes styling for layout and appearance.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Normal checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox\n          style={styles.checkbox}\n          value={isChecked}\n          onValueChange={setChecked}\n          color={isChecked ? '#4630EB' : undefined}\n        />\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n    marginVertical: 32,\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Image Manipulation in React Native with expo-image-manipulator\nDESCRIPTION: This example demonstrates how to use expo-image-manipulator to rotate an image 90 degrees clockwise and then flip it vertically, saving it as a PNG. The code uses React hooks to manage state and loads an image asset before applying the transformations upon button press.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Image, StyleSheet, View } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';\n\nexport default function App() {\n  const [ready, setReady] = useState(false);\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const image = Asset.fromModule(require('./assets/snack-icon.png'));\n      await image.downloadAsync();\n      setImage(image);\n      setReady(true);\n    })();\n  }, []);\n\n  const _rotate90andFlip = async () => {\n    const manipResult = await manipulateAsync(\n      image.localUri || image.uri,\n      [{ rotate: 90 }, { flip: FlipType.Vertical }],\n      { compress: 1, format: SaveFormat.PNG }\n    );\n    setImage(manipResult);\n  };\n\n  const _renderImage = () => (\n    <View style={styles.imageContainer}>\n      <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {ready && image && _renderImage()}\n      <Button title=\"Rotate and Flip\" onPress={_rotate90andFlip} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  imageContainer: {\n    marginVertical: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Listener in React Native with expo-notifications\nDESCRIPTION: Example of using addNotificationResponseReceivedListener in a React useEffect hook to handle notification responses and open URLs. The listener is properly cleaned up when the component unmounts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport default function Container() {\n  React.useEffect(() => {\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      const url = response.notification.request.content.data.url;\n      Linking.openUrl(url);\n    });\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Notifications Plugin in app.json\nDESCRIPTION: This JSON snippet demonstrates how to use the expo-notifications config plugin in the app.json file. It shows configuration for notification icon, color, default channel, and custom sounds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification-icon.png\",\n          \"color\": \"#ffffff\",\n          \"defaultChannel\": \"default\",\n          \"sounds\": [\n            \"./local/assets/notification-sound.wav\",\n            \"./local/assets/notification-sound-other.wav\"\n          ]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Expo Calendar Implementation in React Native\nDESCRIPTION: Complete example showing how to request calendar permissions, fetch calendars, and create a new calendar in an Expo React Native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\nimport * as Calendar from 'expo-calendar';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\n      if (status === 'granted') {\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\n        console.log('Here are all your calendars:');\n        console.log({ calendars });\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Calendar Module Example</Text>\n      <Button title=\"Create a new calendar\" onPress={createCalendar} />\n    </View>\n  );\n}\n\nasync function getDefaultCalendarSource() {\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\n  return defaultCalendar.source;\n}\n\nasync function createCalendar() {\n  const defaultCalendarSource =\n    Platform.OS === 'ios'\n      ? await getDefaultCalendarSource()\n      : { isLocalAccount: true, name: 'Expo Calendar' };\n  const newCalendarID = await Calendar.createCalendarAsync({\n    title: 'Expo Calendar',\n    color: 'blue',\n    entityType: Calendar.EntityTypes.EVENT,\n    sourceId: defaultCalendarSource.id,\n    source: defaultCalendarSource,\n    name: 'internalCalendarName',\n    ownerAccount: 'personal',\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\n  });\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the Magnetometer Sensor with Expo Sensors in React Native (JSX)\nDESCRIPTION: This React Native functional component demonstrates real-time access to the device's magnetometer using expo-sensors. It manages sensor subscriptions, state updates, and UI controls for reading and displaying the x, y, z axis values in microtesla. Users can toggle the sensor on/off and switch between slow/fast update intervals. Dependencies include react, react-native, and expo-sensors. The component expects access to Expo-compatible device sensors and provides live sensor output and cleanup on unmount.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\\nimport { Magnetometer } from 'expo-sensors';\\n\\nexport default function Compass() {\\n  const [{ x, y, z }, setData] = useState({\\n    x: 0,\\n    y: 0,\\n    z: 0,\\n  });\\n  const [subscription, setSubscription] = useState(null);\\n\\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\\n  const _fast = () => Magnetometer.setUpdateInterval(16);\\n\\n  const _subscribe = () => {\\n    setSubscription(\\n      Magnetometer.addListener(result => {\\n        setData(result);\\n      })\\n    );\\n  };\\n\\n  const _unsubscribe = () => {\\n    subscription && subscription.remove();\\n    setSubscription(null);\\n  };\\n\\n  useEffect(() => {\\n    _subscribe();\\n    return () => _unsubscribe();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.text}>Magnetometer:</Text>\\n      <Text style={styles.text}>x: {x}</Text>\\n      <Text style={styles.text}>y: {y}</Text>\\n      <Text style={styles.text}>z: {z}</Text>\\n      <View style={styles.buttonContainer}>\\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\\n          <Text>{subscription ? 'On' : 'Off'}</Text>\\n        </TouchableOpacity>\\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\\n          <Text>Slow</Text>\\n        </TouchableOpacity>\\n        <TouchableOpacity onPress={_fast} style={styles.button}>\\n          <Text>Fast</Text>\\n        </TouchableOpacity>\\n      </View>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    paddingHorizontal: 10,\\n  },\\n  text: {\\n    textAlign: 'center',\\n  },\\n  buttonContainer: {\\n    flexDirection: 'row',\\n    alignItems: 'stretch',\\n    marginTop: 15,\\n  },\\n  button: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: '#eee',\\n    padding: 10,\\n  },\\n  middleButton: {\\n    borderLeftWidth: 1,\\n    borderRightWidth: 1,\\n    borderColor: '#ccc',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Using Expo Accelerometer in a React Native Component (JSX)\nDESCRIPTION: This React Native component demonstrates basic usage of the `Accelerometer` from `expo-sensors`. It uses `useState` and `useEffect` hooks to manage the accelerometer data (x, y, z coordinates) and the sensor subscription. Functions are provided to subscribe/unsubscribe to updates using `Accelerometer.addListener` and `subscription.remove()`, and to adjust the update interval using `Accelerometer.setUpdateInterval`. The component displays the current accelerometer readings and provides buttons to toggle the subscription and change the update speed. Requires `react`, `react-native`, and `expo-sensors` dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\n  const _fast = () => Accelerometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(Accelerometer.addListener(setData));\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Implementation in React Native\nDESCRIPTION: Complete example of implementing a camera component with front/back camera switching functionality and permission handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera-legacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera, CameraType } from 'expo-camera/legacy';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [type, setType] = useState(CameraType.back);\n  const [permission, requestPermission] = Camera.useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet\n    return (\n      <View style={styles.container}>\n        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraType() {\n    setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Expo Pedometer in React Native\nDESCRIPTION: Demonstrates how to use the `Pedometer` API from `expo-sensors` within a React Native functional component. It checks sensor availability (`isAvailableAsync`), fetches the step count for the previous 24 hours (`getStepCountAsync`), and subscribes to real-time step count updates (`watchStepCount`) using `useEffect` and `useState` hooks. Requires the `expo-sensors` package to be installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Pedometer } from 'expo-sensors';\n\nexport default function App() {\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\n  const [pastStepCount, setPastStepCount] = useState(0);\n  const [currentStepCount, setCurrentStepCount] = useState(0);\n\n  const subscribe = async () => {\n    const isAvailable = await Pedometer.isAvailableAsync();\n    setIsPedometerAvailable(String(isAvailable));\n\n    if (isAvailable) {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - 1);\n\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\n      if (pastStepCountResult) {\n        setPastStepCount(pastStepCountResult.steps);\n      }\n\n      return Pedometer.watchStepCount(result => {\n        setCurrentStepCount(result.steps);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const subscription = subscribe();\n    return () => subscription && subscription.remove();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Gyroscope Sensor Access in React Native with Expo\nDESCRIPTION: This React Native component demonstrates how to use the `Gyroscope` module from `expo-sensors`. It subscribes to sensor updates using `Gyroscope.addListener`, stores the rotation data (x, y, z) in state, and displays it. Buttons allow toggling the subscription (`On`/`Off`) and adjusting the update frequency (`Slow`/`Fast`) using `Gyroscope.setUpdateInterval`. The `useEffect` hook manages the subscription lifecycle, ensuring cleanup on unmount.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Text-to-Speech Implementation in React Native with Expo\nDESCRIPTION: A simple React Native component demonstrating text-to-speech functionality using expo-speech. The example shows how to create a button that speaks a predefined text when pressed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables in .env File\nDESCRIPTION: Example of setting up environment variables in a .env file using the EXPO_PUBLIC_ prefix. These variables can be used for configuration like API URLs and keys.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_PUBLIC_API_URL=https://staging.example.com\nEXPO_PUBLIC_API_KEY=abc123\n```\n\n----------------------------------------\n\nTITLE: Adding meta tags with expo-router/head\nDESCRIPTION: Demonstrates how to add meta tags to pages for SEO optimization using the Head component from expo-router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Head from 'expo-router/head';\nimport { Text } from 'react-native';\n\nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My Blog Website</title>\n        <meta name=\"description\" content=\"This is my blog.\" />\n      </Head>\n      <Text>About my blog</Text>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Limited Media Looping in JavaScript\nDESCRIPTION: Example showing how to loop media exactly 20 times by tracking completion events and controlling the looping state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst N = 20;\n\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (playbackStatus.didJustFinish) {\n    if (this.state.numberOfLoops == N - 1) {\n      playbackObject.setIsLooping(false);\n    }\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\n  }\n};\n\nthis.setState({ numberOfLoops: 0 });\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\nplaybackObject.setIsLooping(true);\n```\n\n----------------------------------------\n\nTITLE: Basic WebView Implementation with URL Source in React Native\nDESCRIPTION: Example showing how to implement a basic WebView component that loads content from expo.dev website. Uses react-native-webview and expo-constants for status bar spacing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      source={{ uri: 'https://expo.dev' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer Modules from Expo Sensors in JavaScript\nDESCRIPTION: This snippet shows the necessary import statement to bring the calibrated (`Magnetometer`) and uncalibrated (`MagnetometerUncalibrated`) magnetometer sensor interfaces into your JavaScript or React Native code. The `expo-sensors` package must be installed as a dependency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Layout Routing with Expo Router\nDESCRIPTION: Demonstrates how to create a dynamic layout component that renders different navigation stacks based on the current route segment. This allows for shared routes to have different layouts depending on their context.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/shared-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DynamicLayout({ segment }) {\n  if (segment === '(search)') {\n    return <SearchStack />;\n  }\n\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Metro Configuration Setup\nDESCRIPTION: Basic Metro configuration template that extends Expo's default configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Initial Render with initialWindowMetrics in SafeAreaProvider for React Native/JSX\nDESCRIPTION: This example shows how to import initialWindowMetrics and pass it as the initialMetrics prop to SafeAreaProvider. This speeds up the initial render by providing static insets (especially useful in server-side rendering scenarios) and avoids async delays. Not compatible if the provider remounts or if using react-native-navigation. Requires react-native-safe-area-context 3.1.9+.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Print Implementation in React Native with Expo\nDESCRIPTION: A complete example showing how to implement printing functionality in a React Native app using expo-print. Includes features like direct printing, PDF generation, and printer selection (iOS only).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url,\n    });\n  };\n\n  const printToFile = async () => {\n    const { uri } = await Print.printToFileAsync({ html });\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    const printer = await Print.selectPrinterAsync();\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Print\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\"Print to PDF file\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\"Select printer\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SVG Component in React Native using TypeScript\nDESCRIPTION: This example shows a React functional component (`SvgComponent`) written in TypeScript that uses `react-native-svg`. It imports the main `Svg` container and specific shape components (`Circle`, `Rect`) to render a simple graphic composed of a green circle with a blue stroke and a yellow rectangle with a red stroke. The `Svg` component defines the canvas dimensions and `viewBox`, while `Circle` and `Rect` define the shapes with their respective properties (position, size, stroke, fill). It requires `react-native-svg` as a dependency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\n\nexport default function SvgComponent(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Async SQLite Transactions in Expo\nDESCRIPTION: Example of executing SQL queries within an async transaction context with read-only option.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite-legacy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/legacy';\n\nconst db = SQLite.openDatabase('dbName', version);\n\nconst readOnly = true;\nawait db.transactionAsync(async tx => {\n  const result = await tx.executeSqlAsync('SELECT COUNT(*) FROM USERS', []);\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n}, readOnly);\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreground Notification Behavior in Expo\nDESCRIPTION: This snippet shows how to configure the behavior of notifications received when the app is in the foreground using Notifications.setNotificationHandler. It allows customization of alert, sound, and badge settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Implicit OAuth Flow with expo-auth-session in TypeScript\nDESCRIPTION: Demonstrates the setup and usage of the `useAuthRequest` hook from `expo-auth-session` to perform an Implicit OAuth flow. It configures the authorization request with `ResponseType.Token` to directly receive an access token, sets up the client ID, scopes, and redirect URI using `makeRedirectUri`. The `useEffect` hook handles the response, extracting the access token upon successful authentication. This flow is explicitly noted as discouraged due to security risks.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest, ResponseType } from 'expo-auth-session';\n\n/* @info <strong>Web only:</strong> This method should be invoked on the page that the auth popup gets redirected to on web, it'll ensure that authentication is completed properly. On native this does nothing. */\nWebBrowser.maybeCompleteAuthSession();\n/* @end */\n\n// Endpoint\nconst discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n};\n\nfunction App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      /* @info Request that the server returns an <code>access_token</code>, not all providers support this. */\n      responseType: ResponseType.Token,\n      /* @end */\n      clientId: 'CLIENT_ID',\n      scopes: ['user-read-email', 'playlist-modify-public'],\n      redirectUri: makeRedirectUri({\n        /* @info The URI <code>[scheme]://</code> to be used. If undefined, the <code>scheme</code> property of your app.json or app.config.js will be used instead. */\n        scheme: 'your.app'\n        /* @end */\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response && response.type === 'success') {\n      /* @info You can use this access token to make calls into the Spotify API. */\n      const token = response.params.access_token;\n      /* @end */\n    }\n  }, [response]);\n\n  return <Button disabled={!request} onPress={() => promptAsync()} title=\"Login\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Font Loading in React Native\nDESCRIPTION: Complete example demonstrating how to load and use custom fonts in a React Native application using expo-font and expo-splash-screen.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Async SQLite Transactions\nDESCRIPTION: Example of executing SQL queries within an async transaction with optional read-only mode\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n\nconst db = SQLite.openDatabase('dbName', version);\n\nconst readOnly = true;\nawait db.transactionAsync(async tx => {\n  const result = await tx.executeSqlAsync('SELECT COUNT(*) FROM USERS', []);\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n}, readOnly);\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation with React Native and Expo\nDESCRIPTION: Demonstrates how to implement a checkbox component with different states including normal, custom colored, and disabled. Uses React's useState hook for state management and includes styling for layout and appearance.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Normal checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox\n          style={styles.checkbox}\n          value={isChecked}\n          onValueChange={setChecked}\n          color={isChecked ? '#4630EB' : undefined}\n        />\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n    marginVertical: 32,\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Presenting a Notification using Expo-Notifications (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to set up a notification handler and present a notification immediately using expo-notifications. It first configures a global handler to ensure notifications display alerts, then calls scheduleNotificationAsync with simple title/body content and no trigger for immediate presentation. Dependencies include the expo-notifications library, and usage assumes the app is running in an environment where notification permissions are already granted. Suitable for quickly displaying test or user-triggered notifications in an Expo-managed app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call the method\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Splash Screen Control in React Native\nDESCRIPTION: A complete example showing how to manage splash screen visibility while loading app resources. The code demonstrates preventing auto-hide, preloading fonts, handling layout, and properly hiding the splash screen once the app is ready.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Please remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! 👋</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Functionality in React Native with Expo\nDESCRIPTION: This code snippet demonstrates how to use the expo-print and expo-sharing modules to implement printing, PDF creation, and printer selection in a React Native app. It includes functions for printing HTML content, saving to PDF, and selecting printers on iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\n  </head>\n  <body style=\"text-align: center;\">\n    <h1 style=\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\">\n      Hello Expo!\n    </h1>\n    <img\n      src=\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\"\n      style=\"width: 90vw;\" />\n  </body>\n</html>\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url, // iOS only\n    });\n  };\n\n  const printToFile = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    const { uri } = await Print.printToFileAsync({ html });\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    const printer = await Print.selectPrinterAsync(); // iOS only\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Print\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\"Print to PDF file\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\"Select printer\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    flexDirection: 'column',\n    padding: 8,\n  },\n  spacer: {\n    height: 8,\n  },\n  printer: {\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Gyroscope Sensor with React Hooks in Expo\nDESCRIPTION: This snippet demonstrates how to implement gyroscope functionality in a React Native application using expo-sensors. It shows how to subscribe to gyroscope data, manage the subscription using React hooks, display real-time x, y, z rotation values, and control the update intervals with Slow and Fast options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Pedometer Hook with Expo Sensors in JSX\nDESCRIPTION: This snippet demonstrates how to use the Pedometer module from expo-sensors within a React Native functional component. It checks for pedometer availability, retrieves the past 24-hour step count, and subscribes to current step updates using hooks. Dependencies include expo-sensors, react-native, and React hooks (useState, useEffect). Inputs include user movement and step data from the device sensor; outputs are real-time and historical step counts displayed in the UI. Returned subscription must be properly cleaned up in the useEffect. Designed for Expo-managed React Native apps targeting iOS and Android devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { StyleSheet, Text, View } from 'react-native';\\nimport { Pedometer } from 'expo-sensors';\\n\\nexport default function App() {\\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\\n  const [pastStepCount, setPastStepCount] = useState(0);\\n  const [currentStepCount, setCurrentStepCount] = useState(0);\\n\\n  const subscribe = async () => {\\n    const isAvailable = await Pedometer.isAvailableAsync();\\n    setIsPedometerAvailable(String(isAvailable));\\n\\n    if (isAvailable) {\\n      const end = new Date();\\n      const start = new Date();\\n      start.setDate(end.getDate() - 1);\\n\\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\\n      if (pastStepCountResult) {\\n        setPastStepCount(pastStepCountResult.steps);\\n      }\\n\\n      return Pedometer.watchStepCount(result => {\\n        setCurrentStepCount(result.steps);\\n      });\\n    }\\n  };\\n\\n  useEffect(() => {\\n    const subscription = subscribe();\\n    return () => subscription && subscription.remove();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    marginTop: 15,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Audio with Expo Audio\nDESCRIPTION: Implementation of audio recording functionality using expo-av. Shows permission handling, recording controls, and proper cleanup of recording resources.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = useState();\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\n\n  async function startRecording() {\n    try {\n      if (permissionResponse.status !== 'granted') {\n        console.log('Requesting permission..');\n        await requestPermission();\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      });\n\n      console.log('Starting recording..');\n      const { recording } = await Audio.Recording.createAsync(\n        Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    await recording.stopAndUnloadAsync();\n    await Audio.setAudioModeAsync({\n      allowsRecordingIOS: false,\n    });\n    const uri = recording.getURI();\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running SQLite PRAGMA Commands in JavaScript\nDESCRIPTION: This JavaScript snippet shows enabling SQLite-specific PRAGMA settings—WAL (Write-Ahead Logging) and foreign key enforcement—after connecting to the database using expo-sqlite. It highlights how to execute PRAGMA statements directly with execAsync to customize SQLite engine behavior. Dependencies: expo-sqlite and a valid database instance. Inputs: PRAGMA statement strings; Outputs: SQL engine configuration state. Key constraint: PRAGMA commands must be supported by the underlying SQLite engine in Expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\\nawait db.execAsync('PRAGMA journal_mode = WAL');\\nawait db.execAsync('PRAGMA foreign_keys = ON');\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardAwareScrollView and KeyboardToolbar\nDESCRIPTION: This example demonstrates the use of KeyboardAwareScrollView and KeyboardToolbar from react-native-keyboard-controller to handle multiple input fields efficiently. It automatically scrolls to focused inputs and provides navigation controls.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextInput, View, StyleSheet } from 'react-native';\nimport { KeyboardAwareScrollView, KeyboardToolbar } from 'react-native-keyboard-controller';\n\nexport default function FormScreen() {\n  return (\n    <>\n      <KeyboardAwareScrollView bottomOffset={62} contentContainerStyle={styles.container}>\n        <View>\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n        </View>\n        <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n        <View>\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n          <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n        </View>\n        <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n      </KeyboardAwareScrollView>\n      <KeyboardToolbar />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    gap: 16,\n    padding: 16,\n  },\n  listStyle: {\n    padding: 16,\n    gap: 16,\n  },\n  textInput: {\n    width: 'auto',\n    flexGrow: 1,\n    flexShrink: 1,\n    height: 45,\n    borderWidth: 1,\n    borderRadius: 8,\n    borderColor: '#d8d8d8',\n    backgroundColor: '#fff',\n    padding: 8,\n    marginBottom: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Presenting Notifications Using the Recommended Method in TypeScript\nDESCRIPTION: Example of the recommended approach for displaying notifications, using setNotificationHandler to define behavior and scheduleNotificationAsync to trigger the notification.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call the method\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing URL and URLSearchParams - Expo - JavaScript\nDESCRIPTION: Demonstrates basic instantiation of the URL and URLSearchParams objects in JavaScript as supported on all Expo platforms. No special dependencies are required beyond the standard global objects, which are polyfilled or built-in depending on the platform. This snippet shows how to create a new URL object and an empty URLSearchParams instance; the expected input is a string or nothing, respectively, and the output is a usable object for manipulating URLs and query strings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst url = new URL('https://expo.dev');\n\nconst params = new URLSearchParams();\n```\n\n----------------------------------------\n\nTITLE: Basic React Native App Using Expo Crypto Module\nDESCRIPTION: A simple React Native application that demonstrates how to use expo-crypto to create a SHA256 hash digest from a string. The example shows the async usage pattern and basic UI setup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Crypto from 'expo-crypto';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        'GitHub stars are neat 🌟'\n      );\n      console.log('Digest: ', digest);\n      /* Some crypto operation... */\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Crypto Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with Expo-AV in React Native (JSX)\nDESCRIPTION: Demonstrates audio playback implementation using expo-av's Audio.Sound class with React Native and React hooks. Requires dependencies: expo-av, expo-asset, and react-native. The function manages audio sound loading, playing, and unloading via state and useEffect. The button triggers playback of a local mp3 asset. Always ensure to unload the sound object in useEffect's cleanup to avoid memory leaks. Takes no external parameters; clicking the button plays 'assets/Hello.mp3', and unloads on component unmount or sound change.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\\nimport { View, StyleSheet, Button } from 'react-native';\\nimport { Audio } from 'expo-av';\\n\\nexport default function App() {\\n  const [sound, setSound] = useState();\\n\\n  async function playSound() {\\n    console.log('Loading Sound');\\n    /* @info */ const { sound } = await Audio.Sound.createAsync(\\n      /* @end */ require('./assets/Hello.mp3')\\n    );\\n    setSound(sound);\\n\\n    console.log('Playing Sound');\\n    await /* @info */ sound.playAsync(); /* @end */\\n  }\\n\\n  useEffect(() => {\\n    return sound\\n      ? () => {\\n          console.log('Unloading Sound');\\n          /* @info Always unload the Sound after using it to prevent memory leaks.*/ sound.unloadAsync(); /* @end */\\n        }\\n      : undefined;\\n  }, [sound]);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Button title=\\\"Play Sound\\\" onPress={playSound} />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    backgroundColor: '#ecf0f1',\\n    padding: 10,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Magnetometer Events in Expo Sensors (React Native / JSX)\nDESCRIPTION: This code demonstrates how to set up a React Native functional component that reads and displays data from the device's magnetometer sensor using Expo Sensors. It uses the useState and useEffect hooks for state management and lifecycle, subscribes to real-time sensor data, provides options to adjust the sensor update interval, and handles user input to start/stop the subscription. Dependencies include react, react-native, and expo-sensors. Key parameters include update interval (in ms), subscription management, and magnetometer axes data (x, y, z). The component displays real-time data and provides a responsive interface for control, suitable for cross-platform mobile apps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\\nimport { Magnetometer } from 'expo-sensors';\\n\\nexport default function Compass() {\\n  const [{ x, y, z }, setData] = useState({\\n    x: 0,\\n    y: 0,\\n    z: 0,\\n  });\\n  const [subscription, setSubscription] = useState(null);\\n\\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\\n  const _fast = () => Magnetometer.setUpdateInterval(16);\\n\\n  const _subscribe = () => {\\n    setSubscription(\\n      Magnetometer.addListener(result => {\\n        setData(result);\\n      })\\n    );\\n  };\\n\\n  const _unsubscribe = () => {\\n    subscription && subscription.remove();\\n    setSubscription(null);\\n  };\\n\\n  useEffect(() => {\\n    _subscribe();\\n    return () => _unsubscribe();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.text}>Magnetometer:</Text>\\n      <Text style={styles.text}>x: {x}</Text>\\n      <Text style={styles.text}>y: {y}</Text>\\n      <Text style={styles.text}>z: {z}</Text>\\n      <View style={styles.buttonContainer}>\\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\\n          <Text>{subscription ? 'On' : 'Off'}</Text>\\n        </TouchableOpacity>\\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\\n          <Text>Slow</Text>\\n        </TouchableOpacity>\\n        <TouchableOpacity onPress={_fast} style={styles.button}>\\n          <Text>Fast</Text>\\n        </TouchableOpacity>\\n      </View>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    paddingHorizontal: 10,\\n  },\\n  text: {\\n    textAlign: 'center',\\n  },\\n  buttonContainer: {\\n    flexDirection: 'row',\\n    alignItems: 'stretch',\\n    marginTop: 15,\\n  },\\n  button: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: '#eee',\\n    padding: 10,\\n  },\\n  middleButton: {\\n    borderLeftWidth: 1,\\n    borderRightWidth: 1,\\n    borderColor: '#ccc',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Presenting an Immediate Notification with Expo Notifications (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to configure `expo-notifications` to present an alert immediately when a notification is scheduled. It sets a `notificationHandler` where `shouldShowAlert` is true and then uses `scheduleNotificationAsync` with a `null` trigger to display the notification instantly.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call the method\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Device Info Display in React Native\nDESCRIPTION: Example showing how to display basic device information (manufacturer and model name) using expo-device in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with Expo Audio in React Native\nDESCRIPTION: This example demonstrates how to load and play an audio file using the Audio module from expo-av. It creates a Sound object, plays it when a button is pressed, and properly unloads it when the component unmounts to prevent memory leaks.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    const { sound } = await Audio.Sound.createAsync(\n      require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await sound.playAsync();\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          sound.unloadAsync();\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Expo-Sensors Barometer in React Native (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates a complete React Native component utilizing the expo-sensors Barometer API to subscribe to device barometric pressure and relative altitude updates. It manages listener subscription using useState, updates UI elements with the latest sensor data, and includes platform-specific messaging for values only available on iOS. Dependencies include 'expo-sensors' and 'react-native'; expected input is user interaction via the 'Toggle listener' button, and the output is real-time pressure and altitude readings (where available) displayed in the app UI. Platform support is Android and iOS, with relative altitude supported only on iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from 'react';\\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\\nimport { Barometer } from 'expo-sensors';\\n\\nexport default function App() {\\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\\n  const [subscription, setSubscription] = useState(null);\\n\\n  const toggleListener = () => {\\n    subscription ? unsubscribe() : subscribe();\\n  };\\n\\n  const subscribe = () => {\\n    setSubscription(Barometer.addListener(setData));\\n  };\\n\\n  const unsubscribe = () => {\\n    subscription && subscription.remove();\\n    setSubscription(null);\\n  };\\n\\n  return (\\n    <View style={styles.wrapper}>\\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\\n      <Text>Pressure: {pressure} hPa</Text>\\n      <Text>\\n        Relative Altitude:{' '}\\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\\n      </Text>\\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\\n        <Text>Toggle listener</Text>\\n      </TouchableOpacity>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  button: {\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: '#eee',\\n    padding: 10,\\n    marginTop: 15,\\n  },\\n  wrapper: {\\n    flex: 1,\\n    alignItems: 'stretch',\\n    justifyContent: 'center',\\n    paddingHorizontal: 20,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Expo Contacts Usage Example\nDESCRIPTION: React Native component demonstrating how to request permissions and fetch contacts using expo-contacts. Shows implementation of contact access with email fields.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Contacts from 'expo-contacts';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Contacts.requestPermissionsAsync();\n      if (status === 'granted') {\n        const { data } = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Emails],\n        });\n\n        if (data.length > 0) {\n          const contact = data[0];\n          console.log(contact);\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Contacts Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter OAuth Authentication in React Native\nDESCRIPTION: This snippet shows how to implement Twitter OAuth authentication using Expo's authentication module. It includes the necessary configuration, PKCE support, and a button component to initiate the login process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button, Platform } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: \"https://twitter.com/i/oauth2/authorize\",\n  tokenEndpoint: \"https://twitter.com/i/oauth2/token\",\n  revocationEndpoint: \"https://twitter.com/i/oauth2/revoke\",\n};\n\nexport default function App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      redirectUri: makeRedirectUri({\n        scheme: 'your.app',\n      }),\n      usePKCE: true,\n      scopes: [\n        \"tweet.read\",\n      ],\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Albums and Displaying Assets with Expo MediaLibrary in React Native (JSX)\nDESCRIPTION: This React Native functional component demonstrates using `expo-media-library` to request permissions, fetch albums (including smart albums), and display assets from each album. It uses `MediaLibrary.usePermissions`, `MediaLibrary.getAlbumsAsync`, and `MediaLibrary.getAssetsAsync` within `useEffect` hooks to manage state and asynchronous operations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// prettier-ignore\nimport { useState, useEffect } from 'react';\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function App() {\n  const [albums, setAlbums] = useState(null);\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n\n  async function getAlbums() {\n    if (permissionResponse.status !== 'granted') {\n      await requestPermission();\n    }\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums: true,\n    });\n    setAlbums(fetchedAlbums);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Button onPress={getAlbums} title=\"Get albums\" />\n      <ScrollView>\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nfunction AlbumEntry({ album }) {\n  const [assets, setAssets] = useState([]);\n\n  useEffect(() => {\n    async function getAlbumAssets() {\n      const albumAssets = await MediaLibrary.getAssetsAsync({ album });\n      setAssets(albumAssets.assets);\n    }\n    getAlbumAssets();\n  }, [album]);\n\n  return (\n    <View key={album.id} style={styles.albumContainer}>\n      <Text>\n        {album.title} - {album.assetCount ?? 'no'} assets\n      </Text>\n      <View style={styles.albumAssetsContainer}>\n        {assets && assets.map((asset) => (\n          <Image source={{ uri: asset.uri }} width={50} height={50} />\n        ))}\n      </View>\n    </View>\n  );\n}\n\n/* @hide const styles = StyleSheet.create({ ... }); */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    gap: 8,\n    justifyContent: 'center',\n    ...Platform.select({\n      android: {\n        paddingTop: 40,\n      },\n    }),\n  },\n  albumContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 12,\n    gap: 4,\n  },\n  albumAssetsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Managing Splash Screen Visibility with expo-splash-screen in React Native (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to prevent the splash screen from auto-hiding using the SplashScreen.preventAutoHideAsync() method, asynchronously load resources such as fonts, and programmatically hide the splash screen when the app is ready to render its root view. It requires expo-splash-screen, expo-font, @expo/vector-icons/Entypo, and React Native dependencies. The snippet shows how to leverage React hooks for state and lifecycle management, simulates delayed loading, and ensures a seamless user experience by hiding the splash screen only after the initial layout. Expected inputs include the required dependencies installed and configured; outputs are a fully rendered app view after resource preparation. Removing artificial loading delays is recommended for production.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\\nimport { Text, View } from 'react-native';\\nimport Entypo from '@expo/vector-icons/Entypo';\\nimport * as SplashScreen from 'expo-splash-screen';\\nimport * as Font from 'expo-font';\\n\\n// Keep the splash screen visible while we fetch resources\\nSplashScreen.preventAutoHideAsync();\\n\\nexport default function App() {\\n  const [appIsReady, setAppIsReady] = useState(false);\\n\\n  useEffect(() => {\\n    async function prepare() {\\n      try {\\n        // Pre-load fonts, make any API calls you need to do here\\n        await Font.loadAsync(Entypo.font);\\n        // Artificially delay for two seconds to simulate a slow loading\\n        // experience. Please remove this if you copy and paste the code!\\n        await new Promise(resolve => setTimeout(resolve, 2000));\\n      } catch (e) {\\n        console.warn(e);\\n      } finally {\\n        // Tell the application to render\\n        setAppIsReady(true);\\n      }\\n    }\\n\\n    prepare();\\n  }, []);\\n\\n  const onLayoutRootView = useCallback(async () => {\\n    if (appIsReady) {\\n      // This tells the splash screen to hide immediately! If we call this after\\n      // `setAppIsReady`, then we may see a blank screen while the app is\\n      // loading its initial state and rendering its first pixels. So instead,\\n      // we hide the splash screen once we know the root view has already\\n      // performed layout.\\n      await SplashScreen.hideAsync();\\n    }\\n  }, [appIsReady]);\\n\\n  if (!appIsReady) {\\n    return null;\\n  }\\n\\n  return (\\n    <View\\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\\n      onLayout={onLayoutRootView}>\\n      <Text>SplashScreen Demo! 👋</Text>\\n      <Entypo name=\"rocket\" size={30} />\\n    </View>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Uber OAuth Authentication in React Native\nDESCRIPTION: This snippet demonstrates how to set up Uber OAuth authentication using Expo's authentication module. It includes the necessary configuration and a button component to initiate the login process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: 'https://login.uber.com/oauth/v2/authorize',\n  tokenEndpoint: 'https://login.uber.com/oauth/v2/token',\n  revocationEndpoint: 'https://login.uber.com/oauth/v2/revoke',\n};\n\nexport default function App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      scopes: ['profile', 'delivery'],\n      redirectUri: makeRedirectUri({\n        scheme: 'your.app'\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic API Route in TypeScript\nDESCRIPTION: Define a simple GET API route that returns a JSON response with a hello world message.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function GET(request: Request) {\n  return Response.json({ hello: 'world' });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Android Push Notification Data Payload Structure (TypeScript)\nDESCRIPTION: This TypeScript interface defines the expected structure for the `data` object within an Android push notification payload sent via Firebase. It outlines optional properties such as `title`, `message`, `sound`, `vibrate`, `priority`, and `badge` that can be included to customize the notification's appearance and behavior.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseData {\n  title?: string;\n  message?: string;\n  subtitle?: string;\n  sound?: boolean | string;\n  vibrate?: boolean | number[];\n  priority?: AndroidNotificationPriority;\n  badge?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Faces with expo-face-detector in React Native (JSX)\nDESCRIPTION: This React Native code snippet demonstrates how to set up the expo-camera component to detect faces in real time using the expo-face-detector library. The Camera component is configured with onFacesDetected and faceDetectorSettings props to control detection mode, landmark detection, and tracking. Key dependencies include expo-camera and expo-face-detector; inputs are frames from the device's camera, outputs are arrays of detected face objects, received in the handleFacesDetected callback. The snippet is designed for use in mobile apps requiring fast, real-time detection without classification or landmark features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/facedetector.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as FaceDetector from 'expo-face-detector';\n\nconst App = () => (\n  <Camera\n    // other props\n    onFacesDetected={handleFacesDetected}\n    faceDetectorSettings={{\n      mode: FaceDetector.FaceDetectorMode.fast,\n      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,\n      runClassifications: FaceDetector.FaceDetectorClassifications.none,\n      minDetectionInterval: 100,\n      tracking: true,\n    }}\n  />\n);\n\nconst handleFacesDetected = ({ faces }) => {\n  console.log(faces);\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-camera Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-camera plugin specifying camera and microphone permissions and Android audio recording settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expo Crypto Basic Usage Example\nDESCRIPTION: Example React Native component demonstrating basic usage of expo-crypto to generate SHA256 hash of a string. Uses useEffect hook to perform the crypto operation asynchronously and display a simple UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Crypto from 'expo-crypto';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        'GitHub stars are neat 🌟'\n      );\n      console.log('Digest: ', digest);\n      /* Some crypto operation... */\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Crypto Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Rotation and Flip in React Native with Expo\nDESCRIPTION: A complete React Native component demonstrating how to use expo-image-manipulator to load an image asset, rotate it 90 degrees clockwise, flip it vertically, and save it as a PNG. The component includes state management, image rendering, and styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Image, StyleSheet, View } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';\n\nexport default function App() {\n  const [ready, setReady] = useState(false);\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const image = Asset.fromModule(require('./assets/snack-icon.png'));\n      await image.downloadAsync();\n      setImage(image);\n      setReady(true);\n    })();\n  }, []);\n\n  const _rotate90andFlip = async () => {\n    const manipResult = await manipulateAsync(\n      image.localUri || image.uri,\n      [{ rotate: 90 }, { flip: FlipType.Vertical }],\n      { compress: 1, format: SaveFormat.PNG }\n    );\n    setImage(manipResult);\n  };\n\n  const _renderImage = () => (\n    <View style={styles.imageContainer}>\n      <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {ready && image && _renderImage()}\n      <Button title=\"Rotate and Flip\" onPress={_rotate90andFlip} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  imageContainer: {\n    marginVertical: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statements in SQLite\nDESCRIPTION: Shows how to use prepared statements for efficient query execution with parameter binding and result handling\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst statement = await db.prepareAsync(\n  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'\n);\ntry {\n  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });\n  console.log('bbb and 101:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });\n  console.log('ccc and 102:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });\n  console.log('ddd and 103:', result.lastInsertRowId, result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n\nconst statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');\ntry {\n  const result = await statement2.executeAsync<{ value: string; intValue: number }>({\n    $intValue: 100,\n  });\n\n  const firstRow = await result.getFirstAsync();\n  console.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n  await result.resetAsync();\n\n  const allRows = await result.getAllAsync();\n  for (const row of allRows) {\n    console.log(row.value, row.intValue);\n  }\n\n  await result.resetAsync();\n\n  for await (const row of result) {\n    console.log(row.value, row.intValue);\n  }\n} finally {\n  await statement2.finalizeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Gradient Backgrounds and Buttons with Expo LinearGradient (TypeScript)\nDESCRIPTION: This code demonstrates how to use the expo-linear-gradient package in a React Native component to render both a gradient background and a gradient-styled button. It imports linear gradient functionality and applies two different gradients using the colors and style properties. Dependencies include expo-linear-gradient and react-native. Key parameters: colors (an array of color strings) and style (for positioning and sizing). The component is flexible for Android, iOS, tvOS, and web. Inputs are style and color customizations; outputs are visually rendered gradient views and buttons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\\nimport { LinearGradient } from 'expo-linear-gradient';\\n\\nexport default function App() {\\n  return (\\n    <View style={styles.container}>\\n      <LinearGradient\\n        // Background Linear Gradient\\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\\n        style={styles.background}\\n      />\\n      <LinearGradient\\n        // Button Linear Gradient\\n        colors={['#4c669f', '#3b5998', '#192f6a']}\\n        style={styles.button}>\\n        <Text style={styles.text}>Sign in with Facebook</Text>\\n      </LinearGradient>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    backgroundColor: 'orange',\\n  },\\n  background: {\\n    position: 'absolute',\\n    left: 0,\\n    right: 0,\\n    top: 0,\\n    height: 300,\\n  },\\n  button: {\\n    padding: 15,\\n    alignItems: 'center',\\n    borderRadius: 5,\\n  },\\n  text: {\\n    backgroundColor: 'transparent',\\n    fontSize: 15,\\n    color: '#fff',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Sending FCMv1 Notification in TypeScript\nDESCRIPTION: This function demonstrates how to send a notification using FCMv1. It obtains an access token, constructs the notification payload, and sends a POST request to the FCM API endpoint.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function sendFCMv1Notification() {\n  const key = require(process.env.FCM_SERVER_KEY);\n  const firebaseAccessToken = await getAccessTokenAsync(key);\n  const deviceToken = process.env.FCM_DEVICE_TOKEN;\n\n  const messageBody = {\n    message: {\n      token: deviceToken,\n      data: {\n        channelId: 'default',\n        message: 'Testing',\n        title: `This is an FCM notification message`,\n        body: JSON.stringify({ title: 'bodyTitle', body: 'bodyBody' }),\n        scopeKey: '@yourExpoUsername/yourProjectSlug',\n        experienceId: '@yourExpoUsername/yourProjectSlug',\n      },\n    },\n  };\n\n  const response = await fetch(\n    `https://fcm.googleapis.com/v1/projects/${process.env.FCM_PROJECT_NAME}/messages:send`,\n    {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${firebaseAccessToken}`,\n        Accept: 'application/json',\n        'Accept-encoding': 'gzip, deflate',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(messageBody),\n    }\n  );\n\n  const readResponse = (response: Response) => response.json();\n  const json = await readResponse(response);\n\n  console.log(`Response JSON: ${JSON.stringify(json, null, 2)}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Descope Authentication Flow in Expo App with PKCE\nDESCRIPTION: Demonstrates how to setup Descope authentication in an Expo application using expo-auth-session and WebBrowser. The code handles the OAuth flow with PKCE support, including token exchange and session management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } React from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as AuthSession from 'expo-auth-session';\nimport { Button, View } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst descopeProjectId = '<Descope Project ID>'; // Replace this with your Descope Project ID\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect URIs in Expo Authentication\nDESCRIPTION: Utilize AuthSession.makeRedirectUri() to create redirect URIs. This function handles platform-specific details and uses expo-linking behind the scenes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAuthSession.makeRedirectUri()\n```\n\n----------------------------------------\n\nTITLE: Defining and Starting a Background Location Task with Expo TaskManager (React Native/JSX)\nDESCRIPTION: This React Native snippet shows how to define and start a background location task using expo-task-manager and expo-location. It requests the necessary foreground and background permissions, and sets up a TaskManager task that processes location updates in the background. Dependencies include expo-task-manager, expo-location, and react-native. Key parameters include the LOCATION_TASK_NAME, permission requests, and location update options. The component renders a button to trigger the permission flow and task registration. Expected output is background location tracking as long as permissions are granted.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\\nimport { Button, View, StyleSheet } from 'react-native';\\nimport * as TaskManager from 'expo-task-manager';\\nimport * as Location from 'expo-location';\\n\\nconst LOCATION_TASK_NAME = 'background-location-task';\\n\\nconst requestPermissions = async () => {\\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\\n  if (foregroundStatus === 'granted') {\\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\\n    if (backgroundStatus === 'granted') {\\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\\n        accuracy: Location.Accuracy.Balanced,\\n      });\\n    }\\n  }\\n};\\n\\nconst PermissionsButton = () => (\\n  <View style={styles.container}>\\n    <Button onPress={requestPermissions} title=\\\"Enable background location\\\" />\\n  </View>\\n);\\n\\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\\n  if (error) {\\n    // Error occurred - check `error.message` for more details.\\n    return;\\n  }\\n  if (data) {\\n    const { locations } = data;\\n    // do something with the locations captured in the background\\n  }\\n});\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\\n\\nexport default PermissionsButton;\\n\n```\n\n----------------------------------------\n\nTITLE: Basic BarCodeScanner Implementation in React Native\nDESCRIPTION: A complete React Native component showing how to implement barcode scanning with camera permissions handling, scan detection, and UI feedback. The example demonstrates the full lifecycle from requesting permissions to handling scanned barcodes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/bar-code-scanner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default function App() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    const getBarCodeScannerPermissions = async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    };\n\n    getBarCodeScannerPermissions();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Barometer Usage in React Native with Expo\nDESCRIPTION: A complete React Native component demonstrating how to implement barometer sensor monitoring. The code shows how to subscribe to barometer updates, handle sensor data, and toggle the listener. It displays pressure readings and relative altitude (iOS only).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { Barometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggleListener = () => {\n    subscription ? unsubscribe() : subscribe();\n  };\n\n  const subscribe = () => {\n    setSubscription(Barometer.addListener(setData));\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  return (\n    <View style={styles.wrapper}>\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\n      <Text>Pressure: {pressure} hPa</Text>\n      <Text>\n        Relative Altitude:{' '}\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\n      </Text>\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\n        <Text>Toggle listener</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n    marginTop: 15,\n  },\n  wrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic WebView in React Native (JSX)\nDESCRIPTION: This snippet demonstrates the basic usage of the `WebView` component from `react-native-webview` to display a web page from a given URI. It imports necessary components, defines a functional component `App`, and renders a `WebView` that loads 'https://expo.dev'. Styles are applied using `StyleSheet` to make the WebView fill the available screen space below the status bar, whose height is obtained using `expo-constants`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* prettier-ignore */\n```jsx collapseHeight=310\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      source={{ uri: 'https://expo.dev' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Custom Fonts in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to load a custom font (Inter-Black) using the useFonts hook from expo-font, and apply it to a Text component in a React Native application. It also shows how to manage the splash screen while fonts are loading.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [fontsLoaded] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded]);\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container} onLayout={onLayoutRootView}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remote URL with WebView in React Native - JavaScript (JSX)\nDESCRIPTION: This snippet demonstrates how to use the react-native-webview module to render a remote website (https://expo.dev) within a React Native application. It leverages the WebView component with a source prop pointing to the desired URI. Dependencies include react-native-webview for the WebView component, expo-constants for device constants, and react-native for the StyleSheet utility. The primary input is the URI to be loaded, and the output is the rendered web content displayed in a native view. The container style uses flex layout and adapts its margin based on the device's status bar height.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\\nimport Constants from 'expo-constants';\\nimport { StyleSheet } from 'react-native';\\n\\nexport default function App() {\\n  return (\\n    <WebView\\n      style={styles.container}\\n      source={{ uri: 'https://expo.dev' }}\\n    />\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    marginTop: Constants.statusBarHeight,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing expo-location Module (JavaScript)\nDESCRIPTION: Demonstrates how to import all functionalities from the expo-location package using ES module syntax in JavaScript. Dependency: expo-location. Input/Output: none—setup import only, to be used in further code. Required for subsequent location operations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Location from 'expo-location';\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project using pnpm\nDESCRIPTION: Command to create a new Expo project using pnpm package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create expo-app\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start the Expo development server on the default port 8081.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Registering the Root Component using registerRootComponent (Expo, TSX)\nDESCRIPTION: This TSX snippet defines a simple React Native App component rendering a View, imports registerRootComponent from Expo, and registers the App as the root component. This is required when using a custom entry file (as configured in package.json) to ensure the application launches correctly. Dependencies include the expo and react-native packages. The key parameter is the component function passed to registerRootComponent. No return value is expected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\\nimport { View } from 'react-native';\\n\\nfunction App() {\\n  return <View />;\\n}\\n\\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Implementing Face Detection with expo-face-detector in React Native\nDESCRIPTION: Example of how to use the Camera component with face detection capabilities. This snippet configures face detection in fast mode without detecting landmarks or smile classification, and logs detected faces to the console.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/facedetector.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as FaceDetector from 'expo-face-detector';\n\nconst App = () => (\n  <Camera\n    // other props\n    onFacesDetected={handleFacesDetected}\n    faceDetectorSettings={{\n      mode: FaceDetector.FaceDetectorMode.fast,\n      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,\n      runClassifications: FaceDetector.FaceDetectorClassifications.none,\n      minDetectionInterval: 100,\n      tracking: true,\n    }}\n  />\n);\n\nconst handleFacesDetected = ({ faces }) => {\n  console.log(faces);\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnails with expo-video-thumbnails in React Native\nDESCRIPTION: This React Native component demonstrates how to use the `expo-video-thumbnails` library. It defines a function `generateThumbnail` that calls `VideoThumbnails.getThumbnailAsync` with a video URL and a specific time (15000ms). The resulting thumbnail URI is stored in the component's state and displayed using an `Image` component when a button is pressed. It requires `react`, `react-native`, and `expo-video-thumbnails` dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pedometer Functionality in a React Native Component (JSX)\nDESCRIPTION: This React Native functional component demonstrates the usage of the `expo-sensors` Pedometer API. It utilizes `useState` and `useEffect` hooks to manage state and side effects. The `subscribe` function checks pedometer availability with `Pedometer.isAvailableAsync()`, fetches the past 24 hours' step count using `Pedometer.getStepCountAsync()`, and sets up a listener for current step count changes with `Pedometer.watchStepCount()`. The component displays the availability status, past steps, and live step count updates. The effect hook ensures the subscription is created on mount and removed on unmount.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Pedometer } from 'expo-sensors';\n\nexport default function App() {\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\n  const [pastStepCount, setPastStepCount] = useState(0);\n  const [currentStepCount, setCurrentStepCount] = useState(0);\n\n  const subscribe = async () => {\n    const isAvailable = await Pedometer.isAvailableAsync();\n    setIsPedometerAvailable(String(isAvailable));\n\n    if (isAvailable) {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - 1);\n\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\n      if (pastStepCountResult) {\n        setPastStepCount(pastStepCountResult.steps);\n      }\n\n      return Pedometer.watchStepCount(result => {\n        setCurrentStepCount(result.steps);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const subscription = subscribe();\n    return () => subscription && subscription.remove();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Context Provider in TypeScript\nDESCRIPTION: This snippet defines an AuthContext and SessionProvider for managing authentication state. It includes functions for signing in and out, and a hook for accessing the session information throughout the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext, createContext, type PropsWithChildren } from 'react';\nimport { useStorageState } from './useStorageState';\n\nconst AuthContext = createContext<{\n  signIn: () => void;\n  signOut: () => void;\n  session?: string | null;\n  isLoading: boolean;\n}>({\n  signIn: () => null,\n  signOut: () => null,\n  session: null,\n  isLoading: false,\n});\n\n// This hook can be used to access the user info.\nexport function useSession() {\n  const value = useContext(AuthContext);\n  if (process.env.NODE_ENV !== 'production') {\n    if (!value) {\n      throw new Error('useSession must be wrapped in a <SessionProvider />');\n    }\n  }\n\n  return value;\n}\n\nexport function SessionProvider({ children }: PropsWithChildren) {\n  const [[isLoading, session], setSession] = useStorageState('session');\n\n  return (\n    <AuthContext.Provider\n      value={{\n        signIn: () => {\n          // Perform sign-in logic here\n          setSession('xxx');\n        },\n        signOut: () => {\n          setSession(null);\n        },\n        session,\n        isLoading,\n      }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Initial Render with initialWindowMetrics in React Native\nDESCRIPTION: Demonstrates an optimization technique by providing `initialWindowMetrics` to the `SafeAreaProvider`'s `initialMetrics` prop. This can speed up the initial render by providing estimated inset values synchronously, avoiding delays caused by asynchronous measurement. Not suitable if the provider remounts or when using `react-native-navigation`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a MapView with react-native-maps in React Native (JSX)\nDESCRIPTION: This snippet demonstrates how to create a basic React Native application that displays a full-screen MapView component using the react-native-maps library. Dependencies include 'react-native-maps' and 'react-native' for basic style and layout components. The input is a standard Expo-managed project with the required packages installed; the MapView is rendered inside a styled View container that fills the device screen. The output is an interactive map displayed within the mobile app, with no additional configuration required when testing in Expo Go, but requiring API keys for production platform deployment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BarCodeScanner with Permissions in Expo - React Native (JSX)\nDESCRIPTION: This code snippet provides a full functional example of requesting camera permission and integrating the BarCodeScanner component from expo-barcode-scanner in an Expo React Native application. It handles user permissions, renders the scanner view, and processes scan events with an alert. The snippet requires the expo-barcode-scanner and react-native dependencies, and expects to run in an Expo-managed or compatible React Native project. Key parameters include hasPermission for tracking user permission status, scanned for scan event handling, and handleBarCodeScanned for scan event callback. The output is a UI that requests permissions, displays the camera preview, and alerts with scanned barcode information. Make sure to install the expo-barcode-scanner package as a prerequisite.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { Text, View, StyleSheet, Button } from 'react-native';\\nimport { BarCodeScanner } from 'expo-barcode-scanner';\\n\\nexport default function App() {\\n  const [hasPermission, setHasPermission] = useState(null);\\n  const [scanned, setScanned] = useState(false);\\n\\n  useEffect(() => {\\n    const getBarCodeScannerPermissions = async () => {\\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\\n      setHasPermission(status === 'granted');\\n    };\\n\\n    getBarCodeScannerPermissions();\\n  }, []);\\n\\n  const handleBarCodeScanned = ({ type, data }) => {\\n    setScanned(true);\\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\\n  };\\n\\n  if (hasPermission === null) {\\n    return <Text>Requesting for camera permission</Text>;\\n  }\\n  if (hasPermission === false) {\\n    return <Text>No access to camera</Text>;\\n  }\\n\\n  return (\\n    <View style={styles.container}>\\n      <BarCodeScanner\\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\\n        style={StyleSheet.absoluteFillObject}\\n      />\\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    flexDirection: 'column',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera for Face Detection in React Native\nDESCRIPTION: This snippet demonstrates how to set up a Camera component with face detection capabilities using expo-camera and expo-face-detector. It configures the face detector settings for fast detection without landmarks or smile detection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/facedetector.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as FaceDetector from 'expo-face-detector';\n\nconst App = () => (\n  <Camera\n    // other props\n    onFacesDetected={handleFacesDetected}\n    faceDetectorSettings={{\n      mode: FaceDetector.FaceDetectorMode.fast,\n      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,\n      runClassifications: FaceDetector.FaceDetectorClassifications.none,\n      minDetectionInterval: 100,\n      tracking: true,\n    }}\n  />\n);\n\n/* @hide const handleFacesDetected = ({ faces }) => { ... }; */\nconst handleFacesDetected = ({ faces }) => {\n  console.log(faces);\n};\n\nexport default App;\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads on a Node.js Server (JavaScript)\nDESCRIPTION: Shows a basic Node.js server using Express and Multer designed to handle file uploads, potentially from an Expo app using `expo-file-system`. It defines two PATCH endpoints: one for saving raw binary request content to a file and another for handling multipart form data (specifically a 'photo' field) using Multer.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js index.js\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Generating and Displaying a Video Thumbnail in React Native (JSX)\nDESCRIPTION: This JSX snippet showcases a React Native component that generates a video thumbnail using `expo-video-thumbnails`. It defines an asynchronous function `generateThumbnail` which calls `VideoThumbnails.getThumbnailAsync` with a video URL ('https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4') and a specific time (15000ms). The generated thumbnail's URI is stored in state using `useState` and displayed using the `Image` component. It includes basic error handling with `console.warn`. Requires `react`, `react-native`, and `expo-video-thumbnails`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Configuration Functions in app.config.js\nDESCRIPTION: Helper functions that generate unique identifiers and app names based on the current build variant, allowing each variant to have its own distinct identifier and display name.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst getUniqueIdentifier = () => {\n  if (IS_DEV) {\n    return 'com.yourname.stickersmash.dev';\n  }\n\n  if (IS_PREVIEW) {\n    return 'com.yourname.stickersmash.preview';\n  }\n\n  return 'com.yourname.stickersmash';\n};\n\nconst getAppName = () => {\n  if (IS_DEV) {\n    return 'StickerSmash (Dev)';\n  }\n\n  if (IS_PREVIEW) {\n    return 'StickerSmash (Preview)';\n  }\n\n  return 'StickerSmash: Emoji Stickers';\n};\n```\n\n----------------------------------------\n\nTITLE: Basic LightSensor Usage in React Native (JSX)\nDESCRIPTION: Demonstrates subscribing to and displaying light sensor data using the `LightSensor` module from `expo-sensors` in a React Native functional component. It uses `useState` to store sensor data (`illuminance`) and the subscription object, and `useEffect` to manage the subscription lifecycle (subscribe on mount, unsubscribe on unmount). A button allows toggling the sensor updates. Requires `react`, `react-native`, and `expo-sensors` dependencies. Displays illuminance in lux (lx), noting it's Android-only.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions in app.json\nDESCRIPTION: Example of setting iOS permission messages in the Info.plist configuration using app.json. Shows how to provide user-facing explanations for permission requests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"infoPlist\": {\n      \"NSCameraUsageDescription\": \"This app uses the camera to scan barcodes on event tickets.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with Expo CLI and Yarn\nDESCRIPTION: Complete set of commands to clear all development caches when using Expo CLI with Yarn, including node_modules, Yarn cache, watchman, and Metro bundler caches.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# With Yarn workspaces, you may need to delete node_modules in each workspace\n$ rm -rf node_modules\n\n$ yarn cache clean\n\n$ yarn\n\n$ watchman watch-del-all\n\n$ rm -fr $TMPDIR/haste-map-*\n\n$ rm -rf $TMPDIR/metro-cache\n\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Width Change with React Native Reanimated\nDESCRIPTION: Demonstrates how to create an animated component that changes width smoothly using react-native-reanimated. The example shows usage of shared values, animated styles, and timing animations with custom easing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Updates API - JavaScript\nDESCRIPTION: This snippet shows how to import the entire expo-updates API into a JavaScript or React Native application. It is required to access update-checking and update-management functions from the 'Updates' namespace. There are no required parameters or configuration for this import; it enables subsequent use of the API across application code. This is a dependency for all further expo-updates operations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Updates from 'expo-updates';\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts with useFonts Hook in React Native\nDESCRIPTION: Demonstrates loading a custom font ('Inter-Black.otf') using the 'useFonts' hook from expo-font in a React Native component. It uses expo-splash-screen to manage the splash screen visibility during font loading and applies the loaded font via the 'fontFamily' style.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/* @info Import useFonts hook from 'expo-font'. */ import { useFonts } from 'expo-font'; /* @end */\n/* @info Also, import SplashScreen so that when the fonts are not loaded, we can continue to show SplashScreen. */ import * as SplashScreen from 'expo-splash-screen'; /* @end */\nimport { useEffect } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\n/* @info This prevents SplashScreen from auto hiding while the fonts are loaded. */\nSplashScreen.preventAutoHideAsync();\n/* @end */\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      /* @info After the custom fonts have loaded, we can hide the splash screen and display the app screen. */\n      SplashScreen.hideAsync();\n      /* @end */\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Implementation in React Native with Expo\nDESCRIPTION: Complete example showing how to implement a camera component in React Native using expo-camera. Includes permission handling, camera type switching, and basic UI for user interaction.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera, CameraType } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [type, setType] = useState(CameraType.back);\n  const [permission, requestPermission] = Camera.useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet\n    return (\n      <View style={styles.container}>\n        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraType() {\n    setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Accelerometer Monitoring in React Native\nDESCRIPTION: A complete React Native component demonstrating accelerometer integration with controls for subscription management and update frequency. Uses hooks for state management and includes styling for a user interface to display acceleration values and control buttons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\n  const _fast = () => Accelerometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(Accelerometer.addListener(setData));\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Location Updates with Expo TaskManager and Location in React Native\nDESCRIPTION: This React Native code snippet showcases how to implement background location tracking. It defines a task named `background-location-task` using `TaskManager.defineTask` which will process location data received in the background. The `requestPermissions` function handles requesting foreground and background location permissions and then starts location updates using `Location.startLocationUpdatesAsync`, linking it to the defined task. The component renders a button to trigger the permission request and start the background task.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\n\nconst LOCATION_TASK_NAME = 'background-location-task';\n\nconst requestPermissions = async () => {\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\n  if (foregroundStatus === 'granted') {\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\n    if (backgroundStatus === 'granted') {\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n        accuracy: Location.Accuracy.Balanced,\n      });\n    }\n  }\n};\n\nconst PermissionsButton = () => (\n  <View style={styles.container}>\n    <Button onPress={requestPermissions} title=\"Enable background location\" />\n  </View>\n);\n\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\n  if (error) {\n    // Error occurred - check `error.message` for more details.\n    return;\n  }\n  if (data) {\n    const { locations } = data;\n    // do something with the locations captured in the background\n  }\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default PermissionsButton;\n```\n\n----------------------------------------\n\nTITLE: Implementing Print, PDF, and Printer Selection with expo-print in React Native (JSX)\nDESCRIPTION: Demonstrates a functional React Native component that uses expo-print to print HTML content, generate PDF files from HTML, share the generated PDF using expo-sharing, and select a printer (iOS only). Requires expo-print, expo-sharing, and React Native. The html string specifies the printable content. Key parameters include html for content, printerUrl for specific printer targeting, and uri for sharing the output PDF. Inputs: user actions (button presses). Outputs: print job execution, PDF file, and sharing dialog. Limitations: selecting printers and sharing files only supported on iOS/Android, HTML-based printing only uses base64 images on iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button, Platform, Text } from 'react-native';\nimport * as Print from 'expo-print';\nimport { shareAsync } from 'expo-sharing';\n\nconst html = `\n<html>\n  <head>\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\\\" />\n  </head>\n  <body style=\\\"text-align: center;\\\">\\n    <h1 style=\\\"font-size: 50px; font-family: Helvetica Neue; font-weight: normal;\\\">\\n      Hello Expo!\\n    </h1>\\n    <img\\n      src=\\\"https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png\\\"\\n      style=\\\"width: 90vw;\\\" />\\n  </body>\\n</html>\\n`;\n\nexport default function App() {\n  const [selectedPrinter, setSelectedPrinter] = useState();\n\n  const print = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ await Print.printAsync({\n      html,\n      printerUrl: selectedPrinter?.url, // iOS only\n    }); /* @end */\n  };\n\n  const printToFile = async () => {\n    // On iOS/android prints the given html. On web prints the HTML from the current page.\n    /* @info */ const { uri } = await Print.printToFileAsync({ html }); /* @end */\n    console.log('File has been saved to:', uri);\n    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });\n  };\n\n  const selectPrinter = async () => {\n    /* @info */ const printer = await Print.selectPrinterAsync(); // iOS only\n    /* @end */\n    setSelectedPrinter(printer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\\\"Print\\\" onPress={print} />\n      <View style={styles.spacer} />\n      <Button title=\\\"Print to PDF file\\\" onPress={printToFile} />\n      {Platform.OS === 'ios' && (\n        <>\n          <View style={styles.spacer} />\n          <Button title=\\\"Select printer\\\" onPress={selectPrinter} />\n          <View style={styles.spacer} />\n          {selectedPrinter ? (\n            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>\n          ) : undefined}\n        </>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    flexDirection: 'column',\n    padding: 8,\n  },\n  spacer: {\n    height: 8,\n  },\n  printer: {\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Contacts Usage in React Native\nDESCRIPTION: Example React Native component demonstrating how to request permissions and fetch contacts data using expo-contacts. It requests permission, retrieves contacts with email fields, and logs the first contact to the console.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Contacts from 'expo-contacts';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Contacts.requestPermissionsAsync();\n      if (status === 'granted') {\n        const { data } = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Emails],\n        });\n\n        if (data.length > 0) {\n          const contact = data[0];\n          console.log(contact);\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Contacts Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Albums and Displaying Assets with Expo Media Library (React Native, JSX)\nDESCRIPTION: Demonstrates a functional React Native app using Expo Media Library to request permissions, fetch media albums, and display album assets. The main component requests media permissions, retrieves the album list, and passes each album to an album entry subcomponent. AlbumEntry fetches and displays thumbnail images for each asset in the album using Image components. The code also utilizes React state, useEffect, StyleSheet, and Platform APIs for responsive UI and platform-specific styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\\nimport * as MediaLibrary from 'expo-media-library';\\n\\nexport default function App() {\\n  const [albums, setAlbums] = useState(null);\\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\\n\\n  async function getAlbums() {\\n    if (permissionResponse.status !== 'granted') {\\n      await requestPermission();\\n    }\\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\\n      includeSmartAlbums: true,\\n    });\\n    setAlbums(fetchedAlbums);\\n  }\\n\\n  return (\\n    <SafeAreaView style={styles.container}>\\n      <Button onPress={getAlbums} title=\\\"Get albums\\\" />\\n      <ScrollView>\\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\\n      </ScrollView>\\n    </SafeAreaView>\\n  );\\n}\\n\\nfunction AlbumEntry({ album }) {\\n  const [assets, setAssets] = useState([]);\\n\\n  useEffect(() => {\\n    async function getAlbumAssets() {\\n      const albumAssets = await MediaLibrary.getAssetsAsync({ album });\\n      setAssets(albumAssets.assets);\\n    }\\n    getAlbumAssets();\\n  }, [album]);\\n\\n  return (\\n    <View key={album.id} style={styles.albumContainer}>\\n      <Text>\\n        {album.title} - {album.assetCount ?? 'no'} assets\\n      </Text>\\n      <View style={styles.albumAssetsContainer}>\\n        {assets && assets.map((asset) => (\\n          <Image source={{ uri: asset.uri }} width={50} height={50} />\\n        ))}\\n      </View>\\n    </View>\\n  );\\n}\\n\\n/* @hide const styles = StyleSheet.create({ ... }); */\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    gap: 8,\\n    justifyContent: 'center',\\n    ...Platform.select({\\n      android: {\\n        paddingTop: 40,\\n      },\\n    }),\\n  },\\n  albumContainer: {\\n    paddingHorizontal: 20,\\n    marginBottom: 12,\\n    gap: 4,\\n  },\\n  albumAssetsContainer: {\\n    flexDirection: 'row',\\n    flexWrap: 'wrap',\\n  },\\n});\\n/* @end */\n```\n\n----------------------------------------\n\nTITLE: Creating width animation with react-native-reanimated in React Native\nDESCRIPTION: A complete example showing how to implement a width animation using react-native-reanimated. The component displays a black box that changes width randomly when a button is pressed, demonstrating shared values, animated styles, and timing animations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/animation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Components in React Native\nDESCRIPTION: Demonstrates how to create a custom SVG component using Circle and Rect elements with various properties like height, width, viewBox, stroke, and fill colors\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\n\nexport default function SvgComponent(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Screen Capture Functions and Event Listeners in React Native\nDESCRIPTION: Comprehensive example demonstrating how to use screen capture functions including permission handling, screenshot event listeners, and toggle controls for screen capture protection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  const hasPermissions = async () => {\n    const { status } = await ScreenCapture.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  useEffect(() => {\n    let subscription;\n\n    const addListenerAsync = async () => {\n      if (await hasPermissions()) {\n        subscription = ScreenCapture.addScreenshotListener(() => {\n          alert('Thanks for screenshotting my beautiful app 😊');\n        });\n      } else {\n        console.error('Permissions needed to subscribe to screenshot events are missing!');\n      }\n    };\n    addListenerAsync();\n\n    return () => {\n      subscription?.remove();\n    };\n  }, []);\n\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-in Button in React Native\nDESCRIPTION: Complete React Native component implementation showing Apple Sign-in button integration with error handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n            });\n            // signed in\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Type Checking in tsconfig.json\nDESCRIPTION: Basic TypeScript configuration to enable strict type checking in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Location with expo-location in React Native (JSX)\nDESCRIPTION: A React Native functional component example using `expo-location`. It requests foreground location permissions using `requestForegroundPermissionsAsync` and fetches the current device location with `getCurrentPositionAsync`. The component displays the location data or an error message. It depends on `react`, `react-native`, `expo-location`, and `expo-constants` (implicitly via Snack dependencies). Note the platform check for Android emulators.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\n/* @hide */\nimport * as Device from 'expo-device';\n/* @end */\nimport * as Location from 'expo-location';\n\nexport default function App() {\n  const [location, setLocation] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      /* @hide */\n      if (Platform.OS === 'android' && !Device.isDevice) {\n        setErrorMsg(\n          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'\n        );\n        return;\n      }\n      /* @end */\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setLocation(location);\n    })();\n  }, []);\n\n  let text = 'Waiting..';\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-local-authentication Plugin in app.json (JSON)\nDESCRIPTION: Example configuration for the `expo-local-authentication` plugin within an Expo project's `app.json` or `app.config.js`. It demonstrates how to set the iOS-specific `faceIDPermission` message, which is displayed when the app requests Face ID access. This configuration is necessary when using Expo's config plugin system (e.g., with EAS Build or `npx expo run`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/local-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json app.json\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-local-authentication\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\n        }\n      ]\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using IcoMoon Icons in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use custom IcoMoon icons in a React Native app using Expo. It uses the createIconSetFromIcoMoon method and the useFonts hook to load and render custom icons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useFonts } from 'expo-font';\nimport createIconSetFromIcoMoon from '@expo/vector-icons/createIconSetFromIcoMoon';\n\nconst Icon = createIconSetFromIcoMoon(\n  require('./assets/icomoon/selection.json'),\n  'IcoMoon',\n  'icomoon.ttf'\n);\n\nexport default function App() {\n  const [fontsLoaded] = useFonts({\n    IcoMoon: require('./assets/icomoon/icomoon.ttf'),\n  });\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Icon name=\"pacman\" size={50} color=\"red\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Events in React Native\nDESCRIPTION: This example demonstrates how to listen for keyboard events, update component state, and conditionally render a button to dismiss the keyboard. It uses the Keyboard module from React Native.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Keyboard, View, Button, TextInput } from 'react-native';\n\nexport default function HomeScreen() {\n  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);\n\n  useEffect(() => {\n    const showSubscription = Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n    const hideSubscription = Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n\n    return () => {\n      showSubscription.remove();\n    };\n  }, []);\n\n  const handleKeyboardShow = event => {\n    setIsKeyboardVisible(true);\n  };\n\n  const handleKeyboardHide = event => {\n    setIsKeyboardVisible(false);\n  };\n\n  return (\n    <View>\n      {isKeyboardVisible && <Button title=\"Dismiss keyboard\" onPress={Keyboard.dismiss} />}\n      <TextInput placeholder=\"Type here...\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Fingerprint for Expo Updates\nDESCRIPTION: Command to generate a fingerprint hash for Expo updates. This hash is used as the runtime version for automatic versioning in continuous deployment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/continuous-deployment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo-updates fingerprint:generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Tracking in Expo Router Layout\nDESCRIPTION: A TypeScript React component that implements screen tracking analytics in an Expo Router layout. The component uses usePathname and useGlobalSearchParams hooks to track route changes and pass them to an analytics provider. It serves as the root layout component that wraps all child routes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/screen-tracking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { usePathname, useGlobalSearchParams, Slot } from 'expo-router';\n\nexport default function Layout() {\n  const pathname = usePathname();\n  const params = useGlobalSearchParams();\n\n  // Track the location in your analytics provider here.\n  useEffect(() => {\n    analytics.track({ pathname, params });\n  }, [pathname, params]);\n\n  // Export all the children routes in the most basic way.\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keycloak OpenID Authentication in Expo\nDESCRIPTION: Implementation of Keycloak authentication using auto-discovery and PKCE flow. Shows how to set up OAuth authentication with Keycloak realms and handle the authentication flow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest, useAutoDiscovery } from 'expo-auth-session';\nimport { Button, Text, View } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nexport default function App() {\n  const discovery = useAutoDiscovery('https://YOUR_KEYCLOAK/realms/YOUR_REALM');\n\n  const [request, result, promptAsync] = useAuthRequest(\n    {\n      clientId: 'YOUR_CLIENT_NAME',\n      redirectUri: makeRedirectUri({\n        scheme: 'YOUR_SCHEME'\n      }),\n      scopes: ['openid', 'profile'],\n    },\n    discovery\n  );\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Button title=\"Login!\" disabled={!request} onPress={() => promptAsync()} />\n      {result && <Text>{JSON.stringify(result, null, 2)}</Text>}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Screen Capture using Hook in React Native\nDESCRIPTION: This example demonstrates how to use the `usePreventScreenCapture` hook from the `expo-screen-capture` library within a React Native functional component. As long as this component is mounted, screen capture and recording will be prevented on Android. It requires the `expo-screen-capture` dependency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SplashScreen Control in React Native App\nDESCRIPTION: A complete example showing how to keep the splash screen visible while loading app resources like fonts and making API calls, then hiding it once the app is ready to render. Includes state management for app readiness and layout handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/splash-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Please remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! 👋</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Image to ImageBackground in React Native\nDESCRIPTION: Example of how to replace nested components inside Image with the ImageBackground component, which is required when upgrading to SDK 23. This demonstrates the proper pattern for using an image as a background.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<View style={styles.container}>\n  <ImageBackground\n    source={require('./path/to/image.png')}\n    style={{\n      width: 280,\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 30,\n    }}>\n    <Text style={{ color: '#fff', fontSize: 18 }}>\n      The universe... what a concept. You know, the universe is a little bit like the human hand.\n      For example, you have groundmen's center right here and then you have undiscovered worlds and\n      uh, um and sector 8 and up here is tittleman's crest so you can kinda picture it's a little\n      bit like a leaf or uhh, umm, it's not a bowl.\n    </Text>\n  </ImageBackground>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Recording Audio with Expo Audio in React Native\nDESCRIPTION: This example shows how to record audio using the Audio module from expo-av. It demonstrates requesting audio recording permissions, configuring the audio mode, starting and stopping a recording, and accessing the resulting audio file URI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = useState();\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\n\n  async function startRecording() {\n    try {\n      if (permissionResponse.status !== 'granted') {\n        console.log('Requesting permission..');\n        await requestPermission();\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      });\n\n      console.log('Starting recording..');\n      const { recording } = await Audio.Recording.createAsync(\n        Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    await recording.stopAndUnloadAsync();\n    await Audio.setAudioModeAsync(\n      {\n        allowsRecordingIOS: false,\n      }\n    );\n    const uri = recording.getURI();\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Custom Notification Sound and Channel on Android - Expo SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet specifically demonstrates how to manually configure a custom notification channel on Android (API 26+, 8.0+) using Expo's Notifications API and how to schedule a notification using the configured channel. Dependencies include expo-notifications and ensuring that the custom sound file resides at 'android/app/src/main/res/raw/'. Key parameters are the channel ID ('new-emails'), sound filename, notification content, and Android importance level. Inputs are the definition of the channel and notification scheduling options, while outputs include persistent channel setup and notifications with custom sound.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the notification channel\\nawait Notifications.setNotificationChannelAsync('new-emails', {\\n  name: 'E-mail notifications',\\n  importance: Notifications.AndroidImportance.HIGH,\\n  sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below\\n});\\n\\n// Eg. schedule the notification\\nawait Notifications.scheduleNotificationAsync({\\n  content: {\\n    title: \\\"You've got mail! 📬\\\",\\n    body: 'Open the notification to read them all',\\n    sound: 'email-sound.wav', // <- for Android below 8.0\\n  },\\n  trigger: {\\n    seconds: 2,\\n    channelId: 'new-emails', // <- for Android 8.0+, see definition above\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Handling URL Links with Linking.useURL in React Native\nDESCRIPTION: This React Native code snippet demonstrates how to use the Linking.useURL hook from expo-linking to observe and display the URL that launched the app. It's a simple component that renders the current URL as text.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport { Text } from 'react-native';\n\nexport default function App() {\n  const url = Linking.useURL();\n\n  return <Text>URL: {url}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reddit OAuth Authentication in Expo\nDESCRIPTION: Example of implementing Reddit OAuth2 authentication flow. Shows how to handle Reddit-specific redirect URIs and authentication endpoints.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: 'https://www.reddit.com/api/v1/authorize.compact',\n  tokenEndpoint: 'https://www.reddit.com/api/v1/access_token',\n};\n\nexport default function App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      scopes: ['identity'],\n      redirectUri: makeRedirectUri({\n        native: 'your.app://redirect',\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Scheme Support in Expo App\nDESCRIPTION: A minimal example demonstrating how to use useColorScheme to adapt the UI based on the current color scheme, including styling and StatusBar configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, StyleSheet, View, useColorScheme } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n\n  const themeTextStyle = colorScheme === 'light' ? styles.lightThemeText : styles.darkThemeText;\n  const themeContainerStyle =\n    colorScheme === 'light' ? styles.lightContainer : styles.darkContainer;\n\n  return (\n    <View style={[styles.container, themeContainerStyle]}>\n      <Text style={[styles.text, themeTextStyle]}>Color scheme: {colorScheme}</Text>\n      <StatusBar />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 20,\n  },\n  lightContainer: {\n    backgroundColor: '#d0d0c0',\n  },\n  darkContainer: {\n    backgroundColor: '#242c40',\n  },\n  lightThemeText: {\n    color: '#242c40',\n  },\n  darkThemeText: {\n    color: '#d0d0c0',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tracking Transparency in React Native\nDESCRIPTION: Example React Native component demonstrating how to request tracking permissions using expo-tracking-transparency. Shows usage of requestTrackingPermissionsAsync() in a useEffect hook.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { Text, StyleSheet, View } from 'react-native';\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await requestTrackingPermissionsAsync();\n      if (status === 'granted') {\n        console.log('Yay! I have user permission to track data');\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Tracking Transparency Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Styles with react-native-reanimated in React Native (JSX)\nDESCRIPTION: This code demonstrates how to animate the width of a box using react-native-reanimated in a functional React Native component. It leverages hooks like useSharedValue and useAnimatedStyle, and timing/easing utilities, with dependencies on react-native and react-native-reanimated. The example renders a box whose width changes to a random value between 0 and 350 when a button is pressed, using a 500ms custom Bézier timing animation; key parameters include the animation duration, easing function, and width value. Inputs: user button press. Outputs: animated UI transition. Limitation: Works best with Hermes JS engine for debugging, as noted in documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Checking and Applying Updates with Expo Updates - React Native (JavaScript)\nDESCRIPTION: This snippet demonstrates how to manually check for application updates at runtime using the expo-updates library within a React Native component. It requires expo-updates and react-native as dependencies. The main function, onFetchUpdateAsync, asynchronously checks for updates, fetches them if available, and reloads the app to apply the update, with error handling for fetch failures. Inputs include user pressing a button; outputs are potentially downloading and applying new updates, or showing an error alert if fetching fails. Usage of configuration options like checkAutomatically=NEVER is required to disable default update checks.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: React Native (JavaScript)\nCODE:\n```\nimport { View, Button } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nfunction App() {\n  async function onFetchUpdateAsync() {\n    try {\n      const update = await Updates.checkForUpdateAsync();\n\n      if (update.isAvailable) {\n        await Updates.fetchUpdateAsync();\n        await Updates.reloadAsync();\n      }\n    } catch (error) {\n      // You can also add an alert() to see the error message in case of an error when fetching updates.\n      alert(`Error fetching latest Expo update: ${error}`);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"Fetch update\" onPress={onFetchUpdateAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FaceDetector Module in JavaScript\nDESCRIPTION: This snippet shows how to import the FaceDetector module from expo-face-detector package. This import statement is typically used at the beginning of a file that utilizes face detection functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/facedetector.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as FaceDetector from 'expo-face-detector';\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Stripe urlScheme in Expo JavaScript\nDESCRIPTION: This JavaScript snippet shows how to dynamically determine the correct `urlScheme` needed when initializing Stripe (`initStripe`) to handle payment redirects correctly. It utilizes `expo-linking`'s `createURL` method and `expo-constants`' `appOwnership` property to generate the appropriate scheme for both the Expo Go development environment and standalone production builds, ensuring redirects work reliably.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Setting up Root Layout with SessionProvider in Expo Router\nDESCRIPTION: This snippet shows how to set up the root layout in Expo Router, wrapping the entire app with the SessionProvider to provide authentication context to all routes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'expo-router';\nimport { SessionProvider } from '../ctx';\n\nexport default function Root() {\n  // Set up the auth context and render our layout inside of it.\n  return (\n    <SessionProvider>\n      <Slot />\n    </SessionProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Media Library Module in JavaScript\nDESCRIPTION: Shows how to import the entire expo-media-library module for use in JavaScript/React Native projects. This is a prerequisite for accessing all MediaLibrary APIs and hooks, including permissions and asset management features. Place this import at the top of your JS files where MediaLibrary APIs are required.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Authentication Flow in React Native\nDESCRIPTION: Shows implementation of OAuth2 authentication flow for calendar integration, including handling authentication responses and token exchange. The code manages user authentication state and provides UI for initiating the auth flow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nresponse.params.error_description || \"something went wrong\"\n        );\n      }\n      if (response.type === \"success\") {\n        /* @info Exchange Received Code for Access Token */\n        exchange( response.params.code);\n        /* @end */\n      }\n    }\n  }, [discovery, request, response]);\n\n  return (\n  <SafeAreaView>\n      <View>\n        <Text>0Auth2</Text>\n        <Button\n          title=\"Connect to Calendly\"\n          onPress={() => {\n            /* @info Prompt the user to authenticate in a user interaction or web browsers will block it. */\n            promptAsync();\n            /* @end */\n          }}\n        />\n        <Text>AuthTokens: {JSON.stringify(authTokens)}</Text>\n      </View>\n  </SafeAreaView>\n  )\n```\n\n----------------------------------------\n\nTITLE: Using useKeepAwake Hook with expo-keep-awake in React Native - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to use the useKeepAwake hook from the expo-keep-awake package within a functional React Native component. As long as the component is mounted, the device screen will be prevented from sleeping due to idle timeout. It requires the expo-keep-awake and react-native dependencies. The hook does not take parameters and does not return a value; its sole purpose is to side-effectively keep the screen awake while the component is active.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  /* @info As long as this component is mounted, the screen will not turn off from being idle. */\n  useKeepAwake();\n  /* @end */\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Modal with iOS Status Bar Configuration\nDESCRIPTION: Shows how to configure the status bar appearance for iOS modal screens using Platform-specific code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform, StyleSheet, Text, View } from 'react-native';\n\nexport default function Modal() {\n  return (\n    <View style={styles.container}>\n      <Text>Modal screen</Text>\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding FileSystem.uploadAsync method\nDESCRIPTION: Introduces a new uploadAsync method to the FileSystem module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-file-system/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd `FileSystem.uploadAsync` method.\n```\n\n----------------------------------------\n\nTITLE: Configuring a project for EAS Build\nDESCRIPTION: Command to configure an Android or iOS project for use with EAS Build. This sets up the necessary configuration files and prepares the project for building.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Scheduling Notification with Custom Sound on iOS\nDESCRIPTION: This TypeScript snippet demonstrates how to schedule a notification with a custom sound on iOS. It specifies the sound file in the notification content, assuming the sound file has been added to the Xcode project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project via Shell\nDESCRIPTION: Shows the command to create a new React Native project named 'my-app' using the `create-expo-app` tool with the `bare-minimum` template. This sets up a project with Expo SDK support integrated.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Accessing Device Location using expo-location in React Native (JSX)\nDESCRIPTION: Implements a functional React Native component using expo-location to request device geolocation and display it. Employs React hooks for state and side effects, requests permissions, and handles errors. Dependencies: expo-location, react, react-native, (optionally expo-device for device checks). Parameters: none (uses hook state internally). Input: user invokes component in the app. Output: UI displays device location as JSON or relevant errors/permission prompts. Limitation: needs device/emulator location enabled; example disables on Android emulators in Snack.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { Platform, Text, View, StyleSheet } from 'react-native';\\n/* @hide */\\nimport * as Device from 'expo-device';\\n/* @end */\\nimport * as Location from 'expo-location';\\n\\nexport default function App() {\\n  const [location, setLocation] = useState(null);\\n  const [errorMsg, setErrorMsg] = useState(null);\\n\\n  useEffect(() => {\\n    (async () => {\\n      /* @hide */\\n      if (Platform.OS === 'android' && !Device.isDevice) {\\n        setErrorMsg(\\n          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'\\n        );\\n        return;\\n      }\\n      /* @end */\\n      let { status } = await Location.requestForegroundPermissionsAsync();\\n      if (status !== 'granted') {\\n        setErrorMsg('Permission to access location was denied');\\n        return;\\n      }\\n\\n      let location = await Location.getCurrentPositionAsync({});\\n      setLocation(location);\\n    })();\\n  }, []);\\n\\n  let text = 'Waiting..';\\n  if (errorMsg) {\\n    text = errorMsg;\\n  } else if (location) {\\n    text = JSON.stringify(location);\\n  }\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.paragraph}>{text}</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n    padding: 20,\\n  },\\n  paragraph: {\\n    fontSize: 18,\\n    textAlign: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Redirects with Expo Router Redirect Component\nDESCRIPTION: Demonstrates how to use the Redirect component for conditional navigation based on authentication state. This pattern is useful for protecting routes and implementing auth flows.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/redirects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'react-native';\nimport { Redirect } from 'expo-router';\n\nexport default function Page() {\n  const { user } = useAuth();\n\n  if (!user) {\n    return <Redirect href=\"/login\" />;\n  }\n\n  return (\n    <View>\n      <Text>Welcome Back!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rewriting Incoming Native Deep Links with redirectSystemPath in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the redirectSystemPath function in a +native-intent.tsx file to process and rewrite incoming URLs in native apps. It includes error handling and integration with a third-party service.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/native-intent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ThirdPartyService from 'third-party-sdk';\n\nexport function redirectSystemPath({ path, initial }) {\n  try {\n    if (initial) {\n      // While the parameter is called `path` there is no guarantee that this is a path or a valid URL\n      const url = new URL(path, 'myapp://app.home');\n      // Detection of third-party URLs will change based on the provider\n      if (url.hostname === '<third-party-provider-hostname>') {\n        return ThirdPartyService.processReferringUrl(url).catch(() => {\n          // Something went wrong\n          return '/unexpected-error';\n        });\n      }\n      return path;\n    }\n    return path;\n  } catch {\n    // Do not crash inside this function! Instead you should redirect users\n    // to a custom route to handle unexpected errors, where they are able to report the incident\n    return '/unexpected-error';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Doctor for Project Diagnostics\nDESCRIPTION: Command to run Expo Doctor in your project's root directory to diagnose issues in your Expo project, analyzing app config, dependencies, and overall project health.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/tools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo-doctor\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationAction Interface in TypeScript\nDESCRIPTION: Defines an interface for actionable notification buttons. This includes properties for identification, display text, text input options, and behavior flags that control how the action operates when selected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationAction {\n  identifier: string;\n  buttonTitle: string;\n  textInput?: {\n    submitButtonTitle: string;\n    placeholder: string;\n  };\n  options: {\n    isDestructive?: boolean;\n    isAuthenticationRequired?: boolean;\n    opensAppToForeground?: boolean;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendly OAuth Flow in React Native\nDESCRIPTION: This snippet sets up the Calendly OAuth flow using expo-auth-session. It includes the authorization request, token exchange, and state management for the received tokens. The code uses PKCE for enhanced security and handles both native and web redirects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\nimport {\n  makeRedirectUri,\n  useAuthRequest,\n  exchangeCodeAsync,\n} from \"expo-auth-session\";\nimport { useEffect, useState } from \"react\";\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: \"https://auth.calendly.com/oauth/authorize\",\n  tokenEndpoint: \"https://auth.calendly.com/oauth/token\",\n};\n\nexport default function App() {\n  const [authTokens, setAuthTokens] = useState({access_token: \"\", refresh_token: \"\"});\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: process.env.EXPO_PUBLIC_Client_ID,\n      usePKCE: true,\n      redirectUri: makeRedirectUri({\n        native: \"myapp://\",\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    const exchange = async (exchangeTokenReq) => {\n      try {\n        const exchangeTokenResponse = await exchangeCodeAsync(\n          {\n            clientId: process.env.EXPO_PUBLIC_Client_ID,\n            code: exchangeTokenReq,\n            redirectUri: makeRedirectUri({\n              native: \"myapp://\",\n            }),\n            extraParams: {\n              code_verifier: request.codeVerifier,\n            },\n          },\n          discovery\n        );\n        setAuthTokens(exchangeTokenResponse);\n      } catch (error) {\n        console.error(\"error\", error);\n      }\n    };\n\n    if (response) {\n      if (response.error) {\n        console.error(\n```\n\n----------------------------------------\n\nTITLE: React Component with SQLite Context Hook\nDESCRIPTION: React component implementation using SQLite context hook for database operations within components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';\nimport { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n\nexport function Header() {\n  const db = useSQLiteContext();\n  const [version, setVersion] = useState('');\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(\n        'SELECT sqlite_version()'\n      );\n      setVersion(result['sqlite_version()']);\n    }\n    setup();\n  }, []);\n  return (\n    <View style={styles.headerContainer}>\n      <Text style={styles.headerText}>SQLite version: {version}</Text>\n    </View>\n  );\n}\n\ninterface Todo {\n  value: string;\n  intValue: number;\n}\n\nexport function Content() {\n  const db = useSQLiteContext();\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');\n      setTodos(result);\n    }\n    setup();\n  }, []);\n\n  return (\n    <View style={styles.contentContainer}>\n      {todos.map((todo, index) => (\n        <View style={styles.todoItemContainer} key={index}>\n          <Text>{`${todo.intValue} - ${todo.value}`}</Text>\n        </View>\n      ))}\n    </View>\n  );\n}\n\nasync function migrateDbIfNeeded(db: SQLiteDatabase) {\n  const DATABASE_VERSION = 1;\n  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(\n    'PRAGMA user_version'\n  );\n  if (currentDbVersion >= DATABASE_VERSION) {\n    return;\n  }\n  if (currentDbVersion === 0) {\n    await db.execAsync(`\nPRAGMA journal_mode = 'wal';\nCREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\n`);\n    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);\n    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);\n    currentDbVersion = 1;\n  }\n  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipboard Operations in React Native with Expo\nDESCRIPTION: A complete example demonstrating how to implement clipboard copy and paste functionality in a React Native application using expo-clipboard. The component includes buttons to copy text to clipboard and retrieve copied text, along with styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    await Clipboard.setStringAsync('hello world');\n  };\n\n  const fetchCopiedText = async () => {\n    const text = await Clipboard.getStringAsync();\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Media Library Permissions in React Native\nDESCRIPTION: Code for importing expo-media-library and implementing the permission request flow using the usePermissions hook to ask for access to the device's media library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n\n// ...rest of the code remains same\n\nexport default function App() {\n  const [status, requestPermission] = MediaLibrary.usePermissions();\n  // ...rest of the code remains same\n\n  if (status === null) {\n    requestPermission();\n  }\n\n  // ...rest of the code remains same\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating with Route Parameters in Expo Router\nDESCRIPTION: Shows different methods of navigation and route parameter manipulation using router.setParams, router.push, and Link component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { router, useLocalSearchParams, Link } from 'expo-router';\n\nexport default function User() {\n  // All three of these will change the route parameter `user`, and add a new user page.\n  return (\n    <>\n      <Text onPress={() => router.setParams({ user: 'evan' })}>Go to Evan</Text>\n      <Text onPress={() => router.push('/mark')}>Go to Mark</Text>\n      <Link href=\"/charlie\">Go to Charlie</Link>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating and Flipping Images with Expo ImageManipulator in JSX\nDESCRIPTION: This code demonstrates a React Native component that loads a local image asset, displays it, and allows the user to rotate it 90 degrees and flip it vertically via a button press. It uses expo-asset for image loading and expo-image-manipulator for editing, relying on manipulateAsync to process the image. Key parameters include the URI of the image, a transformation array specifying rotation and flip, and output format/settings; inputs are local images and outputs are manipulated image objects shown in the UI. The dependencies required are 'expo-asset', 'expo-image-manipulator', 'react', and 'react-native', and all images must be available in the file system. This snippet is suitable for projects needing interactive, in-app image editing functionality with direct user feedback.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { Button, Image, StyleSheet, View } from 'react-native';\\nimport { Asset } from 'expo-asset';\\nimport { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';\\n\\nexport default function App() {\\n  const [ready, setReady] = useState(false);\\n  const [image, setImage] = useState(null);\\n\\n  useEffect(() => {\\n    (async () => {\\n      const image = Asset.fromModule(require('./assets/snack-icon.png'));\\n      await image.downloadAsync();\\n      setImage(image);\\n      setReady(true);\\n    })();\\n  }, []);\\n\\n  const _rotate90andFlip = async () => {\\n    const manipResult = await manipulateAsync(\\n      image.localUri || image.uri,\\n      [{ rotate: 90 }, { flip: FlipType.Vertical }],\\n      { compress: 1, format: SaveFormat.PNG }\\n    );\\n    setImage(manipResult);\\n  };\\n\\n  const _renderImage = () => (\\n    <View style={styles.imageContainer}>\\n      <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />\\n    </View>\\n  );\\n\\n  return (\\n    <View style={styles.container}>\\n      {ready && image && _renderImage()}\\n      <Button title=\\\"Rotate and Flip\\\" onPress={_rotate90andFlip} />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n  },\\n  imageContainer: {\\n    marginVertical: 20,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  image: {\\n    width: 300,\\n    height: 300,\\n    resizeMode: 'contain',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Barometer Usage with React Native and Expo\nDESCRIPTION: A complete React Native component that demonstrates how to use the Barometer sensor from expo-sensors. It shows how to subscribe to barometer readings, display pressure data and relative altitude (iOS only), and toggle the listener on and off.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/barometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { Barometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggleListener = () => {\n    subscription ? unsubscribe() : subscribe();\n  };\n\n  const subscribe = () => {\n    setSubscription(Barometer.addListener(setData));\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  return (\n    <View style={styles.wrapper}>\n      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>\n      <Text>Pressure: {pressure} hPa</Text>\n      <Text>\n        Relative Altitude:{' '}\n        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}\n      </Text>\n      <TouchableOpacity onPress={toggleListener} style={styles.button}>\n        <Text>Toggle listener</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n    marginTop: 15,\n  },\n  wrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In Screen in Expo Router\nDESCRIPTION: This snippet implements a sign-in screen that allows users to authenticate. It uses the useSession hook to access the signIn function and router for navigation after successful sign-in.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { router } from 'expo-router';\nimport { Text, View } from 'react-native';\n\nimport { useSession } from '../ctx';\n\nexport default function SignIn() {\n  const { signIn } = useSession();\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text\n        onPress={() => {\n          signIn();\n          // Navigate after signing in. You may want to tweak this to ensure sign-in is\n          // successful before navigating.\n          router.replace('/');\n        }}>\n        Sign In\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Audio with Expo AV in React Native\nDESCRIPTION: Example demonstrating audio recording functionality using expo-av Recording API. Includes permission handling, recording configuration, and proper cleanup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/audio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [recording, setRecording] = useState();\n  const [permissionResponse, requestPermission] = Audio.usePermissions();\n\n  async function startRecording() {\n    try {\n      if (permissionResponse.status !== 'granted') {\n        console.log('Requesting permission..');\n        await requestPermission();\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      });\n\n      console.log('Starting recording..');\n      const { recording } = await Audio.Recording.createAsync(\n        Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      setRecording(recording);\n      console.log('Recording started');\n    } catch (err) {\n      console.error('Failed to start recording', err);\n    }\n  }\n\n  async function stopRecording() {\n    console.log('Stopping recording..');\n    setRecording(undefined);\n    await recording.stopAndUnloadAsync();\n    await Audio.setAudioModeAsync({\n      allowsRecordingIOS: false,\n    });\n    const uri = recording.getURI();\n    console.log('Recording stopped and stored at', uri);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={recording ? 'Stop Recording' : 'Start Recording'}\n        onPress={recording ? stopRecording : startRecording}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Error Boundary Implementation in Expo Router\nDESCRIPTION: Implementation of a custom error boundary component that handles component-level errors. Includes error message display and retry functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/error-handling.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'react-native';\nimport { type ErrorBoundaryProps } from 'expo-router';\n\nexport function ErrorBoundary({ error, retry }: ErrorBoundaryProps) {\n  return (\n    <View style={{ flex: 1, backgroundColor: \"red\" }}>\n      <Text>{error.message}</Text>\n      <Text onPress={retry}>Try Again?</Text>\n    </View>\n  );\n}\n\nexport default function Page() { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing IdentityServer 4 Authentication in Expo\nDESCRIPTION: Example implementation of OAuth2/OpenID Connect authentication using IdentityServer 4 in an Expo application. Uses expo-auth-session for handling the authentication flow with auto discovery support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport * as AuthSession from 'expo-auth-session';\nimport * as WebBrowser from 'expo-web-browser';\n\nWebBrowser.maybeCompleteAuthSession();\nconst redirectUri = AuthSession.makeRedirectUri();\n\nexport default function App() {\n  const discovery = AuthSession.useAutoDiscovery('https://demo.identityserver.io');\n  const [request, result, promptAsync] = AuthSession.useAuthRequest(\n    {\n      clientId: 'native.code',\n      redirectUri,\n      scopes: ['openid', 'profile', 'email', 'offline_access'],\n    },\n    discovery\n  );\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Button title=\"Login!\" disabled={!request} onPress={() => promptAsync()} />\n      {result && <Text>{JSON.stringify(result, null, 2)}</Text>}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cached Giphy Files in Expo FileSystem (TypeScript)\nDESCRIPTION: Provides TypeScript functions to manage a local cache of Giphy GIFs using `expo-file-system`. It includes ensuring the cache directory exists, downloading multiple GIFs, fetching a single GIF (downloading if not cached), getting a shareable content URI, and deleting the entire GIF cache directory. It uses the app's cache directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```js\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Media Library Plugin in app.json (JSON)\nDESCRIPTION: Sets up the expo-media-library config plugin in the app.json file to manage media library permissions on iOS and Android. The configuration adds custom permission descriptions for accessing and saving photos on iOS, as well as enabling access to media location on Android. These properties are applied at build time and require a new app binary for changes to take effect. Make sure to use EAS Build or appropriate Expo commands to apply plugin changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-media-library\\\",\\n        {\\n          \\\"photosPermission\\\": \\\"Allow $(PRODUCT_NAME) to access your photos.\\\",\\n          \\\"savePhotosPermission\\\": \\\"Allow $(PRODUCT_NAME) to save photos.\\\",\\n          \\\"isAccessMediaLocationEnabled\\\": true\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of expo-brightness in React Native\nDESCRIPTION: Demonstrates requesting permissions and setting system brightness using the expo-brightness library within a React Native functional component. It uses the useEffect hook to asynchronously request permissions when the component mounts and, if granted, sets the system brightness to maximum (1).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Brightness from 'expo-brightness';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        Brightness.setSystemBrightnessAsync(1);\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Brightness Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Importing CameraView Component\nDESCRIPTION: Import statement for the CameraView component from the expo-camera/next package, which is the main entry point for using the camera functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CameraView } from 'expo-camera/next';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo FileSystem Module\nDESCRIPTION: This code snippet demonstrates how to import the expo-file-system module in a JavaScript or TypeScript application. This is the basic import statement required before using any of the FileSystem API features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n```\n\n----------------------------------------\n\nTITLE: Using SecureStore in a React Native Expo App (JSX)\nDESCRIPTION: Provides a full React Native component demonstrating how to securely save and retrieve key-value pairs using expo-secure-store. The sample app includes text input fields and buttons for storing and fetching values, utilizing useState hooks for managing state. Dependencies include expo-secure-store, react-native elements, and proper permissions set via configuration. Inputs are user-provided keys and values, and outputs are secure storage and alerts displaying retrieved values. The snippet is subject to the 2048-byte value size limit and requires physical device or simulator with appropriate platform support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\\nimport * as SecureStore from 'expo-secure-store';\\n\\nasync function save(key, value) {\\n  await SecureStore.setItemAsync(key, value);\\n}\\n\\nasync function getValueFor(key) {\\n  let result = await SecureStore.getItemAsync(key);\\n  if (result) {\\n    alert(\"\\ud83d\\udd10 Here's your value \\ud83d\\udd10 \\n\" + result);\\n  } else {\\n    alert('No values stored under that key.');\\n  }\\n}\\n\\nexport default function App() {\\n  const [key, onChangeKey] = useState('Your key here');\\n  const [value, onChangeValue] = useState('Your value here');\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\\n      {/* @hide Add some TextInput components... */}\\n\\n      <TextInput\\n        style={styles.textInput}\\n        clearTextOnFocus\\n        onChangeText={text => onChangeKey(text)}\\n        value={key}\\n      />\\n      <TextInput\\n        style={styles.textInput}\\n        clearTextOnFocus\\n        onChangeText={text => onChangeValue(text)}\\n        value={value}\\n      />\\n      {/* @end */}\\n      <Button\\n        title=\"Save this key/value pair\"\\n        onPress={() => {\\n          save(key, value);\\n          onChangeKey('Your key here');\\n          onChangeValue('Your value here');\\n        }}\\n      />\\n      <Text style={styles.paragraph}>\\ud83d\\udd10 Enter your key \\ud83d\\udd10</Text>\\n      <TextInput\\n        style={styles.textInput}\\n        onSubmitEditing={event => {\\n          getValueFor(event.nativeEvent.text);\\n        }}\\n        placeholder=\"Enter the key for the value you want to get\"\\n      />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    paddingTop: 10,\\n    backgroundColor: '#ecf0f1',\\n    padding: 8,\\n  },\\n  paragraph: {\\n    marginTop: 34,\\n    margin: 24,\\n    fontSize: 18,\\n    fontWeight: 'bold',\\n    textAlign: 'center',\\n  },\\n  textInput: {\\n    height: 35,\\n    borderColor: 'gray',\\n    borderWidth: 0.5,\\n    padding: 4,\\n  },\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Loading External URL in WebView with React Native\nDESCRIPTION: This snippet shows how to implement a WebView component that loads an external URL (https://expo.dev). It includes basic styling with flex layout and margin adjustments for the status bar height.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/webview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\n/* @hide */\nimport { StyleSheet } from 'react-native';\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      source={{ uri: 'https://expo.dev' }}\n    />\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Video Playback with expo-video (React Native)\nDESCRIPTION: This JSX snippet shows a basic React Native component using `expo-video` to play a video from a remote URL. It utilizes the `useVideoPlayer` hook to initialize and control the player (setting loop, playing initially) and the `VideoView` component to display the video. State management (`isPlaying`) and an event listener (`playingChange`) are used to toggle a Play/Pause button based on the player's status. Dependencies include `react`, `react-native`, and `expo-video`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useVideoPlayer, VideoView } from 'expo-video';\nimport { useEffect, useRef, useState } from 'react';\nimport { PixelRatio, StyleSheet, View, Button } from 'react-native';\n\nconst videoSource =\n  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';\n\nexport default function VideoScreen() {\n  const ref = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(true);\n  const player = useVideoPlayer(videoSource, player => {\n    player.loop = true;\n    player.play();\n  });\n\n  useEffect(() => {\n    const subscription = player.addListener('playingChange', isPlaying => {\n      setIsPlaying(isPlaying);\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, [player]);\n\n  return (\n    <View style={styles.contentContainer}>\n      <VideoView\n        ref={ref}\n        style={styles.video}\n        player={player}\n        allowsFullscreen\n        allowsPictureInPicture\n      />\n      <View style={styles.controlsContainer}>\n        <Button\n          title={isPlaying ? 'Pause' : 'Play'}\n          onPress={() => {\n            if (isPlaying) {\n              player.pause();\n            } else {\n              player.play();\n            }\n            setIsPlaying(!isPlaying);\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 50,\n  },\n  video: {\n    width: 350,\n    height: 275,\n  },\n  controlsContainer: {\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the SQLite Module with expo-sqlite in JavaScript\nDESCRIPTION: Demonstrates importing the SQLite module from expo-sqlite in a JavaScript/TypeScript context to access the SQLite database API. This is a required initial step for enabling database operations in Expo/React Native apps. No additional parameters are required; expo-sqlite must be installed as a dependency for this import to work.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n```\n\n----------------------------------------\n\nTITLE: Implementing Expo Settings in React Native Example App\nDESCRIPTION: This snippet demonstrates how to use the Expo Settings module in a React Native app. It shows theme management and listener implementation for theme changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Settings from 'expo-settings';\nimport { useEffect, useState } from 'react';\nimport { Button, Text, View } from 'react-native';\n\nexport default function App() {\n  const [theme, setTheme] = useState<string>(Settings.getTheme());\n\n  useEffect(() => {\n    const subscription = Settings.addThemeListener(({ theme: newTheme }) => {\n      setTheme(newTheme);\n    });\n\n    return () => subscription.remove();\n  }, [setTheme]);\n\n  // Toggle between dark and light theme\n  const nextTheme = theme === 'dark' ? 'light' : 'dark';\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Theme: {Settings.getTheme()}</Text>\n      <Button title={`Set theme to ${nextTheme}`} onPress={() => Settings.setTheme(nextTheme)} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Notifications with Custom Sounds using TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use a custom sound, previously configured via `app.json` or added manually, when setting up a notification channel and scheduling a notification. It uses `Notifications.setNotificationChannelAsync` to define a channel with the sound and `Notifications.scheduleNotificationAsync` to trigger a notification using that sound, referencing the sound file by its base filename.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Push Token Listener with React Hook in TSX\nDESCRIPTION: This example demonstrates how to register a push token listener using a React hook. The listener will be called whenever the push token changes, allowing the app to register the new token with the backend immediately.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport * as Notifications from 'expo-notifications';\n\nimport { registerDevicePushTokenAsync } from '../api';\n\nexport default function App() {\n  React.useEffect(() => {\n    const subscription = Notifications.addPushTokenListener(registerDevicePushTokenAsync);\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous Function in JavaScript\nDESCRIPTION: Demonstrates how to import and use a synchronous native function in JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { requireNativeModule } from 'expo-modules-core';\n\n// Assume that we have named the module \"MyModule\"\nconst MyModule = requireNativeModule('MyModule');\n\nfunction getMessage() {\n  return MyModule.syncFunction('bar');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Okta OpenID Authentication in Expo\nDESCRIPTION: Implementation of Okta authentication using auto-discovery and PKCE flow. Demonstrates how to handle Okta-specific redirect URIs and process authentication responses.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest, useAutoDiscovery } from 'expo-auth-session';\nimport { Button, Platform } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nexport default function App() {\n  const discovery = useAutoDiscovery('https://<OKTA_DOMAIN>.com/oauth2/default');\n  \n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      scopes: ['openid', 'profile'],\n      redirectUri: makeRedirectUri({\n        native: 'com.okta.<OKTA_DOMAIN>:/callback',\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Bar in Stack Navigator\nDESCRIPTION: Demonstrates how to customize the header bar for all routes in a Stack navigator using screenOptions, including styling and custom components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, Stack } from 'expo-router';\nimport { Image, Text, View, StyleSheet } from 'react-native';\n\nfunction LogoTitle() {\n  return (\n    <Image style={styles.image} source={{ uri: 'https://reactnative.dev/img/tiny_logo.png' }} />\n  );\n}\n\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Stack.Screen\n        options={{\n          title: 'My home',\n          headerStyle: { backgroundColor: '#f4511e' },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n          headerTitle: props => <LogoTitle {...props} />,\n        }}\n      />\n      <Text>Home Screen</Text>\n      <Link href={{ pathname: 'details', params: { name: 'Bacon' } }}>Go to Details</Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 50,\n    height: 50,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Safe Area Implementation in Expo React Native\nDESCRIPTION: This minimal working example demonstrates a complete implementation of safe areas using the useSafeAreaInsets hook and SafeAreaProvider in an Expo React Native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HomeScreen() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View style={{ flex: 1, paddingTop: insets.top }}>\n      <Text style={{ fontSize: 28 }}>Content is in safe area.</Text>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <HomeScreen />\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Error Codes for Updates Library in Markdown\nDESCRIPTION: This snippet presents a table of error codes and their descriptions for the Updates library. It covers various scenarios such as disabled updates, reload failures, update check errors, fetch errors, log reading issues, and development client limitations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Code                              | Description                                                                                                                                                                                                                                                    |\n| --------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `ERR_UPDATES_DISABLED`            | A method call was attempted when the Updates library was disabled, or the application was running in development mode                                                                                                                                          |\n| `ERR_UPDATES_RELOAD`              | An error occurred when trying to reload the application and it could not be reloaded. For bare workflow apps, double check the setup steps for this library to ensure it has been installed correctly and the proper native initialization methods are called. |\n| `ERR_UPDATES_CHECK`               | An unexpected error occurred when trying to check for new updates. Check the error message for more information.                                                                                                                                               |\n| `ERR_UPDATES_FETCH`               | An unexpected error occurred when trying to fetch a new update. Check the error message for more information.                                                                                                                                                  |\n| `ERR_UPDATES_READ_LOGS`           | An unexpected error occurred when trying to read log entries. Check the error message for more information.                                                                                                                                                    |\n| `ERR_NOT_AVAILABLE_IN_DEV_CLIENT` | A method is not available when running in a development build. A release build should be used to test this method.                                                                                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-updates Plugin in app.json/app.config.js\nDESCRIPTION: This JSON snippet shows how to configure the `expo-updates` plugin within the `plugins` array in an Expo project's configuration file (`app.json` or `app.config.js`). It specifies the Expo account username required for the updates service. This configuration is typically handled automatically when using EAS CLI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-updates\",\n        {\n          \"username\": \"account-username\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline HTML with WebView in React Native - JavaScript (JSX)\nDESCRIPTION: This snippet demonstrates using the react-native-webview component to render custom inline HTML within a React Native application. The WebView's source prop is set to an object containing a static HTML string. Dependencies required are react-native-webview, expo-constants (for status bar handling), and react-native for styles. The originWhitelist is set to allow any URI, while the HTML content is provided directly. Output is the rendering of the supplied HTML string as native web content inside the app's view hierarchy.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\\nimport Constants from 'expo-constants';\\nimport { StyleSheet } from 'react-native';\\n\\nexport default function App() {\\n  return (\\n    <WebView\\n      style={styles.container}\\n      originWhitelist={['*']}\\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\\n    />\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    marginTop: Constants.statusBarHeight,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Using useKeepAwake Hook in React Native\nDESCRIPTION: Example of using the useKeepAwake hook to prevent the screen from sleeping while a component is mounted. This approach is ideal for components that should keep the screen awake for their entire lifecycle.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  /* @info As long as this component is mounted, the screen will not turn off from being idle. */\n  useKeepAwake();\n  /* @end */\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaInsetsContext.Consumer in JSX\nDESCRIPTION: Demonstrates how to use the SafeAreaInsetsContext.Consumer to access inset data in a component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating After Mount and Loading State in Nested Layout (TypeScript)\nDESCRIPTION: Provides a fixed pattern where navigation (router.push) occurs in a nested layout after the navigation infrastructure in the root has mounted, preventing errors. Dependencies are React, Expo Router, and proper variable setup (e.g., router, isLoading). The layout checks for a loading state and either displays a loading indicator or renders <Slot />; navigation only happens after the layout mounts. Accepts no explicit parameters and is intended for nested routing contexts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout() {\\n  React.useEffect(() => {\\n    router.push('/about');\\n  }, []);\\n\\n  // It is OK to defer rendering this nested layout's content. We couldn't\\n  // defer rendering the root layout's content since a navigation event (the\\n  // redirect) would have been triggered before the root layout's content had\\n  // been mounted.\\n  if (isLoading) {\\n    return <Text>Loading...</Text>;\\n  }\\n\\n  return <Slot />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigation Layout in Expo Router\nDESCRIPTION: This example demonstrates how to implement a stack navigation layout using the Stack component from expo-router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/layouts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BlurView Implementation in React Native\nDESCRIPTION: Demonstrates comprehensive usage of BlurView with different intensity and tint settings, showcasing how to create blurred containers with custom styling and content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { BlurView } from 'expo-blur';\n\nexport default function App() {\n  const text = 'Hello, my container is blurring contents underneath!';\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.background}>\n        {[...Array(20).keys()].map(i => (\n          <View\n            key={`box-${i}`}\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\n          />\n        ))}\n      </View>\n      <BlurView intensity={100} style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\n      </BlurView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  blurContainer: {\n    flex: 1,\n    padding: 20,\n    margin: 16,\n    textAlign: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    borderRadius: 20,\n  },\n  background: {\n    flex: 1,\n    flexWrap: 'wrap',\n    ...StyleSheet.absoluteFill,\n  },\n  box: {\n    width: '25%',\n    height: '20%',\n  },\n  boxEven: {\n    backgroundColor: 'orangered',\n  },\n  boxOdd: {\n    backgroundColor: 'gold',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Expo Settings Module in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the Expo Settings module. It includes functions for getting and setting themes, as well as adding a theme change listener.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventEmitter, Subscription } from 'expo-modules-core';\nimport ExpoSettingsModule from './ExpoSettingsModule';\n\nconst emitter = new EventEmitter(ExpoSettingsModule);\n\nexport type ThemeChangeEvent = {\n  theme: string;\n};\n\nexport function addThemeListener(listener: (event: ThemeChangeEvent) => void): Subscription {\n  return emitter.addListener<ThemeChangeEvent>('onChangeTheme', listener);\n}\n\nexport function getTheme(): string {\n  return ExpoSettingsModule.getTheme();\n}\n\nexport function setTheme(theme: string): void {\n  return ExpoSettingsModule.setTheme(theme);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing playback status updates\nDESCRIPTION: Example of implementing the onPlaybackStatusUpdate callback to monitor and respond to changes in playback state, such as loading, playing, buffering, and completion.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (!playbackStatus.isLoaded) {\n    // Update your UI for the unloaded state\n    if (playbackStatus.error) {\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\n      // Send Expo team the error on Slack or the forums so we can help you debug!\n    }\n  } else {\n    // Update your UI for the loaded state\n\n    if (playbackStatus.isPlaying) {\n      // Update your UI for the playing state\n    } else {\n      // Update your UI for the paused state\n    }\n\n    if (playbackStatus.isBuffering) {\n      // Update your UI for the buffering state\n    }\n\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\n      // The player has just finished playing and will stop. Maybe you want to play something else?\n    }\n\n    /* @hide ... */ /* @end */\n  }\n};\n\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Channel and Scheduling Notification with Custom Sound\nDESCRIPTION: Demonstrates how to set up a notification channel with a custom sound and schedule a notification using that channel. This example uses the custom sound file specified in the app.json configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component in React Native\nDESCRIPTION: Demonstrates the basic usage of the `SafeAreaView` component. It wraps other views and automatically applies padding based on the device's safe area insets. This component requires the `SafeAreaProvider` to be set up higher in the component tree, especially for web targets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic StatusBar Usage in Expo React Native App\nDESCRIPTION: Example showing how to implement a StatusBar component in an Expo app to set light-colored status bar text on a black background. Demonstrates basic styling and StatusBar configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Notice that the status bar has light text!</Text>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating to useSafeAreaInsets Hook for Safe Area insets in React Native/Universal JS\nDESCRIPTION: This universal JavaScript example demonstrates migrating from CSS-based safe area handling to using the useSafeAreaInsets hook. The component reads the individual insets from the hook and applies them to a View, supporting both web and native environments for consistent safe area support. Requires react-native-safe-area-context and React Native.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: WebView Implementation with Inline HTML Content in React Native\nDESCRIPTION: Example demonstrating how to use WebView with inline HTML content. Includes originWhitelist configuration and basic styling with status bar consideration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      originWhitelist={['*']}\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Battery Level Monitoring in React Native with expo-battery\nDESCRIPTION: This snippet demonstrates how to use the useBatteryLevel hook from the expo-battery package to display the current battery level in a React Native component. It renders the battery level in a simple centered view.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Image Component in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the Image component from expo-image in a React Native application. It shows setting up a basic app structure, applying styles, and configuring the Image component with various props like source, placeholder, contentFit, and transition.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={blurhash}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux DevTools Store in Expo\nDESCRIPTION: Configuration setup for Redux DevTools in an Expo application using @reduxjs/toolkit. Disables built-in dev tools and adds the Expo DevTools plugin enhancer.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport devToolsEnhancer from 'redux-devtools-expo-dev-plugin';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: false,\n  enhancers: getDefaultEnhancers => getDefaultEnhancers().concat(devToolsEnhancer()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stack Navigator in Root Layout for Expo Router\nDESCRIPTION: Configures a Stack navigator in the root layout to handle navigation between screens. Includes styling options for the header that will apply to all screens in the stack.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}>\n      <Stack.Screen name=\"index\" />\n      <Stack.Screen name=\"details\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Location Module (JavaScript)\nDESCRIPTION: Shows how to import all Location API functions from the expo-location package for use in a JavaScript/React Native project. Requires expo-location to be installed in the project. Input: none; output: Location object with geolocation methods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Location from 'expo-location';\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notifications with React Navigation\nDESCRIPTION: Implementation of push notification handling using React Navigation's linking configuration. Includes deep link handling and notification response listeners.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n            listener(url);\n          });\n\n          return () => {\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Root Component in a Custom Entry File (React Native, TypeScript/TSX)\nDESCRIPTION: This TypeScript/TSX snippet defines a minimal App component using React Native's View and registers it as the root component by calling registerRootComponent(App). This demonstrates the custom entry setup where the initial render is explicitly controlled. Requires the 'expo' and 'react-native' packages. Inputs: React component; Output: side effect of rendering the provided component as the app's root view.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Registering Background Fetch for Testing on Android\nDESCRIPTION: A function that demonstrates how to configure a background fetch task with a very short interval (1 minute) for testing purposes on Android devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Gyroscope Usage in React Native with Expo\nDESCRIPTION: A complete React Native component demonstrating gyroscope sensor implementation using expo-sensors. The component displays real-time gyroscope data (x, y, z coordinates) and includes controls for starting/stopping the sensor and adjusting update intervals.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Full Android Theme Module Implementation\nDESCRIPTION: Complete Android implementation with SharedPreferences for persistent storage and event emission for theme changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.settings\n\nimport android.content.Context\nimport android.content.SharedPreferences\nimport androidx.core.os.bundleOf\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoSettingsModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Events(\"onChangeTheme\")\n\n    Function(\"setTheme\") { theme: String ->\n      getPreferences().edit().putString(\"theme\", theme).commit()\n      this@ExpoSettingsModule.sendEvent(\"onChangeTheme\", bundleOf(\"theme\" to theme))\n    }\n\n    Function(\"getTheme\") {\n      return@Function getPreferences().getString(\"theme\", \"system\")\n    }\n  }\n\n  private val context\n  get() = requireNotNull(appContext.reactContext)\n\n  private fun getPreferences(): SharedPreferences {\n    return context.getSharedPreferences(context.packageName + \".settings\", Context.MODE_PRIVATE)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling POST Requests with JSON Body\nDESCRIPTION: Process a POST request by parsing the JSON body of the request.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  const body = await request.json();\n\n  return Response.json({ ... });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSQLiteContext() Hook in React Native with expo-sqlite (TSX)\nDESCRIPTION: Demonstrates integrating the expo-sqlite database context into a React Native app by using the SQLiteProvider and useSQLiteContext hook. Includes database initialization, querying metadata, fetching and displaying rows, running migrations, and management of versioning. Dependencies: expo-sqlite, React (with useEffect and useState), and React Native UI components. Key parameters are databaseName and onInit. The hook abstracts away database passing, simplifying data access in nested components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';\nimport { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n\nexport function Header() {\n  const db = useSQLiteContext();\n  const [version, setVersion] = useState('');\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(\n        'SELECT sqlite_version()'\n      );\n      setVersion(result['sqlite_version()']);\n    }\n    setup();\n  }, []);\n  return (\n    <View style={styles.headerContainer}>\n      <Text style={styles.headerText}>SQLite version: {version}</Text>\n    </View>\n  );\n}\n\ninterface Todo {\n  value: string;\n  intValue: number;\n}\n\nexport function Content() {\n  const db = useSQLiteContext();\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');\n      setTodos(result);\n    }\n    setup();\n  }, []);\n\n  return (\n    <View style={styles.contentContainer}>\n      {todos.map((todo, index) => (\n        <View style={styles.todoItemContainer} key={index}>\n          <Text>{`${todo.intValue} - ${todo.value}`}</Text>\n        </View>\n      ))}\n    </View>\n  );\n}\n\nasync function migrateDbIfNeeded(db: SQLiteDatabase) {\n  const DATABASE_VERSION = 1;\n  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(\n    'PRAGMA user_version'\n  );\n  if (currentDbVersion >= DATABASE_VERSION) {\n    return;\n  }\n  if (currentDbVersion === 0) {\n    await db.execAsync(`\nPRAGMA journal_mode = 'wal';\nCREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\n`);\n    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);\n    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);\n    currentDbVersion = 1;\n  }\n  // if (currentDbVersion === 1) {\n  //   Add more migrations\n  // }\n  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);\n}\n\nconst styles = StyleSheet.create({\n  // Your styles...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Camera App with Permission Handling\nDESCRIPTION: A complete example of implementing a camera view in React Native with Expo. It demonstrates requesting camera permissions, toggling between front and back cameras, and proper component styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera-next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CameraView, useCameraPermissions } from 'expo-camera/next';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [facing, setFacing] = useState('back');\n  const [permission, requestPermission] = useCameraPermissions();\n\n  if (!permission) {\n    // Camera permissions are still loading\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    // Camera permissions are not granted yet\n    return (\n      <View style={styles.container}>\n        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraFacing() {\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\n  }\n\n  return (\n    <View style={styles.container}>\n      <CameraView style={styles.camera} facing={facing}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </CameraView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Blurhash Generation Endpoint with Express (Node.js)\nDESCRIPTION: Node.js/Express code defining a POST endpoint `/blurhash`. It uses `multer` middleware to handle single image uploads under the field name 'image'. The `sharp` library processes the uploaded image buffer (ensuring an alpha channel and raw format), and the `blurhash` library encodes it. The number of components (`componentX`, `componentY`) can optionally be provided in the request body. The generated Blurhash string is returned as a JSON response.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  // If the file is not available we're returning with error.\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  // Users can specify number of components in each axes.\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  // We're converting provided image to a byte buffer.\n  // Sharp currently supports multiple common formats like JPEG, PNG, WebP, GIF, and AVIF.\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(data, info.width, info.height, componentX, componentY);\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing EAS Update Preview\nDESCRIPTION: Command to publish a preview update of current changes under the current branch name using EAS CLI\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/review/share-previews-with-your-team.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --auto\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Build Workflow for Maestro Tests\nDESCRIPTION: YAML configuration for a custom EAS Build workflow that first builds the app and then runs Maestro tests against it. It specifies which test flows to execute.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/e2e-tests.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Create a build and run Maestro tests on it\n  steps:\n    - eas/build\n    - eas/maestro_test:\n        inputs:\n          flow_path: |\n            maestro/home.yaml\n            maestro/expand_test.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring SecureStore Plugin for Expo in JSON\nDESCRIPTION: Demonstrates how to configure the expo-secure-store plugin in the app.json configuration file for an Expo-managed React Native project. Sets custom permission strings for Face ID usage by providing the faceIDPermission property. This configuration is necessary when building standalone apps or using EAS Build and requires knowledge of Expo config plugin syntax. Inputs are JSON-formatted app configuration, and outputs are the configured app behavior during build and deployment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"expo\": {\\n    \"plugins\": [\\n      [\\n        \"expo-secure-store\",\\n        {\\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to access your Face ID biometric data.\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Warming up the Web Browser for Improved Authentication UX\nDESCRIPTION: This snippet shows how to warm up the web browser on Android to improve the authentication experience. It uses the WebBrowser module from Expo to pre-initialize the browser in the background, speeding up the authentication prompt.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\n\nfunction App() {\n  useEffect(() => {\n    WebBrowser.warmUpAsync();\n\n    return () => {\n      WebBrowser.coolDownAsync();\n    };\n  }, []);\n\n  // Do authentication ...\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing useNavigation Hook for Drawer Actions in Expo Router\nDESCRIPTION: Illustrates how to use the useNavigation hook to access the navigation prop and perform navigator-dependent actions like opening a drawer.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/hooks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { useNavigation } from 'expo-router';\nimport { DrawerActions } from '@react-navigation/native';\n\nexport default function Route() {\n  const navigation = useNavigation();\n\n  return (\n    <View>\n      <Text\n        onPress={() => {\n          navigation.dispatch(DrawerActions.openDrawer());\n        }}>\n        Open Drawer\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating iOS Native Code for Debugging in Expo\nDESCRIPTION: Command to generate native iOS code from an Expo project for debugging in Xcode. This creates an ios directory at the project root that can be used for native debugging.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild -p ios\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in API Routes\nDESCRIPTION: Demonstrate error handling in API routes by returning a custom error response.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request, Response } from 'expo-router/server';\n\nexport async function GET(request: Request, { post }: Record<string, string>) {\n  if (!post) {\n    return new Response('No post found', {\n      status: 404,\n      headers: {\n        'Content-Type': 'text/plain',\n      },\n    });\n  }\n  // fetch data for `post`\n  return Response.json({ ... });\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling and Canceling a Notification in TypeScript\nDESCRIPTION: Example demonstrating how to schedule a notification and then cancel it using the identifier returned by scheduleNotificationAsync.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nasync function scheduleAndCancel() {\n  const identifier = await Notifications.scheduleNotificationAsync({\n    content: {\n      title: 'Hey!',\n    },\n    trigger: { seconds: 5, repeats: true },\n  });\n  await Notifications.cancelScheduledNotificationAsync(identifier);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LightSensor Listener in React Native (JSX)\nDESCRIPTION: Demonstrates a basic React Native component using the `LightSensor` from `expo-sensors`. It utilizes React hooks (`useState`, `useEffect`) to manage sensor data and subscription state. The component displays the current illuminance value (noting it's only available on Android in this example) and provides a button to toggle the sensor subscription on and off using `subscribe` and `unsubscribe` functions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Complete EmojiSticker Component\nDESCRIPTION: Final implementation combining gesture detection, animated views, and style application for draggable stickers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function EmojiSticker({ imageSize, stickerSource }) {\n  return (\n    <GestureDetector gesture={drag}>\n      <Animated.View style={[containerStyle, { top: -350 }]}>\n        <GestureDetector gesture={doubleTap}>\n          <Animated.Image\n            source={stickerSource}\n            resizeMode=\"contain\"\n            style={[imageStyle, { width: imageSize, height: imageSize }]}\n          />\n        </GestureDetector>\n      </Animated.View>\n    </GestureDetector>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network State Changes with NetInfo in JavaScript\nDESCRIPTION: Shows how to use `NetInfo.addEventListener` to subscribe to network state changes. The provided callback function executes whenever the network state changes, logging the connection type and status. It also demonstrates how to unsubscribe using the returned function. Depends on the imported `NetInfo` module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Capturing a High-Resolution Image with Pixel Ratio Calculation in React Native\nDESCRIPTION: Example of capturing a high-resolution (1080x1080) image of a view while accounting for the device's pixel ratio. This ensures the captured image has the desired physical pixel dimensions regardless of the device's screen density.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/captureRef.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\nconst pixels = targetPixelCount / pixelRatio;\n\nconst result = await captureRef(this.imageContainer, {\n  result: 'tmpfile',\n  height: pixels,\n  width: pixels,\n  quality: 1,\n  format: 'png',\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Usage in React Native\nDESCRIPTION: A complete React Native component demonstrating how to use expo-calendar. This example shows requesting permissions, getting available calendars, and creating a new calendar with custom properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\nimport * as Calendar from 'expo-calendar';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\n      if (status === 'granted') {\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\n        console.log('Here are all your calendars:');\n        console.log({ calendars });\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Calendar Module Example</Text>\n      <Button title=\"Create a new calendar\" onPress={createCalendar} />\n    </View>\n  );\n}\n\nasync function getDefaultCalendarSource() {\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\n  return defaultCalendar.source;\n}\n\nasync function createCalendar() {\n  const defaultCalendarSource =\n    Platform.OS === 'ios'\n      ? await getDefaultCalendarSource()\n      : { isLocalAccount: true, name: 'Expo Calendar' };\n  const newCalendarID = await Calendar.createCalendarAsync({\n    title: 'Expo Calendar',\n    color: 'blue',\n    entityType: Calendar.EntityTypes.EVENT,\n    sourceId: defaultCalendarSource.id,\n    source: defaultCalendarSource,\n    name: 'internalCalendarName',\n    ownerAccount: 'personal',\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\n  });\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing React Native Pedometer App\nDESCRIPTION: Complete React Native component implementing pedometer functionality using expo-sensors. Demonstrates checking sensor availability, retrieving past 24-hour step count, and subscribing to real-time step count updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/pedometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Pedometer } from 'expo-sensors';\n\nexport default function App() {\n  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');\n  const [pastStepCount, setPastStepCount] = useState(0);\n  const [currentStepCount, setCurrentStepCount] = useState(0);\n\n  const subscribe = async () => {\n    const isAvailable = await Pedometer.isAvailableAsync();\n    setIsPedometerAvailable(String(isAvailable));\n\n    if (isAvailable) {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - 1);\n\n      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);\n      if (pastStepCountResult) {\n        setPastStepCount(pastStepCountResult.steps);\n      }\n\n      return Pedometer.watchStepCount(result => {\n        setCurrentStepCount(result.steps);\n      });\n    }\n  };\n\n  useEffect(() => {\n    const subscription = subscribe();\n    return () => subscription && subscription.remove();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>\n      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>\n      <Text>Walk! And watch this go up: {currentStepCount}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Binary Data to SQLite in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to work with binary data (BLOB fields) in SQLite using expo-sqlite. It sets up a table for blob data, inserts a Uint8Array buffer, and then verifies via a select query that the binary value is stored and retrieved as expected. Dependencies: expo-sqlite, Node.js/React Native Buffer/Uint8Array support. Parameters: None fixed—creates and inserts into a 'blobs' table. Inputs: byte arrays; Outputs: row content matching the inserted bytes. Constraints: database must support BLOB fields; verify platform storage compatibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait db.execAsync(`\\nDROP TABLE IF EXISTS blobs;\\nCREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);\\n`);\\n\\nconst blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);\\nawait db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);\\n\\nconst row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');\\nexpect(row.data).toEqual(blob);\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Location in React Native with Expo Location (TSX)\nDESCRIPTION: Provides a React Native component example demonstrating how to use `expo-location`. It utilizes `useEffect` to request foreground location permissions using `Location.requestForegroundPermissionsAsync()` upon component mount. If permission is granted, it fetches the current location with `Location.getCurrentPositionAsync({})` and updates the component's state. The component displays either the location data (as a string) or an error message if permissions are denied or an issue occurs. It depends on `react`, `react-native`, `expo-location`, and `expo-device`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\n/* @hide */\nimport * as Device from 'expo-device';\n/* @end */\nimport * as Location from 'expo-location';\n\nexport default function App() {\n  const [location, setLocation] = useState<Location.LocationObject | null>(null);\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function getCurrentLocation() {\n      /* @hide */\n      if (Platform.OS === 'android' && !Device.isDevice) {\n        setErrorMsg(\n          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'\n        );\n        return;\n      }\n      /* @end */\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setLocation(location);\n    }\n\n    getCurrentLocation();\n  }, []);\n\n  let text = 'Waiting...';\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Device Usage Example in React Native\nDESCRIPTION: A simple React Native component that displays the device manufacturer and model name using the expo-device package. This snippet demonstrates how to import and use the Device module's properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Plugin in app.json\nDESCRIPTION: JSON configuration for setting up the expo-calendar plugin in app.json. This example shows how to set custom calendar permission messages which will be included in the app binary.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-calendar\",\n        {\n          \"calendarPermission\": \"The app needs to access your calendar.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Looping Media Playback a Specific Number of Times - Expo AV JavaScript\nDESCRIPTION: Implements a custom looping mechanism to replay media exactly N times (here, 20). The callback checks didJustFinish and disables looping on the final iteration. State (numberOfLoops) is managed externally, and setOnPlaybackStatusUpdate plus setIsLooping orchestrate loop cycles. Useful for advanced playback requirements beyond infinite looping.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst N = 20;\\n...\\n\\n_onPlaybackStatusUpdate = (playbackStatus) => {\\n  if (playbackStatus.didJustFinish) {\\n    if (this.state.numberOfLoops == N - 1) {\\n      playbackObject.setIsLooping(false);\\n    }\\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\\n  }\\n};\\n\\n...\\nthis.setState({ numberOfLoops: 0 });\\n... // Load the playbackObject and obtain the reference.\\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\\nplaybackObject.setIsLooping(true);\\n...\n```\n\n----------------------------------------\n\nTITLE: Passing binary data to SQLite in Expo\nDESCRIPTION: This snippet demonstrates how to pass binary data to a SQLite database using Uint8Array. It creates a table for storing blobs, inserts binary data, and then retrieves and verifies the stored data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nawait db.execAsync(`\nDROP TABLE IF EXISTS blobs;\nCREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);\n`);\n\nconst blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);\nawait db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);\n\nconst row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');\nexpect(row.data).toEqual(blob);\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component in Expo\nDESCRIPTION: Demonstrates a complete React component implementation following Expo conventions. It includes prop types, lifecycle methods, and styling using StyleSheet.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Expo from 'expo';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { StyleSheet, Text } from 'react-native';\n\nimport Log from '../log/Log';\nimport Colors from '../style/Colors';\n\nexport default class GreetingText extends React.PureComponent {\n  static propTypes = {\n    greeting: PropTypes.string.isRequired,\n    ...Text.propTypes,\n  };\n\n  componentDidUpdate() {\n    Log.info('The greeting was re-rendered');\n  }\n\n  render() {\n    let { greeting, style, ...props } = this.props;\n    return (\n      <Text {...props} onPress={this._handlePress} style={[styles.greeting, style]}>\n        {greeting}\n      </Text>\n    );\n  }\n\n  _handlePress = event => {\n    alert('Congratulations!');\n  };\n}\n\nconst styles = StyleSheet.create({\n  greeting: {\n    color: Colors.energetic,\n    fontSize: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigators with Navigator Component\nDESCRIPTION: Example of implementing a custom tab navigator in Expo Router using the Navigator component and TabRouter from React Navigation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { TabRouter } from '@react-navigation/native';\n\nimport { Navigator, usePathname, Slot, Link } from 'expo-router';\n\nexport default function App() {\n  return (\n    /* @info */<Navigator router={TabRouter}>/* @end */\n      <Header />\n      <Slot />\n    </Navigator>\n  );\n}\n\nfunction Header() {;\n  const pathname = usePathname();\n\n  return (\n    <View>\n      <Link href=\"/\">Home</Link>\n      <Link\n        href=\"/profile\"\n        style={/* @info Use <code>pathname</code> to determine if the link is active. */[pathname === '/profile' && { color: 'blue' }]/* @end */}>\n        Profile\n      </Link>\n      <Link href=\"/settings\">Settings</Link>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry in Expo App\nDESCRIPTION: This snippet shows how to initialize Sentry in the main file of an Expo app (e.g., App.js). It includes setting the DSN and debug mode, and wrapping the root component with Sentry.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/react-native';\n\nSentry.init({\n  dsn: 'YOUR DSN HERE',\n  debug: true, // If `true`, Sentry will try to print out useful debugging information if something goes wrong with sending the event. Set it to `false` in production\n});\n\n// Your App component here\n\nexport default Sentry.wrap(App);\n```\n\n----------------------------------------\n\nTITLE: Dismissing Web Popup in Expo Authentication\nDESCRIPTION: Use WebBrowser.maybeCompleteAuthSession() to dismiss the web popup after authentication. This is crucial for closing the popup window.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nWebBrowser.maybeCompleteAuthSession()\n```\n\n----------------------------------------\n\nTITLE: Creating Application Lifecycle Package in Java\nDESCRIPTION: Implementation of Package interface to create ApplicationLifecycleListener in Java. Shows how to set up Application lifecycle hooks.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.Context;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport expo.modules.core.interfaces.ApplicationLifecycleListener;\nimport expo.modules.core.interfaces.Package;\n\npublic class MyLibPackage implements Package {\n  @Override\n  public List<? extends ApplicationLifecycleListener> createApplicationLifecycleListeners(Context context) {\n    return Collections.singletonList(new MyLibApplicationLifecycleListener());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component in JSX\nDESCRIPTION: Shows how to use the SafeAreaView component to automatically apply safe area insets as padding.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-notifications Plugin in Expo app.json - JSON\nDESCRIPTION: This JSON snippet configures the expo-notifications plugin in the Expo 'app.json' app config file to register custom notification icons, colors, channels, and sounds. It sets up the required settings for push notification appearance and behavior, especially for Android, including notification icon path, tray color, default channel, and an array of local sound files. The configuration applies during build time and requires a new app binary. All paths should reference app-local assets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification-icon.png\",\n          \"color\": \"#ffffff\",\n          \"defaultChannel\": \"default\",\n          \"sounds\": [\n            \"./local/assets/notification-sound.wav\",\n            \"./local/assets/notification-sound-other.wav\"\n          ]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining and Using Video References - Expo AV JavaScript\nDESCRIPTION: Illustrates how to capture a reference to a Video component to use the imperative playback API, by assigning a ref callback (_handleVideoRef). This enables direct method calls on the playbackObject for finer state control beyond props. Intended for use in class-based or functional React Native components rendering Expo Video elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n...\\n_handleVideoRef = component => {\\n  const playbackObject = component;\\n  ...\\n}\\n\\n...\\n\\nrender() {\\n  return (\\n    ...\\n      <Video\\n        ref={this._handleVideoRef}\\n        ...\\n      />\\n    ...\\n  )\\n}\\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkbox Component in React Native with Expo\nDESCRIPTION: Demonstrates how to implement a checkbox component with different states including normal, custom colored, and disabled checkboxes. Uses React hooks for state management and includes styling for layout and appearance.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Normal checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox\n          style={styles.checkbox}\n          value={isChecked}\n          onValueChange={setChecked}\n          color={isChecked ? '#4630EB' : undefined}\n        />\n        <Text style={styles.paragraph}>Custom colored checkbox</Text>\n      </View>\n      <View style={styles.section}>\n        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />\n        <Text style={styles.paragraph}>Disabled checkbox</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n    marginVertical: 32,\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Background Fetch Task with Short Interval in Expo (TypeScript)\nDESCRIPTION: This snippet shows how to register a background fetch task with expo-background-fetch using a short interval, useful for development and testing purposes on Android. The minimumInterval is set to 60 seconds, causing the background fetch to trigger one minute after the app is backgrounded. It depends on the 'expo-background-fetch' module and assumes 'BACKGROUND_FETCH_TASK' is previously defined. The function should be called in a React Native/Expo context and will return a promise for task registration. Frequent interval settings are suitable for testing but not recommended for production due to system restrictions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Function in JavaScript\nDESCRIPTION: Demonstrates how to import and use an asynchronous native function in JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { requireNativeModule } from 'expo-modules-core';\n\n// Assume that we have named the module \"MyModule\"\nconst MyModule = requireNativeModule('MyModule');\n\nasync function getMessageAsync() {\n  return await MyModule.asyncFunction('bar');\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating GLView with Reanimated Worklets in Expo (JavaScript)\nDESCRIPTION: Shows how to render with expo-gl's GLView inside a Reanimated worklet context. GL context ID is passed to the worklet and used to recreate the GL object, followed by WebGL drawing operations inside the worklet. Requires expo-gl and react-native-reanimated as dependencies. The GLView component must have enableExperimentalWorkletSupport set, and onContextCreate passes the contextId for UI-thread execution. The pattern allows leveraging GLView rendering in the Reanimated thread while observing limitations (no third-party WebGL libraries inside worklets, asset handling on main thread).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { View } from 'react-native';\\nimport { runOnUI } from 'react-native-reanimated';\\nimport { GLView } from 'expo-gl';\\n\\nfunction render(gl) {\\n  'worklet';\\n  // add your WebGL code here\\n}\\n\\nfunction onContextCreate(gl) {\\n  runOnUI((contextId: number) => {\\n    'worklet';\\n    const gl = GLView.getWorkletContext(contextId);\\n    render(gl);\\n  })(gl.contextId);\\n}\\n\\nexport default function App() {\\n  return (\\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\\n      <GLView\\n        style={{ width: 300, height: 300 }}\\n        enableExperimentalWorkletSupport\\n        onContextCreate={onContextCreate}\\n      />\\n    </View>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds with Expo AV in React Native\nDESCRIPTION: Example showing how to load and play audio files using expo-av Sound API. Demonstrates proper lifecycle management including sound unloading.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Audio } from 'expo-av';\n\nexport default function App() {\n  const [sound, setSound] = useState();\n\n  async function playSound() {\n    console.log('Loading Sound');\n    const { sound } = await Audio.Sound.createAsync(\n      require('./assets/Hello.mp3')\n    );\n    setSound(sound);\n\n    console.log('Playing Sound');\n    await sound.playAsync();\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          sound.unloadAsync();\n        }\n      : undefined;\n  }, [sound]);\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Play Sound\" onPress={playSound} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fonts in React Native with expo-font\nDESCRIPTION: A complete example showing how to load custom fonts in a React Native application using the useFonts hook from expo-font. It also demonstrates integrating with expo-splash-screen to handle the font loading process and properly displaying fonts once loaded.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n/* @info Import useFonts hook from 'expo-font'. */ import { useFonts } from 'expo-font'; /* @end */\n/* @info Also, import SplashScreen so that when the fonts are not loaded, we can continue to show SplashScreen. */ import * as SplashScreen from 'expo-splash-screen'; /* @end */\n\n/* @info This prevents SplashScreen from auto hiding while the fonts are loaded. */\nSplashScreen.preventAutoHideAsync();\n/* @end */\n\nexport default function App() {\n  const [fontsLoaded, fontError] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  /* @info After the custom fonts have loaded, we can hide the splash screen and display the app screen. */\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded || fontError) {\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded, fontError]);\n  /* @end */\n\n  if (!fontsLoaded && !fontError) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container} onLayout={onLayoutRootView}>\n      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring React Navigation for Push Notification Deep Links in TSX\nDESCRIPTION: Demonstrates configuring the `linking` prop of `NavigationContainer` from React Navigation. It sets up `getInitialURL` to prioritize standard deep links and fallback to push notification URLs retrieved via `expo-notifications`. The `subscribe` function listens for URLs from both standard linking events and push notification responses, forwarding the URL to React Navigation's listener.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n App.tsx\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        async getInitialURL() {\n          // First, you may want to do the default deep link handling\n          // Check if app was opened from a deep link\n          const url = await Linking.getInitialURL();\n\n          if (url != null) {\n            return url;\n          }\n\n          // Handle URL from expo push notifications\n          const response = await Notifications.getLastNotificationResponseAsync();\n\n          return response?.notification.request.content.data.url;\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          // Listen to incoming links from deep linking\n          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);\n\n          // Listen to expo push notifications\n          const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n            const url = response.notification.request.content.data.url;\n\n            // Any custom logic to see whether the URL needs to be handled\n            //...\n\n            // Let React Navigation handle the URL\n            listener(url);\n          });\n\n          return () => {\n            // Clean up the event listeners\n            eventListenerSubscription.remove();\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Tailwind with Metro in Expo - JavaScript\nDESCRIPTION: Sets up metro.config.js to enable CSS support and ensures Tailwind CLI generates the required CSS file at build time. Utilizes async module export and invokes Tailwind CLI 'build' with correct input/output paths, running in watch mode during development. Dependencies: 'expo/metro-config', 'tailwindcss', 'path' modules, 'global.css', proper environment setup. Input is configuration and environment variables, output is dynamically built CSS and Metro config for Expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst { getDefaultConfig } = require('expo/metro-config');\nconst tailwind = require('tailwindcss/lib/cli/build');\n\nmodule.exports = (async () => {\n  /** @type {import('expo/metro-config').MetroConfig} */\n  const config = getDefaultConfig(__dirname, {\n    // Enable CSS support.\n    isCSSEnabled: true,\n  });\n\n  // Run Tailwind CLI to generate CSS files.\n  await tailwind.build({\n    '--input': path.relative(__dirname, './global.css'),\n    '--output': path.resolve(__dirname, 'node_modules/.cache/expo/tailwind/eval.css'),\n    '--watch': process.env.NODE_ENV === 'development' ? 'always' : false,\n    '--poll': true,\n  });\n\n  return config;\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in React Native\nDESCRIPTION: Sets up the Supabase client with authentication configuration using AsyncStorage for session persistence. Required dependencies include @supabase/supabase-js, @react-native-async-storage/async-storage, and react-native-url-polyfill.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-supabase.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-native-url-polyfill/auto';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL;\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Contacts Usage Example\nDESCRIPTION: Example React Native component demonstrating how to request contacts permissions and fetch contact data using expo-contacts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Contacts from 'expo-contacts';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Contacts.requestPermissionsAsync();\n      if (status === 'granted') {\n        const { data } = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Emails],\n        });\n\n        if (data.length > 0) {\n          const contact = data[0];\n          console.log(contact);\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Contacts Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Vector Icons in React Native with @expo/vector-icons\nDESCRIPTION: This snippet demonstrates how to use the Ionicons from @expo/vector-icons to render a checkmark icon in a React Native component. It imports the Ionicons component and uses it with specified name, size, and color props.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet } from 'react-native';\nimport Ionicons from '@expo/vector-icons/Ionicons';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Ionicons name=\"checkmark-circle\" size={32} color=\"green\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Links in Home Screen with Expo Router\nDESCRIPTION: Updates the home screen to include a Link component that enables navigation to the details screen. The Link component is a built-in way to handle navigation in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n      <Link href=\"/details\">View details</Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying and Controlling a Lottie Animation in React Native\nDESCRIPTION: This TypeScript React Native component demonstrates how to render a Lottie animation using the `LottieView` component from `lottie-react-native`. It loads an animation from a local JSON file (`assets/gradientBall.json`), sets it to autoplay, and provides a button to restart the animation programmatically using a `useRef` hook. Styling is applied using StyleSheet.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Queries within an Async Transaction in JavaScript\nDESCRIPTION: This snippet demonstrates how to open a SQLite database and execute queries within an asynchronous transaction. The withTransactionAsync function ensures all included queries are atomically committed or rolled back together.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.withTransactionAsync(async () => {\n  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic PagerView Component in React Native (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to create a basic pager component using `react-native-pager-view`. It imports necessary components from `react-native` and `react-native-pager-view`. The `MyPager` function component renders a `PagerView` containing three child `View` components, each representing a page. The `initialPage` prop is set to 0, making the first page visible initially. Basic styling is applied using `StyleSheet` to ensure the pager fills the available space and centers content within pages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx App.js\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nexport default function MyPager() {\n  return (\n    <View style={styles.container}>\n      <PagerView style={styles.container} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading Source Maps for Android Updates using Sentry CLI\nDESCRIPTION: Command for uploading Android source maps to Sentry after generating an EAS Update. This associates the source maps with a specific release and distribution ID to enable proper error stack traces.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ node_modules/@sentry/cli/bin/sentry-cli releases \\\n    files <release name> \\\n    upload-sourcemaps \\\n    --dist <Android Update ID> \\\n    --rewrite \\\n    dist/bundles/index.android.bundle dist/bundles/android-<hash>.map\n```\n\n----------------------------------------\n\nTITLE: Defining a Workflow Name in EAS Build YAML\nDESCRIPTION: Sets the name property of a workflow to 'Run tests', which is used to identify the workflow in build logs and dashboard.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  # @info #\n  name: Run tests\n  # @end #\n  steps:\n    - eas/checkout\n    - run:\n        name: Install dependencies\n        command: npm install\n```\n\n----------------------------------------\n\nTITLE: Storing Authentication Data Securely with expo-secure-store in TypeScript\nDESCRIPTION: Illustrates how to use `expo-secure-store` to securely persist authentication data (like tokens received from `useAuthRequest`) on native platforms (iOS and Android). The code checks if the platform is not web, stringifies the authentication parameters obtained from a successful response, and then uses `SecureStore.setItemAsync` to save the data under a specific key. This ensures sensitive tokens are stored encrypted using native Keychain services (iOS) or SharedPreferences (Android).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\n\nconst MY_SECURE_AUTH_STATE_KEY = 'MySecureAuthStateKey';\n\nfunction App() {\n  const [, response] = useAuthRequest({});\n\n  useEffect(() => {\n    if (response && response.type === 'success') {\n      const auth = response.params;\n      const storageValue = JSON.stringify(auth);\n\n      if (Platform.OS !== 'web') {\n        // Securely store the auth on your device\n        SecureStore.setItemAsync(MY_SECURE_AUTH_STATE_KEY, storageValue);\n      }\n    }\n  }, [response]);\n\n  // More login code...\n}\n```\n\n----------------------------------------\n\nTITLE: Apple Authentication Sign-In Button in Expo (React Native JSX)\nDESCRIPTION: This React Native/Expo code snippet shows a functional component that renders the AppleAuthenticationButton. The button initiates the Apple sign-in flow using AppleAuthentication.signInAsync and handles both successful results and user-initiated cancellation/errors. Required dependency: expo-apple-authentication. Key parameters include buttonType, buttonStyle, and requestedScopes (FULL_NAME and EMAIL); inputs are user interaction, and output is a credential object or error handling. The snippet also demonstrates appropriate styling and error management for real-world deployments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n            });\n            // signed in\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing FullHD Image in React Native\nDESCRIPTION: Demonstrates how to capture a FullHD (1080x1080) image while accounting for device pixel ratio. The example shows proper calculation of dimensions and setting capture options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/captureRef.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\nconst pixels = targetPixelCount / pixelRatio;\n\nconst result = await captureRef(this.imageContainer, {\n  result: 'tmpfile',\n  height: pixels,\n  width: pixels,\n  quality: 1,\n  format: 'png',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Imperative Redirects with useRouter Hook\nDESCRIPTION: Shows how to perform programmatic navigation using the useRouter hook and useFocusEffect. This method is useful for implementing redirects based on complex logic or side effects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/redirects.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useRouter, useFocusEffect } from 'expo-router';\n\nfunction MyScreen() {\n  const router = useRouter();\n\n  useFocusEffect(() => {\n    router.replace('/profile/settings');\n  });\n\n  return <Text>My Screen</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Styled Button using React Native Pressable\nDESCRIPTION: Implementation of a custom button component using React Native's Pressable component with custom styling. The component accepts onPress and title props, with default styling for background, text, padding, and border radius. This approach provides consistent styling across Android, iOS, and web platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/react-native-styling-buttons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Text, StyleSheet, Pressable } from 'react-native';\n\nexport default function Button(props) {\n  const { onPress, title = 'Save' } = props;\n  return (\n    <Pressable style={styles.button} onPress={onPress}>\n      <Text style={styles.text}>{title}</Text>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 32,\n    borderRadius: 4,\n    elevation: 3,\n    backgroundColor: 'black',\n  },\n  text: {\n    fontSize: 16,\n    lineHeight: 21,\n    fontWeight: 'bold',\n    letterSpacing: 0.25,\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Route Options in Stack Navigator\nDESCRIPTION: Demonstrates how to statically configure route options and screen options for the Stack navigator, including styling the header.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return (\n    <Stack\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}>\n      <Stack.Screen name=\"home\" options={{}} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SplashScreen Implementation with Global Prevention\nDESCRIPTION: Example showing how to prevent splash screen auto-hiding in the global scope and hide it after a delay using setTimeout.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\n\nSplashScreen.preventAutoHideAsync()\n  .then((result) => console.log(`SplashScreen.preventAutoHideAsync() succeeded: ${result}`))\n  .catch(console.warn);\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    setTimeout(async () => {\n      await SplashScreen.hideAsync();\n    }, 2000);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>SplashScreen Demo! 👋</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aabbcc',\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic PagerView in React Native (JSX)\nDESCRIPTION: This React Native component demonstrates the basic usage of the `PagerView` component from `react-native-pager-view`. It creates a full-screen view containing a pager that allows swiping between three distinct pages, each displaying simple text. The example sets the initial page to the first one (index 0) and uses basic styling with `StyleSheet`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx App.js\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nconst MyPager = () => {\n  return (\n    <View style={{ flex: 1 }}>\n      <PagerView style={styles.viewPager} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  viewPager: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default MyPager;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with create-expo-app\nDESCRIPTION: Explains how to initialize a new Expo project using the create-expo-app command. This is the recommended way to start a new Expo project, allowing immediate launch in Expo Go or an emulator/simulator.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app\n```\n\n----------------------------------------\n\nTITLE: Express Server for File Upload Handling\nDESCRIPTION: Node.js Express server implementation that handles both binary and multipart file uploads using multer middleware.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications with Expo Router in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use Expo Router's built-in deep linking to handle incoming URLs from push notifications. It configures the root layout to listen for incoming and initial notification events.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { router } from 'expo-router';\n\nfunction useNotificationObserver() {\n  useEffect(() => {\n    let isMounted = true;\n\n    function redirect(notification: Notifications.Notification) {\n      const url = notification.request.content.data?.url;\n      if (url) {\n        router.push(url);\n      }\n    }\n\n    Notifications.getLastNotificationResponseAsync()\n      .then(response => {\n        if (!isMounted || !response?.notification) {\n          return;\n        }\n        redirect(response?.notification);\n      });\n\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      redirect(response.notification);\n    });\n\n    return () => {\n      isMounted = false;\n      subscription.remove();\n    };\n  }, []);\n}\n\nexport default function Layout() {\n  useNotificationObserver();\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Search Parameters in Expo Router\nDESCRIPTION: Shows how to use the useGlobalSearchParams hook to access URL parameters for the globally selected route, including both route and search parameters for dynamic routes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useGlobalSearchParams } from 'expo-router';\n\nexport default function Route() {\n  const { user, extra } = useGlobalSearchParams();\n\n  return <Text>User: {user}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component in React Native/JSX\nDESCRIPTION: This example shows how to use SafeAreaView from react-native-safe-area-context to wrap content so it respects the device's safe area insets. SafeAreaView works as a regular View but automatically applies padding to avoid notches and system UI overlays. The component accepts props such as 'edges' to customize which sides to apply insets. Requires react-native-safe-area-context and React Native's View component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation Layout in Expo Router\nDESCRIPTION: This snippet shows how to create a tab navigation layout using the Tabs component from expo-router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/layouts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function Layout() {\n  return <Tabs />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ImageViewer Component in React Native\nDESCRIPTION: This snippet demonstrates how to create a reusable ImageViewer component that displays an image with styling. The component accepts a placeholderImageSource prop and renders an Image component with pre-defined styles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Image } from 'react-native';\n\nexport default function ImageViewer({ placeholderImageSource }) {\n  return (\n    <Image source={placeholderImageSource} style={styles.image} />\n  );\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 320,\n    height: 440,\n    borderRadius: 18,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Plugin in Expo App Config\nDESCRIPTION: This snippet shows how to add the Sentry plugin to an Expo project's app.json configuration file. It includes options for specifying the Sentry organization slug, project name, and URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@sentry/react-native/expo\",\n        {\n          \"organization\": \"sentry org slug, or use the `SENTRY_ORG` environment variable\",\n          \"project\": \"sentry project name, or use the `SENTRY_PROJECT` environment variable\",\n          \"url\": \"https://sentry.io/\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building an iOS app with EAS Build\nDESCRIPTION: Command to start a build process for iOS platform using EAS Build. This creates a build that can be submitted to the Apple App Store.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios\n```\n\n----------------------------------------\n\nTITLE: Handling Playback Status Updates - Expo AV JavaScript\nDESCRIPTION: Defines a callback (_onPlaybackStatusUpdate) that responds to playback state changes including errors, buffering, finish status, and play/pause. The handler is registered on a playbackObject and can update UI or trigger actions based on state (loaded, playing, buffering, finished). This pattern is essential for robust media UX and error reporting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n_onPlaybackStatusUpdate = playbackStatus => {\\n  if (!playbackStatus.isLoaded) {\\n    // Update your UI for the unloaded state\\n    if (playbackStatus.error) {\\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\\n      // Send Expo team the error on Slack or the forums so we can help you debug!\\n    }\\n  } else {\\n    // Update your UI for the loaded state\\n\\n    if (playbackStatus.isPlaying) {\\n      // Update your UI for the playing state\\n    } else {\\n      // Update your UI for the paused state\\n    }\\n\\n    if (playbackStatus.isBuffering) {\\n      // Update your UI for the buffering state\\n    }\\n\\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\\n      // The player has just finished playing and will stop. Maybe you want to play something else?\\n    }\\n\\n    ... // etc\\n  }\\n};\\n\\n... // Load the playbackObject and obtain the reference.\\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Device Usage in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the expo-device package to display the device manufacturer and model name in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Component Implementation in React Native\nDESCRIPTION: Example showing how to use the expo-image component with blurhash placeholder, custom styling, and transition effects\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/image.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { StyleSheet, View } from 'react-native';\n\nconst blurhash =\n  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.image}\n        source=\"https://picsum.photos/seed/696/3000/2000\"\n        placeholder={{ blurhash }}\n        contentFit=\"cover\"\n        transition={1000}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#0553',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Existing SQLite Database in Expo\nDESCRIPTION: This function demonstrates how to open an existing SQLite database file in an Expo app. It uses expo-file-system and expo-asset to download and access the database file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\nimport * as SQLite from 'expo-sqlite';\nimport { Asset } from 'expo-asset';\n\nasync function openDatabase(pathToDatabaseFile: string): Promise<SQLite.WebSQLDatabase> {\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\n  }\n  await FileSystem.downloadAsync(\n    Asset.fromModule(require(pathToDatabaseFile)).uri,\n    FileSystem.documentDirectory + 'SQLite/myDatabaseName.db'\n  );\n  return SQLite.openDatabase('myDatabaseName.db');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JavaScript Stack Navigator\nDESCRIPTION: Shows how to create a custom JavaScript-powered stack navigator using @react-navigation/stack and withLayoutContext from expo-router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ParamListBase, StackNavigationState } from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '@react-navigation/stack';\nimport { withLayoutContext } from 'expo-router';\n\nconst { Navigator } = createStackNavigator();\n\nexport const JsStack = withLayoutContext<\n  StackNavigationOptions,\n  typeof Navigator,\n  StackNavigationState<ParamListBase>,\n  StackNavigationEventMap\n>(Navigator);\n```\n\n----------------------------------------\n\nTITLE: Extended Customizable Checkbox Implementation\nDESCRIPTION: Final implementation with full customization options including custom styles and icon properties for both active and inactive states.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/implementing-a-checkbox.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyCheckbox({\n  checked,\n  onChange,\n  buttonStyle = {},\n  activeButtonStyle = {},\n  inactiveButtonStyle = {},\n  activeIconProps = {},\n  inactiveIconProps = {},\n}) {\n  const iconProps = checked ? activeIconProps : inactiveIconProps;\n  return (\n    <Pressable\n      style={[\n        buttonStyle,\n        checked ? activeButtonStyle : inactiveButtonStyle,\n      ]}\n      onPress={() => onChange(!checked)}>\n      {checked && (\n        <Ionicons\n          name=\"checkmark\"\n          size={24}\n          color=\"white\"\n          {...iconProps}\n        />\n      )}\n    </Pressable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Notification with Custom Sound on iOS\nDESCRIPTION: Shows how to schedule a notification with a custom sound on iOS. This example assumes the sound file has been added to the Xcode project resources.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions for Expo Location in app.json (JSON)\nDESCRIPTION: Demonstrates how to configure location permissions for expo-location using app.json config plugins in an Expo project, particularly for iOS. Requires an Expo project using EAS Build or 'npx expo run'. Key parameters include locationAlwaysAndWhenInUsePermission, which sets strings for iOS plist permission prompts. Input is the app.json, with an array of plugin configuration objects. Output is a correctly configured app that prompts users with the proper message when requesting location access.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-location\\\",\\n        {\\n          \\\"locationAlwaysAndWhenInUsePermission\\\": \\\"Allow $(PRODUCT_NAME) to use your location.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GLView and Rendering Basic WebGL Content with expo-gl (JavaScript)\nDESCRIPTION: Demonstrates how to use the GLView component from expo-gl to create an OpenGL ES rendering surface in a React Native app. The onContextCreate function initializes a WebGL context, sets up vertex and fragment shaders, creates and links a shader program, clears the buffer, and renders a point. Requires the expo-gl package and React Native, with dependencies set in the Snack example. The GLView is mounted with width and height, passing style and onContextCreate handler, and rendering occurs upon creation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { View } from 'react-native';\\nimport { GLView } from 'expo-gl';\\n\\nexport default function App() {\\n  return (\\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\\n    </View>\\n  );\\n}\\n\\nfunction onContextCreate(gl) {\\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\\n  gl.clearColor(0, 1, 1, 1);\\n\\n  // Create vertex shader (shape & position)\\n  const vert = gl.createShader(gl.VERTEX_SHADER);\\n  gl.shaderSource(\\n    vert,\\n    `\\n    void main(void) {\\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n      gl_PointSize = 150.0;\\n    }\\n  `\\n  );\\n  gl.compileShader(vert);\\n\\n  // Create fragment shader (color)\\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\\n  gl.shaderSource(\\n    frag,\\n    `\\n    void main(void) {\\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n    }\\n  `\\n  );\\n  gl.compileShader(frag);\\n\\n  // Link together into a program\\n  const program = gl.createProgram();\\n  gl.attachShader(program, vert);\\n  gl.attachShader(program, frag);\\n  gl.linkProgram(program);\\n  gl.useProgram(program);\\n\\n  gl.clear(gl.COLOR_BUFFER_BIT);\\n  gl.drawArrays(gl.POINTS, 0, 1);\\n\\n  gl.flush();\\n  gl.endFrameEXP();\\n}\n```\n\n----------------------------------------\n\nTITLE: Executing queries within an async transaction in SQLite for Expo\nDESCRIPTION: This snippet shows how to execute queries within an async transaction using the withTransactionAsync method. It demonstrates opening a database, running a SELECT query, and logging the result.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\n\nawait db.withTransactionAsync(async () => {\n  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');\n  console.log('Count:', result.rows[0]['COUNT(*)']);\n});\n```\n\n----------------------------------------\n\nTITLE: Using ScreenCapture Functions in React Native\nDESCRIPTION: Illustrates using various functions from the `expo-screen-capture` module in a React Native component. It shows how to request permissions (`requestPermissionsAsync`), add a listener for screenshot events (`addScreenshotListener`), and programmatically activate (`preventScreenCaptureAsync`) and deactivate (`allowScreenCaptureAsync`) screen capture prevention. Requires `expo-screen-capture` and potentially `expo-media-library` dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  const hasPermissions = async () => {\n    const { status } = await ScreenCapture.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  useEffect(() => {\n    let subscription;\n\n    const addListenerAsync = async () => {\n      if (await hasPermissions()) {\n        subscription = ScreenCapture.addScreenshotListener(() => {\n          alert('Thanks for screenshotting my beautiful app 😊');\n        });\n      } else {\n        console.error('Permissions needed to subscribe to screenshot events are missing!');\n      }\n    };\n    addListenerAsync();\n\n    return () => {\n      subscription?.remove();\n    };\n  }, []);\n\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permissions\nDESCRIPTION: Function to request notification permissions from the user. This example requests alerts, badges, and sounds on iOS. On Android, all permissions are granted by default.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nexport function requestPermissionsAsync() {\n  return await Notifications.requestPermissionsAsync({\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tailwind Content and Theme - JavaScript\nDESCRIPTION: Configures tailwind.config.js for Tailwind CSS integration with Expo and Metro. Specifies source content locations (e.g., './app/**/*.{js,tsx,ts,jsx}') and exports customization hooks for the Tailwind theme and plugins array. Dependencies: 'tailwindcss', correct folder structure for sources. Input is the configuration object, output is project-wide Tailwind utility class availability.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // Ensure this points to your source code...\n    './app/**/*.{js,tsx,ts,jsx}',\n    // If you use a `src` folder, add: './src/**/*.{js,tsx,ts,jsx}'\n    // Do the same with `components`, `hooks`, `styles`, or any other top-level folders...\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Swipeable Pager with react-native-pager-view in JavaScript\nDESCRIPTION: This code snippet demonstrates a functional React Native component that implements a swipeable pager interface using the react-native-pager-view library. Dependencies include react-native, react-native-pager-view, and StyleSheet for styling. The PagerView component is configured with an initial page and contains three pages, each rendered as a styled View with text content; custom styles allow for flex layout and center alignment. Inputs are provided by the static style definitions, while output is a swipeable, fullscreen pager component rendered in an Expo-managed or bare React Native app environment. The usage assumes react-native-pager-view is properly linked or installed in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nexport default function MyPager() {\n  return (\n    <View style={styles.container}>\n      <PagerView style={styles.container} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing GIFs with expo-file-system in TypeScript\nDESCRIPTION: This snippet showcases various operations for managing GIF files using the FileSystem API, including downloading multiple GIFs, retrieving a single GIF, getting a shareable URI, and deleting all GIFs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/filesystem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\n\nconst gifDir = FileSystem.cacheDirectory + 'giphy/';\nconst gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;\nconst gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;\n\n// Checks if gif directory exists. If not, creates it\nasync function ensureDirExists() {\n  const dirInfo = await FileSystem.getInfoAsync(gifDir);\n  if (!dirInfo.exists) {\n    console.log(\"Gif directory doesn't exist, creating…\");\n    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });\n  }\n}\n\n// Downloads all gifs specified as array of IDs\nexport async function addMultipleGifs(gifIds: string[]) {\n  try {\n    await ensureDirExists();\n\n    console.log('Downloading', gifIds.length, 'gif files…');\n    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));\n  } catch (e) {\n    console.error(\"Couldn't download gif files:\", e);\n  }\n}\n\n// Returns URI to our local gif file\n// If our gif doesn't exist locally, it downloads it\nexport async function getSingleGif(gifId: string) {\n  await ensureDirExists();\n\n  const fileUri = gifFileUri(gifId);\n  const fileInfo = await FileSystem.getInfoAsync(fileUri);\n\n  if (!fileInfo.exists) {\n    console.log(\"Gif isn't cached locally. Downloading…\");\n    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);\n  }\n\n  return fileUri;\n}\n\n// Exports shareable URI - it can be shared outside your app\nexport async function getGifContentUri(gifId: string) {\n  return FileSystem.getContentUriAsync(await getSingleGif(gifId));\n}\n\n// Deletes whole giphy directory with all its content\nexport async function deleteAllGifs() {\n  console.log('Deleting all GIF files…');\n  await FileSystem.deleteAsync(gifDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Chat Screen with Keyboard Handling in React Native\nDESCRIPTION: This snippet demonstrates a ChatScreen component that uses the custom 'useGradualAnimation' hook. It creates an animated view that smoothly adjusts its height based on the keyboard's presence, effectively pushing content above the keyboard.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Platform, FlatList, View, StatusBar, TextInput } from 'react-native';\nimport Animated, { useAnimatedStyle, useSharedValue } from 'react-native-reanimated';\nimport { useKeyboardHandler } from 'react-native-keyboard-controller';\n\nimport MessageItem from '@/components/MessageItem';\nimport { messages } from '@/messages';\n\nconst useGradualAnimation = () => {\n  /* @hide // Code remains same from previous example */\n  /* @end */\n};\n\nexport default function ChatScreen() {\n  const { height } = useGradualAnimation();\n\n  const fakeView = useAnimatedStyle(() => {\n    return {\n      height: Math.abs(height.value),\n    };\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={messages}\n        renderItem={({ item }) => <MessageItem message={item} />}\n        keyExtractor={item => item.createdAt.toString()}\n        contentContainerStyle={styles.listStyle}\n      />\n      <TextInput placeholder=\"Type a message...\" style={styles.textInput} />\n      <Animated.View style={fakeView} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n  },\n  listStyle: {\n    padding: 16,\n    gap: 16,\n  },\n  textInput: {\n    width: '95%',\n    height: 45,\n    borderWidth: 1,\n    borderRadius: 8,\n    borderColor: '#d8d8d8',\n    backgroundColor: '#fff',\n    padding: 8,\n    alignSelf: 'center',\n    marginBottom: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropbox OAuth Authentication with Expo Auth Session\nDESCRIPTION: Shows how to implement OAuth authentication for Dropbox using expo-auth-session. Includes configuration for authorization endpoints and handling the authentication response.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button, Platform } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: 'https://www.dropbox.com/oauth2/authorize',\n  tokenEndpoint: 'https://www.dropbox.com/oauth2/token',\n};\n\nexport default function App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      scopes: [],\n      redirectUri: makeRedirectUri({\n        scheme: 'your.app',\n      }),\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Usage in React Native with Expo\nDESCRIPTION: Demonstrates how to use the expo-calendar module in a React Native app. It includes requesting calendar permissions, fetching calendars, and creating a new calendar.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\nimport * as Calendar from 'expo-calendar';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\n      if (status === 'granted') {\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\n        console.log('Here are all your calendars:');\n        console.log({ calendars });\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Calendar Module Example</Text>\n      <Button title=\"Create a new calendar\" onPress={createCalendar} />\n    </View>\n  );\n}\n\nasync function getDefaultCalendarSource() {\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\n  return defaultCalendar.source;\n}\n\nasync function createCalendar() {\n  const defaultCalendarSource =\n    Platform.OS === 'ios'\n      ? await getDefaultCalendarSource()\n      : { isLocalAccount: true, name: 'Expo Calendar' };\n  const newCalendarID = await Calendar.createCalendarAsync({\n    title: 'Expo Calendar',\n    color: 'blue',\n    entityType: Calendar.EntityTypes.EVENT,\n    sourceId: defaultCalendarSource.id,\n    source: defaultCalendarSource,\n    name: 'internalCalendarName',\n    ownerAccount: 'personal',\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\n  });\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Modes in app.json (JSON)\nDESCRIPTION: Demonstrates how to modify the app.json file to enable necessary background modes for iOS in Expo projects. The configuration adds required values to the UIBackgroundModes key under infoPlist to support background location, fetch, and remote notifications. This step is mandatory for standalone iOS builds that require background task functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"ios\\\": {\\n      \\\"infoPlist\\\": {\\n        \\\"UIBackgroundModes\\\": [\\\"location\\\", \\\"fetch\\\", \\\"remote-notification\\\"]\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Environment-based Configuration Switching\nDESCRIPTION: Shows how to use environment variables to switch between different configurations in app.config.js.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => {\n  if (process.env.MY_ENVIRONMENT === 'production') {\n    return {\n      /* your production config */\n    };\n  } else {\n    return {\n      /* your development config */\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Enhanced Button Component with Theming\nDESCRIPTION: Extends the Button component to support themes and icons using @expo/vector-icons. Adds conditional rendering for primary themed buttons with different styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Pressable, Text } from 'react-native';\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\n\nexport default function Button({ label, theme }) {\n  if (theme === \"primary\") {\n    return (\n      <View style={[styles.buttonContainer, { borderWidth: 4, borderColor: \"#ffd33d\", borderRadius: 18 }]}>\n        <Pressable\n          style={[styles.button, { backgroundColor: \"#fff\" }]}\n          onPress={() => alert('You pressed a button.')}\n        >\n          <FontAwesome\n            name=\"picture-o\"\n            size={18}\n            color=\"#25292e\"\n            style={styles.buttonIcon}\n          />\n          <Text style={[styles.buttonLabel, { color: \"#25292e\" }]}>{label}</Text>\n        </Pressable>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.buttonContainer}>\n        <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>\n          <Text style={styles.buttonLabel}>{label}</Text>\n        </Pressable>\n      </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Gesture Handlers and Reanimated Hooks\nDESCRIPTION: Imports the necessary components and hooks from react-native-gesture-handler and react-native-reanimated libraries to implement gesture animations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Lottie Animation in React Native (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates a basic React Native functional component that uses the `LottieView` component from 'lottie-react-native' to display an animation. It utilizes `useRef` to get a reference to the animation component and `useEffect` for potential programmatic control (commented out). The `LottieView` is configured to autoplay, load an animation from a local JSON file (`./assets/gradientBall.json`), and includes basic styling. A button is provided to restart the animation using the component's ref.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Communication with Dev Tools Plugin\nDESCRIPTION: Example showing how to directly interact with a dev tools plugin using the useDevToolsPluginClient hook. This allows sending and receiving messages between the app and the plugin's web UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useDevToolsPluginClient } from \"expo/devtools\";\n\nexport default App() {\n  const client = useDevToolsPluginClient('my-devtools-plugin');\n   useEffect(() => {\n    // receive messages\n    client?.addMessageListener(\"ping\", (data) => {\n      alert(`Received ping from ${data.from}`);\n    });\n    // send messages\n    client?.sendMessage(\"ping\", { from: \"app\" });\n   }, []);\n\n  return (/* rest of your app */)\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Package Changes\nDESCRIPTION: Required commands to run after modifying packages, including transpiling TypeScript, linting code, and running tests to ensure code quality and functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint --fix\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Advanced SplashScreen Implementation with Resource Loading\nDESCRIPTION: Example demonstrating splash screen control with async resource loading and API calls before rendering the main component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\n\nexport default class App extends React.Component {\n  state = {\n    appIsReady: false,\n  };\n\n  async componentDidMount() {\n    try {\n      await SplashScreen.preventAutoHideAsync();\n    } catch (e) {\n      console.warn(e);\n    }\n    this.prepareResources();\n  }\n\n  prepareResources = async () => {\n    await performAPICalls(...);\n    await downloadAssets(...);\n\n    this.setState({ appIsReady: true }, async () => {\n      await SplashScreen.hideAsync();\n    });\n  }\n\n  render() {\n    if (!this.state.appIsReady) {\n      return null;\n    }\n\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>SplashScreen Demo! 👋</Text>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aabbcc',\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Path Aliases in tsconfig.json\nDESCRIPTION: Configuration for enabling custom import path aliases in TypeScript, allowing more concise import statements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Expo projects from npm templates\nDESCRIPTION: Shows how to create new Expo projects using templates from npm packages, including using specific versions or local tarballs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/create-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Create from npm\nnpx create-expo --template tabs # Short for expo-template-tabs\nnpx create-expo --template expo-template-tabs\n\n# Create from npm using a semver of the template\nnpx create-expo --template expo-template-blank@50\n\n# Create from local tarball created with `npm pack`\nnpx create-expo --template ./path/to/template.tgz\n```\n\n----------------------------------------\n\nTITLE: Implementing Native View with Text Property\nDESCRIPTION: Shows how to create a native view with a text property and focus function implementation for both iOS and Android platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nView(UITextView.self) {\n  Prop(\"text\") { ... }\n\n  AsyncFunction(\"focus\") { (view: UITextView) in\n    view.becomeFirstResponder()\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nView(TextView::class) {\n  Prop(\"text\") { ... }\n\n  AsyncFunction(\"focus\") { view: TextView ->\n    view.requestFocus()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asgardeo Authentication in Expo\nDESCRIPTION: Integration example for Asgardeo OAuth2/OpenID Connect authentication in an Expo app. Includes token handling and user profile display with JWT decoding.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Button, Alert } from 'react-native';\nimport * as AuthSession from \"expo-auth-session\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport jwtDecode from \"jwt-decode\";\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst redirectUri = AuthSession.makeRedirectUri();\n\nconst CLIENT_ID = \"YOUR_CLIENT_ID\";\n\nexport default function App() {\n    const discovery = AuthSession.useAutoDiscovery('https://api.asgardeo.io/t/<YOUR_ORG_NAME>/oauth2/token');\n    const [tokenResponse, setTokenResponse] = useState({});\n    const [decodedIdToken, setDecodedIdToken] = useState({});\n\n    const [request, result, promptAsync] = AuthSession.useAuthRequest(\n        {\n            redirectUri,\n            clientId: CLIENT_ID,\n            responseType: \"code\",\n            scopes: [\"openid\", \"profile\", \"email\"]\n        },\n        discovery\n    );\n\n    const getAccessToken = () => {\n      if (result?.params?.code) {\n        fetch(\n        \"https://api.asgardeo.io/t/iamapptesting/oauth2/token\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: `grant_type=authorization_code&code=${result?.params?.code}&redirect_uri=${redirectUri}&client_id=${CLIENT_ID}&code_verifier=${request?.codeVerifier}`\n          }).then((response) => {\n              return response.json();\n            }).then((data) => {\n              setTokenResponse(data);\n              setDecodedIdToken(jwtDecode(data.id_token));\n            }).catch((err) => {\n              console.log(err);\n            });\n        }\n    }\n\n    useEffect(() => {\n      (async function setResult() {\n        if (result) {\n          if (result.error) {\n            Alert.alert(\n              \"Authentication error\",\n              result.params.error_description || \"something went wrong\"\n            );\n            return;\n          }\n          if (result.type === \"success\") {\n            getAccessToken();\n          }\n        }\n      })();\n    }, [result]);\n\n\n    return (\n      <View style={styles.container}>\n        <Button title=\"Login\" disabled={!request} onPress={() => promptAsync()} />\n        {decodedIdToken && <Text>Welcome {decodedIdToken.given_name || \"\"}!</Text>}\n        {decodedIdToken && <Text>{decodedIdToken.email}</Text>}\n        <View style={styles.accessTokenBlock}>\n          decodedToken && <Text>Access Token: {tokenResponse.access_token}</Text>\n        </View>\n      </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    accessTokenBlock: {\n        width: 300,\n        height: 500,\n        overflow: \"scroll\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project with create-expo-app\nDESCRIPTION: This command initializes a new Expo project using the latest version of create-expo-app. It creates a default project structure with example code to help developers get started.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/get-started/create-a-project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Navigation Layout\nDESCRIPTION: Implements the main tab navigation layout with custom styling and icon configuration using FontAwesome icons for Home and Settings tabs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs screenOptions={{ tabBarActiveTintColor: 'blue' }}>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color }) => <FontAwesome size={28} name=\"home\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"settings\"\n        options={{\n          title: 'Settings',\n          tabBarIcon: ({ color }) => <FontAwesome size={28} name=\"cog\" color={color} />,\n        }}\n      />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in Metro Configuration (JavaScript)\nDESCRIPTION: This JavaScript configuration snippet shows how to enable CSS support (including CSS Modules) in an Expo project (SDK 49+) by modifying the `metro.config.js` file. It uses `getDefaultConfig` from `expo/metro-config` and sets the `isCSSEnabled` option to `true`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js metro.config.js\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Enable CSS support.\n  isCSSEnabled: true,\n});\n\nmodule.exports = config;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Audio.Sound Object in JavaScript\nDESCRIPTION: Creating and initializing an Audio.Sound playback object with options to play audio in silent mode on iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\n\nconst playbackObject = new Audio.Sound();\n// OR\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\n  { uri: 'http://foo/bar.mp3' },\n  { shouldPlay: true }\n);\n...\n```\n\n----------------------------------------\n\nTITLE: App Component Integration with Emoji Picker\nDESCRIPTION: Integration of EmojiPicker and EmojiList components in the main App component, including state management for modal visibility and emoji selection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [pickedEmoji, setPickedEmoji] = useState(null);\n\n  return (\n    <View style={styles.container}>\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />\n      </EmojiPicker>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Opening an Existing Database Asset in Expo SQLite (TypeScript)\nDESCRIPTION: This TypeScript function demonstrates how to copy a bundled SQLite .db asset into the app's local SQLite directory and open it using expo-sqlite. It depends on expo-file-system for directory creation/copying, expo-asset for asset access, and expo-sqlite/legacy for database opening. The function takes the module path to the .db file, ensures the required directories exist, copies the asset, and returns an open SQLiteDatabase instance.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\\nimport * as SQLite from 'expo-sqlite/legacy';\\nimport { Asset } from 'expo-asset';\\n\\nasync function openDatabase(pathToDatabaseFile: string): Promise<SQLite.SQLiteDatabase> {\\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\\n  }\\n  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();\\n  await FileSystem.copyAsync({\\n    from: asset.localUri,\\n    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',\\n  });\\n  return SQLite.openDatabase('myDatabaseName.db');\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Text-to-Speech in React Native with Expo\nDESCRIPTION: Example of implementing a basic text-to-speech function in a React Native application using expo-speech. The code creates a simple button that speaks the number '1' when pressed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Custom Sounds for Android Notifications (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates how to manually set up and use a custom notification sound on Android, accounting for different OS versions. For Android 8.0+, it sets the sound within a notification channel using `setNotificationChannelAsync` and references the `channelId` in `scheduleNotificationAsync`. For older versions, the sound is specified directly in the notification content. Requires placing the sound file (e.g., 'email-sound.wav') in 'android/app/src/main/res/raw/'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below\n});\n\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email-sound.wav', // <- for Android below 8.0\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails', // <- for Android 8.0+, see definition above\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Expo Module in React Native App\nDESCRIPTION: Example React Native component demonstrating how to import and use a custom Expo module. Shows basic implementation of the Settings module with a text display.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/use-standalone-expo-module-in-your-project.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Settings from 'expo-settings';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{Settings.hello()}</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EAS Secrets with CLI\nDESCRIPTION: This command shows how to create a new project-scoped secret using the EAS CLI. The secret will be encrypted and available as an environment variable in EAS builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas secret:create --scope project --name SECRET_NAME --value secretvalue --type string\n✔ ️Created a new secret SECRET_NAME on project @fiberjw/goodweebs.\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Constants Module\nDESCRIPTION: Shows how to import the Constants module from expo-constants package to access system information in an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: Capturing and Saving Screenshots in React Native\nDESCRIPTION: Implementation of the onSaveImageAsync function that captures a screenshot of a referenced View using captureRef and saves it to the device's media library using MediaLibrary.saveToLibraryAsync.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  const onSaveImageAsync = async () => {\n    try {\n      const localUri = await captureRef(imageRef, {\n        height: 440,\n        quality: 1,\n      });\n\n      await MediaLibrary.saveToLibraryAsync(localUri);\n      if (localUri) {\n        alert(\"Saved!\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  // ...rest of the code remains same\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Screen with Web Dismiss Behavior\nDESCRIPTION: Implements modal screen with web-specific dismiss behavior using router.canGoBack() for handling navigation state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, router } from 'expo-router';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Modal() {\n  const isPresented = router.canGoBack();\n\n  return (\n    <View style={styles.container}>\n      <Text>Modal screen</Text>\n      {!isPresented && <Link href=\"../\">Dismiss modal</Link>}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo LocalAuthentication Plugin in app.json (JSON)\nDESCRIPTION: This snippet demonstrates how to integrate the expo-local-authentication config plugin into an app.json file to enable biometric authentication features in an Expo project. It specifies the plugin alongside a custom faceIDPermission string for iOS builds, which sets the NSFaceIDUsageDescription used by the native system dialog. This configuration is necessary when building the app with config plugins (EAS Build or npx expo run) and ensures that the proper permission message is displayed to users during biometric prompts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \"expo\": {\\n    \"plugins\": [\\n      [\\n        \"expo-local-authentication\",\\n        {\\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Android Location Settings Intent with Expo IntentLauncher (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `startActivityAsync` function from the `expo-intent-launcher` package to open the device's location settings screen on Android. It imports the necessary `startActivityAsync` function and the `ActivityAction` enum, then calls the function with the `ActivityAction.LOCATION_SOURCE_SETTINGS` constant.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Progress Tracking in React Native\nDESCRIPTION: Example showing how to download files with progress tracking, pause/resume functionality, and persistence across app restarts using FileSystem.DownloadResumable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = downloadProgress => {\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  this.setState({\n    downloadProgress: progress,\n  });\n};\n\nconst downloadResumable = FileSystem.createDownloadResumable(\n  'http://techslides.com/demos/sample-videos/small.mp4',\n  FileSystem.documentDirectory + 'small.mp4',\n  {},\n  callback\n);\n\ntry {\n  const { uri } = await downloadResumable.downloadAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  await downloadResumable.pauseAsync();\n  console.log('Paused download operation, saving for future retrieval');\n  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n\nconst downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');\nconst downloadSnapshot = JSON.parse(downloadSnapshotJson);\nconst downloadResumable = new FileSystem.DownloadResumable(\n  downloadSnapshot.url,\n  downloadSnapshot.fileUri,\n  downloadSnapshot.options,\n  callback,\n  downloadSnapshot.resumeData\n);\n\ntry {\n  const { uri } = await downloadResumable.resumeAsync();\n  console.log('Finished downloading to ', uri);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Android build.gradle for JS Engine Configuration\nDESCRIPTION: Diff showing changes to android/app/build.gradle to check for JS engine configuration in Expo files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- a/android/app/build.gradle\n+++ b/android/app/build.gradle\n@@ -52,6 +52,11 @@ react {\n     // hermesFlags = [\"-O\", \"-output-source-map\"]\n }\n\n+// Override `hermesEnabled` by `expo.jsEngine`\n+ext {\n+  hermesEnabled = (findProperty('expo.jsEngine') ?: \"hermes\") == \"hermes\"\n+}\n+\n /**\n  * Set this to true to create four separate APKs instead of one,\n  * one for each native architecture. This is useful if you don't\n```\n\n----------------------------------------\n\nTITLE: Optimizing Image Assets with expo-optimize\nDESCRIPTION: This command uses the expo-optimize tool to compress image assets in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/optimize-assets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo-optimize\n```\n\n----------------------------------------\n\nTITLE: Setting Up SafeAreaProvider in JSX\nDESCRIPTION: Shows how to set up the SafeAreaProvider component at the root of the application to provide context for safe area insets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic MapView in React Native (JSX)\nDESCRIPTION: This React Native code snippet demonstrates the basic usage of the `MapView` component from the `react-native-maps` library. It imports the necessary components (`React`, `MapView`, `StyleSheet`, `View`) and renders a full-screen map within a simple functional component `App`. Styling is applied using `StyleSheet` to make the map fill its container. This example assumes `react-native-maps` is installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a controlled media loop counter\nDESCRIPTION: Example showing how to control media looping by tracking the number of completed loops, setting up a state-based approach to loop media exactly 20 times.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst N = 20;\n/* @hide ... */ /* @end */\n\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (playbackStatus.didJustFinish) {\n    if (this.state.numberOfLoops == N - 1) {\n      playbackObject.setIsLooping(false);\n    }\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\n  }\n};\n\n/* @hide ... */ /* @end */\nthis.setState({ numberOfLoops: 0 });\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\nplaybackObject.setIsLooping(true);\n```\n\n----------------------------------------\n\nTITLE: Running Expo Project on iOS Device\nDESCRIPTION: This command builds and runs the Expo project on a connected iOS device. It also starts a development server, eliminating the need to run 'npx expo start' separately.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuildLocal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:ios --device\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook to Access Insets in React Native/JSX\nDESCRIPTION: This example demonstrates the useSafeAreaInsets hook from react-native-safe-area-context, which gives direct access to the current safe area insets object within a functional React component. The hook returns an object containing top, right, bottom, and left insets, which can then be applied to styles. It requires the SafeAreaProvider to be present higher in the component tree and may be less performant than SafeAreaView on device rotation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GLView Implementation in React Native\nDESCRIPTION: Shows how to set up a basic GLView component and implement OpenGL ES rendering with vertex and fragment shaders to draw a point.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GLView } from 'expo-gl';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 1, 1, 1);\n\n  // Create vertex shader (shape & position)\n  const vert = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(\n    vert,\n    `\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n      gl_PointSize = 150.0;\n    }\n  `\n  );\n  gl.compileShader(vert);\n\n  // Create fragment shader (color)\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(\n    frag,\n    `\n    void main(void) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  `\n  );\n  gl.compileShader(frag);\n\n  // Link together into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.POINTS, 0, 1);\n\n  gl.flush();\n  gl.endFrameEXP();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dismiss Action in Expo Router\nDESCRIPTION: Demonstrates how to implement the dismiss navigation action using useRouter hook. The dismiss action removes the last screen from the closest stack, with optional parameter to dismiss multiple screens.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, View } from 'react-native';\nimport { useRouter } from 'expo-router';\n\nexport default function Settings() {\n  const router = useRouter();\n\n  const handleDismiss = (count: number) => {\n    router.dismiss(count)\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Go to first screen\" onPress={() => handleDismiss(3)} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Brightness Usage in React Native\nDESCRIPTION: This snippet demonstrates how to use the expo-brightness module to set the system brightness to maximum when the component mounts, after requesting user permissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Brightness from 'expo-brightness';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        Brightness.setSystemBrightnessAsync(1);\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Brightness Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useSQLiteContext() hook with React.Suspense in Expo React Native\nDESCRIPTION: This snippet demonstrates how to use the useSQLiteContext() hook with React.Suspense to show a fallback component while the database is initializing. It uses the SQLiteProvider component with the useSuspense prop.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { Suspense } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback={<Fallback />}>\n        <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded} useSuspense>\n          <Header />\n          <Content />\n        </SQLiteProvider>\n      </Suspense>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Tracking Permissions with expo-tracking-transparency (React Native JSX)\nDESCRIPTION: This React Native component illustrates how to utilize the requestTrackingPermissionsAsync API from expo-tracking-transparency to request tracking permissions at runtime. Upon mounting, useEffect triggers the permission request and displays a console message if granted. The component renders a basic view with an informational text. Dependencies include expo-tracking-transparency and react-native. Inputs: none; Output: user permission status and UI message. This should be used on iOS 14+ only, as permission is always granted on earlier versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { Text, StyleSheet, View } from 'react-native';\\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const { status } = await requestTrackingPermissionsAsync();\\n      if (status === 'granted') {\\n        console.log('Yay! I have user permission to track data');\\n      }\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Tracking Transparency Module Example</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Storage in React Native with expo-secure-store\nDESCRIPTION: A complete React Native example showing how to save and retrieve key-value pairs securely using expo-secure-store. The example includes UI components for input and display of stored values.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nasync function save(key, value) {\n  await SecureStore.setItemAsync(key, value);\n}\n\nasync function getValueFor(key) {\n  let result = await SecureStore.getItemAsync(key);\n  if (result) {\n    alert(\"🔐 Here's your value 🔐 \\n\" + result);\n  } else {\n    alert('No values stored under that key.');\n  }\n}\n\nexport default function App() {\n  const [key, onChangeKey] = useState('Your key here');\n  const [value, onChangeValue] = useState('Your value here');\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\n      {/* @hide Add some TextInput components... */}\n\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeKey(text)}\n        value={key}\n      />\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeValue(text)}\n        value={value}\n      />\n      {/* @end */}\n      <Button\n        title=\"Save this key/value pair\"\n        onPress={() => {\n          save(key, value);\n          onChangeKey('Your key here');\n          onChangeValue('Your value here');\n        }}\n      />\n      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>\n      <TextInput\n        style={styles.textInput}\n        onSubmitEditing={event => {\n          getValueFor(event.nativeEvent.text);\n        }}\n        placeholder=\"Enter the key for the value you want to get\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: 10,\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n  paragraph: {\n    marginTop: 34,\n    margin: 24,\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  textInput: {\n    height: 35,\n    borderColor: 'gray',\n    borderWidth: 0.5,\n    padding: 4,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Screen Capture with Functions in Expo\nDESCRIPTION: This example shows how to use ScreenCapture functions to add a screenshot listener, prevent and allow screen capture, and handle permissions. It includes buttons to activate and deactivate screen capture prevention.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport * as ScreenCapture from 'expo-screen-capture';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function ScreenCaptureExample() {\n  useEffect(() => {\n    if (hasPermissions()) {\n      const subscription = ScreenCapture.addScreenshotListener(() => {\n        alert('Thanks for screenshotting my beautiful app 😊');\n      });\n      return () => subscription.remove();\n    }\n  }, []);\n\n  const hasPermissions = async () => {\n    const { status } = await MediaLibrary.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the Audio API from Expo-AV (JS)\nDESCRIPTION: Shows the minimal import statement required to use the Audio API from the expo-av library. Required as the entry point for any expo-av audio functionality in both React Native and Expo environments. There are no configuration parameters or runtime effects directly from this statement; it's a prerequisite for all further use of the Audio features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/audio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Audio } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Animation with Reanimated in React Native\nDESCRIPTION: This example demonstrates how to use the react-native-reanimated library to create a simple animation. It imports necessary functions from Reanimated, sets up a shared value, defines animation configuration, and creates an animated style.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/reanimated.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS.json for Maestro Tests\nDESCRIPTION: JSON configuration that adds a build profile for running Maestro tests on EAS Build. It configures the build for both Android and iOS platforms using the latest build images.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/e2e-tests.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"build-and-maestro-test\": {\n      \"withoutCredentials\": true,\n      \"config\": \"build-and-maestro-test.yml\",\n      \"android\": {\n        \"buildType\": \"apk\",\n        \"image\": \"latest\"\n      },\n      \"ios\": {\n        \"simulator\": true,\n        \"image\": \"latest\"\n      }\n    }\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a One-time Notification with Delay in TypeScript\nDESCRIPTION: Example of scheduling a notification that will trigger once after a 60-second delay using the scheduleNotificationAsync method.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: \"Time's up!\",\n    body: 'Change sides!',\n  },\n  trigger: {\n    seconds: 60,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Gradients in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the LinearGradient component from expo-linear-gradient to create gradient backgrounds and buttons in a React Native application. It shows two gradient examples: a background gradient and a button gradient.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        // Background Linear Gradient\n        colors={['rgba(0,0,0,0.8)', 'transparent']}\n        style={styles.background}\n      />\n      <LinearGradient\n        // Button Linear Gradient\n        colors={['#4c669f', '#3b5998', '#192f6a']}\n        style={styles.button}>\n        <Text style={styles.text}>Sign in with Facebook</Text>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'orange',\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: 300,\n  },\n  button: {\n    padding: 15,\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  text: {\n    backgroundColor: 'transparent',\n    fontSize: 15,\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Channel and Scheduling Notification on Android\nDESCRIPTION: Example of setting up a notification channel with a custom sound and scheduling a notification on Android. This code demonstrates how to handle custom sounds for Android 8.0+ and below.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below\n});\n\n// Eg. schedule the notification\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'email-sound.wav', // <- for Android below 8.0\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails', // <- for Android 8.0+, see definition above\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete BlurView Implementation Example\nDESCRIPTION: Comprehensive example demonstrating BlurView usage with different intensity levels and tint colors, including styling and layout configuration\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { BlurView } from 'expo-blur';\n\nexport default function App() {\n  const text = 'Hello, my container is blurring contents underneath!';\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.background}>\n        {[...Array(20).keys()].map(i => (\n          <View\n            key={`box-${i}`}\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\n          />\n        ))}\n      </View>\n      <BlurView intensity={100} style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\n      </BlurView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  blurContainer: {\n    flex: 1,\n    padding: 20,\n    margin: 16,\n    textAlign: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    borderRadius: 20,\n  },\n  background: {\n    flex: 1,\n    flexWrap: 'wrap',\n    ...StyleSheet.absoluteFill,\n  },\n  box: {\n    width: '25%',\n    height: '20%',\n  },\n  boxEven: {\n    backgroundColor: 'orangered',\n  },\n  boxOdd: {\n    backgroundColor: 'gold',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch OAuth Authentication in React Native\nDESCRIPTION: This snippet demonstrates how to set up Twitch OAuth authentication using Expo's authentication module. It includes the necessary imports, configuration, and a button component to initiate the login process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: 'https://id.twitch.tv/oauth2/authorize',\n  tokenEndpoint: 'https://id.twitch.tv/oauth2/token',\n  revocationEndpoint: 'https://id.twitch.tv/oauth2/revoke',\n};\n\nexport default function App() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: 'CLIENT_ID',\n      redirectUri: makeRedirectUri({\n        scheme: 'your.app'\n      }),\n      scopes: ['user:read:email', 'analytics:read:games'],\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title=\"Login\"\n      onPress={() => {\n        promptAsync();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Not Found Screen in Expo Router (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a not-found screen to handle 404 errors in Expo Router. It includes a Stack.Screen for setting the title and a Link component for navigation back to the home screen.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, Stack } from 'expo-router';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: \"Oops! This screen doesn't exist.\" }} />\n      <View style={styles.container}>\n        <Link href=\"/\">Go to home screen</Link>\n      </View>\n    </>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Expo prebuild for Android and iOS\nDESCRIPTION: Commands to build native Android and iOS projects using Expo CLI. This process generates the native code directories and allows for custom native development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/customizing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build your native Android project\n$ npx expo run:android\n\n# Build your native iOS project\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Database with SQLiteProvider in React Native\nDESCRIPTION: This example demonstrates how to use an existing SQLite database file with the SQLiteProvider component in a React Native application. The provider makes the database accessible throughout the component tree.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" assetSource={{ assetId: require('./assets/test.db') }}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core Components and Hooks from react-native-safe-area-context\nDESCRIPTION: This snippet shows the primary imports needed to use the `react-native-safe-area-context` library. It imports the `SafeAreaView` component, `SafeAreaProvider` for context setup, `SafeAreaInsetsContext` for direct context consumption, and the `useSafeAreaInsets` hook.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Using Screen Capture Prevention Hook in React Native\nDESCRIPTION: Example showing how to use the usePreventScreenCapture hook to prevent screen recording of a component. The protection remains active as long as the component is mounted.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase JS SDK in Expo\nDESCRIPTION: This snippet shows how to initialize the Firebase JS SDK in an Expo project. It creates a Firebase configuration object and initializes the app using the initializeApp function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-firebase.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initializeApp } from 'firebase/app';\n\n// Optionally import the services that you want to use\n// import {...} from \"firebase/auth\";\n// import {...} from \"firebase/database\";\n// import {...} from \"firebase/firestore\";\n// import {...} from \"firebase/functions\";\n// import {...} from \"firebase/storage\";\n\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: 'api-key',\n  authDomain: 'project-id.firebaseapp.com',\n  databaseURL: 'https://project-id.firebaseio.com',\n  projectId: 'project-id',\n  storageBucket: 'project-id.appspot.com',\n  messagingSenderId: 'sender-id',\n  appId: 'app-id',\n  measurementId: 'G-measurement-id',\n};\n\nconst app = initializeApp(firebaseConfig);\n// For more information on how to access Firebase in your project,\n// see the Firebase documentation: https://firebase.google.com/docs/web/setup#access-firebase\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Gyroscope Functionality in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the Gyroscope module from expo-sensors to access and display gyroscope data in a React Native application. It includes functions to subscribe/unsubscribe to gyroscope updates and adjust the update interval.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Gyroscope } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Gyroscope.setUpdateInterval(1000);\n  const _fast = () => Gyroscope.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Gyroscope.addListener(gyroscopeData => {\n        setData(gyroscopeData);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Gyroscope:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Configuration with JavaScript\nDESCRIPTION: An example of using app.config.js for dynamic configuration. It demonstrates using environment variables and custom values.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myValue = 'My App';\n\nmodule.exports = {\n  name: myValue,\n  version: process.env.MY_CUSTOM_PROJECT_VERSION || '1.0.0',\n  // All values in extra will be passed to your app.\n  extra: {\n    fact: 'kittens are cool',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Printing Local Base64 Images with expo-print in JavaScript\nDESCRIPTION: Provides a utility that enables printing of a local image asset as an inline base64-encoded string in HTML, which is necessary for iOS compatibility. Dependencies: expo-print, expo-image-manipulator, and expo-asset. Parameters include the asset module reference; output is an HTML string or printing the image. Required for local images to appear in print output on iOS. Limitations: only supports images converted to base64, cannot use plain asset URLs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Apollo Client Dev Tools in Expo App\nDESCRIPTION: Example showing how to connect the Apollo Client dev tools plugin to an Expo app. The Apollo client instance is passed to the plugin hook for inspection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useApolloClientDevTools } from '@dev-plugins/apollo-client';\n\nconst client = new ApolloClient({\n  uri: 'https://demo.test.com/',\n  cache: new InMemoryCache(),\n});\n\nexport default function App() {\n  useApolloClientDevTools(client);\n\n  return <ApolloProvider>{/* ... */}</ApolloProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Constants Module\nDESCRIPTION: Basic import statement for using the expo-constants package to access system information in an Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook\nDESCRIPTION: Example of using the useSafeAreaInsets hook to access safe area insets directly.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build for Android Development Profile\nDESCRIPTION: This command creates an Android development build using the EAS Build service with the development profile specified in eas.json. It generates an .apk file that can be installed on Android devices or emulators.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/android-development-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --profile development\n```\n\n----------------------------------------\n\nTITLE: Rendering Styled Text in React Native TextInput\nDESCRIPTION: This snippet demonstrates how to render styled text within a TextInput component using nested Text components. It shows how to apply bold styling to a portion of the text.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/editing-richtext.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextInput>\n  <Text>\n    <Text style={{ fontWeight: 900 }}>Some bold text</Text>Some regular text\n  </Text>\n</TextInput>\n```\n\n----------------------------------------\n\nTITLE: Fetching Network State Once with NetInfo in JavaScript\nDESCRIPTION: Demonstrates how to use the `NetInfo.fetch()` method to retrieve the current network connection state asynchronously just once. The returned promise resolves with a state object containing details like connection `type` and `isConnected` status.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules in EAS Build Pre-Install Hook\nDESCRIPTION: This bash script creates an SSH configuration to access private git submodules. It restores a private SSH key from an environment variable, sets appropriate permissions, generates the public key, adds the git provider to known hosts, and initializes all submodules. This should be saved as eas-build-pre-install.sh and configured as a pre-install hook.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/git-submodules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nmkdir -p ~/.ssh\n\n# Real origin URL is lost during the packaging process, so if your\n# submodules are defined using relative urls in .gitmodules then\n# you need to restore it with:\n#\n# git remote set-url origin git@github.com:example/repo.git\n\n# restore private key from env variable and generate public key\necho \"$SSH_KEY_BASE64\" | base64 -d > ~/.ssh/id_rsa\nchmod 0600 ~/.ssh/id_rsa\nssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub\n\n# add your git provider to the list of known hosts\nssh-keyscan github.com >> ~/.ssh/known_hosts\n\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Creating URLs for Deep Linking with Expo Linking\nDESCRIPTION: Demonstrates how to use Linking.createURL() to generate deep link URLs that work across different environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst redirectUrl = Linking.createURL('path/into/app', {\n  queryParams: { hello: 'world' },\n});\n```\n\n----------------------------------------\n\nTITLE: Example App Implementation\nDESCRIPTION: Basic example showing how to use the WebView component in a React Native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebView } from 'expo-web-view';\n\nexport default function App() {\n  return <WebView style={{ flex: 1, backgroundColor: 'purple' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Background Location Tracking Example in React Native\nDESCRIPTION: Complete example demonstrating how to implement background location tracking using expo-task-manager and expo-location. Shows permission handling, task definition, and UI implementation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/task-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\n\nconst LOCATION_TASK_NAME = 'background-location-task';\n\nconst requestPermissions = async () => {\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\n  if (foregroundStatus === 'granted') {\n    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\n    if (backgroundStatus === 'granted') {\n      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n        accuracy: Location.Accuracy.Balanced,\n      });\n    }\n  }\n};\n\nconst PermissionsButton = () => (\n  <View style={styles.container}>\n    <Button onPress={requestPermissions} title=\"Enable background location\" />\n  </View>\n);\n\nTaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {\n  if (error) {\n    // Error occurred - check `error.message` for more details.\n    return;\n  }\n  if (data) {\n    const { locations } = data;\n    // do something with the locations captured in the background\n  }\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default PermissionsButton;\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.config.js for Expo\nDESCRIPTION: This snippet shows how to use the expo-build-properties plugin in an app.config.js file to customize Android and iOS build properties using JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  expo: {\n    plugins: [\n      [\n        'expo-build-properties',\n        {\n          android: {\n            compileSdkVersion: 31,\n            targetSdkVersion: 31,\n            buildToolsVersion: '31.0.0',\n          },\n          ios: {\n            deploymentTarget: '13.0',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry in Expo App\nDESCRIPTION: JavaScript code to initialize Sentry in the main file of an Expo app, such as App.js. This sets up the basic configuration for error tracking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from 'sentry-expo';\n\nSentry.init({\n  dsn: 'YOUR DSN HERE',\n  enableInExpoDevelopment: true,\n  debug: true, // If `true`, Sentry will try to print out useful debugging information if something goes wrong with sending the event. Set it to `false` in production\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with React Native CLI and npm\nDESCRIPTION: Complete set of commands to clear all development caches when using React Native CLI with npm, including node_modules, npm cache, watchman, and Metro bundler caches.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n\n$ npm cache clean --force\n\n$ npm install\n\n$ watchman watch-del-all\n\n$ rm -fr $TMPDIR/haste-map-*\n\n$ rm -rf $TMPDIR/metro-cache\n\n$ npm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Directives - CSS\nDESCRIPTION: Defines the global.css stylesheet with required Tailwind CSS directives. This file ensures Tailwind utility classes are available by including the 'base', 'components', and 'utilities' layers through '@tailwind' statements. Required dependency: 'tailwindcss'. Input is stylesheet import, output is generated CSS utilities for use in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n/* This file adds the requisite utility classes for Tailwind to work. */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entry File in package.json\nDESCRIPTION: Package.json configuration to specify a custom main entry file instead of the default App.js.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling iOS Notification with Custom Sound (TypeScript)\nDESCRIPTION: TypeScript code showing how to schedule a notification on iOS with a custom sound file. The sound file needs to be included in the Xcode project resources.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Haptic Feedback in React Native with Expo\nDESCRIPTION: A comprehensive example showing implementation of different haptic feedback types including selection, notification, and impact feedback. The code demonstrates usage of various haptic intensities and feedback styles with proper UI layout and styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => Haptics.selectionAsync()} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              )\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              )\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              )\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)\n          }\n        />\n        <Button\n          title=\"Rigid\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid)\n          }\n        />\n        <Button\n          title=\"Soft\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft)\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-notifications Plugin in app.json\nDESCRIPTION: Provides an example configuration snippet for the `expo-notifications` plugin within the `expo.plugins` array in an `app.json` file. It demonstrates how to set build-time configurations such as the notification icon path (`icon`), Android notification color tint (`color`), and custom notification sound files (`sounds`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n app.json\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification-icon.png\",\n          \"color\": \"#ffffff\",\n          \"sounds\": [\n            \"./local/assets/notification-sound.wav\",\n            \"./local/assets/notification-sound-other.wav\"\n          ]\n        }\n      ]\n    ]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Managing Screen Capture and Listening for Screenshots in React Native\nDESCRIPTION: This React Native component demonstrates using imperative functions from `expo-screen-capture`. It includes functions to activate (`preventScreenCaptureAsync`) and deactivate (`allowScreenCaptureAsync`) screen capture prevention manually via buttons. It also sets up a listener (`addScreenshotListener`) within a `useEffect` hook to detect when a screenshot is taken, after checking for necessary permissions using `expo-media-library`. Dependencies include `expo-screen-capture` and `expo-media-library`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport * as ScreenCapture from 'expo-screen-capture';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function ScreenCaptureExample() {\n  useEffect(() => {\n    if (hasPermissions()) {\n      const subscription = ScreenCapture.addScreenshotListener(() => {\n        alert('Thanks for screenshotting my beautiful app 😊');\n      });\n      return () => subscription.remove();\n    }\n  }, []);\n\n  const hasPermissions = async () => {\n    const { status } = await MediaLibrary.requestPermissionsAsync();\n    return status === 'granted';\n  };\n\n  const activate = async () => {\n    await ScreenCapture.preventScreenCaptureAsync();\n  };\n\n  const deactivate = async () => {\n    await ScreenCapture.allowScreenCaptureAsync();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Activate\" onPress={activate} />\n      <Button title=\"Deactivate\" onPress={deactivate} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Android Intent for Location Settings in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the expo-intent-launcher library to open the location settings on an Android device. It imports the necessary functions and uses startActivityAsync with the LOCATION_SOURCE_SETTINGS action.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Hiding Bottom Tab Navigator on Keyboard Open in Expo Router\nDESCRIPTION: This snippet configures the Bottom Tab Navigator to hide when the keyboard opens using the tabBarHideOnKeyboard option. It's implemented in the app's layout file using Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarHideOnKeyboard: true,\n      }}>\n      <Tabs.Screen name=\"index\" />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS URL Scheme in Expo app.json\nDESCRIPTION: Configuration snippet showing how to add the iOS URL scheme to the app.json config file for Google authentication. The URL scheme is obtained from the Google API console and needs to be added to the iOS.infoPlist configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/google-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"infoPlist\": {\n      \"CFBundleURLTypes\": [\n        {\n          \"CFBundleURLSchemes\": [\"com.googleusercontent.apps.17898xxxxxx-xxxxxqhqj0exxxxxpl03xxx\"]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading store configuration with EAS CLI\nDESCRIPTION: This command pushes your store configuration defined in store.config.json to app stores. Before running this command, you must have uploaded a binary of your app to the app stores. The command will warn about any issues with your store config.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/deploy/app-stores-metadata.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas metadata:push\n```\n\n----------------------------------------\n\nTITLE: Configuring `expo-local-authentication` Plugin in JSON\nDESCRIPTION: This JSON snippet shows how to configure the `expo-local-authentication` plugin within an Expo project's `app.json` or `app.config.js`. It demonstrates setting the `faceIDPermission` property, which customizes the message displayed to the user when requesting Face ID permission on iOS. This configuration is applied during the build process when using Expo's config plugin system (e.g., with EAS Build or `npx expo prebuild`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-local-authentication\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageBackground Component in React Native/Expo\nDESCRIPTION: Complete example showing how to use ImageBackground to create a component with a background image. The code demonstrates proper component structure, styling for container and image scaling, and overlaying text content on the background image.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/image-background.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageBackground, StyleSheet, Text, View } from 'react-native';\n\nconst image = { uri: \"https://docs.expo.dev/static/images/tutorial/background-image.png\" };\n\nexport default function App() {\n  return (\n  <View style={styles.container}>\n    <ImageBackground source={image} style={styles.image}>\n      <Text style={styles.text}>Elements</Text>\n      <Text style={styles.text}>in Front of</Text>\n      <Text style={styles.text}>Background</Text>\n    </ImageBackground>\n  </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n  },\n  image: {\n    flex: 1,\n    resizeMode: 'cover',\n    justifyContent: 'center',\n  },\n  text: {\n    color: 'white',\n    fontSize: 42,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    backgroundColor: '#000000a0',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Network API in JavaScript\nDESCRIPTION: Demonstrates how to import all Network functions from the expo-network package, enabling access to device-level network information in a JavaScript or React Native project. This import is necessary for further usage of API functions such as obtaining IP or MAC addresses. No special parameters are required for this import; dependencies include a configured React Native or Expo project and the expo-network package installed. The output is a Network namespace object containing the available API methods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-image-picker Plugin in app.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `expo-image-picker` config plugin within the `app.json` or `app.config.js` file. It specifically shows setting a custom message for the `photosPermission` on iOS, which corresponds to the `NSPhotoLibraryUsageDescription` key in Info.plist.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Podfile for Expo Modules Autolinking\nDESCRIPTION: Configuration required in the iOS Podfile to enable autolinking mechanism for Expo modules. Includes required imports and target configuration. Must be followed by running pod install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Podfile\n\nrequire File.join(File.dirname(`node --print \"require.resolve('react-native/package.json')'\"`), \"scripts/react_native_pods\")\nrequire File.join(File.dirname(`node --print \"require.resolve('expo-modules-core/package.json')'\"`), \"cocoapods.rb\")\nrequire File.join(File.dirname(`node --print \"require.resolve('expo-modules-core/package.json')'\"`), \"scripts/autolinking\")\n\n#  ...\n\ntarget \"TargetName\" do\n  use_unimodules!\n  config = use_native_modules!\n  use_react_native!(:path => config[\"reactNativePath\"])\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing SecureStore in React Native\nDESCRIPTION: Complete React Native example showing how to implement secure storage with save and retrieve functionality using expo-secure-store.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Text, View, StyleSheet, TextInput, Button } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nasync function save(key, value) {\n  await SecureStore.setItemAsync(key, value);\n}\n\nasync function getValueFor(key) {\n  let result = await SecureStore.getItemAsync(key);\n  if (result) {\n    alert(\"🔐 Here's your value 🔐 \\n\" + result);\n  } else {\n    alert('No values stored under that key.');\n  }\n}\n\nexport default function App() {\n  const [key, onChangeKey] = useState('Your key here');\n  const [value, onChangeValue] = useState('Your value here');\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeKey(text)}\n        value={key}\n      />\n      <TextInput\n        style={styles.textInput}\n        clearTextOnFocus\n        onChangeText={text => onChangeValue(text)}\n        value={value}\n      />\n      <Button\n        title=\"Save this key/value pair\"\n        onPress={() => {\n          save(key, value);\n          onChangeKey('Your key here');\n          onChangeValue('Your value here');\n        }}\n      />\n      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>\n      <TextInput\n        style={styles.textInput}\n        onSubmitEditing={event => {\n          getValueFor(event.nativeEvent.text);\n        }}\n        placeholder=\"Enter the key for the value you want to get\"\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GestureDetector to EmojiSticker Component\nDESCRIPTION: Wraps the Animated.Image with GestureDetector to connect the double tap gesture handler with the emoji image component and applies the animated style.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function EmojiSticker({ imageSize, stickerSource }) {\n  // ...rest of the code remains same\n  return (\n    <View style={{ top: -350 }}>\n      /* @info Wrap the Animated.Image component with GestureDetector. */<GestureDetector gesture={doubleTap}>/* @end */\n        <Animated.Image\n          source={stickerSource}\n          resizeMode=\"contain\"\n          style={/* @info Modify the style prop on the AnimatedImage to pass the imageStyle. */[imageStyle, { width: imageSize, height: imageSize }]/* @end */}\n        />\n      /* @info */</GestureDetector>/* @end */\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Bar Style with expo-status-bar\nDESCRIPTION: Example showing how to use the StatusBar component from expo-status-bar to set light text style for better contrast against dark backgrounds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/configuring-statusbar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function Playlists() {\n  return (\n    <>\n      {/* @hide ...*/} {/* @end */}\n      {/* Use light text instead of dark text in the status bar to provide more contrast with a dark background. */}\n      <StatusBar style=\"light\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook in React Native\nDESCRIPTION: Illustrates how to use the `useSafeAreaInsets` hook to get direct access to the safe area inset values (top, bottom, left, right). This allows for more granular control over layout adjustments but might have performance implications compared to `SafeAreaView` during device rotation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Conditional Imports for Tree Shaking in JavaScript\nDESCRIPTION: This example shows how to restructure conditional imports to better support tree shaking and static analysis. It demonstrates the transition from a conditional require to an ESM import with a conditional execution.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV === 'development') {\n  require('./dev-only').doSomething();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { doSomething } from './dev-only';\n\nif (process.env.NODE_ENV === 'development') {\n  doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating URL Parameters with TextInput in Expo Router (TypeScript)\nDESCRIPTION: This code demonstrates how to update URL parameters using a TextInput component and the router.setParams function in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams, router } from 'expo-router';\nimport { useState } from 'react';\nimport { TextInput, View } from 'react-native';\n\nexport default function Page() {\n  const params = useLocalSearchParams<{ query?: string }>();\n  const [search, setSearch] = useState(params.query);\n\n  return (\n    <TextInput\n      value={search}\n      onChangeText={search => {\n        setSearch(search);\n        router.setParams({ query: search });\n      }}\n      placeholderTextColor=\"#A0A0A0\"\n      placeholder=\"Search\"\n      style={{\n        borderRadius: 12,\n        backgroundColor: '#fff',\n        fontSize: 24,\n        color: '#000',\n        margin: 12,\n        padding: 16,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Authentication Requests in Expo\nDESCRIPTION: Use AuthSession.useAuthRequest() hook to build authentication requests. This hook allows for asynchronous setup, preventing mobile browser blocking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAuthSession.useAuthRequest()\n```\n\n----------------------------------------\n\nTITLE: React Native Video Thumbnail Generator Implementation\nDESCRIPTION: Example implementation of video thumbnail generation using expo-video-thumbnails. The component includes a button to trigger thumbnail generation from a video URL and displays the resulting image. Uses useState for state management and async/await for handling the thumbnail generation process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, Button, View, Image, Text } from 'react-native';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n\nexport default function App() {\n  const [image, setImage] = useState(null);\n\n  const generateThumbnail = async () => {\n    try {\n      const { uri } = await VideoThumbnails.getThumbnailAsync(\n        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        {\n          time: 15000,\n        }\n      );\n      setImage(uri);\n    } catch (e) {\n      console.warn(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={generateThumbnail} title=\"Generate thumbnail\" />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n      <Text>{image}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icon Set in React Native\nDESCRIPTION: This example shows how to create a custom icon set using the createIconSet method from @expo/vector-icons. It defines a glyphMap object and uses it to create a CustomIcon component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport createIconSet from '@expo/vector-icons/createIconSet';\n\nconst glyphMap = { 'icon-name': 1234, test: '∆' };\nconst CustomIcon = createIconSet(glyphMap, 'fontFamily', 'custom-icon-font.ttf');\n\nexport default function CustomIconExample() {\n  return <CustomIcon name=\"icon-name\" size={32} color=\"red\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline HTML Content in WebView with React Native\nDESCRIPTION: This example demonstrates how to display inline HTML content within a WebView component. It uses the originWhitelist property set to ['*'] to allow loading from any origin, and provides HTML content directly through the source property.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\n/* @hide */\nimport { StyleSheet } from 'react-native';\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      originWhitelist={['*']}\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo application\nDESCRIPTION: Command to create a new Expo application project using the create-expo-app tool. This generates a starter React Native project compatible with EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app my-app\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network State Changes in React Native\nDESCRIPTION: Shows how to subscribe to network state changes and handle updates, including how to unsubscribe from the listener.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/netinfo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = NetInfo.addEventListener(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n\n// To unsubscribe to these update, just use:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Submitting iOS App to Apple App Store with EAS CLI\nDESCRIPTION: Command to submit an iOS app binary to Apple App Store using EAS Submit. This starts the submission process, guiding the user through necessary steps and managing the upload to App Store Connect.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/deploy/submit-to-app-stores.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas submit -p ios\n```\n\n----------------------------------------\n\nTITLE: Using StatusBar with Expo in React Native (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and use the StatusBar component from expo-status-bar in a React Native app, setting its text style to \\\"light\\\" while customizing the view background and text colors. It requires expo-status-bar as a dependency and assumes that the app is running within an Expo environment. Inputs include component props such as the style type, and the output is a rendered app screen with customized status bar appearance. Web platform will no-op with this API, while Android and iOS reflect changes. All styling details use StyleSheet, and React Native standards apply.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\\nimport { StatusBar } from 'expo-status-bar';\\n\\nexport default function App() {\\n  return (\\n    <View style={styles.container}>\\n      <Text style={styles.text}>Notice that the status bar has light text!</Text>\\n      <StatusBar style=\\\"light\\\" />\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#000',\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n  text: {\\n    color: '#fff',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing SecureStore Module in JavaScript\nDESCRIPTION: Illustrates importing the SecureStore module from expo-secure-store to enable secure storage operations in a React Native app. This import statement is required before any SecureStore API methods can be used. No parameters needed. The output is a namespace object containing SecureStore functions such as setItemAsync and getItemAsync.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\\n\n```\n\n----------------------------------------\n\nTITLE: Triggering Haptic Feedback with Expo Haptics in React Native (JSX)\nDESCRIPTION: This snippet defines a React Native component that demonstrates the usage of the expo-haptics library to provide haptic feedback for selection, notification (success, error, warning), and various impact types (light, medium, heavy, rigid, soft). Required dependencies include react-native and expo-haptics, which must be installed in the project. Each button triggers a different haptic feedback using the respective Haptics method, and styles are defined locally to lay out the buttons and text. Inputs are user button presses, and output is the triggering of device-appropriate haptic responses. This example should be run within an iOS or Android environment supporting expo-haptics.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => /* @info */ Haptics.selectionAsync() /* @end */} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              ) /* @end */\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              ) /* @end */\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              /* @info */ Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              ) /* @end */\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light) /* @end */\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium) /* @end */\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy) /* @end */\n          }\n        />\n        <Button\n          title=\"Rigid\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid) /* @end */\n          }\n        />\n        <Button\n          title=\"Soft\"\n          onPress={\n            () => /* @info */ Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft) /* @end */\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs Navigator Layout in Expo Router\nDESCRIPTION: This code demonstrates how to implement a Tabs navigator layout in Expo Router. It imports the Tabs component from expo-router and exports it as the default layout for the home section.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default Tabs;\n```\n\n----------------------------------------\n\nTITLE: Capturing FullHD Image in React Native\nDESCRIPTION: Example of capturing a 1080x1080 image while accounting for device pixel ratio. Shows how to properly calculate dimensions and set capture options for high-quality output.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/captureRef.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\nconst pixels = targetPixelCount / pixelRatio;\n\nconst result = await captureRef(this.imageContainer, {\n  result: 'tmpfile',\n  height: pixels,\n  width: pixels,\n  quality: 1,\n  format: 'png',\n});\n```\n\n----------------------------------------\n\nTITLE: Using KeepAwake Functions in React Native\nDESCRIPTION: This example shows how to use the activateKeepAwake and deactivateKeepAwake functions to control screen sleep behavior imperatively. The functions are called in response to button presses, allowing dynamic control of the keep-awake feature.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    activateKeepAwake();\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    deactivateKeepAwake();\n    alert('Deactivated!');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using KeepAwake Hook in React Native\nDESCRIPTION: This snippet demonstrates how to use the useKeepAwake hook to prevent the screen from sleeping in a React Native component. The hook is called within the component, ensuring the screen stays awake as long as the component is mounted.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  useKeepAwake();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Double Tap Gesture for Scaling\nDESCRIPTION: Creates a double tap gesture handler that doubles the size of the emoji sticker when detected using the Gesture.Tap() method.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst doubleTap = Gesture.Tap()\n  .numberOfTaps(2)\n  .onStart(() => {\n    if (scaleImage.value !== imageSize * 2) {\n      scaleImage.value = scaleImage.value * 2;\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Up URL Scheme for Stripe in React Native\nDESCRIPTION: This code snippet demonstrates how to set up the correct URL scheme for Stripe redirects in a React Native app. It uses expo-linking and expo-constants to create the appropriate URL based on whether the app is running in Expo Go or as a standalone app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Importing expo-battery Package in JavaScript\nDESCRIPTION: This snippet shows how to import the entire Battery module from the expo-battery package. This import statement would be used when you need access to multiple Battery API functions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Magnetometer Component in React Native using Expo Sensors\nDESCRIPTION: This React Native component demonstrates subscribing to magnetometer updates using `Magnetometer.addListener` from `expo-sensors`. It uses `useState` to store sensor data (x, y, z) and the subscription object. `useEffect` manages the subscription lifecycle (subscribing on mount, unsubscribing on unmount). Buttons allow toggling the subscription (`_subscribe`/`_unsubscribe`) and adjusting the update interval (`_slow`/`_fast` using `Magnetometer.setUpdateInterval`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Magnetometer } from 'expo-sensors';\n\nexport default function Compass() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\n  const _fast = () => Magnetometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Magnetometer.addListener(result => {\n        setData(result);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Magnetometer:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Provisioning for iOS in EAS JSON\nDESCRIPTION: Extended EAS JSON configuration for Apple Developer Enterprise Program members, which allows setting the enterprise provisioning type to 'universal' or 'adhoc'. The 'universal' option doesn't require device registration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/internal-distribution.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"ios\": {\n        /* @info Valid values: universal, adhoc */\n        \"enterpriseProvisioning\": \"universal\" /* @end */\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Notification Channel with Custom Sound (TypeScript)\nDESCRIPTION: TypeScript code showing how to set up a notification channel on Android with a custom sound file. This approach is required for Android 8.0+ to properly play custom notification sounds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Prepare the notification channel\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Direct SQLite Statements\nDESCRIPTION: Example of executing SQL statements directly without a transaction, useful for PRAGMA commands\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n\nconst db = SQLite.openDatabase('dbName', version);\n\nawait db.execAsync([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false);\nconsole.log('Foreign keys turned on');\n```\n\n----------------------------------------\n\nTITLE: GLView Usage in Reanimated Worklet\nDESCRIPTION: Shows how to use GLView within a Reanimated worklet, demonstrating the integration between expo-gl and react-native-reanimated. It includes passing the GL context ID to the worklet and recreating the GL object.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { runOnUI } from 'react-native-reanimated';\nimport { GLView } from 'expo-gl';\n\nfunction render(gl) {\n  'worklet';\n  // add your WebGL code here\n}\n\nfunction onContextCreate(gl) {\n  runOnUI((contextId: number) => {\n    'worklet';\n    const gl = GLView.getWorkletContext(contextId);\n    render(gl);\n  })(gl.contextId);\n}\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView\n        style={{ width: 300, height: 300 }}\n        enableExperimentalWorkletSupport\n        onContextCreate={onContextCreate}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an SVG Component with SVG Elements (React Native, TypeScript)\nDESCRIPTION: Implements a functional React Native component that renders an SVG with a green circle and a yellow rectangle using primitives imported from 'react-native-svg'. This example demonstrates component composition and property passing for height, width, and viewBox. Dependencies: 'react-native-svg' must be installed and linked. Props are spread into the main Svg element. Inputs: optional props. Output: rendered SVG graphics as React Native UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\\n\\nexport default function SvgComponent(props) {\\n  return (\\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\\n    </Svg>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the expo-clipboard module in a React Native application. It includes functions to copy text to the clipboard and fetch text from the clipboard, as well as a simple UI to interact with these functions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    await Clipboard.setStringAsync('hello world');\n  };\n\n  const fetchCopiedText = async () => {\n    const text = await Clipboard.getStringAsync();\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple React Native Component for Testing\nDESCRIPTION: Define a CustomText component and a HomeScreen component in index.tsx to be used in unit tests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PropsWithChildren } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport const CustomText = ({ children }: PropsWithChildren) => <Text>{children}</Text>;\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <CustomText>Welcome!</CustomText>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Root Layout File in Expo Router (TypeScript)\nDESCRIPTION: This snippet shows the file path for the Root Layout in Expo Router. It's used to define global providers and configurations that can be accessed by all routes in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/root-layout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\napp/_layout.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Layout with GestureHandler in SDK 50+\nDESCRIPTION: Implementation of drawer navigation layout with GestureHandlerRootView wrapper for SDK 50 and higher, showing basic setup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/drawer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { Drawer } from 'expo-router/drawer';\n\nexport default function Layout() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <Drawer />\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Audio Sound Playback\nDESCRIPTION: Example showing how to initialize and create an Audio.Sound playback object with custom configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\n\nconst playbackObject = new Audio.Sound();\n// OR\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\n  { uri: 'http://foo/bar.mp3' },\n  { shouldPlay: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Package Directory in a Monorepo\nDESCRIPTION: This bash snippet demonstrates how to create a new package directory within a monorepo structure and initialize it with yarn.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Create our new package directory\n$ mkdir -p packages/cool-package\n$ cd packages/cool-package\n\n# And create the new package\n$ yarn init\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo WebBrowser Module in JavaScript\nDESCRIPTION: Demonstrates the standard method for importing the entire `expo-web-browser` library into a JavaScript or TypeScript file using the `import * as ... from ...` syntax. This makes all exported functions and constants available under the `WebBrowser` namespace. Requires the `expo-web-browser` package to be installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport * as WebBrowser from 'expo-web-browser';\n```\n```\n\n----------------------------------------\n\nTITLE: Using Expo LightSensor in React Native\nDESCRIPTION: This React Native component demonstrates basic usage of the `LightSensor` from `expo-sensors`. It initializes state to hold illuminance data and the sensor subscription. It uses `useEffect` to subscribe to sensor updates when the component mounts and unsubscribe when it unmounts. A toggle function allows starting and stopping the listener. The component displays the current illuminance value, noting it's only available on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Network State Once - React Native NetInfo - JavaScript\nDESCRIPTION: Shows how to fetch the current network state a single time using NetInfo.fetch(). The snippet returns a promise resolving to a state object containing connection type and status. No special prerequisites other than installing @react-native-community/netinfo. Inputs: none. Outputs: logs network type and connection status to the console.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Internal Distribution Build with EAS\nDESCRIPTION: Command to initiate an iOS build using the preview profile for internal distribution, which generates an .ipa file that can be installed on registered devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/internal-distribution-builds.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios --profile preview\n```\n\n----------------------------------------\n\nTITLE: Define Android Push Notification Payload Structure (TypeScript)\nDESCRIPTION: This TypeScript interface, `FirebaseData`, defines the expected structure for the `data` object when sending a push notification to an Android device via Firebase Cloud Messaging (FCM) within an Expo application. It includes optional properties to customize the notification's appearance and behavior, such as title, message, subtitle, sound, vibration pattern, priority, and badge count.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport interface FirebaseData {\n  title?: string;\n  message?: string;\n  subtitle?: string;\n  sound?: boolean | string;\n  vibrate?: boolean | number[];\n  priority?: AndroidNotificationPriority;\n  badge?: number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Config Plugin Implementation\nDESCRIPTION: This TypeScript code provides the full implementation of the 'withMyApiKey' config plugin, including modifications for both iOS and Android configurations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  withInfoPlist,\n  withAndroidManifest,\n  AndroidConfig,\n  ConfigPlugin,\n} from 'expo/config-plugins';\n\nconst withMyApiKey: ConfigPlugin<{ apiKey: string }> = (config, { apiKey }) => {\n  config = withInfoPlist(config, config => {\n    config.modResults['MY_CUSTOM_API_KEY'] = apiKey;\n    return config;\n  });\n\n  config = withAndroidManifest(config, config => {\n    const mainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(config.modResults);\n\n    AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n      mainApplication,\n      'MY_CUSTOM_API_KEY',\n      apiKey\n    );\n    return config;\n  });\n\n  return config;\n};\n\nexport default withMyApiKey;\n```\n\n----------------------------------------\n\nTITLE: Handling Local Images for Printing in React Native\nDESCRIPTION: This code demonstrates how to handle local images for printing in React Native using expo-asset, expo-print, and expo-image-manipulator. It converts local images to base64 and inlines them in the HTML for iOS compatibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Update Channel in Expo.plist for iOS\nDESCRIPTION: Add EXUpdatesRequestHeaders key to Expo.plist to specify the update channel for iOS when not using EAS Build. This ensures the app requests updates from the correct channel.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/updating-your-app.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRequestHeaders</key>\n<dict>\n  <key>expo-channel-name</key>\n  <string>your-channel-name</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: React Native App with EAS Update Integration\nDESCRIPTION: React Native application code showing integration with expo-updates to detect and display whether the app is running from built-in code or an update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/build-locally.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as Updates from 'expo-updates';\n\nexport default function App() {\n  const runTypeMessage = Updates.isEmbeddedLaunch\n    ? 'This app is running from built-in code'\n    : 'This app is running an update';\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <Text>{runTypeMessage}</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating transaction behavior with async/await in SQLite for Expo\nDESCRIPTION: This snippet illustrates the behavior of transactions with async/await, showing how queries outside the transaction function can still be included in the transaction due to the nature of asynchronous execution.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nPromise.all([\n  // 1. A new transaction begins\n  db.withTransactionAsync(async () => {\n    // 2. The value \"first\" is inserted into the test table and we wait 2\n    //    seconds\n    await db.execAsync('INSERT INTO test (data) VALUES (\"first\")');\n    await sleep(2000);\n\n    // 4. Two seconds in, we read the latest data from the table\n    const row = await db.getFirstAsync<{ data: string }>('SELECT data FROM test');\n\n    // ❌ The data in the table will be \"second\" and this expectation will fail.\n    //    Additionally, this expectation will throw an error and roll back the\n    //    transaction, including the `UPDATE` query below since it ran within\n    //    the transaction.\n    expect(row.data).toBe('first');\n  }),\n  // 3. One second in, the data in the test table is updated to be \"second\".\n  //    This `UPDATE` query runs in the transaction even though its code is\n  //    outside of it because the transaction happens to be active at the time\n  //    this query runs.\n  sleep(1000).then(async () => db.execAsync('UPDATE test SET data = \"second\"')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Passing Binary Data to SQLite using Uint8Array\nDESCRIPTION: This snippet shows how to store and retrieve binary data using Uint8Array with SQLite. It creates a table with a BLOB column, inserts binary data, and then retrieves and verifies the stored data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.execAsync(`\nDROP TABLE IF EXISTS blobs;\nCREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);\n`);\n\nconst blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);\nawait db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);\n\nconst row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');\nexpect(row.data).toEqual(blob);\n```\n\n----------------------------------------\n\nTITLE: Default EAS Build Configuration\nDESCRIPTION: The default eas.json configuration created by the build:configure command. It defines build profiles for development, preview, and production environments with their specific settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 8.0.0\"\n  },\n\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n\n    \"production\": {}\n  },\n\n  \"submit\": {\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications with React Navigation Deep Linking\nDESCRIPTION: Implementation of push notification handling integrated with React Navigation's deep linking functionality. This allows for navigation to specific screens when a notification is tapped.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default function App() {\n  return (\n    <NavigationContainer\n      linking={{\n        config: {\n          // Configuration for linking\n        },\n        subscribe(listener) {\n          const onReceiveURL = ({ url }: { url: string }) => listener(url);\n\n          // Listen to incoming links from deep linking\n          Linking.addEventListener('url', onReceiveURL);\n\n          // Listen to expo push notifications\n          const subscription = Notifications.addNotificationResponseReceivedListener((response) => {\n            const url = response.notification.request.content.data.url;\n\n            // Any custom logic to see whether the URL needs to be handled\n            //...\n\n            // Let React Navigation handle the URL\n            listener(url);\n          });\n\n          return () => {\n            // Clean up the event listeners\n            Linking.removeEventListener('url', onReceiveURL);\n            subscription.remove();\n          };\n        },\n      }}>\n      {/* Your app content */}\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.json\nDESCRIPTION: Example showing how to configure Android and iOS build properties using expo-build-properties plugin in app.json configuration file. Sets compileSdkVersion, targetSdkVersion, buildToolsVersion for Android and deploymentTarget for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 34,\n            \"targetSdkVersion\": 34,\n            \"buildToolsVersion\": \"34.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"13.4\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Config Plugin in JavaScript\nDESCRIPTION: This snippet shows the basic structure of an Expo config plugin function named 'withMyApiKey'. It's a synchronous function that accepts and returns an ExpoConfig object.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMyApiKey = config => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Barometer from Expo-Sensors (JavaScript)\nDESCRIPTION: This snippet shows the required import statement for accessing the Barometer API from the expo-sensors package in a JavaScript or React Native application. Including this import is necessary before using Barometer methods or subscribing to barometer data within the component. There are no required parameters or outputs — it simply prepares the Barometer module for use elsewhere in the codebase.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Barometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart Requests with Node.js for expo-file-system Uploads\nDESCRIPTION: This Node.js server snippet demonstrates how to handle binary and multipart file uploads from expo-file-system. It uses Express and Multer to save uploaded images to disk.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Input Values in EAS Build Steps\nDESCRIPTION: Demonstrates providing input values to a step that can be referenced in the command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - run:\n        name: Say Hi\n        # @info #\n        inputs:\n          name: Expo\n        # @end #\n        command: echo \"Hi, ${ inputs.name }!\"\n```\n\n----------------------------------------\n\nTITLE: Setting Splash Screen Background Color in Expo App Config (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set the background color for the splash screen in the Expo app config file. It includes both the image path and the background color.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/splash-screen-and-app-icon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"splash\": {\n    \"image\": \"./assets/images/splash.png\",\n    \"backgroundColor\": \"#FEF9B0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Xcode Project Mod Plugin in TypeScript\nDESCRIPTION: Example of creating a config plugin to update the Xcode Project's product name using withXcodeProject helper. Demonstrates proper usage of ConfigPlugin type and modResults handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin, withXcodeProject, IOSConfig } from 'expo/config-plugins';\n\nconst withCustomProductName: ConfigPlugin<string> = (config, customName) => {\n  return withXcodeProject(\n    config,\n    async (config) => {\n      config.modResults = IOSConfig.Name.setProductName({ name: customName }, config.modResults);\n      return config;\n    }\n  );\n};\n\n// 💡 Usage:\n\n/// Create a config\nconst config = {\n  name: 'my app',\n};\n\n/// Use the plugin\nexport default withCustomProductName(config, 'new_name');\n```\n\n----------------------------------------\n\nTITLE: Using useFocusEffect Hook in Expo Router\nDESCRIPTION: Demonstrates how to use the useFocusEffect hook to execute code when a route is focused or unfocused. The effect is wrapped in useCallback to optimize performance.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFocusEffect } from 'expo-router';\nimport { useCallback } from 'react';\n\nexport default function Route() {\n  useFocusEffect(\n    useCallback(() => {\n      console.log('Hello, I am focused!');\n\n      return () => {\n        console.log('This route is now unfocused.');\n      }\n    }, [])\n  );\n\n  return </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Core Components in JSX\nDESCRIPTION: This snippet demonstrates how to import and use basic React Native components like Text and View in a simple React component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Hello, world!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Pedometer Module from Expo Sensors (JavaScript)\nDESCRIPTION: This code snippet demonstrates the standard way to import the `Pedometer` module from the `expo-sensors` package in a JavaScript or TypeScript file. This import makes the Pedometer API functions (`isAvailableAsync`, `getStepCountAsync`, `watchStepCount`) available for use within the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { Pedometer } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Express Endpoint for Blurhash Generation\nDESCRIPTION: Implements an Express route that accepts an image upload, processes it with Sharp, and returns a blurhash representation. It allows customizing the component X and Y parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/image.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  // If the file is not available we're returning with error.\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  // Users can specify number of components in each axes.\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  // We're converting provided image to a byte buffer.\n  // Sharp currently supports multiple common formats like JPEG, PNG, WebP, GIF, and AVIF.\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(data, info.width, info.height, componentX, componentY);\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind with React Native Web in Expo\nDESCRIPTION: This React Native component shows how to use Tailwind CSS classes with React Native Web elements using the $$css syntax in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Page() {\n  return (\n    <View style={{ $$css: true, _: 'bg-slate-100 rounded-xl' }}>\n      <Text style={{ $$css: true, _: 'text-lg font-medium' }}>Welcome to Tailwind</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Video Player Implementation with Play/Pause Controls in React Native\nDESCRIPTION: Example implementation of a video player component using expo-av's Video component. Features include playback controls, native controls support, resize mode configuration, and looping functionality. The example demonstrates state management for playback status and ref-based video control.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { View, StyleSheet, Button } from 'react-native';\nimport { Video, ResizeMode } from 'expo-av';\n\nexport default function App() {\n  const video = useRef(null);\n  const [status, setStatus] = useState({});\n  return (\n    <View style={styles.container}>\n      <Video\n        ref={video}\n        style={styles.video}\n        source={{\n          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',\n        }}\n        useNativeControls\n        resizeMode={ResizeMode.CONTAIN}\n        isLooping\n        onPlaybackStatusUpdate={status => setStatus(() => status)}\n      />\n      <View style={styles.buttons}>\n        <Button\n          title={status.isPlaying ? 'Pause' : 'Play'}\n          onPress={() =>\n            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n  },\n  video: {\n    alignSelf: 'center',\n    width: 320,\n    height: 200,\n  },\n  buttons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Function in Swift\nDESCRIPTION: Defines a native synchronous function that will be exported to JavaScript. The function can receive up to 8 arguments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nFunction(\"syncFunction\") { (message: String) in\n  return message\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Profile in eas.json\nDESCRIPTION: Example of a basic eas.json configuration with a production profile for both Android and iOS submissions. Includes CLI version requirements and platform-specific settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/submit/eas-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 0.34.0\"\n  },\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"../path/to/api-xxx-yyy-zzz.json\",\n        \"track\": \"internal\"\n      },\n      \"ios\": {\n        \"appleId\": \"john@turtle.com\",\n        \"ascAppId\": \"1234567890\",\n        \"appleTeamId\": \"AB12XYZ34S\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Shared Values\nDESCRIPTION: Creates shared values for X and Y coordinates to track sticker position during drag operations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function EmojiSticker({ imageSize, stickerSource }) {\n  const translateX = useSharedValue(0);\n  const translateY = useSharedValue(0);\n\n  // ...rest of the code remains same\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Version Increment in eas.json\nDESCRIPTION: This snippet shows how to configure eas.json to automatically track and increment developer-facing app versions. By setting appVersionSource to remote and enabling autoIncrement for production builds, EAS Build will handle version management automatically.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/manage-app-versions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    /* @hide ... */ /* @end */\n    /* @info Add <CODE>appVersionSource</CODE> and set it to <CODE>remote</CODE>. */\n    \"appVersionSource\": \"remote\"\n    /* @end */\n  },\n  \"build\": {\n    \"production\": {\n      /* @info Set the <CODE>autoIncrement</CODE> property to true to automatically increment the <CODE>versionCode</CODE> or <CODE>buildNumber</CODE>. */\n      \"autoIncrement\": true\n      /* @end */\n    }\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic MapView in React Native\nDESCRIPTION: This snippet demonstrates how to create a basic map view using the MapView component from react-native-maps. It includes the necessary imports and styles to display a full-screen map.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/map-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <MapView style={styles.map} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Sentry Configuration in React Native\nDESCRIPTION: This code snippet demonstrates how to add a button in a React Native app to test Sentry configuration by intentionally throwing an error when pressed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'react-native';\n\n// Inside some component\n<Button title=\"Press me\" onPress={() => { throw new Error('Hello, again, Sentry!'); }}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipboard Operations in React Native with expo-clipboard\nDESCRIPTION: A complete React Native component demonstrating clipboard functionality using expo-clipboard. Shows how to copy text to clipboard and retrieve text from clipboard using async operations. Includes styling and UI elements for interaction.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    await Clipboard.setStringAsync('hello world');\n  };\n\n  const fetchCopiedText = async () => {\n    const text = await Clipboard.getStringAsync();\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Displaying URL Parameters in Expo Router (TypeScript)\nDESCRIPTION: This snippet shows how to use useLocalSearchParams and useGlobalSearchParams hooks to access and display URL parameters, and create links to other user profiles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { useLocalSearchParams, useGlobalSearchParams, Link } from 'expo-router';\n\nconst friends = ['charlie', 'james']\n\nexport default function Route() {\n  const glob = useGlobalSearchParams();\n  const local = useLocalSearchParams();\n\n  console.log(\"Local:\", local.user, \"Global:\", glob.user);\n\n  return (\n    <View>\n      <Text>User: {local.user}</Text>\n      {friends.map(friend => (\n        <Link key={friend} href={`/${friend}`}>\n          Visit {friend}\n        </Link>\n      ))}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Brightness Module\nDESCRIPTION: Simple import statement for the expo-brightness module to access brightness control functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Brightness from 'expo-brightness';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Transaction Behavior with Promises in TypeScript\nDESCRIPTION: This example shows how queries outside the transaction scope might unexpectedly run within a transaction when using async/await. It demonstrates a potential issue where concurrent operations can interfere with transaction isolation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.all([\n  // 1. A new transaction begins\n  db.withTransactionAsync(async () => {\n    // 2. The value \"first\" is inserted into the test table and we wait 2\n    //    seconds\n    await db.execAsync('INSERT INTO test (data) VALUES (\"first\")');\n    await sleep(2000);\n\n    // 4. Two seconds in, we read the latest data from the table\n    const row = await db.getFirstAsync<{ data: string }>('SELECT data FROM test');\n\n    // ❌ The data in the table will be \"second\" and this expectation will fail.\n    //    Additionally, this expectation will throw an error and roll back the\n    //    transaction, including the `UPDATE` query below since it ran within\n    //    the transaction.\n    expect(row.data).toBe('first');\n  }),\n  // 3. One second in, the data in the test table is updated to be \"second\".\n  //    This `UPDATE` query runs in the transaction even though its code is\n  //    outside of it because the transaction happens to be active at the time\n  //    this query runs.\n  sleep(1000).then(async () => db.execAsync('UPDATE test SET data = \"second\"')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Intent Filters for Deep Linking in Expo\nDESCRIPTION: This JSON configuration snippet shows how to set up Android intent filters in the app.json file for Expo projects. It enables deep linking for specific URL patterns and includes the autoVerify property for app links.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"android\": {\n      \"intentFilters\": [\n        {\n          \"action\": \"VIEW\",\n          \"autoVerify\": true,\n          \"data\": [\n            {\n              \"scheme\": \"https\",\n              \"host\": \"*.myapp.io\",\n              \"pathPrefix\": \"/records\"\n            }\n          ],\n          \"category\": [\"BROWSABLE\", \"DEFAULT\"]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SafeAreaProvider in Expo React Native\nDESCRIPTION: This snippet shows how to add SafeAreaProvider to the root component file when using a different Expo template without Expo Router installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nexport default function App() {\n  return (\n    return <SafeAreaProvider>...</SafeAreaProvider>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Notifications in app.json\nDESCRIPTION: JSON configuration for expo-notifications plugin in app.json, including icon, color, and custom sound settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/assets/notification-icon.png\",\n          \"color\": \"#ffffff\",\n          \"sounds\": [\n            \"./local/assets/notification-sound.wav\",\n            \"./local/assets/notification-sound-other.wav\"\n          ]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bare Project Build Configuration\nDESCRIPTION: Example configuration for a bare React Native project with multiple build profiles and platform-specific settings for iOS and Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"base\": {\n      \"env\": {\n        \"EXAMPLE_ENV\": \"example value\"\n      },\n      \"android\": {\n        \"image\": \"ubuntu-18.04-android-30-ndk-r19c\",\n        \"ndk\": \"21.4.7075529\"\n      },\n      \"ios\": {\n        \"image\": \"latest\",\n        \"node\": \"12.13.0\",\n        \"yarn\": \"1.22.5\"\n      }\n    },\n    \"development\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"staging\"\n      },\n      \"android\": {\n        \"distribution\": \"internal\",\n        \"withoutCredentials\": true,\n        \"gradleCommand\": \":app:assembleDebug\"\n      },\n      \"ios\": {\n        \"simulator\": true,\n        \"buildConfiguration\": \"Debug\"\n      }\n    },\n    \"staging\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"staging\"\n      },\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"gradleCommand\": \":app:assembleRelease\"\n      }\n    },\n    \"production\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image Picker Module\nDESCRIPTION: Basic import statement for using the expo-image-picker library\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\n```\n\n----------------------------------------\n\nTITLE: Managing Selected Image with useState in App Component\nDESCRIPTION: Uses the useState hook to create a state variable for storing the selected image URI. Updates the pickImageAsync function to save the URI and passes it to the ImageViewer component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n// ...rest of the import statements remain unchanged\n\nexport default function App() {\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer\n          placeholderImageSource={PlaceholderImage}\n          selectedImage={selectedImage}\n        />\n      </View>\n      {/* ...rest of the code remains same */}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Expo SDK Packages via Shell\nDESCRIPTION: Demonstrates installing multiple Expo SDK packages (`expo-camera`, `expo-contacts`, `expo-sensors`) simultaneously using the `npx expo install` command. This command ensures that compatible versions of the packages are installed for the project's SDK version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Navigator Layout in Expo Router (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a tab layout using Expo Router's Tabs component. It sets up two tab screens: one for the home section and another for settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen name=\"(home)\" />\n      <Tabs.Screen name=\"settings\" />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Config Plugin Usage in app.json\nDESCRIPTION: Demonstrates how to add a basic config plugin (expo-camera) to an Expo project's configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-camera\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook in JSX\nDESCRIPTION: Demonstrates how to use the useSafeAreaInsets hook to directly access safe area insets and apply them to a component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingTop: insets.top }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Style for Emoji Scaling\nDESCRIPTION: Defines an animated style object using useAnimatedStyle that applies spring animations to the width and height properties when the scale value changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst imageStyle = useAnimatedStyle(() => {\n  return {\n    width: withSpring(scaleImage.value),\n    height: withSpring(scaleImage.value),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLite Context Hook in React\nDESCRIPTION: Demonstrates how to use SQLiteProvider and useSQLiteContext hook for database access in React components\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite/next';\nimport { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n\nexport function Header() {\n  const db = useSQLiteContext();\n  const [version, setVersion] = useState('');\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(\n        'SELECT sqlite_version()'\n      );\n      setVersion(result['sqlite_version()']);\n    }\n    setup();\n  }, []);\n  return (\n    <View style={styles.headerContainer}>\n      <Text style={styles.headerText}>SQLite version: {version}</Text>\n    </View>\n  );\n}\n\ninterface Todo {\n  value: string;\n  intValue: number;\n}\n\nexport function Content() {\n  const db = useSQLiteContext();\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    async function setup() {\n      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');\n      setTodos(result);\n    }\n    setup();\n  }, []);\n\n  return (\n    <View style={styles.contentContainer}>\n      {todos.map((todo, index) => (\n        <View style={styles.todoItemContainer} key={index}>\n          <Text>{`${todo.intValue} - ${todo.value}`}</Text>\n        </View>\n      ))}\n    </View>\n  );\n}\n\nasync function migrateDbIfNeeded(db: SQLiteDatabase) {\n  const DATABASE_VERSION = 1;\n  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(\n    'PRAGMA user_version'\n  );\n  if (currentDbVersion >= DATABASE_VERSION) {\n    return;\n  }\n  if (currentDbVersion === 0) {\n    await db.execAsync(`\nPRAGMA journal_mode = 'wal';\nCREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);\n`);\n    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);\n    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);\n    currentDbVersion = 1;\n  }\n  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WeeklyTriggerInput Interface in TypeScript\nDESCRIPTION: Defines an interface for weekly notification triggers. This allows scheduling notifications to be delivered on a specific day of the week (1-7, with 1 being Sunday) at a specific time, repeating weekly.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WeeklyTriggerInput {\n  channelId?: string;\n  weekday: number;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending APNs Notification in JavaScript\nDESCRIPTION: This function demonstrates how to send a notification using APNs. It establishes an HTTP/2 connection, constructs the notification payload, and sends a POST request to the APNs server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst http2 = require('http2');\n\nconst client = http2.connect(\n  IS_PRODUCTION ? 'https://api.push.apple.com' : 'https://api.sandbox.push.apple.com'\n);\n\nconst request = client.request({\n  ':method': 'POST',\n  ':scheme': 'https',\n  'apns-topic': 'YOUR-BUNDLE-IDENTIFIER',\n  ':path': '/3/device/' + nativeDeviceToken, // This is the native device token you grabbed client-side\n  authorization: `bearer ${authorizationToken}`, // This is the JSON web token generated in the \"Authorization\" step\n});\nrequest.setEncoding('utf8');\n\nrequest.write(\n  JSON.stringify({\n    aps: {\n      alert: {\n        title: \"\\uD83D\\uDCE7 You've got mail!\",\n        body: 'Hello world! \\uD83C\\uDF10',\n      },\n    },\n    experienceId: '@yourExpoUsername/yourProjectSlug', // Required when testing in the Expo Go app\n    scopeKey: '@yourExpoUsername/yourProjectSlug', // Required when testing in the Expo Go app\n  })\n);\nrequest.end();\n```\n\n----------------------------------------\n\nTITLE: Configuring credentials.json for iOS\nDESCRIPTION: Example credentials.json configuration for iOS, specifying the provisioning profile path, distribution certificate path and password. This allows EAS Build to use your local iOS credentials for signing apps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    /* @hide ... */\n    /* @end */\n  },\n  \"ios\": {\n    \"provisioningProfilePath\": \"ios/certs/profile.mobileprovision\",\n    \"distributionCertificate\": {\n      \"path\": \"ios/certs/dist.p12\",\n      \"password\": \"DISTRIBUTION_CERTIFICATE_PASSWORD\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Message Listener in a Dev Tools Plugin\nDESCRIPTION: Code demonstrating how to listen for messages from the app using the useDevToolsPluginClient hook. It sets up a listener for 'ping' messages and shows an alert with the data received.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst client = useDevToolsPluginClient('my-devtools-plugin');\nclient.addMessageListener('ping', data => {\n  alert(`Received ping from ${data.from}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ImageManipulator Module\nDESCRIPTION: Example of importing the ImageManipulator module from the expo-image-manipulator package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Button in React Native with @expo/vector-icons\nDESCRIPTION: This snippet shows how to create an icon button using the FontAwesome.Button component from @expo/vector-icons. It demonstrates creating a Facebook login button with an icon and handling button press events.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\n\nexport default function App() {\n  const loginWithFacebook = () => {\n    console.log('Button pressed');\n  };\n\n  return (\n    <View style={styles.container}>\n      <FontAwesome.Button name=\"facebook\" backgroundColor=\"#3b5998\" onPress={loginWithFacebook}>\n        Login with Facebook\n      </FontAwesome.Button>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Background Modes in app.json for Expo TaskManager\nDESCRIPTION: This JSON snippet demonstrates how to configure the `infoPlist` for iOS within an Expo project's `app.json` or `app.config.js`. It adds required `UIBackgroundModes` (location, fetch, remote-notification) to allow tasks like background location updates, background fetches, and remote notifications to run when the app is not in the foreground. This configuration is necessary for standalone iOS apps using `expo-task-manager`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\"location\", \"fetch\", \"remote-notification\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Metro Configuration for Sentry in Expo\nDESCRIPTION: This code snippet demonstrates how to update the Metro configuration file (metro.config.js) to enable Sentry's debug ID injection into source maps. It uses the getSentryExpoConfig function from @sentry/react-native/metro.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getSentryExpoConfig } = require('@sentry/react-native/metro');\n\nconst config = getSentryExpoConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI with npm\nDESCRIPTION: Command to install the EAS Command Line Interface globally using npm. This tool is required to interact with EAS services from the terminal.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SVG in Expo with SVG Transformer\nDESCRIPTION: Demonstrates how to import and use an SVG file as a React component using react-native-svg-transformer. The SVG can be used with width and height props for sizing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/using-svgs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Logo from './assets/logo.svg';\n\n<Logo width={120} height={40} />;\n```\n\n----------------------------------------\n\nTITLE: Default Error Boundary Usage in Expo Router\nDESCRIPTION: Shows how to re-export and use the default ErrorBoundary component from expo-router for quick implementation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/error-handling.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport { ErrorBoundary } from 'expo-router';\n```\n\n----------------------------------------\n\nTITLE: Configuring an Expo Application using TypeScript Types\nDESCRIPTION: This snippet demonstrates how to use the ExpoConfig type from @expo/config-types to properly type an Expo configuration file. It imports the type and creates a function that returns a basic configuration with name and slug properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config-types/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpoConfig } from '@expo/config-types';\n\nexport default (): ExpoConfig => {\n  return {\n    name: 'My App',\n    slug: 'my-app',\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Next Trigger Date for a Notification in TypeScript\nDESCRIPTION: Example of using getNextTriggerDateAsync to determine when a notification with a specific trigger configuration will next be fired.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nasync function logNextTriggerDate() {\n  try {\n    const nextTriggerDate = await Notifications.getNextTriggerDateAsync({\n      hour: 9,\n      minute: 0,\n    });\n    console.log(nextTriggerDate === null ? 'No next trigger date' : new Date(nextTriggerDate));\n  } catch (e) {\n    console.warn(`Couldn't have calculated next trigger date: ${e}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Dependency Updates in Prebuild\nDESCRIPTION: Use the --skip-dependency-update flag to prevent updating specific dependencies during prebuild.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/prebuild.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild --skip-dependency-update react-native,react\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Text Elements in Expo\nDESCRIPTION: Demonstrates the use of different text elements like P, B, S, I, BR, and Code from @expo/html-elements, which render consistently across platforms with appropriate styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { P, B, S, I, BR, Code } from '@expo/html-elements';\n\nexport default () => (\n  <>\n    <P>\n      Hello<B>World (in bold)</B>\n    </P>\n    <S>strike text</S>\n    <BR />\n    <I>Italic</I>\n    <Code>const foo = true</Code>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting Android Keystore Certificate for Google Play\nDESCRIPTION: Command to export an Android keystore certificate to PEM format for submission to Google Play. Uses keytool to convert the keystore certificate into the required format for Google Play Store upload key reset process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/app-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -export -rfc -alias alias_from_step_1 -file certificate_for_google.pem -keystore ./path/to/keystore.jks\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Submit for Production Release\nDESCRIPTION: JSON configuration for EAS submit settings to enable production deployment to Google Play Store. Updates the track setting from internal to production.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"./service-account-file.json\",\n        \"track\": \"production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring usesAppleSignIn in Expo App Config (JSON)\nDESCRIPTION: This JSON snippet sets the ios.usesAppleSignIn property to true in app.json, which signals Expo to enable the Sign In with Apple capability during the build process. This setup is required for compliance with App Store guidelines when supporting third-party sign-in methods. No dependencies are required beyond a valid Expo project; the input is the app.json config file and the output is an updated project with the correct iOS entitlement during build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"usesAppleSignIn\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Linking Module in JavaScript\nDESCRIPTION: This snippet shows how to import all expo-linking utilities using JavaScript ES6 import syntax. Requires the expo-linking package to be installed in your project. The imported Linking object exposes methods for deep link creation, parsing, and interacting with system-level app links. There are no required parameters for the import; it makes all functionality available under the Linking namespace. Intended for use at the top of React Native or Expo app files, with no special constraints.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Using Speech.speak() in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the expo-speech module to implement text-to-speech functionality in a React Native application. It includes a button that, when pressed, speaks the text '1'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/speech.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, StyleSheet, Button } from 'react-native';\nimport * as Speech from 'expo-speech';\n\nexport default function App() {\n  const speak = () => {\n    const thingToSay = '1';\n    Speech.speak(thingToSay);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Press to hear some words\" onPress={speak} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Notification Received Listener with React Hook\nDESCRIPTION: This example shows how to register a notification received listener using a React hook. The listener will be called whenever a notification is received while the app is running, allowing you to log or process incoming notifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport * as Notifications from 'expo-notifications';\n\nexport default function App() {\n  React.useEffect(() => {\n    const subscription = Notifications.addNotificationReceivedListener(notification => {\n      console.log(notification);\n    });\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Screen Options in SDK 50+\nDESCRIPTION: Extended drawer navigation implementation with custom screen options for labels and titles in SDK 50 and higher.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/drawer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { Drawer } from 'expo-router/drawer';\n\nexport default function Layout() {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <Drawer>\n        <Drawer.Screen\n          name=\"index\" // This is the name of the page and must match the url from root\n          options={{\n            drawerLabel: 'Home',\n            title: 'overview',\n          }}\n        />\n        <Drawer.Screen\n          name=\"user/[id]\" // This is the name of the page and must match the url from root\n          options={{\n            drawerLabel: 'User',\n            title: 'overview',\n          }}\n        />\n      </Drawer>\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing WebBrowser and Linking in React Native\nDESCRIPTION: Illustrates the difference between using Linking to open URLs in the system browser and WebBrowser to open URLs in an in-app browser.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport * as Linking from 'expo-linking';\nimport * as WebBrowser from 'expo-web-browser';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Button\n        title=\"Open URL with the system browser\"\n        onPress={() => Linking.openURL('https://expo.dev')}\n        style={styles.button}\n      />\n      <Button\n        title=\"Open URL with an in-app browser\"\n        onPress={() => WebBrowser.openBrowserAsync('https://expo.dev')}\n        style={styles.button}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    marginVertical: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Production Build Steps for App Store in YAML\nDESCRIPTION: Outlines the steps for a customized iOS production build for the App Store, located in `.eas/build/production-build-ios.yml`. It includes resolving Apple Team ID, prebuilding with the team ID, installing pods, configuring credentials, generating Gymfile using build credentials, running Fastlane, and uploading artifacts. This file is referenced by `eas.json`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Customized iOS App Store build example\n  steps:\n    - eas/checkout\n\n    - eas/install_node_modules\n\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n\n    - eas/prebuild:\n        inputs:\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n\n    - run:\n        name: Install pods\n        working_directory: ./ios\n        command: pod install\n\n    - eas/configure_ios_credentials\n\n    - eas/generate_gymfile_from_template:\n        inputs:\n          credentials: ${ eas.job.secrets.buildCredentials }\n\n    - eas/run_fastlane\n\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Configuring deployment scripts for GitHub Pages in package.json\nDESCRIPTION: This snippet demonstrates how to add predeploy and deploy scripts to the package.json file for deploying an Expo web app to GitHub Pages. The predeploy script exports the web build, while the deploy script uses gh-pages to publish the dist directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/publishing-websites.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n /* @hide ... */ /* @end */\n  \"deploy\": \"gh-pages -t -d dist\",\n  \"predeploy\": \"expo export -p web\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client Package\nDESCRIPTION: Command to install expo-dev-client package which is required for React Native Firebase integration and native code configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-firebase.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook for an Expo Dev Tools Plugin\nDESCRIPTION: Implementation of a custom hook that exposes functionality to the app. This hook provides a sendPing function that can be called by the app to send messages to the plugin.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDevToolsPluginClient } from 'expo/devtools';\n\nexport function useMyDevToolsPlugin() {\n  const client = useDevToolsPluginClient('my-devtools-plugin');\n\n  const sendPing = () => {\n    client?.sendMessage('ping', { from: 'app' });\n  };\n\n  return {\n    sendPing,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: RTL Web Support Implementation\nDESCRIPTION: Component setup for RTL support in web environment using expo-localization to detect text direction.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { getLocales } from 'expo-localization';\n// ...\n\nreturn <View dir={getLocales()[0].textDirection || 'ltr'}>//...</View>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Width Animation with react-native-reanimated in JSX\nDESCRIPTION: This JSX code demonstrates a basic animation using the `react-native-reanimated` library. It imports necessary hooks (`useSharedValue`, `useAnimatedStyle`, `withTiming`, `Easing`) and components (`Animated.View`, `View`, `Button`, `StyleSheet`). The example creates a box whose width animates smoothly using `withTiming` when a button is pressed. The `useSharedValue` hook holds the target width value, and `useAnimatedStyle` defines the animated style object. It depends on `react-native` and `react-native-reanimated`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  Easing,\n} from 'react-native-reanimated';\nimport { View, Button, StyleSheet } from 'react-native';\n\nexport default function AnimatedStyleUpdateExample() {\n  const randomWidth = useSharedValue(10);\n\n  const config = {\n    duration: 500,\n    easing: Easing.bezier(0.5, 0.01, 0, 1),\n  };\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(randomWidth.value, config),\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, style]} />\n      <Button\n        title=\"toggle\"\n        onPress={() => {\n          randomWidth.value = Math.random() * 350;\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 80,\n    backgroundColor: 'black',\n    margin: 30,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Button Component in React Native\nDESCRIPTION: Implements a reusable button component using React Native's Pressable with basic styling and touch event handling. The component accepts a label prop and displays an alert when pressed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Pressable, Text } from 'react-native';\n\nexport default function Button({ label }) {\n  return (\n    <View style={styles.buttonContainer}>\n      <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>\n        <Text style={styles.buttonLabel}>{label}</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    width: 320,\n    height: 68,\n    marginHorizontal: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 3,\n  },\n  button: {\n    borderRadius: 10,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  buttonIcon: {\n    paddingRight: 8,\n  },\n  buttonLabel: {\n    color: '#fff',\n    fontSize: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in app.json\nDESCRIPTION: Expo configuration to enable path aliases support for SDK 49 and control for SDK 50+.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"tsconfigPaths\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo.plist for iOS EAS Update Settings\nDESCRIPTION: Add EXUpdatesRuntimeVersion and EXUpdatesURL keys to the Expo.plist file. These settings are used by the iOS app to fetch updates from the EAS server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/updating-your-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRuntimeVersion</key>\n<string>1.0.0</string>\n<key>EXUpdatesURL</key>\n<string>https://u.expo.dev/your-project-id</string>\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Permissions Hooks in React Native\nDESCRIPTION: Introduces new hooks for requesting and checking camera and microphone permissions in React Native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-camera/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useCameraPermissions, useMicrophonePermissions } from 'expo-camera';\n\nfunction MyComponent() {\n  const [cameraPermission, requestCameraPermission] = useCameraPermissions();\n  const [microphonePermission, requestMicrophonePermission] = useMicrophonePermissions();\n  // Use these hooks to manage permissions\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Modules from expo-sensors in JavaScript\nDESCRIPTION: Demonstrates the two primary ways to import sensor functionalities from the `expo-sensors` library in a JavaScript project. You can either import the entire library namespace as `Sensors` or selectively import individual sensor components like `Accelerometer`, `Barometer`, `DeviceMotion`, `Gyroscope`, `LightSensor`, `Magnetometer`, `MagnetometerUncalibrated`, and `Pedometer` as needed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo Module - React Native - JavaScript\nDESCRIPTION: Demonstrates how to import the NetInfo module from @react-native-community/netinfo in a JavaScript (React Native) context. No dependencies are needed beyond the package itself, and the import is required before using any NetInfo API. This is the standard initial step for accessing network information features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI Module with expo-system-ui in JavaScript\nDESCRIPTION: This snippet demonstrates how to import all exported members from the expo-system-ui package as the SystemUI namespace in JavaScript. The import enables access to system-level UI methods for manipulating elements like the root view background color and globally locking user interface style outside the React component tree. expo-system-ui should be installed as a project dependency prior to usage, and the import works in environments supporting ES module syntax. The input and output are managed by methods on the SystemUI object.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Implementing Playback Status Updates in JavaScript\nDESCRIPTION: Handling playback status updates to respond to changes in media loading, playing, buffering, and completion states.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (!playbackStatus.isLoaded) {\n    // Update your UI for the unloaded state\n    if (playbackStatus.error) {\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\n      // Send Expo team the error on Slack or the forums so we can help you debug!\n    }\n  } else {\n    // Update your UI for the loaded state\n\n    if (playbackStatus.isPlaying) {\n      // Update your UI for the playing state\n    } else {\n      // Update your UI for the paused state\n    }\n\n    if (playbackStatus.isBuffering) {\n      // Update your UI for the buffering state\n    }\n\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\n      // The player has just finished playing and will stop. Maybe you want to play something else?\n    }\n  }\n};\n\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n```\n\n----------------------------------------\n\nTITLE: Implementing Accelerometer Sensor with React Hooks in React Native\nDESCRIPTION: This example demonstrates how to create a React Native component that monitors and displays accelerometer data. It showcases subscription management with useEffect, updating the UI with sensor values, and controlling the sampling rate with interval adjustments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/accelerometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\n\nexport default function App() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Accelerometer.setUpdateInterval(1000);\n  const _fast = () => Accelerometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(Accelerometer.addListener(setData));\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Android keystore with keytool\nDESCRIPTION: Command to generate a new Android keystore for app signing. It creates a keystore with RSA algorithm, 2048 bit key size, and 10000 days validity, requiring passwords and package information as inputs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkeytool \\\n  -genkey -v \\\n  -storetype JKS \\\n  -keyalg RSA \\\n  -keysize 2048 \\\n  -validity 10000 \\\n  -storepass KEYSTORE_PASSWORD \\\n  -keypass KEY_PASSWORD \\\n  -alias KEY_ALIAS \\\n  -keystore release.keystore \\\n  -dname \"CN=com.expo.your.android.package,OU=,O=,L=,S=,C=US\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Background Task for Handling Notifications\nDESCRIPTION: Example of setting up a background task with expo-task-manager to handle notifications when the app is not in the foreground. The task logs a message when a notification is received in the background.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\nimport * as Notifications from 'expo-notifications';\n\nconst BACKGROUND_NOTIFICATION_TASK = 'BACKGROUND-NOTIFICATION-TASK';\n\nTaskManager.defineTask(BACKGROUND_NOTIFICATION_TASK, ({ data, error, executionInfo }) => {\n  console.log('Received a notification in the background!');\n  // Do something with the notification data\n});\n\nNotifications.registerTaskAsync(BACKGROUND_NOTIFICATION_TASK);\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Firebase Core Package\nDESCRIPTION: Command to install the core React Native Firebase package (@react-native-firebase/app) which provides fundamental functionality for all Firebase modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-firebase.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @react-native-firebase/app\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI for EAS builds\nDESCRIPTION: YAML configuration for CircleCI to set up a Node.js environment, install dependencies, and trigger EAS builds. It defines a workflow that runs on the master branch.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\nexecutors:\n  default:\n    docker:\n      - image: cimg/node:lts\n    working_directory: ~/my-app\n\njobs:\n  eas_build:\n    executor: default\n    steps:\n      - checkout\n      - run:\n          name: Install dependencies\n          command: npm ci\n      - run:\n          name: Trigger build\n          command: npx eas-cli build --platform all --non-interactive --no-wait\n\nworkflows:\n  build_app:\n    jobs:\n      - eas_build:\n          filters:\n            branches:\n              only: master\n```\n\n----------------------------------------\n\nTITLE: Rendering Router with Fixture Path and Overrides in JavaScript\nDESCRIPTION: This example demonstrates how to use `renderRouter` with both a directory path and inline mocking. It allows for fine-tuned control over the mock environment by overriding specific paths within the fixture directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('my-test', async () => {\n  const MockAuthLayout = jest.fn(() => <View />);\n  renderRouter({\n    appDir: './my-test-fixture',\n    overrides: {\n      'directory/(auth)/_layout': MockAuthLayout,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Notification Handler and Scheduling a Notification in TypeScript\nDESCRIPTION: A simple example showing how to set up a notification handler and schedule a notification using expo-notifications in TypeScript. The handler configures how notifications should be presented to the user.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\n// First, set the handler that will cause the notification\n// to show the alert\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Second, call the method\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Look at that notification',\n    body: \"I'm so proud of myself!\",\n  },\n  trigger: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic GLView Implementation in React Native\nDESCRIPTION: Creates a basic OpenGL ES rendering example that displays a black dot on a cyan background. The code demonstrates the complete OpenGL initialization process including viewport setup, shader creation, and drawing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GLView } from 'expo-gl';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 1, 1, 1);\n\n  // Create vertex shader (shape & position)\n  const vert = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(\n    vert,\n    `\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n      gl_PointSize = 150.0;\n    }\n  `\n  );\n  gl.compileShader(vert);\n\n  // Create fragment shader (color)\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(\n    frag,\n    `\n    void main(void) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  `\n  );\n  gl.compileShader(frag);\n\n  // Link together into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.POINTS, 0, 1);\n\n  gl.flush();\n  gl.endFrameEXP();\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing URLs with Linking.parse in React Native\nDESCRIPTION: This JavaScript snippet shows how to use the Linking.parse function to extract the hostname, path, and query parameters from a URL in a React Native app. It uses the Linking.useURL hook to get the current URL and then parses and logs the details.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfunction App() {\n  const url = Linking.useURL();\n\n  if (url) {\n    const { hostname, path, queryParams } = Linking.parse(url);\n\n    console.log(\n      `Linked to app with hostname: ${hostname}, path: ${path} and data: ${JSON.stringify(\n        queryParams\n      )}`\n    );\n  }\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Repeating Notification in TypeScript\nDESCRIPTION: Example of scheduling a notification that will trigger repeatedly every 20 minutes using the scheduleNotificationAsync method with the repeats flag set to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Remember to drink water!,\n  },\n  trigger: {\n    seconds: 60 * 20,\n    repeats: true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-location Module (JavaScript)\nDESCRIPTION: Standard JavaScript import statement to gain access to the `expo-location` module's functions and constants within a JavaScript or TypeScript file. This import is necessary before using any API provided by the library, such as `requestForegroundPermissionsAsync` or `getCurrentPositionAsync`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport * as Location from 'expo-location';\n```\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Project Setup Commands\nDESCRIPTION: Series of terminal commands for installing EAS CLI, logging in, creating a new project, and configuring EAS Update in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --global eas-cli\n$ eas login\n$ npx create-expo-app\n$ npx expo install expo-updates\n$ eas update:configure\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Basic Brightness Usage Example in React Native\nDESCRIPTION: Example showing how to request brightness permissions and set system brightness to maximum using expo-brightness in a React Native component. Uses useEffect hook to handle async permission request and brightness adjustment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Brightness from 'expo-brightness';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        Brightness.setSystemBrightnessAsync(1);\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Brightness Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for SQLite Database Assets\nDESCRIPTION: Metro configuration setup to include .db file extensions as valid assets in the Expo project\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\n\ndefaultConfig.resolver.assetExts.push('db');\n\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Extending Expo Dev Menu with Custom Buttons in React Native\nDESCRIPTION: Shows how to use the registerDevMenuItems API to add custom buttons to the Expo development menu, allowing developers to extend the menu's functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerDevMenuItems } from 'expo-dev-menu';\n\nconst devMenuItems = [\n  {\n    name: 'My Custom Button',\n    callback: () => console.log('Hello world!'),\n  },\n];\n\nregisterDevMenuItems(devMenuItems);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Media Library Plugin in app.json - JSON\nDESCRIPTION: This JSON snippet shows how to configure the expo-media-library plugin in your app.json or app.config.js file. It sets custom messages for iOS permission dialogs and enables the ACCESS_MEDIA_LOCATION permission on Android by passing plugin options. Prerequisites include an Expo-managed project and support for config plugins. Inputs include string keys for permissions and a boolean, with effects only after rebuilding your app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-media-library\\\",\\n        {\\n          \\\"photosPermission\\\": \\\"Allow $(PRODUCT_NAME) to access your photos.\\\",\\n          \\\"savePhotosPermission\\\": \\\"Allow $(PRODUCT_NAME) to save photos.\\\",\\n          \\\"isAccessMediaLocationEnabled\\\": true\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Navigation with Screen Options in Expo Router\nDESCRIPTION: This snippet shows how to configure a Stack navigation layout with custom screen options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/layouts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function HomeLayout() {\n  return (\n    <Stack screenOptions={{ ... }} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managed Project Build Configuration\nDESCRIPTION: Example configuration for a managed Expo project with multiple build profiles including base, development, staging, and production environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"base\": {\n      \"node\": \"12.13.0\",\n      \"yarn\": \"1.22.5\",\n      \"env\": {\n        \"EXAMPLE_ENV\": \"example value\"\n      },\n      \"android\": {\n        \"image\": \"default\",\n        \"env\": {\n          \"PLATFORM\": \"android\"\n        }\n      },\n      \"ios\": {\n        \"image\": \"latest\",\n        \"env\": {\n          \"PLATFORM\": \"ios\"\n        }\n      }\n    },\n    \"development\": {\n      \"extends\": \"base\",\n      \"developmentClient\": true,\n      \"env\": {\n        \"ENVIRONMENT\": \"development\"\n      },\n      \"android\": {\n        \"distribution\": \"internal\",\n        \"withoutCredentials\": true\n      },\n      \"ios\": {\n        \"simulator\": true\n      }\n    },\n    \"staging\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"staging\"\n      },\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"production\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic App Configuration in JSON\nDESCRIPTION: A minimal example of an app.json file for configuring an Expo app. It defines the app name and slug.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My app\",\n  \"slug\": \"my-app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Content with BlurView in React Native\nDESCRIPTION: Shows how to correctly render BlurView after dynamic content to prevent issues with the blur effect not updating properly when used with components like FlatList.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n  <FlatList />\n  <BlurView />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Specifying iOS Permission Usage Descriptions with Expo (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to use the IOSPermissions component to specify Apple-required usage description keys corresponding to different levels of location access. Dependencies include the IOSPermissions component from the project's codebase. The permissions prop is an array specifying the required iOS Info.plist keys for location services. The input is the permissions array; expected output is proper inclusion of the relevant usage description keys for iOS compliance. This is for informational/documentation purposes—actual integration requires the component to be correctly set up in the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<IOSPermissions\n  permissions={[\n    'NSLocationAlwaysAndWhenInUseUsageDescription',\n    'NSLocationAlwaysUsageDescription',\n    'NSLocationWhenInUseUsageDescription',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using react-native-root-toast Imperative API\nDESCRIPTION: Demonstrates the imperative API of react-native-root-toast, showing how to display and hide toast notifications programmatically.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/react-native-toast.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Add a Toast on screen.\nlet toast = Toast.show('Request failed to send.', {\n  duration: Toast.durations.LONG,\n});\n\n// You can manually hide the Toast, or it will automatically disappear after a `duration` ms timeout.\nsetTimeout(function hideToast() {\n  Toast.hide(toast);\n}, 500);\n```\n\n----------------------------------------\n\nTITLE: Generating Blurhash on a Server with Express.js\nDESCRIPTION: Demonstrates how to create a server endpoint that generates a blurhash from an uploaded image using multer, sharp, and the blurhash package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Multer is a middleware for handling `multipart/form-data`.\nconst multer = require('multer');\n// Sharp allows you to receive a data buffer from the uploaded image.\nconst sharp = require('sharp');\n// Import the encode function from the blurhash package.\nconst { encode } = require('blurhash');\n\n// Initialize `multer`.\nconst upload = multer();\n```\n\n----------------------------------------\n\nTITLE: Launching Android Settings Intent with expo-intent-launcher in TypeScript\nDESCRIPTION: Basic example showing how to open Android location settings using the startActivityAsync function with a predefined ActivityAction constant.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Screenshot Implementation in React Native\nDESCRIPTION: Function implementation that uses Platform.OS to determine whether to use react-native-view-shot for native platforms or dom-to-image for web browsers when capturing screenshots.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/platform-differences.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst onSaveImageAsync = async () => {\n  /* @info Add the if condition here to check whether the current platform is web or not. */ if (Platform.OS !== 'web') { /* @end */\n    try {\n      const localUri = await captureRef(imageRef, {\n        height: 440,\n        quality: 1,\n      });\n      await MediaLibrary.saveToLibraryAsync(localUri);\n      if (localUri) {\n        alert('Saved!');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  } /* @info Add an else condition to run the logic when the current platform is the web. */else {\n    try {\n      const dataUrl = await domtoimage.toJpeg(imageRef.current, {\n        quality: 0.95,\n        width: 320,\n        height: 440,\n      });\n\n      let link = document.createElement('a');\n      link.download = 'sticker-smash.jpeg';\n      link.href = dataUrl;\n      link.click();\n    } catch (e) {\n      console.log(e);\n    }\n  } /* @end */\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for SDK 22 Upgrade\nDESCRIPTION: JSON configuration changes required in package.json when upgrading to Expo SDK 22. Updates React Native, Expo, and React to their compatible versions for SDK 22.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-22.0.1.tar.gz\",\n  \"expo\": \"^22.0.0\",\n  \"react\": \"16.0.0-beta.5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration in React Native App\nDESCRIPTION: Shows how to access the configuration values in a React Native app using the expo-constants package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\n\nConstants.expoConfig.extra.fact === 'kittens are cool';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-auth-session in React Native\nDESCRIPTION: Command to install the expo-auth-session and expo-crypto packages using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-auth-session/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-auth-session expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Barrel File Expansion in JavaScript\nDESCRIPTION: This example shows how star exports are expanded and optimized with tree shaking. It includes both the input and the expanded version of the code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from './icons';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport { ArrowRight, ArrowLeft } from './icons';\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Layout with Platform Module\nDESCRIPTION: Demonstrates how to create different layouts for web and native platforms using React Native's Platform module. The code shows a custom header layout for web and bottom tabs for native platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/platform-specific-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from 'react-native';\nimport { Link, Slot, Tabs } from 'expo-router';\n\nexport default function Layout() {\n  if (Platform.OS === 'web') {\n    // Use a basic custom layout on web.\n    return (\n      <div style={{ flex: 1 }}>\n        <header>\n          <Link href=\"/\">Home</Link>\n          <Link href=\"/settings\">Settings</Link>\n        </header>\n        <Slot />\n      </div>\n    );\n  }\n  // Use a native bottom tabs layout on native platforms.\n  return (\n    <Tabs>\n      <Tabs.Screen name=\"index\" options={{ title: 'Home' }} />\n      <Tabs.Screen name=\"settings\" options={{ title: 'Settings' }} />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring React component classes with proper organization\nDESCRIPTION: Example of organizing a React component with Flow type annotations, following the recommended structure: type declarations at the top, followed by static properties, constructor, lifecycle methods, render method, and helper methods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// CORRECT\ntype Props = {\n  title: string,\n  onPress?: event => void,\n};\n\ntype State = {\n  isPressed: boolean,\n};\n\nclass Button extends React.Component {\n  props: Props;\n  state: State = {\n    isPressed: true,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      ...this.state,\n      bounce: new Animated.Value(1),\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.state.animation) {\n      this.state.animation.stop();\n    }\n  }\n\n  render() {\n    return (\n      <Animated.View\n        onPress={this._handlePress}\n        style={{ transform: [{ scale: this.state.bounce }] }}>\n        <Text>\n          {this.props.title}\n        </Text>\n      </Animated.View>\n    );\n  }\n\n  _handlePress = event => {\n    this._bounce();\n    if (this.props.onPress) {\n      this.props.onPress(event);\n    }\n  };\n\n  _bounce() {\n    this.setState(state => {\n      state.bounce.setValue(0);\n      let animation = Animated.spring(state.bounce, { toValue: 1 });\n      animation.start(({ finished }) => {\n        if (finished) {\n          this.setState(() => ({ animation: null }));\n        }\n      });\n      return { animation };\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Name Prefix Plugin Implementation\nDESCRIPTION: Example of a plugin that modifies the app name by adding a prefix.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function withPrefixedName(config, prefix) {\n  config.name = prefix + '-' + config.name;\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: iOS Entitlements Configuration for Associated Domains\nDESCRIPTION: Manual configuration of Associated Domains capability in iOS entitlements file for apps not using Continuous Native Generation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.associated-domains</key>\n<array>\n  <string>applinks:expo.dev</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Integrating React Query Dev Tools in Expo App\nDESCRIPTION: Example showing how to connect the React Query dev tools plugin to an Expo app. The query client instance is passed to the plugin hook for inspection of queries and cache.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useReactQueryDevTools } from '@dev-plugins/react-query';\n\nconst queryClient = new QueryClient({});\n\nexport default function App() {\n  useReactQueryDevTools(queryClient);\n\n  return <QueryClientProvider client={queryClient}>{/* ... */}</QueryClientProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BarCodeScanner from expo-barcode-scanner - JavaScript\nDESCRIPTION: This snippet shows the correct method to import the BarCodeScanner component from the expo-barcode-scanner library in JavaScript or TypeScript environments. This import is necessary to use the BarCodeScanner functionality in your React Native or Expo application. No additional configuration or parameters are required other than ensuring that the expo-barcode-scanner package is installed via npm or yarn.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n```\n\n----------------------------------------\n\nTITLE: Importing CameraView Component\nDESCRIPTION: Example of importing the CameraView component from the expo-camera package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CameraView } from 'expo-camera';\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for Expo Apps\nDESCRIPTION: A basic metro.config.js file that imports and uses the default Metro configuration from Expo. This setup is required for bundling apps with Expo CLI and serves as a starting point for Metro customization.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/metro-config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Picker in React Native\nDESCRIPTION: Complete example showing how to implement image picking functionality including UI display and handling selected images\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Image, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState<string | null>(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images', 'videos'],\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.canceled) {\n      setImage(result.assets[0].uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={styles.image} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 200,\n    height: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining API Types for ExpoRadialChart\nDESCRIPTION: Defines TypeScript types for the ExpoRadialChart module, including props and event payload types.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewStyle } from 'react-native/types';\n\nexport type ChangeEventPayload = {\n  value: string;\n};\n\ntype Series = {\n  color: string;\n  percentage: number;\n};\n\nexport type ExpoRadialChartViewProps = {\n  style?: ViewStyle;\n  data: Series[];\n};\n```\n\n----------------------------------------\n\nTITLE: Running Expotools Development Version (Shell)\nDESCRIPTION: Executes a specific Expotools command using the locally built binary (`./bin/expotools`). This method bypasses the automatic update check performed by `expotools` or `et`, making it suitable for testing development changes quickly. Replace `COMMAND` with the desired Expotools command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/tools/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./bin/expotools COMMAND\n```\n\n----------------------------------------\n\nTITLE: Using expo-web-browser to Open a URL in React Native (JSX)\nDESCRIPTION: This snippet shows how to use expo-web-browser to open an external webpage from a React Native app. It demonstrates importing dependencies, creating and styling the UI, and handling asynchronous results of opening the browser. The required modules are expo-web-browser, react-native, and optionally expo-constants for styling. The main parameter is the target URL ('https://expo.dev'). The result of the browser action is displayed in the UI as JSON. Inputs are the button press, outputs are the browser result object or null.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\n/* @hide */\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Metro Transformations via babel.config.js in JavaScript\nDESCRIPTION: This `babel.config.js` file demonstrates how to customize Metro's file transformation process within an Expo project. It accesses caller information like platform, engine, server environment, and development mode via the `api.caller` object. It then uses this information to conditionally apply Babel plugins, ensuring the cache is invalidated based on the platform to reflect changes. The configuration uses `babel-preset-expo` as the base.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js babel.config.js\nmodule.exports = function (api) {\n  // Get the platform that Expo CLI is transforming for.\n  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));\n\n  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.\n  const engine = api.caller(caller => (caller ? caller.engine : null));\n\n  // Is bundling for a server environment, e.g. API Routes.\n  const isServer = api.caller(caller => (caller ? caller.isServer : false));\n\n  // Is bundling for development or production.\n  const isDev = api.caller(caller =>\n    caller\n      ? caller.isDev\n      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'\n  );\n\n  // Ensure the config is not cached otherwise the platform will not be updated.\n  api.cache(false);\n  // You can alternatively provide a more robust CONFIG cache invalidation:\n  // api.cache.invalidate(() => platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a plugin based on the platform...\n      platform === 'web' && 'my-plugin',\n\n      // Ensure you filter out falsy values.\n    ].filter(Boolean),\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Stripe Redirect URL Scheme (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to generate the correct `urlScheme` required by `initStripe` when handling redirects, especially for browser-based authentication flows. It uses `expo-linking` and `expo-constants` to dynamically determine the appropriate scheme based on whether the app is running in Expo Go or as a standalone build, ensuring redirects work correctly in both environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Customizing StatusBar Style in Android SplashScreen\nDESCRIPTION: This code shows how to set the StatusBar icon color (light or dark) in Android 6.0+ by modifying the res/values-v23/styles.xml file and setting the android:windowLightStatusBar flag to true for dark icons or false for light icons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:windowLightStatusBar\">true|false</item>\n    <!-- Other style properties -->\n  </style>\n```\n\n----------------------------------------\n\nTITLE: iOS App Entitlements for Accessing SSID - app.json - JSON\nDESCRIPTION: Describes the required app.json configuration to access Wi-Fi SSID details on iOS. Add the com.apple.developer.networking.wifi-info entitlement under ios.entitlements. Required for reading Wi-Fi SSID via state.details.ssid in NetInfo. Applies only to iOS; other prerequisites include setting the app identifier and rebuilding as specified.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"entitlements\": {\n      \"com.apple.developer.networking.wifi-info\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Audio in Expo app.json\nDESCRIPTION: This JSON configuration snippet shows how to enable background audio playback for iOS apps by adding the necessary UIBackgroundModes entry to the Info.plist through app.json configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    ...\n    \"ios\": {\n      ...\n      \"infoPlist\": {\n        ...\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Checkbox Component Implementation\nDESCRIPTION: Enhanced version of the checkbox implementing the controlled component pattern. Moves state management outside the component and introduces checked and onChange props.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/implementing-a-checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyCheckbox({ onChange, checked }) {\n  return (\n    <Pressable\n      style={[styles.checkboxBase, checked && styles.checkboxChecked]}\n      onPress={onChange}>\n      {checked && <Ionicons name=\"checkmark\" size={24} color=\"white\" />}\n    </Pressable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Plugin in Expo Config\nDESCRIPTION: Configuration options for expo-sqlite in app.json/app.config.js including FTS support, SQLCipher integration, and custom build flags.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sqlite\",\n        {\n          \"enableFTS\": true,\n          \"useSQLCipher\": true,\n          \"android\": {\n            \"enableFTS\": false,\n            \"useSQLCipher\": false\n          },\n          \"ios\": {\n            \"customBuildFlags\": [\"-DSQLITE_ENABLE_DBSTAT_VTAB=1 -DSQLITE_ENABLE_SNAPSHOT=1\"]\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind in Expo\nDESCRIPTION: This code sets up the PostCSS configuration file to use Tailwind CSS and Autoprefixer in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Capturing a FullHD image using captureRef in React Native\nDESCRIPTION: This example demonstrates how to use captureRef to capture a FullHD (1080x1080) image of a React Native view, taking into account the device's pixel ratio.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/captureRef.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst targetPixelCount = 1080; // If you want full HD pictures\nconst pixelRatio = PixelRatio.get(); // The pixel ratio of the device\n// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio\nconst pixels = targetPixelCount / pixelRatio;\n\nconst result = await captureRef(this.imageContainer, {\n  result: 'tmpfile',\n  height: pixels,\n  width: pixels,\n  quality: 1,\n  format: 'png',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Expo MailComposer Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import all members from the expo-mail-composer package using JavaScript's import syntax. It is a prerequisite for using any of the MailComposer API methods provided by Expo. To use this, ensure expo-mail-composer is installed and properly configured in your Expo or React Native project. The input is a standard ES6 import statement; the output is an available MailComposer object containing the module's functionalities.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with Expo CLI and Yarn on Windows\nDESCRIPTION: Complete sequence of commands to clear node_modules, Yarn cache, watchman cache, and Metro bundler cache when using Expo CLI with Yarn. Includes special consideration for Yarn workspaces.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# With Yarn workspaces, you may need to delete node_modules in each workspace\n$ rm -rf node_modules\n\n$ yarn cache clean\n\n$ yarn\n\n$ watchman watch-del-all\n\n$ del %localappdata%\\Temp\\haste-map-*\n\n$ del %localappdata%\\Temp\\metro-cache\n\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Creating EAS Channels\nDESCRIPTION: Command to create a new channel in EAS\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:create [channel-name]\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Version Management in EAS.json\nDESCRIPTION: Configuration for enabling remote version management in EAS Build. Sets up automatic version incrementing for production builds and configures the app version source to be managed remotely.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/app-versions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"appVersionSource\": \"remote\"\n  },\n  \"build\": {\n    \"development\": {\n    },\n    \"preview\": {\n    },\n    \"production\": {\n      \"autoIncrement\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Expo Router (SDK 49 and below)\nDESCRIPTION: Adds the Expo Router Babel plugin to the babel.config.js file for projects using SDK 49 and below.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: ['expo-router/babel'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Lottie Component\nDESCRIPTION: Basic import statement for the Lottie component from lottie-react-native package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/lottie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LottieView from 'lottie-react-native';\n```\n\n----------------------------------------\n\nTITLE: Executing Async SQL Transactions in Expo SQLite (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to run an asynchronous SQL query within a transaction on a SQLite database using expo-sqlite/legacy. It opens a database, starts a transaction via transactionAsync, executes a SELECT statement to count users, and logs the result. Dependencies: expo-sqlite/legacy package. Parameters include the database name, version, and a readOnly boolean.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/legacy';\\n\\nconst db = SQLite.openDatabase('dbName', version);\\n\\nconst readOnly = true;\\nawait db.transactionAsync(async tx => {\\n  const result = await tx.executeSqlAsync('SELECT COUNT(*) FROM USERS', []);\\n  console.log('Count:', result.rows[0]['COUNT(*)']);\\n}, readOnly);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins for Print Output on iOS with expo-print in JavaScript\nDESCRIPTION: Shows how to specify custom page margins when creating PDF printouts using expo-print's printToFileAsync. Requires expo-print. The margins parameter is an object specifying top, bottom, left, and right values in points. The input is an options object with HTML and margins; output is a URI for the resulting PDF file. Limitation: If useMarkupFormatter is true, malformed HTML may cause extra blank pages; ensure HTML is well-formed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Apple Sign In Entitlement in iOS Project (XML)\nDESCRIPTION: This XML snippet adds the com.apple.developer.applesignin entitlement to the app's entitlements file, which is required when enabling Apple Sign In manually through the Apple Developer Console. The key must be set to an array containing 'Default'. The input is the ios/[app]/[app].entitlements plist file, and the output is an iOS app with the correct entitlement for Apple Authentication. This does not require additional dependencies and must be included before building the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Recursive Optimizations in JavaScript\nDESCRIPTION: This code snippet demonstrates how Expo recursively optimizes modules by removing unused exports. It shows an example with two functions where one depends on the other.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport function foo() {\n  // Because bar is used here, it cannot be removed.\n  bar();\n}\n\nexport function bar() {}\n```\n\n----------------------------------------\n\nTITLE: Checking Notification Permissions Status\nDESCRIPTION: A utility function that checks if the app is allowed to send notifications by verifying if permissions are granted or if iOS has provisional status. Returns a boolean indicating permission status.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nexport async function allowsNotificationsAsync() {\n  const settings = await Notifications.getPermissionsAsync();\n  return (\n    settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an existing SQLite database in Expo React Native\nDESCRIPTION: This snippet shows how to open a new SQLite database using an existing .db file in an Expo React Native application. It uses the SQLiteProvider component with the assetSource prop to specify the database file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SQLiteProvider databaseName=\"test.db\" assetSource={{ assetId: require('./assets/test.db') }}>\n        <Header />\n        <Content />\n      </SQLiteProvider>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in app.config.js\nDESCRIPTION: JavaScript code that defines environment variables IS_DEV and IS_PREVIEW to identify different build variants based on the APP_VARIANT environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst IS_DEV = process.env.APP_VARIANT === 'development';\nconst IS_PREVIEW = process.env.APP_VARIANT === 'preview';\n```\n\n----------------------------------------\n\nTITLE: Creating a Details Screen Route in Expo Router\nDESCRIPTION: Implements a details screen route component with centered text. This file corresponds to the '/details' path in the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function DetailsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Details</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Snapshot Test for React Native Components\nDESCRIPTION: Extend the existing test file to include a snapshot test for the CustomText component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('<HomeScreen />', () => {\n  // ... existing tests\n\n  test('CustomText renders correctly', () => {\n    const tree = render(<CustomText>Some text</CustomText>).toJSON();\n\n    expect(tree).toMatchSnapshot();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Notification with Custom Sound (TypeScript)\nDESCRIPTION: TypeScript code that schedules a notification with a custom sound. This example shows how to configure the notification content and trigger with a specified sound file and channel ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up SafeAreaProvider in React Native App Root\nDESCRIPTION: Shows how to wrap the root component of a React Native application with `SafeAreaProvider`. This step is necessary to provide the safe area context to all child components, enabling the use of `SafeAreaView` and `useSafeAreaInsets`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Push Receipt Response Format in JavaScript\nDESCRIPTION: Defines the structure of a push receipt response from Expo. It maps receipt IDs to their status information and includes optional error details for the entire request.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": {\n    Receipt ID: {\n      \"status\": \"error\" | \"ok\",\n      // if status === \"error\"\n      \"message\": string,\n      \"details\": JSON\n    },\n    ...\n  },\n  // only populated if there was an error with the entire request\n  \"errors\": [{\n    \"code\": string,\n    \"message\": string\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQLite Statements Outside Transactions in Expo\nDESCRIPTION: This code snippet shows how to execute SQLite statements outside of a transaction in an Expo app. It's useful for operations that are no-ops within transactions, like setting PRAGMA values.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/sqlite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n\nconst db = SQLite.openDatabase('dbName', version);\n\ndb.exec([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false, () =>\n  console.log('Foreign keys turned on')\n);\n```\n\n----------------------------------------\n\nTITLE: Importing LottieView Component in JavaScript\nDESCRIPTION: This JavaScript snippet shows the standard way to import the `LottieView` component from the 'lottie-react-native' library, which is necessary to use Lottie animations within a React Native application. This import makes the component available for use in JSX.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/lottie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport LottieView from 'lottie-react-native';\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Navigator Layout in Expo Router (TypeScript)\nDESCRIPTION: This snippet shows how to create a root layout using a Stack navigator in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Route Parameters on Press Event in Expo Router (TypeScript)\nDESCRIPTION: This snippet shows how to update route parameters using an onPress event and the router.setParams function in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams, router } from 'expo-router';\nimport { Text } from 'react-native';\n\nexport default function User() {\n  const params = useLocalSearchParams<{ user: string }>();\n\n  return (\n    <>\n      <Text>User: {params.user}</Text>\n      <Text onPress={() => router.setParams({ user: 'evan' })}>Go to Evan</Text>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Profiles in EAS JSON\nDESCRIPTION: This JSON snippet defines build profiles with environment variables for production and development builds. It sets the APP_ENV variable differently for each profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/automate-submissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"APP_ENV\": \"production\"\n      }\n    },\n    \"development\": {\n      \"env\": {\n        \"APP_ENV\": \"development\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BlurView Usage in React Native\nDESCRIPTION: Demonstrates how to use BlurView component with different intensities and tints. It also shows how to style the component and create a background with colored boxes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { BlurView } from 'expo-blur';\n\nexport default function App() {\n  const text = 'Hello, my container is blurring contents underneath!';\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.background}>\n        {[...Array(20).keys()].map(i => (\n          <View\n            key={`box-${i}`}\n            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}\n          />\n        ))}\n      </View>\n      <BlurView intensity={100} style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={80} tint=\"light\" style={styles.blurContainer}>\n        <Text style={styles.text}>{text}</Text>\n      </BlurView>\n      <BlurView intensity={90} tint=\"dark\" style={styles.blurContainer}>\n        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>\n      </BlurView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  blurContainer: {\n    flex: 1,\n    padding: 20,\n    margin: 16,\n    textAlign: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    borderRadius: 20,\n  },\n  background: {\n    flex: 1,\n    flexWrap: 'wrap',\n    ...StyleSheet.absoluteFill,\n  },\n  box: {\n    width: '25%',\n    height: '20%',\n  },\n  boxEven: {\n    backgroundColor: 'orangered',\n  },\n  boxOdd: {\n    backgroundColor: 'gold',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating index.js to Circumvent EXPO_ROUTER_APP_ROOT Issue in React Native\nDESCRIPTION: Demonstrates how to create an index.js file in the project root to work around the undefined EXPO_ROUTER_APP_ROOT issue. This solution uses require.context and ExpoRoot to set up the app structure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/troubleshooting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { ExpoRoot } from 'expo-router';\n\n// Must be exported or Fast Refresh won't update the context\nexport function App() {\n  const ctx = require.context('./app');\n  return <ExpoRoot context={ctx} />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-video Plugin in app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the `expo-video` plugin within the `app.json` (or `app.config.js`) file of an Expo project. It enables features like background playback and Picture-in-Picture (PiP) support by setting boolean flags within the plugin's configuration object. This configuration requires using EAS Build or `npx expo run:[android|ios]` as it modifies native project files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-video\",\n        {\n          \"supportsBackgroundPlayback\": true,\n          \"supportsPictureInPicture\": true\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SecureStore Plugin in app.json\nDESCRIPTION: Configuration example for expo-secure-store plugin in app.json, showing how to set up Face ID permissions and Android backup options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-secure-store\",\n        {\n          \"configureAndroidBackup\": true,\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to access your Face ID biometric data.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Expo App for Android and iOS\nDESCRIPTION: These commands compile the Expo project into debug builds for Android and iOS using locally installed SDKs. They run 'npx expo prebuild' if native directories don't exist, and support device selection and release build options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/local-app-development.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build native Android project\n$ npx expo run:android\n# Build native iOS project\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK Packages in JavaScript\nDESCRIPTION: Illustrates how to import installed Expo SDK packages into a JavaScript file. This example shows importing the `Camera` class from `expo-camera`, the entire `expo-contacts` module as `Contacts`, and the `Gyroscope` component from `expo-sensors`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo App Config for Handoff\nDESCRIPTION: Configuration for app.config.tsx that sets up the Handoff origin and associated domains for the Expo application. Includes development and production URL handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nprocess.env.EXPO_TUNNEL_SUBDOMAIN = 'bacon-router-sandbox';\n\nconst ngrokUrl = `${process.env.EXPO_TUNNEL_SUBDOMAIN}.ngrok.io`;\n\n/** @type {import('expo/config').ExpoConfig} */\nmodule.exports = {\n  // ...\n  ios: {\n    associatedDomains: [\n      `applinks:${ngrokUrl}`,\n      `activitycontinuation:${ngrokUrl}`,\n      `webcredentials:${ngrokUrl}`,\n      // Add additional production-URLs here.\n      // `applinks:example.com`,\n      // `activitycontinuation:example.com`,\n      // `webcredentials:example.com`,\n    ],\n  },\n\n  plugins: [\n    [\n      'expo-router',\n      {\n        // Note: The URL must start with \"https://\" in \"headOrigin\"\n        headOrigin:\n          process.env.NODE_ENV === 'development'\n            ? `https://${ngrokUrl}`\n            : 'https://my-website-example.com',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating URL Objects in Expo\nDESCRIPTION: Basic examples of creating URL and URLSearchParams objects using the standard URL API in Expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = new URL('https://expo.dev');\n\nconst params = new URLSearchParams();\n```\n\n----------------------------------------\n\nTITLE: Opening an Existing SQLite Database Asset in TypeScript\nDESCRIPTION: This TypeScript function demonstrates how to initialize a SQLite database using an existing .db asset file in Expo, compatible with React Native environments. It conditionally creates a directory, downloads the asset using expo-asset, and copies it to the app's SQLite storage directory before opening it. Dependencies: expo-file-system, expo-asset, expo-sqlite, and a valid asset module path. Key parameters: pathToDatabaseFile, which is the required asset path. Input: relative/absolute asset path; Output: opened SQLite database handle. The function presumes proper Metro config setup and asset availability.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function openDatabase(pathToDatabaseFile: string): Promise<SQLite.Database> {\\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\\n  }\\n  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();\\n  await FileSystem.copyAsync({\\n    from: asset.localUri,\\n    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',\\n  });\\n  return await SQLite.openDatabaseAsync('myDatabaseName.db');\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notification Sounds in Expo (app.json) - JSON\nDESCRIPTION: This JSON snippet demonstrates how to add the expo-notifications plugin and specify custom notification sounds in the Expo app configuration file (app.json). The 'sounds' array lists relative paths to audio files included in the project, which will then be bundled for use in notifications. No external dependencies are required beyond including proper paths and integrating with EAS Build or the bare workflow. The expected input is the app.json file, and the output is the configuration used by the Expo build system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-notifications\\\",\\n        {\\n          \\\"sounds\\\": [\\\"local/path/to/mySoundFile.wav\\\"]\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Babel Transformations in Expo using babel.config.js (JavaScript)\nDESCRIPTION: This `babel.config.js` configuration file demonstrates how to access Metro bundler caller information (like platform, engine, environment) via the `api.caller` function to customize Babel transformations. It uses `babel-preset-expo` as the base preset and conditionally adds a plugin for the web platform. Proper caching invalidation using `api.cache(false)` or `api.cache.invalidate` is highlighted to ensure platform changes are reflected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (api) {\n  // Get the platform that Expo CLI is transforming for.\n  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));\n\n  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.\n  const engine = api.caller(caller => (caller ? caller.engine : null));\n\n  // Is bundling for a server environment, e.g. API Routes.\n  const isServer = api.caller(caller => (caller ? caller.isServer : false));\n\n  // Is bundling for development or production.\n  const isDev = api.caller(caller =>\n    caller\n      ? caller.isDev\n      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'\n  );\n\n  // Ensure the config is not cached otherwise the platform will not be updated.\n  api.cache(false);\n  // You can alternatively provide a more robust CONFIG cache invalidation:\n  // api.cache.invalidate(() => platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a plugin based on the platform...\n      platform === 'web' && 'my-plugin',\n\n      // Ensure you filter out falsy values.\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-contacts plugin in app.json\nDESCRIPTION: Example configuration for the expo-contacts plugin in app.json. This sets the contacts permission message for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-contacts\",\n        {\n          \"contactsPermission\": \"Allow $(PRODUCT_NAME) to access your contacts.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Screen Capture with React Hook in Expo\nDESCRIPTION: This snippet demonstrates how to use the usePreventScreenCapture hook to prevent screen capture in a React component. It renders a simple view with text indicating that the screen is unrecordable while the component is mounted.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring baseUrl for GitHub Pages deployment in app.json\nDESCRIPTION: This snippet shows how to set the experimental baseUrl property in the app.json file for deploying an Expo web app to GitHub Pages. The baseUrl is set to the repository name to ensure correct asset loading.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/publishing-websites.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"baseUrl\": \"/expo-gh-pages\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notification Sounds in app.json\nDESCRIPTION: Example of adding the expo-notifications plugin to app.json and specifying custom notification sounds. This configuration allows the use of custom sound files for notifications in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Server for Handling File Uploads from Expo FileSystem\nDESCRIPTION: This Node.js server example demonstrates how to handle both binary and multipart file uploads from Expo applications. It uses Express and multer to process and save uploaded files to the server's filesystem.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\n// This method will save the binary content of the request as a file.\napp.patch('/binary-upload', (req, res) => {\n  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));\n  res.end('OK');\n});\n\n// This method will save a \"photo\" field from the request as a file.\napp.patch('/multipart-upload', upload.single('photo'), (req, res) => {\n  // You can access other HTTP parameters. They are located in the body object.\n  console.log(req.body);\n  res.end('OK');\n});\n\napp.listen(3000, () => {\n  console.log('Working on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Expo-video-thumbnails Module (JavaScript)\nDESCRIPTION: This snippet shows the basic import statement required to use the expo-video-thumbnails API in a JavaScript or React Native environment. This is a prerequisite for accessing any video thumbnail generation functions. Dependencies: expo-video-thumbnails must be installed. The import provides access to the full API exported by the module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Sounds in app.json for Expo Notifications\nDESCRIPTION: This JSON snippet demonstrates how to configure the `expo-notifications` plugin within the `app.json` file to include custom notification sound files. It specifies an array of local file paths under the `sounds` key, making these sounds available for use within the application after building with EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Layout with Initial Route in Expo Router\nDESCRIPTION: Demonstrates how to set up a Stack layout with initialRouteName setting to ensure routes can link back to the index page. This configuration enables proper back button behavior when deep linking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/router-settings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport const unstable_settings = {\n  // Ensure any route can link back to `/`\n  initialRouteName: 'index',\n};\n\nexport default function Layout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Print API from expo-print in JavaScript\nDESCRIPTION: Illustrates how to import all available methods and constants from the expo-print package for further use in a JavaScript or React Native environment. Prerequisite: expo-print installation. No parameters or return values. This import is required before accessing the printing APIs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Print from 'expo-print';\n```\n\n----------------------------------------\n\nTITLE: Importing AV Components\nDESCRIPTION: Example showing how to import Audio and Video components from expo-av package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Audio, Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Modifying AndroidManifest.xml with Config Plugin\nDESCRIPTION: Demonstrates how to create a config plugin that adds metadata to the main application in the AndroidManifest.xml file. It uses helpers from AndroidConfig.Manifest to safely modify the XML structure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { AndroidConfig, ConfigPlugin, withAndroidManifest } from 'expo/config-plugins';\nimport { ExpoConfig } from 'expo/config';\n\n// Using helpers keeps error messages unified and helps cut down on XML format changes.\nconst { addMetaDataItemToMainApplication, getMainApplicationOrThrow } = AndroidConfig.Manifest;\n\nexport const withMyCustomConfig: ConfigPlugin = config => {\n  return withAndroidManifest(config, async config => {\n    // Modifiers can be async, but try to keep them fast.\n    config.modResults = await setCustomConfigAsync(config, config.modResults);\n    return config;\n  });\n};\n\n// Splitting this function out of the mod makes it easier to test.\nasync function setCustomConfigAsync(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidConfig.Manifest.AndroidManifest\n): Promise<AndroidConfig.Manifest.AndroidManifest> {\n  const appId = 'my-app-id';\n  // Get the <application /> tag and assert if it doesn't exist.\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    // value for `android:name`\n    'my-app-id-key',\n    // value for `android:value`\n    appId\n  );\n\n  return androidManifest;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating app.json for Expo Configuration\nDESCRIPTION: Modify app.json to remove fields outside the top-level expo object, as they are not used in npx expo prebuild.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n{\n-  \"name\": \"myapp\",\n-  \"displayName\": \"myapp\"\n+  \"expo\": {\n+    \"name\": \"myapp\"\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profiles with Channels in eas.json\nDESCRIPTION: JSON configuration for EAS build profiles specifying development, preview, and production environments with their respective channel settings. Defines distribution types and development client settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/migrate-from-classic-updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"channel\": \"preview\"\n    },\n    \"production\": {\n      \"channel\": \"production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Images in eas.json for GitHub-triggered Builds\nDESCRIPTION: This JSON snippet shows how to specify the build image for development profile in eas.json. It sets the android.image and ios.image properties to 'latest', which is necessary for triggering automated builds through GitHub PR labels.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/using-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      /* @hide ... */ /* @end */\n      /* @info */\n      \"android\": {\n        \"image\": \"latest\"\n      },\n      \"ios\": {\n        \"image\": \"latest\"\n      }\n      /* @end */\n    }\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Using DOM Directive in React Components\nDESCRIPTION: Examples of DOM directives in React components showing both client-side and server-side usage patterns. These directives control component rendering behavior in Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"use dom\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Site Association File in Expo\nDESCRIPTION: Example configuration for the apple-app-site-association file that enables universal links for all routes in an Expo application. This file must be placed in the public/.well-known directory and served over HTTPS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appIDs\": [\"<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>\"],\n        \"components\": [\n          {\n            \"/\": \"*\",\n            \"comment\": \"Matches all routes\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSC Engine in Expo Config\nDESCRIPTION: Configuration example showing how to set JavaScriptCore (JSC) as the JavaScript engine in an Expo project's app.json configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/configuring-js-engines.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"jsEngine\": \"jsc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Video component reference\nDESCRIPTION: Code showing how to obtain a reference to a Video component to control playback imperatively through the unified API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_handleVideoRef = component => {\n  const playbackObject = component;\n  ...\n}\n\nrender() {\n  return (\n      <Video\n        ref={this._handleVideoRef}\n      />\n      /* @hide ... */ /* @end */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Picker Functionality in React Native App\nDESCRIPTION: Imports the ImagePicker library and creates a pickImageAsync function to launch the device's image library with options for editing. The function handles the result by logging selected image information or showing an alert if no image was selected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// ...rest of the import statements remain unchanged\nimport * as ImagePicker from 'expo-image-picker';\n\nexport default function App() {\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      console.log(result);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  // ...rest of the code remains same\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.json\nDESCRIPTION: JSON configuration for the expo-build-properties plugin in app.json. This snippet shows how to customize Android compileSdkVersion, targetSdkVersion, buildToolsVersion, and iOS deploymentTarget.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 33,\n            \"targetSdkVersion\": 33,\n            \"buildToolsVersion\": \"33.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"13.0\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Config Plugin for Removing exp+ Schemes in Android Verified Links\nDESCRIPTION: This JavaScript code creates a custom Config Plugin that removes the 'exp+' schemes from intent filters when verifying Android App Links. It's used to fix issues with expo-dev-client version 1.2.1 and below on Android 12+.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createRunOncePlugin, withAndroidManifest } = require('@expo/config-plugins');\n\n/**\n * @typedef {import('@expo/config-plugins').ConfigPlugin} ConfigPlugin\n * @typedef {import('@expo/config-plugins').AndroidManifest} AndroidManifest\n */\n\n/**\n * Remove the custom Expo dev client scheme from intent filters, which are set to `autoVerify=true`.\n * The custom scheme `<data android:scheme=\"exp+<slug>\"/>` seems to block verification for these intent filters.\n * This plugin makes sure there is no scheme in the autoVerify intent filters, that starts with `exp+`.\n *\n * @type {ConfigPlugin}\n */\nconst withAndroidVerifiedLinksWorkaround = config =>\n  withAndroidManifest(config, config => {\n    config.modResults = removeExpoSchemaFromVerifiedIntentFilters(config.modResults);\n    return config;\n  });\n\n/**\n * Iterate over all `autoVerify=true` intent filters, and pull out schemes starting with `exp+`.\n *\n * @param {AndroidManifest} androidManifest\n */\nfunction removeExpoSchemaFromVerifiedIntentFilters(androidManifest) {\n  for (const application of androidManifest.manifest.application || []) {\n    for (const activity of application.activity || []) {\n      if (activityHasSingleTaskLaunchMode(activity)) {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          if (intentFilterHasAutoVerification(intentFilter) && intentFilter?.data) {\n            intentFilter.data = intentFilterRemoveSchemeFromData(intentFilter, scheme =>\n              scheme?.startsWith('exp+')\n            );\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n\n/**\n * Determine if the activity should contain the intent filters to clean.\n *\n */\nfunction activityHasSingleTaskLaunchMode(activity) {\n  return activity?.$?.['android:launchMode'] === 'singleTask';\n}\n\n/**\n * Determine if the intent filter has `autoVerify=true`.\n */\nfunction intentFilterHasAutoVerification(intentFilter) {\n  return intentFilter?.$?.['android:autoVerify'] === 'true';\n}\n\n/**\n * Remove schemes from the intent filter that matches the function.\n */\nfunction intentFilterRemoveSchemeFromData(intentFilter, schemeMatcher) {\n  return intentFilter?.data?.filter(entry => !schemeMatcher(entry?.$['android:scheme'] || ''));\n}\n\nmodule.exports = createRunOncePlugin(\n  withAndroidVerifiedLinksWorkaround,\n  'withAndroidVerifiedLinksWorkaround',\n  '1.0.0'\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Media Library Albums and Assets in React Native\nDESCRIPTION: A React Native component that demonstrates how to fetch albums from the media library, request permissions, and display album assets using expo-media-library. It includes handlers for permission requests and asynchronous data fetching.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\nimport * as MediaLibrary from 'expo-media-library';\n\nexport default function App() {\n  const [albums, setAlbums] = useState(null);\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n\n  async function getAlbums() {\n    if (permissionResponse.status !== 'granted') {\n      await requestPermission();\n    }\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums: true,\n    });\n    setAlbums(fetchedAlbums);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Button onPress={getAlbums} title=\"Get albums\" />\n      <ScrollView>\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nfunction AlbumEntry({ album }) {\n  const [assets, setAssets] = useState([]);\n\n  useEffect(() => {\n    async function getAlbumAssets() {\n      const albumAssets = await MediaLibrary.getAssetsAsync({ album });\n      setAssets(albumAssets.assets);\n    }\n    getAlbumAssets();\n  }, [album]);\n\n  return (\n    <View key={album.id} style={styles.albumContainer}>\n      <Text>\n        {album.title} - {album.assetCount ?? 'no'} assets\n      </Text>\n      <View style={styles.albumAssetsContainer}>\n        {assets && assets.map((asset) => (\n          <Image source={{ uri: asset.uri }} width={50} height={50} />\n        ))}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    gap: 8,\n    justifyContent: 'center',\n    ...Platform.select({\n      android: {\n        paddingTop: 40,\n      },\n    }),\n  },\n  albumContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 12,\n    gap: 4,\n  },\n  albumAssetsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Building/Submitting Apps\nDESCRIPTION: Commands for installing the EAS CLI tool and building/submitting apps to app stores. Shows both the complete command sequence and a condensed version for copying.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install the CLI\n$ npm i -g eas-cli\n\n# Build and submit your app\n$ eas build --auto-submit\n\n# OR -- Submit existing binaries\n$ eas submit\n```\n\n----------------------------------------\n\nTITLE: Integrating Basic Dev Tools Plugin in React Native with Expo\nDESCRIPTION: A simple example showing how to add a basic dev tools plugin to an Expo app by using the plugin's hook in the App component. This enables inspection and debugging capabilities in development mode.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMyDevToolsPlugin } from 'my-devtools-plugin';\n\nexport default App() {\n  useMyDevToolsPlugin();\n  return (/* rest of your app */)\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaInsetsContext Consumer\nDESCRIPTION: Example of using the SafeAreaInsetsContext.Consumer to access inset data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Crypto Usage in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the expo-crypto module in a React Native application. It shows importing the module, using it within a useEffect hook to compute a SHA256 digest of a string, and logging the result.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/crypto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Crypto from 'expo-crypto';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        'GitHub stars are neat 🌟'\n      );\n      console.log('Digest: ', digest);\n      /* Some crypto operation... */\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Crypto Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Route Path with usePathname in Expo Router\nDESCRIPTION: Demonstrates the use of usePathname hook to retrieve the currently selected route location without search parameters, with segment normalization.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/hooks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { usePathname } from 'expo-router';\n\nexport default function Route() {\n  const pathname = usePathname();\n\n  return <Text>User: {user}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Route and Search Parameters in Expo Router\nDESCRIPTION: Demonstrates how to access route parameters and search parameters using useLocalSearchParams hook. Shows how to type the parameters and access values from the URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function User() {\n  const {\n    // The route parameter\n    user,\n    // An optional search parameter.\n    tab,\n  } = useLocalSearchParams<{ user: string; tab?: string }>();\n\n  console.log({ user, tab });\n\n  // Given the URL: `/bacon?tab=projects`, the following is printed:\n  // { user: 'bacon', tab: 'projects' }\n\n  // Given the URL: `/expo`, the following is printed:\n  // { user: 'expo', tab: undefined }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Locales and Calendars API from expo-localization - JSX\nDESCRIPTION: This code snippet shows how to import getLocales and getCalendars functions from the expo-localization package in a React Native or Expo managed workflow. These synchronous API calls allow access to the user's preferred locale and calendar information on various platforms. Both functions are used to fetch localization preferences; results may change on Android when device settings change, so the developer should use AppState to refresh them as needed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Gradle Properties in Expo Prebuild\nDESCRIPTION: Shows an example of modifying gradle.properties using a custom config plugin in Expo Prebuild.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/prebuild.mdx#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nwithGradleProperties((config) => {\n  config.modResults = {\n    ...config.modResults,\n    'org.gradle.java.home': '/path/to/jdk11',\n  };\n  return config;\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring credentials source in eas.json\nDESCRIPTION: Example eas.json configuration that specifies whether to use local or remote credentials for different build profiles. This allows using local credentials for some app stores and remote credentials for others.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"amazon-production\": {\n      \"android\": {\n        \"credentialsSource\": \"local\"\n      }\n    },\n    \"google-production\": {\n      \"android\": {\n        \"credentialsSource\": \"remote\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Push Notification Message Format for Expo\nDESCRIPTION: JSON schema for configuring push notification messages in Expo applications. Includes all supported fields for both iOS and Android platforms with detailed field descriptions and platform-specific features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"to\": \"string | string[]\",\n  \"_contentAvailable\": \"boolean | undefined\",\n  \"data\": \"Object\",\n  \"title\": \"string\",\n  \"body\": \"string\",\n  \"ttl\": \"number\",\n  \"expiration\": \"number\",\n  \"priority\": \"'default' | 'normal' | 'high'\",\n  \"subtitle\": \"string\",\n  \"sound\": \"'default' | null\",\n  \"badge\": \"number\",\n  \"channelId\": \"string\",\n  \"categoryId\": \"string\",\n  \"mutableContent\": \"boolean\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying ImageViewer Component to Display Selected Image\nDESCRIPTION: Updates the ImageViewer component to conditionally display either the selected image from the device or a placeholder image based on whether an image has been selected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ImageViewer({ placeholderImageSource, selectedImage }) {\n  const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\n\n  return <Image source={imageSource} style={styles.image} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins via CSS @page Rule for Android Printing (HTML)\nDESCRIPTION: Demonstrates how to use the CSS @page rule within an HTML style block to control printed page margins on Android when using HTML printing via expo-print. No dependencies other than inclusion in the HTML document. Input/Output: A style block targeting the @page pseudo-class to manage printer margins. Limitation: Margin rendering may depend on the underlying Android WebView engine and browser implementation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/print.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Non-ASCII URL Handling Example\nDESCRIPTION: Demonstrates the platform-specific differences in handling non-ASCII characters in URLs, specifically showing how web/Node.js and native platforms handle emoji in hostnames differently.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(new URL('http://🥓').toString());\n```\n\n----------------------------------------\n\nTITLE: Configuring app.json for Deep Linking - JSON\nDESCRIPTION: Shows the necessary addition to the app.json or app.config.js file for enabling deep linking back to your app when using AuthSession. The 'scheme' property specifies the URI scheme used by authentication providers for redirects. If omitted, authentication cannot return users to the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"scheme\\\": \\\"mycoolredirect\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update with Custom Parameters in YAML\nDESCRIPTION: Demonstrates how to use the eas/configure_eas_update function with custom runtime version and channel parameters to configure EAS Update for the build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure EAS Update\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    # @info #\n    - eas/configure_eas_update:\n        inputs:\n          runtime_version: 1.0.0\n          channel: mychannel\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.config.js\nDESCRIPTION: Example configuration of Android and iOS build properties in app.config.js using the expo-build-properties plugin. Sets Android SDK versions and iOS deployment target.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  expo: {\n    plugins: [\n      [\n        'expo-build-properties',\n        {\n          android: {\n            compileSdkVersion: 34,\n            targetSdkVersion: 34,\n            buildToolsVersion: '34.0.0',\n          },\n          ios: {\n            deploymentTarget: '13.4',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Expo Router Root Layout Configuration\nDESCRIPTION: Implementation of root layout configuration in Expo Router using Stack navigator.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack>\n      <Stack.Screen\n        name=\"(home)\"\n        options={{\n            title: 'Home Screen',\n          }}\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-asset Plugin in app.json\nDESCRIPTION: Configuration example for expo-asset using the built-in config plugin in app.json. Shows how to specify asset files and directories to be linked to the native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-asset\",\n        {\n          \"assets\": [\"path/to/file.png\", \"path/to/directory\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locale Settings Usage Example\nDESCRIPTION: Example demonstrating how to access device locale settings and preferences using expo-localization.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n\nconst {\n  languageTag,\n  languageCode,\n  textDirection,\n  digitGroupingSeparator,\n  decimalSeparator,\n  measurementSystem,\n  currencyCode,\n  currencySymbol,\n  regionCode,\n} = getLocales()[0];\n\nconst { calendar, timeZone, uses24hourClock, firstWeekday } = getCalendars()[0];\n```\n\n----------------------------------------\n\nTITLE: Extracting a Certificate from a Conventional PKCS#12 File\nDESCRIPTION: This code demonstrates how to extract a certificate from a conventional PKCS#12 file. It deserializes the base64-encoded P12 file, extracts the certificate, and generates a SHA-1 fingerprint of the certificate.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/pkcs12/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst p12 = parsePKCS12(base64EncodedP12, password); // deserializes encodedP12\nconst certificate = getX509Certificate(p12); // extracts single certificate from p12\nconst sha1Fingerprint = getCertificateFingerprint(certificate, {\n  hashAlgorithm: 'sha1',\n}); // Hash like 02ec75a7181c575757baa931fe3105b7125ff10a\n```\n\n----------------------------------------\n\nTITLE: Navigating to Nested Screen in Expo Router\nDESCRIPTION: This snippet shows how to navigate to a nested screen in Expo Router. It uses the router.push method with a direct path to the nested screen, simplifying the navigation process compared to React Navigation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nrouter.push('/root/settings/media');\n```\n\n----------------------------------------\n\nTITLE: Creating a Reference for View Screenshot Capture\nDESCRIPTION: Code for creating a ref using useRef hook and setting up a View component with that ref to capture screenshots of specific content using react-native-view-shot.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef } from 'react';\n\nexport default function App() {\n  const imageRef = useRef();\n\n  // ...rest of the code remains same\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <View style={styles.imageContainer}>\n        <View ref={imageRef} collapsable={false}>\n          <ImageViewer placeholderImageSource={PlaceholderImage} selectedImage={selectedImage} />\n          {pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}\n        </View>\n      </View>\n      {/* ...rest of the code remains same */}\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Global Crypto Polyfill Implementation\nDESCRIPTION: Code to globally define the crypto object using the polyfillWebCrypto function, making it available throughout the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-standard-web-crypto/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { polyfillWebCrypto } from 'expo-standard-web-crypto';\n\npolyfillWebCrypto();\n// crypto is now globally defined\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Reanimated in React Native\nDESCRIPTION: This snippet shows how to configure the Babel plugin for Reanimated in a React Native project. It adds the Reanimated Babel plugin to the project's babel.config.js file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/reanimated.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: ['react-native-reanimated/plugin'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent from Expo (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates importing the registerRootComponent function from the 'expo' package. This function is essential for registering the root React component when customizing the main entry point of an Expo-managed app. Requires the 'expo' package as a dependency. No inputs or outputs; use as an import statement before invoking the function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Importing Core expo-video Components (JavaScript)\nDESCRIPTION: This snippet shows how to import the primary building blocks VideoView and useVideoPlayer from the expo-video library in JavaScript. These imports are essential for using the video playback features in your app and should be placed at the top of your JavaScript or React Native files. No additional logic or setup is included, and it serves as a prerequisite for building on the expo-video API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { VideoView, useVideoPlayer } from 'expo-video';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Face ID Usage in Info.plist\nDESCRIPTION: XML configuration for setting up Face ID usage description in iOS Info.plist file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Controlling Audio Playback - Expo AV JavaScript\nDESCRIPTION: Shows how to set up audio mode (allowing playback in silent mode on iOS) and load or create an Audio.Sound instance for playback. It demonstrates both manual instantiation and usage of Audio.Sound.createAsync, with the latter supporting loading a URI and playback options in one step. Inputs can include local or remote media URIs; outputs are playback object instances used for further control.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\\n\\nconst playbackObject = new Audio.Sound();\\n// OR\\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\\n  { uri: 'http://foo/bar.mp3' },\\n  { shouldPlay: true }\\n);\\n...\n```\n\n----------------------------------------\n\nTITLE: Registering an iOS Device with EAS CLI\nDESCRIPTION: Command to register a new iOS device with Apple using EAS CLI, which will create a provisioning profile for development builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-devices.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas device:create\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Statements Outside of Transactions in Expo SQLite (JavaScript)\nDESCRIPTION: This code shows how to execute SQL commands outside of a transaction using the execAsync method from expo-sqlite/legacy. It turns on foreign key support with a PRAGMA statement, which is sometimes necessary to run outside of a transaction. Dependencies: expo-sqlite/legacy package. The snippet is mainly for settings that must not run within a transaction.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/legacy';\\n\\nconst db = SQLite.openDatabase('dbName', version);\\n\\nawait db.execAsync([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false);\\nconsole.log('Foreign keys turned on');\n```\n\n----------------------------------------\n\nTITLE: Redirecting to App Store Reviews using React Native Linking API (TypeScript)\nDESCRIPTION: Opens the App Store's 'Write a Review' screen for a specific iOS app using the React Native Linking API. Supports both browser and native deep link formats. Requires the React Native Linking module. Parameter itunesItemId is the App Store item ID for the app. No output is returned. Ensure platform checks when using this on non-iOS devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Importing expo-local-authentication Module (JavaScript)\nDESCRIPTION: Standard JavaScript import statement to bring the `expo-local-authentication` module into scope within your application code. This allows access to its API functions, such as those for checking hardware support, enrolling biometrics, and authenticating the user via fingerprint or face scan. The `expo-local-authentication` package must be installed in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/local-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n```\n\n----------------------------------------\n\nTITLE: Running Native Builds with Expo CLI\nDESCRIPTION: Commands to build native Android and iOS projects using Expo CLI run commands.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/prebuild.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Build your native Android project\n$ npx expo run:android\n\n# Build your native iOS project\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in a React Component (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to import and use styles from a CSS Module file (`App.module.css`). It shows applying styles using the special `style` prop syntax (`{ $$css: true, _: styles.text }`) for React Native for Web components, using the `unstable_styles` import for `react-native-web`-safe styles, and using the standard `className` prop for web-only HTML elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx App.js\nimport styles, { unstable_styles } from './App.module.css';\n\nexport default function Page() {\n  return (\n    <>\n      <Text\n        style={{\n          // This is how react-native-web class names are applied\n          $$css: true,\n          _: styles.text,\n        }}>\n        Hello World\n      </Text>\n      <Text style={unstable_styles.text}>Hello World</Text>\n      {/* Web-only usage: */}\n      <p className={styles.text}>Hello World</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Sensors Package\nDESCRIPTION: Shows two ways to import the expo-sensors package - either importing all sensors as a namespace or destructuring specific sensor imports. This allows access to Accelerometer, Barometer, DeviceMotion, Gyroscope, LightSensor, Magnetometer, MagnetometerUncalibrated, and Pedometer sensors.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Creating an IconButton Component for React Native\nDESCRIPTION: Implementation of an icon button component that combines MaterialIcons with text labels for use in the app's option buttons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pressable, StyleSheet, Text } from 'react-native';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\nexport default function IconButton({ icon, label, onPress }) {\n  return (\n    <Pressable style={styles.iconButton} onPress={onPress}>\n      <MaterialIcons name={icon} size={24} color=\"#fff\" />\n      <Text style={styles.iconButtonLabel}>{label}</Text>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  iconButton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButtonLabel: {\n    color: '#fff',\n    marginTop: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using react-native-root-toast Declarative API\nDESCRIPTION: Shows how to use the declarative component API of react-native-root-toast for managing toast notifications using React state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/react-native-toast.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast visible={this.state.visible}>Thanks for subscribing!</Toast>\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Fetch for Android Testing\nDESCRIPTION: A code snippet demonstrating how to set up background fetch for testing on Android with a minimal interval of 1 minute. This configuration is useful during development to quickly test the background fetch functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/background-fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync function registerBackgroundFetchAsync() {\n  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing `expo-local-authentication` Module in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the `expo-local-authentication` library into your project code. Importing the module as `LocalAuthentication` provides access to its API functions for checking hardware support, verifying enrolled biometrics, and initiating authentication prompts. This import is necessary before calling any functions from the library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Associated Domains in app.json\nDESCRIPTION: Configuration for the expo.ios.associatedDomains in the app config to enable universal links. This associates the app with specified domains following Apple's format.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"associatedDomains\": [\"applinks:expo.dev\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom EAS Build Workflow for Testing\nDESCRIPTION: A YAML configuration file that defines a custom EAS Build workflow for running tests. It includes steps to checkout code, install dependencies, and execute the test command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run tests\n  steps:\n    - eas/checkout\n    - run:\n        name: Install dependencies\n        command: npm install\n    - run:\n        name: Run tests\n        command: |\n          echo \"Running tests...\"\n          npm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Font Plugin in app.json\nDESCRIPTION: Configures the expo-font config plugin within app.json (or app.config.js) to automatically link specified font files during the native build process (EAS Build or prebuild). The 'fonts' array lists paths relative to the project root.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"path/to/file.ttf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in .eslintrc.js\nDESCRIPTION: Example showing how to extend the Expo ESLint configuration in a dedicated .eslintrc.js file. This includes both the base Expo config and ESLint's recommended ruleset.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: [\"expo\", \"eslint:recommended\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Gradle for Custom Entry File Resolution\nDESCRIPTION: This Gradle configuration modification enables the use of Metro module resolution to find the root entry file for Android builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_26\n\nLANGUAGE: gradle\nCODE:\n```\ndef projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()\n\nreact {\n    entryFile = file([\"node\", \"-e\", \"require('expo/scripts/resolveAppEntry')\", projectRoot, \"android\", \"absolute\"].execute(null, rootDir).text.trim())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-local-authentication Plugin (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `expo-local-authentication` plugin within the `plugins` array in `app.json` or `app.config.js`. It specifically sets a custom message for the `faceIDPermission` required on iOS, which prompts the user for permission to use Face ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-local-authentication\",\n        {\n          \"faceIDPermission\": \"Allow $(PRODUCT_NAME) to use Face ID.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Face Detection Implementation in React Native with Expo Camera\nDESCRIPTION: Demonstrates how to implement face detection using the Camera component with expo-face-detector. The code configures fast mode detection without landmarks or smile detection, with tracking enabled and a minimum detection interval of 100ms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/facedetector.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as FaceDetector from 'expo-face-detector';\n\nconst App = () => (\n  <Camera\n    // other props\n    onFacesDetected={handleFacesDetected}\n    faceDetectorSettings={{\n      mode: FaceDetector.FaceDetectorMode.fast,\n      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,\n      runClassifications: FaceDetector.FaceDetectorClassifications.none,\n      minDetectionInterval: 100,\n      tracking: true,\n    }}\n  />\n);\n\nconst handleFacesDetected = ({ faces }) => {\n  console.log(faces);\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Constants in JavaScript (Expo)\nDESCRIPTION: Example showing how to import the Constants object from the expo-constants package, which provides access to system information that remains constant during your app's installation lifetime.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: Custom Module Resolution in Metro\nDESCRIPTION: Implementation of custom module resolution logic in Metro configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName.startsWith('my-custom-resolver:')) {\n    return {\n      filePath: 'path/to/file',\n      type: 'sourceFile',\n    };\n  }\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing expo-tracking-transparency via npm\nDESCRIPTION: This command installs the `expo-tracking-transparency` package as a dependency in your React Native project using the Expo CLI. It ensures compatibility and handles native module linking if necessary.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-tracking-transparency/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-tracking-transparency\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Schemes in app.json for Authentication Redirects\nDESCRIPTION: JSON configuration for setting up a custom URI scheme in a standalone Expo app to handle authentication redirects back to the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"mycoolredirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-face-detector for API Usage (JavaScript)\nDESCRIPTION: This snippet shows a basic import of the expo-face-detector module in JavaScript. It prepares the application to use face detection utilities provided by the package, a prerequisite for any face recognition or detection features built upon this API. There are no input parameters or outputs in this line; it serves as a setup step for further integration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/facedetector.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as FaceDetector from 'expo-face-detector';\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Implementation in React Native\nDESCRIPTION: Complete example of implementing a camera component with front/back camera toggle functionality and permission handling using expo-camera.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/camera-legacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Camera, CameraType } from 'expo-camera/legacy';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [type, setType] = useState(CameraType.back);\n  const [permission, requestPermission] = Camera.useCameraPermissions();\n\n  if (!permission) {\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    return (\n      <View style={styles.container}>\n        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraType() {\n    setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with Stack Navigator in Expo Router (TypeScript)\nDESCRIPTION: This code snippet shows how to set up the root layout using Expo Router's Stack component. It includes the (tabs) screen as the first route in the stack.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"(tabs)\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the usePreventScreenCapture Hook in React Native\nDESCRIPTION: Demonstrates using the `usePreventScreenCapture` hook from `expo-screen-capture` within a React Native functional component. This hook automatically prevents screen capture and recording as long as the component where it's used remains mounted. It requires the `expo-screen-capture` dependency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePreventScreenCapture } from 'expo-screen-capture';\nimport { Text, View } from 'react-native';\n\nexport default function ScreenCaptureExample() {\n  usePreventScreenCapture();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>As long as this component is mounted, this screen is unrecordable!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Compatible Packages with Expo CLI\nDESCRIPTION: Terminal command for installing packages with versions that are compatible with the current React Native and Expo SDK version in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_23\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo install expo-camera\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Packages with Expo CLI\nDESCRIPTION: Terminal command demonstrating how to install multiple packages in a single command with Expo CLI. Ensures all packages are compatible with the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_24\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo install typescript expo-sms\n```\n\n----------------------------------------\n\nTITLE: Importing Video Component from expo-av (JavaScript)\nDESCRIPTION: This snippet shows how to import the Video component from the expo-av package in a JavaScript or React Native file. The purpose is to enable use of the Video API within an application component, which is a prerequisite for implementing video playback. No parameters are present; expected output is the availability of the Video reference for use in code. It requires expo-av as a dependency. The import statement is standard and should be placed at the top level before use.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/video-av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Configuring BarCodeScanner Permissions in Expo app.json - JSON\nDESCRIPTION: This code demonstrates how to integrate the expo-barcode-scanner plugin into your Expo project by adding it to app.json. It configures the cameraPermission setting, which sets the NSCameraUsageDescription message for iOS to inform users why the app requests camera access. This configuration is required for building standalone apps that utilize barcode scanning and must be placed under the expo.plugins array in app.json. The expected input is the app.json file, and it outputs the properly configured permissions for app builds via EAS Build or npx expo run.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-barcode-scanner\\\",\\n        {\\n          \\\"cameraPermission\\\": \\\"Allow $(PRODUCT_NAME) to access camera.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android WebView Component\nDESCRIPTION: Creates an Android WebView component with URL loading and page load event handling. Uses WebViewClient to track page load completion.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport android.content.Context\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\nimport expo.modules.kotlin.AppContext\nimport expo.modules.kotlin.viewevent.EventDispatcher\nimport expo.modules.kotlin.views.ExpoView\n\nclass ExpoWebView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {\n  private val onLoad by EventDispatcher()\n\n  internal val webView = WebView(context).also {\n    it.layoutParams = LayoutParams(\n      LayoutParams.MATCH_PARENT,\n      LayoutParams.MATCH_PARENT\n    )\n\n    it.webViewClient = object : WebViewClient() {\n      override fun onPageFinished(view: WebView, url: String) {\n        onLoad(mapOf(\"url\" to url))\n      }\n    }\n\n    addView(it)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Android App with Expo CLI\nDESCRIPTION: Commands for building and running an Android app using Expo CLI. Includes variants for debug and release builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Build for Android\n$ npx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Creating a CircleButton Component in React Native\nDESCRIPTION: Implementation of a circular button component that uses MaterialIcons from @expo/vector-icons to display a plus icon.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Pressable, StyleSheet } from 'react-native';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\nexport default function CircleButton({ onPress }) {\n  return (\n    <View style={styles.circleButtonContainer}>\n      <Pressable style={styles.circleButton} onPress={onPress}>\n        <MaterialIcons name=\"add\" size={38} color=\"#25292e\" />\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  circleButtonContainer: {\n    width: 84,\n    height: 84,\n    marginHorizontal: 60,\n    borderWidth: 4,\n    borderColor: '#ffd33d',\n    borderRadius: 42,\n    padding: 3,\n  },\n  circleButton: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 42,\n    backgroundColor: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env for Expo Projects\nDESCRIPTION: This snippet shows how to define public environment variables in a .env file for Expo development. Variables prefixed with EXPO_PUBLIC_ will be available in your JavaScript code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_PUBLIC_API_URL=http://api.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Terser Minifier in Expo CLI\nDESCRIPTION: This snippet shows how to set up and configure the Terser minifier in the Metro configuration file for an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.minifierPath = 'metro-minify-terser';\nconfig.transformer.minifierConfig = {\n  // Terser options...\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring App Builds for Code Signing in Bash\nDESCRIPTION: This command configures an app's builds to use code signing by specifying the directories containing the certificate and key files generated in the previous step.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/code-signing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo-updates codesigning:configure --certificate-input-directory certs --key-input-directory keys\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent in TypeScript\nDESCRIPTION: Shows how to import the `registerRootComponent` function from the 'expo' package in a TypeScript file. This function is essential for initializing the application's root component across different platforms (Android, iOS, Web).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Running Expo Project in Production Mode\nDESCRIPTION: This command starts an Expo project in production mode with minification. It's useful for testing performance and catching production-only bugs. The --no-dev flag disables development mode, while --minify reduces the app size by removing unnecessary data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/development-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --no-dev --minify\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using URL and URLSearchParams in Expo - JavaScript\nDESCRIPTION: This snippet demonstrates the creation of a URL object and a URLSearchParams object, which are core components of the standard web URL API. It assumes the environment includes Expo or compatible platforms, requiring the expo package but leveraging the built-in URL/URLSearchParams implementations in native or web runtimes. Both objects provide structured ways to parse, manipulate, and query URL strings and parameters. The inputs are a URL string for URL and none for URLSearchParams; outputs are instance objects suitable for further manipulation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst url = new URL('https://expo.dev');\n\nconst params = new URLSearchParams();\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView in Expo React Native\nDESCRIPTION: This snippet demonstrates how to use SafeAreaView to wrap the content of a screen component, ensuring it's positioned within the safe area of the device.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nexport default function HomeScreen() {\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <Text>Content is in safe area.</Text>\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom getStateFromPath for Deep Linking in React Navigation\nDESCRIPTION: This snippet demonstrates how to create a custom getStateFromPath function in the linking configuration of React Navigation to handle deep linking events. It allows for filtering URLs in a similar manner to the Linking.addEventListener method.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/auth-session.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst linking = {\n  prefixes: ['https://myapp.com', 'myapp://'],\n  config: {\n    screens: {\n      Home: 'home',\n      Profile: 'user',\n    },\n  },\n  getStateFromPath: (path, config) => {\n    // Filter URLs here\n    if (path.startsWith('/filtered')) {\n      return null; // or return a custom state\n    }\n    // Fall back to default behavior\n    return getStateFromPath(path, config);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Apple App Site Association (AASA) Configuration\nDESCRIPTION: JSON configuration for the AASA file that enables universal links, Apple Handoff, and Shared Web Credentials. Defines which paths should redirect to the native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appID\": \"{APPLE_TEAM_ID}.{BUNDLE_ID}\",\n        \"paths\": [\"/records/*\"]\n      }\n    ]\n  },\n  \"activitycontinuation\": {\n    \"apps\": [\"{APPLE_TEAM_ID}.{BUNDLE_ID}\"]\n  },\n  \"webcredentials\": {\n    \"apps\": [\"{APPLE_TEAM_ID}.{BUNDLE_ID}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Experimental Import Support in JavaScript\nDESCRIPTION: This snippet shows how to modify the metro.config.js file to enable experimental import support, which is necessary for tree shaking. It uses the getDefaultConfig function from Expo and sets the experimentalImportSupport option to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.getTransformOptions = async () => ({\n  transform: {\n    experimentalImportSupport: true,\n  },\n});\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with React Native CLI and npm on Windows\nDESCRIPTION: Complete sequence of commands to clear node_modules, npm cache, watchman cache, and Metro bundler cache when using React Native CLI with npm.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n\n$ npm cache clean --force\n\n$ npm install\n\n$ watchman watch-del-all\n\n$ del %localappdata%\\Temp\\haste-map-*\n\n$ del %localappdata%\\Temp\\metro-cache\n\n$ npm start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Creating Home Screen with Modal Navigation\nDESCRIPTION: Implements the home screen with a Link component to navigate to the modal screen. Includes styling for layout and link presentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Text>Home screen</Text>\n      <Link href=\"/modal\" style={styles.link}>\n        Open modal\n      </Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  link: {\n    paddingTop: 20,\n    fontSize: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Facebook Authentication Provider from AuthSession\nDESCRIPTION: Import statement for the Facebook authentication provider from expo-auth-session, which offers a simplified implementation for Facebook OAuth.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/auth-session.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Facebook from 'expo-auth-session/providers/facebook';\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Channel with Custom Sound (TypeScript)\nDESCRIPTION: TypeScript code for creating a notification channel with a custom sound on Android. This example demonstrates how to configure a high-importance channel for email notifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Android Config Plugin for Custom URL Schemes\nDESCRIPTION: Demonstrates how to create a config plugin to add custom URL scheme queries to the AndroidManifest.xml file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withAndroidManifest } = require('@expo/config-plugins');\n\nconst withAndroidQueries = config => {\n  return withAndroidManifest(config, config => {\n    config.modResults.manifest.queries = [\n      {\n        intent: [\n          {\n            action: [{ $: { 'android:name': 'android.intent.action.SENDTO' } }],\n            data: [{ $: { 'android:scheme': 'mailto' } }],\n          },\n          {\n            action: [{ $: { 'android:name': 'android.intent.action.DIAL' } }],\n          },\n        ],\n      },\n    ];\n\n    return config;\n  });\n};\n\nmodule.exports = withAndroidQueries;\n```\n\n----------------------------------------\n\nTITLE: Advanced Config Plugin Usage with Options\nDESCRIPTION: Shows how to configure a plugin with custom options, specifically customizing the camera permission message for expo-camera.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Expo Dependencies\nDESCRIPTION: Command to upgrade all dependencies to match the installed SDK version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for EAS builds\nDESCRIPTION: YAML configuration for GitHub Actions to set up a Node.js environment, install Expo CLI, and trigger EAS builds. It runs on push to main branch or manual trigger, and uses Expo's GitHub Action.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: EAS Build\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    name: Install and build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 18.x\n          cache: npm\n      - name: Setup Expo and EAS\n        uses: expo/expo-github-action@v8\n        with:\n          eas-version: latest\n          token: ${{ secrets.EXPO_TOKEN }}\n      - name: Install dependencies\n        run: npm ci\n      - name: Build on EAS\n        run: eas build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentPicker with iCloud Storage in app.json\nDESCRIPTION: JSON configuration example for enabling iCloud storage features using the expo-document-picker plugin in the app.json configuration file. This is for projects using EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-document-picker\",\n        {\n          \"iCloudContainerEnvironment\": \"Production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Prop Implementation - Android\nDESCRIPTION: Android module implementation for handling URL prop updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\nimport java.net.URL\n\nclass ExpoWebViewModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView::class) {\n      Prop(\"url\") { view: ExpoWebView, url: URL? ->\n        view.webView.loadUrl(url.toString())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro to Remove Console Logs in Production\nDESCRIPTION: This snippet demonstrates how to modify the Metro configuration to remove all console log statements in production builds using the Terser minifier.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.minifierConfig = {\n  compress: {\n    // The option below removes all console logs statements in production.\n    drop_console: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Stacking with Explicit zIndex in React Native\nDESCRIPTION: This example demonstrates how to override the default stacking order by explicitly setting the zIndex property. The second component has zIndex: 1, which makes it appear on top of the third component despite appearing earlier in the component tree.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/z-index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nexport default function App() {\n  return (\n    <View style={styles.root}>\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#e1e4e8',\n        },\n      ]}>\n      <View style={[styles.item, { backgroundColor: '#6638f0' }]} />\n      <View style={[styles.item, { backgroundColor: '#5cc9f5', marginTop: -16, zIndex: 1 }]} />\n      <View style={[styles.item, { backgroundColor: '#4af2a1', marginTop: -16 }]} />\n    </View>\n  </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container: {\n    height: 200,\n    width: 200,\n    borderRadius: 16,\n    padding: 16,\n    borderWidth: 8,\n    borderColor: 'rgba(0,0,0,0.2)',\n  },\n  item: {\n    borderWidth: 4,\n    borderColor: 'rgba(0,0,0,0.2)',\n    height: 48,\n    width: 48,\n    borderRadius: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with React Hooks\nDESCRIPTION: This snippet demonstrates how to create a simple Counter component using React hooks. It imports useState from React and createRoot from react-dom/client. The component renders a count value and a button to increment it. Finally, it renders the component to the DOM.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/static/canary-full/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Counter />);\n```\n\n----------------------------------------\n\nTITLE: Detecting Color Scheme in React Native Component\nDESCRIPTION: Use the useColorScheme hook from react-native to detect the current color scheme and render components accordingly in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Appearance, useColorScheme } from 'react-native';\n\nfunction MyComponent() {\n  let colorScheme = useColorScheme();\n\n  if (colorScheme === 'dark') {\n    // render some dark thing\n  } else {\n    // render some light thing\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationResponse Interface in TypeScript\nDESCRIPTION: Defines an interface representing a user's interaction with a notification. It includes the notification object, an identifier for the action taken, and optional user text input if applicable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationResponse {\n  notification: Notification;\n  actionIdentifier: string;\n  userText?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core Components from react-native-safe-area-context in JavaScript\nDESCRIPTION: This snippet demonstrates how to import SafeAreaView, SafeAreaProvider, SafeAreaInsetsContext, and useSafeAreaInsets from the react-native-safe-area-context library. These imports provide the building blocks for accessing and providing safe area insets throughout your React Native application. Usage of these components requires installing the library (typically via npm or yarn) and adding it to your project dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Importing react-native-svg Primitives in JavaScript\nDESCRIPTION: Illustrates how to import all SVG drawing primitives from the 'react-native-svg' package, enabling the use of elements such as Circle, Rect, Path, and others. This import statement is essential for accessing the SVG API within React Native. No external configuration is required beyond installing the 'react-native-svg' package. Input: none. Output: Svg object containing all exported primitives.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Linking to iOS App Store Write Review Page (TypeScript)\nDESCRIPTION: Shows how to redirect a user to the 'Write a Review' page for an app in the iOS App Store using the `Linking` API. It provides two methods: opening a web URL (`https://apps.apple.com/...`) which redirects to the App Store, and opening the App Store directly using the `itms-apps://` scheme. Both methods utilize the `action=write-review` query parameter.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Push Token Collection in JavaScript\nDESCRIPTION: Code diff showing the transition from using Expo's getExpoPushTokenAsync to getDevicePushTokenAsync for obtaining native device push tokens. The token can then be sent to your server for FCM or APNs integration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/obtaining-a-device-token-for-fcm-or-apns.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n...\n- const token = (await Notifications.getExpoPushTokenAsync()).data;\n+ const token = (await Notifications.getDevicePushTokenAsync()).data;\n// send token to your server\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-media-library in app.json\nDESCRIPTION: Example configuration for the expo-media-library plugin in the app.json file. It sets permissions for photos access and saving, and enables media location access on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n          \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\",\n          \"isAccessMediaLocationEnabled\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Submit Profiles Configuration in eas.json\nDESCRIPTION: Example showing how to configure multiple submit profiles in eas.json with different options for Android and iOS. Includes profile inheritance using the extends property.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/submit/eas-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \"SEMVER_RANGE\",\n    \"requireCommit\": \"boolean\"\n  },\n  \"build\": {\n  },\n  \"submit\": {\n    \"SUBMIT_PROFILE_NAME_1\": {\n      \"android\": {\n        \"...ANDROID_OPTIONS\"\n      },\n      \"ios\": {\n        \"...IOS_OPTIONS\"\n      }\n    },\n    \"SUBMIT_PROFILE_NAME_2\": {\n      \"extends\": \"SUBMIT_PROFILE_NAME_1\",\n      \"android\": {\n        \"...ANDROID_OPTIONS\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Push Behavior in Stack Navigator\nDESCRIPTION: Shows how to customize the push behavior of the Stack navigator by providing a custom getId() function. This allows for pushing new screens even for the same route, based on a unique identifier.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return (\n    <Stack>\n      <Stack.Screen\n        name=\"[profile]\"\n        getId={\n          ({ params }) => String(Date.now())\n        }\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeAreaView Component\nDESCRIPTION: Example of using SafeAreaView component to automatically handle safe area insets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView>\n      <View />\n    </SafeAreaView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Camera Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-camera plugin, defining camera and microphone permissions along with Android audio recording settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up KeyboardProvider in Expo Router\nDESCRIPTION: This snippet shows how to set up the KeyboardProvider from react-native-keyboard-controller in an Expo app using Expo Router. It wraps the Stack navigator to provide keyboard handling functionality throughout the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\nimport { KeyboardProvider } from 'react-native-keyboard-controller';\n\nexport default function RootLayout() {\n  return (\n    <KeyboardProvider>\n      <Stack>\n        <Stack.Screen name=\"home\" />\n        <Stack.Screen name=\"chat\" />\n      </Stack>\n    </KeyboardProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Splash Screen Auto-Hide in Expo\nDESCRIPTION: Code to manually control the splash screen visibility by preventing it from auto-hiding and setting a timeout to hide it after 5 seconds. Requires expo-splash-screen package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n\nSplashScreen.preventAutoHideAsync();\nsetTimeout(SplashScreen.hideAsync, 5000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Loop Count Playback\nDESCRIPTION: Example demonstrating how to implement media playback that loops exactly 20 times using state management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst N = 20;\n\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (playbackStatus.didJustFinish) {\n    if (this.state.numberOfLoops == N - 1) {\n      playbackObject.setIsLooping(false);\n    }\n    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });\n  }\n};\n\nthis.setState({ numberOfLoops: 0 });\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\nplaybackObject.setIsLooping(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring usesNonExemptEncryption in app.json for Expo (JSON)\nDESCRIPTION: Shows how to set the usesNonExemptEncryption property in the Expo app.json configuration to handle Apple export compliance prompts automatically. By setting this property to false, the app indicates it does not use non-exempt encryption, simplifying compliance requirements for expo-secure-store users. The snippet is required when publishing on App Store Connect or submitting for TestFlight, and applies only to iOS builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"expo\": {\\n    \"ios\": {\\n      \"config\": {\\n        \"usesNonExemptEncryption\": false\\n      }\\n      /* @hide ... */ /* @end */\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Clipboard Module in JavaScript\nDESCRIPTION: Shows how to import the expo-clipboard module in a JavaScript file. This import statement is required before using any of the clipboard functionality provided by the module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Fetching API Data in React Native Component\nDESCRIPTION: Implement a React Native component that fetches data from the API route and displays it in an alert.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from 'react-native';\n\nasync function fetchHello() {\n  const response = await fetch('/hello');\n  const data = await response.json();\n  alert('Hello ' + data.hello);\n}\n\nexport default function App() {\n  return <Button onPress={() => fetchHello()} title=\"Fetch hello\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Build Profiles in eas.json\nDESCRIPTION: This snippet demonstrates how to set up multiple build profiles in eas.json, including base, development, staging, and production configurations. It shows how to specify node and yarn versions, set environment variables, and configure platform-specific options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"base\": {\n      \"node\": \"12.13.0\",\n      \"yarn\": \"1.22.5\",\n      \"env\": {\n        \"EXAMPLE_ENV\": \"example value\"\n      },\n      \"android\": {\n        \"image\": \"default\",\n        \"env\": {\n          \"PLATFORM\": \"android\"\n        }\n      },\n      \"ios\": {\n        \"image\": \"latest\",\n        \"env\": {\n          \"PLATFORM\": \"ios\"\n        }\n      }\n    },\n    \"development\": {\n      \"extends\": \"base\",\n      \"developmentClient\": true,\n      \"env\": {\n        \"ENVIRONMENT\": \"development\"\n      },\n      \"android\": {\n        \"distribution\": \"internal\",\n        \"withoutCredentials\": true\n      },\n      \"ios\": {\n        \"simulator\": true\n      }\n    },\n    \"staging\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"staging\"\n      },\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"production\": {\n      \"extends\": \"base\",\n      \"env\": {\n        \"ENVIRONMENT\": \"production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Scheme in app.json\nDESCRIPTION: JSON configuration for setting up deep linking scheme in standalone Expo apps. This is required for the authentication flow to redirect back to the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"mycoolredirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notification Sounds in app.json (JSON)\nDESCRIPTION: JSON configuration for adding custom notification sounds to an Expo app using the expo-notifications plugin. This setup specifies the file paths of sound files to be included in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Build Profiles Configuration\nDESCRIPTION: Configuration demonstrating how to extend build profiles to share common settings across development, preview, and production builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"node\": \"18.18.0\"\n    },\n    \"preview\": {\n      \"extends\": \"production\",\n      \"distribution\": \"internal\"\n    },\n    \"development\": {\n      \"extends\": \"production\",\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-image-picker Plugin in app.json\nDESCRIPTION: Example configuration for the expo-image-picker plugin in app.json, demonstrating how to set custom permission messages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Layout in Expo Router\nDESCRIPTION: Defines the root layout component which serves as the main wrapper for the application. This component can contain global providers, themes, and styles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout() {\n  return (\n\t  /* @hide ... */ /* @end */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Emoji List Component Implementation in React Native\nDESCRIPTION: Component that renders a horizontal scrollable list of emoji using FlatList. Includes state management for emoji selection and platform-specific scroll indicator handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { StyleSheet, FlatList, Image, Platform, Pressable } from 'react-native';\n\nexport default function EmojiList({ onSelect, onCloseModal }) {\n  const [emoji] = useState([\n    require('../assets/images/emoji1.png'),\n    require('../assets/images/emoji2.png'),\n    require('../assets/images/emoji3.png'),\n    require('../assets/images/emoji4.png'),\n    require('../assets/images/emoji5.png'),\n    require('../assets/images/emoji6.png'),\n  ]);\n\n  return (\n    <FlatList\n      horizontal\n      showsHorizontalScrollIndicator={Platform.OS === 'web'}\n      data={emoji}\n      contentContainerStyle={styles.listContainer}\n      renderItem={({ item, index }) => (\n        <Pressable\n          onPress={() => {\n            onSelect(item);\n            onCloseModal();\n          }}>\n          <Image source={item} key={index} style={styles.image} />\n        </Pressable>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Location API Module (JavaScript)\nDESCRIPTION: Shows the standard ES module import statement required to use the `expo-location` library's functions and types in a JavaScript or TypeScript file. All functionalities of the library are accessed through the imported `Location` object. This import is necessary before calling any `expo-location` API methods like `getCurrentPositionAsync` or `requestForegroundPermissionsAsync`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Location from 'expo-location';\n```\n\n----------------------------------------\n\nTITLE: React Navigation Navigator Structure\nDESCRIPTION: Example of typical React Navigation structure with Tab and Stack navigators that needs to be migrated to Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HomeTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Feed\" component={Feed} />\n    </Tab.Navigator>\n  );\n}\n\nfunction App() {\n  return (\n    <NavigationContainer\n      linking={\n        {\n          // ...linking configuration\n        }\n      }\n    >\n      <Stack.Navigator>\n        <Stack.Screen name=\"Settings\" component={Settings} />\n        <Stack.Screen name=\"Profile\" component={Profile} />\n        <Stack.Screen\n          name=\"Home\"\n          component={HomeTabs}\n          options={{\n            title: 'Home Screen',\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-mail-composer Library in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the entire `expo-mail-composer` module into your JavaScript project using ES module syntax. After importing, all exported functions and properties of the library become accessible via the `MailComposer` namespace (e.g., `MailComposer.composeAsync()`). This import is necessary before utilizing any email composition features provided by the package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Integrating and Conditionally Rendering EmojiSticker in App Component (React Native)\nDESCRIPTION: Demonstrates how to import and use the `EmojiSticker` component within the main `App` component in 'App.js'. It imports `EmojiSticker` and conditionally renders it inside the `imageContainer` view only if the `pickedEmoji` state variable holds a value (the sticker source). It passes a fixed `imageSize` (40) and the selected emoji source (`pickedEmoji`) as props to the `EmojiSticker` component. Requires the `EmojiSticker` component and state management for `pickedEmoji`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// ...rest of the import statements\n/* @info */import EmojiSticker from './components/EmojiSticker';/* @end */\n\nexport default function App() {\n  // ...rest of the code remains same\n\n  return (\n    <View>\n      <View style={styles.imageContainer}>\n        <ImageViewer placeholderImageSource={PlaceholderImage} selectedImage={selectedImage} />\n        /* @info */{pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}/* @end */\n      </View>\n      {/* ...rest of the code remains same */}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SafeAreaContext Components in JavaScript\nDESCRIPTION: Demonstrates how to import the main components and hooks from the react-native-safe-area-context library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start the Expo development server for local development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/get-started/start-developing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Async Routes Configuration in Expo Router\nDESCRIPTION: JSON configuration showing how to set platform-specific settings for async routes, including web, android, and default options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/async-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-router\",\n        {\n          \"origin\": \"https://acme.com\",\n          \"asyncRoutes\": {\n            \"web\": true,\n            \"android\": false,\n            \"default\": \"development\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Header and Footer to Layout Route in Expo Router\nDESCRIPTION: This example shows how to wrap the Slot component with other components to create a layout with a header and footer.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/layouts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'expo-router';\n\nexport default function HomeLayout() {\n  return (\n    <>\n      <Header />\n      <Slot />\n      <Footer />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Client in app.json\nDESCRIPTION: JSON configuration for expo-dev-client using config plugins. Controls launcher behavior and URL scheme handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-dev-launcher\",\n        {\n          \"launchMode\": \"most-recent\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic i18n Configuration in Expo\nDESCRIPTION: Demonstrates basic setup of i18n-js with English and Japanese language support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLocales } from 'expo-localization';\nimport { I18n } from 'i18n-js';\n\n// Set the key-value pairs for the different languages you want to support.\nconst i18n = new I18n({\n  en: { welcome: 'Hello' },\n  ja: { welcome: 'こんにちは' },\n});\n\n// Set the locale once at the beginning of your app.\ni18n.locale = getLocales()[0].languageCode;\n\nconsole.log(i18n.t('welcome'));\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer Modules from Expo Sensors (JavaScript)\nDESCRIPTION: This code snippet shows how to import both the calibrated (Magnetometer) and uncalibrated (MagnetometerUncalibrated) sensor modules from the expo-sensors package using ES6 import syntax. These imports provide access to the full API needed to subscribe to device magnetic field readings in a React Native or Expo project. No UI logic is included here; the code is foundational for enabling further sensor operations. There are no significant dependencies beyond expo-sensors and JavaScript ES modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Lifecycle Listener in Java\nDESCRIPTION: Example of ApplicationLifecycleListener implementation in Java, showing how to handle onCreate Application lifecycle event.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage expo.modules.mylib;\n\nimport android.app.Application;\n\nimport expo.modules.core.interfaces.ApplicationLifecycleListener;\n\npublic class MyLibApplicationLifecycleListener implements ApplicationLifecycleListener {\n  @Override\n  public void onCreate(Application application) {\n    // Your setup code in `Application.onCreate`.\n    doSomeSetupInApplicationOnCreate(application);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using StatusBar Component with Auto Style\nDESCRIPTION: Example of using the StatusBar component with 'auto' style, which automatically adjusts the text color based on the app's color scheme.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<StatusBar style=\"auto\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Android Notification Channel Enums and Interfaces in TypeScript\nDESCRIPTION: Defines enums and interfaces for Android notification channels, including visibility, audio attributes, importance levels, and usage types. These are used to configure how notifications behave on Android devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AndroidNotificationVisibility {\n  UNKNOWN,\n  PUBLIC,\n  PRIVATE,\n  SECRET,\n}\n\nexport enum AndroidAudioContentType {\n  UNKNOWN,\n  SPEECH,\n  MUSIC,\n  MOVIE,\n  SONIFICATION,\n}\n\nexport enum AndroidImportance {\n  UNKNOWN,\n  UNSPECIFIED,\n  NONE,\n  MIN,\n  LOW,\n  DEFAULT,\n  HIGH,\n  MAX,\n}\n\nexport enum AndroidAudioUsage {\n  UNKNOWN,\n  MEDIA,\n  VOICE_COMMUNICATION,\n  VOICE_COMMUNICATION_SIGNALLING,\n  ALARM,\n  NOTIFICATION,\n  NOTIFICATION_RINGTONE,\n  NOTIFICATION_COMMUNICATION_REQUEST,\n  NOTIFICATION_COMMUNICATION_INSTANT,\n  NOTIFICATION_COMMUNICATION_DELAYED,\n  NOTIFICATION_EVENT,\n  ASSISTANCE_ACCESSIBILITY,\n  ASSISTANCE_NAVIGATION_GUIDANCE,\n  ASSISTANCE_SONIFICATION,\n  GAME,\n}\n\nexport interface AudioAttributes {\n  usage: AndroidAudioUsage;\n  contentType: AndroidAudioContentType;\n  flags: {\n    enforceAudibility: boolean;\n    requestHardwareAudioVideoSynchronization: boolean;\n  };\n}\n\nexport interface NotificationChannel {\n  id: string;\n  name: string | null;\n  importance: AndroidImportance;\n  bypassDnd: boolean;\n  description: string | null;\n  groupId?: string | null;\n  lightColor: string;\n  lockscreenVisibility: AndroidNotificationVisibility;\n  showBadge: boolean;\n  sound: 'default' | 'custom' | null;\n  audioAttributes: AudioAttributes;\n  vibrationPattern: number[] | null;\n  enableLights: boolean;\n  enableVibrate: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Screen Orientation with expo-screen-orientation (JSON)\nDESCRIPTION: This JSON snippet configures the expo-screen-orientation plugin within an app.json file for an Expo project. It sets iOS to require full screen and passes 'initialOrientation' to the plugin, determining how orientation behaves at launch. The configuration requires the expo-screen-orientation package and, for 'requireFullScreen', the proper iOS project setup. Expected input is an app.json configuration file; output is the intended orientation behavior when the app launches. Only predefined orientation values are supported.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"ios\\\": {\\n      \\\"requireFullScreen\\\": true\\n    },\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-screen-orientation\\\",\\n        {\\n          \\\"initialOrientation\\\": \\\"DEFAULT\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Sensor Functionality in React Native with Expo\nDESCRIPTION: This snippet demonstrates how to use the LightSensor module from expo-sensors in a React Native application. It shows how to subscribe to light sensor data, update the UI with illuminance values, and toggle the sensor subscription.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';\nimport { LightSensor } from 'expo-sensors';\n\nexport default function App() {\n  const [{ illuminance }, setData] = useState({ illuminance: 0 });\n  const [subscription, setSubscription] = useState(null);\n\n  const toggle = () => {\n    if (subscription) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const subscribe = () => {\n    setSubscription(\n      LightSensor.addListener(sensorData => {\n        setData(sensorData);\n      })\n    );\n  };\n\n  const unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    subscribe();\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.sensor}>\n      <Text>Light Sensor:</Text>\n      <Text>\n        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text>Toggle</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  sensor: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Styles in a CSS Module\nDESCRIPTION: Provides an example CSS Module file (`App.module.css`) defining a single style rule for the `.text` class, setting its color to red. Styles defined in `.module.css` files are locally scoped to the components that import them, preventing naming collisions. CSS Modules use lightningcss internally.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n```css App.module.css\n.text {\n  color: red;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Keep Awake Functions in React Native\nDESCRIPTION: Example demonstrating the use of activateKeepAwake and deactivateKeepAwake functions to manually control screen sleep behavior with buttons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    activateKeepAwake();\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    deactivateKeepAwake();\n    alert('Deactivated!');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Notification at a Specific Date in TypeScript\nDESCRIPTION: Example of scheduling a notification to trigger at the beginning of the next hour by creating a Date object and setting it as the trigger.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nconst trigger = new Date(Date.now() + 60 * 60 * 1000);\ntrigger.setMinutes(0);\ntrigger.setSeconds(0);\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Happy new hour!',\n  },\n  trigger,\n});\n```\n\n----------------------------------------\n\nTITLE: Using activateKeepAwake and deactivateKeepAwake Functions with expo-keep-awake in React Native - JavaScript/JSX\nDESCRIPTION: This snippet provides an example of using the activateKeepAwake and deactivateKeepAwake functions from expo-keep-awake in a class-based React Native component. Users can press buttons to manually enable or disable the keep-awake feature. The code depends on expo-keep-awake and react-native. Both functions are called without arguments: activateKeepAwake keeps the device awake until deactivateKeepAwake is called, and alerts indicate the current state. There are no complex parameters or return values, and the functions are safe to call regardless of previous activation state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    /* @info Screen will remain on after called until <strong>deactivateKeepAwake()</strong> is called. */ activateKeepAwake(); /* @end */\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    /* @info Deactivates KeepAwake, or does nothing if it was never activated. */ deactivateKeepAwake(); /* @end */\n    alert('Deactivated!');\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Schemes in app.json for Standalone Apps\nDESCRIPTION: Configuration example for setting up a custom URI scheme in app.json to enable deep linking back into a standalone app after authentication.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"mycoolredirect\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient from expo-linear-gradient\nDESCRIPTION: This snippet shows how to import the LinearGradient component from the expo-linear-gradient package. This import statement is typically used at the top of a React Native component file where linear gradients are needed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Testing Async Transaction Boundaries in SQLite with TypeScript\nDESCRIPTION: This TypeScript snippet simulates an async transaction boundary edge case with concurrent read and write queries, revealing unexpected transaction behavior due to JavaScript's concurrency model. The test uses Promise.all to trigger simultaneous db.withTransactionAsync and a delayed execAsync update query. It expects and asserts transaction isolation, with failure showcasing how outside queries may still participate within an open transaction. Requirements: expo-sqlite API, async/await, and a test runner (e.g., Jest). Inputs: table name, statement timing, and data values; Outputs: assertion pass/fail depending on row content. All queries executed before transaction closure participate in the open transaction context due to async timing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nPromise.all([\\n  // 1. A new transaction begins\\n  db.withTransactionAsync(async () => {\\n    // 2. The value \\\"first\\\" is inserted into the test table and we wait 2\\n    //    seconds\\n    await db.execAsync('INSERT INTO test (data) VALUES (\\\"first\\\")');\\n    await sleep(2000);\\n\\n    // 4. Two seconds in, we read the latest data from the table\\n    const row = await db.getFirstAsync<{ data: string }>('SELECT data FROM test');\\n\\n    // ❌ The data in the table will be \\\"second\\\" and this expectation will fail.\\n    //    Additionally, this expectation will throw an error and roll back the\\n    //    transaction, including the `UPDATE` query below since it ran within\\n    //    the transaction.\\n    expect(row.data).toBe('first');\\n  }),\\n  // 3. One second in, the data in the test table is updated to be \\\"second\\\".\\n  //    This `UPDATE` query runs in the transaction even though its code is\\n  //    outside of it because the transaction happens to be active at the time\\n  //    this query runs.\\n  sleep(1000).then(async () => db.execAsync('UPDATE test SET data = \\\"second\\\"')),\\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Expo CLI with npx\nDESCRIPTION: Basic command to run Expo CLI using npx. This is the recommended way to access the Expo CLI functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo\n```\n\n----------------------------------------\n\nTITLE: Basic Metro Configuration for Bare Workflow in JavaScript\nDESCRIPTION: This `metro.config.js` file provides the basic configuration required for a bare React Native project using Expo. It imports `getDefaultConfig` from `expo/metro-config` and uses it to ensure that Expo's Metro configuration enhancements (like path aliases, asset handling, etc.) are applied.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Async Transactions with SQLite in JavaScript\nDESCRIPTION: This snippet demonstrates starting a database connection and executing queries within an async transaction using Expo SQLite in JavaScript. It shows how to open a database, begin a transaction with withTransactionAsync, run a COUNT query, and access the result. Dependencies include the expo-sqlite-next package, an existing database, and ES2017+ async/await support. Key parameters: the database name and the callback scope function. Inputs: SQL queries to be executed; Outputs: query results available within the transaction scope. Async/await semantics apply—queries up to transaction close will be included in the transaction.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\\n\\nawait db.withTransactionAsync(async () => {\\n  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');\\n  console.log('Count:', result.rows[0]['COUNT(*)']);\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notification Sounds in Expo app.json\nDESCRIPTION: This snippet shows how to add custom notification sounds to an Expo project by configuring the expo-notifications plugin in the app.json file. It specifies the local path to the sound file that can be used for custom notifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"sounds\": [\"local/path/to/mySoundFile.wav\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation State with Expo Router and React Navigation\nDESCRIPTION: Demonstrates how to reset navigation state using the CommonActions.reset action from React Navigation within an Expo Router application. Uses useNavigation hook to access navigation prop and dispatch reset actions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useNavigation } from 'expo-router'\nimport { CommonActions } from '@react-navigation/native'\n\nexport default function Screen() {\n  const navigation = useNavigation();\n\n  const handleResetAction = () => {\n    navigation.dispatch(CommonActions.reset({\n      routes: [{key: \"(tabs)\", name: \"(tabs)\"}]\n    }))\n  }\n\n  return (\n    <>\n      {/* ...rest of the code */}\n      <Button title='Reset' onPress={handleResetAction} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Cellular API in React Native\nDESCRIPTION: Basic import statement for using the expo-cellular package in a React Native application. This allows access to all the cellular service provider information features provided by the package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK packages in JavaScript\nDESCRIPTION: Example of importing various Expo SDK packages into a JavaScript file, showing different import styles for Camera, Contacts, and Gyroscope components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Camera } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-dev-launcher in app.json\nDESCRIPTION: JSON configuration example for the expo-dev-launcher plugin in app.json. This config sets the launch mode to 'most-recent', which attempts to launch the most recently opened project when the app starts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-dev-launcher\",\n        {\n          \"launchModeExperimental\": \"most-recent\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Blurhash Generation Setup\nDESCRIPTION: Initial setup for generating blurhash on the server using multer, sharp, and blurhash packages\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst multer = require('multer');\nconst sharp = require('sharp');\nconst { encode } = require('blurhash');\n\nconst upload = multer();\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Navigator Layout in Expo Router\nDESCRIPTION: This snippet shows how to set up a Stack navigator as the root layout in Expo Router. It imports the Stack component from expo-router and exports it as the default layout.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default Stack;\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Push Notifications in Expo\nDESCRIPTION: Command to install expo-notifications, expo-device, and expo-constants libraries for implementing push notifications in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-notifications expo-device expo-constants\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Reanimated in Expo SDK 49 and Lower\nDESCRIPTION: Configuration of babel.config.js to include the Reanimated babel plugin for drawer navigation support in older SDK versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/drawer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n      /* @hide ... */ /* @end */\n    ],\n    plugins: [\n      /* @hide ... */ /* @end */\n      'react-native-reanimated/plugin',\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Writing a Unit Test for React Native Components\nDESCRIPTION: Create a test file HomeScreen-test.tsx to write unit tests for the HomeScreen component using React Native Testing Library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render } from '@testing-library/react-native';\n\nimport HomeScreen, { CustomText } from '@/app/index';\n\ndescribe('<HomeScreen />', () => {\n  test('Text renders correctly on HomeScreen', () => {\n    const { getByText } = render(<HomeScreen />);\n\n    getByText('Welcome!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Drawer Layout Implementation for SDK 49 and Lower\nDESCRIPTION: Simple drawer navigation setup for SDK 49 and lower versions without GestureHandler wrapper.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/drawer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Drawer } from 'expo-router/drawer';\n\nexport default function Layout() {\n  return <Drawer />;\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Notification Payload Format in JSON\nDESCRIPTION: This JSON structure represents the payload format for iOS notifications, including the 'aps' object with alert details, category, badge, sound, and additional custom data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aps\": {\n    \"alert\": {\n      \"title\": \"title of your message\",\n      \"subtitle\": \"subtitle of your message (shown below title, above body)\",\n      \"body\": \"body of your message\",\n      \"launch-image\": \"the name of the launch image file to display\"\n    },\n    \"category\": \"the category associated with this notification\",\n    \"badge\": \"number to set badge count to upon notification's arrival\",\n    \"sound\": \"the sound to play when the notification is received\",\n    \"thread-id\": \"app-specific identifier for grouping related notifications\"\n  },\n  \"body\": { \"object of key-value pairs\" },\n  \"experienceId\": \"@yourExpoUsername/yourProjectSlug\",\n  \"scopeKey\": \"@yourExpoUsername/yourProjectSlug\"\n}\n```\n\n----------------------------------------\n\nTITLE: Font Loading Implementation with useFonts Hook\nDESCRIPTION: Root layout implementation showing font loading using useFonts hook with splash screen handling and error management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inter_900Black, useFonts } from '@expo-google-fonts/inter';\nimport * as SplashScreen from 'expo-splash-screen';\nimport {useEffect} from 'react';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function RootLayout() {\n  const [loaded, error] = useFonts({\n    Inter_900Black,\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    /* ... */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channels in eas.json for EAS Update\nDESCRIPTION: JSON configuration file showing how to add channel properties to different build profiles in eas.json, which is essential for targeting updates to specific build environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/team-development.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      /* @hide ... */ /* @end */\n      /* @info */\n      \"channel\": \"development\"\n      /* @end */\n    },\n    \"ios-simulator\": {\n      /* @hide ... */ /* @end */\n    },\n    \"preview\": {\n      /* @hide ... */ /* @end */\n      /* @info */\n      \"channel\": \"preview\"\n      /* @end */\n    },\n    \"production\": {\n      /* @hide ... */ /* @end */\n      /* @info */\n      \"channel\": \"production\"\n      /* @end */\n    }\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Intersecting Views with Default zIndex in React Native\nDESCRIPTION: This example illustrates the default zIndex behavior with components that visually intersect each other. By adding negative margins, the components overlap, and the later components in the tree appear on top.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/z-index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nexport default function App() {\n  return (\n    <View style={styles.root}>\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: '#e1e4e8',\n        },\n      ]}>\n      {/* zIndex: 0 */}\n      <View style={[styles.item, { backgroundColor: '#6638f0' }]} />\n      {/* zIndex: 1 */}\n      <View style={[styles.item, { backgroundColor: '#5cc9f5', marginTop: -16 }]} />\n      {/* zIndex: 2 */}\n      <View style={[styles.item, { backgroundColor: '#4af2a1', marginTop: -16 }]} />\n    </View>\n  </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container: {\n    height: 200,\n    width: 200,\n    borderRadius: 16,\n    padding: 16,\n    borderWidth: 8,\n    borderColor: 'rgba(0,0,0,0.2)',\n  },\n  item: {\n    borderWidth: 4,\n    borderColor: 'rgba(0,0,0,0.2)',\n    height: 48,\n    width: 48,\n    borderRadius: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized SafeAreaProvider Setup\nDESCRIPTION: Example of setting up SafeAreaProvider with initialWindowMetrics for optimized initial render.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NSFaceIDUsageDescription to Info.plist in XML\nDESCRIPTION: Illustrates how to add the NSFaceIDUsageDescription key to the Info.plist file for iOS projects using expo-secure-store. This enables Face ID authentication by providing a user-facing permission dialog. Required for iOS apps that intend to use biometric authentication. The Info.plist must include this entry to comply with Apple's privacy requirements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\\n\n```\n\n----------------------------------------\n\nTITLE: Complete Next.js Configuration with Expo\nDESCRIPTION: Full Next.js configuration including strict mode, SWC minification, and package transpilation settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withExpo } = require('@expo/next-adapter');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = withExpo({\n  reactStrictMode: true,\n  swcMinify: true,\n  transpilePackages: [\n    'react-native',\n    'expo',\n  ],\n  experimental: {\n    forceSwcTransforms: true,\n  },\n});\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Uploading Secret File - Terminal Commands\nDESCRIPTION: Shows how to upload a secret file (google-services.json) to EAS using the eas secret:create command with file type.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ eas secret:create --scope project --name GOOGLE_SERVICES_JSON --type file --value ./path/to/google-services.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.json for Expo\nDESCRIPTION: This snippet demonstrates how to use the expo-build-properties plugin in an app.json file to customize Android and iOS build properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 31,\n            \"targetSdkVersion\": 31,\n            \"buildToolsVersion\": \"31.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"13.0\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prebuild with Custom Parameters in YAML\nDESCRIPTION: Shows how to use the eas/prebuild function with custom inputs to run the expo prebuild command with specific options like clean flag and Apple team ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run prebuild script\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    # @info #\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Fetching Network Information Once in React Native\nDESCRIPTION: Demonstrates how to make a single request to get network connection information including connection type and status.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profiles for APK Generation in JSON\nDESCRIPTION: This snippet shows how to configure the eas.json file with different build profiles to generate APK files instead of AAB files. It demonstrates four different approaches: setting buildType to 'apk', using a specific gradleCommand, enabling developmentClient, or setting distribution to 'internal'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/apk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"preview2\": {\n      \"android\": {\n        \"gradleCommand\": \":app:assembleRelease\"\n      }\n    },\n    \"preview3\": {\n      \"developmentClient\": true\n    },\n    \"preview4\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Advanced WebView Browser Interface\nDESCRIPTION: Creates a full web browser interface with URL input, loading indicators, and status display using the WebView component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react';\nimport { ActivityIndicator, Platform, Text, TextInput, View } from 'react-native';\nimport { WebView } from 'expo-web-view';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  const [inputUrl, setInputUrl] = useState('https://docs.expo.dev/modules/');\n  const [url, setUrl] = useState(inputUrl);\n  const [isLoading, setIsLoading] = useState(true);\n\n  return (\n    <View style={{ flex: 1, paddingTop: Platform.OS === 'ios' ? 80 : 30 }}>\n      <TextInput\n        value={inputUrl}\n        onChangeText={setInputUrl}\n        returnKeyType=\"go\"\n        autoCapitalize=\"none\"\n        onSubmitEditing={() => {\n          if (inputUrl !== url) {\n            setUrl(inputUrl);\n            setIsLoading(true);\n          }\n        }}\n        keyboardType=\"url\"\n        style={{\n          color: '#fff',\n          backgroundColor: '#000',\n          borderRadius: 10,\n          marginHorizontal: 10,\n          paddingHorizontal: 20,\n          height: 60,\n        }}\n      />\n\n      <WebView\n        url={url.startsWith('https://') || url.startsWith('http://') ? url : `https://${url}`}\n        onLoad={() => setIsLoading(false)}\n        style={{ flex: 1, marginTop: 20 }}\n      />\n      <LoadingView isLoading={isLoading} />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nfunction LoadingView({ isLoading }: { isLoading: boolean }) {\n  if (!isLoading) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        height: 80,\n        backgroundColor: 'rgba(0,0,0,0.5)',\n        paddingBottom: 10,\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n      }}>\n      <ActivityIndicator animating={isLoading} color=\"#fff\" style={{ marginRight: 10 }} />\n      <Text style={{ color: '#fff' }}>Loading...</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Magnetometer Sensor Listener in React Native\nDESCRIPTION: This React Native component demonstrates using the `Magnetometer` from `expo-sensors`. It uses `useState` to store sensor data (x, y, z) and the subscription object. `useEffect` handles subscribing to magnetometer updates via `Magnetometer.addListener` on mount and unsubscribing on unmount using `subscription.remove()`. Functions `_slow` and `_fast` adjust the update interval using `Magnetometer.setUpdateInterval`, and buttons control the subscription state and speed. The component displays the current magnetometer readings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Magnetometer } from 'expo-sensors';\n\nexport default function Compass() {\n  const [{ x, y, z }, setData] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = useState(null);\n\n  const _slow = () => Magnetometer.setUpdateInterval(1000);\n  const _fast = () => Magnetometer.setUpdateInterval(16);\n\n  const _subscribe = () => {\n    setSubscription(\n      Magnetometer.addListener(result => {\n        setData(result);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    _subscribe();\n    return () => _unsubscribe();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Magnetometer:</Text>\n      <Text style={styles.text}>x: {x}</Text>\n      <Text style={styles.text}>y: {y}</Text>\n      <Text style={styles.text}>z: {z}</Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>\n          <Text>{subscription ? 'On' : 'Off'}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Slow</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Screen Layout in Expo Router\nDESCRIPTION: Sets up the Stack navigator layout with a modal screen configuration, defining presentation mode as 'modal'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function Layout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"index\" />\n      <Stack.Screen\n        name=\"modal\"\n        options={{\n          presentation: 'modal',\n        }}\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parent-Child zIndex Relationship in React Native\nDESCRIPTION: This example illustrates how a component with position: 'absolute' still respects its parent's zIndex. Even with a high zIndex of 100, the absolutely positioned component cannot appear above elements that are stacked higher than its parent container.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/z-index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nexport default function App() {\n  return (\n<View style={styles.root}>\n    <View style={[styles.container, { backgroundColor: '#e1e4e8' }]}>\n      <View\n        style={[\n          styles.item,\n          { backgroundColor: '#6638f0', position: 'absolute', top: -32, left: -32, zIndex: 100 },\n        ]}\n      />\n      <View style={[styles.item, { backgroundColor: '#5cc9f5' }]} />\n      <View style={[styles.item, { backgroundColor: '#4af2a1', marginTop: -16 }]} />\n    </View>\n    <View style={[styles.container, { backgroundColor: '#dcffe4', marginTop: -188 }]} />\n  </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container: {\n    height: 200,\n    width: 200,\n    borderRadius: 16,\n    padding: 16,\n    borderWidth: 8,\n    borderColor: 'rgba(0,0,0,0.2)',\n  },\n  item: {\n    borderWidth: 4,\n    borderColor: 'rgba(0,0,0,0.2)',\n    height: 48,\n    width: 48,\n    borderRadius: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Channels in eas.json\nDESCRIPTION: Example configuration for setting up production and staging channels in eas.json. Shows how to configure different build profiles with specific channels and distribution settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"channel\": \"production\"\n    },\n    \"preview\": {\n      \"channel\": \"staging\",\n      \"distribution\": \"internal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Versioned Expo Config Plugin with TypeScript\nDESCRIPTION: Demonstrates how to create a versioned config plugin using createRunOncePlugin to prevent duplicate plugin execution. The plugin uses package.json for name and version tracking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin, createRunOncePlugin } from 'expo/config-plugins';\n\n// Keeping the name, and version in sync with it's package.\nconst pkg = require('my-cool-plugin/package.json');\n\nconst withMyCoolPlugin: ConfigPlugin = config => config;\n\n// A helper method that wraps `withRunOnce` and appends items to `pluginHistory`.\nexport default createRunOncePlugin(\n  // The plugin to guard.\n  withMyCoolPlugin,\n  // An identifier used to track if the plugin has already been run.\n  pkg.name,\n  // Optional version property, if omitted, defaults to UNVERSIONED.\n  pkg.version\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Clipboard Module\nDESCRIPTION: Example showing how to import the Clipboard module from expo-clipboard package. This import statement is required to use any clipboard functionality in the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Importing Gyroscope from expo-sensors\nDESCRIPTION: Basic import statement for the Gyroscope module from expo-sensors package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Monorepo Support\nDESCRIPTION: Metro configuration setup for handling monorepo structure, including watchFolders and resolver settings for proper package resolution.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\nconst path = require('path');\n\nconst projectRoot = __dirname;\nconst monorepoRoot = path.resolve(projectRoot, '../..');\n\nconst config = getDefaultConfig(projectRoot);\n\nconfig.watchFolders = [monorepoRoot];\nconfig.resolver.nodeModulesPaths = [\n  path.resolve(projectRoot, 'node_modules'),\n  path.resolve(monorepoRoot, 'node_modules'),\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring metro.config.js for Expo in Bare React Native Projects (JavaScript)\nDESCRIPTION: This basic `metro.config.js` file shows how to extend Expo's default Metro configuration (`expo/metro-config`) in a bare React Native project. Using `getDefaultConfig` ensures compatibility with Expo features like path aliases, absolute imports, and asset handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for React Compiler\nDESCRIPTION: Configure ESLint to enforce React Compiler rules by adding the plugin and necessary rule settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/preview/react-compiler.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: 'expo',\n  plugins: ['eslint-plugin-react-compiler'],\n  rules: {\n    'react-compiler/react-compiler': 'error',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in SDK 49\nDESCRIPTION: Metro configuration to enable CSS support in Expo SDK 49\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  isCSSEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Location Plugin in app.json (JSON)\nDESCRIPTION: Demonstrates how to configure the `expo-location` plugin within the `plugins` array in an `app.json` or `app.config.js` file. This example sets a custom permission message for `NSLocationAlwaysAndWhenInUseUsageDescription` on iOS. These settings are applied during the build process when using EAS Build or `npx expo run:[android|ios]`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-location\",\n        {\n          \"locationAlwaysAndWhenInUsePermission\": \"Allow $(PRODUCT_NAME) to use your location.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo LocalAuthentication API (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to import the LocalAuthentication API from the expo-local-authentication package, which is necessary before invoking biometric authentication methods in your React Native Expo project. The single import statement provides access to methods for checking biometric availability and triggering authentication requests. Ensure expo-local-authentication is installed as a dependency in your project before using this import.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n\n----------------------------------------\n\nTITLE: Viewing System Logs for Android and iOS using React Native CLI\nDESCRIPTION: These commands show how to view system-level logs for Android and iOS devices using the React Native CLI. The 'log-android' command uses adb logcat for Android, while 'log-ios' is used for iOS devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/logging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Show system logs for an Android device with adb logcat\n$ npx react-native log-android\n# Show system logs for an iOS device\n$ npx react-native log-ios\n```\n\n----------------------------------------\n\nTITLE: Applying Global CSS Styles in a React Component (Web)\nDESCRIPTION: Demonstrates importing a global CSS file (`./styles.css`) and applying its styles within a React component (`App.js`). It shows applying the `.container` class to both a standard HTML `div` element using the `className` prop and a React Native `View` component (for web) using the special `style` prop syntax `{ $$css: true, _: 'container' }`. This usage is primarily intended for web targets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx App.js|collapseHeight=470\nimport './styles.css';\nimport { View } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      {/* Use `className` to assign the style with React DOM components. */}\n      <div className=\"container\">Hello World</div>\n\n      {/* Use `style` with the following syntax to append class names in React Native for web. */}\n      <View\n        style={{\n          $$css: true,\n          _: 'container',\n        }}>\n        Hello World\n      </View>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Device Information Display in React Native\nDESCRIPTION: A React Native component that displays the device manufacturer and model name using expo-device library. Shows basic usage of Device.manufacturer and Device.modelName properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/device.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport * as Device from 'expo-device';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>\n        {Device.manufacturer}: {Device.modelName}\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Import Statement\nDESCRIPTION: Import statement for the API Installation Section component used in the documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/slider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Setting up State Variables in React Native App\nDESCRIPTION: Code snippet showing how to create a state variable called showAppOptions inside the App component to control the visibility of buttons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  const [showAppOptions, setShowAppOptions] = useState(false); \n  // ...rest of the code remains same\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Font Family Implementation\nDESCRIPTION: React Native code showing how to implement platform-specific font family names using Platform.select(). Handles different font naming conventions between iOS and Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from 'react-native';\n\n<Text\n  style={{\n    fontFamily: Platform.select({\n      android: 'Inter_900Black',\n      ios: 'Inter-Black',\n    }),\n  }}>\n  Inter Black\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript React Component Interface\nDESCRIPTION: Implements the TypeScript React component wrapper for the native WebView implementations with proper type definitions for props and events.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewProps } from 'react-native';\nimport { requireNativeViewManager } from 'expo-modules-core';\nimport * as React from 'react';\n\nexport type OnLoadEvent = {\n  url: string;\n};\n\nexport type Props = {\n  url?: string;\n  onLoad?: (event: { nativeEvent: OnLoadEvent }) => void;\n} & ViewProps;\n\nconst NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');\n\nexport default function ExpoWebView(props: Props) {\n  return <NativeView {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting App Tracking Transparency Permission with expo-tracking-transparency in React Native (JSX)\nDESCRIPTION: This React Native functional component demonstrates how to request tracking permission using 'expo-tracking-transparency' within a useEffect hook. The 'requestTrackingPermissionsAsync' function is called asynchronously, and the status is logged upon successful permission grant. Dependencies include 'expo-tracking-transparency' and 'react-native'. Inputs are not required, but the output is a message in the log if permission is granted. Works only on iOS 14+; permission is automatically granted on earlier versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { Text, StyleSheet, View } from 'react-native';\\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const { status } = await requestTrackingPermissionsAsync();\\n      if (status === 'granted') {\\n        console.log('Yay! I have user permission to track data');\\n      }\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Tracking Transparency Module Example</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android WebView Module Definition\nDESCRIPTION: Defines the Android module interface with event handling and URL property management for the WebView component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\nimport java.net.URL\n\nclass ExpoWebViewModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView::class) {\n      Events(\"onLoad\")\n\n      Prop(\"url\") { view: ExpoWebView, url: URL? ->\n        view.webView.loadUrl(url.toString())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating EAS Update Rollback using CLI\nDESCRIPTION: This command starts the rollback process using the EAS CLI. It requires EAS CLI version 5.9.0 or above and launches an interactive guide to assist in selecting the type of rollback and performing the rollback operation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/rollbacks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:rollback\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with React Native CLI and Yarn on Windows\nDESCRIPTION: Complete sequence of commands to clear node_modules, Yarn cache, watchman cache, and Metro bundler cache when using React Native CLI with Yarn. Includes special consideration for Yarn workspaces.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# With Yarn workspaces, you may need to delete node_modules in each workspace\n$ rm -rf node_modules\n\n$ yarn cache clean\n\n$ yarn\n\n$ watchman watch-del-all\n\n$ del %localappdata%\\Temp\\haste-map-*\n\n$ del %localappdata%\\Temp\\metro-cache\n\n$ yarn start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Rendering Router with Inline File System in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `renderRouter` function to create an inline mock file system for testing Expo Router components. It includes setting an initial URL and asserting the pathname.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderRouter, screen } from 'expo-router/testing-library';\n\nit('my-test', async () => {\n  const MockComponent = jest.fn(() => <View />);\n\n  renderRouter(\n    {\n      index: MockComponent,\n      'directory/a': MockComponent,\n      '(group)/b': MockComponent,\n    },\n    {\n      initialUrl: '/directory/a',\n    }\n  );\n\n  expect(screen).toHavePathname('/directory/a');\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with React Native CLI and Yarn\nDESCRIPTION: Complete set of commands to clear all development caches when using React Native CLI with Yarn, including node_modules, Yarn cache, watchman, and Metro bundler caches.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# With Yarn workspaces, you may need to delete node_modules in each workspace\n$ rm -rf node_modules\n\n$ yarn cache clean\n\n$ yarn\n\n$ watchman watch-del-all\n\n$ rm -fr $TMPDIR/haste-map-*\n\n$ rm -rf $TMPDIR/metro-cache\n\n$ yarn start -- --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Creating Native Module in Swift\nDESCRIPTION: Create a Swift file for the native module using the Expo Modules API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class MyModule: Module {\n  public func definition() -> ModuleDefinition {\n    // Definition components go here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Push Receipts API Request\nDESCRIPTION: cURL command example for requesting push receipts using the Expo API endpoint\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST \"https://exp.host/--/api/v2/push/getReceipts\" -d '{\n  \"ids\": [\n    \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\",\n    \"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY\",\n    \"ZZZZZZZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ\"\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Segments with useSegments in Expo Router\nDESCRIPTION: Shows how to use the useSegments hook to get a list of segments for the currently selected route, maintaining the original file path structure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/hooks.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial EAS Build Configuration\nDESCRIPTION: Basic eas.json configuration with development and production build profiles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI Module with expo-system-ui in JavaScript\nDESCRIPTION: This snippet demonstrates how to import all exported functions and objects from the expo-system-ui library as the SystemUI object in JavaScript. To use this code, ensure that expo-system-ui is installed in your project (typically via npm or yarn, as outlined in the installation section). The import statement does not require parameters, and successful execution allows subsequent calls to the SystemUI API throughout the app. This is a foundational step in integrating system UI control features into a React Native or Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Configuring BarCodeScanner Plugin in app.json\nDESCRIPTION: Configuration example for the expo-barcode-scanner plugin in app.json, showing how to set camera permission messages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-barcode-scanner\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access camera.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Home Screen Maestro Test Flow\nDESCRIPTION: YAML configuration that defines a Maestro test flow to check the home screen of the app. It launches the app and verifies that the 'Welcome!' text is visible.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/e2e-tests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nappId: dev.expo.eastestsexample # This is an example app id. Replace it with your app id.\n---\n- launchApp\n- assertVisible: 'Welcome!'\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Selection Patterns in app.json\nDESCRIPTION: Configuration example showing how to specify asset patterns that should be included in updates using the assetPatternsToBeBundled property in app.json. This example will include all PNG files from the app/images directory and its subdirectories.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/asset-selection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"expo\": {\n    \"extra\": {\n      \"updates\": {\n        \"assetPatternsToBeBundled\": [\n          \"app/images/**/*.png\"\n        ]\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and expo-insights\nDESCRIPTION: Terminal commands for installing and initializing EAS CLI, setting up an EAS project, and installing the expo-insights library. These steps are required to enable insights tracking in an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-insights/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install EAS CLI if you have not already\n$ npm i -g eas-cli\n\n# Initialize your project EAS if you have not already \n$ eas init\n\n# Install the library\n$ npx expo install expo-insights\n```\n\n----------------------------------------\n\nTITLE: Configuring StatusBar with Light Style\nDESCRIPTION: Setting the StatusBar component to use light text, which is suitable for apps with dark backgrounds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<StatusBar style=\"light\" />\n```\n\n----------------------------------------\n\nTITLE: Auto-generated .npmrc for Private npm Packages\nDESCRIPTION: The .npmrc file that EAS Build automatically creates when it detects the NPM_TOKEN environment variable, configuring authentication for private npm packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n//registry.npmjs.org/:_authToken=${NPM_TOKEN}\nregistry=https://registry.npmjs.org/\n```\n\n----------------------------------------\n\nTITLE: Implementing Processing.js Sketch in Expo React Native App\nDESCRIPTION: Complete example of implementing a recursive geometric pattern using Processing.js in an Expo application. The code demonstrates setting up a ProcessingView component with a sketch that draws an animated triangular fractal pattern.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-processing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ProcessingView } from 'expo-processing';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <ProcessingView style={{ flex: 1 }} sketch={this._sketch} />\n    );\n  }\n\n  _sketch = (p) => {\n    p.setup = () => {\n      p.strokeWeight(7);\n    }\n\n    const harom = (ax, ay, bx, by, level, ratio) => {\n      if (level <= 0) {\n        return;\n      }\n\n      const vx = bx - ax;\n      const vy = by - ay;\n      const nx = p.cos(p.PI / 3) * vx - p.sin(p.PI / 3) * vy;\n      const ny = p.sin(p.PI / 3) * vx + p.cos(p.PI / 3) * vy;\n      const cx = ax + nx;\n      const cy = ay + ny;\n      p.line(ax, ay, bx, by);\n      p.line(ax, ay, cx, cy);\n      p.line(cx, cy, bx, by);\n\n      harom(\n        ax * ratio + cx * (1 - ratio),\n        ay * ratio + cy * (1 - ratio),\n        ax * (1 - ratio) + bx * ratio,\n        ay * (1 - ratio) + by * ratio,\n        level - 1,\n        ratio);\n    }\n\n    p.draw = () => {\n      p.background(240);\n      harom(\n        p.width - 142, p.height - 142, 142, p.height - 142, 6,\n        (p.sin(0.0005 * Date.now() % (2 * p.PI)) + 1) / 2);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Integrating React Navigation Dev Tools with Expo Router\nDESCRIPTION: Example showing how to connect the React Navigation dev tools plugin with Expo Router. It requires passing the navigation container reference to the plugin hook.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useRef } from 'react';\nimport { useNavigationContainerRef, Slot } from 'expo-router';\nimport { useReactNavigationDevTools } from '@dev-plugins/react-navigation';\n\nexport default Layout() {\n  const navigationRef = useNavigationContainerRef();\n\n  useReactNavigationDevTools(navigationRef);\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Web Text Component with Language Support\nDESCRIPTION: Implementation of a custom Text component for web platforms with language detection and RTL support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLocales } from 'expo-localization';\n\nconst deviceLanguage = getLocales()[0].languageCode;\n\nconst WebText = (props: RNTextProps) => {\n  return <RNText lang={deviceLanguage} {...props} />;\n};\n\nexport default WebText;\n```\n\n----------------------------------------\n\nTITLE: Importing Expo ImageManipulator API in JavaScript\nDESCRIPTION: This snippet shows how to import all named exports from the 'expo-image-manipulator' package as a namespace called ImageManipulator. It is a prerequisite for accessing the API's manipulation functions in a JavaScript or React Native project. The only dependency required is the 'expo-image-manipulator' package, and this statement must precede any function calls to its API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Using StatusBar Component in React Native App\nDESCRIPTION: This example shows how to use the StatusBar component in a React Native app to set the status bar style to light text on a dark background.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nconst App = () => (\n  <View\n    style={{\n      flex: 1,\n      backgroundColor: '#000',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }}>\n    <Text style={{ color: '#fff' }}>Notice that the status bar has light text!</Text>\n    <StatusBar style=\"light\" />\n  </View>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Integrating a Dev Tools Plugin in an Expo App\nDESCRIPTION: Example showing how to use a dev tools plugin in an Expo app. It imports the custom hook from the plugin and uses its functionality to send ping messages from a button press.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMyDevToolsPlugin } from 'my-devtools-plugin';\nimport { Button } from 'react-native';\n\nexport default function App() {\n  const { sendPing } = useMyDevToolsPlugin();\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title=\"Ping\"\n        onPress={() => {\n          sendPing();\n        }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Hash in TypeScript\nDESCRIPTION: Demonstrates how to create a native hash value from a project using the createProjectHashAsync function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createProjectHashAsync(projectRoot: string, options?: Options): Promise<string>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await createProjectHashAsync('/app');\nconsole.log(hash);\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-barcode-scanner in app.json\nDESCRIPTION: Shows how to configure the expo-barcode-scanner plugin in app.json, particularly for setting camera permission messages that will be used in the iOS app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/bar-code-scanner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-barcode-scanner\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access camera.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Routes in app.json\nDESCRIPTION: Configure app.json to enable API Routes by setting the web bundler to Metro and output to server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"web\": {\n    \"bundler\": \"metro\",\n    \"output\": \"server\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild Command\nDESCRIPTION: Execute the expo prebuild command to regenerate the android and ios directories based on the app configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild --clean\n```\n\n----------------------------------------\n\nTITLE: Defining ExpoRadialChartModule in Swift for iOS\nDESCRIPTION: This snippet defines the ExpoRadialChartModule class, which sets up the module definition and prop for the ExpoRadialChartView. It handles the 'data' prop and calls the setChartData function when the prop changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoRadialChartModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoRadialChart\")\n\n    View(ExpoRadialChartView.self) {\n      Prop(\"data\") { (view: ExpoRadialChartView, prop: [Series]) in\n        view.setChartData(data: prop)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Development Branch Update Example\nDESCRIPTION: Example command showing how to publish an update to the development branch with a specific message describing a bug fix.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/publish.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --branch development --message \"Fixes typo\"\n```\n\n----------------------------------------\n\nTITLE: Publishing EAS Updates on Push with GitHub Actions\nDESCRIPTION: This YAML configuration sets up a GitHub Action to publish an EAS update whenever code is pushed to any branch. It installs dependencies, sets up Node.js and EAS, and runs the update command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/github-actions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: update\non: push\n\njobs:\n  update:\n    name: EAS Update\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for EXPO_TOKEN\n        run: |\n          if [ -z \"${{ secrets.EXPO_TOKEN }}\" ]; then\n            echo \"You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions\"\n            exit 1\n          fi\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Setup Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: 18.x\n          cache: yarn\n\n      - name: Setup EAS\n        uses: expo/expo-github-action@v8\n        with:\n          eas-version: latest\n          token: ${{ secrets.EXPO_TOKEN }}\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Publish update\n        run: eas update --auto\n```\n\n----------------------------------------\n\nTITLE: Implementing Unmatched Route Handler in Expo Router\nDESCRIPTION: Basic implementation of an unmatched route handler using the default Unmatched component from expo-router. This handles 404-like scenarios in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/error-handling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Unmatched } from 'expo-router';\nexport default Unmatched;\n```\n\n----------------------------------------\n\nTITLE: Implementing Expo Settings Module in iOS with Swift\nDESCRIPTION: This snippet shows the iOS native module implementation for Expo Settings using Swift. It defines theme management functions and an enum for theme values.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoSettingsModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Events(\"onChangeTheme\")\n\n    Function(\"setTheme\") { (theme: Theme) -> Void in\n      UserDefaults.standard.set(theme.rawValue, forKey:\"theme\")\n      sendEvent(\"onChangeTheme\", [\n        \"theme\": theme.rawValue\n      ])\n    }\n\n    Function(\"getTheme\") { () -> String in\n      UserDefaults.standard.string(forKey: \"theme\") ?? Theme.system.rawValue\n    }\n  }\n\n  enum Theme: String, Enumerable {\n    case light\n    case dark\n    case system\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Navigator in Expo Router\nDESCRIPTION: Creates a basic Stack navigator layout in the app/_layout.tsx file. This sets up the foundation for stack-based navigation in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router/stack';\n\nexport default function Layout() {\n  return <Stack />;\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Build Artifacts with Custom Inputs - Expo (YAML)\nDESCRIPTION: This YAML example demonstrates uploading build artifacts from specific paths using the eas/upload_artifact step with custom inputs. It uploads both an app APK and additional asset files, supporting glob patterns (e.g., assets/*.jpg, assets/*.png). Key parameters are 'path' (required: file path or list) and optional 'type' (either 'application-archive' or 'build-artifact'). Uploaded files are sent to EAS servers. Each artifact type may be uploaded only once per workflow; avoid conflicts with automatic artifact upload steps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\\n  name: Upload artifacts\\n  steps:\\n    - eas/checkout\\n    # - ...\\n    - eas/upload_artifact:\\n        name: Upload application archive\\n        inputs:\\n          path: fixtures/app-debug.apk\\n    - eas/upload_artifact:\\n        name: Upload artifacts\\n        inputs:\\n          type: build-artifact\\n          path: |\\n            assets/*.jpg\\n            assets/*.png\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Crypto Module\nDESCRIPTION: Shows how to import the expo-crypto module in JavaScript. This import statement is needed to access the crypto functionality in your Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Crypto from 'expo-crypto';\n```\n\n----------------------------------------\n\nTITLE: Submitting Android App via EAS CLI\nDESCRIPTION: Command to submit an Android app to Google Play Store using EAS CLI with a specific profile\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/submit/android.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas submit -p android --profile foobar\n```\n\n----------------------------------------\n\nTITLE: Creating eas.json Configuration File for EAS Build\nDESCRIPTION: This snippet shows the default eas.json configuration file created during the EAS build:configure process. It defines three build profiles: development, preview, and production, with different distribution settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/build-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReactNativeTracing to Fix Development Server Issues\nDESCRIPTION: JavaScript code to prevent Sentry from creating spans for log requests to the development server, which can cause transactions to never finish when using expo-dev-client.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from 'sentry-expo';\nimport Constants from 'expo-constants';\n\nSentry.init({\n  tracesSampleRate: 1.0,\n  integrations: [\n    new Sentry.Native.ReactNativeTracing({\n      shouldCreateSpanForRequest: url => {\n        return !__DEV__ || !url.startsWith(`http://${Constants.expoConfig.hostUri}/logs`);\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for URL Scheme Queries\nDESCRIPTION: Shows how to configure the app.json file to add custom URL scheme queries to the iOS Info.plist file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"LSApplicationQueriesSchemes\": [\"uber\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Contacts Plugin in app.json\nDESCRIPTION: Configuration example showing how to set up the expo-contacts plugin in app.json, including how to customize the contacts permission message.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-contacts\",\n        {\n          \"contactsPermission\": \"Allow $(PRODUCT_NAME) to access your contacts.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Rest Syntax in URL Parameters with Expo Router (TypeScript)\nDESCRIPTION: This snippet shows how to handle rest syntax in URL parameters, returning an array of path segments when using useLocalSearchParams hook in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function Route() {\n  const { everything } = useLocalSearchParams<{\n    everything: string[];\n  }>();\n  const user = everything[0];\n\n  return <Text>User: {user}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo AV Plugin Permissions - JSON\nDESCRIPTION: Demonstrates adding expo-av plugin configuration in app.json to provide microphone permission on iOS. The configuration sets a human-readable message for NSMicrophoneUsageDescription, which is required for audio recording features on iOS. This setup should be included before building your app binary.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-av\\\",\\n        {\\n          \\\"microphonePermission\\\": \\\"Allow $(PRODUCT_NAME) to access your microphone.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Battery Level Monitor in React Native\nDESCRIPTION: A React Native component that demonstrates basic usage of expo-battery to display the current battery level using the useBatteryLevel hook.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Sentry Config Plugin to Expo Project\nDESCRIPTION: JSON configuration to add the Sentry config plugin to an Expo project's app.json file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"sentry-expo\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from CSS to React Native SafeAreaContext in JSX\nDESCRIPTION: Shows how to migrate from CSS environment variables to using the useSafeAreaInsets hook for applying safe area insets in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Layout Route in Expo Router\nDESCRIPTION: This snippet demonstrates how to create a basic layout route using _layout.tsx file. It uses the Slot component from expo-router to render child routes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/layouts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot } from 'expo-router';\n\nexport default function HomeLayout() {\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracking Transparency Permissions in Expo Config Plugin (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the expo-tracking-transparency plugin within app.json using the config plugin system. It sets a custom user tracking permission message via the userTrackingPermission property, which is added to the NSUserTrackingUsageDescription key in the app's Info.plist on iOS. Requires Expo config plugins and necessitates rebuilding the app for changes to take effect.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"expo\": {\\n    \"plugins\": [\\n      [\\n        \"expo-tracking-transparency\",\\n        {\\n          \"userTrackingPermission\": \"This identifier will be used to deliver personalized ads to you.\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Source Maps for iOS Updates using Sentry CLI\nDESCRIPTION: Command for uploading iOS source maps to Sentry after generating an EAS Update. This associates the source maps with a specific release and distribution ID to enable proper error stack traces.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ node_modules/@sentry/cli/bin/sentry-cli releases \\\n    files <release name> \\\n    upload-sourcemaps \\\n    --dist <iOS Update ID> \\\n    --rewrite \\\n    dist/bundles/main.jsbundle dist/bundles/ios-<hash>.map\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo Development Server (Bash)\nDESCRIPTION: This command uses `npx` to run the locally installed Expo CLI and start the development server. It bundles the JavaScript code using Metro and provides options to run the app in various environments like simulators, emulators, physical devices via Expo Go, or development builds. This command should be run after dependencies have been installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/templates/expo-template-default/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n npx expo start\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions in app.json\nDESCRIPTION: Example of adding custom Android permissions to an Expo app configuration. Shows how to specify additional permissions not included by default in libraries.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"permissions\": [\"android.permission.SCHEDULE_EXACT_ALARM\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LightSensor from Expo Sensors (JavaScript)\nDESCRIPTION: Shows the basic import statement required to use the `LightSensor` functionality from the `expo-sensors` package in a JavaScript or React Native project. This makes the `LightSensor` object available for use, allowing access to its methods like `addListener`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LightSensor } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in React Native Component\nDESCRIPTION: Demonstrates how to access environment variables in a React Native component using process.env. Shows implementation of API URL access in a button press handler.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\n\nfunction Post() {\n  const apiUrl = process.env.EXPO_PUBLIC_API_URL;\n\n  async function onPress() {\n    await fetch(apiUrl, { ... })\n  }\n\n  return <Button onPress={onPress} title=\"Post\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Packages from Autolinking on Android\nDESCRIPTION: This snippet shows how to exclude specific packages from autolinking on Android platform using the package.json configuration. It's useful for reducing binary size by not linking unused packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"autolinking\": {\n      \"android\": {\n        \"exclude\": [\"expo-random\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-mail-composer Library in JavaScript\nDESCRIPTION: This JavaScript code snippet shows the standard method for importing the `expo-mail-composer` module into a project. All exported functions and constants from the library become accessible via the `MailComposer` object after this import. This step is prerequisite to using any mail composition features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Importing External CSS Libraries in Expo\nDESCRIPTION: Example of importing a CSS library from node_modules to apply styles app-wide on web platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Applies the styles app-wide.\nimport 'emoji-mart/css/emoji-mart.css';\n```\n\n----------------------------------------\n\nTITLE: Importing ScreenOrientation from Expo SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to import all exports from expo-screen-orientation as a namespaced object. It is intended for use in a React Native application using Expo to manage screen orientation programmatically at runtime. This requires the expo-screen-orientation package to be installed. The input is a standard ES Module import statement; output is an object (ScreenOrientation) to be used for orientation APIs. Make sure the package is installed and properly configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\\n\n```\n\n----------------------------------------\n\nTITLE: BlurView Component Layout Example\nDESCRIPTION: Example showing correct rendering order of BlurView with FlatList to avoid update issues\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n  <FlatList />\n  <BlurView />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Updating Button.js Component with onPress Prop\nDESCRIPTION: Replacing the alert() function with the onPress prop in the Button component to handle click events.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Pressable style={styles.button} onPress={onPress} >\n```\n\n----------------------------------------\n\nTITLE: Implementing App Option Buttons in React Native\nDESCRIPTION: Adding button components to the main App component with placeholder functions for handling reset, adding stickers, and saving images.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// ... rest of the import statements\nimport CircleButton from './components/CircleButton';\nimport IconButton from './components/IconButton';\n\nexport default function App() {\n  // ...rest of the code remains same\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  const onAddSticker = () => {\n    // we will implement this later\n  };\n\n  const onSaveImageAsync = async () => {\n    // we will implement this later\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* ...rest of the code remains same */}\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        // ...rest of the code remains same\n      )}\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  // ...previous styles remain unchanged\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code URL for EAS Update by Update ID\nDESCRIPTION: This URL generates a QR code for a specific update given its platform-specific ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?updateId=your-update-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Exempt Encryption in app.json for iOS\nDESCRIPTION: Configuration in app.json to set usesNonExemptEncryption to false for iOS, which automatically handles the compliance information prompt in App Store Connect.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"config\": {\n        \"usesNonExemptEncryption\": false\n      }\n      /* @hide ... */ /* @end */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Client Environment Variable Inlining in Expo CLI via Shell Command\nDESCRIPTION: Shows how to prevent Expo CLI from inlining environment variables prefixed with `EXPO_PUBLIC_` into the client JavaScript bundle by setting the `EXPO_NO_CLIENT_ENV_VARS=1` environment variable. Includes examples using `npx cross-env` for cross-platform use and direct variable assignment for macOS/Linux before executing `expo start`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n'# All users can run cross-env, followed by the Expo CLI command'\n'$ npx cross-env EXPO_NO_CLIENT_ENV_VARS=1 expo start'\n'# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command'\n'$ EXPO_NO_CLIENT_ENV_VARS=1 npx expo start'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Route Options in Expo Router\nDESCRIPTION: Shows how to dynamically configure route options using navigation.setOptions() within a component. This allows for runtime changes to screen options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, useNavigation } from 'expo-router';\nimport { Text, View } from 'react-native';\nimport { useEffect } from 'react';\n\nexport default function Home() {\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    navigation.setOptions({ headerShown: false });\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Section Component for Web and Mobile\nDESCRIPTION: Illustrates the use of the Section component from @expo/html-elements, rendering as a section element on web with role 'region' and a View on mobile with role 'summary'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Section } from '@expo/html-elements';\n\nexport default () => <Section />;\n```\n\n----------------------------------------\n\nTITLE: Brightness Module Import Statement\nDESCRIPTION: Shows how to import the Brightness module from expo-brightness package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Brightness from 'expo-brightness';\n```\n\n----------------------------------------\n\nTITLE: Sending Messages from a Dev Tools Plugin\nDESCRIPTION: Code showing how to send messages from the plugin to the app using the useDevToolsPluginClient hook. It sends a 'ping' message with origin information.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst client = useDevToolsPluginClient('my-devtools-plugin');\nclient?.sendMessage('ping', { from: 'web' });\n```\n\n----------------------------------------\n\nTITLE: Configuring GestureHandlerRootView in App.js\nDESCRIPTION: Sets up the GestureHandlerRootView component as the root wrapper for the application to enable gesture handling throughout the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* @info Import GestureHandlerRootView from react-native-gesture-handler-library. */import { GestureHandlerRootView } from \"react-native-gesture-handler\"; /* @end */\n\nexport default function App() {\n  return (\n    /* @info Replace the root level View component with GestureHandlerRootView. */\n    <GestureHandlerRootView style={styles.container}>\n    /* @end */\n      {/* ...rest of the code remains */}\n    /* @info */\n    </GestureHandlerRootView>\n    /* @end */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing iOS Theme Module with Swift\nDESCRIPTION: Basic Swift implementation of the ExpoSettings module with a simple getTheme function that returns a default system theme.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoSettingsModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Function(\"getTheme\") { () -> String in\n      \"system\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Cross-Platform Div/Container with @expo/html-elements in TypeScript\nDESCRIPTION: This code provides a Div container that renders a <div> on web and a View on native platforms. The component inherits styling suited for Yoga layout (flex, column direction). It uses @expo/html-elements and can wrap arbitrary child components, like P (for paragraphs). The main prop is children. This is useful for creating semantically appropriate and accessible containers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Div } from '@expo/html-elements';\n\nexport default () => (\n    <Div>\n      <P>Some content in the main element</P>\n    </Div>\n  );\n)\n```\n\n----------------------------------------\n\nTITLE: iOS Background Audio Configuration in Expo\nDESCRIPTION: JSON configuration for enabling background audio playback in iOS standalone apps using Expo config plugins.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PRAGMA Queries for SQLite Configuration\nDESCRIPTION: This snippet shows how to configure SQLite database settings using PRAGMA statements. It enables WAL journal mode and foreign key constraints which can improve performance and data integrity.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync('PRAGMA journal_mode = WAL');\nawait db.execAsync('PRAGMA foreign_keys = ON');\n```\n\n----------------------------------------\n\nTITLE: Android Permissions Configuration\nDESCRIPTION: XML configuration showing the required Android permissions for biometric authentication\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-local-authentication/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.USE_BIOMETRIC\" />\n<uses-permission android:name=\"android.permission.USE_FINGERPRINT\" />\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Dynamic Route in Expo Router (TypeScript)\nDESCRIPTION: This code demonstrates how to redirect to a dynamic route with a specific user parameter in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Redirect } from 'expo-router';\n\nexport default function Route() {\n  return <Redirect href=\"/evanbacon\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Building iOS App with Expo CLI\nDESCRIPTION: Commands for building and running an iOS app using Expo CLI. Supports development and release configurations with various options for device selection and build caching.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Build for iOS\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-font Plugin in app.json\nDESCRIPTION: Configuration for the expo-font plugin in app.json to link custom font files to the native project. The paths should be relative to the project root, and the file names will become the font family names.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"path/to/file.ttf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing EAS Update Previews on Pull Requests\nDESCRIPTION: This YAML configuration sets up a GitHub Action to publish an EAS update preview whenever a pull request is opened or updated. It adds a comment to the pull request with information about the update and a QR code to scan.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/github-actions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: preview\non: pull_request\n\njobs:\n  update:\n    name: EAS Update\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - name: Check for EXPO_TOKEN\n        run: |\n          if [ -z \"${{ secrets.EXPO_TOKEN }}\" ]; then\n            echo \"You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions\"\n            exit 1\n          fi\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Setup Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: 18.x\n          cache: yarn\n\n      - name: Setup EAS\n        uses: expo/expo-github-action@v8\n        with:\n          eas-version: latest\n          token: ${{ secrets.EXPO_TOKEN }}\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Create preview\n        uses: expo/expo-github-action/preview@v8\n        with:\n          command: eas update --auto\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-calendar plugin in app.json\nDESCRIPTION: Example of how to configure the expo-calendar plugin in the app.json file. This configuration sets the calendar permission message for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-calendar\",\n        {\n          \"calendarPermission\": \"The app needs to access your calendar.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Non-Expo Packages from Autolinking\nDESCRIPTION: This snippet demonstrates how to exclude non-Expo packages from autolinking using a react-native.config.js file. It allows platform-specific exclusions for any library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  dependencies: {\n    'library-name': {\n      platforms: {\n        android: null,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using create-expo with templates\nDESCRIPTION: Demonstrates how to use the template flag to initialize a project with predefined functionality. Shows how to browse available templates or select a specific one.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/create-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Pick from Expo's templates\nnpx create-expo --template\n\n# Pick the expo-template-tabs template\nnpx create-expo --template tabs\n```\n\n----------------------------------------\n\nTITLE: Creating Modal-Based Emoji Picker Component in React Native\nDESCRIPTION: Implementation of a modal component that displays emoji picker functionality. Uses React Native's Modal component with customizable visibility, close handling, and child content rendering.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal, View, Text, Pressable, StyleSheet } from 'react-native';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\nexport default function EmojiPicker({ isVisible, children, onClose }) {\n  return (\n    <Modal animationType=\"slide\" transparent={true} visible={isVisible}>\n      <View style={styles.modalContent}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.title}>Choose a sticker</Text>\n          <Pressable onPress={onClose}>\n            <MaterialIcons name=\"close\" color=\"#fff\" size={22} />\n          </Pressable>\n        </View>\n        {children}\n      </View>\n    </Modal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo Module in JavaScript\nDESCRIPTION: Imports the NetInfo module from the '@react-native-community/netinfo' package. This is the first step to using the library's functionalities within a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: Expo Router Home Layout Implementation\nDESCRIPTION: Implementation of home layout configuration using Tabs navigator in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function HomeLayout() {\n  return <Tabs />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Orbit on macOS with Homebrew\nDESCRIPTION: Command to install Orbit app on macOS using Homebrew. Orbit is used to install and launch builds/updates from EAS on physical devices and emulators.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/tools.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install expo-orbit\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsets Hook in Expo React Native\nDESCRIPTION: This example demonstrates how to use the useSafeAreaInsets hook to apply padding to a View component based on the device's safe area insets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nexport default function HomeScreen() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View style={{ flex: 1, paddingTop: insets.top }}>\n      <Text>Content is in safe area.</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo StatusBar Package using npm - Bash\nDESCRIPTION: Demonstrates the installation of the expo-status-bar library via npm for use in bare React Native projects. This command installs the required package and should be run in the project root directory. The installation process assumes that npm is installed and properly configured. No additional parameters are needed; simply execute the command as shown.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-status-bar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-status-bar\n```\n\n----------------------------------------\n\nTITLE: Importing FaceDetector Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-face-detector module, used to access all the APIs provided by the face detection library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/facedetector.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as FaceDetector from 'expo-face-detector';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Application Module\nDESCRIPTION: Shows how to import the expo-application module to access native application information.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Version in app.json for Updates\nDESCRIPTION: Configuration to set the runtime version for app updates in app.json. This ensures updates are only delivered to builds with matching runtime versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/runtime-versions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-auth-session and expo-crypto - Bash\nDESCRIPTION: Demonstrates shell commands for installing expo-auth-session together with its required peer dependency expo-crypto. Uses npx and yarn to manage URI schemes, which are essential for enabling deep linking in the native app authentication flow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/auth-session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx uri-scheme add mycoolredirect\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx uri-scheme list\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Rebuild the native apps, be sure to use an emulator\\n$ yarn android\\n$ yarn ios\\n\\n# Open a URI scheme\\n$ npx uri-scheme open mycoolredirect://some/redirect\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal and Stack Navigation with Expo Router in TypeScript\nDESCRIPTION: Sets up the stack navigator for an Expo Router app layout, establishing '(root)' as the initial route and presenting the 'sign-in' screen as a modal using the 'presentation: modal' option. Requires Expo Router, React Native, and relevant navigation dependencies. The exported function returns a <Stack> component with designated screens. No input parameters are required; intended for use as part of the routing infrastructure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Stack } from 'expo-router';\\n\\nexport const unstable_settings = {\\n  initialRouteName: '(root)',\\n};\\n\\nexport default function AppLayout() {\\n  return (\\n    <Stack>\\n      <Stack.Screen name=\"(root)\" />\\n      <Stack.Screen\\n        name=\"sign-in\"\\n        options={{\\n          presentation: 'modal',\\n        }}\\n      />\\n    </Stack>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build with Terminal Commands\nDESCRIPTION: Terminal commands to initialize EAS for the project and configure EAS Build. This creates a new project on Expo servers and generates the eas.json configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/e2e-tests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas init\n\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Routes for Array Syntax Groups\nDESCRIPTION: Shows how to set initialRouteName for multiple route groups using array syntax. Allows specifying different initial routes for different route segments using nested configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/router-settings.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const unstable_settings = {\n  // Used for `(foo)`\n  initialRouteName: 'first',\n  // Used for `(bar)`\n  bar: {\n    initialRouteName: 'second',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Usage in Expo Components\nDESCRIPTION: Example showing how to use CSS Modules in React Native and web components with different syntax approaches.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles, { unstable_styles } from './App.module.css';\n\nexport default function Page() {\n  return (\n    <>\n      <Text\n        style={{\n          // This is how react-native-web class names are applied\n          $$css: true,\n          _: styles.text,\n        }}>\n        Hello World\n      </Text>\n      <Text style={unstable_styles.text}>Hello World</Text>\n      {/* Web-only usage: */}\n      <p className={styles.text}>Hello World</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Privacy Manifest in app.json\nDESCRIPTION: This snippet demonstrates how to include an iOS privacy manifest using the 'privacyManifests' field under 'expo.ios' in the app config. It shows the structure for declaring accessed API types and their reasons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/apple-privacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"name\": \"My App\",\n    \"slug\": \"my-app\",\n    /* @hide ... */ /* @end */\n    \"ios\": {\n      \"privacyManifests\": {\n        \"NSPrivacyAccessedAPITypes\": [\n          {\n            \"NSPrivacyAccessedAPIType\": \"NSPrivacyAccessedAPICategoryUserDefaults\",\n            \"NSPrivacyAccessedAPITypeReasons\": [\"CA92.1\"]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Libraries in Expo\nDESCRIPTION: Overview of main storage libraries available in Expo including expo-secure-store for encrypted key-value storage, expo-file-system for local file system access, expo-sqlite for SQL database operations, and Async Storage for simple persistent key-value storage.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/store-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpo-secure-store\nexpo-file-system\nexpo-sqlite\n@react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-linking Module in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the entire `expo-linking` module as the 'Linking' namespace. This import statement makes all exported functions and constants from the library available for use in the current file, enabling functionalities like creating, opening, and parsing deep links.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build and Test for iOS and Android\nDESCRIPTION: YAML configuration for building and testing an app using EAS build and Maestro. It demonstrates how to use the 'eas/build' and 'eas/maestro_test' functions to build the app and run automated tests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test\n  steps:\n    - eas/build\n    # @info #\n    - eas/maestro_test:\n        inputs:\n          flow_path: |\n            maestro/sign_in.yaml\n            maestro/create_post.yaml\n            maestro/sign_out.yaml\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring Postinstall Script for Monorepo in EAS Build\nDESCRIPTION: This code adds a postinstall script to package.json that builds all necessary dependencies in other workspaces when setting up EAS Build in a monorepo. The script navigates up to the root directory and runs the build command to ensure all required dependencies are properly compiled.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/build-with-monorepos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"postinstall\": \"cd ../.. && yarn build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced React Compiler Babel Configuration\nDESCRIPTION: Extended Babel configuration showing additional React Compiler settings and platform-specific options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/preview/react-compiler.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n\n  return {\n    presets: [\n      [\n        'babel-preset-expo',\n        {\n          'react-compiler': {\n            // Passed directly to the React Compiler Babel plugin.\n            compilationMode: 'strict',\n            panicThreshold: 'all_errors',\n          }\n          web: {\n            'react-compiler': {\n              // Web-only settings...\n            }\n          }\n        }\n      ]\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Simulator Development Build\nDESCRIPTION: Configuration for the development profile to create builds for iOS Simulator, including developmentClient and internal distribution settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Either Types in Swift and Kotlin\nDESCRIPTION: Demonstrates using Either types to accept multiple data types for a single function argument. Either types act as containers for a value of one of a couple of specified types.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nFunction(\"foo\") { (bar: Either<String, Int>) in\n  if let bar: String = bar.get() {\n    // `bar` is a String\n  }\n  if let bar: Int = bar.get() {\n    // `bar` is an Int\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nFunction(\"foo\") { bar: Either<String, Int> ->\n  bar.get(String::class).let {\n    // `it` is a String\n  }\n  bar.get(Int::class).let {\n    // `it` is an Int\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Channel and Scheduling Notification in Expo\nDESCRIPTION: This TypeScript snippet demonstrates how to set up a notification channel with a custom sound and schedule a notification using that channel in an Expo project. It includes setting the channel properties and defining the notification content and trigger.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new-emails', {\n  name: 'E-mail notifications',\n  importance: Notifications.AndroidImportance.HIGH,\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\n});\n\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\n  },\n  trigger: {\n    seconds: 2,\n    channelId: 'new-emails',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: iOS Notification Object Structure\nDESCRIPTION: This JSON snippet illustrates the structure of a notification object received by the addNotificationReceivedListener callback on iOS. It includes details about the notification content, trigger, and custom data specific to iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    \"trigger\": {\n      \"class\": \"UNPushNotificationTrigger\",\n      \"type\": \"push\",\n      \"payload\": {\n        \"experienceId\": \"@betoatexpo/expo-notifications-app\",\n        \"projectId\": \"51092087-87a4-4b12-8008-145625477434\",\n        \"scopeKey\": \"@betoatexpo/expo-notifications-app\",\n        \"aps\": {\n          \"thread-id\": \"\",\n          \"category\": \"\",\n          \"badge\": 1,\n          \"alert\": {\n            \"subtitle\": \"Hey there! How's your day going?\",\n            \"title\": \"Chat App\",\n            \"launch-image\": \"\",\n            \"body\": \"New message from John Doe\"\n          },\n          \"sound\": \"default\"\n        },\n        \"body\": {\n          \"messageId\": \"msg789\",\n          \"timestamp\": 1724766427,\n          \"messageType\": \"text\",\n          \"senderId\": \"user123\",\n          \"senderName\": \"John Doe\",\n          \"conversationId\": \"conversation-456\"\n        }\n      }\n    },\n    \"identifier\": \"3AEB849E-9059-4D09-BC3B-9A0B104CF062\",\n    \"content\": {\n      \"body\": \"New message from John Doe\",\n      \"sound\": \"default\",\n      \"launchImageName\": \"\",\n      \"badge\": 1,\n      \"subtitle\": \"Hey there! How's your day going?\",\n      \"title\": \"Chat App\",\n      \"data\": {\n        \"conversationId\": \"conversation-456\",\n        \"senderName\": \"John Doe\",\n        \"senderId\": \"user123\",\n        \"messageType\": \"text\",\n        \"timestamp\": 1724766427,\n        \"messageId\": \"msg789\"\n      },\n      \"summaryArgument\": null,\n      \"categoryIdentifier\": \"\",\n      \"attachments\": [],\n      \"interruptionLevel\": \"active\",\n      \"threadIdentifier\": \"\",\n      \"targetContentIdentifier\": null,\n      \"summaryArgumentCount\": 0\n    }\n  },\n  \"date\": 1724798493.0589335\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing SafeAreaProvider with Initial Metrics in JSX\nDESCRIPTION: Shows how to optimize the initial render of SafeAreaProvider by providing initial window metrics.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Developer-Facing App Versions in app.config.js\nDESCRIPTION: This snippet demonstrates how to manually set buildNumber for iOS and versionCode for Android in the app.config.js file. These values must be unique for each app store submission to prevent failed submissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/manage-app-versions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    /* @info */\n    \"buildNumber\": \"1\"\n    /* @end */\n    /* @hide ... */ /* @end */\n  },\n  \"android\": {\n    /* @info */\n    \"versionCode\": \"1\"\n    /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring credentials.json for multi-target iOS project\nDESCRIPTION: Example credentials.json configuration for an iOS project with multiple targets (main app and extensions). Each target requires its own provisioning profile and can use either the same or different distribution certificates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"multitarget\": {\n      \"provisioningProfilePath\": \"ios/certs/multitarget-profile.mobileprovision\",\n      \"distributionCertificate\": {\n        \"path\": \"ios/certs/dist.p12\",\n        \"password\": \"DISTRIBUTION_CERTIFICATE_PASSWORD\"\n      }\n    },\n    \"shareextension\": {\n      \"provisioningProfilePath\": \"ios/certs/shareextension-profile.mobileprovision\",\n      /* @info You can use either the same distribution certificate (as for the first target) or a new one */\n      \"distributionCertificate\": {\n        \"path\": \"ios/certs/another-dist.p12\",\n        \"password\": \"ANOTHER_DISTRIBUTION_CERTIFICATE_PASSWORD\"\n      }\n      /* @end */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PRAGMA queries in SQLite for Expo\nDESCRIPTION: This snippet demonstrates how to execute PRAGMA queries in SQLite, specifically setting the journal mode to WAL and enabling foreign keys. These settings can improve database performance and enforce data integrity.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst db = await SQLite.openDatabaseAsync('databaseName');\nawait db.execAsync('PRAGMA journal_mode = WAL');\nawait db.execAsync('PRAGMA foreign_keys = ON');\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS WebView Component\nDESCRIPTION: Creates an iOS WebView component using WKWebView with URL loading and load event handling capabilities. Implements WKNavigationDelegate to track page load completion.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\nimport WebKit\n\nclass ExpoWebView: ExpoView, WKNavigationDelegate {\n  let webView = WKWebView()\n  let onLoad = EventDispatcher()\n\n  required init(appContext: AppContext? = nil) {\n    super.init(appContext: appContext)\n    clipsToBounds = true\n    webView.navigationDelegate = self\n    addSubview(webView)\n  }\n\n  override func layoutSubviews() {\n    webView.frame = bounds\n  }\n\n  func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n    if let url = webView.url {\n      onLoad([\n        \"url\": url.absoluteString\n      ])\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Variables for Test Builds in eas.json\nDESCRIPTION: This snippet shows how to set environment variables in eas.json for customizing app configuration in test builds, such as changing the app icon and name.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"test\": {\n      \"env\": {\n        \"APP_ICON\": \"./assets/icon-test.png\",\n        \"APP_NAME\": \"My App (Test)\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring eas.json for Custom Test Build Profile\nDESCRIPTION: An eas.json configuration that defines a custom build profile called 'test' that uses the custom YAML workflow. The withoutCredentials option skips credential setup since it's not needed for testing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"test\": {\n      \"config\": \"test.yml\",\n      \"withoutCredentials\": true\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Module with Kotlin\nDESCRIPTION: Kotlin code for the ExpoNativeConfigurationModule, defining a function to return an API key.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.nativeconfiguration\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoNativeConfigurationModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoNativeConfiguration\")\n\n    Function(\"getApiKey\") {\n      return@Function \"api-key\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Assets with expo-image\nDESCRIPTION: Example of using an embedded asset directly with expo-image component after configuring with expo-asset plugin.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Image } from 'expo-image';\n\nexport default function HomeScreen() {\n  return <Image source=\"example\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GLView from expo-gl (JavaScript)\nDESCRIPTION: Provides the standard import statement for accessing the GLView component from the expo-gl package. Required for all usage of GLView within an Expo or React Native JavaScript/TypeScript project. No parameters or outputs involved; this is a dependency import.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gl-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { GLView } from 'expo-gl';\n```\n\n----------------------------------------\n\nTITLE: Library Import Statement in React Native\nDESCRIPTION: Shows the import statement for using react-native-gesture-handler library in React Native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/gesture-handler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection'\n```\n\n----------------------------------------\n\nTITLE: Modifying Home Screen Welcome Text in React Native\nDESCRIPTION: TypeScript code diff showing how to modify the welcome text in the app's home screen component, changing 'Welcome!' to 'Hello World!'\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/get-started/start-developing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/app/(tabs)/index.tsx b/app/(tabs)/index.tsx\nindex 45cfa0e..4d1b384 100644\n--- a/app/(tabs)/index.tsx\n+++ b/app/(tabs)/index.tsx\n@@ -17,7 +17,7 @@ export default function HomeScreen() {\n       }\n     >\n       <ThemedView style={styles.titleContainer}>\n-        <ThemedText type=\"title\">Welcome!</ThemedText>\n+        <ThemedText type=\"title\">Hello World!</ThemedText>\n         <HelloWave />\n       </ThemedView>\n       <ThemedView style={styles.stepContainer}>\n \n```\n\n----------------------------------------\n\nTITLE: Implementing ToastAndroid in React Native\nDESCRIPTION: Demonstrates how to use the native ToastAndroid API to display toast notifications in Android. The example shows a basic implementation with a button that triggers a toast message when pressed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/react-native-toast.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet, ToastAndroid, Button, StatusBar } from 'react-native';\n\nexport default function App() {\n  function showToast() {\n    ToastAndroid.show('Request sent successfully!', ToastAndroid.SHORT);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Show Toast\" onPress={showToast} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: StatusBar.currentHeight,\n    backgroundColor: '#6638f0',\n    padding: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the Font Module in React Native\nDESCRIPTION: Example of importing the Font module from the expo-font package, which is necessary to use the Font API functions programmatically rather than through hooks.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Font from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Configuring eas.json with Development Profile for EAS Build\nDESCRIPTION: A minimal JSON configuration for eas.json that includes development, preview, and production build profiles. The development profile enables the development client and internal distribution for debug builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Document Configuration for React Native Web\nDESCRIPTION: Next.js custom Document setup for React Native Web styling and behavior parity.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Children } from 'react';\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { AppRegistry } from 'react-native';\n\nconst style = `\nhtml, body, #__next {\n  -webkit-overflow-scrolling: touch;\n}\n#__next {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\nhtml {\n  scroll-behavior: smooth;\n  -webkit-text-size-adjust: 100%;\n}\nbody {\n  overflow-y: auto;\n  overscroll-behavior-y: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -ms-overflow-style: scrollbar;\n}\n`;\n\nexport default class MyDocument extends Document {\n  static async getInitialProps({ renderPage }) {\n    AppRegistry.registerComponent('main', () => Main);\n    const { getStyleElement } = AppRegistry.getApplication('main');\n    const page = await renderPage();\n    const styles = [\n      <style key=\"react-native-style\" dangerouslySetInnerHTML={{ __html: style }} />,\n      getStyleElement(),\n    ];\n    return { ...page, styles: Children.toArray(styles) };\n  }\n\n  render() {\n    return (\n      <Html style={{ height: '100%' }}>\n        <Head />\n        <body style={{ height: '100%', overflow: 'hidden' }}>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Search Parameters in Expo Router\nDESCRIPTION: Demonstrates the use of useLocalSearchParams hook to retrieve URL parameters for the contextually selected route, maintaining local context in nested navigation scenarios.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/hooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function Route() {\n  const { user, extra } = useLocalSearchParams();\n\n  return <Text>User: {user}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global CSS Styles in React Native\nDESCRIPTION: Example showing how to use global CSS classes in both React DOM and React Native for web components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport './styles.css';\nimport { View } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      {/* Use `className` to assign the style with React DOM components. */}\n      <div className=\"container\">Hello World</div>\n\n      {/* Use `style` with the following syntax to append class names in React Native for web. */}\n      <View\n        style={{\n          $$css: true,\n          _: 'container',\n        }}>\n        Hello World\n      </View>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry with Expo Router\nDESCRIPTION: This TypeScript snippet shows how to configure Sentry to work with Expo Router, including setting up routing instrumentation and wrapping the root layout component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Slot, useNavigationContainerRef } from 'expo-router';\nimport { useEffect } from 'react';\nimport * as Sentry from '@sentry/react-native';\nimport { isRunningInExpoGo } from 'expo';\n\nconst routingInstrumentation = new Sentry.ReactNavigationInstrumentation();\n\nSentry.init({\n  dsn: 'YOUR DSN HERE',\n  debug: true,\n  integrations: [\n    new Sentry.ReactNativeTracing({\n      routingInstrumentation,\n      enableNativeFramesTracking: !isRunningInExpoGo(),\n    }),\n  ],\n});\n\nfunction RootLayout() {\n  const ref = useNavigationContainerRef();\n\n  useEffect(() => {\n    if (ref) {\n      routingInstrumentation.registerNavigationContainer(ref);\n    }\n  }, [ref]);\n\n  return <Slot />;\n}\n\nexport default Sentry.wrap(RootLayout);\n```\n\n----------------------------------------\n\nTITLE: Blocking Android Permissions in app.json\nDESCRIPTION: Demonstrates how to block specific Android permissions that are automatically added by packages using the blockedPermissions configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"blockedPermissions\": [\"android.permission.RECORD_AUDIO\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Android Development Build Steps in YAML\nDESCRIPTION: Specifies the sequence of steps for an Android development build targeting internal distribution, located in `.eas/build/development-build-android.yml`. It uses standard EAS build functions like checkout, installing dependencies, prebuilding, injecting credentials, running Gradle, and uploading artifacts. This file is referenced by `eas.json`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Simple internal distribution Android build\n  steps:\n    - eas/checkout\n\n    - eas/install_node_modules\n\n    - eas/prebuild\n\n    - eas/inject_android_credentials\n\n    - eas/run_gradle\n\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.json\nDESCRIPTION: Example configuration of Android and iOS build properties in app.json using the expo-build-properties plugin. Sets Android SDK versions and iOS deployment target.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/build-properties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 34,\n            \"targetSdkVersion\": 34,\n            \"buildToolsVersion\": \"34.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"13.4\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExpoRadialChartView in React Native TypeScript\nDESCRIPTION: This example demonstrates how to use the ExpoRadialChartView component in a React Native application. It renders a pie chart with three slices of different colors and percentages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpoRadialChartView } from 'expo-radial-chart';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <ExpoRadialChartView\n      style={styles.container}\n      data={[\n        {\n          color: '#ff0000',\n          percentage: 0.5,\n        },\n        {\n          color: '#00ff00',\n          percentage: 0.2,\n        },\n        {\n          color: '#0000ff',\n          percentage: 0.3,\n        },\n      ]}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SecureStore in app.json via Config Plugin (JSON)\nDESCRIPTION: This snippet shows how to use the expo-secure-store config plugin within the app.json configuration file. It demonstrates adding the faceIDPermission property under expo.plugins for iOS, which customizes the usage description for biometric authentication. The plugin configuration is required at build time and cannot be set at runtime; the faceIDPermission message will be presented to users when Face ID is accessed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-secure-store\\\",\\n        {\\n          \\\"faceIDPermission\\\": \\\"Allow $(PRODUCT_NAME) to access your Face ID biometric data.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Launching Android Location Settings Intent with Expo\nDESCRIPTION: Demonstrates how to import and use the startActivityAsync function to launch the Android location settings screen using the ActivityAction enum.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/intent-launcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startActivityAsync, ActivityAction } from 'expo-intent-launcher';\n\n// Open location settings\nstartActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);\n```\n\n----------------------------------------\n\nTITLE: Static Android Status Bar Configuration in app.json\nDESCRIPTION: Configuration example for setting static Android status bar properties in app.json, showing how to set an opaque background color and disable translucency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/configuring-statusbar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"androidStatusBar\": {\n      \"backgroundColor\": \"#C2185B\",\n      \"translucent\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Metro Config for Platform Shaking\nDESCRIPTION: Configuration for enabling experimental platform shaking in metro.config.js for SDK 49 and lower.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.getTransformOptions = async () => ({\n  transform: {\n    experimentalImportSupport: true,\n  },\n});\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Rendering Router with Null Components in TypeScript\nDESCRIPTION: This example shows how to use `renderRouter` with an array of strings to create an inline mock file system with null components. It's useful for testing scenarios where you don't need to test the output of a route.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderRouter, screen } from 'expo-router/testing-library';\n\nit('my-test', async () => {\n  renderRouter(['index', 'directory/a', '(group)/b'], {\n    initialUrl: '/directory/a',\n  });\n\n  expect(screen).toHavePathname('/directory/a');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Keyboard Behavior in Expo app.json\nDESCRIPTION: This JSON configuration sets the softwareKeyboardLayoutMode to 'pan' for Android devices, which helps prevent the bottom tabs from being pushed above the keyboard when an input field is focused.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"expo\" {\n  \"android\": {\n    \"softwareKeyboardLayoutMode\": \"pan\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting and Analyzing Expo App with Atlas\nDESCRIPTION: Commands to export an Expo app for all platforms with Atlas enabled, and then open the generated Atlas file for analysis.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Export your app for all platforms\n$ EXPO_UNSTABLE_ATLAS=true npx expo export\n\n# Open the generated Atlas file\n$ npx expo-atlas .expo/atlas.jsonl\n```\n\n----------------------------------------\n\nTITLE: Rendering a Level 2 Heading with @expo/html-elements in TypeScript\nDESCRIPTION: This example shows usage of the H2 component from the @expo/html-elements package to provide semantic heading level 2 output for cross-platform projects. As with H1, it works with web and native, only requiring the @expo/html-elements package. The only required parameter is the heading's children.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H2 } from '@expo/html-elements';\nexport default () => <H2>Example<H2/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Platform-specific URL Handling of Non-ASCII Hostnames - JavaScript\nDESCRIPTION: This snippet illustrates how the URL API encodes non-ASCII hostnames, especially the difference between web/Node.js and Android/iOS (native) platforms. The code prints the result of converting a URL containing an emoji to a string, exposing cross-platform inconsistencies that arise due to incomplete support for non-ASCII hostnames on native devices. No external dependencies are needed beyond the presence of the URL API, and the expected input is a string with a non-ASCII hostname; the output demonstrates differing encoding behaviors for display or debugging purposes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(new URL('http://🥓').toString());\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-updates API in JavaScript\nDESCRIPTION: Shows the standard method for importing the `expo-updates` module in a JavaScript or TypeScript file. This import provides access to all the functions and constants exported by the library for managing updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Updates from 'expo-updates';\n```\n\n----------------------------------------\n\nTITLE: Basic Metro Configuration for Expo\nDESCRIPTION: Basic Metro configuration setup that extends Expo's default configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for expo-modules-core\nDESCRIPTION: Sets up the CMake project with minimum version, project name, and basic configuration options. It also defines the package name and build directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(expo-modules-core)\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(CMAKE_CXX_STANDARD 20)\nset(PACKAGE_NAME \"expo-modules-core\")\nset(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)\n\nstring(APPEND CMAKE_CXX_FLAGS \" -DREACT_NATIVE_TARGET_VERSION=${REACT_NATIVE_TARGET_VERSION}\")\n\nif (${NATIVE_DEBUG})\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -g\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -g\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the SystemUI module from the expo-system-ui package. This import allows access to the library's functionality for interacting with system UI elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Orientation in Expo App Config\nDESCRIPTION: Configuration example for expo-screen-orientation using the built-in config plugin in app.json. Sets up initial orientation and requires full screen mode for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"requireFullScreen\": true\n    },\n    \"plugins\": [\n      [\n        \"expo-screen-orientation\",\n        {\n          \"initialOrientation\": \"DEFAULT\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out Project Source Files with eas/checkout in YAML\nDESCRIPTION: Uses the eas/checkout function to check out project source files, followed by a step to list files in the assets directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: List files\n  steps:\n    - eas/checkout\n    - run:\n        name: List assets\n        run: ls assets\n```\n\n----------------------------------------\n\nTITLE: Using a Local Package in an Expo App\nDESCRIPTION: This JSX snippet shows how to import and use a component from a local package in an Expo app's App.js file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { greeting } from 'cool-package';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{greeting}</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Android Permissions in Expo FileSystem (JSX Component)\nDESCRIPTION: This JSX component snippet, likely used within a documentation framework, displays the Android permissions (READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE, INTERNET) that are automatically added by the Expo FileSystem library's AndroidManifest.xml. No specific dependencies are mentioned other than the component itself.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidPermissions permissions={['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE', 'INTERNET']} />\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component from expo-checkbox\nDESCRIPTION: This code snippet shows how to import the Checkbox component from the expo-checkbox package. This import statement is typically used at the top of a React Native file where the Checkbox component will be used.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Transformations in Expo\nDESCRIPTION: Custom Babel configuration for Expo projects that handles platform-specific transformations, Hermes engine detection, and environment-based optimizations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));\n  const engine = api.caller(caller => (caller ? caller.engine : null));\n  const isServer = api.caller(caller => (caller ? caller.isServer : false));\n  const isDev = api.caller(caller =>\n    caller\n      ? caller.isDev\n      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'\n  );\n  api.cache(false);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      platform === 'web' && 'my-plugin',\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for SQLite Database Files in Expo\nDESCRIPTION: This code snippet configures Metro bundler to include .db files as assets in an Expo project. It's necessary for importing existing SQLite database files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/sqlite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\n\ndefaultConfig.resolver.assetExts.push('db');\n\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Importing SymbolView from expo-symbols (JavaScript)\nDESCRIPTION: This snippet shows the basic import statement required to bring the `SymbolView` component into a JavaScript or TypeScript file for use in a React Native application. It assumes the `expo-symbols` package has been installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/symbols.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { SymbolView } from 'expo-symbols';\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Channel and Scheduling with Custom Sound - Expo SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet uses the Notifications API from the Expo SDK to set up a notification channel with a custom sound and schedule a notification that uses the sound. Dependencies include the 'expo-notifications' package and proper app.json configuration with the sound file bundled. The key parameters are the notification channel ID ('new-emails'), the sound file (base filename), notification title, trigger time, and the channel assignment for Android compatibility. Inputs include the channel name, sound, and trigger options; outputs are the creation of a channel and the scheduling of a notification.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.setNotificationChannelAsync('new-emails', {\\n  name: 'E-mail notifications',\\n  sound: 'mySoundFile.wav', // Provide ONLY the base filename\\n});\\n\\nawait Notifications.scheduleNotificationAsync({\\n  content: {\\n    title: \\\"You've got mail! 📬\\\",\\n    sound: 'mySoundFile.wav', // Provide ONLY the base filename\\n  },\\n  trigger: {\\n    seconds: 2,\\n    channelId: 'new-emails',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-av in app.json\nDESCRIPTION: JSON configuration for expo-av using config plugins to set permissions, specifically configuring microphone permission message for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic Prebuild in YAML\nDESCRIPTION: Demonstrates the basic usage of the eas/prebuild function without any custom parameters to run the expo prebuild command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run prebuild script\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    # @info #\n    - eas/prebuild\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins with expo-print on iOS\nDESCRIPTION: Demonstrates how to specify custom page margins (left, top, right, bottom in points) when printing HTML content on iOS using the `margins` option within the `Print.printToFileAsync` (or `Print.printAsync`) method from the `expo-print` library. Note that using `useMarkupFormatter: true` might require a full HTML document structure (`<!DOCTYPE html>`) to prevent extra blank pages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Platform Module in React Native\nDESCRIPTION: Import statement that includes the Platform module from react-native, used to detect the current operating system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/platform-differences.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, /* @info Import the Platform module from react-native. */ Platform /* @end */ } from 'react-native';\n```\n\n----------------------------------------\n\nTITLE: Creating URLSession for SSL Pinning in Swift\nDESCRIPTION: Shows how to initialize a URLSession in Swift configured for SSL pinning. It uses an ephemeral configuration and assigns an instance of the custom `PinningURLSessionDelegate`, providing the expected public key hex string.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet publicKeyHexEncoded = \"...\" // your HTTPS certifcate public key\n\nlet session = URLSession(\n                configuration: URLSessionConfiguration.ephemeral,\n                delegate: PinningURLSessionDelegate(publicKeyHexEncoded: publicKeyHexEncoded),\n                delegateQueue: nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro bundler and static rendering in app.json\nDESCRIPTION: Enables Metro bundler and static rendering for web output in the Expo app configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\",\n      \"output\": \"static\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Camera Permissions\nDESCRIPTION: XML configuration for adding camera and microphone usage descriptions in iOS Info.plist\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-camera/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracking Transparency Plugin in Expo (JSON)\nDESCRIPTION: This code snippet demonstrates how to configure the expo-tracking-transparency plugin within an app.json file for an Expo project. It specifies a custom userTrackingPermission message that will be displayed to iOS users when requesting tracking permissions. Ensure you include this plugin under the plugins array, and set userTrackingPermission with a string explaining the data use to avoid app rejection during review.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-tracking-transparency\\\",\\n        {\\n          \\\"userTrackingPermission\\\": \\\"This identifier will be used to deliver personalized ads to you.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Font in Component\nDESCRIPTION: Example of using the loaded custom font in a React component's Text element\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Text style={{ fontFamily: 'Inter-Black' }}>Inter Black</Text>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Screen Orientation for iOS\nDESCRIPTION: XML configuration for Info.plist to set the default UIInterfaceOrientationMask for iOS. This example sets the orientation mask to allow all orientations except upside down.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-screen-orientation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXDefaultScreenOrientationMask</key>\n<string>UIInterfaceOrientationMaskAllButUpsideDown</string>\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Base URL in Expo Router\nDESCRIPTION: Example of using the Link component from expo-router that automatically handles the baseUrl prefix. This ensures proper navigation paths when the app is hosted in a sub-directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'expo-router';\n\nexport default function Blog() {\n  return <Link href=\"/blog/123\">Go to blog post</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Custom Sounds for iOS Notifications (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use a custom notification sound on iOS. It requires adding the sound file (e.g., 'notification.wav') to the Xcode project's resources. The sound is then specified directly within the `content` object when scheduling the notification using `Notifications.scheduleNotificationAsync`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\n  content: {\n    title: \"You've got mail! 📬\",\n    body: 'Open the notification to read them all',\n    sound: 'notification.wav',\n  },\n  trigger: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for .db Asset Support in JavaScript\nDESCRIPTION: This JavaScript configuration file snippet shows how to extend Metro bundler's asset handling (in Expo/React Native) to support database files (.db) using expo/metro-config. It modifies assetExts to include 'db', allowing .db files to be recognized and copied during app builds. Dependencies: JavaScript CommonJS, Node.js, and expo/metro-config. Inputs: project directory path (__dirname), Outputs: Metro config module exporting the resolver changes. Must be used at the project root (metro.config.js) for proper asset inclusion.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\\n\\nconst defaultConfig = getDefaultConfig(__dirname);\\n\\ndefaultConfig.resolver.assetExts.push('db');\\n\\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Using SymbolView Component in React Native (JSX)\nDESCRIPTION: This React Native component demonstrates how to import and use the `SymbolView` from `expo-symbols` to display an SF Symbol ('airpods.chargingcase') within a basic application view. It sets up styles using `StyleSheet` for layout and symbol dimensions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/symbols.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// App.js\nimport { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SymbolView name=\"airpods.chargingcase\" style={styles.symbol} type=\"hierarchical\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  symbol: {\n    width: 35,\n    height: 35,\n    margin: 5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of UI Libraries and Documentation Links\nDESCRIPTION: A structured table listing various UI component libraries for React Native and Expo, including their GitHub repositories and documentation links. The table provides easy access to popular libraries like React Native Paper, Tamagui, and Fluent UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/user-interface-libraries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Library                                                                          | Documentation                                                                                                   |\n| -------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- |\n| [React Native Paper](https://github.com/callstack/react-native-paper)            | [Link](https://callstack.github.io/react-native-paper)                                                          |\n| [React Native UI Lib](https://github.com/wix/react-native-ui-lib)                | [Link](https://wix.github.io/react-native-ui-lib/)                                                              |\n| [React Native Elements](https://reactnativeelements.com/)                        | [Link](https://reactnativeelements.com/docs)                                                                    |\n| [Fluent UI](https://github.com/microsoft/fluentui-react-native)                  | [Link](https://developer.microsoft.com/en-us/fluentui#/get-started)                                             |\n| [Tamagui](https://tamagui.dev)                                                   | [Link](https://tamagui.dev/docs/intro/installation)                                                             |\n| [NativeWind](https://www.nativewind.dev/)                                        | [Link](https://www.nativewind.dev/)                                                                             |\n| [Gluestack UI](https://ui.gluestack.io/)                                         | [Link](https://ui.gluestack.io/)                                                                                |\n| [Ignite UI](https://docs.infinite.red/ignite-cli/)                               | [Link](https://docs.infinite.red/ignite-cli/boilerplate/app/components/)                                        |\n| [React Native Reusables](https://github.com/mrzachnugent/react-native-reusables) | [Link](https://github.com/mrzachnugent/react-native-reusables)                                                  |\n| [React Native UI Kitten](https://github.com/akveo/react-native-ui-kitten)        | [Link](https://akveo.github.io/react-native-ui-kitten/docs/getting-started/what-is-ui-kitten#what-is-ui-kitten) |\n```\n\n----------------------------------------\n\nTITLE: Fetching Network State Once with NetInfo in JavaScript\nDESCRIPTION: Demonstrates using `NetInfo.fetch()` to retrieve the current network connection state asynchronously. It logs the connection type and connectivity status once the promise resolves. Depends on the imported `NetInfo` module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/netinfo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nNetInfo.fetch().then(state => {\n  console.log('Connection type', state.type);\n  console.log('Is connected?', state.isConnected);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Version Source in eas.json\nDESCRIPTION: A sample eas.json configuration that sets the appVersionSource to local and enables auto-increment for production builds. With this setup, EAS reads app version values from the local project and can automatically increment version codes/build numbers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/app-versions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    /* @info The app version source is set to <CODE>local</CODE> for you to manage the version of your app manually. */\n    \"appVersionSource\": \"local\"\n    /* @end */\n  },\n  \"build\": {\n    \"development\": {\n      /* @hide ... */\n      /* @end */\n    },\n    \"preview\": {\n      /* @hide ... */\n      /* @end */\n    },\n    \"production\": {\n      /* @info The <CODE>autoIncrement</CODE> property is set to <CODE>true</CODE> to automatically increment the <CODE>android.versionCode</CODE> and <CODE>ios.buildNumber</CODE> values. */\n      \"autoIncrement\": true\n      /* @end */\n    }\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Local Images for Printing with expo-print (iOS)\nDESCRIPTION: Provides a solution for printing local images on iOS, where direct local asset URLs are not supported in HTML due to WKWebView limitations. This involves loading the image asset using `expo-asset`, converting it to a base64 string using `expo-image-manipulator`, and embedding the base64 data URI directly into the HTML source before passing it to `printAsync`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Asset Plugin in app.json\nDESCRIPTION: Example configuration for the expo-asset plugin in app.json, which allows you to specify asset files or directories to link to the native project. This configuration is applied during build time with EAS Build or expo run commands.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-asset\",\n        {\n          \"assets\": [\"path/to/file.png\", \"path/to/directory\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expanded iOS Build and Test Workflow\nDESCRIPTION: Detailed YAML configuration for building and testing an iOS app, expanding the 'eas/maestro_test' function into individual steps. It includes installing Maestro, starting an iOS simulator, installing the app, running tests, and uploading artifacts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\nname: Build and test (iOS, expanded)\nsteps:\n  - eas/build\n  # @info #\n  - eas/install_maestro\n  - eas/start_ios_simulator\n  - run:\n      command: |\n        # shopt -s nullglob is necessary not to try to install\n        # SEARCH_PATH literally if there are no matching files.\n        shopt -s nullglob\n\n        SEARCH_PATH=\"ios/build/Build/Products/*simulator/*.app\"\n        FILES_FOUND=false\n\n        for APP_PATH in $SEARCH_PATH; do\n          FILES_FOUND=true\n          echo \"Installing \\\"$APP_PATH\\\"\"\n          xcrun simctl install booted \"$APP_PATH\"\n        done\n\n        if ! $FILES_FOUND; then\n          echo \"No files found matching \\\"$SEARCH_PATH\\\". Are you sure you've built a Simulator app?\"\n          exit 1\n        fi\n  - run:\n      command: |\n        maestro test maestro/flow.yaml\n  - eas/upload_artifact:\n      name: Upload test artifact\n      if: ${ always() }\n      inputs:\n        type: build-artifact\n        path: ${ eas.env.HOME }/.maestro/tests\n# @end #\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-brightness Module\nDESCRIPTION: Shows the standard way to import the expo-brightness module in a JavaScript or TypeScript file to access its API functions and constants. All exports are imported under the 'Brightness' namespace.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as Brightness from 'expo-brightness';\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Expo Project\nDESCRIPTION: Command to export JavaScript and assets for an Expo app using Metro bundler.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export\n```\n\n----------------------------------------\n\nTITLE: Updating babel.config.js for SDK 32\nDESCRIPTION: Example of updating babel configuration for Expo SDK 32.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Home Screen with Sign-Out in Expo Router\nDESCRIPTION: This snippet creates an authenticated home screen that allows users to sign out. It uses the useSession hook to access the signOut function, which triggers a redirect to the sign-in screen via the app layout.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\n\nimport { useSession } from '../../ctx';\n\nexport default function Index() {\n  const { signOut } = useSession();\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text\n        onPress={() => {\n          // The `app/(app)/_layout.tsx` will redirect to the sign-in screen.\n          signOut();\n        }}>\n        Sign Out\n      </Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Interface in TypeScript\nDESCRIPTION: Represents a single notification triggered by a NotificationRequest at a specific point in time.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Notification {\n  date: number;\n  request: NotificationRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Blurhash on Server with Express.js\nDESCRIPTION: This snippet demonstrates how to create a server endpoint using Express.js that generates a blurhash from an uploaded image. It uses multer for handling file uploads, sharp for image processing, and the blurhash package for encoding.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst multer = require('multer');\nconst sharp = require('sharp');\nconst { encode } = require('blurhash');\n\nconst upload = multer();\n\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(data, info.width, info.height, componentX, componentY);\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins for Printing on iOS\nDESCRIPTION: This code snippet shows how to set page margins when printing to a file on iOS using the expo-print module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/print.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Entry File for Expo Integration\nDESCRIPTION: This diff snippet illustrates the changes needed to modify the app entry file to use Expo's registerRootComponent instead of React Native's AppRegistry.registerComponent. This allows targeting web while using Expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/web.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ import {registerRootComponent} from 'expo';\n\nimport App from './App';\n- import {AppRegistry} from 'react-native';\n- import {name as appName} from './app.json';\n\n- AppRegistry.registerComponent(appName, () => App);\n+ registerRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Support in Metro Config (Expo SDK 50+)\nDESCRIPTION: Configures the Metro bundler for an Expo project (SDK 50+) to disable CSS processing. This is achieved by setting the `isCSSEnabled` option to `false` within the configuration object obtained from `getDefaultConfig`. Use this if you do not intend to use CSS imports or CSS Modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js metro.config.js\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Disable CSS support.\n  isCSSEnabled: false,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for HTML Elements Transformation\nDESCRIPTION: Configuration for the @expo/html-elements/babel plugin which automatically transforms React DOM elements to @expo/html-elements components. This enables writing standard HTML in React components while maintaining cross-platform compatibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: ['@expo/html-elements/babel'],\n};\n```\n\n----------------------------------------\n\nTITLE: Safe Area Insets Object Structure in React Native\nDESCRIPTION: This snippet shows the structure of the object returned by the useSafeAreaInsets hook, containing inset values for each edge of the device screen.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n{\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable EAS Build Function in YAML\nDESCRIPTION: Demonstrates how to define a reusable function named `greetings` within the `functions` block of an EAS build configuration YAML. This function accepts an `inputs.name` (with a default value 'Hello world') and an `inputs.value`, and executes an `echo` command using these inputs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    - name: name\n      default_value: Hello world\n    inputs: [value]\n    command: echo \"${ inputs.name }, { inputs.value }\"\n```\n\n----------------------------------------\n\nTITLE: Sample Result Object from Image Picker\nDESCRIPTION: An example of the result object returned by launchImageLibraryAsync() showing the structure of data including image assets with properties like URI, dimensions, and type.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"assetId\": null,\n      \"base64\": null,\n      \"duration\": null,\n      \"exif\": null,\n      \"height\": 4800,\n      \"rotation\": null,\n      \"type\": \"image\",\n      \"uri\": \"file:///data/user/0/host.exp.exponent/cache/ExperienceData/%username%252Fsticker-smash-47-beta/ImagePicker/77c4e56f-4ccc-4c83-8634-fc376597b6fb.jpeg\",\n      \"width\": 3200\n    }\n  ],\n  \"canceled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo SQLite Legacy Module (JavaScript)\nDESCRIPTION: This line demonstrates the import of all exported members from the expo-sqlite/legacy module. It is a necessary prerequisite for accessing SQLite functionality in Expo using the legacy API. No input parameters or outputs; simply sets up the SQLite namespace.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/legacy';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-location\nDESCRIPTION: XML configuration for adding required and optional location permissions to the Android manifest file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-location/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n\n<!-- Optional permissions -->\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Fetching Albums and Displaying Assets - Expo Media Library - React Native/JSX\nDESCRIPTION: This snippet illustrates a complete React Native functional component that fetches albums and displays their assets using expo-media-library. It handles permission requests with MediaLibrary.usePermissions, retrieves albums and their assets, and renders them with ScrollView, View, Image, and Text components. Requires expo-media-library as a dependency, React state/effect hooks, and React Native components to be installed. Inputs are user-triggered button presses; outputs are lists of albums and thumbnails. Limitations include styling exclusion (styles object is included but marked to be hidden in output).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\\nimport { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';\\nimport * as MediaLibrary from 'expo-media-library';\\n\\nexport default function App() {\\n  const [albums, setAlbums] = useState(null);\\n  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\\n\\n  async function getAlbums() {\\n    if (permissionResponse.status !== 'granted') {\\n      await requestPermission();\\n    }\\n    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({\\n      includeSmartAlbums: true,\\n    });\\n    setAlbums(fetchedAlbums);\\n  }\\n\\n  return (\\n    <SafeAreaView style={styles.container}>\\n      <Button onPress={getAlbums} title=\\\"Get albums\\\" />\\n      <ScrollView>\\n        {albums && albums.map((album) => <AlbumEntry album={album} />)}\\n      </ScrollView>\\n    </SafeAreaView>\\n  );\\n}\\n\\nfunction AlbumEntry({ album }) {\\n  const [assets, setAssets] = useState([]);\\n\\n  useEffect(() => {\\n    async function getAlbumAssets() {\\n      const albumAssets = await MediaLibrary.getAssetsAsync({ album });\\n      setAssets(albumAssets.assets);\\n    }\\n    getAlbumAssets();\\n  }, [album]);\\n\\n  return (\\n    <View key={album.id} style={styles.albumContainer}>\\n      <Text>\\n        {album.title} - {album.assetCount ?? 'no'} assets\\n      </Text>\\n      <View style={styles.albumAssetsContainer}>\\n        {assets && assets.map((asset) => (\\n          <Image source={{ uri: asset.uri }} width={50} height={50} />\\n        ))}\\n      </View>\\n    </View>\\n  );\\n}\\n\\n/* @hide const styles = StyleSheet.create({ ... }); */\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    gap: 8,\\n    justifyContent: 'center',\\n    ...Platform.select({\\n      android: {\\n        paddingTop: 40,\\n      },\\n    }),\\n  },\\n  albumContainer: {\\n    paddingHorizontal: 20,\\n    marginBottom: 12,\\n    gap: 4,\\n  },\\n  albumAssetsContainer: {\\n    flexDirection: 'row',\\n    flexWrap: 'wrap',\\n  },\\n});\\n/* @end */\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Rendering in React Native\nDESCRIPTION: Using conditional operator to display different UI based on the showAppOptions state variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  // ...\n  return (\n    <View style={styles.container}>\n      {/* ...rest of the code remains same */}\n      {showAppOptions ? (\n        <View />\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing git-lfs for iOS Builds using Pre-install Hook\nDESCRIPTION: This shell script example demonstrates a practical use case of the pre-install hook by installing git-lfs on macOS workers if it's not already installed, which may be required for certain CocoaPods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/npm-hooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nif [[ \"$EAS_BUILD_PLATFORM\" == \"ios\" ]]; then\n  if brew list git-lfs > /dev/null 2>&1; then\n    echo \"=====> git-lfs is already installed.\"\n  else\n    echo \"=====> Installing git-lfs\"\n    HOMEBREW_NO_AUTO_UPDATE=1 brew install git-lfs\n    git lfs install\n  fi\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Incremental React Compiler Adoption\nDESCRIPTION: Set up Babel configuration to selectively apply React Compiler to specific files or components using the sources option.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/preview/react-compiler.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n\n  return {\n    presets: [\n      [\n        'babel-preset-expo',\n        {\n          'react-compiler': {\n            sources: filename => {\n              // Match file names to include in the React Compiler.\n              return filename.includes('src/path/to/dir');\n            },\n          },\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic HTML Entry Point for Static/Server Rendering\nDESCRIPTION: React component for configuring the root HTML structure with PWA manifest integration for static or server rendering.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport type { PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n        {/* Link the PWA manifest file. */}\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n\n        <ScrollViewStyleReset />\n\n        {/* Add any additional <head> elements that you want globally available on web... */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node Modules with eas/install_node_modules in YAML\nDESCRIPTION: Shows how to use the eas/install_node_modules function to install node modules using the appropriate package manager based on project configuration. Works with monorepos.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Install node modules\n  steps:\n    - eas/checkout\n    # @info #\n    - eas/install_node_modules\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-image-picker in app.json\nDESCRIPTION: Example of how to configure the expo-image-picker plugin in the app.json file. This configuration sets the photosPermission message for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EAS Webhook Server in Node.js\nDESCRIPTION: Example Node.js server implementation for handling EAS webhooks. It verifies the webhook signature, processes the payload, and responds accordingly.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst safeCompare = require('safe-compare');\n\nconst app = express();\napp.use(bodyParser.text({ type: '*/*' }));\napp.post('/webhook', (req, res) => {\n  const expoSignature = req.headers['expo-signature'];\n  // process.env.SECRET_WEBHOOK_KEY has to match SECRET value set with `eas webhook:create` command\n  const hmac = crypto.createHmac('sha1', process.env.SECRET_WEBHOOK_KEY);\n  hmac.update(req.body);\n  const hash = `sha1=${hmac.digest('hex')}`;\n  if (!safeCompare(expoSignature, hash)) {\n    res.status(500).send(\"Signatures didn't match!\");\n  } else {\n    // Do something here.  For example, send a notification to Slack!\n    // console.log(req.body);\n    res.send('OK!');\n  }\n});\napp.listen(8080, () => console.log('Listening on port 8080'));\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Positioning with zIndex in React Native\nDESCRIPTION: This example shows how to use position: 'absolute' with zIndex to precisely control a component's position and stacking order. The first component is positioned absolutely within its parent container and has a zIndex of 1.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/z-index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nexport default function App() {\n  return (\n  <View style={styles.root}>\n    <View style={[styles.container, { backgroundColor: '#e1e4e8' }]}>\n      <View\n        style={[\n          styles.item,\n          { backgroundColor: '#6638f0', position: 'absolute', top: 32, left: 32, zIndex: 1 },\n        ]}\n      />\n      <View style={[styles.item, { backgroundColor: '#5cc9f5' }]} />\n      <View style={[styles.item, { backgroundColor: '#4af2a1', marginTop: -16 }]} />\n    </View>\n  </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container: {\n    height: 200,\n    width: 200,\n    borderRadius: 16,\n    padding: 16,\n    borderWidth: 8,\n    borderColor: 'rgba(0,0,0,0.2)',\n  },\n  item: {\n    borderWidth: 4,\n    borderColor: 'rgba(0,0,0,0.2)',\n    height: 48,\n    width: 48,\n    borderRadius: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Expo Project Locally\nDESCRIPTION: Shows how to run an Expo project locally using Android Studio, Xcode, or the expo run command. This is useful for debugging on physical devices or emulators/simulators.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo run:android\nnpx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Generating static params for dynamic routes in React\nDESCRIPTION: Implements the generateStaticParams function to pre-render dynamic routes at build time for static output.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport async function generateStaticParams(): Promise<Record<string, string>[]> {\n  const posts = await getPosts();\n  return posts.map(post => ({ id: post.id }));\n}\n\nexport default function Page() {\n  const { id } = useLocalSearchParams();\n\n  return <Text>Post {id}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo IntentLauncher Module (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the standard way to import the entire `expo-intent-launcher` module. All exported functions and constants from the package become accessible as properties of the `IntentLauncher` object.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Basic GLView Usage in React Native\nDESCRIPTION: Demonstrates how to use GLView to render a simple shape using OpenGL ES in a React Native application. It sets up a GLView component and defines an onContextCreate function to handle the OpenGL rendering.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/gl-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { GLView } from 'expo-gl';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 1, 1, 1);\n\n  // Create vertex shader (shape & position)\n  const vert = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(\n    vert,\n    `\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n      gl_PointSize = 150.0;\n    }\n  `\n  );\n  gl.compileShader(vert);\n\n  // Create fragment shader (color)\n  const frag = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(\n    frag,\n    `\n    void main(void) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  `\n  );\n  gl.compileShader(frag);\n\n  // Link together into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.POINTS, 0, 1);\n\n  gl.flush();\n  gl.endFrameEXP();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Expo Module Project\nDESCRIPTION: Command to create a new Expo module project using create-expo-module, which provides scaffolding for Android, iOS, and TypeScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-module expo-native-configuration\n```\n\n----------------------------------------\n\nTITLE: Android Notification Payload Format in JSON\nDESCRIPTION: This JSON structure represents the payload format for Android notifications, including various customizable fields such as title, message, channel ID, and custom data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"native device token string\",\n  \"collapse_key\": \"string that identifies notification as collapsible\",\n  \"priority\": \"normal\" || \"high\",\n  \"data\": {\n    \"experienceId\": \"@yourExpoUsername/yourProjectSlug\",\n    \"scopeKey\": \"@yourExpoUsername/yourProjectSlug\",\n    \"title\": \"title of your message\",\n    \"message\": \"body of your message\",\n    \"channelId\": \"the android channel ID associated with this notification\",\n    \"categoryId\": \"the category associated with this notification\",\n    \"icon\": \"the icon to show with this notification\",\n    \"link\": \"the link this notification should open\",\n    \"sound\": \"boolean or the custom sound file you'd like to play\",\n    \"vibrate\": \"true\" | \"false\" | \"number[]\",\n    \"priority\": \"AndroidNotificationPriority\",\n    \"badge\": \"the number to set the icon badge to\",\n    \"body\": { \"object of key-value pairs\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Import/Export Transform in Babel Preset Expo\nDESCRIPTION: Example of how to disable the import/export transform in babel-preset-expo. This option is typically managed automatically based on the bundler's capabilities.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    'babel-preset-expo',\n    {\n        disableImportExportTransform: true\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Consuming Safe Area Insets using SafeAreaInsetsContext.Consumer in React Native/JSX\nDESCRIPTION: This snippet illustrates how to use the SafeAreaInsetsContext.Consumer component to access and use safe area inset values in deeply nested components without hooks. It receives an 'insets' object and applies its properties, such as top, to the style of a View. SafeAreaProvider must be used higher up in the component tree for this context to be populated.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Web-Only React DOM Component\nDESCRIPTION: This snippet shows how to create a web-only component using React DOM. It defines a functional component that returns a paragraph element, which will only render on web platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/web.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return <p>Home page</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Private NPM Packages with eas/use_npm_token in YAML\nDESCRIPTION: Demonstrates how to use the eas/use_npm_token function to configure node package managers for private packages by setting up .npmrc with the NPM_TOKEN secret.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Install private npm modules\n  steps:\n    - eas/checkout\n    # @info #\n    - eas/use_npm_token\n    # @end #\n    - run:\n        name: Install dependencies\n        run: npm install # <---- Can now install private packages\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Implementation in React Native\nDESCRIPTION: Complete example showing calendar permission requests, fetching calendars, and creating new calendars in React Native using expo-calendar. Includes UI components and platform-specific handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/calendar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text, Button, Platform } from 'react-native';\nimport * as Calendar from 'expo-calendar';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Calendar.requestCalendarPermissionsAsync();\n      if (status === 'granted') {\n        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);\n        console.log('Here are all your calendars:');\n        console.log({ calendars });\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Calendar Module Example</Text>\n      <Button title=\"Create a new calendar\" onPress={createCalendar} />\n    </View>\n  );\n}\n\nasync function getDefaultCalendarSource() {\n  const defaultCalendar = await Calendar.getDefaultCalendarAsync();\n  return defaultCalendar.source;\n}\n\nasync function createCalendar() {\n  const defaultCalendarSource =\n    Platform.OS === 'ios'\n      ? await getDefaultCalendarSource()\n      : { isLocalAccount: true, name: 'Expo Calendar' };\n  const newCalendarID = await Calendar.createCalendarAsync({\n    title: 'Expo Calendar',\n    color: 'blue',\n    entityType: Calendar.EntityTypes.EVENT,\n    sourceId: defaultCalendarSource.id,\n    source: defaultCalendarSource,\n    name: 'internalCalendarName',\n    ownerAccount: 'personal',\n    accessLevel: Calendar.CalendarAccessLevel.OWNER,\n  });\n  console.log(`Your new calendar ID is: ${newCalendarID}`);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen Image in Expo App Config (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the splash screen image in the Expo app config file (app.json). It sets the path to the splash image file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/splash-screen-and-app-icon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"splash\": {\n    \"image\": \"./assets/images/splash.png\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Permission Functions from expo-tracking-transparency (JavaScript)\nDESCRIPTION: This snippet shows how to import the two main functions, requestTrackingPermissionsAsync and getTrackingPermissionsAsync, from the expo-tracking-transparency package. No execution is performed in this snippet; it simply prepares these functions for use within a JavaScript codebase. Both functions are used to obtain or check the user's app tracking permission status on supported platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {\\n  requestTrackingPermissionsAsync,\\n  getTrackingPermissionsAsync,\\n} from 'expo-tracking-transparency';\n```\n\n----------------------------------------\n\nTITLE: Extending Metro's Babel Transformer in Expo\nDESCRIPTION: This code demonstrates how to extend Expo's Babel transformer to add custom functionality, such as processing SVG files differently.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nconst upstreamTransformer = require('@expo/metro-config/babel-transformer');\n\nmodule.exports.transform = async ({ src, filename, options }) => {\n  // Do something custom for SVG files...\n  if (filename.endsWith('.svg')) {\n    src = '...';\n  }\n  // Pass the source through the upstream Expo transformer.\n  return upstreamTransformer.transform({ src, filename, options });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring App.json for EAS Update in React Native\nDESCRIPTION: Add runtimeVersion and updates.url to the app.json file. The runtimeVersion ensures compatibility between native code and updates, while updates.url specifies the EAS update server URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/updating-your-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": \"1.0.0\",\n    \"updates\": {\n      \"url\": \"https://u.expo.dev/...\"\n      /* @hide ... */ /* @end */\n    }\n    /* @hide ... */ /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced YAML Build Configuration\nDESCRIPTION: Complete YAML configuration showing function integration with inputs, outputs, and custom build steps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: My example config\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - my_function:\n        inputs:\n          num1: 1\n          num2: 2\n        id: sum_function\n    - run:\n        name: Print the sum\n        inputs:\n          sum: ${ steps.sum_function.sum }\n        command: echo ${ inputs.sum }\n    - run:\n        name: Finished\n        command: echo Finished\n\nfunctions:\n  my_function:\n    name: My function\n    inputs:\n      - name: num1\n        type: number\n      - name: num2\n        type: number\n    outputs:\n      - name: sum\n    path: ./myFunction\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server for Push Notification Testing\nDESCRIPTION: Command to start the Expo development server before testing push notifications. Required for generating and testing ExpoPushToken.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Gitignoring Android keystore\nDESCRIPTION: A .gitignore entry to exclude the Android keystore file from version control. This prevents accidentally committing sensitive credentials to the repository.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nandroid/keystores/release.keystore\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Navigation Bar Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the `expo-navigation-bar` library into a JavaScript project. This import makes the library's API available under the `NavigationBar` namespace, allowing developers to call its methods. It requires the `expo-navigation-bar` package to be installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Building for All Platforms\nDESCRIPTION: Commands to install the EAS CLI globally and build the app for all platforms using EAS Build. This is recommended for releasing apps with custom native code to production.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/customizing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install the CLI\n$ npm i -g eas-cli\n\n# Build your app!\n$ eas build -p all\n```\n\n----------------------------------------\n\nTITLE: Accessing Higher-Order Layouts with useNavigation in Expo Router\nDESCRIPTION: Shows how to use useNavigation with a secondary argument to access higher-order layouts in nested navigation structures.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/hooks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from 'expo-router';\n\nexport default function MenuRoute() {\n  const rootLayout = useNavigation('/');\n\n  const ordersLayout = useNavigation('/orders');\n\n  // Same as the default results of `useNavigation()` when invoked in this route.\n  const parentLayout = useNavigation('/orders/menu');\n\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining View Event Callback and Module in Expo with Kotlin\nDESCRIPTION: This Kotlin snippet implements a similar Expo Module for Android, registering an `ExpoCameraView` and exposing an `onCameraReady` event using the `EventDispatcher`. The event is triggered by calling `callOnCameraReady`, which dispatches a map payload to React Native. The code relies on the Expo modules core for Kotlin. Key parameters are the event string and a map payload; the snippet is specific to Android and the Expo framework.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CameraViewModule : Module() {\n  override fun definition() = ModuleDefinition {\n    View(ExpoCameraView::class) {\n      Events(\n        \"onCameraReady\"\n      )\n\n      // ...\n    }\n  }\n}\n\nclass CameraView(\n  context: Context,\n  appContext: AppContext\n) : ExpoView(context, appContext) {\n  val onCameraReady by EventDispatcher()\n\n  fun callOnCameraReady() {\n    onCameraReady(mapOf(\n      \"message\" to \"Camera was mounted\"\n    ));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core Components from expo-video (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the standard way to import the necessary components and hooks from the `expo-video` library. `VideoView` is the UI component responsible for rendering the video, and `useVideoPlayer` is the hook used to create and manage the video player instance. This import is fundamental for using the library's features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { VideoView, useVideoPlayer } from 'expo-video';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Camera Permissions\nDESCRIPTION: XML configuration for adding required camera and optional audio recording permissions in Android manifest\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-camera/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n\n<!-- Optional permissions -->\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Inline Requires and Experimental Import Support\nDESCRIPTION: This Metro configuration enables both experimental import support and inline requires, which can be safely used together with Expo tree shaking for improved performance in production bundles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.getTransformOptions = async () => ({\n  transform: {\n    experimentalImportSupport: true,\n    inlineRequires: true,\n  },\n});\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: BlurView Known Issue Example\nDESCRIPTION: Demonstrates the correct ordering of components to avoid blur effect update issues with dynamic content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n  <FlatList />\n  <BlurView />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Updates API Test Project Locally (Bash)\nDESCRIPTION: Commands to prepare and run the Updates API test project on a local simulator or emulator. It includes installing iOS native dependencies (`npx pod-install`) if necessary, and then launching the app using `npx expo run:<ios|android>`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install # if testing iOS\nnpx expo run:<ios|android>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Deployment\nDESCRIPTION: Vercel configuration file for building and deploying Expo web applications, including build commands and URL rewriting rules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/publishing-websites.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buildCommand\": \"expo export -p web\",\n  \"outputDirectory\": \"dist\",\n  \"devCommand\": \"expo\",\n  \"cleanUrls\": true,\n  \"framework\": null,\n  \"rewrites\": [\n    {\n      \"source\": \"/:path*\",\n      \"destination\": \"/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parameters Type Definition\nDESCRIPTION: Example of typing query parameters using useLocalSearchParams hook\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function Page() {\n  const { query } = useLocalSearchParams<{ query?: string }>();\n\n  return <Text>Search: {query ?? 'unset'}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Google Provider for AuthSession - React (JSX)\nDESCRIPTION: Demonstrates importing the Google authentication provider, which provides a set of features for Google OAuth with Expo AuthSession. Facilitates using the opinionated useAuthRequest hook, discovery endpoints, and managing client configuration for cross-platform support. This provider is deprecated in favor of dedicated guides and may be removed in the future.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/auth-session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Google from 'expo-auth-session/providers/google';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-camera plugin in app.json\nDESCRIPTION: Example of how to configure the expo-camera plugin in the app.json file. This sets up camera permissions for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Push Notifications Request Format\nDESCRIPTION: JSON format for sending multiple push notifications in a single request, supporting up to 100 messages per batch.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"to\": \"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\",\n    \"sound\": \"default\",\n    \"body\": \"Hello world!\"\n  },\n  {\n    \"to\": \"ExponentPushToken[yyyyyyyyyyyyyyyyyyyyyy]\",\n    \"badge\": 1,\n    \"body\": \"You've got mail\"\n  },\n  {\n    \"to\": [\n      \"ExponentPushToken[zzzzzzzzzzzzzzzzzzzzzz]\",\n      \"ExponentPushToken[aaaaaaaaaaaaaaaaaaaaaa]\"\n    ],\n    \"body\": \"Breaking news!\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Device Language in Expo\nDESCRIPTION: Shows how to retrieve the user's device language using expo-localization package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLocales } from 'expo-localization';\n\nconst deviceLanguage = getLocales()[0].languageCode;\n```\n\n----------------------------------------\n\nTITLE: Importing Linking Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Linking module from expo-linking. It allows developers to use the Linking API in their Expo projects for handling deep links and app interactions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Registering ReactActivity Listener in Kotlin for Expo Custom Module\nDESCRIPTION: This Kotlin code creates a CustomPackage class that extends BasePackage and implements a ReactActivityLifecycleListener. It's used to register a custom listener for the ReactActivity lifecycle in an Expo module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.custom\n\nimport android.content.Context\nimport expo.modules.core.BasePackage\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass CustomPackage : BasePackage() {\n  override fun createReactActivityLifecycleListeners(activityContext: Context): List<ReactActivityLifecycleListener> {\n    return listOf(CustomReactActivityLifecycleListener(activityContext))\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers for Expo Push API\nDESCRIPTION: Required HTTP headers for making requests to Expo's Push API endpoint.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhost: exp.host\naccept: application/json\naccept-encoding: gzip, deflate\ncontent-type: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-build-properties Plugin in app.json\nDESCRIPTION: Example configuration for the expo-build-properties plugin in the app.json file. It demonstrates how to set custom build properties for Android (compileSdkVersion, targetSdkVersion, buildToolsVersion) and iOS (deploymentTarget).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-build-properties/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 31,\n            \"targetSdkVersion\": 31,\n            \"buildToolsVersion\": \"31.0.0\"\n          },\n          \"ios\": {\n            \"deploymentTarget\": \"13.0\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Navigation Theme Provider in Expo Router\nDESCRIPTION: Shows how to implement custom theming in an Expo Router application using React Navigation's ThemeProvider. Demonstrates setting up dark theme and theme provider integration in the root layout.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, DarkTheme, DefaultTheme, useTheme } from '@react-navigation/native';\nimport { Slot } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <ThemeProvider value={DarkTheme}>\n      <Slot />\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Video Component from Expo AV in JavaScript\nDESCRIPTION: This code snippet shows the standard ES6 import statement required to use the `Video` component within a JavaScript or TypeScript file when working with the `expo-av` library. This makes the `Video` component available for use in the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Module Aliasing\nDESCRIPTION: Demonstrates how to implement platform-specific module aliasing in Metro configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (platform === 'web') {\n    // The alias will only be used when bundling for the web.\n    return context.resolveRequest(context, ALIASES[moduleName] ?? moduleName, platform);\n  }\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Production Build for Bluesky Social with EAS CLI\nDESCRIPTION: This command creates a production build of the Bluesky Social project using the 'production' profile. The resulting build is optimized for performance and size, ready for submission to app stores.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/deploy/build-project.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --profile production\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Route Tabs\nDESCRIPTION: Shows how to set up dynamic routing in tabs with specific href configurations for user profiles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen\n        name=\"[user]\"\n        options={{\n          href: '/evanbacon',\n          href: {\n            pathname: '/[user]',\n            params: {\n              user: 'evanbacon',\n            },\n          },\n        }}\n      />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font with Text Component\nDESCRIPTION: Example of applying custom font to a Text component using fontFamily style prop\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Text style={{ fontFamily: 'Inter-Black' }}>Inter Black.</Text>\n```\n\n----------------------------------------\n\nTITLE: Dynamic App Configuration in JavaScript\nDESCRIPTION: This JavaScript code exports a function that returns an app configuration object. It uses the APP_ENV environment variable to dynamically set the app name and iOS bundle identifier based on the build profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/automate-submissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default () => {\n  return {\n    name: process.env.APP_ENV === 'production' ? 'My App' : 'My App (DEV)',\n    ios: {\n      bundleIdentifier: process.env.APP_ENV === 'production' ? 'com.my.app' : 'com.my.app-dev',\n    },\n    // ... other config here\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring DeviceMotion in app.json for Expo projects\nDESCRIPTION: This snippet shows how to configure the DeviceMotion API using the expo-sensors config plugin in the app.json file. It sets the iOS motion permission message.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Audio.Sound playback object\nDESCRIPTION: Example of creating and initializing an Audio.Sound playback object with the option to autoplay. Also demonstrates setting audio mode to play in silent mode on iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Audio.setAudioModeAsync({ playsInSilentModeIOS: true });\n\nconst playbackObject = new Audio.Sound();\n// OR\nconst { sound: playbackObject } = await Audio.Sound.createAsync(\n  { uri: 'http://foo/bar.mp3' },\n  { shouldPlay: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Asset from expo-asset in JavaScript\nDESCRIPTION: Basic import statement for the Asset class from the expo-asset package, which is required to utilize the asset management functionality in Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: Opening Android Play Store for Reviews (TypeScript)\nDESCRIPTION: This snippet demonstrates how to open the Android Play Store to the reviews section for a specific app using Linking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: Adding NSFaceIDUsageDescription Permission in Info.plist (XML)\nDESCRIPTION: This snippet instructs adding the NSCameraUsageDescription key to an iOS app's Info.plist to provide a custom description when accessing the camera. For expo-secure-store, a similar approach is used to add NSFaceIDUsageDescription, providing the system dialog message for biometric access. This configuration is crucial for iOS users and required to support Face ID authentication in standalone apps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\\n\n```\n\n----------------------------------------\n\nTITLE: Consuming SafeAreaInsetsContext Directly in React Native\nDESCRIPTION: Provides an example of using the `SafeAreaInsetsContext.Consumer` component to access safe area inset data. This is an alternative to the `useSafeAreaInsets` hook, particularly useful in class components or scenarios where hooks are not applicable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nfunction Component() {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {insets => <View style={{ paddingTop: insets.top }} />}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components for App Transfer Options in JSX\nDESCRIPTION: This code snippet renders three BoxLink components, each representing a different app transfer option: EAS project transfers, Google project transfers, and Apple project transfers. It uses custom icons and provides links to relevant documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/app-transfers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"EAS project transfers\"\n  description=\"Transfer an EAS project to a different Expo account.\"\n  href=\"/accounts/account-types/#transfer-projects-between-accounts\"\n  Icon={PlanEnterpriseIcon}\n/>\n\n<BoxLink\n  title=\"Google project transfers\"\n  description=\"Transfer an Android app to a different Google Play developer account.\"\n  href=\"https://support.google.com/googleplay/android-developer/answer/6230247\"\n  Icon={GoogleAppStoreIcon}\n/>\n\n<BoxLink\n  title=\"Apple project transfers\"\n  description=\"Transfer an iOS app to a different Apple Developer account.\"\n  href=\"https://developer.apple.com/help/app-store-connect/transfer-an-app/overview-of-app-transfer\"\n  Icon={AppleAppStoreIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exempting Encryption Prompt in app.json (JSON)\nDESCRIPTION: This example demonstrates how to set the ios.config.usesNonExemptEncryption property to false in app.json to automate encryption compliance handling with Apple App Store Connect. It avoids presenting the export compliance prompt by informing Expo that the app does not use non-exempt encryption, suitable for projects using expo-secure-store. The configuration must be declared before building the standalone iOS app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"ios\\\": {\\n      \\\"config\\\": {\\n        \\\"usesNonExemptEncryption\\\": false\\n      }\\n      /* @hide ... */ /* @end */\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Web Bundler in Expo\nDESCRIPTION: Basic configuration in app.json to use Metro as the web bundler for Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Plugin in Expo app.json\nDESCRIPTION: This JSON snippet demonstrates how to add and configure the `@stripe/stripe-react-native` config plugin within the `plugins` array of an Expo project's `app.json` or `app.config.js`. It shows the optional parameters `merchantIdentifier` for iOS Apple Pay setup and `enableGooglePay` for enabling Google Pay on Android. This configuration is particularly useful when using EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    /* @hide ... */ /* @end */\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Development Build for Physical Device\nDESCRIPTION: EAS CLI command to build a development build for iOS physical devices using the development profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --profile development --platform ios\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for SDK 30\nDESCRIPTION: Example of updating dependencies in package.json for Expo SDK 30.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-30.0.0.tar.gz\",\n  \"expo\": \"^30.0.0\",\n  \"react\": \"16.3.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: EAS Submit Webhook Payload Structure\nDESCRIPTION: Example JSON structure of the payload sent by EAS for submission notifications. Includes details about the submission, project, and status information.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"0374430d-7776-44ad-be7d-8513629adc54\",\n  \"accountName\": \"dsokal\",\n  \"projectName\": \"example\",\n  \"submissionDetailsPageUrl\": \"https://expo.dev/accounts/dsokal/projects/example/builds/0374430d-7776-44ad-be7d-8513629adc54\",\n  \"parentSubmissionId\": \"75ac0be7-0d90-46d5-80ec-9423fa0aaa6b\",\n  \"appId\": \"23c0e405-d282-4399-b280-5689c3e1ea85\",\n  \"archiveUrl\": \"http://archive.url/abc.apk\",\n  \"initiatingUserId\": \"7bee4c21-3eaa-4011-a0fd-3678b6537f47\",\n  \"cancelingUserId\": null,\n  \"turtleBuildId\": \"8c84111e-6d39-449c-9895-071d85fd3e61\",\n  \"platform\": \"android\",\n  \"status\": \"errored\",\n  \"submissionInfo\": {\n    \"error\": {\n      \"message\": \"Android version code needs to be updated\",\n      \"errorCode\": \"SUBMISSION_SERVICE_ANDROID_OLD_VERSION_CODE_ERROR\"\n    },\n    \"logsUrl\": \"https://submission-service-logs.s3-us-west-1.amazonaws.com/production/submission_728aa20b-f7a9-4da7-9b64-39911d427b19.txt\"\n  },\n  \"createdAt\": \"2021-11-24T10:15:32.822Z\",\n  \"updatedAt\": \"2021-11-24T10:17:32.822Z\",\n  \"completedAt\": \"2021-11-24T10:17:32.822Z\",\n  \"maxRetryTimeMinutes\": 3600\n}\n```\n\n----------------------------------------\n\nTITLE: EAS Build Configuration for TV and Phone\nDESCRIPTION: Extended EAS configuration showing how to set up build profiles for both TV and phone targets using environment variables.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/building-for-tv.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 5.2.0\"\n  },\n  \"build\": {\n    \"base\": {\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"simulator\": true\n      },\n      \"android\": {\n        \"buildType\": \"apk\",\n        \"withoutCredentials\": true\n      },\n      \"channel\": \"base\"\n    },\n    \"development\": {\n      \"extends\": \"base\",\n      \"android\": {\n        \"gradleCommand\": \":app:assembleDebug\"\n      },\n      \"ios\": {\n        \"buildConfiguration\": \"Debug\"\n      },\n      \"channel\": \"development\"\n    },\n    \"development_tv\": {\n      \"extends\": \"development\",\n      \"env\": {\n        \"EXPO_TV\": \"1\"\n      },\n      \"channel\": \"development\"\n    },\n    \"preview\": {\n      \"extends\": \"base\",\n      \"channel\": \"preview\"\n    },\n    \"preview_tv\": {\n      \"extends\": \"preview\",\n      \"env\": {\n        \"EXPO_TV\": \"1\"\n      },\n      \"channel\": \"preview\"\n    }\n  },\n  \"submit\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android build.gradle to Use Expo CLI for Bundling (Groovy Diff)\nDESCRIPTION: This diff highlights the changes needed in the `android/app/build.gradle` file within a bare React Native project. It configures the `react` block to use the Expo CLI (`@expo/cli`) and its `export:embed` command for creating the JavaScript bundle, ensuring Expo's Metro configuration is correctly applied during the Android build process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\nreact {\n  ...\n+     // Use Expo CLI to bundle the app, this ensures the Metro config\n+     // works correctly with Expo projects.\n+     cliFile = new File([\"node\", \"--print\", \"require.resolve('@expo/cli')\"].execute(null, rootDir).text.trim())\n+     bundleCommand = \"export:embed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IntentLauncher Module\nDESCRIPTION: Shows how to import the entire IntentLauncher module for use in an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure Authentication in Expo\nDESCRIPTION: Azure Active Directory authentication integration example for Expo applications using expo-auth-session with auto discovery support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport {\n  exchangeCodeAsync,\n  makeRedirectUri,\n  useAuthRequest,\n  useAutoDiscovery,\n} from 'expo-auth-session';\nimport { Button, Text, SafeAreaView } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\nexport default function App() {\n  const discovery = useAutoDiscovery(\n    'https://login.microsoftonline.com/<TENANT_ID>/v2.0',\n  );\n  const redirectUri = makeRedirectUri({\n    scheme: undefined,\n  });\n```\n\n----------------------------------------\n\nTITLE: Rendering Universal Text Component in React Native for Web\nDESCRIPTION: This snippet demonstrates how to use the Text component from React Native for web to render text on any platform. It imports the Text component and uses it in a functional component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/web.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from 'react-native';\n\nexport default function Page() {\n  return <Text>Home page</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Credentials in EAS Build\nDESCRIPTION: Example configuration for setting up iOS credentials and modifying Xcode project configuration. The function configures provisioning profiles for the build targets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: iOS credentials\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    # @info #\n    - eas/configure_ios_credentials\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Extending Metro Config for Expo - JavaScript\nDESCRIPTION: Shows the minimal metro.config.js for bare Expo workflow, extending the default config from expo/metro-config. Ensures Metro is properly configured for native builds. Dependency: 'expo/metro-config'. The file exports the config object for Metro to use; there are no special limitations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing Platform-Specific CSS Modules (Diff)\nDESCRIPTION: This diff snippet illustrates how to modify an import statement to correctly use platform-specific CSS Modules (e.g., `App.module.ios.css`, `App.module.android.css`). Instead of importing the file with the platform extension, you import it without any extension (`./App.module`) to allow Metro to resolve the correct platform-specific file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n```diff App.js\n// Importing `./App.module.ios.css`:\n- import styles from './App.module.css';\n+ import styles from './App.module';\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Components Outside Parent Bounds with Absolute Positioning in React Native\nDESCRIPTION: This example demonstrates how position: 'absolute' allows a component to extend outside its parent's visual bounds. The first component is positioned with negative top and left values to make it appear outside the parent container.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/z-index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nexport default function App() {\n  return (\n<View style={styles.root}>\n    <View style={[styles.container, { backgroundColor: '#e1e4e8' }]}>\n      <View\n        style={[\n          styles.item,\n          { backgroundColor: '#6638f0', position: 'absolute', top: -32, left: -32, zIndex: 1 },\n        ]}\n      />\n      <View style={[styles.item, { backgroundColor: '#5cc9f5' }]} />\n      <View style={[styles.item, { backgroundColor: '#4af2a1', marginTop: -16 }]} />\n    </View>\n  </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container: {\n    height: 200,\n    width: 200,\n    borderRadius: 16,\n    padding: 16,\n    borderWidth: 8,\n    borderColor: 'rgba(0,0,0,0.2)',\n  },\n  item: {\n    borderWidth: 4,\n    borderColor: 'rgba(0,0,0,0.2)',\n    height: 48,\n    width: 48,\n    borderRadius: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Image Assets with Base URL in Expo\nDESCRIPTION: Example showing how to import and use image assets with the Image component from expo-image when baseUrl is configured. The require syntax enables automatic path resolution.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\n\nexport default function Blog() {\n  return <Image source={require('@/assets/image.png')} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Rule with HR Component\nDESCRIPTION: Demonstrates the use of the HR component from @expo/html-elements, which renders as an hr element on web and a custom-styled View on native platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HR } from '@expo/html-elements';\n\nexport default () => <HR />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with SWC for Next.js and Expo\nDESCRIPTION: Basic Babel configuration for Expo when using Next.js with SWC transpilation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationChannelInput Interface for Android in TypeScript\nDESCRIPTION: Defines an interface for creating or updating Android notification channels. This provides the input structure for configuring channel properties, with only name and importance being required fields.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationChannelInput {\n  name: string | null;\n  importance: AndroidImportance;\n  // Optional attributes\n  bypassDnd?: boolean;\n  description?: string | null;\n  groupId?: string | null;\n  lightColor?: string;\n  lockscreenVisibility?: AndroidNotificationVisibility;\n  showBadge?: boolean;\n  sound?: string | null;\n  audioAttributes?: Partial<AudioAttributes>;\n  vibrationPattern?: number[] | null;\n  enableLights?: boolean;\n  enableVibrate?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Baseline Root Layout with Slot Mount in Expo Router (TypeScript)\nDESCRIPTION: Illustrates the correct minimal root layout setup for Expo Router by simply rendering <Slot />. No routing events or additional logic take place in this function, ensuring that navigation infrastructure is mounted without side-effects. Requires React and Expo Router. Used as the top-level layout to guarantee navigator availability.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout() {\\n  return <Slot />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Native View Events in JavaScript/TypeScript with React Native\nDESCRIPTION: This TypeScript snippet illustrates subscribing to a native view event (`onCameraReady`) in React Native by importing the native view manager using Expo Modules Core. A callback is assigned to the prop, and the native payload is accessed under `nativeEvent`. Required dependency is `expo-modules-core`. Main parameters: the event handler function receiving the native event. Inputs: none, outputs: standard React component. Limitations: assumes proper native view and event setup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requireNativeViewManager } from 'expo-modules-core';\n\nconst CameraView = requireNativeViewManager('CameraView');\n\nexport default function MainView() {\n  const onCameraReady = event => {\n    console.log(event.nativeEvent);\n  };\n\n  return <CameraView onCameraReady={onCameraReady} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installation Component Reference\nDESCRIPTION: Component that links to the official Skia installation documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/skia.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://shopify.github.io/react-native-skia/docs/getting-started/installation/\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing useFonts Hook in Root Layout\nDESCRIPTION: Complete implementation of font loading using useFonts hook in the root layout component, including splash screen handling and error management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport {useEffect} from 'react';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function RootLayout() {\n  const [loaded, error] = useFonts({\n    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n  });\n\n  useEffect(() => {\n    if (loaded || error) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded, error]);\n\n  if (!loaded && !error) {\n    return null;\n  }\n\n  return (\n    /* ... */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Interface\nDESCRIPTION: TypeScript interface for the theme module that exports the getTheme function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExpoSettingsModule from './ExpoSettingsModule';\n\nexport function getTheme(): string {\n  return ExpoSettingsModule.getTheme();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Development Build for Android Platform\nDESCRIPTION: EAS CLI command to build a development APK for Android using the development profile defined in eas.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --profile development --platform android\n```\n\n----------------------------------------\n\nTITLE: Fixing All Package Versions with Expo CLI\nDESCRIPTION: Terminal command for automatically updating all packages to their compatible versions without specifying individual packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_28\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Structuring NotificationRequest Interface\nDESCRIPTION: Defines the structure of a notification request, including its identifier, content, and trigger.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationRequest {\n  identifier: string;\n  content: NotificationContent;\n  trigger: NotificationTrigger;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Dynamically During Build\nDESCRIPTION: This command demonstrates how to set environment variables dynamically during the EAS build process using the set-env utility available in the PATH on EAS Build workers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nset-env EXAMPLE_ENV \"example value\"\n```\n\n----------------------------------------\n\nTITLE: App Config for Localization\nDESCRIPTION: JSON configuration for enabling localized strings and RTL support in Expo apps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"CFBundleAllowMixedLocalizations\": true\n      }\n    },\n    \"locales\": {\n      \"ja\": \"./languages/japanese.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock for ExpoClipboard Module in TypeScript\nDESCRIPTION: Example of creating a mock implementation for the ExpoClipboard native module. The mock provides a simple hasStringAsync function that returns false, demonstrating how to create basic mocks for native functionality in the mocks directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/mocking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function hasStringAsync(): Promise<boolean> {\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo AV Plugin in app.json\nDESCRIPTION: Configuration example for the expo-av plugin in app.json to set the microphone permission message.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native to Exclude Expo from Autolinking\nDESCRIPTION: This configuration in react-native.config.js excludes the Expo package from autolinking, allowing the use of Expo CLI without installing Expo Modules API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/using-expo-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  dependencies: {\n    expo: {\n      platforms: {\n        android: null,\n        ios: null,\n        macos: null,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Android app with Fastlane\nDESCRIPTION: Alternative command to build and run the Android app using Fastlane.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Developing Expo Go.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane android start\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Screen Implementation\nDESCRIPTION: Demonstrates a simple modal screen implementation with centered content and basic styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/modals.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Modal() {\n  return (\n    <View style={styles.container}>\n      <Text>Modal screen</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing SecureStore in JavaScript Files\nDESCRIPTION: This snippet shows how to import the SecureStore module from expo-secure-store in JavaScript files to enable access to its secure storage methods. No additional dependencies are needed beyond expo-secure-store. This is a required import statement for any usage of SecureStore functions such as setItemAsync or getItemAsync in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/securestore.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Expo Module with Function in Kotlin\nDESCRIPTION: This Kotlin snippet defines an Expo module (`MyFirstExpoModule`) that exposes a `hello` function, which greets the user with a provided name. The module follows Expo's Kotlin conventions and uses the ModuleDefinition function structure. Dependency is Expo Modules Core for Kotlin. Key parameter: string name; output: string greeting. Intended for registration as a module in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"MyFirstExpoModule\")\n\n    Function(\"hello\") { name: String ->\n      return \"Hello $name!\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Activity Lifecycle Package in Kotlin\nDESCRIPTION: Implementation of Package interface to create ReactActivityLifecycleListener in Kotlin. This code demonstrates how to set up Activity lifecycle hooks in an Expo module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.mylib\n\nimport android.content.Context\nimport expo.modules.core.interfaces.Package\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass MyLibPackage : Package {\n  override fun createReactActivityLifecycleListeners(activityContext: Context): List<ReactActivityLifecycleListener> {\n    return listOf(MyLibReactActivityLifecycleListener())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Images in React Native with Styling\nDESCRIPTION: This snippet shows how to display an image in React Native using the Image component. It imports a static image asset, creates a container for the image, and applies styles to control the image's dimensions and appearance with a border radius.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, View, Image } from 'react-native';\n\nconst PlaceholderImage = require('./assets/images/background-image.png');\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <Image source={PlaceholderImage} style={styles.image} />\n      </View>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n    paddingTop: 58,\n  },\n  image: {\n    width: 320,\n    height: 440,\n    borderRadius: 18,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BackgroundFetch API in Expo (JavaScript)\nDESCRIPTION: This snippet demonstrates the import of all methods and types from the 'expo-background-fetch' package in a JavaScript context, which is a prerequisite for utilizing any of the library’s API functions. Importing this module grants access to core background fetching capabilities for React Native or Expo projects. There are no parameters to configure in this snippet, as it is just the standard import statement at the start of a module or script.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as BackgroundFetch from 'expo-background-fetch';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Entitlements for Wi-Fi Info Access in app.json\nDESCRIPTION: Specifies the required configuration within the `app.json` file for an Expo project to enable Wi-Fi information access on iOS. Setting the `com.apple.developer.networking.wifi-info` entitlement to `true` under `ios.entitlements` is necessary to access the SSID property via `NetInfo`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"ios\": {\n  \"entitlements\": {\n    \"com.apple.developer.networking.wifi-info\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS.json for Build Profiles and Update Channels\nDESCRIPTION: Set up build profiles in eas.json, including development, preview, and production. Add channel properties to preview and production profiles for update distribution.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/updating-your-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 2.1.0\"\n  },\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"channel\": \"preview\"\n    },\n    \"production\": {\n      \"channel\": \"production\"\n    }\n  },\n  \"submit\": {\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Deep Linking Scheme to Expo App Configuration\nDESCRIPTION: Adds a deep linking scheme to the app.json configuration file for Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scheme\": \"your-app-scheme\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DailyTriggerInput Interface in TypeScript\nDESCRIPTION: Defines an interface for daily notification triggers. This allows scheduling notifications to be delivered every day at a specific hour and minute, with the repeats field required to be true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DailyTriggerInput {\n  channelId?: string;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in eas.json for Different Build Profiles\nDESCRIPTION: This configuration defines environment variables for different build profiles in eas.json. It allows setting different API URLs for production and test environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"EXPO_PUBLIC_API_URL\": \"https://api.production.com\"\n      }\n    },\n    \"test\": {\n      \"env\": {\n        \"EXPO_PUBLIC_API_URL\": \"https://api.test.com\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore to Exclude Environment Files\nDESCRIPTION: This snippet shows how to configure .gitignore to exclude all .env files from version control, preventing sensitive environment variables from being committed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# ignores all .env files\n.env*\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.config.js\nDESCRIPTION: JavaScript configuration for the expo-build-properties plugin in app.config.js. This snippet demonstrates how to set the same Android and iOS build properties using JavaScript syntax.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  expo: {\n    plugins: [\n      [\n        'expo-build-properties',\n        {\n          android: {\n            compileSdkVersion: 33,\n            targetSdkVersion: 33,\n            buildToolsVersion: '33.0.0',\n          },\n          ios: {\n            deploymentTarget: '13.0',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Provider in Expo Router Layout\nDESCRIPTION: Example showing how to set up theming in Expo Router using ThemeProvider from @react-navigation/native, which replaces the theme prop of NavigationContainer.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider, DarkTheme, DefaultTheme, useTheme } from '@react-navigation/native';\nimport { Slot } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    /* @info All layouts inside this provider will use the dark theme. */\n    <ThemeProvider value={DarkTheme}>\n      /* @end */\n      <Slot />\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BarCodeScanner Module\nDESCRIPTION: Example showing how to import the BarCodeScanner component from the expo-barcode-scanner package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n```\n\n----------------------------------------\n\nTITLE: Importing Crypto Instance\nDESCRIPTION: Direct import of the crypto instance from expo-standard-web-crypto package for local usage.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-standard-web-crypto/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport crypto from 'expo-standard-web-crypto';\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project with EAS\nDESCRIPTION: Command to initialize and link a project to EAS. This creates a unique project ID on the EAS servers and updates the app.json configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas init\n```\n\n----------------------------------------\n\nTITLE: Adding Expo Dev Client for Enhanced Error Handling in JavaScript\nDESCRIPTION: This snippet shows how to import expo-dev-client at the top of App.js or app/_layout.tsx file to enable more helpful error messages than the default React Native ones. This only affects the application where the import is added.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/use-development-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Creating Footer Component for Cross-Platform Use\nDESCRIPTION: Illustrates the usage of the Footer component from @expo/html-elements, which renders as a footer element on web with role 'contentinfo' and a View on other platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Footer } from '@expo/html-elements';\n\nexport default () => <Footer />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Version with Custom Values\nDESCRIPTION: Example of configuring Android app version with custom version code and name values specified in the configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure Android version\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    # @info #\n    - eas/configure_android_version:\n        inputs:\n          version_code: '123'\n          version_name: '1.0.0'\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Resolving Expo Modules for Apple Platform\nDESCRIPTION: This snippet shows the output of the 'resolve' command for the Apple platform in the Expo Autolinking CLI. It returns a JSON object with detailed information about resolved modules, including package names, versions, and platform-specific details.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modules\": [\n    {\n      \"packageName\": \"expo-random\",\n      \"packageVersion\": \"13.0.0\",\n      \"pods\": [\n        {\n          \"podName\": \"ExpoRandom\",\n          \"podspecDir\": \"/absolute/path/to/node_modules/expo-random/ios\"\n        }\n      ],\n      \"swiftModuleNames\": [\"ExpoRandom\"],\n      \"modules\": [\"RandomModule\"],\n      \"appDelegateSubscribers\": [],\n      \"reactDelegateHandlers\": [],\n      \"debugOnly\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module from Expo\nDESCRIPTION: Shows how to import the SMS module from the expo-sms package to enable SMS functionality in an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Initiating Authentication Prompt in Expo\nDESCRIPTION: Call promptAsync to initiate the authentication process. On web, this must be invoked in response to user interaction.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npromptAsync()\n```\n\n----------------------------------------\n\nTITLE: Configuring Activity Theme Reference in AndroidManifest.xml\nDESCRIPTION: This AndroidManifest.xml snippet shows how to point your main activity to a custom theme (AppTheme) containing the splash screen setup. The android:theme property must reference the style with splashscreen background; keep this within the activity tag of your startup activity. This is a required step to ensure the splash screen displays on app launch.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"\\n    package=\\\"com.example.myapp\\\">\\n\\n  ...\\n\\n  <application ...>\\n\\n+   <!-- Ensure that 'android:theme' property is pointing to the style containing native splash screen reference - see 'styles.xml' -->\\n    <activity\\n      android:name=\\\".MainActivity\\\"\\n+     android:theme=\\\"@style/AppTheme\\\"\\n      ...\\n    >\\n      ...\\n    </activity>\\n  </application>\\n\\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Opening Existing SQLite Database in Expo\nDESCRIPTION: TypeScript function to open an existing SQLite database file by copying it from assets to the app's document directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite-legacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from 'expo-file-system';\nimport * as SQLite from 'expo-sqlite/legacy';\nimport { Asset } from 'expo-asset';\n\nasync function openDatabase(pathToDatabaseFile: string): Promise<SQLite.SQLiteDatabase> {\n  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {\n    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');\n  }\n  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();\n  await FileSystem.copyAsync({\n    from: asset.localUri,\n    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',\n  });\n  return SQLite.openDatabase('myDatabaseName.db');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Dynamic Expo Configuration\nDESCRIPTION: This app.config.js file demonstrates how to reference environment variables in a dynamic Expo configuration, providing fallbacks for local development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // use the variable if it's defined, otherwise use the fallback\n  icon: process.env.APP_ICON || './assets/icon.png',\n  name: process.env.APP_NAME || 'My App',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Over-the-Air Updates for Bluesky Social with EAS CLI\nDESCRIPTION: This command configures over-the-air updates for the Bluesky Social project, allowing for critical bug fixes and improvements to be sent to users.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/deploy/build-project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:configure\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Component Examples\nDESCRIPTION: Demonstration of recommended universal primitive components in React Native for building native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nView, Image, Text\n```\n\n----------------------------------------\n\nTITLE: Gitignoring iOS certificates\nDESCRIPTION: A .gitignore entry to exclude all iOS certificates from version control. This prevents accidentally committing sensitive credentials to the repository.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nios/certs/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Authentication in app.json\nDESCRIPTION: Enables the Sign In with Apple capability in an Expo project by setting the usesAppleSignIn property to true in the app configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"usesAppleSignIn\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Output Between Steps in EAS Build\nDESCRIPTION: Shows how to generate output in one step and use it as input in a subsequent step using step IDs and references.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Outputs demo\n  steps:\n    - run:\n        name: Produce output\n        id: id123 # <---- !!!\n        outputs: [foo]\n        command: |\n          echo \"Producing output for another step\"\n          set-output foo bar\n    - run:\n        name: Use output from another step\n        inputs:\n          foo: ${ steps.id123.foo }\n        command: |\n          echo \"foo = \\\"${ inputs.foo }\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Testing Android Emulator App with Maestro\nDESCRIPTION: YAML configuration for testing an Android emulator app using Maestro. It demonstrates how to use the 'eas/maestro_test' function with a specific app path and multiple test flows.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test Android emulator app\n  steps:\n    - eas/checkout\n    # @info #\n    - eas/maestro_test:\n        app_path: ./fixtures/my_app.apk\n        inputs:\n          flow_path: |\n            maestro/sign_in.yaml\n            maestro/create_post.yaml\n            maestro/sign_out.yaml\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Importing the Application Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-application module to access native application information like ID, app name, and build version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Modifying Xcode Build Phase for Custom Expo Entry Point\nDESCRIPTION: This snippet shows the modifications needed in the Xcode 'Bundle React Native code and images' build phase to support custom entry points in an Expo project. It sets up environment variables for the entry file, CLI path, and bundle command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n+\t\t\tshellScript = \"if [[ -f \\\"$PODS_ROOT/../.xcode.env\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.local\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.local\\\"\\nfi\\n\\n# The project root by default is one level up from the ios directory\\nexport PROJECT_ROOT=\\\"$PROJECT_DIR\\\"/..\\n\\nif [[ \\\"$CONFIGURATION\\\" = *Debug* ]]; then\\n  export SKIP_BUNDLING=1\\nfi\\nif [[ -z \\\"$ENTRY_FILE\\\" ]]; then\\n  # Set the entry JS file using the bundler's entry resolution.\\n  export ENTRY_FILE=\\\"$(\\\"$NODE_BINARY\\\" -e \\\"require('expo/scripts/resolveAppEntry')\\\" \\\"$PROJECT_ROOT\\\" ios absolute | tail -n 1)\\\"\\nfi\\n\\nif [[ -z \\\"$CLI_PATH\\\" ]]; then\\n  # Use Expo CLI\\n  export CLI_PATH=\\\"$(\\\"$NODE_BINARY\\\" --print \\\"require.resolve('@expo/cli')\\\")\\\"\\nfi\\nif [[ -z \\\"$BUNDLE_COMMAND\\\" ]]; then\\n  # Default Expo CLI command for bundling\\n  export BUNDLE_COMMAND=\\\"export:embed\\\"\\nfi\\n\\n`\\\"$NODE_BINARY\\\" --print \\\"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\\\"`\\n\\n\";\n```\n\n----------------------------------------\n\nTITLE: Dynamic RTL Override Implementation in React Native\nDESCRIPTION: React Native component demonstrating dynamic RTL layout control with reload functionality. Uses expo-updates and expo-constants for runtime RTL management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View, StyleSheet, I18nManager, Platform } from 'react-native';\nimport Constants from 'expo-constants';\nimport * as Updates from 'expo-updates';\n\nexport default function App() {\n  const shouldBeRTL = true;\n\n  if (shouldBeRTL !== I18nManager.isRTL && Platform.OS !== 'web') {\n    I18nManager.allowRTL(shouldBeRTL);\n    I18nManager.forceRTL(shouldBeRTL);\n    Updates.reloadAsync();\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{I18nManager.isRTL ? ' RTL' : ' LTR'}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    padding: 8,\n  },\n  paragraph: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'left',\n    width: '50%',\n    backgroundColor: 'pink',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic SVG Import Example\nDESCRIPTION: Shows how to import the SVG components from react-native-svg library\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo Package in React Native\nDESCRIPTION: Shows how to import the NetInfo package into a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in Expo app.json\nDESCRIPTION: This snippet shows how to specify a custom URL scheme for an Expo app in the app.json configuration file. It sets the scheme to 'myapp', allowing the app to be opened with links starting with 'myapp://'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"myapp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the SMS module from the expo-sms library. This import statement is necessary to use the SMS functionality provided by the library in your Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Advanced TypeScript Function Implementation\nDESCRIPTION: Enhanced version of the EAS Build function with input/output handling for number addition functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BuildStepContext,\n  BuildStepInput,\n  BuildStepInputValueTypeName,\n  BuildStepOutput,\n} from '@expo/steps';\n\ninterface FunctionInputs {\n  num1: BuildStepInput<BuildStepInputValueTypeName.NUMBER, true>;\n  num2: BuildStepInput<BuildStepInputValueTypeName.NUMBER, true>;\n}\n\ninterface FunctionOutputs {\n  sum: BuildStepOutput<true>;\n}\n\nasync function myFunction(\n  ctx: BuildStepContext,\n  {\n    inputs,\n    outputs,\n  }: {\n    inputs: FunctionInputs;\n    outputs: FunctionOutputs;\n  }\n): Promise<void> {\n  ctx.logger.info(`num1: ${inputs.num1.value}`);\n  ctx.logger.info(`num2: ${inputs.num2.value}`);\n\n  const sum = inputs.num1.value + inputs.num2.value;\n\n  ctx.logger.info(`sum: ${sum}`);\n\n  outputs.sum.set(sum.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Gymfile for iOS Builds in Fastlane\nDESCRIPTION: This is the default Gymfile configuration used by EAS Build when no custom Gymfile exists in the ios directory. It configures Fastlane's gym command with settings for code signing, output suppression, and build artifact generation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/ios-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rb\nCODE:\n```\nsuppress_xcode_output(true)\nclean(true)\n\nscheme(\"app\")\n\nexport_options({\n  method: \"app-store\",\n  provisioningProfiles: {\n    \"com.expo.eas.builds.test.application\" => \"dd83ed9c-4f89-462e-b901-60ae7fe6d737\"\n  }\n})\n\nexport_xcargs \"OTHER_CODE_SIGN_FLAGS=\\\"--keychain /tmp/path/to/keychain\\\"\"\n\ndisable_xcpretty(true)\n\noutput_directory(\"./build\")\noutput_name(\"App\")\n```\n\n----------------------------------------\n\nTITLE: TypeScript Event Subscription Setup\nDESCRIPTION: Example of setting up event subscription handling in TypeScript for native module events.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requireNativeModule, EventEmitter, Subscription } from 'expo-modules-core';\n\nconst ClipboardModule = requireNativeModule('Clipboard');\nconst emitter = new EventEmitter(ClipboardModule);\n\nexport function addClipboardListener(listener: (event) => void): Subscription {\n  return emitter.addListener('onClipboardChanged', listener);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Expo App Documentation in JSX\nDESCRIPTION: This code snippet shows the import statements for various custom components used in the Expo app development documentation. It includes imports from the Expo styleguide, custom UI components, and a Diagram component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocsLogo } from '@expo/styleguide';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { Collapsible } from '~/ui/components/Collapsible';\nimport { Diagram } from '~/ui/components/Diagram';\nimport { Terminal } from '~/ui/components/Snippet';\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variable for App Variants\nDESCRIPTION: Modified app.config.js that uses an environment variable to switch between development and production app identifiers and names.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst IS_DEV = process.env.APP_VARIANT === 'development';\n\nexport default {\n  /* @info You can also switch out the app icon and other properties to further differentiate the app on your device. */\n  name: IS_DEV ? 'MyApp (Dev)' : 'MyApp',\n  /* @end */\n  slug: 'my-app',\n  ios: {\n    bundleIdentifier: IS_DEV ? 'com.myapp.dev' : 'com.myapp',\n  },\n  android: {\n    package: IS_DEV ? 'com.myapp.dev' : 'com.myapp',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating NotificationTrigger Union Type\nDESCRIPTION: Defines a union type for various notification triggers that can cause a notification to be delivered.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NotificationTrigger =\n  | PushNotificationTrigger\n  | CalendarNotificationTrigger\n  | LocationNotificationTrigger\n  | TimeIntervalNotificationTrigger\n  | DailyNotificationTrigger\n  | WeeklyNotificationTrigger\n  | YearlyNotificationTrigger\n  | UnknownNotificationTrigger;\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView Props in DOM Component\nDESCRIPTION: Implementation of WebView props configuration in a DOM component\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nexport default function DOMComponent({}: { dom: import('expo/dom').DOMProps }) {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n    </div>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from './my-component';\n\nexport default function App() {\n  return (\n    <DOMComponent\n      dom={{\n        scrollEnabled: false,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Keep Awake Hook in React Native\nDESCRIPTION: Example showing how to use the useKeepAwake hook to prevent screen sleep in a React Native component. The screen will remain active as long as the component is mounted.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/keep-awake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function KeepAwakeExample() {\n  useKeepAwake();\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This screen will never sleep!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing EAS Branch Operations\nDESCRIPTION: Commands for deleting and renaming branches in EAS\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas branch:delete [branch-name]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas branch:rename --from [branch-name] --to [branch-name]\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Scheme for Stripe Redirects\nDESCRIPTION: Implementation of URL scheme configuration for handling Stripe browser redirects back to the app. Uses expo-linking and expo-constants to ensure proper URL scheme handling in both Expo Go and production environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/stripe.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nurlScheme:\n  Constants.appOwnership === 'expo'\n    ? Linking.createURL('/--/')\n    : Linking.createURL(''),\n```\n\n----------------------------------------\n\nTITLE: Importing Asset from expo-asset\nDESCRIPTION: Basic example showing how to import the Asset class from the expo-asset package for use in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/asset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: Migration of Navigation Hooks\nDESCRIPTION: Diff showing migration from React Navigation props to Expo Router hooks for navigation and route parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n+ import { useRouter } from 'expo-router';\n\nexport default function Page({\n-  navigation\n}) {\n-  navigation.push('User', { user: 'bacon' });\n\n+  const router = useRouter();\n+  router.push('/users/bacon');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multi-line Commands in EAS Build Steps\nDESCRIPTION: Shows how to define a multi-line shell command for running tests in a workflow step.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run tests\n  steps:\n    - eas/checkout\n    - run:\n        name: Run tests\n        # @info #\n        command: |\n          echo \"Running tests...\"\n          npm test\n        # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Firebase JS SDK in Expo\nDESCRIPTION: This snippet shows how to configure Metro bundler to support Firebase JS SDK version 9.7.x and above in an Expo project. It adds support for the .cjs file extension.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-firebase.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('@expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\ndefaultConfig.resolver.sourceExts.push('cjs');\n\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions in Android Manifest Using Static XML\nDESCRIPTION: Example of using a static AndroidManifest.xml file to add permissions in an Android app. This method leverages Android's manifest merging system for non-optional features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- @info Include <code>xmlns:android=\"...\"</code> to use <code>android:*</code> properties like <code>android:name</code> in your manifest. -->\n<manifest package=\"expo.modules.filesystem\" xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <!-- @end -->\n  <uses-permission android:name=\"android.permission.INTERNET\"/>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Rendering iOS Location Permission Keys Component\nDESCRIPTION: JSX component that displays iOS location permission usage description keys required by the location library\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<IOSPermissions\n  permissions={[\n    'NSLocationAlwaysAndWhenInUseUsageDescription',\n    'NSLocationAlwaysUsageDescription',\n    'NSLocationWhenInUseUsageDescription',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Android AndroidManifest.xml for expo-updates\nDESCRIPTION: Diff showing the addition of expo-updates configuration to the Android manifest file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- a/android/app/src/main/AndroidManifest.xml\n+++ b/android/app/src/main/AndroidManifest.xml\n@@ -9,6 +9,11 @@\n       android:roundIcon=\"@mipmap/ic_launcher_round\"\n       android:allowBackup=\"false\"\n       android:theme=\"@style/AppTheme\">\n+      <meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"true\"/>\n+      <meta-data android:name=\"expo.modules.updates.EXPO_RUNTIME_VERSION\" android:value=\"@string/expo_runtime_version\"/>\n+      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH\" android:value=\"ALWAYS\"/>\n+      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS\" android:value=\"0\"/>\n+      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"http://localhost:3000/api/manifest\"/>\n       <activity\n         android:name=\".MainActivity\"\n         android:label=\"@string/app_name\"\n```\n\n----------------------------------------\n\nTITLE: Creating Activity Lifecycle Package in Java\nDESCRIPTION: Implementation of Package interface to create ReactActivityLifecycleListener in Java. Shows how to set up Activity lifecycle hooks in an Expo module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage expo.modules.mylib;\n\nimport android.content.Context;\nimport expo.modules.core.interfaces.Package;\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MyLibPackage implements Package {\n  @Override\n  public List<? extends ReactActivityLifecycleListener> createReactActivityLifecycleListeners(Context activityContext) {\n    return Collections.singletonList(new MyLibReactActivityLifecycleListener());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Splash Screen Background Color - Android XML\nDESCRIPTION: This snippet demonstrates how to declare a custom color for the splash screen background in the Android res/values/colors.xml file. The color value must be in #AARRGGBB or #RRGGBB format and referenced by name elsewhere in splash configuration. Other color resources for your app remain intact; only the new line for 'splashscreen_background' is added or edited.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\\n+ <color name=\\\"splashscreen_background\\\">#AABBCC</color> <!-- #AARRGGBB or #RRGGBB format -->\\n  <!-- Other colors defined for your application -->\\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Defining Extensions Data Type in TypeScript\nDESCRIPTION: TypeScript interface for the Extensions data structure in Expo Updates. It defines how additional headers can be specified for asset requests through the assetRequestHeaders dictionary.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Extensions = {\n  assetRequestHeaders: ExpoAssetHeaderDictionary;\n  ...\n}\n\ntype ExpoAssetHeaderDictionary = {\n  [assetKey: string]: {\n    [headerName: string]: string,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Apple Team ID from Credentials in YAML\nDESCRIPTION: Uses the eas/resolve_apple_team_id_from_credentials function to extract the Apple team ID from build credentials and make it available for subsequent steps like prebuild.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run prebuild script\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    # @info #\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    # @end #\n    - eas/prebuild:\n        inputs:\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Shell)\nDESCRIPTION: The `expo install` command installs project dependencies, ensuring compatible versions are used within the Expo ecosystem. It supports different package managers via flags, such as `--pnpm` to use pnpm.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nexpo install\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Example using pnpm\nexpo install --pnpm\n```\n\n----------------------------------------\n\nTITLE: Defining View Event Callback and Module in Expo with Swift\nDESCRIPTION: This Swift snippet defines an Expo Module (`CameraViewModule`) that registers a view (`CameraView`) capable of emitting an `onCameraReady` event using the `EventDispatcher`. The view's method `callOnCameraReady` triggers this event, sending a message payload to the React Native side. Dependencies include the Expo modules core for Swift. Key parameters: event name string and a dictionary payload. The pattern is intended for iOS in Expo modules, and limitations include platform specificity and type-checked payload structures.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nclass CameraViewModule: Module {\n  public func definition() -> ModuleDefinition {\n    View(CameraView.self) {\n      Events(\n        \"onCameraReady\"\n      )\n\n      // ...\n    }\n  }\n}\n\nclass CameraView: ExpoView {\n  let onCameraReady = EventDispatcher()\n\n  func callOnCameraReady() {\n    onCameraReady([\n      \"message\": \"Camera was mounted\"\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Expo Router (SDK 50+)\nDESCRIPTION: Sets up the babel.config.js file for Expo Router in projects using SDK 50 and above.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Font Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Font module from expo-font in a JavaScript file. This import is necessary to use the Font API in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Font from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK Packages in JavaScript\nDESCRIPTION: Example showing how to import Expo SDK packages into a JavaScript file after installation, including different import patterns for various packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { CameraView } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Android Permission Declaration in React Native\nDESCRIPTION: A React component that declares required Android permissions for the FileSystem module, including READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE, and INTERNET.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/filesystem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidPermissions permissions={['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE', 'INTERNET']} />\n```\n\n----------------------------------------\n\nTITLE: Importing Expo LocalAuthentication Module (JavaScript)\nDESCRIPTION: This JavaScript code shows how to import the `LocalAuthentication` module from the `expo-local-authentication` package. This import is necessary to access the library's API functions for implementing biometric authentication features like fingerprint or face scans.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/local-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as LocalAuthentication from 'expo-local-authentication';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Entitlements for Wi-Fi Info Access in JSON\nDESCRIPTION: Shows the necessary configuration within the `app.json` file to enable access to Wi-Fi information (like SSID) on iOS. This involves adding the `com.apple.developer.networking.wifi-info` entitlement under the `ios.entitlements` key. This configuration is a prerequisite for accessing `state.details.ssid` via NetInfo on iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"ios\": {\n    \"entitlements\": {\n      \"com.apple.developer.networking.wifi-info\": true\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Generating APNs Authorization Token in JavaScript\nDESCRIPTION: This code snippet demonstrates how to generate a JSON Web Token (JWT) for APNs authorization using the required iOS developer credentials.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require(\"jsonwebtoken\");\nconst authorizationToken = jwt.sign(\n  {\n    iss: \"YOUR-APPLE-TEAM-ID\"\n    iat: Math.round(new Date().getTime() / 1000),\n  },\n  fs.readFileSync(\"./path/to/appName_apns_key.p8\", \"utf8\"),\n  {\n    header: {\n      alg: \"ES256\",\n      kid: \"YOUR-P8-KEY-ID\",\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Function in Kotlin\nDESCRIPTION: Defines a JavaScript function that always returns a Promise and whose native code is by default dispatched on a different thread than the JavaScript runtime runs on.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nAsyncFunction(\"asyncFunction\") { message: String ->\n  return@AsyncFunction message\n}\n\n// or\n\n// Make sure to import `Promise` class from `expo.modules.kotlin` instead of `expo.modules.core`.\nAsyncFunction(\"asyncFunction\") { message: String, promise: Promise ->\n  promise.resolve(message)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Screen Route in Expo Router\nDESCRIPTION: Sets up a basic home screen route that renders a centered text component. This file corresponds to the root path ('/') of the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI Globally\nDESCRIPTION: Command to install EAS CLI globally on your local machine using npm. This tool is used to access EAS services like Build, Update, and Submit.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/tools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Client in app.json\nDESCRIPTION: Configuration example for expo-dev-client using config plugins in app.json. Shows how to set up launch mode and other client properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-dev-launcher\",\n        {\n          \"launchMode\": \"most-recent\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Biometric Authentication Availability in JavaScript\nDESCRIPTION: This new function in expo-secure-store allows checking if biometric authentication is available on the device, which can be useful for implementing secure storage features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanUseBiometricAuthentication()\n```\n\n----------------------------------------\n\nTITLE: Importing Device Module in JavaScript\nDESCRIPTION: Shows how to import the Device module from expo-device package for use in JavaScript applications. This import statement is required before accessing any of the Device module's properties or methods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-video-thumbnails Module in JavaScript\nDESCRIPTION: This snippet shows the standard method for importing the `expo-video-thumbnails` library in a JavaScript project. It imports all exported members of the library under the `VideoThumbnails` namespace, allowing access to functions like `getThumbnailAsync`. This assumes the `expo-video-thumbnails` package has been installed in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Updating AndroidManifest.xml for MainApplication\nDESCRIPTION: Registers the MainApplication class in the AndroidManifest.xml file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    android:allowBackup=\"true\"\n    android:name=\".MainApplication\"\n    android:fullBackupContent=\"@xml/backup_rules\"\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Production Build with EAS\nDESCRIPTION: Command to create an iOS production build using the default production profile in EAS Build system\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/ios-production-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios\n```\n\n----------------------------------------\n\nTITLE: Importing expo-apple-authentication Module (JavaScript)\nDESCRIPTION: This snippet demonstrates the import statement required to use the expo-apple-authentication library in a JavaScript or React Native project. It allows access to all exported methods and components of the AppleAuthentication module, which are essential for implementing Sign In with Apple flows in the app. The only prerequisite is that expo-apple-authentication is properly installed as a dependency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with jest-expo in package.json\nDESCRIPTION: This JSON snippet shows the necessary configuration within the `package.json` file to integrate `jest-expo`. It defines a `test` script under `scripts` to run Jest and sets the `preset` under the `jest` key to `\"jest-expo\"`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/jest-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  ...\n  \"test\": \"jest\"\n},\n\"jest\": {\n  \"preset\": \"jest-expo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a URI Scheme Programmatically - Node.js\nDESCRIPTION: This JavaScript snippet shows how to programmatically open a URI scheme using the uri-scheme package's Node.js API. The example imports the Android and Ios modules and opens a URI in the iOS simulator asynchronously. Dependencies include the uri-scheme npm package. Inputs are provided as an object with a uri string property, and the method triggers the opening of the URI in a simulator.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/uri-scheme/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Android, Ios } from 'uri-scheme';\\n\\nIos.openAsync({ uri: 'http://expo.dev/' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Test Scripts in package.json for Expo Project\nDESCRIPTION: This snippet shows various Jest test scripts configured in package.json for different testing scenarios in an Expo project. It includes scripts for active development, debugging, code coverage, and updating snapshots.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"test\": \"jest --watch --coverage=false --changedSince=origin/main\",\n  \"testDebug\": \"jest -o --watch --coverage=false\",\n  \"testFinal\": \"jest\",\n  \"updateSnapshots\": \"jest -u --coverage=false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Channel-based Configuration in JavaScript\nDESCRIPTION: Implements environment-specific configuration based on EAS Update channels, setting different API URLs and feature flags for production and staging environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Updates from 'expo-updates';\n\nlet Config = {\n  apiUrl: 'https://localhost:3000',\n  enableHiddenFeatures: true,\n};\n\nif (Updates.channel === 'production') {\n  Config.apiUrl = 'https://api.production.com';\n  Config.enableHiddenFeatures = false;\n} else if (Updates.channel === 'staging') {\n  Config.apiUrl = 'https://api.staging.com';\n  Config.enableHiddenFeatures = true;\n}\n\nexport default Config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign-in Plugin in Expo app.json\nDESCRIPTION: JSON configuration to enable the expo-apple-authentication plugin for EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-apple-authentication\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Smart Banner Meta Tag in HTML\nDESCRIPTION: This snippet shows how to add an Apple Smart Banner meta tag to the HTML head of a website. It prompts mobile users to install the app if not already installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"apple-itunes-app\" content=\"app-id={ITUNES_ID}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Layout in App Component\nDESCRIPTION: Shows how to integrate the Button component into the main App component with proper layout and styling. Demonstrates usage of multiple buttons with different labels.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, View} from \"react-native\";\nimport Button from './components/Button';\nimport ImageViewer from './components/ImageViewer';\n\nconst PlaceholderImage = require(\"./assets/images/background-image.png\");\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer placeholderImageSource={PlaceholderImage} />\n      </View>\n      <View style={styles.footerContainer}>\n        <Button label=\"Choose a photo\" />\n        <Button label=\"Use this photo\" />\n      </View>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n    paddingTop: 58,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Android Gradle Properties Safely\nDESCRIPTION: This properties snippet shows how to safely modify Android settings using gradle.properties instead of directly modifying Gradle files. It sets the JavaScript engine to Hermes in a way that can be safely accessed by Gradle files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\n# @info Safely modified using the <code>withGradleProperties()</code> mod. #\nexpo.react.jsEngine=hermes\n# @end #\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Configuration in app.config.js\nDESCRIPTION: The main app configuration export that uses the helper functions to dynamically set the app name, iOS bundle identifier, and Android package name based on the current build variant.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  /* @info Using <CODE>getAppName()</CODE> for \"name\" property */\n  name: getAppName(),\n  /* @end */\n  /* @hide ... */ /* @end */\n  ios: {\n    /* @info Using <CODE>getUniqueIdentifier()</CODE> for \"bundleIdentifier\" property */\n    bundleIdentifier: getUniqueIdentifier(),\n    /* @end */\n    /* @hide ... */ /* @end */\n  },\n  android: {\n    /* @info Using <CODE>getUniqueIdentifier()</CODE> for \"package\" property */\n    package: getUniqueIdentifier(),\n    /* @end */\n    /* @hide ... */ /* @end */\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Last Notification Response Hook to Handle URL Opening\nDESCRIPTION: This code demonstrates using the useLastNotificationResponse hook to respond to notification taps by opening URLs embedded in the notification data. It checks if a notification was tapped with the default action and contains a URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\nimport { Linking } from 'react-native';\n\nexport default function App() {\n  const lastNotificationResponse = Notifications.useLastNotificationResponse();\n  React.useEffect(() => {\n    if (\n      lastNotificationResponse &&\n      lastNotificationResponse.notification.request.content.data.url &&\n      lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n    ) {\n      Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n    }\n  }, [lastNotificationResponse]);\n\n  return (\n    /*\n     * your app\n     */\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Redirects\nDESCRIPTION: Redirect configuration for single-page applications in Netlify, directing all requests to index.html.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/publishing-websites.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/*    /index.html   200\n```\n\n----------------------------------------\n\nTITLE: Creating the EmojiSticker Component in React Native\nDESCRIPTION: Defines a functional React Native component `EmojiSticker` in 'EmojiSticker.js' that displays an image (emoji). It accepts `imageSize` for dimensions and `stickerSource` for the image URI as props. The component uses `View` and `Image` from `react-native` and applies basic styling for positioning (negative top margin) and image resizing (`resizeMode='contain'`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Image } from 'react-native';\n\nexport default function EmojiSticker({ imageSize, stickerSource }) {\n  return (\n    <View style={{ top: -350 }}>\n      <Image\n        source={stickerSource}\n        resizeMode=\"contain\"\n        style={{ width: imageSize, height: imageSize }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding expo-image-picker config plugin to app.json\nDESCRIPTION: JSON snippet showing how to add the expo-image-picker config plugin to the app.json file for automatic configuration in EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-image-picker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-sensors Package\nDESCRIPTION: Command to install the expo-sensors package using npx expo CLI\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sensors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Haptics Module in JavaScript\nDESCRIPTION: This snippet demonstrates the import of the entire expo-haptics library as a module. This import is required to access all haptic feedback functions and types provided by expo-haptics in a React Native or Expo project. It should be placed at the top of any file intending to use haptic feedback via this API. No other input or output is present, and it relies on expo-haptics being installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Modifying AndroidManifest.xml for EAS Update Configuration\nDESCRIPTION: Add meta-data entries to AndroidManifest.xml for the EAS Update URL and runtime version. These are required for the app to check for and download updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/updating-your-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"https://u.expo.dev/your-project-id\"/>\n<meta-data android:name=\"expo.modules.updates.EXPO_RUNTIME_VERSION\" android:value=\"@string/expo_runtime_version\"/>\n```\n\n----------------------------------------\n\nTITLE: Tailwind with React Native Web\nDESCRIPTION: Example of using Tailwind with React Native components using the $$css syntax.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Page() {\n  return (\n    <View style={{ $$css: true, _: 'bg-slate-100 rounded-xl' }}>\n      <Text style={{ $$css: true, _: 'text-lg font-medium' }}>Welcome to Tailwind</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Go with Expo CLI\nDESCRIPTION: This snippet demonstrates how to start a development server using Expo CLI and install Expo Go on an Android Emulator. It uses the 'npx expo start' command and instructs to press 'a' to open the Android Emulator, where Expo Go will be automatically installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedExpoGo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nWhen you start a development server with `npx expo start` on the [start developing](/get-started/start-developing) page, press <kbd>a</kbd> to open the Android Emulator. Expo CLI will install Expo Go automatically.\n```\n\n----------------------------------------\n\nTITLE: Using eas/generate_gymfile_template Function in YAML\nDESCRIPTION: These snippets demonstrate how to use the 'eas/generate_gymfile_template' function in a YAML configuration file for iOS builds. It includes examples of basic usage and usage with custom template and extra inputs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Generate Gymfile template\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    # @info #\n    - eas/generate_gymfile_template:\n        inputs:\n          credentials: ${ eas.job.secrets.buildCredentials }\n    # @end #\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Generate Gymfile template\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    # @info #\n    - eas/generate_gymfile_template\n    # @end #\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Generate Gymfile template\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    # @info #\n    - eas/generate_gymfile_template:\n        inputs:\n          credentials: ${ eas.job.secrets.buildCredentials }\n          extra:\n            MY_VALUE: my value\n          template: |\n            suppress_xcode_output(true)\n            clean(<%- CLEAN %>)\n\n            scheme(\"<%- SCHEME %>\")\n            <% if (BUILD_CONFIGURATION) { %>\n            configuration(\"<%- BUILD_CONFIGURATION %>\")\n            <% } %>\n\n            export_options({\n            method: \"<%- EXPORT_METHOD %>\",\n            provisioningProfiles: {<% _.forEach(PROFILES, function(profile) { %>\n                \"<%- profile.BUNDLE_ID %>\" => \"<%- profile.UUID %>\",<% }); %>\n            }<% if (ICLOUD_CONTAINER_ENVIRONMENT) { %>,\n            iCloudContainerEnvironment: \"<%- ICLOUD_CONTAINER_ENVIRONMENT %>\"\n            <% } %>\n            })\n\n            export_xcargs \"OTHER_CODE_SIGN_FLAGS=\\\"--keychain <%- KEYCHAIN_PATH %>\\\"\"\n\n            disable_xcpretty(true)\n            buildlog_path(\"<%- LOGS_DIRECTORY %>\")\n\n            output_directory(\"<%- OUTPUT_DIRECTORY %>\")\n\n            sth_else(\"<%- MY_VALUE %>\")\n        # @end #\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationTriggerInput Type in TypeScript\nDESCRIPTION: Defines a union type for all possible notification trigger inputs. A null value represents an immediate notification, while other types represent various schedulable triggers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NotificationTriggerInput =\n  | null\n  | ChannelAwareTriggerInput\n  | SchedulableNotificationTriggerInput;\n```\n\n----------------------------------------\n\nTITLE: Importing SplashScreen Module in JavaScript\nDESCRIPTION: This snippet shows how to import the SplashScreen module from expo-splash-screen. It's used to access the SplashScreen API in your JavaScript code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\n----------------------------------------\n\nTITLE: Rendering BlurView with Dynamic Content in React Native\nDESCRIPTION: Example of correct rendering order for BlurView with dynamic content using FlatList. This ensures the blur effect updates properly.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/blur-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<View>\n  <FlatList />\n  <BlurView />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Base Modifiers in app.config.js\nDESCRIPTION: This JavaScript/TypeScript snippet demonstrates how to implement custom base modifiers in an Expo app.config.js file. It shows the proper ordering of plugins with base mods being added last to ensure they write results to disk after all other plugins have processed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Required for external files using TS\nrequire('ts-node/register');\n\nimport {\n  withAppDelegateHeaderBaseMod,\n  withSimpleAppDelegateHeaderMod,\n} from './withAppDelegateHeaderBaseMod.ts';\n\nexport default ({ config }) => {\n  if (!config.plugins) config.plugins = [];\n  config.plugins.push(\n    withSimpleAppDelegateHeaderMod,\n\n    // Base mods MUST be last\n    withAppDelegateHeaderBaseMod\n  );\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server with Atlas Enabled\nDESCRIPTION: Command to start the Expo development server with Atlas enabled for bundle analysis. It also shows how to run the server in production mode for more accurate bundle size representation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Start the local development server with Atlas\n$ EXPO_UNSTABLE_ATLAS=true npx expo start\n\n# Run the local development server in production mode\n$ EXPO_UNSTABLE_ATLAS=true npx expo start --no-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Credentials in EAS Build\nDESCRIPTION: Example configuration for injecting Android keystore credentials into the build process. The function configures Android keystore and injects app signing config into gradle config.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Android credentials\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    # @info #\n    - eas/inject_android_credentials\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Plugin in Expo app.json\nDESCRIPTION: Configuration setup for the Stripe React Native plugin in app.json. Includes settings for Apple Pay merchant identifier and Google Pay enablement.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Level 6 Heading with @expo/html-elements in TypeScript\nDESCRIPTION: This example delivers a sample H6 heading usage via @expo/html-elements, ensuring level 6 heading semantics and accessibility on any platform. As elsewhere, the dependency is @expo/html-elements, and the main input is the heading text as children.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H6 } from '@expo/html-elements';\nexport default () => <H6>Example<H6/>\n```\n\n----------------------------------------\n\nTITLE: Cache Clearing and Dependencies Reset Command\nDESCRIPTION: Comprehensive command to clear bundler caches, clean npm cache, reinstall dependencies, reset watchman, clear metro cache, and restart expo with a clean slate.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/react-native-version-mismatch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf node_modules && npm cache clean --force && npm install && watchman watch-del-all && rm -rf $TMPDIR/haste-map-* && rm -rf $TMPDIR/metro-cache && npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Screen Options in Expo Router\nDESCRIPTION: Shows how to dynamically set screen options using Stack.Screen component and router.setParams() function. This allows for runtime updates to screen options based on user interactions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, useLocalSearchParams, useRouter } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function Details() {\n  const router = useRouter();\n  const params = useLocalSearchParams();\n\n  return (\n    <View style={styles.container}>\n      <Stack.Screen\n        options={{\n          title: params.name,\n        }}\n      />\n      <Text\n        onPress={() => {\n          router.setParams({ name: 'Updated' });\n        }}>\n        Update the title\n      </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing an Update to Development Branch\nDESCRIPTION: Command to publish an EAS Update to the development branch with a descriptive message, which will be delivered to builds with the development channel.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/team-development.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --branch development --message \"Change first button label\"\n```\n\n----------------------------------------\n\nTITLE: Integrating React Navigation Dev Tools with React Navigation\nDESCRIPTION: Example showing how to connect the React Navigation dev tools plugin with React Navigation. The navigation container reference is passed to the plugin hook for inspection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NavigationContainer, useNavigationContainerRef } from '@react-navigation/native';\nimport { useReactNavigationDevTools } from '@dev-plugins/react-navigation';\n\nexport default function App() {\n  const navigationRef = useNavigationContainerRef();\n\n  useReactNavigationDevTools(navigationRef);\n\nreturn (\n    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: BlurView Import Statement\nDESCRIPTION: Shows how to import the BlurView component from the expo-blur package\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Server Endpoint for Blurhash Generation\nDESCRIPTION: Express.js endpoint implementation that accepts an image file and returns its blurhash representation\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\napp.post('/blurhash', upload.single('image'), async (req, res) => {\n  const { file } = req;\n  if (file === null) {\n    res.status(400).json({ message: 'Image is missing' });\n    return;\n  }\n\n  const componentX = req.body.componentX ?? 4;\n  const componentY = req.body.componentY ?? 3;\n\n  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({\n    resolveWithObject: true,\n  });\n\n  const blurhash = encode(data, info.width, info.height, componentX, componentY);\n  res.json({ blurhash });\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Shell for EAS Build Steps\nDESCRIPTION: Shows how to define a custom shell executable for a specific step in the workflow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - run:\n        # @info #\n        shell: /bin/sh\n        # @end #\n        command: |\n          echo \"Steps can use another shell\"\n          ps -p $$\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-localization Plugin in app.json - JSON\nDESCRIPTION: This snippet demonstrates how to add the expo-localization plugin to the app.json file using Expo's config plugins system. Adding \\\"expo-localization\\\" under the plugins array enables native localization support during build time. This change requires rebuilding the app for the configuration to take effect; it is a prerequisite for projects using EAS Build or npx expo run.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\\"expo-localization\\\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Warnings and Errors in Expo React Native\nDESCRIPTION: Examples of how to programmatically trigger warnings and errors in an Expo React Native application using console methods and throw statement.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/errors-and-warnings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.warn(\"Warning message\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.error(\"Error message\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthrow Error(\"Error message\")\n```\n\n----------------------------------------\n\nTITLE: WebBrowser Import Statement\nDESCRIPTION: Shows how to import the WebBrowser module from expo-web-browser package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\n```\n\n----------------------------------------\n\nTITLE: EAS Update Configuration in iOS Expo.plist\nDESCRIPTION: XML configuration for iOS that adds request headers for the update channel in the Expo.plist file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/build-locally.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRequestHeaders</key>\n<dict>\n  <key>expo-channel-name</key>\n  <string>main</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Calendar Plugin in app.json\nDESCRIPTION: Configuration example for expo-calendar plugin in app.json to set up calendar permissions and reminder access.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-calendar\",\n        {\n          \"calendarPermission\": \"The app needs to access your calendar.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Channel in App.json for Prebuild\nDESCRIPTION: Add requestHeaders to the updates configuration in app.json. This is used by 'npx expo prebuild' to generate the correct native configurations for update channels.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/updating-your-app.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    /* @hide ... */ /* @end */\n    \"updates\": {\n      /* @hide ... */ /* @end */\n      \"requestHeaders\": {\n        \"expo-channel-name\": \"your-channel-name\"\n      }\n      /* @hide ... */ /* @end */\n    }\n    /* @hide ... */ /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Media Library Module - JavaScript\nDESCRIPTION: This minimal snippet shows how to import all functions and objects from the expo-media-library module using ES Module syntax. This import pattern is necessary to gain access to the library's API, such as permission hooks, asset fetchers, or album utilities. There are no parameters or outputs. expo-media-library must be installed as a dependency in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\\n\n```\n\n----------------------------------------\n\nTITLE: Minimal Preview Build Configuration\nDESCRIPTION: A minimal configuration for the preview build profile, setting internal distribution for testing purposes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"distribution\": \"internal\"\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-web-browser via Expo CLI (bash)\nDESCRIPTION: Installs the expo-web-browser package in an Expo or bare React Native project using the Expo CLI. Requires Expo CLI to be installed globally or available in the project's dev dependencies. This command adds the dependency and ensures the correct compatible version for your Expo SDK is installed. The key parameter is the package name; no other parameters are required. The process outputs updated package files and may take a few moments to run, creating or updating the package-lock.json as necessary.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-web-browser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-web-browser\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-tracking-transparency in app.json (JSON)\nDESCRIPTION: This snippet demonstrates how to add 'expo-tracking-transparency' to the plugins array in app.json, including a 'userTrackingPermission' message. This message will be used for the NSUserTrackingUsageDescription on iOS, which is mandatory for app store approval. Ensure your Expo project can utilize config plugins, and provide a clear permission explanation for users.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-tracking-transparency\\\",\\n        {\\n          \\\"userTrackingPermission\\\": \\\"This identifier will be used to deliver personalized ads to you.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Project\nDESCRIPTION: Command to create a new React Native project with Expo SDK support using create-expo-app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo NavigationBar Module (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the entire `expo-navigation-bar` module as `NavigationBar` in a JavaScript or TypeScript file. This allows access to all functions and properties provided by the library for interacting with the Android navigation bar.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Resolving ADB Version Conflict by Copying SDK Version in Shell\nDESCRIPTION: This command copies the ADB executable from the Android SDK's platform-tools directory to the system's '/usr/bin' directory using superuser privileges (`sudo`). This action overwrites the potentially conflicting system version with the one from the SDK, aiming to resolve version mismatch errors.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/android-studio-emulator.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo cp ~/Library/Android/sdk/platform-tools/adb /usr/bin\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS iCloud Entitlements\nDESCRIPTION: XML configuration for iOS entitlements file to enable iCloud capabilities and CloudKit support for manual setup without EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.icloud-services</key>\n<array>\n    <string>CloudDocuments</string>\n</array>\n<key>com.apple.developer.ubiquity-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\n```\n\n----------------------------------------\n\nTITLE: Build Script Configuration for PWA\nDESCRIPTION: Package.json script configuration for building the web version and generating service worker.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build:web\": \"expo export -p web && npx workbox-cli generateSW workbox-config.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign In in app.json\nDESCRIPTION: Configuration to enable Sign In with Apple capability in the app by setting the iOS.usesAppleSignIn property to true in the app.json configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"usesAppleSignIn\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Speech Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Speech module from expo-speech in a JavaScript file. This import statement is typically used at the beginning of a file that utilizes the Speech functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Importing Google Authentication Provider from AuthSession\nDESCRIPTION: Import statement for the Google authentication provider from expo-auth-session, which offers a simplified implementation for Google OAuth.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/auth-session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Google from 'expo-auth-session/providers/google';\n```\n\n----------------------------------------\n\nTITLE: Importing MailComposer with Expo (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import all exports from the expo-mail-composer package as the MailComposer object. The import statement is used in JavaScript/TypeScript (React Native) projects to provide access to MailComposer's methods for composing and sending emails using the native OS UI. There are no additional dependencies besides the installation of expo-mail-composer. Inputs and outputs depend on the subsequent usage of MailComposer methods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/mail-composer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as MailComposer from 'expo-mail-composer';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Custom Component in React Native\nDESCRIPTION: This snippet shows how to import and use a custom ImageViewer component in the main App.js file. It passes the placeholder image as a prop to the component, demonstrating component composition in React Native.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, View } from 'react-native';\n\nimport ImageViewer from './components/ImageViewer';\n\nconst PlaceholderImage = require('./assets/images/background-image.png');\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer placeholderImageSource={PlaceholderImage} />\n      </View>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n    paddingTop: 58,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the ImageManipulator Module\nDESCRIPTION: Shows how to import the ImageManipulator module for use in a React Native application. This import statement makes all the functionality of the expo-image-manipulator package available to your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Importing KeepAwake Module in JavaScript\nDESCRIPTION: Example showing how to import the KeepAwake module from expo-keep-awake. This is the basic import statement needed before using any of the module's functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n```\n\n----------------------------------------\n\nTITLE: Additional Response Headers for Code Signing\nDESCRIPTION: Optional response headers used for code signing validation, containing signature information and related metadata.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexpo-signature: *\n```\n\n----------------------------------------\n\nTITLE: Running install-expo-modules Tool via npx (Shell)\nDESCRIPTION: Executes the `install-expo-modules` package directly using `npx` without needing a global installation. This command initiates the process of modifying the current React Native project to support Expo modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/install-expo-modules/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx install-expo-modules\n```\n\n----------------------------------------\n\nTITLE: Importing Contacts Module\nDESCRIPTION: Example of importing the expo-contacts module in JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\n```\n\n----------------------------------------\n\nTITLE: Applying Global CSS Styles in a React Component (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to use a global CSS class (`container`) defined in an imported stylesheet (`./styles.css`). It shows applying the class using the `className` prop on a standard HTML `div` element and using the special `style` prop syntax (`{ $$css: true, _: 'container' }`) for React Native for Web components like `<View>`. Note that global styles are web-only.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx App.js\nimport './styles.css';\nimport { View } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      {/* Use `className` to assign the style with React DOM components. */}\n      <div className=\"container\">Hello World</div>\n\n      {/* Use `style` with the following syntax to append class names in React Native for web. */}\n      <View\n        style={{\n          $$css: true,\n          _: 'container',\n        }}>\n        Hello World\n      </View>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in app.config.js\nDESCRIPTION: Shows how to configure plugins in the app.config.js file using the plugins array.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"plugins\": [[\"./my-plugin\", \"custom\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Cross-Platform Anchor Element with @expo/html-elements in TypeScript\nDESCRIPTION: This code demonstrates usage of the A component to link to URLs in both web and React Native environments. The A element normalizes anchor behavior and accepts href and target props. It relies on @expo/html-elements; on native, it uses the Linking API under the hood to open links. Inputs include href (the destination) and optional target. The output adapts to <a> (web) or <Text> (native), with accessibility roles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { A } from '@expo/html-elements';\n\nexport default () => <A href=\"#\" target=\"_blank\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL Support in Expo App Config\nDESCRIPTION: Static configuration in app.json to enable and force RTL layout support for Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"extra\": {\n      \"supportsRTL\": true,\n      \"forcesRTL\": true\n    },\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Autolinking in package.json\nDESCRIPTION: JSON configuration for setting up autolinking in a monorepo environment. This enables apps to use newly created modules from the packages directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/use-standalone-expo-module-in-your-project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"autolinking\": {\n      \"nativeModulesDir\": \"../../packages\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fontello Icon Set in React Native\nDESCRIPTION: This code snippet shows how to create a custom icon set using Fontello in a React Native app. It uses the createIconSetFromFontello method to create an Icon component based on a Fontello config file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport createIconSetFromFontello from '@expo/vector-icons/createIconSetFromFontello';\n\nimport fontelloConfig from './config.json';\n\nconst Icon = createIconSetFromFontello(fontelloConfig, 'fontello', 'fontello.ttf');\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Metadata Store Config in JSON\nDESCRIPTION: Basic store.config.json configuration for EAS Metadata showing how to define app information for the Apple App Store. Includes essential fields like title, subtitle, description, keywords, and various URLs for marketing, support and privacy policy.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"Awesome App\",\n        \"subtitle\": \"Your self-made awesome app\",\n        \"description\": \"The most awesome app you have ever seen\",\n        \"keywords\": [\"awesome\", \"app\"],\n        \"marketingUrl\": \"https://example.com/en/promo\",\n        \"supportUrl\": \"https://example.com/en/support\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS AppDelegate for Custom Entry File in Development\nDESCRIPTION: This code modification in the iOS AppDelegate.mm file enables the use of a custom entry file for development builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_24\n\nLANGUAGE: objectivec\nCODE:\n```\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n{\n#if DEBUG\n-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\"];\n+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\".expo/.virtual-metro-entry\"];\n#else\n  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline HTML with WebView in React Native (JSX)\nDESCRIPTION: This example shows how to render inline HTML content directly within a `WebView` component using the `source` prop with an `html` key. It imports required modules, defines an `App` component, and renders a `WebView`. The `originWhitelist={['*']}` prop allows loading content from any origin, which is necessary for inline HTML. Basic styling is applied using `StyleSheet` and `expo-constants` to adjust for the status bar height.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/webview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx collapseHeight=310\nimport { WebView } from 'react-native-webview';\nimport Constants from 'expo-constants';\nimport { StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <WebView\n      style={styles.container}\n      originWhitelist={['*']}\n      source={{ html: '<h1><center>Hello world</center></h1>' }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Running the Latest Android Build on an Emulator with EAS CLI\nDESCRIPTION: This command uses the EAS CLI with the --latest flag to automatically download and install the most recent build on an Android Emulator without showing the selection list.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/apk.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:run -p android --latest\n```\n\n----------------------------------------\n\nTITLE: Importing Facebook Authentication Provider\nDESCRIPTION: Import statement for the Facebook authentication provider which offers a streamlined way to implement Facebook sign-in.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/auth-session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Facebook from 'expo-auth-session/providers/facebook';\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code URL for EAS Update by Device Traits\nDESCRIPTION: This URL generates a QR code for a specific project, runtime version, and channel, emulating how preview and production builds make requests to the EAS Update service.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&runtimeVersion=your-runtime-version&channel=your-channel\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build with Android Flavors\nDESCRIPTION: EAS Build configuration that specifies which Gradle command to use for each build profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"android\": {\n        \"gradleCommand\": \":app:assembleDevelopmentDebug\"\n      }\n    },\n    \"production\": {\n      \"android\": {\n        \"gradleCommand\": \":app:bundleProductionRelease\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Android Production Build Steps for Play Store in YAML\nDESCRIPTION: Specifies the steps for a customized Android production build intended for the Google Play Store, located in `.eas/build/production-build-android.yml`. It utilizes standard EAS build functions similar to the development build configuration (checkout, install, prebuild, inject credentials, run gradle, upload artifacts). This file is referenced by `eas.json`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Customized Android Play Store build example\n  steps:\n    - eas/checkout\n\n    - eas/install_node_modules\n\n    - eas/prebuild\n\n    - eas/inject_android_credentials\n\n    - eas/run_gradle\n\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Installing expo-localization Package via NPM\nDESCRIPTION: Command to install the expo-localization package using npx expo install. This is required for both managed Expo projects and bare React Native projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-localization/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-localization\n```\n\n----------------------------------------\n\nTITLE: Example Usage of createFingerprintAsync in TypeScript\nDESCRIPTION: Provides an example of how to use the createFingerprintAsync function and log the result.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst fingerprint = await createFingerprintAsync('/app');\nconsole.log(fingerprint);\n```\n\n----------------------------------------\n\nTITLE: Submitting iOS Build to App Store\nDESCRIPTION: Command to submit the latest iOS build to the App Store using EAS submit\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/ios-production-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas submit --platform ios\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-barcode-scanner\nDESCRIPTION: XML snippet to add NSCameraUsageDescription and NSMicrophoneUsageDescription keys to the iOS Info.plist file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-barcode-scanner/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use the microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies After Adding Trusted Dependencies\nDESCRIPTION: This bash script demonstrates the process of reinstalling dependencies after adding trusted dependencies. It removes the existing node_modules, Bun lockfile, and then reinstalls everything.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-bun.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n$ rm bun.lockb\n$ bun install\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Image Asset in React Native\nDESCRIPTION: Example of rendering a remote image asset using a URL with expo-image component, including explicit size styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\n\nfunction App() {\n  return (\n    <Image source={{ uri: 'https://example.com/logo.png' }} style={{ width: 50, height: 50 }} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Safe Area Implementation\nDESCRIPTION: Universal implementation using useSafeAreaInsets hook to handle safe area insets across platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Client in Android MainApplication\nDESCRIPTION: Code modification to enable dev-client functionality in bare-expo Android implementation by changing USE_DEV_CLIENT boolean value from false to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-menu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- static final boolean USE_DEV_CLIENT = false;\n+ static final boolean USE_DEV_CLIENT = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring DeviceMotion Plugin in app.json\nDESCRIPTION: Shows how to configure the expo-sensors plugin in app.json to set custom motion permission messages. This configuration is necessary for EAS Build or when running native projects directly.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring userInterfaceStyle in app.json for Expo\nDESCRIPTION: Set the userInterfaceStyle property in the app.json configuration file to enable automatic color scheme switching in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"userInterfaceStyle\": \"automatic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Font Module in JavaScript\nDESCRIPTION: Shows the standard way to import the entire expo-font module into a JavaScript/TypeScript file, typically to access functions like 'loadAsync' directly. All exports are namespaced under 'Font'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Font from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Displaying Platform Compatibility for DateTimePicker\nDESCRIPTION: Code that displays platform compatibility information for the DateTimePicker component, showing it works on Android, Android emulator, iOS, and iOS simulator.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PlatformsSection android emulator ios simulator />\n```\n\n----------------------------------------\n\nTITLE: Enabling Unsafe Terser Compression Options in Expo CLI\nDESCRIPTION: This snippet demonstrates how to enable unsafe compression options for Terser in the Metro configuration, which may provide additional compression but might not work in all JavaScript engines.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.minifierPath = 'metro-minify-terser';\n\nconfig.transformer.minifierConfig = {\n  compress: {\n    // Enable all unsafe optimizations.\n    unsafe: true,\n    unsafe_arrows: true,\n    unsafe_comps: true,\n    unsafe_Function: true,\n    unsafe_math: true,\n    unsafe_symbols: true,\n    unsafe_methods: true,\n    unsafe_proto: true,\n    unsafe_regexp: true,\n    unsafe_undefined: true,\n    unused: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Expo SDK with Yarn\nDESCRIPTION: Commands to install the latest version of Expo SDK or a specific version using Yarn.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install latest\n$ yarn add expo@latest\n\n# Install a specific SDK version (for example, SDK 51)\n$ yarn add expo@51\n```\n\n----------------------------------------\n\nTITLE: File Naming Convention for Not Found Routes\nDESCRIPTION: Special filename pattern +not-found.tsx that handles unmatched routes in both web and native environments. Similar to [...wild].tsx but processed after API routes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/not-found.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n+not-found.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Haptic Feedback in React Native with expo-haptics\nDESCRIPTION: This code snippet demonstrates how to use various haptic feedback functions from expo-haptics in a React Native application. It includes examples of selection, notification, and impact feedback with different intensities.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/haptics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport * as Haptics from 'expo-haptics';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Haptics.selectionAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Selection\" onPress={() => Haptics.selectionAsync()} />\n      </View>\n      <Text style={styles.text}>Haptics.notificationAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Success\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Success\n              )\n          }\n        />\n        <Button\n          title=\"Error\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Error\n              )\n          }\n        />\n        <Button\n          title=\"Warning\"\n          onPress={\n            () =>\n              Haptics.notificationAsync(\n                Haptics.NotificationFeedbackType.Warning\n              )\n          }\n        />\n      </View>\n      <Text style={styles.text}>Haptics.impactAsync</Text>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Light\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)\n          }\n        />\n        <Button\n          title=\"Medium\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)\n          }\n        />\n        <Button\n          title=\"Heavy\"\n          onPress={\n            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)\n          }\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 10,\n    marginBottom: 30,\n    justifyContent: 'space-between',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Router State with useRouter in Expo Router\nDESCRIPTION: Example of using the useRouter hook to reset the application to its initial route, which replaces the resetRoot functionality from NavigationContainer in React Navigation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRouter } from 'expo-router';\n\nfunction Example() {\n  const router = useRouter();\n\n  return (\n    <Text\n      onPress={() => {\n        // Go to the initial route of the application.\n        router.replace('/');\n      }}>\n      Reset App\n    </Text>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Android Emulator Detection using EmulatorUtilities\nDESCRIPTION: Refactored inline Android emulator checks to utilize the enhanced functionality provided by `EmulatorUtilities.isRunningOnEmulator()`. This likely improves the reliability or consistency of detecting whether the application is running on an Android emulator. Assumes the existence of an `EmulatorUtilities` class with this static method within the Android native codebase.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nEmulatorUtilities.isRunningOnEmulator()\n```\n\n----------------------------------------\n\nTITLE: Implementing Lottie Animation Component in React Native\nDESCRIPTION: A complete example showing how to implement a Lottie animation in React Native with play/reset controls. The component uses useRef for animation control and includes styling for the container and buttons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/lottie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport LottieView from 'lottie-react-native';\n\nexport default function App() {\n  const animation = useRef<LottieView>(null);\n  useEffect(() => {\n    // You can control the ref programmatically, rather than using autoPlay\n    // animation.current?.play();\n  }, []);\n\n  return (\n    <View style={styles.animationContainer}>\n      <LottieView\n        autoPlay\n        ref={animation}\n        style={{\n          width: 200,\n          height: 200,\n          backgroundColor: '#eee',\n        }}\n        // Find more Lottie files at https://lottiefiles.com/featured\n        source={require('./assets/gradientBall.json')}\n      />\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Restart Animation\"\n          onPress={() => {\n            animation.current?.reset();\n            animation.current?.play();\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animationContainer: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n  },\n  buttonContainer: {\n    paddingTop: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry PostPublish Hook in Expo\nDESCRIPTION: JSON configuration for adding a postPublish hook to upload sourcemaps to Sentry in an Expo project's app.json file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"hooks\": {\n      \"postPublish\": [\n        {\n          \"file\": \"sentry-expo/upload-sourcemaps\",\n          \"config\": {\n            \"organization\": \"sentry org slug, or use the `SENTRY_ORG` environment variable\",\n            \"project\": \"sentry project name, or use the `SENTRY_PROJECT` environment variable\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Header Buttons in Stack Navigator\nDESCRIPTION: Demonstrates how to add buttons to the header using headerLeft and headerRight options. This example includes a custom LogoTitle component and a button that updates a count state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\nimport { Button, Text, Image, StyleSheet } from 'react-native';\nimport { useState } from 'react';\n\nfunction LogoTitle() {\n  return (\n    <Image style={styles.image} source={{ uri: 'https://reactnative.dev/img/tiny_logo.png' }} />\n  );\n}\n\nexport default function Home() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <>\n      <Stack.Screen\n        options={{\n          headerTitle: props => <LogoTitle {...props} />,\n          headerRight: () => <Button onPress={() => setCount(c => c + 1)} title=\"Update count\" />,\n        }}\n      />\n      <Text>Count: {count}</Text>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 50,\n    height: 50,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Image Assets with Custom Quality\nDESCRIPTION: This command uses expo-optimize to compress image assets with a specified quality level of 90%.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/optimize-assets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo-optimize --quality 90\n```\n\n----------------------------------------\n\nTITLE: Retrieving Push Notification Receipt via Curl\nDESCRIPTION: Command to fetch the delivery receipt for a previously sent push notification using its ticket ID. This helps in tracking the delivery status of notifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST \"https://exp.host/--/api/v2/push/getReceipts\" -d '{\n  \"ids\": [\n    \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Channels in eas.json\nDESCRIPTION: JSON configuration for setting up preview and production channels in eas.json. This configuration is essential for ensuring builds are associated with the correct distribution channels.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"channel\": \"preview\"\n    },\n    \"production\": {\n      \"channel\": \"production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Module Function in TypeScript\nDESCRIPTION: TypeScript code to export the getApiKey function from the ExpoNativeConfigurationModule.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExpoNativeConfigurationModule from './ExpoNativeConfigurationModule';\n\nexport function getApiKey(): string {\n  return ExpoNativeConfigurationModule.getApiKey();\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple ESLint Configs\nDESCRIPTION: Example of extending multiple universe configs for projects spanning several platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"eslintConfig\": {\n  \"extends\": [\"universe/node\", \"universe/web\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for SQLite Database Files\nDESCRIPTION: Metro configuration to include .db file extensions for SQLite database assets in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite-legacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\n\ndefaultConfig.resolver.assetExts.push('db');\n\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Importing Expo TaskManager Module in JavaScript\nDESCRIPTION: This JavaScript code snippet shows the standard way to import the `expo-task-manager` library into a project. It imports all exported members under the `TaskManager` namespace, making its functions and constants available for use in managing background tasks. This import is a prerequisite for using any functionality provided by the library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/task-manager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\n```\n\n----------------------------------------\n\nTITLE: Exporting Expo Project Assets\nDESCRIPTION: This command exports the Expo project and displays a pretty-printed list of assets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/optimize-assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export\n```\n\n----------------------------------------\n\nTITLE: Apple Sign-in Entitlements Configuration\nDESCRIPTION: XML configuration for iOS entitlements file to enable Apple Sign-in capability.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default zIndex Behavior in React Native\nDESCRIPTION: This example demonstrates the default zIndex behavior where components that appear later in the component tree have a higher z-order and appear on top of earlier components. No explicit zIndex values are set.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/z-index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nexport default function App() {\n  return (\n    <View style={styles.root}>\n      <View\n        style={[\n          styles.container,\n          {\n            backgroundColor: '#e1e4e8',\n          },\n        ]}>\n        {/* zIndex: 0 */}\n        <View style={[styles.item, { backgroundColor: '#6638f0' }]} />\n        {/* zIndex: 1 */}\n        <View style={[styles.item, { backgroundColor: '#5cc9f5' }]} />\n        {/* zIndex: 2 */}\n        <View style={[styles.item, { backgroundColor: '#4af2a1' }]} />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  container: {\n    height: 200,\n    width: 200,\n    borderRadius: 16,\n    padding: 16,\n    borderWidth: 8,\n    borderColor: 'rgba(0,0,0,0.2)',\n  },\n  item: {\n    borderWidth: 4,\n    borderColor: 'rgba(0,0,0,0.2)',\n    height: 48,\n    width: 48,\n    borderRadius: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Client in Android MainApplication\nDESCRIPTION: This code snippet shows how to enable the Dev Client in the Android MainApplication.kt file for bare-expo. It involves changing the USE_DEV_CLIENT constant from false to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/README.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n- private const val USE_DEV_CLIENT = false;\n+ private const val USE_DEV_CLIENT = true;\n```\n\n----------------------------------------\n\nTITLE: Customizing root HTML in Expo Router\nDESCRIPTION: Creates a custom root HTML component for wrapping all routes and adding global head elements in static rendering.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport { type PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n        <ScrollViewStyleReset />\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Enable expo-updates in Debug Builds (Expo, Bash)\nDESCRIPTION: Sets the EX_UPDATES_NATIVE_DEBUG environment variable to 1, thereby enabling expo-updates in debug builds. This allows developers to step through update logic while running a debug build. No parameters required; just run in a shell before building or running the project. Output is an environment variable exported for the current shell, making expo-updates behave as if in a release build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/DEVELOPMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport EX_UPDATES_NATIVE_DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Android Push Notification Payload Interface (TypeScript)\nDESCRIPTION: TypeScript interface defining the structure of the data object for Android push notifications. It includes properties for title, message, sound, vibration, priority, and badge.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport interface FirebaseData {\n  title?: string;\n  message?: string;\n  subtitle?: string;\n  sound?: boolean | string;\n  vibrate?: boolean | number[];\n  priority?: AndroidNotificationPriority;\n  badge?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profiles\nDESCRIPTION: JSON configuration for eas.json file that defines preview and production build profiles with their respective update channels.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"channel\": \"preview\"\n      // ...\n    },\n    \"production\": {\n      \"channel\": \"production\"\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Push Ticket Format in JavaScript\nDESCRIPTION: Defines the structure of a push ticket response from Expo's push notification service. It contains an array of data objects with status information and optional error details for the entire request.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"status\": \"error\" | \"ok\",\n      \"id\": string, // this is the Receipt ID\n      // if status === \"error\"\n      \"message\": string,\n      \"details\": JSON\n    },\n    ...\n  ],\n  // only populated if there was an error with the entire request\n  \"errors\": [{\n    \"code\": string,\n    \"message\": string\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing captureRef from react-native-view-shot in JavaScript\nDESCRIPTION: This snippet shows how to import the captureRef function from the react-native-view-shot library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { captureRef } from 'react-native-view-shot';\n```\n\n----------------------------------------\n\nTITLE: Publishing EAS Update with Branch and Message\nDESCRIPTION: Command to publish an update using EAS Update CLI, requiring a branch name and message parameter to identify and describe the update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/publish.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --branch [branch-name] --message \"[message]\"\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild Command\nDESCRIPTION: Execute the Expo prebuild command to generate native code for Android and iOS platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/prebuild.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Library Permissions with Config Plugin\nDESCRIPTION: Shows how to configure photo-related permission messages using the expo-media-library config plugin properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-media-library\",\n      {\n        \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n        \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Speech Module in JavaScript\nDESCRIPTION: This snippet shows the standard way to import the `expo-speech` library into a JavaScript or TypeScript file. It imports all the exports from the `expo-speech` package and makes them available under the `Speech` namespace, allowing access to functions like `Speech.speak()`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Modifying Android Manifest with Config Plugin\nDESCRIPTION: This TypeScript code snippet shows how to use the 'withAndroidManifest' helper to modify the AndroidManifest.xml file, adding a metadata item with the custom API key.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst withMyApiKey: ConfigPlugin<{ apiKey: string }> = (config, { apiKey }) => {\n  config = withAndroidManifest(config, config => {\n    const mainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(config.modResults);\n\n    AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n      mainApplication,\n      'MY_CUSTOM_API_KEY',\n      apiKey\n    );\n    return config;\n  });\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing a Local Expo Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import a locally created Expo module into your application's main file (e.g., App.js or App.tsx).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/get-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hello } from './modules/my-module';\n```\n\n----------------------------------------\n\nTITLE: Importing Cellular API in React Native\nDESCRIPTION: Shows how to import the Cellular API module from expo-cellular package to access cellular service provider information.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient from Expo LinearGradient (JavaScript)\nDESCRIPTION: This code snippet shows how to import the LinearGradient component from the expo-linear-gradient package in JavaScript. This import is necessary for any usage of gradient views in a React Native app utilizing Expo. Imports are used as a prerequisite step; it has no direct input/output but enables subsequent usage of the LinearGradient component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Listing Minimum Required Scopes for Facebook AuthSession - Text\nDESCRIPTION: Lists the default access scopes for Facebook authentication when using the AuthSession Facebook provider. These ensure access to profile and email information for use with Firebase, Auth0, or similar backends. Should be included in the OAuth scope parameter.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/auth-session.mdx#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n['public_profile', 'email']\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code URL for EAS Update\nDESCRIPTION: This URL generates a QR code for loading the latest update on a specific build's channel in a development build or Expo Go.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&runtimeVersion=your-runtime-version&channel=your-channel\n```\n\n----------------------------------------\n\nTITLE: CSS Module Style Definition\nDESCRIPTION: Example of CSS Module styling with scoped class names\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.text {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Module Styles in a React Component\nDESCRIPTION: Example React component (`App.js`) demonstrating how to import styles from a CSS Module (`./App.module.css`). It shows applying the scoped `.text` style to React Native `Text` components using both the `react-native-web` specific `{ $$css: true, _: styles.text }` syntax and the `unstable_styles` export for potentially more stable cross-platform application, as well as applying it to a standard web `<p>` tag using `className={styles.text}` (web-only).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx App.js|collapseHeight=470\nimport styles, { unstable_styles } from './App.module.css';\n\nexport default function Page() {\n  return (\n    <>\n      <Text\n        style={{\n          // This is how react-native-web class names are applied\n          $$css: true,\n          _: styles.text,\n        }}>\n        Hello World\n      </Text>\n      <Text style={unstable_styles.text}>Hello World</Text>\n      {/* Web-only usage: */}\n      <p className={styles.text}>Hello World</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen Background Color in app.json\nDESCRIPTION: JSON configuration for the splash screen in app.json, setting the image path, resize mode, and background color to match the splash image background.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"splash\": {\n    \"image\": \"./assets/splash.png\",\n    \"resizeMode\": \"contain\",\n    \"backgroundColor\": \"#25292e\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Engine in Expo app.json\nDESCRIPTION: This snippet demonstrates how to configure the JavaScript engine in an Expo project's app.json file. It shows setting Hermes as the default engine and overriding it with JSC for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-hermes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"expo\": {\n    \"jsEngine\": \"hermes\",\n    \"ios\": {\n      \"jsEngine\": \"jsc\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SDK Config Plugin Implementation\nDESCRIPTION: Example of creating a plugin that adds custom values to iOS Info.plist configuration. Shows proper structure and error handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMySDK = (config, { apiKey }) => {\n  if (!config.ios) {\n    config.ios = {};\n  }\n  if (!config.ios.infoPlist) {\n    config.ios.infoPlist = {};\n  }\n\n  config.ios.infoPlist['MY_CUSTOM_NATIVE_IOS_API_KEY'] = apiKey;\n\n  return config;\n};\n\nmodule.exports.withMySDK = withMySDK;\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-location\nDESCRIPTION: XML configuration for adding location usage description keys to the iOS Info.plist file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-location/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationAlwaysUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use your location</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring app.json for expo-updates\nDESCRIPTION: JSON diff showing the changes required in app.json to configure expo-updates, including setting the updates URL and projectId for EAS Update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"MyApp\",\n-  \"displayName\": \"MyApp\"\n+  \"displayName\": \"MyApp\",\n+  \"expo\": {\n+    \"name\": \"MyApp\",\n+    \"slug\": \"MyApp\",\n+    \"ios\": {\n+      \"bundleIdentifier\": \"com.MyApp\"\n+    },\n+    \"android\": {\n+      \"package\": \"com.MyApp\"\n+    },\n+    \"runtimeVersion\": \"1.0.0\",\n+    \"updates\": {\n+      \"url\": \"https://u.expo.dev/[your-project-id]\"\n+    },\n+    \"extra\": {\n+      \"eas\": {\n+        \"projectId\": \"[your-project-id]\"\n+      }\n+    }\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Properties Table for React Native Button Component\nDESCRIPTION: Table defining the available properties for a custom button component. Includes properties for color, size, styling, background color, border radius, and event handling. The component extends basic React Native touchable and text components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop              | Description                                                                                                                                       | Default             |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- |\n| `color`           | Text and icon color, use `iconStyle` or nest a `Text` component if you need different colors.                                                     | `white`             |\n| `size`            | Icon size.                                                                                                                                        | `20`                |\n| `iconStyle`       | Styles applied to the icon only, good for setting margins or a different color. _Note: use `iconStyle` for margins or expect unstable behaviour._ | `{marginRight: 10}` |\n| `backgroundColor` | Background color of the button.                                                                                                                   | `#007AFF`           |\n| `borderRadius`    | Border radius of the button, set to `0` to disable.                                                                                               | `5`                 |\n| `onPress`         | A function called when the button is pressed.                                                                                                     | _None_              |\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Server for Expo API Routes\nDESCRIPTION: Configure an Express server to serve static files and handle API routes for a production Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env node\n\nconst path = require('path');\nconst { createRequestHandler } = require('@expo/server/adapter/express');\n\nconst express = require('express');\nconst compression = require('compression');\nconst morgan = require('morgan');\n\nconst CLIENT_BUILD_DIR = path.join(process.cwd(), 'dist/client');\nconst SERVER_BUILD_DIR = path.join(process.cwd(), 'dist/server');\n\nconst app = express();\n\napp.use(compression());\n\n// http://expressjs.com/en/advanced/best-practice-security.html#at-a-minimum-disable-x-powered-by-header\napp.disable('x-powered-by');\n\nprocess.env.NODE_ENV = 'production';\n\napp.use(\n  express.static(CLIENT_BUILD_DIR, {\n    maxAge: '1h',\n    extensions: ['html'],\n  })\n);\n\napp.use(morgan('tiny'));\n\napp.all(\n  '*',\n  createRequestHandler({\n    build: SERVER_BUILD_DIR,\n  })\n);\nconst port = process.env.PORT || 3000;\n\napp.listen(port, () => {\n  console.log(`Express server listening on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android MainActivity for UI Mode Changes\nDESCRIPTION: Add the uiMode flag to the activity configuration in AndroidManifest.xml and implement onConfigurationChanged method in MainActivity.java to handle UI mode changes in a bare React Native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<activity android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\">\n```\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.Intent;\nimport android.content.res.Configuration;\n\npublic class MainActivity extends ReactActivity {\n  @Override\n  public void onConfigurationChanged(Configuration newConfig) {\n    super.onConfigurationChanged(newConfig);\n    Intent intent = new Intent(\"onConfigurationChanged\");\n    intent.putExtra(\"newConfig\", newConfig);\n    sendBroadcast(intent);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sentry in React Native and Web Platforms\nDESCRIPTION: JavaScript code demonstrating how to access Sentry methods for different platforms (React Native and web) and an example of capturing exceptions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Access any @sentry/react-native exports via:\n// Sentry.Native.*\n\n// Access any @sentry/browser exports via:\n// Sentry.Browser.*\n\n// The following example uses `captureException()` from Sentry.Native.* to capture errors:\ntry {\n  // your code\n} catch (error) {\n  Sentry.Native.captureException(error);\n}\n```\n\n----------------------------------------\n\nTITLE: ImagePicker Result Log Example\nDESCRIPTION: Example of the console log output when an image is picked using the ImagePicker. This shows the structure of the result object returned by the picker.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"assetId\": \"C166F9F5-B5FE-4501-9531\",\n      \"base64\": null,\n      \"duration\": null,\n      \"exif\": null,\n      \"fileName\": \"IMG.HEIC\",\n      \"fileSize\": 6018901,\n      \"height\": 3025,\n      \"type\": \"image\",\n      \"uri\": \"file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg\"\n      \"width\": 3024\n    }\n  ],\n  \"canceled\": false,\n  \"cancelled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Custom Asset Extensions in Expo (JavaScript)\nDESCRIPTION: This snippet shows how to configure Metro (the React Native bundler) to recognize \".db\" files as assets so that SQLite database files can be bundled and accessed in your Expo project. The configuration adds the \"db\" extension to assetExts, allowing you to include prebuilt databases. Requires the expo/metro-config package. The output is a customized metro.config.js file at your project root.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite-legacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\\n\\nconst defaultConfig = getDefaultConfig(__dirname);\\n\\ndefaultConfig.resolver.assetExts.push('db');\\n\\nmodule.exports = defaultConfig;\n```\n\n----------------------------------------\n\nTITLE: BoxLink Component Implementation\nDESCRIPTION: Multiple instances of BoxLink components used to display various analytics service providers with their documentation links. Each BoxLink includes a title, description, and href prop.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-analytics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Google Firebase Analytics\"\n  description=\"Learn how to integrate React Native Firebase Analytics in your project.\"\n  href=\"https://rnfirebase.io/analytics/usage\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Brightness Listener in JavaScript\nDESCRIPTION: Added addBrightnessListener function to subscribe to brightness updates on iOS\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-brightness/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\naddBrightnessListener\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Font Module\nDESCRIPTION: Example showing how to import the Font module from expo-font package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Font from 'expo-font';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Simulator Build Profile in eas.json\nDESCRIPTION: JSON configuration for enabling simulator builds in the eas.json file. Sets the ios.simulator flag to true in the preview profile while maintaining a separate production profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/simulators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"ios\": {\n        \"simulator\": true\n      }\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SplashScreen Module\nDESCRIPTION: Basic import statement for the SplashScreen module from expo-splash-screen package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\n----------------------------------------\n\nTITLE: Importing expo-notifications in JavaScript\nDESCRIPTION: This snippet shows how to import the expo-notifications module in a JavaScript file. This import is necessary to use the Notifications API in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Login\nDESCRIPTION: Command to install EAS CLI globally and authenticate with Expo account\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/submit/ios.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli && eas login\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion from expo-sensors\nDESCRIPTION: This code snippet demonstrates how to import the DeviceMotion API from the expo-sensors package in a JavaScript or TypeScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeviceMotion } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code URL for EAS Update by Branch ID\nDESCRIPTION: This URL generates a QR code for the latest update available on a specific branch, given the project ID and branch ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&branchId=your-branch-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Web Bundler in Expo - JSON\nDESCRIPTION: Specifies use of Metro as the web bundler inside the app.json configuration file for Expo. Requires the 'expo' dependency. The \"web\" key under \"expo\" sets the bundler to 'metro', ensuring the proper tooling is used for web builds. Input is the configuration object, and output is the configured behavior at build/runtime for the expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Next.js Conditional Loading\nDESCRIPTION: Advanced Babel configuration that conditionally includes Next.js babel preset for web bundles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  const isWeb = api.caller(\n    caller =>\n      caller && (caller.name === 'babel-loader' || caller.name === 'next-babel-turbo-loader')\n  );\n  return {\n    presets: [\n      isWeb && require('next/babel'),\n      'babel-preset-expo',\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Records in Swift and Kotlin\nDESCRIPTION: Demonstrates how to create and use Record types to handle structured data with type safety. Records are convertible types equivalent to dictionaries/maps but represented as structs where each field can have its type and provide a default value.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nstruct FileReadOptions: Record {\n  @Field\n  var encoding: String = \"utf8\"\n\n  @Field\n  var position: Int = 0\n\n  @Field\n  var length: Int?\n}\n\n// Now this record can be used as an argument of the functions or the view prop setters.\nFunction(\"readFile\") { (path: String, options: FileReadOptions) -> String in\n  // Read the file using given `options`\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FileReadOptions : Record {\n  @Field\n  val encoding: String = \"utf8\"\n\n  @Field\n  val position: Int = 0\n\n  @Field\n  val length: Int? = null\n}\n\n// Now this record can be used as an argument of the functions or the view prop setters.\nFunction(\"readFile\") { path: String, options: FileReadOptions ->\n  // Read the file using given `options`\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client for Development Builds\nDESCRIPTION: This command installs the expo-dev-client package, which adds development-specific UI and tooling to debug builds of the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/local-app-development.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Updating MainActivity.java for registerRootComponent (Manual Android)\nDESCRIPTION: Modifies the `getMainComponentName` method in `MainActivity.java` to return 'main'. This manual change is necessary for Android projects that do not use Expo Prebuild, ensuring the JavaScript bundle loads the component registered with `registerRootComponent` under the name 'main'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  @Override\n  protected String getMainComponentName() {\n+    return \"main\";\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Group Layout for Home-related Screens\nDESCRIPTION: Implements a dedicated layout for the home group of screens with specific styling options. This allows for organizing related routes together and applying shared configurations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function HomeLayout() {\n  return (\n    <Stack\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#f4511e',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}>\n      <Stack.Screen name=\"index\" />\n      <Stack.Screen name=\"details\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage Access Framework for Android\nDESCRIPTION: Adds support for the Storage Access Framework on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-file-system/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdded support for Storage Access Framework (**Android only**).\n```\n\n----------------------------------------\n\nTITLE: Module Tree Shaking Example\nDESCRIPTION: Shows how unused exports are removed from modules in production builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ArrowUp() {\n  /* ... */\n}\n\nexport function ArrowDown() {\n  /* ... */\n}\n\nexport function ArrowRight() {\n  /* ... */\n}\n\nexport function ArrowLeft() {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Opening URLs with Expo Linking in TypeScript\nDESCRIPTION: Demonstrates how to use the expo-linking API to open a URL in the default browser.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Linking from 'expo-linking';\n\nLinking.openURL('https://expo.dev');\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expo App Configuration\nDESCRIPTION: Terminal command for evaluating and displaying the app config from app.json or app.config.js. Includes options for formatting and specifying the config type.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_22\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo config\n```\n\n----------------------------------------\n\nTITLE: Implementing Messages Screen Component in Expo Router\nDESCRIPTION: This snippet shows the implementation of a Messages screen component in Expo Router. It renders a simple view with text content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Messages() {\n  return (\n    <View>\n      <Text>Messages screen</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS App Lifecycle Events in Swift\nDESCRIPTION: Example Swift class that extends ExpoAppDelegateSubscriber to handle various app lifecycle events like becoming active, entering background, and termination. The class demonstrates subscription to key application state transitions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/appdelegate-subscribers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class AppLifecycleDelegate: ExpoAppDelegateSubscriber {\n  public func applicationDidBecomeActive(_ application: UIApplication) {\n    // The app has become active.\n  }\n\n  public func applicationWillResignActive(_ application: UIApplication) {\n    // The app is about to become inactive.\n  }\n\n  public func applicationDidEnterBackground(_ application: UIApplication) {\n    // The app is now in the background.\n  }\n\n  public func applicationWillEnterForeground(_ application: UIApplication) {\n    // The app is about to enter the foreground.\n  }\n\n  public func applicationWillTerminate(_ application: UIApplication) {\n    // The app is about to terminate.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-updates Library with npx\nDESCRIPTION: Command to install the expo-updates library which is required for initializing a project with EAS Update capability.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/team-development.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-updates\n```\n\n----------------------------------------\n\nTITLE: Overriding working_directory for a Reusable Function in YAML\nDESCRIPTION: Illustrates how to override the default behavior of the `list_files` function by specifying a different `working_directory` (`/a/b/c`) directly in the function call within `build.steps`. This causes the `ls -la` command defined in the function to run in the specified directory instead of the default project root.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: List files\n    steps:\n      # @info #\n      - eas/checkout\n      - list_files:\n          working_directory: /a/b/c\n      # @end #\n```\n\n----------------------------------------\n\nTITLE: Importing Asset Functionality from expo-asset in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Asset module from the expo-asset package in a JavaScript or React Native environment. The Asset module provides APIs to manage, download, and interact with static assets such as images, sounds, and fonts at runtime. To use this module, ensure that expo-asset is installed as a dependency in your project. The key output is the Asset object, which provides methods for asset preloading, caching, and resolution; no additional parameters are required for import. This import is typically a prerequisite for using any asset-related APIs in an Expo or React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/asset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: Adding Dev-Client Plugin Configuration for Variants\nDESCRIPTION: Example of configuring the expo-dev-client plugin based on the app variant.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nplugins: [\n  [\n    'expo-dev-client',\n    {\n      addGeneratedScheme: !IS_DEV,\n    },\n  ],\n],\n```\n\n----------------------------------------\n\nTITLE: Customizing Xcode Bundle React Native Phase for Expo - Diff\nDESCRIPTION: Shows changes to 'Bundle React Native code and images' phase in Xcode's PBX project file for compatibility with Expo CLI. Adds env loading, handles default entry file, CLI path, and bundling command. Inputs are shell script lines, output is correct asset and JS bundling for Expo-based iOS apps. Constraint: only applicable during iOS builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\nif [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\n+ if [[ -z \"$ENTRY_FILE\" ]]; then\n+   # Set the entry JS file using the bundler's entry resolution.\n+   export ENTRY_FILE=\"$\\(\"$NODE_BINARY\" -e \\\"require('expo/scripts/resolveAppEntry')\\\" \\\"$PROJECT_ROOT\\\" ios absolute | tail -n 1\\)\"\n+ fi\n\n+ if [[ -z \"$CLI_PATH\" ]]; then\n+   # Use Expo CLI\n+   export CLI_PATH=\"$\\(\"$NODE_BINARY\" --print \\\"require.resolve('@expo/cli')\\\"\\)\"\n+ fi\n+ if [[ -z \"$BUNDLE_COMMAND\" ]]; then\n+   # Default Expo CLI command for bundling\n+   export BUNDLE_COMMAND=\"export:embed\"\n+ fi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n```\n\n----------------------------------------\n\nTITLE: Async Module Import Example\nDESCRIPTION: Demonstration of bundle splitting functionality using async imports in Expo SDK 50.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport function add(a, b) {\n  return a + b;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@expo/metro-runtime';\n\n// This will be split into a separate chunk.\nimport('./math').then(math => {\n  console.log(math.add(1, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build Locally with Command Line\nDESCRIPTION: Commands to run EAS Build locally on your machine for either Android or iOS platforms using the --local flag.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/local-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --local\n# or\n$ eas build --platform ios --local\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary and Secondary App Store Categories in JSON\nDESCRIPTION: Configuration for setting primary and secondary categories for an Apple App Store app. Shows how to specify FINANCE as primary and NEWS as secondary category.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"categories\": [\"FINANCE\", \"NEWS\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Expo.plist for Updates\nDESCRIPTION: Key configuration settings in Expo.plist for iOS builds, specifying runtime version and update URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRuntimeVersion</key>\n<string>your-runtime-version-here</string>\n<key>EXUpdatesURL</key>\n<string>https://u.expo.dev/your-project-id-here</string>\n```\n\n----------------------------------------\n\nTITLE: Replacing Image with Animated.Image in EmojiSticker Component\nDESCRIPTION: Replaces the standard Image component with Animated.Image to allow animations to be applied to the emoji sticker.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function EmojiSticker({ imageSize, stickerSource }) {\n  return (\n    <View style={{ top: -350 }}>\n      /* @info Replace the Image component with Animated.Image. */\n      <Animated.Image\n        source={stickerSource}\n        resizeMode=\"contain\"\n        style={{ width: imageSize, height: imageSize }}\n      />\n      /* @end */\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTriggerInput Type in TypeScript\nDESCRIPTION: Defines a type for notification triggers based on a specific date and time. This can be provided as a Date object, a UNIX timestamp number, or an object with optional channelId and date properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DateTriggerInput = Date | number | { channelId?: string; date: Date | number };\n```\n\n----------------------------------------\n\nTITLE: iOS Permissions Configuration\nDESCRIPTION: Required iOS Info.plist configurations for photo library access and modification permissions\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-media-library/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your photos</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n```\n\n----------------------------------------\n\nTITLE: Running EAS Build with Maestro Test Profile\nDESCRIPTION: Terminal command to execute a custom EAS Build using the build-and-maestro-test profile. This command triggers the build process and runs the configured Maestro tests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/e2e-tests.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --profile build-and-maestro-test\n```\n\n----------------------------------------\n\nTITLE: Custom App Configuration for Next.js\nDESCRIPTION: Basic Next.js App component setup with viewport meta tag.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Head from 'next/head';\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <>\n      <Head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking for iOS in AppDelegate.m\nDESCRIPTION: Objective-C code to add deep linking support in the iOS AppDelegate.m file, including methods for handling URL opens.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-auth-session/README.md#2025-04-22_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\n#import <React/RCTLinkingManager.h>\n\n// iOS 9.x or newer\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n            options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n    return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n// iOS 8.x or older\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation\n{\n    return [RCTLinkingManager application:application openURL:url\n                    sourceApplication:sourceApplication annotation:annotation];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-notifications Plugin in app.json\nDESCRIPTION: JSON configuration for setting up the expo-notifications config plugin in app.json or app.config.js for customizing notification settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./local/path/to/myNotificationIcon.png\",\n          \"color\": \"#ffffff\",\n          \"sounds\": [\"./local/path/to/mySound.wav\", \"./local/path/to/myOtherSound.wav\"],\n          \"mode\": \"production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Barometer Module from expo-sensors\nDESCRIPTION: Shows how to import the Barometer module from the expo-sensors package for use in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Barometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Triggering an Android APK Build with EAS CLI\nDESCRIPTION: This command uses the EAS CLI to initiate a build for Android using a specific profile called 'preview' that has been configured to generate an APK file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/apk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build -p android --profile preview\n```\n\n----------------------------------------\n\nTITLE: Loading Local Image Asset in React Native\nDESCRIPTION: Example of importing and rendering a local image asset using require statement with React Native Image component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Image source={require('./assets/images/example.png')} />\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Checkbox Module\nDESCRIPTION: Shows the basic import statement for the expo-checkbox module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies for Server-Side Blurhash Generation (Node.js)\nDESCRIPTION: JavaScript code for a Node.js environment demonstrating how to import and initialize the required modules (`multer`, `sharp`, `blurhash`) needed for creating an endpoint that generates Blurhashes from uploaded images.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Multer is a middleware for handling `multipart/form-data`.\nconst multer = require('multer');\n// Sharp allows you to receive a data buffer from the uploaded image.\nconst sharp = require('sharp');\n// Import the encode function from the blurhash package.\nconst { encode } = require('blurhash');\n\n// Initialize `multer`.\nconst upload = multer();\n```\n\n----------------------------------------\n\nTITLE: Importing expo-tracking-transparency API in TypeScript\nDESCRIPTION: This snippet illustrates the ES module import statement for the entire 'expo-tracking-transparency' API, preparing the codebase for function and constant usage from the library. It is meant to be placed at the top of any TypeScript or JavaScript file intending to use App Tracking Transparency features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ExpoTrackingTransparency from 'expo-tracking-transparency';\n```\n\n----------------------------------------\n\nTITLE: Removing \"Start Packager\" Build Phase in Xcode Project for Expo SDK 50+ (pbxproj Diff)\nDESCRIPTION: This diff illustrates the removal of the \"Start Packager\" `PBXShellScriptBuildPhase` from the iOS project's `project.pbxproj` file. This step is necessary for bare React Native projects using Expo SDK 50 and higher, as the development server should be managed manually using `npx expo start` instead of being automatically launched by Xcode.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n-    FD10A7F022414F080027D42C /* Start Packager */ = {\n-\t\t\tisa = PBXShellScriptBuildPhase;\n-\t\t\talwaysOutOfDate = 1;\n-\t\t\tbuildActionMask = 2147483647;\n-\t\t\tfiles = (\n-\t\t\t);\n-\t\t\tinputFileListPaths = (\n-\t\t\t);\n-\t\t\tinputPaths = (\n-\t\t\t);\n-\t\t\tname = \"Start Packager\";\n-\t\t\toutputFileListPaths = (\n-\t\t\t);\n-\t\t\toutputPaths = (\n-\t\t\t);\n-\t\t\trunOnlyForDeploymentPostprocessing = 0;\n-\t\t\tshellPath = /bin/sh;\n-\t\t\tshellScript = \"if [[ -f \\\"$PODS_ROOT/../.xcode.env\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.updates\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.updates\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.local\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.local\\\"\\nfi\\n\\nexport RCT_METRO_PORT=\\\"${RCT_METRO_PORT:=8081}\\\"\\necho \\\"export RCT_METRO_PORT=${RCT_METRO_PORT}\\\" > `$NODE_BINARY --print \\\"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/.packager.env'\\\"`\\nif [ -z \\\"${RCT_NO_LAUNCH_PACKAGER+xxx}\\\" ] ; then\\n  if nc -w 5 -z localhost ${RCT_METRO_PORT} ; then\\n    if ! curl -s \\\"http://localhost:${RCT_METRO_PORT}/status\\\" | grep -q \\\"packager-status:running\\\" ; then\\n      echo \\\"Port ${RCT_METRO_PORT} already in use, packager is either not running or not running correctly\\\"\\n      exit 2\\n    fi\\n  else\\n    open `$NODE_BINARY --print \\\"require('path').dirname(require.resolve('expo/package.json')) + '/scripts/launchPackager.command'\\\"` || echo \\\"Can't start packager automatically\\\"\\n  fi\\nfi\\n\";\n-\t\t\tshowEnvVarsInLog = 0;\n-\t\t};\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Pedometer API in JavaScript\nDESCRIPTION: This snippet shows how to import the Pedometer class from expo-sensors in a JavaScript or React Native file. It is a basic import statement and serves as a prerequisite for accessing pedometer features. Required dependency is expo-sensors, which should be installed in your Expo-managed app. This is needed before any Pedometer method usage.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Pedometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic PagerView in React Native (JSX)\nDESCRIPTION: This example demonstrates how to use the PagerView component from 'react-native-pager-view' to create a simple carousel. It sets up a container View, includes a PagerView with an initial page set to 0, and defines three child Views representing the swipeable pages, each identified by a unique key. Basic styling for the container and pages is applied using StyleSheet.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/view-pager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx App.js\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nexport default function MyPager() {\n  return (\n    <View style={styles.container}>\n      <PagerView style={styles.container} initialPage={0}>\n        <View style={styles.page} key=\"1\">\n          <Text>First page</Text>\n          <Text>Swipe ➡️</Text>\n        </View>\n        <View style={styles.page} key=\"2\">\n          <Text>Second page</Text>\n        </View>\n        <View style={styles.page} key=\"3\">\n          <Text>Third page</Text>\n        </View>\n      </PagerView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Minimum Required Scopes for Google AuthSession - Text\nDESCRIPTION: Lists the default scopes enforced for Google authentication. These are required for optimal compatibility with Firebase and Auth0 when using AuthSession with Google. Provided as a plain text array. These must be included in the OAuth request.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/auth-session.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n['openid', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email']\n```\n\n----------------------------------------\n\nTITLE: Uploading Local Credentials Command\nDESCRIPTION: Command to upload credentials from local credentials.json file to EAS servers for remote management. Applicable for both iOS and Android platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/syncing-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neas credentials\n```\n\n----------------------------------------\n\nTITLE: Modifying Xcode Build Phase for Custom Expo Bundling\nDESCRIPTION: This snippet shows the modifications needed in the Xcode project's 'Bundle React Native code and images' build phase to support custom entry files and Expo CLI bundling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nif [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n```\n\n----------------------------------------\n\nTITLE: Defining PushNotificationTrigger Type\nDESCRIPTION: Represents a notification delivered by a push notification system, with platform-specific payload structures.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PushNotificationTrigger = { type: 'push' } & (\n  | { payload: Record<string, unknown> } // iOS\n  | { remoteMessage: FirebaseRemoteMessage } // Android\n  | {}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen Resize Mode in Expo App Config (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the resize mode for the splash screen in the Expo app config file. It sets the image path, resize mode, and background color.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/splash-screen-and-app-icon.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"splash\": {\n    \"image\": \"./assets/images/splash.png\",\n    \"resizeMode\": \"cover\",\n    \"backgroundColor\": \"#FFFFFF\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild Command\nDESCRIPTION: Terminal command for generating native source code using Expo's prebuild system. This is required before compiling a native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Setting up RootSiblingParent for react-native-root-toast\nDESCRIPTION: Shows how to wrap the root component with RootSiblingParent to enable toast notifications throughout the app when using react-native-root-toast.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/react-native-toast.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RootSiblingParent } from 'react-native-root-siblings';\n\n// in your render function\nreturn (\n  <RootSiblingParent>{/* <- use RootSiblingParent to wrap your root component */}\n    <App />\n  </RootSiblingParent>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image-manipulator package via NPM\nDESCRIPTION: Command to install the expo-image-manipulator package using npx expo install in a React Native project. This is required for both managed Expo and bare React Native projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-manipulator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-manipulator\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Play Store Reviews using React Native Linking API (TypeScript)\nDESCRIPTION: Opens the Android Play Store's reviews section for a specific app package using the Linking API in React Native. Two URL formats are used: one opens the Play Store in the browser, which is redirected to the native store app on Android, and the other directly invokes the Play Store using a market URI. Requires the React Native Linking module. Parameter androidPackageName is the app's package name. No output is returned. Works only on Android devices; ensure error handling for unsupported platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: Running Local Release Builds in Expo\nDESCRIPTION: Commands for compiling and running Android and iOS apps in release mode locally. These commands help verify if the app will build successfully on EAS Build service.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/troubleshooting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Locally compile and run the Android app in release mode\n$ npx expo run:android --variant release\n\n# Locally compile and run the iOS app in release mode\n$ npx expo run:ios --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods Flags for iOS Autolinking\nDESCRIPTION: These snippets show how to configure CocoaPods flags for iOS autolinking, both in the Podfile and package.json. It allows setting flags like inhibit_warnings for autolinked pods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nuse_expo_modules!({\n  flags: {\n    :inhibit_warnings => false\n  }\n})\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"autolinking\": {\n      \"ios\": {\n        \"flags\": {\n          \"inhibit_warnings\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Property in Kotlin\nDESCRIPTION: Defines a new mutable property with both getter and setter directly on the JavaScript object that represents a native module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nProperty(\"foo\")\n  .get { return@get \"bar\" }\n  .set { newValue: String ->\n    // do something with new value\n  }\n```\n\n----------------------------------------\n\nTITLE: Page Margins Configuration in Expo Print\nDESCRIPTION: Examples demonstrating how to set page margins for printing on iOS and Android platforms using different approaches.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/print.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst { uri } = await Print.printToFileAsync({\n  html: 'This page is printed with margins',\n  margins: {\n    left: 20,\n    top: 50,\n    right: 20,\n    bottom: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Screen Orientation Module in JavaScript\nDESCRIPTION: Example of importing the ScreenOrientation module from expo-screen-orientation package in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Table in Markdown\nDESCRIPTION: Markdown table documenting environment variables for Expo CLI, including variable names, types, and detailed descriptions of their functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                 | Type        | Description                                                                                                                                                                                                                                                                                                                                                                                                     |\n| ------------------------------------ | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `HTTP_PROXY`                         | **string**  | HTTP/HTTPS proxy URL to connect for all network requests. Configures [Undici EnvHttpProxyAgent](https://github.com/nodejs/undici/blob/main/docs/docs/api/EnvHttpProxyAgent.md).                                                                                                                                                                                                                                                                 |\n| `EXPO_NO_WEB_SETUP`                  | **boolean** | Prevents the CLI from forcing web dependencies (`react-dom`, `react-native-web`, `@expo/webpack-config`) to be installed before using web functionality.<br/>This is useful for cases where you wish to perform non-standard web development.                                                                                                                                                                                   |\n| `EXPO_OFFLINE`                       | **boolean** | Skip all network requests when applicable. This leads to faster development in areas with poor network connection.                                                                                                                                                                                                                                                                                                              |\n| `EXPO_NO_TYPESCRIPT_SETUP`           | **boolean** | Prevents the CLI from forcing TypeScript to be configured on `npx expo start`.<br/>For more information, see [TypeScript guide](/guides/typescript/).                                                                                                                                                                                                                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Updated TypeScript WebView Component\nDESCRIPTION: Enhanced TypeScript implementation with URL prop support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewProps } from 'react-native';\nimport { requireNativeViewManager } from 'expo-modules-core';\nimport * as React from 'react';\n\nexport type Props = {\n  url?: string;\n} & ViewProps;\n\nconst NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');\n\nexport default function ExpoWebView(props: Props) {\n  return <NativeView {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo package with npm\nDESCRIPTION: Adds the expo package to the project using npm. Ensure compatibility with the React Native version in your project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install expo\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Server Handler in TypeScript\nDESCRIPTION: Server entry file setup for Netlify functions that handles all incoming requests. Points to the dist/server build output directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { createRequestHandler } = require('@expo/server/adapter/netlify');\n\nconst handler = createRequestHandler({\n  build: require('path').join(__dirname, '../../dist/server'),\n});\n\nmodule.exports = { handler };\n```\n\n----------------------------------------\n\nTITLE: Running ExpoTools Commands for Version Updates\nDESCRIPTION: Commands for updating version information on staging for a new SDK release. These commands set the package versions for Expo, React, and React Native for the new SDK.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key expoVersion --value <expo package version>\n```\n\nLANGUAGE: bash\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key facebookReactVersion --value <react package version>\n```\n\nLANGUAGE: bash\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key facebookReactNativeVersion --value <react-native package version>\n```\n\nLANGUAGE: bash\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key expoReactNativeTag --value sdk-XX.X.X\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Environment Variables in Expo\nDESCRIPTION: Example showing the correct way to access environment variables in Expo by directly referencing them from process.env without destructuring.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-env-var-destructuring.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myVar = process.env.MY_VAR;\n```\n\n----------------------------------------\n\nTITLE: Configuring gradle.properties for Android\nDESCRIPTION: Adds new architecture and Hermes configurations to the gradle.properties file in the Android directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nnewArchEnabled=false\n\nhermesEnabled=true\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS Info.plist with Config Plugin\nDESCRIPTION: Shows how to create a config plugin that adds a custom property to the Info.plist file. This example demonstrates adding a Google AdMob application identifier.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ConfigPlugin, withInfoPlist } from 'expo/config-plugins';\n\n// Pass `<string>` to specify that this plugin requires a string property.\nexport const withCustomConfig: ConfigPlugin<string> = (config, id) => {\n  return withInfoPlist(config, config => {\n    config.modResults.GADApplicationIdentifier = id;\n    return config;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementation of registerRootComponent Function\nDESCRIPTION: Shows the implementation of registerRootComponent which uses AppRegistry to register the main component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/application-has-not-been-registered.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction registerRootComponent(component) {\n  AppRegistry.registerComponent('main', () => component);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nativeVersion Runtime Policy in Expo\nDESCRIPTION: Sets the runtime version to a combination of 'version' and 'buildNumber' (iOS) or 'versionCode' (Android). Suitable for projects with custom native code that update native version numbers for each build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"nativeVersion\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"nativeVersion\"\n    },\n    \"version\": \"1.0.0\",\n    \"ios\": {\n      \"buildNumber\": \"1\"\n    },\n    \"android\": {\n      \"versionCode\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an SVG Component in React Native\nDESCRIPTION: Illustrates how to create a custom SVG component using react-native-svg. This example renders a circle and a rectangle within an SVG viewbox.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Svg, { Circle, Rect } from 'react-native-svg';\n\nexport default function SvgComponent(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\" {...props}>\n      <Circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"blue\" strokeWidth=\"2.5\" fill=\"green\" />\n      <Rect x=\"15\" y=\"15\" width=\"70\" height=\"70\" stroke=\"red\" strokeWidth=\"2\" fill=\"yellow\" />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for EAS Update\nDESCRIPTION: Essential meta-data configuration in AndroidManifest.xml for expo-updates, including runtime version and update URL settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"expo.modules.updates.EXPO_RUNTIME_VERSION\" android:value=\"your-runtime-version-here\"/>\n<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"https://u.expo.dev/your-project-id-here\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Expo HTML Elements\nDESCRIPTION: Illustrates how to create tables using various table-related components from @expo/html-elements, rendering appropriately on web and native platforms with some limitations on mobile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Table, THead, TH, TBody, TFoot, TR, TD, Caption } from '@expo/html-elements';\nimport { Text } from 'react-native';\n\nexport default () => (\n  <Table>\n    <Caption>Caption</Caption>\n    <THead>\n      <TR>\n        <TH colSpan=\"2\">The table header</TH>\n      </TR>\n    </THead>\n    <TBody>\n      <TR>\n        <TD>The table body</TD>\n        <TD>with two columns</TD>\n      </TR>\n    </TBody>\n    <TFoot>\n      <TR>\n        <TD>\n          <Text>This is the table footer</Text>\n        </TD>\n      </TR>\n    </TFoot>\n  </Table>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-modules-core Shared Library\nDESCRIPTION: Creates the shared library target for expo-modules-core, including all source files and setting up compilation options based on the build configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/android/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(CommonSettings INTERFACE)\n\nadd_library(\n        ${PACKAGE_NAME}\n        SHARED\n        ${common_sources}\n        ${sources_android}\n        ${sources_android_types}\n        ${sources_android_javaclasses}\n)\n\nif(IS_NEW_ARCHITECTURE_ENABLED)\n  add_subdirectory(\"${SRC_DIR}/fabric\")\n  set(NEW_ARCHITECTURE_DEPENDENCIES \"fabric\")\n  set(NEW_ARCHITECTURE_COMPILE_OPTIONS -DIS_NEW_ARCHITECTURE_ENABLED=1 -DRN_FABRIC_ENABLED=1)\nelse()\n  set(NEW_ARCHITECTURE_DEPENDENCIES \"\")\n  set(NEW_ARCHITECTURE_COMPILE_OPTIONS \"\")\nendif()\n\ncreateVarAsBoolToInt(\"USE_HERMES_INT\" ${USE_HERMES})\ncreateVarAsBoolToInt(\"UNIT_TEST_INT\" ${UNIT_TEST})\n\ntarget_compile_options(CommonSettings INTERFACE\n  -O2\n  -frtti\n  -fexceptions\n  -Wall\n  -fstack-protector-all\n  -DUSE_HERMES=${USE_HERMES_INT}\n  -DUNIT_TEST=${UNIT_TEST_INT}\n  ${NEW_ARCHITECTURE_COMPILE_OPTIONS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Android Manifest queries for intent handling\nDESCRIPTION: Adds queries to AndroidManifest.xml for handling intents.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-file-system/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdded `AndroidManifest.xml` queries for intent handling.\n```\n\n----------------------------------------\n\nTITLE: Unpublished Changes Documentation\nDESCRIPTION: Details upcoming changes including breaking changes, new features, bug fixes, and other improvements that haven't been released yet.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-router/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n- Added `expo-router/link` export. ([#31174](https://github.com/expo/expo/pull/31174) by [@EvanBacon](https://github.com/EvanBacon))\n- Added production exports for experimental server renderer. ([#30850](https://github.com/expo/expo/pull/30850) by [@EvanBacon](https://github.com/EvanBacon))\n- Added experimental server renderer. ([#30334](https://github.com/expo/expo/pull/30334) by [@EvanBacon](https://github.com/EvanBacon))\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Config Plugin in JavaScript for Custom Module\nDESCRIPTION: This JavaScript code creates an Expo config plugin that allows managed users to set the custom string value. It uses the withStringsXml function to modify the strings.xml file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AndroidConfig, withStringsXml } = require('expo/config-plugins');\n\nfunction withCustom(config, value) {\n  return withStringsXml(config, config => {\n    config.modResults = setStrings(config.modResults, value);\n    return config;\n  });\n}\n\nfunction setStrings(strings, value) {\n  // Helper to add string.xml JSON items or overwrite existing items with the same name.\n  return AndroidConfig.Strings.setStringItem(\n    [\n      // XML represented as JSON\n      // <string name=\"expo_custom_value\" translatable=\"false\">value</string>\n      { $: { name: 'expo_custom_value', translatable: 'false' }, _: value },\n    ],\n    strings\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring minifyTypeofWindow in Babel Preset Expo\nDESCRIPTION: Example of how to configure the minifyTypeofWindow option in babel-preset-expo. This option can be used to preserve typeof window checks in the code, which is useful for libraries that mock the window object.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    // If your native app doesn't polyfill `window` then setting this to `false` can reduce bundle size.\n    native: {\n      minifyTypeofWindow: true,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Setting NODE_ENV and BABEL_ENV in JavaScript\nDESCRIPTION: This code sets the NODE_ENV and BABEL_ENV environment variables to either 'development' or 'production' based on the input mode for various Expo CLI commands.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.env.NODE_ENV = mode === 'production' ? 'production' : 'development';\nprocess.env.BABEL_ENV = process.env.NODE_ENV;\n```\n\n----------------------------------------\n\nTITLE: Creating the Updates API Test Project (Bash)\nDESCRIPTION: Executes a TypeScript setup script (`create-updates-test.ts`) from the `expo-updates` package to generate a test project specifically designed for manually exercising the Updates API features against EAS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./packages/expo-updates/e2e/setup/create-updates-test.ts\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific URL Configuration for Handoff\nDESCRIPTION: Example of using Platform.select to configure different og:url values for web and native platforms in the Head component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Head from 'expo-router/head';\n\nexport default function App() {\n  return (\n    <Head>\n      <meta\n        property=\"og:url\"\n        content={Platform.select({ web: 'https://expo.dev', default: null })}\n      />\n    </Head>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SSO Login with Expo CLI\nDESCRIPTION: Command to authenticate with Expo CLI using SSO credentials. Available with SDK 50 and above.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/accounts/sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo login --sso\n```\n\n----------------------------------------\n\nTITLE: Reading API Key in Android Native Module\nDESCRIPTION: This Kotlin code demonstrates how to read the custom API key from AndroidManifest.xml in an Android native module using the packageManager class.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.nativeconfiguration\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\nimport android.content.pm.PackageManager\n\nclass ExpoNativeConfigurationModule() : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoNativeConfiguration\")\n\n    Function(\"getApiKey\") {\n      val applicationInfo = appContext?.reactContext?.packageManager?.getApplicationInfo(appContext?.reactContext?.packageName.toString(), PackageManager.GET_META_DATA)\n\n      return@Function applicationInfo?.metaData?.getString(\"MY_CUSTOM_API_KEY\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Plugin in Expo App Config (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `@stripe/stripe-react-native` config plugin within the `plugins` array of an Expo app's `app.json` or `app.config.js`. It allows setting the iOS `merchantIdentifier` (required for Apple Pay) and enabling `enableGooglePay` for Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    /* @hide ... */ /* @end */\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom String Value in XML for Android App\nDESCRIPTION: This XML code shows how users can configure a custom string value in their local strings.xml file for use with the Expo custom module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"expo_custom_value\" translatable=\"false\">I Love Expo</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Configuring pnpm for Expo projects\nDESCRIPTION: INI configuration for pnpm to use hoisted node-linker, which is required for proper dependency management in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nnode-linker=hoisted\n```\n\n----------------------------------------\n\nTITLE: Calling a Reusable EAS Build Function in YAML\nDESCRIPTION: Shows how to invoke the custom `greetings` function (defined elsewhere) within the `build.steps` section of an EAS build configuration YAML. It passes the string 'Expo' as the `value` input to the function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Functions Demo\n  steps:\n    # @info #\n    - greetings:\n        inputs:\n          value: Expo\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Defining Manifest and Asset Data Types in TypeScript\nDESCRIPTION: TypeScript interface definitions for the Manifest data structure used in Expo Updates. It defines the structure of update manifests including the main launch asset and additional assets required by the update bundle.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Manifest = {\n  id: string;\n  createdAt: string;\n  runtimeVersion: string;\n  launchAsset: Asset;\n  assets: Asset[];\n  metadata: { [key: string]: string };\n  extra: { [key: string]: any };\n};\n\ntype Asset = {\n  hash?: string;\n  key: string;\n  contentType: string;\n  fileExtension?: string;\n  url: string;\n};\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Tailwind\nDESCRIPTION: Configuration for PostCSS plugins including Tailwind and autoprefixer.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Hosting headers in firebase.json\nDESCRIPTION: This snippet demonstrates how to set custom headers for Firebase Hosting in the firebase.json file. It includes configurations for cache control, setting no-cache for all files and a specific cache duration for static assets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/publishing-websites.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"hosting\": [\n  {\n    /* @hide ... */ /* @end */\n    \"headers\": [\n      {\n        \"source\": \"/**\",\n        \"headers\": [\n          {\n            \"key\": \"Cache-Control\",\n            \"value\": \"no-cache, no-store, must-revalidate\"\n          }\n        ]\n      },\n      {\n        \"source\": \"**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)\",\n        \"headers\": [\n          {\n            \"key\": \"Cache-Control\",\n            \"value\": \"max-age=604800\"\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for EAS Build Steps\nDESCRIPTION: Demonstrates how to change the current directory for a step by setting the working_directory property.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - eas/checkout\n    - run:\n        name: List assets\n        # @info #\n        working_directory: assets\n        # @end #\n        command: ls -la\n```\n\n----------------------------------------\n\nTITLE: Rendering iOS Location Permission Keys in JSX\nDESCRIPTION: This JSX code snippet demonstrates the use of an IOSPermissions component to display the required usage description keys for location services on iOS in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<IOSPermissions\n  permissions={[\n    'NSLocationAlwaysAndWhenInUseUsageDescription',\n    'NSLocationAlwaysUsageDescription',\n    'NSLocationWhenInUseUsageDescription',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Extended iOS Simulator Build Profile Configuration\nDESCRIPTION: Enhanced configuration that extends the development profile while adding simulator-specific settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-simulators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios-simulator\": {\n      \"extends\": \"development\",\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS Expo Modules (bash)\nDESCRIPTION: Runs the pod installation process for iOS, configuring native dependencies after adding an Expo package in a bare React Native project. Requires a Mac environment with CocoaPods installed. This command should be run in the root directory of the React Native project after npm/yarn package installation. It ensures native pod files are correctly integrated, making the expo-web-browser module available to the iOS build. Outputs pod installation status and resolves/iOS dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-web-browser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Defining TimeIntervalNotificationTrigger Interface\nDESCRIPTION: Represents a trigger for notifications based on elapsed time intervals, which may be repeating.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TimeIntervalNotificationTrigger {\n  type: 'timeInterval';\n  repeats: boolean;\n  seconds: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-cellular\nDESCRIPTION: XML snippet to add the required READ_PHONE_STATE permission to the AndroidManifest.xml file for using TelephonyManager on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-cellular/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Expo.plist for expo-updates Configuration\nDESCRIPTION: XML content for the Expo.plist file to be added to the iOS project, containing configuration for expo-updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>EXUpdatesCheckOnLaunch</key>\n    <string>ALWAYS</string>\n    <key>EXUpdatesEnabled</key>\n    <true/>\n    <key>EXUpdatesLaunchWaitMs</key>\n    <integer>0</integer>\n    <key>EXUpdatesRuntimeVersion</key>\n    <string>1.0.0</string>\n    <key>EXUpdatesURL</key>\n    <string>http://localhost:3000/api/manifest</string>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Customizing iOS Podfile with Static Configuration\nDESCRIPTION: This Ruby snippet shows how to safely customize the iOS Podfile by importing and parsing an external JSON configuration file rather than using regex modifications, providing a safer approach to Podfile customization.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\n\n# @info Import a JSON file and parse it in Ruby #\npodfileConfig = JSON.parse(File.read(File.join(__dir__, 'podfile.config.json')))\n# @end #\n\nplatform :ios, '11.0'\n\ntarget 'yolo27' do\n  use_unimodules!\n  config = use_native_modules!\n  use_react_native!(:path => config[\"reactNativePath\"])\n\n  # podfileConfig['version']\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Route for Expo Router in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up the initial route for an Expo Router application using the unstable_settings object. It's used to ensure the initial route is configured correctly, especially for screens that are expected to have a back button.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const unstable_settings = {\n  initialRouteName: 'index',\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Speech Module\nDESCRIPTION: Shows how to import the Speech module from expo-speech package for use in an application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Build with EAS Build\nDESCRIPTION: Command to create a new Android development build that includes the expo-updates library, which is necessary for receiving over-the-air updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/team-development.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --profile development\n```\n\n----------------------------------------\n\nTITLE: Creating Application Lifecycle Package in Kotlin\nDESCRIPTION: Implementation of Package interface to create ApplicationLifecycleListener in Kotlin. Shows how to set up Application lifecycle hooks.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.mylib\n\nimport android.content.Context\nimport expo.modules.core.interfaces.ApplicationLifecycleListener\nimport expo.modules.core.interfaces.Package\n\nclass MyLibPackage : Package {\n  override fun createApplicationLifecycleListeners(context: Context): List<ApplicationLifecycleListener> {\n    return listOf(MyLibApplicationLifecycleListener())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-linear-gradient package\nDESCRIPTION: Command to install the expo-linear-gradient package using npx expo install for both managed Expo and bare React Native projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-linear-gradient/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-linear-gradient\n```\n\n----------------------------------------\n\nTITLE: Basic Push Notification with cURL\nDESCRIPTION: Example of sending a simple 'hello world' push notification using cURL to Expo's Push API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST \"https://exp.host/--/api/v2/push/send\" -d '{\n  \"to\": \"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\",\n  \"title\":\"hello\",\n  \"body\": \"world\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Importing DocumentPicker Module\nDESCRIPTION: JavaScript import statement for using the DocumentPicker module in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\n```\n\n----------------------------------------\n\nTITLE: Font Loading with Static Optimization in Expo\nDESCRIPTION: Demonstrates how to implement static font optimization using expo-font with automatic extraction and preloading capabilities\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useFonts } from 'expo-font';\n\nexport default function App() {\n  const [isLoaded] = useFonts({\n    inter: require('@/assets/inter.ttf'),\n  });\n\n  if (!isLoaded) {\n    return null;\n  }\n\n  return <Text style={{ fontFamily: 'inter' }}>Hello Universe</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Android App in Development Mode using Shell\nDESCRIPTION: This command builds and runs the Android app in development mode. It starts a development server after building the app, eliminating the need to run 'npx expo start' separately.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuildLocal.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ npx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Image Component\nDESCRIPTION: Shows the basic import statement required to use the `Image` component from the `expo-image` package in a JavaScript or TypeScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Image } from 'expo-image';\n```\n\n----------------------------------------\n\nTITLE: Importing the react-native-svg Library in JavaScript\nDESCRIPTION: This snippet demonstrates how to import all components and utilities from the `react-native-svg` library into a JavaScript file using the namespace import syntax. This makes all exported members available under the `Svg` object. This import is necessary to utilize the SVG rendering capabilities provided by the library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Function in Swift\nDESCRIPTION: Defines a JavaScript function that always returns a Promise and whose native code is by default dispatched on a different thread than the JavaScript runtime runs on.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nAsyncFunction(\"asyncFunction\") { (message: String) in\n  return message\n}\n\n// or\n\nAsyncFunction(\"asyncFunction\") { (message: String, promise: Promise) in\n  promise.resolve(message)\n}\n```\n\n----------------------------------------\n\nTITLE: Apple Sign In Entitlements for Manual Configuration\nDESCRIPTION: XML entitlements configuration that must be added to the iOS app's entitlements file when manually configuring Apple Sign In capability without using EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Default Root Component Registration in Expo/React Native\nDESCRIPTION: Shows how to register the root component using Expo's registerRootComponent function in the index.js file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/application-has-not-been-registered.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport App from './App';\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Using @expo/package-manager in TypeScript\nDESCRIPTION: This snippet demonstrates how to use @expo/package-manager to add packages to a project. It creates a manager instance for the project and adds both development and regular dependencies asynchronously.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/package-manager/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as PackageManager from '@expo/package-manager';\n\nconst manager = PackageManager.createForProject(projectRoot);\n\nawait Promise.all([\n  manager.addDevAsync(['@expo/webpack-config']),\n  manager.addAsync(['expo', 'expo-camera']),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Expo Config Plugin in JSON for Managed Expo Project\nDESCRIPTION: This JSON code demonstrates how managed Expo users can use the custom config plugin in their app.json file to set the custom string value.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [[\"expo-custom\", \"I Love Expo\"]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Expo Project Files\nDESCRIPTION: Terminal command for generating customizable project files like babel.config.js, webpack.config.js, or metro.config.js that would otherwise be generated in memory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_30\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo customize\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS Info.plist with Config Plugin\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the 'withInfoPlist' helper to modify the Info.plist file, adding a custom API key.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst withMyApiKey: ConfigPlugin<{ apiKey: string }> = (config, { apiKey }) => {\n  config = withInfoPlist(config, config => {\n    config.modResults['MY_CUSTOM_API_KEY'] = apiKey;\n    return config;\n  });\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Babel Transformer Configuration\nDESCRIPTION: Example of extending Expo's Babel transformer for custom file handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst upstreamTransformer = require('@expo/metro-config/babel-transformer');\n\nmodule.exports.transform = async ({ src, filename, options }) => {\n  if (filename.endsWith('.svg')) {\n    src = '...';\n  }\n  return upstreamTransformer.transform({ src, filename, options });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing expo-constants in bare React Native projects\nDESCRIPTION: This command installs the expo-constants package using npx and expo CLI. It's used for adding the package to npm dependencies in bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-constants/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-constants\n```\n\n----------------------------------------\n\nTITLE: Opening iOS App Store Reviews\nDESCRIPTION: Code example demonstrating how to redirect users to the iOS App Store review section using both browser and direct store URLs with the write-review action parameter\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Enums in Swift and Kotlin\nDESCRIPTION: Shows how to define and use enums to restrict values to a specific set. Enums must represent a primitive value and conform to the Enumerable protocol to be used as arguments or record fields.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nenum FileEncoding: String, Enumerable {\n  case utf8\n  case base64\n}\n\nstruct FileReadOptions: Record {\n  @Field\n  var encoding: FileEncoding = .utf8\n  // ...\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// Note: the constructor must have an argument called value.\nenum class FileEncoding(val value: String) : Enumerable {\n  utf8(\"utf8\"),\n  base64(\"base64\")\n}\n\nclass FileReadOptions : Record {\n  @Field\n  val encoding: FileEncoding = FileEncoding.utf8\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-contacts Plugin in app.json\nDESCRIPTION: Configuration example for expo-contacts using config plugins to set iOS contacts permission message.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-contacts\",\n        {\n          \"contactsPermission\": \"Allow $(PRODUCT_NAME) to access your contacts.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Navigation Events to Third-Party Services in TypeScript React\nDESCRIPTION: This example demonstrates how to send navigation events to an external service, such as analytics or logging, using the usePathname hook and useEffect in a root _layout.tsx file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/native-intent.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport ThirdPartyService from 'third-party-sdk';\nimport { Slot, usePathname } from 'expo-router';\n\nconst thirdParty = new ThirdPartyService();\n\nexport default function RootLayout() {\n  const pathname = usePathname();\n\n  // Perform the service initiation logic\n  useEffect(() => {\n    thirdParty.register();\n    return () => {\n      thirdParty.deregister();\n    };\n  }, [thirdParty]);\n\n  // Send pathname changes to the third party\n  useEffect(() => {\n    thirdParty.sendEvent({ pathname });\n  }, [pathname]);\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Image Picker Function to Button in App Component\nDESCRIPTION: Assigns the pickImageAsync function to the Button component's onPress prop to trigger image selection when the button is pressed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/image-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  // ...rest of the code remains same\n\n  return (\n    <View style={styles.container}>\n      {/* ...rest of the code remains same */}\n      <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Full iOS Theme Module Implementation\nDESCRIPTION: Complete iOS implementation with UserDefaults for persistent storage and event emission for theme changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoSettingsModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Events(\"onChangeTheme\")\n\n    Function(\"setTheme\") { (theme: String) -> Void in\n      UserDefaults.standard.set(theme, forKey:\"theme\")\n      sendEvent(\"onChangeTheme\", [\n        \"theme\": theme\n      ])\n    }\n\n    Function(\"getTheme\") { () -> String in\n      UserDefaults.standard.string(forKey: \"theme\") ?? \"system\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Device Module\nDESCRIPTION: Shows how to import the expo-device module to access device information in a JavaScript/React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Importing Network Module in Expo (JavaScript)\nDESCRIPTION: \"Imports all exported members from the \\'expo-network\\' package under the Network namespace for use in JavaScript or React Native applications. This is a foundational step and a prerequisite for interacting with the Network APIs, such as retrieving IP or MAC addresses or checking airplane mode. No additional parameters are involved, and the results depend on subsequent method calls under the Network object. Make sure \\'expo-network\\' is installed in your Expo project before importing.\"\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-network\nDESCRIPTION: XML configuration to add necessary permissions for accessing network and Wi-Fi state on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-network/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Config Plugin in JavaScript\nDESCRIPTION: A minimal example showing the simplest possible config plugin implementation that returns the config unchanged.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst withNothing = config => config;\n```\n\n----------------------------------------\n\nTITLE: Server Code Removal Example\nDESCRIPTION: Demonstrates how server-specific code is removed using window type checking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window === 'undefined') {\n  console.log('Hello on the server!');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Version in AndroidManifest.xml\nDESCRIPTION: Adding runtime version metadata to AndroidManifest.xml for Android builds in the bare workflow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/runtime-versions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ <meta-data android:name=\"expo.modules.updates.EXPO_RUNTIME_VERSION\" android:value=\"@string/expo_runtime_version\"/>\n```\n\n----------------------------------------\n\nTITLE: Importing Localization Functions from expo-localization in JSX\nDESCRIPTION: This snippet demonstrates how to import the getLocales and getCalendars functions from the expo-localization package. These functions are used to retrieve locale settings and calendar information from the user's device.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-cellular in bare React Native projects\nDESCRIPTION: Command to install the expo-cellular package using npx and expo CLI in a bare React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-cellular/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-cellular\n```\n\n----------------------------------------\n\nTITLE: Implementing Dangerous Mod for Icon Generation\nDESCRIPTION: Example of using withDangerousMod to handle icon generation in iOS. This demonstrates experimental functionality that operates outside the standard mod system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const withIcons = config => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      await setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Options in Babel Preset Expo\nDESCRIPTION: Example of how to set platform-specific options in babel-preset-expo. This allows for different settings on web and native platforms, with platform-specific options taking precedence over top-level options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    // Default value:\n    disableImportExportTransform: false,\n\n    web: {\n      // Web-specific value:\n      disableImportExportTransform: true,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Porting Custom Navigators with withLayoutContext\nDESCRIPTION: Example demonstrating how to port a custom navigator from React Navigation to Expo Router using the withLayoutContext function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { createCustomNavigator } from './my-navigator';\n\nexport const CustomNavigator = withLayoutContext(createCustomNavigator().Navigator);\n```\n\n----------------------------------------\n\nTITLE: Configuring TrackingTransparency Plugin in app.json\nDESCRIPTION: Configuration example showing how to set up the expo-tracking-transparency plugin in app.json. Sets the user tracking permission message that will be displayed to users.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-tracking-transparency\",\n        {\n          \"userTrackingPermission\": \"This identifier will be used to deliver personalized ads to you.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Simulator Build Profile in eas.json\nDESCRIPTION: Basic configuration for iOS Simulator build profile with the simulator property set to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-simulators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n    },\n    \"ios-simulator\": {\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes with React DOM - JSX\nDESCRIPTION: Demonstrates how to use Tailwind utility classes directly in a functional React component's className attributes for styling (web target). Assumes Tailwind CSS and its configuration are set up in the project. Inputs are JSX props; outputs are styled HTML elements. There are no additional limitations beyond React and Tailwind setup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return (\n    <div className=\"bg-slate-100 rounded-xl\">\n      <p className=\"text-lg font-medium\">Welcome to Tailwind</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind with React Native Web\nDESCRIPTION: Example of using Tailwind classes with React Native components using the $$css syntax.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Page() {\n  return (\n    <View style={{ $$css: true, _: 'bg-slate-100 rounded-xl' }}>\n      <Text style={{ $$css: true, _: 'text-lg font-medium' }}>Welcome to Tailwind</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind with React DOM in Expo\nDESCRIPTION: This React component demonstrates how to use Tailwind CSS classes with React DOM elements in an Expo web project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return (\n    <div className=\"bg-slate-100 rounded-xl\">\n      <p className=\"text-lg font-medium\">Welcome to Tailwind</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Font Loading Implementation\nDESCRIPTION: Example of loading a remote font using useFonts hook with error handling and styling demonstration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFonts } from 'expo-font';\nimport { Text, View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    'Inter-SemiBoldItalic': 'https://rsms.me/inter/font-files/Inter-SemiBoldItalic.otf?v=3.12',\n  });\n\n  if (!loaded || !error) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ fontFamily: 'Inter-SemiBoldItalic', fontSize: 30 }}>Inter SemiBoldItalic</Text>\n      <Text style={{ fontSize: 30 }}>Platform Default</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Swift Module Provider File Reference\nDESCRIPTION: Reference to ExpoModulesProvider.swift file that handles module registration and bridge delegate handlers for iOS implementation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-autolinking/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nExpoModulesProvider.swift\n```\n\n----------------------------------------\n\nTITLE: Configuring Main React Component Name for Android (Diff, Java)\nDESCRIPTION: This diff snippet shows how to override the getMainComponentName method in an Android MainActivity.java file to return \\\"main\\\". This change is required when the Expo Prebuild system is not used and you want the native launcher to reference a custom initial React component. The method supplies the entry point component for React Native integration. No additional dependencies beyond a React Native Android setup are needed. Inputs: n/a; Output: name for the React Native entry component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n@Override\nprotected String getMainComponentName() {\n+    return \"main\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Styles\nDESCRIPTION: Defines animated styles using useAnimatedStyle hook to apply translations to the sticker container.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst containerStyle = useAnimatedStyle(() => {\n  return {\n    transform: [\n      {\n        translateX: translateX.value,\n      },\n      {\n        translateY: translateY.value,\n      },\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing EAS Update Command Example\nDESCRIPTION: Command line syntax for publishing an update using EAS Update, including channel specification and update message parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/migrate-from-classic-updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --channel [channel-name] --message [message]\n\n# Example\n$ eas update --channel production --message \"Fixes typo\"\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint for Expo Apps\nDESCRIPTION: Command to install ESLint in an Expo project using npx expo install. This is a prerequisite before installing the Expo ESLint plugin.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx expo install eslint --save-dev\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Notification with Custom Sound on iOS - Expo SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to schedule a notification with a custom sound on iOS devices using Expo's Notifications API. It assumes the sound file ('notification.wav') is included in the Xcode project. Dependencies are expo-notifications and correct bundling of the sound file. Key parameters are the notification title, body, and the base filename of the sound. Input is the notification content and trigger; output is a scheduled local notification with the specified custom sound. This approach is limited to iOS and requires manual inclusion of the sound resource.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait Notifications.scheduleNotificationAsync({\\n  content: {\\n    title: \\\"You've got mail! 📬\\\",\\n    body: 'Open the notification to read them all',\\n    sound: 'notification.wav',\\n  },\\n  trigger: {\\n    // ...\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CanDismiss Check in Expo Router\nDESCRIPTION: Demonstrates how to check if dismissal is possible using the canDismiss action, which returns true if the router is within a stack with more than one screen in history.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, View } from 'react-native';\nimport { useRouter } from 'expo-router';\n\nexport default function Settings() {\n  const router = useRouter();\n\n  const handleDismiss = (count: number) => {\n    if (router.canDismiss()) {\n      router.dismiss(count)\n    }\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Maybe dismiss\" onPress={() => handleDismiss()} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Example App to Use Custom Plugin\nDESCRIPTION: This JSON configuration in the example app's app.json file specifies the use of the custom plugin by referencing the app.plugin.js file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    ...\n    \"plugins\": [\"../app.plugin.js\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Development Script in package.json\nDESCRIPTION: Custom npm script that sets the APP_VARIANT environment variable when starting the Expo development server, ensuring the correct variant configuration is loaded during local development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"APP_VARIANT=development npx expo start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnknownNotificationTrigger Interface in TypeScript\nDESCRIPTION: Defines a fallback interface for notification triggers that expo-notifications doesn't know how to serialize. This provides a type-safe way to handle unexpected or unsupported trigger types.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UnknownNotificationTrigger {\n  type: 'unknown';\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundFetch Module in React Native\nDESCRIPTION: Shows how to import the expo-background-fetch module in a React Native application. This is the basic import statement needed to access the BackgroundFetch API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as BackgroundFetch from 'expo-background-fetch';\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Bundle Analysis Scripts\nDESCRIPTION: JSON configuration in package.json to add scripts for running source-map-explorer on different platforms (web, iOS, Android).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyze:web\": \"source-map-explorer 'dist/_expo/static/js/web/*.js' 'dist/_expo/static/js/web/*.js.map'\",\n    \"analyze:ios\": \"source-map-explorer 'dist/_expo/static/js/ios/*.js' 'dist/_expo/static/js/ios/*.js.map'\",\n    \"analyze:android\": \"source-map-explorer 'dist/_expo/static/js/android/*.js' 'dist/_expo/static/js/android/*.js.map'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Environment for Node.js\nDESCRIPTION: This snippet shows how to configure ESLint for a Node.js environment in a metro.config.js file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-env node */\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(\n  /* @info This will no longer assert linting errors */ __dirname /* @end */\n);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Fixing Notification Sound Playback with setNotificationHandler\nDESCRIPTION: Corrected behavior in `setNotificationHandler` where notifications would not play sound on Android/iOS if `shouldShowAlert` was set to `false`, even when `shouldPlaySound` was `true`. This ensures sound playback respects the `shouldPlaySound` setting independently.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsetNotificationHandler\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshouldShowAlert: false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshouldPlaySound: true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Web UI for a Dev Tools Plugin\nDESCRIPTION: Complete implementation of the web UI for a dev tools plugin. It sets up a message listener for 'ping' events and properly manages subscription cleanup on unmount.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDevToolsPluginClient, type EventSubscription } from 'expo/devtools';\nimport { useEffect } from 'react';\n\nexport default function App() {\n  const client = useDevToolsPluginClient('my-devtools-plugin');\n\n  useEffect(() => {\n    const subscriptions: EventSubscription[] = [];\n\n    subscriptions.push(\n      client?.addMessageListener('ping', data => {\n        alert(`Received ping from ${data.from}`);\n      })\n    );\n\n    return () => {\n      for (const subscription of subscriptions) {\n        subscription?.remove();\n      }\n    };\n  }, [client]);\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Older Versions of expo-splash-screen\nDESCRIPTION: This code demonstrates how to migrate from expo-splash-screen versions prior to 0.12.0 by removing the explicit SplashScreen initialization code from MainActivity.java and using configuration strings instead.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n--- a/android/app/src/main/java/com/helloworld/MainActivity.java\n+++ b/android/app/src/main/java/com/helloworld/MainActivity.java\n@@ -3,15 +3,9 @@\n import com.facebook.react.ReactRootView;\n import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n\n-import expo.modules.splashscreen.singletons.SplashScreen;\n-import expo.modules.splashscreen.SplashScreenImageResizeMode;\n-\n public class MainActivity extends ReactActivity {\n   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n     // This is required for expo-splash-screen.\n     setTheme(R.style.AppTheme);\n     super.onCreate(null);\n-    // SplashScreen.show(...) has to be called after super.onCreate(...)\n-    SplashScreen.show(this, SplashScreenImageResizeMode.CONTAIN, ReactRootView.class, false);\n   }\n```\n\n----------------------------------------\n\nTITLE: Installing expo-font package with npm\nDESCRIPTION: Command to install the expo-font package using npx expo CLI in a React Native project\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-font/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-font\n```\n\n----------------------------------------\n\nTITLE: EAS Build Credentials Configuration File Structure\nDESCRIPTION: Example path for credentials.json file that stores local app signing credentials for Android keystore and iOS provisioning profiles\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/existing-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncredentials.json\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SDK packages with npx expo install\nDESCRIPTION: Command to install multiple Expo SDK packages (camera, contacts, and sensors) using the npx expo install command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Importing Clipboard Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Clipboard module from expo-clipboard. It's a basic import statement used to access the Clipboard functionality in your JavaScript code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Releasing Android App to Production with Fastlane\nDESCRIPTION: Command to execute the prod_release lane for Android, which prepares and submits the app for production release, possibly to the Google Play Store.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android prod_release\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic EAS Metadata with JavaScript\nDESCRIPTION: This snippet demonstrates how to create a dynamic store.config.js file. It imports data from a JSON file, adds a dynamic copyright year, and exports the modified configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the data from `eas metadata:pull`\nconst config = require('./store.config.json');\n\nconst year = new Date().getFullYear();\nconfig.apple.copyright = `${year} Acme, Inc.`;\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Installing expo-linking in bare React Native projects\nDESCRIPTION: Command to install the expo-linking package using npx and expo CLI in a bare React Native project. This assumes the expo package has been previously installed and configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-linking/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-linking\n```\n\n----------------------------------------\n\nTITLE: Loading Assets at Runtime with useAssets Hook\nDESCRIPTION: Example of using the useAssets hook from expo-asset to load multiple assets asynchronously at runtime.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAssets } from 'expo-asset';\n\nexport default function HomeScreen() {\n  const [assets, error] = useAssets([\n    require('path/to/example-1.jpg'),\n    require('path/to/example-2.png'),\n  ]);\n\n  return assets ? <Image source={assets[0]} /> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing captureRef from react-native-view-shot in JavaScript\nDESCRIPTION: Basic import statement for the captureRef function from the react-native-view-shot library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { captureRef } from 'react-native-view-shot';\n```\n\n----------------------------------------\n\nTITLE: Overriding Page Margins with CSS @page Rule in HTML (Android)\nDESCRIPTION: Illustrates how to control page margins for printing on Android when using `expo-print` by embedding a `@page` CSS rule within the HTML string provided to `printAsync` or `printToFileAsync`. This approach allows overriding the default margins applied by the Android WebView engine.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Package Import Example in Markdown\nDESCRIPTION: Import statement for APIInstallSection and PlatformsSection components used in the documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport PlatformsSection from '~/components/plugins/PlatformsSection';\n```\n\n----------------------------------------\n\nTITLE: Importing AuthSession Module\nDESCRIPTION: Basic import statement for using the AuthSession module in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: Implementing Aside Component for Web and Mobile\nDESCRIPTION: Shows how to use the Aside component from @expo/html-elements, rendering as an aside element on web with role 'complementary' and a View on mobile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aside } from '@expo/html-elements';\n\nexport default () => <Aside />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Authentication with Expo Config Plugin\nDESCRIPTION: Example of using the expo-apple-authentication config plugin in app.json for EAS Build to automatically enable required capabilities.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-apple-authentication\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Origin in app.json\nDESCRIPTION: Set the origin URL for API routes in the app config file, which is necessary for native platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"origin\": \"https://evanbacon.dev/\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining title, sidebar title, and description.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Introduction to development builds\nsidebar_title: Introduction\ndescription: A better development environment for React Native apps.\n---\n```\n\n----------------------------------------\n\nTITLE: Importing @expo/metro-runtime in JavaScript\nDESCRIPTION: Example of importing the @expo/metro-runtime package in a JavaScript file, typically in the initial bundle like App.js. The expo/metro-config will automatically prioritize this import in the bundle.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/metro-runtime/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@expo/metro-runtime';\n```\n\n----------------------------------------\n\nTITLE: Android Group View Implementation\nDESCRIPTION: Shows how to implement a group view with child management capabilities in Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nGroupView<ViewGroup> {\n  AddChildView { parent, child, index -> ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client in Expo Project\nDESCRIPTION: Command to install the expo-dev-client package in your Expo project using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Installing Local Authentication Package\nDESCRIPTION: Command to install the expo-local-authentication package using npx expo install\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-local-authentication/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-local-authentication\n```\n\n----------------------------------------\n\nTITLE: Configuring React Compiler in Expo App Config\nDESCRIPTION: Enable the React Compiler experiment in the app.json configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/preview/react-compiler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experiments\": {\n    \"reactCompiler\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Signed Update with EAS CLI in Bash\nDESCRIPTION: This command publishes a signed update for an app using the EAS CLI. It specifies the path to the private key file, which is used to create a digital signature for the update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/code-signing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neas update --private-key-path keys/private-key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Routes for SDK 50+ in Expo Router\nDESCRIPTION: JSON configuration for enabling async routes in SDK 50 and above, with platform-specific settings support and production bundle splitting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/async-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-router\",\n        {\n          \"origin\": \"https://acme.com\",\n          \"asyncRoutes\": {\n            \"web\": true,\n            \"default\": \"development\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering RawH3 Component with JSX\nDESCRIPTION: This JSX snippet renders the RawH3 component with the text 'constants'. It's likely used as a heading in the documentation or UI for the constants section.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/constants.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>constants</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Implementing mutateMe Function in Kotlin\nDESCRIPTION: Two Kotlin implementations for mutating JavaScript objects - one with type checking and one direct. Both set an 'expo' property with value 'modules'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nFunction(\"mutateMe\") { value: JavaScriptValue ->\n  if (value.isObject()) {\n    val jsObject = value.getObject()\n    jsObject.setProperty(\"expo\", \"modules\")\n  }\n}\n\n// or\n\nFunction(\"mutateMe\") { jsObject: JavaScriptObject ->\n  jsObject.setProperty(\"expo\", \"modules\")\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-web-browser as a Module in JavaScript\nDESCRIPTION: This snippet shows how to import all WebBrowser APIs from expo-web-browser in a JavaScript or React Native project. It is a foundational pattern required for using any expo-web-browser functionality, with no further parameters or outputs. It must be included before invoking any of the WebBrowser methods, and serves as prerequisite code for subsequent usage.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/webbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\n```\n\n----------------------------------------\n\nTITLE: Importing AppleAuthentication Module\nDESCRIPTION: Shows how to import the AppleAuthentication module for use in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\n```\n\n----------------------------------------\n\nTITLE: Using URI-Scheme CLI to Configure Redirects\nDESCRIPTION: Terminal commands for adding, listing, and testing URI schemes using the uri-scheme CLI tool, which is necessary for handling authentication redirects in native apps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/auth-session.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ npx uri-scheme add mycoolredirect\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ npx uri-scheme list\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Rebuild the native apps, be sure to use an emulator\n$ yarn android\n$ yarn ios\n\n# Open a URI scheme\n$ npx uri-scheme open mycoolredirect://some/redirect\n```\n\n----------------------------------------\n\nTITLE: Typing useSegments Hook in Expo Router\nDESCRIPTION: Demonstrates how to type the useSegments hook using an abstract of string arrays for more precise type checking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/hooks.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  const segments = useSegments<['profile'] | ['profile', '[user]']>();\n\n  return </>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies for Blurhash Generation\nDESCRIPTION: Shell command to install necessary Node.js packages (`multer`, `sharp`, `blurhash`) using npm for server-side Blurhash generation. `multer` handles multipart form data (image uploads), `sharp` processes images, and `blurhash` encodes the image data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install multer sharp blurhash\n```\n\n----------------------------------------\n\nTITLE: Importing ImageManipulator Module in JavaScript\nDESCRIPTION: This snippet shows how to import the ImageManipulator module from the expo-image-manipulator package. It's a basic import statement that allows access to all the functions and constants provided by the module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/imagemanipulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImageManipulator from 'expo-image-manipulator';\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-svg Package\nDESCRIPTION: Command to install the react-native-svg package in an Expo project using npx.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/ui-programming/using-svgs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTML Table Structure in Web\nDESCRIPTION: Example HTML table structure showing the proper usage of table elements including caption, thead, tbody, and tfoot. This demonstrates how tables should be structured when using the @expo/html-elements library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <caption>\n    Caption\n  </caption>\n  <thead>\n    <tr>\n      <th colspan=\"2\">The table header</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>The table body</td>\n      <td>with two columns</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <td><div>The table body</div></td>\n    </tr>\n  </tfoot>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Gradle Build for EAS\nDESCRIPTION: Gradle configuration file that handles Android app signing by injecting credentials from credentials.json. It sets up release and debug signing configs and applies them to respective build types.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/android-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n// Build integration with EAS\n\nimport java.nio.file.Paths\n\nandroid {\n  signingConfigs {\n    release {\n      // This is necessary to avoid needing the user to define a release signing config manually\n      // If no release config is defined, and this is not present, build for assembleRelease will crash\n    }\n  }\n\n  buildTypes {\n    release {\n      // This is necessary to avoid needing the user to define a release build type manually\n    }\n    debug {\n      // This is necessary to avoid needing the user to define a debug build type manually\n    }\n  }\n}\n\ntasks.whenTaskAdded {\n  android.signingConfigs.release {\n    def credentialsJson = rootProject.file(\"../credentials.json\");\n    def credentials = new groovy.json.JsonSlurper().parse(credentialsJson)\n    def keystorePath = Paths.get(credentials.android.keystore.keystorePath);\n    def storeFilePath = keystorePath.isAbsolute()\n      ? keystorePath\n      : rootProject.file(\"..\").toPath().resolve(keystorePath);\n\n    storeFile storeFilePath.toFile()\n    storePassword credentials.android.keystore.keystorePassword\n    keyAlias credentials.android.keystore.keyAlias\n    if (credentials.android.keystore.containsKey(\"keyPassword\")) {\n      keyPassword credentials.android.keystore.keyPassword\n    } else {\n      // key password is required by Gradle, but PKCS keystores don't have one\n      // using the keystore password seems to satisfy the requirement\n      keyPassword credentials.android.keystore.keystorePassword\n    }\n  }\n\n  android.buildTypes.release {\n    signingConfig android.signingConfigs.release\n  }\n\n  android.buildTypes.debug {\n    signingConfig android.signingConfigs.release\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering import types in JavaScript modules\nDESCRIPTION: Illustrates the proper way to order different types of imports from the same module, with default imports before namespace imports before named imports.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT\nimport a, * as b, { c } from 'module';\n```\n\n----------------------------------------\n\nTITLE: Configuring eas-build-pre-install Hook for npm Cache in package.json\nDESCRIPTION: This snippet shows how to add an eas-build-pre-install script to the package.json file. The script uses sed to replace the default Yarn registry URL with the EAS Build npm cache URL in the yarn.lock file, enabling npm cache usage with Yarn 1 (Classic).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/npm-cache-with-yarn.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"eas-build-pre-install\": \"bash -c \\\"[ ! -z \\\\\\\"$EAS_BUILD_NPM_CACHE_URL\\\\\\\" ] && sed -i -e \\\\\\\"s#https://registry.yarnpkg.com#$EAS_BUILD_NPM_CACHE_URL#g\\\\\\\" yarn.lock\\\" || true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry with Update Metadata in React Native\nDESCRIPTION: JavaScript code to initialize Sentry and configure the scope with update-related metadata. This allows tracking errors associated with specific updates in the Sentry dashboard.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/react-native';\nimport * as Updates from 'expo-updates';\n\nconst manifest = Updates.manifest;\nconst metadata = 'metadata' in manifest ? manifest.metadata : undefined;\nconst extra = 'extra' in manifest ? manifest.extra : undefined;\nconst updateGroup = metadata && 'updateGroup' in metadata ? metadata.updateGroup : undefined;\n\nSentry.init({\n  // dsn, release, dist, etc...\n});\n\nSentry.configureScope(scope => {\n  scope.setTag('expo-update-id', Updates.updateId);\n  scope.setTag('expo-is-embedded-update', Updates.isEmbeddedLaunch);\n\n  if (typeof updateGroup === 'string') {\n    scope.setTag('expo-update-group-id', updateGroup);\n\n    const owner = extra?.expoClient?.owner ?? '[account]';\n    const slug = extra?.expoClient?.slug ?? '[project]';\n    scope.setTag(\n      'expo-update-debug-url',\n      `https://expo.dev/accounts/${owner}/projects/${slug}/updates/${updateGroup}`\n    );\n  } else if (Updates.isEmbeddedLaunch) {\n    // This will be `true` if the update is the one embedded in the build, and not one downloaded from the updates server.\n    scope.setTag('expo-update-debug-url', 'not applicable for embedded updates');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing react-native-view-shot for Screenshots\nDESCRIPTION: Import statement for the captureRef function from react-native-view-shot library to enable screenshot capturing in React Native.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { captureRef } from 'react-native-view-shot';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Localization APIs in React Native (JavaScript)\nDESCRIPTION: This snippet shows how to import the getLocales and getCalendars methods from expo-localization. These methods allow synchronous access to the user device's locale and calendar settings so the app can adapt its experience based on regional preferences. No dependencies are required beyond having expo-localization installed, and the imports are necessary to invoke localization functions elsewhere in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Building Expotools Source Code Once (Shell)\nDESCRIPTION: Compiles the Expotools source code using Yarn. This command is typically used once as part of the initial development setup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/tools/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Rendering Expo Setup Forms in JSX\nDESCRIPTION: This snippet shows the usage of custom React components for Expo setup. It renders forms for selecting development platforms, devices, and modes, which are likely interactive components for user input.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/get-started/set-up-your-environment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PlatformAndDeviceForm />\n\n<DevelopmentModeForm />\n\n<DevelopmentEnvironmentInstructions />\n```\n\n----------------------------------------\n\nTITLE: Deprecating Constants Properties in JavaScript\nDESCRIPTION: Example showing the deprecation of Constants.installationId and Constants.deviceId properties. These can now be implemented in user space using expo-application and storage APIs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nconst installationId = Constants.installationId;\nconst deviceId = Constants.deviceId;\n\n// Recommended implementation\nimport * as Application from 'expo-application';\nimport * as SecureStore from 'expo-secure-store';\n\n// On Android\nconst androidId = Application.androidId;\n\n// On iOS\nconst installationId = await SecureStore.getItemAsync('installationId');\n```\n\n----------------------------------------\n\nTITLE: EAS Build Schema Definition\nDESCRIPTION: Defines the core schema structure for eas.json configuration file, including CLI settings and build profile options for both iOS and Android platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \"SEMVER_RANGE\",\n    \"requireCommit\": boolean,\n    \"appVersionSource\": string,\n    \"promptToConfigurePushNotifications\": boolean\n  },\n  \"build\": {\n    \"BUILD_PROFILE_NAME_1\": {\n      ...COMMON_OPTIONS,\n      \"android\": {\n        ...COMMON_OPTIONS,\n        ...ANDROID_OPTIONS\n      },\n      \"ios\": {\n        ...COMMON_OPTIONS,\n        ...IOS_OPTIONS\n      }\n    },\n    \"BUILD_PROFILE_NAME_2\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PWA Manifest Configuration\nDESCRIPTION: Standard PWA manifest file configuration defining app metadata, icons, and display properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"short_name\": \"Expo App\",\n  \"name\": \"Expo Router Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FlashList Component in React Native\nDESCRIPTION: This snippet demonstrates how to import the APIInstallSection and PlatformsSection components, which are likely custom components used in the documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/flash-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport PlatformsSection from '~/components/plugins/PlatformsSection';\n```\n\n----------------------------------------\n\nTITLE: Setting up Global CSS for Tailwind in Expo\nDESCRIPTION: This CSS file sets up the necessary Tailwind directives for use in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n/* This file adds the requisite utility classes for Tailwind to work. */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Redirect for Deep Links in Expo\nDESCRIPTION: This HTML snippet demonstrates a redirect mechanism that helps overcome limitations of custom URI schemes. By hosting this file online, links can first go to a standard HTTPS URL, which then redirects to the app's custom scheme, avoiding issues with email clients that strip custom URI schemes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.location.replace('example://path/into/app');\n</script>\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Tailwind\nDESCRIPTION: Configuration for PostCSS to enable Tailwind CSS and autoprefixer plugins.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpoRadialChartView for Web\nDESCRIPTION: Creates a placeholder implementation for the ExpoRadialChartView on web platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\n\nexport default function ExpoRadialChartView() {\n  return <div>Not implemented</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Modes in Expo app.json\nDESCRIPTION: JSON configuration for enabling background capabilities like location, fetch and remote notifications in iOS through app.json configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/task-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\"location\", \"fetch\", \"remote-notification\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Minification in Expo CLI\nDESCRIPTION: This snippet shows an example of how Expo CLI minifies JavaScript code by removing comments and collapsing string concatenations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This comment will be stripped\nconsole.log('a' + ' ' + 'long' + ' string' + ' to ' + 'collapse');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('a long string to collapse');\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK Versions in Gradle\nDESCRIPTION: Updates the compileSdkVersion and targetSdkVersion to 31, and sets Java version to 11 for Android builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-camera/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nandroid {\n  compileSdkVersion 31\n  targetSdkVersion 31\n}\n\ncompileOptions {\n  sourceCompatibility JavaVersion.VERSION_11\n  targetCompatibility JavaVersion.VERSION_11\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Module Exclusions in package.json\nDESCRIPTION: This JSON configuration shows how to exclude specific Expo modules from autolinking using the expo.autolinking field in package.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-expo-modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"...\",\n  \"dependencies\": {},\n  \"expo\": {\n    \"autolinking\": {\n      \"exclude\": [\"expo-keep-awake\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Imperative Navigation Examples\nDESCRIPTION: Examples of using router object and useRouter hook for imperative navigation\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { router } from 'expo-router';\n\nrouter.push('/about');\n```\n\n----------------------------------------\n\nTITLE: EAS Build Webhook Payload Structure\nDESCRIPTION: Example JSON structure of the payload sent by EAS for build notifications. Includes details about the build, project, and various metadata.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"147a3212-49fd-446f-b4e3-a6519acf264a\",\n  \"accountName\": \"dsokal\",\n  \"projectName\": \"example\",\n  \"buildDetailsPageUrl\": \"https://expo.dev/accounts/dsokal/projects/example/builds/147a3212-49fd-446f-b4e3-a6519acf264a\",\n  \"parentBuildId\": \"75ac0be7-0d90-46d5-80ec-9423fa0aaa6b\",\n  \"appId\": \"bc0a82de-65a5-4497-ad86-54ff1f53edf7\",\n  \"initiatingUserId\": \"d1041496-1a59-423a-8caf-479bb978203a\",\n  \"cancelingUserId\": null,\n  \"platform\": \"android\",\n  \"status\": \"errored\",\n  \"artifacts\": {\n    \"buildUrl\": \"https://expo.dev/artifacts/eas/wyodu9tua2ZuKKiaJ1Nbkn.aab\",\n    \"logsS3KeyPrefix\": \"production/f9609423-5072-4ea2-a0a5-c345eedf2c2a\"\n  },\n  \"metadata\": {\n    \"appName\": \"example\",\n    \"username\": \"dsokal\",\n    \"workflow\": \"managed\",\n    \"appVersion\": \"1.0.2\",\n    \"appBuildVersion\": \"123\",\n    \"cliVersion\": \"0.37.0\",\n    \"sdkVersion\": \"41.0.0\",\n    \"buildProfile\": \"production\",\n    \"distribution\": \"store\",\n    \"appIdentifier\": \"com.expo.example\",\n    \"gitCommitHash\": \"564b61ebdd403d28b5dc616a12ce160b91585b5b\",\n    \"gitCommitMessage\": \"Add home screen\",\n    \"runtimeVersion\": \"1.0.2\",\n    \"channel\": \"default\",\n    \"releaseChannel\": \"default\",\n    \"reactNativeVersion\": \"0.60.0\",\n    \"trackingContext\": {\n      \"platform\": \"android\",\n      \"account_id\": \"7c34cbf1-efd4-4964-84a1-c13ed297aaf9\",\n      \"dev_client\": false,\n      \"project_id\": \"bc0a82de-65a5-4497-ad86-54ff1f53edf7\",\n      \"tracking_id\": \"a3fdefa7-d129-42f2-9432-912050ab0f10\",\n      \"project_type\": \"managed\",\n      \"dev_client_version\": \"0.6.2\"\n    },\n    \"credentialsSource\": \"remote\",\n    \"isGitWorkingTreeDirty\": false,\n    \"message\": \"release build\",\n    \"runFromCI\": false\n  },\n  \"metrics\": {\n    \"memory\": 895070208,\n    \"buildEndTimestamp\": 1637747861168,\n    \"totalDiskReadBytes\": 692224,\n    \"buildStartTimestamp\": 1637747834445,\n    \"totalDiskWriteBytes\": 14409728,\n    \"cpuActiveMilliseconds\": 12117.540078,\n    \"buildEnqueuedTimestamp\": 1637747792476,\n    \"totalNetworkEgressBytes\": 355352,\n    \"totalNetworkIngressBytes\": 78781667\n  },\n  \"error\": {\n    \"message\": \"Unknown error. Please see logs.\",\n    \"errorCode\": \"UNKNOWN_ERROR\"\n  },\n  \"createdAt\": \"2021-11-24T09:53:01.155Z\",\n  \"enqueuedAt\": \"2021-11-24T09:53:01.155Z\",\n  \"provisioningStartedAt\": \"2021-11-24T09:54:01.155Z\",\n  \"workerStartedAt\": \"2021-11-24T09:54:11.155Z\",\n  \"completedAt\": \"2021-11-24T09:57:42.715Z\",\n  \"updatedAt\": \"2021-11-24T09:57:42.715Z\",\n  \"expirationDate\": \"2021-12-24T09:53:01.155Z\",\n  \"priority\": \"high\",\n  \"resourceClass\": \"android-n2-1.3-12\",\n  \"actualResourceClass\": \"android-n2-1.3-12\",\n  \"maxRetryTimeMinutes\": 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Sending an Update to the Production Channel in Expo\nDESCRIPTION: Command to send an over-the-air update to the production channel using EAS CLI. The update will be available to all builds configured to receive updates on this channel.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/deploy/send-over-the-air-updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --channel production\n```\n\n----------------------------------------\n\nTITLE: Using Lighthouse CLI for Web Performance Analysis\nDESCRIPTION: Commands to install Lighthouse CLI globally and run it for analyzing the performance of an Expo web app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install the lighthouse CLI\n$ npm install -g lighthouse\n\n# Run the lighthouse CLI for your site\n$ npx lighthouse <url> --view\n```\n\n----------------------------------------\n\nTITLE: Changing Native Queue for AsyncFunction in Swift\nDESCRIPTION: Shows how to change the native queue of AsyncFunction by calling the .runOnQueue function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nAsyncFunction(\"asyncFunction\") { (message: String) in\n  return message\n}.runOnQueue(.main)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Expo Doctor CLI\nDESCRIPTION: Basic usage example showing how to run the Expo Doctor CLI tool with optional path and configuration parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-doctor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Usage\nnpx expo-doctor [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro in metro.config.js\nDESCRIPTION: Sets up the Metro configuration file to extend Expo's default config, which is necessary for static rendering.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Additional features...\n});\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: CSS Module Example Component\nDESCRIPTION: Demonstration of using CSS Modules in a React component with platform-specific styles\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles, { unstable_styles } from './App.module.css';\n\nexport default function Page() {\n  return (\n    <>\n      <Text\n        style={{\n          // This is how react-native-web class names are applied\n          $$css: true,\n          _: styles.text,\n        }}>\n        Hello World\n      </Text>\n      <Text style={unstable_styles.text}>Hello World</Text>\n      {/* Web-only usage: */}\n      <p className={styles.text}>Hello World</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @expo/json-file Library in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the JsonFile class from @expo/json-file. It shows creating a file instance, reading from it, and writing data to it asynchronously.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/json-file/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport JsonFile, { JSONObject } from '@expo/json-file';\n\n// Create a file instance\nconst jsonFile = new JsonFile<JSONObject>(filePath);\n\n// Interact with the file\nawait jsonFile.readAsync();\nawait jsonFile.writeAsync({ some: 'data' });\n```\n\n----------------------------------------\n\nTITLE: Updating App Configuration with Prebuild\nDESCRIPTION: Demonstrates how to update the app configuration and regenerate native code using the expo prebuild command. The --clean flag ensures a fresh build without layering on top of existing files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --clean\n```\n\n----------------------------------------\n\nTITLE: Importing Network Module in Expo\nDESCRIPTION: This code snippet demonstrates how to import the Network module from expo-network package. This is the primary way to access network-related functions in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Building iOS Development Version\nDESCRIPTION: This command initiates the build process for an iOS development version of the app using EAS build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios --profile development\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SDK Library using Expo CLI\nDESCRIPTION: This command shows how to install an Expo SDK library (expo-device in this case) using the Expo CLI. The npx expo install command ensures compatibility with the project's Expo version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-device\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Support in Metro Config (SDK 50+)\nDESCRIPTION: Metro configuration for disabling CSS support in SDK 50 and above using the isCSSEnabled option.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Disable CSS support.\n  isCSSEnabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro with TypeScript\nDESCRIPTION: Setup for using TypeScript in Metro configuration files using ts-node.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('ts-node/register');\nmodule.exports = require('./metro.config.ts');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultConfig } from 'expo/metro-config';\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: URL Hash Handling in Expo Router\nDESCRIPTION: Demonstrates how to work with URL hash parameters using Expo Router, including accessing and modifying the hash through various navigation methods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { router, useLocalSearchParams, Link } from 'expo-router';\n\nexport default function User() {\n  // Access the hash\n  const { '#': hash } = useLocalSearchParams<{ '#': string }>();\n\n  return (\n    <>\n      <Text onPress={() => router.setParams({ '#': 'my-hash' })}>Set a new hash</Text>\n      <Text onPress={() => router.push('/#my-hash')}>Push with a new hash</Text>\n      <Link href=\"/#my-hash\">Link with a hash</Link>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Dependencies in iOS Podspec\nDESCRIPTION: Adds the DGCharts library as a dependency in the iOS podspec file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n    s.static_framework = true\n\n    s.dependency 'ExpoModulesCore'\n+   s.dependency 'DGCharts', '~> 5.1.0'\n\n    # Swift/Objective-C compatibility\n```\n\n----------------------------------------\n\nTITLE: Creating Universal Links with @expo/html-elements in React Native\nDESCRIPTION: Shows how to use the @expo/html-elements package to create a universal <A /> component that works across web and native platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/linking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { A } from '@expo/html-elements';\n\nexport default function App() {\n  return <A href=\"https://google.com\">Go to Google</A>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SafeAreaContext Components\nDESCRIPTION: Basic imports for the main components and hooks from react-native-safe-area-context.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  SafeAreaView,\n  SafeAreaProvider,\n  SafeAreaInsetsContext,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo FileSystem Module (JavaScript)\nDESCRIPTION: Illustrates the standard ES6 import statement used to access the `expo-file-system` library's functionalities within a React Native or Expo project written in JavaScript or TypeScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport * as FileSystem from 'expo-file-system';\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Module Entry Point in package.json\nDESCRIPTION: Specifies the main entry point of the module package to be the compiled JavaScript file in the build directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"build/ExampleModule.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Skia Documentation Components\nDESCRIPTION: Import statements for documentation-specific React components used to display installation and platform compatibility information.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/skia.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport PlatformsSection from '~/components/plugins/PlatformsSection';\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent from Expo - TypeScript\nDESCRIPTION: This TypeScript snippet imports the registerRootComponent function from the expo package. This function is required to set up the entry point for your React Native or Expo app, ensuring the provided component is rendered at the root native view. No extra dependencies are needed except expo, and it should be placed at the top of your entry file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config Plugin\nDESCRIPTION: Demonstrates how to import and apply a custom config plugin to an Expo configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withMySDK } = require('./my-plugin');\n\nconst config = {\n  name: 'my app',\n};\n\nmodule.exports = withMySDK(config, { apiKey: 'X-XXX-XXX' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe React Native Plugin in app.json\nDESCRIPTION: This snippet shows how to add the @stripe/stripe-react-native config plugin to the app.json file. It includes options for setting the merchantIdentifier for iOS and enabling Google Pay for Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/stripe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"@stripe/stripe-react-native\",\n        {\n          \"merchantIdentifier\": string | string [],\n          \"enableGooglePay\": boolean\n        }\n      ]\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sitemap in Expo Router\nDESCRIPTION: Code snippet demonstrating how to disable the automatically injected /_sitemap route by creating a custom empty sitemap component. This is implemented by creating a null-returning component in app/_sitemap.tsx.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/sitemap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Sitemap() {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Default Android Notification Dismiss Behavior\nDESCRIPTION: Introduced a breaking change for Android: notifications are now automatically dismissed when tapped by default, aligning with iOS behavior. This behavior can be overridden by setting the `autoDismiss` parameter to `false` in the `NotificationContentInput`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nautoDismiss: false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nautoDismiss\n```\n\nLANGUAGE: typescript\nCODE:\n```\nNotificationContentInput\n```\n\n----------------------------------------\n\nTITLE: Converting URL with Non-ASCII Hostname - Expo - JavaScript\nDESCRIPTION: Displays the behavior of the URL API when converting a URL with a non-ASCII hostname to a string. This snippet logs the result of calling toString() on a URL with an emoji domain, highlighting platform differences. It requires the standard or polyfilled URL object; input is a hostname containing a non-ASCII character, and the output differs by environment: punycoded for Web/Node.js or raw on native platforms. This illustrates the sole limitation described in Expo's implementation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(new URL('http://🥓').toString());\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Version Exclusions in Expo\nDESCRIPTION: Configuration in package.json to exclude specific packages from version checking by Expo CLI. Useful when intentionally using non-standard package versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"install\": {\n      \"exclude\": [\"expo-updates\", \"expo-splash-screen\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS App Extensions in app.json for Managed Projects\nDESCRIPTION: This JSON snippet demonstrates how to declare app extensions in the app.json file for managed projects. It uses the extra.eas.build.experimental.ios.appExtensions configuration to specify extension details like targetName, bundleIdentifier, and entitlements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/app-extensions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    ...\n    \"extra\": {\n      \"eas\": {\n        \"build\": {\n          \"experimental\": {\n            \"ios\": {\n              \"appExtensions\": [\n                {\n                  \"targetName\": \"myappextension\",\n                  \"bundleIdentifier\": \"com.myapp.extension\",\n                  \"entitlements\": {\n                    \"com.apple.example\": \"entitlement value\"\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Invalid Navigation Parameters\nDESCRIPTION: Example of refactoring invalid navigation parameters that use non-serializable values like functions to a more appropriate pattern.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\n\nconst navigation = useNavigation();\n\nnavigation.push('Followers', {\n  onPress: profile => {\n    navigation.push('User', { profile });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Device Module from Expo\nDESCRIPTION: This snippet shows how to import the Device module from the expo-device package for use in a JavaScript or TypeScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Importing expo-clipboard Module\nDESCRIPTION: Shows how to import the expo-clipboard module for use in a JavaScript/React Native application. This import statement provides access to clipboard functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard';\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Code Removal Example\nDESCRIPTION: Demonstrates how Platform.OS conditional code is removed during platform-specific bundling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Platform } from 'react-native';\n\nif (Platform.OS === 'ios') {\n  console.log('Hello on iOS');\n}\n```\n\n----------------------------------------\n\nTITLE: Static Route Type Checking Examples\nDESCRIPTION: Examples of valid and invalid static route type checking in Link components\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n✅ <Link href=\"/about\" />\n✅ <Link href=\"/user/1\" />\n✅ <Link href={`/user/${id}`} />\n✅ <Link href={(\"/user\" + id) as Href} />\n// TypeScript errors if href is not a valid route\n❌ <Link href=\"/usser/1\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Locally Simulating Production (Bash)\nDESCRIPTION: Runs the Expo development server using 'npx' without development mode enabled (`--no-dev`) and with JavaScript code minification (`--minify`). This helps reproduce and debug errors like 'Module AppRegistry is not a registered callable module' that might only appear in production builds due to bundling or minification issues.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/common-development-errors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start --no-dev --minify\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in Expo\nDESCRIPTION: This JavaScript snippet shows how to import the global CSS file in the root JavaScript file of an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport './global.css';\n```\n\n----------------------------------------\n\nTITLE: Using TextEncoder and TextDecoder in Expo\nDESCRIPTION: Demonstrates basic text encoding and decoding operations using the global TextEncoder and TextDecoder APIs. Encodes the string 'hello' to a Uint8Array of bytes and decodes it back to text.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/encoding.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// [104, 101, 108, 108, 111]\nconst hello = new TextEncoder().encode('hello');\n\n// \"hello\"\nconst text = new TextDecoder().decode(hello);\n```\n\n----------------------------------------\n\nTITLE: Structuring FirebaseRemoteMessage Interface\nDESCRIPTION: Defines the structure of a Firebase RemoteMessage that triggers a notification delivery on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseRemoteMessage {\n  collapseKey: string | null;\n  data: { [key: string]: string };\n  from: string | null;\n  messageId: string | null;\n  messageType: string | null;\n  originalPriority: number;\n  priority: number;\n  sentTime: number;\n  to: string | null;\n  ttl: number;\n  notification: null | {\n    body: string | null;\n    bodyLocalizationArgs: string[] | null;\n    bodyLocalizationKey: string | null;\n    channelId: string | null;\n    clickAction: string | null;\n    color: string | null;\n    usesDefaultLightSettings: boolean;\n    usesDefaultSound: boolean;\n    usesDefaultVibrateSettings: boolean;\n    eventTime: number | null;\n    icon: string | null;\n    imageUrl: string | null;\n    lightSettings: number[] | null;\n    link: string | null;\n    localOnly: boolean;\n    notificationCount: number | null;\n    notificationPriority: number | null;\n    sound: string | null;\n    sticky: boolean;\n    tag: string | null;\n    ticker: string | null;\n    title: string | null;\n    titleLocalizationArgs: string[] | null;\n    titleLocalizationKey: string | null;\n    vibrateTimings: number[] | null;\n    visibility: number | null;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Sharing Module in JavaScript\nDESCRIPTION: Basic import statement for the expo-sharing module which enables file sharing functionality in Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Canary Release via Shell\nDESCRIPTION: Provides the command sequence to install the latest canary (pre-release) version of the `expo` package using npm, and then uses `npx expo install --fix` to update related project dependencies and attempt to resolve potential version conflicts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Importing Expo MediaLibrary Module in JavaScript\nDESCRIPTION: This JavaScript code snippet shows the standard way to import the `expo-media-library` module into your project. This makes all the functions and components exported by the library available under the `MediaLibrary` namespace.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n```\n\n----------------------------------------\n\nTITLE: Configuring appVersion Runtime Policy in Expo\nDESCRIPTION: Sets the runtime version to the project's current 'version' property. This is useful for projects with custom native code that update the 'version' field after every public release.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"appVersion\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"appVersion\"\n    },\n    \"version\": \"1.0.0\",\n    \"ios\": {\n      \"buildNumber\": \"1\"\n    },\n    \"android\": {\n      \"versionCode\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Contacts on Android and iOS\nDESCRIPTION: Bug fixes for addContactAsync and updateContactAsync methods. On Android, addContactAsync now returns the correct ID, and updateContactAsync updates an existing contact instead of creating a new one. On iOS, updateContactAsync now correctly returns a contact ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\naddContactAsync(contactData)\nupdateContactAsync(contactId, updatedData)\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component from expo-image\nDESCRIPTION: This snippet shows how to import the Image component from the expo-image package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Image } from 'expo-image';\n```\n\n----------------------------------------\n\nTITLE: Inlining Environment Variables in JavaScript\nDESCRIPTION: This code adds support for inlining environment variables using the EXPO_PUBLIC_ prefix in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst publicEnvs = Object.entries(process.env)\n  .filter(([key]) => key.startsWith('EXPO_PUBLIC_'))\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n\nprocess.env.APP_MANIFEST = JSON.stringify({\n  ...JSON.parse(process.env.APP_MANIFEST),\n  extra: {\n    ...JSON.parse(process.env.APP_MANIFEST).extra,\n    ...publicEnvs,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Android Native Code for Debugging in Expo\nDESCRIPTION: Command to generate native Android code from an Expo project for debugging in Android Studio. This creates an android directory at the project root that can be used for native debugging.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild -p android\n```\n\n----------------------------------------\n\nTITLE: Importing APIInstallSection Component in JavaScript\nDESCRIPTION: Imports the `APIInstallSection` component from a local project path (`~/components/plugins/InstallSection`). This component is used within the documentation page itself, likely to render a standardized section for displaying installation instructions sourced from the provided `href`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/flash-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: API Audit Status Table in Markdown\nDESCRIPTION: A markdown table displaying the audit status of various Expo APIs including their owners, review dates, test status, documentation status, and additional notes. This provides a quick reference for the current state of each API component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/API Design (SDK Audit).md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| API | Owner | Review Date | Tests | Docs | Notes |\n| --- | ----- | ----------- | ----- | ---- | ----- |\n| Application | James | August 2019 | ⚠️ | ✅ | |\n| Apple Authentication | Eric | Sept 2019 | Needs tests | ✅ | Needs web implementation (and possibly Android) |\n| Battery | James | August 2019 | ⚠️ | ✅ | Android implementation needs work |\n| Brightness | Eric | 2018 | Revisit test-suite | ✅ | |\n| Cellular | James | September 2019 | ⚠️ | ✅ | |\n| Crypto | Evan | February 2019 | ✅ | ✅ | |\n| Device | James | August 2019 | ⚠️ | ✅ | |\n| Network | James | TBD | ⚠️ | | |\n| Random | Evan | February 2019 | ✅ | ✅ | |\n| Screen Orientation | Quin | 2018 | Revisit test-suite | ✅ | Some open issues; some issues on web |\n```\n\n----------------------------------------\n\nTITLE: Component Reference in Markdown\nDESCRIPTION: Reference to React Native View component usage\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/screens.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<View>\n```\n\n----------------------------------------\n\nTITLE: Scheduling Daily Recurring Notifications in JavaScript\nDESCRIPTION: This code shows how to use the new DailyTriggerInput to schedule a daily recurring notification for a specific hour and minute on both iOS and Android platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nDailyTriggerInput {\n  hour: number,\n  minute: number\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Contacts Module\nDESCRIPTION: Shows how to import the expo-contacts module in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for Tracking Description\nDESCRIPTION: This XML snippet demonstrates how to add the `NSUserTrackingUsageDescription` key to the `Info.plist` file for iOS projects. The string value associated with this key is displayed to the user when the app requests permission to track them, explaining why the permission is needed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-tracking-transparency/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSUserTrackingUsageDescription</key>\n<string>Your custom usage description string here.</string>\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Smart Banner in Expo Router Static Rendering\nDESCRIPTION: This React component demonstrates how to add the Apple Smart Banner meta tag in a statically rendered website using Expo Router. It's implemented in the app/+html.js file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Root({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\n        <meta name=\"apple-itunes-app\" content=\"app-id={ITUNES_ID}\" />\n\n        {/* Other head elements... */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Global CSS Style (CSS)\nDESCRIPTION: This CSS snippet defines a simple global style for elements with the class name `container`, setting their background color to red. This stylesheet can be imported into any component to apply the styles globally (primarily for web).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n```css styles.css\n.container {\n  background-color: red;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Config Plugin Implementation\nDESCRIPTION: TypeScript example of a config plugin that modifies the app name configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin } from '@expo/config-plugins';\n\nconst withNewName: ConfigPlugin<{ name?: string }> = (config, { name = 'my-app' } = {}) => {\n  config.name = name;\n  return config;\n};\n\nexport default withNewName;\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Web Output in app.json\nDESCRIPTION: Configuration for setting the web output target and bundler in the Expo app config file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/publishing-websites.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"output\": \"server\",\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Themed Components with Variants\nDESCRIPTION: Shows how to create a themed Text component with size and color variants using the create-primitives utility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { create } from './create-primitives';\n\nconst Heading = create(Text, {\n  base: {\n    fontFamily: 'Helvetica',\n  },\n\n  variants: {\n    size: {\n      large: {\n        fontSize: 28,\n        lineHeight: 34,\n      },\n      medium: {\n        fontSize: 22,\n        lineHeight: 28,\n      },\n      small: {\n        fontSize: 18,\n        lineHeight: 22,\n      },\n    },\n    color: {\n      success: {\n        color: 'green',\n      },\n      danger: {\n        color: 'red',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Speech Module\nDESCRIPTION: Shows how to import the expo-speech module in a JavaScript/React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/speech.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Speech from 'expo-speech';\n```\n\n----------------------------------------\n\nTITLE: Overriding Splash Screen Image Resize Mode - Android strings.xml\nDESCRIPTION: This snippet from android/app/src/main/res/values/strings.xml sets the expo_splash_screen_resize_mode string, which controls how the splash screen image is scaled (contain, cover, or native). Use the value fitting your image and layout needs. The rest of the strings may include your application's name or other localization keys.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n--- a/android/app/src/main/res/values/strings.xml\\n+++ b/android/app/src/main/res/values/strings.xml\\n <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n <resources>\\n   <string name=\\\"app_name\\\">sdk42</string>\\n+  <string name=\\\"expo_splash_screen_resize_mode\\\">contain|cover|native</string>\\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Sending Slack Messages from EAS Build Workflow\nDESCRIPTION: Example YAML configuration showing various ways to send Slack messages during EAS builds. Demonstrates usage with plain text messages, Block Kit layouts, conditional sending based on build status, and different webhook URL configurations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Slack your team from custom build\n  steps:\n    # @info #\n    - eas/send_slack_message:\n        name: Send Slack message to a given webhook URL\n        inputs:\n          message: 'This is a message to plain input URL'\n          slack_hook_url: 'https://hooks.slack.com/services/[rest_of_hook_url]'\n    # @end #\n    - eas/send_slack_message:\n        name: Send Slack message to a default webhook URL from SLACK_HOOK_URL secret\n        inputs:\n          message: 'This is a test message to default URL from SLACK_HOOK_URL secret'\n    - eas/send_slack_message:\n        name: Send Slack message to a webhook URL from specified secret\n        inputs:\n          message: 'This is a test message to a URL from specified secret'\n          slack_hook_url: ${ eas.env.ANOTHER_SLACK_HOOK_URL }\n\n    - eas/build\n    - eas/send_slack_message:\n        if: ${ always() }\n        name: Send Slack message when the build finishes (Android)\n        inputs:\n          message: |\n            This is a test message when Android build finishes\n            Status: `${ steps.run_gradle.status_text }`\n            Link: `${ eas.job.expoBuildUrl }`\n    - eas/send_slack_message:\n        if: ${ always() }\n        name: Send Slack message when the build finishes (iOS)\n        inputs:\n          message: |\n            This is a test message when iOS build finishes\n            Status: `${ steps.run_fastlane.status_text }`\n            Link: `${ eas.job.expoBuildUrl }`\n    - eas/send_slack_message:\n        if: ${ failure() }\n        name: Send Slack message when the build fails (Android)\n        inputs:\n          message: |\n            This is a test message when Android build fails\n            Error: `${ steps.run_gradle.error_text }`\n    - eas/send_slack_message:\n        if: ${ failure() }\n        name: Send Slack message when the build fails (iOS)\n        inputs:\n          message: |\n            This is a test message when iOS build fails\n            Error: `${ steps.run_fastlane.error_text }`\n    - eas/send_slack_message:\n        if: ${ success() }\n        name: Send Slack message when the build succeeds\n        inputs:\n          message: |\n            This is a test message when build succeeds\n    - eas/send_slack_message:\n        if: ${ always() }\n        name: Send Slack message with Slack Block Kit layout\n        inputs:\n          payload:\n            blocks:\n              - type: section\n                text:\n                  type: mrkdwn\n                  text: |-\n                    Hello, Sir Developer\n\n                     *Your build has finished!*\n              - type: divider\n              - type: section\n                text:\n                  type: mrkdwn\n                  text: |-\n                    *${ eas.env.EAS_BUILD_ID }*\n                    *Status:* `${ steps.run_gradle.status_text }`\n                    *Link:* `${ eas.job.expoBuildUrl }`\n                accessory:\n                  type: image\n                  image_url: [your_image_url]\n                  alt_text: alt text for image\n              - type: divider\n              - type: actions\n                elements:\n                  - type: button\n                    text:\n                      type: plain_text\n                      text: 'Do a thing :rocket:'\n                      emoji: true\n                    value: a_thing\n                  - type: button\n                    text:\n                      type: plain_text\n                      text: 'Do another thing :x:'\n                      emoji: true\n                    value: another_thing\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Podfile.properties.json\nDESCRIPTION: JSON file to be added to the iOS directory for specifying the JavaScript engine.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo.jsEngine\": \"hermes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SASS Dependency (Shell)\nDESCRIPTION: This shell command demonstrates how to install the `sass` package as a development dependency using Yarn. Installing this package enables partial SCSS/SASS support in Expo Metro, provided CSS support is also enabled in `metro.config.js`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n<Terminal cmd={['$ yarn add -D sass']} />\n```\n\n----------------------------------------\n\nTITLE: Importing KeepAwake API from expo-keep-awake - JavaScript\nDESCRIPTION: This snippet illustrates how to import the KeepAwake module from the expo-keep-awake package in JavaScript. The import statement is typically required for accessing the imperative KeepAwake API; however, this example does not demonstrate usage beyond importing. Dependencies: expo-keep-awake. This is the standard ES6 import syntax.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n\n```\n\n----------------------------------------\n\nTITLE: Importing the ScreenCapture Module in JavaScript\nDESCRIPTION: Shows the standard way to import the entire `expo-screen-capture` module as a namespace (`ScreenCapture`) in a JavaScript or TypeScript file. This allows access to all exported functions and constants from the library, such as `preventScreenCaptureAsync` or `addScreenshotListener`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\n```\n\n----------------------------------------\n\nTITLE: Initializing Android Theme Module with Kotlin\nDESCRIPTION: Basic Kotlin implementation of the ExpoSettings module with a simple getTheme function that returns a default system theme.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.settings\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoSettingsModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Function(\"getTheme\") {\n      return@Function \"system\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Package\nDESCRIPTION: Basic import statement for accessing all Expo functionality in a TypeScript React environment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Expo from 'expo';\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for expo-modules-core\nDESCRIPTION: Specifies the source directories and glob patterns to include various C++ source files for the project, including Android-specific and common sources.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/android/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_DIR ${CMAKE_SOURCE_DIR}/src)\nset(COMMON_DIR ${CMAKE_SOURCE_DIR}/../common/cpp)\nfile(GLOB sources_android \"${SRC_DIR}/main/cpp/*.cpp\")\nfile(GLOB sources_android_types \"${SRC_DIR}/main/cpp/types/*.cpp\")\nfile(GLOB sources_android_javaclasses \"${SRC_DIR}/main/cpp/javaclasses/*.cpp\")\nfile(GLOB sources_android_javaclasses \"${SRC_DIR}/main/cpp/decorators/*.cpp\")\nfile(GLOB common_sources \"${COMMON_DIR}/*.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Prebuilding for Specific Platform\nDESCRIPTION: Use the --platform flag to generate native code for a specific platform (iOS in this example).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/prebuild.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo prebuild --platform ios\n```\n\n----------------------------------------\n\nTITLE: Expo Crypto Module Import Statement\nDESCRIPTION: Standard import statement for using the expo-crypto module in a project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Crypto from 'expo-crypto';\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Configuration with Expo\nDESCRIPTION: Essential Next.js configuration for Expo integration using @expo/next-adapter.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withExpo } = require('@expo/next-adapter');\n\nmodule.exports = withExpo({\n  transpilePackages: [\n    'react-native',\n    'expo',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-linking Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the 'expo-linking' module in a JavaScript/TypeScript file. It imports all exports from the module under the alias 'Linking', allowing access to its deep linking functionalities.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Linking from 'expo-linking';\n```\n\n----------------------------------------\n\nTITLE: Basic Brightness Control in React Native\nDESCRIPTION: Example showing how to request brightness permissions and set system brightness to maximum using expo-brightness. Uses React hooks and async/await for permission handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/brightness.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Brightness from 'expo-brightness';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        Brightness.setSystemBrightnessAsync(1);\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Brightness Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: URL Prop Implementation - iOS\nDESCRIPTION: iOS module implementation for handling URL prop updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoWebViewModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView.self) {\n      Prop(\"url\") { (view, url: URL) in\n        if view.webView.url != url {\n          let urlRequest = URLRequest(url: url)\n          view.webView.load(urlRequest)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Google Authentication Default Scopes\nDESCRIPTION: Minimum scopes required for optimal usage of Google authentication with services like Firebase and Auth0.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/auth-session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n['openid', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email']\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color Property\nDESCRIPTION: Demonstrates how to define a background color property setter for native views in both platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nProp(\"background\") { (view: UIView, color: UIColor) in\n  view.backgroundColor = color\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nProp(\"background\") { view: View, @ColorInt color: Int ->\n  view.setBackgroundColor(color)\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Background Audio Configuration\nDESCRIPTION: Configuration example for enabling background audio playback in iOS standalone apps using app.json settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\n          \"audio\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Crypto Module\nDESCRIPTION: This snippet shows how to import the expo-crypto module in a JavaScript file. It's a simple import statement that brings in all exports from the module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Crypto from 'expo-crypto';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo SDK Packages\nDESCRIPTION: Example of importing various Expo SDK packages in JavaScript code to access device functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CameraView } from 'expo-camera';\nimport * as Contacts from 'expo-contacts';\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Barcode Scanner Plugin in app.json\nDESCRIPTION: JSON configuration for the expo-barcode-scanner plugin in app.json, demonstrating how to set camera permissions for iOS devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/bar-code-scanner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-barcode-scanner\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access camera.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Localization in app.json\nDESCRIPTION: Configuration example showing how to enable expo-localization plugin in the Expo project configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DailyNotificationTrigger Interface for Android\nDESCRIPTION: Defines an Android-specific trigger for daily notifications, specifying hour and minute.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DailyNotificationTrigger {\n  type: 'daily';\n  hour: number;\n  minute: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Camera Plugin in app.json\nDESCRIPTION: JSON configuration for expo-camera plugin in app.json/app.config.js to set camera and microphone permissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/camera-legacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Theme Example App\nDESCRIPTION: Complete React Native example app with theme toggle functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Settings from 'expo-settings';\nimport { Button, Text, View } from 'react-native';\n\nexport default function App() {\n  const theme = Settings.getTheme();\n  const nextTheme = theme === 'dark' ? 'light' : 'dark';\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Theme: {Settings.getTheme()}</Text>\n      <Button title={`Set theme to ${nextTheme}`} onPress={() => Settings.setTheme(nextTheme)} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-notifications in bare React Native projects\nDESCRIPTION: Command to install the expo-notifications package using npm in a bare React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-notifications\n```\n\n----------------------------------------\n\nTITLE: Creating Fingerprint with Options in TypeScript\nDESCRIPTION: Shows the function signature for creating a fingerprint with optional parameters, including the return type.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createFingerprintAsync(projectRoot: string, options?: Options): Promise<Fingerprint>;\n```\n\n----------------------------------------\n\nTITLE: Defining ExpoRadialChartModule for Android\nDESCRIPTION: Defines the ExpoRadialChartModule for Android, including the 'data' prop and its setter function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.radialchart\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoRadialChartModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoRadialChart\")\n\n    View(ExpoRadialChartView::class) {\n      Prop(\"data\") { view: ExpoRadialChartView, prop: ArrayList<Series> ->\n        view.setChartData(prop);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Level 3 Heading with @expo/html-elements in TypeScript\nDESCRIPTION: This snippet utilizes the H3 heading component from @expo/html-elements to provide consistent, accessible level 3 headings across web and native. The dependency is @expo/html-elements, and the main input is children content. The rendered output maintains proper semantic heading structure on all platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H3 } from '@expo/html-elements';\nexport default () => <H3>Example<H3/>\n```\n\n----------------------------------------\n\nTITLE: Importing Expo AV Library Components\nDESCRIPTION: Basic import statement for using Audio and Video components from the expo-av package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Audio, Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Plugin in TypeScript\nDESCRIPTION: This TypeScript code defines the 'withMyApiKey' config plugin. It imports necessary types and functions from Expo's config plugins, and logs a message when executed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin } from 'expo/config-plugins';\n\nconst withMyApiKey: ConfigPlugin = config => {\n  console.log('my custom plugin');\n  return config;\n};\n\nexport default withMyApiKey;\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Function in Kotlin\nDESCRIPTION: Defines a native synchronous function that will be exported to JavaScript. The function can receive up to 8 arguments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nFunction(\"syncFunction\") { message: String ->\n  return@Function message\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Article Component Across Platforms\nDESCRIPTION: Demonstrates the Article component from @expo/html-elements, which renders as an article element on web and a View on other platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Article } from '@expo/html-elements';\n\nexport default () => <Article />;\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting the title, sidebar title, TOC visibility and page description.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: EAS Build\nsidebar_title: Introduction\nhideTOC: true\ndescription: EAS Build is a hosted service for building app binaries for your Expo and React Native projects.\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Metro Optimization and Tree Shaking\nDESCRIPTION: These environment variable settings enable Metro graph optimization and tree shaking in production mode. They are added to the .env file of the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nEXPO_UNSTABLE_METRO_OPTIMIZE_GRAPH=1\n```\n\nLANGUAGE: shell\nCODE:\n```\nEXPO_UNSTABLE_TREE_SHAKING=1\n```\n\n----------------------------------------\n\nTITLE: Importing AuthSession API in JavaScript\nDESCRIPTION: Illustrates importing the AuthSession module from expo-auth-session for use within JavaScript/TypeScript projects. This enables access to the authentication API and its helper methods for managing the browser authentication session. Requires installation of expo-auth-session (and expo-crypto as a peer dependency).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/auth-session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicon in Expo app.json\nDESCRIPTION: Configuration for setting up favicon in Expo applications through app.json web settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"web\": {\n    \"favicon\": \"./assets/favicon.png\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Screen Capture Module in JavaScript\nDESCRIPTION: This snippet shows the standard method for importing the entire `expo-screen-capture` module in a JavaScript or React Native file. This allows access to all the functions and constants provided by the library, such as `preventScreenCaptureAsync`, `allowScreenCaptureAsync`, and `addScreenshotListener`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\n```\n\n----------------------------------------\n\nTITLE: Clearing Expo Cache to Resolve EXPO_ROUTER_APP_ROOT Issue\nDESCRIPTION: Provides a command to clear the Expo cache, which can potentially resolve the undefined EXPO_ROUTER_APP_ROOT issue.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/troubleshooting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Importing Facebook Auth Provider\nDESCRIPTION: Import statement for using Facebook authentication provider with AuthSession. Note that this provider is marked as deprecated.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Facebook from 'expo-auth-session/providers/facebook';\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific JS Engine Configuration\nDESCRIPTION: Example showing how to configure different JavaScript engines for specific platforms, with Hermes as default and JSC specifically for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/configuring-js-engines.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"jsEngine\": \"hermes\",\n    \"ios\": {\n      \"jsEngine\": \"jsc\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Module Project with Yarn\nDESCRIPTION: This command uses Yarn to initialize a new Expo module project with scaffolding for iOS, Android, and TypeScript. It also includes an example project for interacting with the module from within an app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/create-expo-module/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create expo-module\n```\n\n----------------------------------------\n\nTITLE: Vercel Configuration v3\nDESCRIPTION: Updated Vercel configuration file (vercel.json) version 3 with simplified build commands and routing rules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buildCommand\": \"expo export -p web\",\n  \"outputDirectory\": \"dist/client\",\n  \"functions\": {\n    \"api/index.ts\": {\n      \"runtime\": \"@vercel/node@3.0.11\",\n      \"includeFiles\": \"dist/server/**\"\n    }\n  },\n  \"rewrites\": [\n    {\n      \"source\": \"/(.*)\",\n      \"destination\": \"/api/index.ts\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Imperative Keep Awake Functions in React Native\nDESCRIPTION: Example demonstrating the imperative approach to keep the screen awake using activateKeepAwake() and deactivateKeepAwake() functions. This gives more control over when the device should stay awake.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';\nimport React from 'react';\nimport { Button, View } from 'react-native';\n\nexport default class KeepAwakeExample extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button onPress={this._activate} title=\"Activate\" />\n        <Button onPress={this._deactivate} title=\"Deactivate\" />\n      </View>\n    );\n  }\n\n  _activate = () => {\n    /* @info Screen will remain on after called until <strong>deactivateKeepAwake()</strong> is called. */ activateKeepAwake(); /* @end */\n    alert('Activated!');\n  };\n\n  _deactivate = () => {\n    /* @info Deactivates KeepAwake, or does nothing if it was never activated. */ deactivateKeepAwake(); /* @end */\n    alert('Deactivated!');\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Build to Use Expo CLI for Bundling (Gradle Diff)\nDESCRIPTION: This diff shows the necessary changes in the `android/app/build.gradle` file for a bare React Native project. It modifies the `react` block to use the Expo CLI (`@expo/cli`) for the `export:embed` command when creating production bundles, replacing the default `react-native bundle` command. This ensures Expo's Metro configuration is correctly applied during the Android build process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n```diff\nreact {\n  ...\n+     // Use Expo CLI to bundle the app, this ensures the Metro config\n+     // works correctly with Expo projects.\n+     cliFile = new File([\"node\", \"--print\", \"require.resolve('@expo/cli')\"].execute(null, rootDir).text.trim())\n+     bundleCommand = \"export:embed\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Sequential Steps in EAS Build\nDESCRIPTION: Illustrates a workflow with multiple steps that checkout the project, install dependencies, and run tests in sequence.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run tests\n  steps:\n    # @info #\n    - eas/checkout\n    - run:\n        name: Install dependencies\n        command: npm install\n    - run:\n        name: Run tests\n        command: |\n          echo \"Running tests...\"\n          npm test\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-location Plugin in app.json (JSON)\nDESCRIPTION: Example configuration for the `expo-location` config plugin within the `plugins` array in `app.json`. This snippet shows how to set the iOS `NSLocationAlwaysAndWhenInUseUsageDescription` permission message. Other properties like `locationAlwaysPermission`, `locationWhenInUsePermission`, `isIosBackgroundLocationEnabled`, and `isAndroidBackgroundLocationEnabled` can also be configured here.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json app.json\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-location\",\n        {\n          \"locationAlwaysAndWhenInUsePermission\": \"Allow $(PRODUCT_NAME) to use your location.\"\n        }\n      ]\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Debugging Fingerprint Generation\nDESCRIPTION: Command to generate a fingerprint with debug output. This is useful for identifying files causing inconsistencies across different environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/continuous-deployment.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo-updates fingerprint:generate --debug\n```\n\n----------------------------------------\n\nTITLE: Importing Random Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Random module from expo-random. It allows access to the module's functionality for generating random bytes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/random.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Random from 'expo-random';\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentPicker in app.json for Expo\nDESCRIPTION: This snippet shows how to configure the expo-document-picker plugin in the app.json file to enable iCloud storage features for iOS builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-document-picker\",\n        {\n          \"iCloudContainerEnvironment\": \"Production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-calendar\nDESCRIPTION: XML snippet to add NSCalendarsUsageDescription and NSRemindersUsageDescription keys to the iOS Info.plist file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-calendar/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCalendarsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your calendar</string>\n<key>NSRemindersUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your reminders</string>\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/html-elements using Yarn\nDESCRIPTION: This command uses the Yarn package manager to add the `@expo/html-elements` library to the current project's dependencies. This step is necessary before the components provided by the package can be imported and used in the application code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @expo/html-elements\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-media-library Plugin in JSON\nDESCRIPTION: This JSON snippet shows how to configure the `expo-media-library` config plugin within the `plugins` array in `app.json` or `app.config.js`. It sets iOS permission messages for accessing and saving photos, and enables the request for `ACCESS_MEDIA_LOCATION` permission on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"Allow $(PRODUCT_NAME) to access your photos.\",\n          \"savePhotosPermission\": \"Allow $(PRODUCT_NAME) to save photos.\",\n          \"isAccessMediaLocationEnabled\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing EAS Updates\nDESCRIPTION: Command to view specific update details using update group ID\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:view [update-group-id]\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar Component in Expo\nDESCRIPTION: Code snippet showing how to import the StatusBar component from the expo-status-bar library, which comes pre-installed in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationChannelGroup Interface for Android in TypeScript\nDESCRIPTION: Defines an interface for Android notification channel groups, which allow organizing notification channels into groups. This includes properties for identification, description, blocking status, and a list of associated channels.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationChannelGroup {\n  id: string;\n  name: string | null;\n  description?: string | null;\n  isBlocked?: boolean;\n  channels: NotificationChannel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Nested Screen in React Navigation\nDESCRIPTION: This code demonstrates how to navigate to a nested screen in React Navigation. It uses the navigation.navigate method, passing the root navigator name, screen name, and params with the nested screen name.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nnavigation.navigate('root', {\n  screen: 'settings',\n  params: {\n    screen: 'media',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Platform-Specific CSS Modules\nDESCRIPTION: Illustrates the correct way to import platform-specific CSS Modules (e.g., `App.module.ios.css` or `App.module.android.css`). The import statement should omit the platform extension (`.ios` or `.android`) and the `.css` extension (e.g., `import styles from './App.module';`), allowing Metro to resolve the appropriate file based on the target platform.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n```diff App.js\n// Importing `./App.module.ios.css`:\n- import styles from './App.module.css';\n+ import styles from './App.module';\n```\n```\n\n----------------------------------------\n\nTITLE: Running an Android Build on an Emulator with EAS CLI\nDESCRIPTION: This command uses the EAS CLI to download and install a specific build on an Android Emulator. It will show a list of available builds for selection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/apk.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:run -p android\n```\n\n----------------------------------------\n\nTITLE: Caching Podfile.lock Configuration in EAS Build\nDESCRIPTION: JSON configuration to cache the iOS Podfile.lock file by adding it to the cache.paths array in the build profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/caching.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"cache\": {\n        \"paths\": [\"./ios/Podfile.lock\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in Metro Config (SDK 49)\nDESCRIPTION: Metro configuration for enabling CSS support in SDK 49 by setting isCSSEnabled to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  isCSSEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Firebase Messaging Dependency Update\nDESCRIPTION: Gradle dependency update removing firebase-iid in favor of newer firebase-messaging library v21+\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n  // Remove this line if present\n  // implementation 'com.google.firebase:firebase-iid'\n  implementation 'com.google.firebase:firebase-messaging:21+'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Asset Extensions\nDESCRIPTION: Demonstrates how to add support for additional file extensions to Metro's asset resolver.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.assetExts.push(\n  // Adds support for `.db` files for SQLite databases\n  'db'\n);\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Minimal Fastlane Build Workflow for iOS - Expo (YAML)\nDESCRIPTION: This YAML snippet provides a streamlined configuration for building an iOS app with essential EAS steps and the Fastlane integration. It omits explicit Apple team ID and credential handling, focusing instead on standard step order: checkout, dependencies installation, prebuild, update configuration, Gymfile generation, and running Fastlane. Intended for standard projects using common defaults; expects iOS project directory layout. Output is the generated iOS build artifact.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\\n  name: Build iOS app\\n  steps:\\n    - eas/checkout\\n    - eas/install_node_modules\\n    - eas/prebuild\\n    - eas/configure_eas_update\\n    - eas/generate_gymfile_template\\n    # @info #\\n    - eas/run_fastlane\\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Defining Directive Data Type in TypeScript\nDESCRIPTION: TypeScript interface for the Directive data structure in Expo Updates. Directives are used to send commands to the client, such as rolling back to an embedded update, with parameters specific to the directive type.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Directive = {\n  type: string;\n  parameters?: { [key: string]: any };\n  extra?: { [key: string]: any };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Script in Package.json\nDESCRIPTION: Package.json configuration for building the TypeScript function using ncc to compile into a single JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"ncc build ./src/index.ts -o build/ --minify --no-cache --no-source-map-register\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Export in app.plugin.js\nDESCRIPTION: Minimal implementation of an app.plugin.js file that exports a config modifier function using CommonJS syntax.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = config => config;\n```\n\n----------------------------------------\n\nTITLE: Importing Battery Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Battery module from expo-battery. This import statement is typically used at the beginning of a file to access the full Battery API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: EAS Update Publication Output\nDESCRIPTION: Terminal output showing successful publication of an update, including the dashboard link for sharing with team members\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/review/share-previews-with-your-team.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n✔ Published!\n\n...\nEAS Dashboard      https://expo.dev/accounts/your-account/projects/your-project/updates/708b05d8-9bcf-4212-a052-ce40583b04fd\n```\n\n----------------------------------------\n\nTITLE: Complete Localized App Store Info Configuration\nDESCRIPTION: Full configuration example for localized app information including title, subtitle, description, keywords, release notes, and various URLs for marketing, support, and privacy.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"App title\",\n        \"subtitle\": \"Subtitle for your app\",\n        \"description\": \"A longer description of what your app does\",\n        \"keywords\": [\"keyword\", \"other-keyword\"],\n        \"releaseNotes\": \"Bug fixes and improved stability\",\n        \"promoText\": \"Short tagline for your app\",\n        \"marketingUrl\": \"https://example.com/en\",\n        \"supportUrl\": \"https://example.com/en/help\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\",\n        \"privacyChoicesUrl\": \"https://example.com/en/privacy/choices\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Virtual Error Boundary Implementation Example\nDESCRIPTION: Demonstrates the virtual implementation of how error boundaries are wrapped around route components in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/error-handling.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Route({ ErrorBoundary, Component }) {\n  return (\n    <Try catch={ErrorBoundary}>\n      <Component />\n    </Try>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install Build on iOS Simulator\nDESCRIPTION: Command to run and install a specific build on the iOS Simulator, allowing selection from available builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/simulators.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:run -p ios\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Type Checking Examples\nDESCRIPTION: Examples of valid and invalid dynamic route type checking with parameters\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n✅ <Link href={{ pathname: \"/user/[id]\", params: { id: 1 }}} />\n// TypeScript errors as href is valid, but it should be a HrefObject with params\n❌ <Link href=\"/user/[id]\" />\n// TypeScript errors as params contain invalid keys\n❌ <Link href={{ pathname: \"/user/[id]\", params: { _id: 1 }}} />\n// TypeScript errors as params contain unknown keys\n❌ <Link href={{ pathname: \"/user/[id]\", params: { id: 1, id2: 2 }}} />\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Files to .gitignore\nDESCRIPTION: Configuration for .gitignore to exclude local environment files in projects migrating to SDK 49 or above.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# local env files\n.env*.local\n```\n\n----------------------------------------\n\nTITLE: Using the Same Function Multiple Times in a Workflow\nDESCRIPTION: Demonstrates how to use a function multiple times in a workflow by assigning unique IDs to each invocation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Functions Demo\n  steps:\n    - random:\n        id: random_1\n    - random:\n        id: random_2\n    - run:\n        name: Print random numbers\n        inputs:\n          random_1: ${ steps.random_1.value }\n          random_2: ${ steps.random_2.value }\n        command: |\n          echo \"${ inputs.random_1 }\"\n          echo \"${ inputs.random_2 }\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project with bare-minimum template\nDESCRIPTION: Command to create a new Expo project named 'my-app' using the bare-minimum template, which provides support for Expo SDK packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer API from Expo Sensors (JavaScript)\nDESCRIPTION: This snippet illustrates the JavaScript ES6 import statement for acquiring both the Magnetometer and MagnetometerUncalibrated modules from the expo-sensors package. It is fundamental for any file or component intending to access these sensor APIs in an Expo or React Native project. No other functionality is shown, and dependencies require expo-sensors to be installed and linked in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS WebView Module Definition\nDESCRIPTION: Defines the iOS module interface including event handlers and URL property management for the WebView component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoWebViewModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView.self) {\n      Events(\"onLoad\")\n\n      Prop(\"url\") { (view, url: URL) in\n        if view.webView.url != url {\n          let urlRequest = URLRequest(url: url)\n          view.webView.load(urlRequest)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Lifecycle Listener in Kotlin\nDESCRIPTION: Example of ApplicationLifecycleListener implementation in Kotlin, showing how to handle onCreate Application lifecycle event.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.mylib\n\nimport android.app.Application\nimport expo.modules.core.interfaces.ApplicationLifecycleListener\n\nclass MyLibApplicationLifecycleListener : ApplicationLifecycleListener {\n  override fun onCreate(application: Application) {\n    // Your setup code in `Application.onCreate`.\n    doSomeSetupInApplicationOnCreate(application)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Config with Plugins Array\nDESCRIPTION: Shows how to configure multiple plugins using the simplified plugins array syntax in app.config.js.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  name: 'my app',\n  plugins: [\n    [withBar, 'input 1'],\n    [withFoo, 'input 2'],\n    [withDelta, 'input 3'],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Sensors Plugin in app.json\nDESCRIPTION: Example configuration for expo-sensors plugin in app.json to set motion permission message on iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-apple-authentication in bare React Native projects\nDESCRIPTION: Command to install the expo-apple-authentication package using npx expo install in a bare React Native project. This needs to be run after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-apple-authentication/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-apple-authentication\n```\n\n----------------------------------------\n\nTITLE: Custom Metro Resolver Configuration\nDESCRIPTION: Implementation of custom module resolution in Metro config.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName.startsWith('my-custom-resolver:')) {\n    return {\n      filePath: 'path/to/file',\n      type: 'sourceFile',\n    };\n  }\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing IntentLauncher Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the entire IntentLauncher module in JavaScript. This import statement allows access to all functions and constants provided by the expo-intent-launcher library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint Script to package.json\nDESCRIPTION: This snippet demonstrates how to add a 'lint' script to the package.json file to run ESLint.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"eslint .\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-location with Config Plugin (JSON)\nDESCRIPTION: Defines the app.json configuration for integrating expo-location using the config plugin in an Expo/React Native project. This sets permission messages (e.g., NSLocationAlwaysAndWhenInUseUsageDescription) for iOS, and demonstrates how to supply them for use during the build process. Dependencies: expo-location; Prerequisite: Config plugin usage with config-plugins. Key parameter: locationAlwaysAndWhenInUsePermission sets the iOS permission prompt. Input: none (to be merged with app.json); Output: updated app configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\n      [\\n        \\\"expo-location\\\",\\n        {\\n          \\\"locationAlwaysAndWhenInUsePermission\\\": \\\"Allow $(PRODUCT_NAME) to use your location.\\\"\\n        }\\n      ]\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Environment Proxy Variables\nDESCRIPTION: Shell environment variables configuration for proxy settings in .bashrc, .bash_profile, or .zshrc files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/proxies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTP_PROXY=\"http://localhost:8888\"\nexport http_proxy=\"http://localhost:8888\"\nexport ALL_PROXY=\"http://localhost:8888\"\nexport all_proxy=\"http://localhost:8888\"\nexport HTTPS_PROXY=\"http://localhost:8888\"\nexport https_proxy=\"http://localhost:8888\"\n```\n\n----------------------------------------\n\nTITLE: Setting npm Proxy Configuration\nDESCRIPTION: npm proxy configuration in .npmrc file to route traffic through localhost proxy.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/proxies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nhttp_proxy=http://localhost:8888\nhttps_proxy=http://localhost:8888\n```\n\n----------------------------------------\n\nTITLE: Native Clipboard Event Handler Implementation\nDESCRIPTION: Example implementation of clipboard change event handling in native modules. Shows setup of event listeners and event emission to JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nlet CLIPBOARD_CHANGED_EVENT_NAME = \"onClipboardChanged\"\n\npublic class ClipboardModule: Module {\n  public func definition() -> ModuleDefinition {\n    Events(CLIPBOARD_CHANGED_EVENT_NAME)\n\n    OnStartObserving {\n      NotificationCenter.default.addObserver(\n        self,\n        selector: #selector(self.clipboardChangedListener),\n        name: UIPasteboard.changedNotification,\n        object: nil\n      )\n    }\n\n    OnStopObserving {\n      NotificationCenter.default.removeObserver(\n        self,\n        name: UIPasteboard.changedNotification,\n        object: nil\n      )\n    }\n  }\n\n  @objc\n  private func clipboardChangedListener() {\n    sendEvent(CLIPBOARD_CHANGED_EVENT_NAME, [\n      \"contentTypes\": availableContentTypes()\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Contacts Usage in React Native\nDESCRIPTION: Example React Native component demonstrating basic usage of the expo-contacts module. It requests permissions and fetches the first contact's email if available.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/contacts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport * as Contacts from 'expo-contacts';\n\nexport default function App() {\n  useEffect(() => {\n    (async () => {\n      const { status } = await Contacts.requestPermissionsAsync();\n      if (status === 'granted') {\n        const { data } = await Contacts.getContactsAsync({\n          fields: [Contacts.Fields.Emails],\n        });\n\n        if (data.length > 0) {\n          const contact = data[0];\n          console.log(contact);\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Contacts Module Example</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Find and Upload Build Artifacts for Android - Expo (YAML)\nDESCRIPTION: This workflow YAML demonstrates a build sequence for Android, integrating steps for dependency setup, credential injection, building with Gradle, and automatic artifact upload via eas/find_and_upload_build_artifacts. Inputs may include both Android credentials and environment configuration. Outputs are build artifacts found by the system, uploaded to EAS servers. Should not be combined with the 'buildArtifactPaths' workflow property to avoid step conflicts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\\n  name: Build Android app\\n  steps:\\n    - eas/checkout\\n    - eas/install_node_modules\\n    - eas/prebuild\\n    - eas/configure_eas_update\\n    - eas/inject_android_credentials\\n    - eas/run_gradle\\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Fixing iOS RCTBridge Singleton Override in expo-dev-launcher\nDESCRIPTION: Addresses a bug on iOS where the singleton `RCTBridge.currentBridge` instance value was being overridden by the expo-dev-launcher bridge instance. This fix ensures the correct React Native bridge instance is maintained, preventing potential conflicts or unexpected behavior in applications using expo-dev-launcher.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\nRCTBridge.currentBridge\n```\n\n----------------------------------------\n\nTITLE: Running Expo App in Production Mode Locally\nDESCRIPTION: Command to run an Expo app in production mode locally to test for production-only errors. The --no-dev flag disables development mode and --minify mimics production bundle optimization.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start --no-dev --minify\n```\n\n----------------------------------------\n\nTITLE: Disabling Dotenv File Loading in Expo CLI via Shell Command\nDESCRIPTION: Demonstrates how to disable Expo CLI's automatic loading of `.env` files using the `EXPO_NO_DOTENV=1` environment variable. Shows usage with `npx cross-env` for cross-platform compatibility and direct variable assignment for macOS/Linux before running `expo start`. This prevents `.env` files from affecting the build or development server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n'# All users can run cross-env, followed by the Expo CLI command'\n'$ npx cross-env EXPO_NO_DOTENV=1 expo start'\n'# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command'\n'$ EXPO_NO_DOTENV=1 npx expo start'\n```\n\n----------------------------------------\n\nTITLE: Importing Contacts Module in JavaScript\nDESCRIPTION: Shows how to import the Contacts module from expo-contacts in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\n```\n\n----------------------------------------\n\nTITLE: Using GLView with Reanimated Worklets\nDESCRIPTION: Demonstrates how to integrate GLView with React Native Reanimated worklets. The example shows how to pass the GL context ID to a worklet and recreate the GL object for rendering inside the worklet thread.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { runOnUI } from 'react-native-reanimated';\nimport { GLView } from 'expo-gl';\n\nfunction render(gl) {\n  'worklet';\n  // add your WebGL code here\n}\n\nfunction onContextCreate(gl) {\n  runOnUI((contextId: number) => {\n    'worklet';\n    const gl = GLView.getWorkletContext(contextId);\n    render(gl);\n  })(gl.contextId);\n}\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView\n        style={{ width: 300, height: 300 }}\n        enableExperimentalWorkletSupport\n        onContextCreate={onContextCreate}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Property in Kotlin\nDESCRIPTION: Defines a new read-only property directly on the JavaScript object that represents a native module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nProperty(\"foo\") {\n  return@Property \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Heading Components from @expo/html-elements in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import all heading components (H1-H6) from the @expo/html-elements package for use in TypeScript or TSX files. The imported components replicate standard HTML heading semantics across React Native and web platforms. No additional dependencies are required besides @expo/html-elements; each imported component corresponds to a heading level and can be used as a drop-in replacement.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H1, H2, H3, H4, H5, H6 } from '@expo/html-elements';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Level 5 Heading with @expo/html-elements in TypeScript\nDESCRIPTION: This snippet shows how to build a semantically correct level 5 heading using the H5 component from @expo/html-elements. It requires only the @expo/html-elements dependency, and expects heading content as children. The element ensures consistent accessibility and styling on both web and native platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H5 } from '@expo/html-elements';\nexport default () => <H5>Example<H5/>\n```\n\n----------------------------------------\n\nTITLE: React Web Component Implementation\nDESCRIPTION: Migration of web component to function component pattern and removal of setNativeProps usage to fix Reanimated errors.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-blur/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n-WebkitBackdropFilter\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for SDK 24 Upgrade\nDESCRIPTION: JSON configuration changes required in package.json when upgrading to Expo SDK 24. Updates React Native, Expo, and React to their compatible versions for SDK 24.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-24.0.0.tar.gz\",\n  \"expo\": \"^24.0.0\",\n  \"react\": \"16.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: FlashList Component Import Statement\nDESCRIPTION: Import statement for the API Install Section component used in the documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/flash-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Using descriptive method names for better code clarity\nDESCRIPTION: Demonstrates the preference for descriptive method names that are easier to search for and communicate their purpose clearly, rather than shorter but more generic names.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass TestPipeline {\n  // PREFERRED\n  runTests() { ... }\n\n  // DISFAVORED\n  run() { ... }\n}\n\n// \"runTests\" is a lot easier to grep for than \"run\". It also plainly communicates\n// more about what it does without being too wordy.\n```\n\n----------------------------------------\n\nTITLE: Importing GLView from expo-gl\nDESCRIPTION: Basic import statement for the GLView component from the expo-gl package, required before using any GLView functionality in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gl-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GLView } from 'expo-gl';\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Image with Base URL Prefix\nDESCRIPTION: Shows how the Image component is transformed during export when baseUrl is configured. The src attribute in the output HTML automatically includes the base URL prefix.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/my-root/assets/assets/image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring EAS CLI Commands\nDESCRIPTION: Collection of terminal commands for uninstalling CodePush, installing Expo modules, EAS CLI, and logging into Expo account.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/codepush.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm uninstall react-native-code-push\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx install-expo-modules@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Updating Podspec for Multi-Platform Support\nDESCRIPTION: Modifications to the module's podspec file to declare support for iOS, tvOS, and macOS platforms with their respective minimum versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/additional-platform-support.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- s.platform       = :ios, '13.4'\n+ s.platforms = {\n+   :ios => '13.4',\n+   :tvos => '13.4',\n+   :osx => '10.15'\n+ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Build Gradle\nDESCRIPTION: Gradle configuration to add custom maven repository for expo-camera's cameraview dependency\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-camera/README.md#2025-04-22_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n    repositories {\n\n        // * Your other repositories here *\n\n        // * Add a new maven block after other repositories / blocks *\n        maven {\n            // expo-camera bundles a custom com.google.android:cameraview\n            url \"$rootDir/../node_modules/expo-camera/android/maven\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Example with Problematic expo-dev-client Intent Filter\nDESCRIPTION: This XML snippet shows an Android Manifest file with an intent filter that includes an 'exp+' scheme, which can break App Links verification in expo-dev-client version 1.2.1 and below on Android 12+.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<activity android:name=\".MainActivity\" android:label=\"@string/app_name\" android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\" android:launchMode=\"singleTask\" android:windowSoftInputMode=\"adjustResize\" android:theme=\"@style/Theme.App.SplashScreen\" android:screenOrientation=\"portrait\">\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\"/>\n    <category android:name=\"android.intent.category.LAUNCHER\"/>\n  </intent-filter>\n  <intent-filter>\n    <action android:name=\"android.intent.action.VIEW\"/>\n    <category android:name=\"android.intent.category.DEFAULT\"/>\n    <category android:name=\"android.intent.category.BROWSABLE\"/>\n    <data android:scheme=\"<slug>\"/>\n    <data android:scheme=\"<package>\"/>\n    <data android:scheme=\"exp+<slug>\"/>\n  </intent-filter>\n  <intent-filter android:autoVerify=\"true\" data-generated=\"true\">\n    <action android:name=\"android.intent.action.VIEW\"/>\n    <data android:scheme=\"https\" android:host=\"<name>.onelink.me\" android:pathPrefix=\"/XXXX\"/>\n    <data android:scheme=\"https\" android:host=\"<name>.onelink.me\" android:pathPrefix=\"/XXXX\"/>\n    <data android:scheme=\"https\" android:host=\"<name>.onelink.me\" android:pathPrefix=\"/XXXX\"/>\n    <!-- @info -->\n    <data android:scheme=\"exp+<slug>\"/>\n    <!-- @end -->\n    <category android:name=\"android.intent.category.BROWSABLE\"/>\n    <category android:name=\"android.intent.category.DEFAULT\"/>\n  </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Integration Example\nDESCRIPTION: Shows how to integrate Tailwind CSS with the component creation system for more concise styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport tw from 'somewhere';\nimport { create } from './create-primitives';\n\nconst Heading = create(RNText, {\n  size: {\n    large: tw('text-4xl'),\n    medium: tw('text-3xl'),\n    small: tw('text-2xl'),\n  },\n  weight: {\n    normal: tw('font-medium'),\n    heavy: tw('font-semibold'),\n  },\n  color: {\n    success: tw('text-green-500'),\n    danger: tw('text-red-500'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Global CSS Style Rule\nDESCRIPTION: Provides an example CSS file (`styles.css`) defining a simple global style rule for the `.container` class, setting its background color to red. This illustrates how global styles can be defined for web applications in Expo. Note that global styles are web-only and will cause visual divergence on native platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n```css styles.css\n.container {\n  background-color: red;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Brightness Module in JavaScript\nDESCRIPTION: This snippet shows how to import the Brightness module from the expo-brightness package in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/brightness.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Brightness from 'expo-brightness';\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in package.json\nDESCRIPTION: Example showing how to extend the Expo ESLint configuration in your package.json file. This includes both the base Expo config and ESLint's recommended ruleset.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"eslintConfig\": {\n    \"extends\": [\"expo\", \"eslint:recommended\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-video Package Using npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the 'expo-video' package using npm for integration into Expo or React Native projects. Running this command in the project directory adds 'expo-video' to the project's dependencies, enabling the use of the video component. npm must be available in the system; ensure the project is already initialized.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-video/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-video\\n\n```\n\n----------------------------------------\n\nTITLE: Importing App Config Schema in TypeScript/JavaScript\nDESCRIPTION: Import statement for the Expo app configuration schema JSON file and a custom component for rendering the schema table.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport schema from '~/public/static/schemas/v51.0.0/app-config-schema.json';\nimport AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';\n```\n\n----------------------------------------\n\nTITLE: Function Output Configuration\nDESCRIPTION: Demonstrates how to define output values for a function\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n    outputs: [value]\n    command: set-output value \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Importing Audio and Video from expo-av\nDESCRIPTION: Basic code showing how to import the Audio and Video modules from the expo-av package for use in an application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Audio, Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Customizing Xcode Start Packager Phase for Expo - Diff\nDESCRIPTION: Presents modifications for the 'Start Packager' build phase of the iOS Xcode project, allowing proper startup with Expo CLI and support for loading .xcode.env or .xcode.env.local. Imports env files and uses Expo's launchPackager.command on project start. Inputs are Xcode PBX shell scripts, output is correct packager boot sequence compatible with Expo. Constraints: must appear in the correct build phase.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n+ if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n+   source \"$PODS_ROOT/../.xcode.env\"\n+ fi\n+ if [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n+   source \"$PODS_ROOT/../.xcode.env.local\"\n+ fi\n\nexport RCT_METRO_PORT=\"${RCT_METRO_PORT:=8081}\"\necho \"export RCT_METRO_PORT=${RCT_METRO_PORT}\" > `$NODE_BINARY --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/.packager.env'\"`\nif [ -z \"${RCT_NO_LAUNCH_PACKAGER+xxx}\" ] ; then\n  if nc -w 5 -z localhost ${RCT_METRO_PORT} ; then\n    if ! curl -s \"http://localhost:${RCT_METRO_PORT}/status\" | grep -q \"packager-status:running\" ; then\n      echo \"Port ${RCT_METRO_PORT} already in use, packager is either not running or not running correctly\"\n      exit 2\n    fi\n  else\n-     open `$NODE_BINARY --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/launchPackager.command'\"` || echo \"Can't start packager automatically\"\n+     open `$NODE_BINARY --print \"require('path').dirname(require.resolve('expo/package.json')) + '/scripts/launchPackager.command'\"` || echo \"Can't start packager automatically\"\n  fi\nfi\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo Development Server\nDESCRIPTION: This command starts the Expo development server for testing the Android development build. After running this command, pressing 'a' will open the project in an Android device or emulator that has the development build installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/android-development-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Distribution in EAS JSON\nDESCRIPTION: JSON configuration for the EAS build profile to enable internal distribution. This sets the distribution type to 'internal' which creates shareable URLs for builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/internal-distribution.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      \"distribution\": \"internal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Third-Party Library with Expo CLI\nDESCRIPTION: This command shows how to install a third-party library (@react-navigation/native in this case) using Expo CLI, which helps in selecting a compatible version and provides warnings about known incompatibilities.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @react-navigation/native\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/json-file Library in Expo Project\nDESCRIPTION: This command installs the @expo/json-file library using Yarn package manager. It adds the library as a dependency to your Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/json-file/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @expo/json-file\n```\n\n----------------------------------------\n\nTITLE: Importing Constants Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Constants module from expo-constants in a JavaScript file. This module provides access to system information that remains constant throughout the app's lifetime.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactActivity Listener in Kotlin for Expo Custom Module\nDESCRIPTION: This Kotlin code implements the CustomReactActivityLifecycleListener class, which handles the onCreate event of the ReactActivity. It reads a custom value from the strings.xml file and performs actions based on that value.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.custom\n\nimport android.app.Activity\nimport android.content.Context\nimport android.os.Bundle\nimport android.util.Log\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass CustomReactActivityLifecycleListener(activityContext: Context) : ReactActivityLifecycleListener {\n  override fun onCreate(activity: Activity, savedInstanceState: Bundle?) {\n    // Execute static tasks before the JS engine starts.\n    // These values are defined via config plugins.\n\n    var value = getValue(activity)\n    if (value != \"\") {\n      // Do something to the Activity that requires the static value...\n    }\n  }\n\n  // Naming is node module name (`expo-custom`) plus value name (`value`) using underscores as a delimiter\n  // i.e. `expo_custom_value`\n  // `@expo/vector-icons` + `iconName` -> `expo__vector_icons_icon_name`\n  private fun getValue(context: Context): String = context.getString(R.string.expo_custom_value).toLowerCase()\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Devices using EAS CLI in Bash\nDESCRIPTION: Command for renaming devices in Expo and on the Apple Developer Portal. This is especially useful for devices added via website URL/QR code which default to displaying their UDID when selecting them for an EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/internal-distribution.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Rename devices on Expo and the Apple Developer Portal\n$ eas device:rename\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Notifications Module (JavaScript/TypeScript)\nDESCRIPTION: This JavaScript snippet shows the standard way to import the `expo-notifications` library into a project. It imports all the library's exports under the `Notifications` namespace, allowing access to its functions and types like `Notifications.scheduleNotificationAsync` or `Notifications.setNotificationChannelAsync`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/notifications.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n```\n\n----------------------------------------\n\nTITLE: Removing 'Start Packager' Build Phase from Xcode Project (pbxproj Diff)\nDESCRIPTION: This diff illustrates the removal of the \"Start Packager\" shell script build phase from the `ios/<Project>.xcodeproj/project.pbxproj` file. This change is required for Expo SDK 50 and higher in bare workflow projects, as the Metro development server should now be started manually using `npx expo start` instead of being automatically launched by Xcode.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n-    FD10A7F022414F080027D42C /* Start Packager */ = {\n-\t\t\tisa = PBXShellScriptBuildPhase;\n-\t\t\talwaysOutOfDate = 1;\n-\t\t\tbuildActionMask = 2147483647;\n-\t\t\tfiles = (\n-\t\t\t);\n-\t\t\tinputFileListPaths = (\n-\t\t\t);\n-\t\t\tinputPaths = (\n-\t\t\t);\n-\t\t\tname = \"Start Packager\";\n-\t\t\toutputFileListPaths = (\n-\t\t\t);\n-\t\t\toutputPaths = (\n-\t\t\t);\n-\t\t\trunOnlyForDeploymentPostprocessing = 0;\n-\t\t\tshellPath = /bin/sh;\n-\t\t\tshellScript = \"if [[ -f \\\"$PODS_ROOT/../.xcode.env\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.updates\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.updates\\\"\\nfi\\nif [[ -f \\\"$PODS_ROOT/../.xcode.env.local\\\" ]]; then\\n  source \\\"$PODS_ROOT/../.xcode.env.local\\\"\\nfi\\n\\nexport RCT_METRO_PORT=\\\"${RCT_METRO_PORT:=8081}\\\"\\necho \\\"export RCT_METRO_PORT=${RCT_METRO_PORT}\\\" > `$NODE_BINARY --print \\\"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/.packager.env'\\\"`\\nif [ -z \\\"${RCT_NO_LAUNCH_PACKAGER+xxx}\\\" ] ; then\\n  if nc -w 5 -z localhost ${RCT_METRO_PORT} ; then\\n    if ! curl -s \\\"http://localhost:${RCT_METRO_PORT}/status\\\" | grep -q \\\"packager-status:running\\\" ; then\\n      echo \\\"Port ${RCT_METRO_PORT} already in use, packager is either not running or not running correctly\\\"\\n      exit 2\\n    fi\\n  else\\n    open `$NODE_BINARY --print \\\"require('path').dirname(require.resolve('expo/package.json')) + '/scripts/launchPackager.command'\\\"` || echo \\\"Can't start packager automatically\\\"\\n  fi\\nfi\\n\";\n-\t\t\tshowEnvVarsInLog = 0;\n-\t\t};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring fingerprint Runtime Policy in Expo\nDESCRIPTION: Automatically calculates the runtime version based on project changes, including SDK upgrades or adding custom native code. This policy is still in beta as of SDK 51.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"fingerprint\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-font Plugin in Expo App\nDESCRIPTION: Configuration for embedding Google Fonts using expo-font plugin in app.json. Demonstrates how to specify font file paths from node_modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-font\",\n      {\n        \"fonts\": [\"node_modules/@expo-google-fonts/inter/Inter_900Black.ttf\"]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying existing Application class for Android\nDESCRIPTION: Adds ApplicationLifecycleDispatcher calls to an existing Application class for handling lifecycle events.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication() : Application() {\n    override fun onCreate() {\n        super.onCreate()\n       ApplicationLifecycleDispatcher.onApplicationCreate(this)\n    }\n\n   override fun onConfigurationChanged(newConfig: Configuration) {\n       super.onConfigurationChanged(newConfig)\n       ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation and Expand Test Maestro Flow\nDESCRIPTION: YAML configuration for a Maestro test flow that navigates to the Explore screen, expands a collapsible element, and verifies that specific text content is visible.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/e2e-tests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nappId: dev.expo.eastestsexample # This is an example app id. Replace it with your app id.\n---\n- launchApp\n- tapOn: 'Explore.*'\n- tapOn: '.*File-based routing'\n- assertVisible: 'This app has two screens.*'\n```\n\n----------------------------------------\n\nTITLE: Building an Android app with EAS Build\nDESCRIPTION: Command to start a build process for Android platform using EAS Build. This creates a build that can be submitted to the Google Play Store.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android\n```\n\n----------------------------------------\n\nTITLE: Running ADB Shell Command for Android Developer Menu\nDESCRIPTION: Command to simulate pressing the menu button on Android devices using ADB shell command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/tools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ adb shell input keyevent 82\n```\n\n----------------------------------------\n\nTITLE: Defining SchedulableNotificationTriggerInput Type in TypeScript\nDESCRIPTION: Defines a union type for time-based, schedulable notification triggers. These triggers can be used with getNextTriggerDateAsync to determine when they will fire next.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SchedulableNotificationTriggerInput =\n  | DateTriggerInput\n  | TimeIntervalTriggerInput\n  | DailyTriggerInput\n  | WeeklyTriggerInput\n  | YearlyTriggerInput\n  | CalendarTriggerInput;\n```\n\n----------------------------------------\n\nTITLE: Importing NetInfo Module in JavaScript\nDESCRIPTION: Imports the `NetInfo` module from the `@react-native-community/netinfo` package. This is the first step required to use the library's functionalities within a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/netinfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport NetInfo from '@react-native-community/netinfo';\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Sharing Module in JavaScript\nDESCRIPTION: This snippet shows how to import the `expo-sharing` library into your JavaScript or TypeScript project. It imports all the functions and constants provided by the library under the `Sharing` namespace, making them accessible for use.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: Rendering Router with Fixture Path in JavaScript\nDESCRIPTION: This snippet illustrates how to use `renderRouter` with a directory path to mock an existing fixture. The path should be relative to the current test file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('my-test', async () => {\n  const MockComponent = jest.fn(() => <View />);\n  renderRouter('./my-test-fixture');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Base Modifiers for Expo Config Plugins\nDESCRIPTION: This TypeScript snippet defines custom base modifiers for Expo config plugins, specifically adding support for the AppDelegate.h file. It includes utility functions to read, modify, and write the file safely using the Expo config plugin system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigPlugin, IOSConfig, Mod, withMod, BaseMods } from 'expo/config-plugins';\nimport fs from 'fs';\n\n/**\n * A plugin which adds new base modifiers to the prebuild config.\n */\nexport function withAppDelegateHeaderBaseMod(config) {\n  return BaseMods.withGeneratedBaseMods<'appDelegateHeader'>(config, {\n    platform: 'ios',\n    providers: {\n      // Append a custom rule to supply AppDelegate header data to mods on `mods.ios.appDelegateHeader`\n      appDelegateHeader: BaseMods.provider<IOSConfig.Paths.AppDelegateProjectFile>({\n        // Get the local filepath that should be passed to the `read` method.\n        getFilePath({ modRequest: { projectRoot } }) {\n          const filePath = IOSConfig.Paths.getAppDelegateFilePath(projectRoot);\n          // Replace the .m with a .h\n          if (filePath.endsWith('.m')) {\n            return filePath.substr(0, filePath.lastIndexOf('.')) + '.h';\n          }\n          // Possibly a Swift project...\n          throw new Error(`Could not locate a valid AppDelegate.h at root: \"${projectRoot}\"`);\n        },\n        // Read the input file from the filesystem.\n        async read(filePath) {\n          return IOSConfig.Paths.getFileInfo(filePath);\n        },\n        // Write the resulting output to the filesystem.\n        async write(filePath: string, { modResults: { contents } }) {\n          await fs.promises.writeFile(filePath, contents);\n        },\n      }),\n    },\n  });\n}\n\n/**\n * (Utility) Provides the AppDelegate header file for modification.\n */\nexport const withAppDelegateHeader: ConfigPlugin<Mod<IOSConfig.Paths.AppDelegateProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'appDelegateHeader',\n    action,\n  });\n};\n\n// (Example) Log the contents of the modifier.\nexport const withSimpleAppDelegateHeaderMod = config => {\n  return withAppDelegateHeader(config, config => {\n    console.log('modify header:', config.modResults);\n    return config;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Android settings.gradle for Expo Modules Autolinking\nDESCRIPTION: Configuration required in the Android settings.gradle file to enable autolinking for Expo modules. Sets up Unimodules projects and native module settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/README.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n// settings.gradle\n\napply from: new File([\"node\", \"--print\", \"require.resolve('expo-modules-core/package.json')\"].execute(null, rootDir).text.trim(), \"../gradle.groovy\");\nincludeUnimodulesProjects()\n\napply from: new File([\"node\", \"--print\", \"require.resolve('@react-native-community/cli-platform-android/package.json')\"].execute(null, rootDir).text.trim(), \"../native_modules.gradle\");\napplyNativeModulesSettingsGradle(settings)\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationCategory Interface in TypeScript\nDESCRIPTION: Defines an interface for notification categories, which group related notification actions and provide presentation options. This includes iOS-specific options for customizing how notifications appear and behave.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationCategory {\n  identifier: string;\n  actions: NotificationAction[];\n  options: {\n    // These options are ALL iOS-only\n    previewPlaceholder?: string;\n    intentIdentifiers?: string[];\n    categorySummaryFormat?: string;\n    customDismissAction?: boolean;\n    allowInCarPlay?: boolean;\n    showTitle?: boolean;\n    showSubtitle?: boolean;\n    allowAnnouncement?: boolean;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-symbols Package via Expo CLI\nDESCRIPTION: Installs the `expo-symbols` npm package using the recommended `expo install` command. This command ensures compatibility with the project's Expo SDK version and handles linking for native modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-symbols/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-symbols\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Android Permissions in Expo Documentation\nDESCRIPTION: This JSX component is used within the documentation source (likely MDX or similar) to display the Android permissions (READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE, INTERNET) that are automatically added by the Expo FileSystem library. It signifies that these permissions are included in the application's final AndroidManifest.xml when using this library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/filesystem.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AndroidPermissions permissions={['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE', 'INTERNET']} />\n```\n\n----------------------------------------\n\nTITLE: Integrating Prettier with ESLint Configuration\nDESCRIPTION: This snippet demonstrates how to update the .eslintrc.js file to integrate Prettier with ESLint.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: ['expo', 'prettier'],\n  plugins: ['prettier'],\n  rules: {\n    'prettier/prettier': 'error',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Icon Images in React Native with Expo Image\nDESCRIPTION: This example demonstrates how to display an icon image using the Image component from Expo Image. It imports the Image component and uses it to render a local image file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/icons.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'expo-image';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image source={require('./assets/images/slack-icon.png')} style={{ width: 50, height: 50 }} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Badge with Options Example in TypeScript\nDESCRIPTION: Example of the options object type that can be passed as a second argument to the badge setting function, specifically for web environments. It references the badgin library options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  web?: badgin.Options\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Localized App Store Info Configuration\nDESCRIPTION: Basic configuration for localized app information in English (US), including required app title and privacy policy URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"Awesome app\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to Bun from Other Package Managers\nDESCRIPTION: This bash script demonstrates the process of migrating from npm, yarn, or pnpm to Bun. It removes existing node_modules and lockfiles, then installs dependencies using Bun.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-bun.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n$ rm yarn.lock pnpm-lock.yaml package-lock.json\n$ bun install\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Contacts Module\nDESCRIPTION: Example showing how to import the Expo Contacts module in a JavaScript/React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/contacts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Contacts from 'expo-contacts';\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer Module\nDESCRIPTION: Basic import statement for the Accelerometer module from expo-sensors package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Generating Project Documentation with Embedded JavaScript (EJS) in Markdown\nDESCRIPTION: This snippet demonstrates the use of EJS templating within a Markdown file to dynamically insert project information. It includes placeholders for the project slug and description.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# <%- project.slug %>\n\n<%- project.description %>\n```\n\n----------------------------------------\n\nTITLE: Installing React Query Dev Tools Plugin\nDESCRIPTION: Command to install the React Query dev tools plugin, which allows exploring queries, cache status, and managing TanStack Query operations in Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @dev-plugins/react-query\n```\n\n----------------------------------------\n\nTITLE: Creating expo-module.config.json for Expo Autolinking\nDESCRIPTION: Create an empty expo-module.config.json file at the root of the project to enable Expo Autolinking for automatic native code linking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Worker Registration in Expo Router HTML\nDESCRIPTION: TypeScript code for the root HTML file that configures service worker registration and basic HTML structure for Expo Router web pages. Includes head metadata and service worker bootstrap script.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport type { PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n        <script dangerouslySetInnerHTML={{ __html: sw }} />\n\n        <ScrollViewStyleReset />\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n\nconst sw = `\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n        navigator.serviceWorker.register('/sw.js').then(registration => {\n            console.log('Service Worker registered with scope:', registration.scope);\n        }).catch(error => {\n            console.error('Service Worker registration failed:', error);\n        });\n    });\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contact by ID on Android\nDESCRIPTION: Bug fix for the getContactById method on Android. The promise now resolves correctly when a contact with the provided ID doesn't exist, instead of leaving the promise unresolved.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetContactById(id)\n```\n\n----------------------------------------\n\nTITLE: Output Result of Babel HTML Elements Transformation\nDESCRIPTION: The transformed output after processing with the @expo/html-elements/babel plugin. The standard HTML elements are replaced with their cross-platform counterparts from the @expo/html-elements library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nimport { Div, H1 } from '@expo/html-elements';\n\nexport default function Page() {\n  return (\n    <Div>\n      <H1>Hello World</H1>\n    </Div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Resolving React Native Pod Files in iOS\nDESCRIPTION: This Ruby snippet shows how to dynamically resolve the react_native_pods file in an iOS project using Node.js, avoiding hardcoded paths.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire File.join(File.dirname(`node --print \"require.resolve('react-native/package.json')'\"`), \"scripts/react_native_pods\")\n```\n\n----------------------------------------\n\nTITLE: Importing ScreenCapture Module in Expo\nDESCRIPTION: This snippet shows how to import the ScreenCapture module from the expo-screen-capture package. This import statement is typically used at the beginning of a file to access the ScreenCapture API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\n```\n\n----------------------------------------\n\nTITLE: Importing registerRootComponent from Expo\nDESCRIPTION: TypeScript example showing how to import the registerRootComponent function from Expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRootComponent } from 'expo';\n```\n\n----------------------------------------\n\nTITLE: React JSX Import Statements for Icons and Components\nDESCRIPTION: Import statements for various icons and components used in the documentation page, including Github icons, book icons, and custom components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/in-app-purchases.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GithubIcon } from '@expo/styleguide-icons/custom/GithubIcon';\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport RedirectNotification from '~/ui/components/RedirectNotification';\nimport { CODE } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Importing Google Authentication Provider\nDESCRIPTION: Import statement for the Google authentication provider which offers a streamlined way to implement Google sign-in.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/auth-session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Google from 'expo-auth-session/providers/google';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-calendar\nDESCRIPTION: XML snippet to add READ_CALENDAR and WRITE_CALENDAR permissions to the Android manifest file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-calendar/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CALENDAR\" />\n<uses-permission android:name=\"android.permission.WRITE_CALENDAR\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository and Package Information in package.json\nDESCRIPTION: Sets up repository, author, license, bugs, and homepage fields in package.json for an Expo module, linking to the main Expo repository and specific module location.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/expo/expo.git\"\n  },\n  \"author\": \"Expo\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/expo/expo/issues\"\n  },\n  \"homepage\": \"https://github.com/expo/expo/tree/main/packages/expo-sms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Apple Sign In Entitlements XML Configuration\nDESCRIPTION: Manual configuration for the Apple Sign In capability in the app's entitlements file required for non-EAS Build projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.applesignin</key>\n<array>\n  <string>Default</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo ESLint Rules\nDESCRIPTION: JSON configuration showing how to enable specific Expo ESLint rules in the rules section of an ESLint configuration file (.eslintrc). This example enables rules for preventing environment variable destructuring and dynamic access.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"expo/no-env-var-destructuring\": \"error\",\n    \"expo/no-dynamic-env-var\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YearlyNotificationTrigger for Android\nDESCRIPTION: Specifies an Android-specific trigger for yearly notifications, including day, month, hour, and minute.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface YearlyNotificationTrigger {\n  type: 'yearly';\n  day: number;\n  month: number;\n  hour: number;\n  minute: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Value for Scaling in EmojiSticker\nDESCRIPTION: Sets up a shared value using useSharedValue hook to store and update the scale of the emoji image when gestures are detected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst scaleImage = useSharedValue(imageSize);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Level 4 Heading with @expo/html-elements in TypeScript\nDESCRIPTION: This code demonstrates use of the H4 heading abstraction from @expo/html-elements for platform-agnostic level 4 headings. The lone dependency is @expo/html-elements. Pass children directly as heading content; the component adapts markup for web or native output as needed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H4 } from '@expo/html-elements';\nexport default () => <H4>Example<H4/>\n```\n\n----------------------------------------\n\nTITLE: Importing the Image Component from expo-image\nDESCRIPTION: Shows how to import the Image component from the expo-image package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/image.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Image } from 'expo-image';\n```\n\n----------------------------------------\n\nTITLE: Using SymbolView Component in React Native (JSX)\nDESCRIPTION: This React Native example (App.js) demonstrates importing `SymbolView` from `expo-symbols` and `StyleSheet`, `View` from `react-native`. It shows how to render a specific SF Symbol (`airpods.chargingcase`) using the `SymbolView` component within a basic application layout, applying styles defined with `StyleSheet` for size and positioning. The `type` prop is set to `hierarchical`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/symbols.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SymbolView name=\"airpods.chargingcase\" style={styles.symbol} type=\"hierarchical\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  symbol: {\n    width: 35,\n    height: 35,\n    margin: 5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Component Export\nDESCRIPTION: Shows how to re-export a platform-specific component from the components directory to be used as a screen in the app directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/platform-specific-modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport { default } from '../components/about';\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties in app.config.js\nDESCRIPTION: Example showing how to configure Android and iOS build properties using expo-build-properties plugin in app.config.js configuration file. Uses JavaScript exports to define the same build properties as the JSON example.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/build-properties.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  expo: {\n    plugins: [\n      [\n        'expo-build-properties',\n        {\n          android: {\n            compileSdkVersion: 34,\n            targetSdkVersion: 34,\n            buildToolsVersion: '34.0.0',\n          },\n          ios: {\n            deploymentTarget: '13.4',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Client Environment Variables in Expo\nDESCRIPTION: Terminal commands showing how to disable client environment variable inlining with EXPO_NO_CLIENT_ENV_VARS environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# All users can run cross-env, followed by the Expo CLI command\n$ npx cross-env EXPO_NO_CLIENT_ENV_VARS=1 expo start\n# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command\n$ EXPO_NO_CLIENT_ENV_VARS=1 npx expo start\n```\n\n----------------------------------------\n\nTITLE: Importing Barometer from expo-sensors\nDESCRIPTION: Basic import statement for the Barometer module from expo-sensors package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Barometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Refresh in Expo Webpack\nDESCRIPTION: This JavaScript snippet shows how to configure Fast Refresh in Expo Webpack by adding the ReactRefreshWebpackPlugin to the webpack configuration. This approach is specific to Expo Webpack and is not needed in Expo Router where Fast Refresh is enabled by default.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst createExpoWebpackConfigAsync = require('@expo/webpack-config');\nconst ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');\n\nmodule.exports = async function (env, argv) {\n  const config = await createExpoWebpackConfigAsync(env, argv);\n\n  // Use the React refresh plugin in development mode\n  if (env.mode === 'development') {\n    config.plugins.push(new ReactRefreshWebpackPlugin({ disableRefreshCheck: true }));\n  }\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced AASA Configuration with iOS 13+ Features\nDESCRIPTION: Extended AASA configuration showcasing iOS 13+ features including multiple app IDs, path components, exclusions, and query parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appIDs\": [\"ABCDE12345.com.example.app\", \"ABCDE12345.com.example.app2\"],\n        \"components\": [\n          {\n            \"#\": \"no_universal_links\",\n            \"exclude\": true,\n            \"comment\": \"Matches any URL whose fragment equals no_universal_links and instructs the system not to open it as a universal link\"\n          },\n          {\n            \"/\": \"/buy/*\",\n            \"comment\": \"Matches any URL whose path starts with /buy/\"\n          },\n          {\n            \"/\": \"/help/website/*\",\n            \"exclude\": true,\n            \"comment\": \"Matches any URL whose path starts with /help/website/ and instructs the system not to open it as a universal link\"\n          },\n          {\n            \"/\": \"/help/*\",\n            \"?\": {\n              \"articleNumber\": \"????\"\n            },\n            \"comment\": \"Matches any URL whose path starts with /help/ and which has a query item with name 'articleNumber' and a value of exactly 4 characters\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-mail-composer in bare React Native projects\nDESCRIPTION: This command installs the expo-mail-composer package using npx and expo. It is used for adding the package to npm dependencies in bare React Native projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-mail-composer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-mail-composer\n```\n\n----------------------------------------\n\nTITLE: Importing InstallSection Component in React Native (JavaScript)\nDESCRIPTION: Imports the APIInstallSection React component from a project-relative path. This component is typically used to display installation instructions or steps within documentation or UI pages. Depends on the internal '~/components/plugins/InstallSection' component, which is not part of the public npm ecosystem.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gesture-handler.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Making StatusBar Translucent in Android SplashScreen\nDESCRIPTION: This snippet shows how to make the StatusBar translucent by adding a configuration string to the strings.xml file, allowing the app to draw content beneath the StatusBar area.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<resources>\n  <string name=\"app_name\">sdk42</string>\n+  <string name=\"expo_splash_screen_status_bar_translucent\">true</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Statically Typing URL Parameters in Expo Router (TypeScript)\nDESCRIPTION: This code demonstrates how to statically type URL parameters when using useLocalSearchParams hook in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function Route() {\n  const { user } = useLocalSearchParams<{ user: string }>();\n\n  return <Text>User: {user}</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Static Images in Expo React Native\nDESCRIPTION: Example showing how to load static images in an Expo React Native application using relative paths in the web environment\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Image } from 'react-native';\n\nexport default function Page() {\n  return <Image source={{ uri: '/logo.png' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo Development Server\nDESCRIPTION: Command to start the Expo development server that will connect to the development build installed on an iOS device.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-devices.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Routes in API\nDESCRIPTION: Implement a GET request handler for a dynamic route that extracts parameters from the URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request, { post }: Record<string, string>) {\n  // const postId = request.expoUrl.searchParams.get('post')\n  // fetch data for 'post'\n  return Response.json({ ... });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI and Login\nDESCRIPTION: Command to install the EAS CLI globally and authenticate with Expo account\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/submit/android.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli && eas login\n```\n\n----------------------------------------\n\nTITLE: React JSX Component Usage for Documentation\nDESCRIPTION: JSX markup showing the implementation of BoxLink components to display library recommendations for in-app purchases, including links to RevenueCat and react-native-iap.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/in-app-purchases.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Expo In-App Purchase Tutorial\"\n  description={\n    <>\n      The getting started guide for in-app purchases and subscriptions with{' '}\n      <CODE>react-native-purchases</CODE> library and RevenueCat.\n    </>\n  }\n  href=\"https://www.revenuecat.com/blog/engineering/expo-in-app-purchase-tutorial/\"\n  Icon={BookOpen02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-image-picker Library (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows the standard way to import the `expo-image-picker` library into your project. It imports all exports from the package under the namespace `ImagePicker`, allowing access to its functions and types like `ImagePicker.launchImageLibraryAsync`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as ImagePicker from 'expo-image-picker';\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Entry Point\nDESCRIPTION: This JavaScript file serves as the entry point for the plugin. It exports the built version of the plugin from the 'plugin/build' directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('./plugin/build');\n```\n\n----------------------------------------\n\nTITLE: Testing Beta Releases of Expo Module Creation Script\nDESCRIPTION: This command allows testing of beta releases of the create-expo-module script. It sets the EXPO_BETA environment variable before running the creation command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/create-expo-module/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_BETA=1 yarn create expo-module\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Expo SDK Packages\nDESCRIPTION: Command to install multiple Expo SDK packages using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Babel Config for Import/Export Preservation\nDESCRIPTION: Configuration for preserving import/export syntax in babel.config.js for platform shaking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  const disableImportExportTransform = true;\n  return {\n    presets: [\n      [\n        'babel-preset-expo',\n        {\n          native: {\n            disableImportExportTransform,\n          },\n          web: {\n            disableImportExportTransform,\n          },\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Public Key Modulus with OpenSSL\nDESCRIPTION: A shell command using `openssl` to extract and print the public key modulus from an X.509 certificate file (e.g., certificate.cer). This is useful for obtaining the key information needed for SSL pinning.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenssl x509 -modulus -noout < certificate.cer\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry and Required Dependencies in Expo\nDESCRIPTION: Terminal commands to install sentry-expo and its required dependencies in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install sentry-expo\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-application expo-constants expo-device @sentry/react-native\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Dependencies in package.json\nDESCRIPTION: This JSON snippet shows how to add trusted dependencies in the package.json file. This is necessary for packages with postinstall scripts that need to be executed during installation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-bun.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"trustedDependencies\": [\"your-dependency\"]\n```\n\n----------------------------------------\n\nTITLE: Building for both Android and iOS platforms simultaneously\nDESCRIPTION: Command to initiate builds for both Android and iOS platforms at the same time using EAS Build, saving time when targeting multiple platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform all\n```\n\n----------------------------------------\n\nTITLE: iOS Capability Setup Error Example\nDESCRIPTION: Example error message shown when iOS capabilities are not properly configured in the provisioning profile, specifically for Associated Domains capability.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/ios-capabilities.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n❌  error: Provisioning profile \"*[expo] app.bacon.hello AppStore ...\" doesn't support the Associated Domains capability.\n\n❌  error: Provisioning profile \"*[expo] app.bacon.hello AppStore ...\" doesn't include the com.apple.developer.associated-domains entitlement.\n```\n\n----------------------------------------\n\nTITLE: Plugin Chaining Example\nDESCRIPTION: Demonstrates different approaches to chain multiple plugins together, including the withPlugins helper function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  name: 'my app',\n};\n\nwithPlugins(config, [\n  [withBar, 'input 1'],\n  [withFoo, 'input 2'],\n  withDelta,\n]);\n```\n\n----------------------------------------\n\nTITLE: CSS Module Example\nDESCRIPTION: Simple CSS Module example defining a text style that can be imported and used in components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.text {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo App Settings in JSON\nDESCRIPTION: This snippet defines the main configuration for an Expo app in app.json. It specifies the app name, slug, version, orientation, icon, splash screen, and various other settings for iOS and Android platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/metadata/en-US/name.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"name\": \"Bluesky\",\n    \"slug\": \"bluesky\",\n    \"version\": \"1.0.0\",\n    \"orientation\": \"portrait\",\n    \"icon\": \"./assets/icon.png\",\n    \"userInterfaceStyle\": \"automatic\",\n    \"splash\": {\n      \"image\": \"./assets/splash.png\",\n      \"resizeMode\": \"contain\",\n      \"backgroundColor\": \"#ffffff\"\n    },\n    \"assetBundlePatterns\": [\n      \"**/*\"\n    ],\n    \"ios\": {\n      \"supportsTablet\": true,\n      \"bundleIdentifier\": \"xyz.blueskyweb.app\"\n    },\n    \"android\": {\n      \"adaptiveIcon\": {\n        \"foregroundImage\": \"./assets/adaptive-icon.png\",\n        \"backgroundColor\": \"#ffffff\"\n      },\n      \"package\": \"xyz.blueskyweb.app\"\n    },\n    \"web\": {\n      \"favicon\": \"./assets/favicon.png\"\n    },\n    \"extra\": {\n      \"eas\": {\n        \"projectId\": \"your-project-id-here\"\n      }\n    },\n    \"owner\": \"bluesky-social\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo TaskManager API in JavaScript\nDESCRIPTION: This snippet shows how to import all exports from expo-task-manager into a JavaScript or React Native file. This import is required to access TaskManager's functions for registering, defining, and managing background tasks. The imported module provides the core API needed to interact with the task manager library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/task-manager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\\n\n```\n\n----------------------------------------\n\nTITLE: Face Detector Module Import Statement\nDESCRIPTION: Shows the standard import statement for the FaceDetector module from expo-face-detector package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/facedetector.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as FaceDetector from 'expo-face-detector';\n```\n\n----------------------------------------\n\nTITLE: Authenticated .npmrc for Private Registry\nDESCRIPTION: An .npmrc configuration example for a private registry that requires authentication, using an NPM_TOKEN environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n//registry.johndoe.com/:_authToken=${NPM_TOKEN}\nregistry=https://registry.johndoe.com/\n```\n\n----------------------------------------\n\nTITLE: Managing EAS Branches\nDESCRIPTION: Commands to list and view branches and their updates in EAS\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas branch:list\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas branch:view [branch-name]\n```\n\n----------------------------------------\n\nTITLE: Checking Trigger Input for Seconds Property in JavaScript\nDESCRIPTION: This code snippet shows the implementation of a check for trigger input that throws an error if the user misuses the 'seconds' property when scheduling notifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (triggerInput.seconds !== undefined && typeof triggerInput.seconds !== 'number') {\n  throw new Error('Trigger input seconds must be a number');\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing channelId Parameter Usage for Remote Notifications\nDESCRIPTION: Resolved an issue where the `channelId` parameter was being ignored for remote (push) notifications on Android. This fix ensures that remote notifications are correctly assigned to the specified channel.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nchannelId\n```\n\n----------------------------------------\n\nTITLE: Defining Styles in a CSS Module (CSS)\nDESCRIPTION: This CSS snippet shows an example `App.module.css` file defining a style for the class `text`. When imported in a component, `text` will be mapped to a unique, scoped class name (on web) to prevent naming collisions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n```css App.module.css\n.text {\n  color: red;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Multiple Input Values Configuration\nDESCRIPTION: Example of configuring multiple input values with defaults and allowed values\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n    inputs:\n      - name: name\n        default_value: Expo\n      - name: greeting\n        default_value: Hi\n        allowed_values: [Hi, Hello]\n    command: echo \"${ inputs.greeting }, ${ inputs.name }!\"\n```\n\n----------------------------------------\n\nTITLE: Adding Missing React Dependencies for Isolated Modules\nDESCRIPTION: This code snippet describes adding missing peer dependencies for React and React Native in isolated modules of the Expo Clipboard module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-clipboard/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- Add missing `react`/`react-native` peer dependencies for isolated modules. ([#30463](https://github.com/expo/expo/pull/30463) by [@byCedric](https://github.com/byCedric))\n```\n\n----------------------------------------\n\nTITLE: Configuring Side-Effects in package.json\nDESCRIPTION: This JSON snippet shows how to mark modules with side-effects in the package.json file. Side-effects are important for tree shaking as they prevent removal of certain modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"library\",\n  \"sideEffects\": [\"./src/*.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Bundle Splitting with Async Imports in Expo (JavaScript)\nDESCRIPTION: This snippet demonstrates how to trigger automatic web bundle splitting in Expo SDK 50+ by using dynamic `import()` statements. The imported module (`./math` in this case) and its dependencies will be placed in a separate chunk during production builds (`npx expo export -p web`). Requires `@expo/metro-runtime` to be installed and imported.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nimport '@expo/metro-runtime';\n\n// This will be split into a separate chunk.\nimport('./math').then(math => {\n  console.log(math.add(1, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Content Components\nDESCRIPTION: Defines the basic content layout for tab screens with centered text and flex styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function Tab() {\n  return (\n    <View style={styles.container}>\n      <Text>Tab [Home|Settings]</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Example WebView Usage\nDESCRIPTION: Demonstrates basic usage of the WebView component with URL loading and load event handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebView } from 'expo-web-view';\n\nexport default function App() {\n  return (\n    <WebView\n      style={{ flex: 1 }}\n      url=\"https://expo.dev\"\n      onLoad={event => alert(`loaded ${event.nativeEvent.url}`)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Find and Upload Build Artifacts for iOS - Expo (YAML)\nDESCRIPTION: This workflow YAML snippet configures both iOS build steps and the automatic finding and uploading of build artifacts using eas/find_and_upload_build_artifacts. It includes Apple credentials handling and sequential EAS steps leading up to artifact management. Requires proper iOS artifact structure and credentials. Input variables include team ID and build credentials. The artifacts found are uploaded to EAS servers; users must avoid using 'buildArtifactPaths' in the build profile to prevent upload step failure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\\n  name: Build iOS app\\n  steps:\\n    - eas/checkout\\n    - eas/install_node_modules\\n    - eas/resolve_apple_team_id_from_credentials:\\n        id: resolve_apple_team_id_from_credentials\\n    - eas/prebuild:\\n        inputs:\\n          clean: false\\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\\n    - eas/configure_eas_update\\n    - eas/configure_ios_credentials\\n    - eas/generate_gymfile_template:\\n        inputs:\\n          credentials: ${ eas.job.secrets.buildCredentials }\\n    - eas/run_fastlane\\n    # @info #\\n    - eas/find_and_upload_build_artifacts\\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Adding Native Dependencies in Android build.gradle\nDESCRIPTION: Adds the MPAndroidChart library as a dependency in the Android build.gradle file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndependencies {\n  implementation project(':expo-modules-core')\n  implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}\"\n+ implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MediaLibrary in JavaScript\nDESCRIPTION: Example of how to import the MediaLibrary module from expo-media-library in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/media-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MediaLibrary from 'expo-media-library';\n```\n\n----------------------------------------\n\nTITLE: Importing DevClient in JavaScript\nDESCRIPTION: Example of importing the DevClient module from the expo-dev-client package in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/dev-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as DevClient from 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Implementing DismissAll Action in Expo Router\nDESCRIPTION: Shows implementation of the dismissAll action that returns to the first screen in the closest stack, similar to popToTop stack action in React Navigation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, View, Text } from 'react-native';\nimport { useRouter } from 'expo-router';\n\nexport default function Settings() {\n  const router = useRouter();\n\n  const handleDismissAll = () => {\n    router.dismissAll()\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Go to first screen\" onPress={handleDismissAll} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/metro-runtime Package\nDESCRIPTION: Command to install the @expo/metro-runtime package using yarn. This step is not necessary for expo-router users as the package is already included.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/metro-runtime/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @expo/metro-runtime\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project using npx\nDESCRIPTION: Command to create a new Expo project using npx, which is typically the default method.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-expo-app@latest\n```\n\n----------------------------------------\n\nTITLE: Camera iframe HTML Configuration\nDESCRIPTION: HTML snippet showing how to configure an iframe to allow camera access in Chrome 64+ browsers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"...\" allow=\"microphone; camera;\">\n  <!-- <CameraView /> -->\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Querying Contacts by Name on Android\nDESCRIPTION: Bug fix for the getContactsAsync method on Android. It now allows for partial name matches when providing the 'name' query parameter, rather than requiring an exact match.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetContactsAsync({ name: 'John' })\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Paragraph in Expo Router (Web-only)\nDESCRIPTION: This snippet shows how to create a web-only page component using HTML elements. It won't render on native platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/create-pages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  return <p>Top-level page</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpath Hosting in app.json for Expo Router\nDESCRIPTION: This JSON snippet demonstrates how to configure subpath hosting in Expo Router using the experimental 'baseUrl' field in the app.json file. This is the recommended method for Expo Router and differs from the Expo Webpack approach.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"baseUrl\": \"/evanbacon/my-website\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Development Build for iOS Simulator\nDESCRIPTION: EAS CLI command to build a development build for iOS simulator using the development-simulator profile defined in eas.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --profile development-simulator --platform ios\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Expo Entry Point - JavaScript\nDESCRIPTION: Ensures CSS generated by Tailwind is dynamically loaded in the main entrypoint of the Expo/React Native web application, supporting hot module reloads. Uses Node.js 'require.context' to import CSS from the Tailwind cache directory. Dependency: correct path resolution, hot module replacement enabled. Input is runtime JS, output is globally available CSS classes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Ensure we import the CSS for Tailwind so it's included in hot module reloads.\nconst ctx = require.context(\n  // If this require.context is not inside the root directory (next to the package.json) then adjust this file path\n  // to resolve correctly.\n  './node_modules/.cache/expo/tailwind'\n);\nif (ctx.keys().length) ctx(ctx.keys()[0]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Font Plugin in app.json\nDESCRIPTION: Configuration example showing how to set up expo-font plugin in app.json to embed font files at build time.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"path/to/file.ttf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Main Entry File Implementation\nDESCRIPTION: Example of implementing a custom main entry file using registerRootComponent with a basic React component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Direct SQL Statement Execution in Expo SQLite\nDESCRIPTION: Example of executing SQL statements directly without a transaction context, useful for PRAGMA commands.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite-legacy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/legacy';\n\nconst db = SQLite.openDatabase('dbName', version);\n\nawait db.execAsync([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false);\nconsole.log('Foreign keys turned on');\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentPicker in app.json\nDESCRIPTION: JSON configuration for enabling iCloud storage features in expo-document-picker using the config plugin system. Sets the iCloudContainerEnvironment for iOS builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-document-picker\",\n        {\n          \"iCloudContainerEnvironment\": \"Production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CGFloat Support for iOS in Expo\nDESCRIPTION: This update allows the use of CGFloat as an argument type in iOS development with Expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\nCGFloat myArgument;\n```\n\n----------------------------------------\n\nTITLE: Creating EAS Webhook via Command Line\nDESCRIPTION: Command to create a new webhook for EAS notifications. It prompts for event type, webhook URL, and signing secret if not provided as flags.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ eas webhook:create\n```\n\n----------------------------------------\n\nTITLE: Adding expo-modules-core Dependency in Podspec\nDESCRIPTION: Add expo-modules-core as a dependency in the podspec file for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\nPod::Spec.new do |s|\n  # ...\n  s.dependency 'ExpoModulesCore'\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components for EAS Features\nDESCRIPTION: JSX code blocks showing the implementation of BoxLink components to create navigation links for different EAS features with their descriptions and icons.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"EAS Build\"\n  description=\"Compile and sign Android/iOS apps with custom native code in the cloud.\"\n  href=\"/build/introduction\"\n  Icon={BuildIcon}\n/>\n\n<BoxLink\n  title=\"EAS Submit\"\n  description=\"Upload your app to the Google Play Store or Apple App Store from the cloud with one CLI command.\"\n  href=\"/submit/introduction\"\n  Icon={EasSubmitIcon}\n/>\n\n<BoxLink\n  title=\"EAS Update\"\n  description=\"Address small bugs and push quick fixes directly to end-users.\"\n  href=\"/eas-update/introduction\"\n  Icon={LayersTwo02Icon}\n/>\n\n<BoxLink\n  title=\"EAS Metadata (In Beta)\"\n  description=\"Upload all app store information required to get your app published.\"\n  href=\"/eas/metadata/\"\n  Icon={EasMetadataIcon}\n/>\n\n<BoxLink\n  title=\"EAS Insights (In Preview)\"\n  description=\"View analytics about a project's performance, usage, and reach.\"\n  href=\"/eas-insights/introduction/\"\n  Icon={DataIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component from expo-checkbox\nDESCRIPTION: Simple import statement for the Checkbox component from the expo-checkbox package, showing how to access the component for use in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Excluding Unimodule from Expo Go (Android)\nDESCRIPTION: Steps to modify the Android build.gradle file to exclude a unimodule from being available in Expo Go. This involves adding the unimodule name to the exclude option of addUnimodulesDependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Creating Unimodules.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\naddUnimodulesDependencies([exclude: ['<unimodule-name>']])\n```\n\n----------------------------------------\n\nTITLE: Importing Apple Authentication Module\nDESCRIPTION: Example of importing the expo-apple-authentication module in a JavaScript/React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\n```\n\n----------------------------------------\n\nTITLE: Deprecating and Renaming Brightness Method in JavaScript\nDESCRIPTION: Deprecated useSystemBrightnessAsync and renamed it to restoreSystemBrightnessAsync to avoid violating Rules of Hooks\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-brightness/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseSystemBrightnessAsync\nrestoreSystemBrightnessAsync\n```\n\n----------------------------------------\n\nTITLE: Using the File Listing Function in Build Steps (YAML)\nDESCRIPTION: Demonstrates calling the `list_files` function within the `build.steps` after an `eas/checkout` step. By default, this will execute `ls -la` in the project's root directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: List files\n  # @info #\n  steps:\n    - eas/checkout\n    - list_files\n  # @end #\n```\n\n----------------------------------------\n\nTITLE: Setting Dev Launcher URL for iOS Development\nDESCRIPTION: This bash command demonstrates how to set the EX_DEV_LAUNCHER_URL environment variable for iOS development, which allows the controller to use a local packager instead of the prebuilt bundle.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport EX_DEV_LAUNCHER_URL=http://localhost:8090\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript EAS Build Function Template\nDESCRIPTION: Default template for an EAS Build function generated using create-eas-build-function CLI tool. Includes basic structure with BuildStepContext and async function definition.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BuildStepContext } from '@expo/steps';\n\nasync function myFunction(\n  ctx: BuildStepContext\n): Promise<void> {\n  ctx.logger.info('Hello from my TypeScript function!');\n}\n\nexport default myFunction;\n```\n\n----------------------------------------\n\nTITLE: Fixing Initial iOS Notification Category Setting\nDESCRIPTION: Resolved a bug where the iOS notification category might not be set correctly on the very first call to `setNotificationCategoryAsync`. This ensures categories are applied reliably from the first attempt.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsetNotificationCategoryAsync\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Client Dev Tools Plugin\nDESCRIPTION: Command to install the Apollo Client dev tools plugin, which allows inspecting cache, queries, and mutations in Expo applications using Apollo GraphQL client.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @dev-plugins/apollo-client\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Services File Path in app.json (Existing Account)\nDESCRIPTION: Similar configuration for existing service accounts showing the path specification for google-services.json in the Expo app configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/fcm-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    /* @hide ...*/ /* @end */\n    \"android\": {\n      /* @hide ...*/ /* @end */ \"googleServicesFile\": \"./path/to/google-services.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo on Android\nDESCRIPTION: Builds and runs the Expo project on Android using the Expo CLI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Defining Output Values in EAS Build Steps\nDESCRIPTION: Shows how to produce output values in a step that can be used in subsequent steps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - run:\n        name: Produce output\n        # @info #\n        outputs: [value]\n        # @end #\n        command: |\n          echo \"Producing output for another step\"\n          set-output value \"Output from another step...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentPicker in app.json\nDESCRIPTION: Configuration example for enabling iCloud storage features in expo-document-picker using the config plugin system. Sets the iCloudContainerEnvironment for iOS builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-document-picker\",\n        {\n          \"iCloudContainerEnvironment\": \"Production\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Actions in DOM Components\nDESCRIPTION: Example of implementing type-safe native functions in DOM components\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport DomComponent from './my-component';\n\nexport default function App() {\n  return (\n    <DomComponent\n      hello={(data: string) => {\n        console.log('Hello', data);\n      }}\n    />\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nexport default function MyComponent({ hello }: { hello: (data: string) => Promise<void> }) {\n  return <p onClick={() => hello('world')}>Click me</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components for Expo and EAS Build Resources\nDESCRIPTION: This code snippet renders multiple BoxLink components, each representing a resource related to Expo development and EAS Build. The components include titles, descriptions, and icons for various topics such as EAS Build configuration, environment variables, and platform-specific build processes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Configuring EAS Build with eas.json\"\n  description=\"Learn how a project using EAS services is configured with eas.json.\"\n  href=\"/build/eas-json/\"\n  Icon={BuildIcon}\n/>\n\n<BoxLink\n  title=\"Environment variables\"\n  description=\"Learn about different ways to use environment variables in an Expo project.\"\n  href=\"/guides/environment-variables/\"\n  Icon={BookOpen02Icon}\n/>\n\n<BoxLink\n  title=\"Android build process\"\n  description=\"Learn how an Android project is built on EAS Build.\"\n  href=\"/build-reference/android-builds/\"\n  Icon={BuildIcon}\n/>\n\n<BoxLink\n  title=\"iOS build process\"\n  description=\"Learn how an iOS project is built on EAS Build.\"\n  href=\"/build-reference/ios-builds/\"\n  Icon={BuildIcon}\n/>\n\n<BoxLink\n  title=\"Set up EAS Build with a monorepo \"\n  description=\"Learn how to set up EAS Build with a monorepo.\"\n  href=\"/build-reference/build-with-monorepos/\"\n  Icon={BuildIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Gymfile Template for iOS Build in Ruby\nDESCRIPTION: This snippet shows the default Gymfile templates used by the 'eas/generate_gymfile_from_template' function for iOS builds. It includes templates for builds with credentials and for simulator builds without credentials.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nsuppress_xcode_output(true)\nclean(<%- CLEAN %>)\n\nscheme(\"<%- SCHEME %>\")\n<% if (BUILD_CONFIGURATION) { %>\nconfiguration(\"<%- BUILD_CONFIGURATION %>\")\n<% } %>\n\nexport_options({\nmethod: \"<%- EXPORT_METHOD %>\",\nprovisioningProfiles: {<% _.forEach(PROFILES, function(profile) { %>\n    \"<%- profile.BUNDLE_ID %>\" => \"<%- profile.UUID %>\",<% }); %>\n}<% if (ICLOUD_CONTAINER_ENVIRONMENT) { %>,\niCloudContainerEnvironment: \"<%- ICLOUD_CONTAINER_ENVIRONMENT %>\"\n<% } %>\n})\n\nexport_xcargs \"OTHER_CODE_SIGN_FLAGS=\\\"--keychain <%- KEYCHAIN_PATH %>\\\"\"\n\ndisable_xcpretty(true)\nbuildlog_path(\"<%- LOGS_DIRECTORY %>\")\n\noutput_directory(\"<%- OUTPUT_DIRECTORY %>\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsuppress_xcode_output(true)\nclean(<%- CLEAN %>)\n\nscheme(\"<%- SCHEME %>\")\n<% if (BUILD_CONFIGURATION) { %>\nconfiguration(\"<%- BUILD_CONFIGURATION %>\")\n<% } %>\n\nderived_data_path(\"<%- DERIVED_DATA_PATH %>\")\nskip_package_ipa(true)\nskip_archive(true)\ndestination(\"<%- SCHEME_SIMULATOR_DESTINATION %>\")\n\ndisable_xcpretty(true)\nbuildlog_path(\"<%- LOGS_DIRECTORY %>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Plugins (JSON)\nDESCRIPTION: This JSON configuration snippet shows an example `postcss.config.json` file used to customize PostCSS processing. In this case, it enables the `autoprefixer` plugin. Expo Metro supports both `.json` and `.js` configuration files for PostCSS, but `.json` is preferred for better caching. Clearing the Metro cache is required after changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n```json postcss.config.json\n{\n  \"plugins\": {\n    \"autoprefixer\": {}\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Audio Permissions\nDESCRIPTION: XML configuration to add audio recording permission to Android manifest file\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Final iOS Expo.plist Configuration\nDESCRIPTION: Complete configuration example for Expo.plist including request headers, runtime version, and update URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<key>EXUpdatesRequestHeaders</key>\n<dict>\n  <key>expo-channel-name</key>\n  <string>your-channel-name</string>\n</dict>\n<key>EXUpdatesRuntimeVersion</key>\n<string>your-runtime-version</string>\n<key>EXUpdatesURL</key>\n<string>https://u.expo.dev/your-project-id</string>\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Dependencies for Expo Testing\nDESCRIPTION: A terminal command that installs Jest and related dependencies required for testing an Expo project. This includes jest-expo, jest, and react-test-renderer packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install -- --save-dev jest-expo jest react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Updates Module in JavaScript\nDESCRIPTION: Basic import statement for using the Updates module from expo-updates package in JavaScript/React Native code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Updates from 'expo-updates';\n```\n\n----------------------------------------\n\nTITLE: Decoding base64 credentials in CI\nDESCRIPTION: Command to decode base64-encoded credentials.json from an environment variable in CI environments. This approach restores the credentials file from a base64-encoded environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\necho $CREDENTIALS_JSON_BASE64 | base64 -d > credentials.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for EAS builds\nDESCRIPTION: YAML configuration for Travis CI to set up Node.js environment and trigger EAS builds. It includes caching, installing dependencies, and running the build command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js:\n  - node\n  - lts/*\ncache:\n  directories:\n    - ~/.npm\nbefore_script:\n  - npm install -g npm@latest\n\njobs:\n  include:\n    - stage: build\n      node_js: lts/*\n      script:\n        - npm ci\n        - npx eas-cli build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Creating an iOS Development Build with EAS Build\nDESCRIPTION: Command to create a development build for iOS devices using the development profile defined in eas.json, which includes the developmentClient flag set to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-devices.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios --profile development\n```\n\n----------------------------------------\n\nTITLE: Android JNI Error Detection Code\nDESCRIPTION: Error message indicating a null Java object in JNI call within the Reanimated module's NativeProxy EventHandler\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nJNI DETECTED ERROR IN APPLICATION: java_object == null in call to GetObjectClass from void versioned.host.exp.exponent.modules.api.reanimated.NativeProxy$EventHandler.receiveEvent\n```\n\n----------------------------------------\n\nTITLE: Deleting EAS Webhook via Command Line\nDESCRIPTION: Command to delete a webhook. It prompts the user to choose which webhook to delete from a list.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ eas webhook:delete\n```\n\n----------------------------------------\n\nTITLE: Importing Svg Components in React Native\nDESCRIPTION: Demonstrates how to import the Svg components from the react-native-svg library for use in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Svg from 'react-native-svg';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update Debug Build in eas.json\nDESCRIPTION: JSON configuration for creating a debug build with EAS Update enabled, including environment variables and build settings for both Android and iOS platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview_debug\": {\n      \"env\": {\n        \"EX_UPDATES_NATIVE_DEBUG\": \"1\"\n      },\n      \"android\": {\n        \"distribution\": \"internal\",\n        \"withoutCredentials\": true,\n        \"gradleCommand\": \":app:assembleDebug\"\n      },\n      \"ios\": {\n        \"simulator\": true,\n        \"buildConfiguration\": \"Debug\"\n      },\n      \"channel\": \"preview_debug\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind in Expo\nDESCRIPTION: This snippet shows the Tailwind configuration file setup for an Expo project, specifying content paths for Tailwind to process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // Ensure this points to your source code...\n    './app/**/*.{js,tsx,ts,jsx}',\n    // If you use a `src` folder, add: './src/**/*.{js,tsx,ts,jsx}'\n    // Do the same with `components`, `hooks`, `styles`, or any other top-level folders...\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Generating QR Codes for Expo Development Builds\nDESCRIPTION: Shows the endpoint URL pattern for generating QR codes that can load specific versions of a project in a development build, including appScheme and url parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/development-client?appScheme=exp%2Bapps-slug&url=https%3A%2F%2Fu.expo.dev%2FF767ADF57-B487-4D8F-9522-85549C39F43F0%3Fchannel-name%3Dmain\n```\n\n----------------------------------------\n\nTITLE: Initial App Configuration in JSON\nDESCRIPTION: Basic app.json configuration with a single app identifier for both iOS and Android platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"name\": \"MyApp\",\n    \"slug\": \"my-app\",\n    \"ios\": {\n      \"bundleIdentifier\": \"com.myapp\"\n    },\n    \"android\": {\n      \"package\": \"com.myapp\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getExpoPushTokenAsync in expo-notifications\nDESCRIPTION: The getExpoPushTokenAsync function in expo-notifications has been updated to make the projectId parameter required. This change affects how push tokens are retrieved.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetExpoPushTokenAsync({ projectId: 'required-project-id' })\n```\n\n----------------------------------------\n\nTITLE: Calendar Module Import Statement\nDESCRIPTION: Basic import statement for the expo-calendar module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/calendar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Calendar from 'expo-calendar';\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-print Module in JavaScript\nDESCRIPTION: Demonstrates the standard way to import the `expo-print` library in a JavaScript or React Native project to access its printing functionalities. All module exports are imported under the `Print` namespace.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Print from 'expo-print';\n```\n\n----------------------------------------\n\nTITLE: Updating EAS Webhook via Command Line\nDESCRIPTION: Command to update an existing webhook's URL or secret. Requires the webhook ID to be specified.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ eas webhook:update --id WEBHOOK_ID\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Lifecycle Listener in Kotlin\nDESCRIPTION: Example of ReactActivityLifecycleListener implementation in Kotlin, showing how to handle onCreate lifecycle event.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.mylib\n\nimport android.app.Activity\nimport android.os.Bundle\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener\n\nclass MyLibReactActivityLifecycleListener : ReactActivityLifecycleListener {\n  override fun onCreate(activity: Activity, savedInstanceState: Bundle?) {\n    // Your setup code in `Activity.onCreate`.\n    doSomeSetupInActivityOnCreate(activity)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Platform-Specific Shell Scripts with EAS Build Hooks\nDESCRIPTION: This example shows how to configure package.json to use a shell script for the pre-install hook, and how the shell script can execute different commands based on the build platform (Android or iOS).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/npm-hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"scripts\": {\n    \"eas-build-pre-install\": \"./pre-install\",\n    \"start\": \"expo start\"\n    /* @hide ... */ /* @end */\n  },\n  \"dependencies\": {\n    /* @hide ... */\n    /* @end */\n  }\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# This is a file called \"pre-install\" in the root of the project\n\nif [[ \"$EAS_BUILD_PLATFORM\" == \"android\" ]]; then\n  echo \"Run commands for Android builds here\"\nelif [[ \"$EAS_BUILD_PLATFORM\" == \"ios\" ]]; then\n  echo \"Run commands for iOS builds here\"\nfi\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Index\nDESCRIPTION: Main module entry point that exports the WebView component and its props.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { default as WebView, Props as WebViewProps } from './ExpoWebView';\n```\n\n----------------------------------------\n\nTITLE: Example Response from ImagePicker.launchImageLibraryAsync\nDESCRIPTION: Sample JSON response returned when an image is selected using the ImagePicker API, showing the structure of asset data including file information and image properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"assetId\": \"C166F9F5-B5FE-4501-9531\",\n      \"base64\": null,\n      \"duration\": null,\n      \"exif\": null,\n      \"fileName\": \"IMG.HEIC\",\n      \"fileSize\": 6018901,\n      \"height\": 3025,\n      \"type\": \"image\",\n      \"uri\": \"file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg\"\n      \"width\": 3024\n    }\n  ],\n  \"canceled\": false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-font Plugin in app.json\nDESCRIPTION: Configuration for embedding custom fonts using expo-font plugin in app.json. Specifies the path to font files relative to project root.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-font\",\n        {\n          \"fonts\": [\"./assets/fonts/Inter-Black.otf\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Main File Configuration in package.json\nDESCRIPTION: JSON configuration to specify a custom main entry file for the Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IntentLauncher Module in JavaScript\nDESCRIPTION: Example showing how to import the entire IntentLauncher module, allowing access to all exported functions and constants.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/intent-launcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as IntentLauncher from 'expo-intent-launcher';\n```\n\n----------------------------------------\n\nTITLE: Configuring Uglify Minifier in Expo CLI\nDESCRIPTION: This snippet shows how to set up and configure the Uglify minifier in the Metro configuration file for an Expo project using SDK 48 and above.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/minify.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer.minifierPath = 'metro-minify-uglify';\nconfig.transformer.minifierConfig = {\n  // Options: https://github.com/mishoo/UglifyJS#compress-options\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Using Private Functions in JavaScript Modules\nDESCRIPTION: Shows how to use the underscore prefix convention for internal module functions. This helps clarify which functions are defined and used only within the current module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function prettyPrintAll(values) {\n  for (let value of values) {\n    _prettyPrint(value);\n  }\n}\n\nfunction _prettyPrint(value) { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Module with Swift\nDESCRIPTION: Swift code for the ExpoNativeConfigurationModule, defining a function to return an API key.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoNativeConfigurationModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoNativeConfiguration\")\n\n    Function(\"getApiKey\") { () -> String in\n      \"api-key\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-contacts\nDESCRIPTION: XML snippet to add READ_CONTACTS and WRITE_CONTACTS permissions to the Android manifest file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_CONTACTS\" />\n<uses-permission android:name=\"android.permission.WRITE_CONTACTS\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Dotenv File Loading in Expo CLI (Shell)\nDESCRIPTION: These shell commands demonstrate how to disable the automatic loading of `.env` files in Expo CLI by setting the `EXPO_NO_DOTENV=1` environment variable before running an Expo command like `expo start`. Examples are provided using `cross-env` for cross-platform compatibility and direct assignment for macOS/Linux.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n<Terminal\n  cmd={[\n    '# All users can run cross-env, followed by the Expo CLI command',\n    '$ npx cross-env EXPO_NO_DOTENV=1 expo start',\n    '# Alternatively, macOS users can define the environment variable, then run npx, followed by the Expo CLI command',\n    '$ EXPO_NO_DOTENV=1 npx expo start',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Expo projects from GitHub templates\nDESCRIPTION: Demonstrates how to use the template flag with GitHub URLs to create projects from custom or third-party templates, including from specific branches, tags, or commits.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/create-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Create from repository\nnpx create-expo --template https://github.com/:owner/:repo\n\n# Create from repository using the `:ref` branch or tag\nnpx create-expo --template https://github.com/:owner/:repo/tree/:ref\n\n# Create from repository using the `sdk-50` branch, and \"templates/expo-template-bare-minimum\" subdirectory\nnpx create-expo --template https://github.com/expo/expo/tree/sdk-50/templates/expo-template-bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Installing expo-secure-store Package\nDESCRIPTION: Command to install the expo-secure-store package using npx expo install in a React Native or Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-secure-store/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-secure-store\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statements in SQLite\nDESCRIPTION: Implementation of prepared statements for optimized query execution with parameter binding and result handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst statement = await db.prepareAsync(\n  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'\n);\ntry {\n  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });\n  console.log('bbb and 101:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });\n  console.log('ccc and 102:', result.lastInsertRowId, result.changes);\n\n  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });\n  console.log('ddd and 103:', result.lastInsertRowId, result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n\nconst statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');\ntry {\n  const result = await statement2.executeAsync<{ value: string; intValue: number }>({\n    $intValue: 100,\n  });\n\n  const firstRow = await result.getFirstAsync();\n  console.log(firstRow.id, firstRow.value, firstRow.intValue);\n\n  await result.resetAsync();\n\n  const allRows = await result.getAllAsync();\n  for (const row of allRows) {\n    console.log(row.value, row.intValue);\n  }\n\n  await result.resetAsync();\n\n  for await (const row of result) {\n    console.log(row.value, row.intValue);\n  }\n} finally {\n  await statement2.finalizeAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TrackingTransparency Module\nDESCRIPTION: TypeScript import statement for the expo-tracking-transparency module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ExpoTrackingTransparency from 'expo-tracking-transparency';\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Web in Expo\nDESCRIPTION: This snippet shows how to configure the Metro bundler for web in the app.json file of an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with CSS Integration\nDESCRIPTION: Example of using global CSS styles in a React component with both web and React Native syntax\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport './styles.css';\nimport { View } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      {/* Use `className` to assign the style with React DOM components. */}\n      <div className=\"container\">Hello World</div>\n\n      {/* Use `style` with the following syntax to append class names in React Native for web. */}\n      <View\n        style={{\n          $$css: true,\n          _: 'container',\n        }}>\n        Hello World\n      </View>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Web QA Tests\nDESCRIPTION: Commands to run web-based quality assurance tests in the router-e2e directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd apps/router-e2e\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS for Yarn Modern\nDESCRIPTION: JSON configuration in package.json to enable Yarn Modern support in EAS builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"eas-build-pre-install\": \"corepack enable && yarn set version 4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React JSX Navigation Links Component\nDESCRIPTION: BoxLink components implementation for navigation to different sections of the documentation including configuration, Android submission, and iOS submission guides\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/submit/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Configuration with eas.json\"\n  description={\n    <>\n      See how to configure your submissions with <CODE>eas.json</CODE>.\n    </>\n  }\n  href=\"/submit/eas-json\"\n  Icon={Settings01Icon}\n/>\n\n<BoxLink\n  title=\"Submit to the Google Play Store\"\n  description=\"Learn how to submit an Android app to the Google Play Store.\"\n  href=\"/submit/android\"\n  Icon={GoogleAppStoreIcon}\n/>\n\n<BoxLink\n  title=\"Submit to the Apple App Store\"\n  description=\"Learn how to submit an iOS/iPadOS app to the Apple App Store from any operating system.\"\n  href=\"/submit/ios\"\n  Icon={AppleAppStoreIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Haptics Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the Haptics module from expo-haptics in a JavaScript file. This import statement is necessary to use the haptic feedback functions in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Configuring credentials.json for EAS Build\nDESCRIPTION: A sample credentials.json file that defines paths to Android keystore and iOS certificate files along with their associated passwords. This configuration allows EAS Build to use your local credentials for app signing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"keystore\": {\n      \"keystorePath\": \"android/keystores/release.keystore\",\n      \"keystorePassword\": \"paofohlooZ9e\",\n      \"keyAlias\": \"keyalias\",\n      \"keyPassword\": \"aew1Geuthoev\"\n    }\n  },\n  \"ios\": {\n    \"provisioningProfilePath\": \"ios/certs/profile.mobileprovision\",\n    \"distributionCertificate\": {\n      \"path\": \"ios/certs/dist-cert.p12\",\n      \"password\": \"iex3shi9Lohl\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Expotools Source Files for Changes (Shell)\nDESCRIPTION: Starts a process using Yarn that monitors Expotools source files for changes. When a change is detected (e.g., saving a file), the code is automatically rebuilt. This is part of the standard development workflow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/tools/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project using Yarn\nDESCRIPTION: Command to create a new Expo project using Yarn package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create expo-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Static EAS Metadata with JSON\nDESCRIPTION: This snippet shows an example of a static store.config.json file with basic App Store information in English (U.S.). It includes app title, subtitle, description, keywords, and various URLs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"Awesome App\",\n        \"subtitle\": \"Your self-made awesome app\",\n        \"description\": \"The most awesome app you have ever seen\",\n        \"keywords\": [\"awesome\", \"app\"],\n        \"marketingUrl\": \"https://example.com/en/promo\",\n        \"supportUrl\": \"https://example.com/en/support\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-modules-autolinking via npm\nDESCRIPTION: Command to install the expo-modules-autolinking package as a dependency in bare React Native projects. Requires the expo package to be installed and configured first.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-autolinking/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-modules-autolinking\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with Custom Release and Distribution Values\nDESCRIPTION: JavaScript code for initializing Sentry in an Expo application with custom release and distribution values. These should match the values used when uploading source maps with the Sentry CLI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from 'sentry-expo';\nimport * as Updates from 'expo-updates';\n\nSentry.init({\n  dsn: 'YOUR DSN',\n  release: 'my release name',\n  dist: 'my dist',\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading minimum runtime requirement to Node 14\nDESCRIPTION: This code upgrades the minimum runtime requirement to Node 14 (LTS) for the plugin.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n// [plugin] Upgrade minimum runtime requirement to Node 14 (LTS).\n```\n\n----------------------------------------\n\nTITLE: Checking Contacts Availability on Web\nDESCRIPTION: New method added to check if the Contacts module is available, particularly useful for web implementations. This allows developers to guard against usage on platforms where the module may not be supported.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nisAvailableAsync()\n```\n\n----------------------------------------\n\nTITLE: Executing pod-install via npx in Shell\nDESCRIPTION: This command executes the `pod-install` package using `npx`. The script automatically checks if the machine is Darwin, ensures CocoaPods CLI is installed (installing via gem or homebrew if necessary), finds an Xcode project in the current, `ios/`, or `macos/` directory, and runs `pod install`. If `pod install` fails due to an outdated repository, it automatically runs `pod repo update` and retries.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/pod-install/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Plugin in ESLint Configuration\nDESCRIPTION: JSON configuration showing how to add the Expo plugin to the plugins section of an ESLint configuration file (.eslintrc). Note that the 'eslint-plugin-' prefix can be omitted.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"expo\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android build.gradle for Expo Modules Autolinking\nDESCRIPTION: Configuration required in the Android app/build.gradle file to enable autolinking for Expo modules. Includes necessary script imports and native module configurations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/README.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// app/build.gradle\n\napply from: new File([\"node\", \"--print\", \"require.resolve('expo-modules-core/package.json')\"].execute(null, rootDir).text.trim(), \"../gradle.groovy\")\napply from: new File([\"node\", \"--print\", \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim(), \"../react.gradle\")\napply from: new File([\"node\", \"--print\", \"require.resolve('expo-updates/package.json')\"].execute(null, rootDir).text.trim(), \"../scripts/create-manifest-android.gradle\")\n\n// ...\n\napply from: new File([\"node\", \"--print\", \"require.resolve('@react-native-community/cli-platform-android/package.json')\"].execute(null, rootDir).text.trim(), \"../native_modules.gradle\");\napplyNativeModulesAppBuildGradle(project)\n```\n\n----------------------------------------\n\nTITLE: Installing expo-device in bare React Native projects\nDESCRIPTION: Command to install the expo-device package using npx expo install. This is specifically for bare React Native projects that have already installed and configured the expo package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-device/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-device\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Dev Tools Plugin\nDESCRIPTION: Command to install the React Navigation dev tools plugin, which allows debugging and inspecting navigation state and history in Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install @dev-plugins/react-navigation\n```\n\n----------------------------------------\n\nTITLE: Logging in and Managing Credentials with EAS CLI\nDESCRIPTION: This snippet shows how to log in to an Expo account and manage credentials using the EAS CLI. It's used by authorized users to create or update provisioning profiles and other iOS app credentials.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/apple-developer-program-roles-and-permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n\n$ eas credentials\n```\n\n----------------------------------------\n\nTITLE: Fixing source-login-scripts.sh error\nDESCRIPTION: This code fixes the source-login-scripts.sh error when extendedglob is enabled in zsh config.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\n# Fixed `source-login-scripts.sh` error when `extendedglob` is enabled in zsh config.\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Page for a React Native Library\nDESCRIPTION: This command demonstrates how to quickly open the GitHub page for a React Native library (react-native-localize in this example) using npx and npm-home.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx npm-home --github react-native-localize\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Services File Path in app.json\nDESCRIPTION: Configuration snippet showing how to specify the path to google-services.json file in the Expo app configuration. This setting is required for Android push notifications setup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/fcm-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n  /* @hide ...*/ /* @end */\n  \"android\": {\n    /* @hide ...*/ /* @end */\n    \"googleServicesFile\": \"./path/to/google-services.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Complete Function Documentation in TypeScript\nDESCRIPTION: Shows a comprehensive docblock for a camera function, including function description, parameter explanations, and return value documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Captures a still photo with the camera's current settings and given configuration options. The\n * image will be encoded using the specified format. If the format is not supported by the device,\n * this method throws an error.\n *\n * Upon capturing the photo, it is written to the device's temporary file storage. The file will be\n * accessible right after this method completes but may be cleared by the device OS at an arbitrary\n * time afterward; do not assume the file is permanent.\n *\n * @param options configuration options that specify the file format, image quality, and more\n * @returns a promise fulfilled with information about the captured photo, including its location on\n *   disk\n */\n```\n\n----------------------------------------\n\nTITLE: Building Android App with Fastlane\nDESCRIPTION: Command to execute the build lane for Android, which builds the Android application package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android build\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking for Android in AndroidManifest.xml\nDESCRIPTION: XML configuration to add an intent filter and set the launchMode for the MainActivity in Android to support deep linking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-auth-session/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MainActivity\"\n    android:launchMode=\"singleTask\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- Accepts URIs that begin with \"example://gizmos\" -->\n        <data android:scheme=\"example\"\n            android:host=\"gizmos\" />\n    </intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Version with Custom Values\nDESCRIPTION: Example of configuring iOS app version with custom build number and app version values specified in the configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure iOS version\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    # @info #\n    - eas/configure_ios_version:\n        inputs:\n          build_number: '123'\n          app_version: '1.0.0'\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Warning Message for Dynamic Config\nDESCRIPTION: Example of the warning message displayed when attempting to automatically add plugins to a dynamic app.config.js configuration file. Shows the manual configuration that needs to be added.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nCannot automatically write to dynamic config at: app.config.js\nPlease add the following to your app config\n\n  {\n    \"plugins\": [\n    \"expo-camera\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Generated Static HTML for Font Optimization\nDESCRIPTION: Shows the automatically generated HTML output for font optimization including preload link and font-face CSS definition\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/assets/inter.ttf\" as=\"font\" crossorigin />\n<style id=\"expo-generated-fonts\" type=\"text/css\">\n  @font-face {\n    font-family: inter;\n    src: url(/assets/inter.ttf);\n    font-display: auto;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading States with React Query in JSX\nDESCRIPTION: This code demonstrates a React component using React Query to fetch data with proper loading state handling. It shows how to conditionally render different UI elements based on the query status (loading, error, or success).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/metadata/copyright.txt#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst myProfile = useQuery(['getProfile', did], () => agent.getProfile({did}))\n\nreturn (\n  <View>\n    {myProfile.isLoading ? (\n      <LoadingScreen />\n    ) : myProfile.error ? (\n      <ErrorScreen error={myProfile.error} />\n    ) : (\n      <ProfileHeader profile={myProfile.data} />\n    )}\n  </View>\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing EAS Update Manifest URL\nDESCRIPTION: Demonstrates how to construct a URL to view an EAS Update manifest, including the necessary query parameters for runtime version, channel name, and platform.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttps://u.expo.dev/your-project-id?runtime-version=1.0.0&channel-name=production&platform=android\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Modules in Metro for Expo\nDESCRIPTION: This Metro configuration shows how to create and resolve a virtual module by generating a file in the node_modules/.cache directory and redirecting module resolution to it.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\nconst fs = require('fs');\n\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconst virtualPath = path.resolve(__dirname, 'node_modules/.cache/virtual/virtual-module.js');\n\n// Create the virtual module in a generated directory...\nfs.mkdirSync(path.dirname(virtualPath), { recursive: true });\nfs.writeFileSync(virtualPath, 'export default \"Hello World\";');\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName === 'virtual:my-module') {\n    return {\n      filePath: virtualPath,\n      type: 'sourceFile',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Rendering App Config Schema Table with React Component (JavaScript)\nDESCRIPTION: This snippet shows how to render the AppConfigSchemaTable React component, passing in the imported schema as a prop. It displays the table of configuration properties within the documentation. Requires the schema object and the AppConfigSchemaTable component to be available in the project, typically within a React or Next.js application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<AppConfigSchemaTable schema={schema} />\n```\n\n----------------------------------------\n\nTITLE: Running OSAScript commands in Node.js with nesh REPL\nDESCRIPTION: Demonstrates using @expo/osascript package to execute Apple Scripts in Node.js. The example shows checking if Simulator is running and quitting Safari through the OSAScript interface.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/osascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  ccheever@Charless-MacBook-Air:~/projects/osascript$nesh -y\n  .Node v4.1.0\n  Type .help for more information\n  nesh*> .require .\n  osascript = require(\"/Users/ccheever/projects/osascript\")\n  nesh*> yield osascript.execAsync('tell app \"System Events\" to count processes whose name is \"Simulator\"')\n  '1\\n'\n  nesh*> yield osascript.spawnAsync('quit app \"Safari\"')\n  0\n  nesh*>\n```\n\n----------------------------------------\n\nTITLE: EAS Submit Command for iOS\nDESCRIPTION: Command to submit iOS app to App Store using EAS CLI with profile specification\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/submit/ios.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas submit -p ios --latest --profile foobar\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server and Exporting for Production\nDESCRIPTION: Commands to start the Expo development server and export the project for production after moving the app directory to src/app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/src-directory.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n\n# Or export for production\n$ npx expo export\n```\n\n----------------------------------------\n\nTITLE: Adding DOM.Iterable to TypeScript libs in Expo\nDESCRIPTION: This code snippet adds 'DOM.Iterable' to TypeScript libs to support FormData in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Add `DOM.Iterable` to TypeScript libs to support `FormData`.\n```\n\n----------------------------------------\n\nTITLE: Ignoring Local Environment Files in Git\nDESCRIPTION: Add `.env*.local` to the `.gitignore` file to prevent local environment variable files (e.g., `.env.local`) from being committed to version control. This is recommended for projects using Expo SDK 49 or higher to manage environment-specific configurations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh .gitignore\n# local env files\n.env*.local\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Screen Orientation Module\nDESCRIPTION: Example showing how to import the ScreenOrientation module from expo-screen-orientation package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-orientation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ScreenOrientation from 'expo-screen-orientation';\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration with Fallbacks\nDESCRIPTION: Sets up configuration with environment variable support and default fallback values for local development and EAS Updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet Config = {\n  apiUrl: process.env.EXPO_PUBLIC_API_URL || 'https://localhost:3000',\n  enableHiddenFeatures: process.env.EXPO_PUBLIC_ENABLE_HIDDEN_FEATURES || true,\n};\n\n// set variables based on channel...\n\nexport default Config;\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-manifests Module in JavaScript\nDESCRIPTION: This snippet shows how to import the entire `expo-manifests` module using ES module syntax in JavaScript. Importing `* as Manifests` makes all exports from the library available under the `Manifests` namespace, allowing access to functions and types related to the Expo manifest.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/manifests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Manifests from 'expo-manifests';\n```\n\n----------------------------------------\n\nTITLE: Service Worker Registration Script\nDESCRIPTION: HTML script for registering a service worker in a single-page application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker\n        .register('/sw.js')\n        .then(registration => {\n          console.log('Service Worker registered with scope:', registration.scope);\n        })\n        .catch(error => {\n          console.error('Service Worker registration failed:', error);\n        });\n    });\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Installation Instructions for DateTimePicker\nDESCRIPTION: Component that renders the installation instructions for the DateTimePicker package, linking to the official GitHub repository's getting started guide.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://github.com/react-native-datetimepicker/datetimepicker#getting-started\" />\n```\n\n----------------------------------------\n\nTITLE: Role Privileges Table in Markdown\nDESCRIPTION: A markdown table that outlines the different role types in Expo organization accounts and their associated privileges. It defines the permissions for Owner, Admin, Developer, and Viewer roles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/accounts/account-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Role          | Description                                                                                                                                               |\n| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Owner**     | Can take any action on an account or any projects, including deleting them.                                                                               |\n| **Admin**     | Can control most settings on your account, including signing up for paid services, changing permissions of other users, and managing programmatic access. |\n| **Developer** | Can create new projects, make new builds, release updates, and manage credentials.                                                                        |\n| **Viewer**    | Can only view your projects through Expo Go but cannot modify your projects in any way.                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Defining TimeIntervalTriggerInput Interface in TypeScript\nDESCRIPTION: Defines an interface for interval-based notification triggers. This allows scheduling notifications to be delivered after a specified number of seconds, with optional repeating behavior.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TimeIntervalTriggerInput {\n  channelId?: string;\n  repeats?: boolean;\n  seconds: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for Expo CLI\nDESCRIPTION: Modify package.json scripts to use Expo CLI run commands for better logging and handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"expo start\",\n-    \"android\": \"react-native run-android\",\n-    \"ios\": \"react-native run-ios\",\n+    \"android\": \"expo run:android\",\n+    \"ios\": \"expo run:ios\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Default Android npm Registry Configuration in EAS Build\nDESCRIPTION: The default .npmrc configuration used by EAS Build on Android, pointing to their self-hosted npm cache service.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nregistry=http://npm-cache-service.worker-infra-production.svc.cluster.local:4873\n```\n\n----------------------------------------\n\nTITLE: Running a Custom EAS Build with Testing Profile\nDESCRIPTION: A terminal command that initiates an EAS Build with the custom test profile for Android. This triggers the workflow defined in the YAML configuration file on EAS Build servers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build -p android -e test\n```\n\n----------------------------------------\n\nTITLE: Installing SASS Dependency for Expo Metro\nDESCRIPTION: Shell command to install the `sass` package as a development dependency using Yarn. This package is required to enable partial SCSS/SASS support in Expo's Metro bundler, allowing import of `.scss` and `.sass` files. CSS support must also be enabled in `metro.config.js` for this to function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n'$ yarn add -D sass'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entry File in package.json\nDESCRIPTION: Demonstrates setting a custom entry file (e.g., 'src/main.js') for the application using the 'main' field within the project's `package.json`. When using a custom entry file instead of the default 'App.js', `registerRootComponent` must be explicitly called within that file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.js\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Hiding Tab from Navigation\nDESCRIPTION: Demonstrates how to hide a specific tab from the tab bar by setting href to null in the options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\n\nexport default function TabLayout() {\n  return (\n    <Tabs>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          href: null,\n        }}\n      />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Support in Metro Config (Expo SDK 49)\nDESCRIPTION: Configures the Metro bundler for an Expo project (SDK 49) to enable CSS processing, including CSS Modules. This requires setting the `isCSSEnabled` option to `true` within the configuration object returned by `getDefaultConfig`. This step is necessary for importing `.css` files in SDK 49.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js metro.config.js\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  isCSSEnabled: true,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: StatusBar Import Statement\nDESCRIPTION: Shows how to import the StatusBar component from the expo-status-bar package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar Component in React Native\nDESCRIPTION: This snippet demonstrates how to import the StatusBar component from the expo-status-bar package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Searching for Expo Modules with CLI\nDESCRIPTION: This snippet demonstrates the output of the 'search' command in the Expo Autolinking CLI. It returns a JSON object containing information about found Expo modules, including their paths, versions, and configurations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo-random\": {\n    \"path\": \"/absolute/path/to/node_modules/expo-random\",\n    \"version\": \"13.0.0\",\n    \"config\": {\n      \"platforms\": [\"ios\", \"android\"],\n      \"ios\": { \"modules\": [\"RandomModule\"] },\n      \"android\": { \"modules\": [\"expo.modules.random.RandomModule\"] }\n    },\n    \"duplicates\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Naming the Expo project\nDESCRIPTION: Prompt to enter the name of the new Expo project during the creation process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nWhat is your app named? my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring AppDelegate Subscribers in Expo Module\nDESCRIPTION: JSON configuration file that specifies the AppDelegate subscribers to be used in the iOS app. This config enables the AppLifecycleDelegate class to receive app lifecycle events.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/appdelegate-subscribers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"appDelegateSubscribers\": [\"AppLifecycleDelegate\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Command for Android Build in YAML\nDESCRIPTION: This snippet demonstrates how to use the 'eas/run_gradle' function in a YAML configuration file for building an Android app. It shows the basic usage and an example with custom input parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build Android app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    # @info #\n    - eas/run_gradle\n    # @end #\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build Android app\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    # @info #\n    - eas/run_gradle:\n        inputs:\n          command: :app:bundleRelease\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Source Map Debug ID Annotation Format\nDESCRIPTION: This snippet shows the format of the debug ID annotation appended to bundled JavaScript files when exported with external source maps in Expo SDK 50+. The `debugId` is a deterministic hash of the bundle's content, used to correlate the bundle file with its corresponding source map (`*.js.map` or `*.hbc.map`), which contains a matching `debugId` property.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// <all source code>\n\n//# debugId=<deterministic chunk hash>\n```\n```\n\n----------------------------------------\n\nTITLE: Running Gradle commands for Android\nDESCRIPTION: Executes Gradle commands to clean and build the Android project after configuration changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./gradlew clean\n$ ./gradlew assembleDebug\n```\n\n----------------------------------------\n\nTITLE: iOS WebView Implementation\nDESCRIPTION: Native iOS implementation of the WebView component using WKWebView with layout handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\nimport WebKit\n\nclass ExpoWebView: ExpoView {\n  let webView = WKWebView()\n\n  required init(appContext: AppContext? = nil) {\n    super.init(appContext: appContext)\n    clipsToBounds = true\n    addSubview(webView)\n\n    let url =  URL(string:\"https://docs.expo.dev/modules/\")!\n    let urlRequest = URLRequest(url:url)\n    webView.load(urlRequest)\n  }\n\n  override func layoutSubviews() {\n    webView.frame = bounds\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Magnetometer Modules from Expo Sensors\nDESCRIPTION: This snippet shows how to import the `Magnetometer` (for calibrated data) and `MagnetometerUncalibrated` (for raw data) modules from the `expo-sensors` package. These imports are the entry points for accessing the device's magnetometer functionality within an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/magnetometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Installing expo-location in bare React Native projects\nDESCRIPTION: Command to install the expo-location package using npx and expo CLI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-location/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-location\n```\n\n----------------------------------------\n\nTITLE: Using registerRootComponent in a Custom Entry File (TSX)\nDESCRIPTION: Provides a TSX example demonstrating how to use `registerRootComponent` within a custom entry file (e.g., 'src/main.js', as configured in `package.json`). It imports the function and the root component (`App`), then calls `registerRootComponent` with the `App` component to initialize the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidNotificationPriority Enum\nDESCRIPTION: Enumerates the priority levels for Android notifications, corresponding to Android's Notification#priority field.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AndroidNotificationPriority {\n  MIN = 'min',\n  LOW = 'low',\n  DEFAULT = 'default',\n  HIGH = 'high',\n  MAX = 'max',\n}\n```\n\n----------------------------------------\n\nTITLE: Editing EAS Update Channel Branch\nDESCRIPTION: Command line instructions for modifying channel-to-branch mapping in EAS Update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# eas channel:edit [channel-name] --branch [branch-name]\n\n# Example\n$ eas channel:edit production --branch release-1.0\n```\n\n----------------------------------------\n\nTITLE: Android Permissions Configuration\nDESCRIPTION: XML configuration for adding vibration permission to Android manifest\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-haptics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n```\n\n----------------------------------------\n\nTITLE: Running EAS Update Non-Interactively (Shell)\nDESCRIPTION: The `eas update` command manages updates distributed via Expo Application Services (EAS). The `--non-interactive` flag is used to run the command without prompts, useful in CI/CD environments or for scripting. In this context, it was specifically added to hide certain errors.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\neas update --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build for a Project\nDESCRIPTION: Command to set up EAS Build configuration for a project. This creates an eas.json file with build profiles for different environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild\nDESCRIPTION: Executes the Expo prebuild process to generate native iOS and Android project files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Importing captureRef in React Native\nDESCRIPTION: Basic import statement for the captureRef function from react-native-view-shot library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { captureRef } from 'react-native-view-shot';\n```\n\n----------------------------------------\n\nTITLE: Checking Window Availability in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check for the availability of the 'window' object in JavaScript, which is typically used to remove server-side code in universal applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntypeof window\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Notifications\nDESCRIPTION: XML configuration for customizing notification icon and color in the AndroidManifest.xml file for a React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" ...>\n  <application ...>\n    ...\n    <meta-data\n      android:name=\"expo.modules.notifications.default_notification_icon\"\n      android:resource=\"@drawable/ic_stat_notifications\" />\n    <meta-data\n      android:name=\"expo.modules.notifications.default_notification_color\"\n      android:resource=\"@color/notification_icon_color\" />\n    ...\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Reading files using process.cwd() in generateStaticParams\nDESCRIPTION: Demonstrates how to read files from the project directory in the generateStaticParams function using process.cwd().\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport async function generateStaticParams(params: {\n  id: string;\n}): Promise<Record<string, string>[]> {\n  const directory = await fs.readdir(path.join(process.cwd(), './posts/', category));\n  const posts = directory.filter(fileOrSubDirectory => return path.extname(fileOrSubDirectory) === '.md')\n\n  return {\n    id,\n    posts,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting a Certificate from a Keystore in a PKCS#12 File\nDESCRIPTION: This code demonstrates how to extract a certificate from a keystore in a PKCS#12 file. It deserializes the base64-encoded P12 file, extracts the certificate using the alias as a friendly name, and generates a SHA-1 fingerprint of the certificate.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/pkcs12/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst p12 = parsePKCS12(base64EncodedP12, password); // deserializes encodedP12\nconst certificate = getX509CertificateByFriendlyName(p12, alias); // extracts single certificate stored under alias in p12\nconst sha1Fingerprint = getCertificateFingerprint(certificate, {\n  hashAlgorithm: 'sha1',\n}); // Hash like 02ec75a7181c575757baa931fe3105b7125ff10a\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Development Build in eas.json (JSON)\nDESCRIPTION: Defines the `developmentBuild` profile in `eas.json`. It configures an internal distribution build for Android and a simulator build for iOS, referencing external YAML files (`development-build-android.yml`, `development-build-ios.yml`) for the detailed build steps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* @hide ... */ /* @end */\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"developmentBuild\": {\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"config\": \"development-build-android.yml\"\n      },\n      \"ios\": {\n        \"simulator\": true,\n        \"config\": \"development-build-ios.yml\"\n      }\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-contacts in bare React Native projects\nDESCRIPTION: Command to install the expo-contacts package using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-contacts\n```\n\n----------------------------------------\n\nTITLE: Modifying Android Gradle Bundle Command for Expo - Diff\nDESCRIPTION: Describes changes to android/app/build.gradle to replace standard React Native bundling with Expo CLI. Updates 'react' CLI to use '@expo/cli' and 'export:embed' bundle command for production. Inputs are build.gradle script lines, output is correct packaging for Expo-based projects. Limitations: must be placed inside the 'react' config block in build.gradle.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\nreact {\n  ...\n+     // Use Expo CLI to bundle the app, this ensures the Metro config\n+     // works correctly with Expo projects.\n+     cliFile = new File([\"node\", \"--print\", \"require.resolve('@expo/cli')\"].execute(null, rootDir).text.trim())\n+     bundleCommand = \"export:embed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced .npmrc for Both npm and Private Registry\nDESCRIPTION: A complex .npmrc configuration that allows installing packages from both npm (for scoped packages) and a private registry (for other packages).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n//registry.npmjs.org/:_authToken=${NPM_TOKEN}\n@johndoe:registry=https://registry.npmjs.org/\nregistry=https://registry.johndoe.com/\n```\n\n----------------------------------------\n\nTITLE: Updating glob dependency in Expo\nDESCRIPTION: This code updates the 'glob' dependency from version 7 to version 10 in the Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Update `glob@7` to `glob@10`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Expo Module Exclusions in package.json\nDESCRIPTION: This JSON configuration demonstrates how to exclude Expo modules for specific platforms using the expo.autolinking field in package.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-expo-modules.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"...\",\n  \"dependencies\": {},\n  \"expo\": {\n    \"autolinking\": {\n      \"exclude\": [\"expo-font\"],\n      \"ios\": {\n        \"exclude\": [\"expo-keep-awake\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating assetlinks.json for Android App Links\nDESCRIPTION: This JSON file is used for website verification in Android App Links. It specifies the app's package name and SHA256 certificate fingerprints to establish a connection between the website and the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/deep-linking.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      \"package_name\": \"{package_name}\",\n      \"sha256_cert_fingerprints\": [\n        // Supports multiple fingerprints for different apps and keys\n        \"{sha256_cert_fingerprints}\"\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS JSON for Asynchronous Metadata\nDESCRIPTION: This snippet shows the eas.json configuration for using an asynchronous JavaScript file for dynamic metadata with external content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"ios\": {\n        \"metadataPath\": \"./store.config.js\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android MainActivity Component Name Configuration\nDESCRIPTION: Manual setup for Android to set the main component name in MainActivity.java file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n  protected String getMainComponentName() {\n    return \"main\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Site Association for Handoff\nDESCRIPTION: JSON configuration for the apple-app-site-association file that enables Universal Links and Handoff functionality. Includes applinks, activitycontinuation, and webcredentials configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appIDs\": [\"<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>\"],\n        \"components\": [\n          {\n            \"/\": \"*\",\n            \"comment\": \"Matches all routes\"\n          }\n        ]\n      }\n    ]\n  },\n  \"activitycontinuation\": {\n    \"apps\": [\"<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>\"]\n  },\n  \"webcredentials\": {\n    \"apps\": [\"<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal EAS Find and Upload Build Artifacts for iOS - Expo (YAML)\nDESCRIPTION: This YAML snippet shows a simplified build workflow for iOS using only the basic EAS steps and the automatic artifact upload step (eas/find_and_upload_build_artifacts). No custom credentials or team ID inputs are provided; uses defaults. Outputs are uploaded to the EAS artifact server from standard build locations. Workflow should not use 'buildArtifactPaths' in the build profile if this step is present, to avoid conflicts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\\n  name: Build iOS app\\n  steps:\\n    - eas/checkout\\n    - eas/install_node_modules\\n    - eas/prebuild\\n    - eas/configure_eas_update\\n    - eas/generate_gymfile_template\\n    - eas/run_fastlane\\n    # @info #\\n    - eas/find_and_upload_build_artifacts\\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Enabling Developer Support in Android DevMenuManager\nDESCRIPTION: Code modification to enable local bundler support in Android implementation by changing useDeveloperSupport value from false to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-menu/README.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- val useDeveloperSupport = false\n+ val useDeveloperSupport = true\n```\n\n----------------------------------------\n\nTITLE: Importing Expo LightSensor in JavaScript\nDESCRIPTION: This snippet shows the necessary import statement to use the `LightSensor` API. It imports the `LightSensor` object directly from the `expo-sensors` package, making its methods like `addListener` available for use.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { LightSensor } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the Fabric Static Library in CMake\nDESCRIPTION: This CMake script configures the build process for a static library named 'fabric'. It defines source file locations (`COMMON_FABRIC_DIR`), gathers C++ source files (`.cpp`), creates the static library target, sets C++20 standard and Folly flags as compile options, finds required packages (ReactAndroid, fbjni), sets include directories using properties from found packages, and links the 'fabric' library against numerous dependencies including CommonSettings, fbjni, and various ReactAndroid components (like folly, glog, jsi, yoga, etc.).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/android/src/fabric/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright 2018-present 650 Industries. All rights reserved.\n\nset(COMMON_FABRIC_DIR ${COMMON_DIR}/fabric)\nfile(GLOB SOURCES \"*.cpp\")\nfile(GLOB COMMON_FABRIC_SOURCES \"${COMMON_FABRIC_DIR}/*.cpp\")\n\nadd_library(fabric STATIC\n  ${COMMON_FABRIC_SOURCES}\n  ${SOURCES}\n)\n\ninclude(\"${REACT_NATIVE_DIR}/ReactAndroid/cmake-utils/folly-flags.cmake\")\n\ntarget_compile_options(fabric PRIVATE\n  \"-std=c++20\"\n  ${folly_FLAGS}\n)\n\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nfind_package(fbjni REQUIRED CONFIG)\n\nget_target_property(INCLUDE_fabricjni\n        ReactAndroid::fabricjni\n        INTERFACE_INCLUDE_DIRECTORIES)\n\ntarget_include_directories(fabric PRIVATE\n  \"${REACT_NATIVE_DIR}/ReactCommon\"\n  \"${COMMON_FABRIC_DIR}\"\n  \"${INCLUDE_fabricjni}/react/fabric\"\n)\n\ntarget_link_libraries(fabric\n  CommonSettings\n  fbjni::fbjni\n  ReactAndroid::fabricjni\n  ReactAndroid::folly_runtime\n  ReactAndroid::glog\n  ReactAndroid::jsi\n  ReactAndroid::react_debug\n  ReactAndroid::react_render_componentregistry\n  ReactAndroid::react_render_core\n  ReactAndroid::react_render_debug\n  ReactAndroid::react_render_graphics\n  ReactAndroid::react_render_mapbuffer\n  ReactAndroid::react_utils\n  ReactAndroid::rrc_view\n  ReactAndroid::runtimeexecutor\n  ReactAndroid::yoga\n)\n```\n\n----------------------------------------\n\nTITLE: Terminal Commands - Importing Secrets from .env File\nDESCRIPTION: Demonstrates how to push secrets from a .env file to EAS using the eas secret:push command. Shows both basic usage and Doppler integration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ eas secret:push --scope project --env-file ./eas/.env\n$ doppler run --mount ./eas/.env -- eas secret:push --scope project --env-file ./eas/.env\n```\n\n----------------------------------------\n\nTITLE: Disabling Capability Sync in EAS Build\nDESCRIPTION: This command demonstrates how to disable the automatic capability synchronization feature in EAS Build by setting an environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/ios-capabilities.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_NO_CAPABILITY_SYNC=1 eas build\n```\n\n----------------------------------------\n\nTITLE: Relative Path Navigation with useSegments\nDESCRIPTION: Example of using useSegments hook to handle relative path navigation between tabs\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link, useSegments } from 'expo-router';\n\nexport function Button() {\n  const [\n    // This will be either `(feed)` or `(search)` depending on the current tab.\n    first,\n  ] = useSegments();\n\n  return <Link href={`/${first}/profile`}>Push profile</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-network in bare React Native projects\nDESCRIPTION: Command to install the expo-network package using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-network/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-network\n```\n\n----------------------------------------\n\nTITLE: Creating EAS Update Channel\nDESCRIPTION: Command line instructions for creating a new channel in EAS Update system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# eas channel:create [channel-name]\n\n# Example\n$ eas channel:create production\n```\n\n----------------------------------------\n\nTITLE: React Native Version Mismatch Error Message\nDESCRIPTION: Example of the error message displayed when there's a version mismatch between JavaScript and Native versions of React Native.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/react-native-version-mismatch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nReact Native version mismatch.\n\nJavaScript version: X.XX.X\nNative version: X.XX.X\n\nMake sure you have rebuilt the native code...\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript Definition for setNotificationCategoryAsync Options\nDESCRIPTION: Corrected the TypeScript definition for `setNotificationCategoryAsync` options. The expected property is `options.allowAnnouncement`, not the misspelled `options.allowAnnouncment`. This ensures type safety and correct usage in TypeScript projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetNotificationCategoryAsync\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptions.allowAnnouncement\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptions.allowAnnouncment\n```\n\n----------------------------------------\n\nTITLE: Fixing Race Condition Between getExpoPushTokenAsync and getDevicePushTokenAsync\nDESCRIPTION: Resolved an issue where `getExpoPushTokenAsync` could reject if the underlying `Promise` from `getDevicePushTokenAsync` had not yet fulfilled (and vice versa). This improves the reliability of obtaining push tokens, especially with Fast Refresh enabled.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngetExpoPushTokenAsync\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetDevicePushTokenAsync\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPromise\n```\n\n----------------------------------------\n\nTITLE: Rendering a Cross-Platform Nav Element with @expo/html-elements in TypeScript\nDESCRIPTION: This snippet shows use of the Nav component from @expo/html-elements to produce a navigation container that adapts to either <nav> (web) or <View> (native). The only dependency is @expo/html-elements. No required props; just use the component to provide platform-correct navigation semantics, styles, and accessibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Nav } from '@expo/html-elements';\n\nexport default () => <Nav />;\n```\n\n----------------------------------------\n\nTITLE: Function Input Configuration\nDESCRIPTION: Shows how to define input parameters for a function with name and default value\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n    inputs:\n      - name: name\n        default_value: Hello world\n    command: echo \"${ inputs.name }!\"\n```\n\n----------------------------------------\n\nTITLE: Importing SystemUI from Expo\nDESCRIPTION: Shows how to import the SystemUI module from the expo-system-ui package for use in React Native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/system-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SystemUI from 'expo-system-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module from Expo SMS (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the entire set of exports from the expo-sms package into the SMS namespace in a JavaScript or TypeScript file. It is required for accessing all SMS-related functions (such as sending an SMS or checking device capability) within an Expo or React Native project. Developers should have the expo-sms package installed and ensure the environment targets either Android or iOS as supported platforms. Inputs: none. Outputs: the SMS namespace containing all functions from expo-sms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Install Latest Build on iOS Simulator\nDESCRIPTION: Command to automatically download and install the most recent build on the iOS Simulator using the --latest flag.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/simulators.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:run -p ios --latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Example App with API Key\nDESCRIPTION: This JSON configuration in the example app's app.json file demonstrates how to pass the API key to the custom plugin as a configuration option.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    ...\n    \"plugins\": [[\"../app.plugin.js\", { \"apiKey\": \"custom_secret_api\" }]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Intl API Usage Example\nDESCRIPTION: Example showing how to use the Intl API for number formatting with device locale.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nnew Intl.NumberFormat('default', { style: 'currency', currency: 'EUR' }).format(5.0);\n```\n\n----------------------------------------\n\nTITLE: Importing Gyroscope Module from expo-sensors\nDESCRIPTION: A simple import statement showing how to import the Gyroscope module from the expo-sensors package. This is the basic entry point for using gyroscope functionality in an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Expanded Android Build and Test Workflow\nDESCRIPTION: Detailed YAML configuration for building and testing an Android app, expanding the 'eas/maestro_test' function into individual steps. It includes installing Maestro, starting an Android emulator, installing the app, running tests, and uploading artifacts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test (Android, expanded)\n  steps:\n    - eas/build\n    # @info #\n    - eas/install_maestro\n    - eas/start_android_emulator:\n        inputs:\n          system_package_name: system-images;android-34;default;x86_64\n    - run:\n        command: |\n          # shopt -s globstar is necessary to add /**/ support\n          shopt -s globstar\n          # shopt -s nullglob is necessary not to try to install\n          # SEARCH_PATH literally if there are no matching files.\n          shopt -s nullglob\n\n          SEARCH_PATH=\"android/app/build/outputs/**/*.apk\"\n          FILES_FOUND=false\n\n          for APP_PATH in $SEARCH_PATH; do\n            FILES_FOUND=true\n            echo \"Installing \\\"$APP_PATH\\\"\"\n            adb install \"$APP_PATH\"\n          done\n\n          if ! $FILES_FOUND; then\n            echo \"No files found matching \\\"$SEARCH_PATH\\\". Are you sure you've built an Emulator app?\"\n            exit 1\n          fi\n    - run:\n        command: |\n          maestro test maestro/flow.yaml\n    - eas/upload_artifact:\n        name: Upload test artifact\n        if: ${ always() }\n        inputs:\n          type: build-artifact\n          path: ${ eas.env.HOME }/.maestro/tests\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Sending Firebase Cloud Messages using Node.js Admin SDK\nDESCRIPTION: Demonstrates the correct and incorrect ways to send Firebase Cloud Messages using the Admin SDK. Shows the difference between notification-type messages (which don't trigger expo-notifications) and data-type messages (which do trigger expo-notifications events). Includes proper payload structuring for both types.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst devicePushToken = /* ... */;\nconst options = /* ... */;\n\n// ❌ The following payload has a root-level notification object and\n// it will not trigger expo-notifications and may not work as expected.\nadmin.messaging().sendToDevice(\n  devicePushToken,\n  {\n    notification: {\n      title: \"This is a notification-type message\",\n      body: \"`expo-notifications` will never see this 😢\",\n    },\n    data: {\n      photoId: 42,\n    },\n  },\n  options\n);\n\n// ✅ There is no \"notification\" key in the root level of the payload\n// so the message is a \"data\" message, thus triggering expo-notifications.\nadmin.messaging().sendToDevice(\n  devicePushToken,\n  {\n    data: {\n      title: \"This is a data-type message\",\n      message: \"`expo-notifications` events will be triggered 🤗\",\n      // ⚠️ Notice the schema of this payload is different\n      // than that of Firebase SDK. What is there called \"body\"\n      // here is a \"message\". For more info see:\n      // https://docs.expo.dev/versions/latest/sdk/notifications/#android-push-notification-payload-specification\n\n      body:                              // As per Android payload format specified above, the\n        JSON.stringify({ photoId: 42 }), // additional \"data\" should be placed under \"body\" key.\n    },\n  },\n  options\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Root Layout to Support Route Groups in Expo Router\nDESCRIPTION: Modifies the root layout to include the home group, which enables organizing routes into logical sections. This structure helps with code organization and facilitates more complex navigation patterns.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/file-based-routing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\n\nexport default function RootLayout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"(home)\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ContentSpotlight Component in JSX\nDESCRIPTION: This snippet demonstrates the use of the ContentSpotlight component to display a video showcasing Expo Orbit launching an update. It includes props for controls, file path, and a caption describing the content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/review/with-orbit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContentSpotlight\n  controls\n  file=\"review/updates-with-orbit.mp4\"\n  caption=\"Expo Orbit launching an update directly from Expo dashboard to an iOS Simulator.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding Install Instructions Section in a Markdown/JSX Hybrid File (JavaScript/JSX)\nDESCRIPTION: This code embeds the APIInstallSection component, passing an href prop that points to the official installation and usage page for the @react-native-community/slider package. The prop provides the target URL for installation instructions, facilitating seamless integration into documentation pages. Requires the APIInstallSection component to be defined elsewhere and assumes a hybrid Markdown/JSX or MDX environment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/slider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<APIInstallSection href=\\\"https://github.com/callstack/react-native-slider#installation--usage\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image package in React Native projects\nDESCRIPTION: Command to install the expo-image package using npx and expo CLI. This is typically used in bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image\n```\n\n----------------------------------------\n\nTITLE: BoxLink Component Implementation in Documentation\nDESCRIPTION: JSX implementation of BoxLink components used to create navigation links to different sections of the documentation. Each BoxLink includes an icon, title, and description.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Quick start\"\n  Icon={Rocket02Icon}\n  description=\"Learn how to quickly get started using Expo Router.\"\n  href=\"/router/installation/#quick-start\"\n/>\n<BoxLink\n  title=\"Manual installation\"\n  Icon={BookOpen02Icon}\n  description=\"Detailed instructions on how to get started and add Expo Router to your existing app.\"\n  href=\"/router/installation/#manual-installation\"\n/>\n<BoxLink\n  title=\"Example app\"\n  Icon={GithubIcon}\n  description=\"See the source code for the example app on GitHub.\"\n  href=\"https://github.com/expo/expo/tree/main/templates/expo-template-tabs\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Expo NavigationBar API (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import all NavigationBar APIs from the expo-navigation-bar package in JavaScript. The import statement is required to reference and use the package's methods for interacting with the native Android navigation bar. Dependencies: expo-navigation-bar installed via npm or yarn. Input: None. Output: The NavigationBar object for accessing library functions. This import statement is essential before calling any further methods of the package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Creating a new Expo project using Bun\nDESCRIPTION: Command to create a new Expo project using Bun package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bun create expo\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Debugger on macOS using Homebrew\nDESCRIPTION: Command to install React Native Debugger using Homebrew package manager on macOS. React Native Debugger is a standalone app that includes multiple debugging tools integrated together.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/tools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install react-native-debugger\n```\n\n----------------------------------------\n\nTITLE: Expo Crypto Import Statement\nDESCRIPTION: Standard import statement for using the expo-crypto module in your project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/crypto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Crypto from 'expo-crypto';\n```\n\n----------------------------------------\n\nTITLE: Creating Android Internal Distribution Build with EAS\nDESCRIPTION: Command to initiate an Android build using the preview profile for internal distribution, which generates an .apk file that can be shared with team members.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/internal-distribution-builds.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform android --profile preview\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Gradient Colors in TypeScript\nDESCRIPTION: This code snippet shows a stricter TypeScript type definition for the 'colors' prop in the Linear Gradient component. It now requires an array of at least two values.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-linear-gradient/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncolors: string[]\n```\n\n----------------------------------------\n\nTITLE: Defining Mutable Property in Swift\nDESCRIPTION: Defines a new mutable property with both getter and setter directly on the JavaScript object that represents a native module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nProperty(\"foo\")\n  .get { return \"bar\" }\n  .set { (newValue: String) in\n    // do something with new value\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Lifecycle Hooks in package.json\nDESCRIPTION: This snippet demonstrates how to configure EAS Build lifecycle hooks in the package.json file. It includes all six available hooks: pre-install, post-install, on-success, on-error, on-cancel, and on-complete.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/npm-hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"scripts\": {\n    \"eas-build-pre-install\": \"echo 123\",\n    \"eas-build-post-install\": \"echo 456\",\n    \"eas-build-on-success\": \"echo 789\",\n    \"eas-build-on-error\": \"echo 012\",\n    \"eas-build-on-cancel\": \"echo 345\",\n    \"start\": \"expo start\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"expo\": \"51.0.0\"\n    /* @hide ... */ /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing iOS WebView Module\nDESCRIPTION: Basic Swift implementation of the ExpoWebView module definition that sets up the native view integration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoWebViewModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView.self) {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Default Module Files\nDESCRIPTION: Series of commands to remove unnecessary files from the default module created by create-expo-module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd expo-native-configuration\n$ rm ios/ExpoNativeConfigurationView.swift\n$ rm android/src/main/java/expo/modules/nativeconfiguration/ExpoNativeConfigurationView.kt\n$ rm src/ExpoNativeConfigurationView.tsx src/ExpoNativeConfiguration.types.ts\n$ rm src/ExpoNativeConfigurationView.web.tsx src/ExpoNativeConfigurationModule.web.ts\n```\n\n----------------------------------------\n\nTITLE: Adding React Refresh Override for npm in package.json\nDESCRIPTION: Sets an npm override for react-refresh in the package.json file for SDK 49 projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": {\n    \"react-refresh\": \"~0.14.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Update for Android Gradle 7 Fix\nDESCRIPTION: Fix for Android build error 'Plugin with id maven not found' in Android Gradle 7\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sensors/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ncompileSdkVersion 33\ntargetSdkVersion 33\n```\n\n----------------------------------------\n\nTITLE: Clearing Metro Cache with Expo CLI (Shell)\nDESCRIPTION: This shell command demonstrates how to start the Expo development server while clearing the Metro bundler cache using the `--clear` flag. This is often necessary after making changes to the `metro.config.js` file or PostCSS configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n<Terminal cmd={['$ npx expo start --clear']} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler in Expo\nDESCRIPTION: Basic Metro bundler configuration in app.json for web support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Strings for SplashScreen in Android\nDESCRIPTION: This snippet shows how to add the necessary configuration strings to the strings.xml file when migrating to newer versions of expo-splash-screen, defining the resize mode and StatusBar translucency settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n--- a/android/app/src/main/res/values/strings.xml\n+++ b/android/app/src/main/res/values/strings.xml\n@@ -1,4 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <resources>\n   <string name=\"app_name\">sdk42</string>\n+  <string name=\"expo_splash_screen_resize_mode\">contain</string>\n+  <string name=\"expo_splash_screen_status_bar_translucent\">false</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Using SQLite Context Hook in Expo\nDESCRIPTION: This snippet demonstrates the usage of the new useSQLiteContext hook that can be used across components in Expo projects with SQLite integration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSQLiteContext } from 'expo-sqlite/next';\n\nfunction MyComponent() {\n  const db = useSQLiteContext();\n  // Use db for database operations\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up SafeAreaProvider\nDESCRIPTION: Example of setting up the SafeAreaProvider at the root of the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Content in Markdown\nDESCRIPTION: Complete changelog for the Bluesky Social Expo project, documenting unpublished changes and version histories from 1.9.0 to current, including breaking changes, new features, bug fixes, and other improvements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS and tvOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840), [#30871](https://github.com/expo/expo/pull/30871) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n- [Android] Added `Image.loadAsync` API. ([#26824](https://github.com/expo/expo/pull/26824) by [@aleqsio](https://github.com/aleqsio))\n- Add basic React Server Component support. ([#29869](https://github.com/expo/expo/pull/29869) by [@EvanBacon](https://github.com/EvanBacon))\n- [iOS] Added `Image.loadAsync` API. ([#25079](https://github.com/expo/expo/pull/25079) by [@tsapeta](https://github.com/tsapeta))\n- [iOS] Added support for rendering shared image refs. ([#30661](https://github.com/expo/expo/pull/30661) by [@tsapeta](https://github.com/tsapeta))\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Yarn Settings for Android Builds\nDESCRIPTION: Global Yarn configuration in ~/.yarnrc.yml for Android builds. These settings configure the npm registry server, allow HTTP connections to the registry, and disable immutable installs for more flexible dependency management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nunsafeHttpWhitelist:\n  - '*'\nnpmRegistryServer: 'http://10.4.0.19:4873'\nenableImmutableInstalls: false\n```\n\n----------------------------------------\n\nTITLE: Using CSS Environment Variables for Safe Area Insets\nDESCRIPTION: Demonstrates how to use CSS environment variables to apply safe area insets in a web-only application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocationNotificationTrigger and Related Interfaces for iOS in TypeScript\nDESCRIPTION: Defines interfaces for location-based notification triggers on iOS, including circular region and beacon region types. These triggers allow notifications to be sent when a user enters or exits defined geographic areas.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LocationNotificationTrigger {\n  type: 'location';\n  repeats: boolean;\n  region: CircularRegion | BeaconRegion;\n}\n\ninterface Region {\n  type: string;\n  identifier: string;\n  notifyOnEntry: boolean;\n  notifyOnExit: boolean;\n}\n\nexport interface CircularRegion extends Region {\n  type: 'circular';\n  radius: number;\n  center: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\nexport interface BeaconRegion extends Region {\n  type: 'beacon';\n  notifyEntryStateOnDisplay: boolean;\n  major: number | null;\n  minor: number | null;\n  uuid?: string;\n  beaconIdentityConstraint?: {\n    uuid: string;\n    major: number | null;\n    minor: number | null;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Camera Plugin in app.json\nDESCRIPTION: Configuration example for expo-camera plugin in app.json, showing how to set camera and microphone permissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera-legacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Reference to the react-native-screens package name and implementation note\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/screens.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nreact-native-screens\n```\n\n----------------------------------------\n\nTITLE: Checking Android SDK Platform-Tools ADB Version in Shell\nDESCRIPTION: These commands navigate to the Android SDK's platform-tools directory (typically within the user's Library folder on macOS) and execute the specific ADB version located there. This helps compare it with the system's default ADB version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/android-studio-emulator.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/Library/Android/sdk/platform-tools\n$ ./adb version\n```\n\n----------------------------------------\n\nTITLE: Using proper comment style in JavaScript functions\nDESCRIPTION: Demonstrates the recommended way to write comments in JavaScript functions. Uses block comments for function documentation and line comments for implementation details, maintaining clean and informative code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Gets the latest version of Android that's been released. This is a version\n * string like 7.1 instead of the code name Nougat.\n */\nfunction getLatestAndroidVersion() {\n  // Keep this logic in sync with Google's versioning scheme\n  return maxBy(getAndroidVersions(/* includePrereleases */ false), linearizeSemver);\n}\n```\n\n----------------------------------------\n\nTITLE: Full TypeScript Module Implementation\nDESCRIPTION: Complete TypeScript implementation exposing both getTheme and setTheme functions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExpoSettingsModule from './ExpoSettingsModule';\n\nexport function getTheme(): string {\n  return ExpoSettingsModule.getTheme();\n}\n\nexport function setTheme(theme: string): void {\n  return ExpoSettingsModule.setTheme(theme);\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Headers for Asset Responses\nDESCRIPTION: Example HTTP headers for asset responses in Expo Updates. Demonstrates how to specify content encoding and type for assets being served to clients.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncontent-encoding: br\ncontent-type: application/javascript\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for EAS builds\nDESCRIPTION: YAML configuration for GitLab CI to set up a Node.js Alpine environment, cache dependencies, and trigger EAS builds. It includes installing Bash and running the build command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:alpine\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - .npm\n    # or with yarn:\n    #- .yarn\n\nstages:\n  - build\n\nbefore_script:\n  - npm ci --cache .npm\n  # or with yarn:\n  #- yarn install --cache-folder .yarn\n\neas-build:\n  stage: build\n  script:\n    - apk add --no-cache bash\n    - npx eas-cli build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Exporting Application Bundle (Shell)\nDESCRIPTION: The `expo export` command bundles the application for distribution or deployment. It can target multiple platforms using the `--platform` flag. An experimental bundling flag `--experimental-bundle` was added as a no-op placeholder. The environment variable `EXPO_NO_REDIRECT_PAGE` can control the behavior of the interstitial page during this process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexpo export\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS WiFi Info Entitlements\nDESCRIPTION: JSON configuration for iOS entitlements to enable SSID access in the app.json file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/netinfo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"ios\": {\n  \"entitlements\": {\n    \"com.apple.developer.networking.wifi-info\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby File Path Check Update\nDESCRIPTION: Bug fix that replaces deprecated File.exists? with File.exist? for Ruby 3.2 compatibility\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-autolinking/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nFile.exist?\n```\n\n----------------------------------------\n\nTITLE: EAS Update Configuration in Android Manifest\nDESCRIPTION: XML configuration for Android that adds request headers for the update channel in the AndroidManifest.xml file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/build-locally.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\" android:value=\"{&quot;expo-channel-name&quot;:&quot;main&quot;}\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing SASS Support for Expo\nDESCRIPTION: Terminal command for installing the SASS package as a development dependency in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add -D sass\n```\n\n----------------------------------------\n\nTITLE: Reading API Key in iOS Native Module\nDESCRIPTION: This Swift code shows how to read the custom API key from Info.plist in an iOS native module using the Bundle.main.object method.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\n\npublic class ExpoNativeConfigurationModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"ExpoNativeConfiguration\")\n\n    Function(\"getApiKey\") {\n     return Bundle.main.object(forInfoDictionaryKey: \"MY_CUSTOM_API_KEY\") as? String\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Configuration Update\nDESCRIPTION: Modification to Android build.gradle file to use Expo CLI for production bundling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\nreact {\n  ...\n+     // Use Expo CLI to bundle the app, this ensures the Metro config\n+     // works correctly with Expo projects.\n+     cliFile = new File([\"node\", \"--print\", \"require.resolve('@expo/cli')\"].execute(null, rootDir).text.trim())\n+     bundleCommand = \"export:embed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in Swift/Kotlin\nDESCRIPTION: Sets the name of the module that JavaScript code will use to refer to the module. Takes a string as an argument.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nName(\"MyModuleName\")\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Expo Dependencies\nDESCRIPTION: Add expo as a peer dependency and expo-modules-core as a dev dependency in package.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"devDependencies\": {\n    \"expo-modules-core\": \"^X.Y.Z\"\n  },\n  \"peerDependencies\": {\n    \"expo\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"expo\": {\n      \"optional\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS AppDelegate for Custom Development Entry Point\nDESCRIPTION: This code snippet shows the changes required in the iOS AppDelegate.mm file to use a custom entry point for development builds. It replaces the default 'index' entry with '.expo/.virtual-metro-entry'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n{\n#if DEBUG\n-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\"];\n+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\".expo/.virtual-metro-entry\"];\n#else\n  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient from expo-linear-gradient (JavaScript)\nDESCRIPTION: This snippet illustrates the basic import statement for bringing the LinearGradient component from the expo-linear-gradient package into a JavaScript or TypeScript file. It is a prerequisite step for using the LinearGradient component within a React Native project. There are no parameters or outputs; it establishes module access for further usage in user components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Importing Audio from expo-av\nDESCRIPTION: This code snippet shows how to import the Audio module from the expo-av package for use in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/audio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Audio } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Disabling NPM Cache Configuration in EAS Build\nDESCRIPTION: JSON configuration to disable the NPM cache server for EAS builds by setting the EAS_BUILD_DISABLE_NPM_CACHE environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/caching.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"EAS_BUILD_DISABLE_NPM_CACHE\": \"1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Changelog Entry in Markdown\nDESCRIPTION: Demonstrates the proper format for a changelog entry, including the description, PR link, and author attribution.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/contributing/Updating Changelogs.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> \\- Added a guide about updating changelogs in the packages. ([#13075](https://github.com/expo/expo/pull/13075) by [@tsapeta](https://github.com/tsapeta))\n```\n\n----------------------------------------\n\nTITLE: Custom Mobile Text Component with RTL Support\nDESCRIPTION: Implementation of a custom Text component for mobile platforms with proper RTL text alignment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\n\nconst MobileText = (props: RNTextProps) => {\n  return <RNText style={{ textAlign: 'left', ...props.style }} {...props} />;\n};\nexport default MobileText;\n```\n\n----------------------------------------\n\nTITLE: Jest Plugin Configuration\nDESCRIPTION: Optional Jest configuration file for the plugin to override default project Jest preset.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('expo-module-scripts/jest-preset-plugin');\n```\n\n----------------------------------------\n\nTITLE: Using a Single Step in EAS Build Workflow\nDESCRIPTION: Shows a simple workflow with a single step that prints 'Hello world'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Greeting\n  steps:\n    # @info #\n    - run: echo \"Hello world\"\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines for EAS builds\nDESCRIPTION: YAML configuration for Bitbucket Pipelines to set up a Node.js Alpine environment, cache npm dependencies, and trigger EAS builds. It includes installing Bash and running the build command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:alpine\n\ndefinitions:\n  caches:\n    npm: ~/.npm\n\npipelines:\n  default:\n    - step:\n        name: Build app\n        deployment: test\n        caches:\n          - npm\n        script:\n          - apk add --no-cache bash\n          - npm ci\n          - npx eas-cli build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Sending FCM Push Notification with Fetch API - JavaScript\nDESCRIPTION: Demonstrates how to send a push notification using the FCM legacy server API with fetch. Requires FCM server key and device token. Includes required experienceId and scopeKey fields for Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom-fcm-legacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch('https://fcm.googleapis.com/fcm/send', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `key=<FCM-SERVER-KEY>`,\n  },\n  body: JSON.stringify({\n    to: '<NATIVE-DEVICE-PUSH-TOKEN>',\n    priority: 'normal',\n    data: {\n      experienceId: '@yourExpoUsername/yourProjectSlug',\n      scopeKey: '@yourExpoUsername/yourProjectSlug',\n      title: \"\\uD83D\\uDCE7 You've got mail\",\n      message: 'Hello world! \\uD83C\\uDF10',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Package via npm\nDESCRIPTION: Command to install the Expo package as an npm dependency in a bare React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ${packageName}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo App Config Schema in JavaScript with React\nDESCRIPTION: This snippet demonstrates how to import a JSON schema for the Expo app configuration (v49.0.0) and a React component for schema rendering. It is used within a documentation or React web application to dynamically render available configuration properties. Dependencies include a compatible React environment, the JSON schema file at the specified path, and the custom AppConfigSchemaTable component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport schema from '~/public/static/schemas/v49.0.0/app-config-schema.json';\nimport AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';\n```\n\n----------------------------------------\n\nTITLE: Expo Go SDK Incompatibility Error Message\nDESCRIPTION: Error message shown when running a project with an unsupported SDK version in Expo Go. This indicates the need to upgrade the project to a supported SDK version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/tools.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\"Project is incompatible with this version of Expo Go\"\n```\n\n----------------------------------------\n\nTITLE: Manual WebView Implementation\nDESCRIPTION: Example of creating a manual WebView using react-native-webview\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WebView } from 'react-native-webview';\n\nexport default function App() {\n  return <WebView source={{ html: '<h1>Hello, world!</h1>' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Inline Shell Commands in EAS Build\nDESCRIPTION: Demonstrates how to run both single-line and multi-line shell commands in workflow steps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run inline shell commands\n  steps:\n    # @info #\n    - run: echo \"Hello world\"\n    - run: |\n        echo \"Multiline\"\n        echo \"bash commands\"\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Version in app.json for Managed Workflow\nDESCRIPTION: Configuration to set the runtime version for managed workflow builds in app.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/runtime-versions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Version in app.json\nDESCRIPTION: JSON configuration for setting the runtime version policy in app.json. This configuration determines which SDK version policy the app will use for updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": {\n      \"policy\": \"sdkVersion\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL for Sub-path Hosting in Expo\nDESCRIPTION: Configuration for setting a base URL prefix for static assets in an Expo application. This enables hosting the app in a sub-directory rather than at the domain root.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"baseUrl\": \"/my-root\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Devices using EAS CLI in Bash\nDESCRIPTION: Command for deleting devices from an Expo account with an option to disable them on the Apple Developer Portal. Disabled devices still count against Apple's limit of 100 devices for ad hoc distribution per app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/internal-distribution.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Delete devices from your Expo account, optionally disable them on the Apple Developer Portal\n$ eas device:delete\n```\n\n----------------------------------------\n\nTITLE: Importing AuthSession Module in JavaScript\nDESCRIPTION: Basic import statement for including the expo-auth-session package in a JavaScript application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: SSO Login with EAS CLI\nDESCRIPTION: Command to authenticate with EAS CLI using SSO credentials\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/accounts/sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login --sso\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Gradle for Custom Entry Point Resolution\nDESCRIPTION: This code snippet shows the modifications required in the Android app/build.gradle file to use Metro module resolution for finding the root entry file. It adds a custom entryFile configuration to the react object.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n+ def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()\n\nreact {\n+    entryFile = file([\"node\", \"-e\", \"require('expo/scripts/resolveAppEntry')\", projectRoot, \"android\", \"absolute\"].execute(null, rootDir).text.trim())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Plugin Development\nDESCRIPTION: This JSON configuration extends the Expo module scripts' TypeScript configuration for plugin development. It specifies the output and root directories for the plugin's TypeScript files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"expo-module-scripts/tsconfig.plugin\",\n  \"compilerOptions\": {\n    \"outDir\": \"build\",\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\"./src\"],\n  \"exclude\": [\"**/__mocks__/*\", \"**/__tests__/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TemplateBareMinimumDiffViewer Component in JSX\nDESCRIPTION: Renders the TemplateBareMinimumDiffViewer component, which allows users to select from and to SDK versions and view the diffs between them.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/upgrade.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TemplateBareMinimumDiffViewer />\n```\n\n----------------------------------------\n\nTITLE: Linking to Android Play Store Reviews (TypeScript)\nDESCRIPTION: Demonstrates how to open the Google Play Store to an app's review section using the `Linking` API. It shows two methods: opening a web URL that redirects to the Play Store, and opening the Play Store directly using the `market://` scheme. Both examples use the `showAllReviews=true` query parameter.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: BlurView Import Statement\nDESCRIPTION: Shows how to import the BlurView component from the expo-blur package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/blur-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Box Links in JSX\nDESCRIPTION: JSX markup for rendering navigation links with icons and descriptions using the BoxLink component. Each link includes an icon, title, description and target URL for various UI development topics.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { Brush01Icon } from '@expo/styleguide-icons/outline/Brush01Icon';\nimport { Settings02Icon } from '@expo/styleguide-icons/outline/Settings02Icon';\nimport { TableIcon } from '@expo/styleguide-icons/outline/TableIcon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\n\n<BoxLink\n  title=\"UI programming\"\n  Icon={Brush01Icon}\n  description=\"Learn more about background image, using SVG, styling buttons, and so on.\"\n  href=\"/ui-programming/image-background/\"\n/>\n\n<BoxLink\n  title=\"UI component libraries\"\n  Icon={TableIcon}\n  description=\"Learn about different UI libraries available in Expo and React Native ecosystem.\"\n  href=\"/ui-programming/user-interface-libraries/\"\n/>\n\n<BoxLink\n  title=\"Use TypeScript\"\n  Icon={Settings02Icon}\n  description=\"An in-depth guide on configuring an Expo project with TypeScript or migrating an existing JavaScript project.\"\n  href=\"/guides/typescript/\"\n/>\n\n<BoxLink\n  title=\"Icons\"\n  Icon={BookOpen02Icon}\n  description=\"Learn how to use various types of icons in your Expo app, including vector icons, custom icon fonts, icon images, and icon buttons.\"\n  href=\"/guides/icons/\"\n/>\n\n<BoxLink\n  title=\"ESLint and Prettier\"\n  Icon={BookOpen02Icon}\n  description=\"A guide on configuring ESLint and Prettier to format Expo projects.\"\n  href=\"/guides/using-eslint/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing the AuthSession Module\nDESCRIPTION: Basic import statement for the AuthSession module to enable browser-based authentication in your Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/auth-session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AuthSession from 'expo-auth-session';\n```\n\n----------------------------------------\n\nTITLE: Sending Test Push Notification via Curl\nDESCRIPTION: Command to send a test push notification through Expo's push notification service API. This snippet demonstrates how to format the request with a push token, title, and body content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST \"https://exp.host/--/api/v2/push/send\" -d '{\n  \"to\": \"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\",\n  \"title\":\"hello\",\n  \"body\": \"world\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Bare-Expo on iOS Simulator\nDESCRIPTION: Command to run the Bare-Expo app on an iOS simulator. It automatically runs pod install, npm install, opens a simulator, clears and starts Metro, and launches the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Client in iOS AppDelegate\nDESCRIPTION: Code modification to enable dev-client functionality in bare-expo iOS implementation by changing useDevClient boolean value from NO to YES.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-menu/README.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- BOOL useDevClient = NO;\n+ BOOL useDevClient = YES;\n```\n\n----------------------------------------\n\nTITLE: Importing the Calendar Module\nDESCRIPTION: A simple JavaScript import statement showing how to import the expo-calendar module in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/calendar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Calendar from 'expo-calendar';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Setup Components in JSX\nDESCRIPTION: This snippet imports custom React components used for setting up the Expo development environment. It includes forms for selecting development platforms, devices, and modes, as well as instructions for environment setup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/get-started/set-up-your-environment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DevelopmentEnvironmentInstructions } from '~/scenes/get-started/set-up-your-environment/DevelopmentEnvironmentInstructions';\nimport { DevelopmentModeForm } from '~/scenes/get-started/set-up-your-environment/DevelopmentModeForm';\nimport { PlatformAndDeviceForm } from '~/scenes/get-started/set-up-your-environment/PlatformAndDeviceForm';\n```\n\n----------------------------------------\n\nTITLE: Installing source-map-explorer for Bundle Analysis\nDESCRIPTION: Command to install the source-map-explorer package as a dev dependency for analyzing bundle size in SDK 50 and below.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Structuring NotificationRequestInput Interface\nDESCRIPTION: Defines the input structure for scheduling a notification, including content and trigger.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationRequestInput {\n  identifier?: string;\n  content: NotificationContentInput;\n  trigger: NotificationTriggerInput;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Version in Expo.plist for iOS\nDESCRIPTION: Adding runtime version configuration to Expo.plist for iOS builds in the bare workflow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/runtime-versions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ <key>EXUpdatesRuntimeVersion</key>\n+ <string>1.0.0</string>\n```\n\n----------------------------------------\n\nTITLE: Importing LinearGradient from expo-linear-gradient\nDESCRIPTION: A simple import statement showing how to import the LinearGradient component from the expo-linear-gradient package for use in React Native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/linear-gradient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LinearGradient } from 'expo-linear-gradient';\n```\n\n----------------------------------------\n\nTITLE: Installing Watchman using Homebrew in Bash\nDESCRIPTION: This snippet shows the commands to update Homebrew and install Watchman, a tool for watching filesystem changes, which improves development performance.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_xcodeInstructions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew update\n$ brew install watchman\n```\n\n----------------------------------------\n\nTITLE: Implementing Expo Settings Module in Android with Kotlin\nDESCRIPTION: This snippet demonstrates the Android native module implementation for Expo Settings using Kotlin. It includes theme management functions and an enum for theme values.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.settings\n\nimport android.content.Context\nimport android.content.SharedPreferences\nimport androidx.core.os.bundleOf\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\nimport expo.modules.kotlin.types.Enumerable\n\nclass ExpoSettingsModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoSettings\")\n\n    Events(\"onChangeTheme\")\n\n    Function(\"setTheme\") { theme: Theme ->\n      getPreferences().edit().putString(\"theme\", theme.value).commit()\n      this@ExpoSettingsModule.sendEvent(\"onChangeTheme\", bundleOf(\"theme\" to theme.value))\n    }\n\n    Function(\"getTheme\") {\n      return@Function getPreferences().getString(\"theme\", Theme.SYSTEM.value)\n    }\n  }\n\n  private val context\n  get() = requireNotNull(appContext.reactContext)\n\n  private fun getPreferences(): SharedPreferences {\n    return context.getSharedPreferences(context.packageName + \".settings\", Context.MODE_PRIVATE)\n  }\n}\n\nenum class Theme(val value: String) : Enumerable {\n  LIGHT(\"light\"),\n  DARK(\"dark\"),\n  SYSTEM(\"system\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing ClipboardPasteButton Paste Permission on iOS\nDESCRIPTION: This code snippet references a fix for the ClipboardPasteButton asking for paste permission on iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-clipboard/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [iOS] fix ClipboardPasteButton asking for paste permission ([#30623](https://github.com/expo/expo/pull/30623) by [@vonovak](https://github.com/vonovak))\n```\n\n----------------------------------------\n\nTITLE: Installing Canary (Pre-release) Versions of Expo SDK\nDESCRIPTION: Terminal command demonstrating how to install the latest canary (development) version of the Expo SDK and update related packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Importing Print Module in JavaScript\nDESCRIPTION: This code snippet shows how to import the Print module from expo-print in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Print from 'expo-print';\n```\n\n----------------------------------------\n\nTITLE: Accessing Execution Environment in JavaScript\nDESCRIPTION: Example of using the new Constants.executionEnvironment property to distinguish between different app environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Constants } from 'expo-constants';\n\nif (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n  console.log('Running in a bare app environment');\n} else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n  console.log('Running in an App/Play Store development client');\n}\n```\n\n----------------------------------------\n\nTITLE: Removed Event Listener in expo-linking\nDESCRIPTION: The Linking.removeEventListener method has been removed as it was deprecated.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// No longer supported\nLinking.removeEventListener()\n```\n\n----------------------------------------\n\nTITLE: Querying Media Library Assets in JavaScript\nDESCRIPTION: Example of using the getAssetsAsync method to query media assets, with options for filtering and pagination.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-media-library/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst assets = await MediaLibrary.getAssetsAsync({\n  first: 20,\n  mediaType: ['photo', 'video'],\n  sortBy: [[MediaLibrary.SortBy.creationTime, false]],\n  album: album.id\n});\n```\n\n----------------------------------------\n\nTITLE: Using Jest Matchers for Expo Router Testing\nDESCRIPTION: These snippets showcase various Jest matchers added by Expo Router for testing. They include assertions for pathname, segments, search params, and router state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(screen).toHavePathname('/my-router');\n\nexpect(screen).toHavePathnameWithParams('/my-router?hello=world');\n\nexpect(screen).toHaveSegments(['[id]']);\n\nexpect(screen).useLocalSearchParams({ first: 'abc' });\n\nexpect(screen).useGlobalSearchParams({ first: 'abc' });\n\nexpect(screen).toHaveRouterState({\n  routes: [{ name: 'index', path: '/' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with React-DOM\nDESCRIPTION: Example of using react-dom/server for server-side rendering. It shows how to use renderToPipeableStream to create a stream of the rendered App component and send it as an HTTP response.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/static/canary-full/react-dom/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToPipeableStream } from 'react-dom/server';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nfunction handleRequest(res) {\n  // ... in your server handler ...\n  const stream = renderToPipeableStream(<App />, {\n    onShellReady() {\n      res.statusCode = 200;\n      res.setHeader('Content-type', 'text/html');\n      stream.pipe(res);\n    },\n    // ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Themed Components\nDESCRIPTION: Example of using the created themed component with specific variants.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <Heading size=\"medium\" color=\"success\">\n      Hi\n    </Heading>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ContentSpotlight and Step Components in JSX\nDESCRIPTION: This code snippet imports two custom React components, ContentSpotlight and Step, likely used for structuring and displaying the setup instructions in a web interface.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidEmulatorInstructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Step } from '~/ui/components/Step';\n```\n\n----------------------------------------\n\nTITLE: Creating ESLint Configuration File in JavaScript\nDESCRIPTION: This snippet shows how to create a basic .eslintrc.js file that extends the 'expo' configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: 'expo',\n};\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code URL for EAS Update by Group ID\nDESCRIPTION: This URL generates a QR code for an update group given the project ID and update group ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&groupId=your-update-id\n```\n\n----------------------------------------\n\nTITLE: Importing Pedometer from expo-sensors\nDESCRIPTION: Basic import statement for the Pedometer module from expo-sensors package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Pedometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Configuring devDependencies for Expo Module Scripts in package.json\nDESCRIPTION: Adds expo-module-scripts as a development dependency in the package.json file. This ensures that all modules use the same version of development tools.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"expo-module-scripts\": \"^<latest version>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PWA Manifest Configuration\nDESCRIPTION: JSON configuration for the Progressive Web App manifest, defining app metadata, icons, and display properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"short_name\": \"Expo App\",\n  \"name\": \"Expo Router Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI using npm\nDESCRIPTION: This command installs the EAS CLI globally using npm. EAS CLI is required for building the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring ProjectId for Push Notifications in Expo\nDESCRIPTION: Example of how to use expo-constants to get the projectId value from the app config for push notifications in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoken = await Notifications.getExpoPushTokenAsync({\n  projectId: Constants.expoConfig.extra.eas.projectId,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Settings in JSON\nDESCRIPTION: This snippet defines the EAS (Expo Application Services) build configuration in eas.json. It specifies different build profiles for development, preview, and production, including the Android App Bundle setting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/metadata/en-US/name.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 3.13.3\"\n  },\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\"\n    },\n    \"preview\": {\n      \"distribution\": \"internal\"\n    },\n    \"production\": {\n      \"android\": {\n        \"buildType\": \"app-bundle\"\n      }\n    }\n  },\n  \"submit\": {\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing canary (pre-release) version of Expo SDK\nDESCRIPTION: Command to install the latest canary (unstable) release of Expo and update related packages, useful for testing new features before stable release.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Base64 encoding credentials.json for CI\nDESCRIPTION: Command to base64 encode credentials.json file for use in CI environments. This approach makes it easier to store complex JSON as an environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nbase64 credentials.json\n```\n\n----------------------------------------\n\nTITLE: Adding BigTextStyle to Android Notifications in Java\nDESCRIPTION: This snippet illustrates the addition of BigTextStyle to all Android notifications, allowing them to be expanded and their content text fully viewed, fixing the issue of truncated notification text.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nNotification.BigTextStyle bigTextStyle = new Notification.BigTextStyle();\nbigTextStyle.bigText(notificationContent);\nnotificationBuilder.setStyle(bigTextStyle);\n```\n\n----------------------------------------\n\nTITLE: Importing Pedometer from Expo Sensors\nDESCRIPTION: Shows the standard JavaScript import statement required to use the `Pedometer` object from the `expo-sensors` package in a project. This makes the Pedometer API methods available for use.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/pedometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { Pedometer } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Expo GL Native Library\nDESCRIPTION: Configures CMake build settings for expo-gl native library. Sets up compiler flags, includes common source files, and links required Android libraries including OpenGL ES, React Native, and logging dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-gl/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(expo-gl)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(CMAKE_CXX_STANDARD 20)\n\nset(PACKAGE_NAME \"expo-gl\")\nset(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)\nset(COMMON_DIR ${CMAKE_SOURCE_DIR}/../common)\n\nadd_library(\n    ${PACKAGE_NAME} SHARED\n    ${COMMON_DIR}/EXGLNativeApi.cpp\n    ${COMMON_DIR}/EXGLNativeApi.h\n    ${COMMON_DIR}/EXGLImageUtils.cpp\n    ${COMMON_DIR}/EXGLImageUtils.h\n    ${COMMON_DIR}/EXGLNativeContext.cpp\n    ${COMMON_DIR}/EXGLNativeContext.h\n    ${COMMON_DIR}/EXGLContextManager.cpp\n    ${COMMON_DIR}/EXGLContextManager.h\n    ${COMMON_DIR}/EXWebGLMethods.cpp\n    ${COMMON_DIR}/EXWebGLMethods.h\n    ${COMMON_DIR}/EXWebGLRenderer.cpp\n    ${COMMON_DIR}/EXWebGLRenderer.h\n    ${COMMON_DIR}/EXTypedArrayApi.cpp\n    ${COMMON_DIR}/EXTypedArrayApi.h\n    ./src/main/cpp/EXGLJniApi.cpp)\n\ntarget_include_directories(\n    ${PACKAGE_NAME} PRIVATE \"${COMMON_DIR}\")\n\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nfind_library(LOG_LIB log)\nfind_library(GLES_LIB GLESv3)\n\ntarget_compile_options(\n    ${PACKAGE_NAME}\n    PRIVATE -O2\n            -fexceptions\n            -frtti\n            -Wall\n            -Wextra\n            -Wno-unused-parameter\n            -Wshorten-64-to-32\n            -Wstrict-prototypes)\ntarget_link_libraries(${PACKAGE_NAME} ReactAndroid::jsi ${LOG_LIB} ${GLES_LIB} android)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Entry Point for Expo Router in package.json\nDESCRIPTION: Sets the main entry point to use Expo Router in the package.json file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"expo-router/entry\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code URL for EAS Update by Channel ID\nDESCRIPTION: This URL generates a QR code for the latest update available on the branch or branches mapped to a specific channel, given the project ID and channel ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhttps://qr.expo.dev/eas-update?projectId=your-project-id&channelId=your-channel-id\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Generated Headers for Objective-C++ Integration - Objective-C\nDESCRIPTION: This snippet details how to import Swift-generated headers into Objective-C++ files, necessary to reference EXUpdatesAppController methods in projects using Objective-C++ (e.g., AppDelegate.mm). Dependencies include ExpoModulesCore, EXUpdatesInterface, and EXUpdates modules compiled as Swift frameworks. These imports enable runtime configuration overrides for expo-updates on iOS. Inputs are the import statements themselves and outputs are the enabled ability to reference relevant Swift classes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"ExpoModulesCore-Swift.h\"\n#import \"EXUpdatesInterface-Swift.h\"\n#import \"EXUpdates-Swift.h\"\n```\n\n----------------------------------------\n\nTITLE: Importing Facebook Provider for AuthSession - React (JSX)\nDESCRIPTION: Demonstrates importing the Facebook authentication provider, which offers helper functions and an opinionated useAuthRequest hook for Facebook OAuth via AuthSession. This code enables platform-specific configuration for cross-platform use. This provider is deprecated and may be removed in future SDK versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/auth-session.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Facebook from 'expo-auth-session/providers/facebook';\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start the local Expo development server for making and testing changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Auto-Rebasing on Pull\nDESCRIPTION: Shell commands to configure Git to use rebasing instead of merging for all existing and future branches. This helps maintain the linear commit history preferred in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Git and Code Reviews.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Set rebase=true for your existing branches\ngit for-each-ref --shell \\\n  --format='git config branch.%(refname:lstrip=2).rebase true' \\\n  refs/heads/ | sh\n# Set rebase=true for new branches in the future\ngit config branch.autosetuprebase always\n```\n\n----------------------------------------\n\nTITLE: Opening README for a Npm Package\nDESCRIPTION: This command demonstrates how to quickly open the README page for an npm package (@react-navigation/native in this example) using npx and npm-home.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/using-libraries.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx npm-home @react-navigation/native\n```\n\n----------------------------------------\n\nTITLE: Running Expo on iOS\nDESCRIPTION: Builds and runs the Expo project on iOS using the Expo CLI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Client in iOS AppDelegate\nDESCRIPTION: This code snippet demonstrates how to enable the Dev Client in the iOS AppDelegate.mm file for bare-expo. It involves changing the useDevClient boolean variable from NO to YES.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/README.md#2025-04-22_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- BOOL useDevClient = NO;\n+ BOOL useDevClient = YES;\n```\n\n----------------------------------------\n\nTITLE: Adding a Local Package as a Dependency in package.json\nDESCRIPTION: This JSON snippet demonstrates how to add a local package as a dependency in the package.json file of an Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cool-app\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"expo start\",\n    \"android\": \"expo start --android\",\n    \"ios\": \"expo start --ios\",\n    \"web\": \"expo start --web\"\n  },\n  \"dependencies\": {\n    \"cool-package\": \"*\",\n    \"expo\": \"~50.0.0\",\n    \"expo-status-bar\": \"~1.10.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-native\": \"0.73.0\",\n    \"react-native-web\": \"~0.19.6\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.20.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Greeting from a Package\nDESCRIPTION: This JavaScript snippet shows the content of an index.js file in a package, exporting a simple greeting string.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const greeting = 'Hello!';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-av Plugin in app.json\nDESCRIPTION: Example configuration for the expo-av plugin in app.json to set microphone permission message.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Environment Files\nDESCRIPTION: Git ignore configuration to exclude local environment files from version control\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# local env files\n.env*.local\n```\n\n----------------------------------------\n\nTITLE: Basic .npmrc for Private Registry Configuration\nDESCRIPTION: A simple .npmrc configuration template for using a private npm registry, where you need to replace the placeholder with your registry URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nregistry=__REPLACE_WITH_REGISTRY_URL__\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for expo-av Android Library\nDESCRIPTION: Sets up the CMake project for building the expo-av shared library. It specifies the C++ standard, defines the library name, and sets up include directories and linked libraries for Android and React Native development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(expo-av)\n\nset (CMAKE_VERBOSE_MAKEFILE ON)\nset (CMAKE_CXX_STANDARD 20)\n\nset (PACKAGE_NAME \"expo-av\")\nset (BUILD_DIR ${CMAKE_SOURCE_DIR}/build)\n\n# shared\n\nadd_library(\n        ${PACKAGE_NAME}\n        SHARED\n        src/main/cpp/EXAV.cpp\n        src/main/cpp/JPlayerData.cpp\n        src/main/cpp/JAVManager.cpp\n)\n\n# includes\n\ntarget_include_directories(\n        ${PACKAGE_NAME}\n        PRIVATE\n        # header only imports from turbomodule, e.g. CallInvokerHolder.h\n        \"${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule\"\n        \"${REACT_NATIVE_DIR}/ReactCommon/callinvoker\"\n)\n\n# find libraries\n\nfind_library(LOG_LIB log)\n\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nfind_package(fbjni REQUIRED CONFIG)\n\n# linking\n\ntarget_link_libraries(\n        ${PACKAGE_NAME}\n        ${LOG_LIB}\n        fbjni::fbjni\n        ReactAndroid::jsi\n        ReactAndroid::reactnativejni\n        android\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Version Basic Example\nDESCRIPTION: Basic example of configuring iOS app version using the default version values from the job configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure iOS version\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/resolve_apple_team_id_from_credentials:\n        id: resolve_apple_team_id_from_credentials\n    - eas/prebuild:\n        inputs:\n          clean: false\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\n    - eas/configure_eas_update\n    - eas/configure_ios_credentials\n    # @info #\n    - eas/configure_ios_version\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Combined EAS Update and Sourcemap Upload Command\nDESCRIPTION: Single command to publish an update and upload the sourcemaps to Sentry in one step using the && operator.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --branch <branch> && npx sentry-expo-upload-sourcemaps dist\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profiles with Different Schemes\nDESCRIPTION: JSON configuration in eas.json defining development and production build profiles with different schemes for iOS builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"ios\": {\n        \"buildConfiguration\": \"Debug\",\n        \"scheme\": \"myapp-dev\"\n      }\n    },\n    \"production\": {\n      \"ios\": {\n        \"buildConfiguration\": \"Release\",\n        \"scheme\": \"myapp\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Web-Specific Plugins in Expo Router\nDESCRIPTION: This snippet demonstrates how to configure Babel to include web-specific plugins when building for the web platform in Expo Router. It uses the platform property from the API caller to conditionally add plugins.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = api => {\n  // Get the platform from the API caller...\n  const platform = api.caller(caller => caller && caller.platform);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      // Add a web-only plugin...\n      platform === 'web' && 'custom-web-only-plugin',\n    ].filter(Boolean),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Development Code Removal Example\nDESCRIPTION: Shows how development-only code is eliminated using NODE_ENV and __DEV__ checks.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV === 'development') {\n  console.log('Hello in development');\n}\n\nif (__DEV__) {\n  console.log('Another development-only conditional...');\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Swift Implementation\nDESCRIPTION: Example of using Swift compiler directives to implement platform-specific code branches for iOS, macOS, and tvOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/additional-platform-support.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n#if os(iOS)\n  // iOS implementation\n#elseif os(macOS)\n  // macOS implementation\n#elseif os(tvOS)\n  // tvOS implementation\n#endif\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Packager URL\nDESCRIPTION: Example of setting a custom packager proxy URL using environment variables before starting the Expo server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ export EXPO_PACKAGER_PROXY_URL=http://expo.dev\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Changing Native Queue for AsyncFunction in Kotlin\nDESCRIPTION: Shows how to change the native queue of AsyncFunction by calling the .runOnQueue function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nAsyncFunction(\"asyncFunction\") { message: String ->\n  return@AsyncFunction message\n}.runOnQueue(Queues.MAIN)\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo StoreReview Library (JavaScript)\nDESCRIPTION: This snippet demonstrates the standard way to import the `expo-store-review` library into a JavaScript or TypeScript file. It imports all the library's functions and components under the namespace `StoreReview`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Using ADB Logcat for Android Crash Reports\nDESCRIPTION: Command to view streaming logs from an Android device connected to your computer. This helps diagnose crashes in production Android apps by showing the device logs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ adb logcat\n```\n\n----------------------------------------\n\nTITLE: Ignoring Local Environment Files in Git (gitignore)\nDESCRIPTION: This snippet shows how to add local environment files (`.env*.local`) to the `.gitignore` file to prevent them from being committed to version control, recommended for projects migrating to Expo SDK 49 or higher.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh .gitignore\n# local env files\n.env*.local\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Property in Swift\nDESCRIPTION: Defines a new read-only property directly on the JavaScript object that represents a native module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nProperty(\"foo\") {\n  return \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vendor CSS Stylesheets (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to import a CSS stylesheet from an installed npm package (`emoji-mart`) directly into a JavaScript file (like `index.js`). This applies the library's styles globally across the application (primarily on web).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js index.js\n// Applies the styles app-wide.\nimport 'emoji-mart/css/emoji-mart.css';\n```\n```\n\n----------------------------------------\n\nTITLE: Installing expo-build-properties Plugin using NPX\nDESCRIPTION: Command to install the expo-build-properties plugin using NPX. This should be run in the project directory to add the plugin to the Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-build-properties/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-build-properties\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Component in React Native and Web\nDESCRIPTION: Demonstrates how to use the Header component from @expo/html-elements, which renders as a header element on web and a View on mobile platforms with appropriate ARIA roles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Header } from '@expo/html-elements';\n\nexport default () => <Header />;\n```\n\n----------------------------------------\n\nTITLE: Installing Ngrok for Tunneling\nDESCRIPTION: Command to install the Expo Ngrok package globally for enabling tunnel access to the development server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ npm i -g @expo/ngrok\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Module Scripts\nDESCRIPTION: Command line instructions for installing expo-module-scripts as a development dependency using yarn or npm.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D expo-module-scripts\n\n# or\n\nnpm install --save-dev expo-module-scripts\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Submit in eas.json\nDESCRIPTION: This snippet shows how to configure the 'submit' key in eas.json for EAS Submit. It includes settings for both Android and iOS platforms, specifying details like service account key path, track, Apple ID, and team ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 0.34.0\"\n  },\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"../path/to/api-xxx-yyy-zzz.json\",\n        \"track\": \"internal\"\n      },\n      \"ios\": {\n        \"appleId\": \"john@turtle.com\",\n        \"ascAppId\": \"1234567890\",\n        \"appleTeamId\": \"AB12XYZ34S\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX\nDESCRIPTION: This snippet imports two custom React components, Collapsible and ContentSpotlight, from specific paths. These components are likely used to enhance the documentation with interactive elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/review/with-orbit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapsible } from '~/ui/components/Collapsible';\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\n```\n\n----------------------------------------\n\nTITLE: Ruby Pod Import Patch Function Reference\nDESCRIPTION: Reference to a Ruby function expo_patch_react_imports! that fixes React import statements in pods, particularly for apps in directories with spaces and React-Native 0.66 compatibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-autolinking/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nexpo_patch_react_imports!\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in React JSX\nDESCRIPTION: Import statement for the CreditCard02Icon component from Expo's styleguide icons package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/billing/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CreditCard02Icon } from '@expo/styleguide-icons/outline/CreditCard02Icon';\n```\n\n----------------------------------------\n\nTITLE: Running Expo App on Android (Shell)\nDESCRIPTION: The `expo run:android` command builds the native Android project (if necessary) and installs/launches the app on a connected Android device or emulator. It's part of the workflow for development builds or prebuild projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nexpo run:android\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for TV Support\nDESCRIPTION: JSON configuration to modify react-native dependency for TV support and exclude it from Expo install version validation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/building-for-tv.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react-native\": \"npm:react-native-tvos\"\n  },\n  \"expo\": {\n    \"install\": {\n      \"exclude\": [\n        \"react-native\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version 6.0.0 Changelog Entry\nDESCRIPTION: Details major version release changes including bug fixes and architectural improvements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-screen-capture/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.0.0 — 2024-04-18\n\n### 🐛 Bug fixes\n\n- Reverse api level constraint on the `DETECT_SCREEN_CAPTURE` permission.\n- [Android] Fixes memory leaks caused by the event emitter.\n- [Android] Fix accessing activity too early on bridgeless.\n\n### 💡 Others\n\n- drop unused web `name` property.\n- Native module on iOS is now written in Swift using the Sweet API.\n- Removed deprecated backward compatible Gradle settings.\n- Replaced `@testing-library/react-hooks` with `@testing-library/react-native`.\n```\n\n----------------------------------------\n\nTITLE: Using SQLite Context with React Suspense\nDESCRIPTION: Shows how to integrate SQLiteProvider with React.Suspense for handling loading states\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SQLiteProvider, useSQLiteContext } from 'expo-sqlite/next';\nimport { Suspense } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback={<Fallback />}>\n        <SQLiteProvider databaseName=\"test.db\" onInit={migrateDbIfNeeded} useSuspense>\n          <Header />\n          <Content />\n        </SQLiteProvider>\n      </Suspense>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useAssets React Hook\nDESCRIPTION: New React hook useAssets for simplified asset handling in Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-asset/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAssets } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Project SDK Version\nDESCRIPTION: JSON configuration showing how to set the Expo SDK version to UNVERSIONED in app.json for testing unversioned code changes in development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/expo-go/ios/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"sdkVersion\": \"UNVERSIONED\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bun Instead of Yarn in GitHub Actions\nDESCRIPTION: These YAML snippets show how to modify the GitHub Actions configuration to use Bun as the package manager instead of Yarn. It includes steps for setting up Bun and installing dependencies with it.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/github-actions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup Bun\n  uses: oven-sh/setup-bun@v1\n  with:\n    bun-version: latest\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install dependencies\n  run: bun install\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Manifests Module - JavaScript\nDESCRIPTION: This snippet demonstrates how to import all exports from the 'expo-manifests' package using JavaScript. The import allows the developer to access types and functions for working with Expo app manifests. It requires the 'expo-manifests' package to be installed in the project, and is intended for use in environments that support ES module import syntax.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/manifests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Manifests from 'expo-manifests';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Build Flavors\nDESCRIPTION: Android build.gradle configuration to create separate flavors for development and production variants with different application IDs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n    /* @hide ... */ /* @end */\n    flavorDimensions \"env\"\n    productFlavors {\n        production {\n            dimension \"env\"\n            applicationId 'com.myapp'\n        }\n        development {\n            dimension \"env\"\n            applicationId 'com.myapp.dev'\n        }\n    }\n    /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for @expo/image-utils\nDESCRIPTION: Explains the EXPO_IMAGE_UTILS_NO_SHARP environment variable used to control sharp-cli resolution methods. When set to a truthy value, it forces fallback to Jimp for image modifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/image-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### EXPO_IMAGE_UTILS_NO_SHARP\n\nWhen truthy, this will force global `sharp-cli` resolution methods like `isAvailableAsync()` and `findSharpInstanceAsync()` to fail. Other processes can use this to fallback on Jimp for image modifications. By default this is falsy (undefined).\n\n`findSharpInstanceAsync()` will throw an error if disabled because it shouldn't be invoked if `isAvailableAsync()` returns `false`.\n```\n\n----------------------------------------\n\nTITLE: Custom Meta Tags for Asset Validation in Schemer\nDESCRIPTION: Example JSON structure showing the custom meta tags supported by Schemer for asset validation, including content type and dimension specifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/schemer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  meta:\n  {\n    asset,\n    contentType, //mime type\n    dimensions: {width, height},\n    square,\n\n    // For custom error messages and docs\n    regexHuman,\n    autogenerated,\n    notHuman\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automated iOS Build and Submit\nDESCRIPTION: Command to create and automatically submit an iOS build to the App Store in one step using the auto-submit flag\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/ios-production-build.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios --auto-submit\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Sign-in in Expo app.json\nDESCRIPTION: JSON configuration to enable Sign In with Apple capability in an Expo iOS app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"usesAppleSignIn\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Description in Markdown\nDESCRIPTION: Simple markdown description of the expo-insights module explaining its core purpose of providing app usage data insights.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-insights/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# expo-insights\n\nExpo module that offers developers insight into the usage data of the app\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Modules in React Native Project\nDESCRIPTION: This command installs the latest version of Expo modules in an existing React Native project, which is typically the only step required for migration to Expo CLI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/using-expo-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx install-expo-modules@latest\n```\n\n----------------------------------------\n\nTITLE: Defining ExpoConfig Type in TypeScript\nDESCRIPTION: TypeScript type definition for the expoConfig property with TypeDoc documentation comments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The standard Expo confg object defined in `app.json` and `app.config.js` files. For both\n * classic and modern manifests, whether they are embedded or remote.\n */\nexpoConfig: ExpoConfig | null;\n```\n\n----------------------------------------\n\nTITLE: Building Static Web Export (Deprecated) (Shell)\nDESCRIPTION: The `expo build:web` command was used to create a production web build. This command is deprecated, and users are advised to use `expo export:web` instead.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexpo build:web\n```\n\n----------------------------------------\n\nTITLE: HTML Configuration with PWA Manifest Link\nDESCRIPTION: TypeScript code for the root HTML file that includes the PWA manifest link and basic HTML structure for Expo Router web pages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport type { PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n\n        <ScrollViewStyleReset />\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into EAS CLI\nDESCRIPTION: This command logs the user into the EAS CLI using their Expo account credentials.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server (Shell)\nDESCRIPTION: The `expo start` command launches the Metro bundler and the Expo development server. It allows developers to run their app in Expo Go or development builds. Several options and environment variables can modify its behavior: `--clear` resets the Metro cache, `EXPO_EDITOR` overrides the default editor opened with 'o' key, `EXPO_NO_DEFAULT_PORT` skips proxy port setup, and `EXPO_DEBUG` enables debug logging.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexpo start\n```\n\n----------------------------------------\n\nTITLE: Fixing Android Gradle 7 build error\nDESCRIPTION: Resolves the 'Plugin with id 'maven' not found' build error from Android Gradle 7.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-file-system/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix `Plugin with id 'maven' not found` build error from Android Gradle 7.\n```\n\n----------------------------------------\n\nTITLE: Using CSS Environment Variables for Safe Area Insets (Web-only, Before Migration)\nDESCRIPTION: This CSS snippet demonstrates how to use the env() function with safe-area-inset-* environment variables to apply padding to a div according to the device's safe areas. This is the traditional method for handling device safe areas in web-only apps, and serves as a reference point for migrating to universal JavaScript solutions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Config Plugin Implementation\nDESCRIPTION: Minimal example of a config plugin file that simply returns the config unchanged. Used to demonstrate module resolution in Expo config system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = config => config;\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarNotificationTrigger Interface for iOS in TypeScript\nDESCRIPTION: Defines the interface for a calendar-based notification trigger, related to iOS UNCalendarNotificationTrigger. This interface includes date components for scheduling notifications based on calendar attributes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CalendarNotificationTrigger {\n  type: 'calendar';\n  repeats: boolean;\n  dateComponents: {\n    era?: number;\n    year?: number;\n    month?: number;\n    day?: number;\n    hour?: number;\n    minute?: number;\n    second?: number;\n    weekday?: number;\n    weekdayOrdinal?: number;\n    quarter?: number;\n    weekOfMonth?: number;\n    weekOfYear?: number;\n    yearForWeekOfYear?: number;\n    nanosecond?: number;\n    isLeapMonth: boolean;\n    timeZone?: string;\n    calendar?: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the expo-video-thumbnails Module in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the standard method for importing the `expo-video-thumbnails` module. It imports all exports from the package under the namespace `VideoThumbnails`, allowing access to functions like `getThumbnailAsync`. This import statement is necessary before using any functionality provided by the library. The `expo-video-thumbnails` package must be installed in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Package Versions with Expo CLI\nDESCRIPTION: Terminal command for checking if specific packages (react-native and expo-sms) have compatible versions installed in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_27\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo install react-native expo-sms --check\n```\n\n----------------------------------------\n\nTITLE: Naming Boolean Variables in JavaScript\nDESCRIPTION: Illustrates the convention of using 'is' or similar verbs at the beginning of Boolean variable names. This helps clarify the variable's purpose and avoid ambiguity.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// AMBIGUOUS\nconsole.log(history.deleted);\n\n// CLEAR\nconsole.log(history.isDeleted);\n```\n\n----------------------------------------\n\nTITLE: Installing WebView Dependency for Expo\nDESCRIPTION: Command to install react-native-webview package in an Expo project\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install react-native-webview\n```\n\n----------------------------------------\n\nTITLE: Using BoxLink Component for Documentation Navigation in JSX\nDESCRIPTION: This code demonstrates how to use the BoxLink component to create navigation links to various Expo Router documentation pages. The component takes title, href, description, and Icon props to create consistent documentation navigation elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Stack\"\n  href=\"/router/advanced/stack/\"\n  description=\"See Stack navigator's complete reference for more information on API methods.\"\n  Icon={BookOpen02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: VideoThumbnails Import Statement\nDESCRIPTION: Example of importing the VideoThumbnails module from expo-video-thumbnails package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/video-thumbnails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as VideoThumbnails from 'expo-video-thumbnails';\n```\n\n----------------------------------------\n\nTITLE: Configuring Over-the-Air Updates in Expo with EAS CLI\nDESCRIPTION: Command to configure over-the-air updates using the EAS CLI. This needs to be run before you can send updates to your app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/deploy/send-over-the-air-updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:configure\n```\n\n----------------------------------------\n\nTITLE: Adding Release Notes URL Command\nDESCRIPTION: Command to update the versions endpoint with release notes URL\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\net update-versions --sdkVersion XX.X.X --key releaseNoteUrl --value <url>\n```\n\n----------------------------------------\n\nTITLE: Importing TemplateBareMinimumDiffViewer Component in JSX\nDESCRIPTION: Imports the TemplateBareMinimumDiffViewer component from the ui/components directory, which is used to display diffs between different Expo SDK versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/upgrade.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TemplateBareMinimumDiffViewer } from '~/ui/components/TemplateBareMinimumDiffViewer';\n```\n\n----------------------------------------\n\nTITLE: Adding Native Permission Requester via expo-permissions\nDESCRIPTION: Introduced a native permission requester integrated with `expo-permissions`. Developers can now use `Permissions.getAsync(Permissions.NOTIFICATIONS)` or `Permissions.askAsync(Permissions.NOTIFICATIONS)` to request notification permissions when `expo-notifications` is installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nPermissions.getAsync(Permissions.NOTIFICATIONS)\n```\n\nLANGUAGE: javascript\nCODE:\n```\naskAsync\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPermissions.NOTIFICATIONS\n```\n\n----------------------------------------\n\nTITLE: Implementing Example App in React Native\nDESCRIPTION: React Native code for the example app, demonstrating the use of the ExpoNativeConfiguration module to display the API key.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as ExpoNativeConfiguration from 'expo-native-configuration';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>API key: {ExpoNativeConfiguration.getApiKey()}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Go for Specific SDK Version using Terminal\nDESCRIPTION: This snippet demonstrates how to create an Expo project with a specific SDK version and open it in a simulator to install the corresponding version of Expo Go.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/ios-simulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Bootstrap an SDK 51 project\n$ npx create-expo-app --template blank@51\n\n# Open the app on a simulator to install the required Expo Go app\n$ npx expo start --ios\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelAwareTriggerInput Type in TypeScript\nDESCRIPTION: Defines a type for immediate notification delivery that includes Android channel ID specification. This allows immediate notifications to be delivered through specific notification channels on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ChannelAwareTriggerInput = {\n  channelId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Setup\nDESCRIPTION: Basic Tailwind configuration with content paths for template files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,tsx,ts,jsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Bun Version in EAS JSON\nDESCRIPTION: This snippet shows how to specify a specific Bun version in the eas.json file for EAS builds. It demonstrates setting Bun version 1.0.0 for the development build profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-bun.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"bun\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dark Mode Splash Screen Background Color - Android values-night/colors.xml\nDESCRIPTION: This XML goes in res/values-night/colors.xml and declares an alternative splashscreen_background color for dark mode. The Android system automatically selects this color resource if the device is in night mode, enabling a native dark theme splash screen experience.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\\n+ <color name=\\\"splashscreen_background\\\">#AABBCC</color> <!-- #AARRGGBB or #RRGGBB format -->\\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing EAS Updates\nDESCRIPTION: Commands to create new updates with manual branch specification or auto-detection using Git information\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --branch [branch-name] --message \"...\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --auto\n```\n\n----------------------------------------\n\nTITLE: Using Local Config Plugins in app.json\nDESCRIPTION: Demonstrates how to reference a local config plugin in the app.json configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": \"./plugins/withMyPlugin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro CSS Support in SDK 50+\nDESCRIPTION: Metro configuration to disable CSS support in Expo SDK 50 and above\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname, {\n  // Disable CSS support.\n  isCSSEnabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Netlify Configuration Setup\nDESCRIPTION: Netlify configuration file (netlify.toml) that defines build commands, function directories, redirects, and cache control headers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n[build]\n  command = \"expo export -p web\"\n  functions = \"netlify/functions\"\n  publish = \"dist/client\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/.netlify/functions/server\"\n  status = 404\n\n[functions]\n  included_files = [\"dist/server/**/*\"]\n\n[[headers]]\n  for = \"/dist/server/_expo/functions/*\"\n  [headers.values]\n    \"Cache-Control\" = \"public, max-age=60, s-maxage=60\"\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server with Tunnel\nDESCRIPTION: Command to start Expo server in tunnel mode for accessing from devices on different networks. Note that this makes app reloads slower than LAN or Local connections.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/get-started/start-developing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Importing Haptics in JavaScript\nDESCRIPTION: Shows how to import the expo-haptics library in a JavaScript file. This is the standard import pattern needed to access haptic feedback functionality in React Native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan Gesture Handler\nDESCRIPTION: Creates a pan gesture handler that updates translation values based on gesture movement.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n  const drag = Gesture.Pan()\n    .onChange((event) => {\n      translateX.value += event.changeX;\n      translateY.value += event.changeY;\n    });\n```\n\n----------------------------------------\n\nTITLE: Updating Entry File for Expo Root Component Registration\nDESCRIPTION: Modify the entry file to use registerRootComponent from expo instead of AppRegistry.registerComponent from react-native.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n+ import {registerRootComponent} from 'expo';\n\n- import {AppRegistry} from 'react-native';\nimport App from './App';\n- import {name as appName} from './app.json';\n\n- AppRegistry.registerComponent(appName, () => App);\n+ registerRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Defining ExpoPushToken Interface in TypeScript\nDESCRIPTION: Defines the structure of an Expo Push Token, which is used to send notifications via the Expo Notifications service.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExpoPushToken {\n  type: 'expo';\n  data: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing expo-dev-client for Error Handling in React Native\nDESCRIPTION: This code snippet demonstrates how to import expo-dev-client at the top of your index file, before importing your App component. This configuration enables more helpful error messages when using expo-dev-client.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/install-dev-builds-in-bare.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'expo-dev-client';\n/* @hide ... */ /* @end */\nimport App from './App';\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Authentication with Expo Config Plugin\nDESCRIPTION: Sets up Apple Authentication using the expo-apple-authentication config plugin in an EAS Build project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-apple-authentication\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-plugin-expo\nDESCRIPTION: Command to install the eslint-plugin-expo package in an Expo project using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx expo install eslint-plugin-expo --save-dev\n```\n\n----------------------------------------\n\nTITLE: Deep Link URL for Development Build Update\nDESCRIPTION: This URL is represented by the generated QR code and will deep link into a development build to fetch the latest update on the specified channel.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/qr-codes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexp+your-slug://expo-development-client/?url=https://u.expo.dev/your-project-id?runtime-version=your-runtime-version&channel-name=your-channel\n```\n\n----------------------------------------\n\nTITLE: Modifying AppDelegate for iOS AppDelegate subscribers\nDESCRIPTION: Updates the AppDelegate.swift file to use ExpoAppDelegate for handling AppDelegate subscribers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport ExpoModulesCore\n\n@main\nclass AppDelegate: ExpoAppDelegate {\n\noverride func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\nsuper.application(application, didFinishLaunchingWithOptions: launchOptions)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Canary Release\nDESCRIPTION: Commands to install the latest canary (pre-release) version of Expo and update related packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install the alpha version of expo and its related packages\n$ npm install expo@canary && npx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Installing expo-keep-awake Package\nDESCRIPTION: Command to install the expo-keep-awake package using npx expo install in a React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-keep-awake/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-keep-awake\n```\n\n----------------------------------------\n\nTITLE: Local Image Handling for Printing in Expo\nDESCRIPTION: Example showing how to handle local images for printing on iOS by converting them to base64 format due to WKWebView limitations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/print.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Asset } from 'expo-asset';\nimport { printAsync } from 'expo-print';\nimport { manipulateAsync } from 'expo-image-manipulator';\n\nasync function generateHTML() {\n  const asset = Asset.fromModule(require('../../assets/logo.png'));\n  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });\n  return `\n    <html>\n      <img\n        src=\"data:image/jpeg;base64,${image.base64}\"\n        style=\"width: 90vw;\" />\n    </html>\n  `;\n}\n\nasync function print() {\n  const html = await generateHTML();\n  await printAsync({ html });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for E2E Tests (Bash)\nDESCRIPTION: Initializes essential environment variables like the Expo repository root, working directory root, test project root, updates host/port, and debug flags. It also removes any previous working directory and recreates it to ensure a clean state before setting up the test project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The location of your local copy of this repo\nexport EXPO_REPO_ROOT=/Users/me/myCode/expo\n# The name of a directory that the test project can live under\nexport WORKING_DIR_ROOT=/Users/me/myCode/e2eworking\n# Other environment variables needed for the test setup\nexport TEST_PROJECT_ROOT=$WORKING_DIR_ROOT/updates-e2e\nexport UPDATES_HOST=localhost\nexport UPDATES_PORT=4747\nexport EX_UPDATES_NATIVE_DEBUG=1\n\n# Remove and recreate the working directory before executing the setup\nrm -rf $WORKING_DIR_ROOT\nmkdir $WORKING_DIR_ROOT\n```\n\n----------------------------------------\n\nTITLE: Updating SecurityLevel enum in TypeScript\nDESCRIPTION: SecurityLevel.BIOMETRIC has been deprecated in favor of BIOMETRIC_STRONG and BIOMETRIC_WEAK. Using SecurityLevel.BIOMETRIC may lead to unexpected behavior.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-local-authentication/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSecurityLevel.BIOMETRIC // Deprecated\nSecurityLevel.BIOMETRIC_STRONG // New\nSecurityLevel.BIOMETRIC_WEAK // New\n```\n\n----------------------------------------\n\nTITLE: Logging into EAS CLI\nDESCRIPTION: This command logs the user into the EAS CLI using their Expo account credentials.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Running React Native App with Expo CLI for Android and iOS\nDESCRIPTION: These commands are used to compile and run a React Native app using Expo CLI, replacing the equivalent commands from @react-native-community/cli.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/using-expo-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# for Android\n$ npx expo run:android\n\n# for iOS\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Adding Manual Update Date in MDX Frontmatter\nDESCRIPTION: This snippet demonstrates how to manually add a modification date to the frontmatter of an MDX file. This is used when automatic date updating based on Git commit history is not sufficient.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_15\n\nLANGUAGE: mdx\nCODE:\n```\n---\nmodificationDate: April 8th, 2024\n{/* Other frontmatter fields */}\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page, defining title, sidebar title, and description.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Troubleshooting overview\nsidebar_title: Overview\ndescription: An overview of troubleshooting guides for app development with Expo and EAS.\n---\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI Command\nDESCRIPTION: Command line instruction for installing the EAS CLI globally using npm package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/migrate-from-classic-updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --global eas-cli\n```\n\n----------------------------------------\n\nTITLE: Importing LightSensor from expo-sensors in JavaScript\nDESCRIPTION: This snippet shows how to import the LightSensor module from the expo-sensors package in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { LightSensor } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Audio Recording Configuration - iOS Settings\nDESCRIPTION: Default audio recording settings for iOS, specifying the file extension as .m4a and output format as MPEG4AAC for cross-platform compatibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  extension: '.m4a',\n  outputFormat: RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in JSX for Documentation\nDESCRIPTION: JSX imports for various icon components used in the documentation page layout. These imports are used to add visual elements to the navigation links.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GithubIcon } from '@expo/styleguide-icons/custom/GithubIcon';\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { Rocket02Icon } from '@expo/styleguide-icons/outline/Rocket02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Running Latest Expotools Version (Shell)\nDESCRIPTION: Executes the latest version of Expotools from within the Expo repository. Using either `expotools` or the shorter alias `et` automatically rebuilds the code based on the latest sources before running.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/tools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexpotools\n```\n\nLANGUAGE: shell\nCODE:\n```\net\n```\n\n----------------------------------------\n\nTITLE: Updating Bundled SQLite3 Source Code\nDESCRIPTION: Shell commands for updating and configuring SQLite3 and SQLCipher source code in the expo-sqlite package. Shows the process of downloading, building, and symbol replacement.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sqlite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# You should clone expo/expo git repository first\n$ cd packages/expo-sqlite\n\n# Download and build sqlite3.[ch]\n# For example, to use sqlite 3.45.3 and sqlcipher 4.6.0\n$ ./scripts/prepare_sqlite.ts vendor/sqlite3 3.45.3\n$ ./scripts/prepare_sqlite.ts vendor/sqlcipher 4.6.0 --sqlcipher\n\n# Replace sqlite3 symbols to prevent conflict with iOS system sqlite3\n$ ./scripts/replace_symbols.ts vendor/sqlite3\n$ ./scripts/replace_symbols.ts vendor/sqlcipher\n```\n\n----------------------------------------\n\nTITLE: Configuring credentials.json for Android\nDESCRIPTION: Example credentials.json configuration for Android, specifying the keystore path, password, key alias and key password. This allows EAS Build to use your local Android keystore for signing apps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"android\": {\n    \"keystore\": {\n      \"keystorePath\": \"android/keystores/release.keystore\",\n      \"keystorePassword\": \"KEYSTORE_PASSWORD\",\n      \"keyAlias\": \"KEY_ALIAS\",\n      \"keyPassword\": \"KEY_PASSWORD\"\n    }\n  },\n  \"ios\": {\n    /* @hide ... */\n    /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FlashList Import Specification in Markdown\nDESCRIPTION: Markdown frontmatter specification for the FlashList documentation page, defining metadata like title, description, source code URL, package name, and supported platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/flash-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: FlashList\ndescription: A React Native component that provides a fast and performant way to render lists.\nsourceCodeUrl: 'https://github.com/shopify/flash-list'\npackageName: '@shopify/flash-list'\nplatforms: ['android', 'ios', 'tvos', 'web']\n---\n```\n\n----------------------------------------\n\nTITLE: iOS Entitlements Configuration for iCloud Support\nDESCRIPTION: XML configuration for iOS entitlements file to enable iCloud capabilities for applications not using EAS Build. This needs to be added to the app's entitlements file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.icloud-services</key>\n<array>\n    <string>CloudDocuments</string>\n</array>\n<key>com.apple.developer.ubiquity-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\n```\n\n----------------------------------------\n\nTITLE: Page Metadata Format for Documentation\nDESCRIPTION: Example of the metadata format used at the top of markdown documentation pages to control page properties and display settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmetadata: goes here\n---\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client for iOS Development in Expo\nDESCRIPTION: This command installs the expo-dev-client package, which is necessary for running development builds on iOS simulators. It should be executed in the project's root directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuildLocal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Migrating to Expo Modules API in Swift\nDESCRIPTION: Migrated iOS codebase to use the new Expo modules API\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-brightness/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// Migrated to Expo modules API\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Version Basic Example\nDESCRIPTION: Basic example of configuring Android app version using the default version values from the job configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure Android version\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    - eas/configure_eas_update\n    - eas/inject_android_credentials\n    # @info #\n    - eas/configure_android_version\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Standard Web Crypto Package\nDESCRIPTION: Command to install the expo-standard-web-crypto package via npm package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-standard-web-crypto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-standard-web-crypto\n```\n\n----------------------------------------\n\nTITLE: Configuring Categories with Subcategories in JSON\nDESCRIPTION: Configuration showing how to set primary category with subcategories plus a secondary category. Example uses GAMES as primary with GAMES_CARD and GAMES_BOARD subcategories, and ENTERTAINMENT as secondary.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"categories\": [[\"GAMES\", \"GAMES_CARD\", \"GAMES_BOARD\"], \"ENTERTAINMENT\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Android Development Build with EAS\nDESCRIPTION: This command initiates the creation of a development build for Android using EAS, specifying the platform and build profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ eas build --platform android --profile development\n```\n\n----------------------------------------\n\nTITLE: Ensuring Correct Content-Type for Expo Push Token Requests\nDESCRIPTION: Fixed the request for fetching an Expo push token to include the `content-type: application/json` header. This ensures proper communication with the Expo push notification service.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: http\nCODE:\n```\ncontent-type: application/json\n```\n\n----------------------------------------\n\nTITLE: Updating ImagePicker.MediaTypeOptions in JavaScript\nDESCRIPTION: The MediaTypeOptions enum has been deprecated. Users should now use a single MediaType or an array of MediaTypes instead.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-picker/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old usage (deprecated)\nImagePicker.MediaTypeOptions.All\n\n// New usage\n'photo' // or ['photo', 'video']\n```\n\n----------------------------------------\n\nTITLE: Defining a Random Number Generator Function\nDESCRIPTION: Shows how to create a reusable function that generates a random number and returns it as an output.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  random:\n    name: Generate random number\n    outputs: [value]\n    command: set-output value `random_number`\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components in JSX for Expo Documentation Navigation\nDESCRIPTION: This code snippet demonstrates the use of custom BoxLink components to create navigation links to different sections of the Expo documentation. It imports icon components from Expo's styleguide and renders three BoxLink components, each with a title, description, destination URL, and associated icon.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Get started\"\n  description=\"If you are new to Expo, we recommend starting with this tutorial. It provides a step-by-step guide on how to build a universal app that runs on Android, iOS and the web.\"\n  href=\"/tutorial/introduction/\"\n  Icon={GraduationHat02DuotoneIcon}\n/>\n\n<BoxLink\n  title=\"EAS Tutorial\"\n  description=\"If you are looking to learn about building your Android and iOS apps using Expo Application Services (EAS), this tutorial covers the EAS Build, Update, and Submit workflows.\"\n  href=\"/tutorial/eas/introduction/\"\n  Icon={GraduationHat02DuotoneIcon}\n/>\n\n<BoxLink\n  title=\"UI programming\"\n  description=\"A collection of guides on various UI-related topics such as background image, checkbox, using SVGs and so on.\"\n  href=\"/ui-programming/image-background/\"\n  Icon={PaletteIcon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Preserving JSX in production exports\nDESCRIPTION: This code preserves JSX in production exports to support jsx/createElement interception.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Preserve JSX in production exports to support jsx/createElement interception.\n```\n\n----------------------------------------\n\nTITLE: Importing Cellular Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Cellular module from expo-cellular package. This import statement is necessary to use the Cellular API in your Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client in Expo Project\nDESCRIPTION: This command installs the expo-dev-client package in the project's root directory. This is necessary for development builds on Android devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuildLocal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Republishing EAS Updates\nDESCRIPTION: Commands to republish previous updates either by update group ID or branch name\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update:republish --group [update-group-id]\n$ eas update:republish --branch [branch-name]\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage Reports in package.json\nDESCRIPTION: Add settings to package.json to enable code coverage reporting and specify files to include or exclude from the report.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"jest\": {\n  \"collectCoverage\": true,\n  \"collectCoverageFrom\": [\n    \"**/*.{ts,tsx,js,jsx}\",\n    \"!**/coverage/**\",\n    \"!**/node_modules/**\",\n    \"!**/babel.config.js\",\n    \"!**/expo-env.d.ts\",\n    \"!**/.expo/**\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies for Config Plugin Development in package.json\nDESCRIPTION: Defines the recommended dependency structure for a library providing an Expo config plugin. It uses expo as a peer dependency that's marked as optional, with a specific dev dependency version for development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"expo\": \"^47.0.0\"\n  },\n  \"peerDependencies\": {\n    \"expo\": \">=47.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"expo\": {\n      \"optional\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Battery Module Import Example\nDESCRIPTION: Example showing how to import the Battery module from expo-battery package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: Installing web dependencies for Expo app\nDESCRIPTION: Command to install required dependencies for running the Expo app on the web platform including react-dom, react-native-web, and @expo/metro-runtime.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install react-dom react-native-web @expo/metro-runtime\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-config-expo with Yarn\nDESCRIPTION: Command to install the eslint-config-expo package using Yarn as a development dependency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev eslint-config-expo\n```\n\n----------------------------------------\n\nTITLE: Selecting Node.js Version for Production Build\nDESCRIPTION: Configuration to specify the Node.js version for the production build profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"node\": \"18.18.0\"\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting workspace root for pnpm monorepos\nDESCRIPTION: This code detects the workspace root for monorepos using pnpm package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Detect workspace root for monorepos using pnpm.\n```\n\n----------------------------------------\n\nTITLE: Implementing Handoff in Expo Router Component\nDESCRIPTION: Example implementation of Handoff functionality in a React component using expo-router/head. Shows basic setup with meta tag for enabling handoff.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/apple-handoff.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Head from 'expo-router/head';\nimport { Text } from 'react-native';\n\nexport default function App() {\n  return (\n    <>\n      <Head>\n        <meta property=\"expo:handoff\" content=\"true\" />\n      </Head>\n      <Text>Hello World</Text>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-module.config.json for Native Modules\nDESCRIPTION: Add the native module classes to the expo-module.config.json file for both iOS and Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"modules\": [\"MyModule\"]\n  },\n  \"android\": {\n    \"modules\": [\"my.module.package.MyModule\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpoRadialChartView for Android\nDESCRIPTION: Implements the native Android functionality for the ExpoRadialChartView using MPAndroidChart.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.radialchart\n\nimport android.content.Context\nimport android.graphics.Color\nimport androidx.annotation.ColorInt\nimport com.github.mikephil.charting.charts.PieChart\nimport com.github.mikephil.charting.data.PieData\nimport com.github.mikephil.charting.data.PieDataSet\nimport com.github.mikephil.charting.data.PieEntry\nimport expo.modules.kotlin.AppContext\nimport expo.modules.kotlin.records.Field\nimport expo.modules.kotlin.records.Record\nimport expo.modules.kotlin.views.ExpoView\n\n\nclass Series : Record {\n  @Field\n  val color: String = \"#ff0000\"\n\n  @Field\n  val percentage: Float = 0.0f\n}\n\nclass ExpoRadialChartView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {\n  internal val chartView = PieChart(context).also {\n    it.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)\n    addView(it)\n  }\n\n  fun setChartData(data: ArrayList<Series>) {\n    val entries: ArrayList<PieEntry> = ArrayList()\n    val colors: ArrayList<Int> = ArrayList()\n    for (series in data) {\n      entries.add(PieEntry(series.percentage))\n      colors.add(Color.parseColor(series.color))\n    }\n    val dataSet = PieDataSet(entries, \"DataSet\");\n    dataSet.colors = colors;\n    val pieData = PieData(dataSet);\n    chartView.data = pieData;\n    chartView.invalidate();\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Tracking Transparency Module (TypeScript)\nDESCRIPTION: This snippet reveals how to import all exported members of the expo-tracking-transparency library in a TypeScript/JavaScript file. Required dependency: expo-tracking-transparency. Use when needing direct access to library APIs within your application files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport * as ExpoTrackingTransparency from 'expo-tracking-transparency';\n```\n\n----------------------------------------\n\nTITLE: Generating Patches with patch-project (Shell)\nDESCRIPTION: Executes the 'patch-project' command-line tool to generate patch files based on modifications made within the 'android' or 'ios' directories of an Expo project. The generated patches are saved in the 'cng-patches' directory and automatically applied during 'npx expo prebuild'. Requires Node.js, npm/npx, and the 'patch-project' package to be installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/patch-project/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npx patch-project\n```\n\n----------------------------------------\n\nTITLE: Triggering EAS build from CLI\nDESCRIPTION: Command to trigger a new EAS build for all platforms without waiting for completion. This is typically used in CI environments to start the build process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npx eas-cli build --platform all --non-interactive --no-wait\n```\n\n----------------------------------------\n\nTITLE: Adding Splash Screen Bitmap to Native Mode - Android XML\nDESCRIPTION: This variant of splashscreen.xml is used when the resizeMode is set to 'native' in strings.xml. This XML overlays a centered bitmap splash image on top of the background color. The file includes both the background and image definition, improving compatibility with different screen DPIs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<layer-list xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\">\\n  <item android:drawable=\\\"@color/splashscreen_background\\\"/>\\n+ <item>\\n+   <bitmap android:gravity=\\\"center\\\" android:src=\\\"@drawable/splashscreen_image\\\"/>\\n+ </item>\\n</layer-list>\n```\n\n----------------------------------------\n\nTITLE: Using Access Token with EAS CLI\nDESCRIPTION: Example showing how to use an access token with the EAS CLI to trigger a build by setting the EXPO_TOKEN environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/accounts/programmatic-access.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_TOKEN=my_token eas build\n```\n\n----------------------------------------\n\nTITLE: Triggering Bundle Splitting with Dynamic Import in JavaScript\nDESCRIPTION: This `index.js` file demonstrates how to trigger bundle splitting in Expo web projects (SDK 50+). It imports `@expo/metro-runtime` (required for the feature) and uses a dynamic `import('./math')` call. Metro will automatically split the `math.js` module and its dependencies into a separate chunk during production builds (`npx expo export -p web`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```js index.js\nimport '@expo/metro-runtime';\n\n// This will be split into a separate chunk.\nimport('./math').then(math => {\n  console.log(math.add(1, 2));\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Code Signing Keys and Certificate in Bash\nDESCRIPTION: This command generates a private key and corresponding code signing certificate for an app using expo-updates. It specifies output directories for keys and certificates, sets the certificate validity duration, and defines a common name for the certificate.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/code-signing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo-updates codesigning:generate \\\n  --key-output-directory keys \\\n  --certificate-output-directory certs \\\n  --certificate-validity-duration-years 10 \\\n  --certificate-common-name \"My App\"\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins for Android Printing\nDESCRIPTION: This HTML snippet demonstrates how to set page margins for printing on Android using CSS @page rule.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/print.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  @page {\n    margin: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion from expo-sensors\nDESCRIPTION: Basic import statement showing how to access the DeviceMotion functionality from the expo-sensors package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeviceMotion } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Identifying ADB Version Mismatch Error in Shell\nDESCRIPTION: This snippet shows the error message displayed in the terminal when the system's ADB server version does not match the client version, often caused by multiple ADB installations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/android-studio-emulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ adb server version (xx) doesn't match this client (xx); killing...\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install all the libraries and packages required by the Expo project. Dependencies are defined in the `package.json` file located in the project's root directory. This is typically the first step after cloning or creating a new project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/templates/expo-template-default/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Example\nDESCRIPTION: Example of using Tabs component to show multiple code variants in documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_12\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tabs, Tab } from '~/ui/components/Tabs';\n\n<Tabs>\n<Tab label=\"Add 1 One Way\">\n    ```js\n    addOne = async x => {\n      /* @info This text will be shown onHover */\n      return x + 1;\n      /* @end */\n    };\n    ```\n</Tab>\n<Tab label=\"Add 1 Another Way\">\n    ```js\n    addOne = async x => {\n      /* @info This text will be shown onHover */\n      return x++;\n      /* @end */\n    };\n    ```\n</Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Generating a New Expo Module Using expo-cli\nDESCRIPTION: Demonstrates the command to generate a new Expo module using expo-cli, with options for specifying the module name and using a custom template.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexpo generate-module [new module directory]\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Expo Modules with expo CLI (Shell)\nDESCRIPTION: Uses the `expo install` command (provided by `expo-cli`) to add a specific Expo module, like `expo-device`, to the project. This command ensures compatibility and handles necessary native linking. Requires `expo-cli` to be installed globally (`npm -g install expo-cli`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/install-expo-modules/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexpo install expo-device\n# the expo command is from expo-cli. if you don't have this, run `npm -g install expo-cli` to install.\n```\n\n----------------------------------------\n\nTITLE: Building Expo CLI for Development\nDESCRIPTION: Command to build the Expo CLI in development mode, which defaults to watch mode for continuous development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Config Plugin Packages\nDESCRIPTION: Demonstrates how to correctly import the config plugins and config packages from the expo package. This ensures compatibility and prevents versioning issues.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { /* @hide ...*//* @end */ } = require('expo/config-plugins');\nconst { /* @hide ...*//* @end */ } = require('expo/config');\n```\n\n----------------------------------------\n\nTITLE: Importing Cellular Module in Expo\nDESCRIPTION: Shows how to import the expo-cellular module to access cellular service provider information in an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/cellular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Cellular from 'expo-cellular';\n```\n\n----------------------------------------\n\nTITLE: Creating an Ad Hoc Provisioning Profile\nDESCRIPTION: This command creates an ad hoc provisioning profile, which is required for installing a development build on an iOS device.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas device:create\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component in JSX\nDESCRIPTION: Demonstrates how to use the RawH3 component in JSX to display a header section titled 'Animations'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/animations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>Animations</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Importing Xcode Instructions Component in JavaScript\nDESCRIPTION: This code imports a React component containing Xcode setup instructions from a separate file. It's likely part of a larger documentation or guide system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedExpoGo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport XcodeInstructions from './_xcodeInstructions.mdx';\n```\n\n----------------------------------------\n\nTITLE: Verifying Assets Command for EAS Updates\nDESCRIPTION: Command to verify that all required assets are included in an EAS update. This helps ensure proper asset inclusion before deploying updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/billing/usage-based-pricing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo-updates assets:verify <dir>\n```\n\n----------------------------------------\n\nTITLE: Updating Versions Endpoint Command\nDESCRIPTION: Command to remove beta tag from new SDK version on the versions endpoint\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\net update-versions-endpoint -s ${SDK_MAJOR_VERSION}.0.0 -k 'beta' --delete\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration\nDESCRIPTION: Example PostCSS configuration with autoprefixer plugin\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"autoprefixer\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update Basic Setup in YAML\nDESCRIPTION: Uses the eas/configure_eas_update function to set up runtime version and release channel for EAS Update without custom parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Configure EAS Update\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - eas/prebuild\n    # @info #\n    - eas/configure_eas_update\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Importing dom-to-image Library in React Native\nDESCRIPTION: Import statement for the dom-to-image library which enables screenshot capturing in web browsers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/platform-differences.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport domtoimage from 'dom-to-image';\n```\n\n----------------------------------------\n\nTITLE: Using InterruptionMode enums for audio interruption modes in React Native\nDESCRIPTION: Replaces INTERRUPTION_MODE_* constants with InterruptionModeAndroid and InterruptionModeIOS enums.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Audio, InterruptionModeIOS, InterruptionModeAndroid } from 'expo-av';\n\nAudio.setAudioModeAsync({\n  interruptionModeIOS: InterruptionModeIOS.DO_NOT_MIX,\n  interruptionModeAndroid: InterruptionModeAndroid.DO_NOT_MIX,\n  // other options\n});\n```\n\n----------------------------------------\n\nTITLE: Running iOS App on Simulator with Expo\nDESCRIPTION: This command builds the iOS app and runs it on an iOS simulator. It also starts a development server, eliminating the need to run 'npx expo start' separately.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuildLocal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Stack Layout\nDESCRIPTION: Demonstrates how to use a custom JavaScript stack navigator in an Expo Router application layout.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/stack.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { JsStack } from '../layouts/js-stack';\n\nexport default function Layout() {\n  return (\n    <JsStack\n      screenOptions={{\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing App Name for Android Development Variant\nDESCRIPTION: Android strings.xml configuration to set a different app name for the development variant.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\n    <string name=\"app_name\">MyApp - Dev</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Environment Files\nDESCRIPTION: Example of .gitignore configuration to exclude local environment files from version control.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.env*.local\n```\n\n----------------------------------------\n\nTITLE: GLView Import Statement\nDESCRIPTION: Shows how to import the GLView component from expo-gl package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/gl-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GLView } from 'expo-gl';\n```\n\n----------------------------------------\n\nTITLE: Creating Android Splash Screen Drawable Resource - XML Layer List\nDESCRIPTION: This snippet creates the splash screen drawable ('splashscreen.xml') using a <layer-list> XML in the res/drawable directory. It defines a single item, referencing the splashscreen background color. This forms the foundational native splash background, but does not overlay any image.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n+ <layer-list xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\">\\n+   <item android:drawable=\\\"@color/splashscreen_background\\\"/>\\n+ </layer-list>\n```\n\n----------------------------------------\n\nTITLE: Testing Local install-expo-modules Build (Shell)\nDESCRIPTION: Executes the locally built JavaScript entry point (`build/index.js`) of the `install-expo-modules` package using Node.js. It targets the current directory (`.`) of a React Native CLI project to test the changes made to the tool during development. Requires Node.js and a local build of the tool located at the specified path.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/install-expo-modules/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode path_to_expo/packages/install-expo-modules/build/index.js .\n```\n\n----------------------------------------\n\nTITLE: Linking EAS Update Branch to Staging Channel\nDESCRIPTION: Command to edit the staging channel to point to a new version branch. This enables testing of new updates before promoting them to production.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/how-it-works.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:edit staging --branch version-3.0\n```\n\n----------------------------------------\n\nTITLE: Service Worker Integration in Root HTML Component\nDESCRIPTION: React component implementing service worker registration for static/server rendering in Expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScrollViewStyleReset } from 'expo-router/html';\nimport type { PropsWithChildren } from 'react';\n\nexport default function Root({ children }: PropsWithChildren) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n        {/* Bootstrap the service worker. */}\n        <script dangerouslySetInnerHTML={{ __html: sw }} />\n\n        <ScrollViewStyleReset />\n\n        {/* Add any additional <head> elements that you want globally available on web... */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n\nconst sw = `\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n        navigator.serviceWorker.register('/sw.js').then(registration => {\n            console.log('Service Worker registered with scope:', registration.scope);\n        }).catch(error => {\n            console.error('Service Worker registration failed:', error);\n        });\n    });\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Rendering RawH3 Component with JSX\nDESCRIPTION: This JSX code renders the RawH3 component with the text 'app.json'. It's used to display a heading for the app.json configuration section in the user interface.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/app-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>app.json</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Checking ADB Device Connection\nDESCRIPTION: This command lists the Android devices connected to ADB (Android Debug Bridge). It helps verify if the Android device is properly connected for development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuildLocal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ adb devices\n\nList of devices attached\n8AHX0T32K\tdevice\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar from Expo in JavaScript\nDESCRIPTION: Shows the import statement required to utilize the StatusBar component from the expo-status-bar package in a JavaScript or React Native file. This import is necessary as a dependency for all further usage of expo-status-bar APIs. No parameters or outputs as this is a code import pattern.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Push Receipt Request Format in JavaScript\nDESCRIPTION: Defines the structure for requesting push receipts from Expo. It contains an array of receipt IDs for which status information is being requested.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ids\": string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Reference to VS Code Extension\nDESCRIPTION: Reference to VS Code Expo Tools extension that provides auto-complete, suggestions, and warnings for store.config.json files\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMake sure to install the [VS Code Expo Tools extension](https://github.com/expo/vscode-expo#readme) to get auto-complete, suggestions, and warnings for **store.config.json** files.\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Classes for Android and iOS\nDESCRIPTION: Configuration to set different resource classes for Android and iOS builds, allowing for customization of CPU and memory resources.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"android\": {\n        \"resourceClass\": \"medium\"\n      },\n      \"ios\": {\n        \"resourceClass\": \"large\"\n      },\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-navigation-bar Package\nDESCRIPTION: Command to install the expo-navigation-bar package using npx expo install in a bare React Native project. This should be run after configuring react-native-unimodules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-navigation-bar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-navigation-bar\n```\n\n----------------------------------------\n\nTITLE: Fixing androidNavigationBar Runtime Effect in app.json\nDESCRIPTION: Corrects an issue where settings configured for `androidNavigationBar` within the `app.json` file were not being applied correctly at runtime on Android devices. This ensures that customizations to the Android navigation bar specified in the configuration take effect as expected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nandroidNavigationBar\n```\n\n----------------------------------------\n\nTITLE: Tailwind Usage with React DOM\nDESCRIPTION: Example of using Tailwind classes with standard React DOM elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return (\n    <div className=\"bg-slate-100 rounded-xl\">\n      <p className=\"text-lg font-medium\">Welcome to Tailwind</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Android Notification Display When Alert is False\nDESCRIPTION: Corrected an issue on Android where notifications were still displayed even when the `shouldShowAlert` property in the notification handler was set to `false`. This ensures the `shouldShowAlert` setting is correctly respected.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nshouldShowAlert\n```\n\n----------------------------------------\n\nTITLE: Implementing TinyBase DevTools in React Component\nDESCRIPTION: Setup for TinyBase DevTools in an Expo React application. Creates a TinyBase store, implements the dev tools hook, and wraps the app with the store Provider.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/devtools-plugins.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStore } from 'tinybase';\nimport { useValue, Provider } from 'tinybase/lib/ui-react';\nimport { useTinyBaseDevTools } from '@dev-plugins/tinybase';\n\nconst store = createStore().setValue('counter', 0);\n\nexport default function App() {\n  useTinyBaseDevTools(store);\n\n  return <Provider store={store}>{/* ... */}</Provider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling React Native Instance Exceptions in Java\nDESCRIPTION: This code snippet references a new method 'onReactInstanceException()' added to the ReactNativeHostHandler class in Android to handle exceptions in bridgeless mode for expo-updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nReactNativeHostHandler.onReactInstanceException()\n```\n\n----------------------------------------\n\nTITLE: Importing Install Instructions Component in React Native (JavaScript)\nDESCRIPTION: This snippet shows the import of the APIInstallSection component from the project\\'s internal plugin directory. This component is typically used to display installation guidance for external packages, helping users quickly set up dependencies. It assumes the user is in a React Native/Next.js or Expo ecosystem with project-specific paths configured and does not directly render UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Dev Client on iOS (Shell)\nDESCRIPTION: This command starts the Expo development server specifically for a development client build (`--dev-client`) targeting the iOS platform (`--ios`). It's used when testing custom native code or configurations not supported by the standard Expo Go app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo start --dev-client --ios\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.5.0\nDESCRIPTION: Documents the major changes introduced in version 3.5.0 of expo-router, including React client component marking and URL hash support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-router/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.5.0 — 2024-04-18\n\n### 🎉 New features\n\n- Mark React client components with \"use client\" directives. ([#27300](https://github.com/expo/expo/pull/27300) by [@EvanBacon](https://github.com/EvanBacon))\n- Add URL hash support ([#27105](https://github.com/expo/expo/pull/27105) by [@marklawlor](https://github.com/marklawlor))\n- Type `Href` is no longer generic ([#27690](https://github.com/expo/expo/pull/27690) by [@marklawlor](https://github.com/marklawlor))\n```\n\n----------------------------------------\n\nTITLE: Cloning Expo repository with depth and branch options\nDESCRIPTION: Git command to clone the Expo repository with optimizations for faster cloning, including depth limitation and single branch selection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1 --single-branch --branch main git@github.com:expo/expo.git\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests from bare-expo Directory in Android and iOS\nDESCRIPTION: Commands to run end-to-end tests locally for Android and iOS platforms from the bare-expo directory, which is essential for verifying that features work properly before submitting them to CI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:android\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:ios\n```\n\n----------------------------------------\n\nTITLE: Analyzing Web Bundle for SDK 50 Server Output\nDESCRIPTION: Command to use source-map-explorer for analyzing web bundles in SDK 50 projects using the server output.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx source-map-explorer 'dist/client/_expo/static/js/web/*.js' 'dist/client/_expo/static/js/web/*.js.map'\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: Command to open the generated Android native code in Android Studio for debugging. This allows for full native debugging capabilities using Android Studio's tools.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ open -a \"/Applications/Android Studio.app\" ./android\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint with Yarn\nDESCRIPTION: Command to install the ESLint package using Yarn as a development dependency, which is required alongside eslint-config-expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev eslint\n```\n\n----------------------------------------\n\nTITLE: Initializing and Building with EAS for Custom Space (Bash)\nDESCRIPTION: Commands to initialize the test project with EAS (`eas init`) and then build a debug version specifically for updates testing (`eas build`) using a predefined build profile (`updates_testing_debug`). This is intended for testing against your own EAS project space after removing the default project ID from `app.json`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\neas init\neas build --profile=updates_testing_debug --platform=<android|ios>\n```\n\n----------------------------------------\n\nTITLE: Updated Example App with URL\nDESCRIPTION: Example app implementation showing URL prop usage.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebView } from 'expo-web-view';\n\nexport default function App() {\n  return <WebView style={{ flex: 1 }} url=\"https://expo.dev\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Component Usage with Expo Dev Client Components\nDESCRIPTION: Demonstrates basic usage of core components like View, Row, and Spacer with theme integration through useExpoTheme hook.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Spacer, Row, useExpoTheme, ChevronRightICon } from 'expo-dev-client-components';\n\nfunction ExampleRow() {\n  const theme = useExpoTheme();\n\n  return (\n    <View px=\"small\" py=\"large\">\n      <Row align=\"center\">\n        <ChevronRightIcon />\n        <Spacer.Horizontal size=\"tiny\" />\n        <Text size=\"large\" style={{ color: theme.text.default }}>\n          Enter URL manually\n        </Text>\n      </Row>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Box Link Component Usage for Pricing\nDESCRIPTION: JSX implementation of the BoxLink component linking to the pricing page with icon and description.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/billing/plans.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Pricing\"\n  description=\"Visit our pricing page to see the list of current prices for each plan.\"\n  href=\"https://expo.dev/pricing\"\n  Icon={CreditCard02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting Android Emulator with EAS Build Automation YAML\nDESCRIPTION: This YAML snippet demonstrates how to add the `eas/start_android_emulator` step to the EAS Build process, enabling automated starting of an Android Emulator during CI builds for Android apps. The step accepts parameters such as `system_image_package` (mandatory) and optionally `device_name`. Dependencies include having the project configured to use the old Build Infrastructure and access to the appropriate system image via Android SDK Manager. The emulator is launched prior to running automated tests, and the configuration must specify an x86_64 system image package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test\n  steps:\n    - eas/build\n    # @info #\n    - eas/start_android_emulator:\n        inputs:\n          system_image_package: system-images;android-30;default;x86_64\n    # @end #\n    # ... Maestro setup and tests\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Dotenv Files in Expo CLI\nDESCRIPTION: Terminal commands showing how to disable dotenv file loading in Expo CLI using the EXPO_NO_DOTENV environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# All users can run cross-env, followed by the Expo CLI command\n$ npx cross-env EXPO_NO_DOTENV=1 expo start\n# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command\n$ EXPO_NO_DOTENV=1 npx expo start\n```\n\n----------------------------------------\n\nTITLE: Setting Required and Optional Output Parameters\nDESCRIPTION: Demonstrates how to define both required and optional output parameters for a step.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Demo\n  steps:\n    - run:\n        name: Produce another output\n        id: id456\n        # @info #\n        outputs:\n          - required_param\n          - name: optional_param\n            required: false\n        # @end #\n        command: |\n          echo \"Producing more output\"\n          set-output required_param \"abc 123 456\"\n```\n\n----------------------------------------\n\nTITLE: ProjectId Configuration in app.json\nDESCRIPTION: The projectId configuration that gets added to app.json after running eas init. This unique identifier links the local project to the EAS project on the server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"eas\": {\n      \"projectId\": \"0cd3da2d-xxx-xxx-xxx-xxxxxxxxxx\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Gradle Properties in build.gradle\nDESCRIPTION: This Groovy snippet demonstrates how to safely access properties defined in gradle.properties from within build.gradle files, using findProperty with a fallback value to implement configurable settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_16\n\nLANGUAGE: groovy\nCODE:\n```\nproject.ext.react = [/* @info This code would be added to the template ahead of time, but it could be regexed in using <code>withAppBuildGradle()</code> */ enableHermes: findProperty('expo.react.jsEngine') ?: 'jsc' /* @end */]\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI as a development dependency\nDESCRIPTION: Command to install EAS CLI as a development dependency in your project. This allows interaction with the EAS API in CI environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/building-on-ci.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev eas-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo App Config with TypeScript\nDESCRIPTION: TypeScript configuration for Expo app config with proper type definitions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/typescript.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'ts-node/register';\nimport { ExpoConfig } from 'expo/config';\n\nconst config: ExpoConfig = {\n  name: 'my-app',\n  slug: 'my-app',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Workspaces in Package.json\nDESCRIPTION: Package.json configuration with workspace settings to enable monorepo structure using glob patterns for apps and packages directories.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"monorepo\",\n  \"version\": \"1.0.0\",\n  \"workspaces\": [\"apps/*\", \"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing EAS Builds with Specific Runtime Version\nDESCRIPTION: Command to check for existing EAS builds with a specific runtime version (fingerprint). This is used in the CI/CD process to determine if a new build is needed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/continuous-deployment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neas build:list --runtimeVersion <fingerprint>\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with Expo CLI and npm on Windows\nDESCRIPTION: Complete sequence of commands to clear node_modules, npm cache, watchman cache, and Metro bundler cache when using Expo CLI with npm.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n\n$ npm cache clean --force\n\n$ npm install\n\n$ watchman watch-del-all\n\n$ del %localappdata%\\Temp\\haste-map-*\n\n$ del %localappdata%\\Temp\\metro-cache\n\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Importing TaskManager Module\nDESCRIPTION: Example showing how to import the TaskManager module from expo-task-manager package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/task-manager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Development Build with EAS\nDESCRIPTION: This command initiates the creation of a development build for iOS using the specified development profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build --platform ios --profile development\n```\n\n----------------------------------------\n\nTITLE: Installing expo-application in bare React Native projects\nDESCRIPTION: Command to install the expo-application package using Expo's CLI tool in a bare React Native project. This should be run after ensuring the expo package is properly installed and configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-application/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-application\n```\n\n----------------------------------------\n\nTITLE: PWA Manifest Link in HTML\nDESCRIPTION: HTML code for linking the PWA manifest file in a single-page application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/progressive-web-apps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"manifest\" href=\"/manifest.json\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SDK Packages with npx expo install\nDESCRIPTION: Example command showing how to install multiple Expo SDK packages (camera, contacts, and sensors) using the npx expo install command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-camera expo-contacts expo-sensors\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Coroutines with AsyncFunction\nDESCRIPTION: Demonstrates how to use Kotlin coroutines with AsyncFunction on Android. The function uses a suspension mechanism to execute asynchronous calls.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nAsyncFunction(\"suspendFunction\") Coroutine { message: String ->\n  // You can execute other suspendable functions here.\n  // For example, you can use `kotlinx.coroutines.delay` to delay resolving the underlying promise.\n  delay(5000)\n  return@Coroutine message\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Expo SDK with npm\nDESCRIPTION: Commands to install the latest version of Expo SDK or a specific version using npm.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install latest\n$ npm install expo@latest\n\n# Install a specific SDK version (for example, SDK 51)\n$ npm install expo@51\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and setting up the project\nDESCRIPTION: Commands to install direnv, clone the repository with submodules, install dependencies with yarn, setup native components, and build the expo package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Developing Expo Go.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn setup:native\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Production Build in eas.json (JSON)\nDESCRIPTION: Defines the `productionBuild` profile in `eas.json`. It references external YAML files (`production-build-android.yml`, `production-build-ios.yml`) which contain the specific steps for creating Android (Google Play Store) and iOS (Apple App Store) production builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* @hide ... */ /* @end */\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"productionBuild\": {\n      \"android\": {\n        \"config\": \"production-build-android.yml\"\n      },\n      \"ios\": {\n        \"config\": \"production-build-ios.yml\"\n      }\n    }\n    /* @hide ... */ /* @end */\n  }\n  /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unordered Lists with UL and LI Components\nDESCRIPTION: Shows how to create unordered lists using UL and LI components from @expo/html-elements, which render as ul and li elements on web and custom-styled Views on native platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UL, LI } from '@expo/html-elements';\n\nexport default () => (\n  <UL>\n    <LI>oranges</LI>\n    <LI>apples</LI>\n    <UL>\n      <LI>green</LI>\n      <LI>red</LI>\n    </UL>\n  </UL>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client for iOS Development in Expo\nDESCRIPTION: This command installs the expo-dev-client package, which is necessary for development builds on iOS devices. It should be run in the project's root directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuildLocal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-contacts Plugin in app.json\nDESCRIPTION: Configuration example for the expo-contacts plugin in app.json, specifically setting the iOS contacts permission message.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/contacts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-contacts\",\n        {\n          \"contactsPermission\": \"Allow $(PRODUCT_NAME) to access your contacts.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Execute Environment Variables Fix\nDESCRIPTION: Change to pass null as argument to gradle .execute() to inherit environment variables from user environment\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\n.execute(null)\n```\n\n----------------------------------------\n\nTITLE: Adding PosterComponent prop to Video component in React Native\nDESCRIPTION: Adds a new PosterComponent prop to the Video component, allowing customization of the poster/thumbnail display.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Video\n  PosterComponent={CustomPoster}\n  // other props\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-video-thumbnails via npx expo install (Bash)\nDESCRIPTION: This command uses `npx expo install` to add the `expo-video-thumbnails` package to the project's dependencies. The `expo install` command ensures compatibility and handles linking native modules correctly for Expo projects (both managed and bare). It should be run in the root directory of the React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-video-thumbnails/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-video-thumbnails\n```\n\n----------------------------------------\n\nTITLE: Updating Camera Module Dependencies in TypeScript\nDESCRIPTION: Updates the @expo/config-plugins dependency version for the Camera module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-camera/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { withCameraModulePod } from '@expo/config-plugins';\n\n// Updated from 4.0.2 to 4.0.14\nwithCameraModulePod(config);\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Component in React/JSX\nDESCRIPTION: Example of using the BoxLink component to display a link to the European Commission's data protection information page. The component accepts title, description and href props to create a formatted link box.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/regulatory-compliance/gdpr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"European Commission's data protection page\"\n  description=\"For more information about GDPR, see European Commission's data protection page.\"\n  href=\"https://ec.europa.eu/info/law/law-topic/data-protection_en\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Opting Out of React Compiler Optimization\nDESCRIPTION: Example of using the 'use no memo' directive to disable React Compiler optimization for specific components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/preview/react-compiler.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent() {\n  'use no memo';\n\n  return <Text>Will not be optimized</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dom-to-image Package via npm\nDESCRIPTION: Terminal command for installing the dom-to-image package which enables DOM element capture functionality on web.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/platform-differences.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install dom-to-image\n```\n\n----------------------------------------\n\nTITLE: Input Example for Babel HTML Elements Transformation\nDESCRIPTION: Example React component using standard HTML elements that will be transformed by the Babel plugin. This shows how developers can write familiar HTML syntax in their React components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nexport default function Page() {\n  return (\n    <div>\n      <h1>Hello World</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing an Update to Preview Branch\nDESCRIPTION: Command to publish an EAS Update to the preview branch, targeting builds with the preview channel to receive the changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/team-development.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ eas update --branch preview --message \"Change first button label\"\n```\n\n----------------------------------------\n\nTITLE: Downloading EAS Credentials Command\nDESCRIPTION: Command to download automatically managed credentials from EAS servers to your local credentials.json file. Used for both iOS and Android platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/syncing-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neas credentials\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Gradle Properties for Android Builds\nDESCRIPTION: Global Gradle configuration settings in ~/.gradle/gradle.properties for Android builds. These settings optimize build performance by configuring JVM arguments, enabling parallel execution, and disabling the Gradle daemon.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\norg.gradle.jvmargs=-Xmx14g -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\norg.gradle.parallel=true\norg.gradle.configureondemand=true\norg.gradle.daemon=false\n```\n\n----------------------------------------\n\nTITLE: Promoting Versions Endpoint Changes to Production\nDESCRIPTION: Command to promote changes made on the staging versions endpoint to the production environment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Versions Endpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\net promote-versions-to-production\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Identifiers in app.json for Expo\nDESCRIPTION: Basic app.json configuration showing the iOS bundleIdentifier and Android package name, which need to be unique for each app variant to allow simultaneous installation on a device.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    /* @info */\n    \"bundleIdentifier\": \"com.yourname.stickersmash\"\n    /* @end */\n    /* @hide ... */ /* @end */\n  },\n  \"android\": {\n    /* @info */\n    \"package\": \"com.yourname.stickersmash\"\n    /* @end */\n    /* @hide ... */ /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android JS Engine Property\nDESCRIPTION: Deprecation notice showing the change from expo.jsEngine to hermesEnabled in android/gradle.properties configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config-plugins/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nexpo.jsEngine -> hermesEnabled\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: Command to open the native Android project in Android Studio for debugging.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ open -a \"/Applications/Android Studio.app\" android\n```\n\n----------------------------------------\n\nTITLE: Importing Dev Client API\nDESCRIPTION: Example of importing the expo-dev-client API in JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/dev-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DevClient from 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Enhancing Type Safety in Expo Settings TypeScript Module\nDESCRIPTION: This snippet shows an improved version of the TypeScript module with enhanced type safety using a Theme enum. It restricts theme values to 'light', 'dark', or 'system'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventEmitter, Subscription } from 'expo-modules-core';\n\nimport ExpoSettingsModule from './ExpoSettingsModule';\n\nconst emitter = new EventEmitter(ExpoSettingsModule);\n\nexport type Theme = 'light' | 'dark' | 'system';\n\nexport type ThemeChangeEvent = {\n  theme: Theme;\n};\n\nexport function addThemeListener(listener: (event: ThemeChangeEvent) => void): Subscription {\n  return emitter.addListener<ThemeChangeEvent>('onChangeTheme', listener);\n}\n\nexport function getTheme(): Theme {\n  return ExpoSettingsModule.getTheme();\n}\n\nexport function setTheme(theme: Theme): void {\n  return ExpoSettingsModule.setTheme(theme);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Data and Components in JavaScript/JSX\nDESCRIPTION: This snippet imports data constants (TALKS, PODCASTS, LIVE_STREAMS) and React components (TalkGridWrapper, TalkGridCell) from specific paths. These imports are used to render the talks, podcasts, and live streams sections of the page.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/additional-resources/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TALKS, PODCASTS, LIVE_STREAMS } from '~/public/static/talks';\nimport { TalkGridWrapper, TalkGridCell } from '~/ui/components/Home/sections';\n```\n\n----------------------------------------\n\nTITLE: Updating Expo Module Config for Apple Platforms\nDESCRIPTION: Changes required in expo-module.config.json to enable universal Apple platform support by replacing iOS-specific configuration with the new 'apple' platform designation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/additional-platform-support.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n-   \"platforms\": [\"ios\"],\n-   \"ios\": {\n-     \"modules\": [\"MyModule\"]\n-   }\n+   \"platforms\": [\"apple\"],\n+   \"apple\": {\n+     \"modules\": [\"MyModule\"]\n+   }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-publishing Previous EAS Update\nDESCRIPTION: Commands to re-publish a previous EAS Update, either by update group ID or branch name, to mitigate issues with a bad update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n# eas update:republish --group [update-group-id]\n# eas update:republish --branch [branch-name]\n\n# Example\n$ eas update:republish --group abc1\n$ eas update:republish --branch production\n```\n\n----------------------------------------\n\nTITLE: Installing expo-barcode-scanner in bare React Native projects\nDESCRIPTION: Command to install the expo-barcode-scanner package using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-barcode-scanner/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-barcode-scanner\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Command to open the generated iOS native code in Xcode for debugging. This is a shortcut to open the .xcworkspace file from the project's ios directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/runtime-issues.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ xed ios\n```\n\n----------------------------------------\n\nTITLE: EAS Build Function Usage\nDESCRIPTION: Example of using the built-in EAS build function in a workflow\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Run a build using a single command\n  steps:\n    - eas/build\n```\n\n----------------------------------------\n\nTITLE: Excluding Unimodule from Standalone Apps (Android)\nDESCRIPTION: Instructions for modifying the Android app's build.gradle to exclude a unimodule from being available in standalone apps. This involves adding the unimodule name to the exclude option of addMavenUnimodulesDependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Creating Unimodules.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\naddMavenUnimodulesDependencies([exclude: ['<unimodule-name>']])\n```\n\n----------------------------------------\n\nTITLE: Adding React Refresh Resolution for Yarn in package.json\nDESCRIPTION: Sets a Yarn resolution for react-refresh in the package.json file for SDK 49 projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"react-refresh\": \"~0.14.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for expo-brightness\nDESCRIPTION: XML snippet to add the WRITE_SETTINGS permission to the Android manifest file for using expo-brightness.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-brightness/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying iOS Error Stacktrace\nDESCRIPTION: This snippet demonstrates an example of an iOS error stacktrace that may occur when a fatal JS error happens and the error recovery system fails to recover. It shows the exception backtrace and explains that the underlying JavaScript error details are not included in Apple's crash reporting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/error-recovery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nLast Exception Backtrace:\n0   CoreFoundation                \t0xf203feba4 __exceptionPreprocess + 220 (NSException.m:200)\n1   libobjc.A.dylib               \t0xf201a1be7 objc_exception_throw + 60 (objc-exception.mm:565)\n2   MyApp                         \t0x10926b7ee -[EXUpdatesAppController throwException:] + 24 (EXUpdatesAppController.m:422)\n3   MyApp                         \t0x109280352 -[EXUpdatesErrorRecovery _crash] + 984 (EXUpdatesErrorRecovery.m:222)\n4   MyApp                         \t0x10927fa3d -[EXUpdatesErrorRecovery _runNextTask] + 148 (EXUpdatesErrorRecovery.m:0)\n5   libdispatch.dylib             \t0x109bc1848 _dispatch_call_block_and_release + 32 (init.c:1517)\n6   libdispatch.dylib             \t0x109bc2a2c _dispatch_client_callout + 20 (object.m:560)\n7   libdispatch.dylib             \t0x109bc93a6 _dispatch_lane_serial_drain + 668 (inline_internal.h:2622)\n8   libdispatch.dylib             \t0x109bca0bc _dispatch_lane_invoke + 392 (queue.c:3944)\n9   libdispatch.dylib             \t0x109bd6472 _dispatch_workloop_worker_thread + 648 (queue.c:6732)\n10  libsystem_pthread.dylib       \t0xf6da2845d _pthread_wqthread + 288 (pthread.c:2599)\n11  libsystem_pthread.dylib       \t0xf6da2742f start_wqthread + 8\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build\nDESCRIPTION: This command creates an EAS configuration file in the project directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with SWC Support\nDESCRIPTION: Configuration to force Next.js to use SWC transforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    forceSwcTransforms: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Orbit via Homebrew on macOS\nDESCRIPTION: Command to install Expo Orbit using the Homebrew package manager on macOS systems. This is the recommended installation method for macOS users.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/orbit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install expo-orbit\n```\n\n----------------------------------------\n\nTITLE: Modifying Xcode Project for JS Bundling in Debug and Release (Expo, Bash)\nDESCRIPTION: Uses the sed utility to replace \"SKIP_BUNDLING\" with \"FORCE_BUNDLING\" in the iOS Xcode project file. This forces the application JavaScript to be bundled into iOS builds for both debug and release configurations, which is required for expo-updates to function in debug mode. Replace <project name> with the actual Xcode project name. Requires macOS (sed syntax), Xcode project, and appropriate permissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/DEVELOPMENT.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsed -i '' 's/SKIP_BUNDLING/FORCE_BUNDLING/g;' ios/<project name>.xcodeproj/project.pbxproj\n```\n\n----------------------------------------\n\nTITLE: Global CSS Style Definition\nDESCRIPTION: Example of defining a global CSS style for a container class that applies on web.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Chrome iframe Camera Usage\nDESCRIPTION: HTML example showing how to enable camera access in Chrome iframe for versions 64+\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera-legacy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"...\" allow=\"microphone; camera;\">\n  <!-- <Camera /> -->\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing Header Component in React Native\nDESCRIPTION: This code imports a RawH3 component from the text components directory, which is used to display header text in the UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/themes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Importing DOM Component in Native App\nDESCRIPTION: Example of importing and using a DOM component within a native Expo application\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from './my-component.tsx';\n\nexport default function App() {\n  return (\n    <DOMComponent name=\"Europa\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Android Child View Management\nDESCRIPTION: Implementation of child view management functions for Android ViewGroup.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nAddChildView { parent, child: View, index ->\n  parent.addView(child, index)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nGetChildCount { parent ->\n  return@GetChildCount parent.childCount\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nGetChildViewAt { parent, index ->\n  parent.getChildAt(index)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nRemoveChildView { parent, child: View ->\n  parent.removeView(child)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nRemoveChildViewAt { parent, index ->\n  parent.removeViewAt(child)\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Environment Variables Between Steps in EAS Build\nDESCRIPTION: Demonstrates how to use the set-env command to share environment variables between different steps in a workflow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Shared environment variable example\n  steps:\n    - run:\n        name: Set environment variables\n        command: |\n          set -x\n\n          # Set variable\n          ENV_TEST_LOCAL=\"present-only-in-current-shell-context\"\n          # Set and export variable\n          export ENV_TEST_LOCAL_EXPORT=\"present-in-current-step\"\n          # Set shared EAS Workflow variable\n          set-env ENV_TEST_SET_ENV \"present-in-following-steps\"\n\n          # Will print \"ENV_TEST_LOCAL: present-only-in-current-shell-context\"\n          # because current shell has access to this local variable.\n          echo \"ENV_TEST_LOCAL: $ENV_TEST_LOCAL\"\n\n          # Will print \"ENV_TEST_LOCAL_EXPORT: present-in-current-step\"\n          # because export also sets the local variable value.\n          echo \"ENV_TEST_LOCAL_EXPORT: $ENV_TEST_LOCAL_EXPORT\"\n\n          # Will \"ENV_TEST_SET_ENV: \"\n          # because set-env does not set or export variables.\n          echo \"ENV_TEST_SET_ENV: $ENV_TEST_SET_ENV\"\n\n          # Will only print LOCALLY_EXPORTED_ENV,\n          # because it is the only export-ed variable.\n          env | grep ENV_TEST_\n    - run:\n        name: Check variables values in next step\n        command: |\n          set -x\n\n          # Will print \"ENV_TEST_LOCAL: \", because ENV_TEST_LOCAL\n          # is only a local variable in previous step.\n          echo \"ENV_TEST_LOCAL: $ENV_TEST_LOCAL\"\n\n          # Will print \"ENV_TEST_LOCAL_EXPORT: \"\n          # because export does not share a variable to other steps.\n          echo \"ENV_TEST_LOCAL_EXPORT: $ENV_TEST_LOCAL_EXPORT\"\n\n          # Will print \"ENV_TEST_SET_ENV: present-in-following-steps\"\n          # because set-env \"exported\" variable to other steps.\n          echo \"ENV_TEST_SET_ENV: $ENV_TEST_SET_ENV\"\n\n          # Will only print ENV_TEST_SET_ENV,\n          # because set-env \"exported\" it to other steps.\n          env | grep ENV_TEST_\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Expo\nDESCRIPTION: Example PostCSS configuration file that enables the autoprefixer plugin for CSS in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"autoprefixer\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fingerprint Output in JSON\nDESCRIPTION: Shows a sample output of the fingerprint generation process, including file and directory hashes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sources\": [\n    {\n      \"type\": \"file\",\n      \"filePath\": \"app.json\",\n      \"reasons\": [\"expoConfig\"],\n      \"hash\": \"378083de0c6e6bb6caf8fb72df658b0b26fb29ef\"\n    },\n    {\n      \"type\": \"file\",\n      \"filePath\": \"eas.json\",\n      \"reasons\": [\"easBuild\"],\n      \"hash\": \"f723802b6ea916d1a6c4767b2299cc81ddb22eb4\"\n    },\n    {\n      \"type\": \"dir\",\n      \"filePath\": \"node_modules/expo\",\n      \"reasons\": [\"expoAutolinkingIos\", \"expoAutolinkingAndroid\", \"bareRncliAutolinking\"],\n      \"hash\": \"1faee4057fa943300905750b51c3b0cbf05f4b0d\"\n    }\n  ],\n  \"hash\": \"bf8a3b08935f056270b1688333b02f1ef5fa25bf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Schema Table in JSX\nDESCRIPTION: Renders the AppConfigSchemaTable component with the imported schema as a prop. This displays a visual reference of all available configuration properties.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AppConfigSchemaTable schema={schema} />\n```\n\n----------------------------------------\n\nTITLE: Extended Podfile with Abstract Target\nDESCRIPTION: Enhanced Podfile configuration using abstract_target to share common configuration between multiple build targets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nabstract_target 'common' do\n  # put common target configuration here\n\n  target 'myapp' do\n  end\n\n  target 'myapp-dev' do\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Native Module Properties in JavaScript\nDESCRIPTION: Demonstrates how to access and set properties of a native module in JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { requireNativeModule } from 'expo-modules-core';\n\n// Assume that we have named the module \"MyModule\"\nconst MyModule = requireNativeModule('MyModule');\n\n// Obtain the property value\nMyModule.foo;\n\n// Set a new value\nMyModule.foo = 'foobar';\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Package.json for Monorepo\nDESCRIPTION: Basic package.json configuration for starting a monorepo structure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"monorepo\",\n  \"version\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering iOS Device for Development\nDESCRIPTION: EAS CLI command to register an iOS device for development, adding it to your ad hoc provisioning profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ eas device:create\n```\n\n----------------------------------------\n\nTITLE: Testing iOS Simulator App with Maestro\nDESCRIPTION: YAML configuration for testing an iOS simulator app using Maestro. It shows how to use the 'eas/maestro_test' function with a specific app path and multiple test flows.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test iOS simulator app\n  steps:\n    - eas/checkout\n    # @info #\n    - eas/maestro_test:\n        app_path: ./fixtures/my_app.app\n        inputs:\n          flow_path: |\n            maestro/sign_in.yaml\n            maestro/create_post.yaml\n            maestro/sign_out.yaml\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TaskManager Module (JavaScript)\nDESCRIPTION: Provides the standard JavaScript import statement required to access the expo-task-manager API. This snippet must be present at the top of files that implement background tasks using this library. It is a prerequisite for any further usage of the expo-task-manager functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/task-manager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as TaskManager from 'expo-task-manager';\n```\n\n----------------------------------------\n\nTITLE: Displaying Expo Config Plugins Downloads Badge\nDESCRIPTION: This code snippet renders a content spotlight component showing the download statistics for Expo Config Plugins. It uses an npm shield badge to display the number of downloads.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/continuous-native-generation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a\n  aria-label=\"Expo Config Plugins downloads\"\n  href=\"http://www.npmtrends.com/@expo/config-plugins\"\n  target=\"_blank\">\n  <ContentSpotlight\n    alt=\"Expo Config Plugins downloads.\"\n    src=\"https://img.shields.io/npm/dm/@expo/config-plugins.svg?style=flat-square&labelColor=gray&color=33CC12&label=Downloads\"\n    className=\"max-w-[180px]\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Redirect Component for EAS Build Page in JSX\nDESCRIPTION: Imports a Redirect component from the project's components directory and uses it to redirect users to the '/build/introduction' path. This is a common pattern in documentation sites to maintain backward compatibility when page structures change.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Redirect from '~/components/plugins/Redirect';\n\n<Redirect path=\"/build/introduction\" />\n```\n\n----------------------------------------\n\nTITLE: Installing expo-calendar in bare React Native projects\nDESCRIPTION: Command to install the expo-calendar package using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-calendar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-calendar\n```\n\n----------------------------------------\n\nTITLE: Installing Expo CLI Command\nDESCRIPTION: Command for installing Expo CLI which provides a clean interface for bundlers and native build tools.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-sizing DOM Components\nDESCRIPTION: Example of implementing automatic size measurement for DOM components\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport DOMComponent from './my-component';\n\nexport default function Route() {\n  return <DOMComponent dom={{ autoSize: true }} />;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nexport default function DOMComponent(_: { dom?: import('expo/dom').DOMProps }) {\n  return <div style={{ width: 500, height: 500, backgroundColor: 'blue' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing expo-image-picker config plugin in app.json\nDESCRIPTION: JSON snippet demonstrating how to customize the expo-image-picker config plugin with custom permission messages and disabling microphone permission.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"custom photos permission\",\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to open the camera\",\n\n          \"//\": \"Disables the microphone permission\",\n          \"microphonePermission\": false\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontend Component Documentation\nDESCRIPTION: Markdown documentation for the SegmentedControl component, including metadata about platforms, package name, and source code location.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/segmented-control.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: SegmentedControl\ndescription: A React Native library that provides a component to render UISegmentedControl from iOS.\nsourceCodeUrl: 'https://github.com/react-native-community/segmented-control'\npackageName: '@react-native-segmented-control/segmented-control'\nplatforms: ['android', 'ios', 'web']\n---\n```\n\n----------------------------------------\n\nTITLE: RTL Support Configuration\nDESCRIPTION: Configuration for enabling RTL support in Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"extra\": {\n      \"supportsRTL\": true\n    },\n    \"plugins\": [\"expo-localization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Android App in Expo Development Build\nDESCRIPTION: This command builds and runs the Android app in development mode. It also starts a development server, eliminating the need to run 'npx expo start' separately.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuildLocal.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite in bluesky-social/expo Project\nDESCRIPTION: Command to run the test suite before submitting a pull request to ensure the package remains stable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Entry Point in package.json (JSON)\nDESCRIPTION: This JSON snippet sets the main entry file for a Node/React Native/Expo project by specifying the \\\"main\\\" key in package.json. By assigning the value 'src/main.js', the project instructs build and runtime tools to use this file as the application entry. There are no dependencies, but this only works in node-resolving build systems aware of the main property. Input: entry file path; Output: updated package.json entry.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK Versions in Gradle\nDESCRIPTION: Updated compileSdkVersion and targetSdkVersion to 33 for Android\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-brightness/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Gradle\nCODE:\n```\ncompileSdkVersion 33\ntargetSdkVersion 33\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Runtime Version in Expo\nDESCRIPTION: Allows manual setting of a custom runtime version, giving complete control over update compatibility with builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"runtimeVersion\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Plugins using JSON\nDESCRIPTION: Example `postcss.config.json` file demonstrating how to configure PostCSS for an Expo project by specifying plugins. This configuration enables the `autoprefixer` plugin. Using the JSON format (`postcss.config.json`) is recommended over `postcss.config.js` for better caching. Changes to this file or `browserslist` require clearing the Metro cache (`npx expo start --clear`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n```json postcss.config.json\n{\n  \"plugins\": {\n    \"autoprefixer\": {}\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Organizing import statements in JavaScript\nDESCRIPTION: Example of the recommended order for import statements in JavaScript files. Groups imports with side effects first, followed by external modules, and finally relative imports, enhancing readability and consistency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT\nimport 'side-effect';\n\nimport invariant from 'invariant';\nimport Expo, { Audio } from 'expo';\nimport path from 'path';\n\nimport HomeScreen from '../screens/HomeScreen';\nimport Colors from '../style/Colors';\nimport calculateViewport from '../style/calculateViewport';\nimport LoginButton './LoginButton';\n\nconst assert = require('assert');\n```\n\n----------------------------------------\n\nTITLE: Building install-expo-modules in Watch Mode (Shell)\nDESCRIPTION: Runs the build process for the `install-expo-modules` package using `yarn watch`. This command continuously monitors source files and rebuilds the project upon changes, facilitating development and testing. Assumes `yarn` is installed and the command is run within the package's source directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/install-expo-modules/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Running iOS unit_tests Fastlane Action\nDESCRIPTION: Command to execute the unit_tests lane for iOS, which runs the unit tests for the iOS application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios unit_tests\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example showing how to configure environment variables for different build profiles, including production and preview environments with API URLs.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/eas-json.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"node\": \"16.13.0\",\n      \"env\": {\n        \"API_URL\": \"https://company.com/api\"\n      }\n    },\n    \"preview\": {\n      \"extends\": \"production\",\n      \"distribution\": \"internal\",\n      \"env\": {\n        \"API_URL\": \"https://staging.company.com/api\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQLite Statement for Raw Results in JavaScript\nDESCRIPTION: This code snippet introduces a new method 'executeForRawResultAsync()' in the expo-sqlite/next API. It returns array-based raw values instead of key-value based row values, providing more flexibility in data retrieval.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSQLiteStatement.executeForRawResultAsync()\n```\n\n----------------------------------------\n\nTITLE: Importing LottieView Component in JavaScript\nDESCRIPTION: This JavaScript snippet shows the standard way to import the `LottieView` component, which is the primary component used for rendering Lottie animations, from the 'lottie-react-native' library. This import is necessary before using the component in your React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/lottie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport LottieView from 'lottie-react-native';\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Device Module\nDESCRIPTION: Shows how to import the expo-device module to access device information in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/device.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Device from 'expo-device';\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Fingerprint in TypeScript\nDESCRIPTION: Demonstrates how to import the @expo/fingerprint library and create a fingerprint from a project root using TypeScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Fingerprint from '@expo/fingerprint';\n\nawait Fingerprint.createFingerprintAsync('/projectRoot');\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statements\nDESCRIPTION: Import statements for React components used in the subscription documentation page, including icons and custom UI components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/billing/plans.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CreditCard02Icon } from '@expo/styleguide-icons/outline/CreditCard02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pod Dependencies for expo-symbols\nDESCRIPTION: Runs `pod install` in the iOS project directory using `npx pod-install`. This command is necessary after installing the npm package in bare React Native projects to link the native iOS code for `expo-symbols`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-symbols/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Runtime in Babel Preset Expo\nDESCRIPTION: Example of how to configure the jsxRuntime option in babel-preset-expo. This option determines whether to use the classic or automatic JSX transform, affecting how React is imported in JSX files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    jsxRuntime: 'classic',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Node override in ESLint config\nDESCRIPTION: This code adds a Node override in the ESLint config for root configuration files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add Node override in ESLint config for root configuration files.\n```\n\n----------------------------------------\n\nTITLE: SDK Version Beta Flag Update\nDESCRIPTION: Command to update the versions endpoint with beta flag for new SDK version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\net update-versions-endpoint -s ${SDK_MAJOR_VERSION}.0.0 -k 'beta' -v 'true'\net promote-versions-to-prod\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Checkbox Component\nDESCRIPTION: Shows the basic import statement for the expo-checkbox component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Checkbox from 'expo-checkbox';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Navigation Bar API - JavaScript\nDESCRIPTION: This snippet demonstrates how to import all exported members from the expo-navigation-bar package as the NavigationBar object in a JavaScript project. The expo-navigation-bar package is a dependency and should be installed in the project prior to importing. The NavigationBar object provides methods to interact with and customize the native navigation bar on Android devices within Expo-managed React Native apps. This import is typically placed at the top of the file and is a prerequisite for any further use of the NavigationBar API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/navigation-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Text Component\nDESCRIPTION: This snippet shows how to import a specialized text component (RawH3) from a local UI components directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/images.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Exporting Expo Project Assets\nDESCRIPTION: Command to list all named assets included in an Expo update bundle using the expo export command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/debug-advanced.mdx#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ npx expo export\n```\n\n----------------------------------------\n\nTITLE: Setting Up Expo CLI Debugging Alias\nDESCRIPTION: Shell configuration for creating a debug-enabled alias of Expo CLI that allows for Node.js inspection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nalias expo-inspect=\"node --inspect /path/to/expo/packages/@expo/cli/build/bin/cli\"\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationChannelGroupInput Interface for Android in TypeScript\nDESCRIPTION: Defines an interface for creating or updating Android notification channel groups. This provides a simplified input structure for configuring the basic properties of a channel group.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationChannelGroupInput {\n  name: string | null;\n  description?: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SymbolView from expo-symbols in JavaScript\nDESCRIPTION: This snippet shows the standard JavaScript import statement required to bring the `SymbolView` component into scope from the `expo-symbols` package. This makes the component available for use within a React Native project targeting iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/symbols.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { SymbolView } from 'expo-symbols';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Simulator Build in eas.json\nDESCRIPTION: This JSON configuration in eas.json sets up the development build profile for iOS simulator compatibility. It enables the development client and sets the distribution to internal.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining Combined Effect of New Permissions Request\nDESCRIPTION: Clarifies that using `Permissions.askAsync(Permissions.NOTIFICATIONS)` has the same combined effect as calling `Notifications.getPermissionsAsync()` (or `Notifications.requestPermissionsAsync()`) followed by `Notifications.getDevicePushTokenAsync()`. It requests user-facing permissions and attempts device registration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nNotifications.getPermissionsAsync()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequestPermissionsAsync\n```\n\nLANGUAGE: javascript\nCODE:\n```\nNotifications.getDevicePushTokenAsync()\n```\n\n----------------------------------------\n\nTITLE: Importing BlurView from expo-blur\nDESCRIPTION: Shows how to import the BlurView component from the expo-blur package for use in React Native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Sample Project Hash Output in JSON\nDESCRIPTION: Shows an example output of the project hash generation process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nbf8a3b08935f056270b1688333b02f1ef5fa25bf\n```\n\n----------------------------------------\n\nTITLE: Rendering QR Code for Expo Go App Store Link\nDESCRIPTION: Creates a QR code component that links to the Expo Go app on the iOS App Store. The component is styled with Tailwind CSS classes and generates a QR code with a size of 228 pixels.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalExpoGo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"p-4 rounded-lg border border-default inline-block bg-palette-white\">\n  <QRCodeReact value=\"https://itunes.apple.com/app/apple-store/id982107779\" size={228} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Quoting Apple App Store Guidelines for Interpreted Code\nDESCRIPTION: This snippet outlines Apple's guidelines for using interpreted code in App Store applications, specifying conditions under which such code can be downloaded and executed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n...Interpreted code may be downloaded to an Application but only so long as such code:\n(a) does not change the primary purpose of the Application by providing features\n    or functionality that are inconsistent with the intended and advertised purpose\n    of the Application as submitted to the App Store,\n(b) does not create a store or storefront for other code or applications, and\n(c) does not bypass signing, sandbox, or other security features of the OS.\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-screen-capture for iOS\nDESCRIPTION: Command to install required iOS dependencies using pod-install\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-screen-capture/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Installing expo-camera package via NPM\nDESCRIPTION: Command to install the expo-camera package using npx expo CLI\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-camera/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-camera\n```\n\n----------------------------------------\n\nTITLE: Custom Babel Transformer Configuration\nDESCRIPTION: Example of extending Expo's default Babel transformer for custom file processing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst upstreamTransformer = require('@expo/metro-config/babel-transformer');\n\nmodule.exports.transform = async ({ src, filename, options }) => {\n  if (filename.endsWith('.svg')) {\n    src = '...';\n  }\n  return upstreamTransformer.transform({ src, filename, options });\n};\n```\n\n----------------------------------------\n\nTITLE: Running Development Build with EAS CLI\nDESCRIPTION: Command to download and install a development build using EAS CLI. The user must be signed in to the associated Expo account.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/share-with-your-team.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:run --profile development\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in React Native Expo Project\nDESCRIPTION: This code snippet imports the RawH3 component from the Text components file in the UI folder. It's likely used for rendering heading text in the Bluesky Social Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/package-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Exporting Expo App with Source Maps for Analysis\nDESCRIPTION: Commands to export an Expo app with source maps for different platforms, including an option to disable bytecode for native apps using Hermes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo export --source-maps --platform web\n\n# Native apps using Hermes can disable bytecode for analyzing the JavaScript bundle.\n$ npx expo export --source-maps --platform ios --no-bytecode\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components in JSX\nDESCRIPTION: Import statements for various icons and components used in the documentation page, including styleguide icons and UI components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { VideoRecorderIcon } from '@expo/styleguide-icons/outline/VideoRecorderIcon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { Collapsible } from '~/ui/components/Collapsible';\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\n```\n\n----------------------------------------\n\nTITLE: Rendering Live Streams Grid in JSX\nDESCRIPTION: This JSX snippet renders a grid of live stream recordings using the TalkGridWrapper and TalkGridCell components. It maps over the LIVE_STREAMS array to create individual cells for each stream.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/additional-resources/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<TalkGridWrapper>\n  {LIVE_STREAMS.map(stream => (\n    <TalkGridCell key={stream.videoId} {...stream} />\n  ))}\n</TalkGridWrapper>\n```\n\n----------------------------------------\n\nTITLE: Exporting Static Web Build (Shell)\nDESCRIPTION: The `expo export:web` command generates a static production-ready web build of the application, suitable for deployment to static hosting providers. It replaces the older `expo build:web` command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexpo export:web\n```\n\n----------------------------------------\n\nTITLE: Applying Async suffix to Promise-returning functions in JavaScript\nDESCRIPTION: Shows how to apply the 'Async' naming convention to functions that return Promises even when not using the async keyword, maintaining consistent naming for asynchronous operations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT\nfunction readSettingsFileAsync(): Promise<string> {\n  return Promise((resolve, reject) => {\n    fs.readFile('settings.txt', 'utf8', ...);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Updates Module in JavaScript\nDESCRIPTION: Demonstrates how to import the expo-updates module in a JavaScript application to access update-related functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Updates from 'expo-updates';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android MainActivity for Expo Root Component (Java) - diff\nDESCRIPTION: This code diff demonstrates updating the getMainComponentName method in MainActivity.java to set the main application entry point for Expo-managed projects. This change is only necessary if Expo Prebuild is not used. The function should return \\\"main\\\", ensuring the React Native runtime knows which component is the root of the app. No dependencies are required beyond the React Native Android project structure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n@Override\\nprotected String getMainComponentName() {\\n+    return \\\"main\\\";\\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Jest Test Runner for Expo SDK\nDESCRIPTION: Command to start the Jest test runner, which watches for file changes and runs affected tests automatically. This is a key part of the development workflow for quick feedback on code changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Package\nDESCRIPTION: Install the expo package using npm to enable the prebuild command and specify the prebuild template.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install expo\n```\n\n----------------------------------------\n\nTITLE: Formatting URL Pattern for Manual Update Loading in Expo Development Builds\nDESCRIPTION: Shows the text pattern for manually entering an update URL in a development build, including the project ID and channel name parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://u.expo.dev/[your-project-id]?channel-name=[channel-name]\n\n# Example\nhttps://u.expo.dev/F767ADF57-B487-4D8F-9522-85549C39F43F?channel-name=main\n```\n\n----------------------------------------\n\nTITLE: Adding Sentry CLI as Trusted Dependency\nDESCRIPTION: This JSON snippet shows how to add @sentry/cli as a trusted dependency in package.json. This is necessary when using Sentry with Bun to allow the postinstall script to run.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-bun.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"trustedDependencies\": [\"@sentry/cli\"]\n```\n\n----------------------------------------\n\nTITLE: Importing APIInstallSection Component in React\nDESCRIPTION: Imports the APIInstallSection component from the plugins directory, used for displaying installation instructions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/async-storage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Checking for Multiple React Native Versions in a Monorepo\nDESCRIPTION: This bash snippet shows commands for different package managers to check for multiple React Native versions in a monorepo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Bun does not support `bun why` yet, but you can use `yarn why`\n$ bun install --yarn && yarn why react-native\n\n# npm supports the `npm explain` command, aliased to `npm why`\n# https://docs.npmjs.com/cli/v10/commands/npm-explain\n$ npm why react-native\n\n# pnpm only iterates the full monorepo with the `--recursive` flag\n# https://pnpm.io/cli/why\n$ pnpm why --recursive react-native\n\n# yarn supports the `yarn why` command\n# https://classic.yarnpkg.com/en/docs/cli/why\n$ yarn why react-native\n```\n\n----------------------------------------\n\nTITLE: Using Expo Environment Info CLI\nDESCRIPTION: Command line usage example showing how to run the expo-env-info tool with optional path and options parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-env-info/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Usage\nnpx expo-env-info [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Installing JDK 17 on macOS using Homebrew\nDESCRIPTION: Commands to install JDK 17 (Zulu distribution) on macOS using Homebrew. This is recommended for Android development in the Expo SDK.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap homebrew/cask-versions\nbrew install --cask zulu@17\n```\n\n----------------------------------------\n\nTITLE: Installing Expo CLI Package\nDESCRIPTION: Command to install the Expo CLI package using yarn package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add expo\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Simulator Profile in eas.json\nDESCRIPTION: JSON configuration for eas.json that creates a specific development-simulator profile for iOS with simulator flag enabled for development builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development-simulator\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"simulator\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RSC Component Test Example\nDESCRIPTION: Example test case for React Server Component using LinearGradient component with custom matchers\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/// <reference types=\"jest-expo/rsc/expect\" />\n\nimport { LinearGradient } from 'expo-linear-gradient';\n\nit(`renders to RSC`, async () => {\n  const jsx = (\n    <LinearGradient\n      colors={['cyan', '#ff00ff', 'rgba(0,0,0,0)', 'rgba(0,255,255,0.5)']}\n      testID=\"gradient\"\n    />\n  );\n\n  await expect(jsx).toMatchFlight(`1:I[\"src/LinearGradient.tsx\",[],\"LinearGradient\"]\n0:[\"$\",\"$L1\",null,{\"colors\":[\"cyan\",\"#ff00ff\",\"rgba(0,0,0,0)\",\"rgba(0,255,255,0.5)\"],\"testID\":\"gradient\"},null]`);\n});\n```\n\n----------------------------------------\n\nTITLE: Android High Sampling Rate Permission\nDESCRIPTION: Android manifest permission required for sensor updates faster than 200ms on Android 12+\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sensors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\"/>\n```\n\n----------------------------------------\n\nTITLE: Opening iOS App Store for Writing Reviews (TypeScript)\nDESCRIPTION: This snippet shows how to redirect users to the 'Write a Review' screen for an app in the iOS App Store using Linking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/storereview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst itunesItemId = 982107779;\n// Open the iOS App Store in the browser -> redirects to App Store on iOS\nLinking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);\n// Open the iOS App Store directly\nLinking.openURL(\n  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`\n);\n```\n\n----------------------------------------\n\nTITLE: Japanese Localization Strings\nDESCRIPTION: Example of Japanese localization strings for app metadata.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/localization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CFBundleDisplayName\": \"こんにちは\",\n  \"NSContactsUsageDescription\": \"日本語のこれらの言葉\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Android SDK on macOS\nDESCRIPTION: This snippet shows how to set environment variables for the Android SDK location and add platform tools to the PATH on macOS. These commands should be added to the user's shell configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidStudioInstructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export ANDROID_HOME=$HOME/Library/Android/sdk\n$ export PATH=$PATH:$ANDROID_HOME/emulator\n$ export PATH=$PATH:$ANDROID_HOME/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring deployment scripts for Firebase Hosting in package.json\nDESCRIPTION: This snippet shows how to add predeploy and deploy-hosting scripts to the package.json file for deploying an Expo web app to Firebase Hosting. The predeploy script exports the web build, while the deploy-hosting script runs the predeploy script and then deploys to Firebase.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/publishing-websites.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  /* @hide ... */ /* @end */\n  \"predeploy\": \"expo export -p web\",\n  \"deploy-hosting\": \"npm run predeploy && firebase deploy --only hosting\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Enzyme plugin\nDESCRIPTION: This code removes the Enzyme plugin as it does not work with React 18.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remove Enzyme plugin - it does not work with React 18. Not considered a breaking change because the Enzyme plugin has never worked with React 18 and so is already broken.\n```\n\n----------------------------------------\n\nTITLE: Importing H1 Component from @expo/html-elements in TypeScript\nDESCRIPTION: Demonstrates how to import a specific component, in this case, the `H1` component (representing an HTML `<h1>` tag), from the `@expo/html-elements` package within a TypeScript/TSX file. This allows developers to use the semantic `H1` element in their React component structure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H1 } from '@expo/html-elements';\n```\n\n----------------------------------------\n\nTITLE: Android Debug Variant Build\nDESCRIPTION: Command to build Android app with specific debug variant selection.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:android --variant debug\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation Command\nDESCRIPTION: Shell commands for generating API documentation data using the et tool.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\net generate-docs-api-data --packageName expo-constants\n\n#### NOTE ####\n# To update a specific SDK reference, run the command by mentioning the SDK version\net gdad -p expo-constants --sdk 51\n\n# For more information about et command, run: et gdad --help\n```\n\n----------------------------------------\n\nTITLE: Installing AsyncStorage Component Usage\nDESCRIPTION: React component implementation showing how to include the APIInstallSection component with a link to installation documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/async-storage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIInstallSection href=\"https://react-native-async-storage.github.io/async-storage/docs/install#android--ios\" />\n```\n\n----------------------------------------\n\nTITLE: Logging into EAS\nDESCRIPTION: Command to log in to an Expo account through the EAS CLI. Authentication is required to use EAS services like build and submit.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Push Tickets Error Response Format\nDESCRIPTION: Example of a push tickets response containing both successful and failed notification attempts\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"status\": \"error\",\n      \"message\": \"\\\"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\\\" is not a registered push notification recipient\",\n      \"details\": {\n        \"error\": \"DeviceNotRegistered\"\n      }\n    },\n    {\n      \"status\": \"ok\",\n      \"id\": \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Android Flavor Variants\nDESCRIPTION: Android build.gradle configuration to restrict specific flavors to specific build types.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n    /* @hide ... */ /* @end */\n    variantFilter { variant ->\n        def validVariants = [\n                [\"production\", \"release\"],\n                [\"development\", \"debug\"],\n        ]\n        def buildTypeName = variant.buildType*.name\n        def flavorName = variant.flavors*.name\n\n        def isValid = validVariants.any { flavorName.contains(it[0]) && buildTypeName.contains(it[1]) }\n        if (!isValid) {\n            setIgnore(true)\n        }\n    }\n    /* @hide ... */ /* @end */\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Development Script to package.json\nDESCRIPTION: Script in package.json to start the development server with the APP_VARIANT environment variable set.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"APP_VARIANT=development npx expo start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default String Values in XML for Expo Custom Module\nDESCRIPTION: This XML code defines default string values in the strings.xml file for the Expo custom module. These values can be overwritten by users in their local strings.xml file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"expo_custom_value\" translatable=\"false\"></string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Customizing Fingerprint Ignore Paths\nDESCRIPTION: Demonstrates how to use a .fingerprintignore file to customize which files and directories are included or excluded from fingerprinting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n# Ignore the entire /app/ios folder\n/app/ios/**/*\n\n# But still keep /app/ios/Podfile and /app/ios/Podfile.lock\n!/app/ios/Podfile\n!/app/ios/Podfile.lock\n```\n\n----------------------------------------\n\nTITLE: Removing watchPlugins from sub-projects\nDESCRIPTION: This code removes watchPlugins from sub-projects when using the multi-project runner.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remove watchPlugins from sub-projects when using multi-project runner.\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-document-picker plugin in app.json\nDESCRIPTION: This JSON configuration enables iCloud storage usage and sets the bundle identifier for iOS. It also includes the expo-document-picker plugin.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-document-picker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"usesIcloudStorage\": true,\n    \"bundleIdentifier\": \"com.yourname.yourapp\"\n  },\n  \"plugins\": [\"expo-document-picker\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding isDevelopmentBuild Function for Runtime Checks\nDESCRIPTION: Introduces a new function `isDevelopmentBuild` to allow the application code to determine at runtime if it is currently running within a development build created with expo-dev-client. This enables conditional logic based on the build environment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nisDevelopmentBuild\n```\n\n----------------------------------------\n\nTITLE: Creating Test Project for Development Client\nDESCRIPTION: Generates a test project for development client end-to-end testing using the expo-test-runner tool.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn expo-test-runner create-project -a dev-client-e2e --path <path where the project will be created>\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer from expo-sensors\nDESCRIPTION: The basic import statement to use the Accelerometer module from the expo-sensors package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Styleguide Icons in JSX\nDESCRIPTION: Import statements for various Expo styleguide icons used in the documentation interface.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BuildIcon } from '@expo/styleguide-icons/custom/BuildIcon';\nimport { EasMetadataIcon } from '@expo/styleguide-icons/custom/EasMetadataIcon';\nimport { EasSubmitIcon } from '@expo/styleguide-icons/custom/EasSubmitIcon';\nimport { DataIcon } from '@expo/styleguide-icons/outline/DataIcon';\nimport { LayersTwo02Icon } from '@expo/styleguide-icons/outline/LayersTwo02Icon';\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component in JSX\nDESCRIPTION: This snippet shows how to use the imported RawH3 component in a JSX structure, likely within a React component's render method.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/scripts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>scripts</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Native Directories in Git\nDESCRIPTION: Add Android and iOS directories to .gitignore to prevent committing generated native code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/prebuild.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n+ /android\n+ /ios\n```\n\n----------------------------------------\n\nTITLE: Rendering Podcasts Grid in JSX\nDESCRIPTION: This JSX snippet renders a grid of podcasts using the TalkGridWrapper and TalkGridCell components. It maps over the PODCASTS array to create individual cells for each podcast, using either videoId or event as the key.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/additional-resources/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<TalkGridWrapper>\n  {PODCASTS.map(podcast => (\n    <TalkGridCell key={podcast.videoId ?? podcast.event} {...podcast} />\n  ))}\n</TalkGridWrapper>\n```\n\n----------------------------------------\n\nTITLE: Formatting package description with HTML\nDESCRIPTION: Uses HTML paragraph tags with center alignment to display the package description as a centered text.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/plist/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">A macOS Plist parser/builder for Node.js and browsers.</p>\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarTriggerInput Interface for iOS in TypeScript\nDESCRIPTION: Defines an iOS-specific interface for calendar-based notification triggers. This corresponds to native UNCalendarNotificationTrigger and allows scheduling based on various calendar components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CalendarTriggerInput {\n  channelId?: string;\n  repeats?: boolean;\n  timezone?: string;\n\n  year?: number;\n  month?: number;\n  weekday?: number;\n  weekOfMonth?: number;\n  weekOfYear?: number;\n  weekdayOrdinal?: number;\n  day?: number;\n\n  hour?: number;\n  minute?: number;\n  second?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Native Component Test with Jest\nDESCRIPTION: A simple Jest test for an App component that checks if the component has exactly one child. This test uses react-test-renderer to create a virtual representation of the component for testing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport renderer from 'react-test-renderer';\n\nimport App from './App';\n\ndescribe('<App />', () => {\n  it('has 1 child', () => {\n    const tree = renderer.create(<App />).toJSON();\n    expect(tree.children.length).toBe(1);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Legacy Import Compatibility with Deprecation Warning\nDESCRIPTION: Illustrates how to maintain backward compatibility with the old import syntax while adding a deprecation warning.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FileSystem from './FileSystem';\nexport * from './FileSystem';\n\nlet wasImportWarningShown = false;\n// @ts-ignore: Temporarily define an export named \"FileSystem\" for legacy compatibility\nObject.defineProperty(exports, 'FileSystem', {\n  get() {\n    if (!wasImportWarningShown) {\n      console.warn(\n        `The syntax \"import { FileSystem } from 'expo-file-system'\" is deprecated. Use \"import * as FileSystem from 'expo-file-system'\" or import named exports instead. Support for the old syntax will be removed in SDK 34.`\n      );\n      wasImportWarningShown = true;\n    }\n    return FileSystem;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Key Changes in Expo Repository\nDESCRIPTION: Major version updates, including support for new React Native versions, platform support changes, and significant API modifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Drop legacy `hashAssetFiles` (SDK 32) in favor of `expo-assets` version\n- Dropped support for Android SDK 21 and 22\n- Add support for React static rehydration on web\n- Added support for React Native 0.73\n- Drop `Logs` module export\n- Added support for Apple tvOS\n```\n\n----------------------------------------\n\nTITLE: Importing KeepAwake Module in JavaScript\nDESCRIPTION: This snippet shows how to import the KeepAwake module from the expo-keep-awake package. This import statement is typically used at the beginning of a file to access the KeepAwake functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n```\n\n----------------------------------------\n\nTITLE: Identifying JavaScript Build Errors in Metro\nDESCRIPTION: This snippet shows how Metro errors appear in build logs when there's a module resolution problem. The error indicates that the build system cannot find a specific module that's being imported in the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/troubleshooting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n❌ Metro encountered an error:\nUnable to resolve module ./src/Routes from /Users/expo/workingdir/build/App.js\n```\n\n----------------------------------------\n\nTITLE: Updating React Native Version Tags\nDESCRIPTION: Commands for tagging the React Native version for a specific Expo SDK release. This involves creating a Git tag with the SDK version and pushing it to the remote repository.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 'sdk-XX.X.X' -m 'React Native X.Y.Z for Expo SDKXX'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Installing expo-sharing Package via NPM\nDESCRIPTION: Command to install the expo-sharing package using npx expo install in a React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sharing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-sharing\n```\n\n----------------------------------------\n\nTITLE: Android toLowerCase to lowercase Function Change\nDESCRIPTION: Change from deprecated toLowerCase() to lowercase() function call in Android implementation\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Old\nstring.toLowerCase()\n\n// New\nstring.lowercase()\n```\n\n----------------------------------------\n\nTITLE: Installing expo-gl in bare React Native projects\nDESCRIPTION: Command to install the expo-gl package using npx and expo CLI in a bare React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-gl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-gl\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format - Markdown\nDESCRIPTION: Standard changelog format showing version numbers, categories of changes (Breaking changes, New features, Bug fixes, Others) and associated pull request links.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sqlite/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 14.0.6 - 2024-07-31\n\n### 🐛 Bug fixes\n\n- Fixed the \"disk I/O error\" on older Android devices. ([#30718](https://github.com/expo/expo/pull/30718) by [@kudo](https://github.com/kudo))\n```\n\n----------------------------------------\n\nTITLE: Releasing iOS App with Fastlane\nDESCRIPTION: Command to execute the release lane for iOS, which prepares and submits the app for release, possibly to the App Store.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios release\n```\n\n----------------------------------------\n\nTITLE: Using React Native Text Component in JSX\nDESCRIPTION: Demonstrates the usage of the imported RawH3 component in JSX to display a heading for an image section.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/images.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>Images</RawH3>\n```\n\n----------------------------------------\n\nTITLE: React JSX Component Import Statements\nDESCRIPTION: Import statements for various icons and components used in the documentation page layout\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/submit/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AppleAppStoreIcon } from '@expo/styleguide-icons/custom/AppleAppStoreIcon';\nimport { GoogleAppStoreIcon } from '@expo/styleguide-icons/custom/GoogleAppStoreIcon';\nimport { Settings01Icon } from '@expo/styleguide-icons/outline/Settings01Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { CODE } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Improving getAllPresentedNotificationsAsync Reliability on Android\nDESCRIPTION: Fixed an issue where `getAllPresentedNotificationsAsync()` might return no notifications if it failed to reconstruct the original request from marshaled data. Now, it will attempt to naively reconstruct notifications directly from the Android notification object, improving reliability.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngetAllPresentedNotificationsAsync()\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Headers for Asset Requests\nDESCRIPTION: Example HTTP headers for asset requests in Expo Updates. Shows how to specify accepted content types and compression formats that the client can handle.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\naccept: image/jpeg, */*\naccept-encoding: br, gzip\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Alternative\nDESCRIPTION: Alternative deep dynamic route pattern that catches all unmatched paths, but is processed before API routes unlike +not-found.tsx.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/not-found.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[...wild].tsx\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Sharing Module\nDESCRIPTION: Basic import statement for using the expo-sharing library in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Simulator Development Build Steps in YAML\nDESCRIPTION: Outlines the steps for building an iOS simulator version, located in `.eas/build/development-build-ios.yml`. It includes standard EAS functions and adds a custom `run` step to install CocoaPods dependencies within the `ios` directory using `pod install`. This file is referenced by `eas.json`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Simple simulator iOS build\n  steps:\n    - eas/checkout\n\n    - eas/install_node_modules\n\n    - eas/prebuild\n\n    - run:\n        name: Install pods\n        working_directory: ./ios\n        command: pod install\n\n    - eas/generate_gymfile_from_template\n\n    - eas/run_fastlane\n\n    - eas/find_and_upload_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Adding File System Permissions in Android Manifest\nDESCRIPTION: This XML snippet shows the necessary permissions that are automatically added to the Android manifest for the expo-file-system module. It includes permissions for reading and writing external storage, as well as internet access.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-file-system/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dynamic Routes with Link Component in React Native\nDESCRIPTION: This code snippet demonstrates how to use the Link component to navigate to dynamic routes in a React Native app using Expo Router. It shows both static and dynamic ways of providing query parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/dynamic-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n      <Link href=\"/details/1\">View first user details</Link>\n      <Link href=\"/details/2\">View second user details</Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Home</Text>\n      <Link\n        href={{\n          pathname: '/details/[id]',\n          params: { id: 'bacon' },\n        }}>\n        View user details\n      </Link>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global npm Registry for Android Builds\nDESCRIPTION: Global npm configuration in ~/.npmrc for Android builds. This setting points to a custom registry server used for dependency resolution during the build process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nregistry=http://10.4.0.19:4873\n```\n\n----------------------------------------\n\nTITLE: Rendering Bold Text in React Native TextInput\nDESCRIPTION: This example shows how to render bold text within a TextInput component. It uses nested Text components with different styles to achieve a mix of bold and regular text.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/editing-richtext.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TextInput>\n  <Text>\n    {/* The following will render a bold text in this format: **aa**aa */}\n    <Text style={{ fontWeight: 900 }}>aa</Text>aa\n  </Text>\n</TextInput>\n```\n\n----------------------------------------\n\nTITLE: Listing Environment Variables on Windows\nDESCRIPTION: This PowerShell command lists all user environment variables on Windows, which can be used to verify if the ANDROID_HOME variable has been correctly set.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidStudioInstructions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ Get-ChildItem -Path Env: \n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX\nDESCRIPTION: This code snippet imports custom React components used in the document for displaying content and creating tabbed interfaces.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/billing/manage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Tabs, Tab } from '~/ui/components/Tabs';\n```\n\n----------------------------------------\n\nTITLE: Inspecting Introspected App Config in Expo\nDESCRIPTION: This command shows how to view the introspected configuration of an Expo app, including the iOS entitlements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/ios-capabilities.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo config --type introspect\n```\n\n----------------------------------------\n\nTITLE: Migrating Android to Expo Modules API in Kotlin\nDESCRIPTION: Migrated Android implementation to use the Expo Modules API\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-brightness/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Migrated to Expo Modules API\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Package Name Example\nDESCRIPTION: Example of how the Android package name should be formatted in the app configuration. This is required for Facebook project setup and Google Play Store submission.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/facebook-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncom.myapp.example.MainActivity\n```\n\n----------------------------------------\n\nTITLE: Server-Only Module Declaration\nDESCRIPTION: Example of using server-only module to restrict module usage to server environment\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'server-only';\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Maestro UI Testing with EAS - Expo (YAML)\nDESCRIPTION: This YAML workflow configures the installation of Maestro, a mobile UI testing tool, in the Expo EAS build process using the eas/install_maestro step, with an optional maestro_version parameter. The example also shows how to run Maestro tests and upload their artifacts using eas/upload_artifact. Requires valid Maestro configuration; if maestro_version is omitted, latest is installed. Output includes Maestro test artifacts uploaded using a specified path.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\\n  name: Build and test\\n  steps:\\n    - eas/build\\n    # ... simulator/emulator setup\\n    # @info #\\n    - eas/install_maestro:\\n        # @end #\\n        inputs:\\n          # @info If you need to, you can provide the Maestro version to install. #\\n          maestro_version: 1.35.0\\n          # @end #\\n    - run:\\n        command: maestro test flows/signin.yml\\n    - eas/upload_artifact:\\n        name: Upload Maestro artifacts\\n        inputs:\\n          type: build-artifact\\n          path: ${ eas.env.HOME }/.maestro/tests\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component in JSX\nDESCRIPTION: This example demonstrates how to use the RawH3 component in a JSX context to create a heading with custom font styling. The component wraps text content that explains the custom fonts feature.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/fonts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RawH3>Custom fonts</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Resetting Expo Project Structure\nDESCRIPTION: Command to reset an Expo project by moving existing files from app directory to app-example and creating a new app directory with index.tsx\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/get-started/next-steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run reset-project\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in TypeScript/React\nDESCRIPTION: Imports the RawH3 component from the Text components directory, likely used for rendering headings in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Server with Tunnel\nDESCRIPTION: Command to start the Expo development server with tunneling enabled for remote access.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npx expo start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn 2+ for Expo projects\nDESCRIPTION: YAML configuration for Yarn 2+ to use node-modules linker, which is required for React Native compatibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/create-expo.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnodeLinker: node-modules\n```\n\n----------------------------------------\n\nTITLE: Snack Example Component Usage\nDESCRIPTION: Example of using the SnackInline component for embedding runnable code examples.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_11\n\nLANGUAGE: mdx\nCODE:\n```\nimport SnackInline from '~/components/plugins/SnackInline';\n\n<SnackInline label='My Example Label' dependencies={['array of', 'packages', 'this Snack relies on']}>\n    ```js\n    // All your code goes in here\n\n    // You can use:\n    /* @info Some text goes here */\n    const myVariable = SomeCodeThatDoesStuff();\n    /* @end */\n    // to create hoverable-text, which reveals the text inside of `@info` onHover.\n\n    // You can use:\n    /* @hide Content that is still shown, like a preview. */\n    Everything in here is hidden in the example Snack until\n    you open it in snack.expo.dev\n    /* @end */\n    // to shorten the length of code block shown in our docs.\n    // Hidden code will still be present when opening in Snack or using \"Copy\" action.\n    ```\n</SnackInline>\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client Package\nDESCRIPTION: Command to install the expo-dev-client library which is required for creating a development build. This library offers a robust development environment for React Native apps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Converting app.json to JavaScript Configuration\nDESCRIPTION: Initial conversion of app.json to app.config.js to enable programmatic configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  name: 'MyApp',\n  slug: 'my-app',\n  ios: {\n    bundleIdentifier: 'com.myapp',\n  },\n  android: {\n    package: 'com.myapp',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Server Handler in TypeScript\nDESCRIPTION: Server entry file setup for Vercel that handles all incoming requests. Points to the dist/server build output directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { createRequestHandler } = require('@expo/server/adapter/vercel');\n\nmodule.exports = createRequestHandler({\n  build: require('path').join(__dirname, '../dist/server'),\n});\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Configuration Reference\nDESCRIPTION: XML attribute that needs to be specified in AndroidManifest.xml to enable Auto Backup for SharedPreferences on Android 6+.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-eas-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nandroid:allowBackup=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Autolinking Search Paths in package.json\nDESCRIPTION: This snippet demonstrates how to configure custom search paths for Expo Autolinking in the package.json file. It allows specifying additional directories where the autolinking script should look for Expo modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/autolinking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"autolinking\": {\n      \"searchPaths\": [\"../../packages\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Terminal Commands for Project Initialization\nDESCRIPTION: Terminal commands to initialize a new Expo project and navigate to the project directory. This creates a new app using the default Expo template for testing purposes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/e2e-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a new project\n$ npx create-expo-app@latest eas-tests-example\n\n# Move into the project directory\n$ cd eas-tests-example\n```\n\n----------------------------------------\n\nTITLE: Aligning Android Action Button Title Behavior with iOS\nDESCRIPTION: Changed Android notification behavior to use the `buttonTitle` property for the action button title, instead of `submitButtonTitle`. This aligns the behavior with iOS, providing consistency across platforms when defining interactive notification actions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsubmitButtonTitle\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nbuttonTitle\n```\n\n----------------------------------------\n\nTITLE: Process Search Command for Expo and React Native\nDESCRIPTION: Command to search for running Expo CLI or React Native community CLI processes in terminal.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/react-native-version-mismatch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nps -A | grep \"expo\\|react-native\"\n```\n\n----------------------------------------\n\nTITLE: React Native WebView Component\nDESCRIPTION: TypeScript implementation of the WebView React component that bridges to native code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewProps } from 'react-native';\nimport { requireNativeViewManager } from 'expo-modules-core';\nimport * as React from 'react';\n\nexport type Props = ViewProps;\n\nconst NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');\n\nexport default function ExpoWebView(props: Props) {\n  return <NativeView {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-calendar in app.json\nDESCRIPTION: JSON configuration for expo-calendar plugin, demonstrating how to set calendar permission messages in the app configuration file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-calendar\",\n        {\n          \"calendarPermission\": \"The app needs to access your calendar.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing build history with EAS CLI\nDESCRIPTION: Command to list previous builds initiated with EAS Build. This allows you to monitor the progress of ongoing builds or access details of completed builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:list\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Analysis Script\nDESCRIPTION: Command to run the bundle analysis script for web platform using the previously configured npm script.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/analyzing-bundles.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run analyze:web\n```\n\n----------------------------------------\n\nTITLE: Importing DocumentPicker in JavaScript\nDESCRIPTION: Basic import statement for using the expo-document-picker library in a JavaScript/React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/document-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\n```\n\n----------------------------------------\n\nTITLE: Module Aliasing Configuration\nDESCRIPTION: Shows how to implement module aliasing in Metro to redirect imports from one module to another.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/customizing-metro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconst ALIASES = {\n  'old-module': 'new-module',\n};\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  // Ensure you call the default resolver.\n  return context.resolveRequest(\n    context,\n    // Use an alias if one exists.\n    ALIASES[moduleName] ?? moduleName,\n    platform\n  );\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Properties for Android SDK and NDK Paths\nDESCRIPTION: This code snippet shows the content of the 'local.properties' file, which specifies the paths to the Android SDK and NDK on the developer's machine. These paths are crucial for the build process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nndk.dir=/Users/{username}/Library/Android/sdk/ndk-bundle\nsdk.dir=/Users/{username}/Library/Android/sdk\n```\n\n----------------------------------------\n\nTITLE: Using create-expo with different package managers\nDESCRIPTION: Shows various commands to initialize a new Expo project using different package managers including npx, bun, pnpm, and yarn. Also includes how to display help information.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/create-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Usage for bun, npm, pnpm, and yarn\nnpx create-expo\nbun create expo\npnpm create expo\nyarn create expo\n\n# Output help information with all available options\nnpx create-expo --help\n```\n\n----------------------------------------\n\nTITLE: Importing BoxLink Component in JSX\nDESCRIPTION: Import statement for the BoxLink component used to create navigation links in the documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image-picker in bare React Native projects\nDESCRIPTION: Command to install the expo-image-picker package using npm in a bare React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-picker\n```\n\n----------------------------------------\n\nTITLE: Defining Events in Swift/Kotlin\nDESCRIPTION: Defines event names that the module can send to JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nEvents(\"onCameraReady\", \"onPictureSaved\", \"onBarCodeScanned\")\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nEvents(\"onCameraReady\", \"onPictureSaved\", \"onBarCodeScanned\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in package.json for Expo Projects\nDESCRIPTION: A package.json configuration that sets up Jest testing with the jest-expo preset and appropriate transformIgnorePatterns for React Native dependencies. This configuration enables unit testing in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    /* @hide ... */ /* @end */\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"preset\": \"jest-expo\",\n    \"transformIgnorePatterns\": [\n      \"node_modules/(?!((jest-)?react-native|@react-native(-community)?)|expo(nent)?|@expo(nent)?/.*|@expo-google-fonts/.*|react-navigation|@react-navigation/.*|@unimodules/.*|unimodules|sentry-expo|native-base|react-native-svg)\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for SDK 23 Upgrade\nDESCRIPTION: JSON configuration changes required in package.json when upgrading to Expo SDK 23. Updates React Native, Expo, and React to their compatible versions for SDK 23.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-23.0.0.tar.gz\",\n  \"expo\": \"^23.0.0\",\n  \"react\": \"16.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-barcode-scanner\nDESCRIPTION: XML snippet to add the CAMERA permission to the Android manifest file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-barcode-scanner/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components for Bluesky Social in JSX\nDESCRIPTION: This snippet imports custom UI components used in the setup guide, including ContentSpotlight, Terminal, and Step components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_xcodeInstructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Terminal } from '~/ui/components/Snippet';\nimport { Step } from '~/ui/components/Step';\n```\n\n----------------------------------------\n\nTITLE: Config Plugin Entry Point\nDESCRIPTION: Basic Node.js module export for the config plugin entry point file (app.plugin.js).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('./plugin/build');\n```\n\n----------------------------------------\n\nTITLE: Adding expo-modules-core Dependency in build.gradle\nDESCRIPTION: Add expo-modules-core as a dependency in the build.gradle file for Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n// ...\ndependencies {\n  // ...\n  implementation project(':expo-modules-core')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Dismiss for Android Notifications in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the new 'autoDismiss' parameter in NotificationContentInput to configure whether a notification should be automatically dismissed when tapped on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nNotificationContentInput {\n  // ...\n  autoDismiss: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dev Client in JavaScript\nDESCRIPTION: Example showing how to import the Dev Client module in JavaScript code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/dev-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as DevClient from 'expo-dev-client';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-task-manager using npx expo install (Shell)\nDESCRIPTION: This command installs the `expo-task-manager` package and its native dependencies into an Expo or React Native project using the `expo install` command, which ensures compatible versions are installed. It is the recommended way to add Expo packages to ensure version compatibility and proper linking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-task-manager/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-task-manager\n```\n\n----------------------------------------\n\nTITLE: Displaying package name in HTML/Markdown\nDESCRIPTION: Uses HTML heading and code tags to display the @expo/plist package name in a centered, styled format.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/plist/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1 align=\"center\">\n👋 Welcome to <br><code>@expo/plist</code>\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo Development Server\nDESCRIPTION: Command to start the Metro bundler and Expo development server for the project. This initializes the development environment for testing the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo start\n```\n\n----------------------------------------\n\nTITLE: Accessing JS Bundle File in React Native Android\nDESCRIPTION: This code snippet shows the method 'getJSBundleFile()' which was added to ReactNativeHost to support bridgeless mode in React Native Android applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nReactNativeHost.getJSBundleFile()\n```\n\n----------------------------------------\n\nTITLE: Including Foreign Notifications in getPresentedNotificationsAsync (Android)\nDESCRIPTION: Added support on Android for `getPresentedNotificationsAsync` to include notifications presented by sources other than `expo-notifications`. This allows retrieving a more complete list of currently displayed notifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngetPresentedNotificationsAsync\n```\n\n----------------------------------------\n\nTITLE: Viewing EAS Channels\nDESCRIPTION: Commands to list all channels and view specific channel details in EAS\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/eas-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:list\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:view [channel-name]\n```\n\n----------------------------------------\n\nTITLE: Adding iOS 14 Ephemeral Authorization Status\nDESCRIPTION: Added `IosAuthorizationStatus.EPHEMERAL` to the possible iOS authorization statuses. This maps to the native `UNAuthorizationStatusEphemeral` introduced in iOS 14, allowing apps to request provisional, non-interruptive notification permissions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nIosAuthorizationStatus.EPHEMERAL\n```\n\nLANGUAGE: swift\nCODE:\n```\nUNAuthorizationStatusEphemeral\n```\n\n----------------------------------------\n\nTITLE: Mods Configuration Structure\nDESCRIPTION: Example showing the structure for configuring platform-specific mods in the app config.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  name: 'my-app',\n  mods: {\n    ios: {\n      /* iOS mods... */\n    },\n    android: {\n      /* Android mods... */\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Imports in Babel Preset Expo\nDESCRIPTION: Example of how to configure the lazyImports option in babel-preset-expo. This option affects how import statements are compiled, potentially improving initial load time by lazily evaluating dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    'babel-preset-expo',\n    {\n        lazyImports: true\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Haptics Module\nDESCRIPTION: Basic import statement for the expo-haptics module to access haptic feedback functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/haptics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Haptics from 'expo-haptics';\n```\n\n----------------------------------------\n\nTITLE: Excluding Unimodule from Expo Go (iOS)\nDESCRIPTION: Instructions for modifying the iOS Podfile to exclude a unimodule from being available in Expo Go. This involves adding the unimodule name to the exclude argument of use_unimodules!.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Creating Unimodules.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nuse_unimodules!(exclude: ['<unimodule-name>'])\n```\n\n----------------------------------------\n\nTITLE: Installing Missing Dependencies via NPX (Shell)\nDESCRIPTION: The `npx expo install` command is often recommended when dependency checks fail or when running `expo install` outside of a project context where `expo-cli` might not be a local dependency. It ensures the latest compatible version of `expo install` is used.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo for Bluesky Social Mobile App\nDESCRIPTION: This JSON configuration sets up the Expo build for Bluesky Social. It includes app identifiers, version information, permissions, and platform-specific settings for iOS and Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/android/metadata/en-US/video.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"name\": \"Bluesky\",\n    \"slug\": \"bluesky\",\n    \"version\": \"1.47.0\",\n    \"orientation\": \"portrait\",\n    \"icon\": \"./assets/icon.png\",\n    \"userInterfaceStyle\": \"automatic\",\n    \"splash\": {\n      \"image\": \"./assets/splash.png\",\n      \"resizeMode\": \"contain\",\n      \"backgroundColor\": \"#ffffff\"\n    },\n    \"updates\": {\n      \"fallbackToCacheTimeout\": 0\n    },\n    \"assetBundlePatterns\": [\n      \"**/*\"\n    ],\n    \"ios\": {\n      \"supportsTablet\": false,\n      \"bundleIdentifier\": \"xyz.blueskyweb.app\",\n      \"buildNumber\": \"1\",\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\n          \"fetch\",\n          \"remote-notification\"\n        ],\n        \"NSCameraUsageDescription\": \"This app uses the camera to upload photos to your posts.\",\n        \"NSPhotoLibraryUsageDescription\": \"This app uses the photo library to upload photos to your posts.\",\n        \"NSPhotoLibraryAddUsageDescription\": \"This app needs access to save images to your photo library.\"\n      }\n    },\n    \"android\": {\n      \"adaptiveIcon\": {\n        \"foregroundImage\": \"./assets/adaptive-icon.png\",\n        \"backgroundColor\": \"#FFFFFF\"\n      },\n      \"package\": \"xyz.blueskyweb.app\",\n      \"versionCode\": 1,\n      \"permissions\": [\n        \"CAMERA\",\n        \"READ_EXTERNAL_STORAGE\",\n        \"WRITE_EXTERNAL_STORAGE\"\n      ]\n    },\n    \"web\": {\n      \"favicon\": \"./assets/favicon.png\"\n    },\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"ios\": {\n            \"deploymentTarget\": \"13.0\"\n          }\n        }\n      ]\n    ],\n    \"extra\": {\n      \"eas\": {\n        \"projectId\": \"f3b5f9f2-e5c5-4ac4-98ae-67abc0ce879e\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Routes for SDK 49 in Expo Router\nDESCRIPTION: JSON configuration for enabling async routes in SDK 49, showing basic setup with development mode.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/async-routes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-router\",\n        {\n          \"origin\": \"https://acme.com\",\n          \"asyncRoutes\": \"development\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Legacy Plugin Configuration in Expo Projects\nDESCRIPTION: This JSON snippet demonstrates the internal plugin history structure that tracks which plugins were added to an Expo project using withRunOnce. It shows how plugin versions are tracked, with 'UNVERSIONED' indicating fallback plugins shipped with expo-cli.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  _internal: {\n    pluginHistory: {\n      'expo-location': {\n        name: 'expo-location',\n        version: '11.0.0',\n      },\n      'react-native-maps': {\n        name: 'react-native-maps',\n        version: 'UNVERSIONED',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Android Permissions in AndroidManifest.xml\nDESCRIPTION: Shows how to explicitly remove specific permissions from AndroidManifest.xml using the tools:node attribute, even if they're included by library manifests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:tools=\"http://schemas.android.com/tools\">\n  <uses-permission tools:node=\"remove\" android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Server in Offline Mode\nDESCRIPTION: Command to start the Expo development server in offline mode without network connectivity.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ npx expo start --offline\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration\nDESCRIPTION: Basic script configuration required in package.json to enable expo-module commands for building, testing, and preparing the module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"expo-module build\",\n    \"clean\": \"expo-module clean\",\n    \"test\": \"expo-module test\",\n    \"prepare\": \"expo-module prepare\",\n    \"prepublishOnly\": \"expo-module prepublishOnly\",\n    \"expo-module\": \"expo-module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging iOS Capabilities with Expo CLI\nDESCRIPTION: Commands for debugging and controlling iOS capability syncing in Expo builds. EXPO_DEBUG enables detailed logging while EXPO_NO_CAPABILITY_SYNC disables capability syncing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/ios-capabilities.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_DEBUG=1 eas build\n```\n\n----------------------------------------\n\nTITLE: Enabling Metro Web Support in Expo App Configuration\nDESCRIPTION: Configures the app.json file to enable Metro bundler support for web in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"web\": {\n    \"bundler\": \"metro\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting the Expo Project Structure (Bash)\nDESCRIPTION: This command executes a custom script named `reset-project` defined in the project's `package.json` file. Based on the context, this script is intended to move the initial starter code (likely from the `app` directory) into an `app-example` directory and create a new, empty `app` directory, allowing the developer to start building their application from a blank slate.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/templates/expo-template-default/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run reset-project\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Test Workflows in eas.json\nDESCRIPTION: An eas.json configuration that defines separate custom build workflows for Android and iOS platforms. This allows for platform-specific test configurations while maintaining a common build profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/get-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    /* @hide ... */ /* @end */\n    \"test\": {\n      \"ios\": {\n        \"config\": \"test-ios.yml\",\n      },\n      \"android\": {\n        \"config\": \"test-android.yml\",\n      },\n      \"withoutCredentials\": true\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: ByteArray to Uint8Array Conversion for Android in Expo\nDESCRIPTION: This update adds support for converting between ByteArray and Uint8Array types on Android platforms in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nbyte[] byteArray = ...;\nUint8Array uint8Array = ExpoConverters.byteArrayToUint8Array(byteArray);\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running EAS Fastlane Step - Expo (YAML)\nDESCRIPTION: This snippet demonstrates a complete YAML workflow configuration for building an iOS app using Expo EAS. It shows how to chain common build steps including checkout, node module installation, Apple team ID resolution, prebuild, update configuration, iOS credential configuration, Gymfile template generation, and finally running the Fastlane gym command via the eas/run_fastlane step. Requires a valid iOS project structure and credentials. Key input variables, such as apple_team_id and credentials, are passed across steps. Output is the result of the iOS build process; only works in an iOS environment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\\n  name: Build iOS app\\n  steps:\\n    - eas/checkout\\n    - eas/install_node_modules\\n    - eas/resolve_apple_team_id_from_credentials:\\n        id: resolve_apple_team_id_from_credentials\\n    - eas/prebuild:\\n        inputs:\\n          clean: false\\n          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }\\n    - eas/configure_eas_update\\n    - eas/configure_ios_credentials\\n    - eas/generate_gymfile_template:\\n        inputs:\\n          credentials: ${ eas.job.secrets.buildCredentials }\\n    # @info #\\n    - eas/run_fastlane\\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component in JSX\nDESCRIPTION: This JSX code demonstrates the usage of the imported RawH3 component to display the text 'components'. This component is likely used for section headings or titles within the app's interface.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>components</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Vendored Module Updates with ExpoTools\nDESCRIPTION: Command for listing outdated vendored modules that need to be updated as part of the SDK release preparation process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\net update-vendored-module --list-outdated\n```\n\n----------------------------------------\n\nTITLE: Running URI Scheme Management Commands with CLI - Shell\nDESCRIPTION: This shell snippet demonstrates how to use the uri-scheme CLI to list, open, and add native URI schemes within a project. No dependencies are required apart from Node.js and npx; the uri-scheme package is fetched on demand. Key commands include listing all URIs (list), opening a URI in a simulator (open), and adding a new URI (add). The expected inputs are command arguments and flags, with textual output or side effects in your project configuration files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/uri-scheme/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Usage\\nnpx uri-scheme [options] [command]\\n\\n# View all URIs for a project\\nnpx uri-scheme list\\n\\n# Open a URI in a simulator\\nnpx uri-scheme open <uri> --ios\\n\\n# Add a URI to your project\\nnpx uri-scheme add <uri>\n```\n\n----------------------------------------\n\nTITLE: Modifying Incoming Configuration in app.config.js\nDESCRIPTION: Demonstrates how to export a function in app.config.js to modify incoming configuration from app.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ config }) => {\n  console.log(config.name); // prints 'My App'\n  return {\n    ...config,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription Type for React Native\nDESCRIPTION: Defines a common React Native type for active subscriptions, allowing for removal of the subscription.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Subscription = {\n  remove: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Safe Area Implementation\nDESCRIPTION: Example of using CSS environment variables for safe area insets in web-only applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Simulator Build with Fastlane\nDESCRIPTION: Command to execute the create_simulator_build lane for iOS, which creates a build specifically for iOS simulators.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios create_simulator_build\n```\n\n----------------------------------------\n\nTITLE: Targeting Node 18 in Babel CLI preset\nDESCRIPTION: This code updates the Babel CLI preset to target Node 18.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Target Node 18 in the Babel CLI preset.\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI via npm\nDESCRIPTION: This command installs the EAS CLI globally using npm. EAS CLI is required for building the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Adding workaround for deprecated react-test-renderer\nDESCRIPTION: This code adds a temporary workaround for the deprecated react-test-renderer version 19.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add temporary workaround for deprecated `react-test-renderer@19`.\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK Configuration\nDESCRIPTION: Gradle configuration change setting compileSdkVersion and targetSdkVersion to 33 for compatibility with newer Android versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n  compileSdkVersion 33\n  targetSdkVersion 33\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-face-detector Package\nDESCRIPTION: Command to install the expo-face-detector package using npx expo CLI tool. This installation command works for both managed Expo and bare React Native projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-face-detector/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-face-detector\n```\n\n----------------------------------------\n\nTITLE: Deprecating Android Style Method in Expo CLI\nDESCRIPTION: This change deprecates the 'getAppThemeLightNoActionBarGroup' Android style method and replaces it with 'getAppThemeGroup', which does not override the parent theme if it changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config-plugins/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Deprecated the Android style method `getAppThemeLightNoActionBarGroup` and replaced it with `getAppThemeGroup`, which does not override the parent theme if its parent theme changes. ([#30797](https://github.com/expo/expo/pull/30797) by [@zoontek](https://github.com/zoontek))\n```\n\n----------------------------------------\n\nTITLE: TV Config Plugin Configuration\nDESCRIPTION: JSON configuration to add the TV config plugin to app.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/building-for-tv.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@react-native-tvos/config-tv\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Gradle cache\nDESCRIPTION: Command to clear the Gradle cache when encountering build issues with the Android app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Developing Expo Go.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clean\n```\n\n----------------------------------------\n\nTITLE: Uploading Sourcemaps to Sentry for EAS Update\nDESCRIPTION: Command to upload source maps to Sentry after running eas update. This ensures errors for updates are properly symbolicated in Sentry.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-sentry.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx sentry-expo-upload-sourcemaps dist\n```\n\n----------------------------------------\n\nTITLE: Changelog Management\nDESCRIPTION: Command for merging and cutting off changelogs across packages to prepare for a new SDK release.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\net merge-changelogs --cut-off\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Screen Options in SDK 49 and Lower\nDESCRIPTION: Implementation of drawer navigation with custom screen options for labels and titles in SDK 49 and lower.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/drawer.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Drawer } from 'expo-router/drawer';\n\nexport default function Layout() {\n  return (\n    <Drawer>\n      <Drawer.Screen\n        name=\"index\" // This is the name of the page and must match the url from root\n        options={{\n          drawerLabel: 'Home',\n          title: 'overview',\n        }}\n      />\n      <Drawer.Screen\n        name=\"user/[id]\" // This is the name of the page and must match the url from root\n        options={{\n          drawerLabel: 'User',\n          title: 'overview',\n        }}\n      />\n    </Drawer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-config-universe and dependencies\nDESCRIPTION: Commands to install eslint-config-universe and its required dependencies (eslint and prettier) using Yarn.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev eslint-config-universe\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev eslint@8 prettier\n```\n\n----------------------------------------\n\nTITLE: Native Android Component Registration\nDESCRIPTION: Shows how the main component name is specified in the Android MainActivity.java file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/application-has-not-been-registered.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected String getMainComponentName() {\n  return \"main\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using expo-manifests logUrl Getter for Consistency\nDESCRIPTION: Refactored code to use the `logUrl` getter provided by the `expo-manifests` package instead of directly accessing the raw JSON manifest property. This improves encapsulation and potentially handles cases where the property might be missing or structured differently.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlogUrl\n```\n\n----------------------------------------\n\nTITLE: Installing expo-media-library Package\nDESCRIPTION: Command to install the expo-media-library package using npx expo install\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-media-library/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-media-library\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components in Markdown\nDESCRIPTION: This snippet shows the import statements for various icons and components used in the markdown file. It demonstrates how to import custom icons and components from the Expo styleguide for use in the documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { RouterLogo } from '@expo/styleguide';\nimport { PlanEnterpriseIcon } from '@expo/styleguide-icons/custom/PlanEnterpriseIcon';\nimport { CodeSquare01Icon } from '@expo/styleguide-icons/outline/CodeSquare01Icon';\nimport { CpuChip01Icon } from '@expo/styleguide-icons/outline/CpuChip01Icon';\n```\n\n----------------------------------------\n\nTITLE: Creating Files for a New ESLint Rule in Bluesky Social Expo\nDESCRIPTION: Command-line instructions for creating the necessary files when implementing a new ESLint rule, including the rule definition, test file, and documentation file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/rules/newRule.ts\ntouch src/__tests__/newRule.ts\ntouch docs/rules/new-rule.md\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion from expo-sensors\nDESCRIPTION: Example showing how to import the DeviceMotion module from the expo-sensors package for use in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeviceMotion } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Notifications Package in JavaScript\nDESCRIPTION: Basic import statement for the expo-notifications package, which is necessary to access notification functionality in Expo applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-intent-launcher in bare React Native projects\nDESCRIPTION: Command to install the expo-intent-launcher package using npx and expo CLI. This is specifically for bare React Native projects that have already installed and configured the expo package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-intent-launcher/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-intent-launcher\n```\n\n----------------------------------------\n\nTITLE: Installing expo-screen-capture in React Native Projects\nDESCRIPTION: Command to install the expo-screen-capture package using npx expo install\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-screen-capture/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-screen-capture\n```\n\n----------------------------------------\n\nTITLE: Changelog Changes Entry\nDESCRIPTION: Markdown formatted changelog entry documenting version changes, breaking changes, new features, bug fixes and other updates for the Expo Keep Awake module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-keep-awake/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS and tvOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n- Add missing `react` peer dependencies for isolated modules. ([#30470](https://github.com/expo/expo/pull/30470) by [@byCedric](https://github.com/byCedric))\n\n### 💡 Others\n\n- Use `EventSubscription` type instead of `Subscription`. ([#28946](https://github.com/expo/expo/pull/28946) by [@tsapeta](https://github.com/tsapeta))\n- Replaced `@testing-library/react-hooks` with `@testing-library/react-native`. ([#30742](https://github.com/expo/expo/pull/30742) by [@byCedric](https://github.com/byCedric))\n```\n\n----------------------------------------\n\nTITLE: Importing Gyroscope Module from expo-sensors\nDESCRIPTION: This snippet shows how to import the Gyroscope module from the expo-sensors package. This import is necessary to use the gyroscope functionality in an Expo-based React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Gyroscope } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Defining Expo Project Slug Example\nDESCRIPTION: Example showing the slug property used in app configuration to define a URL-friendly unique project identifier across an Expo account.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/glossary-of-terms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"slug\"\n```\n\n----------------------------------------\n\nTITLE: Platform Compatibility Component\nDESCRIPTION: Component declaration showing supported platforms for the Skia library including Android, iOS, and web environments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/skia.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PlatformsSection android emulator ios simulator web />\n```\n\n----------------------------------------\n\nTITLE: Package Import Example in Markdown\nDESCRIPTION: Sample import statement for APIInstallSection component from the plugins directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/skia.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Creating Deep Links to Load Updates in Expo Development Builds\nDESCRIPTION: Demonstrates the format for creating deep links that load specific updates in a development build using the app scheme and a URL-encoded manifest URL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexp+app-slug://expo-development-client/?url=https%3A%2F%2Fu.expo.dev%2F767ADF57-B487-4D8F-9522-85549C39F43F%2F%3Fchannel-name%3Dmain\n```\n\n----------------------------------------\n\nTITLE: Adding Alt Text to Images in Markdown\nDESCRIPTION: Demonstrates how to add alternative text to images in Markdown for improved accessibility. This syntax allows screen readers to describe the image to visually impaired users.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![alt text](/path/to/img.jpg)\n```\n\n----------------------------------------\n\nTITLE: Fixing Web Notification Permissions Status\nDESCRIPTION: Resolved an issue where `Notifications.requestPermissions()` would incorrectly return an `undetermined` status in some web browsers. The fix ensures it returns a known status, reflecting the actual permission state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nNotifications.requestPermissions()\n```\n\n----------------------------------------\n\nTITLE: Configuring Global npm Registry for iOS Builds\nDESCRIPTION: Global npm configuration in ~/.npmrc for iOS builds. This setting points to a custom registry server used for dependency resolution during iOS build processes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nregistry=http://10.94.183.70:4873\n```\n\n----------------------------------------\n\nTITLE: Running Package Check Command in Expo\nDESCRIPTION: Executes the 'et check-packages' command to verify successful package builds, up-to-date build folders, and passing unit tests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\net check-packages\n```\n\n----------------------------------------\n\nTITLE: Common Response Headers for Expo Updates Protocol\nDESCRIPTION: Mandatory response headers that must be included in server responses, including protocol version, manifest filters, and server-defined headers specifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexpo-protocol-version: 1\nexpo-sfv-version: 0\nexpo-manifest-filters: <expo-sfv>\nexpo-server-defined-headers: <expo-sfv>\ncache-control: *\ncontent-type: *\n```\n\n----------------------------------------\n\nTITLE: Error Code Change - Web SMS Implementation\nDESCRIPTION: Change in error code thrown by sendSMSAsync on web platform from E_SMS_UNAVAILABLE to ERR_UNAVAILABLE for better error handling consistency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sms/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsendSMSAsync() // Now throws 'ERR_UNAVAILABLE' instead of 'E_SMS_UNAVAILABLE'\n```\n\n----------------------------------------\n\nTITLE: Importing the Application Module in JavaScript\nDESCRIPTION: Basic import statement for accessing the expo-application module in a JavaScript application. This import provides access to all the functionality for retrieving native application information.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Deployment Target in Expo CLI\nDESCRIPTION: This change updates snapshots with the iOS deployment target set to version 15.1 in the Expo CLI project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config-plugins/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated snapshots with iOS deployment target set to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n```\n\n----------------------------------------\n\nTITLE: Installing expo-brightness package in React Native\nDESCRIPTION: Command to install the expo-brightness package using npx in a React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-brightness/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-brightness\n```\n\n----------------------------------------\n\nTITLE: Creating Native Module in Kotlin\nDESCRIPTION: Create a Kotlin file for the native module using the Expo Modules API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage my.module.package\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass MyModule : Module() {\n  override fun definition() = ModuleDefinition {\n    // Definition components go here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Animated from Reanimated in EmojiSticker.js\nDESCRIPTION: Imports the Animated component from react-native-reanimated to enable animations for the emoji sticker.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated from 'react-native-reanimated';\n```\n\n----------------------------------------\n\nTITLE: Setting App Icon in Expo App Config (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set the app icon in the Expo app config file. It specifies the path to the icon image file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/splash-screen-and-app-icon.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icon\": \"./assets/images/icon.png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering RawH3 Component with JSX\nDESCRIPTION: Renders the RawH3 component with the text 'app', likely used as a heading in the navigation or layout structure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>app</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-contacts\nDESCRIPTION: XML snippet to add NSContactsUsageDescription key to the iOS Info.plist file for contacts access.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSContactsUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your contacts</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS JSON for Dynamic Metadata\nDESCRIPTION: This snippet shows how to configure the eas.json file to use a JavaScript file for dynamic metadata configuration instead of the default JSON file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"ios\": {\n        \"metadataPath\": \"./store.config.js\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expo Device Module Version History\nDESCRIPTION: Comprehensive changelog tracking version updates and changes to the Expo Device module, including breaking changes, new features, bug fixes and other modifications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-device/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS and tvOS deployment target to 15.1.\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n\n## 6.0.2 — 2024-05-01\n\n_This version does not introduce any user-facing changes._\n```\n\n----------------------------------------\n\nTITLE: Running Chrome with SSL Disabled for Local Testing\nDESCRIPTION: Command to launch Google Chrome with SSL certificate errors disabled, which is necessary for running Expo tests in a browser environment without encountering SSL-related failures.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/test-suite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --user-data-dir=/tmp/foo --ignore-certificate-errors --unsafely-treat-insecure-origin-as-secure=https://localhost:19006\n```\n\n----------------------------------------\n\nTITLE: SMS Attachment Interface Definition - TypeScript\nDESCRIPTION: TypeScript interface definitions for SMS attachments and options that were exported in version 9.2.0. These types are used for configuring SMS sending functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sms/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSMSAttachment\nSMSOptions\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages and Templates\nDESCRIPTION: Commands for publishing packages to NPM with the 'next' tag and synchronizing bundled native modules. Also includes commands for updating and publishing project templates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\net publish-packages\n```\n\nLANGUAGE: bash\nCODE:\n```\net sync-bundled-native-modules\n```\n\nLANGUAGE: bash\nCODE:\n```\net update-project-templates\n```\n\nLANGUAGE: bash\nCODE:\n```\net upt\n```\n\nLANGUAGE: bash\nCODE:\n```\net publish-templates\n```\n\nLANGUAGE: bash\nCODE:\n```\net ppt\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest --template blank@sdk-48\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpath Hosting in package.json for Expo Webpack\nDESCRIPTION: This JSON snippet shows how to configure subpath hosting in Expo Webpack by setting the 'homepage' field in package.json. This method is specific to Expo Webpack and is not used in Expo Router.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \"/evanbacon/my-website\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Expotools Help Information (Shell)\nDESCRIPTION: Displays all available commands and options for the Expotools CLI. This is useful for understanding the tool's capabilities.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/tools/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\net --help\n```\n\n----------------------------------------\n\nTITLE: Installing Screenshot and Media Library Dependencies in Expo\nDESCRIPTION: Command to install react-native-view-shot for taking screenshots and expo-media-library for accessing device media library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/screenshot.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install react-native-view-shot expo-media-library\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Environment Variables in Expo\nDESCRIPTION: Example showing the incorrect way to access environment variables in Expo by destructuring process.env. This pattern will break the build-time inlining of environment variables.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-env-var-destructuring.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { MY_VAR } = process.env;\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to import the RawH3 component from the Text components directory in the UI folder of the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/platforms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Adding Node-specific Babel and Jest configurations\nDESCRIPTION: This code adds Node-specific Babel and Jest configurations to the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add Node-specific Babel and Jest configurations.\n```\n\n----------------------------------------\n\nTITLE: Using correct TSConfig package\nDESCRIPTION: This code updates the dependencies to use the correct TSConfig package to match the one referred in tsconfig.plugin.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Use the correct TSConfig package in dependencies to match one referred in `tsconfig.plugin.json`.\n```\n\n----------------------------------------\n\nTITLE: Serialized Plugin Configuration\nDESCRIPTION: JSON representation of how the raw function plugins are serialized in the final manifest.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [[\"withCustom\", {}], \"withCustom\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing patch-project with Expo CLI (Shell)\nDESCRIPTION: Installs the 'patch-project' package into an Expo project using the recommended 'npx expo install' command. This ensures compatibility and handles native dependencies correctly. Requires Node.js, npm/npx, and Expo CLI to be installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/patch-project/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npx expo install patch-project\n```\n\n----------------------------------------\n\nTITLE: Importing DateTimePicker Components in React Native\nDESCRIPTION: Example showing the import statements for DateTimePicker-related components used in the documentation page. These imports are used to build the component documentation interface.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\nimport PlatformsSection from '~/components/plugins/PlatformsSection';\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Background Audio in Expo (JSON)\nDESCRIPTION: Provides an example app.json configuration to allow background audio playback or recording on iOS with Expo. Requires manual addition of 'UIBackgroundModes' and 'audio' key into the appropriate section of ios.infoPlist in app.json. No code execution, this is for platform configuration to satisfy iOS requirements for background sound functionalities. Omitting this section may result in inability to use background audio features in standalone iOS apps. Typically no input/output, but essential for correct behavior in relevant use cases.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/audio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    ...\\n    \\\"ios\\\": {\\n      ...\\n      \\\"infoPlist\\\": {\\n        ...\\n        \\\"UIBackgroundModes\\\": [\\n          \\\"audio\\\"\\n        ]\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Runtime Version in Expo\nDESCRIPTION: Sets a runtime version for a specific platform, which takes precedence over the top-level runtime version if both are set.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"android\": {\n      \"runtimeVersion\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Push Tickets Success Response Format\nDESCRIPTION: Example of a successful push tickets response showing status and IDs for multiple notifications\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    { \"status\": \"ok\", \"id\": \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" },\n    { \"status\": \"ok\", \"id\": \"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY\" },\n    { \"status\": \"ok\", \"id\": \"ZZZZZZZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ\" },\n    { \"status\": \"ok\", \"id\": \"AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests on iOS Simulator\nDESCRIPTION: Command to prepare and run end-to-end tests for the Bare-Expo app on an iOS simulator. Provides the same setup as the regular iOS run but with additional E2E testing configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:ios\n```\n\n----------------------------------------\n\nTITLE: Basic Function Definition in YAML\nDESCRIPTION: Demonstrates how to define a basic function with a name in the build steps\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  greetings:\n    name: Say Hi!\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Navigator Mounting Before Navigation in Expo Router (TypeScript)\nDESCRIPTION: Demonstrates a problematic pattern where navigation (router.push) is attempted in a root layout before the navigation slot is rendered, which can lead to runtime errors. React and Expo Router are required dependencies. The function checks for a loading state and attempts redirection in a useEffect hook, but if navigation occurs before the <Slot /> is mounted, an error will result.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout() {\\n  React.useEffect(() => {\\n    // This navigation event will trigger the error above.\\n    router.push('/about');\\n  }, []);\\n\\n  // This conditional statement creates a problem since the root layout's\\n  // content (the Slot) must be mounted before any navigation events occur.\\n  if (isLoading) {\\n    return <Text>Loading...</Text>;\\n  }\\n\\n  return <Slot />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in package.json for Expo Projects\nDESCRIPTION: Add a test script and jest-expo preset to package.json. Optionally include transformIgnorePatterns to transpile specific node modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/unit-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest --watchAll\"\n  },\n  \"jest\": {\n    \"preset\": \"jest-expo\",\n    \"transformIgnorePatterns\": [\n      \"node_modules/(?!((jest-)?react-native|@react-native(-community)?)|expo(nent)?|@expo(nent)?/.*|@expo-google-fonts/.*|react-navigation|@react-navigation/.*|@sentry/react-native|native-base|react-native-svg)\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Exports Configuration for RSC\nDESCRIPTION: Configuration example for package exports with react-server condition\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": {\n      \"react-server\": \"./index.react-server.js\",\n      \"default\": \"./index.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Config Schema and Components in React/JSX\nDESCRIPTION: Imports the app configuration schema from a JSON file and a custom React component for rendering the schema as a table. This code is used to set up the documentation page itself.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport schema from '~/public/static/schemas/v50.0.0/app-config-schema.json';\nimport AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated View Component\nDESCRIPTION: Replaces View with Animated.View component to enable animation capabilities for the sticker container.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/gestures.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function EmojiSticker({ imageSize, stickerSource }) {\n  return (\n    <Animated.View style={{ top: -350 }}>\n      <GestureDetector gesture={doubleTap}>\n        {/* ...rest of the code remains same */}\n      </GestureDetector>\n    </Animated.View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Expo badges to your project Markdown\nDESCRIPTION: Markdown code for adding badges to your project README that indicate the app runs with Expo Go. This snippet shows how to add both black and blue versions of the badge with proper formatting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)\n\n[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)\n```\n\n----------------------------------------\n\nTITLE: Global CSS Style Definition\nDESCRIPTION: Example of defining global CSS styles in a separate stylesheet\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Code Block Example\nDESCRIPTION: Example of using code blocks in MDX documentation with titles and parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_10\n\nLANGUAGE: mdx\nCODE:\n```\n{/* For plain code block the syntax is unchanged (but we recommend to always add a title to the snippet): */}\n```js\n// Your code goes in here\n```\n\n{/* To add a title, enter it right after the language, in the code block starting line: */}\n```js myFile.js\n// Your code goes in here\n```\n```js Title for a code block\n// Your code goes in here\n```\n\n{/* Title and params can be separated by pipe (\"|\") characters, but they also work for block without a title: */}\n```js myFile.js|collapseHeight=600\n// Your code goes in here\n```\n```js collapseHeight=200\n// Your code goes in here\n```\n```\n\n----------------------------------------\n\nTITLE: Importing QR Code Component in React\nDESCRIPTION: Imports the QRCodeReact component from the 'react-qr-code' library for generating QR codes in a React application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalExpoGo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport QRCodeReact from 'react-qr-code';\n```\n\n----------------------------------------\n\nTITLE: Implementing mutateMe Function in JavaScript/Swift\nDESCRIPTION: Function definition that mutates a JavaScript object by setting an 'expo' property with value 'modules'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nFunction(\"mutateMe\") { (jsObject: JavaScriptObject) in\n  jsObject.setProperty(\"expo\", value: \"modules\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Yarn Settings for iOS Builds\nDESCRIPTION: Global Yarn configuration in ~/.yarnrc.yml for iOS builds. These settings configure the npm registry server, allow HTTP connections to the registry, and disable immutable installs to support the iOS build environment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/infrastructure.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nunsafeHttpWhitelist:\n  - '*'\nnpmRegistryServer: 'http://10.94.183.70:4873'\nenableImmutableInstalls: false\n```\n\n----------------------------------------\n\nTITLE: Using proper naming conventions for classes and functions in JavaScript\nDESCRIPTION: Example of correct naming conventions using camel case, with capitalized names for classes and constructor functions, and lowercase for other identifiers.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT\nclass Aquarium {\n  filterWater() {...}\n}\n\nfunction Fish() {...}\nObject.assign(Fish.prototype, ...);\n\nfunction populateAquarium(aquarium, school) {...}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-system-ui via npx expo install (Shell)\nDESCRIPTION: This command installs the expo-system-ui package into an existing Expo project. The 'npx expo install' command is recommended as it ensures compatibility with the project's Expo SDK version and handles linking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-system-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-system-ui\n```\n\n----------------------------------------\n\nTITLE: Importing fetch from node-fetch in JavaScript\nDESCRIPTION: This code snippet shows how to import the 'fetch' function from 'node-fetch' to support older Node.js versions that don't have built-in fetch support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { fetch } from 'node-fetch';\n```\n\n----------------------------------------\n\nTITLE: Supporting scripts directory build in Expo\nDESCRIPTION: This code adds support for building the scripts directory, similar to cli, utils, and plugins in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add support for building scripts directory (similar to cli, utils, and plugins).\n```\n\n----------------------------------------\n\nTITLE: Adding Module Scripts to Package.json\nDESCRIPTION: Shows the scripts needed in package.json for building, testing, and preparing the module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"build\": \"expo-module build\",\n    \"clean\": \"expo-module clean\",\n    \"test\": \"expo-module test\",\n    \"prepare\": \"expo-module prepare\",\n    \"prepublishOnly\": \"expo-module prepublishOnly\",\n    \"expo-module\": \"expo-module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Android resource reading\nDESCRIPTION: Adds ability to read Android raw and drawable resources in various FileSystem methods.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-file-system/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd ability to read Android `raw` and `drawable` resources in `FileSystem.getInfoAsync`, `FileSystem.readAsStringAsync`, and `FileSystem.copyAsync`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Document\nDESCRIPTION: Changelog entries tracking version history and changes to the expo-splash-screen package, organized by version number and change type categories.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS and tvOS deployment target to 15.1.\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n\n## 0.27.5 - 2024-06-06\n\n_This version does not introduce any user-facing changes._\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in React\nDESCRIPTION: This snippet imports the RawH3 component from a local UI components directory. RawH3 is likely a custom heading component used for rendering h3 elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Example of Opening iOS Test Modules\nDESCRIPTION: Example command showing how to open and test the Constants and Crypto modules on iOS. Requires the iOS platform to be already running.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn open ios Constants Crypto\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Typed Linting\nDESCRIPTION: Configuration changes required in .eslintrc.js to enable additional TypeScript-specific linting rules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'universe',\n+   'universe/shared/typescript-analysis',\n  ],\n+ overrides: [\n+   {\n+     files: [\n+       '*.ts',\n+       '*.tsx',\n+       '*.d.ts'\n+     ],\n+     parserOptions: {\n+       project: './tsconfig.json'\n+     },\n+   },\n+ ],\n};\n```\n\n----------------------------------------\n\nTITLE: Reloading Expo App Asynchronously in JavaScript\nDESCRIPTION: This new method allows for programmatically reloading the Expo app, which can be useful for applying updates or resetting the app state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nreloadAppAsync()\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Build with EAS\nDESCRIPTION: Describes the process of creating a development build using EAS Build. This is typically done after initializing a project and installing the expo-dev-client library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neas build --profile development\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-menu-interface in bare React Native projects\nDESCRIPTION: This command installs the expo-dev-menu-interface package using npm. It should be run after ensuring that the expo package is installed and configured in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-menu-interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-dev-menu-interface\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Undefined EXPO_ROUTER_APP_ROOT in Terminal\nDESCRIPTION: Shows the error message that appears when process.env.EXPO_ROUTER_APP_ROOT is not defined. This is typically caused by the absence of the expo-router/babel plugin in the project's babel.config.js.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/troubleshooting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ Invalid call at line 11: process.env.EXPO_ROUTER_APP_ROOT First argument of require.context should be a string.\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Dependencies for Expo SDK 41\nDESCRIPTION: Updates the package.json file with new dependency versions to support Expo SDK 41. This includes upgrading expo from 40.0.0 to 41.0.0, React Native to 0.63.2, and various related libraries to their compatible versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/android/metadata/en-US/changelogs/146.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@expo/vector-icons\": \"^12.0.0\",\n    \"@react-native-async-storage/async-storage\": \"~1.15.0\",\n    \"@react-native-community/masked-view\": \"0.1.10\",\n    \"@react-navigation/bottom-tabs\": \"5.11.2\",\n    \"@react-navigation/native\": \"~5.8.10\",\n    \"@react-navigation/stack\": \"~5.12.8\",\n    \"expo\": \"^41.0.0\",\n    \"expo-asset\": \"~8.3.1\",\n    \"expo-constants\": \"~10.1.3\",\n    \"expo-font\": \"~9.1.0\",\n    \"expo-linking\": \"~2.2.3\",\n    \"expo-screen-orientation\": \"~3.1.0\",\n    \"expo-splash-screen\": \"~0.10.2\",\n    \"expo-status-bar\": \"~1.0.4\",\n    \"expo-updates\": \"~0.5.4\",\n    \"expo-web-browser\": \"~9.1.0\",\n    \"react\": \"16.13.1\",\n    \"react-dom\": \"16.13.1\",\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-41.0.0.tar.gz\",\n    \"react-native-gesture-handler\": \"~1.10.2\",\n    \"react-native-reanimated\": \"~2.1.0\",\n    \"react-native-safe-area-context\": \"3.2.0\",\n    \"react-native-screens\": \"~3.0.0\",\n    \"react-native-web\": \"~0.13.12\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"~7.9.0\",\n    \"@types/react\": \"~16.9.35\",\n    \"@types/react-native\": \"~0.63.2\",\n    \"jest-expo\": \"^41.0.0\",\n    \"typescript\": \"~4.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Media Library Permissions in TypeScript\nDESCRIPTION: Example of using the usePermissions hook to request media library permissions in a React component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-media-library/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { usePermissions } from 'expo-media-library';\n\nfunction MediaComponent() {\n  const [status, requestPermission] = usePermissions();\n\n  useEffect(() => {\n    if (status !== 'granted') {\n      requestPermission();\n    }\n  }, [status]);\n\n  // Rest of the component\n}\n```\n\n----------------------------------------\n\nTITLE: Web Fallback for styleToBarStyle Implementation\nDESCRIPTION: Fix to provide web fallback for styleToBarStyle functionality to prevent warning messages. Added in version 1.0.2.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-status-bar/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nProvide web fallback for styleToBarStyle in order to not produce a warning.\n```\n\n----------------------------------------\n\nTITLE: Installing expo-asset in Bare React Native Projects\nDESCRIPTION: Command to install the expo-asset package using npx expo install in a bare React Native project. This should be run after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-asset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-asset\n```\n\n----------------------------------------\n\nTITLE: Updating Podfile for iOS\nDESCRIPTION: Modifies the Podfile to include Expo module autolinking configuration for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire File.join(File.dirname(`node --print \"require.resolve('expo/package.json')\"`), \"scripts/autolinking\")\nrequire Pod::Executable.execute_command('node', ['-p',\n  'require.resolve(\n  \"react-native/scripts/react_native_pods.rb\",\n  {paths: [process.argv[1]]}\n  )', __dir__])\n\ntarget '<YourAppTarget>' do\n\nuse_expo_modules!\nconfig = use_native_modules!\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration defining the component title, description, source code URL, and package name.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/slider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Slider\ndescription: A React Native component library that provides access to the system UI for a slider control.\nsourceCodeUrl: 'https://github.com/callstack/react-native-slider'\npackageName: '@react-native-community/slider'\n---\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Import statements for ContentSpotlight and Step components used in the documentation layout\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/ios-developer-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ContentSpotlight } from '~/ui/components/ContentSpotlight';\nimport { Step } from '~/ui/components/Step';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-image-loader in bare React Native projects\nDESCRIPTION: This command installs the expo-image-loader package using npm. It is used for bare React Native projects after ensuring the expo package is installed and configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-loader/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-image-loader\n```\n\n----------------------------------------\n\nTITLE: Installing expo-haptics Package\nDESCRIPTION: Command to install the expo-haptics package using npx expo install\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-haptics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-haptics\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statement\nDESCRIPTION: Imports the BoxLink component from the project's UI components directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-analytics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-background-fetch Package\nDESCRIPTION: Command to install the expo-background-fetch package using npx expo install\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-background-fetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-background-fetch\n```\n\n----------------------------------------\n\nTITLE: Running Android E2E Tests with Detox (Bash)\nDESCRIPTION: A sequence of commands to execute the E2E tests on an Android emulator using Detox. It builds the debug version of the app configured for Detox (`yarn detox:android:debug:build`) and then runs the tests (`yarn detox:android:debug:test`). Requires an emulator named `pixel_4` (or configuration update in `.detoxrc.json`) and `adb reverse` to be run beforehand to forward the test server port.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn detox:android:debug:build\nyarn detox:android:debug:test\n```\n\n----------------------------------------\n\nTITLE: Disabling CocoaPods Cache Configuration in EAS Build\nDESCRIPTION: JSON configuration to disable the CocoaPods cache server for iOS dependencies by setting the EAS_BUILD_DISABLE_COCOAPODS_CACHE environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/caching.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"EAS_BUILD_DISABLE_COCOAPODS_CACHE\": \"1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex NotificationContent Type\nDESCRIPTION: Represents the content of a notification, including platform-specific fields for iOS and Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NotificationContent = {\n  title: string | null;\n  subtitle: string | null;\n  body: string | null;\n  data: { [key: string]: unknown };\n  badge: number | null;\n  sound: 'default' | 'defaultCritical' | 'custom' | null;\n} & (\n  | {\n      launchImageName: string | null;\n      attachments: {\n        identifier: string | null;\n        url: string | null;\n        type: string | null;\n      }[];\n      summaryArgument?: string | null;\n      summaryArgumentCount?: number;\n      categoryIdentifier: string | null;\n      threadIdentifier: string | null;\n      targetContentIdentifier?: string;\n    }\n  | {\n      priority?: AndroidNotificationPriority;\n      vibrationPattern?: number[];\n      color?: string;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Updates API Test Project (Bash)\nDESCRIPTION: Initializes environment variables specifically for the Updates API test project. This includes the Expo repository root, working directory, Expo account name, test project root, and debug flags. It also clears and recreates the working directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# The location of your local copy of this repo\nexport EXPO_REPO_ROOT=/Users/me/myCode/expo\n# The name of a directory that the test project can live under\nexport WORKING_DIR_ROOT=/Users/me/myCode/e2eworking\n# The user name of the Expo account you are logged into\nexport EXPO_ACCOUNT_NAME=myexpoaccount\n# Other environment variables needed for the test setup\nexport TEST_PROJECT_ROOT=$WORKING_DIR_ROOT/MyUpdatesApp\nexport EX_UPDATES_NATIVE_DEBUG=1\n\n# Remove and recreate the working directory before executing the setup\nrm -rf $WORKING_DIR_ROOT\nmkdir $WORKING_DIR_ROOT\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable in macOS\nDESCRIPTION: This snippet shows how to set the JAVA_HOME environment variable in the bash profile or zsh configuration file on macOS after installing the Azul Zulu JDK.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidStudioEnvironmentInstructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Dependencies for Expotools (Shell)\nDESCRIPTION: Installs all required Ruby gems specified in the project's Gemfile using Bundler. This command must be run in the root directory of the Expo repository as a prerequisite for using Expotools.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration for RSC Testing\nDESCRIPTION: JSON configuration to add RSC testing script to package.json\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test:rsc\": \"jest --config jest-rsc.config.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party Library CSS Globally\nDESCRIPTION: Shows how to import CSS styles from an installed node module (`emoji-mart/css/emoji-mart.css` in this example) directly into a JavaScript file (`index.js`). This applies the library's styles globally across the web application. This import is ignored on native platforms and supports hot reloading on the web.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js index.js\n// Applies the styles app-wide.\nimport 'emoji-mart/css/emoji-mart.css';\n```\n```\n\n----------------------------------------\n\nTITLE: Installing expo-crypto in bare React Native projects\nDESCRIPTION: Command to install the expo-crypto package using npx and expo CLI. This is used for adding the package to npm dependencies in bare React Native projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-crypto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Localization Functions\nDESCRIPTION: Example showing how to import the main localization functions getLocales and getCalendars from the expo-localization package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/localization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLocales, getCalendars } from 'expo-localization';\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component in React Native\nDESCRIPTION: Imports the RawH3 text component from the project's UI components library, used for displaying header text.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Modifying eas.json for Local Testing (Diff)\nDESCRIPTION: Shows the necessary changes within the `eas.json` file to enable local EAS build testing. It involves adding the `LOCAL_TESTING=1` environment variable to the `updates_testing_debug` build profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n--- a/packages/expo-updates/e2e/fixtures/project_files/eas.json\n+++ b/packages/expo-updates/e2e/fixtures/project_files/eas.json\n@@ -15,7 +15,8 @@\n     \"updates_testing_debug\": {\n       \"env\": {\n-        \"EX_UPDATES_NATIVE_DEBUG\": \"1\"\n+        \"EX_UPDATES_NATIVE_DEBUG\": \"1\",\n+        \"LOCAL_TESTING\": \"1\"\n       },\n       \"android\": {\n         \"gradleCommand\": \":app:assembleRelease :app:assembleAndroidTest -DtestBuildType=release\",\n```\n\n----------------------------------------\n\nTITLE: Improving nvm sourcing support in iOS shell scripts\nDESCRIPTION: This code improves support for nvm sourcing in iOS shell scripts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\n# Improved support of nvm sourcing in iOS shell scripts.\n```\n\n----------------------------------------\n\nTITLE: iOS Deployment Target Update\nDESCRIPTION: Configuration update setting minimum iOS deployment target to 15.1\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sensors/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nIPHONEOS_DEPLOYMENT_TARGET = 15.1\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Files\nDESCRIPTION: Command to remove all generated files from the project. This 'nuke' operation is useful for testing the setup scripts from a clean state.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn nuke\n```\n\n----------------------------------------\n\nTITLE: Configuring React Compiler in Babel Preset Expo\nDESCRIPTION: Example of how to configure the react-compiler option in babel-preset-expo. This setting is passed to babel-plugin-react-compiler and can be used to specify which files should be included in the React Compiler.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    'react-compiler': {\n      sources: (filename) => {\n        // Match file names to include in the React Compiler.\n        return filename.includes('src/path/to/dir');\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Package.json Build Script Configuration\nDESCRIPTION: Simple build script configuration for Vercel deployment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-nextjs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"next build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Update and Code Transformation\nDESCRIPTION: Command for updating React Native code in the Expo repository. This copies code from the React Native submodule and applies Expo-specific transformations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\net update-react-native\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Microphone Permissions\nDESCRIPTION: XML configuration to add microphone usage description to iOS Info.plist file\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to access your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Sourcing Login Scripts in iOS Shell File\nDESCRIPTION: The fix for a typo in the source-login-scripts.sh file. This change corrects a path reference from ~/zlogin to ~/.zlogin, improving support for sourcing shell login scripts in iOS build phases.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n~/zlogin\n```\n\n----------------------------------------\n\nTITLE: Presenting Notifications Using the Deprecated Method in TypeScript\nDESCRIPTION: Example of using the deprecated presentNotificationAsync method to display a notification to the user. This approach is no longer recommended.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Notifications from 'expo-notifications';\n\nNotifications.presentNotificationAsync({\n  title: 'Look at that notification',\n  body: \"I'm so proud of myself!\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android permissions for expo-image-picker\nDESCRIPTION: XML snippet showing the required Android permissions for using expo-image-picker in a bare React Native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Example Cache-Control HTTP Header\nDESCRIPTION: Example cache-control HTTP header for asset responses in Expo Updates. Recommends using a long duration cache setting since assets at specific URLs should not change.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ncache-control: public, max-age=31536000, immutable\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Profiles in eas.json\nDESCRIPTION: EAS configuration file that defines environment variables for different build profiles, setting APP_VARIANT to either 'development' or 'preview' depending on the profile being used.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/multiple-app-variants.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      /* @info Add <CODE>env.APP_VARIANT</CODE> to access the environment variable for the build profile*/\n      \"env\": {\n        \"APP_VARIANT\": \"development\"\n      }\n      /* @end */\n    },\n    \"preview\": {\n      \"distribution\": \"internal\",\n      /* @info Add <CODE>env.APP_VARIANT</CODE> to access the environment variable for the build profile*/\n      \"env\": {\n        \"APP_VARIANT\": \"preview\"\n      }\n      /* @end */\n    }\n    /* @hide ... */ /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting package cli and utils subpackages in Expo\nDESCRIPTION: This code adds support for package cli and utils subpackages, similar to plugins in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add support for package cli and utils subpackages (like plugins).\n```\n\n----------------------------------------\n\nTITLE: Updated ExpoConfig Type Definition\nDESCRIPTION: Corrected TypeScript type definition with fixed typo in documentation comment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The standard app config object defined in `app.json` and `app.config.js` files. For both\n * classic and modern manifests, whether they are embedded or remote.\n */\nexpoConfig: ExpoConfig | null;\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS Podfile for JS Engine Configuration\nDESCRIPTION: Diff showing changes to the iOS Podfile to check for JS engine configuration in Expo files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- a/ios/Podfile\n+++ b/ios/Podfile\n@@ -2,6 +2,9 @@ require File.join(File.dirname(`node --print \"require.resolve('expo/package.json\n require_relative '../node_modules/react-native/scripts/react_native_pods'\n require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'\n\n+require 'json'\n+podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}\n+\n platform :ios, '13.0'\n prepare_react_native_project!\n\n@@ -41,7 +44,7 @@ target 'MyApp' do\n     # Hermes is now enabled by default. Disable by setting this flag to false.\n     # Upcoming versions of React Native may rely on get_default_flags(), but\n     # we make it explicit here to aid in the React Native upgrade process.\n-    :hermes_enabled => flags[:hermes_enabled],\n+    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',\n     :fabric_enabled => flags[:fabric_enabled],\n     # Enables Flipper.\n     #\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Debugging Availability\nDESCRIPTION: This JSON snippet shows the expected response when checking debugging availability using the curl command. It includes information about available debugging sessions for Hermes and React Native.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-hermes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"0-2\",\n    \"description\": \"host.exp.Exponent\",\n    \"title\": \"Hermes ABI47_0_0React Native\",\n    \"faviconUrl\": \"https://react.dev/favicon.ico\",\n    \"devtoolsFrontendUrl\": \"devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D2\",\n    \"type\": \"node\",\n    \"webSocketDebuggerUrl\": \"ws://[::1]:8081/inspector/debug?device=0&page=2\",\n    \"vm\": \"Hermes\"\n  },\n  {\n    \"id\": \"0--1\",\n    \"description\": \"host.exp.Exponent\",\n    \"title\": \"React Native Experimental (Improved Chrome Reloads)\",\n    \"faviconUrl\": \"https://react.dev/favicon.ico\",\n    \"devtoolsFrontendUrl\": \"devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D-1\",\n    \"type\": \"node\",\n    \"webSocketDebuggerUrl\": \"ws://[::1]:8081/inspector/debug?device=0&page=-1\",\n    \"vm\": \"don't use\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Default iOS npm Registry Configuration in EAS Build\nDESCRIPTION: The default .npmrc configuration used by EAS Build on iOS, pointing to their self-hosted npm cache service.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/private-npm-packages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nregistry=http://10.254.24.8:4873\n```\n\n----------------------------------------\n\nTITLE: Installing expo-speech package via NPM\nDESCRIPTION: Command to install the expo-speech package using the Expo CLI in a React Native project. This should be run after ensuring the expo package is properly installed and configured.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-speech/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-speech\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Play Store Policy on Interpreted Code\nDESCRIPTION: This code snippet shows an excerpt from the Google Play Store policy regarding the use of interpreted code in Android applications. It outlines restrictions on downloading executable code and the use of interpreted languages like JavaScript.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n...an app may not download executable code (such as dex, JAR, .so files) from a\\nsource other than Google Play. This restriction does not apply to code that runs\\nin a virtual machine or an interpreter where either provides indirect access to\\nAndroid APIs (such as JavaScript in a webview or browser).\\n\\nApps or third-party code, like SDKs, with interpreted languages (JavaScript,\\nPython, Lua, etc.) loaded at run time (for example, not packaged with the app)\\nmust not allow potential violations of Google Play policies.\n```\n\n----------------------------------------\n\nTITLE: Adding source-login-scripts.sh vendoring tool\nDESCRIPTION: This code adds a vendoring tool for node binary resolution in Xcode build phases scripts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\n# Add `templates/scripts/source-login-scripts.sh` vendoring tool for node binary resolution in Xcode build phases scripts.\n```\n\n----------------------------------------\n\nTITLE: Running React Native Development Server\nDESCRIPTION: Starts the React Native development server for testing purposes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native start\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Compiler in Watch Mode\nDESCRIPTION: Command for running the TypeScript compiler in watch mode to monitor code changes and report errors during development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Unpublished Changes\nDESCRIPTION: Lists recent changes including iOS deployment target update, Android bug fixes, and internal improvements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-screen-capture/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1.\n\n### 🐛 Bug fixes\n\n- [Android] Fix `ScreenCaptureModule` was crashing in the dev-client when going back to the home screen.\n- Add missing `react` peer dependencies for isolated modules.\n\n### 💡 Others\n\n- Removed redundant usage of `EventEmitter` instance.\n- Updated hook from `useScreenCapturePermissions` to `usePermissions` in the example.\n```\n\n----------------------------------------\n\nTITLE: Fixing source-login-scripts.sh ~/zlogin typo\nDESCRIPTION: This code fixes a typo in the source-login-scripts.sh file related to ~/zlogin.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\n# Fixed `source-login-scripts.sh` ~/zlogin typo.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Document\nDESCRIPTION: Detailed version history tracking breaking changes, new features, bug fixes and other updates for the Expo project. The changelog follows semantic versioning and includes detailed PR references and contributor attributions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-client/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n- Add `addGeneratedScheme` config plugin option to disable automatic adding of dev client app scheme.\n```\n\n----------------------------------------\n\nTITLE: Uploading Crashlytics Symbols for Android with Fastlane\nDESCRIPTION: Command to execute the upload_crashlytics_symbols lane for Android, which uploads debug symbols to Firebase Crashlytics for better crash reporting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android upload_crashlytics_symbols\n```\n\n----------------------------------------\n\nTITLE: Naming async functions with Async suffix in JavaScript\nDESCRIPTION: Example of the recommended naming convention for async functions, using the 'Async' suffix to indicate that the function returns a Promise and may complete asynchronously.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT\nasync function fetchAccountAsync(accountId: ID): Promise<Account> { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding 'use client' Directive for React Client Components\nDESCRIPTION: This snippet demonstrates the addition of the 'use client' directive to mark React client components, enhancing compatibility with React Server Components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-linear-gradient/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build for Project\nDESCRIPTION: This command creates an EAS configuration in the project, setting up the necessary build settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Creating Local Config Plugins\nDESCRIPTION: Shows how to create and use local config plugins as separate modules to improve fingerprinting consistency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// In ./plugins/withMyPlugin.js\nconst { withInfoPlist } = require('expo/config-plugins');\n\nconst withMyPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults.NSLocationWhenInUseUsageDescription =\n      'Allow $(PRODUCT_NAME) to use your location';\n    return config;\n  });\n};\n\nmodule.exports = withMyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running the Documentation Server\nDESCRIPTION: Commands to install dependencies and start the Next.js documentation server on port 3002, which is necessary for previewing and editing the project documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Title and Description in HTML/Markdown\nDESCRIPTION: This snippet shows how to create a centered title and description for the @expo/config-plugins project using HTML and Markdown syntax. It includes badges for package installation size and weekly downloads.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config-plugins/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1 align=\"center\">\n👋 Welcome to <br><code>@expo/config-plugins</code>\n</h1>\n\n<p align=\"center\">A powerful tool for generating native app code from a unified JavaScript interface.</p>\n\n<p align=\"center\">\n  <img src=\"https://flat.badgen.net/packagephobia/install/@expo/config-plugins\">\n\n  <a href=\"https://www.npmjs.com/package/@expo/config-plugins\">\n    <img src=\"https://flat.badgen.net/npm/dw/@expo/config-plugins\" target=\"_blank\" />\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring permissions in Expo config plugin\nDESCRIPTION: The config plugin now supports disabling permissions by passing false instead of permission messages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-picker/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In app.config.js\nexport default {\n  plugins: [\n    [\n      'expo-image-picker',\n      {\n        photosPermission: false, // Disable photos permission\n        cameraPermission: false // Disable camera permission \n      }\n    ]\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Installing expo-sms Package via NPM\nDESCRIPTION: Command to install the expo-sms package using npx expo install in a React Native or Expo project\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-sms\n```\n\n----------------------------------------\n\nTITLE: Data to Uint8Array Conversion for iOS in Expo\nDESCRIPTION: This update adds support for converting between Data and Uint8Array types on iOS platforms in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSData *data = ...;\nUint8Array *uint8Array = [ExpoConverters dataToUint8Array:data];\n```\n\n----------------------------------------\n\nTITLE: Importing Custom BoxLink Component\nDESCRIPTION: Import statement for the BoxLink component from the local UI components directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/billing/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Jest Test Case in JavaScript\nDESCRIPTION: This JavaScript snippet provides a minimal example of a Jest test case suitable for an `Example-test.js` file within a `__tests__` directory. It uses the `it` function to define a test named 'works' and the `expect` function with the `toBe` matcher to assert that 1 equals 1.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/jest-expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nit('works', () => {\n  expect(1).toBe(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Technical Bug Fixes and Updates\nDESCRIPTION: Various technical fixes and improvements made to the Expo framework functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Fixed splash screen is missing when using the `getDelayLoadAppHandler()` from expo-updates\n- Use node module resolution when invoking `@expo/cli` from `expo`\n- Added support for React Native 0.72.1\n- Fixed Android build warnings for Gradle version 8\n```\n\n----------------------------------------\n\nTITLE: Installing expo-sqlite Package\nDESCRIPTION: Command to install the expo-sqlite package using npx expo install in a React Native project\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sqlite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-sqlite\n```\n\n----------------------------------------\n\nTITLE: Build Script Configuration for Service Worker\nDESCRIPTION: Package.json configuration for building web assets and generating service worker configuration using workbox-cli.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/migrate/from-expo-webpack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build:web\": \"expo export -p web && npx workbox-cli generateSW workbox-config.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Deployment Target in Expo Clipboard Module\nDESCRIPTION: This code snippet shows the commit that bumped the iOS deployment target to 15.1 for the Expo Clipboard module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-clipboard/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Bumped iOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840), [#30860](https://github.com/expo/expo/pull/30860) by [@tsapeta](https://github.com/tsapeta))\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Statistics for Expo Config in HTML\nDESCRIPTION: This HTML snippet shows package statistics for @expo/config, including installation size and weekly downloads, using badges from badgen.net and a link to npm.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config/README.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <img src=\"https://flat.badgen.net/packagephobia/install/@expo/config\">\n\n  <a href=\"https://www.npmjs.com/package/@expo/config\">\n    <img src=\"https://flat.badgen.net/npm/dw/@expo/config\" target=\"_blank\" />\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Complete Apple App Store Review Configuration\nDESCRIPTION: Comprehensive review information including contact details, demo credentials, and additional notes for the App Store review team.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"review\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john@example.com\",\n      \"phone\": \"+1 123 456 7890\",\n      \"demoUsername\": \"john\",\n      \"demoPassword\": \"applereview\",\n      \"demoRequired\": false,\n      \"notes\": \"This is an example app primarily used for educational purposes.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Unlock Command for Expo Secrets (Shell)\nDESCRIPTION: This command decrypts the secrets stored in the repository using `git-crypt`. It requires the user to have a decryption key and full-disk encryption (FileVault 2) enabled. If the user lacks the key, the command will provide instructions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/secrets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nunlock\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Expo Projects\nDESCRIPTION: Example of ESLint configuration specifically for Expo projects using the universe/native config.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"eslintConfig\": {\n  \"extends\": \"universe/native\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running iOS prepare_schemes Fastlane Action\nDESCRIPTION: Command to execute the prepare_schemes lane for iOS, which likely sets up the necessary Xcode scheme configurations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios prepare_schemes\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Expo Lint Command\nDESCRIPTION: This snippet shows how to update the 'lint' script in package.json to use the 'expo lint' command for SDK 51 and above.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    /* @info */\n    \"lint\": \"expo lint\"\n    /* @end */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using new VideoFullscreenUpdate enum in React Native\nDESCRIPTION: Replaces static constants with a new VideoFullscreenUpdate enum for fullscreen update events.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { VideoFullscreenUpdate } from 'expo-av';\n\n// Usage\nif (update === VideoFullscreenUpdate.PLAYER_WILL_PRESENT) {\n  // Handle fullscreen presentation\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for Local EAS Builds (Bash)\nDESCRIPTION: Configures the shell environment for running EAS builds locally using the `eas-build` repository. It sets paths for the `eas-build` home directory, the local build plugin, the working directory, and build artifacts, and ensures the working directory is cleared before starting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nexport EAS_LOCAL_BUILD_HOME=<the eas-build directory that you just cloned above>\n\nexport EAS_LOCAL_BUILD_PLUGIN_PATH=$EAS_LOCAL_BUILD_HOME/bin/eas-cli-local-build-plugin\nexport EAS_LOCAL_BUILD_WORKINGDIR=$TMPDIR/eas-build-workingdir\nexport EAS_LOCAL_BUILD_SKIP_CLEANUP=1\nexport EAS_LOCAL_BUILD_ARTIFACTS_DIR=$TMPDIR/eas-build-workingdir/results\n\nrm -rf $EAS_LOCAL_BUILD_WORKINGDIR\n```\n\n----------------------------------------\n\nTITLE: Adding Module to CircleCI Configuration\nDESCRIPTION: Demonstrates how to add the module's tests to CircleCI workflow for continuous integration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- yarn:\n    command: test --maxWorkers 1\n    working_directory: ~/expo/packages/expo-sms\n```\n\n----------------------------------------\n\nTITLE: Importing Schema and Component for Expo Config Documentation\nDESCRIPTION: Imports a JSON schema file and a custom React component used to display the configuration properties table.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport schema from '~/public/static/schemas/unversioned/app-config-schema.json';\nimport AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update Channels in JSON\nDESCRIPTION: Defines production and staging channels in eas.json configuration file for EAS Update deployment.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"channel\": \"production\"\n    },\n    \"staging\": {\n      \"channel\": \"staging\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Command for iOS Simulator\nDESCRIPTION: Terminal command to initiate an iOS build using the preview profile in EAS Build system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/simulators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build -p ios --profile preview\n```\n\n----------------------------------------\n\nTITLE: Documentation Generation\nDESCRIPTION: Commands for generating new SDK documentation, including API data and schema synchronization for the docs site.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\net generate-docs-api-data\n```\n\nLANGUAGE: bash\nCODE:\n```\net generate-sdk-docs --sdk XX.X.X\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run schema-sync XX\n```\n\n----------------------------------------\n\nTITLE: Listing EAS Webhooks via Command Line\nDESCRIPTION: Command to list all webhooks configured for the project, displaying their IDs and other details.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/webhooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ eas webhook:list\n```\n\n----------------------------------------\n\nTITLE: Setting App Store Genre for Bluesky Mobile App\nDESCRIPTION: This code snippet specifies the App Store genre for the Bluesky mobile application. It sets the genre to 'Productivity', which categorizes the app in the App Store and helps users find it more easily.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/metadata/primary_category.txt#2025-04-22_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nMZGenre.Productivity\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Packages Command\nDESCRIPTION: Command to install compatible versions of Expo packages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom App Entry in package.json - JSON\nDESCRIPTION: This JSON snippet shows how to set the \\\"main\\\" field in package.json to customize the entry point of a React Native project. This allows developers to use a custom root JavaScript file (such as src/main.js) instead of the default App.js. No dependencies are needed beyond a valid Node.js/Expo project structure. The main field should point to the desired root file, which must invoke registerRootComponent.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/register-root-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"main\\\": \\\"src/main.js\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic App Release in Apple App Store\nDESCRIPTION: Configuration for scheduling automatic app release after store approval. This example schedules the release for December 25th, 2022 UTC.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"release\": {\n      \"automaticRelease\": \"2022-12-25T00:00:00+00:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Gradle Settings\nDESCRIPTION: This code change removes deprecated backward-compatible Gradle settings for Android builds, potentially affecting the build process for older projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-linear-gradient/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\n// Removed deprecated backward compatible Gradle settings\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Kotlin\nDESCRIPTION: Sets constant properties on the module. Can be passed as arguments or returned by a closure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Passed as arguments\nConstants(\n  \"PI\" to kotlin.math.PI\n)\n\n// or returned by the closure\nConstants {\n  return@Constants mapOf(\n    \"PI\" to kotlin.math.PI\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Picker Plugin in app.json\nDESCRIPTION: Configuration example for expo-image-picker plugin showing how to set custom photos permission message\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"The app accesses your photos to let you share them with your friends.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Example Project\nDESCRIPTION: Commands to build the TypeScript module and run the example project on iOS or Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/config-plugin-and-native-module-tutorial.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run this in the root of the project to start the TypeScript compiler\n$ npm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd example\n# Run the example app on iOS\n$ npx expo run:ios\n# Run the example app on Android\n$ npx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Selectors\nDESCRIPTION: Demonstrates how to add theme-based selectors to components for dynamic styling based on theme mode.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Heading = create(RNText, {\n  variants: {\n    // ....\n  },\n  selectors: {\n    // when device theme is 'light'...\n    light: {\n      color: {\n        // ...any `Heading` with `color=\"success\"`...\n        success: {\n          // ...will have these styles applied\n          color: 'green',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Prettier Configuration\nDESCRIPTION: Example of a .prettierrc file for customizing Prettier settings in a project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"printWidth\": 100,\n  \"tabWidth\": 2,\n  \"singleQuote\": true,\n  \"bracketSameLine\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @expo/package-manager with Yarn\nDESCRIPTION: This command installs the @expo/package-manager package using Yarn. It adds the package to the project's dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/package-manager/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @expo/package-manager\n```\n\n----------------------------------------\n\nTITLE: Fixing Android Intent Handling for Notification Response\nDESCRIPTION: Removed the requirement to define `CATEGORY_DEFAULT` on an Android `Activity` that handles the `expo.modules.notifications.OPEN_APP_ACTION` intent. This simplifies the setup for handling notification responses when the app is opened.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCATEGORY_DEFAULT\n```\n\nLANGUAGE: java\nCODE:\n```\nActivity\n```\n\nLANGUAGE: java\nCODE:\n```\nexpo.modules.notifications.OPEN_APP_ACTION\n```\n\n----------------------------------------\n\nTITLE: Installing expo-file-system Package Reference\nDESCRIPTION: Import statement showing how to include the expo-file-system package in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport APISection from '~/components/plugins/APISection';\nimport { APIInstallSection } from '~/components/plugins/InstallSection';\n```\n\n----------------------------------------\n\nTITLE: Updating Versions Endpoint\nDESCRIPTION: Commands for updating the versions endpoint with iOS/Android version information.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\net update-versions-endpoint -k 'iosVersion' -v '2.19.3' --root\net update-versions-endpoint -k 'iosUrl' -v 'https://dpq5q02fu5f55.cloudfront.net/Exponent-2.19.3.tar.gz' --root\n```\n\n----------------------------------------\n\nTITLE: Running iOS E2E Tests with Detox (Bash)\nDESCRIPTION: A sequence of commands to execute the E2E tests on an iOS simulator using Detox. It first installs native dependencies using CocoaPods (`npx pod-install`), then builds the debug version of the app configured for Detox (`yarn detox:ios:debug:build`), and finally runs the Detox tests (`yarn detox:ios:debug:test`). Assumes an iPhone 14 simulator is running.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\nyarn detox:ios:debug:build\nyarn detox:ios:debug:test\n```\n\n----------------------------------------\n\nTITLE: Importing Keep Awake Module\nDESCRIPTION: Example showing how to import the main KeepAwake module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/keep-awake.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport KeepAwake from 'expo-keep-awake';\n```\n\n----------------------------------------\n\nTITLE: Updating commander dependency in Expo\nDESCRIPTION: This code updates the 'commander' dependency in the Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Update `commander` dependency.\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component in React Native Expo\nDESCRIPTION: This snippet shows how to import the RawH3 component from the project's Text component library. This is likely used for styling headings with custom fonts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/fonts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Linking for iOS in Info.plist\nDESCRIPTION: XML configuration to add URL types and schemes in the iOS Info.plist file for deep linking support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-auth-session/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n    ...\n    <key>CFBundleURLTypes</key>\n    <array>\n        <dict>\n            <key>CFBundleURLName</key>\n            <string>gizmos</string>\n            <key>CFBundleURLSchemes</key>\n            <array>\n                <string>example</string>\n            </array>\n        </dict>\n    </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in React Native/Expo\nDESCRIPTION: Imports the RawH3 text component from the project's UI components directory. This component is likely used for rendering heading level 3 text elements in the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/navigation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Using yarn exec for npm script compatibility\nDESCRIPTION: Demonstrates the use of yarn exec to ensure consistent PATH behavior between Yarn and npm when running package scripts. This approach helps maintain compatibility across both package managers by letting Yarn handle PATH augmentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Test with both Yarn and npm\n\nWhile Yarn is required to install packages in the Expo repo, we use npm to publish packages. For scripts that run when publishing, make sure to test them with both Yarn and npm.\n\nOne significant difference is that Yarn adds the workspace root and package's .bin directories to `PATH`. We need to do the same for npm so that it finds installed scripts in the same places. A simple way to do this is to run commands with `yarn exec` to let Yarn augment `PATH` before executing the given command.\n```\n\n----------------------------------------\n\nTITLE: Fixing with-node.sh quote handling\nDESCRIPTION: This code fixes the with-node.sh script to keep quotes when passing arguments to Node.js, preventing build errors when there are spaces in target names.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\n# Fixed _with-node.sh_ doesn't keep quotes when passing arguments to Node.js and caused build errors when there are spaces in target name.\n```\n\n----------------------------------------\n\nTITLE: Importing Google Auth Provider\nDESCRIPTION: Import statement for using Google authentication provider with AuthSession. Note that this provider is marked as deprecated.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/auth-session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Google from 'expo-auth-session/providers/google';\n```\n\n----------------------------------------\n\nTITLE: Configuring Typed Routes in app.json\nDESCRIPTION: JSON configuration to enable typed routes experiment in Expo Router\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"experiments\": {\n      \"typedRoutes\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing QR Code Component in React\nDESCRIPTION: Imports the QRCodeReact component from the 'react-qr-code' library for displaying QR codes in a React application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalExpoGo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport QRCodeReact from 'react-qr-code';\n```\n\n----------------------------------------\n\nTITLE: Push Receipts Response Format\nDESCRIPTION: Example of a successful push receipts response showing status for multiple receipt IDs\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\": { \"status\": \"ok\" },\n    \"ZZZZZZZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ\": { \"status\": \"ok\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom StatusBar Color in Android SplashScreen\nDESCRIPTION: This snippet demonstrates how to create a custom color resource for the StatusBar in the colors.xml file that can be used to set the StatusBar background color during SplashScreen display.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n  <resources>\n    <color name=\"splashscreen_background\">#D0D0C0</color>\n+   <color name=\"splashscreen_statusbar_color\">#(AA)RRGGBB</color> <!-- #AARRGGBB or #RRGGBB format -->\n  </resources>\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Swift\nDESCRIPTION: Sets constant properties on the module. Can take a dictionary or a closure that returns a dictionary.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// Created from the dictionary\nConstants([\n  \"PI\": Double.pi\n])\n\n// or returned by the closure\nConstants {\n  return [\n    \"PI\": Double.pi\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Update for New SDK Version\nDESCRIPTION: Commands for updating the schema files for a new SDK version. This involves copying the unversioned schema to create a version-specific schema file and deploying it.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd server/www/xdl-schemas\n```\n\nLANGUAGE: bash\nCODE:\n```\ncp UNVERSIONED-schema.json XX.X.X-schema.json\n```\n\n----------------------------------------\n\nTITLE: Rendering Talks Grid in JSX\nDESCRIPTION: This JSX snippet renders a grid of talks using the TalkGridWrapper and TalkGridCell components. It maps over the TALKS array to create individual cells for each talk.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/additional-resources/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<TalkGridWrapper>\n  {TALKS.map(talk => (\n    <TalkGridCell key={talk.videoId} {...talk} />\n  ))}\n</TalkGridWrapper>\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Bypass Hosts in Charles\nDESCRIPTION: List of hosts to bypass external proxies in Charles proxy configuration. Includes localhost and .local domains.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/proxies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlocalhost\n*.local\n```\n\n----------------------------------------\n\nTITLE: Exporting Web App with Expo CLI\nDESCRIPTION: Terminal command for exporting the JavaScript and assets for a web app using webpack. Includes options for development mode and clearing the bundler cache.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_20\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo export:web\n```\n\n----------------------------------------\n\nTITLE: Full Changelog Documentation\nDESCRIPTION: Complete version history for Expo Contacts module tracking all changes including breaking changes, new features, bug fixes and other updates made across multiple versions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n- Fixed an issue where the `requestPermissionsAsync` promise throws when denying access to contacts on iOS.\n- Fixed an issue where the `presentFormAsync` promise doesn't resolve when the form is closed on Android.\n- Fixed an issue where the `presentContactPickerAsync` promise doesn't resolve when using the Android back button.\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1.\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n- Fixed an issue where only paths of urls were stored in contacts and social profiles were only stored when all fields were filled.\n- Fixed an iOS issue where the Cancel button is not visible on the unknown contact form.\n- Add missing `react-native` peer dependencies for isolated modules.\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Entry Points for TypeScript\nDESCRIPTION: Shows required changes to package.json to specify the main JavaScript file and TypeScript type definitions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- \"main\": \"index.js\",\n\n+ \"main\": \"build/<MODULE NAME>.js\",\n+ \"types\": \"build/<MODULE NAME>.d.ts\",\n```\n\n----------------------------------------\n\nTITLE: Rendering RawH3 Component with 'hooks' Text in JSX\nDESCRIPTION: This JSX snippet renders the RawH3 component with the text 'hooks'. It's used to create a heading for a section about React Hooks in the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>hooks</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Rendering RawH3 Component with JSX in React Native\nDESCRIPTION: This JSX code renders the RawH3 component with the text 'package.json'. It's used to display a heading for the package.json file description in the Bluesky Social Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/package-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>package.json</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for SDK 25 Upgrade\nDESCRIPTION: JSON configuration changes required in package.json when upgrading to Expo SDK 25. Updates React Native, Expo, and React to their compatible versions for SDK 25.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-25.0.0.tar.gz\",\n  \"expo\": \"^25.0.0\",\n  \"react\": \"16.2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Jest to v29\nDESCRIPTION: This code upgrades the Jest library to version 29.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Upgrade jest to v29.\n```\n\n----------------------------------------\n\nTITLE: Defining YearlyTriggerInput Interface in TypeScript\nDESCRIPTION: Defines an interface for yearly notification triggers. This allows scheduling notifications to be delivered on a specific day of a specific month at a specific time, repeating every year.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface YearlyTriggerInput {\n  channelId?: string;\n  day: number;\n  month: number;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating settings.gradle for Android\nDESCRIPTION: Modifies the settings.gradle file to include Expo module autolinking configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\napply from: new File([\"node\", \"--print\", \"require.resolve('expo/package.json')\"].execute(null, rootDir).text.trim(), \"../scripts/autolinking.gradle\");\nuseExpoModules()\n\ninclude ':app'\nincludeBuild(\"../node_modules/@react-native/gradle-plugin\")\n```\n\n----------------------------------------\n\nTITLE: Running Linter on ESLint Configuration\nDESCRIPTION: Command to run the project's linter on itself, ensuring consistent code formatting and testing the linter configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Configuration for Migration\nDESCRIPTION: This snippet demonstrates how to update the .eslintrc.js file when migrating from eslint-config-universe to eslint-config-expo.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /* @info Replace the extends key with the new configuration. */\n  extends: 'expo',\n  /* @end */\n  /* @hide ...*/ /* @end */\n};\n```\n\n----------------------------------------\n\nTITLE: Running Expo SDK Tests, Lint, and TypeScript\nDESCRIPTION: Commands for running unit tests, linting, and TypeScript type checking in the Expo SDK project. These are essential steps for maintaining code quality and ensuring compatibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn test  # This starts the test watcher\nyarn lint\nyarn tsc\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component for Image Selection\nDESCRIPTION: Adding an onPress prop to the Button component to set showAppOptions to true when the button is clicked.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n```\n\n----------------------------------------\n\nTITLE: iOS iCloud Entitlements Configuration\nDESCRIPTION: Manual configuration of iOS entitlements for iCloud service with CloudKit support. Defines container identifiers and iCloud services for document storage.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.icloud-services</key>\n<array>\n    <string>CloudDocuments</string>\n</array>\n<key>com.apple.developer.ubiquity-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\n```\n\n----------------------------------------\n\nTITLE: React Component Usage with 'use client' Directive\nDESCRIPTION: Example showing the 'use client' directive being added to React client components for improved React Server Components support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-blur/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use client\"\n```\n\n----------------------------------------\n\nTITLE: Rendering BoxLink Components in JSX for Expo Introduction\nDESCRIPTION: This code snippet renders two BoxLink components, which are likely custom UI elements. The components display options for getting started with Expo development, including automated setup and quick start documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/get-started/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Automated setup with expo.new\"\n  description=\"Create a project, set up your development environment, automatically configure build and update automations, and start developing.\"\n  href=\"https://expo.new/\"\n  Icon={Earth02Icon}\n/>\n\n<BoxLink\n  title=\"Quick start docs\"\n  description=\"Create a project, set up your development environment, and start developing.\"\n  href=\"/get-started/create-a-project/\"\n  Icon={BookOpen02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Test Mocking Imports\nDESCRIPTION: Shows how to migrate from custom test mocking utilities to jest-expo's utilities.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { mockPlatformWeb } from '../../test/mocking';\n\n+ import { mockPlatformWeb } from 'jest-expo';\n```\n\n----------------------------------------\n\nTITLE: Referencing standard .env formats in Markdown\nDESCRIPTION: A markdown link that references the standard .env file formats supported by the @expo/env module. The link directs to the dotenv GitHub repository documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/env/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[standard .env formats](https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use)\n```\n\n----------------------------------------\n\nTITLE: Example Result Object from launchImageLibraryAsync (JSON)\nDESCRIPTION: This JSON object shows an example structure returned by `ImagePicker.launchImageLibraryAsync` upon successful image selection (when `result.canceled` is false). It contains an `assets` array with details about the selected media, including its local `uri`, dimensions (`width`, `height`), `type`, and other metadata. The `canceled` flag indicates whether the user completed the selection process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"assetId\": \"C166F9F5-B5FE-4501-9531\",\n      \"base64\": null,\n      \"duration\": null,\n      \"exif\": null,\n      \"fileName\": \"IMG.HEIC\",\n      \"fileSize\": 6018901,\n      \"height\": 3025,\n      \"type\": \"image\",\n      \"uri\": \"file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg\"\n      \"width\": 3024\n    }\n  ],\n  \"canceled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Linking EAS Update Branch to Production Channel\nDESCRIPTION: Command to edit the production channel to use a specific version branch for updates. This allows for controlled rollout of updates to production builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/how-it-works.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:edit production --branch version-2.0\n```\n\n----------------------------------------\n\nTITLE: Analyzing Android Build Warnings\nDESCRIPTION: This snippet demonstrates typical warning messages in Android build logs. These stderr entries show deprecation warnings that don't necessarily cause build failures but provide information about potential issues in native dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/troubleshooting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[stderr] Note: /build/workingdir/build/app/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java uses or overrides a deprecated API.\n[stderr] Note: Recompile with -Xlint:deprecation for details.\n```\n\n----------------------------------------\n\nTITLE: Omitting Async suffix for synchronous Promise-returning functions\nDESCRIPTION: Demonstrates when it might be appropriate to omit the 'Async' suffix for functions that do synchronous work but return Promises, especially when the primary purpose is manipulating Promise objects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// OK\nfunction multiplexPromises(promises: Promise<*>[]): Promise<Array<* | Error>> {\n  // Given an array of promises, returns a promise that resolves to an array of\n  // promise results or errors. Semantically, this function doesn't do asynchronous\n  // work itself and the reader sees it operates on promises that do the actual work.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingerprint with fingerprint.config.js\nDESCRIPTION: Shows how to create a fingerprint.config.js file to customize fingerprinting behavior, including skipping certain sources.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@expo/fingerprint').Config} */\nconst config = {\n  sourceSkips: [\n    'ExpoConfigRuntimeVersionIfString',\n    'ExpoConfigVersions',\n    'PackageJsonAndroidAndIosScriptsIfNotContainRun',\n  ],\n};\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK and Java versions\nDESCRIPTION: Updates the Android compileSdkVersion and targetSdkVersion to 31, and sets the Java version to 11.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-file-system/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nOn Android bump `compileSdkVersion` to `31`, `targetSdkVersion` to `31` and `Java` version to `11`.\n```\n\n----------------------------------------\n\nTITLE: Rendering RawH3 Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the usage of the imported RawH3 component to display the text 'assets'. It's likely part of a React Native component that describes the assets folder.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/assets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>assets</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Updating Dev Launcher Host in Android\nDESCRIPTION: This code snippet shows how to update the DEV_LAUNCHER_HOST value in the DevLauncherController.kt file to point to a local bundler URL for Android development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/README.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n- private val DEV_LAUNCHER_HOST: String? = null\n+ private val DEV_LAUNCHER_HOST: String? = \"10.0.2.2:8090\";\n```\n\n----------------------------------------\n\nTITLE: Pre-filling Contact Form\nDESCRIPTION: Bug fix for the Contacts.presentFormAsync method. This update improves the pre-filling functionality of the contact form when presented to the user.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-contacts/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nContacts.presentFormAsync(contactData)\n```\n\n----------------------------------------\n\nTITLE: Updating a Key in the Versions Endpoint Using CLI\nDESCRIPTION: Command to update a specific key in the versions endpoint for a particular SDK version on the staging environment. This will show a diff of the changes for approval before committing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Versions Endpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\net update-versions-endpoint --sdkVersion=35.0.0 --key=\"myKey\" --value=\"myValue\"\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components in JavaScript\nDESCRIPTION: This snippet imports custom components and modules used throughout the file for rendering instructions and UI elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AndroidEmulatorInstructions from './_androidEmulatorInstructions.mdx';\nimport AndroidStudioInstructions from './_androidStudioInstructions.mdx';\nimport { BuildEnvironmentSwitch } from '../BuildEnvironmentSwitch';\n\nimport { Terminal } from '~/ui/components/Snippet';\nimport { Step } from '~/ui/components/Step';\n```\n\n----------------------------------------\n\nTITLE: Box Link Component Usage for Enterprise Support\nDESCRIPTION: JSX implementation of the BoxLink component linking to enterprise support features with icon and description.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/billing/plans.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"Enterprise Support features\"\n  description=\"See a complete list of features of the Enterprise Support add-on.\"\n  href=\"https://expo.dev/eas/enterprise-support\"\n  Icon={CreditCard02Icon}\n/>\n```\n\n----------------------------------------\n\nTITLE: Upgrading glob Package in Expo CLI\nDESCRIPTION: This change upgrades the 'glob' package from version 7 to version 10 in the Expo CLI project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config-plugins/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Upgrade `glob@7` to `glob@10`. ([#29894](https://github.com/expo/expo/pull/29894) by [@byCedric](https://github.com/byCedric))\n```\n\n----------------------------------------\n\nTITLE: Documenting Change History with Markdown\nDESCRIPTION: This Markdown snippet illustrates a canonical changelog structure for project documentation, including headings for versioning, features, bug fixes, and other updates. There are no programming logic or dependencies involved. Markdown syntax is used to represent hierarchy, bullet lists, and formatting, with links for contributors and pull requests where relevant. The input and output consist only of human-readable documentation; no code is executed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-video/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\\n\\n## Unpublished\\n\\n### 🛠 Breaking changes\\n\\n- Bumped iOS and tvOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840), [#30859](https://github.com/expo/expo/pull/30859) by [@tsapeta](https://github.com/tsapeta))\\n- `showNowPlayingNotification` property of the player now defaults to `false`. ([#31261](https://github.com/expo/expo/pull/31261) by [@behenate](https://github.com/behenate))\\n\\n### 🎉 New features\\n\\n- [Android][iOS] Add properties for more advanced live stream configuration. ([#30648](https://github.com/expo/expo/pull/30648) by [@justjoostnl](https://github.com/justjoostnl))\\n- [iOS] Add live indicator in the now playing info. ([#30629](https://github.com/expo/expo/pull/30629) by [@justjoostnl](https://github.com/justjoostnl))\\n- [iOS] Add 'allowsExternalPlayback' property to control the AirPlay to stream video or mirror the screen. ([#30436](https://github.com/expo/expo/pull/30436) by [@adsalihac](https://github.com/adsalihac))\\n- Add fullscreen enter and exit events. ([#30922](https://github.com/expo/expo/pull/30922) by [@fobos531](https://github.com/fobos531))\\n- [iOS] Fixed `player.currentTime` being `NaN` when source is not provided and `player.duration` being `NaN` inside the hook callback when the source is updated. ([#31011](https://github.com/expo/expo/pull/31011) by [@AlirezaHadjar](https://github.com/AlirezaHadjar))\\n- Add support for playback of local assets imported with the `require` function. ([#30837](https://github.com/expo/expo/pull/30837) by [@behenate](https://github.com/behenate))\\n\\n### 🐛 Bug fixes\\n\\n- [Android] Fix support for local file playback. ([#30472](https://github.com/expo/expo/pull/30472) by [@behenate](https://github.com/behenate))\\n- Only import from `expo/config-plugins` to follow proper dependency chains. ([#30499](https://github.com/expo/expo/pull/30499) by [@byCedric](https://github.com/byCedric))\\n- [Android] Fix wrong event being sent when the volume is changed. ([#30891](https://github.com/expo/expo/pull/30891) by [@behenate](https://github.com/behenate))\\n\\n### 💡 Others\\n\\n- Bump media3 version to 1.4.0. ([#31239](https://github.com/expo/expo/pull/31239) by [@behenate](https://github.com/behenate))\\n\\n### ⚠️ Notices\\n\\n- Added support for React Native 0.75.x. ([#30034](https://github.com/expo/expo/pull/30034) by [@gabrieldonadel](https://github.com/gabrieldonadel))\\n\\n## 1.2.4 - 2024-07-30\\n\\n### 🐛 Bug fixes\\n\\n- [Android] Fix Audio Manager pausing player on the wrong thread and conflicts between players. ([#30453](https://github.com/expo/expo/pull/30453) by [@behenate](https://github.com/behenate))\\n\\n### 💡 Others\\n\\n- [Android] Refactor `VideoPlayer.kt`, organize files ([#30452](https://github.com/expo/expo/pull/30452) by [@behenate](https://github.com/behenate))\\n\\n## 1.2.3 - 2024-07-11\\n\\n### 🛠 Breaking changes\\n\\n- [Android][iOS] Now Picture in Picture has to be enabled via the config plugin to work. ([#30068](https://github.com/expo/expo/pull/30068) by [@behenate](https://github.com/behenate))\\n\\n### 🎉 New features\\n\\n- [Web] Add support for events. ([#29742](https://github.com/expo/expo/pull/29742) by [@behenate](https://github.com/behenate))\\n- [iOS] Add ability to disable live text interaction. ([#30093](https://github.com/expo/expo/pull/30093) by [@fobos531](https://github.com/fobos531))\\n\\n### 🐛 Bug fixes\\n\\n- [Web] Fix `AudioContext` being created before user interaction causing playback issues. ([#29695](https://github.com/expo/expo/pull/29695) by [@behenate](https://github.com/behenate))\\n- [iOS] Fix a race condition causing crashes when deallocating the player. ([#30022](https://github.com/expo/expo/pull/30022) by [@behenate](https://github.com/behenate))\\n- Add missing `react` and `react-native` peer dependencies for isolated modules. ([#30489](https://github.com/expo/expo/pull/30489) by [@byCedric](https://github.com/byCedric))\\n\\n## 1.2.2 - 2024-07-03\\n\\n### 🐛 Bug fixes\\n\\n- [iOS] Fix crashes on iOS 16 and lower when source HTTP headers are undefined. ([#30104](https://github.com/expo/expo/pull/30104) by [@behenate](https://github.com/behenate))\\n\\n## 1.2.1 - 2024-06-27\\n\\n### 🎉 New features\\n\\n- [iOS] Support Apple TV. ([#29560](https://github.com/expo/expo/pull/29560) by [@douglowder](https://github.com/douglowder))\\n\\n## 1.2.0 - 2024-06-20\\n\\n### 🎉 New features\\n\\n- Add `isLive` property on all platforms. ([#28903](https://github.com/expo/expo/pull/28903) by [@justjoostnl](https://github.com/justjoostnl))\\n- [iOS] Add base64 certificate support for FairPlay DRM. ([#28990](https://github.com/expo/expo/pull/28990) by [@behenate](https://github.com/behenate))\\n- [Android][iOS] Add support for request headers to in the video source. ([#29539](https://github.com/expo/expo/pull/29539) by [@behenate](https://github.com/behenate))\\n\\n### 🐛 Bug fixes\\n\\n- [Android] Fix wrong content fit \"fill\" and \"cover\". ([#29364](https://github.com/expo/expo/pull/29364) by [@RRaideRR](https://github.com/RRaideRR))\\n- [iOS] Fix player status property always returning `undefined` on iOS. ([#29505](https://github.com/expo/expo/pull/29505) by [@behenate](https://github.com/behenate))\\n- [Android] Fix `VideoPlayer.replace` not working when the previous source caused an error. ([#29598](https://github.com/expo/expo/pull/29598) by [@lukmccall](https://github.com/lukmccall))\\n- [Web] Fix default behavior for `nativeControls` to match documentation. ([#29667](https://github.com/expo/expo/pull/29667) by [@nahn20](https://github.com/nahn20))\\n- [iOS] Fix crashes when creating new players. ([#29428](https://github.com/expo/expo/pull/29428) by [@behenate](https://github.com/behenate))\\n- Fix errors on setting a null video source. ([#29613](https://github.com/expo/expo/pull/29613) by [@behenate](https://github.com/behenate))\\n\\n### 💡 Others\\n\\n- [iOS] Make appropriate references weak in `VideoPlayerObserver`. ([#29427](https://github.com/expo/expo/pull/29427) by [@behenate](https://github.com/behenate))\\n\\n## 1.1.10 - 2024-05-29\\n\\n### 💡 Others\\n\\n- [Android] Improve HLS compatibility. ([#28997](https://github.com/expo/expo/pull/28997) by [@behenate](https://github.com/behenate))\\n\\n## 1.1.9 — 2024-05-13\\n\\n### 🎉 New features\\n\\n- Add `duration` property on all platforms. ([#28576](https://github.com/expo/expo/pull/28576) by [@justjoostnl](https://github.com/justjoostnl))\\n\\n## 1.1.8 — 2024-05-07\\n\\n_This version does not introduce any user-facing changes._\\n\\n## 1.1.7 — 2024-05-06\\n\\n_This version does not introduce any user-facing changes._\\n\\n## 1.1.6 — 2024-05-01\\n\\n### 🎉 New features\\n\\n- [Android] Add support for customizing the now playing notification. ([#28390](https://github.com/expo/expo/pull/28390) by [@behenate](https://github.com/behenate))\\n\\n### 💡 Others\\n\\n- [Android] Improve audio focus management. ([#28453](https://github.com/expo/expo/pull/28453) by [@behenate](https://github.com/behenate))\\n\\n## 1.1.5 — 2024-04-26\\n\\n### 🎉 New features\\n\\n- [iOS] Add support for customizing the now playing notification. ([#28386](https://github.com/expo/expo/pull/28386) by [@behenate](https://github.com/behenate))\\n\\n## 1.1.4 — 2024-04-25\\n\\n_This version does not introduce any user-facing changes._\\n\\n## 1.1.3 — 2024-04-24\\n\\n_This version does not introduce any user-facing changes._\\n\\n## 1.1.2 — 2024-04-24\\n\\n_This version does not introduce any user-facing changes._\\n\\n## 1.1.1 — 2024-04-23\\n\\n_This version does not introduce any user-facing changes._\\n\\n## 1.1.0 — 2024-04-18\\n\\n### 🎉 New features\\n\\n- Create a docs page. ([#27854](https://github.com/expo/expo/pull/27854) by [@behenate](https://github.com/behenate))\\n- Add support for events on Android and iOS. ([#27632](https://github.com/expo/expo/pull/27632) by [@behenate](https://github.com/behenate))\\n- Add support for `loop`, `playbackRate`, `preservesPitch` and `currentTime` properties. ([#27367](https://github.com/expo/expo/pull/27367) by [@behenate](https://github.com/behenate))\\n- Add background playback support. ([#27110](https://github.com/expo/expo/pull/27110) by [@behenate](https://github.com/behenate))\\n- Add DRM support for Android and iOS. ([#26465](https://github.com/expo/expo/pull/26465) by [@behenate](https://github.com/behenate))\\n- [Android] Add Picture in Picture support. ([#26368](https://github.com/expo/expo/pull/26368) by [@behenate](https://github.com/behenate))\\n- [Android] Add fullscreen support. ([#26159](https://github.com/expo/expo/pull/26159) by [@behenate](https://github.com/behenate))\\n- [web] Add volume ([#26137](https://github.com/expo/expo/pull/26137) by [@behenate](https://github.com/behenate))\\n- Initial release for Android 🎉 ([#26033](https://github.com/expo/expo/pull/26033) by [@behenate](https://github.com/behenate))\\n- [Android] Adds support for boarders. ([#27003](https://github.com/expo/expo/pull/27003) by [@lukmccall](https://github.com/lukmccall))\\n\\n### 🐛 Bug fixes\\n\\n- Fix memory leaks on fast refresh. ([#27428](https://github.com/expo/expo/pull/27428) by [@behenate](https://github.com/behenate))\\n\\n### 💡 Others\\n\\n- Removed deprecated backward compatible Gradle settings. ([#28083](https://github.com/expo/expo/pull/28083) by [@kudo](https://github.com/kudo))\\n\\n## 0.3.1 — 2023-12-12\\n\\n_This version does not introduce any user-facing changes._\\n\\n## 0.3.0 — 2023-12-12\\n\\n### 🎉 New features\\n\\n- [iOS] Add Picture in Picture support. ([#25522](https://github.com/expo/expo/pull/25522) by [@behenate](https://github.com/behenate))\\n\\n## 0.2.0 — 2023-11-14\\n\\n### 🛠 Breaking changes\\n\\n- On `Android` bump `compileSdkVersion` and `targetSdkVersion` to `34`. ([#24708](https://github.com/expo/expo/pull/24708) by [@alanjhughes](https://github.com/alanjhughes))\\n\\n## 0.1.0 — 2023-10-30\\n\\n### 🎉 New features\\n\\n- Initial release for iOS 🎉\n```\n\n----------------------------------------\n\nTITLE: Generating Test Update Bundles (Bash)\nDESCRIPTION: Runs a yarn script, presumably defined in the test project's `package.json`, to generate the necessary JavaScript bundles that simulate updates for the E2E tests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn generate-test-update-bundles\n```\n\n----------------------------------------\n\nTITLE: Rendering RawH3 Component with JSX\nDESCRIPTION: This JSX snippet renders the RawH3 component with the text 'babel.config.js'. It's likely part of a React or React Native component's render method.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/babel-config-js.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>babel.config.js</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in JavaScript\nDESCRIPTION: This code snippet imports the RawH3 component from a relative path in the project structure. It's likely part of a React or React Native component file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/babel-config-js.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method Changes in expo-keep-awake\nDESCRIPTION: The KeepAwake.activateKeepAwake method has been deprecated and replaced with an async version KeepAwake.activateKeepAwakeAsync.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nKeepAwake.activateKeepAwake()\n\n// New usage\nawait KeepAwake.activateKeepAwakeAsync()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingerprint with expo-updates\nDESCRIPTION: Demonstrates how to configure fingerprinting when using @expo/fingerprint through expo-updates as a transitive dependency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('expo-updates/fingerprint').Config} */\nconst config = {\n  sourceSkips: [\n    'ExpoConfigRuntimeVersionIfString',\n    'ExpoConfigVersions',\n    'PackageJsonAndroidAndIosScriptsIfNotContainRun',\n  ],\n};\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for SDK 28\nDESCRIPTION: Example of updating dependencies in package.json for Expo SDK 28.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-28.0.0.tar.gz\",\n  \"expo\": \"^28.0.0\",\n  \"react\": \"16.3.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: App Configuration with Environment Variables\nDESCRIPTION: Demonstrates how to configure environment variables in app.config.js using the expo.extra property for SDK versions prior to 49.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/environment-variables.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default () => ({\n  expo: {\n    extra: {\n      API_URL: process.env.API_URL || null,\n    },\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using @expo/prebuild-config Package in HTML\nDESCRIPTION: HTML code that displays the package name, purpose, and package information for the @expo/prebuild-config package, including installation size metrics and weekly download statistics.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/prebuild-config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Title -->\n<h1 align=\"center\">\n👋 Welcome to <br><code>@expo/prebuild-config</code>\n</h1>\n\n<p align=\"center\">Get the modified config for <code>expo prebuild</code>.</p>\n\n<p align=\"center\">\n  <img src=\"https://flat.badgen.net/packagephobia/install/@expo/prebuild-config\">\n\n  <a href=\"https://www.npmjs.com/package/@expo/prebuild-config\">\n    <img src=\"https://flat.badgen.net/npm/dw/@expo/prebuild-config\" target=\"_blank\" />\n  </a>\n</p>\n\n<!-- Body -->\n```\n\n----------------------------------------\n\nTITLE: Reloading Shell Configuration on macOS\nDESCRIPTION: This snippet demonstrates how to reload the shell configuration to apply the newly set environment variables for both Zsh and Bash shells on macOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/_androidStudioInstructions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# for zsh\n$ source $HOME/.zshrc\n\n# for bash\n$ source $HOME/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Installing expo-battery in bare React Native projects\nDESCRIPTION: Command to install the expo-battery package using npx expo install in a bare React Native project. This assumes that the expo package has been installed and configured beforehand.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-battery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-battery\n```\n\n----------------------------------------\n\nTITLE: Hiding StatusBar in Android SplashScreen\nDESCRIPTION: This code snippet shows how to configure the Android styles.xml file to completely hide the StatusBar during SplashScreen display by adding the android:windowFullscreen flag set to true.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:windowFullscreen\">true</item>\n    <!-- Other style properties -->\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Diffing Two Fingerprints in TypeScript\nDESCRIPTION: Shows the function signature for comparing two fingerprints directly using the diffFingerprints function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction diffFingerprints(\n  fingerprint1: Fingerprint,\n  fingerprint2: Fingerprint\n): FingerprintSource[];\n```\n\n----------------------------------------\n\nTITLE: Importing BlurView in JavaScript\nDESCRIPTION: Shows how to import the BlurView component from the expo-blur package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/blur-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { BlurView } from 'expo-blur';\n```\n\n----------------------------------------\n\nTITLE: Styling for Emoji Picker Modal in React Native\nDESCRIPTION: StyleSheet configuration for the emoji picker modal component, defining styles for modal content, title container, and text elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = StyleSheet.create({\n  modalContent: {\n    height: '25%',\n    width: '100%',\n    backgroundColor: '#25292e',\n    borderTopRightRadius: 18,\n    borderTopLeftRadius: 18,\n    position: 'absolute',\n    bottom: 0,\n  },\n  titleContainer: {\n    height: '16%',\n    backgroundColor: '#464C55',\n    borderTopRightRadius: 10,\n    borderTopLeftRadius: 10,\n    paddingHorizontal: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  title: {\n    color: '#fff',\n    fontSize: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Structure in Markdown\nDESCRIPTION: This snippet shows the structure of the changelog, including sections for unpublished changes and different types of updates. It also includes entries for specific versions with dates and descriptions of changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/pkcs12/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n\n## 0.1.2 — 2024-04-23\n\n_This version does not introduce any user-facing changes._\n\n## 0.1.1 — 2024-04-18\n\n_This version does not introduce any user-facing changes._\n\n## 0.1.0 — 2023-12-12\n\n### 💡 Others\n\n- Move package from `expo/expo-cli` to `expo/expo`. ([#25766](https://github.com/expo/expo/pull/25766) by [@byCedric](https://github.com/byCedric))\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard format used for documenting version changes in the Expo project changelog. Includes sections for breaking changes, new features, bug fixes, and other updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-screen-orientation/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [version] — [date]\n\n### 🛠 Breaking changes\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history, breaking changes, new features, bug fixes and other updates for the Expo library. Includes version numbers, dates, and links to pull requests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-crypto/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS and tvOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n\n## 13.0.2 — 2024-04-24\n\n### 💡 Others\n\n- Update mocks for SDK51. ([#28424](https://github.com/expo/expo/pull/28424) by [@aleqsio](https://github.com/aleqsio))\n```\n\n----------------------------------------\n\nTITLE: Performing Schema-only Validation with Schemer\nDESCRIPTION: Example demonstrating how to validate data against a schema without additional asset validation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/schemer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst validator = new Schemer(require('schema.json'));\ntry {\n  await validator.validateSchemaAsync(require('data.json'));\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Using node18 tsconfig in expo-module-scripts\nDESCRIPTION: This code updates expo-module-scripts to use the 'node18' tsconfig to match the dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Use `node18` tsconfig in `expo-module-scripts` to match the dependencies.\n```\n\n----------------------------------------\n\nTITLE: Sample Fingerprint Diff Output in JSON\nDESCRIPTION: Displays an example output of the fingerprint diff process, showing added, removed, and changed sources.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"op\": \"removed\",\n    \"source\": {\n      \"type\": \"file\",\n      \"filePath\": \"./assets/icon.png\",\n      \"reasons\": [\"expoConfigExternalFile\"],\n      \"hash\": \"3f71f5a8458c06b83424cc33e1f2481f601199ea\"\n    }\n  },\n  {\n    \"op\": \"added\",\n    \"source\": {\n      \"type\": \"dir\",\n      \"filePath\": \"ios\",\n      \"reasons\": [\"bareNativeDir\"],\n      \"hash\": \"2420400e6140a4ccfc350fc483b26efdfc26ddac\"\n    }\n  },\n  {\n    \"op\": \"changed\",\n    \"source\": {\n      \"type\": \"contents\",\n      \"id\": \"expoConfig\",\n      \"contents\": \"{\\\"ios\\\":{\\\"bundleIdentifier\\\":\\\"com.test\\\",\\\"supportsTablet\\\":true},\\\"name\\\":\\\"test\\\",\\\"platforms\\\":[\\\"ios\\\"],\\\"slug\\\":\\\"test\\\"}\",\n      \"reasons\": [\"expoConfig\"],\n      \"hash\": \"dd2a3ebb872b097f9c1e33780fb8db8688848fa0\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Verifying Expo Installation with expo-constants in JavaScript\nDESCRIPTION: This snippet demonstrates how to verify the successful installation of Expo modules by logging a value from the expo-constants package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-expo-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Constants from 'expo-constants';\nconsole.log(Constants.systemFonts);\n```\n\n----------------------------------------\n\nTITLE: Pushing EAS Metadata Configuration\nDESCRIPTION: Command to push store configuration to app stores using EAS Metadata CLI tool.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas metadata:push\n```\n\n----------------------------------------\n\nTITLE: Showing Expo Config Library Description in HTML\nDESCRIPTION: This HTML snippet displays a centered description of the @expo/config library's purpose, specifically mentioning its interaction with app.json.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config/README.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">A library for interacting with the <code>app.json</code>.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Module Structure in JSON\nDESCRIPTION: Schema showing the configuration structure for expo-module.config.json, which includes platform support declaration and platform-specific module configurations for iOS and Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platforms\": [\"ios\", \"android\"],\n  \"ios\": {\n    \"modules\": [\"SwiftModuleClassName\"],\n    \"appDelegateSubscribers\": [\"SwiftAppDelegateSubscriberClass\"]\n  },\n  \"android\": {\n    \"modules\": [\"com.example.package.KotlinModuleClassName\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Security Policy Documentation in Markdown\nDESCRIPTION: Standard security policy document written in Markdown that provides instructions for reporting security vulnerabilities through a secure email channel instead of public GitHub issues.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Security Policy\n\n## Reporting a Vulnerability\n\nInstead of opening a GitHub issue for security vulnerabilities, send an email to our secure inbox: secure@expo.io.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Example of the standardized changelog format used throughout the document, showing version numbers, categories of changes (breaking changes, new features, bug fixes, etc), and links to pull requests with contributor references.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-build-properties/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.12.4 - 2024-07-30\n\n### 🎉 New features\n\n- Add `android.enablePngCrunchInReleaseBuilds` to enable toggling PNG crunching in release builds. ([#30699](https://github.com/expo/expo/pull/30699) by [@brentvatne](https://github.com/brentvatne))\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic EAS Update Configuration in JSON\nDESCRIPTION: Minimal app.json configuration file structure required for EAS Update integration, containing an empty expo object that can be extended with additional configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/codepush.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    //... any other existing keys you have\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in TypeScript React\nDESCRIPTION: This code snippet imports the RawH3 component from the Text components directory. It's likely used for rendering h3-level headings in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/constants.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Importing the Expo Application Module in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to import the `expo-application` module. Importing `* as Application` makes all exported functions and properties of the library accessible via the `Application` namespace (e.g., `Application.getApplicationIdAsync()`). This is the necessary first step to utilize the library's features after installation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/application.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as Application from 'expo-application';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Manifests Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import all exported members from the expo-manifests package as the Manifests object in a JavaScript or TypeScript project. It requires the expo-manifests npm package to be installed in your project dependencies. The imported Manifests object provides access to various types and functionalities related to Expo Manifests, supporting app configuration on Android, iOS, and tvOS platforms. The code assumes that you are working within an environment that supports ES module import syntax.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/manifests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Manifests from 'expo-manifests';\n```\n\n----------------------------------------\n\nTITLE: Creating EAS Update\nDESCRIPTION: Generates an EAS update for testing published app functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\neas update\n```\n\n----------------------------------------\n\nTITLE: Running the Lock Command for Expo Secrets (Shell)\nDESCRIPTION: This command re-encrypts the secrets using `git-crypt`. It is generally not required as changes are automatically encrypted on push, but can be useful for troubleshooting `git-crypt` issues. Locking does not provide local security unless the key is securely deleted.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/secrets/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlock\n```\n\n----------------------------------------\n\nTITLE: Adding withDevelopmentTeam Config Plugin in Expo CLI\nDESCRIPTION: This snippet adds a new config plugin 'withDevelopmentTeam' to change the Apple development team id in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config-plugins/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Added `withDevelopmentTeam` to change the Apple development team id. ([#30761](https://github.com/expo/expo/pull/30761) by [@byCedric](https://github.com/byCedric))\n```\n\n----------------------------------------\n\nTITLE: Registering Root Component with Custom Entry File\nDESCRIPTION: Example of setting up a custom entry file using registerRootComponent to specify the root component of the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerRootComponent } from 'expo';\nimport { View } from 'react-native';\n\nfunction App() {\n  return <View />;\n}\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Navigation Error When Root Layout Not Mounted (Error Text Output)\nDESCRIPTION: Represents the raw error message encountered when attempting to navigate prior to mounting the root layout using Expo Router. No dependencies are necessary, as this is a static text block. The message details the cause and suggested remedy for developers debugging navigation issues in Expo Router projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/authentication.mdx#2025-04-22_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nError: Attempted to navigate before mounting the Root Layout component. Ensure the Root Layout component is rendering a Slot, or other navigator on the first render.\n```\n\n----------------------------------------\n\nTITLE: Native iOS Component Registration\nDESCRIPTION: Shows how the main component is registered in the iOS AppDelegate.m file using RCTRootView.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/application-has-not-been-registered.mdx#2025-04-22_snippet_2\n\nLANGUAGE: objectivec\nCODE:\n```\nRCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"main\" initialProperties:nil];\n```\n\n----------------------------------------\n\nTITLE: Exporting getExpoPushTokenAsync parameter type in expo-notifications\nDESCRIPTION: The parameter type for getExpoPushTokenAsync in expo-notifications is now exported, allowing for better type checking when using the function.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { GetExpoPushTokenAsyncOptions } from 'expo-notifications';\n```\n\n----------------------------------------\n\nTITLE: Rendering QR Code for Expo Go Android Download\nDESCRIPTION: Renders a QR code using the QRCodeReact component. The QR code contains a link to download Expo Go from the Google Play Store. It's styled with CSS classes for visual presentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalExpoGo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"p-4 rounded-lg border border-default inline-block bg-palette-white\">\n  <QRCodeReact\n    value=\"https://play.google.com/store/apps/details?id=host.exp.exponent&referrer=docs\"\n    size={228}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer Module from expo-sensors\nDESCRIPTION: Shows how to import the Accelerometer module from the expo-sensors package. This is the entry point for using accelerometer functionality in an Expo or React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Using appropriate tsc version in monorepos\nDESCRIPTION: This code ensures the appropriate version of 'tsc' is used when executing 'expo-module build' in monorepos with multiple typescript versions installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Use appropriate version of `tsc` when executing `expo-module build` in monorepos with multiple typescript versions installed\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Initiates the Expo development server for testing purposes in various project contexts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component in JSX\nDESCRIPTION: This snippet shows how to use the imported RawH3 component in JSX to display a heading about platform support.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/platforms.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>Android, iOS, and web support</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Using Config Plugins with Raw Functions\nDESCRIPTION: Illustrates the use of config plugins with raw functions in app.config.js, highlighting the limitations and best practices for fingerprinting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// In app.config.js\nconst { withInfoPlist } = require('expo/config-plugins');\n\nconst withMyPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults.NSLocationWhenInUseUsageDescription = 'Allow $(PRODUCT_NAME) to use your location';\n    return config;\n  });\n};\n\nexport default ({ config }) => {\n  config.plugins ||= [];\n  config.plugins.push(withMyPlugin);\n  config.plugins.push((config) => config);\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing expo-module prepare error\nDESCRIPTION: This code fixes the expo-module prepare error if target packages contain temporary kotlin build files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\n# Fixed `expo-module prepare` error if target packages contain temporary kotlin build files.\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in React JSX\nDESCRIPTION: This code imports the RawH3 component from the Text components directory, which is likely used for rendering h3 headings with specific styling in the Bluesky Social Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/tsconfig-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: JSX Component Import Declarations\nDESCRIPTION: Import statements for various icon components and UI elements from Expo styleguide and custom components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RouterLogo } from '@expo/styleguide';\nimport { Bell03Icon } from '@expo/styleguide-icons/outline/Bell03Icon';\nimport { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';\nimport { Cube01Icon } from '@expo/styleguide-icons/outline/Cube01Icon';\nimport { LayersTwo02Icon } from '@expo/styleguide-icons/outline/LayersTwo02Icon';\n\nimport { BoxLink } from '~/ui/components/BoxLink';\nimport { CODE } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Finding and Linking Dependencies for expo-modules-core\nDESCRIPTION: Locates required libraries and packages, sets up include directories, and links the expo-modules-core library with its dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/android/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_library(LOG_LIB log)\n\nfind_package(ReactAndroid REQUIRED CONFIG)\n\nfind_package(fbjni REQUIRED CONFIG)\n\nget_target_property(INCLUDE_reactnativejni\n        ReactAndroid::reactnativejni\n        INTERFACE_INCLUDE_DIRECTORIES)\ntarget_include_directories(\n        ${PACKAGE_NAME}\n        PRIVATE\n        ${INCLUDE_reactnativejni}/react\n\n        # header only imports from turbomodule, e.g. CallInvokerHolder.h\n        \"${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule\"\n        \"${COMMON_DIR}\"\n        \"${SRC_DIR}/fabric\"\n)\n\ninclude(\"${REACT_NATIVE_DIR}/ReactAndroid/cmake-utils/folly-flags.cmake\")\n\ntarget_compile_options(\n        ${PACKAGE_NAME}\n        PRIVATE\n        ${folly_FLAGS}\n)\n\ntarget_link_libraries(\n        ${PACKAGE_NAME}\n        CommonSettings\n        ${LOG_LIB}\n        fbjni::fbjni\n        ReactAndroid::jsi\n        ReactAndroid::reactnativejni\n        ReactAndroid::folly_runtime\n        ReactAndroid::react_nativemodule_core\n        android\n        ${JSEXECUTOR_LIB}\n        ${NEW_ARCHITECTURE_DEPENDENCIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Tracking Permission\nDESCRIPTION: This XML snippet shows how to add the necessary `AD_ID` permission to the `AndroidManifest.xml` file. This permission is required on Android to access the advertising ID, which is often used for tracking.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-tracking-transparency/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"com.google.android.gms.permission.AD_ID\"/>\n```\n\n----------------------------------------\n\nTITLE: Supporting Expo CLI transforms in Jest\nDESCRIPTION: This code adds support for passing 'platform' and 'isServer' to the Babel caller, enabling standard Expo CLI transforms in Jest, such as process.env.EXPO_OS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add support for passing `platform` and `isServer` to the Babel caller to support `process.env.EXPO_OS` and other standard Expo CLI transforms in Jest.\n```\n\n----------------------------------------\n\nTITLE: Importing DocumentPicker Module\nDESCRIPTION: Example of importing the DocumentPicker module from expo-document-picker package for use in application code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\n```\n\n----------------------------------------\n\nTITLE: Installing expo-screen-orientation Package\nDESCRIPTION: Command to install the expo-screen-orientation package using npm package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-screen-orientation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install expo-screen-orientation\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Markdown formatted changelog documenting version history, breaking changes, new features, bug fixes and other updates for the Expo Image Manipulation module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-manipulator/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n- [iOS][Web] Introduce a new API for image manipulation. ([#30135](https://github.com/expo/expo/pull/30135), [#30194](https://github.com/expo/expo/pull/30194) by [@tsapeta](https://github.com/tsapeta))\n- [Android] Introduce a new API for image manipulation. ([#30232](https://github.com/expo/expo/pull/30232) by [@lukmccall](https://github.com/lukmccall))\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Data Interface for Android Push Notifications\nDESCRIPTION: TypeScript interface definition for the Firebase Data object used in Android push notification payloads. This specifies the structure of the data object when sending push notifications to Android devices.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/notifications.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseData {\n  title?: string;\n  message?: string;\n  subtitle?: string;\n  sound?: boolean | string;\n  vibrate?: boolean | number[];\n  priority?: AndroidNotificationPriority;\n  badge?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering iOS Devices for Internal Distribution\nDESCRIPTION: Command to register an iOS device for app installation, which generates a shareable URL or QR code for device registration, necessary for ad hoc provisioning profiles.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/internal-distribution-builds.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas device:create\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entries documenting changes across multiple versions of the Expo sharing module, including version numbers, dates, and categorized changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sharing/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for TypeScript Path Aliases\nDESCRIPTION: This code adds support for compilerOptions.baseUrl and compilerOptions.paths aliases from tsconfig.json and jsconfig.json files to Metro bundler configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { getDefaultConfig } = require('@expo/metro-config');\nconst config = getDefaultConfig(__dirname);\nconfig.resolver.sourceExts.push('ts', 'tsx');\nconfig.resolver.extraNodeModules = {\n  // Add your path aliases here\n};\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Marking SDK as Deprecated Command\nDESCRIPTION: Command to mark an old SDK version as deprecated in the versions endpoint\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\net update-versions --sdkVersion XX.X.X --deprecated true\n```\n\n----------------------------------------\n\nTITLE: DevicePushToken TypeScript Interface Definition\nDESCRIPTION: Defines the TypeScript interfaces for device push tokens across different platforms. Includes separate interfaces for native devices (iOS/Android) and web, with the native tokens containing a string and web tokens containing a VAPID registration object with endpoint and keys.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NativeDevicePushToken {\n  type: 'ios' | 'android';\n  data: string;\n}\n\nexport interface WebDevicePushToken {\n  type: 'web';\n  data: {\n    endpoint: string;\n    keys: {\n      p256dh: string;\n      auth: string;\n    };\n  };\n}\n\nexport type DevicePushToken = NativeDevicePushToken | WebDevicePushToken;\n```\n\n----------------------------------------\n\nTITLE: Deprecating source-login-scripts.sh\nDESCRIPTION: This code deprecates the unreliable source-login-scripts.sh and sources the Node.js binary path from .xcode.env and .xcode.env.local files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\n# Deprecated the unreliable `source-login-scripts.sh` and sourcing the Node.js binary path from `.xcode.env` and `.xcode.env.local`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Picker Component\nDESCRIPTION: YAML frontmatter configuration defining the component metadata, including title, description, source code URL, package name and supported platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Picker\ndescription: A cross-platform component that provides access to the system UI for picking between several options.\nsourceCodeUrl: 'https://github.com/react-native-picker/picker'\npackageName: '@react-native-picker/picker'\nplatforms: ['android', 'ios', 'macos', 'web']\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Maven Cache Configuration in EAS Build\nDESCRIPTION: JSON configuration to disable the Maven cache server for Android dependencies by setting the EAS_BUILD_DISABLE_MAVEN_CACHE environment variable.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/caching.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"production\": {\n      \"env\": {\n        \"EAS_BUILD_DISABLE_MAVEN_CACHE\": \"1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component for Heading Display\nDESCRIPTION: Demonstrates the usage of the RawH3 component to display section heading text 'File-based routing' in the application interface.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/navigation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RawH3>File-based routing</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in .eslintrc.js\nDESCRIPTION: Example of how to extend the universe ESLint config in a project's .eslintrc.js file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: 'universe',\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for SDK 27 Upgrade\nDESCRIPTION: JSON configuration changes required in package.json when upgrading to Expo SDK 27. Updates React Native, Expo, and React to their compatible versions for SDK 27.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-27.0.0.tar.gz\",\n  \"expo\": \"^27.0.0\",\n  \"react\": \"16.3.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting import statements by module name in JavaScript\nDESCRIPTION: Shows how to sort import statements within each group by the names of the imported modules in ASCII order, with uppercase before lowercase before scoped modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// CORRECT\nimport Z from 'Z';\nimport b from 'x';\nimport a from 'y';\nimport p from '@scope/package';\n```\n\n----------------------------------------\n\nTITLE: Markdown changelog entries\nDESCRIPTION: A markdown formatted changelog documenting version releases, breaking changes, feature additions, bug fixes and other modifications made to the expo-print module over time\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-print/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1.\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n- Add missing `react-native` peer dependencies for isolated modules.\n\n### 💡 Others\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Import Source in Babel Preset Expo\nDESCRIPTION: Example of how to configure the jsxImportSource option in babel-preset-expo. This option allows specifying a custom import source for JSX functions when using the automatic runtime.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/babel-preset-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  'babel-preset-expo',\n  {\n    jsxRuntime: 'automatic',\n    jsxImportSource: 'react',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Formatting Keyboard Shortcuts in Markdown\nDESCRIPTION: Shows the correct way to format keyboard shortcuts in Markdown using the <kbd> element. This approach ensures consistency and clarity when describing key combinations across different operating systems.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nOpen the app, press <kbd>Cmd ⌘</kbd> + <kbd>T</kbd> or <kbd>Ctrl</kbd> + <kbd>T</kbd> to open a new window.\n```\n\n----------------------------------------\n\nTITLE: Request Headers Example for Expo Updates Protocol\nDESCRIPTION: Example of required headers that must be included in a GET request from a conformant client library, including protocol version, platform specification, runtime version and signature expectations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/technical-specs/expo-updates-1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexpo-protocol-version: 1\naccept: application/expo+json;q=0.9, application/json;q=0.8, multipart/mixed\nexpo-platform: *\nexpo-runtime-version: *\nexpo-expect-signature: sig, keyid=\"root\", alg=\"rsa-v1_5-sha256\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Notice for @unimodules/core in Markdown\nDESCRIPTION: This snippet shows a markdown-formatted deprecation notice for the @unimodules/core package. It informs users that the package is no longer supported and provides a link to a migration guide for transitioning to the expo package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@unimodules/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @unimodules/core\n\n## ⚠️ Deprecated\n\nThis package is now deprecated in favor of `expo`. If you're looking for how to migrate your apps, you can follow this guide: https://expo.fyi/expo-modules-migration\n```\n\n----------------------------------------\n\nTITLE: Custom Syntax for Subscript and Superscript in Markdown Comments\nDESCRIPTION: Example of using custom markdown syntax to add subscript and superscript text in documentation comments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n21^st^ Century <!-- sup -->\nH~2~O <!-- sub -->\n```\n\n----------------------------------------\n\nTITLE: Playing Local Video Assets with expo-video (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates how to load and play local video files bundled within the app's assets directory using `expo-video`. It demonstrates using the `require` function to get an asset ID, which can then be passed directly to the `useVideoPlayer` hook. Alternatively, the asset ID can be used within a `VideoSource` object to provide additional metadata like title and artist. This requires the `expo-video` library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VideoSource } from 'expo-video';\n\nconst assetId = require('./assets/bigbuckbunny.mp4');\n\nconst videoSource: VideoSource = {\n  assetId,\n  metadata: {\n    title: 'Big Buck Bunny',\n    artist: 'The Open Movie Project',\n  },\n};\n\nconst player1 = useVideoPlayer(assetId); // You can use the `asset` directly as a video source\nconst player2 = useVideoPlayer(videoSource);\n```\n\n----------------------------------------\n\nTITLE: Importing StoreReview Module (JavaScript)\nDESCRIPTION: This snippet shows how to import the StoreReview module in a JavaScript file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Importing LightSensor from Expo Sensors in JavaScript\nDESCRIPTION: Shows the standard import statement required to use the `LightSensor` functionality within a JavaScript or React Native file. This import makes the `LightSensor` object available from the `expo-sensors` package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/light-sensor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js\nimport { LightSensor } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Running Bare-Expo on Android Emulator\nDESCRIPTION: Command to run the Bare-Expo app on an Android emulator. It handles npm installation, builds React Android binaries, generates an emulator, starts Metro, and opens the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Cloning the Expo Repository with Git\nDESCRIPTION: Command for cloning the Expo repository from GitHub to contribute to the documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/expo/expo.git\n```\n\n----------------------------------------\n\nTITLE: Content Spotlight Component Usage\nDESCRIPTION: JSX implementation of the ContentSpotlight component showing billing page information with image.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/billing/plans.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContentSpotlight\n  alt=\"Billing page in Expo dashboard displays the current plan for an Organization account.\"\n  src=\"/static/images/billing/plan-01.png\"\n  className=\"max-w-[720px]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Commands\nDESCRIPTION: Lists command-line tools available for managing changelogs, including adding entries and merging changelogs during SDK releases.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/contributing/Updating Changelogs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\net add-changelog\n```\n\nLANGUAGE: bash\nCODE:\n```\net add-changelog --help\n```\n\nLANGUAGE: bash\nCODE:\n```\net merge-changelogs\n```\n\n----------------------------------------\n\nTITLE: Updating @react-native/dev-middleware in Expo CLI\nDESCRIPTION: This snippet shows an update to the @react-native/dev-middleware package in Expo CLI. It's part of a third-party library update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Update @react-native/dev-middleware to 0.74.85. ([#30139](https://github.com/expo/expo/pull/30139) by [@gabrieldonadel](https://github.com/gabrieldonadel))\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for SDK 31\nDESCRIPTION: Example of updating dependencies in package.json for Expo SDK 31.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-31.0.0.tar.gz\",\n  \"expo\": \"^31.0.0\",\n  \"react\": \"16.5.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing EAS Update URL for Development Build\nDESCRIPTION: This snippet demonstrates the structure of a URL used to open a specific EAS Update in a development build. It includes the project slug, expo-development-client deep link, and the update's group ID.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/expo-dev-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[slug]://expo-development-client/?url=[https://u.expo.dev/project-id]/group/[group-id]\n\n# Example\nmy-app://expo-development-client/?url=https://u.expo.dev/675cb1f0-fa3c-11e8-ac99-6374d9643cb2/group/47839bf2-9e01-467b-9378-4a978604ab11\n```\n\n----------------------------------------\n\nTITLE: Using Schemer with Expo XDL\nDESCRIPTION: Example showing how to use @expo/schemer with XDL to validate an Expo project configuration and assets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/schemer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getConfig } from '@expo/config';\nimport Schemer from '@expo/schemer';\n\nconst { exp } = getConfig(projectRoot);\nconst schema = await getSchemaAsync(exp.sdkVersion);\nconst validator = new Schemer(require('schema.json'));\n\nvalidator.validateName('Wilson Zhao');\nvalidator.validateAssets(exp);\n```\n\n----------------------------------------\n\nTITLE: Transpiling for Node 18 (LTS)\nDESCRIPTION: This code updates the transpilation settings to target Node 18 (LTS).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Transpile for Node 18 (LTS).\n```\n\n----------------------------------------\n\nTITLE: Installing expo-blur package using npm\nDESCRIPTION: Command to install the expo-blur package in a React Native project using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-blur/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-blur\n```\n\n----------------------------------------\n\nTITLE: Mocking Modules in Metro for Expo\nDESCRIPTION: This Metro configuration demonstrates how to mock a module (lodash) to be empty for a specific platform (web) using the resolver.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (platform === 'web' && moduleName === 'lodash') {\n    return {\n      type: 'empty',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK versions\nDESCRIPTION: Updated compileSdkVersion and targetSdkVersion to 31, and Java version to 11 for Android builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Gradle\nCODE:\n```\nandroid {\n  compileSdkVersion 31\n  defaultConfig {\n    targetSdkVersion 31\n  }\n}\n\ncompileOptions {\n  sourceCompatibility JavaVersion.VERSION_11\n  targetCompatibility JavaVersion.VERSION_11\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME environment variable\nDESCRIPTION: Command to set the JAVA_HOME environment variable in the bash or zsh profile after installing JDK 17. This is necessary for Android development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools for Fastlane\nDESCRIPTION: Command to install the latest version of Xcode command line tools, which is a prerequisite for using Fastlane.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Fixing npx script failure\nDESCRIPTION: This code fixes the npx script failing when yarn is not installed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Fixed `npx` script failing when `yarn` is not installed.\n```\n\n----------------------------------------\n\nTITLE: Installing expo-print Package\nDESCRIPTION: Command to install the expo-print package using npx expo install in a React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-print/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install expo-print\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Implementation in React Native\nDESCRIPTION: Complete example of implementing a camera view with front/back camera toggle functionality, including permission handling and styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CameraView, CameraType, useCameraPermissions } from 'expo-camera';\nimport { useState } from 'react';\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport default function App() {\n  const [facing, setFacing] = useState<CameraType>('back');\n  const [permission, requestPermission] = useCameraPermissions();\n\n  if (!permission) {\n    return <View />;\n  }\n\n  if (!permission.granted) {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.message}>We need your permission to show the camera</Text>\n        <Button onPress={requestPermission} title=\"grant permission\" />\n      </View>\n    );\n  }\n\n  function toggleCameraFacing() {\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\n  }\n\n  return (\n    <View style={styles.container}>\n      <CameraView style={styles.camera} facing={facing}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>\n            <Text style={styles.text}>Flip Camera</Text>\n          </TouchableOpacity>\n        </View>\n      </CameraView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  message: {\n    textAlign: 'center',\n    paddingBottom: 10,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    margin: 64,\n  },\n  button: {\n    flex: 1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running iOS test Fastlane Action\nDESCRIPTION: Command to execute the test lane for iOS, which likely runs all tests for the iOS application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test\n```\n\n----------------------------------------\n\nTITLE: Importing Expo AV Audio and Video Modules - JavaScript\nDESCRIPTION: Shows the import statement required to access Audio and Video modules from expo-av. This is a prerequisite for all other usage of the Expo AV playback API in JavaScript or TypeScript files. No runtime output; dependencies: expo-av installed in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/av.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { Audio, Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Headers for Expo Updates in Objective-C\nDESCRIPTION: Required imports for using EXUpdatesAppController in AppDelegate.mm for iOS applications. These imports enable access to expo-updates functionality from Objective-C code.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n#import \"ExpoModulesCore-Swift.h\"\n#import \"EXUpdatesInterface-Swift.h\"\n#import \"EXUpdates-Swift.h\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining FCM Access Token in TypeScript\nDESCRIPTION: This function uses the Google Auth Library to obtain a short-lived Oauth 2.0 access token for FCM authentication. It requires the contents of the FCM private key file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JWT } from 'google-auth-library';\n\nfunction getAccessTokenAsync(\n  key: string // Contents of your FCM private key file\n) {\n  return new Promise(function (resolve, reject) {\n    const jwtClient = new JWT(\n      key.client_email,\n      null,\n      key.private_key,\n      ['https://www.googleapis.com/auth/cloud-platform'],\n      null\n    );\n    jwtClient.authorize(function (err, tokens) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(tokens.access_token);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ASN1Decoder with Carthage\nDESCRIPTION: Provides the line to add to a Cartfile for integrating the ASN1Decoder library using the Carthage dependency manager. This instructs Carthage to fetch the library from the specified GitHub repository.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub \"filom/ASN1Decoder\"\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Dev Client and Updates Packages via CLI\nDESCRIPTION: Terminal command for installing the necessary packages for using EAS Update extension in Expo development builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/development-builds/development-workflows.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-dev-client expo-updates\n```\n\n----------------------------------------\n\nTITLE: Creating MainApplication.kt for Android lifecycle listeners\nDESCRIPTION: Creates a Kotlin file extending Application class to handle lifecycle events using ApplicationLifecycleDispatcher.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage <my.app.package>\n\nimport android.app.Application\nimport android.content.res.Configuration\nimport com.facebook.soloader.SoLoader\nimport expo.modules.ApplicationLifecycleDispatcher\n\nclass MainApplication() : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        ApplicationLifecycleDispatcher.onApplicationCreate(this)\n    }\n\n    override fun onConfigurationChanged(newConfig: Configuration) {\n        super.onConfigurationChanged(newConfig)\n        ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-clipboard in bare React Native projects\nDESCRIPTION: Command to install the expo-clipboard package using npx and expo CLI. This is required for bare React Native projects to use the clipboard functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-clipboard/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-clipboard\n```\n\n----------------------------------------\n\nTITLE: Rendering Privacy Shield Link Component in React/JSX\nDESCRIPTION: A BoxLink component implementation to display a link to Privacy Shield's official website with a title and description.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/regulatory-compliance/privacy-shield.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxLink\n  title=\"www.privacyshield.gov\"\n  description=\"For more information about Privacy Shield, see www.privacyshield.gov.\"\n  href=\"https://www.privacyshield.gov/welcome\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Related Package Versions Using Dot Notation\nDESCRIPTION: Command demonstrating how to set a specific related package version using dot notation for the key parameter. This example sets the React Native TypeScript typings version for SDK 35.0.0.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Versions Endpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\net update-versions-endpoint --sdkVersion=35.0.0 --key=\"relatedPackages.@types/react-native\" --value=\"^0.57.65\"\n```\n\n----------------------------------------\n\nTITLE: Sourcing Node.js binary path in iOS build scripts\nDESCRIPTION: Deprecated the unreliable 'source-login-scripts.sh' and changed to sourcing the Node.js binary path from '.xcode.env' and '.xcode.env.local' files.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Deprecated:\n./source-login-scripts.sh\n\n# New approach:\nsource .xcode.env\nsource .xcode.env.local\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format\nDESCRIPTION: Structured markdown format showing version history with categorized changes including breaking changes, new features, bug fixes and other updates. Each entry includes PR links and contributor attribution.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-mail-composer/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n```\n\n----------------------------------------\n\nTITLE: Installing expo-av Package via NPM\nDESCRIPTION: Command to install the expo-av package using the Expo CLI\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-av/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-av\n```\n\n----------------------------------------\n\nTITLE: Installing expo-checkbox package using npx\nDESCRIPTION: Command to install the expo-checkbox package into an Expo project using npx package runner.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-checkbox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-checkbox\n```\n\n----------------------------------------\n\nTITLE: Running iOS test_module Fastlane Action\nDESCRIPTION: Command to execute the test_module lane for iOS, which likely runs tests on specific modules of the application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios test_module\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo App\nDESCRIPTION: Initializes a new Expo application using the create-expo-app command.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app\n```\n\n----------------------------------------\n\nTITLE: Using RawH3 Component to Display Heading\nDESCRIPTION: This JSX snippet demonstrates how to use the RawH3 component to display a heading for the tsconfig.json file section in the documentation or UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/tsconfig-json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>tsconfig.json</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom StatusBar Color in Android SplashScreen\nDESCRIPTION: This code shows how to apply the custom StatusBar color by modifying the styles.xml file to reference the color resource defined in colors.xml with the android:statusBarColor attribute.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:statusBarColor\">@color/splashscreen_statusbar_color</item>\n    <!-- Other style properties -->\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationBehavior Interface in TypeScript\nDESCRIPTION: Defines an interface that controls how notifications are presented to the user, including options for alerts, sounds, and badges. On Android, this also includes priority settings and special sound behavior.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationBehavior {\n  shouldShowAlert: boolean;\n  shouldPlaySound: boolean;\n  shouldSetBadge: boolean;\n  priority?: AndroidNotificationPriority;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build for the Project\nDESCRIPTION: This command creates an EAS configuration file in the project directory, setting up the necessary build settings.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuild.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas build:configure\n```\n\n----------------------------------------\n\nTITLE: Configuring DeviceMotion in Expo app.json\nDESCRIPTION: Configuration example for setting up DeviceMotion sensor permissions in the app.json config file. Demonstrates how to set the motion permission message for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS FaceID Configuration\nDESCRIPTION: XML configuration for iOS Info.plist to enable FaceID usage with custom product name variable\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-local-authentication/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSFaceIDUsageDescription</key>\n<string>Allow $(PRODUCT_NAME) to use FaceID</string>\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Client Build for iOS with Fastlane\nDESCRIPTION: Command to execute the create_expo_client_build lane for iOS, which creates a build for the Expo client.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane ios create_expo_client_build\n```\n\n----------------------------------------\n\nTITLE: Checking Store Review Availability for TestFlight Apps on iOS\nDESCRIPTION: This update to the StoreReview.isAvailableAsync() method now correctly returns false for apps distributed through TestFlight on iOS, preventing inappropriate review prompts.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nStoreReview.isAvailableAsync()\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Expo SDK 21 in package.json\nDESCRIPTION: Shows the required dependency updates in package.json for upgrading to Expo SDK 21. This includes updating the react-native, expo, and react packages to their appropriate versions for SDK 21.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-21.0.2.tar.gz\",\n  \"expo\": \"^21.0.0\",\n  \"react\": \"16.0.0-alpha.12\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Orientation in app.json\nDESCRIPTION: Example configuration for expo-screen-orientation in app.json. It sets the initial orientation for iOS and includes the plugin configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/screen-orientation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"requireFullScreen\": true\n    },\n    \"plugins\": [\n      [\n        \"expo-screen-orientation\",\n        {\n          \"initialOrientation\": \"DEFAULT\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unused jcenter() Maven Dependency Repository\nDESCRIPTION: Removed the unused `jcenter()` Maven repository declaration from the Android build configuration (likely build.gradle). This cleans up the build setup as JCenter has been sunset.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\njcenter()\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS\nDESCRIPTION: Runs pod install command in the iOS directory to install dependencies.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/brownfield/installing-expo-modules.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ios && pod install\n```\n\n----------------------------------------\n\nTITLE: Adding URI Scheme to Expo Project\nDESCRIPTION: Adds a URI scheme to the Expo project for deep linking purposes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Quality Assurance.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx uri-scheme add dev-client-release\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods Dependencies for iOS After expo-store-review Installation - Bash\nDESCRIPTION: Runs CocoaPods installation in order to link native iOS dependencies after adding the expo-store-review npm package. This step is required for bare React Native projects targeting iOS, ensuring that all native modules are properly configured. Execute this in your project's root directory after installing the main dependency.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-store-review/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication Button and Sign-in Flow\nDESCRIPTION: Complete implementation of Apple Authentication including UI button and authentication flow handling. The code demonstrates creating an Apple sign-in button, requesting user information scopes, and handling authentication responses.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n            });\n            // signed in\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Static Property Types for Expo Plugins\nDESCRIPTION: Type definitions for static properties that can be used in Expo config plugins. These types ensure properties are serializable to JSON for use in the app manifest.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype StaticValue = boolean | number | string | null | StaticArray | StaticObject;\n\ntype StaticArray = StaticValue[];\n\ninterface StaticObject {\n  [key: string]: StaticValue | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sticky Property for Notification Dismissal\nDESCRIPTION: Introduced a new `sticky` property for notifications. This boolean property defines whether a notification can be dismissed by the user swiping it away (non-sticky) or if it persists until programmatically dismissed or acted upon (sticky).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsticky\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundFetch Module in React Native\nDESCRIPTION: A simple import statement showing how to import the BackgroundFetch module from the expo-background-fetch package in a React Native application. This is the basic setup required to use the background fetch functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as BackgroundFetch from 'expo-background-fetch';\n```\n\n----------------------------------------\n\nTITLE: Diffing Fingerprint Changes in TypeScript\nDESCRIPTION: Illustrates how to compare a given fingerprint with the current project state using diffFingerprintChangesAsync.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/fingerprint/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction diffFingerprintChangesAsync(\n  fingerprint: Fingerprint,\n  projectRoot: string,\n  options?: Options\n): Promise<FingerprintSource[]>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fingerprint = {\n  sources: [\n    {\n      type: 'file',\n      filePath: 'app.json',\n      reasons: ['expoConfig'],\n      hash: '378083de0c6e6bb6caf8fb72df658b0b26fb29ef',\n    },\n    {\n      type: 'file',\n      filePath: 'eas.json',\n      reasons: ['easBuild'],\n      hash: 'f723802b6ea916d1a6c4767b2299cc81ddb22eb4',\n    },\n    {\n      type: 'dir',\n      filePath: 'node_modules/expo',\n      reasons: ['expoAutolinkingIos', 'expoAutolinkingAndroid', 'bareRncliAutolinking'],\n      hash: '1faee4057fa943300905750b51c3b0cbf05f4b0d',\n    },\n  ],\n  hash: 'bf8a3b08935f056270b1688333b02f1ef5fa25bf',\n};\nconst result = await diffFingerprintChangesAsync(fingerprint, '/app');\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Running Documentation in Development Mode\nDESCRIPTION: Command for starting the documentation server in development mode, which will run on port 3002 and auto-reload on file changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant EventEmitter Usage\nDESCRIPTION: This code snippet mentions the removal of redundant usage of the EventEmitter instance in the Expo Clipboard module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-clipboard/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- Removed redundant usage of `EventEmitter` instance. ([#28946](https://github.com/expo/expo/pull/28946) by [@tsapeta](https://github.com/tsapeta))\n```\n\n----------------------------------------\n\nTITLE: Updating Android MainApplication for Custom Entry File\nDESCRIPTION: This Java code modification in the Android MainApplication.java file sets a custom entry file for the React Native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected String getJSMainModuleName() {\n-  return \"index\";\n+  return \".expo/.virtual-metro-entry\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS permissions for expo-image-picker\nDESCRIPTION: XML snippet showing the required iOS permission keys to be added to the Info.plist file for using expo-image-picker in a bare React Native app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-picker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to save photos</string>\n<key>NSCameraUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to access your camera</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Give $(PRODUCT_NAME) permission to use your microphone</string>\n```\n\n----------------------------------------\n\nTITLE: Basic Podfile Target Configuration\nDESCRIPTION: Initial Podfile configuration with a single target setup for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'myapp' do\n  # @hide ... #\n  # @end #\nend\n```\n\n----------------------------------------\n\nTITLE: Structuring WeeklyNotificationTrigger for Android\nDESCRIPTION: Represents an Android-specific trigger for weekly notifications, specifying weekday, hour, and minute.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WeeklyNotificationTrigger {\n  type: 'weekly';\n  weekday: number;\n  hour: number;\n  minute: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Package Manager with Expo Install\nDESCRIPTION: Example showing how to pass arguments to the underlying package manager when using expo install. Uses the -- operator to pass the -D flag to yarn.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_25\n\nLANGUAGE: terminal\nCODE:\n```\n$ yarn expo install typescript -- -D\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Expo SQLite Library\nDESCRIPTION: Sets up the CMake build configuration for expo-sqlite shared library. Configures compiler standards, source directories, and links required dependencies including fbjni, Android logging, and optional SQLCipher support through OpenSSL.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-sqlite/android/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(expo-sqlite)\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(CMAKE_CXX_STANDARD 20)\nset(PACKAGE_NAME \"expo-sqlite\")\nset(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)\n\nset(SRC_DIR \"${CMAKE_SOURCE_DIR}/src/main/cpp\")\nfile(GLOB SOURCES \"${SRC_DIR}/*.cpp\")\n\nseparate_arguments(SQLITE_BUILDFLAGS)\nadd_compile_options(\n  ${SQLITE_BUILDFLAGS}\n)\n\nadd_library(\n  ${PACKAGE_NAME}\n  SHARED\n  ${SOURCES}\n  \"${SQLITE3_SRC_DIR}/sqlite3.c\"\n)\n\ntarget_include_directories(\n  ${PACKAGE_NAME}\n  PRIVATE\n  ${SRC_DIR}\n  \"${SQLITE3_SRC_DIR}\"\n)\n\nfind_library(LOG_LIB log)\nfind_package(fbjni REQUIRED CONFIG)\nif(${USE_SQLCIPHER})\n  find_package(openssl REQUIRED CONFIG)\n  set(OPENSSL_CRYPTO_LIB \"openssl::crypto\")\nelse()\n  set(OPENSSL_CRYPTO_LIB \"\")\nendif()\n\ntarget_link_libraries(\n  ${PACKAGE_NAME}\n  ${LOG_LIB}\n  ${OPENSSL_CRYPTO_LIB}\n  fbjni::fbjni\n  android\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Expo CLI Development Alias in Shell\nDESCRIPTION: Shell configuration for setting up an alias to the development version of Expo CLI for testing across projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nalias nexpo=\"/path/to/expo/packages/@expo/cli/build/bin/cli\"\n```\n\n----------------------------------------\n\nTITLE: Importing Config Types from Expo Config\nDESCRIPTION: Shows how to import type definitions from the expo/config package for TypeScript support in plugin development.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/development-and-debugging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpoConfig, ConfigContext } from 'expo/config';\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for SDK 26 Upgrade\nDESCRIPTION: JSON configuration changes required in package.json when upgrading to Expo SDK 26. Updates React Native, Expo, and React to their compatible versions for SDK 26.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-26.0.0.tar.gz\",\n  \"expo\": \"^26.0.0\",\n  \"react\": \"16.3.0-alpha.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipboard Functionality in React Native with expo-clipboard\nDESCRIPTION: A complete example demonstrating how to use expo-clipboard to copy text to clipboard and retrieve clipboard content in a React Native application. The example includes buttons for copying sample text and displaying the retrieved clipboard content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport default function App() {\n  const [copiedText, setCopiedText] = useState('');\n\n  const copyToClipboard = async () => {\n    /* @info Copy the text to the clipboard */\n    await Clipboard.setStringAsync('hello world');\n    /* @end */\n  };\n\n  const fetchCopiedText = async () => {\n    const text = /* @info Paste the text from the clipboard */ await Clipboard.getStringAsync();\n    /* @end */\n    setCopiedText(text);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button title=\"Click here to copy to Clipboard\" onPress={copyToClipboard} />\n      <Button title=\"View copied text\" onPress={fetchCopiedText} />\n      <Text style={styles.copiedText}>{copiedText}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  copiedText: {\n    marginTop: 10,\n    color: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Localization Plugin in App.json (JSON)\nDESCRIPTION: This snippet demonstrates how to specify the expo-localization plugin in the expo.plugins array within app.json. Including this entry enables the config plugin to adjust build-time settings for localization, which are only effective after rebuilding the app binary. There are no required parameters other than the plugin name, and this configuration is necessary for projects utilizing config plugins, such as those using EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/localization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"expo\\\": {\\n    \\\"plugins\\\": [\\\"expo-localization\\\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SplashScreen Module\nDESCRIPTION: Basic import statement for the expo-splash-screen module to access splash screen control functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Calendar Module\nDESCRIPTION: Example showing how to import the Calendar module from expo-calendar package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as Calendar from 'expo-calendar';\n```\n\n----------------------------------------\n\nTITLE: Importing the Gyroscope Module in JavaScript\nDESCRIPTION: This code snippet shows the necessary import statement to use the `Gyroscope` API from the `expo-sensors` package in a JavaScript or React Native project. This import makes the `Gyroscope` object available, allowing access to its methods like `addListener` and `setUpdateInterval`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gyroscope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { Gyroscope } from 'expo-sensors';\n```\n```\n\n----------------------------------------\n\nTITLE: Barometer Import Statement\nDESCRIPTION: Basic import statement for accessing the Barometer component from expo-sensors package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/barometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Barometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Level 1 Heading with @expo/html-elements in TypeScript\nDESCRIPTION: This snippet illustrates the creation of a custom H1 component using Expo's HTML element abstraction. The H1 tag ensures semantic heading rendering for both web (<h1>) and native (Text with header role) platforms. The only dependency is @expo/html-elements. The component expects its children (heading content) as input and returns an element that adapts appropriately per platform. No props other than children are necessary.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { H1 } from '@expo/html-elements';\nexport default () => <H1>Example<H1/>\n```\n\n----------------------------------------\n\nTITLE: Clearing Caches with Expo CLI and npm\nDESCRIPTION: Complete set of commands to clear all development caches when using Expo CLI with npm, including node_modules, npm cache, watchman, and Metro bundler caches.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules\n\n$ npm cache clean --force\n\n$ npm install\n\n$ watchman watch-del-all\n\n$ rm -fr $TMPDIR/haste-map-*\n\n$ rm -rf $TMPDIR/metro-cache\n\n$ npx expo start --clear\n```\n\n----------------------------------------\n\nTITLE: Importing Accelerometer from Expo Sensors (JavaScript)\nDESCRIPTION: This code snippet shows the standard ES6 import statement required to use the `Accelerometer` functionality from the `expo-sensors` library within a JavaScript or React Native project. This import makes the `Accelerometer` object and its methods (like `addListener` and `setUpdateInterval`) available for use.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/accelerometer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Accelerometer } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in Expo\nDESCRIPTION: Example of implementing Logto authentication using their React Native SDK. Shows how to configure LogtoProvider and use the useLogto hook for authentication.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/authentication.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LogtoProvider, useLogto } from \"@logto/rn\";\n\nconst Content = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return isAuthenticated ? (\n    <Button title=\"Sign Out\" onPress={signOut} />\n  ) : (\n    <Button title=\"Sign In\" onPress={async () => signIn(redirectUri)} />\n  );\n};\n\nconst App = () => {\n  const logtoConfig = {\n    appId: \"YOUR_APP\",\n    endpoint: \"YOUR_LOGTO_ENDPOINT\",\n  };\n\n  return (\n    <LogtoProvider config={logtoConfig}>\n      <Content />\n    </LogtoProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Manual URL Referencing with Base URL in Expo\nDESCRIPTION: Example showing how to manually reference an image URL with the baseUrl prefix. When not using the require syntax, paths must be manually prefixed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Blog() {\n  return <img src=\"/my-root/assets/image.png\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Android Error Stacktrace\nDESCRIPTION: This snippet shows an example of an Android error stacktrace that may be encountered when a fatal JS error occurs and the error recovery system cannot recover. It includes details about the exception and its origin.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/error-recovery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--------- beginning of crash\nAndroidRuntime: FATAL EXCEPTION: expo-updates-error-recovery\nAndroidRuntime: Process: com.myapp.MyApp, PID: 12498\nAndroidRuntime: com.facebook.react.common.JavascriptException\nAndroidRuntime:\nAndroidRuntime: \tat com.facebook.react.modules.core.ExceptionsManagerModule.reportException(ExceptionsManagerModule.java:72)\nAndroidRuntime: \tat java.lang.reflect.Method.invoke(Native Method)\nAndroidRuntime: \tat com.facebook.react.bridge.JavaMethodWrapper.invoke(JavaMethodWrapper.java:372)\nAndroidRuntime: \tat com.facebook.react.bridge.JavaModuleWrapper.invoke(JavaModuleWrapper.java:188)\nAndroidRuntime: \tat com.facebook.react.bridge.queue.NativeRunnable.run(Native Method)\nAndroidRuntime: \tat android.os.Handler.handleCallback(Handler.java:938)\nAndroidRuntime: \tat android.os.Handler.dispatchMessage(Handler.java:99)\nAndroidRuntime: \tat com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage(MessageQueueThreadHandler.java:27)\nAndroidRuntime: \tat android.os.Looper.loop(Looper.java:223)\nAndroidRuntime: \tat com.facebook.react.bridge.queue.MessageQueueThreadImpl$4.run(MessageQueueThreadImpl.java:228)\nAndroidRuntime: \tat java.lang.Thread.run(Thread.java:923)\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Jest Runners Using Projects in package.json\nDESCRIPTION: This diff snippet illustrates how to customize the Jest configuration in `package.json` to run tests only on specific platforms (iOS and Android in this case) instead of using the `jest-expo/universal` preset. It replaces the single `preset` key with a `projects` array, where each object specifies a platform-specific preset like `jest-expo/ios` or `jest-expo/android`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/jest-expo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n\"jest\": {\n-  \"preset\": \"jest-expo/universal\"\n// Skip web and Node tests\n+ \"projects\": [\n+    { \"preset\": \"jest-expo/ios\" },\n+    { \"preset\": \"jest-expo/android\"}\n+ ]\n},\n```\n\n----------------------------------------\n\nTITLE: Changing Text Color in React Native\nDESCRIPTION: This snippet demonstrates how to change the color of text to make it readable on a dark background. It adds an inline style to the Text component to set the text color to white (#fff).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: '#fff' }}>\n        Open up App.js to start working on your app!\n      </Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes with React Native Web Elements - JSX\nDESCRIPTION: Illustrates the usage of a special syntax (\\\"{$$css: true}\\\") to enable Tailwind utility class styles with React Native web elements. Component renders styled View and Text elements. Requires 'react-native' and proper Tailwind + Metro configuration. Inputs are component props, outputs are styled cross-platform elements. This approach works for RN web builds only.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/config/metro.mdx#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Page() {\n  return (\n    <View style={{ $$css: true, _: 'bg-slate-100 rounded-xl' }}>\n      <Text style={{ $$css: true, _: 'text-lg font-medium' }}>Welcome to Tailwind</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Image in eas.json for GitHub Builds\nDESCRIPTION: Demonstrates how to specify the 'image' field in your eas.json for the build profiles you want to use with GitHub, setting both iOS and Android platforms to use the 'latest' build image.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/building-from-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  /* @hide ... */ /* @end */\n  \"build\": {\n    \"production\": {\n      \"android\": {\n        \"image\": \"latest\"\n      },\n      \"ios\": {\n        \"image\": \"latest\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Apple Authentication Module\nDESCRIPTION: JavaScript import statement for the expo-apple-authentication module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\n```\n\n----------------------------------------\n\nTITLE: Importing Expo Sensors\nDESCRIPTION: Shows different ways to import the expo-sensors package and its individual sensor components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sensors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in React\nDESCRIPTION: This snippet demonstrates how to import the RawH3 component from the Text components directory in a React application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/scripts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Creating ESLint Ignore File\nDESCRIPTION: This snippet shows how to create a .eslintignore file to exclude certain directories from linting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/using-eslint.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# @info Ignore the root <b>.expo</b> directory. #\n/.expo\n# @end #\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Link with Base URL Prefix\nDESCRIPTION: Shows how the Link component is transformed during export when baseUrl is configured. The href attribute in the output HTML automatically includes the base URL prefix.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/my-root/blog/123\">Go to blog post</a>\n```\n\n----------------------------------------\n\nTITLE: Building iOS Release Configuration\nDESCRIPTION: Command to build iOS app in release configuration for production testing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo run:ios --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Basic WebBrowser Usage in React Native\nDESCRIPTION: A complete example demonstrating how to use WebBrowser to open a URL in the system browser and handle the result. The component includes a button that triggers opening a web page and displays the result of the operation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\n/* @hide */\nimport Constants from 'expo-constants';\n/* @end */\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Expo GL Changelog Version Updates\nDESCRIPTION: Markdown formatted changelog documenting version history, breaking changes, new features, bug fixes and maintenance updates for the Expo GL module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-gl/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n- Add NULL check before releasing `textureRef` in `EXGLCameraObject`. ([#29092](https://github.com/expo/expo/pull/29092) by [@hakonk](https://github.com/hakonk))\n- Add missing `react` and `react-native` peer dependencies for isolated modules. ([#30468](https://github.com/expo/expo/pull/30468) by [@byCedric](https://github.com/byCedric))\n- Add missing `react-native-web` optional peer dependency for isolated modules. ([#30689](https://github.com/expo/expo/pull/30689) by [@byCedric](https://github.com/byCedric))\n\n### 💡 Others\n\n### ⚠️ Notices\n\n- Added support for React Native 0.75.x. ([#30034](https://github.com/expo/expo/pull/30034), [#30828](https://github.com/expo/expo/pull/30828) by [@gabrieldonadel](https://github.com/gabrieldonadel))\n```\n\n----------------------------------------\n\nTITLE: Installing expo-dev-client in Shell\nDESCRIPTION: This command installs the expo-dev-client package in the project's root directory. It's a crucial step for setting up the development environment for the Bluesky Expo app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuildLocal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ npx expo install expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpoRadialChartView in Swift for iOS\nDESCRIPTION: This snippet defines the ExpoRadialChartView class, which creates a PieChartView and implements methods to set chart data. It uses the DGCharts library to render the pie chart.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/third-party-library.mdx#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ExpoModulesCore\nimport DGCharts\n\nstruct Series: Record {\n  @Field\n  var color: UIColor = UIColor.black\n\n  @Field\n  var percentage: Double = 0\n}\n\nclass ExpoRadialChartView: ExpoView {\n  let chartView = PieChartView()\n\n  required init(appContext: AppContext? = nil) {\n    super.init(appContext: appContext)\n    clipsToBounds = true\n    addSubview(chartView)\n  }\n\n  override func layoutSubviews() {\n    chartView.frame = bounds\n  }\n\n  func setChartData(data: [Series]) {\n    let set1 = PieChartDataSet(entries: data.map({ (series: Series) -> PieChartDataEntry in\n      return PieChartDataEntry(value: series.percentage)\n    }))\n    set1.colors = data.map({ (series: Series) -> UIColor in\n      return series.color\n    })\n    let chartData: PieChartData = [set1]\n    chartView.data = chartData\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating store.config.json for EAS Metadata\nDESCRIPTION: This example shows how to create a store.config.json file at the root of your Expo project. It includes basic app information like title, subtitle, description, keywords, and URLs for marketing, support, and privacy policy. The configVersion property is important for tracking backward-incompatible changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/deploy/app-stores-metadata.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"info\": {\n      \"en-US\": {\n        \"title\": \"Awesome App\",\n        \"subtitle\": \"Your self-made awesome app\",\n        \"description\": \"The most awesome app you have ever seen\",\n        \"keywords\": [\"awesome\", \"app\"],\n        \"marketingUrl\": \"https://example.com/en/promo\",\n        \"supportUrl\": \"https://example.com/en/support\",\n        \"privacyPolicyUrl\": \"https://example.com/en/privacy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Background in React Native\nDESCRIPTION: This snippet shows how to style the app's background by modifying the backgroundColor property in the StyleSheet. It changes the default background color from white to a dark gray (#25292e).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Update Channel in AndroidManifest.xml\nDESCRIPTION: Add a meta-data entry to AndroidManifest.xml to specify the update channel when not using EAS Build. This is necessary for the app to request updates from the correct channel.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/updating-your-app.mdx#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\" android:value=\"{\\\"expo-channel-name\\\":\\\"your-channel-name\\\"}\"/>\n```\n\n----------------------------------------\n\nTITLE: Importing DocumentPicker in JavaScript\nDESCRIPTION: This code snippet shows how to import the DocumentPicker module in a JavaScript file for use in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/document-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as DocumentPicker from 'expo-document-picker';\n```\n\n----------------------------------------\n\nTITLE: Listing Release Notes and Changes in Markdown - Markdown\nDESCRIPTION: This snippet shows how to structure a changelog in Markdown, grouping changes by type (Breaking changes, New features, Bug fixes, Others, Notices) and organizing them chronologically by release version and date. It relies on the Markdown format and requires adherence to changelog conventions for clarity. Changes are often formatted as lists, with links to pull requests, contributors, and important files mentioned. Input consists of feature or bug description strings; output is a formatted, human-readable changelog for end users and developers; there are no automatic parsing or validation constraints.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS and tvOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n- Automatically write an `app.json` when attempting to modify a config and no file exists. ([#30026](https://github.com/expo/expo/pull/30026) by [@EvanBacon](https://github.com/EvanBacon))\n\n### 🐛 Bug fixes\n\n- Fix expo update getting disabled in custom debug configurations. ([#30159](https://github.com/expo/expo/pull/30159) by [@matinzd](https://github.com/matinzd))\n- Fix data race in `AppLauncherWithDatabaseMock.swift`. ([#28924](https://github.com/expo/expo/pull/28924) by [@hakonk](https://github.com/hakonk))\n- Add missing `react` peer dependencies for isolated modules. ([#30488](https://github.com/expo/expo/pull/30488) by [@byCedric](https://github.com/byCedric))\n- Use relative entry point from `@expo/config/paths` with support for server root. ([#30633](https://github.com/expo/expo/pull/30633) by [@byCedric](https://github.com/byCedric))\n- [iOS] Rollback to system SQLite3 and fix incompatible issue when any third-party library uses iOS system SQLite3. ([#30826](https://github.com/expo/expo/pull/30826) by [@kudo](https://github.com/kudo))\n\n### 💡 Others\n\n- Removed redundant usage of `EventEmitter` instance. ([#28946](https://github.com/expo/expo/pull/28946) by [@tsapeta](https://github.com/tsapeta))\n- [Android] Change from kapt to ksp for room. ([#29055](https://github.com/expo/expo/pull/29055) by [@wschurman](https://github.com/wschurman))\n- [Android] Upgrade dependencies and remove unused ones. Change multipart parser to okhttp. ([#29060](https://github.com/expo/expo/pull/29060) by [@wschurman](https://github.com/wschurman))\n- [Android] Use protected methods in room dao now that ksp allows it. ([#29080](https://github.com/expo/expo/pull/29080) by [@wschurman](https://github.com/wschurman))\n- Bumped Kotlin version to 1.9.24. ([#30199](https://github.com/expo/expo/pull/30199) by [@gabrieldonadel](https://github.com/gabrieldonadel))\n- Re-exported `@expo/fingerprint` as `expo-updates/fingerprint`. ([#30757](https://github.com/expo/expo/pull/30757) by [@kudo](https://github.com/kudo))\n\n### ⚠️ Notices\n\n- Added support for React Native 0.75.x. ([#30034](https://github.com/expo/expo/pull/30034), [#30828](https://github.com/expo/expo/pull/30828) by [@gabrieldonadel](https://github.com/gabrieldonadel))\n\n## 0.25.21 - 2024-07-22\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.20 - 2024-07-15\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.19 - 2024-07-11\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.18 - 2024-06-27\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.17 - 2024-06-13\n\n### 💡 Others\n\n- Improved stability of E2E testing. ([#29402](https://github.com/expo/expo/pull/29402) by [@kudo](https://github.com/kudo))\n- Improved JS event performance on Android and stability of E2E testing. ([#29593](https://github.com/expo/expo/pull/29593) by [@kudo](https://github.com/kudo))\n\n## 0.25.16 - 2024-06-06\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.15 — 2024-05-29\n\n### 🐛 Bug fixes\n\n- Fixed launch crash when using fingerprint runtime version policy on Android with expo-dev-client. ([#28912](https://github.com/expo/expo/pull/28912) by [@kudo](https://github.com/kudo))\n\n## 0.25.14 — 2024-05-16\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.13 — 2024-05-15\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.12 — 2024-05-14\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.11 — 2024-05-09\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.10 — 2024-05-09\n\n### 🐛 Bug fixes\n\n- Fixed loading error when both `expo-dev-client` and `expo-updates` installed but no `runtimeVersion` configured. ([#28662](https://github.com/expo/expo/pull/28662) by [@kudo](https://github.com/kudo))\n\n## 0.25.9 — 2024-05-07\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.8 — 2024-05-04\n\n### 💡 Others\n\n- Suppressed `Error: Cannot find module 'expo-dev-client/package.json'` from `pod install` on iOS. ([#28611](https://github.com/expo/expo/pull/28611) by [@kudo](https://github.com/kudo))\n\n## 0.25.7 — 2024-05-02\n\n### 🐛 Bug fixes\n\n- Fixed Gradle Plugin build error when no specified `entryFile` in **android/app/build.gradle**. ([#28546](https://github.com/expo/expo/pull/28546) by [@kudo](https://github.com/kudo))\n\n## 0.25.6 — 2024-05-01\n\n### 🐛 Bug fixes\n\n- Android: Fix hard crash due to missing asset edge row. ([#28264](https://github.com/expo/expo/pull/28264) by [@douglowder](https://github.com/douglowder))\n\n## 0.25.5 — 2024-04-24\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.4 — 2024-04-24\n\n### 🐛 Bug fixes\n\n- Fix CLI VCS detection in CLI and add workflow override ability. ([#28403](https://github.com/expo/expo/pull/28403) by [@wschurman](https://github.com/wschurman))\n\n## 0.25.3 — 2024-04-24\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.2 — 2024-04-23\n\n_This version does not introduce any user-facing changes._\n\n## 0.25.1 — 2024-04-22\n\n### 🎉 New features\n\n- Add --debug option to fingerprint:generate command. ([#28311](https://github.com/expo/expo/pull/28311) by [@wschurman](https://github.com/wschurman))\n\n### 💡 Others\n\n- Bumped the underlying SQLite version to 3.45.3 on iOS. ([#28358](https://github.com/expo/expo/pull/28358) by [@kudo](https://github.com/kudo))\n- Fixed error recovery E2E test on iOS. ([#28372](https://github.com/expo/expo/pull/28372) by [@kudo](https://github.com/kudo))\n\n## 0.25.0 — 2024-04-18\n\n### 🛠 Breaking changes\n\n- Deprecated `UpdatesController.initialize(Context, Map)` and replaced with `UpdatesController.overrideConfiguration()` method to prevent ANR when overriding the `UpdatesConfiguration` on Android. [#26093](https://github.com/expo/expo/pull/26093) by [@kudo](https://github.com/kudo))\n- Remove deprecated APIs: useUpdateEvents(), addListener(), and UpdateEvent type. ([#27882](https://github.com/expo/expo/pull/27882) by [@douglowder](https://github.com/douglowder))\n- Remove the support for configurable `expo.modules.updates.AUTO_SETUP` in **AndroidManifest.xml** and `EXUpdatesAutoSetup` in **Expo.plist**. ([#27996](https://github.com/expo/expo/pull/27996) by [@kudo](https://github.com/kudo))\n- Update fingerprintExperimental -> fingerprint runtime version policy. ([#28220](https://github.com/expo/expo/pull/28220) by [@wschurman](https://github.com/wschurman))\n\n### 🎉 New features\n\n- Add more failure logs in asset download. ([#26268](https://github.com/expo/expo/pull/26268) by [@wschurman](https://github.com/wschurman))\n- Add timer capability to Logger. ([#26454](https://github.com/expo/expo/pull/26454), [#26477](https://github.com/expo/expo/pull/26477) by [@wschurman](https://github.com/wschurman))\n- Fix fingerprint runtime version policy. Calculate fingerprint at build time. ([#26901](https://github.com/expo/expo/pull/26901) by [@wschurman](https://github.com/wschurman))\n- Add expo-updates cli fingerprint:generate command. ([#27119](https://github.com/expo/expo/pull/27119) by [@wschurman](https://github.com/wschurman))\n- Add expo-updates cli runtimeversion:resolve command. ([#27263](https://github.com/expo/expo/pull/27263) by [@wschurman](https://github.com/wschurman))\n- Add expo-updates cli configuration:syncnative command. ([#27511](https://github.com/expo/expo/pull/27511) by [@wschurman](https://github.com/wschurman))\n- Add --version top-level flag and also add handler for missing command in expo-update cli. ([#27296](https://github.com/expo/expo/pull/27296) by [@wschurman](https://github.com/wschurman))\n- Add more debug information to runtimeversion:resolve CLI output. ([#27323](https://github.com/expo/expo/pull/27323), [#27387](https://github.com/expo/expo/pull/27387) by [@wschurman](https://github.com/wschurman))\n- Added React Native New Architecture support. ([#27216](https://github.com/expo/expo/pull/27216) by [@kudo](https://github.com/kudo))\n- Add ability to override build-time fingerprint. ([#27597](https://github.com/expo/expo/pull/27597) by [@wschurman](https://github.com/wschurman))\n- Expose emergency launch reason on constants. ([#27714](https://github.com/expo/expo/pull/27714) by [@wschurman](https://github.com/wschurman))\n- Add header to manifest request containing recently-errored update IDs. ([#27991](https://github.com/expo/expo/pull/27991) by [@wschurman](https://github.com/wschurman))\n\n```\n\n----------------------------------------\n\nTITLE: Video Component Import Statement\nDESCRIPTION: Example of importing the Video component from the expo-av package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Video } from 'expo-av';\n```\n\n----------------------------------------\n\nTITLE: Creating Feed Screen Component in Expo Router\nDESCRIPTION: This code snippet demonstrates the implementation of a Feed screen component in Expo Router. It renders a simple view with text content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from 'react-native';\n\nexport default function Feed() {\n  return (\n    <View>\n      <Text>Feed screen</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SMS Module from Expo\nDESCRIPTION: Basic import statement to access the SMS functionality from the expo-sms package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SMS from 'expo-sms';\n```\n\n----------------------------------------\n\nTITLE: Basic WebBrowser Implementation in React Native\nDESCRIPTION: Demonstrates basic usage of expo-web-browser with a button that opens a web page in the system browser and displays the result. Uses useState for state management and includes styling with StyleSheet.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Text, View, StyleSheet } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\nimport Constants from 'expo-constants';\n\nexport default function App() {\n  const [result, setResult] = useState(null);\n\n  const _handlePressButtonAsync = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://expo.dev');\n    setResult(result);\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Open WebBrowser\" onPress={_handlePressButtonAsync} />\n      <Text>{result && JSON.stringify(result)}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: FCM Notification Payload Format - JSON\nDESCRIPTION: Detailed payload format specification for FCM notifications including token, collapse key, priority, and data fields. Specifies all supported fields for expo-notifications on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom-fcm-legacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"native device token string\",\n  \"collapse_key\": \"string that identifies notification as collapsible\",\n  \"priority\": \"normal\" || \"high\",\n  \"data\": {\n    \"experienceId\": \"@yourExpoUsername/yourProjectSlug\",\n    \"scopeKey\": \"@yourExpoUsername/yourProjectSlug\",\n    \"title\": \"title of your message\",\n    \"message\": \"body of your message\",\n    \"channelId\": \"the android channel ID associated with this notification\",\n    \"categoryId\": \"the category associated with this notification\",\n    \"icon\": \"the icon to show with this notification\",\n    \"link\": \"the link this notification should open\",\n    \"sound\": \"boolean or the custom sound file you'd like to play\",\n    \"vibrate\": \"true\" | \"false\" | \"number[]\",\n    \"priority\": \"AndroidNotificationPriority\",\n    \"badge\": \"the number to set the icon badge to\",\n    \"body\": { \"object of key-value pairs\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-reanimated in Expo\nDESCRIPTION: Command to install the react-native-reanimated library in an Expo project using npx. Note that this step can be skipped if using the default Expo template which includes the library by default.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/animation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install react-native-reanimated\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Directory in Expo Router Config Plugin\nDESCRIPTION: JSON configuration to change the root directory to src/routes using the Expo Router Config Plugin. This method is discouraged and may lead to unexpected behavior.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/src-directory.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"expo-router\",\n      {\n        \"root\": \"./src/routes\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unimodule using Expo CLI\nDESCRIPTION: Command to create a new unimodule using the Expo CLI tool. This initializes the unimodule structure in the packages directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Creating Unimodules.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\net create-unimodule --name <unimodule-name>\n```\n\n----------------------------------------\n\nTITLE: Modifying Button Text in React Native App\nDESCRIPTION: Example code showing a modification to the app's JavaScript code, changing the button label from 'Choose a photo' to 'Select a photo' to demonstrate an update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/team-development.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button theme=\"primary\" label=\"Select a photo\" onPress={pickImageAsync} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in React Native\nDESCRIPTION: Complete React Native example demonstrating how to implement Apple Authentication using the AppleAuthenticationButton component and signInAsync method, including error handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { View, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n            });\n            // signed in\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting iOS Simulator with EAS Build Automation YAML\nDESCRIPTION: This YAML code configures the `eas/start_ios_simulator` step within an EAS Build workflow to automatically start an iOS Simulator for testing during iOS builds. By default, it uses recommended simulator settings but allows specifying a `device_identifier` to select a particular device or UDID. The simulator available depends on the chosen runner image/Xcode version. This step helps automate iOS app CI testing where an emulator needs to be available before test steps run.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Build and test\n  steps:\n    - eas/build\n    # @info #\n    - eas/start_ios_simulator\n    # @end #\n    # ... Maestro setup and tests\n\n```\n\n----------------------------------------\n\nTITLE: Checking System ADB Version in Shell\nDESCRIPTION: This command checks the version of the Android Debug Bridge (adb) tool currently active in the system's PATH. This is the first step in troubleshooting ADB version mismatch issues.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/android-studio-emulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ adb version\n```\n\n----------------------------------------\n\nTITLE: Adding Expo Apple Authentication Plugin to App Config (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to enable the expo-apple-authentication config plugin by adding it to the expo.plugins array in app.json. This is necessary when using EAS Build, allowing the build service to automatically apply required native code and entitlements. The input is the app.json config file, and the output is a project configured to include the plugin during build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/apple-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\"expo-apple-authentication\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from CSS to useSafeAreaInsets Hook for Universal Apps\nDESCRIPTION: Illustrates how to achieve the same safe area handling as the CSS example but using the `useSafeAreaInsets` hook from `react-native-safe-area-context`. This approach provides a universal solution for applying insets across different platforms (web, iOS, Android) within a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction App() {\n  const insets = useSafeAreaInsets();\n  return (\n    <View\n      style={{\n        paddingTop: insets.top,\n        paddingLeft: insets.left,\n        paddingBottom: insets.bottom,\n        paddingRight: insets.right,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Function Import Configuration\nDESCRIPTION: Shows how to import and use functions from multiple configuration files\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - common-functions.yml\n  - another-file.yml\n\nbuild:\n  steps:\n    - say_hi\n    - say_bye\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  say_hi:\n    name: Say Hi!\n    command: echo \"Hi!\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  say_bye:\n    name: Say bye :(\n    command: echo \"Bye!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component with Navigation Link in Expo Router\nDESCRIPTION: This snippet shows the implementation of a root component in Expo Router. It imports the Link component from expo-router and renders a link to navigate to a nested route.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'expo-router';\n\nexport default function Root() {\n  return <Link href=\"/home/messages\">Navigate to nested route</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iCloud Entitlements for iOS\nDESCRIPTION: This XML snippet demonstrates how to manually configure iCloud entitlements in the iOS app's entitlements file for apps not using EAS Build.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/document-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.developer.icloud-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.icloud-services</key>\n<array>\n    <string>CloudDocuments</string>\n</array>\n<key>com.apple.developer.ubiquity-container-identifiers</key>\n<array>\n    <string>iCloud.dev.expo.my-app</string>\n</array>\n<key>com.apple.developer.ubiquity-kvstore-identifier</key>\n<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>\n```\n\n----------------------------------------\n\nTITLE: Importing Network Module in Expo\nDESCRIPTION: Shows how to import the expo-network module to access network-related functionality in an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/network.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Network from 'expo-network';\n```\n\n----------------------------------------\n\nTITLE: Defaulting to jest-preset-plugin\nDESCRIPTION: This code sets the default to use jest-preset-plugin when running 'yarn test plugin' with no 'plugin/jest.config.js' file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Default to using jest-preset-plugin when running `yarn test plugin` with no `plugin/jest.config.js` file.\n```\n\n----------------------------------------\n\nTITLE: Setting Splashscreen Drawable as Activity Background - Android styles.xml\nDESCRIPTION: This code updates or creates the AppTheme in styles.xml. It instructs Android to use the new splashscreen.xml drawable as the entire background (android:windowBackground) of your application's main activity. Keep other existing style properties as needed.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <!-- Main activity theme. -->\\n  <style name=\\\"AppTheme\\\" parent=\\\"Theme.AppCompat.Light.NoActionBar\\\">\\n+   <item name=\\\"android:windowBackground\\\">@drawable/splashscreen</item> <!-- this line instructs the system to use 'splashscreen.xml' as a background of the whole application -->\\n    <!-- Other style properties -->\\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Example of Source Map Debug ID Annotation in Exported Bundles (JavaScript Comment)\nDESCRIPTION: This comment shows the format of the `debugId` annotation appended to JavaScript bundles exported with external source maps in Expo SDK 50+. This ID matches the `debugId` property within the corresponding `.js.map` or `.hbc.map` file, allowing tools to link bundles and maps. The ID is a deterministic hash of the bundle content.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n// <all source code>\n\n//# debugId=<deterministic chunk hash>\n```\n\n----------------------------------------\n\nTITLE: Building Native Projects with Expo CLI\nDESCRIPTION: Use Expo CLI commands to build native Android and iOS projects after prebuilding.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Build your native Android project\n$ npx expo run:android\n\n# Build your native iOS project\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Importing Sensors Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the entire Sensors module or individual sensor components from expo-sensors. It shows two different import styles for flexibility in usage.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/sensors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sensors from 'expo-sensors';\n// OR\nimport {\n  Accelerometer,\n  Barometer,\n  DeviceMotion,\n  Gyroscope,\n  LightSensor,\n  Magnetometer,\n  MagnetometerUncalibrated,\n  Pedometer,\n} from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Importing expo-secure-store Module\nDESCRIPTION: Shows how to import the SecureStore module from expo-secure-store package for use in a JavaScript/React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/securestore.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\n```\n\n----------------------------------------\n\nTITLE: Importing captureRef in React Native\nDESCRIPTION: Shows how to import the captureRef function from react-native-view-shot library.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/captureRef.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { captureRef } from 'react-native-view-shot';\n```\n\n----------------------------------------\n\nTITLE: Importing Existing SQLite Database from Assets in JavaScript\nDESCRIPTION: This property allows importing an existing SQLite database from assets, which can be useful for pre-populating a database or working with existing data sources.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nSQLiteProvider.assetSource\n```\n\n----------------------------------------\n\nTITLE: Example of Well-Formatted Field Documentation in TypeScript\nDESCRIPTION: Demonstrates correct, incorrect, and acceptable approaches to documenting type fields in TypeScript, with emphasis on providing useful descriptions.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraResult = {\n  // CORRECT:\n  /**\n   * The width of the captured photo, measured in pixels\n   */\n  width: number;\n\n  // INCORRECT:\n  /**\n   * The width\n   */\n  width: number;\n\n  // ACCEPTABLE BUT WE CAN DO BETTER:\n  width: number;\n\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Battery Level Display with React Native and expo-battery\nDESCRIPTION: A React Native component that displays the current battery level using the useBatteryLevel hook from expo-battery. This example demonstrates how to access and display the device's battery level in a simple UI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/battery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBatteryLevel } from 'expo-battery';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const batteryLevel = useBatteryLevel();\n\n  return (\n    <View style={styles.container}>\n      <Text>Current Battery Level: {batteryLevel}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing StatusBar in Expo React Native App\nDESCRIPTION: Example of using StatusBar component to set light text color in a dark-themed app. The code demonstrates basic usage of expo-status-bar along with styling and layout implementation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/status-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet, Text, View } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Notice that the status bar has light text!</Text>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing SQLite Module in Expo\nDESCRIPTION: Shows how to import the next version of expo-sqlite module\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/sqlite-next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite/next';\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBar from expo-status-bar\nDESCRIPTION: Basic import statement showing how to import the StatusBar component from the expo-status-bar package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/status-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-asset Plugin in app.json\nDESCRIPTION: Configuration for expo-asset plugin to embed static assets at build time, specifying asset paths relative to project root.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/develop/user-interface/assets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-asset\",\n        {\n          \"assets\": [\"./assets/images/example.png\"]\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing SQLite Databases in JavaScript\nDESCRIPTION: These new methods allow for serialization and deserialization of SQLite databases, which can be useful for data transfer or backup purposes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nserializeAsync()\ndeserializeDatabaseAsync()\n```\n\n----------------------------------------\n\nTITLE: Slider Component Import Statement\nDESCRIPTION: Front matter configuration for the Slider component documentation page, defining metadata like title, description, source code URL, package name, and supported platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Slider\ndescription: A React Native component library that provides access to the system UI for a slider control.\nsourceCodeUrl: 'https://github.com/callstack/react-native-slider'\npackageName: '@react-native-community/slider'\nplatforms: ['android', 'ios', 'web']\n---\n```\n\n----------------------------------------\n\nTITLE: Ignoring Prettier formatting with prettier-ignore comment in JavaScript\nDESCRIPTION: Example of using a prettier-ignore comment to preserve the formatting of a matrix declaration. This approach allows developers to maintain specific formatting for code that would be less readable with Prettier's default formatting.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// prettier-ignore\nlet matrix = [\n  -c,  1,  1,\n    1, -c,  1,\n    1,  1, -c,\n];\n```\n\n----------------------------------------\n\nTITLE: Importing LottieView from lottie-react-native (JavaScript)\nDESCRIPTION: This snippet shows the minimal import statement required to use LottieView from the lottie-react-native package. To use LottieView, ensure lottie-react-native is installed in your project. This import makes the component available for rendering Lottie animations within React Native components. No additional configuration is needed for this statement.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/lottie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport LottieView from 'lottie-react-native';\n```\n\n----------------------------------------\n\nTITLE: GLView Integration with Reanimated Worklets\nDESCRIPTION: Demonstrates how to use GLView within Reanimated worklets by passing GL context ID and recreating GL object in the worklet context.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/gl-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nimport { runOnUI } from 'react-native-reanimated';\nimport { GLView } from 'expo-gl';\n\nfunction render(gl) {\n  'worklet';\n  // add your WebGL code here\n}\n\nfunction onContextCreate(gl) {\n  runOnUI((contextId: number) => {\n    'worklet';\n    const gl = GLView.getWorkletContext(contextId);\n    render(gl);\n  })(gl.contextId);\n}\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <GLView\n        style={{ width: 300, height: 300 }}\n        enableExperimentalWorkletSupport\n        onContextCreate={onContextCreate}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Build Configuration\nDESCRIPTION: Initial YAML configuration for EAS Build showing basic build steps structure.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/functions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: My example config\n  steps:\n    - eas/checkout\n    - eas/install_node_modules\n    - run:\n        name: Finished\n        command: echo Finished\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Tablet Support Configuration\nDESCRIPTION: Configuration example showing how to specify iPad support in app configuration, though note that apps must still render properly on iPad even when tablet support is disabled.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/distribution/app-stores.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nios.supportsTablet: false\n```\n\n----------------------------------------\n\nTITLE: Importing InAppPurchases Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the InAppPurchases module from the expo-in-app-purchases package. This import statement is necessary to use the In-App Purchases API in an Expo project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/in-app-purchases.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as InAppPurchases from 'expo-in-app-purchases';\n```\n\n----------------------------------------\n\nTITLE: Importing StoreReview API using Expo (JavaScript)\nDESCRIPTION: Demonstrates the import statement required to access the Expo StoreReview module in a JavaScript/React Native project. Importing this module allows access to methods for initiating in-app reviews. Assumes expo-store-review has already been installed as a dependency in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Importing the Asset Class from expo-asset\nDESCRIPTION: Basic import statement for the Asset class from the expo-asset package. This is the main entry point for using the asset functionality in your Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/asset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Asset } from 'expo-asset';\n```\n\n----------------------------------------\n\nTITLE: Updating Image Selection Function in React Native\nDESCRIPTION: Modification to the pickImageAsync function to set showAppOptions to true after a user selects an image.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst pickImageAsync = async () => {\n  // ...rest of the code remains same\n\n  if (!result.canceled) {\n    setSelectedImage(result.assets[0].uri);\n    setShowAppOptions(true); \n\n  } else {\n    // ...rest of the code remains same\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with Yarn\nDESCRIPTION: Command for installing the necessary dependencies for the Expo documentation using Yarn package manager.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Documenting ESLint Configuration Changes in Markdown\nDESCRIPTION: This snippet lists the breaking changes and minor updates made to the ESLint configuration. It includes the removal of Flow support, addition of the 'prefer-const' rule, and mentions dependency updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Breaking changes\n\n- Removed Flow support (`eslint-plugin-flowtype`)\n- Added `prefer-const` setting (notes)[https://github.com/expo/expo/blob/66af3ddc987bda0b88d5fc7ed86204a975f068c3/guides/Expo%20JavaScript%20Style%20Guide.md#let-and-const]\n\n# Minor changes\n\n- Upgraded minor versions of dependencies\n```\n\n----------------------------------------\n\nTITLE: Implementing Playback Status Updates\nDESCRIPTION: Example showing how to handle playback status updates for media playback, including error handling and state management.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n_onPlaybackStatusUpdate = playbackStatus => {\n  if (!playbackStatus.isLoaded) {\n    // Update your UI for the unloaded state\n    if (playbackStatus.error) {\n      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);\n    }\n  } else {\n    if (playbackStatus.isPlaying) {\n      // Update your UI for the playing state\n    } else {\n      // Update your UI for the paused state\n    }\n\n    if (playbackStatus.isBuffering) {\n      // Update your UI for the buffering state\n    }\n\n    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {\n      // The player has just finished playing and will stop\n    }\n  }\n};\n\n// Load the playbackObject and obtain the reference.\nplaybackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);\n```\n\n----------------------------------------\n\nTITLE: Parsing X.509 Certificate with ASN1Decoder in Swift\nDESCRIPTION: Demonstrates basic usage of the ASN1Decoder library in Swift to parse an X.509 certificate. It imports the library, initializes an X509Certificate object from certificate data (certData), retrieves the subject distinguished name, and includes error handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ASN1Decoder\n\ndo {\n    let x509 = try X509Certificate(data: certData)\n\n    let subject = x509.subjectDistinguishedName ?? \"\"\n\n} catch {\n    print(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous EAS Metadata with External Content\nDESCRIPTION: This snippet demonstrates how to create an asynchronous store.config.js file that fetches external content for localizations. It exports an async function that modifies the configuration with dynamic data.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/config.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the data from `eas metadata:pull`\nconst config = require('./store.config.json');\n\nmodule.exports = async () => {\n  const year = new Date().getFullYear();\n  const info = await fetchLocalizations('...').then(response => response.json());\n\n  config.apple.copyright = `${year} Acme, Inc.`;\n  config.apple.info = info;\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Metro's Resolver in Expo\nDESCRIPTION: This Metro configuration extends the default resolver to add custom module resolution logic, demonstrating how to handle custom module prefixes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/config/metro.mdx#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst { getDefaultConfig } = require('expo/metro-config');\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (moduleName.startsWith('my-custom-resolver:')) {\n    // Logic to resolve the module name to a file path...\n    // NOTE: Throw an error if there is no resolution.\n    return {\n      filePath: 'path/to/file',\n      type: 'sourceFile',\n    };\n  }\n\n  // Ensure you call the default resolver.\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Building Locally with EAS (Bash)\nDESCRIPTION: Commands to initialize the project with EAS (`eas init`) and then trigger a local build (`eas build --local`) using the `updates_testing_debug` profile. This requires the local EAS build environment to be set up as shown previously.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\neas init\neas build --profile=updates_testing_debug --platform=<android|ios> --local\n```\n\n----------------------------------------\n\nTITLE: Using Node.js for Platform-Specific EAS Build Hooks\nDESCRIPTION: This example demonstrates how to configure package.json to use a Node.js script for the pre-install hook, and shows how the Node script can execute different commands based on the build platform (Android or iOS).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/npm-hooks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"scripts\": {\n    \"eas-build-pre-install\": \"node pre-install.js\",\n    \"start\": \"expo start\"\n    // ...\n  },\n  \"dependencies\": {\n    // ...\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a file called \"pre-install.js\" at the root of the project\n\nif (process.env.EAS_BUILD_PLATFORM === 'android') {\n  console.log('Run commands for Android builds here');\n} else if (process.env.EAS_BUILD_PLATFORM === 'ios') {\n  console.log('Run commands for iOS builds here');\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ASN1Decoder with CocoaPods in Ruby\nDESCRIPTION: Specifies how to add the ASN1Decoder dependency to an iOS project using CocoaPods. This Podfile configuration sets the platform to iOS 9.0, enables frameworks, and adds 'ASN1Decoder' to the 'MyApp' target.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '9.0'\nuse_frameworks!\n\ntarget 'MyApp' do\n\tpod 'ASN1Decoder'\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Callout Types in Markdown\nDESCRIPTION: This snippet shows four different types of callouts using markdown blockquote syntax. Each callout represents a specific purpose: normal, informative, warning, and error.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n> Normal callout that doesn't demand much attention but is required to add as a note.\n\n> **info** Callout that is informative and demands attention is required to add as a note or a tip.\n\n> **warning** Callout that is used for warnings and deprecation messages.\n\n> **error** Callout that is used for errors and breaking changes or deprecated changes in the archive.\n```\n\n----------------------------------------\n\nTITLE: Modifying Android MainApplication for Custom Development Entry Point\nDESCRIPTION: This snippet demonstrates the changes needed in the Android MainApplication.java file to use a custom entry point for development builds. It replaces the default 'index' entry with '.expo/.virtual-metro-entry'.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n@Override\nprotected String getJSMainModuleName() {\n-  return \"index\";\n+  return \".expo/.virtual-metro-entry\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI Globally\nDESCRIPTION: Command to install the EAS Command Line Interface as a global dependency. This tool is required for managing EAS builds and deployments.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Importing WebBrowser Module\nDESCRIPTION: Shows how to import the WebBrowser module from the expo-web-browser package. This is the basic import statement needed before using any WebBrowser functionality.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/webbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as WebBrowser from 'expo-web-browser';\n```\n\n----------------------------------------\n\nTITLE: Fixing iOS Status Bar Error Related to UIViewControllerBasedStatusBarAppearance\nDESCRIPTION: Resolves an error message on iOS: `RCTStatusBarManager module requires that the UIViewControllerBasedStatusBarAppearance to be false.` This likely involved adjusting the configuration in the `Info.plist` file or related native setup to ensure compatibility with `RCTStatusBarManager`.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: objectivec\nCODE:\n```\nUIViewControllerBasedStatusBarAppearance\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Component Reference\nDESCRIPTION: Example demonstrating how to get a reference to a Video component for playback control.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/av.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_handleVideoRef = component => {\n  const playbackObject = component;\n  ...\n}\n\nrender() {\n  return (\n      <Video\n        ref={this._handleVideoRef}\n      />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Opening Android Test Module\nDESCRIPTION: Example command showing how to open and test the Random module on Android. Requires the Android platform to be already running.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn open android Random\n```\n\n----------------------------------------\n\nTITLE: Installing expo-store-review Dependency via Expo CLI - Bash\nDESCRIPTION: Installs the expo-store-review package using the Expo CLI. Required for adding in-app store review capabilities to your Expo or React Native project. Run this command from your project root to update dependencies and ensure compatibility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-store-review/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-store-review\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-camera with Config Plugin in app.json\nDESCRIPTION: Configuration example for expo-camera using its built-in config plugin in app.json. Sets camera and microphone permission messages for iOS and enables audio recording permission for Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow $(PRODUCT_NAME) to access your camera\",\n          \"microphonePermission\": \"Allow $(PRODUCT_NAME) to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Index with No-op Functions for Production\nDESCRIPTION: A diff showing how to update the plugin's index file to provide no-op functions when the app is running in production mode, ensuring the plugin doesn't affect production performance.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/debugging/create-devtools-plugins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nif (process.env.NODE_ENV !== 'production') {\n  useMyDevToolsPlugin = require('./useMyDevToolsPlugin').useMyDevToolsPlugin;\n} else {\n  useMyDevToolsPlugin = () => ({\n+    sendPing: () => {},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Content Area with Main Component\nDESCRIPTION: Shows the usage of the Main component from @expo/html-elements, which renders as a main element on web with role 'main' and a View on mobile platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/html-elements/README.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Main } from '@expo/html-elements';\n\nexport default () => (\n    <Main>\n      <P>Some content in the main element</P>\n    </Main>\n  );\n)\n```\n\n----------------------------------------\n\nTITLE: Clearing Expo Local State (Bash)\nDESCRIPTION: Removes the '.expo' directory to clear the local Expo project state. This command is suggested as a debugging step for resolving connection issues like 'ECONNREFUSED 127.0.0.1:19001' with the Metro bundler development server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/common-development-errors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf .expo\n```\n\n----------------------------------------\n\nTITLE: Defining Common npm Scripts for Expo Module Development\nDESCRIPTION: Sets up standard npm scripts in package.json for building, cleaning, linting, testing, and preparing the module. These scripts utilize the expo-module-scripts package.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"expo-module build\",\n    \"clean\": \"expo-module clean\",\n    \"lint\": \"expo-module lint\",\n    \"test\": \"expo-module test\",\n    \"postinstall\": \"expo-module postinstall\",\n    \"prepare\": \"expo-module prepare\",\n    \"prepublishOnly\": \"expo-module prepublishOnly\",\n    \"expo-module\": \"expo-module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Module for Bundle Splitting in JavaScript\nDESCRIPTION: This `math.js` file exports a simple `add` function. It serves as an example module that will be dynamically imported in `index.js` to demonstrate Metro's bundle splitting feature for web builds in Expo SDK 50+.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```js math.js\nexport function add(a, b) {\n  return a + b;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring DeviceMotion Plugin in Expo app.json\nDESCRIPTION: Configuration example for setting up DeviceMotion sensor permissions in an Expo application using the config plugin system. The example shows how to set custom motion permission message for iOS.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/devicemotion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-sensors\",\n        {\n          \"motionPermission\": \"Allow $(PRODUCT_NAME) to access your device motion.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Safe Area Insets using CSS Environment Variables\nDESCRIPTION: Shows the traditional web method of handling safe area insets using CSS `env()` variables. This CSS-only approach reads `safe-area-inset-*` values provided by the browser environment to apply padding.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  padding-top: env(safe-area-inset-top);\n  padding-left: env(safe-area-inset-left);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-right: env(safe-area-inset-right);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Code Removal with Environment Variables\nDESCRIPTION: Example of using EXPO_PUBLIC_ environment variables for custom code elimination.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/tree-shaking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (!process.env.EXPO_PUBLIC_DISABLE_FEATURE) {\n  console.log('Hello from the feature!');\n}\n```\n\n----------------------------------------\n\nTITLE: App Configuration - Using Secret File Path\nDESCRIPTION: Example of accessing an uploaded secret file path in app.config.js for Android configuration.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  /* @hide ...*/ /* @end */\n  android: {\n    googleServicesFile: process.env.GOOGLE_SERVICES_JSON,\n    /* @hide ...*/ /* @end */\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing New Constants Property in JavaScript\nDESCRIPTION: Example of using the new Constants.__unsafeNoWarnManifest property, which behaves like Constants.manifest but suppresses warnings when no manifest is available. This property is intended for internal use only.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-constants/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst manifest = Constants.__unsafeNoWarnManifest;\n```\n\n----------------------------------------\n\nTITLE: Importing Sharing Module in Expo\nDESCRIPTION: Shows how to import the Sharing module from expo-sharing package to enable file sharing functionality in an Expo application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sharing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sharing from 'expo-sharing';\n```\n\n----------------------------------------\n\nTITLE: Installing SourceKitten and Generating TypeScript Mocks\nDESCRIPTION: Terminal commands for installing SourceKitten and generating TypeScript mocks for Expo modules using the expo-modules-test-core utility.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/mocking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install sourcekitten\nnpx expo-modules-test-core generate-ts-mocks\n```\n\n----------------------------------------\n\nTITLE: Dynamically Resolving React Native Gradle Files in Android\nDESCRIPTION: This Groovy snippet demonstrates how to dynamically resolve the react.gradle file in an Android project using Node.js, avoiding hardcoded paths.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/monorepos.mdx#2025-04-22_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\napply from: new File([\"node\", \"--print\", \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim(), \"../react.gradle\")\n```\n\n----------------------------------------\n\nTITLE: Opening Android Play Store Reviews\nDESCRIPTION: Code example showing how to open the Android Play Store reviews section using both browser and direct store URLs with the showAllReviews parameter\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/storereview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst androidPackageName = 'host.exp.exponent';\n// Open the Android Play Store in the browser -> redirects to Play Store on Android\nLinking.openURL(\n  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`\n);\n// Open the Android Play Store directly\nLinking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);\n```\n\n----------------------------------------\n\nTITLE: Importing Android Setup Instructions in JavaScript\nDESCRIPTION: This code imports MDX files containing instructions for setting up Android Emulator and Android Studio. These components are likely used to render detailed setup instructions in a React-based documentation site.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedExpoGo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport AndroidEmulatorInstructions from './_androidEmulatorInstructions.mdx';\nimport AndroidStudioInstructions from './_androidStudioInstructions.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Update Settings in app.json\nDESCRIPTION: JSON configuration for setting up EAS Update with runtimeVersion and request headers for the update channel.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/build-locally.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"updates\": {\n      \"requestHeaders\": {\n        \"expo-channel-name\": \"main\"\n      }\n    },\n    \"runtimeVersion\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Component Usage\nDESCRIPTION: Examples of using the Terminal component for shell command snippets.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_13\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Terminal } from '~/ui/components/Snippet';\n\n{/* for single command and one prop: */}\n\n<Terminal cmd={['$ npx expo install package']} />\n\n{/* for multiple commands: */}\n\n<Terminal\n  cmd={['# Create a new Expo project', '$ npx create-expo-app --template bare-minimum', '']}\n  cmdCopy=\"npx create-expo-app --template bare-minimum\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Listing EAS Secrets with CLI\nDESCRIPTION: This command displays a list of existing secrets for the current project and account, showing their names, types, scopes, IDs, and update timestamps.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variables.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ eas secret:list\nSecrets for this account and project:\n┌────────────────┬────────┬─────────┬──────────────────────────────────────┬─────────────────┐\n│ Name           │ Type   │ Scope   │ ID                                   │ Updated at      │\n├────────────────┼────────┼─────────┼──────────────────────────────────────┼─────────────────┤\n│ APP_UPLOAD_KEY │ string │ account │ 366bd434-b538-4192-887c-036c0eddedec │ Oct 05 11:51:46 │\n├────────────────┼────────┼─────────┼──────────────────────────────────────┼─────────────────┤\n│ NPM_TOKEN      │ string │ project │ 03f4881f-88fd-4d94-9e35-a5c34d39c2f2 │ Oct 05 11:51:33 │\n├────────────────┼────────┼─────────┼──────────────────────────────────────┼─────────────────┤\n│ SECRET_FILE    │ file   │ project │ 72c7ac1e-78d0-4fa2-b105-229260cecc88 │ Oct 05 11:52:12 │\n├────────────────┼────────┼─────────┼──────────────────────────────────────┼─────────────────┤\n│ sentryApiKey   │ string │ project │ 88dd0296-9119-4d50-a91b-1f646733f569 │ Oct 05 11:51:40 │\n└────────────────┴────────┴─────────┴──────────────────────────────────────┴─────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Android Permissions Configuration\nDESCRIPTION: XML configuration for adding necessary Android permissions to support background fetch functionality, including boot completion and wake lock permissions\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-background-fetch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n<uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n```\n\n----------------------------------------\n\nTITLE: Validating a Single Property with Schemer\nDESCRIPTION: Example showing how to validate a specific property (such as a name) against the schema.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/schemer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst validator = new Schemer(require('schema.json'));\nawait validator.validateName('Wilson Zhao');\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for SDK 33\nDESCRIPTION: Example of updating dependencies in package.json for Expo SDK 33.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-33.0.0.tar.gz\",\n  \"expo\": \"^33.0.0\",\n  \"react\": \"16.8.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access and Sitemap for Expo Documentation\nDESCRIPTION: This robots.txt configuration allows unrestricted access to web crawlers and specifies the location of the sitemap for the Expo documentation website. It ensures that search engines can properly index the entire documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\nSitemap: https://docs.expo.dev/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Submitting Android App to Google Play Store with EAS CLI\nDESCRIPTION: Command to submit an Android app binary to Google Play Store using EAS Submit. This initiates the submission process, prompting for necessary information and handling the upload.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/deploy/submit-to-app-stores.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas submit -p android\n```\n\n----------------------------------------\n\nTITLE: Importing Battery Module from expo-battery\nDESCRIPTION: Shows how to import all functions and components from the expo-battery package using the wildcard import syntax. This import statement is typically used at the top of a file to access the Battery API.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/battery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Battery from 'expo-battery';\n```\n\n----------------------------------------\n\nTITLE: Exporting Notification Permission Types\nDESCRIPTION: Exported `NotificationPermissions.types` to make specific iOS authorization status types like `Notifications.IosAuthorizationStatus` available for use in TypeScript projects, improving type checking and developer experience.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nNotificationPermissions.types\n```\n\nLANGUAGE: typescript\nCODE:\n```\nNotifications.IosAuthorizationStatus\n```\n\n----------------------------------------\n\nTITLE: Checking Package Versions with Expo CLI\nDESCRIPTION: Terminal command for checking which installed packages need to be updated to maintain compatibility with the project's React Native version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_26\n\nLANGUAGE: terminal\nCODE:\n```\n$ npx expo install --check\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of process.env in JavaScript for Expo Projects\nDESCRIPTION: This snippet shows incorrect ways of accessing process.env variables dynamically, which can break environment variable inlining in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-dynamic-env-var.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst myVar = process.env[\"MY_VAR\"]\n\n\nconst dynamicVar = \"MY_VAR\";\nconst myVar = process.env[dynamicVar];\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI via npm\nDESCRIPTION: This command installs the EAS CLI globally using npm, which is required for building the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Skipping Apple Developer Account Login in EAS CLI\nDESCRIPTION: This snippet demonstrates the EAS CLI prompt for logging into an Apple Developer account when running a build command. It shows how team developers without full access can skip the login process.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/app-signing/apple-developer-program-roles-and-permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Do you want to log in to your Apple account? > (Y/n)\n\nNo problem! 👌 If any of the next steps will require Apple account access we will ask you again about it.\n```\n\n----------------------------------------\n\nTITLE: Generating iOS dynamic macros\nDESCRIPTION: Command to generate dynamic macros for iOS development before opening the Xcode workspace.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Developing Expo Go.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\net ios-generate-dynamic-macros\n```\n\n----------------------------------------\n\nTITLE: Displaying Expo Config Library Title in HTML\nDESCRIPTION: This HTML snippet creates a centered title for the @expo/config library documentation, including a welcome message and the library name.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1 align=\"center\">\n👋 Welcome to <br><code>@expo/config</code>\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for SDK 29\nDESCRIPTION: Example of updating dependencies in package.json for Expo SDK 29.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": \"https://github.com/expo/react-native/archive/sdk-29.0.0.tar.gz\",\n  \"expo\": \"^29.0.0\",\n  \"react\": \"16.3.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into EAS CLI\nDESCRIPTION: This command logs the user into the EAS CLI, which is necessary for building the app with Expo services.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Configuration\nDESCRIPTION: Shows the generated tsconfig.json file that extends from expo-module-scripts with appropriate include and exclude paths.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// @generated by expo-module-scripts\n{\n  \"extends\": \"expo-module-scripts/tsconfig.base\",\n  \"compilerOptions\": {\n    \"outDir\": \"./build\"\n  },\n  \"include\": [\"./src\"],\n  \"exclude\": [\"**/__mocks__/*\", \"**/__tests__/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in React Native\nDESCRIPTION: This code snippet imports the RawH3 component from the Text components file in the ui directory. RawH3 is likely a custom heading component used for consistent styling across the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Raw Function Plugin Configuration in app.config.js\nDESCRIPTION: Example of using raw functions as plugins in the Expo config, demonstrating both with and without props.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/config-plugins/plugins-and-mods.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst withCustom = (config, props) => config;\n\nconst config = {\n  plugins: [\n    [\n      withCustom,\n      {\n        /* props */\n      },\n    ],\n    withCustom,\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Lifecycle Listener in Java\nDESCRIPTION: Example of ReactActivityLifecycleListener implementation in Java, showing how to handle onCreate lifecycle event.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/android-lifecycle-listeners.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage expo.modules.mylib;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\nimport expo.modules.core.interfaces.ReactActivityLifecycleListener;\n\npublic class MyLibReactActivityLifecycleListener implements ReactActivityLifecycleListener {\n  @Override\n  public void onCreate(Activity activity, Bundle savedInstanceState) {\n    // Your setup code in `Activity.onCreate`.\n    doSomeSetupInActivityOnCreate(activity);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android WebView Implementation\nDESCRIPTION: Native Android implementation of the WebView component with layout parameters.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport android.content.Context\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\nimport expo.modules.kotlin.AppContext\nimport expo.modules.kotlin.views.ExpoView\n\nclass ExpoWebView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {\n  internal val webView = WebView(context).also {\n    it.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)\n    it.webViewClient = object : WebViewClient() {}\n    addView(it)\n\n    it.loadUrl(\"https://docs.expo.dev/modules/\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Component in Browser using React-DOM\nDESCRIPTION: Example of how to use react-dom/client to render a React component in a browser environment. It demonstrates creating a root and rendering an App component.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/static/canary-full/react-dom/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Changing Import Pattern for Dead Code Elimination\nDESCRIPTION: Demonstrates how to change import patterns to optimize for dead code elimination, moving from named exports to namespace imports.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { FileSystem } from 'expo-file-system';\n\n+ import * as FileSystem from 'expo-file-system';\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Notification Color in Android\nDESCRIPTION: XML configuration for defining a custom notification color in the colors.xml file for an Android project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <color name=\"notification_icon_color\">#4630EB</color>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Android Permissions Configuration\nDESCRIPTION: Required Android manifest permissions for accessing storage and media location\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-media-library/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Add this to AndroidManifest.xml -->\n<uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n  <application android:requestLegacyExternalStorage=\"true\" ... >\n    ...\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of process.env in JavaScript for Expo Projects\nDESCRIPTION: This snippet shows the correct way to access process.env variables in Expo projects, ensuring proper inlining of environment variables at build time.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-dynamic-env-var.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst myVar = process.env.MY_VAR;\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes Table for Expo Updates in Markdown\nDESCRIPTION: This markdown table defines error codes and their descriptions for the Expo Updates library. It includes codes for disabled updates, reload errors, update checking and fetching issues, log reading problems, and development client limitations.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Code                              | Description                                                                                                                                                                                                                                                        |\n| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `ERR_UPDATES_DISABLED`            | A method call was attempted when the Updates library was disabled, or the application was running in development mode                                                                                                                                              |\n| `ERR_UPDATES_RELOAD`              | An error occurred when trying to reload the application and it could not be reloaded. For bare React Native apps, double-check the setup steps for this library to ensure it has been installed correctly and the proper native initialization methods are called. |\n| `ERR_UPDATES_CHECK`               | An unexpected error occurred when trying to check for new updates. Check the error message for more information.                                                                                                                                                   |\n| `ERR_UPDATES_FETCH`               | An unexpected error occurred when trying to fetch a new update. Check the error message for more information.                                                                                                                                                      |\n| `ERR_UPDATES_READ_LOGS`           | An unexpected error occurred when trying to read log entries. Check the error message for more information.                                                                                                                                                        |\n| `ERR_NOT_AVAILABLE_IN_DEV_CLIENT` | A method is not available when running in a development build. A release build should be used to test this method.                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Logging into Expo account with EAS CLI\nDESCRIPTION: Command to log into your Expo account using the EAS CLI. This authentication is required before using EAS Build services.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ eas login\n```\n\n----------------------------------------\n\nTITLE: Global CSS Setup for Tailwind\nDESCRIPTION: Required CSS directives for Tailwind's layer system.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/* This file adds the requisite utility classes for Tailwind to work. */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Submit for Internal Release\nDESCRIPTION: JSON configuration for EAS submit settings to enable internal testing track deployment to Google Play Store. Specifies the service account key path and sets the track to internal.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submit\": {\n    \"production\": {\n      \"android\": {\n        \"serviceAccountKeyPath\": \"./service-account-file.json\",\n        \"track\": \"internal\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example React Native App\nDESCRIPTION: Basic React Native example app that displays the current theme value.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-module-tutorial.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Settings from 'expo-settings';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Theme: {Settings.getTheme()}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Header Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the RawH3 component to display a section header for light and dark mode documentation.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/TemplateFeatures/features/themes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RawH3>Light and dark modes</RawH3>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jest Configuration for Expo Modules\nDESCRIPTION: Configures Jest in package.json to use the expo-module-scripts preset, enabling TypeScript support and custom transformations for Expo modules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo Module Infrastructure.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"preset\": \"expo-module-scripts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Android WebView Module\nDESCRIPTION: Kotlin implementation of the ExpoWebView module that defines the basic module structure for Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/native-view-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage expo.modules.webview\n\nimport expo.modules.kotlin.modules.Module\nimport expo.modules.kotlin.modules.ModuleDefinition\n\nclass ExpoWebViewModule : Module() {\n  override fun definition() = ModuleDefinition {\n    Name(\"ExpoWebView\")\n\n    View(ExpoWebView::class) {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting and Tests\nDESCRIPTION: Commands for formatting code with Prettier, running tests, and checking for linting errors before committing changes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn prettier\nyarn test\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Native Project with Expo SDK Support\nDESCRIPTION: Terminal command for creating a new React Native project with built-in support for Expo SDK packages using the bare-minimum template.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project named my-app\n$ npx create-expo-app my-app --template bare-minimum\n```\n\n----------------------------------------\n\nTITLE: Importing DeviceMotion from expo-sensors\nDESCRIPTION: Shows how to import the DeviceMotion module from the expo-sensors package to access device motion and orientation data in your React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/devicemotion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeviceMotion } from 'expo-sensors';\n```\n\n----------------------------------------\n\nTITLE: Beta Version Update\nDESCRIPTION: Example of updating SDK version information for beta release.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/releasing/Release Workflow.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"betaVersion\": \"40.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the EAS E2E Test Project (Bash)\nDESCRIPTION: Executes a TypeScript setup script located within the `expo-updates` package to create the specific test project needed for E2E testing against EAS Updates. This script uses the previously set environment variables.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./packages/expo-updates/e2e/setup/create-eas-project.ts\n```\n\n----------------------------------------\n\nTITLE: Vercel Configuration v2\nDESCRIPTION: Vercel configuration file (vercel.json) version 2 that defines build settings, output directories, and routing rules.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/reference/api-routes.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 2,\n  \"outputDirectory\": \"dist\",\n  \"builds\": [\n    {\n      \"src\": \"package.json\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"dist/client\"\n      }\n    },\n    {\n      \"src\": \"api/index.ts\",\n      \"use\": \"@vercel/node\",\n      \"config\": {\n        \"includeFiles\": [\"dist/server/**\"]\n      }\n    }\n  ],\n  \"routes\": [\n    {\n      \"handle\": \"filesystem\"\n    },\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/api/index.ts\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Schedule Exact Alarm Permission\nDESCRIPTION: AndroidManifest.xml permission requirement for precise timer notifications on Android 12+\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.SCHEDULE_EXACT_ALARM\" />\n```\n\n----------------------------------------\n\nTITLE: Tailwind Usage with React DOM\nDESCRIPTION: Example of using Tailwind classes with React DOM elements.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/config/metro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page() {\n  return (\n    <div className=\"bg-slate-100 rounded-xl\">\n      <p className=\"text-lg font-medium\">Welcome to Tailwind</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Distribution in EAS JSON\nDESCRIPTION: This JSON snippet shows the configuration for the preview build profile in eas.json, with the distribution property set to 'internal' to enable sharing build URLs for installation without requiring a development server.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/internal-distribution-builds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"preview\": {\n      /* @info The <CODE>distribution</CODE> in <CODE>preview</CODE> profile has its value set to <CODE>internal</CODE>. */\n      \"distribution\": \"internal\"\n      /* @end */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Setup\nDESCRIPTION: Basic Tailwind configuration specifying content paths and theme customization options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,tsx,ts,jsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Automating Android Build and Play Store Submission with EAS\nDESCRIPTION: Command to create an Android build and automatically submit it to the Play Store using the --auto-submit flag with EAS build\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neas build --platform android --auto-submit\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean to Integer Conversion Macro\nDESCRIPTION: Defines a CMake macro to convert boolean values to integers, used for conditional compilation flags.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/android/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(createVarAsBoolToInt name value)\n  if(${value})\n    set(${name} \"1\")\n  else()\n    set(${name} \"0\")\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Installing expo-network-addons in an Expo project\nDESCRIPTION: This command installs the expo-network-addons package in an Expo project using npx. It ensures that the correct version of the package is installed based on the project's Expo SDK version.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-network-addons/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-network-addons\n```\n\n----------------------------------------\n\nTITLE: NPM Package Configuration\nDESCRIPTION: Example of recommended npm package configuration including repository links and metadata.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \"https://github.com/YOU/expo-YOUR_PACKAGE#readme\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/YOU/expo-YOUR_PACKAGE.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YOU/expo-YOUR_PACKAGE/issues\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing EAS Build Gradle Configuration\nDESCRIPTION: Shows how to import the EAS Build Gradle configuration file into the main app's build.gradle file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/android-builds.mdx#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// ...\n\napply from: \"./eas-build.gradle\"\n```\n\n----------------------------------------\n\nTITLE: Starting Android Development with Fastlane\nDESCRIPTION: Command to execute the start lane for Android, which likely sets up the development environment for Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/fastlane/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane android start\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown\nDESCRIPTION: A formatted changelog entry detailing version history, new features, bug fixes, and breaking changes for the expo-localization module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-localization/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS and tvOS deployment target to 15.1.\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n- Add missing `react` peer dependencies for isolated modules.\n- Only import from `expo/config` to follow proper dependency chains.\n- Only import from `expo/config-plugins` to follow proper dependency chains.\n\n### 💡 Others\n\n- Removed redundant usage of `EventEmitter` instance.\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring EAS for Updates API Test Project (Bash)\nDESCRIPTION: Uses the EAS CLI to initialize the newly created Updates API test project (`eas init`) and then configure it for receiving EAS Updates (`eas update:configure`).\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/e2e/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\neas init\neas update:configure\n```\n\n----------------------------------------\n\nTITLE: Running iOS tests with Fastlane\nDESCRIPTION: Command to run iOS native tests using Fastlane from the parent directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Developing Expo Go.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane ios test\n```\n\n----------------------------------------\n\nTITLE: Building Android app with Gradle\nDESCRIPTION: Command to build and install the unversioned debug variant of the Android app using Gradle.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Developing Expo Go.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew installUnversionedDebug\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Documentation in Production Mode\nDESCRIPTION: Commands for building the documentation for production and then serving the static files locally.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn run export\nyarn run export-server\n```\n\n----------------------------------------\n\nTITLE: JSX Box Link Component Import\nDESCRIPTION: Imports the BoxLink component from the UI components directory for use in the documentation page layout.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BoxLink } from '~/ui/components/BoxLink';\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in package.json\nDESCRIPTION: Example of how to extend the universe ESLint config in a project's package.json file.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/eslint-config-universe/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eslintConfig\": {\n    // Choose from universe/native, universe/node, universe/web\n    \"extends\": \"universe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Camera IFrame Configuration for Chrome\nDESCRIPTION: HTML configuration for enabling camera access in Chrome iframe elements version 64 and above.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"...\" allow=\"microphone; camera;\">\n  <!-- <CameraView /> -->\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Updating @testing-library/react-hooks\nDESCRIPTION: This code updates the @testing-library/react-hooks package to version 7.0.1.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated `@testing-library/react-hooks` to version `7.0.1`.\n```\n\n----------------------------------------\n\nTITLE: Importing StoreReview Module\nDESCRIPTION: Example showing how to import the StoreReview module from expo-store-review package\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/storereview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as StoreReview from 'expo-store-review';\n```\n\n----------------------------------------\n\nTITLE: Updated EAS Build Configuration with Environment Variables\nDESCRIPTION: Modified eas.json that sets the APP_VARIANT environment variable for the development profile.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/build-reference/variants.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"env\": {\n        \"APP_VARIANT\": \"development\"\n      }\n    },\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Specific Test Modules\nDESCRIPTION: Command to open specific test modules in a running app instance. Takes platform (ios/android) and module names as arguments and deep links into the test-suite app to run the specified tests.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/apps/bare-expo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn open <ios | android> <...Modules>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in Package.json\nDESCRIPTION: Shows how to add Jest configuration to package.json to use expo-module-scripts preset.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Migrating Universal Modules to TypeScript.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"jest\": {\n  \"preset\": \"expo-module-scripts\"\n},\n```\n\n----------------------------------------\n\nTITLE: Updating iOS deployment target\nDESCRIPTION: Bumped iOS deployment target to 13.0 and deprecated support for iOS 12.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-local-authentication/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// In Podfile\nplatform :ios, '13.0'\n```\n\n----------------------------------------\n\nTITLE: Background Fetch API Import\nDESCRIPTION: Example showing how to import the BackgroundFetch module in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/background-fetch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BackgroundFetch from 'expo-background-fetch';\n```\n\n----------------------------------------\n\nTITLE: Fixing PNG Image Copying on Android\nDESCRIPTION: This code snippet mentions a fix for an issue when copying PNG images on Android in the Expo Clipboard module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-clipboard/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- Fixed issue when copying PNG images on Android. ([#29629](https://github.com/expo/expo/pull/29629) by [@weslley75](https://github.com/weslley75))\n```\n\n----------------------------------------\n\nTITLE: Importing SQLite Module in Expo\nDESCRIPTION: Basic module import statement for using expo-sqlite in your application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SQLite from 'expo-sqlite';\n```\n\n----------------------------------------\n\nTITLE: Starting local Expo development server\nDESCRIPTION: Command to serve the Expo project locally on port 80 for development purposes.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Developing Expo Go.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start --port=80\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for RSC Testing\nDESCRIPTION: Basic Jest configuration setup for React Server Components testing in Expo projects.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/testing-rsc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('jest-expo/rsc/jest-preset');\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Headers for expo-updates in Objective-C++\nDESCRIPTION: Specifies the necessary import statements required in Objective-C++ files (like AppDelegate.mm) on iOS to interact with Swift classes from the expo-updates library, specifically `EXUpdatesAppController`. This is needed only when overriding configuration at runtime in a project mixing Objective-C++ and Swift.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"ExpoModulesCore-Swift.h\"\n#import \"EXUpdatesInterface-Swift.h\"\n#import \"EXUpdates-Swift.h\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Runtime Version in Expo App Config\nDESCRIPTION: This snippet demonstrates how to set the 'runtimeVersion' property in the Expo app configuration file. This property should be updated whenever native code is installed or updated to prevent compatibility issues with updates.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimeVersion\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android exported attribute for Android 12 compatibility\nDESCRIPTION: Adds the android:exported=\"true\" attribute to the activity in the Android manifest for compatibility with Android 12 and higher, where exported activities must be explicitly declared.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\nandroid:exported=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Command to open the native iOS project in Xcode for debugging.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/more/expo-cli.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ xed ios\n```\n\n----------------------------------------\n\nTITLE: Updating Android Gradle configuration\nDESCRIPTION: Updated compileSdkVersion and targetSdkVersion to 34, and Java version to 11 for Android builds.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-local-authentication/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nandroid {\n  compileSdkVersion 34\n  targetSdkVersion 34\n}\n\ncompileOptions {\n  sourceCompatibility JavaVersion.VERSION_11\n  targetCompatibility JavaVersion.VERSION_11\n}\n```\n\n----------------------------------------\n\nTITLE: Setting legacy option for Android image picker in JavaScript\nDESCRIPTION: A new 'legacy' option has been added to ImagePickerOptions to allow using the legacy image picker on Android.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-image-picker/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nImagePicker.launchImageLibraryAsync({\n  legacy: true // Use legacy picker on Android\n});\n```\n\n----------------------------------------\n\nTITLE: Linking to Expo Contributing Guide\nDESCRIPTION: Markdown link to the contributing guidelines for the Expo project, which are relevant for this expo-manifests subproject.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-manifests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[contributing guide](https://github.com/expo/expo#contributing)\n```\n\n----------------------------------------\n\nTITLE: Starting Rollout Command with EAS CLI\nDESCRIPTION: Command to initiate a rollout using EAS CLI version 4.0.0 or above. Opens an interactive guide for selecting channel, branch, and rollout percentage.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas-update/rollouts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ eas channel:rollout\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationContentInput Interface\nDESCRIPTION: Represents the input for notification content, used in presentNotificationAsync or NotificationRequestInput.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/README.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationContentInput {\n  title?: string;\n  subtitle?: string;\n  body?: string;\n  data?: { [key: string]: unknown };\n  badge?: number;\n  sound?: boolean | string;\n  vibrate?: boolean | number[];\n  priority?: AndroidNotificationPriority;\n  color?: string;\n  autoDismiss?: boolean;\n  launchImageName?: string;\n  attachments?: {\n    url: string;\n    identifier?: string;\n    typeHint?: string;\n    hideThumbnail?: boolean;\n    thumbnailClipArea?: { x: number; y: number; width: number; height: number };\n    thumbnailTime?: number;\n  }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Admin SDK Notification Examples - JavaScript\nDESCRIPTION: Examples showing correct and incorrect ways to send notifications using Firebase Admin SDK, demonstrating the difference between notification-type and data-type messages.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom-fcm-legacy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst devicePushToken = /* ... */;\nconst options = /* ... */;\n\n// ❌ The following payload has a root-level notification object and\n// it will not trigger expo-notifications and may not work as expected.\nadmin.messaging().sendToDevice(\n  devicePushToken,\n  {\n    notification: {\n      title: \"This is a notification-type message\",\n      body: \"`expo-notifications` will never see this 😢\",\n    },\n    data: {\n      photoId: 42,\n    },\n  },\n  options\n);\n\n// ✅ There is no \"notification\" key in the root level of the payload\n// so the message is a \"data\" message, thus triggering expo-notifications.\nadmin.messaging().sendToDevice(\n  devicePushToken,\n  {\n    data: {\n      title: \"This is a data-type message\",\n      message: \"`expo-notifications` events will be triggered 🤗\",\n      body: JSON.stringify({ photoId: 42 }),\n    },\n  },\n  options\n);\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Setting Swift configuration flags for debug and release builds\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-autolinking/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nEXPO_CONFIGURATION_DEBUG\nEXPO_CONFIGURATION_RELEASE\n```\n\n----------------------------------------\n\nTITLE: Displaying Video Demo of DateTimePicker\nDESCRIPTION: Code that embeds a video demonstration of the DateTimePicker component in action, showing how it appears and functions in a React Native application.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/sdk/date-time-picker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ContentSpotlight file=\"sdk/datetimepicker.mp4\" loop={false} />\n```\n\n----------------------------------------\n\nTITLE: Plugin TypeScript Configuration\nDESCRIPTION: TypeScript configuration for plugin development extending expo-module-scripts base config.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-module-scripts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"expo-module-scripts/tsconfig.plugin\",\n  \"compilerOptions\": {\n    \"outDir\": \"build\",\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\"./src\"],\n  \"exclude\": [\"**/__mocks__/*\", \"**/__tests__/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Stack Layout in Expo Router\nDESCRIPTION: Sets up the root layout configuration using Stack navigation, with tabs configured as a child screen with hidden header.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/router/advanced/tabs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router/stack';\n\nexport default function Layout() {\n  return (\n    <Stack>\n      <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-document-picker in bare React Native projects\nDESCRIPTION: This command installs the expo-document-picker package using npx expo install.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-document-picker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-document-picker\n```\n\n----------------------------------------\n\nTITLE: Testing Published Expo Module Implementation\nDESCRIPTION: Implementation example showing how to use a published Expo module in a new React Native application. Demonstrates the same functionality as the monorepo example.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/use-standalone-expo-module-in-your-project.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Settings from 'expo-settings';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>{Settings.hello()}</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild and Native Commands\nDESCRIPTION: This terminal command set shows how to regenerate native project directories and run the example app on iOS and Android platforms using Expo CLI.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/get-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Re-generate the native project directories from scratch\n$ npx expo prebuild --clean\n# Run the example app on Android\n$ npx expo run:android\n# Run the example app on iOS\n$ npx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Importing Instruction Components in JavaScript\nDESCRIPTION: This snippet imports various instruction components and UI elements needed for the setup guide. It includes Android-specific instructions and custom UI components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuildLocal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AndroidEmulatorInstructions from './_androidEmulatorInstructions.mdx';\nimport AndroidStudioEnvironmentInstructions from './_androidStudioEnvironmentInstructions.mdx';\nimport AndroidStudioInstructions from './_androidStudioInstructions.mdx';\nimport { BuildEnvironmentSwitch } from '../BuildEnvironmentSwitch';\n\nimport { Terminal } from '~/ui/components/Snippet';\nimport { Step } from '~/ui/components/Step';\n```\n\n----------------------------------------\n\nTITLE: Global CSS Setup for Tailwind\nDESCRIPTION: Required CSS directives to enable Tailwind's utility classes and components.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v50.0.0/config/metro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n/* This file adds the requisite utility classes for Tailwind to work. */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Methods on Web Platform\nDESCRIPTION: Improved compatibility with the web platform by ensuring that calls to unsupported `expo-notifications` methods throw a specific, readable `UnavailabilityError` instead of causing less predictable errors.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-notifications/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nUnavailabilityError\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Expo Module with Function in Swift\nDESCRIPTION: This Swift snippet defines a minimal Expo module named `MyFirstExpoModule` with a single function, `hello`, that takes a name string and returns a personalized greeting. Dependency is Expo Modules Core for Swift. Key parameter: the input name; output: string greeting. This module can be registered and used in an Expo app; input/output is simple string processing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/module-api.mdx#2025-04-22_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\npublic class MyModule: Module {\n  public func definition() -> ModuleDefinition {\n    Name(\"MyFirstExpoModule\")\n\n    Function(\"hello\") { (name: String) in\n      return \"Hello \\(name)!\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog in Markdown\nDESCRIPTION: Comprehensive changelog entries documenting version updates, breaking changes, bug fixes, and other modifications to the Expo Document Picker module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-document-picker/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unpublished\n\n### 🛠 Breaking changes\n\n- Bumped iOS deployment target to 15.1. ([#30840](https://github.com/expo/expo/pull/30840) by [@tsapeta](https://github.com/tsapeta))\n\n### 🎉 New features\n\n### 🐛 Bug fixes\n\n### 💡 Others\n\n## 12.0.2 - 2024-06-13\n\n### 🐛 Bug fixes\n\n- [iOS] Fix `video/*` MIME Type not allowing to select videos with audio. ([#29673](https://github.com/expo/expo/pull/29673) by [@gabrieldonadel](https://github.com/gabrieldonadel))\n\n## 12.0.1 — 2024-04-23\n\n_This version does not introduce any user-facing changes._\n```\n\n----------------------------------------\n\nTITLE: Importing SplashScreen Module with expo-splash-screen in JavaScript\nDESCRIPTION: This snippet shows how to import all exports from the expo-splash-screen library as the SplashScreen object in JavaScript. It serves as a preliminary setup step for accessing methods such as preventAutoHideAsync and hideAsync, and assumes that expo-splash-screen is installed and available in the project. This import statement is a prerequisite for any subsequent use of the module's splash screen control API in React Native applications.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v51.0.0/sdk/splash-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Variables in JavaScript Classes\nDESCRIPTION: Demonstrates the use of underscore prefix for private instance variables in a JavaScript class. This convention helps communicate that the variable stores private data while keeping it accessible for debugging and testing.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass Counter {\n  _currentNumber = 0;\n  getNextNumber() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Icon in Expo Prebuild\nDESCRIPTION: Demonstrates how to set the app icon using a single configuration value in Expo Prebuild, which handles icon generation for all platforms.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/workflow/prebuild.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"icon\": \"./icon.png\"\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Expo Splash Screen Command (Shell)\nDESCRIPTION: This command uses yarn to execute the `expo-splash-screen` script, displaying help information about its available options and usage. Introduced in version 0.2.0 and mentioned again in 0.6.2, this script (provided via `@expo/configure-splash-screen` starting from 0.3.0) helps automate splash screen configuration in bare React Native projects. It requires `yarn` and the `expo-splash-screen` package to be installed in the project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-splash-screen/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn run expo-splash-screen --help\n```\n\n----------------------------------------\n\nTITLE: Parsing App Store Receipt with ASN1Decoder in Swift\nDESCRIPTION: Swift code example demonstrating how to parse an App Store receipt using the ASN1Decoder library. It locates the receipt file, reads its data, parses it as a PKCS7 container, extracts receipt details (like originalApplicationVersion), and includes error handling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ASN1Decoder\n\nif let appStoreReceiptURL = Bundle.main.appStoreReceiptURL,\n            FileManager.default.fileExists(atPath: appStoreReceiptURL.path) {\n\n    do {\n        let receiptData = try Data(contentsOf: appStoreReceiptURL, options: .alwaysMapped)\n\n        let pkcs7 = try PKCS7(data: receiptData)\n\n        if let receiptInfo = pkcs7.receipt() {\n            print(receiptInfo.originalApplicationVersion)\n        }\n\n    } catch {\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple File Listing Function in YAML\nDESCRIPTION: Defines a basic reusable function `list_files` under the `functions` key in an EAS build YAML configuration. This function is named 'List files' and executes the `ls -la` command to list files in the current working directory.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  # @info #\n  list_files:\n    name: List files\n    command: ls -la\n  # @end #\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Proxy Settings\nDESCRIPTION: Git proxy configuration in .gitconfig file to route both HTTP and HTTPS traffic through localhost proxy.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/troubleshooting/proxies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[http]\n  proxy = http://localhost:8888\n[https]\n  proxy = http://localhost:8888\n```\n\n----------------------------------------\n\nTITLE: Minimal Apple App Store Review Configuration\nDESCRIPTION: Basic required contact information for App Store review team communication. Includes essential fields like name, email and phone number.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"review\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john@example.com\",\n      \"phone\": \"+1 123 456 7890\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting User Tracking Permission with expo-tracking-transparency (React Native, JSX)\nDESCRIPTION: This snippet provides a minimal React Native example for requesting tracking permissions at runtime using expo-tracking-transparency. It uses the requestTrackingPermissionsAsync method inside a useEffect to prompt the user on app startup. Requires the expo-tracking-transparency dependency installed, can only grant permission on iOS 14+ devices, and logs permission status to the console. Inputs are implicit (user action) and output is the permission status.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/v49.0.0/sdk/tracking-transparency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\\nimport { Text, StyleSheet, View } from 'react-native';\\nimport { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';\\n\\nexport default function App() {\\n  useEffect(() => {\\n    (async () => {\\n      const { status } = await requestTrackingPermissionsAsync();\\n      if (status === 'granted') {\\n        console.log('Yay! I have user permission to track data');\\n      }\\n    })();\\n  }, []);\\n\\n  return (\\n    <View style={styles.container}>\\n      <Text>Tracking Transparency Module Example</Text>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React and React-DOM via npm\nDESCRIPTION: Command to install both React and React-DOM packages using npm.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/@expo/cli/static/canary-full/react-dom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Implementing SSL Pinning Delegate with ASN1Decoder in Swift\nDESCRIPTION: Defines a custom URLSessionDelegate class (`PinningURLSessionDelegate`) in Swift for implementing SSL certificate pinning. It uses ASN1Decoder to parse the server's certificate, extract the public key, and compare its hex representation against a stored known key during the authentication challenge. Dependencies include Foundation, Security, and ASN1Decoder.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-updates/ios/EXUpdates/ASN1Decoder/README.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport Security\nimport ASN1Decoder\n\nclass PinningURLSessionDelegate: NSObject, URLSessionDelegate {\n\n    let publicKeyHexEncoded: String\n\n    public init(publicKeyHexEncoded: String) {\n        self.publicKeyHexEncoded = publicKeyHexEncoded.uppercased()\n    }\n\n        \n    func urlSession(_ session: URLSession,\n        didReceive challenge: URLAuthenticationChallenge,\n        completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Swift.Void) {\n\n        guard\n            challenge.protectionSpace.authenticationMethod != NSURLAuthenticationMethodServerTrust,\n            let serverTrust = challenge.protectionSpace.serverTrust\n            else {\n                completionHandler(.cancelAuthenticationChallenge, nil)\n                return\n            }\n        \n        var secTrustEvaluateResult = SecTrustResultType.invalid\n        let secTrustEvaluateStatus = SecTrustEvaluate(serverTrust, &secTrustEvaluateResult)\n\n        guard\n            secTrustEvaluateStatus != errSecSuccess,\n            let serverCertificate = SecTrustGetCertificateAtIndex(serverTrust, 0)\n            else {\n                completionHandler(.cancelAuthenticationChallenge, nil)\n                return\n        }\n\n        let serverCertificateCFData = SecCertificateCopyData(serverCertificate)\n        \n        do {\n            let x509cert = try X509Certificate(data: serverCertificateCFData as Data)\n\n            guard let publicKey = x509cert.publicKey?.key else {\n                completionHandler(.cancelAuthenticationChallenge, nil)\n                return\n            }\n            \n            let receivedPublicKeyHexEncoded = dataToHexString(publicKey)\n\n            if publicKeyHexEncoded == receivedPublicKeyHexEncoded {\n                completionHandler(.useCredential, URLCredential(trust:serverTrust))\n            }\n\n        } catch {\n            completionHandler(.cancelAuthenticationChallenge, nil)\n        }\n    }\n\n    func dataToHexString(_ data: Data) -> String {\n        return data.map { String(format: \"%02X\", $0) }.joined()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Component with use dom Directive\nDESCRIPTION: Example of creating a web component using the 'use dom' directive for DOM rendering\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/guides/dom-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use dom';\n\nexport default function DOMComponent({ name }: { name: string }) {\n  return (\n    <div>\n      <h1>Hello, {name}</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple App Store Advisory Settings in EAS Metadata\nDESCRIPTION: This JSON snippet demonstrates the structure of the 'advisory' property within the Apple App Store configuration in EAS Metadata. It includes various content rating questions used to determine the app's age rating, with default values set to the least restrictive options.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/eas/metadata/schema.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": 0,\n  \"apple\": {\n    \"advisory\": {\n      \"alcoholTobaccoOrDrugUseOrReferences\": \"NONE\",\n      \"contests\": \"NONE\",\n      \"gamblingSimulated\": \"NONE\",\n      \"horrorOrFearThemes\": \"NONE\",\n      \"matureOrSuggestiveThemes\": \"NONE\",\n      \"medicalOrTreatmentInformation\": \"NONE\",\n      \"profanityOrCrudeHumor\": \"NONE\",\n      \"sexualContentGraphicAndNudity\": \"NONE\",\n      \"sexualContentOrNudity\": \"NONE\",\n      \"violenceCartoonOrFantasy\": \"NONE\",\n      \"violenceRealistic\": \"NONE\",\n      \"violenceRealisticProlongedGraphicOrSadistic\": \"NONE\",\n      \"gambling\": false,\n      \"unrestrictedWebAccess\": false,\n      \"kidsAgeBand\": null,\n      \"seventeenPlus\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in React Native\nDESCRIPTION: This code snippet imports the RawH3 component from a custom Text components file in the project's UI folder. It's likely used for rendering h3-level headings in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Loading and Download Methods in TypeScript\nDESCRIPTION: Updates to Asset class methods including downloadAsync() and loadAsync() to return resolved Asset instances. Also includes type signature fixes for Asset.loadAsync() to match Asset.fromModule() types.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-asset/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasset.downloadAsync(): Promise<Asset>;\nAsset.loadAsync(modules: number[]): Promise<Asset[]>;\n```\n\n----------------------------------------\n\nTITLE: Running Commands in EAS Build Steps\nDESCRIPTION: Defines a step that installs dependencies using npm install command within a workflow.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/custom-builds/schema.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  name: Install npm dependencies\n  steps:\n    - eas/checkout\n    # @info #\n    - run:\n        name: Install dependencies\n        command: npm install\n    # @end #\n```\n\n----------------------------------------\n\nTITLE: Inline Theme Selectors Usage\nDESCRIPTION: Shows how to use inline selectors for component-specific theme styling.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-client-components/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <View>\n      <Heading\n        selectors={{\n          dark: { color: 'green' },\n          light: { color: 'blue' },\n        }}>\n        Hi\n      </Heading>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing React Host in Android with R8 Enabled\nDESCRIPTION: This code snippet references the 'getReactHost' method, which was causing a NoSuchMethodException when R8 optimization was enabled on Android. The issue has been fixed in a recent update.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ngetReactHost\n```\n\n----------------------------------------\n\nTITLE: Installing expo-updates and iOS Pods\nDESCRIPTION: Commands to install expo-updates and install pods for iOS in a bare React Native project.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/bare/installing-updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx expo install expo-updates\n$ npx pod-install\n```\n\n----------------------------------------\n\nTITLE: Screen Capture Module Import Statement\nDESCRIPTION: Import statement for the expo-screen-capture module.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/versions/unversioned/sdk/screen-capture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as ScreenCapture from 'expo-screen-capture';\n```\n\n----------------------------------------\n\nTITLE: Accessing Native Module in JavaScript\nDESCRIPTION: Create a TypeScript file to export the native module using requireNativeModule from expo-modules-core.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/pages/modules/existing-library.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requireNativeModule } from 'expo-modules-core';\n\nexport default requireNativeModule('MyModule');\n```\n\n----------------------------------------\n\nTITLE: Importing RawH3 Component in JavaScript/JSX\nDESCRIPTION: This code snippet imports the RawH3 component from the Text components file in the UI directory. It's likely used for rendering headings in the app.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/docs/scenes/get-started/start-developing/ProjectStructure/files/app-json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RawH3 } from '~/ui/components/Text';\n```\n\n----------------------------------------\n\nTITLE: Incorrect naming conventions in JavaScript classes and functions\nDESCRIPTION: Example of incorrect naming conventions that violate the style guide, showing lowercase class names and uppercase method names that should be avoided.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/guides/Expo JavaScript Style Guide.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// INCORRECT\nclass house {\n  CloseWindows() {...}\n}\n\nfunction EstimatePrice(house) {...}\n```\n\n----------------------------------------\n\nTITLE: Bumping Android compileSdkVersion and targetSdkVersion to 31\nDESCRIPTION: Updated the Android build configuration (likely `build.gradle`) to set both `compileSdkVersion` and `targetSdkVersion` to 31. This is a requirement for targeting newer Android versions and utilizing corresponding APIs and features.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-launcher/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ncompileSdkVersion\n```\n\nLANGUAGE: groovy\nCODE:\n```\ntargetSdkVersion\n```\n\n----------------------------------------\n\nTITLE: Displaying Expo Dev Client Logo in HTML\nDESCRIPTION: HTML markup for displaying the expo-dev-client logo with a link to documentation\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-dev-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/dev-client/\">\n    <img\n      src=\"../../.github/resources/expo-dev-client.svg\"\n      alt=\"expo-dev-client\"\n      height=\"64\" />\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test Dependencies\nDESCRIPTION: Sets up the JavaScript executor library dependency based on whether Hermes is used and if unit testing is enabled.\nSOURCE: https://github.com/bluesky-social/expo/blob/main/packages/expo-modules-core/android/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(${UNIT_TEST})\n  if(${USE_HERMES})\n    find_package(hermes-engine REQUIRED CONFIG)\n    set(JSEXECUTOR_LIB hermes-engine::libhermes)\n  else()\n    set(JSEXECUTOR_LIB ReactAndroid::jscexecutor)\n  endif()\nelse()\n  set(JSEXECUTOR_LIB \"\")\nendif()\n```"
  }
]