[
  {
    "owner": "wevm",
    "repo": "viem",
    "content": "TITLE: Setting up viem Client and Transport\nDESCRIPTION: Creates a public client instance with mainnet chain configuration and HTTP transport. This is the basic setup required for interacting with Ethereum.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/getting-started.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Viem with Package Managers\nDESCRIPTION: Commands for installing Viem using different JavaScript package managers. This is the recommended installation method for most projects.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/installation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add viem\n```\n\n----------------------------------------\n\nTITLE: Withdrawing ETH from zkSync L2 to Ethereum L1\nDESCRIPTION: Initiates a withdrawal of ETH from a zkSync Layer 2 account to Ethereum Layer 1. This example shows the basic usage of the withdraw function with required parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\nimport { legacyEthAddress } from 'viem/zksync'\n\nconst hash = await walletClient.withdraw({\n  account,\n  amount: 1_000_000_000_000_000_000n,\n  token: legacyEthAddress,\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Fees Per Gas in TypeScript\nDESCRIPTION: Demonstrates how to use the estimateFeesPerGas function to get fee estimates for both EIP-1559 and legacy transactions. It shows the usage with a public client and how to specify transaction type.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateFeesPerGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst {\n  maxFeePerGas,\n  maxPriorityFeePerGas\n} = await publicClient.estimateFeesPerGas()\n// @log: {\n// @log:   maxFeePerGas: 15_000_000_000n,\n// @log:   maxPriorityFeePerGas: 1_000_000_000n,\n// @log: }\n\nconst { gasPrice } = await publicClient.estimateFeesPerGas({\n  type: 'legacy'\n})\n// @log: { gasPrice: 15_000_000_000n } \n```\n\n----------------------------------------\n\nTITLE: Executing viem Client Actions\nDESCRIPTION: Demonstrates how to use the configured client to interact with Ethereum by fetching the current block number using the getBlockNumber action.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/getting-started.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst blockNumber = await client.getBlockNumber()\n```\n\n----------------------------------------\n\nTITLE: Initializing Viem Client and Querying Block Number in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Viem public client for the Ethereum mainnet and use it to query the current block number. It showcases the basic setup process and a simple action consumption.\nSOURCE: https://github.com/wevm/viem/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules.\nimport { createPublicClient, http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\n// 2. Set up your client with desired chain & transport.\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n});\n\n// 3. Consume an action!\nconst blockNumber = await client.getBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract with viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to deploy a contract using the walletClient.deployContract method. It requires an ABI, account, and bytecode.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wagmiAbi } from './abi'\nimport { account, walletClient } from './config'\n\nconst hash = await walletClient.deployContract({\n  abi,\n  account,\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Write Function with Simulation in TypeScript\nDESCRIPTION: Demonstrates how to execute a write function on a contract using writeContract, paired with simulateContract for validation. It includes configuration for public and wallet clients, and shows how to use a JSON-RPC or local account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient, walletClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst { request } = await publicClient.simulateContract({\n  account,\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n})\nawait walletClient.writeContract(request)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Depositing ETH and ERC20 Tokens from L1 to L2 in zkSync using viem\nDESCRIPTION: Demonstrates how to deposit ETH and ERC20 tokens from L1 to L2 using the viem library. It shows the setup of clients and accounts, and the usage of the deposit function with various parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient, zksyncClient } from './config'\nimport { legacyEthAddress } from 'viem/zksync'\n\n// deposit ETH\nconst hash = await walletClient.deposit({\n  account,\n  client: zksyncClient,\n  token: legacyEthAddress,\n  amount: 7_000_000_000n,\n  to: account.address,\n  refundRecipient: account.address,\n})\n\n// deposit ERC20\nconst txHash = await walletClient.deposit({\n    account,\n    client: zksyncClient,\n    token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',\n    amount: 20n,\n    to: account.address,\n    approveToken: true,\n    refundRecipient: account.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Multicall Contract Functions with Viem\nDESCRIPTION: Example showing how to batch multiple contract function calls using multicall. Demonstrates calling totalSupply, ownerOf, and mint functions on a WAGMI contract.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/multicall.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { wagmiAbi } from './abi'\n\nconst wagmiContract = {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi\n} as const\n\nconst results = await publicClient.multicall({\n  contracts: [\n    {\n      ...wagmiContract,\n      functionName: 'totalSupply',\n    },\n    {\n      ...wagmiContract,\n      functionName: 'ownerOf',\n      args: [69420n]\n    },\n    {\n      ...wagmiContract,\n      functionName: 'mint'\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Message Signing with Wallet Client\nDESCRIPTION: Demonstrates basic message signing using a wallet client with both string and hex message formats. Returns an EIP-191 formatted signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\n\nconst signature_1 = await walletClient.signMessage({\n  account,\n  message: 'hello world',\n})\n\nconst signature_2 = await walletClient.signMessage({\n  account,\n  message: { raw: '0x68656c6c6f20776f726c64' },\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Provider Methods to Client Actions in viem\nDESCRIPTION: Shows how to migrate from Ethers' Provider methods to viem's Public Client actions. Methods that extend off the Public Client are called Public Actions in viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider } from 'ethers'\n\nconst provider = getDefaultProvider()\n\nprovider.getBlock(...) // [!code hl]\nprovider.getTransaction(...) // [!code hl]\n...\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nclient.getBlock(...) // [!code hl]\nclient.getTransaction(...) // [!code hl]\n...\n```\n\n----------------------------------------\n\nTITLE: Batching Multiple Contract Read Operations with Multicall\nDESCRIPTION: Demonstrates how to use the Public Client to batch multiple contract read operations into a single multicall request.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from 'viem'\nimport { abi } from './abi'\nimport { publicClient } from './client'\n\nconst contract = getContract({ address, abi, client: publicClient })\n\n// The below will send a single request to the RPC Provider.\nconst [name, totalSupply, symbol, balance] = await Promise.all([\n  contract.read.name(),\n  contract.read.totalSupply(),\n  contract.read.symbol(),\n  contract.read.balanceOf([address]),\n])\n```\n\n----------------------------------------\n\nTITLE: Setting Nonce Parameter\nDESCRIPTION: Shows how to specify the nonce parameter for the authorization hash calculation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashAuthorization } from 'viem/utils'\n\nhashAuthorization({\n  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  chainId: 1,\n  nonce: 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Private Key Account\nDESCRIPTION: Demonstrates how to create a Private Key Account for use with the Wallet Client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst account = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Setting up and Using Viem Client in TypeScript\nDESCRIPTION: Demonstrates how to import Viem modules, set up a public client with mainnet chain and HTTP transport, and use it to fetch the current block number.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules.\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\n// 2. Set up your client with desired chain & transport.\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\n// 3. Consume an action!\nconst blockNumber = await client.getBlockNumber()\n```\n\n----------------------------------------\n\nTITLE: Writing to Contracts with Viem\nDESCRIPTION: Example of writing data to a smart contract using Viem. This creates a wallet client connected to window.ethereum, gets the user's address, and calls writeContract with the mint function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { wagmiContractConfig } from './abi'\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\nconst [address] = await walletClient.getAddresses()\n\nconst hash = await walletClient.writeContract({\n  ...wagmiContractConfig,\n  functionName: 'mint',\n  account: address,\n})\n```\n\n----------------------------------------\n\nTITLE: Using stateOverride with readContract in viem\nDESCRIPTION: Example of reading a contract's totalSupply function while applying state overrides. The stateOverride parameter allows for ephemeral modifications to contract state before execution, including balance and storage slots.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.readContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'totalSupply',\n  stateOverride: [ \n    { \n      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n      balance: parseEther('1'), \n      stateDiff: [ \n        { \n          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0', \n          value: '0x00000000000000000000000000000000000000000000000000000000000001a4', \n        }, \n      ], \n    } \n  ], \n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Contract Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Contract Instance using the getContract function and perform various contract-related actions such as reading state, fetching events, and watching for events.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from 'viem'\nimport { wagmiAbi } from './abi'\nimport { publicClient, walletClient } from './client'\n\n// 1. Create contract instance\nconst contract = getContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  // 1a. Insert a single client\n  client: publicClient,\n  // 1b. Or public and/or wallet clients\n  client: { public: publicClient, wallet: walletClient }\n})\n\n// 2. Call contract methods, fetch events, listen to events, etc.\nconst result = await contract.read.totalSupply()\nconst logs = await contract.getEvents.Transfer()\nconst unwatch = contract.watchEvent.Transfer(\n  { from: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e' },\n  { onLogs(logs) { console.log(logs) } }\n)\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Smart Account\nDESCRIPTION: Demonstrates sending a User Operation to transfer ETH using a Smart Account and waiting for the receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n    value: parseEther('0.001')\n  }]\n})\n\nconst receipt = await bundlerClient.waitForUserOperationReceipt({ hash })\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Receipt Example\nDESCRIPTION: Demonstrates how to fetch a transaction receipt using the publicClient.getTransactionReceipt method. Returns transaction details including block hash, block number, status, and other receipt information.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionReceipt.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst transaction = await publicClient.getTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Simulation in TypeScript\nDESCRIPTION: Demonstrates how to use simulateContract to simulate a contract's mint function without arguments. It includes the necessary imports, ABI definition, and client configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [{ name: \"\", type: \"uint32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\n// JSON-RPC Account\nexport const [account] = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using readContract with ERC20 ABI for Type Inference\nDESCRIPTION: Demonstrates type inference in action when using readContract with an ERC20 ABI. This shows how TypeScript restricts function names to only read operations and provides proper typing for arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await client.readContract({\n  //  ^?\n\n\n  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n  abi: erc20Abi,\n  functionName: 'balanceOf',\n  //         ^?\n  \n  \n\n  // ↑ Notice how \"transfer\" is not included since it is not a \"read\" function\n\n  args: ['0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c'],\n  // ^?\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration for Call Action in TypeScript\nDESCRIPTION: Configuration setup for using the viem library with a public client connected to the Ethereum mainnet. It demonstrates how to create a public client and define an account for transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\n// @log: ↓ JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n\n// @log: ↓ Local Account\n// export const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Standalone Contract Write in TypeScript\nDESCRIPTION: Demonstrates how to use writeContract function standalone without prior simulation. It includes configuration for the wallet client and shows both JSON-RPC and local account usage.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\nimport { wagmiAbi } from './abi'\n\nawait walletClient.writeContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Parsing Event Logs with ABI in TypeScript using viem\nDESCRIPTION: Demonstrates how to use the parseEventLogs function with a contract ABI to decode Ethereum event logs. The ABI parameter is required to identify the event signature and decode the data properly.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst topics = parseEventLogs({\n  abi: wagmiAbi, // [!code focus]\n  logs: [{\n    blockNumber: 69420n,\n    data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n    logIndex: 1,\n    topics: [\n      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', \n      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', \n      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'\n    ]\n    // ...\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Viem Client\nDESCRIPTION: Example showing how to handle errors when fetching block numbers using Viem's typed error system. Demonstrates error type casting and checking specific error properties based on error names.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/error-handling.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBlockNumberErrorType } from 'viem'\nimport { client } from './client'\n\ntry {\n  const blockNumber = await client.getBlockNumber()\n} catch (e) {\n  const error = e as GetBlockNumberErrorType\n  error.name \n\n  if (error.name === 'InternalRpcError')\n    error.code\n\n  if (error.name === 'HttpRequestError') {\n    error.headers\n\n    error.status\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Filter using viem's publicClient in TypeScript\nDESCRIPTION: Creates a new block filter using the publicClient from viem. The filter returns an object with an ID and type that can be used with getFilterChanges to listen for new block hashes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createBlockFilter.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createBlockFilter() // [!code focus:99]\n// @log: { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Filter with Specific Arguments\nDESCRIPTION: Creates an event filter scoped to specific indexed arguments. This example filters Transfer events where 'from' and 'to' match specific addresses.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\n\nconst filter = await publicClient.createEventFilter({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\n  args: {\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Contract ABI Definition\nDESCRIPTION: Defines the ABI interface for the contract including the totalSupply function signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transaction Count using viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getBlockTransactionCount function from the publicClient to retrieve the number of transactions in a block. It shows the basic usage without any parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst count = await publicClient.getBlockTransactionCount()\n// @log: Output: 23\n```\n\n----------------------------------------\n\nTITLE: Migrating from Web3Provider to createWalletClient in viem\nDESCRIPTION: Shows how to replace Ethers' Web3Provider with viem's createWalletClient using the custom transport for window.ethereum.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.Web3Provider(window.ethereum) // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createWalletClient({ // [!code hl]\n  chain: mainnet, // [!code hl] \n  transport: custom(window.ethereum) // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Using Contract Instance Methods in TypeScript\nDESCRIPTION: This snippet demonstrates how to use various methods of a Contract Instance, including reading contract state, writing to the contract, and listening for events.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from 'viem'\nimport { wagmiAbi } from './abi'\nimport { publicClient, walletClient } from './client'\n\nconst contract = getContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  client: {\n    public: publicClient,\n    wallet: walletClient,\n  }\n})\n\nconst balance = await contract.read.balanceOf([\n  '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n])\nconst hash = await contract.write.mint([69420])\nconst logs = await contract.getEvents.Transfer()\nconst unwatch = contract.watchEvent.Transfer(\n  {\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n  },\n  { onLogs: logs => console.log(logs) }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Account with Signing Implementation\nDESCRIPTION: Demonstrates creating a custom account with implementations for signing messages, transactions, and typed data using a private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  signMessage, \n  signTransaction, \n  signTypedData, \n  privateKeyToAddress,\n  toAccount \n} from 'viem/accounts'\n\nconst privateKey = '0x...'\n\nconst account = toAccount({\n  address: getAddress(privateKey),\n\n  async signMessage({ message }) {\n    return signMessage({ message, privateKey })\n  },\n\n  async signTransaction(transaction, { serializer }) {\n    return signTransaction({ privateKey, transaction, serializer })\n  },\n\n  async signTypedData(typedData) {\n    return signTypedData({ ...typedData, privateKey })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Viem Client with Debug Functionality\nDESCRIPTION: Implementation of a custom debug client that extends the base client with traceCall functionality using geth's debug_traceCall RPC method\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/custom.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createClient, \n  http,\n  formatTransactionRequest,\n  type CallParameters\n} from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst debugClient = createClient({ \n  chain: mainnet,\n  transport: http(),\n}).extend(client => ({\n  // ...\n  async traceCall(args: CallParameters) {\n    return client.request({\n      method: 'debug_traceCall',\n      params: [formatTransactionRequest(args), 'latest', {}]\n    })\n  },\n  // ...\n}))\n\nconst response = await debugClient.traceCall({\n  account: '0xdeadbeef29292929192939494959594933929292',\n  to: '0xde929f939d939d393f939393f93939f393929023',\n  gas: 69420n,\n  data: '0xf00d4b5d00000000000000000000000001291230982139282304923482304912923823920000000000000000000000001293123098123928310239129839291010293810'\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Authorization List in TypeScript\nDESCRIPTION: Shows how to include a signed EIP-7702 Authorization list when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst authorization = await walletClient.signAuthorization({ \n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \n}) \n\nconst { result } = await publicClient.simulateContract({\n  address: account.address,\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  authorizationList: [authorization],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Standalone Contract Actions in TypeScript\nDESCRIPTION: This snippet shows how to perform contract actions using standalone functions instead of a Contract Instance. It includes examples of reading contract state, writing to the contract, and watching for events.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wagmiAbi } from './abi'\nimport { publicClient, walletClient } from './client'\n\nconst balance = await publicClient.readContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'balanceOf',\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n})\nconst hash = await walletClient.writeContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420]\n})\nconst unwatch = publicClient.watchContractEvent({\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n  abi: wagmiAbi,\n  eventName: 'Transfer',\n  args: {\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n  },\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Blob Transaction with KZG Setup in TypeScript\nDESCRIPTION: Illustrates how to send a blob transaction using KZG setup for EIP-4844 compatibility.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { toBlobs, setupKzg, stringToHex } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nconst kzg = setupKzg(cKzg, mainnetTrustedSetupPath) \n\nconst hash = await walletClient.sendTransaction({\n  account,\n  blobs: toBlobs({ data: stringToHex('blobby blob!') }),\n  kzg,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling CCIP Read in Public Client Configuration\nDESCRIPTION: Configures a Public Client with CCIP Read support disabled.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst publicClient = createPublicClient({\n  ccipRead: false,\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Balance using getBalance in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getBalance function from the publicClient to retrieve the balance of an Ethereum address. It returns the balance as a bigint value in wei.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBalance.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst balance = await publicClient.getBalance({\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n})\n// @log: > 10000000000000000000000n (wei)\n```\n\n----------------------------------------\n\nTITLE: Complete End-to-End Withdrawal Implementation\nDESCRIPTION: Complete implementation showing the full withdrawal process from L2 to L1 including initiation, proving, and finalization steps. Uses Viem library to handle the withdrawal process with proper waiting periods between steps.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getWithdrawals } from 'viem/op-stack'\nimport { \n  account, \n  publicClientL1, \n  walletClientL1,\n  publicClientL2, \n  walletClientL2 \n} from './config'\n\nconst args = await publicClientL1.buildInitiateWithdrawal({\n  to: account.address,\n  value: parseEther('1')\n})\n \nconst hash = await walletClientL2.initiateWithdrawal(args)\n\nconst receipt = await publicClientL2.waitForTransactionReceipt({ hash })\n\nconst { output, withdrawal } = await publicClientL1.waitToProve({\n  receipt,\n  targetChain: walletClientL2.chain\n})\n\nconst proveArgs = await publicClientL2.buildProveWithdrawal({\n  output,\n  withdrawal,\n})\n\nconst proveHash = await walletClientL1.proveWithdrawal(proveArgs)\n\nconst proveReceipt = await publicClientL1.waitForTransactionReceipt({\n  hash: proveHash\n})\n\nawait publicClientL1.waitToFinalize({\n  targetChain: walletClientL2.chain,\n  withdrawalHash: withdrawal.withdrawalHash,\n})\n\nconst finalizeHash = await walletClientL1.finalizeWithdrawal({\n  targetChain: walletClientL2.chain,\n  withdrawal,\n})\n\nconst finalizeReceipt = await publicClientL1.waitForTransactionReceipt({\n  hash: finalizeHash\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Public and Wallet Clients in TypeScript\nDESCRIPTION: This snippet shows how to create public and wallet clients using viem's createPublicClient and createWalletClient functions. It includes examples for both Metamask and WalletConnect integrations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { EthereumProvider } from '@walletconnect/ethereum-provider'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\n// eg: Metamask\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n})\n\n// eg: WalletConnect\nconst provider = await EthereumProvider.init({\n  projectId: \"abcd1234\",\n  showQrModal: true,\n  chains: [1],\n})\n\nexport const walletClientWC = createWalletClient({\n  chain: mainnet,\n  transport: custom(provider),\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Value in TypeScript\nDESCRIPTION: Demonstrates how to include a value (in wei) when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Complete User Operation Example\nDESCRIPTION: End-to-end example of sending a User Operation with a Smart Account, including sending ETH and waiting for receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { bundlerClient } from './config.js'\n\nconst hash = await bundlerClient.sendUserOperation({ \n  account, \n  calls: [{ \n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D', \n    value: parseEther('0.001') \n  }] \n}) \n\nconst receipt = await bundlerClient.waitForUserOperationReceipt({ hash })\n```\n\n----------------------------------------\n\nTITLE: Importing viem Functions Directly in TypeScript\nDESCRIPTION: Shows how to import various viem functions directly from the main 'viem' package instead of using separate entrypoints.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  encodeAbiParameters,\n  getContract,\n  getBlock,\n  mine,\n  sendTransaction,\n} from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using Call Action with Public Client in TypeScript\nDESCRIPTION: Example of executing a message call using the viem public client. This demonstrates a basic call operation with an account, data, and target address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst data = await publicClient.call({ // [!code focus:7]\n  account,\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Using recoverAuthorizationAddress in TypeScript\nDESCRIPTION: This example demonstrates how to use the recoverAuthorizationAddress function to recover the original signing address from a signed Authorization object. It includes creating a wallet client, signing an authorization, and then recovering the address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/recoverAuthorizationAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { recoverAuthorizationAddress } from 'viem/utils'\nimport { walletClient } from './client'\n\nconst eoa = privateKeyToAccount('0x...')\n\nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  authorization: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n})\n\nconst address = await recoverAuthorizationAddress({\n  authorization,\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Call Simulation in TypeScript\nDESCRIPTION: Shows how to simulate contract interactions including mint and transfer functions using ABI definitions. Demonstrates handling of multiple contract calls in a single simulation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi, parseEther } from 'viem'\nimport { client } from './config'\n\nconst abi = parseAbi([\n  'function mint()',\n  'function transfer(address, uint256) returns (bool)',\n])\n \nconst { results } = await client.simulateCalls({\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'mint',\n    },\n    {\n      to: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n      abi,\n      functionName: 'transfer',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        100n\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval by Number\nDESCRIPTION: Example of retrieving block information using a specific block number parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst block = await publicClient.getBlock({\n  blockNumber: 42069n\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom EVM Chain Configuration\nDESCRIPTION: Demonstrates how to create a custom chain configuration using the defineChain utility. The example shows a complete chain definition including chain ID, native currency details, RPC URLs, block explorer information, and contract addresses.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/introduction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from 'viem'\n\nexport const zora = defineChain({\n  id: 7777777,\n  name: 'Zora',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Ether',\n    symbol: 'ETH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.zora.energy'],\n      webSocket: ['wss://rpc.zora.energy'],\n    },\n  },\n  blockExplorers: {\n    default: { name: 'Explorer', url: 'https://explorer.zora.energy' },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n      blockCreated: 5882,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing WebAuthn Account with Credential\nDESCRIPTION: Shows the complete process of setting up a WebAuthn account including creating a credential, initializing the WebAuthn account, and connecting it to a Coinbase Smart Account. Requires viem library and account abstraction modules.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createWebAuthnCredential, \n  toWebAuthnAccount,\n  toCoinbaseSmartAccount \n} from 'viem/account-abstraction'\nimport { client } from './client'\n\n// 1. Register a credential (ie. passkey).\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n})\n\n// 2. Create a WebAuthn owner account from the credential.\nconst owner = toWebAuthnAccount({\n  credential,\n})\n\n// 3. Hook up the owner to a WebAuthn-compatible Smart Account.\nconst account = toCoinbaseSmartAccount({\n  client,\n  owners: [owner],\n})\n```\n\n----------------------------------------\n\nTITLE: ABI Encoding with Ethers.js\nDESCRIPTION: Using Ethers.js to encode ABI parameters. This shows two approaches: using objects with type and name properties, and using a human-readable format with types only.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\n\nconst abiCoder = utils.defaultAbiCoder()\n\n// Object\nabiCoder.encode(\n  [{ type: 'uint', name: 'x' }, { type: 'string', name: 'y' }],\n  [1234, 'Hello world']\n)\n\n// Human Readable\nabiCoder.encode(\n  ['uint', 'string'], \n  [1234, 'Hello World']\n);\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with Hoisted Account in TypeScript\nDESCRIPTION: Demonstrates sending a transaction using a wallet client with a hoisted account, eliminating the need to pass the account explicitly.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst hash = await walletClient.sendTransaction({\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n// '0x...'\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with viem Wallet Client in TypeScript\nDESCRIPTION: Demonstrates how to prepare and sign a transaction using the viem wallet client. It includes steps for preparing the transaction request, signing it, and sending the raw transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\n \nconst request = await walletClient.prepareTransactionRequest({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n\nconst signature = await walletClient.signTransaction(request)\n// 0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33\n\nconst hash = await walletClient.sendRawTransaction(signature)\n```\n\n----------------------------------------\n\nTITLE: Setting up an Ethereum Client with Viem\nDESCRIPTION: Demonstrates how to import necessary modules, create a public client connected to the Ethereum mainnet using HTTP transport, and execute a basic blockchain action to retrieve the current block number.\nSOURCE: https://github.com/wevm/viem/blob/main/src/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules.\nimport { createPublicClient, http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\n// 2. Set up your client with desired chain & transport.\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n});\n\n// 3. Consume an action!\nconst blockNumber = await client.getBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Contract Simulation with Arguments in TypeScript\nDESCRIPTION: Shows how to simulate a contract function that requires arguments. The example uses a mint function that takes a tokenId parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  account,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [{ name: \"owner\", type: \"uint32\" }],\n    name: \"mint\",\n    outputs: [{ name: \"\", type: \"uint32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Migrating from JsonRpcProvider to createPublicClient in viem\nDESCRIPTION: Demonstrates replacing Ethers' JsonRpcProvider with viem's createPublicClient. Includes examples for both standard and custom chain configurations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.JsonRpcProvider('https://cloudflare-eth.com') // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.JsonRpcProvider('https://250.rpc.thirdweb.com', { // [!code hl]\n  name: 'Fantom', // [!code hl]\n  id: 250 // [!code hl]\n}) // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: mainnet, // [!code hl]\n  transport: http('https://cloudflare-eth.com') // [!code hl]\n}) // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { fantom } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: fantom, // [!code hl]\n  transport: http('https://250.rpc.thirdweb.com') // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Executing Deposit Transaction from Mainnet to Optimism using viem\nDESCRIPTION: This snippet shows the complete process of depositing ETH from Mainnet to Optimism. It includes building the deposit transaction parameters, executing the transaction on L1, waiting for confirmation, and tracking the corresponding L2 transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getL2TransactionHashes } from 'viem/op-stack'\nimport { account, publicClientL1, publicClientL2, walletClientL1 } from './config'\n\n// Build parameters for the transaction on the L2.\nconst args = await publicClientL2.buildDepositTransaction({\n  mint: parseEther('1'),\n  to: account.address,\n})\n \n// Execute the deposit transaction on the L1.\nconst hash = await walletClientL1.depositTransaction(args)\n\n// Wait for the L1 transaction to be processed.\nconst receipt = await publicClientL1.waitForTransactionReceipt({ hash })\n\n// Get the L2 transaction hash from the L1 transaction receipt.\nconst [l2Hash] = getL2TransactionHashes(receipt)\n\n// Wait for the L2 transaction to be processed.\nconst l2Receipt = await publicClientL2.waitForTransactionReceipt({ \n  hash: l2Hash \n})\n```\n\n----------------------------------------\n\nTITLE: Reading from Contracts with Viem\nDESCRIPTION: Code example showing how to read data from a smart contract using Viem. This snippet creates a public client and directly calls readContract with the necessary configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { wagmiContractConfig } from './abi'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nconst supply = await client.readContract({\n  ...wagmiContractConfig,\n  functionName: 'totalSupply'\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Request Preparation\nDESCRIPTION: Example showing how to prepare a basic transaction request with an account, recipient address and value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = await walletClient.prepareTransactionRequest({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n```\n\n----------------------------------------\n\nTITLE: Local Account Client Configuration\nDESCRIPTION: Configuration setup for Viem clients using local private key accounts. Sets up public and wallet clients for both L1 and L2 chains with necessary OP Stack extensions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, walletActionsL1, walletActionsL2 } from 'viem/op-stack'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n\nexport const walletClientL2 = createWalletClient({\n  account,\n  chain: optimism,\n  transport: http()\n}).extend(walletActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Errors in Contract Simulation\nDESCRIPTION: Illustrates how to catch and handle custom Solidity errors thrown during contract simulation. It includes error handling logic and shows how to access the custom error data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseError, ContractFunctionRevertedError } from 'viem';\nimport { account, walletClient, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\ntry {\n  await publicClient.simulateContract({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    abi: wagmiAbi,\n    functionName: 'mint',\n    account,\n  })\n} catch (err) {\n  if (err instanceof BaseError) {\n    const revertError = err.walk(err => err instanceof ContractFunctionRevertedError)\n    if (revertError instanceof ContractFunctionRevertedError) {\n      const errorName = revertError.data?.errorName ?? ''\n      // do something with `errorName`\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [{ name: \"\", type: \"uint32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  // Custom solidity error\n  {\n    type: 'error',\n    inputs: [],\n    name: 'MintIsDisabled'\n  },\n  ...\n] as const;\n```\n\nLANGUAGE: solidity\nCODE:\n```\n// ...\nerror MintIsDisabled();\ncontract WagmiExample {\n  // ...\n\n    function mint() public {\n      // ...\n      revert MintIsDisabled();\n      // ...\n    }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Hex Message with Private Key\nDESCRIPTION: Demonstrates signing a hex-encoded message using a private key account. Returns a hex signature that can be used for message verification or address recovery.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst account = privateKeyToAccount('0x...')\n\nconst signature = await account.signMessage({\n  // Hex data representation of message.\n  message: { raw: '0x68656c6c6f20776f726c64' },\n})\n```\n\n----------------------------------------\n\nTITLE: Using toAccount for Custom Signing Implementations in viem\nDESCRIPTION: Example demonstrating how to use toAccount instead of getAccount for custom signing implementations. This function allows creating account objects with custom signing logic for messages, transactions, and typed data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http, getAccount } from 'viem' // [!code --]\nimport { createWalletClient, http } from 'viem' // [!code ++]\nimport { toAccount } from 'viem/accounts' // [!code ++]\nimport { mainnet } from 'viem/chains'\nimport { getAddress, signMessage, signTransaction } from './sign-utils' \n\nconst privateKey = '0x...' \nconst account = getAccount({ // [!code --]\nconst account = toAccount({ // [!code ++]\n  address: getAddress(privateKey),\n  signMessage(message) {\n    return signMessage(message, privateKey)\n  },\n  signTransaction(transaction) {\n    return signTransaction(transaction, privateKey)\n  },\n  signTypedData(typedData) {\n    return signTypedData(typedData, privateKey)\n  }\n})\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Block-Specific Message Verification\nDESCRIPTION: Shows how to verify a message with specific block number for Smart Contract Account verification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await publicClient.verifyMessage({\n  blockNumber: 42069n,\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: 'hello world',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Wallet Client with Public Actions\nDESCRIPTION: Shows how to extend the Wallet Client with Public Actions for additional functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http, publicActions } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst account = privateKeyToAccount('0x...')\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n}).extend(publicActions)\n\nconst { request } = await client.simulateContract({ ... }) // Public Action\nconst hash = await client.writeContract(request) // Wallet Action\n```\n\n----------------------------------------\n\nTITLE: Migrating from getDefaultProvider to createPublicClient in viem\nDESCRIPTION: Shows how to replace Ethers' getDefaultProvider with viem's createPublicClient. The viem implementation is more explicit about the chain and transport being used.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider } from 'ethers'\n\nconst provider = getDefaultProvider() // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: mainnet, // [!code hl]\n  transport: http() // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Value Using parseEther in TypeScript\nDESCRIPTION: Shows how to prepare a transaction request using the parseEther utility to convert ETH to Wei. Demonstrates proper value formatting for transaction preparation with viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\n\nconst request = await walletClient.prepareTransactionRequest({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1'),\n  nonce: 69\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Filter Scoped to a Specific Event\nDESCRIPTION: Creates an event filter for a specific event type using parseAbiItem to convert a human-readable event signature to ABI format. This example filters for Transfer events on the USDC contract.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createEventFilter({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Wallet Client with Layer 1 OP Stack Actions in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a wallet client for the Ethereum mainnet and extend it with Layer 1 OP Stack actions. It uses the 'walletActionsL1' extension to add OP Stack functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { walletActionsL1 } from 'viem/op-stack' // [!code hl]\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: http(),\n}).extend(walletActionsL1()) // [!code hl]\n\nconst hash = await walletClient.depositTransaction({/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Sending ETH value with contract transactions in viem\nDESCRIPTION: Example demonstrating how to send ETH along with a contract transaction by setting the value parameter. This is useful for payable functions that require ETH to be sent as part of the transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait walletClient.writeContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  value: parseEther('1') // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Deployless Contract Read via Bytecode\nDESCRIPTION: Demonstrates how to perform a read operation on an undeployed contract using its bytecode.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { publicClient } from './config'\n\nconst data = await publicClient.readContract({\n  abi: parseAbi(['function name() view returns (string)']),\n  code: '0x...',\n  functionName: 'name'\n})\n```\n\n----------------------------------------\n\nTITLE: Contract ABI Definition\nDESCRIPTION: Example ABI definition containing a Transfer event with indexed parameters for from, to, and tokenId.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  {\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      { indexed: true, name: \"to\", type: \"address\" },\n      {\n        indexed: true,\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval by Tag\nDESCRIPTION: Example of retrieving block information using a block tag parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst block = await publicClient.getBlock({\n  blockTag: 'safe'\n})\n```\n\n----------------------------------------\n\nTITLE: Using FactoryData Parameter in Call Action\nDESCRIPTION: Example of specifying the factoryData parameter when making a call. This parameter contains calldata to execute on the factory to deploy the contract.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  factory: '0x0000000000ffe8b47b3e2130213b802212439497',\n  factoryData: '0xdeadbeef', // [!code focus]\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic TypedData Signing Example\nDESCRIPTION: Example showing how to sign typed data using a wallet client with an account parameter. Demonstrates the basic usage of signTypedData with domain, types, and message parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTypedData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\nimport { domain, types } from './data'\n\nconst signature = await walletClient.signTypedData({\n  account,\n  domain,\n  types,\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Account Address in TypeScript\nDESCRIPTION: Shows how to simulate a contract function call by specifying the account address to simulate from.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from AlchemyProvider to createPublicClient in viem\nDESCRIPTION: Demonstrates replacing Ethers' AlchemyProvider with viem's createPublicClient using the Alchemy RPC URL directly in the HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.AlchemyProvider('homestead', '<apiKey>') // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: mainnet, // [!code hl]\n  transport: http('https://eth-mainnet.g.alchemy.com/v2/<apiKey>') // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Signing User Operation with Coinbase Smart Account in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Coinbase Smart Account and sign a User Operation. It includes the necessary imports, account creation, and the signUserOperation call with all required parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { client, owner } from './config'\n\nexport const account = await toCoinbaseSmartAccount({\n  client,\n  owners: [owner],\n})\n\nconst signature = await account.signUserOperation({\n  callData: '0xdeadbeef',\n  callGasLimit: 141653n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 15000000000n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  paymasterPostOpGasLimit: 0n,\n  paymasterVerificationGasLimit: 0n,\n  preVerificationGas: 53438n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  verificationGasLimit: 259350n,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client and Account in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a wallet client using viem, configure it for the Ethereum mainnet, and set up an account. It shows both JSON-RPC and local account options.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Function Name in TypeScript\nDESCRIPTION: Demonstrates how to use the simulateContract function to simulate a contract mint function call, specifying the function name.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom RPC Schema for Viem Wallet Client\nDESCRIPTION: Shows how to define and set a custom RPC schema for the wallet client. This allows for typed JSON-RPC schema definitions, enabling better type checking and autocompletion for custom RPC methods.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rpcSchema } from 'viem'\n\ntype CustomRpcSchema = [{\n  Method: 'eth_wagmi',\n  Parameters: [string]\n  ReturnType: string\n}]\n\nconst client = createWalletClient({\n  rpcSchema: rpcSchema<CustomRpcSchema>(),\n  transport: custom(window.ethereum!)\n})\n\nconst result = await client.request({\n  method: 'eth_wa\n  params: ['hello'],\n})\n```\n\n----------------------------------------\n\nTITLE: Asset Changes Tracking Simulation in TypeScript\nDESCRIPTION: Illustrates how to track asset balance changes during transaction simulation by enabling the traceAssetChanges parameter. Shows detailed token balance changes for ETH and ERC20 tokens.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi, parseEther } from 'viem'\nimport { client } from './config'\n\nconst abi = parseAbi([\n  'function mint()',\n  'function transfer(address, uint256) returns (bool)',\n])\n \nconst { assetChanges, results } = await client.simulateCalls({\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1.5')\n    },\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'mint',\n    },\n    {\n      to: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n      abi,\n      functionName: 'transfer',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        100n\n      ],\n    },\n  ],\n  traceAssetChanges: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Write Function in TypeScript\nDESCRIPTION: Shows how to pass arguments to a contract write function using the args attribute. It includes type inference for arguments based on the function name and ABI.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './client'\nimport { wagmiAbi } from './abi'\n\nconst { request } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  account\n})\nawait walletClient.writeContract(request)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [{ name: \"tokenId\", type: \"uint32\" }],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom, http} from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Event Name Scoped Query\nDESCRIPTION: Example showing how to scope logs to a specific event name in the contract ABI.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContractEvents.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\nimport { publicClient } from './client'\nimport { erc20Abi } from './abi'\n\nconst logs = await publicClient.getContractEvents({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  abi: erc20Abi,\n  eventName: 'Transfer',\n})\n```\n\n----------------------------------------\n\nTITLE: Sponsoring User Operations with Paymaster Client in Viem (User Operation Action)\nDESCRIPTION: This snippet shows how to create a Paymaster client and use it with a Bundler client to sponsor User Operation fees, but applies the Paymaster at the action level. It uses Pimlico's Paymaster API and sends a user operation to transfer Ether.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { \n  createBundlerClient, \n  createPaymasterClient,\n} from 'viem/account-abstraction'\nimport { account, client } from './config.ts'\n\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}'),\n})\n\nconst bundlerClient = createBundlerClient({\n  account,\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n\nconst hash = await bundlerClient.sendUserOperation({\n  calls: [{\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n    value: parseEther('0.001')\n  }]\n  paymaster: paymasterClient,\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Number for Balance Retrieval in TypeScript\nDESCRIPTION: This example shows how to use the getBalance function with a specific block number. The balance will be retrieved for the account at the specified block number.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBalance.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = await publicClient.getBalance({\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  blockNumber: 69420n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients for Mainnet and Optimism with JSON-RPC Account\nDESCRIPTION: This configuration sets up viem clients for Ethereum Mainnet and Optimism using a JSON-RPC account (e.g., from a browser extension). It includes necessary extensions for OP Stack operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider. \nexport const [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n}) \n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Address-Scoped Events Query\nDESCRIPTION: Example demonstrating how to scope event logs to a specific contract address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContractEvents.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { erc20Abi } from './abi'\n\nconst logs = await publicClient.getContractEvents({\n  abi: erc20Abi,\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Events Query in TypeScript\nDESCRIPTION: Basic example of fetching all event logs for an ERC-20 contract using viem's getContractEvents.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContractEvents.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { erc20Abi } from './abi'\n\nconst logs = await publicClient.getContractEvents({ \n  abi: erc20Abi \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler Client with a Paymaster Client\nDESCRIPTION: Shows how to configure a Bundler Client with a separate Paymaster Client for User Operation sponsorship. This setup allows the bundler to use an external paymaster service for handling transaction fees.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymasterClient = createPaymasterClient({ // [!code focus]\n  transport: http('https://public.pimlico.io/v2/11155111/rpc') // [!code focus]\n}) // [!code focus]\n\nconst bundlerClient = createBundlerClient({\n  chain: mainnet,\n  paymaster: paymasterClient, // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Public Client for Ethereum Mainnet in TypeScript using Viem\nDESCRIPTION: This code snippet shows how to create a public client for interacting with the Ethereum mainnet using the Viem library. It sets up the client with the mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterLogs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Read Operation in TypeScript\nDESCRIPTION: Demonstrates basic usage of readContract to call a read-only function (totalSupply) on a contract without arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { wagmiAbi } from './abi'\n\nconst data = await publicClient.readContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'totalSupply',\n})\n// 69420n\n```\n\n----------------------------------------\n\nTITLE: Scoped Contract Events Query\nDESCRIPTION: Example showing how to scope event logs by contract address, event name, arguments and block range for USDC transfers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContractEvents.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\nimport { publicClient } from './client'\nimport { erc20Abi } from './abi'\n\nconst usdcContractAddress = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n\nconst logs = await publicClient.getContractEvents({ \n  address: usdcContractAddress,\n  abi: erc20Abi,\n  eventName: 'Transfer',\n  args: {\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n  },\n  fromBlock: 16330000n,\n  toBlock: 16330050n\n})\n```\n\n----------------------------------------\n\nTITLE: Local Account Configuration for Cross-Chain Operations\nDESCRIPTION: Configuration setup for a local private key account to perform cross-chain operations between Ethereum Mainnet and Optimism. This configuration creates separate public and wallet clients for interacting with both L1 and L2 chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Viem modules.\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Basic Event Watching in TypeScript\nDESCRIPTION: Simple example of watching all blockchain events using watchEvent with a basic callback handler\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchEvent({\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Events Watching\nDESCRIPTION: Example of watching multiple events simultaneously using parseAbi\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchEvent({\n  events: parseAbi([\n    'event Approval(address indexed owner, address indexed sender, uint256 value)',\n    'event Transfer(address indexed from, address indexed to, uint256 value)'\n  ]),\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI in TypeScript\nDESCRIPTION: This snippet shows how to define a contract's ABI, including a constructor with no inputs. The ABI is exported as a constant array.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Viem Public Client Configuration\nDESCRIPTION: Sets up a public client instance for interacting with the Ethereum mainnet using Viem. Configures the client with mainnet chain settings and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionReceipt.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients for Mainnet and Optimism with Local Account\nDESCRIPTION: This configuration sets up viem clients for Ethereum Mainnet and Optimism using a local account (private key). It includes necessary extensions for OP Stack operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Event-Specific Watching with parseAbiItem\nDESCRIPTION: Watching specific events using parseAbiItem to convert human-readable event signatures to ABI format\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchEvent({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting Arguments with decodeFunctionData in TypeScript\nDESCRIPTION: Example of using decodeFunctionData to extract both the function name and arguments from encoded calldata. It demonstrates how to handle functions with parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionData } from 'viem'\nimport { wagmiAbi } from './abi'\n\nconst { functionName, args } = decodeFunctionData({\n  abi: wagmiAbi,\n  data: '0x70a08231000000000000000000000000fba3912ca04dd458c843e2ee08967fc04f3579c2'\n})\n// { functionName: 'balanceOf', args: [\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\"] }\n```\n\n----------------------------------------\n\nTITLE: Requesting Ethereum Wallet Addresses with viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the requestAddresses function from the walletClient to request a list of accounts managed by an Ethereum wallet. It returns an array of Ethereum addresses.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/requestAddresses.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './client'\n\nconst accounts = await walletClient.requestAddresses()\n// ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Client with HTTP Transport in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Wallet Client using the HTTP transport for the Ethereum mainnet chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Block Watching Implementation in TypeScript\nDESCRIPTION: Demonstrates setting up a basic block watcher using a public client. The watcher logs block information to the console and returns an unwatch function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlocks.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst unwatch = publicClient.watchBlocks(\n  { onBlock: block => console.log(block) }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Key Account and Wallet Client in TypeScript\nDESCRIPTION: Demonstrates how to initialize a Private Key Account with privateKeyToAccount and use it to create a wallet client. This example shows the complete setup with chain and transport configurations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/privateKeyToAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst account = privateKeyToAccount('0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80') // [!code focus]\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Complete TypedData Signing and Verification Example in TypeScript\nDESCRIPTION: This complete example demonstrates the process of defining a typed message, signing it with a wallet client, and verifying the signature. It includes imports, message definition, and the verification step.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyTypedData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyTypedData } from 'viem'\nimport { account, walletClient } from './client'\n\nconst message = {\n  from: {\n    name: 'Cow',\n    wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n  },\n  to: {\n    name: 'Bob',\n    wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n  },\n  contents: 'Hello, Bob!',\n} as const\n\nconst signature = await walletClient.signTypedData({\n  account,\n  domain,\n  types,\n  primaryType: 'Mail',\n  message,\n})\n\nconst valid = await verifyTypedData({\n  address: account.address,\n  domain,\n  types,\n  primaryType: 'Mail',\n  message,\n  signature,\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Creating ZKsync-compatible Viem Clients with EIP-712 Actions\nDESCRIPTION: Creates wallet and public clients for ZKsync, extending the wallet client with EIP-712 actions required for ZKsync functionality. The wallet client uses the browser's Ethereum provider, while the public client uses HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { eip712WalletActions } from 'viem/zksync'\n \nconst walletClient = createWalletClient({\n  chain: zksync,\n  transport: custom(window.ethereum!),\n}).extend(eip712WalletActions()) // [!code hl]\n\nconst publicClient = createPublicClient({\n  chain: zksync,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with Constructor Arguments in TypeScript\nDESCRIPTION: This snippet shows how to deploy a contract with constructor arguments using the walletClient.deployContract method. It includes the 'args' parameter for passing constructor arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deployContract } from 'viem'\nimport { wagmiAbi } from './abi'\nimport { account, walletClient } from './config'\n\nconst hash = await walletClient.deployContract({\n  abi,\n  account,\n  args: [69420],\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Event Filter in TypeScript with viem\nDESCRIPTION: Creates a basic event filter with no arguments that will query for all events. Uses the publicClient to create the filter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createEventFilter()\n// @log: { id: \"0x345a6572337856574a76364e457a4366\", type: 'event' }\n```\n\n----------------------------------------\n\nTITLE: Sending ZKsync Transaction with Paymaster\nDESCRIPTION: Demonstrates sending a transaction on ZKsync using a paymaster for fee abstraction. Includes account details, recipient address, value, and paymaster configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.sendTransaction({\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n,\n  paymaster: '0xFD9aE5ebB0F6656f4b77a0E99dCbc5138d54b0BA',\n  paymasterInput: '0x123abc...'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Predefined Chains in Viem\nDESCRIPTION: Shows how to import a predefined chain (Zora) from viem/chains and use it to create a public client. This example demonstrates the basic setup for connecting to an EVM-compatible network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/introduction.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zora } from 'viem/chains' // [!code focus]\n\nconst client = createPublicClient({\n  chain: zora, // [!code focus]\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Event Logs in Viem\nDESCRIPTION: Demonstrates how to use viem's decodeEventLog function to decode event data and topics from logs, equivalent to ethers.js Interface.decodeEventLog method with a different parameter structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeEventLog, parseEther } from 'viem'\nimport { abi } from './abi'\n\nconst result = decodeEventLog({\n  abi,\n  data: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000',\n  topics: [\n    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    '0x0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72',\n    '0x000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Arbitrary Data to Blob Sidecars\nDESCRIPTION: Demonstrates converting arbitrary data into blob sidecars using the KZG setup. Requires a KZG implementation to be configured.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobSidecars.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobSidecars } from 'viem'\nimport { kzg } from './kzg'\n\nconst sidecars = toBlobSidecars({ data: '0x...', kzg })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a User Operation Receipt with Viem in TypeScript\nDESCRIPTION: This example demonstrates how to retrieve a User Operation receipt using a bundler client by providing a User Operation hash. The function returns detailed information about the operation including blockHash, blockNumber, sender status, and other transaction details.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperationReceipt.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n\nconst receipt = await bundlerClient.getUserOperationReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'\n})\n// @log: {\n// @log:   blockHash: '0xaf1dadb8a98f1282e8f7b42cc3da8847bfa2cf4e227b8220403ae642e1173088',\n// @log:   blockNumber: 15132008n,\n// @log:   sender: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n// @log:   ...\n// @log:   status: 'success',\n// @log: }\n```\n\n----------------------------------------\n\nTITLE: Using recoverTypedDataAddress in TypeScript\nDESCRIPTION: Example of how to use the recoverTypedDataAddress function to recover the signing address from EIP-712 typed data and signature. It demonstrates setting up the necessary data structures and calling the function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTypedDataAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { recoverTypedDataAddress } from 'viem'\nimport { account, walletClient } from './client'\n\nconst message = {\n  from: {\n    name: 'Cow',\n    wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n  },\n  to: {\n    name: 'Bob',\n    wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n  },\n  contents: 'Hello, Bob!',\n} as const\n \nconst signature = await walletClient.signTypedData({\n  account,\n  domain,\n  types,\n  primaryType: 'Mail',\n  message,\n})\n\nconst address = await recoverTypedDataAddress({\n  domain,\n  types,\n  primaryType: 'Mail',\n  message,\n  signature,\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from FallbackProvider to fallback transport in viem\nDESCRIPTION: Demonstrates replacing Ethers' FallbackProvider with viem's fallback transport function to support multiple RPC providers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst alchemy = new providers.AlchemyProvider('homestead', '<apiKey>') // [!code hl]\nconst infura = new providers.InfuraProvider('homestead', '<apiKey>') // [!code hl]\nconst provider = new providers.FallbackProvider([alchemy, infura]) // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http, fallback } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst alchemy = http('https://eth-mainnet.g.alchemy.com/v2/<apiKey>') // [!code hl]\nconst infura = http('https://mainnet.infura.io/v3/<apiKey>') // [!code hl]\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: fallback([alchemy, infura]) // [!code hl]\n})\n```\n\n----------------------------------------\n\nTITLE: Using decodeEventLog to Decode Event Log Data\nDESCRIPTION: Demonstrates how to use the decodeEventLog function to decode ABI encoded event topics and data. It includes the ABI definition and shows the expected output format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeEventLog.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeEventLog } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst topics = decodeEventLog({\n  abi: wagmiAbi,\n  data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n  topics: [\n    '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', \n    '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', \n    '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'\n  ]\n})\n/**\n *  {\n *    eventName: 'Transfer',\n *    args: {\n *      from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n *      value: 1n\n *    }\n *  }\n */\n```\n\n----------------------------------------\n\nTITLE: Encoding a Struct using encodeAbiParameters with ABI Definition\nDESCRIPTION: Shows how to encode a complex struct with uint256, bool, and address fields using encodeAbiParameters and an ABI definition.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { abi } from './abi'\n\nconst encodedData = encodeAbiParameters(\n  abi[0].inputs,\n  [{\n    x: 420n,\n    y: true,\n    z: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  }],\n)\n// 0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed Data Signature Example\nDESCRIPTION: Example showing how to verify a typed data signature using the viem library. The code initializes clients, signs a typed message, and verifies the signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyTypedData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient, publicClient } from './client'\nimport { domain, types } from './data'\n\nconst message = {\n  from: {\n    name: 'Cow',\n    wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n  },\n  to: {\n    name: 'Bob',\n    wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n  },\n  contents: 'Hello, Bob!',\n}\n\nconst signature = await walletClient.signTypedData({\n  account,\n  domain,\n  types,\n  primaryType: 'Mail',\n  message,\n})\n\nconst valid = await publicClient.verifyTypedData({\n  address: account.address,\n  domain,\n  types,\n  primaryType: 'Mail',\n  message,\n  signature,\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client with Local Account in TypeScript\nDESCRIPTION: Sets up a wallet client using a local account derived from a private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using toHex Function with Various Data Types\nDESCRIPTION: Demonstrates the usage of toHex function with different data types including numbers, strings, byte arrays, and booleans.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toHex } from 'viem'\n\ntoHex(420)\n// \"0x1a4\"\n\ntoHex('Hello world')\n// \"0x48656c6c6f20776f726c642e\"\n\ntoHex(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n)\n// \"0x48656c6c6f20576f726c6421\"\n\ntoHex(true)\n// \"0x1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client with OP Stack Extensions\nDESCRIPTION: Configuration example showing how to set up a public client with OP Stack extensions. This creates a public client for the Ethereum mainnet and extends it with L1 public actions for interacting with OP Stack chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getL2Output.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n```\n\n----------------------------------------\n\nTITLE: Using ABI with Const Assertion for Type Inference\nDESCRIPTION: Demonstrates how to use const assertions with ABI definitions to enable type inference in Viem contract interactions. This approach defines the ABI separately with proper typing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst abi = [{ // [!code focus]\n  type: 'function', // [!code focus]\n  name: 'balanceOf', // [!code focus]\n  stateMutability: 'view', // [!code focus]\n  inputs: [{ type: 'address' }], // [!code focus]\n  outputs: [{ type: 'uint256' }], // [!code focus]\n}] as const // [!code focus]\n// @log:       ↑ const assertion\n\nconst result = client.readContract({\n  address: '0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c',\n  abi, \n  functionName: 'balanceOf',\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Max Fee for EIP-1559 Transactions in TypeScript\nDESCRIPTION: Demonstrates setting maxFeePerGas for EIP-1559 transactions when estimating gas using viem's estimateGas function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await publicClient.estimateGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  maxFeePerGas: parseGwei('20'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Typed Data Domain and Types Configuration\nDESCRIPTION: Configuration for the typed data domain and types definitions used in the verification process. Includes Person and Mail type definitions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyTypedData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction with EIP-7702 Authorization in TypeScript\nDESCRIPTION: Demonstrates sending a transaction with a signed EIP-7702 Authorization list.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst account = privateKeyToAccount('0x...')\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst authorization = await walletClient.signAuthorization({ \n  account,\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \n}) \n\nconst hash = await walletClient.sendTransaction({\n  account,\n  authorizationList: [authorization],\n  data: '0xdeadbeef',\n  to: account.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Combining simulateContract with writeContract in TypeScript\nDESCRIPTION: Demonstrates how to use simulateContract to validate a transaction before executing it with writeContract. This pattern ensures the transaction will be successful before sending it.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst { request } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account,\n})\nconst hash = await walletClient.writeContract(request)\n```\n\n----------------------------------------\n\nTITLE: Contract Deployment Data Encoding with Constructor Arguments\nDESCRIPTION: Example demonstrating how to encode contract deployment data with constructor arguments, specifically an address parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeDeployData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeDeployData } from 'viem'\nimport { wagmiAbi } from './abi'\n\nconst data = encodeDeployData({\n  abi: wagmiAbi,\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n})\n// 0x608060405260405161083e38038061083e833981016040819052610...00000000000000000000000000000000a5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC\n```\n\n----------------------------------------\n\nTITLE: Building Deposit Transaction Parameters with buildDepositTransaction\nDESCRIPTION: Shows how to properly build deposit transaction parameters using the buildDepositTransaction action before executing the transaction. This ensures proper gas calculation and configuration for L2 execution.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL2, walletClientL1 } from './config'\n\n// Build parameters for the transaction on the L2.\nconst args = await publicClientL2.buildDepositTransaction({\n  account,\n  mint: parseEther('1')\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n \n// Execute the deposit transaction on the L1.\nconst hash = await walletClientL1.depositTransaction(args)\n```\n\n----------------------------------------\n\nTITLE: Finalizing Withdrawal Example Implementation\nDESCRIPTION: Example showing how to finalize a withdrawal from L2 to L1 using the finalizeWithdrawal function. Demonstrates retrieving a withdrawal from a transaction receipt and submitting it for finalization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/finalizeWithdrawal.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL2, walletClientL1 } from './config'\n\nconst receipt = await getTransactionReceipt(publicClientL2, {\n  hash: '0xbbdd0957a82a057a76b5f093de251635ac4ddc6e2d0c4aa7fbf82d73e4e11039',\n})\n\nconst [withdrawal] = getWithdrawals(receipt)\n \nconst hash = await walletClientL1.finalizeWithdrawal({\n  account,\n  targetChain: publicClientL2.chain,\n  withdrawal,\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction with Wallet Client in TypeScript\nDESCRIPTION: This snippet illustrates how to use the Wallet Client to send a transaction using the created account. It includes parsing Ether value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http, parseEther } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: http()\n})\n\nconst account = privateKeyToAccount('0x...')\n\nconst hash = await client.sendTransaction({ // [!code focus:5]\n  account,\n  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('0.001')\n})\n```\n\n----------------------------------------\n\nTITLE: Requesting Wallet Permissions with Viem in TypeScript\nDESCRIPTION: Example showing how to request wallet permissions using the walletClient object from viem. The method requests permissions for eth_accounts and returns an array of WalletPermission objects.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/requestPermissions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './client'\n\nconst permissions = await walletClient.requestPermissions({ eth_accounts: {} })\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON-RPC Account with Browser Extension Wallet in TypeScript\nDESCRIPTION: This code demonstrates how to create a JSON-RPC Account by extracting an address from a browser extension wallet (like MetaMask) using the window.ethereum provider and the eth_requestAccounts method. The address is then used to initialize a wallet client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/jsonRpc.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport 'viem/window'\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst [address] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n})\n\nconst client = createWalletClient({\n  account: address, \n  chain: mainnet,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing estimateFeesPerGas in Viem Chain Definition (TypeScript)\nDESCRIPTION: This snippet shows how to customize the estimateFeesPerGas function in a chain definition. It allows for fine-grained control over fee estimation, supporting both legacy and EIP-1559 transaction types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/fees.md#2025-04-14_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineChain } from 'viem'\n\nconst example = defineChain({\n  /* ... */\n  fees: { \n    async estimateFeesPerGas({ client, multiply, type }) {\n      const gasPrice = // ...\n      const baseFeePerGas = // ...\n      const maxPriorityFeePerGas = // ...\n\n      if (type === 'legacy') return { gasPrice: multiply(gasPrice) }\n      return {\n        maxFeePerGas: multiply(baseFeePerGas) + maxPriorityFeePerGas,\n        maxPriorityFeePerGas\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Execute Function Usage in viem\nDESCRIPTION: Example showing how to execute multiple calls on an ERC-7821-compatible contract, including a value transfer and a data-based interaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, client } from './config'\n \nconst hash = await client.execute({\n  account,\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      data: '0xdeadbeef',\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for Bundler Client\nDESCRIPTION: Configuration setup including public client creation, account initialization, and bundler client setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { \n  createBundlerClient, \n  toCoinbaseSmartAccount \n} from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts' \n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst owner = privateKeyToAccount('0x...')\n\nconst account = await toCoinbaseSmartAccount({ \n  client, \n  owners: [owner]\n}) \n\nexport const bundlerClient = createBundlerClient({\n  account,\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Tree-shaking Optimized Client Usage\nDESCRIPTION: Example of using individual actions with a basic client for optimal tree-shaking and bundle size optimization\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/custom.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { getBlock, sendTransaction } from 'viem/actions'\n\nconst client = createClient({ \n  chain: mainnet,\n  transport: http()\n})\n\nconst blockNumber = await getBlock(client, { blockTag: 'latest' })\nconst hash = await sendTransaction(client, { ... })\n```\n\n----------------------------------------\n\nTITLE: Extending Public Client with Layer 2 OP Stack Actions in TypeScript\nDESCRIPTION: This example shows how to create a public client for the Base chain (a Layer 2 solution) and extend it with Layer 2 OP Stack actions. It uses the 'publicActionsL2' extension to add OP Stack functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack' // [!code hl]\n\nconst publicClient = createPublicClient({\n  chain: base,\n  transport: http(),\n}).extend(publicActionsL2()) // [!code hl]\n\nconst l1Gas = await publicClient.estimateL1Gas({/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Executing EIP-7702 Contract Write in TypeScript\nDESCRIPTION: This snippet demonstrates the end-to-end process of performing a Contract Write using EIP-7702. It includes authorizing the designation of a Contract onto an EOA, and then invoking the 'initialize' function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { walletClient } from './config'\nimport { abi, contractAddress } from './contract'\n\nconst eoa = privateKeyToAccount('0x...')\n\n// 1. Authorize designation of the Contract onto the EOA.\nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  contractAddress,\n})\n\n// 2. Designate the Contract on the EOA, and invoke the \n//    `initialize` function.\nconst hash = await walletClient.writeContract({\n  abi,\n  address: eoa.address,\n  authorizationList: [authorization],\n  //                  ↑ 3. Pass the Authorization as a parameter.\n  functionName: 'initialize',\n})\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with viem in TypeScript\nDESCRIPTION: Creates and sends a transaction using a wallet client. Requires an account, recipient address, and value in wei.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\n\nconst hash = await walletClient.sendTransaction({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n// '0x...'\n```\n\n----------------------------------------\n\nTITLE: Importing OP Stack Chains from Viem\nDESCRIPTION: Shows how to import various predefined OP Stack chain configurations from the Viem library, including mainnet and testnet chains for Base, Fraxtal, Optimism, Zora, and other networks.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/chains.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  base,\n  baseGoerli,\n  baseSepolia,\n  fraxtal,\n  fraxtalTestnet,\n  ink,\n  inkSepolia,\n  optimism,\n  optimismGoerli,\n  optimismSepolia,\n  soneium,\n  soneiumMinato,\n  unichain,\n  unichainSepolia,\n  zircuit,\n  zircuitTestnet,\n  zora,\n  zoraSepolia,\n  zoraTestnet,\n} from 'viem/chains'\n```\n\n----------------------------------------\n\nTITLE: Defining ABI for encodeFunctionData in TypeScript\nDESCRIPTION: Shows how to define an ABI (Application Binary Interface) for use with encodeFunctionData. This example defines the 'totalSupply' function in the ABI.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Basic ENS Address Resolution in TypeScript\nDESCRIPTION: Example showing how to resolve an ENS name to an Ethereum address using the publicClient with proper name normalization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalize } from 'viem/ens'\nimport { publicClient } from './client'\n \nconst ensAddress = await publicClient.getEnsAddress({\n  name: normalize('wevm.eth'),\n})\n// '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed Data Signatures in TypeScript using viem\nDESCRIPTION: This example demonstrates how to verify a typed data signature using the verifyTypedData utility. It takes parameters including the signer's address, domain data, type definitions, primary type, message, and signature to confirm if the signature is valid.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyTypedData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await verifyTypedData({\n  address: account.address,\n  domain,\n  types,\n  primaryType: 'Mail',\n  message,\n  signature,\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of decodeFunctionData in TypeScript\nDESCRIPTION: Example of decoding a function to calldata using decodeFunctionData. It demonstrates how to extract the function name from encoded data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionData } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst { functionName } = decodeFunctionData({\n  abi: wagmiAbi,\n  data: '0x18160ddd'\n})\n// { functionName: 'totalSupply' }\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed Data with Block Number in TypeScript using viem\nDESCRIPTION: This snippet demonstrates how to use the publicClient.verifyTypedData method to verify typed data, specifying a block number for Smart Contract Account verification. It includes the structure for domain, types, and message data required for EIP-712 typed data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyTypedData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await publicClient.verifyTypedData({\n  blockNumber: 42069n, // [!code focus]\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  domain: {\n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  signature: '0x...',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Access List with viem's publicClient\nDESCRIPTION: Demonstrates how to use the createAccessList function with a public client to generate an access list for a transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst result = await publicClient.createAccessList({\n  data: '0xdeadbeef',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Filter with Block Range\nDESCRIPTION: Creates an event filter scoped to a specific block range. This example limits the filter to events between blocks 16330000 and 16330050.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\n\nconst filter = await publicClient.createEventFilter({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\n  fromBlock: 16330000n,\n  toBlock: 16330050n\n})\n```\n\n----------------------------------------\n\nTITLE: Scoped Log Retrieval with Event Parameters\nDESCRIPTION: Demonstrates retrieving logs with specific filtering parameters including contract address, event signature, argument filters and block range.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getLogs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\nimport { publicClient } from './client'\n\nconst logs = await publicClient.getLogs({\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256)'),\n  args: {\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n  },\n  fromBlock: 16330000n,\n  toBlock: 16330050n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bundler Client with Public HTTP Transport\nDESCRIPTION: Demonstrates how to create a Bundler Client using a public client and HTTP transport pointing to a bundler endpoint. This configures a client to interact with ERC-4337 bundlers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { createBundlerClient } from 'viem/account-abstraction' // [!code focus]\nimport { mainnet } from 'viem/chains' // [!code focus]\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nconst bundlerClient = createBundlerClient({ // [!code focus]\n  client, // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc') // [!code focus]\n}) // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Deployless Call Using Bytecode in TypeScript\nDESCRIPTION: Example of performing a deployless call by providing contract bytecode directly. This allows calling functions on contracts that haven't been deployed yet, demonstrated with an ERC721 contract.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData, parseAbi } from 'viem'\nimport { publicClient } from './config'\n\nconst data = await publicClient.call({\n  // Bytecode of the contract. Accessible here: https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code\n  code: '0x...',\n  // Function to call on the contract.\n  data: encodeFunctionData({\n    abi: parseAbi(['function name() view returns (string)']),\n    functionName: 'name'\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Calls with Asset Change Tracing in TypeScript using viem\nDESCRIPTION: This example shows how to enable tracing of asset changes when simulating calls with the viem client. It sets the traceAssetChanges option to true.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { results } = await client.simulateCalls({\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n  calls: [ \n    { \n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n      value: parseEther('2'),\n    },  \n  ], \n  traceAssetChanges: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval by Hash\nDESCRIPTION: Example of retrieving block information using a specific block hash parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst block = await publicClient.getBlock({\n  blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d'\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Write with EIP-7702 in TypeScript\nDESCRIPTION: This snippet shows how to designate a Contract on an Account and execute the 'initialize' function using an EIP-7702 Contract Write. It uses the previously signed Authorization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\nimport { abi, contractAddress } from './contract'\n\nconst eoa = privateKeyToAccount('0x...')\n \nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  contractAddress,\n})\n\nconst hash = await walletClient.writeContract({\n  abi,\n  address: eoa.address,\n  authorizationList: [authorization],\n  functionName: 'initialize',\n})\n```\n\n----------------------------------------\n\nTITLE: Using toEventSelector with Different Input Formats in TypeScript\nDESCRIPTION: Demonstrates various ways to use the toEventSelector function with different input formats, including string event definitions and AbiEvent objects.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventSelector.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toEventSelector } from 'viem'\n\nconst selector_1 = toEventSelector('Transfer(address,address,uint256)')\n// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n\nconst selector_2 = toEventSelector('Transfer(address indexed from, address indexed to, uint256 amount)')\n// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n\n// or from an `AbiEvent` on your contract ABI\nconst selector_3 = toEventSelector({\n  name: 'Transfer',\n  type: 'event',\n  inputs: [\n    { name: 'from', type: 'address', indexed: true },\n    { name: 'to', type: 'address', indexed: true },\n    { name: 'amount', type: 'uint256', indexed: false },\n  ],\n})\n// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Operation Data with bundlerClient in TypeScript\nDESCRIPTION: Example showing how to retrieve information about a User Operation using a hash with the bundlerClient. The function returns detailed information including block data and the User Operation details.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperation.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n\nconst result = await bundlerClient.getUserOperation({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'\n})\n```\n\n----------------------------------------\n\nTITLE: Basic User Operation Preparation with Viem\nDESCRIPTION: Demonstrates basic usage of prepareUserOperation to create a transaction sending ETH to an address. Uses bundlerClient with a specified account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, bundlerClient } from './config'\n\nconst userOperation = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ABI with Constructor Arguments in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a contract's ABI that includes a constructor with input parameters. The constructor takes a uint32 argument named 'x'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [{ name: \"x\", type: \"uint32\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Using verifyAuthorization Function in TypeScript\nDESCRIPTION: Demonstrates how to use the verifyAuthorization function to verify an Authorization object signature. It includes creating a wallet client, signing an authorization, and verifying the signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/verifyAuthorization.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { verifyAuthorization } from 'viem/utils'\nimport { walletClient } from './client'\n\nconst eoa = privateKeyToAccount('0x...')\n\nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  authorization: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n})\n\nconst valid = await verifyAuthorization({\n  address: eoa.address,\n  authorization,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Domain and Types in TypeScript\nDESCRIPTION: Example of how to define the domain and types for EIP-712 typed data. It shows the structure for specifying the domain properties and type definitions used in the recoverTypedDataAddress function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTypedDataAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n \n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Clients for OP Stack with JSON-RPC Account\nDESCRIPTION: Sets up the necessary Viem client configurations for interacting with both L1 (Ethereum mainnet) and L2 (Optimism) chains using a JSON-RPC account from a browser provider like MetaMask.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, walletActionsL1, walletActionsL2 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider. \nexport const [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n}) \n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n\nexport const walletClientL2 = createWalletClient({\n  account,\n  chain: optimism,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Proving Withdrawals from L2 to L1 in TypeScript with viem\nDESCRIPTION: Example showing how to prove a withdrawal transaction that occurred on an L2 chain using the proveWithdrawal method. This snippet demonstrates retrieving a transaction receipt, extracting withdrawal information, obtaining L2 output data, building parameters, and submitting the proof to L1.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL1, publicClientL2, walletClientL1 } from './config'\n\nconst receipt = await getTransactionReceipt(publicClientL2, {\n  hash: '0xbbdd0957a82a057a76b5f093de251635ac4ddc6e2d0c4aa7fbf82d73e4e11039',\n})\n\nconst [withdrawal] = getWithdrawals(receipt)\nconst output = await publicClientL1.getL2Output({\n  l2BlockNumber: receipt.blockNumber,\n  targetChain: publicClientL2.chain,\n})\n\nconst args = await publicClientL2.buildProveWithdrawal({\n  account,\n  output,\n  withdrawal,\n})\n \nconst hash = await walletClientL1.proveWithdrawal(args)\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients for OP Stack L1 and L2\nDESCRIPTION: Shows how to set up public and wallet clients for L1 and L2 interactions in the OP Stack ecosystem using viem. It includes extensions for specific L1 and L2 actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildInitiateWithdrawal.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, walletActionsL2 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL1 = createWalletClient({\n  chain: optimism,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Integrating Nonce Manager with Local Accounts in viem\nDESCRIPTION: This example demonstrates how to integrate a nonceManager with a Local Account and use it for automatic nonce management in transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount, nonceManager } from 'viem/accounts'\nimport { client } from './config'\n\nconst account = privateKeyToAccount('0x...', { nonceManager })\n\nconst hashes = await Promise.all([\n  client.sendTransaction({\n    account,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('0.1'),\n  }),\n  client.sendTransaction({\n    account,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('0.2'),\n  }),\n])\n```\n\n----------------------------------------\n\nTITLE: Filtering Event Logs by Event Name in viem\nDESCRIPTION: Shows how to use the eventName parameter to filter logs by a specific event type defined in the ABI. This example filters logs to only include those from 'Transfer' events.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst topics = parseEventLogs({\n  abi: wagmiAbi,\n  eventName: 'Transfer', // [!code focus]\n  logs: [{\n    blockNumber: 69420n,\n    data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n    logIndex: 1,\n    topics: [\n      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', \n      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', \n      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'\n    ]\n    // ...\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting maxFeePerGas for EIP-1559 Transactions in viem\nDESCRIPTION: Example showing how to set the maxFeePerGas parameter when writing to a contract using the walletClient.writeContract method. This parameter specifies the total fee per gas in wei, inclusive of maxPriorityFeePerGas, and only applies to EIP-1559 transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait walletClient.writeContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  maxFeePerGas: parseGwei('20'),  // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Bundler Client with a Smart Account\nDESCRIPTION: Shows how to create a Bundler Client with a Smart Account configured, using the Coinbase Smart Account implementation. The account will be used for actions that require an account parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem' \nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains' \n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nimport { toCoinbaseSmartAccount } from 'viem/account-abstraction' // [!code focus]\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst owner = privateKeyToAccount('0x...')\n\nconst account = await toCoinbaseSmartAccount({ // [!code focus]\n  client, // [!code focus]\n  owners: [owner] // [!code focus]\n}) // [!code focus]\n\nconst bundlerClient = createBundlerClient({\n  account, // [!code focus]\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Executing EIP-7702 Transaction in TypeScript\nDESCRIPTION: This snippet shows how to execute an EIP-7702 Transaction to designate a Contract on an Account and invoke the 'initialize' function. It uses the previously signed authorization and encodes the function data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem'\nimport { walletClient } from './config'\nimport { contractAddress } from './contract'\n\nconst eoa = privateKeyToAccount('0x...')\n \nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  contractAddress,\n})\n\nconst hash = await walletClient.sendTransaction({\n  authorizationList: [authorization],\n  data: encodeFunctionData({\n    abi,\n    functionName: 'initialize',\n  }),\n  to: eoa.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction with JSON-RPC Account\nDESCRIPTION: Example of sending a transaction using the Wallet Client with a JSON-RPC account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.sendTransaction({\n  account: address,\n  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('0.001')\n})\n```\n\n----------------------------------------\n\nTITLE: Complete hashTypedData Usage Example\nDESCRIPTION: Demonstrates a complete example of using hashTypedData with domain, types, primaryType, and message parameters to create an EIP-712 compliant hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashTypedData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashTypedData } from 'viem'\n\nhashTypedData({\n  domain: {\n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Contract ABI in TypeScript\nDESCRIPTION: This snippet provides an example of defining a contract ABI as a constant in TypeScript. It includes definitions for a totalSupply function and a Transfer event.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [{ type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    name: 'Transfer',\n    type: 'event',\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      { indexed: true, name: 'to', type: 'address' },\n      {\n        indexed: true,\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Viem\nDESCRIPTION: How to deploy a new contract using Viem. This creates a wallet client, gets the user's address, and uses deployContract with the ABI and bytecode.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { abi, bytecode } from './abi'\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\nconst [address] = await walletClient.getAddresses()\n\nawait walletClient.deployContract({\n  abi,\n  account: address,\n  bytecode,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of encodeAbiParameters with Multiple Data Types\nDESCRIPTION: Demonstrates encoding a string, uint, and boolean value using encodeAbiParameters. The function takes an array of parameter definitions with names and types, and their corresponding values.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeAbiParameters } from 'viem'\n\nconst encodedData = encodeAbiParameters(\n  [\n    { name: 'x', type: 'string' },\n    { name: 'y', type: 'uint' },\n    { name: 'z', type: 'bool' }\n  ],\n  ['wagmi', 420n, true]\n)\n// 0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Installing and Using decodeErrorResult Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the decodeErrorResult function from Viem to decode a reverted error from a contract function call. It includes an example of decoding error data using a provided ABI.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeErrorResult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeErrorResult } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst value = decodeErrorResult({\n  abi: wagmiAbi,\n  data: '0xb758934b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000'\n})\n// { errorName: 'InvalidTokenError', args: ['sold out'] }\n```\n\n----------------------------------------\n\nTITLE: Recovering Message Address with viem in TypeScript\nDESCRIPTION: This example demonstrates how to recover a signing address from a message and signature. It first signs a message using a wallet client and then recovers the original signing address with the recoverMessageAddress function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { recoverMessageAddress } from 'viem';\nimport { account, walletClient } from './config'\n \nconst signature = await walletClient.signMessage({\n  account,\n  message: 'hello world',\n})\n\nconst address = await recoverMessageAddress({\n  message: 'hello world',\n  signature,\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding Function Data in Viem\nDESCRIPTION: Demonstrates how to use viem's encodeFunctionData function to encode function calls with arguments, equivalent to ethers.js Interface.encodeFunctionData method with a different parameter structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData, parseEther } from 'viem'\nimport { abi } from './abi'\n\nconst data = encodeFunctionData({\n  abi,\n  functionName: 'transferFrom',\n  args: [\n    '0x8ba1f109551bD432803012645Ac136ddd64DBA72',\n    '0xaB7C8803962c0f2F5BBBe3FA8bf41cd82AA1923C',\n    parseEther('1.0')\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Watching Block Numbers with Public Client in TypeScript\nDESCRIPTION: Demonstrates how to use the watchBlockNumber function with a public client to monitor incoming block numbers. The function returns an unwatch function that can be used to stop watching.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst unwatch = publicClient.watchBlockNumber(\n  { onBlockNumber: blockNumber => console.log(blockNumber) }\n)\n```\n\n----------------------------------------\n\nTITLE: Event-Specific Contract Watching\nDESCRIPTION: Example of watching a specific named event (Transfer) on a contract using viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { wagmiAbi } from './abi'\n\nconst unwatch = publicClient.watchContractEvent({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  eventName: 'Transfer',\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of decodeFunctionResult\nDESCRIPTION: Demonstrates how to decode a simple function result using decodeFunctionResult with an ABI and function name.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionResult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionResult } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst value = decodeFunctionResult({\n  abi: wagmiAbi,\n  functionName: 'ownerOf',\n  data: '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n})\n// '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n```\n\n----------------------------------------\n\nTITLE: Extending Client with OP Stack Actions in TypeScript\nDESCRIPTION: Extends a Viem public client with OP Stack Layer 2 actions. This enables the client to interact with OP Stack-specific functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack' \n\nconst client = createPublicClient({\n  chain: base,\n  transport: http(),\n}).extend(publicActionsL2()) \n```\n\n----------------------------------------\n\nTITLE: Setting Block Timestamp Interval with Specific Value in TypeScript\nDESCRIPTION: This snippet demonstrates setting the block timestamp interval to 1 second using the setBlockTimestampInterval function from a Viem test client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockTimestampInterval.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.setBlockTimestampInterval({\n  interval: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Using encodePacked function to encode mixed data types\nDESCRIPTION: Demonstrates how to use encodePacked to create ABI non-standard packed encoded data with different Solidity types including address, string, and bytes16 array.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodePacked.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nencodePacked(\n  ['address', 'string', 'bytes16[]'], \n  [\n    '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', \n    'hello world',\n    ['0xdeadbeefdeadbeefdeadbeefdeadbeef', '0xcafebabecafebabecafebabecafebabe']\n  ]\n)\n// 0xd8da6bf26964af9d7eed9e03e53415d37aa9604568656c6c6f20776f726c64deadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000cafebabecafebabecafebabecafebabe00000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Basic Withdrawal Initiation Example\nDESCRIPTION: Example showing how to initiate a withdrawal from L2 to L1 using the walletClientL2\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/initiateWithdrawal.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { base } from 'viem/chains'\nimport { account, walletClientL2 } from './config'\n \nconst hash = await walletClientL2.initiateWithdrawal({\n  account,\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Interacting with Delegated Account in TypeScript\nDESCRIPTION: This snippet demonstrates how to interact with a previously delegated Account by invoking its functions. No Authorization is needed for this interaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\nimport { abi } from './contract'\n\nconst eoa = privateKeyToAccount('0x...')\n\nconst hash = await walletClient.writeContract({\n  abi,\n  address: eoa.address,\n  functionName: 'ping',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client with OP Stack Extensions\nDESCRIPTION: Configuration setup for creating a public client with OP Stack extensions enabled for the Base network. Shows how to set up both JSON-RPC and local accounts for use with estimateTotalGas.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateTotalGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for Smart Account\nDESCRIPTION: Configuration setup for creating a public client and defining an owner account from a private key. This setup is required for initializing a Smart Account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const owner = privateKeyToAccount('0x...')\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting with viem Wallet Client in TypeScript\nDESCRIPTION: Shows how to hoist an account on the wallet client to avoid passing it in every transaction request. This approach simplifies the transaction signing process.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n \nconst request = await walletClient.prepareTransactionRequest({\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n\nconst signature = await walletClient.signTransaction(request)\n// 0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33\n\nconst hash = await walletClient.sendRawTransaction(signature)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Operation with Dedicated Paymaster Client\nDESCRIPTION: Sets up a Bundler Client with a dedicated Paymaster Client for sponsoring transaction fees. Uses Pimlico's Paymaster API to handle gas fee sponsorship across multiple chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { \n  createBundlerClient, \n  createPaymasterClient,\n} from 'viem/account-abstraction'\nimport { account, client } from './config.ts'\n\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}'),\n})\n\nconst bundlerClient = createBundlerClient({\n  account,\n  client,\n  paymaster: paymasterClient,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n\nconst hash = await bundlerClient.sendUserOperation({\n  calls: [{\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n    value: parseEther('0.001')\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Using State Overrides in Contract Simulation\nDESCRIPTION: Demonstrates how to use state overrides when simulating contract interactions. This example simulates a token transfer on behalf of another user by modifying the contract's state to have maximum approval.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { abi, address } from './contract'\n\n// Allowance slot: A 32 bytes hex string representing the allowance slot of the sender.\nconst allowanceSlot = '0x....'\n\n// Max allowance: A 32 bytes hex string representing the maximum allowance (2^256 - 1)\nconst maxAllowance = numberToHex(maxUint256)\n\nconst { result } = await publicClient.simulateContract({\n  abi,\n  address,\n  account,\n  functionName: 'transferFrom',\n  args: [\n    '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', \n    account.address, \n    69420n\n  ],\n  stateOverride: [\n    {\n      // modifying the state of the token contract\n      address,\n      stateDiff: [\n        {\n          slot: allowanceSlot,\n          value: maxAllowance,\n        },\n      ],\n    },\n  ],\n})\n\nconsole.log(result)\n// @log: Output: true\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of parseAbiParameters with String Input\nDESCRIPTION: Demonstrates how to parse a string of human-readable ABI parameters into structured AbiParameter objects. The example shows parsing parameters for a token transfer function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameters.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiParameters } from 'viem'\n\nconst abiParameters = parseAbiParameters(\n  //  ^? const abiParameters: [{ type: \"address\"; name: \"from\"; }, { type: \"address\";...\n  'address from, address to, uint256 amount',\n)\n```\n\n----------------------------------------\n\nTITLE: Basic User Operation Example\nDESCRIPTION: Demonstrates how to send a basic user operation with an account and value transfer.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, bundlerClient } from './config'\n\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Bundler Client for User Operations\nDESCRIPTION: Creates a Bundler Client that will be used to submit User Operations to the network. Uses Pimlico's public endpoint as an example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst bundlerClient = createBundlerClient({\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Message Signing with Account Hoisting\nDESCRIPTION: Shows how to sign messages when the account is hoisted on the wallet client, eliminating the need to pass the account parameter with each call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst signature = await walletClient.signMessage({\n  message: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying SIWE Message with Additional Parameters in TypeScript\nDESCRIPTION: This snippet demonstrates the use of optional parameters in the verifySiweMessage function, such as address, blockNumber, blockTag, domain, nonce, scheme, and time. These parameters allow for more specific verification scenarios.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/actions/verifySiweMessage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await publicClient.verifySiweMessage({\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  blockNumber: 42069n,\n  blockTag: 'safe',\n  domain: 'viem.sh',\n  nonce: generateSiweNonce(),\n  scheme: 'https',\n  time: new Date(),\n  message,\n  signature:\n    '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Read with Arguments\nDESCRIPTION: Shows how to call a contract function (balanceOf) that requires arguments, with TypeScript type inference.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { wagmiAbi } from './abi'\n\nconst data = await publicClient.readContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'balanceOf',\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n})\n```\n\n----------------------------------------\n\nTITLE: Event Watching with Indexed Arguments\nDESCRIPTION: Example of watching events with specific indexed argument values for filtering\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchEvent({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\n  args: {\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n  },\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Using getAbiItem Function to Retrieve ABI Item\nDESCRIPTION: Demonstrates how to use the getAbiItem function to retrieve an item from an ABI array. It includes an example ABI and shows how to extract a specific item by name.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAbiItem } from 'viem'\n\nconst encodedData = getAbiItem({\n  abi: [\n    { \n      name: 'x', \n      type: 'function', \n      inputs: [{ type: 'uint256' }], \n      outputs: [],\n      stateMutability: 'payable'\n    },\n    { \n      name: 'y', \n      type: 'event', \n      inputs: [{ type: 'address' }], \n      outputs: [{ type: 'uint256' }],\n      stateMutability: 'view'\n    },\n    { \n      name: 'z', \n      type: 'function', \n      inputs: [{ type: 'string' }],\n      outputs: [{ type: 'uint256' }],\n      stateMutability: 'view'\n    }\n  ],\n  name: 'y',\n})\n/**\n * { \n *  name: 'y', \n *  type: 'event', \n *  inputs: [{ type: 'address' }], \n *  outputs: [{ type: 'uint256' }],\n *  stateMutability: 'view'\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring KZG Interface\nDESCRIPTION: Sets up the KZG interface by connecting the KZG bindings with Viem using the mainnet trusted setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/guides/blob-transactions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paymaster Data for User Operations in TypeScript\nDESCRIPTION: Example of retrieving paymaster-related User Operation properties using the paymasterClient. This function returns necessary paymaster information including address, data, and gas limits.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Contract Data in TypeScript\nDESCRIPTION: Demonstrates how to include contract data when estimating gas for a transaction using viem's estimateGas function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await publicClient.estimateGas({\n  data: '0x...',\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying a Signed Message using verifyMessage in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the verifyMessage function from viem to verify a signed message. It includes creating a wallet client, signing a message, and then verifying the signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyMessage } from 'viem'\nimport { account, walletClient } from './client'\n\nconst signature = await walletClient.signMessage({\n  account,\n  message: 'hello world',\n})\n\nconst valid = await verifyMessage({\n  address: account.address,\n  message: 'hello world',\n  signature,\n})\n// true\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Filter with Multiple Argument Options\nDESCRIPTION: Creates an event filter with an array of possible values for an indexed argument. This example matches Transfer events from any of three different addresses.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\n\nconst filter = await publicClient.createEventFilter({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\n  args: {\n    // '0xd8da...' OR '0xa5cc...' OR '0xa152...'\n    from: [\n      '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', \n      '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n      '0xa152f8bb749c55e9943a3a0a3111d18ee2b3f94e',\n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Viem Public Client Configuration\nDESCRIPTION: Setup of the viem public client for interacting with the Ethereum mainnet using HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/multicall.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions with Paymaster on ZKsync\nDESCRIPTION: Demonstrates how to send a transaction with paymaster support on ZKsync. This enables gas-free transactions where a paymaster contract covers the gas fees. The transaction includes paymaster address and input parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.sendTransaction({\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n,\n  paymaster: '0xFD9aE5ebB0F6656f4b77a0E99dCbc5138d54b0BA',\n  paymasterInput: '0x123abc...'\n})\n```\n\n----------------------------------------\n\nTITLE: Type Inference with EIP-712 Typed Data Signing\nDESCRIPTION: Shows how TypeScript provides type inference for EIP-712 structured data when using signTypedData. The types definition enables automatic validation of the message structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = client.signTypedData({\n  domain: {\n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n\n  primaryType: 'Mail',\n\n  message: {\n    // ^?\n\n\n\n\n\n\n\n\n\n\n\n\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Transaction Receipt with Custom Confirmations\nDESCRIPTION: Example showing how to wait for multiple confirmations before resolving the receipt\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await publicClient.waitForTransactionReceipt(\n  { \n    confirmations: 5,\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d' \n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Chain-specific Exports in TypeScript\nDESCRIPTION: Demonstrates the new import paths for chain-specific exports, moving from 'viem/chains/utils' to specific chain packages like 'viem/celo', 'viem/op-stack', and 'viem/zksync'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  parseTransaction,\n  serializeTransaction\n} from 'viem/celo'\n\nimport {\n  // ...\n} from 'viem/op-stack'\n\nimport {\n  parseTransaction,\n  serializeTransaction,\n  // ...\n} from 'viem/zksync'\n```\n\n----------------------------------------\n\nTITLE: Using OP Stack Actions to Estimate L1 Gas in TypeScript\nDESCRIPTION: Demonstrates how to use an OP Stack-extended client to estimate Layer 1 gas fees for a transaction. This is important for calculating the total cost of transactions on OP Stack chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http, parseEther } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n}).extend(publicActionsL2()) \n\nconst l1Gas = await client.estimateL1Gas({ \n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', \n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n  value: parseEther('1') \n}) \n```\n\n----------------------------------------\n\nTITLE: Using sendRawTransaction with Serialized Transaction in TypeScript\nDESCRIPTION: This example shows how to use the sendRawTransaction function with a pre-serialized transaction. It demonstrates the direct use of the serializedTransaction parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendRawTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await walletClient.sendRawTransaction({\n  serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Value Using TestClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the setStorageAt function from a testClient to write a value to a specific storage slot of an Ethereum account. It requires a configured testClient and specifies the address, index, and value to be set.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setStorageAt.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setStorageAt({\n  address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n  index: 2,\n  value: '0x0000000000000000000000000000000000000000000000000000000000000069'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Block Hash and Index in TypeScript\nDESCRIPTION: This example demonstrates how to use the getTransaction function to retrieve transaction information using a block hash and index. It showcases the usage of the blockHash and index parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await publicClient.getTransaction({\n  blockHash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  index: 0\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Confirmations using Hash\nDESCRIPTION: Shows how to get transaction confirmations using a transaction hash directly with the Viem public client. Returns the number of blocks passed since transaction processing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionConfirmations.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst confirmations = await publicClient.getTransactionConfirmations({\n  hash: '0x...'\n})\n// @log: 15n\n```\n\n----------------------------------------\n\nTITLE: Transaction Request with Access List\nDESCRIPTION: Shows how to prepare a transaction request that includes an access list for optimized gas usage.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = await walletClient.prepareTransactionRequest({\n  accessList: [\n    {\n      address: '0x1',\n      storageKeys: ['0x1'],\n    },\n  ],\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Function Data in Viem\nDESCRIPTION: Demonstrates how to use viem's decodeFunctionData function to decode function call data, equivalent to ethers.js Interface.decodeFunctionData method with a different parameter structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionData, parseEther } from 'viem'\nimport { abi } from './abi'\n\nconst result = decodeFunctionData({\n  abi,\n  data: '0x23b872dd0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c0000000000000000000000000000000000000000000000000de0b6b3a7640000',\n})\n```\n\n----------------------------------------\n\nTITLE: Authorizing Contract Designation in TypeScript\nDESCRIPTION: This snippet demonstrates how to sign an Authorization to designate a Contract to an Account using the Viem library. It uses a private key to instantiate an EOA and signs the authorization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\nimport { contractAddress } from './contract'\n\nconst eoa = privateKeyToAccount('0x...')\n \nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  contractAddress,\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Call with Viem\nDESCRIPTION: How to simulate a contract function call using Viem. This creates a public client and uses the simulateContract method to test what would happen if the transaction was executed.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { wagmiContractConfig } from './abi'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nawait client.simulateContract({\n  ...wagmiContractConfig, \n  functionName: 'mint'\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Typed Data Example\nDESCRIPTION: Example showing how to sign typed data using a private key account with domain, types and message parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTypedData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { domain, types } from './data'\n\nconst account = privateKeyToAccount('0x...')\n\nconst signature = await account.signTypedData({\n  domain,\n  types,\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Gas Price for Legacy Transactions in TypeScript\nDESCRIPTION: Shows how to specify a gas price when estimating gas for legacy transactions using viem's estimateGas function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await publicClient.estimateGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  gasPrice: parseGwei('20'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1') \n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Mnemonic Account with viem\nDESCRIPTION: Initialize a mnemonic account using a BIP-39 phrase and create a wallet client. The account can be used for signing transactions and messages with the derived private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mnemonicToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst account = mnemonicToAccount('legal winner thank year wave sausage worth useful legal winner thank yellow') // [!code focus]\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Making Contract Function Calls with ERC-7821\nDESCRIPTION: Example of using ERC-7821 to make contract function calls with ABI, functionName, and arguments, combining both simple value transfers and contract interactions in batches.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, client } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n \nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ]\n    },\n    {\n      calls: [\n        {\n          to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n          abi,\n          functionName: 'approve',\n          args: [\n            '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n            100n\n          ],\n        },\n        {\n          to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n          abi,\n          functionName: 'transferFrom',\n          args: [\n            '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n            '0x0000000000000000000000000000000000000000',\n            100n\n          ],\n        },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Proving Withdrawals from L2 to L1 with Viem's OP Stack Actions\nDESCRIPTION: Demonstrates how to prove a withdrawal transaction from Layer 2 to Layer 1 using Viem. This includes waiting for the L2 output proposal (typically up to one hour), building the parameters for the prove withdrawal transaction, and executing the transaction on L1.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  account, \n  publicClientL1,\n  publicClientL2, \n  walletClientL1,\n  walletClientL2 \n} from './config'\n\n// (Shortcut) Get receipt from transaction created in Step 1.\nconst receipt = \n  await publicClientL2.getTransactionReceipt({ hash: '0x...' })\n\n// 1. Wait until the withdrawal is ready to prove.\nconst { output, withdrawal } = await publicClientL1.waitToProve({ \n  receipt,\n  targetChain: walletClientL2.chain\n})\n\n// 2. Build parameters to prove the withdrawal on the L2.\nconst args = await publicClientL2.buildProveWithdrawal({\n  output,\n  withdrawal,\n})\n\n// 3. Prove the withdrawal on the L1.\nconst hash = await walletClientL1.proveWithdrawal(args)\n\n// 4. Wait until the prove withdrawal is processed.\nconst receipt = await publicClientL1.waitForTransactionReceipt({\n  hash\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Using decodeDeployData Function\nDESCRIPTION: Example showing how to import and use the decodeDeployData function to decode contract deployment data including bytecode and constructor arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeDeployData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeDeployData } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst { args } = decodeDeployData({\n  abi: wagmiAbi,\n  bytecode: '0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220116554d4ba29ee08da9e97dc54ff9a2a65d67a648140d616fc225a25ff08c86364736f6c63430008070033',\n  data: '0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220116554d4ba29ee08da9e97dc54ff9a2a65d67a648140d616fc225a25ff08c86364736f6c634300080700330000000000000000000000000000000000000000000000000000000000010f2c'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Wallet Client with JSON-RPC Account in TypeScript\nDESCRIPTION: Demonstrates how to configure the viem wallet client using a JSON-RPC account retrieved from an EIP-1193 provider like window.ethereum.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Partial Event Log Decoding\nDESCRIPTION: Shows how to handle partial log decoding by setting strict mode to false for nonconforming logs.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nparseEventLogs({\n  abi: parseAbi(['event Transfer(address indexed, address, uint256)']),\n  logs: [{\n    data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n    topics: [\n      '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n      '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    ]\n  }],\n  strict: false\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Event Filter Changes in TypeScript using viem\nDESCRIPTION: Creates a raw event filter for a specific event signature and retrieves changes using getFilterChanges. Returns an array of event logs.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterChanges.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createEventFilter({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n})\nconst logs = await publicClient.getFilterChanges({ filter })\n```\n\n----------------------------------------\n\nTITLE: Event Log Filtering with ABI Event\nDESCRIPTION: Shows how to filter logs using a manually constructed ABI event object with indexed parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getLogs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst logs = await publicClient.getLogs(publicClient, {\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: {\n    name: 'Transfer',\n    inputs: [\n      { type: 'address', indexed: true, name: 'from' },\n      { type: 'address', indexed: true, name: 'to' },\n      { type: 'uint256', indexed: false, name: 'value' }\n    ]\n  },\n  args: {\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n  },\n  fromBlock: 16330000n,\n  toBlock: 16330050n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Wallet Client with Local Account in TypeScript\nDESCRIPTION: Shows how to set up the viem wallet client using a local account derived from a private key, along with an HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Event Filter and Getting Logs in TypeScript using Viem\nDESCRIPTION: This snippet demonstrates how to create an event filter for a specific contract address and event, then retrieve the logs using the getFilterLogs function from the Viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterLogs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createEventFilter({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n})\nconst logs = await publicClient.getFilterLogs({ filter })\n// @log: [{ ... }, { ... }, { ... }]\n```\n\n----------------------------------------\n\nTITLE: Signing Typed Data with ERC-7739 Format in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the signTypedData function from the viem library to sign EIP-712 typed data using the ERC-7739 TypedDataSign format. It includes the necessary imports, domain and types definitions, and the function call with all required parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signTypedData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\nimport { domain, types } from './data'\n\nconst signature = await walletClient.signTypedData({\n  // Account used for signing.\n  account,\n  domain,\n  types,\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  // Verifying contract address (e.g. ERC-4337 Smart Account).\n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Public Client to Get Block Number\nDESCRIPTION: Demonstrates how to use the Public Client to retrieve the current block number from the Ethereum network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst blockNumber = await publicClient.getBlockNumber()\n```\n\n----------------------------------------\n\nTITLE: Using formatUnits for Numeric Conversion\nDESCRIPTION: Demonstrates how to use formatUnits to convert a bigint value using a base-10 exponent. The example shows converting 420000000000n with exponent 9 to produce '420'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatUnits.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatUnits } from 'viem'\n\nformatUnits(420000000000n, 9)\n// '420'\n```\n\n----------------------------------------\n\nTITLE: Getting Filter Changes in TypeScript using Viem\nDESCRIPTION: This snippet demonstrates how to use the getFilterChanges function with a previously created filter to retrieve new event logs. It shows the basic structure of calling the function with a filter parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterLogs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = await publicClient.createEventFilter()\nconst logs = await publicClient.getFilterChanges({\n  filter,\n})\n```\n\n----------------------------------------\n\nTITLE: viem Contract Write Example\nDESCRIPTION: Example showing how to use viem's writeContract method with named parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/faq.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, parseAbi } from 'viem'\n\nconst client = createWalletClient(…)\nclient.writeContract({\n  address: '0x…',\n  abi: parseAbi([\n    'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)',\n  ]),\n  functionName: 'transferFrom',\n  args: {\n    sender: '0x…',\n    recipient: '0x…',\n    amount: 100n,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Total Fee for L2 Transaction in TypeScript using viem\nDESCRIPTION: This snippet demonstrates how to use the estimateTotalFee function from the viem library to calculate the total fee for an L2 transaction. It includes both the function call and the necessary configuration setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateTotalFee.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst fee = await publicClient.estimateTotalFee({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Contract Reading Simulation in TypeScript\nDESCRIPTION: Demonstrates how to simulate read-only contract calls using simulateCalls. Shows examples of querying totalSupply and ownerOf functions with success and failure handling.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { client } from './config'\n\nconst abi = parseAbi([\n  'function totalSupply() returns (uint256)',\n  'function ownerOf(uint256) returns (address)',\n])\n \nconst { results } = await client.simulateCalls({\n  calls: [\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'totalSupply',\n    },\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'ownerOf',\n      args: [69420n],\n    },\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'ownerOf',\n      args: [13371337n],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for User Operation Receipt with Bundler Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use waitForUserOperationReceipt to wait for a User Operation to be included on a Block and retrieve its receipt. The function takes a hash parameter and returns a UserOperationReceipt object containing details like blockHash, blockNumber, sender, and status.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n\nconst receipt = await bundlerClient.waitForUserOperationReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'\n})\n// @log: {\n// @log:   blockHash: '0xaf1dadb8a98f1282e8f7b42cc3da8847bfa2cf4e227b8220403ae642e1173088',\n// @log:   blockNumber: 15132008n,\n// @log:   sender: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n// @log:   ...\n// @log:   status: 'success',\n// @log: }\n```\n\n----------------------------------------\n\nTITLE: Defining ABI for decodeEventLog Example\nDESCRIPTION: Shows the ABI definition used in the decodeEventLog example, including the Transfer event structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeEventLog.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      { indexed: true, name: 'to', type: 'address' },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Using parseAbiParameters with Array Input Including Custom Structs\nDESCRIPTION: Shows how to use parseAbiParameters with an array of strings, including a custom struct definition. The example demonstrates parsing a parameter with a struct type.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameters.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiParameters } from 'viem'\n\nconst abiParameters = parseAbiParameters([\n  //  ^? const abiParameters: [{ type: \"tuple\"; components: [{ type: \"string\"; name:...\n  'Baz bar',\n  'struct Baz { string name; }',\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring CCIP Read Request Handler in Viem Wallet Client\nDESCRIPTION: Demonstrates how to set up a custom handler for offchain CCIP (Cross-Chain Interoperability Protocol) lookup requests when creating a wallet client. This function is called to make the offchain CCIP lookup request as specified in EIP-3668.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createWalletClient({\n  ccipRead: {\n    async request({ data, sender, urls }) {\n      // ...\n    }\n  },\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Fee Estimation Example in TypeScript\nDESCRIPTION: Example showing basic usage of estimateFee to calculate transaction fees.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/estimateFee.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst fee = await client.estimateFee({\n  account: '0x636A122e48079f750d44d13E5b39804227E1467e',\n  to: \"0xa61464658AfeAf65CccaaFD3a512b69A83B77618\",\n  value: 0n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Viem with Strict Mode\nDESCRIPTION: Sets up the tsconfig.json with strict mode enabled, which is required for Viem's type system to work correctly.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true // [!code focus]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Gas Estimation in TypeScript\nDESCRIPTION: Example showing basic usage of estimateContractGas to calculate gas for a contract mint function with no arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/estimateContractGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst gas = await publicClient.estimateContractGas({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account,\n})\n// 69420n\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Account Configuration\nDESCRIPTION: Configuration setup for using a JSON-RPC account with the wallet client, retrieving the account from an EIP-1193 provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signMessage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\n\nconst [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Building Withdrawal Parameters with viem for OP Stack L2\nDESCRIPTION: Demonstrates how to use the buildInitiateWithdrawal function to prepare parameters for an L2 to L1 withdrawal. It shows the basic usage with an account, recipient address, and withdrawal amount.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildInitiateWithdrawal.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL1, walletClientL2 } from './config'\n\nconst args = await publicClientL1.buildInitiateWithdrawal({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1'),\n})\n \nconst hash = await walletClientL2.initiateWithdrawal(args)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Serializer for Transaction Signing in TypeScript\nDESCRIPTION: Shows how to implement a custom serializer for transaction types not natively supported by viem. The serializer function takes the transaction object and returns a hexadecimal string representation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst account = privateKeyToAccount('0x...')\n\nconst signature = await account.signTransaction({\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('3'),\n  gas: 21000n,\n  nonce: 69,\n  to: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n}, {\n  serializer(transaction) { // [!code focus:16]\n    const {\n      chainId,\n      nonce,\n      // ...\n    } = transaction\n\n    return concatHex([\n      '0x69',\n      toRlp([\n        toHex(chainId),\n        nonce ? toHex(nonce) : '0x',\n        // ...\n      ]),\n    ])\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Self-executing EIP-7702 in TypeScript\nDESCRIPTION: This snippet shows how to perform a self-executing EIP-7702 transaction where the EOA both signs the Authorization and executes the Transaction. The 'executor: 'self'' parameter is crucial for proper nonce handling.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\nimport { abi, contractAddress } from './contract'\n\nconst authorization = await walletClient.signAuthorization({\n  contractAddress,\n  executor: 'self',\n})\n\nconst hash = await walletClient.writeContract({\n  abi,\n  address: walletClient.account.address,\n  authorizationList: [authorization],\n  functionName: 'initialize',\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Filter Changes in TypeScript using viem\nDESCRIPTION: Creates a block filter and retrieves changes using getFilterChanges. Returns an array of block hashes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterChanges.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createBlockFilter()\nconst hashes = await publicClient.getFilterChanges({ filter })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest L1 Batch Number in zkSync using TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getL1BatchNumber function to retrieve the latest L1 batch number from a zkSync client. It requires a configured client instance.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchNumber.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst latestNumber = await client.getL1BatchNumber();\n```\n\n----------------------------------------\n\nTITLE: Self-executing EIP-7702 Transaction in TypeScript\nDESCRIPTION: This snippet shows how to perform a self-executing EIP-7702 transaction where the EOA both signs the authorization and executes the transaction. It demonstrates the use of 'executor: 'self'' in the signAuthorization call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem'\nimport { walletClient } from './config'\nimport { contractAddress } from './contract'\n\nconst authorization = await walletClient.signAuthorization({\n  contractAddress,\n  executor: 'self',\n})\n\nconst hash = await walletClient.sendTransaction({\n  authorizationList: [authorization],\n  data: encodeFunctionData({\n    abi,\n    functionName: 'initialize',\n  }),\n  to: walletClient.account.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting Chain Data Using All Available Chains in TypeScript\nDESCRIPTION: Demonstrates how to extract chain information using all available chains from the viem/chains module. Note that this approach increases bundle size and is recommended only for server-side usage.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/extractChain.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractChain } from 'viem'\nimport * as chains from 'viem/chains'\n\nconst optimism = extractChain({\n  chains: Object.values(chains),\n  id: 10,\n})\n\noptimism.id\n//       ^? (property) id: 10\noptimism.name\n//       ^? (property) name: \"OP Mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Event Topic Encoding with Arguments in TypeScript\nDESCRIPTION: Shows how to encode event topics with indexed parameters for a Transfer event. Demonstrates passing address arguments for 'from' and 'to' parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeEventTopics.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeEventTopics } from 'viem'\n\nconst topics = encodeEventTopics({\n  abi: wagmiAbi,\n  eventName: 'Transfer'\n  args: {\n    from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Bundler Client with HTTP Transport in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Bundler Client using the createBundlerClient function from viem/account-abstraction. It configures the client with the mainnet chain and an HTTP transport pointing to a Pimlico RPC endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundlerClient = createBundlerClient({\n  chain: mainnet,\n  transport: http('https://public.pimlico.io/v2/1/rpc'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using parseTransaction Function - TypeScript\nDESCRIPTION: Demonstrates how to parse a serialized RLP-encoded transaction using the parseTransaction function. The function takes a hexadecimal string input and returns a structured TransactionSerializable object.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseTransaction } from 'viem'\n\nconst transaction = parseTransaction('0x02ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n```\n\n----------------------------------------\n\nTITLE: Execute Function with Contract Calls\nDESCRIPTION: Example demonstrating the execute function with contract calls using ABI, functionName, and args properties, including Ethereum transfers, token approvals, and token transfers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, client } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n \nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'approve',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        100n\n      ],\n    },\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'transferFrom',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        '0x0000000000000000000000000000000000000000',\n        100n\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization for encodeFunctionData in TypeScript\nDESCRIPTION: Shows how to optimize performance when calling the same function multiple times by preparing the function selector once and reusing it.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareEncodeFunctionData, encodeFunctionData } from 'viem'\n\nconst transfer = prepareEncodeFunctionData({\n  abi: erc20Abi,\n  functionName: 'transfer',\n})\n\nfor (const address of addresses) {\n  const data = encodeFunctionData({\n    ...transfer,\n    args: [address, 69420n],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Celo Transactions\nDESCRIPTION: Demonstrates how to serialize Celo transaction objects with custom parameters like feeCurrency for USDC payments, supporting various transaction types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/celo.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeTransaction } from 'viem/celo'\n\nconst serialized = serializeTransaction({\n  chainId: 42220,\n  gas: 21001n,\n  feeCurrency: \"0x2F25deB3848C207fc8E0c34035B3Ba7fC157602B\" // whitelisted adapter for USDC\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  nonce: 69,\n  to: '0x1234512345123451234512345123451234512345',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Gas Parameter in Call Action\nDESCRIPTION: Example of specifying the gas parameter when making a call. This parameter sets the gas limit provided for transaction execution.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  gas: 1_000_000n, // [!code focus]\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Data Signing\nDESCRIPTION: Demonstrates implementation of the signTypedData function for signing EIP-712 typed data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toAccount({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  async signMessage({ message }) {\n    return signMessage({ message, privateKey })\n  },\n  async signTransaction(transaction, { serializer }) {\n    return signTransaction({ privateKey, transaction, serializer })\n  },\n  async signTypedData(typedData) {\n    return signTypedData({ ...typedData, privateKey })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Event Log Parsing with Multiple Argument Values\nDESCRIPTION: Demonstrates filtering logs using multiple values for a single argument using an array.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst logs = parseEventLogs({ \n  abi: erc20Abi, \n  args: {\n    from: [\n      '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n      '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    ],\n  },\n  logs: receipt.logs,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Access List with Max Fee Per Gas\nDESCRIPTION: Shows how to create an access list with a specified max fee per gas for EIP-1559 Transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther, parseGwei } from 'viem'\n\nconst result = await publicClient.createAccessList({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xdeadbeef',\n  maxFeePerGas: parseGwei('20'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n})\n```\n\n----------------------------------------\n\nTITLE: Writing to ZKsync Smart Contract\nDESCRIPTION: Shows how to interact with a smart contract on ZKsync by calling a mint function. Includes contract address specification, ABI parsing, and function execution.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.writeContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n  functionName: 'mint',\n  args: [69420],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Message Verification Example in TypeScript\nDESCRIPTION: Example showing how to verify a signed message using the publicClient.verifyMessage method. Includes initial message signing and subsequent verification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await walletClient.signMessage({\n  account,\n  message: 'hello world',\n})\nconst valid = await publicClient.verifyMessage({\n  address: account.address,\n  message: 'hello world',\n  signature,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration for Viem Clients and Accounts\nDESCRIPTION: This snippet shows the configuration for creating a public client, a private key account, and a Coinbase smart account in Viem. It sets up the necessary components for the other code examples.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http, parseEther } from 'viem'\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts' \n\nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst owner = privateKeyToAccount('0x...')\n\nexport const account = await toCoinbaseSmartAccount({ \n  client, \n  owners: [owner]\n})\n```\n\n----------------------------------------\n\nTITLE: Finalizing Withdrawals from L2 to L1 with Viem's OP Stack Actions\nDESCRIPTION: Shows how to finalize a withdrawal after it has been proved. This includes waiting for the 7-day finalization period, finalizing the withdrawal on L1, and confirming the transaction has been processed, completing the withdrawal process.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getWithdrawals } from 'viem/op-stack'\nimport { \n  account, \n  publicClientL1,\n  publicClientL2, \n  walletClientL1,\n  walletClientL2 \n} from './config'\n\n// (Shortcut) Get receipt from transaction created in Step 1.\nconst receipt = \n  await publicClientL2.getTransactionReceipt({ hash: '0x...' })\n\n// (Shortcut) Get withdrawals from receipt in Step 3.\nconst [withdrawal] = getWithdrawals(receipt)\n\n// 1. Wait until the withdrawal is ready to finalize.\nawait publicClientL1.waitToFinalize({\n  targetChain: walletClientL2.chain,\n  withdrawalHash: withdrawal.withdrawalHash,\n})\n\n// 2. Finalize the withdrawal.\nconst hash = await walletClientL1.finalizeWithdrawal({\n  targetChain: walletClientL2.chain,\n  withdrawal,\n})\n\n// 3. Wait until the withdrawal is finalized.\nconst receipt = await publicClientL1.waitForTransactionReceipt({\n  hash\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Event Log Parsing Example\nDESCRIPTION: Basic example showing how to use parseEventLogs to decode ERC20 transfer and approval logs from a transaction receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEventLogs } from 'viem'\nimport { erc20Abi } from './abi'\nimport { client } from './client'\n\nconst receipt = await getTransactionReceipt(client, {\n  hash: '0xec23b2ba4bc59ba61554507c1b1bc91649e6586eb2dd00c728e8ed0db8bb37ea',\n})\n\nconst logs = parseEventLogs({ \n  abi: erc20Abi, \n  logs: receipt.logs,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Async Recovery Functions in viem\nDESCRIPTION: Example showing the change from synchronous to asynchronous usage of recovery functions like recoverMessageAddress, which now require await syntax. This affects recoverAddress, recoverMessageAddress, and verifyMessage functions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { recoverMessageAddress } from 'viem'\n\nrecoverMessageAddress({ message: 'hello world', signature: '0x...' }) // [!code --]\nawait recoverMessageAddress({ message: 'hello world', signature: '0x...' }) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Complex Example of decodeFunctionResult\nDESCRIPTION: Demonstrates decoding a complex function result with nested structures including addresses, integers, and boolean values.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionResult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionResult } from 'viem'\n\nconst value = decodeFunctionResult({\n  abi: wagmiAbi,\n  functionName: 'getInfo',\n  data: '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac0000000000000000000000000000000000000000000000000000000000010f2c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac0000000000000000000000000000000000000000000000000000000000000045'\n})\n```\n\n----------------------------------------\n\nTITLE: Sponsoring User Operations with Built-in Paymaster in Viem (User Operation Action)\nDESCRIPTION: This snippet shows how to use a Bundler client with built-in Paymaster support to sponsor User Operation fees, applying the Paymaster at the action level. It sets the paymaster option to true when sending the user operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { \n  createBundlerClient, \n  createPaymasterClient,\n} from 'viem/account-abstraction'\nimport { account, client } from './config.ts'\n\nconst bundlerClient = createBundlerClient({\n  account,\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n\nconst hash = await bundlerClient.sendUserOperation({\n  calls: [{\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n    value: parseEther('0.001')\n  }]\n  paymaster: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Event Logs in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.decodeEventLog to decode event data and topics from logs. This extracts the event arguments from emitted events.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst result = iface.decodeEventLog(\n  'Transfer',\n  data: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000',\n  topics: [\n    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    '0x0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72',\n    '0x000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c'\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Gas Price in TypeScript\nDESCRIPTION: Shows how to set a gas price for a legacy transaction when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  gasPrice: parseGwei('20'),\n})\n```\n\n----------------------------------------\n\nTITLE: Preparing User Operation with Bundler Client as Paymaster in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Bundler Client to prepare a user operation with the paymaster option enabled. It includes setting up a transaction to transfer 1 ETH to a specified address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: true, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring State Override in Transaction\nDESCRIPTION: Demonstrates setting state override parameters for a transaction call. Includes setting address, balance, and state differences for temporary state modifications before execution.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account,\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  stateOverride: [\n    {\n      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n      balance: parseEther('1'),\n      stateDiff: [\n        {\n          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0',\n          value: '0x00000000000000000000000000000000000000000000000000000000000001a4',\n        },\n      ],\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Ethers.js\nDESCRIPTION: How to deploy a new contract using Ethers.js. This creates a ContractFactory with the contract ABI and bytecode, then deploys it using a signer from the wallet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContractFactory, providers } from 'ethers'\nimport { abi, bytecode } from './abi'\n\nconst provider = new providers.Web3Provider(window.ethereum)\n\nconst [address] = await provider.listAccounts()\nconst signer = provider.getSigner(address)\n\nconst contract = new ContractFactory(abi, bytecode, signer)\nawait contract.deploy()\n```\n\n----------------------------------------\n\nTITLE: Contract Instance with Viem\nDESCRIPTION: Creating and using a contract instance with Viem. This uses getContract to create a contract interface that provides read and event-watching capabilities.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http, getContract } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { wagmiContractConfig } from './abi'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nconst contract = getContract({\n  ...wagmiContractConfig,\n  client,\n})\n\nconst supply = await contract.read.totalSupply()\nconst unwatch = contract.watchEvent.Transfer({\n  onLogs: logs => {\n    const { args: { from, to, amount }, eventName } = logs[0]\n    // ...\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Event Filter with Block Range\nDESCRIPTION: Creating an event filter scoped to a specific block range with fromBlock and toBlock parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = await publicClient.createContractEventFilter({\n  abi: wagmiAbi,\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n  eventName: 'Transfer',\n  fromBlock: 16330000n,\n  toBlock: 16330050n\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Wallet Client in TypeScript\nDESCRIPTION: Example of how to set up a wallet client using viem. It demonstrates creating a wallet client with a custom transport and defining an account address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTypedDataAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom, getAccount } from 'viem'\n\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n\nexport const walletClient = createWalletClient({\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client for EIP-7702 in TypeScript\nDESCRIPTION: This snippet shows the setup of a Wallet Client and a 'Relay Account' for executing EIP-7702 Contract Writes. The relay account is typically used to sponsor gas fees for the transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { sepolia } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts' \n\nexport const relay = privateKeyToAccount('0x...')\n \nexport const walletClient = createWalletClient({\n  account: relay,\n  chain: sepolia,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Using isHex Function with Strict Option in TypeScript\nDESCRIPTION: Demonstrates the usage of the isHex function with the 'strict' option. It shows how the function behaves differently when strict mode is enabled or disabled.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isHex.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisHex('0xlol', { strict: false })\n// true\n\nisHex('0xlol', { strict: true })\n// false\n\nisHex('lol', { strict: false })\n// false\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client and Account in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the public client and account for interacting with the L2 network. It imports necessary functions from viem, creates a public client with the base chain, and extends it with L2-specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Gas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Block Tag in TypeScript\nDESCRIPTION: Demonstrates how to use a block tag when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  blockTag: 'safe',\n})\n```\n\n----------------------------------------\n\nTITLE: Deployless Contract Read via Factory\nDESCRIPTION: Shows how to read from an undeployed contract using a deploy factory pattern, commonly used with ERC-4337 Smart Accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData, parseAbi } from 'viem'\nimport { account, publicClient } from './config'\n\nconst data = await publicClient.readContract({\n  factory: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n  factoryData: encodeFunctionData({\n    abi: parseAbi(['function createAccount(address owner, uint256 salt)']),\n    functionName: 'createAccount',\n    args: [account, 0n],\n  }),\n  abi: account.abi,\n  address: account.address,\n  functionName: 'entryPoint',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client for Self-executing EIP-7702 in TypeScript\nDESCRIPTION: This configuration sets up the Wallet Client with an EOA for self-executing EIP-7702 transactions. The EOA is used for both signing the Authorization and executing the Transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { sepolia } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const eoa = privateKeyToAccount('0x...')\n \nexport const walletClient = createWalletClient({\n  account: eoa,\n  chain: sepolia,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Proof Data with getProof in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getProof function from the publicClient to retrieve proof data for a specific account and storage keys. It includes the necessary imports and client setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getProof.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst proof = await publicClient.getProof({ \n  address: '0x4200000000000000000000000000000000000016',\n  storageKeys: [\n    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n  ],\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { optimism } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: optimism,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Wallet Client with EIP-5792 Actions in Viem\nDESCRIPTION: Shows how to configure a Viem wallet client with custom transport using window.ethereum and extend it with EIP-5792 experimental actions. This setup is necessary to use the showCallsStatus method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/showCallsStatus.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window'\n// ---cut---\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions())\n\nexport const [account] = await walletClient.getAddresses()\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Client for OP Stack Chain in TypeScript\nDESCRIPTION: Sets up a Viem public client with Base (an OP Stack chain) and an HTTP transport. This is the first step in interacting with OP Stack chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { base } from 'viem/chains'\n\nconst client = createPublicClient({ \n  chain: base, \n  transport: http(), \n}) \n```\n\n----------------------------------------\n\nTITLE: Encoding Contract Deployment Data in Viem\nDESCRIPTION: Demonstrates how to use viem's encodeDeployData function to encode constructor arguments for contract deployment. Unlike ethers, viem concatenates the bytecode with the encoded data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeDeployData } from 'viem'\nimport { abi, bytecode } from './abi'\n\nconst data = encodeDeployData({\n  abi,\n  bytecode,\n  args: ['SYM', 'Some Name']\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Typed Data with Coinbase Smart Account in TypeScript\nDESCRIPTION: This example demonstrates how to sign typed data using a Coinbase Smart Account. It includes setting up the account, defining the domain and types, and calling the signTypedData method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signTypedData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { client, owner } from './config.js'\nimport { domain, types } from './data.js'\n\nconst account = await toCoinbaseSmartAccount({\n  client,\n  owners: [owner],\n})\n\nconst signature = await account.signTypedData({\n  domain,\n  types,\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using extractWithdrawalMessageLogs Function\nDESCRIPTION: Demonstrates how to use the extractWithdrawalMessageLogs function to extract MessagePassed logs from a transaction receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractWithdrawalMessageLogs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractWithdrawalMessageLogs } from 'viem'\n\nconst receipt = await client.getTransactionReceipt({\n  hash: '0xc9c0361bc3da9cd3560e48b469d0d6aac0e633e4897895edfd26a287f7c578ec',\n})\n\nconst logs = extractWithdrawalMessageLogs(receipt)\n// [\n//   { args: { ... }, blockHash: '0x...', eventName: 'MessagePassed'  },\n//   { args: { ... }, blockHash: '0x...', eventName: 'MessagePassed'  },\n//   { args: { ... }, blockHash: '0x...', eventName: 'MessagePassed'  },\n// ]\n```\n\n----------------------------------------\n\nTITLE: Estimating User Operation Gas with viem in TypeScript\nDESCRIPTION: Example of using estimateUserOperationGas to estimate gas values for a User Operation that transfers 1 ETH.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, bundlerClient } from './config'\n\nconst gas = await bundlerClient.estimateUserOperationGas({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Using recoverAddress with Signature Parameter in TypeScript\nDESCRIPTION: Example demonstrating the signature parameter in the recoverAddress function. The signature parameter can be a Hex string, ByteArray, or Signature object representing the signature of the hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await recoverAddress({ \n  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c' \n})\n```\n\n----------------------------------------\n\nTITLE: Using toEventHash Function\nDESCRIPTION: Demonstrates two ways to generate event hashes: using a string-based event signature and using an AbiEvent object. Both methods produce the same hash for an ERC20 Transfer event.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventHash.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toEventHash } from 'viem'\n\nconst hash_1 = toEventHash('event Transfer(address,address,uint256)')\n// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n\nconst hash_2 = toEventHash({\n  name: 'Transfer',\n  type: 'event',\n  inputs: [\n    { name: 'from', type: 'address', indexed: true },\n    { name: 'to', type: 'address', indexed: true },\n    { name: 'amount', type: 'uint256', indexed: false },\n  ],\n})\n// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Information with getTransaction in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getTransaction function from the publicClient to retrieve information about a transaction using its hash. It shows the basic usage and expected return format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst transaction = await publicClient.getTransaction({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ABI Inline for Type Inference\nDESCRIPTION: Shows how to define an ABI inline within a function call to enable type inference without using a separate const assertion. This approach is more concise for one-off operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @log:   ↓ defined inline\nconst result = client.readContract({\n  address: '0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c',\n  abi: [{ // [!code focus]\n    type: 'function', // [!code focus]\n    name: 'balanceOf', // [!code focus]\n    stateMutability: 'view', // [!code focus]\n    inputs: [{ type: 'address' }], // [!code focus]\n    outputs: [{ type: 'uint256' }], // [!code focus]\n  }], // [!code focus]\n  functionName: 'balanceOf',\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n})\n```\n\n----------------------------------------\n\nTITLE: Switching Chain with Viem Wallet Client\nDESCRIPTION: Example showing how to switch to the Avalanche network using the walletClient.switchChain method. The function takes a chain ID parameter and uses the eth_switchEthereumChain JSON-RPC method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/switchChain.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { avalanche } from 'viem/chains'\nimport { walletClient } from './client'\n \nawait walletClient.switchChain({ id: avalanche.id })\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/snippets/walletClient.ts]\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Event Filter Setup\nDESCRIPTION: Basic example of creating a contract event filter using Viem. Shows the minimal setup required with just an ABI parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { wagmiAbi } from './abi'\n\nconst filter = await publicClient.createContractEventFilter({\n  abi: wagmiAbi\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gas Price using getGasPrice in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getGasPrice function with a publicClient to retrieve the current gas price. It requires a configured publicClient instance.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getGasPrice.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst gasPrice = await publicClient.getGasPrice()\n```\n\n----------------------------------------\n\nTITLE: Initializing Viem Client with EIP-5792 Actions\nDESCRIPTION: Example showing how to create and extend a Viem wallet client with EIP-5792 actions for batch transaction support. The client is configured for the Ethereum mainnet using a custom transport with window.ethereum provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/client.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental'\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions())\n\nconst id = await walletClient.sendCalls({/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Contract Events with Viem\nDESCRIPTION: How to listen for contract events using Viem. This creates a public client and uses watchContractEvent to monitor Transfer events, with an event handler for incoming logs.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { wagmiContractConfig } from './abi'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nconst unwatch = client.watchContractEvent({\n  ...wagmiContractConfig,\n  eventName: 'Transfer',\n  onLogs: logs => {\n    const { args: { from, to, amount }, eventName } = logs[0]\n    // ...\n  },\n})\n\n// unsubscribe\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Message with Private Key\nDESCRIPTION: Demonstrates signing a raw hex message using the raw attribute, allowing direct signing of hex-encoded data without UTF-8 conversion.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signMessage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst account = privateKeyToAccount('0x...')\n\nconst signature = await account.signMessage({\n  message: { raw: '0x68656c6c6f20776f726c64' },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Viem Wallet Client\nDESCRIPTION: Creates a wallet client configuration with account and network settings for interacting with Ethereum mainnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/guides/blob-transactions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Sending a Signed Transaction with sendRawTransaction in TypeScript\nDESCRIPTION: This snippet demonstrates how to prepare a transaction request, sign it, and send the raw transaction using the walletClient. It requires a configured walletClient and account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendRawTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\n\nconst request = await walletClient.prepareTransactionRequest({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n\nconst serializedTransaction = await walletClient.signTransaction(request)\n\nconst hash = await walletClient.sendRawTransaction({ serializedTransaction })\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Raw Hex Data\nDESCRIPTION: Example showing how to sign a message provided as raw hexadecimal data. This allows for signing arbitrary binary data that may not be valid UTF-8 encoded text.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst signature = await walletClient.signMessage({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: { raw: '0x68656c6c6f20776f726c64' }, \n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2',\n})\n```\n\n----------------------------------------\n\nTITLE: Using formatEther Function to Convert Wei to Ether\nDESCRIPTION: Demonstrates how to use the formatEther function to convert a wei value (as bigint) to its ether representation as a string. The example shows converting 1 ether (1000000000000000000 wei) to its string representation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatEther.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatEther } from 'viem'\n\nformatEther(1000000000000000000n) \n// '1'\n```\n\n----------------------------------------\n\nTITLE: Block Watching with WebSocket Transport\nDESCRIPTION: Demonstrates setting up block watching using WebSocket transport with polling enabled. Shows configuration of WebSocket client for real-time block monitoring.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlocks.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, webSocket } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst publicClient = createPublicClient({\n  chain: mainnet,\n  transport: webSocket()\n})\n\nconst unwatch = publicClient.watchBlocks(\n  { \n    onBlock: block => console.log(block),\n    poll: true,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Filter with Manual ABI Event Definition\nDESCRIPTION: Creates an event filter using a manually defined ABI event object instead of parseAbiItem. This approach directly specifies the event name and inputs with their types and indexed status.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createEventFilter(publicClient, {\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: {\n    name: 'Transfer', \n    inputs: [\n      { type: 'address', indexed: true, name: 'from' },\n      { type: 'address', indexed: true, name: 'to' },\n      { type: 'uint256', indexed: false, name: 'value' }\n    ] \n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Function Result Encoding in TypeScript\nDESCRIPTION: Demonstrates encoding of complex nested data structures with multiple fields and types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionResult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionResult } from 'viem'\n\nconst data = decodeFunctionResult({\n  abi: wagmiAbi,\n  functionName: 'getInfo',\n  value: [\n    {\n      foo: {\n        sender: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        x: 69420n,\n        y: true\n      },\n      sender: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n      z: 69\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for L2 Actions\nDESCRIPTION: This snippet shows how to configure a viem public client for use with L2 actions, specifically for the zkSync network. It demonstrates importing necessary modules and extending the client with L2-specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/estimateGasL1ToL2.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Client with JSON-RPC Account\nDESCRIPTION: Creates a Wallet Client using the custom transport with window.ethereum provider for JSON-RPC accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Event Log Parsing with Argument Filtering\nDESCRIPTION: Example of filtering logs by specific argument values using the args parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst logs = parseEventLogs({ \n  abi: erc20Abi, \n  args: {\n    from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  },\n  logs: receipt.logs,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing ZKsync Wallet Client in Viem\nDESCRIPTION: Sets up a wallet client with ZKsync chain configuration and EIP712 wallet actions. Uses custom transport with window.ethereum provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { eip712WalletActions } from 'viem/zksync'\n\nconst walletClient = createWalletClient({\n  chain: zksync,\n  transport: custom(window.ethereum!),\n}).extend(eip712WalletActions())\n```\n\n----------------------------------------\n\nTITLE: Extending Viem Wallet Client with ERC-7715 Actions\nDESCRIPTION: Example showing how to import and extend a Viem wallet client with experimental ERC-7715 actions. The code demonstrates importing necessary modules, creating a wallet client connected to Ethereum mainnet, and extending it with ERC-7715 functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/client.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { erc7715Actions } from 'viem/experimental' // [!code focus]\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(erc7715Actions()) // [!code focus]\n\nconst id = await walletClient.grantPermissions({/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Call Batch Status with Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getCallsStatus function from a walletClient to retrieve the status of a call batch. It requires a configured walletClient with EIP-5792 actions and returns detailed status information including chain ID, status code, and receipts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCallsStatus.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst result = await walletClient.getCallsStatus({\n  id: '0x1234567890abcdef',\n})\n// @log: {\n// @log:   atomic: false,\n// @log:   chainId: 1,\n// @log:   id: '0x1234567890abcdef',\n// @log:   statusCode: 200,\n// @log:   status: 'success',\n// @log:   receipts: [{ ... }],\n// @log: }\n```\n\n----------------------------------------\n\nTITLE: Creating a Light Smart Account with permissionless.js\nDESCRIPTION: Example showing how to import and use toLightSmartAccount from permissionless.js to create a Light Smart Account with a client and owner.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toLightSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toLightSmartAccount } from 'permissionless/accounts'\nimport { client } from './client.js'\nimport { owner } from './owner.js'\n\nconst account = await toLightSmartAccount({\n  client,\n  owner: owner,\n  version: '2.0.0',\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction with Private Key Account\nDESCRIPTION: Example of sending a transaction using the Wallet Client with a Private Key Account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.sendTransaction({\n  account,\n  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('0.001')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for getAllBalances\nDESCRIPTION: This snippet shows the configuration setup for using the getAllBalances function. It creates a public client using the zksync chain and extends it with publicActionsL2. It also defines two types of accounts: a JSON-RPC account and a local account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getAllBalances.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Verification Gas in User Operation with TypeScript\nDESCRIPTION: This example demonstrates how to set the pre-verification gas amount when preparing a user operation. This extra gas is paid to the Bundler for processing the operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperation = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  preVerificationGas: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of encodeFunctionData in TypeScript\nDESCRIPTION: Demonstrates how to use encodeFunctionData to encode a function name into calldata. It uses an ABI imported from another file and encodes the 'totalSupply' function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst data = encodeFunctionData({\n  abi: wagmiAbi,\n  functionName: 'totalSupply'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Filter for Multiple Events\nDESCRIPTION: Creates a filter that listens for multiple event types. This example listens for both Approval and Transfer events by using parseAbi to handle multiple event signatures.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\n\nconst filter = await publicClient.createEventFilter({\n  events: parseAbi([\n    'event Approval(address indexed owner, address indexed sender, uint256 value)',\n    'event Transfer(address indexed from, address indexed to, uint256 value)',\n  ]),\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Wallet Client with Public Actions in TypeScript\nDESCRIPTION: This snippet shows how to extend a Wallet Client with Public Actions, allowing the use of both Wallet and Public Actions on a single client instance.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http, publicActions } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst account = privateKeyToAccount('0x...')\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n}).extend(publicActions) // [!code ++]\n\nconst { request } = await client.simulateContract({ ... }) // Public Action\nconst hash = await client.writeContract(request) // Wallet Action\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Event Filter Changes in TypeScript using viem\nDESCRIPTION: Creates a contract event filter for a specific event and retrieves changes using getFilterChanges. Returns an array of event logs.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterChanges.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createContractEventFilter({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  abi: wagmiAbi,\n  eventName: 'Transfer'\n})\nconst logs = await publicClient.getFilterChanges({ filter })\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Authorization List in TypeScript\nDESCRIPTION: Shows how to sign a transaction with an EIP-7702 Authorization list. This includes creating an authorization and then using it in the transaction signing process.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\nconst account = privateKeyToAccount('0x...')\n// ---cut---\nconst authorization = await account.signAuthorization({\n  contractAddress: '0x...',\n  chainId: 1,\n  nonce: 1,\n})\n\nconst signature = await account.signTransaction({\n  authorizationList: [authorization], // [!code focus]\n  chainId: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Blob Base Fee with viem\nDESCRIPTION: Example showing how to query the current blob base fee using a public client. Returns the base fee as a bigint value in wei.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlobBaseFee.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst baseFee = await publicClient.getBlobBaseFee()\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of parseAbiParameter\nDESCRIPTION: Demonstrates the basic usage of parseAbiParameter to convert a human-readable ABI parameter string into a structured AbiParameter object. The example parses 'address from' into an object with type and name properties.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameter.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiParameter } from 'viem'\n\nconst abiParameter = parseAbiParameter('address from')\n//    ^? const abiParameter: { type: \"address\"; name: \"from\"; }\n```\n\n----------------------------------------\n\nTITLE: Querying L1 Chain ID with viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getL1ChainId function from a configured viem client to retrieve the Chain ID of the underlying L1 network in zkSync.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1ChainId.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst chainId = await client.getL1ChainId();\n```\n\n----------------------------------------\n\nTITLE: Basic getFeeHistory Usage Example\nDESCRIPTION: Example showing how to retrieve historical gas fee data using the getFeeHistory function with a public client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFeeHistory.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst feeHistory = await publicClient.getFeeHistory({\n  blockCount: 4,\n  rewardPercentiles: [25, 75]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Paymaster Client\nDESCRIPTION: Example of creating a Paymaster Client and integrating it with a Bundler Client. This shows the basic setup required to use a Paymaster for sponsoring transactions on the Sepolia testnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { \n  createBundlerClient, \n  createPaymasterClient,\n} from 'viem/account-abstraction'\nimport { sepolia } from 'viem/chains'\n\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://public.pimlico.io/v2/11155111/rpc'),\n})\n\nconst bundlerClient = createBundlerClient({\n  chain: sepolia,\n  paymaster: paymasterClient,\n  transport: http('https://public.pimlico.io/v2/11155111/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to encodeFunctionData in TypeScript\nDESCRIPTION: Illustrates how to pass arguments to encodeFunctionData when the function requires parameters. This example uses the 'balanceOf' function which requires an address argument.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem'\nimport { wagmiAbi } from './abi'\n\nconst data = encodeFunctionData({\n  abi: wagmiAbi,\n  functionName: 'balanceOf',\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Key for Viem Wallet Client\nDESCRIPTION: Shows how to set a custom key for the wallet client. The key is a string that can be used to identify the client, with a default value of \"wallet\".\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createWalletClient({\n  key: 'foo',\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Factory Parameter in Call Action\nDESCRIPTION: Example of specifying the factory parameter when making a call. This parameter specifies a contract deployment factory address for deployless calls.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  factory: '0x0000000000ffe8b47b3e2130213b802212439497', // [!code focus]\n  factoryData: '0xdeadbeef',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Using toFunctionHash with String and AbiFunction\nDESCRIPTION: Examples demonstrating how to use toFunctionHash with both a string function signature and an AbiFunction object to generate function hashes. The function returns a Hex value representing the hash of the function signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionHash.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toFunctionHash } from 'viem'\n\nconst hash_1 = toFunctionHash('function ownerOf(uint256)')\n// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n\n// or from an `AbiEvent` on your contract ABI\nconst hash_2 = toFunctionHash({\n  name: 'ownerOf',\n  type: 'function',\n  inputs: [{ name: 'tokenId', type: 'uint256' }],\n  outputs: [],\n  stateMutability: 'view',\n})\n// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n```\n\n----------------------------------------\n\nTITLE: Sending Blob Transaction\nDESCRIPTION: Demonstrates sending a blob transaction containing a simple 'hello world' string to the zero address, including blob gas fee configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/guides/blob-transactions.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei, stringToHex, toBlobs } from 'viem'\nimport { account, client } from './client'\nimport { kzg } from './kzg'\n\nconst blobs = toBlobs({ data: stringToHex('hello world') })\n\nconst hash = await client.sendTransaction({\n  blobs,\n  kzg,\n  maxFeePerBlobGas: parseGwei('30'),\n  to: '0x0000000000000000000000000000000000000000',\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Client for Local Accounts\nDESCRIPTION: Creates a Wallet Client using the http transport for local accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Smart Account using toSafeSmartAccount\nDESCRIPTION: Example code showing how to implement a Safe Smart Account using the toSafeSmartAccount function from permissionless.js. The function requires a client, an array of owners, and a version specification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSafeSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSafeSmartAccount } from 'permissionless/accounts'\nimport { client } from './client.js'\nimport { owner } from './owner.js'\n\nconst account = await toSafeSmartAccount({\n  client,\n  owners: [owner],\n  version: '1.4.1',\n})\n```\n\n----------------------------------------\n\nTITLE: Recovering Transaction Address using Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the recoverTransactionAddress function from Viem to recover the signing address from a prepared and signed transaction. It requires a walletClient instance and uses the prepareTransactionRequest and signTransaction methods before recovering the address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTransactionAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { recoverTransactionAddress } from 'viem'\nimport { walletClient } from './client'\n\nconst request = await walletClient.prepareTransactionRequest({\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n\nconst serializedTransaction = await walletClient.signTransaction(request)\n\nconst address = await recoverTransactionAddress({\n  serializedTransaction,\n})\n```\n\n----------------------------------------\n\nTITLE: Message Verification with Explicit Address\nDESCRIPTION: Example showing message verification with an explicit Ethereum address instead of using an account object.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await publicClient.verifyMessage({\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: 'hello world',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a ZKsync Multi-signature Smart Account in TypeScript\nDESCRIPTION: Example showing how to create a multi-signature ZKsync Smart Account using the toMultisigSmartAccount function with contract address and private keys.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toMultisigSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toMultisigSmartAccount } from 'viem/zksync'\n\nconst account = toMultisigSmartAccount({\n  address: '0xf39Fd6e51aad8F6F4ce6aB8827279cffFb92266', \n  privateKeys: ['0x...', '0x...']\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Watch with fromBlock Parameter in TypeScript\nDESCRIPTION: Demonstrates how to initialize an event watcher with Viem's publicClient, specifying a starting block number using the fromBlock parameter. The example shows how to set up a basic event listener that logs events to the console.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchEvent({\n  fromBlock: 1n,\n  onLogs: logs => console.log(logs),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Domain and Types for EIP-712 Typed Data in TypeScript\nDESCRIPTION: This snippet shows how to define the domain and types for EIP-712 compliant typed data. It includes the domain properties and the structure of the types used in the signTypedData method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signTypedData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n \n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transaction Count by Tag in TypeScript\nDESCRIPTION: This example illustrates how to use the getBlockTransactionCount function with a block tag parameter to get the transaction count for a specific block state.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst block = await publicClient.getBlockTransactionCount({\n  blockTag: 'safe'\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating L1 Gas for L2 Transaction in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the estimateL1Gas function from the viem library to estimate the L1 gas required for an L2 transaction. It includes the basic usage and configuration setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateL1Gas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst gas = await publicClient.estimateL1Gas({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Retrieving ENS Resolver Example\nDESCRIPTION: Example showing how to get an ENS resolver address using the publicClient. Demonstrates usage of normalize function for ENS name preparation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsResolver.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalize } from 'viem/ens'\nimport { publicClient } from './client'\n \nconst resolverAddress = await publicClient.getEnsResolver({\n  name: normalize('wevm.eth'),\n})\n// '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n```\n\n----------------------------------------\n\nTITLE: Public Client Configuration for Block Watching\nDESCRIPTION: Shows how to configure and create a public client for the Ethereum mainnet using Viem's createPublicClient function with HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlocks.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using parseAbiParameter with Struct Definition\nDESCRIPTION: Shows how to use parseAbiParameter with an array of strings to parse a struct definition. This example includes a tuple type with component information.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameter.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiParameter } from 'viem'\n\nconst abiParameter = parseAbiParameter([\n  //  ^? const abiParameter: { type: \"tuple\"; components: [{ type: \"string\"; name:...\n  'Baz bar',\n  'struct Baz { string name; }',\n])\n```\n\n----------------------------------------\n\nTITLE: Using getTxpoolStatus in TypeScript with viem\nDESCRIPTION: This snippet demonstrates how to use the getTxpoolStatus function from a testClient. It retrieves the status of the transaction pool, including pending and queued transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getTxpoolStatus.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nconst status = await testClient.getTxpoolStatus()\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for Viem Client and Owner Account\nDESCRIPTION: This snippet shows the configuration setup for creating a public client and defining the owner account using a private key. It's a prerequisite for the main signUserOperation example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Modifying Account Balance with Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the setBalance function from the Viem library to modify the balance of an Ethereum account. It uses a testClient instance and the parseEther utility function to set the balance to 1 ETH.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBalance.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { testClient } from './client'\n \nawait testClient.setBalance({\n  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration setup for viem clients\nDESCRIPTION: Shows the configuration setup for the Ethereum and zkSync Era clients. It creates a public client for the Ethereum mainnet and another for zkSync, extending the zkSync client with public L2 actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync, mainnet } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Specifying Address Parameter for ZKsync Smart Account in TypeScript\nDESCRIPTION: This code snippet shows how to specify the address parameter when creating a ZKsync Smart Account. The address should be of type Hex and represent the deployed Account's Contract implementation address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toSmartAccount({\n  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', // [!code focus]\n  async sign({ hash }) {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting addressIndex in hdKeyToAccount\nDESCRIPTION: Example showing how to specify the addressIndex option when creating an HD Account, which affects the address index used in the derivation path (m/44'/60'/0'/0/${addressIndex}).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { hdKeyToAccount } from 'viem/accounts'\n// ---cut---\nconst hdKey = HDKey.fromMasterSeed(...)\n\nconst account = hdKeyToAccount(\n  hdKey,\n  {\n    accountIndex: 1,\n    addressIndex: 6 // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Event Watching in TypeScript\nDESCRIPTION: Basic example of watching contract events using viem's publicClient. Sets up a watcher for all events on a specific contract address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { wagmiAbi } from './abi'\n\nconst unwatch = publicClient.watchContractEvent({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Client Configuration for ERC-7821 Actions\nDESCRIPTION: Configuration setup for using execute function, showing how to create a client with ERC-7821 actions extension, initialize an account, and set up the transport layer.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { erc7821Actions } from 'viem/experimental'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const client = createClient({\n  chain: mainnet,\n  transport: http(),\n}).extend(erc7821Actions())\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with Smart Account in TypeScript\nDESCRIPTION: This example demonstrates how to sign a message using a Smart Account with the owner's credentials. It creates a Smart Account and uses it to sign a 'hello world' message.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { client, owner } from './config.js'\n\nconst account = await toSmartAccount({\n  client,\n  owners: [owner],\n})\n\nconst signature = await account.signMessage({\n  message: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Signing Example\nDESCRIPTION: Demonstrates how to prepare and sign a basic transaction using a wallet client with EIP712 support.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/signTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\n\nconst request = await walletClient.prepareTransactionRequest({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n\nconst signature = await walletClient.signTransaction(request)\n\nconst hash = await walletClient.sendRawTransaction(signature)\n```\n\n----------------------------------------\n\nTITLE: Using the Account Parameter with getL1TokenBalance in TypeScript\nDESCRIPTION: Example showing how to use the account parameter when retrieving an L1 token balance. The account parameter can be a JSON-RPC Account or Local Account address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = await publicClient.getL1TokenBalance({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266' // [!code focus]\n  blockTag: 'latest',\n  token: '0x5C221E77624690fff6dd741493D735a17716c26B',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ZKsync Chains in TypeScript\nDESCRIPTION: Shows how to import the main ZKsync chain and Sepolia testnet chain definitions from Viem's chains module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/chains.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  zksync,\n  zksyncSepoliaTestnet,\n} from 'viem/chains'\n```\n\n----------------------------------------\n\nTITLE: Using getAbiItem with 4byte Selector\nDESCRIPTION: Demonstrates how to use the getAbiItem function with a 4byte selector instead of a function name. This can be useful when working with function signatures.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst encodedData = getAbiItem({\n  abi: [...],\n  name: '0x70a08231', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring zkSync Wallet Client\nDESCRIPTION: Sets up a wallet client for zkSync with the necessary extensions. Shows configuration for both JSON-RPC and Local Account types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync } from 'viem/chains'\nimport { eip712Actions } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Converting Wei Balance to Ether using formatEther in TypeScript\nDESCRIPTION: This example shows how to convert the balance from wei to ether units using the formatEther function from the viem library. It retrieves the balance and then formats it as ether.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBalance.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatEther } from 'viem'\n\nconst balance = await publicClient.getBalance({\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  blockTag: 'safe'\n})\nconst balanceAsEther = formatEther(balance)\n// \"6.942\"\n```\n\n----------------------------------------\n\nTITLE: Migrating from AnkrProvider to createPublicClient in viem\nDESCRIPTION: Shows how to replace Ethers' AnkrProvider with viem's createPublicClient using the Ankr RPC URL directly in the HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.AnkrProvider('homestead', '<apiKey>') // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: mainnet, // [!code hl]\n  transport: http('https://rpc.ankr.com/eth/<apiKey>') // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Client Configuration\nDESCRIPTION: Configuration setup for Viem clients using JSON-RPC accounts (like MetaMask). Sets up public and wallet clients for both L1 and L2 chains with necessary OP Stack extensions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, walletActionsL1, walletActionsL2 } from 'viem/op-stack'\n\nexport const [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n}) \n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n\nexport const walletClientL2 = createWalletClient({\n  account,\n  chain: optimism,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of decodeAbiParameters\nDESCRIPTION: Demonstrates the basic usage of decodeAbiParameters to decode encoded ABI data with multiple parameter types (string, uint, bool).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeAbiParameters } from 'viem'\n\nconst values = decodeAbiParameters(\n  [\n    { name: 'x', type: 'string' },\n    { name: 'y', type: 'uint' },\n    { name: 'z', type: 'bool' }\n  ],\n  '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',\n)\n// ['wagmi', 420n, true]\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Signing\nDESCRIPTION: Demonstrates implementation of the signMessage function for EIP-191 format message signing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toAccount({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n\n  async signMessage({ message }) {\n    return signMessage({ message, privateKey })\n  },\n  async signTransaction(transaction, { serializer }) {\n    return signTransaction({ privateKey, transaction, serializer })\n  },\n  async signTypedData(typedData) {\n    return signTypedData({ ...typedData, privateKey })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients for L1/L2 Interaction\nDESCRIPTION: Configuration setup for creating public and wallet clients to interact with L1 and extend it with publicActionsL1 for L2 operations. Demonstrates both JSON-RPC and Local Account setup approaches.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateProveWithdrawalGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Deployless Call Using Deploy Factory in TypeScript\nDESCRIPTION: Example of performing a deployless call using a deploy factory for an ERC-4337 Smart Account. This approach temporarily deploys a contract using a factory and then calls a function on the deployed contract.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData, parseAbi } from 'viem'\nimport { owner, publicClient } from './config'\n\nconst data = await publicClient.call({\n  // Address of the contract deployer (e.g. Smart Account Factory).\n  factory: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n\n  // Function to execute on the factory to deploy the contract.\n  factoryData: encodeFunctionData({\n    abi: parseAbi(['function createAccount(address owner, uint256 salt)']),\n    functionName: 'createAccount',\n    args: [owner, 0n],\n  }),\n\n  // Function to call on the contract (e.g. Smart Account contract).\n  data: encodeFunctionData({\n    abi: parseAbi(['function entryPoint() view returns (address)']),\n    functionName: 'entryPoint'\n  }),\n\n  // Address of the contract.\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Max Priority Fee Per Gas - Basic Usage\nDESCRIPTION: Example showing how to estimate the maximum priority fee per gas using a public client. Returns the fee estimate in wei as a bigint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateMaxPriorityFeePerGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst maxPriorityFeePerGas = await publicClient.estimateMaxPriorityFeePerGas()\n// @log: Output: 1_000_000_000n\n```\n\n----------------------------------------\n\nTITLE: Defining Domain and Types for EIP-712 Typed Data\nDESCRIPTION: This code snippet shows how to define the domain and types objects required for EIP-712 typed data signing. The domain object includes optional properties like name, version, chainId, and verifyingContract. The types object defines the structure of the data to be signed.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signTypedData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of depositTransaction with viem for OP Stack L1-to-L2 Transactions\nDESCRIPTION: Demonstrates how to initiate a deposit transaction from an L1 chain to execute on an L2 chain using the viem library. The example shows sending 1 ETH to a target address on the Base L2 network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { base } from 'viem/chains'\nimport { account, walletClientL1 } from './config'\n \nconst hash = await walletClientL1.depositTransaction({\n  account,\n  request: {\n    gas: 21_000n,\n    mint: parseEther('1')\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client in TypeScript\nDESCRIPTION: This snippet shows how to set up a Wallet Client and a Relay Account for executing EIP-7702 Transactions. It uses the Sepolia testnet and an HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { sepolia } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts' \n\nexport const relay = privateKeyToAccount('0x...')\n \nexport const walletClient = createWalletClient({\n  account: relay,\n  chain: sepolia,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Smart Account with a Custom Implementation\nDESCRIPTION: Demonstrates how to instantiate a Smart Account with a custom implementation by providing required callback functions and optional configurations. The example shows all mandatory methods that need to be implemented and optional extensions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbase, toSmartAccount } from 'viem/account-abstraction'\nimport { client, owner } from './config.js'\n\nconst account = await toSmartAccount({\n  client,\n  entryPoint: {\n    abi: [/* ... */],\n    address: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',\n    version: '0.7',\n  },\n  \n  async decodeCalls(data) {\n    // Decode calls from calldata as defined by the Smart Account contract.\n  },\n  async encodeCalls(calls) {\n    // Encode calls as defined by the Smart Account contract.\n  },\n  async getAddress() {\n    // Get the address of the Smart Account.\n  },\n  async getFactoryArgs() {\n    // Build the Factory properties for the Smart Account.\n  },\n  async getNonce() {\n    // Get the nonce of the Smart Account.\n  },\n  async getStubSignature() {\n    // Get the stub signature for User Operations from the Smart Account.\n  },\n  async signMessage(message) {\n    // Sign message to be verified by the Smart Account contract.\n  },\n  async signTypedData(typedData) {\n    // Sign typed data to be verified by the Smart Account contract.\n  },\n  async signUserOperation(userOperation) {\n    // Sign a User Operation to be broadcasted via the Bundler.\n  },\n\n  // (Optional) Extend the Smart Account with custom properties.\n  extend: {\n    abi: [/* ... */],\n    factory: {\n      abi: [/* ... */],\n      address: '0xda4b37208c41c4f6d1b101cac61e182fe1da0754',\n    },\n  },\n  // (Optional) User Operation configuration.\n  userOperation: {\n    async estimateGas(userOperation) {\n      // Estimate gas properties for a User Operation.\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining types parameter in wrapTypedDataSignature\nDESCRIPTION: Example showing how to define the types parameter for wrapTypedDataSignature. This includes creating custom type definitions for structured data like Person and Mail objects.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = wrapTypedDataSignature({\n  domain,\n  types: { \n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  verifierDomain: {\n    name: 'Smart Account',\n    version: '1',\n    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',\n    chainId: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI with Constructor Arguments\nDESCRIPTION: Defines a contract ABI with a constructor that accepts a uint32 parameter, necessary for contracts that require initialization arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [{ name: \"x\", type: \"uint32\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Migrating Signer Methods to Wallet Actions in viem\nDESCRIPTION: Demonstrates replacing Ethers' Signer methods with viem's Wallet Client actions. Methods that extend off the Wallet Client are called Wallet Actions in viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.Web3Provider(window.ethereum)\n\nconst [address] = await provider.listAccounts()\nconst signer = provider.getSigner(address)\n\nsigner.sendTransaction(...) // [!code hl]\nsigner.signMessage(...) // [!code hl]\n...\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\nclient.sendTransaction({ ... }) // [!code hl]\nclient.signMessage({ ... }) // [!code hl]\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving ENS Text Record - Main Example\nDESCRIPTION: Example showing how to retrieve a Twitter handle text record for an ENS name using the publicClient.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalize } from 'viem/ens'\nimport { publicClient } from './client'\n \nconst ensText = await publicClient.getEnsText({\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n})\n// 'wevm_dev'\n```\n\n----------------------------------------\n\nTITLE: Transaction Receipt with Custom Polling\nDESCRIPTION: Example showing how to customize the polling interval for transaction receipt retrieval\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await publicClient.waitForTransactionReceipt(\n  { \n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n    pollingInterval: 12_000,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Event Logs by Arguments in viem\nDESCRIPTION: Demonstrates how to use the args parameter to filter logs based on specific event argument values. In this example, logs are filtered to only include those with a specific 'from' address value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst topics = parseEventLogs({\n  abi: wagmiAbi,\n  args: { // [!code focus]\n    from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n  }, // [!code focus]\n  logs: [{\n    blockNumber: 69420n,\n    data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n    logIndex: 1,\n    topics: [\n      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', \n      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', \n      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'\n    ]\n    // ...\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Total Gas for L2 Contract Operations with viem\nDESCRIPTION: This example demonstrates how to estimate the total (L1 + L2) gas for a contract mint operation on an L2 network using the publicClient with publicActionsL2 extension.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst gas = await publicClient.estimateContractTotalGas({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account,\n})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client Configuration\nDESCRIPTION: Example showing how to configure a WebSocket client with polling enabled for watching pending transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchPendingTransactions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, webSocket } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst publicClient = createPublicClient({\n  chain: mainnet,\n  transport: webSocket()\n})\n\nconst unwatch = publicClient.watchPendingTransactions(\n  { \n    onTransactions: transactions => console.log(transactions),\n    poll: true,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using extractTransactionDepositedLogs Function - TypeScript\nDESCRIPTION: Demonstrates how to use the extractTransactionDepositedLogs function to extract logs from a transaction receipt. Returns an array of TransactionDeposited logs containing event arguments and block information.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractTransactionDepositedLogs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractTransactionDepositedLogs } from 'viem'\n\nconst receipt = await client.getTransactionReceipt({\n  hash: '0xc9c0361bc3da9cd3560e48b469d0d6aac0e633e4897895edfd26a287f7c578ec',\n})\n\nconst logs = extractTransactionDepositedLogs(receipt)\n// [\n//   { args: { ... }, blockHash: '0x...', eventName: 'TransactionDeposited'  },\n//   { args: { ... }, blockHash: '0x...', eventName: 'TransactionDeposited'  },\n//   { args: { ... }, blockHash: '0x...', eventName: 'TransactionDeposited'  },\n// ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Paymaster Context in User Operation with TypeScript\nDESCRIPTION: This example shows how to set up a paymaster client and include paymaster-specific context when preparing a user operation. It demonstrates the use of a custom paymaster client with an API key and additional context data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}')\n})\n\nconst hash = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: paymasterClient,\n  paymasterContext: { // [!code focus]\n    policyId: 'abc123' // [!code focus]\n  }, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for L1 to L2 Deposit Transaction\nDESCRIPTION: Main example showing how to estimate gas for a deposit transaction from L1 to L2 (Base). It demonstrates minting ETH on L2 by sending it from L1.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { base } from 'viem/chains'\nimport { account, publicClientL1 } from './config'\n \nconst gas = await publicClientL1.estimateDepositTransactionGas({\n  account,\n  request: {\n    gas: 21_000n,\n    mint: parseEther('1')\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Error Results in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.decodeErrorResult to decode error data returned from a failed transaction. This extracts the arguments from custom errors.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst result = iface.decodeErrorResult(\"AccountLocked\", '0xf7c3865a0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba720000000000000000000000000000000000000000000000000de0b6b3a7640000')\n```\n\n----------------------------------------\n\nTITLE: Checking Withdrawal Finalization Status in zkSync using viem\nDESCRIPTION: Example of using the isWithdrawalFinalized function to check if a withdrawal transaction from zkSync (L2) has been finalized on the L1 network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client, zksyncClient } from './config'\n\nconst hash = await client.isWithdrawalFinalized({\n  client: zksyncClient,\n  hash: '0x…',\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from Wallet to privateKeyToAccount in viem\nDESCRIPTION: Demonstrates replacing Ethers' Wallet with viem's privateKeyToAccount function. viem separates the account creation from the client creation for improved composability.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers, Wallet } from 'ethers'\n\nconst provider = new providers.Web3Provider(window.ethereum)\n\nconst wallet = new Wallet('0x...', provider) // [!code hl]\n\nwallet.sendTransaction({ ... })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst account = privateKeyToAccount('0x...') // [!code hl]\n\nconst client = createWalletClient({\n  account, // [!code hl]\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\nclient.sendTransaction({ ... })\n```\n\n----------------------------------------\n\nTITLE: Creating ZKsync Smart Account - Basic Usage\nDESCRIPTION: Demonstrates how to create a single-signature ZKsync Smart Account by providing the contract address and private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSinglesigSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSinglesigSmartAccount } from 'viem/zksync'\n\nconst account = toSinglesigSmartAccount({\n  address: '0xf39Fd6e51aad8F6F4ce6aB8827279cffFb92266', \n  privateKey: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client with Multicall Optimization\nDESCRIPTION: Sets up a Public Client with eth_call aggregation enabled for improved performance using multicall.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst publicClient = createPublicClient({\n  batch: {\n    multicall: true,\n  },\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Call Simulation\nDESCRIPTION: Demonstrates how to simulate contract function calls using ABI definitions along with regular transactions. Includes approve and transferFrom function calls.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateBlocks.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi, parseEther } from 'viem'\nimport { client } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n \nconst result = await client.simulateBlocks({\n  blocks: [{\n    calls: [\n      {\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n        value: parseEther('1')\n      },\n      {\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n        to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n        abi,\n        functionName: 'approve',\n        args: [\n          '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n          100n\n        ],\n      },\n      {\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n        to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n        abi,\n        functionName: 'transferFrom',\n        args: [\n          '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n          '0x0000000000000000000000000000000000000000',\n          100n\n        ],\n      },\n    ],\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pending Transaction Filter Changes in TypeScript using viem\nDESCRIPTION: Creates a pending transaction filter and retrieves changes using getFilterChanges. Returns an array of transaction hashes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterChanges.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createPendingTransactionFilter()\nconst hashes = await publicClient.getFilterChanges({ filter })\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport with Retry Configuration\nDESCRIPTION: Examples of configuring retry behavior and timeouts for WebSocket transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', {\n  retryCount: 5,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', {\n  retryDelay: 100,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', {\n  timeout: 60_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring walletClient with eip5792Actions for getCapabilities\nDESCRIPTION: Shows how to set up the wallet client with the necessary eip5792Actions extension to use getCapabilities. The configuration creates a wallet client connected to the browser's Ethereum provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window'\n// ---cut---\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions())\n\nexport const [account] = await walletClient.getAddresses()\n```\n\n----------------------------------------\n\nTITLE: ABI Definition for Struct Encoding Example\nDESCRIPTION: Shows the ABI definition used in the struct encoding example, defining a tuple with uint256, bool, and address components.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const abi = [\n  {\n    name: 'staticStruct',\n    inputs: [\n      {\n        components: [\n          {\n            name: 'x',\n            type: 'uint256',\n          },\n          {\n            name: 'y',\n            type: 'bool',\n          },\n          {\n            name: 'z',\n            type: 'address',\n          },\n        ],\n        name: 'foo',\n        type: 'tuple',\n      },\n    ],\n  }\n] as const\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for L2 Withdrawal Proof with viem Library\nDESCRIPTION: This example shows how to estimate gas required to prove a withdrawal that occurred on an L2 using viem's publicClientL1. It includes essential parameters like account, L2 output index, proof data, and target chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateProveWithdrawalGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1 } from './config'\n\nconst gas = await publicClientL1.estimateProveWithdrawalGas({\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  l2OutputIndex: 4529n,\n  outputRootProof: { ... },\n  targetChain: optimism,\n  withdrawalProof: [ ... ],\n  withdrawal: { ... },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getL2TransactionHashes Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the getL2TransactionHashes function to extract L2 hashes from an L1 Transaction Receipt. It also shows how to get the transaction receipt using a client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getL2TransactionHashes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractTransactionDepositedLogs, getL2TransactionHashes } from 'viem'\n\nconst receipt = await client.getTransactionReceipt({\n  hash: '0xa08acae48f12243bccd7153c88d892673d5578cce4ee9988c0332e8bba47436b',\n})\n\nconst l2Hashes = getL2TransactionHashes(receipt) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Simulation in TypeScript\nDESCRIPTION: Demonstrates how to simulate basic ETH transfer transactions using simulateCalls. Shows simulation of multiple transfers with their gas usage and status results.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { client } from './config'\n \nconst { results } = await client.simulateCalls({\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n  calls: [\n    {\n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n      value: parseEther('2'),\n    },\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1'),\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Pending Transaction Watching in TypeScript\nDESCRIPTION: Example showing how to watch pending transactions using the publicClient. Returns transaction hashes in batches within the polling interval.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchPendingTransactions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst unwatch = publicClient.watchPendingTransactions(\n  { onTransactions: hashes => console.log(hashes) }\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Chain for Fee Estimation in TypeScript\nDESCRIPTION: Demonstrates how to override the chain when estimating fees per gas. This example uses the Optimism chain instead of the default client chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateFeesPerGas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains' // [!code focus]\n\nconst { maxFeePerGas, maxPriorityFeePerGas } = \n  await publicClient.estimateFeesPerGas({\n    chain: optimism // [!code focus]\n  })\n```\n\n----------------------------------------\n\nTITLE: Passing Chain Directly to Transaction Actions in viem\nDESCRIPTION: Example demonstrating how to pass a chain directly to a transaction action instead of setting it at the client level. This approach allows for per-transaction chain specification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom, getAccount } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet, // [!code --]\n  transport: custom(window.ethereum)\n})\n \nconst account = getAccount('0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266')\n \nconst hash = await walletClient.sendTransaction({ \n  account,\n  chain: mainnet, // [!code ++]\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients for OP Stack Interactions\nDESCRIPTION: Configuration setup for creating wallet and public clients with the necessary OP Stack extensions. Shows how to initialize clients for both L1 and L2 chains, and demonstrates two methods of providing account details.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildProveWithdrawal.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval with Transactions\nDESCRIPTION: Example of retrieving block information including full transaction details.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst block = await publicClient.getBlock({\n  includeTransactions: true\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Deployment Data Encoding in TypeScript\nDESCRIPTION: Basic example showing how to encode contract deployment data without constructor arguments using the encodeDeployData function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeDeployData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeDeployData } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst data = encodeDeployData({\n  abi: wagmiAbi,\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...'\n})\n// 0x608060405260405161083e38038061083e833981016040819052610...\n```\n\n----------------------------------------\n\nTITLE: ENS Text Record Retrieval with Custom Resolver\nDESCRIPTION: Example showing how to retrieve an ENS text record using a custom Universal Resolver contract address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst ensText = await publicClient.getEnsText({\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing User Operation with Bundler-Integrated Paymaster\nDESCRIPTION: Demonstrates a simplified approach using bundler-integrated paymaster functionality. Instead of creating a separate Paymaster Client, it uses the bundler's built-in paymaster capabilities.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { \n  createBundlerClient, \n  createPaymasterClient,\n} from 'viem/account-abstraction'\nimport { account, client } from './config.ts'\n\nconst bundlerClient = createBundlerClient({\n  account,\n  client,\n  paymaster: true,\n  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using serializeTransaction to Serialize an EIP-1559 Transaction\nDESCRIPTION: Demonstrates how to use the serializeTransaction function to serialize an EIP-1559 transaction. It includes setting various transaction parameters like chainId, gas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, and value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeTransaction } from 'viem'\n\nconst serialized = serializeTransaction({\n  chainId: 1,\n  gas: 21001n,\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  nonce: 69,\n  to: \"0x1234512345123451234512345123451234512345\",\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Types Parameter Example\nDESCRIPTION: Demonstrates the structure of the types parameter which defines the Person and Mail types with their respective fields.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashTypedData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = hashTypedData({\n  domain,\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Public Client Configuration\nDESCRIPTION: Sets up the viem public client with mainnet configuration and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing an EIP-4361 Message with parseSiweMessage in TypeScript\nDESCRIPTION: Demonstrates how to use the parseSiweMessage function to parse an EIP-4361 formatted authentication message into a structured object. The function takes a string message as input and returns a SiweMessage object containing the parsed fields.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/parseSiweMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseSiweMessage } from 'viem/siwe'\n\nconst message = `example.com wants you to sign in with your Ethereum account:\n0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n\nI accept the ExampleOrg Terms of Service: https://example.com/tos\n\nURI: https://example.com/path\nVersion: 1\nChain ID: 1\nNonce: foobarbaz\nIssued At: 2023-02-01T00:00:00.000Z`\nconst fields = parseSiweMessage(message)\nfields.address\n//     ^?\n```\n\n----------------------------------------\n\nTITLE: Using Data Parameter in Call Action\nDESCRIPTION: Example of specifying the data parameter when making a call. This parameter contains a contract hashed method call with encoded arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', // [!code focus]\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transaction Receipt on Optimism L2\nDESCRIPTION: Code that waits for a transaction to be processed on the Optimism (L2) chain using the previously extracted L2 transaction hash. Once this resolves, the deposited ETH should be credited to the account on the L2 chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Viem Clients.\nimport { \n  account, \n  publicClientL1, \n  publicClientL2,\n  walletClientL1 \n} from './config'\n\n// Build parameters for the transaction on the L2.\nconst args = await publicClientL2.buildDepositTransaction({\n  mint: parseEther('1'),\n  to: account.address,\n})\n\n// Execute the deposit transaction on the L1. \nconst hash = await walletClientL1.depositTransaction(args) \n\n// Wait for the L1 transaction to be processed. \nconst receipt = await publicClientL1.waitForTransactionReceipt({ hash }) \n\n// Get the L2 transaction hash from the L1 transaction receipt. \nconst [l2Hash] = getL2TransactionHashes(receipt) \n\n// Wait for the L2 transaction to be processed. \nconst l2Receipt = await publicClientL2.waitForTransactionReceipt({ \n  hash: l2Hash \n})\n```\n\n----------------------------------------\n\nTITLE: watchAsset with Image Parameter\nDESCRIPTION: Example demonstrating optional image parameter usage for token logo URL in watchAsset function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst success = await walletClient.watchAsset({\n  type: 'ERC20',\n  options: {\n    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    decimals: 18,\n    symbol: 'WETH',\n    image: 'https://weth.com/icon.png',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Private Key Account in TypeScript\nDESCRIPTION: This code shows how to create a Private Key Account using the privateKeyToAccount function from viem/accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts' // [!code focus]\nimport { mainnet } from 'viem/chains'\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: http()\n})\n\nconst account = privateKeyToAccount('0x...') // [!code focus:1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Client for L2 Chain with OP-Stack Extensions\nDESCRIPTION: Example showing how to configure a public client for an L2 chain (Base) with the OP-Stack extensions required for estimateContractL1Fee. Demonstrates both JSON-RPC account and local account configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Fee.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Client with IPC Transport in TypeScript\nDESCRIPTION: This example demonstrates how to create a public client using the IPC Transport. It imports necessary functions and chains, then creates a client with mainnet chain and IPC transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient } from 'viem'\nimport { ipc } from 'viem/node'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet, \n  transport: ipc('/tmp/reth.ipc'), // [!code hl]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Private Keys for ZKsync Multi-signature Smart Account\nDESCRIPTION: Example demonstrating how to set the private keys of the owners when creating a ZKsync multi-signature Smart Account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toMultisigSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toMultisigSmartAccount({\n  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', \n  privateKeys: ['0x...', '0x...'] // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Total Fee for L2 Contract Write in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the estimateContractTotalFee function to estimate the total fee for executing an L2 contract write. It imports necessary dependencies and calls the function with required parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalFee.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst fee = await publicClient.estimateContractTotalFee({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling Interval for Viem Wallet Client\nDESCRIPTION: Demonstrates how to set a custom polling interval for the wallet client. The polling interval determines the frequency (in milliseconds) for polling enabled Actions, with a default value of 4000ms.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createWalletClient({\n  pollingInterval: 10_000,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: KZG setup for TypeScript blob operations\nDESCRIPTION: Shows how to set up KZG (Kate-Zaverucha-Goldberg) polynomial commitments, which are required for blob operations in Ethereum.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Verification Gas for User Operation in TypeScript\nDESCRIPTION: Shows how to set the preVerificationGas, which is extra gas to pay the Bundler for processing the user operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  preVerificationGas: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with a Specific Block Tag in TypeScript\nDESCRIPTION: Shows how to estimate gas for a transaction using a specific block tag with viem's estimateGas function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await publicClient.estimateGas({\n  blockTag: 'safe',\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1') \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Client for L2 Operations\nDESCRIPTION: Configuration setup for creating a public client with L2 capabilities using viem. It includes creating a wallet client, setting up accounts, and extending the client with L2-specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateInitiateWithdrawalGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\nexport const publicClientL2 = createPublicClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL2.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Setup\nDESCRIPTION: Configuration setup for the public client and account initialization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/estimateContractGas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Reading EIP-712 Domain for Counterfactual Contract using viem\nDESCRIPTION: This snippet demonstrates how to read the EIP-712 domain for a contract that has not been deployed yet, using factory and factoryData parameters. It utilizes the encodeFunctionData function to prepare the factory data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getEip712Domain.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { factory, publicClient } from './config'\n\nconst { domain, extensions, fields } = await publicClient.getEip712Domain({ \n  address: '0x57ba3ec8df619d4d243ce439551cce713bb17411',\n  factory: factory.address,\n  factoryData: encodeFunctionData({\n    abi: factory.abi,\n    functionName: 'createAccount',\n    args: ['0x0000000000000000000000000000000000000000', 0n]\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Using waitToFinalize for Withdrawal Finalization in TypeScript\nDESCRIPTION: Example demonstrating how to use the waitToFinalize function with viem to await the finalization period for a withdrawal transaction from Optimism (L2) to Ethereum (L1).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitToFinalize.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst receipt = await publicClientL2.getTransactionReceipt({\n  hash: '0x9a2f4283636ddeb9ac32382961b22c177c9e86dd3b283735c154f897b1a7ff4a',\n})\n\nconst [message] = getWithdrawals(receipt)\n\nawait publicClientL1.waitToFinalize({\n  withdrawalHash: message.withdrawalHash,\n  targetChain: optimism\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ZKsync Chain\nDESCRIPTION: Demonstrates how to define a custom chain using ZKsync's chain configuration, including formatters and serializers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/zksync.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from 'viem'\nimport { chainConfig } from 'viem/zksync'\n\nexport const zkSyncExample = defineChain({\n  ...chainConfig,\n  name: 'ZKsync Example',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration for Bundler Client and Account in TypeScript\nDESCRIPTION: Setup for creating a public client, smart account, and bundler client for use with estimateUserOperationGas.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const account = await toCoinbaseSmartAccount({\n  client,\n  owners: [privateKeyToAccount('0x...')],\n})\n\nexport const bundlerClient = createBundlerClient({\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Execute Function with Authorization List\nDESCRIPTION: Example showing how to use the execute function with a signed EIP-7702 Authorization list for secure contract interactions, including obtaining authorization and passing it to the execute function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst authorization = await client.signAuthorization({ \n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \n}) \n\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  authorizationList: [authorization],\n  calls: [ \n    { \n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n      value: parseEther('1')\n    }, \n    { \n      data: '0xdeadbeef', \n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n    }, \n  ], \n})\n```\n\n----------------------------------------\n\nTITLE: Importing createNonceManager from viem/nonce\nDESCRIPTION: This snippet shows how to import the createNonceManager function from the viem/nonce module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNonceManager } from 'viem/nonce'\n```\n\n----------------------------------------\n\nTITLE: Basic Block Simulation with Transactions\nDESCRIPTION: Example showing how to simulate multiple transactions within a block with custom block number and state overrides. Uses parseEther for value conversion.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateBlocks.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { client } from './config'\n \nconst result = await client.simulateBlocks({\n  blocks: [{\n    blockOverrides: {\n      number: 69420n,\n    },\n    calls: [\n      {\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n        to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n        value: parseEther('2'),\n      },\n      {\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n        value: parseEther('1'),\n      },\n    ],\n    stateOverrides: [{\n      address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n      balance: parseEther('10'),\n    }],\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for Viem Clients\nDESCRIPTION: Basic configuration setup for creating public client and smart account initialization required for both implementation approaches.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http, parseEther } from 'viem'\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts' \n\nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst owner = privateKeyToAccount('0x...')\n\nexport const account = await toCoinbaseSmartAccount({ \n  client, \n  owners: [owner]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Viem Client\nDESCRIPTION: Creates a basic Viem client with mainnet chain and HTTP transport configuration\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/custom.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createClient({ \n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random BIP-39 Mnemonics in viem\nDESCRIPTION: Generate a cryptographically secure random mnemonic phrase using the generateMnemonic function with a specific wordlist from viem/accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { english, generateMnemonic } from 'viem/accounts'\n\nconst mnemonic = generateMnemonic(english)\n```\n\n----------------------------------------\n\nTITLE: Reading EIP-712 Domain using viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getEip712Domain function from the viem library to read the EIP-712 domain from a contract. It requires a publicClient instance configured with a chain and transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getEip712Domain.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst { domain, extensions, fields } = await publicClient.getEip712Domain({ \n  address: '0x57ba3ec8df619d4d243ce439551cce713bb17411',\n})\n```\n\n----------------------------------------\n\nTITLE: ENS Name Query with Custom Resolver\nDESCRIPTION: Example of querying an ENS name with a custom Universal Resolver address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ensName = await publicClient.getEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Batch Transaction Implementation\nDESCRIPTION: Demonstrates how to send multiple transactions in a batch using the walletClient. Includes sending ETH and executing contract calls.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/sendCalls.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, walletClient } from './config'\n \nconst { id } = await walletClient.sendCalls({\n  account,\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      data: '0xdeadbeef',\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Recovering Public Key from Hash and Signature in TypeScript using viem\nDESCRIPTION: This example demonstrates how to use the recoverPublicKey function to recover the original 64-byte public key from a message hash and signature. The function takes an object with hash and signature parameters and returns the public key as a hexadecimal string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverPublicKey.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { recoverPublicKey } from 'viem'\n \nconst publicKey = await recoverPublicKey({\n  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'\n})\n// 0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5\n```\n\n----------------------------------------\n\nTITLE: Parameter Examples for finalizeWithdrawal Function\nDESCRIPTION: Examples demonstrating the different parameters available for the finalizeWithdrawal function, including the required client and hash parameters and optional index and chain parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.finalizeWithdrawal({\n  client: zksyncClient, // [!code focus]\n  hash: '0x…',\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.finalizeWithdrawal({\n  client: zksyncClient,\n  hash: '0x…',  // [!code focus]\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.finalizeWithdrawal({\n  client: zksyncClient,\n  hash: '0x…',\n  index: 0n, // [!code focus]\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zksync } from 'viem/chains' // [!code focus]\n\nconst hash = await walletClient.finalizeWithdrawal({\n  chain: zksync, // [!code focus]\n  client: zksyncClient,\n  hash: '0x…',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients for zkSync and Ethereum\nDESCRIPTION: Setup configuration for viem clients to interact with both zkSync (L2) and Ethereum mainnet (L1), extending them with the necessary public actions for cross-chain operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync, mainnet } from 'viem/chains'\nimport { publicActionsL2, publicActionsL1 } from 'viem/zksync'\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL1())\n```\n\n----------------------------------------\n\nTITLE: Basic Log Retrieval with Viem Client\nDESCRIPTION: Basic example of retrieving all event logs using a public client. Creates a public client instance and calls getLogs without any filters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getLogs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst logs = await publicClient.getLogs()\n```\n\n----------------------------------------\n\nTITLE: Using toFunctionSelector with Different Input Formats\nDESCRIPTION: Demonstrates three different ways to generate function selectors: using a full function signature string, using a shortened function signature, and using an AbiFunction object. All methods produce the same selector output (0x6352211e).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionSelector.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toFunctionSelector } from 'viem'\n\nconst selector_1 = toFunctionSelector('function ownerOf(uint256 tokenId)')\n// @log: Output: 0x6352211e\n\nconst selector_2 = toFunctionSelector('ownerOf(uint256)')\n// @log: Output: 0x6352211e\n\n// or from an `AbiFunction` on your contract ABI\nconst selector_3 = toFunctionSelector({\n  name: 'ownerOf',\n  type: 'function',\n  inputs: [{ name: 'tokenId', type: 'uint256' }],\n  outputs: [],\n  stateMutability: 'view',\n})\n// @log: Output: 0x6352211e\n```\n\n----------------------------------------\n\nTITLE: Using To Parameter in Call Action\nDESCRIPTION: Example of specifying the to parameter when making a call. This parameter represents the contract address or recipient of the call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Transport Parameters\nDESCRIPTION: Various configuration examples including batch size, wait time, fetch options, and other transport parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://1.rpc.thirdweb.com/...', {\n  batch: {\n    batchSize: 2_000\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://1.rpc.thirdweb.com/...', {\n  fetchOptions: {\n    headers: {\n      'Authorization': 'Bearer ...'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for L2 Actions with zksync Chain\nDESCRIPTION: Setup for creating a public client with zksync chain configuration and extending it with L2-specific public actions to enable L2-specific methods like getBaseTokenL1Address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBaseTokenL1Address.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Setting Bytecode for Account Address in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `setCode` function from a test client to modify the bytecode stored at a specific account address. It requires a pre-configured test client and takes an address and bytecode as parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setCode.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setCode({\n  address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n  bytecode: '0x60806040526000600355600019600955600c80546001600160a01b031916737a250d5630b4cf539739df...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Pending Transaction Filter with Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a pending transaction filter using the publicClient from Viem. The filter can be used with getFilterChanges to listen for new pending transaction hashes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createPendingTransactionFilter.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createPendingTransactionFilter()\n// @log: Output: { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n```\n\n----------------------------------------\n\nTITLE: Account Hoisted Transaction Request\nDESCRIPTION: Demonstrates preparing a transaction request with the account hoisted on the wallet client instead of passing it directly.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = await walletClient.prepareTransactionRequest({\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating L1 Fee for L2 Transaction using viem\nDESCRIPTION: This snippet demonstrates how to use the estimateL1Fee function from the viem library to estimate the L1 data fee for an L2 transaction. It includes the main function call and a configuration setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateL1Fee.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst fee = await publicClient.estimateL1Fee({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Generating Random Private Keys in TypeScript\nDESCRIPTION: Shows how to generate a random private key using the generatePrivateKey function from viem/accounts, which can then be used with privateKeyToAccount.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/privateKeyToAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generatePrivateKey } from 'viem/accounts'\n\nconst privateKey = generatePrivateKey()\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client with HTTP Transport\nDESCRIPTION: Example of creating a public client with HTTP transport configuration and mainnet chain specification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http('https://1.rpc.thirdweb.com/...'),\n})\n```\n\n----------------------------------------\n\nTITLE: Sponsoring User Operations with Paymaster Client in Viem (Bundler Client)\nDESCRIPTION: This snippet demonstrates how to create a Paymaster client and use it with a Bundler client to sponsor User Operation fees. It uses Pimlico's Paymaster API and sends a user operation to transfer Ether.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { \n  createBundlerClient, \n  createPaymasterClient,\n} from 'viem/account-abstraction'\nimport { account, client } from './config.ts'\n\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://public.pimlico.io/v2/11155111/rpc'),\n})\n\nconst bundlerClient = createBundlerClient({\n  account,\n  client,\n  paymaster: paymasterClient,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n\nconst hash = await bundlerClient.sendUserOperation({\n  calls: [{\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n    value: parseEther('0.001')\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details with ZkSync in Viem\nDESCRIPTION: Demonstrates how to fetch transaction details using the getTransactionDetails method from a viem public client configured for ZkSync. The function takes a transaction hash and returns the transaction details.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getTransactionDetails.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst details = await client.getTransactionDetails({\n  txHash: '0x...'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Celo Chain\nDESCRIPTION: Demonstrates how to define a custom Celo chain using Viem's chainConfig and defineChain utility, inheriting Celo's formatters and serializers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/celo.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from 'viem'\nimport { chainConfig } from 'viem/celo'\n\nexport const celoExample = defineChain({\n  ...chainConfig,\n  name: 'Celo Example',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Test Client with Additional Actions\nDESCRIPTION: Demonstrates how to extend the test client with public and wallet actions for broader functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http, publicActions, walletActions } from 'viem'\nimport { foundry } from 'viem/chains'\n\nconst client = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n  .extend(publicActions)\n  .extend(walletActions)\n\nconst blockNumber = await client.getBlockNumber()\nconst hash = await client.sendTransaction({ ... })\nconst mine = await client.mine({ blocks: 1 })\n```\n\n----------------------------------------\n\nTITLE: Decoding a Struct from Contract Output\nDESCRIPTION: Example showing how to decode a struct containing uint256, bool, and address fields from contract output.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { abi } from './abi'\n\nconst values = decodeAbiParameters(\n  abi[0].outputs,\n  '0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n)\n// { x: 420n, y: true, z: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC' }\n```\n\n----------------------------------------\n\nTITLE: Address-Scoped Event Watching\nDESCRIPTION: Example of watching events from a specific contract address using watchEvent\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchEvent({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring User Operation Fee Estimation for Bundler Client in TypeScript\nDESCRIPTION: This code snippet shows how to configure the User Operation fee estimation when creating a Bundler Client. It includes an async function that estimates the maxFeePerGas and maxPriorityFeePerGas for a User Operation request.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundlerClient = createBundlerClient({\n  chain: mainnet,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n  userOperation: { // [!code focus]\n    async estimateFeesPerGas({ account, bundlerClient, userOperation }) { // [!code focus]\n      // Estimate fees per gas for the User Operation. // [!code focus]\n      return { // [!code focus]\n        maxFeePerGas: /* ... */, // [!code focus]\n        maxPriorityFeePerGas: /* ... */, // [!code focus]\n      } // [!code focus]\n    } // [!code focus]\n  } // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Chain for ZKSync Deposit Operation\nDESCRIPTION: Example demonstrating how to specify the target chain for a deposit operation. This ensures the transaction is sent to the correct network and prevents errors from chain mismatches.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zksync } from 'viem/chains' // [!code focus]\n\nconst hash = await walletClient.deposit({\n  chain: zksync, // [!code focus]\n  client: zksyncClient,\n  token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',\n  amount: 20n,\n  to: walletClient.account.address,\n  approveToken: true,\n  refundRecipient: walletClient.account.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Bundler Client as a Paymaster\nDESCRIPTION: Demonstrates how to configure a Bundler Client to also act as a Paymaster by setting the paymaster parameter to true. This setup assumes the bundler endpoint supports paymaster RPC methods.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundlerClient = createBundlerClient({\n  chain: mainnet,\n  paymaster: true, // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting the commitments parameter in commitmentsToVersionedHashes\nDESCRIPTION: Demonstrates how to set the commitments parameter when converting blob commitments to versioned hashes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst blobs = toBlobs({ data: '0x1234' })\nconst commitments = blobsToCommitments({ blobs, kzg })\nconst versionedHashes = commitmentsToVersionedHashes({ \n  commitments,  \n  kzg, \n})\n```\n\n----------------------------------------\n\nTITLE: Using getTimeToFinalize for OP Stack Withdrawals in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getTimeToFinalize function to retrieve the time until a withdrawal transaction can be finalized. It includes setting up the necessary clients and retrieving the withdrawal information.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToFinalize.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst receipt = await publicClientL2.getTransactionReceipt({\n  hash: '0x9a2f4283636ddeb9ac32382961b22c177c9e86dd3b283735c154f897b1a7ff4a',\n})\n\nconst [message] = getWithdrawals(receipt)\n\nconst {\n  period,\n  seconds,\n  timestamp,\n} = await publicClientL1.getTimeToFinalize({\n  withdrawalHash: message.withdrawalHash,\n  targetChain: optimism\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Keys for getProof in TypeScript\nDESCRIPTION: This example demonstrates how to specify the storage keys when calling the getProof function. The storageKeys parameter is an array of Hash values representing the storage keys to be proved and included in the result.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getProof.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst proof = await publicClient.getProof({\n  address: '0x4200000000000000000000000000000000000016',\n  storageKeys: [ // [!code focus:3]\n    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n  ],\n  blockNumber: 42069n\n})\n```\n\n----------------------------------------\n\nTITLE: Filtered Contract Event Watching\nDESCRIPTION: Example of watching contract events with specific argument filtering for the Transfer event.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\nimport { wagmiAbi } from './abi'\n\nconst unwatch = publicClient.watchContractEvent({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  eventName: 'Transfer',\n  args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding Error Result with Full ABI Example\nDESCRIPTION: Demonstrates how to encode an error result using a complete contract ABI with explicit error name specification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeErrorResult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeErrorResult } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst value = encodeErrorResult({\n  abi: wagmiAbi,\n  errorName: 'InvalidTokenError',\n  args: ['sold out']\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting Wallet Capabilities with getCapabilities in viem\nDESCRIPTION: Demonstrates how to use getCapabilities to extract wallet capabilities grouped by chain ID. The example shows calling getCapabilities with an account parameter and the structure of the returned capabilities object.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\n \nconst capabilities = await walletClient.getCapabilities({\n  account,\n})\n// @log: {\n// @log:   8453: {\n// @log:      paymasterService: {\n// @log:        supported: true,\n// @log:      },\n// @log:      sessionKeys: {\n// @log:        supported: true,\n// @log:      },\n// @log:    },\n// @log:    84532: {\n// @log:       paymasterService: {\n// @log:         supported: true,\n// @log:       },\n// @log:    },\n// @log: }\n```\n\n----------------------------------------\n\nTITLE: Explicit Chain ID and Nonce Authorization Signing\nDESCRIPTION: Example of signing an authorization with explicitly specified chain ID and nonce values for more precise control.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/signAuthorization.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './client'\n\nconst eoa = privateKeyToAccount('0x...')\n \nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  chainId: 10,\n  nonce: 420,\n})\n\nconst hash = await walletClient.sendTransaction({\n  authorizationList: [authorization],\n  data: '0xdeadbeef',\n  to: eoa.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Chain ID using viem Public Client\nDESCRIPTION: Demonstrates how to retrieve the chain ID from the current Ethereum network using a viem public client. Returns a numeric chain ID value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getChainId.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst chainId = await publicClient.getChainId()\n```\n\n----------------------------------------\n\nTITLE: Using decodeFunctionResult Without functionName\nDESCRIPTION: Shows how to use decodeFunctionResult when the ABI contains only one item, making the functionName parameter optional.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionResult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionResult } from 'viem'\nimport { abiItem } from './abi.ts'\n\nconst value = decodeFunctionResult({\n  abi: [abiItem],\n  data: '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n})\n// '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Client with JSON-RPC Account in Viem\nDESCRIPTION: This snippet shows how to create a walletClient using Viem's createWalletClient function with a JSON-RPC account. It retrieves the account from an EIP-1193 Provider (window.ethereum) and sets up a custom transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTransactionAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Using parseEther Function to Convert Ether to Wei in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the parseEther function to convert a string representation of ether ('420') to numerical wei. The result is a bigint value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseEther.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\n\nparseEther('420') // [!code focus:2]\n// 420000000000000000000n\n```\n\n----------------------------------------\n\nTITLE: Event Filter with Multiple Arguments\nDESCRIPTION: Example of creating an event filter with multiple indexed arguments including array-based filtering.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = await publicClient.createContractEventFilter({\n  abi: wagmiAbi,\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n  eventName: 'Transfer',\n  args: {\n    from: [\n      '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', \n      '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n      '0xa152f8bb749c55e9943a3a0a3111d18ee2b3f94e',\n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Unsigned Transaction Example\nDESCRIPTION: Demonstrates how to send a basic unsigned transaction using the test client with required parameters like from, to, and value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/sendUnsignedTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await testClient.sendUnsignedTransaction({\n  from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Call User Operation Preparation\nDESCRIPTION: Demonstrates how to prepare a User Operation for contract interaction using ABI and function name specification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { bundlerClient, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst userOperation = await bundlerClient.prepareUserOperation({\n  calls: [{\n    abi: wagmiAbi,\n    functionName: 'mint',\n    to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Total Gas for an L2 Transaction in viem\nDESCRIPTION: Example of using the estimateTotalGas function from viem's OP Stack module to calculate the combined L1 data gas and L2 execution gas for a transaction on Base network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateTotalGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst gas = await publicClient.estimateTotalGas({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Data Suffix in TypeScript\nDESCRIPTION: Shows how to append additional data to the calldata when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  dataSuffix: '0xdeadbeef'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client in TypeScript\nDESCRIPTION: Shows how to create a public client using the createPublicClient function from viem. It sets up a client for the Ethereum mainnet using HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateFeesPerGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing extractTransactionDepositedLogs Function - TypeScript\nDESCRIPTION: Shows how to import the extractTransactionDepositedLogs function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractTransactionDepositedLogs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractTransactionDepositedLogs } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Addresses using TypeScript and Viem\nDESCRIPTION: Demonstrates how to use the walletClient.getAddresses() method to fetch a list of account addresses owned by the wallet. Returns an array of checksummed Ethereum addresses.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/getAddresses.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './client'\n\nconst accounts = await walletClient.getAddresses()\n// ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Deployment with EIP712 Transaction in TypeScript\nDESCRIPTION: Demonstrates how to deploy a contract using the walletClient with basic configuration. Requires an ABI, account, and bytecode to function properly.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wagmiAbi } from './abi'\nimport { account, walletClient } from './config'\n\nconst hash = await walletClient.deployContract({\n  abi,\n  account,\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Sending with viem\nDESCRIPTION: Example showing how to send a basic transaction using wallet client with account details and value transfer.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/sendTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\n\nconst hash = await walletClient.sendTransaction({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n```\n\n----------------------------------------\n\nTITLE: Using commitmentToVersionedHash with blob data\nDESCRIPTION: Example showing how to transform a blob commitment to a versioned hash using the commitmentToVersionedHash function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentToVersionedHash.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  blobsToCommitments, \n  commitmentToVersionedHash, \n  toBlobs \n} from 'viem'\nimport { kzg } from './kzg'\n\nconst blobs = toBlobs({ data: '0x1234' })\nconst [commitment] = blobsToCommitments({ blobs, kzg })\nconst versionedHashes = commitmentToVersionedHash({  \n  commitment,  \n}) \n```\n\n----------------------------------------\n\nTITLE: Execute Function with Account Hoisting Example\nDESCRIPTION: Example showing how to use the execute function with account hoisting, where the account is set at the client level instead of being passed to each execute call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, client } from './config'\n \nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      data: '0xdeadbeef',\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying the domain parameter in wrapTypedDataSignature\nDESCRIPTION: Example demonstrating how to set the domain parameter in a wrapTypedDataSignature function call. The domain includes name, version, chainId, and verifyingContract properties.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = wrapTypedDataSignature({\n  domain: { \n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n  types,\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  verifierDomain: {\n    name: 'Smart Account',\n    version: '1',\n    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',\n    chainId: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Avalanche Chain to Wallet using viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the addChain method from a walletClient to add the Avalanche chain to a wallet. It imports the avalanche chain from viem/chains and uses a pre-configured walletClient.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/addChain.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { avalanche } from 'viem/chains'\nimport { walletClient } from './client'\n \nawait walletClient.addChain({ chain: avalanche })\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting with JSON-RPC for OP Stack Transactions\nDESCRIPTION: Shows how to hoist the account at the client level with JSON-RPC accounts to avoid passing the account to every deposit transaction call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, createPublicClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Setting Paymaster Data in User Operation with TypeScript\nDESCRIPTION: This snippet illustrates how to include paymaster data when preparing a user operation. It shows setting the paymaster address and providing specific paymaster data as a hexadecimal string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperation = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n  paymasterData: '0xdeadbeef', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Slot Value with viem\nDESCRIPTION: Example showing how to retrieve a value from a storage slot using the getStorageAt method from a public client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getStorageAt.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toHex } from 'viem'\nimport { wagmiAbi } from './abi'\nimport { publicClient } from './client'\n\nconst data = await publicClient.getStorageAt({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  slot: toHex(0)\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Function Data in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.decodeFunctionData to decode function call data. This extracts the function name and arguments from transaction data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst result = iface.decodeFunctionData('transferFrom', '0x23b872dd0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c0000000000000000000000000000000000000000000000000de0b6b3a7640000');\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client for OP Stack L1 Transactions\nDESCRIPTION: Shows how to configure a wallet client with L1 wallet actions for deposit transactions. Demonstrates setup with both JSON-RPC and local private key accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client in viem\nDESCRIPTION: This snippet shows the configuration of a wallet client using viem, which is imported in the previous example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const client = createWalletClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting Configuration\nDESCRIPTION: Shows how to configure clients with hoisted accounts for both JSON-RPC and Local Account scenarios\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/initiateWithdrawal.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, createPublicClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, walletActionsL2 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL2 = createWalletClient({\n  account,\n  chain: optimism,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Struct ABI Definition for Decoding\nDESCRIPTION: The ABI definition used for the struct decoding example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const abi = [\n  {\n    name: 'staticStruct',\n    outputs: [\n      {\n        components: [\n          {\n            name: 'x',\n            type: 'uint256',\n          },\n          {\n            name: 'y',\n            type: 'bool',\n          },\n          {\n            name: 'z',\n            type: 'address',\n          },\n        ],\n        name: 'foo',\n        type: 'tuple',\n      },\n    ],\n  }\n] as const\n```\n\n----------------------------------------\n\nTITLE: Using recoverAddress with Hash Parameter in TypeScript\nDESCRIPTION: Example demonstrating the hash parameter in the recoverAddress function. The hash parameter is a string representing the hash that was signed.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await recoverAddress({ \n  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68', \n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Event Log Parsing with Event Name Filter\nDESCRIPTION: Example demonstrating how to filter logs by specific event names using the eventName parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst logs = parseEventLogs({ \n  abi: erc20Abi, \n  eventName: 'Transfer',\n  logs: receipt.logs,\n})\n```\n\n----------------------------------------\n\nTITLE: Serializing a Transaction with Signature\nDESCRIPTION: Shows how to serialize a transaction with an optional signature. The signature includes r, s, and yParity values.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst serialized = serializeTransaction({\n  chainId: 1,\n  gas: 21001n,\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  nonce: 69,\n  to: '0x1234512345123451234512345123451234512345',\n  value: parseEther('0.01'),\n}, { // [!code focus:5]\n  r: '0x123451234512345123451234512345123451234512345123451234512345',\n  s: '0x123451234512345123451234512345123451234512345123451234512345',\n  yParity: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Contract ABI Definition\nDESCRIPTION: Definition of the contract ABI including the constructor parameters used for decoding the deploy data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeDeployData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [\n      {\n        name: 'a',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for L1 and L2 Clients in viem\nDESCRIPTION: Configuration for setting up public and wallet clients for both L1 and L2 chains using viem. This includes creating clients for Ethereum (L1) and Optimism (L2), extending them with OP Stack-specific actions, and configuring the account to use for transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL1 = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Using getWithdrawalStatus in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getWithdrawalStatus function to check the status of a withdrawal. It retrieves a transaction receipt from L2 and then checks its status on L1.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getWithdrawalStatus.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst receipt = await publicClientL2.getTransactionReceipt({\n  hash: '0x7b5cedccfaf9abe6ce3d07982f57bcb9176313b019ff0fc602a0b70342fe3147'\n})\n\nconst status = await publicClientL1.getWithdrawalStatus({\n  receipt,\n  targetChain: publicClientL2.chain,\n})\n// \"ready-to-prove\"\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Write Example\nDESCRIPTION: Basic example of writing to a contract using walletClient with required parameters including account, address, ABI and function name.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/writeContract.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.writeContract({\n  account,\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling Interval for Paymaster Client\nDESCRIPTION: Setting a custom polling interval for the Paymaster Client. The pollingInterval parameter defines the frequency in milliseconds for polling enabled Actions, with a default of 4000ms.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPaymasterClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\n\nconst client = createPaymasterClient({\n  pollingInterval: 10_000,\n  transport: http('https://public.pimlico.io/v2/11155111/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Executing EIP-7702 Transaction in TypeScript\nDESCRIPTION: This snippet demonstrates the full process of executing an EIP-7702 Transaction, including authorizing the contract designation, designating the contract on the EOA, and invoking the 'initialize' function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { walletClient } from './config'\nimport { abi, contractAddress } from './contract'\n\nconst eoa = privateKeyToAccount('0x...')\n\n// 1. Authorize designation of the Contract onto the EOA.\nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  contractAddress,\n})\n\n// 2. Designate the Contract on the EOA, and invoke the \n//    `initialize` function.\nconst hash = await walletClient.sendTransaction({\n  authorizationList: [authorization],\n  //                  ↑ 3. Pass the Authorization as a parameter.\n  data: encodeFunctionData({\n    abi,\n    functionName: 'initialize',\n  }),\n  to: eoa.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Human Readable Parameters with parseAbiParameters\nDESCRIPTION: Shows how to use decodeAbiParameters with human-readable ABI parameters using the parseAbiParameters utility.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeAbiParameters, parseAbiParameters } from 'viem'\n\nconst values = decodeAbiParameters(\n  parseAbiParameters('string x, uint y, bool z'),\n  '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000'\n)\n// ['wagmi', 420n, true]\n```\n\n----------------------------------------\n\nTITLE: Extending Viem Client with ERC-7739 Actions in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend a Viem wallet client with experimental ERC-7739 actions. It imports the required dependencies, creates a wallet client connected to the Ethereum mainnet, and then extends it with ERC-7739 functionality which can be used for operations like message signing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/client.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { erc7739Actions } from 'viem/experimental' // [!code focus]\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(erc7739Actions()) // [!code focus]\n\nconst id = await walletClient.signMessage({/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Recovering Ethereum Address from Hash and Signature using Viem in TypeScript\nDESCRIPTION: Example of using the recoverAddress function from the Viem library to recover the original signing Ethereum address from a hash and its corresponding signature. The function returns the address as a string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { recoverAddress } from 'viem'\n \nconst address = await recoverAddress({\n  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'\n})\n// 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\n```\n\n----------------------------------------\n\nTITLE: Using parseSignature Function to Parse Hex Signature in TypeScript\nDESCRIPTION: Demonstrates how to use the parseSignature function to convert a hex formatted signature into a structured signature object. The function returns an object with r, s, and yParity properties.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseSignature } from 'viem'\n\nparseSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c') // [!code focus:8]\n/**\n * {\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   yParity: 1\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Creating Test Client for Viem in TypeScript\nDESCRIPTION: This snippet shows how to create a test client using Viem library. The client is configured to use the Foundry chain and Anvil mode with HTTP transport. This client can be used to interact with the blockchain, including using the dumpState function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/dumpState.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Using keccak256 with different input types\nDESCRIPTION: Demonstrates how to use the keccak256 function with different types of input: Uint8Array (byte array), hex string, and UTF-8 string converted to hex. Each example shows the expected output hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/keccak256.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { keccak256 } from 'viem'\n\nkeccak256(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n// 0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0\n\nkeccak256('0xdeadbeef')\n// 0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1\n\n// hash utf-8 string\nkeccak256(toHex('hello world'))\n// 0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0\n```\n\n----------------------------------------\n\nTITLE: Executing Deposit Transaction on Ethereum Mainnet\nDESCRIPTION: This code snippet shows how to execute the deposit transaction on Ethereum Mainnet using the walletClientL1. It uses the previously built transaction parameters to initiate the deposit.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Viem Clients.\nimport { account, publicClientL2, walletClientL1 } from './config'\n\n// Build parameters for the transaction on the L2.\nconst args = await publicClientL2.buildDepositTransaction({\n  mint: parseEther('1'),\n  to: account.address,\n})\n\n// Execute the deposit transaction on the L1.\nconst hash = await walletClientL1.depositTransaction(args)\n```\n\n----------------------------------------\n\nTITLE: Basic Authorization Signing in TypeScript\nDESCRIPTION: Demonstrates how to sign a basic EIP-7702 Authorization using a wallet client and private key account. The authorization is then used in a transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/signAuthorization.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { walletClient } from './client'\n\nconst eoa = privateKeyToAccount('0x...')\n \nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n})\n\nconst hash = await walletClient.sendTransaction({\n  authorizationList: [authorization],\n  data: '0xdeadbeef',\n  to: eoa.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Bundler Client Setup\nDESCRIPTION: Creating a bundler client for submitting User Operations to the blockchain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst bundlerClient = createBundlerClient({\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client with WebSocket Transport\nDESCRIPTION: Example of creating a public client with WebSocket transport configuration for mainnet chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, webSocket } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet, \n  transport: webSocket('wss://1.rpc.thirdweb.com/...'),\n})\n```\n\n----------------------------------------\n\nTITLE: Event Filter with Address Scope\nDESCRIPTION: Creating an event filter scoped to a specific contract address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = await publicClient.createContractEventFilter({\n  abi: wagmiAbi,\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2'\n})\n```\n\n----------------------------------------\n\nTITLE: TypedData Type Definitions\nDESCRIPTION: Defines the domain and types structure for the typed data signing. Includes Person and Mail type definitions with their respective fields.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTypedData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n \n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Serializing ZKsync Transactions\nDESCRIPTION: Example of serializing a ZKsync transaction with EIP-712 support, including paymaster functionality. Demonstrates usage of the serializeTransaction utility.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/zksync.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeTransaction } from 'viem/zksync'\n\nconst serialized = serializeTransaction({\n  chainId: 1,\n  gas: 21001n,\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  nonce: 69,\n  paymaster: '0x4B5DF730c2e6b28E17013A1485E5d9BC41Efe021',\n  paymasterInput: '0x8c5a344500000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000',\n  to: '0x1234512345123451234512345123451234512345',\n  type: 'eip712',\n  value: parseEther('0.01')\n})\n```\n\n----------------------------------------\n\nTITLE: Impersonating Account Using TestClient in Viem\nDESCRIPTION: Example showing how to impersonate an Ethereum account using the testClient. This allows sending transactions from an account without having its private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/impersonateAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.impersonateAccount({\n  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding Error Result without ErrorName\nDESCRIPTION: Shows how to encode an error result when working with a single ABI item, where errorName becomes optional.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeErrorResult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeErrorResult } from 'viem'\n\nconst abiItem = {\n  inputs: [{ name: 'reason', type: 'string' }],\n  name: 'InvalidTokenError',\n  type: 'error'\n}\n\nconst value = encodeErrorResult({\n  abi: [abiItem],\n  args: ['sold out']\n})\n```\n\n----------------------------------------\n\nTITLE: Inspecting Transaction Pool using Viem TestClient\nDESCRIPTION: Example of how to use the inspectTxpool method to get information about pending transactions. The code demonstrates creating a test client and using it to fetch transaction pool data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/inspectTxpool.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nconst data = await testClient.inspectTxpool()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Basic Block Retrieval in TypeScript\nDESCRIPTION: Basic example of retrieving block information using the publicClient.getBlock() method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst block = await publicClient.getBlock()\n```\n\n----------------------------------------\n\nTITLE: Defining message parameter in wrapTypedDataSignature\nDESCRIPTION: Example showing how to structure the message parameter in wrapTypedDataSignature. The message contains the actual data being signed according to the type structure defined in types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = wrapTypedDataSignature({\n  domain,\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail', \n  message: { \n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  verifierDomain: {\n    name: 'Smart Account',\n    version: '1',\n    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',\n    chainId: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting maxPriorityFeePerGas for EIP-1559 Transactions in viem\nDESCRIPTION: Example demonstrating how to set the maxPriorityFeePerGas parameter when writing to a contract. This parameter defines the max priority fee per gas in wei and only applies to EIP-1559 transactions, working together with maxFeePerGas to determine the total transaction fee.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait walletClient.writeContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing ABI Data in Viem\nDESCRIPTION: Demonstrates how to parse ABI data using the parseAbi function in viem. This function takes an array of function and event signatures and converts them into a structured ABI format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\n\nconst json = parseAbi([\n  'constructor(string symbol, string name)',\n  'function transferFrom(address from, address to, uint amount)',\n  'function transferFrom(address from, address to, uint amount, bool x)',\n  'function mint(uint amount) payable',\n  'function balanceOf(address owner) view returns (uint)',\n  'event Transfer(address indexed from, address indexed to, uint256 amount)'\n])\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Local Account in TypeScript\nDESCRIPTION: Demonstrates how to sign a transaction using a local account's private key. It includes setting up the account and specifying transaction parameters like chainId, gas fees, and recipient address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst account = privateKeyToAccount('0x...')\n\nconst signature = await account.signTransaction({\n  chainId: 1,\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('3'),\n  gas: 21000n,\n  nonce: 69,\n  to: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n})\n// @log: Output: \"0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33\"\n```\n\n----------------------------------------\n\nTITLE: Using getL2HashFromPriorityOp to get L2 hash from L1 receipt\nDESCRIPTION: Demonstrates how to use the getL2HashFromPriorityOp function to retrieve the L2 hash from an L1 transaction receipt. It first waits for the transaction receipt and then uses it alongside the main contract address to get the L2 hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client, zksyncClient } from './config'\nimport { getL2HashFromPriorityOp } from 'viem/zksync'\n\nconst receipt = await client.waitForTransactionReceipt({\n  hash: '0x...'\n})\nconst l2Hash = getL2HashFromPriorityOp(\n  receipt,\n  await zksyncClient.getMainContractAddress()\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Client with ERC-7821 Support\nDESCRIPTION: Configuration setup for creating a Viem client with ERC-7821 actions enabled. Demonstrates how to initialize the client with mainnet connection and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/supportsExecutionMode.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { erc7821Actions } from 'viem/experimental'\n\nexport const client = createClient({\n  chain: mainnet,\n  transport: http(),\n}).extend(erc7821Actions())\n```\n\n----------------------------------------\n\nTITLE: Providing the signature parameter in wrapTypedDataSignature\nDESCRIPTION: Example showing how to provide the signature parameter to wrapTypedDataSignature. This is the EIP-712 typed data signature that will be wrapped into the ERC-7739 format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = wrapTypedDataSignature({\n  domain,\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail', \n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  signature: '0x...', \n})\n```\n\n----------------------------------------\n\nTITLE: Using GasPrice Parameter in Call Action\nDESCRIPTION: Example of specifying the gasPrice parameter when making a call. This parameter sets the price in wei to pay per gas and only applies to Legacy Transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\n\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  gasPrice: parseGwei('20'), // [!code focus]\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Permissions using walletClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getPermissions method of the walletClient to retrieve the current permissions of a wallet. The permissions are stored in the 'permissions' variable.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/getPermissions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './client'\n\nconst permissions = await walletClient.getPermissions()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Allowance in getApprovalBasedPaymasterInput\nDESCRIPTION: Demonstrates how to set the minAllowance parameter, which represents the minimum allowance of token that can be sent towards the paymaster.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getApprovalBasedPaymasterInput.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = getApprovalBasedPaymasterInput({\n  innerInput: new Uint8Array(),\n  minAllowance: 1n, // [!code focus]\n  token: \"0x65C899B5fb8Eb9ae4da51D67E1fc417c7CB7e964\",\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Gas Estimation with Arguments\nDESCRIPTION: Example demonstrating how to estimate gas for a contract function that accepts arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/estimateContractGas.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst gas = await publicClient.estimateContractGas({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  account,\n})\n// 69420n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Count Example - TypeScript\nDESCRIPTION: Basic example showing how to get the transaction count for an Ethereum address using the publicClient.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionCount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst transactionCount = await publicClient.getTransactionCount({\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport with Method Filtering\nDESCRIPTION: Configuring specific RPC methods to include in the WebSocket transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', {\n  methods: {\n    include: ['eth_sendTransaction', 'eth_signTypedData_v4'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Message Recovery with UTF-8 Representation in viem\nDESCRIPTION: This code snippet demonstrates how to recover an address from a message using the default UTF-8 representation. It specifies the message as a string and provides the corresponding signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await recoverMessageAddress({ \n  message: 'hello world', \n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Client with Basic Configuration\nDESCRIPTION: Creates a test client instance with foundry chain, anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nconst client = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Client with Fallback Transport in TypeScript\nDESCRIPTION: This example demonstrates how to create a public client using the fallback transport with multiple HTTP providers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, fallback, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: fallback([\n    http('https://1.rpc.thirdweb.com/...'),\n    http('https://mainnet.infura.io/v3/...')\n  ]),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring baseFeeMultiplier in Viem Chain Definition (TypeScript)\nDESCRIPTION: This code snippet shows how to set the baseFeeMultiplier in a chain definition. It can be set as a static value or as an async function that calculates the multiplier based on the latest block and transaction request.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/fees.md#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineChain } from 'viem'\n\nconst example = defineChain({ \n  /* ... */\n  fees: { \n    baseFeeMultiplier: 1.2,\n    // or\n    async baseFeeMultiplier({ block, request }) {\n      // some async work\n      return // ...\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using nonce Parameter in depositTransaction (TypeScript)\nDESCRIPTION: Example showing how to specify a transaction nonce when making an L1 to L2 deposit with the depositTransaction function. The nonce parameter provides a unique identifier for the transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.depositTransaction({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  nonce: 69, // [!code focus]\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for a Specific Block Number in TypeScript\nDESCRIPTION: Demonstrates how to estimate gas for a transaction at a specific block number using viem's estimateGas function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await publicClient.estimateGas({\n  blockNumber: 15121123n,\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1') \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients for OP Stack in TypeScript\nDESCRIPTION: Configuration setup for creating public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains using viem. The L1 client is extended with OP Stack-specific public actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextGame.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting for Deposit Transactions in TypeScript\nDESCRIPTION: Demonstrates how to hoist an account on the wallet client to avoid passing it in every buildDepositTransaction call. Includes examples for both JSON-RPC and Local accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildDepositTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClientL2, walletClientL1 } from './config'\n\nconst args = await publicClientL2.buildDepositTransaction({\n  mint: parseEther('1')\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n \nconst hash = await walletClientL1.depositTransaction(args)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Using getTimeToNextGame in viem with OP Stack\nDESCRIPTION: Example showing how to use the getTimeToNextGame action to retrieve timing information about the next dispute game on an OP Stack chain with fault proofs enabled.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToNextGame.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst l2BlockNumber = publicClientL2.getBlockNumber()\n\nconst {\n  interval,\n  seconds,\n  timestamp\n} = await publicClientL1.getTimeToNextGame({\n  l2BlockNumber,\n  targetChain: publicClientL2.chain,\n})\n```\n\n----------------------------------------\n\nTITLE: Using toEventSignature Function\nDESCRIPTION: Demonstrates two ways to generate event signatures: using a string event definition and using an AbiEvent object structure. Both approaches generate the same signature output for a Transfer event.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toEventSignature } from 'viem'\n\n// from event definition\nconst signature_1 = toEventSignature('event Transfer(address indexed from, address indexed to, uint256 amount)')\n// @log: Output: Transfer(address,address,uint256)\n\n// from an `AbiEvent` on your contract ABI\nconst signature_2 = toEventSignature({\n  name: 'Transfer',\n  type: 'event',\n  inputs: [\n    { name: 'address', type: 'address', indexed: true },\n    { name: 'address', type: 'address', indexed: true },\n    { name: 'uint256', type: 'uint256', indexed: false },\n  ],\n})\n// @log: Output: Transfer(address,address,uint256)\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Receipt Retrieval in TypeScript\nDESCRIPTION: Example showing basic usage of waitForTransactionReceipt to retrieve a transaction receipt\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst transaction = await publicClient.waitForTransactionReceipt(\n  { hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d' }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients with JSON-RPC Account Hoisting\nDESCRIPTION: Configuration setup showing how to hoist a JSON-RPC account at the wallet client level. This example retrieves an account from an EIP-1193 provider and attaches it to the wallet client during initialization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildProveWithdrawal.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Retrieving L1 Batch Details in ZKSync with Viem\nDESCRIPTION: Example showing how to retrieve details for a specific L1 batch from the ZKSync network using the getL1BatchDetails function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchDetails.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst batchDetails = await client.getL1BatchDetails({\n  number: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Importing parseAbiItem from viem\nDESCRIPTION: Shows how to import the parseAbiItem function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiItem.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Partial Decode with decodeEventLog\nDESCRIPTION: Illustrates how to use the strict parameter to allow partial decoding of event logs when there's a mismatch in data size.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeEventLog.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndecodeEventLog({\n  abi: parseAbi(['event Transfer(address indexed, address, uint256)']),\n  data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n  topics: [\n    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  ],\n  strict: false\n})\n/**\n * {\n *   eventName: 'Transfer',\n *   args: ['0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266']\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Calling Contracts on ZKsync\nDESCRIPTION: Shows how to simulate and execute a contract call on ZKsync. This example mints an NFT by simulating the transaction first with the public client, then executing it with the wallet client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from 'viem/contract'\n\nconst { request } = await publicClient.simulateContract(walletClient, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n  functionName: 'mint',\n  args: [69420],\n});\nconst hash = await walletClient.writeContract(request)\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Max Priority Fee for EIP-1559 Transactions in TypeScript\nDESCRIPTION: Shows how to set both maxFeePerGas and maxPriorityFeePerGas for EIP-1559 transactions when estimating gas using viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await publicClient.estimateGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Serializer with Signature in Viem\nDESCRIPTION: This snippet shows a more detailed implementation of a transaction serializer in Viem. It highlights the `serializers.transaction` property within the chain definition, demonstrating how to handle both the transaction and its signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/serializers.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain, serializeTransaction } from 'viem'\n\nconst example = defineChain({\n  /* ... */\n  serializers: { // [!code focus:5]\n    transaction(transaction, signature) {\n      return serializeTransaction(transaction, signature)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping a Transaction from Mempool using Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the dropTransaction method from a testClient to remove a transaction from the mempool. It requires a transaction hash as a parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/dropTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.dropTransaction({\n  hash: '0xe58dceb6b20b03965bb678e27d141e151d7d4efc2334c2d6a49b9fac523f7364'\n})\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Access List in TypeScript\nDESCRIPTION: Demonstrates how to include an access list when signing a transaction. The access list specifies addresses and storage keys that the transaction plans to access.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\nconst account = privateKeyToAccount('0x...')\n// ---cut---\nconst signature = await account.signTransaction({\n  accessList: [ // [!code focus:6]\n    {\n      address: '0x1',\n      storageKeys: ['0x1'],\n    },\n  ],\n  chainId: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Permission Type Example\nDESCRIPTION: Example demonstrating how to use custom permission types as an escape hatch.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/grantPermissions.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await walletClient.grantPermissions({\n  account,\n  expiry: 1716846083638,\n  permissions: [\n    { \n      type: { custom: 'example' },\n      data: {\n        value: '0xdeadbeef',\n      }\n    } \n  ], \n})\n```\n\n----------------------------------------\n\nTITLE: Parsing Deposit Transaction in Viem\nDESCRIPTION: Shows how to use the parseTransaction function to parse a deposit transaction (0x7e-prefixed) in the OP Stack context.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/parseTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseTransaction } from 'viem'\n\nconst transaction = parseTransaction('0x7ef83ca018040f35752170c3339ddcd850f185c9cc46bdef4d6e1f2ab323f4d3d710431994977f82a600a1414e583f7f13623f1ac5d58b1c0b808080808080')\n```\n\n----------------------------------------\n\nTITLE: Setting transaction nonce in viem contract calls\nDESCRIPTION: Example showing how to set a custom nonce parameter when writing to a contract. The nonce is a unique number that identifies this transaction and can be used to replace pending transactions or ensure transaction ordering.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait walletClient.writeContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  nonce: 69 // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from JsonRpcSigner to createWalletClient with account in viem\nDESCRIPTION: Shows how to replace Ethers' JsonRpcSigner with viem's createWalletClient using an explicit account. viem uses the term 'Account' rather than 'Signer'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.Web3Provider(window.ethereum)\n\nconst [address] = await provider.listAccounts() // [!code hl]\nconst signer = provider.getSigner(address) // [!code hl]\n\nsigner.sendTransaction({ ... })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst [account] = await window.ethereum.request({ method: 'eth_requestAccounts' }) // [!code hl]\n\nconst client = createWalletClient({\n  account, // [!code hl]\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\nclient.sendTransaction({ ... })\n```\n\n----------------------------------------\n\nTITLE: Basic watchAsset Usage with ERC20 Token\nDESCRIPTION: Example showing how to request tracking of a WETH token in a user's wallet using the watchAsset function. Returns a boolean indicating success.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst success = await walletClient.watchAsset({\n  type: 'ERC20',\n  options: {\n    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    decimals: 18,\n    symbol: 'WETH',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing ABI Fragments in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface to access specific functions and events from an ABI. This initializes an Interface object and retrieves function and event definitions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst interface = new utils.Interface(abi)\ninterface.getFunction('transferFrom')\ninterface.getEvent('Transfer')\n```\n\n----------------------------------------\n\nTITLE: Replacing assertChain parameter with chain: null\nDESCRIPTION: Shows how to migrate from the removed assertChain parameter to using chain: null when needing to bypass chain validation in sendTransaction, writeContract, or deployContract functions.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\nawait walletClient.sendTransaction({\n- assertChain: false,\n+ chain: null,\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Access List with Account Parameter\nDESCRIPTION: Demonstrates using the createAccessList function with an account address specified.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\n\nconst result = await publicClient.createAccessList({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xdeadbeef',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Optional Context Parameter in getPaymasterStubData in TypeScript\nDESCRIPTION: Example showing how to include paymaster-specific fields using the optional context parameter when calling getPaymasterStubData. This allows passing additional custom data needed by specific paymasters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  context: { \n    policyId: 'abc123', \n  }, \n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Max Priority Fee with Chain Override\nDESCRIPTION: Example demonstrating how to estimate max priority fee per gas with a specific chain override using the Optimism network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateMaxPriorityFeePerGas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\n\nconst maxPriorityFeePerGas = \n  await publicClient.estimateMaxPriorityFeePerGas({\n    chain: optimism\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Chain with Custom Fees in Viem (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the 'defineChain' function to create a custom chain with specified fee configurations. It sets a base fee multiplier and a default priority fee.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/fees.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineChain } from 'viem'\n\nexport const example = defineChain({\n  /* ... */\n  fees: { \n    baseFeeMultiplier: 1.2, \n    defaultPriorityFee: parseGwei('0.01'), \n  } \n})\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for viem Wallet Client in TypeScript\nDESCRIPTION: This configuration code shows how to set up a wallet client in viem. It demonstrates creating a wallet client with a custom transport and illustrates two ways to obtain an account: via JSON-RPC or by using a local private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const walletClient = createWalletClient({\n  transport: custom(window.ethereum)\n})\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Example Usage of grantPermissions\nDESCRIPTION: Example showing how to request native token transfer permissions with expiry and allowance policies.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/grantPermissions.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, walletClient } from './config'\n \nconst result = await walletClient.grantPermissions({\n  account,\n  expiry: 1716846083638,\n  permissions: [\n    {\n      type: 'native-token-transfer',\n      data: {\n        ticker: 'ETH',\n      },\n      policies: [\n        {\n          type: 'token-allowance',\n          data: {\n            allowance: parseEther('1'),\n          },\n        },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying SIWE Message in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the verifySiweMessage function to verify a signed EIP-4361 formatted message. It shows the basic usage with a public client, including the message and signature parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/actions/verifySiweMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await publicClient.verifySiweMessage({\n  message,\n  signature,\n})\n// @log: true\n```\n\n----------------------------------------\n\nTITLE: Using Custom Transport with Window Ethereum Provider\nDESCRIPTION: Shows how to create a wallet client using the custom transport with a window.ethereum provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Smart Account Creation with Account Hoisting\nDESCRIPTION: Example of creating a Smart Account and hoisting it to the bundler client for simplified operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http, parseEther } from 'viem'\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts' \n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst owner = privateKeyToAccount('0x...')\n\nconst account = await toCoinbaseSmartAccount({ \n  client, \n  owners: [owner]\n}) \n\nconst bundlerClient = createBundlerClient({\n  account,\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n\nconst hash = await bundlerClient.sendUserOperation({\n  calls: [{\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n    value: parseEther('0.001')\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Token Approval with Boolean Flag in ZKSync Deposit\nDESCRIPTION: Example of a deposit transaction with base token approval enabled via a boolean flag. This ensures the bridge has sufficient allowance before proceeding with the deposit operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.deposit({\n  client: zksyncClient,\n  token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',\n  amount: 20n,\n  to: walletClient.account.address,\n  approveBaseToken: true, // [!code focus],\n  refundRecipient: walletClient.account.address,\n  bridgeAddress: '0xFC073319977e314F251EAE6ae6bE76B0B3BAeeCF',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Public Client in viem\nDESCRIPTION: Creates a public client connected to the Ethereum mainnet using HTTP transport. This client is used to create event filters and interact with the blockchain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Arguments in TypeScript\nDESCRIPTION: Demonstrates how to pass arguments to a contract function when simulating a call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n  abi: wagmiAbi,\n  functionName: 'balanceOf',\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'],\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI with Custom Error in TypeScript\nDESCRIPTION: This snippet shows the definition of a contract ABI that includes a custom error named 'InvalidTokenError'. This ABI is used in conjunction with the decodeErrorResult function to properly decode error results.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeErrorResult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: \"reason\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tname: \"InvalidTokenError\",\n\t\ttype: \"error\"\n\t},\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Encoding Function Results in Viem\nDESCRIPTION: Demonstrates how to use viem's encodeFunctionResult function to encode function return values, equivalent to ethers.js Interface.encodeFunctionResult method with a different parameter structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionResult, parseEther } from 'viem'\nimport { abi } from './abi'\n\nconst data = encodeFunctionResult({\n  abi,\n  functionName: 'balanceOf',\n  value: ['0x8ba1f109551bD432803012645Ac136ddd64DBA72']\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Signing\nDESCRIPTION: Shows implementation of the signTransaction function for signing Ethereum transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toAccount({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  async signMessage({ message }) {\n    return signMessage({ message, privateKey })\n  },\n  async signTransaction(transaction, { serializer }) {\n    return signTransaction({ privateKey, transaction, serializer })\n  },\n  async signTypedData(typedData) {\n    return signTypedData({ ...typedData, privateKey })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for ZKsync in TypeScript\nDESCRIPTION: This snippet shows how to configure a viem public client for interacting with the ZKsync network. It sets up the client with the ZKsync chain, HTTP transport, and extends it with publicActionsL2 for L2-specific functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBlockDetails.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Hoisting JSON-RPC Account in Wallet Client\nDESCRIPTION: Shows how to hoist the account into the Wallet Client to avoid passing it to every action.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst [account] = await window.ethereum!.request({ method: 'eth_requestAccounts' })\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n})\n\nconst hash = await client.sendTransaction({\n  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('0.001')\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with State Override in TypeScript\nDESCRIPTION: Shows how to use state overrides when simulating a contract function call, which can be useful for testing purposes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  stateOverride: [\n    {\n      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n      balance: parseEther('1'),\n      stateDiff: [\n        {\n          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0',\n          value: '0x00000000000000000000000000000000000000000000000000000000000001a4',\n        },\n      ],\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using estimateFinalizeWithdrawalGas with OP Stack Withdrawals\nDESCRIPTION: Example of estimating gas required to finalize a withdrawal from Optimism to Ethereum L1. This snippet demonstrates calling the estimateFinalizeWithdrawalGas method with basic required parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateFinalizeWithdrawalGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1 } from './config'\n\nconst gas = await publicClientL1.estimateFinalizeWithdrawalGas({\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  targetChain: optimism,\n  withdrawal: { ... },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing parseGwei from viem\nDESCRIPTION: Shows how to import the parseGwei function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseGwei.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using getCapabilities with Account Hoisting in viem\nDESCRIPTION: Demonstrates how to use getCapabilities without passing an account parameter each time by hoisting the account on the wallet client instance.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n \nconst capabilities = await walletClient.getCapabilities()\n```\n\n----------------------------------------\n\nTITLE: Using Bundler Client with Paymaster in TypeScript\nDESCRIPTION: Demonstrates how to send a user operation with the Bundler Client using a paymaster. The paymaster is enabled by setting the 'paymaster' option to true.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: true, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining KZG Interface with c-kzg in TypeScript\nDESCRIPTION: Demonstrates how to use defineKzg with the c-kzg library to create a KZG interface. It includes loading the trusted setup and defining the KZG interface.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/defineKzg.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport * as cKzg from 'c-kzg'\nimport { defineKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\ncKzg.loadTrustedSetup(mainnetTrustedSetupPath)\n\nconst kzg = defineKzg(cKzg)\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch JSON-RPC Transport\nDESCRIPTION: Setting up HTTP transport with batch JSON-RPC enabled for multiple concurrent requests.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://1.rpc.thirdweb.com/...', {\n  batch: true\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Chain State Example\nDESCRIPTION: Example showing how to load a previously dumped chain state using the testClient.loadState method. The state is provided as a hex-encoded data blob.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/loadState.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.loadState({ state: '0x1f8b08000000000000ffad934d8e1c310885ef52eb5e003660e636184c3651b7949948915a7df7b8934ded6bbcc23fe2f3e3c1f3f088c7effbd7e7f1f13ce00ff60c35939e4e016352131bb3658bd0f046682dcd98dfafef8f7bace3036ec7f49ffe2fde190817da82b0e9933abcd7713be291ffaf77fcf9f5f8e53ff6f6f97addde4cced6dd8b3b89e6d4d468a2a3d93e537480fd15713933f12a73ebc2b106ae561c59bae1d152784733c067f1dc49479d987295d9a2f7c8cc296e00e534797026d94ed312a9bc93b5192726d155a882999a42300ea48ce680109a80936141a2be0d8f7182f6cb4a0d4a6d96ac49d16b2834e1a5836dd0c242c0b5751ac8d9d1cb4a4d65b97620594ac2dc77a159cbb9ab349f096fedee76828ecb4cdb20d044679e1124c6c1633a4acda639d026f81ea96f15eab0963a76ca3d2f81b58705fbea3e4a59761b11f8769ce0046d5799d5ac5216a37b8e51523d96f81c839476fb54d53422393bda94af505fafbf9d0612379c040000' })\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for L1 to L2 Execution with viem\nDESCRIPTION: This snippet demonstrates how to use the estimateGasL1ToL2 function to estimate gas for an L1 to L2 transaction. It includes setting up the client and making the estimation call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/estimateGasL1ToL2.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst gas = await client.estimateGasL1ToL2({\n  account: '0x636A122e48079f750d44d13E5b39804227E1467e',\n  to: '0xa61464658AfeAf65CccaaFD3a512b69A83B77618',\n  value: 0n\n});\n```\n\n----------------------------------------\n\nTITLE: Changing output format in commitmentsToVersionedHashes\nDESCRIPTION: Shows how to specify the output format (bytes) when converting commitments to versioned hashes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst blobs = toBlobs({ data: '0x1234' })\nconst commitments = blobsToCommitments({ blobs, kzg })\nconst versionedHashes = commitmentsToVersionedHashes({ \n  commitments, \n  to: 'bytes' \n})\nversionedHashes\n```\n\n----------------------------------------\n\nTITLE: Public Client Configuration with OP Stack Extensions\nDESCRIPTION: Shows how to set up the publicClientL1 with OP Stack extensions needed for cross-chain operations. Includes both JSON-RPC and local account examples.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\n// JSON-RPC Account\nexport const [account] = await publicClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring watchBlockNumber with WebSocket and Polling in TypeScript\nDESCRIPTION: Demonstrates how to use watchBlockNumber with a WebSocket transport and enable polling. This configuration allows for flexibility in how block numbers are monitored.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, webSocket } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst publicClient = createPublicClient({\n  chain: mainnet,\n  transport: webSocket()\n})\n\nconst unwatch = publicClient.watchBlockNumber(\n  { \n    onBlockNumber: blockNumber => console.log(blockNumber),\n    poll: true,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: ABI Decoding with Viem\nDESCRIPTION: Using Viem to decode ABI-encoded data. This demonstrates decoding with object parameters and with parsed human-readable parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeAbiParameters, parseAbiParameters } from 'viem'\n\n// Object\ndecodeAbiParameters(\n  [{ type: 'uint', name: 'x' }, { type: 'string', name: 'y' }],\n  '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000'\n)\n\n// Human Readable\ndecodeAbiParameters(\n  parseAbiParameters('uint, string'),\n  '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000'\n)\n```\n\n----------------------------------------\n\nTITLE: Importing hdKeyToAccount Function in TypeScript\nDESCRIPTION: How to import the HDKey and hdKeyToAccount function from viem accounts module. The function is used to create a Hierarchical Deterministic (HD) Account from an HD Key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HDKey, hdKeyToAccount } from 'viem/accounts'\n```\n\n----------------------------------------\n\nTITLE: Setting Up KZG for viem in TypeScript\nDESCRIPTION: Shows how to set up KZG (Kate-Zaverucha-Goldberg) for use with viem, including importing necessary modules and setting up the trusted setup path.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sidecarsToVersionedHashes.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n```\n\n----------------------------------------\n\nTITLE: Importing fromHex Function in TypeScript\nDESCRIPTION: Shows how to import the fromHex function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromHex } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Migrating from CloudflareProvider to createPublicClient in viem\nDESCRIPTION: Shows how to replace Ethers' CloudflareProvider with viem's createPublicClient using the Cloudflare RPC URL directly in the HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.CloudflareProvider() // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: mainnet, // [!code hl]\n  transport: http('https://cloudflare-eth.com/') // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Delay\nDESCRIPTION: Demonstrates how to set the retry delay for failed requests in the transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom(window.ethereum!, {\n  retryDelay: 100,\n})\n```\n\n----------------------------------------\n\nTITLE: Using serializeCompactSignature to convert compact signatures to hex\nDESCRIPTION: Demonstrates how to use the serializeCompactSignature function to convert a CompactSignature object (with r and yParityAndS values) into a hex-formatted string according to EIP-2098.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeCompactSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeCompactSignature } from 'viem'\n\nserializeCompactSignature({ // [!code focus:8]\n  r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n  yParityAndS:\n    '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n})\n// \"0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b907e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Bytecode with Viem Client\nDESCRIPTION: Example of using the publicClient to retrieve bytecode from a contract address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getCode.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst bytecode = await publicClient.getCode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n})\n```\n\n----------------------------------------\n\nTITLE: Transaction Receipt Formatter Configuration\nDESCRIPTION: Demonstrates configuration of transaction receipt formatting with custom fields using defineTransactionReceipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineTransactionReceipt, defineChain, hexToBigInt } from 'viem'\n\ntype RpcTransactionReceiptOverrides = {\n  l1Fee: `0x${string}`\n}\ntype TransactionReceiptOverrides = {\n  l1Fee: bigint\n}\n\nconst example = defineChain({\n  /* ... */\n  formatters: {\n    transactionReceipt: defineTransactionReceipt({\n      exclude: ['effectiveGasPrice'],\n      format(args: RpcTransactionReceiptOverrides): \n        TransactionReceiptOverrides {\n        return {\n          l1Fee: hexToBigInt(args.l1Fee)\n        }\n      },\n    }),\n  },\n})\n\nconst receipt = await client.getTransactionReceipt({ hash: '0x...' })\n//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }\n```\n\n----------------------------------------\n\nTITLE: Using fromHex with Options in TypeScript\nDESCRIPTION: Shows how to use the fromHex function with additional options, such as specifying the size of the output.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfromHex(\n  '0x48656c6c6f20776f726c642e0000000000000000000000000000000000000000', \n  {\n    size: 32,\n    to: 'string'\n  }\n)\n// 'Hello world'\n```\n\n----------------------------------------\n\nTITLE: Computing the L2 Transaction Hash from L1 Receipt\nDESCRIPTION: Code that extracts the Optimism (L2) transaction hash from the logs in the Ethereum Mainnet (L1) transaction receipt. This step is crucial to be able to track the transaction on the L2 chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Viem Clients.\nimport { \n  account, \n  publicClientL1, \n  publicClientL2,\n  walletClientL1 \n} from './config'\n\n// Build parameters for the transaction on the L2.\nconst args = await publicClientL2.buildDepositTransaction({\n  mint: parseEther('1'),\n  to: account.address,\n})\n\n// Execute the deposit transaction on the L1. \nconst hash = await walletClientL1.depositTransaction(args) \n\n// Wait for the L1 transaction to be processed. \nconst receipt = await publicClientL1.waitForTransactionReceipt({ hash }) \n\n// Get the L2 transaction hash from the L1 transaction receipt. \nconst [l2Hash] = getL2TransactionHashes(receipt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler Client\nDESCRIPTION: Shows how to set up and configure a bundler client using viem's createBundlerClient function with an HTTP transport pointing to a public bundler endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getChainId.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { createBundlerClient } from 'viem/account-abstraction'\n\nexport const bundlerClient = createBundlerClient({\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Using getWithdrawalStatus to Check Finalization Readiness\nDESCRIPTION: Demonstrates how to check if a withdrawal is ready to be finalized without using the waitToFinalize action, which is recommended to prevent attempting to finalize a withdrawal that isn't ready yet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst status = await publicClientL1.getWithdrawalStatus({\n  receipt,\n  targetChain: walletClientL2.chain\n})\n\nif (status === 'ready-to-finalize') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using hashMessage Function with Different Input Types\nDESCRIPTION: Demonstrates various ways to use the hashMessage function including with plain text, hex data, and byte array inputs. The function returns a keccak256 hash in EIP-191 format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashMessage } from 'viem'\n\nhashMessage('hello world')\n// 0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68\n\n// Hash a hex data value.\nhashMessage({ raw: '0x68656c6c6f20776f726c64' })\n// 0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68\n\n// Hash a bytes data value.\nhashMessage({ \n  raw: Uint8Array.from([\n    104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100,\n  ])})\n// 0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68\n```\n\n----------------------------------------\n\nTITLE: Creating SIWE Message with Parameters in TypeScript\nDESCRIPTION: This example shows how to create a SIWE message using the createSiweMessage function with various parameters such as address, chainId, domain, nonce, URI, and version. It's used as part of the verification process.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/actions/verifySiweMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await publicClient.verifySiweMessage({\n  message: createSiweMessage({\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    chainId: 1,\n    domain: 'example.com',\n    nonce: generateSiweNonce(),\n    uri: 'https://example.com/path',\n    version: '1',\n  }),\n  signature:\n    '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundler Client in TypeScript\nDESCRIPTION: This snippet shows how to create a bundler client using viem's createBundlerClient function. The client is configured with a chain (mainnet) and an HTTP transport pointing to a public Pimlico endpoint. This client is required for the waitForUserOperationReceipt function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\n\nexport const bundlerClient = createBundlerClient({\n  chain: mainnet,\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating User Operation Gas with Account Hoisting in TypeScript\nDESCRIPTION: Example of using estimateUserOperationGas with an account hoisted on the Bundler Client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { bundlerClient } from './config'\n\nconst gas = await bundlerClient.estimateUserOperationGas({\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Clients for ZKSync Integration\nDESCRIPTION: Configuration setup for viem clients to work with ZKSync, including the creation of wallet and public clients with appropriate extensions for L1 and L2 interactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, createPublicClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync, mainnet } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/zksync'\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Client and Owner\nDESCRIPTION: Configuration setup showing how to create a public client and define account owner using viem utilities\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const owner = privateKeyToAccount('0x...')\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing multiple signatures with parseAbiItem\nDESCRIPTION: Shows how to use parseAbiItem with an array of signatures, including a function and a struct definition. This allows for parsing more complex ABI items that reference custom types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiItem.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\n\nconst abiItem = parseAbiItem([\n  //  ^? const abiItem: { name: \"foo\"; type: \"function\"; stateMutability: \"view\"; inputs:...\n  'function foo(Baz bar) view returns (string)',\n  'struct Baz { string name; }',\n])\n```\n\n----------------------------------------\n\nTITLE: Wallet Client Configuration\nDESCRIPTION: Setup for wallet client with zksync chain and EIP712 actions, including account configuration options.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/sendTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync } from 'viem/chains'\nimport { eip712Actions } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dispute Games for an L2 Chain with viem\nDESCRIPTION: This example demonstrates how to retrieve dispute games for an L2 chain (Optimism) using the getGames action. The code retrieves dispute games for the Optimism L2 chain using a public client configured for the L1 chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getGames.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1 } from './config'\n\nconst games = await publicClientL1.getGames({\n  targetChain: optimism,\n})\n```\n\n----------------------------------------\n\nTITLE: Using parseAbi to Convert Human-Readable ABI\nDESCRIPTION: Demonstrates how to use parseAbi to convert human-readable ABI signatures into JSON format. The example includes a function signature for balanceOf and an event signature for Transfer.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbi.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\n\nconst abi = parseAbi([\n  'function balanceOf(address owner) view returns (uint256)',\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\n])\n```\n\n----------------------------------------\n\nTITLE: Using validateSiweMessage Function\nDESCRIPTION: Demonstrates how to use validateSiweMessage to validate a SIWE message by checking address, chain ID, domain, nonce, and URI fields.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/validateSiweMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validateSiweMessage } from 'viem/siwe'\n\nconst valid = validateSiweMessage({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  message: {\n    address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    chainId: 1,\n    domain: 'example.com',\n    nonce: 'foobarbaz',\n    uri: 'https://example.com/path',\n    version: '1',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a bundlerClient for Account Abstraction in TypeScript\nDESCRIPTION: Shows how to create a bundlerClient instance for account abstraction operations using viem. The client is configured with a chain (mainnet) and a HTTP transport pointing to a public Pimlico endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperation.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\n\nexport const bundlerClient = createBundlerClient({\n  chain: mainnet,\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transaction Count by Number in TypeScript\nDESCRIPTION: This snippet shows how to use the getBlockTransactionCount function with a specific block number parameter to retrieve the transaction count for a particular block.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst block = await publicClient.getBlockTransactionCount({\n  blockNumber: 42069n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring zkSync Client with viem in TypeScript\nDESCRIPTION: This code sets up a public client for zkSync using the viem library. It creates a client with the zkSync chain configuration, HTTP transport, and extends it with L2-specific public actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchNumber.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Mining Interval Parameter Example\nDESCRIPTION: Example demonstrating the interval parameter usage in setIntervalMining. Shows how to set a specific mining interval value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setIntervalMining.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.setIntervalMining({\n  interval: 5\n})\n```\n\n----------------------------------------\n\nTITLE: Finalizing ZKSync Withdrawals with Viem\nDESCRIPTION: Example of finalizing a withdrawal from ZKSync L2 to L1 using viem library, requiring an account, ZKSync client, and transaction hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient, zksyncClient } from './config'\n\nconst hash = await walletClient.finalizeWithdrawal({\n  account,\n  client: zksyncClient,\n  hash: '0x…',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Polling Interval for the Bundler Client\nDESCRIPTION: Shows how to configure a custom polling interval for the Bundler Client. This determines how frequently (in milliseconds) the client will poll for updates in polling-enabled actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\n\nconst client = createBundlerClient({\n  pollingInterval: 10_000, // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: stringToBytes Function Usage - TypeScript\nDESCRIPTION: Shows how to use stringToBytes to convert strings to byte arrays\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stringToBytes } from 'viem'\n\nstringToBytes('Hello world')\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n\nstringToBytes('Hello world', { size: 32 })\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n```\n\n----------------------------------------\n\nTITLE: Raw Data Representation Message Recovery in viem\nDESCRIPTION: This code snippet shows how to recover an address from a message using its raw data representation rather than UTF-8. It specifies the message as an object with a raw hexadecimal value and provides the corresponding signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await recoverMessageAddress({ \n  message: { raw: '0x68656c6c6f20776f726c64' }, \n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ABI with Parameters for decodeFunctionData in TypeScript\nDESCRIPTION: Example of defining an ABI with a function that includes parameters, specifically for the balanceOf function used in the argument extraction example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [{ name: \"owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Using Test Client for Mining Blocks\nDESCRIPTION: Example of using the test client to mine blocks on the test network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst mine = await client.mine({ blocks: 1 })\n```\n\n----------------------------------------\n\nTITLE: Setting Base Fee Per Gas Parameter in Viem TypeScript\nDESCRIPTION: This snippet demonstrates how to set the baseFeePerGas parameter when calling the setNextBlockBaseFeePerGas function. It uses the parseGwei function to convert 30 Gwei to Wei.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockBaseFeePerGas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.setNextBlockBaseFeePerGas({\n  baseFeePerGas: parseGwei('30')\n})\n```\n\n----------------------------------------\n\nTITLE: Using getWithdrawalStatus to Check Proof Readiness\nDESCRIPTION: Demonstrates how to check if a withdrawal is ready to be proved without using the waitToProve action, which is recommended to prevent attempting to prove a withdrawal that isn't ready yet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst status = await publicClientL1.getWithdrawalStatus({\n  receipt,\n  targetChain: walletClientL2.chain\n})\n\nif (status === 'ready-to-prove') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: User Operation Return Type Structure in TypeScript\nDESCRIPTION: Shows the return type structure of the getUserOperation function, which includes blockHash, blockNumber, entryPoint address, transactionHash, and the full userOperation object.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperation.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  blockHash: Hash,\n  blockNumber: bigint,\n  entryPoint: Address,\n  transactionHash: Hash,\n  userOperation: UserOperation\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Log Generic Type Definition in TypeScript\nDESCRIPTION: The updated type definition for the Log generic type shows the addition of TPending as the third generic parameter. This improves type safety for logs from pending blocks.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype Log<\n  TQuantity = bigint,\n  TIndex = number,\n+ TPending extends boolean = boolean,\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TAbi extends Abi | readonly unknown[] = [TAbiEvent],\n  TEventName extends string | undefined = TAbiEvent extends AbiEvent\n    ? TAbiEvent['name']\n    : undefined,\n>\n```\n\n----------------------------------------\n\nTITLE: Defining ABI with Parameters for encodeFunctionData in TypeScript\nDESCRIPTION: Shows how to define an ABI for a function that takes parameters, in this case the 'balanceOf' function which requires an address input.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [{ name: \"owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Interacting with Delegated Account in TypeScript\nDESCRIPTION: This snippet demonstrates how to interact with a delegated account by invoking its functions after the initial EIP-7702 transaction. It shows calling the 'ping' function without needing an authorization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem'\nimport { walletClient } from './config'\n\nconst eoa = privateKeyToAccount('0x...')\n\nconst hash = await walletClient.sendTransaction({\n  data: encodeFunctionData({\n    abi,\n    functionName: 'ping',\n  }),\n  to: eoa.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Serializing Deposit Transactions for OP Stack\nDESCRIPTION: Shows how to serialize a deposit transaction with from address, gas, mint amount, sourceHash, value, and transaction type specification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/serializeTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { serializeTransaction } from 'viem/op-stack'\n\nconst serialized = serializeTransaction({\n  from: '0x977f82a600a1414e583f7f13623f1ac5d58b1c0b',\n  gas: 21000n,\n  mint: parseEther('1'),\n  sourceHash: '0x18040f35752170c3339ddcd850f185c9cc46bdef4d6e1f2ab323f4d3d7104319',\n  value: parseEther('1'),\n  type: 'deposit'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client with Custom Batch Size and Wait Time\nDESCRIPTION: Creates a Public Client with custom batch size and wait time for multicall aggregation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst publicClient = createPublicClient({\n  batch: {\n    multicall: {\n      batchSize: 512,\n      wait: 16,\n    },\n  },\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting Chain Data Using Specific Chains in TypeScript\nDESCRIPTION: Shows how to extract chain information using a specific set of imported chains. The function returns a type-safe chain object with properties like id and name.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/extractChain.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractChain } from 'viem'\nimport { mainnet, base, optimism, zora } from 'viem/chains'\n\nconst optimism = extractChain({\n  chains: [mainnet, base, optimism, zora],\n  id: 10,\n})\n\noptimism.id\n//       ^? (property) id: 10\noptimism.name\n//       ^? (property) name: \"OP Mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Custom Transport Provider Implementation\nDESCRIPTION: Shows the basic structure of implementing a custom transport provider with request handling.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom({\n  async request({ method, params }) {\n    const response = await customRpc.request(method, params)\n    return response\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Building Deposit Transaction Parameters in TypeScript\nDESCRIPTION: Demonstrates how to use the buildDepositTransaction function to prepare parameters for a deposit transaction from L1 to L2. It includes setting up the necessary clients and account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildDepositTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL2, walletClientL1 } from './config'\n\nconst args = await publicClientL2.buildDepositTransaction({\n  account,\n  mint: parseEther('1'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n \nconst hash = await walletClientL1.depositTransaction(args)\n```\n\n----------------------------------------\n\nTITLE: Creating an Access List with Max Priority Fee Per Gas\nDESCRIPTION: Demonstrates creating an access list with specified max fee and max priority fee per gas for EIP-1559 Transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther, parseGwei } from 'viem'\n\nconst result = await publicClient.createAccessList({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xdeadbeef',\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n})\n```\n\n----------------------------------------\n\nTITLE: Using slice with hex strings and byte arrays\nDESCRIPTION: Demonstrates how to use the slice function with both hex strings and Uint8Array objects to extract specific sections based on byte offsets.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { slice } from 'viem'\n\nslice('0x0123456789', 1, 4)\n// 0x234567\n\nslice(new Uint8Array([1, 122, 51, 123]), 1, 3)\n// Uint8Array [122, 51]\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client for L2 Operations in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a public client for L2 operations. It creates a public client with the Base chain, extends it with L2 actions, and defines an account for transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalFee.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Using blobsToProofs Function in TypeScript\nDESCRIPTION: Demonstrates how to use the blobsToProofs function to compute proofs for blobs and their commitments. It includes the necessary setup and related function calls.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToProofs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blobsToCommitments, blobsToProofs, toBlobs } from 'viem'\nimport { kzg } from './kzg'\n\nconst blobs = toBlobs({ data: '0x...' })\nconst commitments = blobsToCommitments({ blobs, kzg })\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\n```\n\n----------------------------------------\n\nTITLE: Reverting Blockchain State with Viem Test Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the revert function from a Viem test client to roll back the blockchain state to a previous snapshot. It requires a pre-configured test client and a valid snapshot ID.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/revert.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.revert({\n  id: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getContractAddress with CREATE opcode\nDESCRIPTION: Demonstrates how to use getContractAddress to determine a contract address using the CREATE opcode, providing the deployer address and nonce.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContractAddress } from 'viem'\n\ngetContractAddress({\n  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',\n  nonce: 69420n\n})\n// '0xDf2e056f7062790dF95A472f691670717Ae7b1B6'\n```\n\n----------------------------------------\n\nTITLE: Creating an Owner Account from a Private Key\nDESCRIPTION: Example of how to create an owner account from a private key using viem's privateKeyToAccount function. This owner account is used in the Thirdweb Smart Account implementation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toThirdwebSmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n \nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Setting up Typed Data Domain and Types in TypeScript\nDESCRIPTION: This code snippet defines the domain and types for structured typed data following EIP-712 format. It includes domain parameters like name and chainId, and type definitions for Person and Mail objects used in structured messages.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyTypedData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Test Client Configuration\nDESCRIPTION: Shows how to create and configure a test client instance using Viem with Foundry chain and Anvil mode.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/sendUnsignedTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Getting Testnet Paymaster Address with viem\nDESCRIPTION: Example demonstrating how to fetch a Paymaster address from a Testnet. Returns Address type or null if no Paymaster is available.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getTestnetPaymasterAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\nconst address = await client.getTestnetPaymasterAddress();\n```\n\n----------------------------------------\n\nTITLE: Creating a Nonce Manager with JSON-RPC source in viem\nDESCRIPTION: This snippet demonstrates how to create a Nonce Manager instance using the createNonceManager function with a JSON-RPC source.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNonceManager, jsonRpc } from 'viem/nonce'\n\nconst nonceManager = createNonceManager({\n  source: jsonRpc()\n})\n```\n\n----------------------------------------\n\nTITLE: Block Formatter Configuration\nDESCRIPTION: Demonstrates how to customize block formatting with custom fields and exclusions using defineBlock.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineBlock, defineChain, hexToBigInt } from 'viem'\n\ntype RpcBlockOverrides = {\n  secondaryFee: `0x${string}`\n}\ntype BlockOverrides = {\n  secondaryFee: bigint\n}\n\nconst example = defineChain({\n  /* ... */\n  formatters: {\n    block: defineBlock({\n      exclude: ['difficulty'],\n      format(args: RpcBlockOverrides): BlockOverrides {\n        return {\n          secondaryFee: hexToBigInt(args.secondaryFee)\n        }\n      },\n    }),\n  },\n})\n\nconst block = await client.getBlock()\n//    ^? { ..., difficulty: never, secondaryFee: bigint, ... }\n```\n\n----------------------------------------\n\nTITLE: Wallet Client Configuration Setup\nDESCRIPTION: Shows the setup of a wallet client with mainnet configuration and HTTP transport using a private key account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/signAuthorization.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst relay = privateKeyToAccount('0x...')\n\nexport const walletClient = createWalletClient({\n  account: relay,\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport with Keep-Alive Configuration\nDESCRIPTION: Configuring WebSocket transport with keep-alive ping messages.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', {\n  keepAlive: { interval: 1_000 },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fromBlobs Function in TypeScript\nDESCRIPTION: Example of how to transform blob data back to its original form using the fromBlobs function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBlobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromBlobs } from 'viem'\n\nconst data = fromBlobs({ blobs: ['0x...'] })\n```\n\n----------------------------------------\n\nTITLE: Using CREATE2 opcode with getContractAddress\nDESCRIPTION: Demonstrates how to use getContractAddress with the CREATE2 opcode for deterministic contract addresses.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetContractAddress({\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',\n  opcode: 'CREATE2',\n  salt: toBytes('wagmi'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using toRlp function for RLP encoding in TypeScript\nDESCRIPTION: Demonstrates various usage examples of the toRlp function, including encoding hex values, arrays, and Uint8Arrays. Also shows how to specify the output type.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toRlp.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toRlp } from 'viem'\n\ntoRlp('0x123456789')\n// \"0x850123456789\"\n\ntoRlp(['0x7f', '0x7f', '0x8081e8'])\n// \"0xc67f7f838081e8\"\n\ntoRlp(new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n// \"0x89010203040506070809\"\n\ntoRlp('0x123456789', 'bytes')\n// Uint8Array [133, 1, 35, 69, 103, 137]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Paymaster Stub Data Function for Gas Estimation\nDESCRIPTION: Shows how to implement a custom getPaymasterStubData function for gas estimation of User Operations. This function provides paymaster properties specifically for gas estimation purposes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundlerClient = createBundlerClient({\n  chain: mainnet,\n  paymaster: { \n    async getPaymasterStubData(userOperation) { // [!code focus]\n      // Retrieve paymaster properties for the User Operation. // [!code focus]\n      return { // [!code focus]\n        paymaster: '0x...', // [!code focus]\n        paymasterData: '0x...', // [!code focus]\n        paymasterVerificationGasLimit: 69420n, // [!code focus]\n        paymasterPostOpGasLimit: 69420n, // [!code focus]\n      } // [!code focus]\n    } // [!code focus]\n    async getPaymasterData(userOperation) { /* ... */ }\n  } \n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Clients for OP Stack Interactions\nDESCRIPTION: Configuration setup for creating public clients that interact with both L1 (Ethereum mainnet) and L2 (Optimism) chains. The L1 client is extended with publicActionsL1 to enable OP Stack specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToNextL2Output.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Calls with Transfer Tracing in TypeScript using viem\nDESCRIPTION: This snippet illustrates how to enable tracing of transfers when simulating calls with the viem client. It sets the traceTransfers option to true.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { results } = await client.simulateCalls({\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n  calls: [ \n    { \n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n      value: parseEther('2'),\n    },  \n  ], \n  traceTransfers: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing ABI Parameters in Viem\nDESCRIPTION: Demonstrates how to use viem's parseAbiParameter function to parse individual ABI parameter types, equivalent to ethers.js ParamType.from method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiParameter } from 'viem'\n\nconst param = parseAbiParameter('address owner')\n```\n\n----------------------------------------\n\nTITLE: Transaction Hash Parameter Example\nDESCRIPTION: Shows the usage of the hash parameter when calling getTransactionReceipt. The hash parameter must be a hexadecimal string representing a transaction hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionReceipt.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await publicClient.getTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Polling Interval for watchBlockNumber in TypeScript\nDESCRIPTION: Shows how to set a custom polling interval when using watchBlockNumber. This allows for control over how frequently the function checks for new block numbers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchBlockNumber(\n  { \n    onBlockNumber: blockNumber => console.log(blockNumber),\n    pollingInterval: 12_000,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Viem Test Client Configuration\nDESCRIPTION: Sets up a test client instance using Viem's createTestClient function. Configures the client with Foundry chain, Anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setRpcUrl.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with Factory Dependencies in TypeScript\nDESCRIPTION: Demonstrates deploying a contract with factory dependencies, which are additional bytecode elements needed for contract deployment, particularly useful in zkSync.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deployContract } from 'viem'\nimport { wagmiAbi } from './abi'\nimport { account, walletClient } from './config'\n\nconst hash = await walletClient.deployContract({\n  abi,\n  account,\n  args: [69420],\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n  factoryDeps: [\n    '0x702040405260405161083e38038061083e833981016040819123456...', \n    '0x102030405260405161083e38038061083e833981016040819112233...'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing parseSignature Function from viem in TypeScript\nDESCRIPTION: Shows how to import the parseSignature function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseSignature } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Count with Block Tag - TypeScript\nDESCRIPTION: Example showing how to get the transaction count at a specific block tag like 'safe' or 'latest'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionCount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionCount = await publicClient.getTransactionCount({\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  blockTag: 'safe'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet Client in TypeScript using viem\nDESCRIPTION: This code creates a wallet client instance using viem's createWalletClient function, connecting to an Ethereum provider through window.ethereum. It also defines an account address that will be used for signing operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyTypedData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\n\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n\nexport const walletClient = createWalletClient({\n  transport: custom(window.ethereum),\n})\n```\n\n----------------------------------------\n\nTITLE: Transaction with Access List\nDESCRIPTION: Example of sending an unsigned transaction with an access list parameter for optimized gas usage.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/sendUnsignedTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await testClient.sendUnsignedTransaction({\n  accessList: [\n    {\n      address: '0x1',\n      storageKeys: ['0x1'],\n    },\n  ],\n  from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing encodeFunctionData from viem in TypeScript\nDESCRIPTION: Shows how to import the encodeFunctionData function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom RPC Transport\nDESCRIPTION: Demonstrates how to implement a custom transport with a custom RPC implementation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { customRpc } from './rpc'\n\nconst client = createWalletClient({ \n  chain: mainnet,\n  transport: custom({\n    async request({ method, params }) {\n      const response = await customRpc.request(method, params)\n      return response\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic SIWE Message Creation\nDESCRIPTION: Demonstrates creating a basic Sign-In with Ethereum message with required parameters including address, chainId, domain, nonce, URI, and version.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/createSiweMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = createSiweMessage({\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  chainId: 1,\n  domain: 'example.com',\n  nonce: 'foobarbaz',\n  uri: 'https://example.com/path',\n  version: '1',\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with State Override in TypeScript\nDESCRIPTION: Demonstrates using state override when estimating gas for a transaction, allowing for ephemeral state changes before execution.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.estimateGas({\n  account,\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  stateOverride: [\n    {\n      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n      balance: parseEther('1'),\n      stateDiff: [\n        {\n          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0',\n          value: '0x00000000000000000000000000000000000000000000000000000000000001a4',\n        },\n      ],\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a Public Client with Mainnet Chain and HTTP Transport\nDESCRIPTION: Creates a Public Client instance configured for the Ethereum mainnet using HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst publicClient = createPublicClient({ \n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up a Bundler Client for Account Abstraction in Viem\nDESCRIPTION: This code demonstrates how to create a bundler client for account abstraction using Viem. It configures the client with the mainnet chain and an HTTP transport pointing to a Pimlico public RPC endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperationReceipt.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\n\nexport const bundlerClient = createBundlerClient({\n  chain: mainnet,\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Token Approval with Transaction Overrides in ZKSync Deposit\nDESCRIPTION: Example of a deposit transaction with custom gas parameters for the token approval transaction. This allows configuring specific transaction parameters when approving the base token.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await walletClient.deposit({\n  client: zksyncClient,\n  token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',\n  amount: 20n,\n  to: walletClient.account.address,\n  approveBaseToken: { \n    maxFeePerGas: 200_000_000_000n // [!code focus],  \n  },\n  refundRecipient: walletClient.account.address,\n  bridgeAddress: '0xFC073319977e314F251EAE6ae6bE76B0B3BAeeCF',\n})\n```\n\n----------------------------------------\n\nTITLE: Using getTimeToProve for Withdrawal Status Information\nDESCRIPTION: Shows how to use the getTimeToProve action to retrieve the estimated time remaining before a withdrawal can be proved, which can be displayed to users or stored in a database.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { seconds, timestamp } = await publicClientL1.getTimeToProve({\n  receipt,\n  targetChain: walletClientL2.chain\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definitions Setup\nDESCRIPTION: Definition of domain parameters and typed data structure including Person and Mail types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTypedData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Configuring a Public Client for viem\nDESCRIPTION: Shows how to set up a public client using viem's createPublicClient function with the mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Checking L1 Token Allowance Example\nDESCRIPTION: Example showing how to check token allowance using publicClient with necessary account and token configurations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1Allowance.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst allowance = await publicClient.getL1Allowance({\n  account\n  token: '0x5C221E77624690fff6dd741493D735a17716c26B',\n  bridgeAddress: '0x84DbCC0B82124bee38e3Ce9a92CdE2f943bab60D',\n})\n```\n\n----------------------------------------\n\nTITLE: Using targetChain in proveWithdrawal Function in TypeScript\nDESCRIPTION: Example of using the targetChain parameter in the proveWithdrawal function. The targetChain specifies the L2 chain to execute the transaction on.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet } from 'viem/chains'\n\nconst hash = await client.proveWithdrawal({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  l2OutputIndex: 4529n,\n  outputRootProof: { /* ... */ },\n  withdrawalProof: [ /* ... */ ],\n  withdrawal: { /* ... */ },\n  targetChain: optimism, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using hash parameter with recoverPublicKey in TypeScript\nDESCRIPTION: This code demonstrates the usage of the hash parameter in the recoverPublicKey function. The hash parameter should be the cryptographic hash of the message that was signed and is required for recovering the public key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverPublicKey.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst publicKey = await recoverPublicKey({ \n  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68', // [!code focus]\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Using isAddress with Checksum Validation in TypeScript\nDESCRIPTION: Demonstrates how to use the isAddress function with checksum validation and how to opt-out of this behavior.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAddress } from 'viem'\n\nisAddress('0xa5cc3c03994db5b0d9a5eEdD10Cabab0813678ac', {\n  strict: false\n})\n\nisAddress(\n  '0xa5cc3c03994db5b0d9a5eEdD10Cabab0813678ac'.toLowerCase()\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring walletClient with Hoisted Account for getCapabilities\nDESCRIPTION: Shows how to configure the wallet client with an account hoisted at the client level. The configuration retrieves the account from an EIP-1193 provider and sets it on the wallet client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window'\nimport { createWalletClient, custom } from 'viem'\nimport { eip5792Actions } from 'viem/experimental'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum!.request({ \n  method: 'eth_requestAccounts' \n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum!)\n}).extend(eip5792Actions())\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client for L1 Balance Retrieval in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a public client with L1 actions for use with the getL1Balance function. It includes setup for both JSON-RPC and local accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1Balance.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/zksync'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL1())\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Filter with Strict Mode\nDESCRIPTION: Creates an event filter with strict mode enabled, which ensures that only logs that conform to the indexed and non-indexed arguments on the event are returned. This guarantees that args will always be defined but may filter out non-conforming logs.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\n\nconst filter = await publicClient.createEventFilter({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\n  strict: true\n})\nconst logs = await publicClient.getFilterLogs({ filter })\n\nlogs[0].args\n```\n\n----------------------------------------\n\nTITLE: Using isErc6492Signature to check signature format\nDESCRIPTION: Demonstrates how to use the isErc6492Signature function to check if a hexadecimal signature follows the ERC-6492 format. The function returns a boolean indicating whether the signature matches the format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isErc6492Signature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isErc6492Signature } from 'viem/utils'\n\nconst result = isErc6492Signature('0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492')\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OP Stack Chain\nDESCRIPTION: Demonstrates how to create a custom OP Stack chain configuration using Viem's defineChain utility and chainConfig from the op-stack module. This allows for extending the base OP Stack configuration with custom chain parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/chains.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from 'viem'\nimport { chainConfig } from 'viem/op-stack'\n\nexport const opStackExample = defineChain({\n  ...chainConfig,\n  name: 'OP Stack Example',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using fromRlp with various inputs and output formats\nDESCRIPTION: Demonstrates different ways to use the fromRlp function with various inputs (hex strings and byte arrays) and output formats ('hex' and 'bytes').\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromRlp.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromRlp } from 'viem'\n\nfromRlp('0x850123456789', 'hex')\n// \"0x123456789\"\n\nfromRlp('0xc67f7f838081e8', 'hex')\n// ['0x7f', '0x7f', '0x8081e8']\n\nfromRlp('0x89010203040506070809', 'bytes')\n//  Uint8Array [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nfromRlp(new Uint8Array ([133, 1, 35, 69, 103, 137]), 'hex')\n// \"0x123456789\"\n```\n\n----------------------------------------\n\nTITLE: Importing serializeSignature from viem in TypeScript\nDESCRIPTION: Shows how to import the serializeSignature function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeSignature } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using getL2TokenAddress to Find L2 Token Equivalent in ZKsync Era\nDESCRIPTION: Example showing how to call the getL2TokenAddress function to retrieve the L2 token address equivalent for a given L1 token address on ZKsync Era.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL2TokenAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst address = await client.getL2TokenAddress({\n    token: '0x5C221E77624690fff6dd741493D735a17716c26B'\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying EntryPoint Address for getPaymasterData\nDESCRIPTION: Example showing how to specify the EntryPoint contract address when retrieving paymaster data. The EntryPoint is the central contract that processes user operations in ERC-4337.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  chainId: 1, \n  entryPointAddress: '0x0000000071727De22E5E9d8BAf0edAc6f37da032', \n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Function Signature Hash in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.getSighash to get the function selector (4-byte signature) for a function. This is used for identifying functions in transaction data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Interface, FunctionFragment } from '@ethersproject/abi';\n\nconst hash = Interface.getSighash(FunctionFragment.from('function ownerOf(uint256)'));\n```\n\n----------------------------------------\n\nTITLE: Getting L1 Token Address Example\nDESCRIPTION: Example showing how to retrieve the L1 token address equivalent for a given L2 token address using the getL1TokenAddress method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst address = await client.getL1TokenAddress({\n  token: '0x3e7676937A7E96CFB7616f255b9AD9FF47363D4b'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Address Parameter\nDESCRIPTION: Shows how to specify the contract address parameter for the authorization hash calculation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashAuthorization } from 'viem/utils'\n\nhashAuthorization({\n  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  chainId: 1,\n  nonce: 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing toBlobs Function\nDESCRIPTION: Shows how to import the toBlobs function from the Viem library\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobs } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Setting up Viem Public Client\nDESCRIPTION: Configuration of the Viem public client for interacting with the Ethereum mainnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Fallback Transport in TypeScript\nDESCRIPTION: This snippet shows how to import the fallback function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fallback } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using hashMessage to Hash Different Message Types\nDESCRIPTION: Demonstrates how to use the hashMessage function to hash different types of messages (UTF-8 string, hex data, and bytes array) using the ERC-7739 PersonalSign format. Each example includes required verifier domain information with name, version, contract address, and chain ID.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/hashMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashMessage } from 'viem/experimental/erc7739'\n\n// Hash a UTF-8 value.\nhashMessage({ \n  message: 'hello world', \n  verifierDomain: { \n    name: 'Smart Account', \n    version: '1', \n    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678', \n    chainId: 1, \n  }, \n}) \n\n// Hash a hex data value.\nhashMessage({ \n  message: { raw: '0x68656c6c6f20776f726c64' }, \n  verifierDomain: { \n    name: 'Smart Account', \n    version: '1', \n    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678', \n    chainId: 1, \n  }, \n}) \n\n// Hash a bytes data value.\nhashMessage({ \n  message: {\n    raw: Uint8Array.from([\n      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100,\n    ])\n  }, \n  verifierDomain: { \n    name: 'Smart Account', \n    version: '1', \n    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678', \n    chainId: 1, \n  }, \n}) \n```\n\n----------------------------------------\n\nTITLE: Event Log Parsing with Multiple Event Names\nDESCRIPTION: Shows how to filter logs by multiple event names using an array of event names.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst logs = parseEventLogs({ \n  abi: erc20Abi, \n  eventName: ['Transfer', 'Approval'],\n  logs: receipt.logs,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing createClient in TypeScript\nDESCRIPTION: Basic import of the createClient function from Viem library\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/custom.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Execute Function with Custom Gas Price\nDESCRIPTION: Example demonstrating how to set a custom gas price when using the execute function, providing control over transaction execution costs in the Ethereum network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  calls: [ \n    { \n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n      value: parseEther('1') \n    }, \n    { \n      data: '0xdeadbeef', \n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n    }, \n  ], \n  gasPrice: parseGwei('20'),\n})\n```\n\n----------------------------------------\n\nTITLE: ENS Name Query with Block Number\nDESCRIPTION: Example of querying an ENS name with a specific block number parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ensName = await publicClient.getEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  blockNumber: 15121123n,\n})\n```\n\n----------------------------------------\n\nTITLE: ABI Definition with Constructor Arguments\nDESCRIPTION: Example ABI definition showing a constructor that takes an address parameter named 'owner'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeDeployData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [{ name: 'owner', type: 'address' }],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Encoding a Single Parameter with encodeAbiParameters\nDESCRIPTION: Demonstrates encoding a single uint32 parameter with encodeAbiParameters, showing the simplified usage with a single value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nencodeAbiParameters(\n  [{ name: 'x', type: 'uint32' }],\n  [69420]\n)\n```\n\n----------------------------------------\n\nTITLE: Building Parameters for Proving Withdrawals with viem\nDESCRIPTION: Example showing how to use the buildProveWithdrawal action to prepare transaction parameters for proving a withdrawal. The parameters include account information, L2 output data, and withdrawal details needed for L1 transaction submission.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL2, walletClientL1 } from './config'\n\nconst receipt = await getTransactionReceipt(publicClientL2, {\n  hash: '0xbbdd0957a82a057a76b5f093de251635ac4ddc6e2d0c4aa7fbf82d73e4e11039',\n})\n\nconst [withdrawal] = getWithdrawals(receipt)\nconst output = await walletClientL1.getL2Output({\n  l2BlockNumber: receipt.blockNumber,\n  targetChain: publicClientL2.chain,\n})\n\nconst args = await publicClientL2.buildProveWithdrawal({\n  account,\n  output,\n  withdrawal,\n})\n \nconst hash = await walletClientL1.proveWithdrawal(args)\n```\n\n----------------------------------------\n\nTITLE: Using toHex Function with Options\nDESCRIPTION: Shows how to use the toHex function with additional options, specifically setting the size of the output.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoHex(\n  'Hello world', \n  { size: 32 } // [!code focus]\n)\n// '0x48656c6c6f20776f726c642e0000000000000000000000000000000000000000'\n```\n\n----------------------------------------\n\nTITLE: Using waitForCallsStatus to check transaction status in viem (TypeScript)\nDESCRIPTION: This example demonstrates how to send a batch of calls using sendCalls and then wait for their confirmation using waitForCallsStatus. It includes sending 1 ETH to a specific address and then waiting for the transaction to be confirmed.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/waitForCallsStatus.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, walletClient } from './config'\n \nconst { id } = await walletClient.sendCalls({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n})\n \nconst result = await walletClient.waitForCallsStatus({\n  id,\n})\n// @log: {\n// @log:   atomic: false,\n// @log:   chainId: 1,\n// @log:   id: '0x1234567890abcdef',\n// @log:   statusCode: 200,\n// @log:   status: 'success',\n// @log:   receipts: [{ ... }],\n// @log: }\n```\n\n----------------------------------------\n\nTITLE: Converting a standard signature to a compact signature using viem\nDESCRIPTION: Demonstrates how to use the signatureToCompactSignature function to convert a standard Ethereum signature (with r, s, and yParity components) into an EIP-2098 compact signature format that combines yParity and s into a single value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/signatureToCompactSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signatureToCompactSignature, Signature } from 'viem'\n\nsignatureToCompactSignature({  // [!code focus:9]\n  r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n  s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064' \n  yParity: 0\n})\n// {\n//   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n//   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n// }\n```\n\n----------------------------------------\n\nTITLE: Configuring viem PublicClient for EIP-712 Domain Reading\nDESCRIPTION: This snippet shows how to create and configure a publicClient using viem library for reading EIP-712 domain. It sets up the client with the mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getEip712Domain.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Gas Estimation with Viem\nDESCRIPTION: How to estimate gas for a contract function call using Viem. This creates a public client and uses the estimateContractGas method with the contract configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { wagmiContractConfig } from './abi'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nconst gas = await client.estimateContractGas({\n  ...wagmiContractConfig, \n  functionName: 'mint'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Account with Owner\nDESCRIPTION: Instantiates a Coinbase Smart Account with an owner account derived from a private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport {\n  createBundlerClient,\n  toCoinbaseSmartAccount\n} from 'viem/account-abstraction'\nimport { mainnet } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\nconst bundlerClient = createBundlerClient({\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n\nconst owner = privateKeyToAccount('0x...')\n\nconst account = await toCoinbaseSmartAccount({\n  client,\n  owners: [owner]\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Batch JSON-RPC Requests\nDESCRIPTION: Example of executing multiple concurrent requests using batch JSON-RPC functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [blockNumber, balance, ensName] = await Promise.all([\n  client.getBlockNumber(),\n  client.getBalance({ address: '0xd2135CfB216b74109775236E36d4b433F1DF507B' }),\n  client.getEnsName({ address: '0xd2135CfB216b74109775236E36d4b433F1DF507B' }),\n])\n```\n\n----------------------------------------\n\nTITLE: Using Custom Portal Address for Optimism Bridge\nDESCRIPTION: Shows how to specify a custom Optimism Portal contract address using the portalAddress parameter, which makes the targetChain parameter optional.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  portalAddress: '0xbEb5Fc579115071764c7423A4f12eDde41f106Ed' // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using withdrawal in proveWithdrawal Function in TypeScript\nDESCRIPTION: Example of using the withdrawal parameter in the proveWithdrawal function. The withdrawal data is typically derived from the buildProveWithdrawal Action.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.proveWithdrawal({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  l2OutputIndex: 4529n,\n  gas: 420_000n, \n  outputRootProof: { /* ... */ },\n  withdrawalProof: [ /* ... */ ],\n  withdrawal: { /* ... */ }, // [!code focus]\n  targetChain: optimism,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing mnemonicToAccount from viem\nDESCRIPTION: Import the mnemonicToAccount function from the viem/accounts module to create mnemonic-based accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mnemonicToAccount } from 'viem/accounts'\n```\n\n----------------------------------------\n\nTITLE: Using Block Tag with getProof in TypeScript\nDESCRIPTION: This example shows how to use a block tag when calling the getProof function. The blockTag parameter is optional and allows specifying a named block state for retrieving proof data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getProof.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst proof = await publicClient.getProof({\n  address: '0x4200000000000000000000000000000000000016',\n  storageKeys: [\n    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n  ],\n  blockTag: 'latest' // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: ENS Name Query with Gateway URLs\nDESCRIPTION: Example of querying an ENS name with custom gateway URLs for CCIP-Read requests.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ensName = await publicClient.getEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  gatewayUrls: [\"https://ccip.ens.xyz\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Withdrawal Gas in TypeScript\nDESCRIPTION: Example of using the estimateInitiateWithdrawalGas function to estimate gas for an L2 to L1 withdrawal. It demonstrates setting up the client, account, and withdrawal request parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateInitiateWithdrawalGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { base } from 'viem/chains'\nimport { account, publicClientL2 } from './config'\n \nconst gas = await publicClientL2.estimateInitiateWithdrawalGas({\n  account,\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Config Setup with Local Private Key Account for OP Stack\nDESCRIPTION: Configuration example showing how to set up clients with a local private key account hoisted at the client level. This approach uses a private key directly rather than connecting to an external wallet provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Complete hashTypedData Usage Example\nDESCRIPTION: Demonstrates full usage of hashTypedData function including domain configuration, types definition, and message structure for EIP-712 typed data hashing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/hashTypedData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhashTypedData({\n  domain: {\n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  extensions: [],\n  fields: '0x0f',\n  verifierDomain: {\n    chainId: 1,\n    name: 'Smart Account',\n    salt: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    version: '1',\n    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Access List in TypeScript\nDESCRIPTION: Demonstrates how to include an access list when simulating a contract function call, which can optimize gas usage.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  accessList: [{\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    storageKeys: ['0x1'],\n  }],\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n})\n```\n\n----------------------------------------\n\nTITLE: Test Client Configuration\nDESCRIPTION: Configuration for creating a test client using Viem with Foundry/Anvil as the test environment. Sets up HTTP transport and chain configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/loadState.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Using getL2TokenAddress with Required Token Parameter\nDESCRIPTION: Example showing how to call getL2TokenAddress with the required token parameter which specifies the L1 token address to be mapped.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL2TokenAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await client.getL2TokenAddress({\n    token: '0x5C221E77624690fff6dd741493D735a17716c26B'\n})\n```\n\n----------------------------------------\n\nTITLE: Hoisting Account in Wallet Client Creation in TypeScript\nDESCRIPTION: This code demonstrates how to hoist the account into the Wallet Client creation, eliminating the need to pass the account to every action.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http, parseEther } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst account = privateKeyToAccount('0x...')\n\nconst client = createWalletClient({ // [!code focus:99]\n  account, // [!code ++]\n  chain: mainnet,\n  transport: http()\n})\n\nconst hash = await client.sendTransaction({\n  account, // [!code --]\n  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('0.001')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client with JSON-RPC Account in TypeScript\nDESCRIPTION: Sets up a wallet client using an account retrieved from an EIP-1193 provider (e.g., MetaMask).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Test Client for Foundry Chain in TypeScript\nDESCRIPTION: This code snippet shows the configuration of a Viem test client for the Foundry chain. It sets up the client with specific parameters including the chain, mode, and transport method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/snapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: numberToBytes Function Usage - TypeScript\nDESCRIPTION: Demonstrates converting numbers to byte arrays using numberToBytes function\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { numberToBytes } from 'viem'\n\nnumberToBytes(420)\n// Uint8Array([1, 164])\n\nnumberToBytes(420, { size: 32 })\n// Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 164])\n```\n\n----------------------------------------\n\nTITLE: Importing getSourceHash Function from viem\nDESCRIPTION: Shows how to import the getSourceHash function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSourceHash } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Basic Paymaster Usage with Bundler Client\nDESCRIPTION: Demonstrates how to enable Paymaster functionality when estimating user operation gas costs using the bundlerClient.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.estimateUserOperationGas({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Account for Message Signing\nDESCRIPTION: Example showing how to sign a message by specifying an Ethereum address as the account parameter. This allows for explicit control over which account signs the message.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst signature = await walletClient.signMessage({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', \n  message: 'hello world',\n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2'\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating L1 Fee for Contract Write in TypeScript\nDESCRIPTION: Basic example of estimating the L1 data fee for a contract write operation on an L2 chain using viem. The example shows how to call the estimateContractL1Fee method from a configured client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Fee.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst l1Fee = await publicClient.estimateContractL1Fee({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account,\n})\n```\n\n----------------------------------------\n\nTITLE: Using waitToProve with Transaction Receipt in OP Stack\nDESCRIPTION: Example showing how to use the waitToProve function to wait until an L2 withdrawal transaction is ready to be proved. The function takes a transaction receipt and the target L2 chain as parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitToProve.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst receipt = await publicClientL2.getTransactionReceipt({\n  hash: '0x7b5cedccfaf9abe6ce3d07982f57bcb9176313b019ff0fc602a0b70342fe3147'\n})\nconst output = await publicClientL1.waitToProve({\n  receipt,\n  targetChain: publicClientL2.chain,\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying output format for keccak256\nDESCRIPTION: Shows how to specify the output format of the keccak256 function using the 'to' parameter. In this example, the function returns a Uint8Array instead of the default hex string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/keccak256.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { keccak256 } from 'viem'\n\nkeccak256(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33],\n  'bytes' // [!code focus]\n)\n// Uint8Array [62, 162, 241, 208, 171, 243, 252, 102, 207, 41, 238, 187, 112, 203, 212, 231, 254, 118, 46, 248, 160, 155, 204, 6, 200, 237, 246, 65, 35, 10, 254, 192] // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Execute Function with Custom Chain Parameter\nDESCRIPTION: Example showing how to specify a custom chain when using the execute function, allowing for cross-chain contract interactions without changing the client configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\n\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  calls: [ \n    { \n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n      value: parseEther('1')\n    }, \n    { \n      data: '0xdeadbeef', \n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n    }, \n  ], \n  chain: optimism,\n})\n```\n\n----------------------------------------\n\nTITLE: Wallet Client Configuration\nDESCRIPTION: Configuration setup for wallet client including chain selection, transport setup, and EIP712 action extension.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/writeContract.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync } from 'viem/chains'\nimport { eip712WalletActions } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Event Topic Encoding without EventName in TypeScript\nDESCRIPTION: Shows how to encode event topics when ABI contains only one item, making eventName parameter optional. Uses a simplified ABI with just the Transfer event definition.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeEventTopics.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeEventTopics } from 'viem'\n\nconst abiItem = {\n  inputs: [\n    {\n      indexed: true,\n      name: 'from',\n      type: 'address',\n    },\n    { indexed: true, name: 'to', type: 'address' },\n    {\n      indexed: false,\n      name: 'value',\n      type: 'uint256',\n    },\n  ],\n  name: 'Transfer',\n  type: 'event',\n}\n\nconst topics = encodeEventTopics({\n  abi: [abiItem]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Clients for L1 and L2 in TypeScript\nDESCRIPTION: This snippet shows how to set up public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains using the viem library. It includes extending the L1 client with OP Stack-specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToFinalize.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI for Gas Estimation\nDESCRIPTION: ABI definition for the contract whose gas usage will be estimated, including the mint function that will be called in the example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [{ name: \"\", type: \"uint32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Event Watching with ABI Event Object\nDESCRIPTION: Example of watching events using a direct ABI event object specification\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchEvent(publicClient, {\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  event: {\n    name: 'Transfer',\n    inputs: [\n      { type: 'address', indexed: true, name: 'from' },\n      { type: 'address', indexed: true, name: 'to' },\n      { type: 'uint256', indexed: false, name: 'value' }\n    ]\n  },\n  onLogs: logs => console.log(logs)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling in Fallback Transport\nDESCRIPTION: This example demonstrates how to configure custom error handling logic in fallback transport to determine whether to throw an error or continue to the next transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  shouldThrow: (err: Error) => {\n    return err.message.includes('sad times')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Signing a UTF-8 Message with Smart Account\nDESCRIPTION: Example of signing the UTF-8 representation of a message using a Smart Account. This is the default behavior when providing a string message.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signMessage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await account.signMessage({\n  message: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating TestClient Configuration for Viem\nDESCRIPTION: Setup code for creating a test client using Viem with Foundry/Anvil configuration. Demonstrates initialization of the test environment with HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/impersonateAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Setup\nDESCRIPTION: Setup for creating public and wallet clients with viem. Configures mainnet connection and wallet integration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyTypedData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window'\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const walletClient = createWalletClient({\n  transport: custom(window.ethereum!)\n})\n\nexport const [account] = await walletClient.getAddresses()\n```\n\n----------------------------------------\n\nTITLE: Using Account Hoisting with ERC-7821 Execute Method\nDESCRIPTION: Example showing how to execute batches with an account hoisted on the client configuration rather than passing it to each method call, simplifying repeated use.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, client } from './config'\n \nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ]\n    },\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('2')\n        },\n        {\n          data: '0xdeadbeef',\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for L1 Token Balance Retrieval in TypeScript\nDESCRIPTION: Configuration for setting up a public client with L1 actions extension and defining an account. Demonstrates both JSON-RPC and local account setup options.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/zksync'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL1())\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bytecode with Block Tag\nDESCRIPTION: Example of getting contract bytecode using a specific block tag.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getCode.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst bytecode = await publicClient.getCode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  blockTag: 'safe',\n})\n```\n\n----------------------------------------\n\nTITLE: boolToBytes Function Usage - TypeScript\nDESCRIPTION: Shows how to convert boolean values to byte arrays using boolToBytes function\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { boolToBytes } from 'viem'\n\nboolToBytes(true)\n// Uint8Array([1])\n\nboolToBytes(true, { size: 32 })\n// Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Transport\nDESCRIPTION: Demonstrates how to import the custom transport function from viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { custom } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Bridge Addresses in ZKsync Era using TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'getDefaultBridgeAddresses' function to retrieve the addresses of default ZKsync Era bridge contracts. It requires a configured client that extends publicActionsL2.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getDefaultBridgeAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst addresses = await client.getDefaultBridgeAddresses();\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem WalletClient with EIP-5792 Actions\nDESCRIPTION: This snippet shows how to configure a Viem walletClient with custom transport and EIP-5792 actions. It sets up the client for the Ethereum mainnet and extends it with experimental EIP-5792 actions, which are required for using getCallsStatus.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCallsStatus.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window'\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions())\n\nexport const [account] = await walletClient.getAddresses()\n```\n\n----------------------------------------\n\nTITLE: Importing encodeAbiParameters from Viem in TypeScript\nDESCRIPTION: Shows how to import the encodeAbiParameters function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeAbiParameters } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Block Tag and Index in TypeScript\nDESCRIPTION: This example demonstrates how to use the getTransaction function to get transaction information using a block tag and index. It shows the usage of the blockTag and index parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransaction.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await publicClient.getTransaction({\n  blockTag: 'safe',\n  index: 0\n})\n```\n\n----------------------------------------\n\nTITLE: Using dumpState Function in TypeScript with Viem\nDESCRIPTION: This snippet demonstrates how to use the dumpState function from a testClient to serialize the current state of a blockchain. The function returns a hex-encoded data blob representing the serialized state.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/dumpState.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nconst state = await testClient.dumpState()\n// 0x1f8b08000000000000ffad934d8e1c310885ef52eb5e003660e636184c3651b7949948915a7df7b8934ded6bbcc23fe2f3e3c1f3f088c7effbd7e7f1f13ce00ff60c35939e4e016352131bb3658bd0f046682dcd98dfafef8f7bace3036ec7f49ffe2fde190817da82b0e9933abcd7713be291ffaf77fcf9f5f8e53ff6f6f97addde4cced6dd8b3b89e6d4d468a2a3d93e537480fd15713933f12a73ebc2b106ae561c59bae1d152784733c067f1dc49479d987295d9a2f7c8cc296e00e534797026d94ed312a9bc93b5192726d155a882999a42300ea48ce680109a80936141a2be0d8f7182f6cb4a0d4a6d96ac49d16b2834e1a5836dd0c242c0b5751ac8d9d1cb4a4d65b97620594ac2dc77a159cbb9ab349f096fedee76828ecb4cdb20d044679e1124c6c1633a4acda639d026f81ea96f15eab0963a76ca3d2f81b58705fbea3e4a59761b11f8769ce0046d5799d5ac5216a37b8e51523d96f81c839476fb54d53422393bda94af505fafbf9d0612379c040000\n```\n\n----------------------------------------\n\nTITLE: Retrieving L2 to L1 Log Proof in ZKSync using viem\nDESCRIPTION: This snippet demonstrates how to use the getLogProof function to retrieve the proof for an L2 to L1 log. It requires a transaction hash and optionally an index of the log within the transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getLogProof.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst proof = await client.getLogProof({\n  txHash: '0x...',\n  index: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Using concat Function with Hex Values and Byte Arrays in TypeScript\nDESCRIPTION: Shows examples of using the concat function to combine hex strings and Uint8Array instances. The function can handle both data types and returns the concatenated value in the same format as the input.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/concat.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { concat } from 'viem'\n\nconcat(['0x00000069', '0x00000420'])\n// 0x0000006900000420\n\nconcat([new Uint8Array([69]), new Uint8Array([420])])\n// Uint8Array [69, 420]\n```\n\n----------------------------------------\n\nTITLE: Installing toFunctionHash from viem\nDESCRIPTION: Import statement showing how to include the toFunctionHash function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionHash.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toFunctionHash } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Test Client Setup\nDESCRIPTION: Shows how to set up and configure a test client using viem library with Foundry chain and Anvil mode. Includes transport configuration and chain specification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setLoggingEnabled.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Setting Max Priority Fee Per Gas in Client Execute Method\nDESCRIPTION: Example of configuring both maxFeePerGas and maxPriorityFeePerGas parameters. The maxPriorityFeePerGas sets the maximum priority fee (tip) in wei for miners/validators.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ]\n    },\n    {\n      calls: [\n        {\n          data: '0xdeadbeef',\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        },\n      ],\n    },\n  ],\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Public Client for viem\nDESCRIPTION: Example of creating a public client using viem's createPublicClient function. This client is required for the Smart Account initialization and connects to the Ethereum mainnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSimpleSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { mainnet } from 'viem/chains'\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Using isAddress with Strict Mode Option\nDESCRIPTION: Shows how to use the isAddress function with the strict option. When strict is false, addresses don't need to be in checksum format. When strict is true (default), addresses must be in checksum format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisAddress('0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac', { strict: false })\n// true\n\nisAddress('0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac', { strict: true })\n// false\n\nisAddress('lol', { strict: false })\n// false\n```\n\n----------------------------------------\n\nTITLE: Public Client Setup\nDESCRIPTION: Setting up a public client for network interaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Using getWithdrawals Function to Extract Withdrawal Messages\nDESCRIPTION: Demonstrates how to use the getWithdrawals function to extract withdrawal messages from a transaction receipt's logs. The example retrieves a transaction receipt and then processes it to get withdrawal data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawals.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractTransactionDepositedLogs, getWithdrawals } from 'viem'\n\nconst receipt = await client.getTransactionReceipt({\n  hash: '0xa08acae48f12243bccd7153c88d892673d5578cce4ee9988c0332e8bba47436b',\n})\n\nconst withdrawals = getWithdrawals(receipt)\n```\n\n----------------------------------------\n\nTITLE: Using salt parameter with CREATE2\nDESCRIPTION: Shows how to provide a salt value for CREATE2 contract deployments, which affects the resulting address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetContractAddress({\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',\n  opcode: 'CREATE2',\n  salt: toBytes('wagmi'),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting L1 Log Index Parameter for userDeposit Domain\nDESCRIPTION: Shows how to set the l1LogIndex parameter which is required for the userDeposit domain, specifying the index of the L1 log.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceHash = getSourceHash({\n  domain: 'userDeposit',\n  l1BlockHash:\n    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',\n  l1LogIndex: 196, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding Event Filter Topics in Viem\nDESCRIPTION: Demonstrates how to use viem's encodeEventTopics function to encode event topics for filtering logs, equivalent to ethers.js Interface.encodeFilterTopics method with a different parameter structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeEventTopics } from 'viem'\nimport { abi } from './abi'\n\nconst data = encodeEventTopics({\n  abi,\n  eventName: 'Transfer',\n  args: {\n    to: '0x8ba1f109551bD432803012645Ac136ddd64DBA72'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Block Timestamp Interval with Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the setBlockTimestampInterval function from a testClient in Viem. It sets the block timestamp interval to 5 seconds for future blocks in a test environment.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockTimestampInterval.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setBlockTimestampInterval({\n  interval: 5\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Public Client\nDESCRIPTION: Setup code showing how to configure a viem public client with mainnet connection for making RPC calls. Demonstrates client initialization with HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlobBaseFee.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: watchAsset with Address Parameter\nDESCRIPTION: Example showing address parameter specification for the token contract in watchAsset function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst success = await walletClient.watchAsset({\n  type: 'ERC20',\n  options: {\n    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    decimals: 18,\n    symbol: 'WETH',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Transaction Receipt with Replacement Callback\nDESCRIPTION: Example demonstrating how to handle transaction replacements using a callback\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await publicClient.waitForTransactionReceipt(\n  { \n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n    onReplaced: replacement => console.log(replacement)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic ABI Definition for Contract Deployment\nDESCRIPTION: Example ABI definition showing a basic constructor without parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeDeployData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  { \n    inputs: [], \n    stateMutability: 'nonpayable', \n    type: 'constructor' \n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Using parseCompactSignature to Parse Hex Formatted Compact Signatures\nDESCRIPTION: Demonstrates how to use the parseCompactSignature function to parse a hex formatted compact signature into a structured format. The function returns an object with 'r' and 'yParityAndS' properties.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseCompactSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseCompactSignature } from 'viem'\n\nparseCompactSignature('0x9328da16089fcba9bececa81663203989f2df5fe1faa6291a45381c81bd17f76939c6d6b623b42da56557e5e734a43dc83345ddfadec52cbe24d0cc64f550793')\n/**\n * {\n *   r: '0x9328da16089fcba9bececa81663203989f2df5fe1faa6291a45381c81bd17f76',\n *   yParityAndS: '0x939c6d6b623b42da56557e5e734a43dc83345ddfadec52cbe24d0cc64f550793'\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Using ENS Label Hash Function in TypeScript\nDESCRIPTION: Demonstrates how to use the labelhash function with a normalized ENS label to generate a hash. The example shows hashing the normalized label 'awkweb' which returns a 32-byte hex string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/utilities/labelhash.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { labelhash, normalize } from 'viem/ens'\n\nlabelhash(normalize('awkweb'))\n// '0x7aaad03ddcacc63166440f59c14a1a2c97ee381014b59c58f55b49ab05f31a38'\n```\n\n----------------------------------------\n\nTITLE: Encoding Contract Deployment Data in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.encodeDeploy to encode constructor arguments for contract deployment. This creates the data needed for constructor initialization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst data = iface.encodeDeploy(['SYM', 'Some Name'])\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Nonce\nDESCRIPTION: Shows how to set a unique nonce (transaction number) for an Ethereum transaction. The example sets nonce to 420 in a transaction call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  nonce: 420,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing publicActionsL1 Extension for OP Stack in TypeScript\nDESCRIPTION: This example demonstrates how to import the 'publicActionsL1' extension, which provides a suite of Public Actions for Layer 1 chains to interact with Layer 2 protocols.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicActionsL1 } from 'viem/op-stack'\n```\n\n----------------------------------------\n\nTITLE: Importing ZKsync Chains in Viem\nDESCRIPTION: Shows how to import ZKsync mainnet and Sepolia testnet chain configurations from Viem's chain definitions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/zksync.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  zksync, // [!code hl]\n  zksyncSepoliaTestnet, // [!code hl]\n} from 'viem/chains'\n```\n\n----------------------------------------\n\nTITLE: Using hexToString Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the hexToString function for decoding hex to a string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hexToString } from 'viem'\n\nhexToString('0x48656c6c6f20576f726c6421')\n// \"Hello World!\"\n\nhexToString(\n  '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000',\n  { size: 32 }\n)\n// \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Setting up a viem Public Client for Ethereum Mainnet\nDESCRIPTION: Initializes a public client for the Ethereum mainnet network using viem's createPublicClient function with HTTP transport. This client is required for creating block filters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createBlockFilter.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using the window.ethereum Polyfill for Type Safety\nDESCRIPTION: Demonstrates how the viem/window polyfill provides type safety for the global window.ethereum provider, including autocomplete for methods and typed parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window';\n\nconst hash = await window.ethereum.request({\n  method: 'e \n//          ^|\n})\n\n\n\n\n\n\n\n\nconst hash = await window.ethereum.request({\n  method: 'eth_getTransactionByHash',\n  params: [\n//     ^?\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Priority Fee for L1 Transaction\nDESCRIPTION: Shows how to set the priority fee for the L1 transaction using the maxPriorityFeePerGas parameter, which applies to EIP-1559 transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  maxFeePerGas: parseGwei('20'), \n  maxPriorityFeePerGas: parseGwei('2'),  // [!code focus]\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Human Readable ABI Parameters with parseAbiParameters\nDESCRIPTION: Shows how to use the parseAbiParameters utility with encodeAbiParameters to provide parameters in a human-readable format instead of object notation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeAbiParameters, parseAbiParameters } from 'viem'\n\nconst encodedData = encodeAbiParameters(\n  parseAbiParameters('string x, uint y, bool z'),\n  ['wagmi', 420n, true]\n)\n// 0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Using getPaymasterStubData with Paymaster Client in TypeScript\nDESCRIPTION: Example of retrieving paymaster stub data using a paymaster client. This snippet demonstrates how to call the getPaymasterStubData method with required parameters like callData, factory information, gas parameters, and sender details.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Using compactSignatureToSignature to Parse Compact Signatures in TypeScript\nDESCRIPTION: Demonstrates how to use the compactSignatureToSignature function to parse an EIP-2098 compact signature into standard signature format. The function takes an object with 'r' and 'yParityAndS' properties and returns an object with 'r', 's', and 'yParity' properties.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/compactSignatureToSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compactSignatureToSignature } from 'viem'\n\ncompactSignatureToSignature({\n  r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n  yParityAndS:\n    '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n})\n// {\n//   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n//   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n//   yParity: 0,\n// }\n```\n\n----------------------------------------\n\nTITLE: Retrieving L1 Batch Block Range in ZKSync with viem\nDESCRIPTION: Example showing how to retrieve the range of blocks contained within a batch using the getL1BatchBlockRange method. This function takes a batch number and returns an array of two elements representing the range of blocks.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchBlockRange.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst batchBlockRange = await client.getL1BatchBlockRange({\n  number: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Wallet Client Configuration\nDESCRIPTION: Shows how to configure the wallet client with necessary imports and settings for authorization preparation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/prepareAuthorization.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client and Account in TypeScript\nDESCRIPTION: Shows the setup for creating a public client and defining an account for use with viem, including options for both JSON-RPC and local accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\n// @log: ↓ JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n\n// @log: ↓ Local Account\n// export const account = privateKeyToAccount('0x...')\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract with Struct Definition\nDESCRIPTION: The Solidity contract containing the struct definition used in the decoding example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Example {\n  struct Foo {\n    uint256 x;\n    bool y;\n    address z;\n  }\n\n  function staticStruct(...) returns (Foo calldata foo) { \n    ... \n    return foo;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Client Configuration\nDESCRIPTION: Shows how to configure a wallet client with custom transport and EIP712 wallet actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/signTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync } from 'viem/chains'\nimport { eip712WalletActions } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Explicit Chain ID Authorization\nDESCRIPTION: Demonstrates preparing an authorization with an explicitly specified chain ID for cross-chain compatibility.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/prepareAuthorization.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './client'\n\nconst authorization = await walletClient.prepareAuthorization({\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  chainId: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain ID Using Bundler Client\nDESCRIPTION: Demonstrates how to retrieve the chain ID from a configured bundler client. This example makes a request to get the chain ID associated with the bundler endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getChainId.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n\nconst chainId = await bundlerClient.getChainId()\n```\n\n----------------------------------------\n\nTITLE: Specifying a Verifier Contract for Message Signing\nDESCRIPTION: Example showing how to specify a verifier contract address when signing a message. This is the contract address that will be used to verify the signature, typically an ERC-4337 Smart Account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst signature = await walletClient.signMessage({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: 'hello world',\n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2', \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring EntryPoint for Smart Account\nDESCRIPTION: Example showing how to specify a custom EntryPoint configuration for the smart account including ABI, address and version\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = await toSoladySmartAccount({\n  client,\n  entryPoint: {\n    abi: [/* ... */],\n    address: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',\n    version: '0.7',\n  },\n  owner,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Clients for L1 and L2 Chains in TypeScript\nDESCRIPTION: Setting up public clients for interacting with Ethereum mainnet (L1) and Optimism (L2) chains. The L1 client is extended with Optimism-specific actions to support cross-chain operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToProve.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Access List with Gas Price\nDESCRIPTION: Demonstrates creating an access list with a specified gas price for Legacy Transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther, parseGwei } from 'viem'\n\nconst result = await publicClient.createAccessList({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xdeadbeef',\n  gasPrice: parseGwei('20'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n})\n```\n\n----------------------------------------\n\nTITLE: Using the credential Parameter with toWebAuthnAccount in TypeScript\nDESCRIPTION: Shows how to use the required credential parameter when creating a WebAuthn account. The credential must be a P256 WebAuthn Credential created using createWebAuthnCredential.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWebAuthnCredential, toWebAuthnAccount } from 'viem/account-abstraction'\n\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n})\n\nconst account = toWebAuthnAccount({\n  credential,\n})\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract with Struct Definition\nDESCRIPTION: Shows the Solidity contract that defines the struct being encoded in the previous example, with uint256, bool, and address fields.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Example {\n  struct Foo {\n    uint256 x;\n    bool y;\n    address z;\n  }\n\n  function staticStruct(Foo calldata foo) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Client with ERC-7821 Actions\nDESCRIPTION: Example of creating and extending a Viem client with experimental ERC-7821 actions. The code shows how to initialize a client with mainnet configuration and HTTP transport, then extend it with ERC-7821 functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/client.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { erc7821Actions } from 'viem/experimental' // [!code focus]\n\nconst client = createClient({\n  chain: mainnet,\n  transport: http(),\n}).extend(erc7821Actions()) // [!code focus]\n\nconst hash = await client.execute({/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Setup\nDESCRIPTION: Configuration setup for wallet and public clients needed for withdrawal finalization. Shows how to initialize clients with appropriate transports and chain configurations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/finalizeWithdrawal.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Basic Event Topic Encoding in TypeScript\nDESCRIPTION: Demonstrates basic usage of encodeEventTopics function to encode a Transfer event without arguments. Uses a wagmiAbi contract ABI and returns encoded topic hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeEventTopics.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeEventTopics } from 'viem'\nimport { wagmiAbi } from './abi.ts'\n\nconst topics = encodeEventTopics({\n  abi: wagmiAbi,\n  eventName: 'Transfer'\n})\n// [\"0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0\"]\n```\n\n----------------------------------------\n\nTITLE: Using BlockNumber Parameter in Call Action\nDESCRIPTION: Example of specifying the blockNumber parameter when making a call. This allows performing the call against a specific historical block.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  blockNumber: 15121123n, // [!code focus]\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Credential Creation with Challenge Parameter\nDESCRIPTION: Shows how to create a WebAuthn credential with a custom cryptographic challenge using Uint8Array.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/createWebAuthnCredential.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst credential = await createWebAuthnCredential({\n  challenge: new Uint8Array([1, 2, 3]),\n  name: 'Example',\n})\n```\n\n----------------------------------------\n\nTITLE: Using waitForNextL2Output with Interval Buffer Parameter in TypeScript\nDESCRIPTION: Example showing how to use the optional intervalBuffer parameter when calling waitForNextL2Output. This buffer accounts for time interval discrepancies.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await publicClientL1.waitForNextL2Output({\n  intervalBuffer: 1.2,\n  l2BlockNumber,\n  targetChain: optimism, \n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Contract Events with Ethers.js\nDESCRIPTION: How to listen for contract events using Ethers.js. This example subscribes to the Transfer event, handles events with a listener function, and shows how to unsubscribe.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider } from 'ethers'\nimport { wagmiContractConfig } from './abi'\n\nconst provider = getDefaultProvider()\n\nconst { abi, address } = wagmiContractConfig\nconst contract = new Contract(address, abi, provider)\n\nconst listener = (from, to, amount, event) => {\n  // ...\n}\ncontract.on('Transfer', listener)\n\n// unsubscribe\ncontract.off('Transfer', listener)\n```\n\n----------------------------------------\n\nTITLE: Using hdKeyToAccount with Different HD Key Creation Methods\nDESCRIPTION: Example demonstrating how to create an HD Account using various methods of deriving an HD Key (fromMasterSeed, fromExtendedKey, fromJSON) and then converting it to an account that can be used with a wallet client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { createWalletClient, http } from 'viem'\nimport { HDKey, hdKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst hdKey = HDKey.fromMasterSeed(...) // [!code focus:3]\nconst hdKey = HDKey.fromExtendedKey(...)\nconst hdKey = HDKey.fromJSON({ xpriv: ... })\n\nconst account = hdKeyToAccount(hdKey) // [!code focus]\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing walletActionsL2 Extension for OP Stack in TypeScript\nDESCRIPTION: This snippet shows how to import the 'walletActionsL2' extension, which provides a suite of Wallet Actions tailored for Layer 2 (OP Stack) chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletActionsL2 } from 'viem/op-stack'\n```\n\n----------------------------------------\n\nTITLE: Using getTimeToFinalize for Withdrawal Finalization Timing\nDESCRIPTION: Shows how to use the getTimeToFinalize action to retrieve the estimated time remaining before a withdrawal can be finalized, which can be displayed to users or stored in a database.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { seconds, timestamp } = await publicClientL1.getTimeToFinalize({\n  receipt,\n  targetChain: walletClientL2.chain\n})\n```\n\n----------------------------------------\n\nTITLE: Using stringToHex Function\nDESCRIPTION: Shows how to use the stringToHex shortcut function for encoding UTF-8 strings to hex values, with and without size options.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stringToHex } from 'viem'\n\nstringToHex('Hello World!')\n// \"0x48656c6c6f20576f726c6421\"\n\nstringToHex('Hello World!', { size: 32 })\n// \"0x48656c6c6f20576f726c64210000000000000000000000000000000000000000\"\n```\n\n----------------------------------------\n\nTITLE: Using commitmentsToVersionedHashes with blob data in TypeScript\nDESCRIPTION: Demonstrates a complete example of generating blobs, converting them to commitments, and then transforming those commitments to versioned hashes using the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  blobsToCommitments, \n  commitmentsToVersionedHashes, \n  toBlobs \n} from 'viem'\nimport { kzg } from './kzg'\n\nconst blobs = toBlobs({ data: '0x1234' })\nconst commitments = blobsToCommitments({ blobs, kzg })\nconst versionedHashes = commitmentsToVersionedHashes({  \n  commitments,  \n}) \n```\n\n----------------------------------------\n\nTITLE: Fetching Block Number in TypeScript\nDESCRIPTION: Demonstrates how to retrieve the most recent block number using the publicClient. Returns the block number as a bigint value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockNumber.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst blockNumber = await publicClient.getBlockNumber()\n```\n\n----------------------------------------\n\nTITLE: Stop Impersonation Address Parameter Example\nDESCRIPTION: Example highlighting the address parameter usage in stopImpersonatingAccount function. Shows how to specify the target account address to stop impersonating.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/stopImpersonatingAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.stopImpersonatingAccount({\n  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying types parameter in encodePacked function\nDESCRIPTION: Shows how to specify the types parameter which defines the set of ABI types to pack encode.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodePacked.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nencodePacked(\n  ['address', 'string', 'bytes16[]'], // [!code focus]\n  [\n    '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', \n    'hello world',\n    ['0xdeadbeefdeadbeefdeadbeefdeadbeef', '0xcafebabecafebabecafebabecafebabe']\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Providing values parameter in encodePacked function\nDESCRIPTION: Demonstrates how to provide the values parameter which contains the primitive values corresponding to the defined ABI types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodePacked.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nencodePacked(\n  ['address', 'string', 'bytes16[]'],\n  [ // [!code focus:5]\n    '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', \n    'hello world',\n    ['0xdeadbeefdeadbeefdeadbeefdeadbeef', '0xcafebabecafebabecafebabecafebabe']\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Formatters Configuration in Viem\nDESCRIPTION: Shows the basic structure for configuring all types of formatters (block, transaction, receipt, request) in a chain definition.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { \n  defineBlock,\n  defineChain,\n  defineTransaction, \n  defineTransactionReceipt, \n  defineTransactionRequest \n} from 'viem' \n\nexport const example = defineChain({\n  /* ... */\n  formatters: { \n    block: defineBlock(/* ... */),\n    transaction: defineTransaction(/* ... */),\n    transactionReceipt: defineTransactionReceipt(/* ... */),\n    transactionRequest: defineTransactionRequest(/* ... */),\n  } \n})\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom rpId with toWebAuthnAccount in TypeScript\nDESCRIPTION: Shows how to specify a custom Relying Party ID when creating a WebAuthn account. By default, it uses window.location.hostname, but this can be overridden for specific use cases.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as passkey from 'react-native-passkeys'\n\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n})\n\nconst account = toWebAuthnAccount({\n  credential,\n  rpId: 'example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring a Conforming Log in TypeScript\nDESCRIPTION: This example shows how to structure a conforming log object in TypeScript that matches the Solidity event definition. It includes the correct format for data and topics, demonstrating proper indexing of arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/glossary/terms.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst log = {\n  ...\n  data: '0x\n    00...23c346 // ✅ non-indexed argument (baz)\n  ',\n  topics: [\n    '0xdd...23b3ef', // event signature\n    '0x00...000001', // ✅ indexed argument (foo)\n    '0xae...e1cc58', // ✅ indexed argument (bar)\n    '0x00...000000', // ✅ indexed argument (barry)\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client for Ethereum Mainnet in TypeScript\nDESCRIPTION: This code sets up a publicClient instance for interacting with the Ethereum mainnet. It uses the createPublicClient function from viem, configuring it with the mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getGasPrice.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Custom getFn with toWebAuthnAccount in TypeScript\nDESCRIPTION: Demonstrates how to use a custom credential request function for environments without native WebAuthn support (like React Native). The getFn parameter allows specifying an alternative implementation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as passkey from 'react-native-passkeys'\n\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n})\n\nconst account = toWebAuthnAccount({\n  credential,\n  getFn: passkey.get,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Test Client\nDESCRIPTION: Setup configuration for creating a test client with Foundry chain and Anvil mode using HTTP transport\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getTxpoolContent.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Estimating User Operation Gas for Contract Calls in TypeScript\nDESCRIPTION: Example of using estimateUserOperationGas with contract calls, specifying ABI and function name.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { bundlerClient, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst gas = await bundlerClient.estimateUserOperationGas({\n  calls: [{\n    abi: wagmiAbi,\n    functionName: 'mint',\n    to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Using serializeErc6492Signature Function to Serialize ERC-6492 Signature in TypeScript\nDESCRIPTION: Demonstrates the usage of the serializeErc6492Signature function to serialize an ERC-6492 flavoured signature into hex format. The function takes an object with address, data, and signature properties, and returns a hex-formatted string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeErc6492Signature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeErc6492Signature } from 'viem/utils'\n\nserializeErc6492Signature({\n  address: '0xcafebabecafebabecafebabecafebabecafebabe',\n  data: '0xdeadbeef',\n  signature: '0x41a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b',\n})\n// \"0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Gas Price using Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the setMinGasPrice function from the Viem library to change the minimum gas price accepted by the network. It imports necessary functions and uses a testClient to set the gas price to 20 Gwei.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setMinGasPrice.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\nimport { testClient } from './client'\n \nawait testClient.setMinGasPrice({\n  gasPrice: parseGwei('20'),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Access List with Value\nDESCRIPTION: Shows how to create an access list with a specified value (in wei) to be sent with the transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\n\nconst result = await publicClient.createAccessList({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xdeadbeef',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity Event for Non-conforming Log\nDESCRIPTION: This Solidity event definition corresponds to the non-conforming log example. It shows how a different structure of indexed and non-indexed arguments can lead to non-conforming logs when using the same event signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/glossary/terms.md#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(\n  bool indexed foo, \n  uint256 baz, \n  string bar, \n  boolean barry\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Client for Ethereum Interactions\nDESCRIPTION: This code creates a test client using viem library for interacting with an Ethereum network. It sets up the client with the Foundry chain configuration and Anvil mode, using HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getTxpoolStatus.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Account for zkSync\nDESCRIPTION: Shows how to configure a wallet client with a local account derived from a private key for zkSync transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Using message Parameter Instead of data in signMessage\nDESCRIPTION: Example showing the parameter rename from data to message in the signMessage function. This change aligns the parameter naming with its semantic meaning in the context of message signing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nwalletClient.signMessage({\n  data: 'hello world', // [!code --]\n  message: 'hello world', // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Using waitForNextL2Output with L2 Block Number Parameter in TypeScript\nDESCRIPTION: Example showing how to specify the L2 block number parameter when using waitForNextL2Output. This code waits for the next L2 output after block 69420.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await publicClientL1.waitForNextL2Output({ \n  l2BlockNumber: 69420n,\n  targetChain: optimism, \n})\n```\n\n----------------------------------------\n\nTITLE: Setting Account Nonce Example\nDESCRIPTION: Example showing how to set an account nonce using the testClient in Viem. Demonstrates setting a specific nonce value for a given Ethereum address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNonce.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setNonce({\n  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  nonce: 420\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Function Result Encoding in TypeScript\nDESCRIPTION: Example showing how to encode a simple function result using encodeFunctionResult with a basic ABI definition.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionResult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionResult } from 'viem';\nimport { wagmiAbi } from './abi.ts'\n\nconst data = encodeFunctionResult({\n  abi: wagmiAbi,\n  functionName: 'ownerOf',\n  value: ['0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'],\n});\n// '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac'\n```\n\n----------------------------------------\n\nTITLE: Creating an Access List with Block Number\nDESCRIPTION: Shows how to create an access list for a specific block number using the createAccessList function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\n\nconst result = await publicClient.createAccessList({\n  blockNumber: 15121123n,\n  data: '0xdeadbeef',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n})\n```\n\n----------------------------------------\n\nTITLE: Increasing Time Example in Viem Test Client\nDESCRIPTION: Example showing how to increase time by a specified number of seconds using the Viem test client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/increaseTime.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.increaseTime({\n  seconds: 420,\n})\n```\n\n----------------------------------------\n\nTITLE: Domain Parameter Example\nDESCRIPTION: Shows the structure of the domain parameter which includes name, version, chainId, and verifying contract address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashTypedData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = hashTypedData({\n  domain: {\n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n  types,\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring watchBlockNumber with emitMissed Option in TypeScript\nDESCRIPTION: Demonstrates how to use the emitMissed option when calling watchBlockNumber. This option determines whether to emit missed block numbers to the callback.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchBlockNumber(\n  { \n    emitMissed: true,\n    onBlockNumber: blockNumber => console.log(blockNumber),\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: getFeeHistory with Block Number\nDESCRIPTION: Example showing getFeeHistory usage with a specific block number parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFeeHistory.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst feeHistory = await publicClient.getFeeHistory({\n  blockCount: 4,\n  blockNumber: 1551231n,\n  rewardPercentiles: [25, 75]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Viem Test Client for Foundry in TypeScript\nDESCRIPTION: This snippet shows how to create a test client using Viem for the Foundry development environment. It sets up the client with the Foundry chain, Anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockTimestampInterval.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Paymaster Client with Context in TypeScript\nDESCRIPTION: Shows how to create a Paymaster Client and use it with the Bundler Client, including custom paymaster context. This is useful for adding paymaster-specific fields like policy IDs.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}')\n})\n\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: paymasterClient,\n  paymasterContext: { // [!code focus]\n    policyId: 'abc123' // [!code focus]\n  }, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting verificationGasLimit Parameter in User Operation\nDESCRIPTION: Shows how to set the verificationGasLimit parameter which specifies the gas allocation for the verification step. This optional bigint parameter helps ensure sufficient gas for verification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c',\n  verificationGasLimit: 69420n\n})\n```\n\n----------------------------------------\n\nTITLE: ripemd160 with Bytes Output\nDESCRIPTION: Example demonstrating ripemd160 usage with 'bytes' output format instead of default hex format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/ripemd160.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ripemd160 } from 'viem'\n\nripemd160(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33],\n  'bytes'\n)\n// Uint8Array [132, 118, 238, 70, 49, 185, 179, 10, 194, 117, 75, 14, 224, 196, 126, 22, 29, 63, 114, 76]\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for L1 and L2 Clients\nDESCRIPTION: Demonstrates how to configure both L1 wallet client and L2 public client needed for deposit transactions, extending them with the appropriate OP Stack actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await clientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Chain Parameter for isWithdrawalFinalized in viem\nDESCRIPTION: Example showing how to specify the optional chain parameter when checking a withdrawal transaction's finalization status on L1. This allows specifying a target chain different from the client's default chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zksync } from 'viem/chains' // [!code focus]\n\nconst hash = await client.isWithdrawalFinalized({\n  chain: zksync, // [!code focus]\n  client: zksyncClient,\n  hash: '0x…',\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Account Index in Derivation Path\nDESCRIPTION: Modify the account index in the derivation path (m/44'/60'/${accountIndex}'/0/0) when creating a mnemonic account to derive different private keys.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mnemonicToAccount } from 'viem/accounts'\n// ---cut---\nconst account = mnemonicToAccount(\n  'legal winner thank year wave sausage worth useful legal winner thank yellow',\n  {\n    accountIndex: 1 // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using getAllBalances Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getAllBalances function from the viem library to retrieve all known balances for a given account. It imports necessary components from a config file and calls the function with an account parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getAllBalances.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client, account } from './config'\n\nconst balances = await client.getAllBalances({\n  account\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Bridgehub Contract Address with viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a configured viem client to retrieve the Bridgehub smart contract address in zkSync. It relies on a pre-configured client from a separate configuration file.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBridgehubContractAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst address = await client.getBridgehubContractAddress();\n```\n\n----------------------------------------\n\nTITLE: Defining ABI for decodeFunctionData in TypeScript\nDESCRIPTION: Example of defining an ABI (Application Binary Interface) for use with decodeFunctionData. It includes a totalSupply function definition.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Transaction Request Formatter Configuration\nDESCRIPTION: Shows how to customize transaction request formatting with custom fields using defineTransactionRequest.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineTransactionRequest, defineChain, hexToBigInt } from 'viem'\n\ntype RpcTransactionRequestOverrides = {\n  secondaryFee: `0x${string}`\n}\ntype TransactionRequestOverrides = {\n  secondaryFee: bigint\n}\n\nconst example = defineChain({\n  /* ... */\n  formatters: {\n    transactionRequest: defineTransactionRequest({\n      exclude: ['effectiveGasPrice'],\n      format(args: TransactionRequestOverrides): \n        RpcTransactionRequestOverrides {\n        return {\n          secondaryFee: numberToHex(args.secondaryFee)\n        }\n      },\n    }),\n  },\n})\n\nconst receipt = await client.getTransactionReceipt({ hash: '0x...' })\n//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transaction Count by Hash in TypeScript\nDESCRIPTION: This example demonstrates how to use the getBlockTransactionCount function with a specific block hash parameter to get the transaction count for a particular block.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = await publicClient.getBlockTransactionCount({\n  blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d'\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing ERC-6492 Signature Example\nDESCRIPTION: Demonstrates how to use parseErc6492Signature to extract address, data, and signature components from a hex-formatted ERC-6492 signature. Returns an object containing the parsed components.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseErc6492Signature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseErc6492Signature } from 'viem/utils'\n\nconst {\n  address,\n  data,\n  signature,\n} = parseErc6492Signature('0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492')\n```\n\n----------------------------------------\n\nTITLE: Test Client Configuration Setup\nDESCRIPTION: Configuration setup for creating a test client using Viem with Foundry chain and Anvil mode. Shows how to initialize the client with HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNonce.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Mining Blocks with Test Client\nDESCRIPTION: Demonstrates how to mine a specified number of blocks using the test client. Shows basic usage of the mine function with block count parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/mine.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.mine({\n  blocks: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Sample Count for Ranking in Fallback Transport\nDESCRIPTION: This example demonstrates how to set the number of samples used for ranking in fallback transports.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  rank: {\n    sampleCount: 10\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported EntryPoints from a Bundler in TypeScript\nDESCRIPTION: Example of retrieving EntryPoints that a bundler supports using the getSupportedEntryPoints method. The function returns an array of address strings that represent the supported EntryPoints.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getSupportedEntryPoints.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n\nconst entryPoints = await bundlerClient.getSupportedEntryPoints() // [!code focus:99]\n// @log: [\"0x0000000071727De22E5E9d8BAf0edAc6f37da032\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI in TypeScript\nDESCRIPTION: This snippet shows how to define the ABI (Application Binary Interface) for a contract. The ABI includes function definitions that the contract exposes, including the 'mint' function used in the example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalFee.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [{ name: \"\", type: \"uint32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Clients for L1 and L2 with viem\nDESCRIPTION: Setup code showing how to configure viem public clients for both Ethereum mainnet (L1) and Optimism (L2), extending the L1 client with OP Stack specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitToFinalize.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: toBytes with Size Option - TypeScript\nDESCRIPTION: Shows how to use toBytes with size parameter to create fixed-size byte arrays\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoBytes(\n  'Hello world', \n  { size: 32 }\n)\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n```\n\n----------------------------------------\n\nTITLE: Local Account Configuration\nDESCRIPTION: Demonstrates how to configure a wallet client using a local account with a private key for signing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTypedData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Snapshot with Viem Test Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the testClient to create a snapshot of the blockchain's current state. It imports the testClient from a separate file and calls the snapshot method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/snapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nconst id = await testClient.snapshot()\n```\n\n----------------------------------------\n\nTITLE: Using waitForNextL2Output with Custom L2 Output Oracle Address in TypeScript\nDESCRIPTION: Example demonstrating how to specify a custom L2 Output Oracle contract address when using waitForNextL2Output. When providing this address, the targetChain parameter becomes optional.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await publicClientL1.waitForNextL2Output({\n  l2BlockNumber,\n  l2OutputOracleAddress: '0xbEb5Fc579115071764c7423A4f12eDde41f106Ed'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Next Block Timestamp using Viem Test Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the setNextBlockTimestamp function from a Viem test client to set the timestamp of the next block. It requires a configured test client and accepts a timestamp parameter as a BigInt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockTimestamp.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setNextBlockTimestamp({\n  timestamp: 1671744314n\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Setup in TypeScript\nDESCRIPTION: Setup code for creating a public client with mainnet configuration\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Viem Client for OP Stack L1 Actions\nDESCRIPTION: Configuration for creating a public client with OP Stack L1 actions extension. This setup is required before executing functions like estimateFinalizeWithdrawalGas.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateFinalizeWithdrawalGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Public Client Setup for Fee Estimation\nDESCRIPTION: Setup code showing how to create a public client instance with mainnet configuration for fee estimation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateMaxPriorityFeePerGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing parseCompactSignature from viem in TypeScript\nDESCRIPTION: Shows how to import the parseCompactSignature function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseCompactSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseCompactSignature } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Node Logging with Viem\nDESCRIPTION: Demonstrates how to enable or disable logging on a test node network using the testClient's setLoggingEnabled method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setLoggingEnabled.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setLoggingEnabled(true)\n```\n\n----------------------------------------\n\nTITLE: Computing Contract Addresses in Viem\nDESCRIPTION: Demonstrates how to use viem's getContractAddress function to compute the address where a contract will be deployed, equivalent to ethers.js utils.getContractAddress method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContractAddress } from 'viem'\n\nconst address = getContractAddress({ from: '0x...', nonce: 5 })\n```\n\n----------------------------------------\n\nTITLE: User Operation with Account Hoisting Configuration\nDESCRIPTION: Shows how to configure bundlerClient with a hoisted account to avoid passing the account parameter in each operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const account = await toCoinbaseSmartAccount({\n  client,\n  owners: [privateKeyToAccount('0x...')],\n})\n\nexport const bundlerClient = createBundlerClient({\n  account,\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Limit for L2 Transaction Execution\nDESCRIPTION: Demonstrates how to specify the gas limit parameter for transaction execution on the L2 chain, which is required for all deposit transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n, // [!code focus]\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Using strict mode with slice function\nDESCRIPTION: Shows how the strict option affects behavior when the end offset is at or beyond the bounds of the data, ensuring data integrity.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nslice('0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678', 0, 20, { strict: true })\n// [SliceOffsetOutOfBoundsError] Slice ending at offset \"20\" is out-of-bounds (size: 19).\n\nslice('0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 0, 20, { strict: true })\n// 0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of pad Function with Hex Values and Byte Arrays\nDESCRIPTION: Demonstrates the default behavior of the pad function, which pads a value with leading zeros up to 32 bytes (64 hex chars) for both hex strings and byte arrays.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/pad.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pad } from 'viem'\n\npad('0xa4e12a45')\n// 0x00000000000000000000000000000000000000000000000000000000a4e12a45\n\npad(new Uint8Array([1, 122, 51, 123]))\n// Uint8Array [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,122,51,123]\n```\n\n----------------------------------------\n\nTITLE: Setting Mining Interval Example\nDESCRIPTION: Example showing how to set up automatic mining intervals using the testClient. Sets the mining interval to 5 seconds.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setIntervalMining.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setIntervalMining({\n  interval: 5\n})\n```\n\n----------------------------------------\n\nTITLE: Using getL2TokenAddress with Optional Custom Bridge Address\nDESCRIPTION: Example showing how to call getL2TokenAddress with both the token parameter and the optional bridgeAddress parameter for using a custom bridge.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL2TokenAddress.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await client.getL2TokenAddress({\n    token: '0x5C221E77624690fff6dd741493D735a17716c26B',\n    bridgeAddress: '0xf8c919286126ccf2e8abc362a15158a461429c82' // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for zkSync in TypeScript\nDESCRIPTION: This snippet shows how to configure a viem public client for interacting with the zkSync network. It imports necessary functions and types from viem and viem/zksync, sets up the client with the zkSync chain, and extends it with zkSync-specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBridgehubContractAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Specifying Target L2 Chain for Deposit\nDESCRIPTION: Example showing how to specify the target L2 chain for the deposit transaction, which determines which L2 network will execute the transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet } from 'viem/chains'\n\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  chain: mainnet,\n  targetChain: base, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Count for IPC Transport in TypeScript\nDESCRIPTION: This example shows how to set the maximum number of retry attempts for failed requests in the IPC Transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', {\n  retryCount: 5, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using toFunctionSignature with Different Input Types\nDESCRIPTION: Demonstrates two ways to generate function signatures: using a string definition and using an AbiFunction object. The function accepts either format and returns a standardized signature string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toFunctionSignature } from 'viem'\n\n// from function definition\nconst signature_1 = toFunctionSignature('function ownerOf(uint256 tokenId)')\n// @log: Output: ownerOf(uint256)\n\n// from an `AbiFunction` on your contract ABI\nconst signature_2 = toFunctionSignature({\n  name: 'ownerOf',\n  type: 'function',\n  inputs: [{ name: 'tokenId', type: 'uint256' }],\n  outputs: [],\n  stateMutability: 'view',\n})\n// @log: Output: ownerOf(uint256)\n```\n\n----------------------------------------\n\nTITLE: Using Optional callGasLimit Parameter with getPaymasterData\nDESCRIPTION: Example showing how to include the optional callGasLimit parameter when retrieving paymaster data. This parameter specifies the amount of gas to allocate for the main execution call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n, \n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Using parseUnits to convert a string to bigint with decimal precision\nDESCRIPTION: Demonstrates how to use the parseUnits function to convert a string value '420' with 9 decimal places of precision to a bigint value. The function multiplies the number by 10^9.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseUnits.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseUnits } from 'viem'\n\nparseUnits('420', 9) // [!code focus:2]\n// 420000000000n\n```\n\n----------------------------------------\n\nTITLE: Configuration with Local Account Hoisting\nDESCRIPTION: Shows how to configure the wallet client with a local account using privateKeyToAccount, allowing for simpler function calls without explicit account references.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { publicActionsL2, walletActionsL1 } from 'viem/zksync'\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'), \n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n```\n\n----------------------------------------\n\nTITLE: Configuring Stability Weight in Fallback Transport Ranking\nDESCRIPTION: This snippet shows how to configure the weight applied to the stability score in fallback transport ranking.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  rank: {\n    weights: {\n      latency: 0.4,\n      stability: 0.6\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing ABI Items in Ethers\nDESCRIPTION: Shows how to use ethers.js utils.Fragment.from to parse an individual ABI function signature. This creates a Fragment object representing a single function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\n\nconst fragment = utils.Fragment.from('function balanceOf(address owner) view returns (uint)')\n```\n\n----------------------------------------\n\nTITLE: Initializing Nexus Smart Account\nDESCRIPTION: Example of creating a Nexus Smart Account instance using toNexusSmartAccount with required client and owner parameters\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toNexusSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toNexusSmartAccount } from 'permissionless/accounts'\nimport { client } from './client.js'\nimport { owner } from './owner.js'\n\nconst account = await toNexusSmartAccount({\n  client,\n  owners: [owner],\n  version: '1.0.0'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Clients and Accounts for zkSync Deposits\nDESCRIPTION: Sets up the necessary clients and accounts for interacting with zkSync L1 and L2. It creates public and wallet clients, extends them with specific actions, and demonstrates how to use both JSON-RPC and local accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, createPublicClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync, mainnet } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/zksync'\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI and Address in TypeScript\nDESCRIPTION: This snippet defines the ABI (Application Binary Interface) for a smart contract and its address. The ABI includes two functions: 'initialize' and 'ping'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"initialize\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"ping\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n] as const\n\nexport const contractAddress = '0x...'\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Client with ERC-7821 Actions\nDESCRIPTION: Sets up a Viem client with ERC-7821 actions, creating a private key account and configuring the client with the mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { erc7821Actions } from 'viem/experimental'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const client = createClient({\n  chain: mainnet,\n  transport: http(),\n}).extend(erc7821Actions())\n```\n\n----------------------------------------\n\nTITLE: Creating TestClient for Ethereum Interactions in TypeScript\nDESCRIPTION: This code snippet shows how to create a testClient using the viem library. It configures the client with the Foundry chain, Anvil mode, and HTTP transport. This client can be used for various Ethereum test operations, including setting storage values.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setStorageAt.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Account Configuration\nDESCRIPTION: Example showing how to configure wallet client with a JSON-RPC account retrieved from an EIP-712 provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/writeContract.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { eip712WalletActions } from 'viem/zksync'\n\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n```\n\n----------------------------------------\n\nTITLE: Contract Interaction Batch Transaction\nDESCRIPTION: Example showing how to batch multiple contract interactions including function calls with parameters using ABI definitions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/sendCalls.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { walletClient } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n \nconst { id } = await walletClient.sendCalls({\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'approve',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        100n\n      ],\n    },\n    {\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'transferFrom',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        '0x0000000000000000000000000000000000000000',\n        100n\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Salt for Smart Account Deployment\nDESCRIPTION: Example showing how to specify a custom salt value for smart account deployment\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = await toSoladySmartAccount({\n  client,\n  owner,\n  salt: '0x5',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Test Client for Foundry in TypeScript\nDESCRIPTION: This code snippet shows how to create and configure a Viem test client for use with the Foundry development environment. It sets up the client with the Foundry chain, Anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockTimestamp.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Using Account Hoisting with finalizeWithdrawal\nDESCRIPTION: Example showing how to use finalizeWithdrawal with an account hoisted on the wallet client, which removes the need to pass the account parameter repeatedly.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient, zksyncClient } from './config'\n \nconst hash = await walletClient.finalizeWithdrawal({\n  client: zksyncClient,\n  hash: '0x…',\n})\n```\n\n----------------------------------------\n\nTITLE: Using ENS Name Hashing Function\nDESCRIPTION: Demonstrates how to hash an ENS name using the namehash function, showing both the input and resulting hash output.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/utilities/namehash.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { namehash, normalize } from 'viem/ens'\n\nnamehash('wevm.eth')\n// '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n```\n\n----------------------------------------\n\nTITLE: Using the token Parameter with getL1TokenBalance in TypeScript\nDESCRIPTION: Example showing how to specify the token address parameter when retrieving an L1 token balance. This parameter defines which token's balance will be checked.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = await publicClient.getL1TokenBalance({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  blockTag: 'latest',\n  token: '0x5C221E77624690fff6dd741493D735a17716c26B', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Static Contract Call with Ethers.js\nDESCRIPTION: How to perform a static call on a contract method using Ethers.js. This uses callStatic to simulate a contract call without sending a transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider } from 'ethers'\nimport { wagmiContractConfig } from './abi'\n\nconst provider = getDefaultProvider()\n\nconst { abi, address } = wagmiContractConfig\nconst contract = new Contract(address, abi, provider)\nawait contract.callStatic.mint()\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID Parameter for getCapabilities in viem\nDESCRIPTION: Demonstrates how to specify a chain ID when calling getCapabilities to get capabilities for a specific blockchain network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n// ---cut---\nconst capabilities = await walletClient.getCapabilities({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  chainId: 8453, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Test Client for Viem with Foundry Chain (TypeScript)\nDESCRIPTION: This code snippet shows how to create a test client using Viem library. It configures the client with the Foundry chain, Anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setCoinbase.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Using blobsToCommitments with KZG Setup\nDESCRIPTION: Demonstrates how to use blobsToCommitments function with KZG implementation to compute commitments from blobs. Includes the main usage example and KZG setup code.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blobsToCommitments, toBlobs } from 'viem'\nimport { kzg } from './kzg'\n\nconst blobs = toBlobs({ data: '0x1234' })\nconst commitments = blobsToCommitments({ blobs, kzg })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n```\n\n----------------------------------------\n\nTITLE: Creating an Owner Account from a Private Key\nDESCRIPTION: Example of creating an owner account from a private key using viem's privateKeyToAccount function. This owner account is used to control the Smart Account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSimpleSmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n \nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Specifying Log Data for Event Parsing in viem\nDESCRIPTION: Shows how to structure the logs parameter for the parseEventLogs function. The logs array contains objects with blockNumber, data, logIndex, and topics properties that represent the raw event data from the blockchain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst topics = parseEventLogs({\n  abi: wagmiAbi,\n  logs: [{ // [!code focus]\n    blockNumber: 69420n, // [!code focus]\n    data: '0x0000000000000000000000000000000000000000000000000000000000000001', // [!code focus]\n    logIndex: 1, // [!code focus]\n    topics: [ // [!code focus]\n      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0',  // [!code focus]\n      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8' // [!code focus]\n    ] // [!code focus]\n    // ... // [!code focus]\n  }] // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using the from parameter with getContractAddress\nDESCRIPTION: Shows how to specify the deployment address using the from parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetContractAddress({\n  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',\n  nonce: 69420n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client with ERC-7739 Actions\nDESCRIPTION: This code snippet demonstrates how to configure a wallet client with ERC-7739 actions. It shows the setup for both JSON-RPC and Local accounts, including the creation of the wallet client and extension with ERC-7739 actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signTypedData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { erc7739Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: http(),\n}).extend(erc7739Actions())\n\nexport const [account] = await walletClient.getAddresses()\n// @log: ↑ JSON-RPC Account\n\n// export const account = privateKeyToAccount(...)\n// @log: ↑ Local Account\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Fee Per Gas for L1 Transaction\nDESCRIPTION: Example showing how to set the maximum fee per gas for the L1 transaction using the maxFeePerGas parameter for EIP-1559 transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  maxFeePerGas: parseGwei('20'),  // [!code focus]\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Clients for OP Stack Operations\nDESCRIPTION: Configuration setup for creating public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains. The L1 client is extended with publicActionsL1 to support OP Stack operations like waitToProve.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitToProve.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ZkSync Client with Viem\nDESCRIPTION: Shows how to create and configure a public client for ZkSync L2 network using viem. This includes setting up the chain, transport method, and extending the client with ZkSync-specific public actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getTransactionDetails.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Configuring Ranking Options in Fallback Transport\nDESCRIPTION: This example demonstrates how to customize the ranking configuration for fallback transports, including interval, sample count, timeout, and weights.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: fallback(\n    [\n      http('https://1.rpc.thirdweb.com/...'), \n      http('https://mainnet.infura.io/v3/...') \n    ],\n    {\n      rank: {\n        interval: 60_000,\n        sampleCount: 5,\n        timeout: 500,\n        weights: {\n          latency: 0.3,\n          stability: 0.7\n        }\n      }\n    }\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Key for IPC Transport in TypeScript\nDESCRIPTION: This example demonstrates how to set a custom key for the IPC Transport when creating it.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', { \n  key: 'reth-ipc',  // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Account Hoisted requestExecute Example\nDESCRIPTION: Shows how to use requestExecute with an account hoisted on the wallet client, eliminating the need to pass the account parameter with each call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient, zksyncClient } from './config'\n \nconst hash = await walletClient.requestExecute({\n  client: zksyncClient,\n  contractAddress: await zksyncClient.getBridgehubContractAddress(),\n  calldata: '0x',\n  l2Value: 7_000_000_000n,\n  l2GasLimit: 900_000n\n})\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Transport Configuration\nDESCRIPTION: Simple example of creating a WebSocket transport with a URL.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...')\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Account Configuration\nDESCRIPTION: Shows how to configure a wallet client using a JSON-RPC account from an EIP-1193 provider like MetaMask.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTypedData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: toBlobs with Data Parameter\nDESCRIPTION: Shows how to use toBlobs function with the data parameter specified as hex string\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobs } from 'viem'\n\nconst blobs = toBlobs({ \n  data: '0x...' \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Owner for Smart Account\nDESCRIPTION: Example showing how to set the owner parameter using a private key account\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = await toSoladySmartAccount({\n  client,\n  owner: privateKeyToAccount('0x...'),\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from getAccount to toAccount for Local Accounts\nDESCRIPTION: Demonstrates how to replace the deprecated getAccount function with toAccount for local account implementations where custom signing functions are used.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n- import { createWalletClient, http, getAccount } from 'viem'\n+ import { createWalletClient, http } from 'viem'\n+ import { toAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { getAddress, signMessage, signTransaction } from './sign-utils'\n\nconst privateKey = '0x...'\n- const account = getAccount({\n+ const account = toAccount({\n  address: getAddress(privateKey),\n  signMessage(message) {\n    return signMessage(message, privateKey)\n  },\n  signTransaction(transaction) {\n    return signTransaction(transaction, privateKey)\n  },\n  signTypedData(typedData) {\n    return signTypedData(typedData, privateKey)\n  }\n})\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain at Client Level for Transaction Actions in viem\nDESCRIPTION: Example showing how to hoist a Chain on the WalletClient for transaction actions like sendTransaction, which now require a chain parameter. The Chain is specified during client initialization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom, getAccount } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet, // [!code ++]\n  transport: custom(window.ethereum)\n})\n \nconst account = getAccount('0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266')\n \nconst hash = await walletClient.sendTransaction({ \n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n```\n\n----------------------------------------\n\nTITLE: Setting maxPriorityFeePerGas in Ethereum Transaction\nDESCRIPTION: Demonstrates how to set the max priority fee per gas (in wei) for an EIP-1559 transaction using parseGwei utility. The example shows a transaction call with maxPriorityFeePerGas set to 2 gwei.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\n\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Client Setup Configuration in TypeScript\nDESCRIPTION: Configuration setup for creating public and wallet clients using Viem, including chain and transport configurations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const walletClient = createWalletClient({\n  transport: custom(window.ethereum!)\n})\n\nexport const [account] = await walletClient.getAddresses()\n```\n\n----------------------------------------\n\nTITLE: Using boolToHex Function\nDESCRIPTION: Shows how to use the boolToHex shortcut function for encoding boolean values to hex, with and without size options.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { boolToHex } from 'viem'\n\nboolToHex(true)\n// \"0x1\"\n\nboolToHex(true, { size: 32 })\n// \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n```\n\n----------------------------------------\n\nTITLE: Importing publicActionsL2 Extension for OP Stack in TypeScript\nDESCRIPTION: This example shows how to import the 'publicActionsL2' extension, which provides a suite of Public Actions for development with Layer 2 (OP Stack) chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicActionsL2 } from 'viem/op-stack'\n```\n\n----------------------------------------\n\nTITLE: Message Recovery with Explicit Signature in viem\nDESCRIPTION: This code snippet focuses on the signature parameter for the recoverMessageAddress function. It demonstrates providing a hexadecimal signature string along with a message to recover the original signing address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await recoverMessageAddress({ \n  message: 'hello world',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting Configuration with Local Account\nDESCRIPTION: Configuration example showing how to hoist a local account using private key for wallet client setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/sendTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { eip712Actions } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n```\n\n----------------------------------------\n\nTITLE: Contract Instance with Ethers.js\nDESCRIPTION: Creating and using a contract instance with Ethers.js. This shows how to initialize a contract instance and use various methods like reading data and subscribing to events.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider } from 'ethers'\nimport { wagmiContractConfig } from './abi'\n\nconst provider = getDefaultProvider()\n\nconst { abi, address } = wagmiContractConfig\nconst contract = new Contract(address, abi, provider)\n\nconst supply = await contract.totalSupply()\nconst listener = (from, to, amount, event) => {\n  // ...\n}\ncontract.on('Transfer', listener)\ncontract.off('Transfer', listener)\n```\n\n----------------------------------------\n\nTITLE: hexToBytes Function Usage - TypeScript\nDESCRIPTION: Demonstrates using the hexToBytes function to convert hex strings to byte arrays\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hexToBytes } from 'viem'\n\nhexToBytes('0x48656c6c6f20576f726c6421')\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n\nhexToBytes('0x48656c6c6f20576f726c6421', { size: 32 })\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n```\n\n----------------------------------------\n\nTITLE: Creating an Owner Account from Private Key\nDESCRIPTION: Example of creating an owner account from a private key using Viem's privateKeyToAccount function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toLightSmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n \nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting for zkSync Withdrawals\nDESCRIPTION: Demonstrates how to withdraw tokens without explicitly passing the account parameter in each call by hoisting the account on the wallet client configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\nimport { legacyEthAddress } from 'viem/zksync'\n \nconst hash = await walletClient.withdraw({\n  amount: 1_000_000_000_000_000_000n,\n  token: legacyEthAddress,  \n})\n// '0x...'\n```\n\n----------------------------------------\n\nTITLE: Setting Paymaster Verification Gas Limit in User Operation\nDESCRIPTION: Shows how to set the paymasterVerificationGasLimit parameter when signing a user operation. This parameter defines the gas amount allocated for paymaster validation code.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await account.signUserOperation({\n  callData: '0xdeadbeef',\n  callGasLimit: 141653n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 15000000000n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  paymaster: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  paymasterData: '0xdeadbeef',\n  paymasterPostOpGasLimit: 69420n,\n  paymasterVerificationGasLimit: 69420n,\n  preVerificationGas: 53438n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  verificationGasLimit: 259350n,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic toBlobs Usage\nDESCRIPTION: Demonstrates basic usage of toBlobs function to transform hex data into blobs\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobs } from 'viem'\n\nconst blobs = toBlobs({ data: '0x...' })\n```\n\n----------------------------------------\n\nTITLE: Setting Next Block Base Fee Per Gas with Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the setNextBlockBaseFeePerGas function from the testClient to set the base fee for the next block. It uses the parseGwei function to convert the fee from Gwei to Wei.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockBaseFeePerGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\nimport { testClient } from './client'\n \nawait testClient.setNextBlockBaseFeePerGas({\n  baseFeePerGas: parseGwei('20')\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Legacy Transaction Type in TypeScript\nDESCRIPTION: Shows how to specify a legacy transaction type when estimating fees per gas. This returns a gasPrice estimate instead of maxFeePerGas and maxPriorityFeePerGas.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateFeesPerGas.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { gasPrice } = await publicClient.estimateFeesPerGas({\n  type: 'legacy' // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: ZKsync Smart Account Private Key Parameter Example\nDESCRIPTION: Shows how to specify the private key parameter when creating a ZKsync Smart Account. The private key parameter represents the owner's private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSinglesigSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toSinglesigSmartAccount({\n  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', \n  privateKey: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting sender for User Operation in TypeScript\nDESCRIPTION: Shows how to set the sender address for the User Operation when calling getPaymasterData. This parameter is required and of type Address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  preVerificationGas: 69420n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f', // [!code focus]\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing size function from viem library in TypeScript\nDESCRIPTION: Shows how to import the 'size' function from the viem library. This is a prerequisite step for using the function in your TypeScript code.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/size.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { size } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Balance on L1 Network using TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getL1Balance function to retrieve the balance of a specific token for an account on the L1 network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1Balance.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst balance = await publicClient.getL1Balance({\n  account\n  token: '0x5C221E77624690fff6dd741493D735a17716c26B',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing blobsToCommitments Function\nDESCRIPTION: Shows how to import the blobsToCommitments function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blobsToCommitments } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Setting changeIndex in hdKeyToAccount\nDESCRIPTION: Example showing how to specify the changeIndex option when creating an HD Account, which affects the change index used in the derivation path (m/44'/60'/0'/${changeIndex}/0).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { hdKeyToAccount } from 'viem/accounts'\n// ---cut---\nconst hdKey = HDKey.fromMasterSeed(...)\n\nconst account = hdKeyToAccount(\n  hdKey,\n  {\n    accountIndex: 1,\n    addressIndex: 6,\n    changeIndex: 2 // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Optional Index Parameter for isWithdrawalFinalized in viem\nDESCRIPTION: Example showing how to specify the optional index parameter when checking finalization status for multiple withdrawals within a single transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.isWithdrawalFinalized({\n  client: zksyncClient,\n  hash: '0x…',\n  index: 0n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for a Simple Transfer in TypeScript\nDESCRIPTION: Demonstrates how to use the estimateGas function from a public client to estimate gas for a simple Ether transfer transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst gas = await publicClient.estimateGas({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Including Viem via CDN in HTML\nDESCRIPTION: Example of importing Viem directly from an ESM-compatible CDN (esm.sh) using a script tag in HTML. This method is useful when not using a package manager.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/installation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { createClient } from 'https://esm.sh/viem'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuration with JSON-RPC Account Hoisting\nDESCRIPTION: Demonstrates how to configure the wallet client with a JSON-RPC account hoisted from an EIP-1193 provider, allowing simplified function calls.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/zksync'\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\n// Retrieve Account from an EIP-1193  Provider. \nconst [account] = await window.ethereum.request({  \n  method: 'eth_requestAccounts' \n}) \n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum) \n}).extend(walletActionsL1())\n```\n\n----------------------------------------\n\nTITLE: Using Block Tag for Balance Retrieval in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a block tag when retrieving an account's balance. The balance will be fetched for the account at the specified block tag.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBalance.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = await publicClient.getBalance({\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  blockTag: 'safe'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing serializeTransaction from viem\nDESCRIPTION: Shows how to import the serializeTransaction function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeTransaction } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using opaqueDataToDepositData to parse deposit data\nDESCRIPTION: Demonstrates how to convert a hex string into structured deposit data containing mint value, value, gas, isCreation flag, and data. The function extracts and parses these values from the provided opaque data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/opaqueDataToDepositData.md#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { opaqueDataToDepositData } from \"viem\";\n\nconst opaqueData =\n  \"0x00000000000000000000000000000000000000000000000000470DE4DF82000000000000000000000000000000000000000000000000000000470DE4DF82000000000000000186A00001\";\n\nconst depositData = opaqueDataToDepositData(opaqueData);\n// {\n//   mint: 20000000000000000n,\n//   value: 20000000000000000n,\n//   gas: 100000n,\n//   isCreation: false,\n//   data: '0x01',\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI for Deployment in TypeScript\nDESCRIPTION: Shows how to define a contract ABI for use in deployment. This example shows a simple constructor without arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for Wallet Client\nDESCRIPTION: Configuration setup showing how to create a wallet client with ERC7715 actions support.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/grantPermissions.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window'\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { erc7715Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(erc7715Actions())\n\nexport const [account] = await walletClient.getAddresses()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transaction Receipt on Ethereum L1 with Viem\nDESCRIPTION: Code that shows how to execute a deposit transaction on Ethereum L1 and wait for the transaction receipt. This is necessary to confirm that the transaction was successfully processed on L1 before proceeding with L2 operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Viem Clients.\nimport { \n  account, \n  publicClientL1, \n  publicClientL2,\n  walletClientL1 \n} from './config'\n\n// Build parameters for the transaction on the L2.\nconst args = await publicClientL2.buildDepositTransaction({\n  mint: parseEther('1'),\n  to: account.address,\n})\n\n// Execute the deposit transaction on the L1. \nconst hash = await walletClientL1.depositTransaction(args) \n\n// Wait for the L1 transaction to be processed. \nconst receipt = await publicClientL1.waitForTransactionReceipt({ hash })\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Public Client\nDESCRIPTION: Setup for creating a public client instance with mainnet configuration and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getCode.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Direction Parameter with pad Function\nDESCRIPTION: Shows how to use the 'dir' parameter to pad zeros to the right (trailing) instead of the default left (leading) padding.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/pad.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npad('0xa4e12a45', {\n  dir: 'right'\n})\n// 0xa4e12a4500000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Encoding Event Filter Topics in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.encodeFilterTopics to encode event topics for filtering logs. This allows creating filters for specific event parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst data = iface.encodeFilterTopics('Transfer', [\n  null,\n  '0x8ba1f109551bD432803012645Ac136ddd64DBA72'\n])\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Account Configuration for Cross-Chain Operations\nDESCRIPTION: Configuration for a JSON-RPC based account setup that enables cross-chain operations between Ethereum Mainnet and Optimism. This setup uses an EIP-1193 provider like MetaMask and extends clients with specialized actions for the OP Stack.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Viem modules.\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider. \nexport const [account] = await window.ethereum.request({ \n  method: 'eth_requestAccounts' \n}) \n\nexport const clientL1 = createClient({\n  account, \n  chain: mainnet,\n  transport: fallback([custom(window.ethereum), http()])\n})\n  .extend(publicActions)\n  .extend(walletActionsL1())\n\nexport const clientL2 = createClient({\n  chain: optimism,\n  transport: http()\n})\n  .extend(publicActions)\n  .extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for OP Stack Clients in TypeScript\nDESCRIPTION: Configuration for creating public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains. The L1 client is extended with publicActionsL1 to support OP Stack specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Viem Test Client in TypeScript\nDESCRIPTION: This snippet shows how to create a testClient instance using the Viem library. It configures the client with the Foundry chain, Anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBalance.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Public Client Configuration for ENS Resolution\nDESCRIPTION: Setup code showing how to configure the viem public client for ENS resolution on the Ethereum mainnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating ZKsync Smart Account with toSmartAccount Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a ZKsync Smart Account using the toSmartAccount function. It requires an address and a custom sign function as parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSmartAccount } from 'viem/zksync'\n\nconst account = toSmartAccount({\n  address: '0xf39Fd6e51aad8F6F4ce6aB8827279cffFb92266', \n  async sign({ hash }) {\n    // ... signing logic\n    return '0x...'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Number Parameter for getRawBlockTransaction\nDESCRIPTION: Example showing how to specify the block number parameter when using getRawBlockTransaction. The block number indicates which block's transaction data should be retrieved.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getRawBlockTransactions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst rawTx = await client.getRawBlockTransaction({\n  number: 1  // [!code focus]\n});\n```\n\n----------------------------------------\n\nTITLE: Viem Public Client Setup\nDESCRIPTION: Configuration for creating a Viem public client instance connected to the Ethereum mainnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using isAddressEqual Function to Compare Ethereum Addresses in TypeScript\nDESCRIPTION: Demonstrates how to use the isAddressEqual function to compare two Ethereum addresses. The function returns a boolean indicating whether the addresses are equal, ignoring case differences in checksummed addresses.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddressEqual.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAddressEqual } from 'viem'\n\nisAddressEqual('0xa5cc3c03994db5b0d9a5eEdD10Cabab0813678ac', '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC')\n// true\n```\n\n----------------------------------------\n\nTITLE: Installing toEventSelector from viem in TypeScript\nDESCRIPTION: Shows how to import the toEventSelector function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventSelector.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toEventSelector } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport with Custom Key\nDESCRIPTION: Setting a custom key for the WebSocket transport instance.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', { \n  key: 'alchemy',\n})\n```\n\n----------------------------------------\n\nTITLE: Reset with JSON RPC URL Parameter\nDESCRIPTION: Example of resetting a fork with a specific JSON RPC URL endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/reset.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.reset({\n  blockNumber: 69420n,\n  jsonRpcUrl: 'https://1.rpc.thirdweb.com'\n})\n```\n\n----------------------------------------\n\nTITLE: Preparing Transaction Request with Custom Nonce in TypeScript\nDESCRIPTION: Demonstrates how to prepare a transaction request with a specified nonce value. The example shows setting a custom nonce of 69 along with a destination address and transaction value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = await walletClient.prepareTransactionRequest({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n,\n  nonce: 69\n})\n```\n\n----------------------------------------\n\nTITLE: Paymaster Client with Context Configuration\nDESCRIPTION: Shows how to create and use a Paymaster client with custom context data for gas estimation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://public.pimlico.io/v2/11155111/rpc')\n})\n\nconst hash = await bundlerClient.estimateUserOperationGas({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: paymasterClient,\n  paymasterContext: {\n    policyId: 'abc123'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing toBlobSidecars Function\nDESCRIPTION: Shows how to import the toBlobSidecars function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobSidecars.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobSidecars } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using getL2HashFromPriorityOp with transaction receipt parameter\nDESCRIPTION: Shows how to use the getL2HashFromPriorityOp function with focus on the transaction receipt parameter, which contains information about the L1 transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst l2Hash = getL2HashFromPriorityOp(\n  receipt, // [!code focus]\n  '0x14b947814912c71bdbc3275c143a065d2ecafaba'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Client with Custom RPC Schema\nDESCRIPTION: Shows how to set up a test client with a custom RPC schema for specialized API methods.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rpcSchema } from 'viem'\n\ntype CustomRpcSchema = [{\n  Method: 'eth_wagmi',\n  Parameters: [string]\n  ReturnType: string\n}]\n\nconst client = createTestClient({\n  chain: foundry,\n  rpcSchema: rpcSchema<CustomRpcSchema>(),\n  transport: http()\n})\n\nconst result = await client.request({\n  method: 'eth_wa\n  params: ['hello'],\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Account for getAllBalances\nDESCRIPTION: This snippet demonstrates how to specify an account when calling the getAllBalances function. It uses a string address as the account parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getAllBalances.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst balances = await client.getAllBalances({\n  account: \"0x36615Cf349d7F6344891B1e7CA7C72883F5dc049\"\n});\n```\n\n----------------------------------------\n\nTITLE: Importing extractWithdrawalMessageLogs Function\nDESCRIPTION: Shows how to import the extractWithdrawalMessageLogs function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractWithdrawalMessageLogs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractWithdrawalMessageLogs } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Signing UTF-8 Message with Private Key\nDESCRIPTION: Shows how to sign a plain text UTF-8 message using a private key account. The message is automatically converted to its UTF-8 representation before signing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst account = privateKeyToAccount('0x...')\n\nconst signature = await account.signMessage({\n  message: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing permissionless.js Package\nDESCRIPTION: Different package manager commands to install the permissionless library which is required for Trust Smart Wallet implementation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toTrustSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add permissionless\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Mining in Viem Test Client\nDESCRIPTION: Example showing how to enable automatic mining of new blocks for transactions using the setAutomine function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setAutomine.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setAutomine(true)\n```\n\n----------------------------------------\n\nTITLE: Extending Wallet Client with Experimental Actions\nDESCRIPTION: Demonstrates how to extend a wallet client with experimental EIP-5792 actions for additional functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { base } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental'\n\nconst client = createWalletClient({\n  chain: base,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions())\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Nonce in TypeScript\nDESCRIPTION: Demonstrates how to specify a nonce when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  nonce: 69\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying a Chain for the Bundler Client\nDESCRIPTION: Demonstrates how to specify a blockchain chain when creating a Bundler Client. This parameter defines which network the bundler client will connect to.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem' \nimport { createBundlerClient } from 'viem/account-abstraction'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nimport { mainnet } from 'viem/chains' \n\nconst bundlerClient = createBundlerClient({\n  chain: mainnet, // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Pool Content with Viem\nDESCRIPTION: Example showing how to retrieve transaction pool content using a test client. Returns details of pending and scheduled transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getTxpoolContent.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nconst content = await testClient.getTxpoolContent()\n```\n\n----------------------------------------\n\nTITLE: Installing toFunctionSignature from viem\nDESCRIPTION: Shows how to import the toFunctionSignature function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toFunctionSignature } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing isErc6492Signature utility from viem\nDESCRIPTION: Shows how to import the isErc6492Signature utility function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isErc6492Signature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isErc6492Signature } from 'viem/utils'\n```\n\n----------------------------------------\n\nTITLE: Installing permissionless.js library\nDESCRIPTION: Command line instructions for installing the permissionless.js library using different package managers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toLightSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add permissionless\n```\n\n----------------------------------------\n\nTITLE: Setting Nonce Parameter Example\nDESCRIPTION: Example showing the nonce parameter usage in setNonce function. Demonstrates setting a specific nonce value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNonce.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.setNonce({\n  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  nonce: 420\n})\n```\n\n----------------------------------------\n\nTITLE: Importing defineKzg Function in TypeScript\nDESCRIPTION: Shows how to import the defineKzg function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/defineKzg.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineKzg } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Getting Function Signature Hash in Viem\nDESCRIPTION: Demonstrates how to use viem's toFunctionHash function to get the function selector (4-byte signature) for a function, equivalent to ethers.js Interface.getSighash method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toFunctionHash } from 'viem'\n\nconst hash = toFunctionHash('function ownerOf(uint256)')\n```\n\n----------------------------------------\n\nTITLE: Installing KZG Dependencies\nDESCRIPTION: Commands for installing KZG bindings (c-kzg or kzg-wasm) using different package managers.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/guides/blob-transactions.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i c-kzg\n# or\nnpm i kzg-wasm\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Narrowing for Block Return Types in TypeScript\nDESCRIPTION: Example showing how block return types have been narrowed in viem 1.5.0 for better type safety. When includeTransactions is true, the transactions property is typed more specifically, and when blockTag is 'pending', certain properties are correctly typed as null.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst block = publicClient.getBlock({ includeTransactions: true });\nblock.transactions;\n//    ^? Hash[] | Transaction[]\nblock.transactions[0].blockNumber;\n//                    ^? bigint | null\n\n// After\nconst block = publicClient.getBlock({ includeTransactions: true });\nblock.transactions;\n//    ^? Transaction[]\nblock.transactions[0].blockNumber;\n//                    ^? bigint\n\n// Before\nconst block = publicClient.getBlock({\n  blockTag: \"pending\",\n  includeTransactions: true,\n});\nblock.number;\n//    ^? number | null\nblock.transactions[0].blockNumber;\n//                    ^? bigint | null\n\n// After\nconst block = publicClient.getBlock({\n  blockTag: \"pending\",\n  includeTransactions: true,\n});\nblock.number;\n//    ^? null\nblock.transactions[0].blockNumber;\n//                    ^? null\n```\n\n----------------------------------------\n\nTITLE: Example of Using the transaction Parameter\nDESCRIPTION: Demonstrates the transaction parameter usage with detailed transaction information for serialization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/serializeTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst serialized = serializeTransaction({\n  chainId: 1,\n  gas: 21001n,\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  nonce: 69,\n  to: '0x1234512345123451234512345123451234512345',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Public Client Configuration for ENS\nDESCRIPTION: Setup for creating a public client instance with mainnet configuration for ENS interactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsAvatar.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\n\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getContractAddress from viem\nDESCRIPTION: Shows how to import the getContractAddress function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContractAddress } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using numberToHex Function\nDESCRIPTION: Demonstrates the usage of the numberToHex shortcut function for encoding numbers and bigints to hex values, with and without size options.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { numberToHex } from 'viem'\n\nnumberToHex(420)\n// \"0x1a4\"\n\nnumberToHex(4206942069420694206942069420694206942069n)\n// \"0xc5cf39211876fb5e5884327fa56fc0b75\"\n\nnumberToHex(420, { size: 32 })\n// \"0x00000000000000000000000000000000000000000000000000000000000001a4\"\n\nnumberToHex(4206942069420694206942069420694206942069n, { size: 32 })\n// \"0x0000000000000000000000000000000c5cf39211876fb5e5884327fa56fc0b75\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Test Client\nDESCRIPTION: Setup code for creating a test client instance with Foundry chain configuration and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/increaseTime.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Installing toEventSignature Module\nDESCRIPTION: Import statement showing how to include the toEventSignature function from viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toEventSignature } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Setting Ranking Interval in Fallback Transport\nDESCRIPTION: This example demonstrates how to set the polling interval for ranking in fallback transports.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  rank: {\n    interval: 5_000\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using opaqueDataToDepositData Function\nDESCRIPTION: Demonstrates how to use the opaqueDataToDepositData function to decode opaque deposit data from a TransactionDeposited event log.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/fromOpaqueData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { opaqueDataToDepositData } from 'viem'\n\nconst data = opaqueDataToDepositData('0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000045000000000000526c01deadbeef')\n```\n\n----------------------------------------\n\nTITLE: Signing a Blob Transaction in TypeScript\nDESCRIPTION: Illustrates how to sign a blob transaction using viem. It includes setting up KZG for blob transactions and specifying the blob data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { toBlobs, setupKzg, stringToHex } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nconst kzg = setupKzg(cKzg, mainnetTrustedSetupPath) \n\nconst hash = await account.signTransaction({\n  blobs: toBlobs({ data: stringToHex('blobby blob!') }), // [!code focus]\n  kzg,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Public Client for Account Abstraction\nDESCRIPTION: Sets up a Public Client to interact with the Ethereum network for Smart Account operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Pre-computed Blobs to Sidecars\nDESCRIPTION: Shows how to convert pre-computed blobs, commitments and proofs into blob sidecars using the lower-level API.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobSidecars.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  blobsToCommitments, \n  blobsToProofs,\n  toBlobSidecars, \n  toBlobs \n} from 'viem'\nimport { kzg } from './kzg'\n\nconst blobs = toBlobs({ data: '0x...' })\nconst commitments = blobsToCommitments({ blobs, kzg })\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n```\n\n----------------------------------------\n\nTITLE: Using Code Parameter in Call Action\nDESCRIPTION: Example of specifying the code parameter when making a call. This parameter provides bytecode to perform the call against, enabling deployless contract interactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  code: '0x...', // [!code focus]\n  data: '0xdeadbeef',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing hashTypedData Function\nDESCRIPTION: Shows how to import the hashTypedData function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashTypedData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashTypedData } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Setting custom version for commitmentToVersionedHash\nDESCRIPTION: Example demonstrating how to set a custom version number when transforming a commitment to a versioned hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentToVersionedHash.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst blobs = toBlobs({ data: '0x1234' })\nconst [commitment] = blobsToCommitments({ blobs, kzg })\nconst versionedHashes = commitmentToVersionedHash({ \n  commitment, \n  version: 69, \n})\n```\n\n----------------------------------------\n\nTITLE: Importing opaqueDataToDepositData Function\nDESCRIPTION: Shows how to import the opaqueDataToDepositData function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/fromOpaqueData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { opaqueDataToDepositData } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using Custom RPC Schema with Paymaster Client\nDESCRIPTION: Configuring a Paymaster Client with a custom RPC schema to define typed JSON-RPC methods. This allows for type-safe RPC requests with custom methods.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPaymasterClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\nimport { rpcSchema } from 'viem'\n\ntype CustomRpcSchema = [{\n  Method: 'eth_wagmi',\n  Parameters: [string]\n  ReturnType: string\n}]\n\nconst client = createPaymasterClient({\n  rpcSchema: rpcSchema<CustomRpcSchema>(),\n  transport: http('https://public.pimlico.io/v2/11155111/rpc')\n})\n\nconst result = await client.request({\n  method: 'eth_wa\n//               ^|\n\n  params: ['hello'],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getAbiItem Function from viem\nDESCRIPTION: Shows how to import the getAbiItem function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAbiItem } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Raw Message Verification Example\nDESCRIPTION: Demonstrates how to verify a message using raw hexadecimal data instead of UTF-8 string representation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await publicClient.verifyMessage({\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: { raw: '0x68656c6c6f20776f726c64' },\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Mnemonic Parameter\nDESCRIPTION: Create a mnemonic account by providing the BIP-39 mnemonic phrase to the mnemonicToAccount function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mnemonicToAccount } from 'viem/accounts'\n// ---cut---\nconst account = mnemonicToAccount(\n  'legal winner thank year wave sausage worth useful legal winner thank yellow' // [!code focus]\n)\n```\n\n----------------------------------------\n\nTITLE: Bundler Client Configuration\nDESCRIPTION: Shows how to configure the bundler client with necessary imports and settings.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n\nexport const account = await toCoinbaseSmartAccount({\n  client,\n  owners: [privateKeyToAccount('0x...')],\n})\n\nexport const bundlerClient = createBundlerClient({\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Max Fee Per Gas in TypeScript\nDESCRIPTION: Demonstrates how to set a maximum fee per gas for an EIP-1559 transaction when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  maxFeePerGas: parseGwei('20'),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing serializeTransaction from viem/op-stack\nDESCRIPTION: Shows how to import the serializeTransaction function from the viem/op-stack module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/serializeTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeTransaction } from 'viem/op-stack'\n```\n\n----------------------------------------\n\nTITLE: Using getGeneralPaymasterInput with ByteArray in TypeScript\nDESCRIPTION: Shows how to use the getGeneralPaymasterInput function with a ByteArray as the innerInput parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getGeneralPaymasterInput.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = getGeneralPaymasterInput({\n      innerInput: new Uint8Array([0, 1, 2, 3, 4, 5]), // [!code focus]\n    })\n```\n\n----------------------------------------\n\nTITLE: Building Deposit Transaction Parameters for Optimism\nDESCRIPTION: This snippet demonstrates how to build the deposit transaction parameters for transferring 1 ETH to Optimism. It uses the publicClientL2 to construct the necessary arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Viem Clients.\nimport { publicClientL2 } from './config'\n\n// Build parameters for the transaction on the L2.\nconst args = await publicClientL2.buildDepositTransaction({\n  mint: parseEther('1'),\n  to: account.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Address Parameter Example\nDESCRIPTION: Example showing the address parameter usage in setNonce function. Demonstrates specifying the target account address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNonce.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.setNonce({\n  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  nonce: 420\n})\n```\n\n----------------------------------------\n\nTITLE: Importing the generateSiweNonce Function from viem/siwe in TypeScript\nDESCRIPTION: Shows how to import the generateSiweNonce function from the viem/siwe library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/generateSiweNonce.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateSiweNonce } from 'viem/siwe'\n```\n\n----------------------------------------\n\nTITLE: Using getAddress Function to Checksum Encode an Ethereum Address\nDESCRIPTION: Demonstrates how to use the getAddress function to convert an Ethereum address into its checksum encoded form. The function takes a string address as input and returns the checksummed address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAddress } from 'viem'\n\ngetAddress('0xa5cc3c03994db5b0d9a5eEdD10Cabab0813678ac')\n// '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'\n```\n\n----------------------------------------\n\nTITLE: Markdown Link for StackBlitz Example\nDESCRIPTION: Markdown code that creates a clickable link to open the transaction sending example in StackBlitz editor.\nSOURCE: https://github.com/wevm/viem/blob/main/examples/smart-accounts_coinbase/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions)\n```\n\n----------------------------------------\n\nTITLE: Authorizing Contract Designation in TypeScript\nDESCRIPTION: This snippet demonstrates how to sign an Authorization to designate a Contract to an Account. It uses an existing EOA to sign the Authorization for delegation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\nimport { contractAddress } from './contract'\n\nconst eoa = privateKeyToAccount('0x...')\n \nconst authorization = await walletClient.signAuthorization({\n  account: eoa,\n  contractAddress,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting maxFeePerGas for User Operation in TypeScript\nDESCRIPTION: Demonstrates how to set the maximum fee per gas for User Operation execution when calling getPaymasterData. This parameter is optional and of type bigint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n, // [!code focus]\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Address from JSON-RPC Account\nDESCRIPTION: Demonstrates how to get the address from a JSON-RPC account using the Wallet Client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst [address] = await client.getAddresses()\n// or: const [address] = await client.requestAddresses()\n```\n\n----------------------------------------\n\nTITLE: Advanced Paymaster Gas Configuration\nDESCRIPTION: Demonstrates setting gas limits for paymaster post-operation and verification processes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await bundlerClient.estimateUserOperationGas({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n  paymasterData: '0xdeadbeef',\n  paymasterPostOpGasLimit: 69420n,\n  paymasterVerificationGasLimit: 69420n\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of isAddress Function\nDESCRIPTION: Demonstrates the basic usage of the isAddress function to validate an Ethereum address. Returns true for a valid checksum address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAddress } from 'viem'\n\nisAddress('0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC')\n// true\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client with Custom Cache Time\nDESCRIPTION: Sets up a Public Client with a custom cache time for stored data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst publicClient = createPublicClient({\n  cacheTime: 10_000,\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a viem Client with zksync Chain for L2 Transactions\nDESCRIPTION: Configuration for creating a public client with zksync chain and extending it with L2-specific public actions. This setup is required before calling getRawBlockTransaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getRawBlockTransactions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Public Client Configuration Setup\nDESCRIPTION: Setup code for creating a public client instance configured for the Ethereum mainnet using HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\n\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for waitForUserOperationReceipt\nDESCRIPTION: This snippet demonstrates how to set a timeout value (in milliseconds) when waiting for a User Operation receipt. The timeout parameter specifies the maximum time to wait before stopping the polling process, useful for preventing indefinite waiting.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n\nconst receipt = await bundlerClient.waitForUserOperationReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  timeout: 30_000\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Account Parameter for getCapabilities in viem\nDESCRIPTION: Demonstrates how to explicitly specify an account address when calling getCapabilities. This is an alternative to hoisting the account on the wallet client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n// ---cut---\nconst capabilities = await walletClient.getCapabilities({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom HD Derivation Path\nDESCRIPTION: Specify a complete custom HD derivation path instead of individual indices to have full control over the key derivation process when creating a mnemonic account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mnemonicToAccount } from 'viem/accounts'\n// ---cut---\nconst account = mnemonicToAccount(\n  'legal winner thank year wave sausage worth useful legal winner thank yellow',\n  {\n    path: \"m/44'/60'/5'/0/2\" // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Block Number in TypeScript\nDESCRIPTION: Shows how to specify a block number when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  blockNumber: 15121123n,\n})\n```\n\n----------------------------------------\n\nTITLE: Local Account Configuration\nDESCRIPTION: Example showing how to configure wallet client with a local account using a private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/writeContract.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { eip712WalletActions } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n```\n\n----------------------------------------\n\nTITLE: Importing parseTransaction Function from Viem\nDESCRIPTION: Shows how to import the parseTransaction function from the Viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/parseTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseTransaction } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using BlockTag Parameter in Call Action\nDESCRIPTION: Example of specifying the blockTag parameter when making a call. This allows performing the call against a specific block tag like 'latest', 'safe', or 'finalized'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  blockTag: 'safe', // [!code focus]\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing IPC Transport in TypeScript\nDESCRIPTION: This snippet shows how to import the IPC Transport function from the viem/node module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ipc } from 'viem/node'\n```\n\n----------------------------------------\n\nTITLE: Test Client Configuration Setup\nDESCRIPTION: Configuration setup for the test client using viem with Foundry chain and Anvil mode. Creates a test client instance with HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setIntervalMining.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Using getL2TransactionHashes with Logs Parameter in TypeScript\nDESCRIPTION: This snippet shows how to call the getL2TransactionHashes function with the logs parameter, which is an array of L1 logs extracted from a transaction receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getL2TransactionHashes.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst l2Hashes = getL2TransactionHash({ \n  logs: receipt.logs // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Public Actions for Layer 1 Interaction\nDESCRIPTION: Imports public actions specifically designed for Layer 1 chains to interact with Layer 2 protocols like ZKsync. These actions provide L1-to-L2 bridging and communication functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicActionsL1 } from 'viem/zksync'\n```\n\n----------------------------------------\n\nTITLE: Importing decodeAbiParameters from viem\nDESCRIPTION: Shows how to import the decodeAbiParameters function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeAbiParameters } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing toAccount Function in TypeScript\nDESCRIPTION: Shows how to import the toAccount function from the viem/accounts module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toAccount } from 'viem/accounts'\n```\n\n----------------------------------------\n\nTITLE: ABI Definition for Error Encoding\nDESCRIPTION: Shows the ABI structure required for encoding the InvalidTokenError with a string reason parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeErrorResult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: \"reason\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tname: \"InvalidTokenError\",\n\t\ttype: \"error\"\n\t},\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Validating Addresses in Viem\nDESCRIPTION: Demonstrates how to use viem's isAddress function to check if a string is a valid Ethereum address, equivalent to ethers.js utils.isAddress method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAddress } from 'viem'\n\nconst address = isAddress('0x8ba1f109551bd432803012645ac136ddd64dba72')\n```\n\n----------------------------------------\n\nTITLE: Simple ABI Function Result Encoding in TypeScript\nDESCRIPTION: Shows how to encode function results when working with a single ABI item, where functionName becomes optional.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionResult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionResult } from 'viem';\n\nconst abiItem = {\n  inputs: [{ name: 'owner', type: 'address' }],\n  name: 'balanceOf',\n  outputs: [{ name: '', type: 'uint256' }],\n  stateMutability: 'view',\n  type: 'function',\n}\n\nconst data = encodeFunctionResult({\n  abi: wagmiAbi,\n  value: ['0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting custom version number in commitmentsToVersionedHashes\nDESCRIPTION: Demonstrates how to customize the version number tag for the versioned hashes instead of using the default value of 1.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst blobs = toBlobs({ data: '0x1234' })\nconst commitments = blobsToCommitments({ blobs, kzg })\nconst versionedHashes = commitmentsToVersionedHashes({ \n  commitments, \n  version: 69, \n})\n```\n\n----------------------------------------\n\nTITLE: Importing toSmartAccount from viem/account-abstraction\nDESCRIPTION: Shows how to import the toSmartAccount function from the viem/account-abstraction module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSmartAccount } from 'viem/account-abstraction'\n```\n\n----------------------------------------\n\nTITLE: Parsing a function signature with parseAbiItem\nDESCRIPTION: Demonstrates how to use parseAbiItem to parse a human-readable function signature into a structured ABI item. The example shows parsing a 'balanceOf' function that takes an address parameter and returns a uint256.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiItem.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\n\nconst abiItem = parseAbiItem(\n  //  ^? const abiItem: { name: \"balanceOf\"; type: \"function\"; stateMutability: \"view\";...\n  'function balanceOf(address owner) view returns (uint256)',\n)\n```\n\n----------------------------------------\n\nTITLE: Importing isAddress Function in TypeScript\nDESCRIPTION: How to import the isAddress function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAddress } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing getAddress Function from viem in TypeScript\nDESCRIPTION: Shows how to import the getAddress function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAddress } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Hoisting Account to Wallet Client\nDESCRIPTION: Shows how to simplify transaction code by hoisting an account to the wallet client level rather than passing it to each transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnnet } from 'viem/chains'\n\nconst [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n\nconst client = createWalletClient({\n+ account,\n  chain: mainnet,\n  transport: http()\n})\n\nconst hash = await client.sendTransaction({\n- account,\n  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('0.001')\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating L1 Gas for L2 Contract Write in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the estimateContractL1Gas function to estimate the L1 data gas for an L2 contract write operation. It imports necessary dependencies and configurations, then calls the function with required parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Gas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst l1Fee = await publicClient.estimateContractL1Gas({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  account,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing ABI Items in Viem\nDESCRIPTION: Demonstrates how to use viem's getAbiItem function to access specific functions and events from an ABI, equivalent to ethers.js Interface methods.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAbiItem } from 'viem'\nimport { abi } from './abi'\n\ngetAbiItem({ abi, name: 'transferFrom' })\ngetAbiItem({ abi, name: 'Transfer' })\n```\n\n----------------------------------------\n\nTITLE: Setting Paymaster Post-Operation Gas Limit in User Operation\nDESCRIPTION: Demonstrates setting the paymasterPostOpGasLimit parameter when signing a user operation. This parameter specifies the amount of gas allocated for paymaster post-operation code.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await account.signUserOperation({\n  callData: '0xdeadbeef',\n  callGasLimit: 141653n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 15000000000n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  paymaster: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  paymasterData: '0xdeadbeef',\n  paymasterPostOpGasLimit: 69420n,\n  paymasterVerificationGasLimit: 0n,\n  preVerificationGas: 53438n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  verificationGasLimit: 259350n,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Checksummed Addresses in Viem\nDESCRIPTION: Demonstrates how to use viem's getAddress function to convert an address to its checksummed format, equivalent to ethers.js utils.getAddress method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAddress } from 'viem'\n\nconst address = getAddress('0x8ba1f109551bd432803012645ac136ddd64dba72')\n```\n\n----------------------------------------\n\nTITLE: Setting signature Parameter in User Operation\nDESCRIPTION: Demonstrates setting the signature for a User Operation. The signature parameter is of type Hex and contains the cryptographic signature for the operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  preVerificationGas: 69420n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Test Client for Foundry in TypeScript\nDESCRIPTION: This code sets up a Viem test client configured for the Foundry development environment. It uses the HTTP transport and is set to 'anvil' mode, which is typically used for local blockchain simulation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/revert.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Setting primaryType parameter in wrapTypedDataSignature\nDESCRIPTION: Example demonstrating how to set the primaryType parameter in wrapTypedDataSignature. The primaryType specifies which type from the types object to use as the main structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = wrapTypedDataSignature({\n  domain,\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [ \n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail', \n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  verifierDomain: {\n    name: 'Smart Account',\n    version: '1',\n    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',\n    chainId: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client with L2 Support\nDESCRIPTION: Setup for creating a public client configured for an L2 network (Base in this example) with the OP Stack extensions needed for L2-specific operations like total gas estimation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalGas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { base } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/op-stack'\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n\nexport const publicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Configuring maxPriorityFeePerGas in Viem Client Execute\nDESCRIPTION: Shows how to set both maxFeePerGas and maxPriorityFeePerGas for transaction execution. The priority fee is set to 2 gwei while total fee is 20 gwei.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  calls: [ \n    { \n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n      value: parseEther('1')\n    }, \n    { \n      data: '0xdeadbeef', \n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n    }, \n  ], \n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n})\n```\n\n----------------------------------------\n\nTITLE: Config Setup with JSON-RPC Account for OP Stack Operations\nDESCRIPTION: Configuration example showing how to set up clients with a JSON-RPC account hoisted at the client level. This eliminates the need to pass account information in every operation and simplifies the OP Stack workflow.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, createPublicClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Trimming trailing zero bytes with custom direction\nDESCRIPTION: Shows how to use the 'trim' function with a custom direction parameter to remove trailing zero bytes from a hex value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/trim.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntrim('0xa4e12a4510000000000000000000000000000000000000000000000000000000', {\n  dir: 'right'\n})\n// 0xa4e12a4510\n```\n\n----------------------------------------\n\nTITLE: Importing hashAuthorization Function\nDESCRIPTION: Shows how to import the hashAuthorization utility from the viem/utils package.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashAuthorization } from 'viem/utils'\n```\n\n----------------------------------------\n\nTITLE: Setting Paymaster Data for User Operation in TypeScript\nDESCRIPTION: Demonstrates how to set paymaster data when using a paymaster address. This allows for custom call data to be executed on the Paymaster contract.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n  paymasterData: '0xdeadbeef', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using the nonce parameter with getContractAddress\nDESCRIPTION: Shows how to specify the transaction nonce for contract deployment.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetContractAddress({\n  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',\n  nonce: 69420n\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying output format in commitmentToVersionedHash\nDESCRIPTION: Example showing how to specify the output format ('bytes') when transforming a commitment to a versioned hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentToVersionedHash.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst blobs = toBlobs({ data: '0x1234' })\nconst [commitment] = blobsToCommitments({ blobs, kzg })\nconst versionedHashes = commitmentToVersionedHash({ \n  commitment, \n  to: 'bytes' \n})\nversionedHashes\n```\n\n----------------------------------------\n\nTITLE: Output Type Specification\nDESCRIPTION: Shows how to specify the output type for the commitments using the 'to' parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blobsToCommitments, toBlobs } from 'viem'\n\nconst commitments = blobsToCommitments({ \n  blobs: toBlobs({ data: '0x1234' }),\n  kzg, \n  to: 'bytes',\n})\n```\n\n----------------------------------------\n\nTITLE: Computing Source Hash for Deposit Transactions\nDESCRIPTION: Demonstrates how to compute source hashes for both userDeposit and l1InfoDeposit domains using the getSourceHash function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSourceHash } from 'viem'\n\n// User Deposit\nconst sourceHash = getSourceHash({\n  domain: 'userDeposit',\n  l1BlockHash:\n    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',\n  l1LogIndex: 196,\n})\n\n// L1 attributes deposited\nconst sourceHash = getSourceHash({\n  domain: 'l1InfoDeposit',\n  l1BlockHash:\n    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',\n  sequenceNumber: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing the trim function from viem\nDESCRIPTION: Shows how to import the 'trim' function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/trim.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { trim } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with String Input\nDESCRIPTION: Example demonstrating how to sign a message provided as a string. By default, viem signs the UTF-8 representation of the message according to the EIP-191 standard.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst signature = await walletClient.signMessage({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: 'hello world', \n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fromBytes\nDESCRIPTION: Demonstrates converting byte arrays to different data types using fromBytes function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromBytes } from 'viem'\n\nfromBytes(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), \n  'string'\n)\n// 'Hello world'\n\nfromBytes(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), \n  'hex'\n)\n// '0x48656c6c6f20576f726c6421'\n\nfromBytes(new Uint8Array([1, 164]), 'number')\n// 420\n\nfromBytes(new Uint8Array([1]), 'boolean')\n// true\n```\n\n----------------------------------------\n\nTITLE: Basic ripemd160 Usage Examples\nDESCRIPTION: Examples showing how to use ripemd160 function with both Uint8Array and hex string inputs. Returns hex string output by default.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/ripemd160.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ripemd160 } from 'viem'\n\nripemd160(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n// 0x8476ee4631b9b30ac2754b0ee0c47e161d3f724c\n\nripemd160('0xdeadbeef')\n// 0x226821c2f5423e11fe9af68bd285c249db2e4b5a\n```\n\n----------------------------------------\n\nTITLE: Retrieving L1 Token Balance Example in TypeScript\nDESCRIPTION: Example of retrieving a token balance held by a contract on L1 using the getL1TokenBalance method from a public client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst balance = await publicClient.getL1TokenBalance({\n  account\n  token: '0x5C221E77624690fff6dd741493D735a17716c26B',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom HD Path in hdKeyToAccount\nDESCRIPTION: Example showing how to specify a custom HD derivation path when creating an HD Account, allowing for more flexible key derivation patterns beyond the default path.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { hdKeyToAccount } from 'viem/accounts'\n// ---cut---\nconst hdKey = HDKey.fromMasterSeed(...)\n\nconst account = hdKeyToAccount(\n  hdKey,\n  {\n    path: \"m/44'/60'/5'/0/2\" // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Clients for OP Stack with Local Account\nDESCRIPTION: Sets up the necessary Viem client configurations for interacting with both L1 (Ethereum mainnet) and L2 (Optimism) chains using a local private key account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, walletActionsL1, walletActionsL2 } from 'viem/op-stack'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n\nexport const walletClientL2 = createWalletClient({\n  account,\n  chain: optimism,\n  transport: http()\n}).extend(walletActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Importing EIP-712 Wallet Actions for ZKsync\nDESCRIPTION: Imports the EIP-712 wallet actions module from the viem/zksync package. These actions are necessary for interacting with ZKsync chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eip712WalletActions } from 'viem/zksync'\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for Smart Account\nDESCRIPTION: Shows how to set up the necessary configuration for creating a Smart Account, including initializing a public client and defining an owner account from a private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const owner = privateKeyToAccount('0x...')\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing createPublicClient Function in TypeScript\nDESCRIPTION: Import statement for the createPublicClient function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transaction Serializer in Viem\nDESCRIPTION: This snippet demonstrates how to define a custom chain with a transaction serializer in Viem. It uses the `defineChain` function and specifies a `serializers.transaction` method to handle transaction serialization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/serializers.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain, serializeTransaction } from 'viem'\n\nconst example = defineChain({\n  /* ... */\n  serializers: {\n    transaction(transaction, signature) {\n      return serializeTransaction(transaction, signature)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updated Block Generic Type Definition in TypeScript\nDESCRIPTION: The updated type definition for the Block generic type shows the addition of TIncludeTransactions and TBlockTag as the second and third generic parameters, enabling more specific typing based on request parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype Block<\n  TQuantity = bigint,\n+ TIncludeTransactions extends boolean = boolean,\n+ TBlockTag extends BlockTag = BlockTag,\n  TTransaction = Transaction<\n    bigint,\n    number,\n    TBlockTag extends 'pending' ? true : false\n  >,\n>\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Confirmations using Receipt\nDESCRIPTION: Demonstrates how to get transaction confirmations using a transaction receipt object with the Viem public client. Returns the number of blocks that have passed since the transaction was processed.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionConfirmations.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst transactionReceipt = await publicClient.getTransactionReceipt({ hash: '...' })\nconst confirmations = await publicClient.getTransactionConfirmations({\n  transactionReceipt\n})\n// 15n\n```\n\n----------------------------------------\n\nTITLE: Using getWithdrawalHashStorageSlot function in TypeScript\nDESCRIPTION: Demonstrates how to use the getWithdrawalHashStorageSlot function to compute the withdrawal hash storage slot. The function takes an object with a withdrawalHash parameter and returns a Hex value representing the storage slot.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawalHashStorageSlot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getWithdrawalHashStorageSlot } from 'viem'\n\nconst slot = getWithdrawalHashStorageSlot({\n  withdrawalHash: '0xB1C3824DEF40047847145E069BF467AA67E906611B9F5EF31515338DB0AABFA2'\n})\n```\n\n----------------------------------------\n\nTITLE: Using fromHex Function in TypeScript\nDESCRIPTION: Demonstrates various uses of the fromHex function to decode hex values to different data types including number, bigint, string, bytes, and boolean.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromHex } from 'viem'\n\nfromHex('0x1a4', 'number')\n// 420\n\nfromHex('0xc5cf39211876fb5e5884327fa56fc0b75', 'bigint')\n// 4206942069420694206942069420694206942069n\n\nfromHex('0x48656c6c6f20776f726c642e', 'string')\n// \"Hello world\"\n\nfromHex('0x48656c6c6f20576f726c6421', 'bytes')\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n\nfromHex('0x1', 'boolean')\n// true\n```\n\n----------------------------------------\n\nTITLE: Using getAbiItem with Optional Args Parameter\nDESCRIPTION: Shows how to use the getAbiItem function with the optional 'args' parameter. This can be used to identify function overrides when multiple functions have the same name but different argument types.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst encodedData = getAbiItem({\n  abi: [...],\n  name: 'y',\n  args: ['0x0000000000000000000000000000000000000000'], // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for ZKsync in TypeScript\nDESCRIPTION: This code demonstrates how to set up a viem public client configured for ZKsync Era with the necessary public actions extension for L2 functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getMainContractAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: ABI Decoding with Ethers.js\nDESCRIPTION: Using Ethers.js to decode ABI-encoded data. This example shows decoding with object parameters and with simple type arrays.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\n\nconst abiCoder = utils.defaultAbiCoder()\n\n// Object\nabiCoder.decode(\n  [{ type: 'uint', name: 'x' }, { type: 'string', name: 'y' }],\n  '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000'\n)\n\n// Human Readable\nabiCoder.decode(\n  ['uint', 'string'], \n  '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000'\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Account Address Parameter\nDESCRIPTION: Shows how to set the Ethereum address for a custom account using toAccount function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toAccount({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  async signMessage({ message }) {\n    return signMessage({ message, privateKey })\n  },\n  async signTransaction(transaction, { serializer }) {\n    return signTransaction({ privateKey, transaction, serializer })\n  },\n  async signTypedData(typedData) {\n    return signTypedData({ ...typedData, privateKey })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Test Client Reset Implementation\nDESCRIPTION: Demonstrates basic usage of the reset function with a test client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/reset.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.reset()\n```\n\n----------------------------------------\n\nTITLE: Using seconds Parameter in increaseTime\nDESCRIPTION: Example demonstrating the usage of the seconds parameter in the increaseTime function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/increaseTime.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.increaseTime({\n  seconds: 20,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting defaultPriorityFee in Viem Chain Definition (TypeScript)\nDESCRIPTION: This example illustrates how to configure the defaultPriorityFee in a chain definition. It can be set as a static value or as an async function that determines the fee based on the latest block and transaction request.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/fees.md#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineChain } from 'viem'\n\nconst example = defineChain({\n  /* ... */\n  fees: { \n    defaultPriorityFee: parseGwei('0.01'),\n    // or\n    async defaultPriorityFee({ block, request }) {\n      // some async work\n      return // ...\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing hashMessage Function from viem/experimental/erc7739\nDESCRIPTION: Shows how to import the hashMessage function from the experimental ERC-7739 module in viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/hashMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashMessage } from 'viem/experimental/erc7739'\n```\n\n----------------------------------------\n\nTITLE: Setting Sequence Number Parameter for l1InfoDeposit Domain\nDESCRIPTION: Shows how to set the sequenceNumber parameter which is required for the l1InfoDeposit domain, representing the difference between L2 block number and first L2 epoch block number.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceHash = getSourceHash({\n  domain: 'l1InfoDeposit',\n  l1BlockHash:\n    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',\n  sequenceNumber: 1, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Wei to Gwei Example\nDESCRIPTION: Demonstrates converting a wei value (1000000000n) to its gwei string representation ('1'). The function takes a bigint parameter and returns a string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatGwei.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatGwei } from 'viem'\n\nformatGwei(1000000000n)\n// '1'\n```\n\n----------------------------------------\n\nTITLE: Decoding a Simple uint32 Value\nDESCRIPTION: Example showing how to decode a simple uint32 value from ABI encoded data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst values = decodeAbiParameters(\n  [{ name: 'x', type: 'uint32' }],\n  '0x0000000000000000000000000000000000000000000000000000000000010f2c',\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Value from L2 Balance with Transaction\nDESCRIPTION: Shows how to include a value parameter to send ETH with the L2 transaction, which is debited from the caller's L2 balance.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1') // [!code focus]\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Polling Interval with waitForUserOperationReceipt\nDESCRIPTION: This snippet demonstrates how to set a custom polling interval (in milliseconds) when waiting for a User Operation receipt. The pollingInterval parameter controls how frequently the client checks for the receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n\nconst receipt = await bundlerClient.waitForUserOperationReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  pollingInterval: 1_000\n})\n```\n\n----------------------------------------\n\nTITLE: Basic requestExecute Usage with ZKSync\nDESCRIPTION: Demonstrates how to request execution of a Layer 2 transaction from Layer 1 using the walletClient.requestExecute method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient, zksyncClient } from './config'\n\nconst hash = await walletClient.requestExecute({\n  account,\n  client: zksyncClient,\n  contractAddress: await zksyncClient.getBridgehubContractAddress(),\n  calldata: '0x',\n  l2Value: 7_000_000_000n,\n  l2GasLimit: 900_000n\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Link for StackBlitz Example\nDESCRIPTION: A markdown link that opens the sending transactions example project in StackBlitz editor.\nSOURCE: https://github.com/wevm/viem/blob/main/examples/transactions_sending-transactions/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions)\n```\n\n----------------------------------------\n\nTITLE: Getting Checksummed Addresses in Ethers\nDESCRIPTION: Shows how to use ethers.js utils.getAddress to convert an address to its checksummed format. This ensures the address is properly formatted with correct capitalization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\n\nconst address = utils.getAddress('0x8ba1f109551bd432803012645ac136ddd64dba72')\n```\n\n----------------------------------------\n\nTITLE: Contract ABI Definition\nDESCRIPTION: Example ABI definition for a contract including a Transfer event with indexed parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  {\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      { indexed: true, name: \"to\", type: \"address\" },\n      {\n        indexed: true,\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Count for waitForUserOperationReceipt\nDESCRIPTION: This snippet shows how to configure the number of retry attempts when waiting for a User Operation receipt. The retryCount parameter defaults to 6 if not specified, limiting how many times the client will attempt to retrieve the receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n\nconst receipt = await bundlerClient.waitForUserOperationReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  retryCount: 3\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a WebAuthn Account in TypeScript\nDESCRIPTION: Demonstrates how to register a WebAuthn credential (passkey) and use it to create a WebAuthn account. This creates an account that can be used for signing operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createWebAuthnCredential, \n  toWebAuthnAccount \n} from 'viem/account-abstraction'\n\n// Register a credential (ie. passkey).\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n})\n\n// Create a WebAuthn account from the credential.\nconst account = toWebAuthnAccount({\n  credential,\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding Function Results in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.encodeFunctionResult to encode function return values. This encodes the output values that would be returned from a function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst data = iface.encodeFunctionResult('balanceOf', [\n  '0x8ba1f109551bD432803012645Ac136ddd64DBA72'\n])\n```\n\n----------------------------------------\n\nTITLE: Client Configuration with ZKSync\nDESCRIPTION: Shows how to set up the necessary clients and account for ZKSync Layer 2 interactions, including the ZKSync client with publicActionsL2 and a wallet client with walletActionsL1.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, createPublicClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync, mainnet } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/zksync'\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Importing slice from viem\nDESCRIPTION: Shows how to import the slice function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { slice } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing fromBytes Function\nDESCRIPTION: Shows how to import the fromBytes function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromBytes } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing setupKzg Function\nDESCRIPTION: Basic import statement for the setupKzg function from viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/setupKzg.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupKzg } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: ENS Text Record Retrieval with Strict Mode\nDESCRIPTION: Example demonstrating how to retrieve an ENS text record with strict error propagation enabled.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst ensText = await publicClient.getEnsText({\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n  strict: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Sponsoring User Operations with Built-in Paymaster in Viem (Bundler Client)\nDESCRIPTION: This snippet demonstrates how to use a Bundler client with built-in Paymaster support to sponsor User Operation fees. It sets the paymaster option to true, assuming the Bundler supports Paymaster sponsorship.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { \n  createBundlerClient, \n  createPaymasterClient,\n} from 'viem/account-abstraction'\nimport { account, client } from './config.ts'\n\nconst bundlerClient = createBundlerClient({\n  account,\n  client,\n  paymaster: true,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Paymaster Verification Gas Limit in User Operation with TypeScript\nDESCRIPTION: This snippet shows how to configure the paymaster verification gas limit when preparing a user operation. It includes specifying the paymaster address, data, and the verification gas limit.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperation = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n  paymasterData: '0xdeadbeef',\n  paymasterVerificationGasLimit: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using getL2HashFromPriorityOp with ZKsync main contract address\nDESCRIPTION: Shows how to use the getL2HashFromPriorityOp function with focus on the ZKsync Era main contract address parameter, which is needed to properly calculate the L2 hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst l2Hash = getL2HashFromPriorityOp(\n  receipt, \n  '0x14b947814912c71bdbc3275c143a065d2ecafaba' // [!code focus]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client with Custom RPC Schema\nDESCRIPTION: Creates a Public Client with a custom RPC schema for extended functionality.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rpcSchema } from 'viem'\n\ntype CustomRpcSchema = [{\n  Method: 'eth_wagmi',\n  Parameters: [string]\n  ReturnType: string\n}]\n\nconst publicClient = createPublicClient({\n  chain: mainnet,\n  rpcSchema: rpcSchema<CustomRpcSchema>(),\n  transport: http(),\n})\n\nconst result = await publicClient.request({\n  method: 'eth_wa\n//               ^|\n  params: ['hello'],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting preVerificationGas Parameter in User Operation\nDESCRIPTION: Demonstrates setting the preVerificationGas parameter which specifies extra gas to pay the Bundler. This optional bigint parameter helps cover additional gas costs.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  preVerificationGas: 69420n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Using a User Operation Hash Parameter in TypeScript\nDESCRIPTION: This code snippet shows the specific usage of the hash parameter when retrieving a User Operation receipt. It highlights that the hash parameter must be a hexadecimal string prefixed with '0x'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperationReceipt.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerClient } from './client'\n// ---cut---\nconst receipt = await bundlerClient.getUserOperationReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d' // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Coinbase Address using Test Client in Viem (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the setCoinbase function from a test client to set the coinbase address for new blocks. It requires a previously configured test client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setCoinbase.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setCoinbase({\n  address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n})\n```\n\n----------------------------------------\n\nTITLE: ENS Text Record Retrieval with Gateway URLs\nDESCRIPTION: Example showing how to retrieve an ENS text record using custom gateway URLs for CCIP-Read requests.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ensText = await publicClient.getEnsText({\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n  gatewayUrls: [\"https://ccip.ens.xyz\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Parameter Building Example\nDESCRIPTION: Demonstrates how to build and prepare withdrawal transaction parameters using buildInitiateWithdrawal\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/initiateWithdrawal.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL1, walletClientL2 } from './config'\n\nconst args = await publicClientL1.buildInitiateWithdrawal({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1'),\n})\n \nconst hash = await walletClientL2.initiateWithdrawal(args)\n```\n\n----------------------------------------\n\nTITLE: Using sidecarsToVersionedHashes Function in TypeScript\nDESCRIPTION: Demonstrates how to use the sidecarsToVersionedHashes function to transform blob sidecars into versioned hashes. It includes setup for KZG and blob sidecars creation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sidecarsToVersionedHashes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobSidecars, sidecarsToVersionedHashes } from 'viem'\nimport { kzg } from './kzg'\n\nconst sidecars = toBlobSidecars({ data: '0x...', kzg })\nconst versionedHashes = sidecarsToVersionedHashes({ sidecars })\n```\n\n----------------------------------------\n\nTITLE: Importing Celo Chains in TypeScript\nDESCRIPTION: Shows how to import pre-configured Celo chain objects from Viem, including mainnet (celo) and testnet (celoAlfajores).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/celo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  celo, // [!code hl]\n  celoAlfajores, // [!code hl]\n} from 'viem/chains'\n```\n\n----------------------------------------\n\nTITLE: Using getGeneralPaymasterInput with Hex String in TypeScript\nDESCRIPTION: Demonstrates how to use the getGeneralPaymasterInput function with a Hex string as the innerInput parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getGeneralPaymasterInput.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = getGeneralPaymasterInput({\n      innerInput: \"0x0005040302010\", // [!code focus]\n    })\n```\n\n----------------------------------------\n\nTITLE: Using fromBlobs with to Parameter for Output Format Specification in TypeScript\nDESCRIPTION: Example showing how to specify the output format using the to parameter, which can be either 'bytes' or 'hex'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBlobs.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromBlobs } from 'viem'\n\nconst data = fromBlobs({ \n  blobs: ['0x...'],\n  to: 'bytes' // [!code focus]\n})\n\ndata // [!code focus]\n// ^?\n```\n\n----------------------------------------\n\nTITLE: Test Client Configuration Setup\nDESCRIPTION: Shows how to configure and create a test client with foundry chain and anvil mode.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/reset.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet Client in TypeScript\nDESCRIPTION: This snippet shows how to create a wallet client using the viem library. It sets up a client for the Ethereum mainnet using HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/recoverAuthorizationAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Using getTimeToNextL2Output in OP Stack Withdrawals\nDESCRIPTION: Example showing how to retrieve the time until the next L2 output is submitted. It fetches the current L2 block number and passes it along with the target chain to the getTimeToNextL2Output method on the L1 public client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToNextL2Output.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst l2BlockNumber = publicClientL2.getBlockNumber()\n\nconst {\n  interval,\n  seconds,\n  timestamp\n} = await publicClientL1.getTimeToNextL2Output({\n  l2BlockNumber,\n  targetChain: publicClientL2.chain,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing parseTransaction Function - TypeScript\nDESCRIPTION: Example showing how to import the parseTransaction function from the viem library\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseTransaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseTransaction } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Computing Contract Addresses in Ethers\nDESCRIPTION: Shows how to use ethers.js utils.getContractAddress to compute the address where a contract will be deployed based on the deployer's address and nonce.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\n\nconst address = utils.getContractAddress({ from: '0x...', nonce: 5 });\n```\n\n----------------------------------------\n\nTITLE: Test Client Configuration\nDESCRIPTION: Shows how to configure and create a test client instance with Foundry chain and Anvil mode settings using Viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/mine.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Authorization with Address Parameter in TypeScript\nDESCRIPTION: Illustrates how to use the address parameter in the verifyAuthorization function to specify the signer's address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/verifyAuthorization.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst valid = await verifyAuthorization({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  authorization,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Paymaster Client Configuration in TypeScript\nDESCRIPTION: Configuration setup for creating a paymaster client using viem. This shows how to initialize the client with an HTTP transport pointing to a specific RPC endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { createPaymasterClient } from 'viem/account-abstraction'\n\nexport const paymasterClient = createPaymasterClient({ \n  transport: http('https://public.pimlico.io/v2/11155111/rpc'), \n}) \n```\n\n----------------------------------------\n\nTITLE: Configuration Setup for viem OP Stack Clients\nDESCRIPTION: Configuration code showing how to set up public clients for L1 (Ethereum mainnet) and L2 (Optimism) chains with OP Stack extensions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToNextGame.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: Using getL2Output to Retrieve L2 Output Proposal in TypeScript\nDESCRIPTION: Example showing how to use the getL2Output action to retrieve the first L2 output proposal that occurred after a specified block number. This is part of the withdrawal flow for OP Stack chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getL2Output.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1 } from './config'\n\nconst output = await publicClientL1.getL2Output({\n  l2BlockNumber: 69420n,\n  targetChain: optimism,\n})\n```\n\n----------------------------------------\n\nTITLE: Using sha256 function with 'bytes' output in TypeScript\nDESCRIPTION: Shows how to use the sha256 function with the 'bytes' output option, which returns the hash as a Uint8Array instead of a hex string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sha256.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sha256 } from 'viem'\n\nsha256(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33],\n  'bytes'\n)\n// Uint8Array [95, 120, 195, 50, 116, 228, 63, 169, 222, 86, 89, 38, 92, 29, 145, 126, 37, 192, 55, 34, 220, 176, 184, 210, 125, 184, 213, 254, 170, 129, 57, 83]\n```\n\n----------------------------------------\n\nTITLE: KZG Setup Implementation\nDESCRIPTION: Demonstrates how to set up the KZG implementation required for blob commitment computation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { blobsToCommitments, setupKzg, toBlobs } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nconst kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n\nconst commitments = blobsToCommitments({ \n  blobs: toBlobs({ data: '0x1234' }),  \n  kzg,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Client for Viem in TypeScript\nDESCRIPTION: This code snippet shows how to create a test client for use with Viem. It imports necessary functions from Viem, sets up a client for the Foundry chain using Anvil mode and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setMinGasPrice.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from InfuraProvider to createPublicClient in viem\nDESCRIPTION: Shows how to replace Ethers' InfuraProvider with viem's createPublicClient using the Infura RPC URL directly in the HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.InfuraProvider('homestead', '<apiKey>') // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: mainnet, // [!code hl]\n  transport: http('https://mainnet.infura.io/v3/<apiKey>') // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Using MaxFeePerGas Parameter in Call Action\nDESCRIPTION: Example of specifying the maxFeePerGas parameter when making a call. This parameter sets the total fee per gas in wei, and only applies to EIP-1559 Transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\n\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  maxFeePerGas: parseGwei('20'), // [!code focus]\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying withdrawalHash parameter in getWithdrawalHashStorageSlot\nDESCRIPTION: Shows how to provide the withdrawalHash parameter when calling the getWithdrawalHashStorageSlot function. The withdrawalHash is of type Hash and represents the hash emitted from the L2 withdrawal MessagePassed event.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawalHashStorageSlot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst slot = getWithdrawalHashStorageSlot({ \n  withdrawalHash: '0xB1C3824DEF40047847145E069BF467AA67E906611B9F5EF31515338DB0AABFA2'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Token Address in getApprovalBasedPaymasterInput\nDESCRIPTION: Shows how to set the token address parameter when calling getApprovalBasedPaymasterInput function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getApprovalBasedPaymasterInput.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = getApprovalBasedPaymasterInput({\n  innerInput: '0x',\n  minAllowance: 1n,\n  token: \"0x65C899B5fb8Eb9ae4da51D67E1fc417c7CB7e964\", // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using wrapTypedDataSignature to wrap an EIP-712 typed data signature\nDESCRIPTION: Complete example of using wrapTypedDataSignature to wrap an EIP-712 typed data signature with domain, types, primaryType, message, and signature parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wrapTypedDataSignature } from 'viem/experimental/erc7739'\n\nwrapTypedDataSignature({\n  domain: {\n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  signature: '0x...', \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Public Client for ZKsync Era\nDESCRIPTION: Setup code for creating a public client configured for ZKsync Era that includes the L2 public actions extension needed for getL2TokenAddress.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL2TokenAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n    chain: zksync,\n    transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Configuring ZKSync Era Client\nDESCRIPTION: Setup configuration for creating a public client with ZKSync Era chain and extending it with L2-specific public actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n    chain: zksync,\n    transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Updating getContract Client API in TypeScript\nDESCRIPTION: Demonstrates the change in the getContract API, replacing publicClient and walletClient parameters with a single client object containing public and wallet properties.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from 'viem'\nimport { publicClient, walletClient } from './client'\n\nconst contract = getContract({\n  abi,\n  address,\n  client: {\n    public: publicClient,\n    wallet: walletClient,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Impersonating Account with Address Parameter\nDESCRIPTION: Example showing the address parameter usage for account impersonation. Demonstrates the proper format for specifying the target account address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/impersonateAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.impersonateAccount({\n  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting preVerificationGas for User Operation in TypeScript\nDESCRIPTION: Demonstrates how to set the extra gas to pay the Bundler for User Operation when calling getPaymasterData. This parameter is optional and of type bigint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  preVerificationGas: 69420n, // [!code focus]\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding Error Results in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.encodeErrorResult to encode custom error data with arguments. This is useful for working with custom errors in smart contracts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst data = iface.encodeErrorResult('AccountLocked', [\n  '0x8ba1f109551bD432803012645Ac136ddd64DBA72',\n  utils.parseEther('1.0')\n]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Format\nDESCRIPTION: Demonstrates how to set the output format parameter to control whether the hash is returned as hex string or bytes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashAuthorization } from 'viem/utils'\n\nhashAuthorization({\n  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  chainId: 1,\n  nonce: 0,\n  to: 'bytes',\n})\n```\n\n----------------------------------------\n\nTITLE: Hoisting Account to Bundler Client\nDESCRIPTION: Shows how to hoist a Smart Account to the Bundler Client to avoid passing the account parameter in every operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundlerClient = createBundlerClient({\n  account,\n  client,\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n\nconst hash = await bundlerClient.sendUserOperation({\n  calls: [{\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n    value: parseEther('0.001')\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport with Custom Name\nDESCRIPTION: Setting a custom name for the WebSocket transport provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', { \n  name: 'Alchemy WebSocket Provider',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price Parameter in Client Execute Method\nDESCRIPTION: Example of setting the gasPrice parameter in wei for a viem client execute call. This configures the price to pay per gas unit for all transactions in the batch.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ]\n    },\n    {\n      calls: [\n        {\n          data: '0xdeadbeef',\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        },\n      ],\n    },\n  ],\n  gasPrice: parseGwei('20'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Viem Public Client Configuration\nDESCRIPTION: Example showing how to create a public client using Viem's createPublicClient function. This client is required as a parameter for the toSafeSmartAccount function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSafeSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { mainnet } from 'viem/chains'\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Parameter Usage Example\nDESCRIPTION: Example demonstrating the parameter usage for getL1TokenAddress function with a specific L2 token address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await client.getL1TokenAddress({\n    token: '0x3e7676937A7E96CFB7616f255b9AD9FF47363D4b'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing permissionless.js Package\nDESCRIPTION: Package installation commands for different package managers to add permissionless dependency\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toNexusSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add permissionless\n```\n\n----------------------------------------\n\nTITLE: watchAsset with Symbol Parameter\nDESCRIPTION: Example showing symbol parameter usage for token identifier in watchAsset function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst success = await walletClient.watchAsset({\n  type: 'ERC20',\n  options: {\n    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    decimals: 18,\n    symbol: 'WETH',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Value\nDESCRIPTION: Shows how to set the transaction value in wei using parseEther utility. The example demonstrates sending 1 ETH with the transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\n\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1'),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Client for viem in TypeScript\nDESCRIPTION: This code sets up a test client using the viem library, configured for the Foundry chain and Anvil mode. It uses HTTP transport and is exported for use in other parts of the application.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getAutomine.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Using sha256 function with Uint8Array and hex input in TypeScript\nDESCRIPTION: Demonstrates how to use the sha256 function with both a Uint8Array and a hex string as input. The function returns the Sha256 hash as a hex string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sha256.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sha256 } from 'viem'\n\nsha256(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n// 0x7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069\n\nsha256('0xdeadbeef')\n// 0x5f78c33274e43fa9de5659265c1d917e25c03722dcb0b8d27db8d5feaa813953\n```\n\n----------------------------------------\n\nTITLE: Using hdKeyToAccount with HD Key Parameter\nDESCRIPTION: Example showing how to call hdKeyToAccount with just the required HD Key parameter to create a Hierarchical Deterministic (HD) Account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { hdKeyToAccount } from 'viem/accounts'\n// ---cut---\nconst hdKey = HDKey.fromMasterSeed(...)\n\nconst account = hdKeyToAccount(\n  hdKey, // [!code focus]\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding Error Results in Viem\nDESCRIPTION: Demonstrates how to use viem's encodeErrorResult function to encode custom error data with arguments, equivalent to ethers.js Interface.encodeErrorResult method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeErrorResult, parseEther } from 'viem'\nimport { abi } from './abi'\n\nconst data = encodeErrorResult({\n  abi: wagmiAbi,\n  errorName: 'AccountLocked',\n  args: [\n    '0x8ba1f109551bD432803012645Ac136ddd64DBA72',\n    parseEther('1.0')\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing sha256 function from viem in TypeScript\nDESCRIPTION: Shows how to import the sha256 function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sha256.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sha256 } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Configuring Latency Weight in Fallback Transport Ranking\nDESCRIPTION: This example demonstrates how to configure the weight applied to the latency score in fallback transport ranking.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  rank: {\n    weights: {\n      latency: 0.4,\n      stability: 0.6\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting L1 Block Hash Parameter for getSourceHash\nDESCRIPTION: Shows how to set the l1BlockHash parameter which specifies the hash of the L1 block containing the deposit transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceHash = getSourceHash({\n  domain: 'userDeposit',\n  l1BlockHash:\n    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7', // [!code focus]\n  l1LogIndex: 196,\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from PocketProvider to createPublicClient in viem\nDESCRIPTION: Demonstrates replacing Ethers' PocketProvider with viem's createPublicClient using the Pocket RPC URL directly in the HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.PocketProvider('homestead', '<apiKey>') // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: mainnet, // [!code hl]\n  transport: http('https://eth-mainnet.gateway.pokt.network/v1/lb/<apiKey>') // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Importing sidecarsToVersionedHashes Function in TypeScript\nDESCRIPTION: Shows how to import the sidecarsToVersionedHashes function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sidecarsToVersionedHashes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sidecarsToVersionedHashes } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing decodeEventLog Function from viem\nDESCRIPTION: Shows how to import the decodeEventLog function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeEventLog.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeEventLog } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Adding opData to Viem Client Execute\nDESCRIPTION: Demonstrates adding optional execution data using the opData parameter. The data is passed as a hexadecimal string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  calls: [ \n    { \n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n      value: parseEther('1')\n    }, \n    { \n      data: '0xdeadbeef', \n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n    }, \n  ], \n  opData: '0xdeadbeef',\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETH Balance on L1 Network using TypeScript\nDESCRIPTION: This snippet shows how to use the getL1Balance function to retrieve the ETH balance for an account on the L1 network without specifying a token address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1Balance.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClient } from './config'\n\nconst balance = await publicClient.getL1Balance({\n  account\n})\n```\n\n----------------------------------------\n\nTITLE: Using getAbiItem with ABI and Name Parameters\nDESCRIPTION: Shows how to use the getAbiItem function with the required 'abi' and 'name' parameters. The 'abi' parameter is an array of ABI items, and the 'name' parameter is the name of the item to extract.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst encodedData = getAbiItem({\n  abi: [...], // [!code focus]\n  name: 'x',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for ZKSync\nDESCRIPTION: Sets up a public viem client configured for ZKSync chain with HTTP transport and L2 public actions extension. This configuration is required for interacting with ZKSync testnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getTestnetPaymasterAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconnection Delay for IPC Transport in TypeScript\nDESCRIPTION: This snippet demonstrates how to set the delay between reconnection attempts for the IPC Transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', {\n  reconnect: {\n    delay: 1_000, // [!code focus]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking ERC-7821 Support using Viem Client\nDESCRIPTION: Example showing how to check if a contract supports ERC-7821 execution mode by calling supportsExecutionMode on a Viem client instance. Returns a boolean indicating support status.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/supportsExecutionMode.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst supported = await client.supportsExecutionMode({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n})\n```\n\n----------------------------------------\n\nTITLE: Using bytecodeHash parameter with CREATE2\nDESCRIPTION: Shows how to use a precomputed bytecode hash instead of full bytecode for CREATE2 deployments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetContractAddress({\n  bytecodeHash: '0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54',\n  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',\n  opcode: 'CREATE2',\n  salt: toBytes('wagmi'),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Filter Scoped to an Address\nDESCRIPTION: Creates an event filter that is scoped to a specific contract address. This limits the filter to only show events from that address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createEventFilter({\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Recipient on L2\nDESCRIPTION: Example showing how to specify the recipient address on L2 for the deposit transaction using the to parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',  // [!code focus]\n    value: parseEther('1')\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting Example\nDESCRIPTION: Demonstrates transaction signing with a hoisted account configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/signTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config' \n\nconst request = await walletClient.prepareTransactionRequest({\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n\nconst signature = await walletClient.signTransaction(request)\n\nconst hash = await client.sendRawTransaction(signature)\n```\n\n----------------------------------------\n\nTITLE: SIWE Message with Optional Parameters\nDESCRIPTION: Shows how to create a SIWE message with optional parameters including expirationTime, issuedAt, notBefore, requestId, resources, scheme, and statement.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/createSiweMessage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = createSiweMessage({\n  address: '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\n  chainId: 1,\n  domain: 'example.com',\n  nonce: 'foobarbaz',\n  uri: 'https://example.com/path',\n  version: '1',\n  resources: [\n    'https://example.com/foo',\n    'https://example.com/bar',\n    'https://example.com/baz',\n  ],\n  statement: 'I accept the ExampleOrg Terms of Service: https://example.com/tos'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Chain ID Parameter\nDESCRIPTION: Shows how to specify the chain ID parameter for the authorization hash calculation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashAuthorization } from 'viem/utils'\n\nhashAuthorization({\n  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  chainId: 1,\n  nonce: 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for zkSync in TypeScript\nDESCRIPTION: This snippet shows how to configure a viem public client for zkSync, including the necessary imports and extensions for L2 actions. It sets up the client with the zkSync chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1ChainId.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client and Owner for Smart Account in TypeScript\nDESCRIPTION: This code sets up the configuration for the viem client and the owner account. It creates a public client connected to the Ethereum mainnet and initializes an owner account from a private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signTypedData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\n\nexport const owner = privateKeyToAccount('0x...')\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing WebAuthn Credential Function in TypeScript\nDESCRIPTION: Shows how to import the createWebAuthnCredential function from the viem/account-abstraction module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/createWebAuthnCredential.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWebAuthnCredential } from 'viem/account-abstraction'\n```\n\n----------------------------------------\n\nTITLE: Setting Source L1 Chain for Deposit Transaction\nDESCRIPTION: Shows how to specify the L1 chain parameter for cross-chain validations. This ensures the wallet is connected to the correct source chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet } from 'viem/chains'\n\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  chain: mainnet, // [!code focus]\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Public Client Configuration Setup\nDESCRIPTION: Shows the configuration setup for creating a Viem public client instance using mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionConfirmations.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Number for getProof in TypeScript\nDESCRIPTION: This snippet illustrates how to specify a block number when calling the getProof function. The blockNumber parameter is optional and of type bigint, allowing retrieval of proof data at a specific block.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getProof.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst proof = await publicClient.getProof({\n  address: '0x4200000000000000000000000000000000000016',\n  storageKeys: [\n    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n  ],\n  blockNumber: 42069n // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: BytesToHex Function Usage\nDESCRIPTION: Shows how to convert byte arrays to hexadecimal strings using bytesToHex.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bytesToHex } from 'viem'\n\nbytesToHex(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n)\n// '0x48656c6c6f20576f726c6421'\n\nbytesToHex(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), \n  { size: 32 }\n)\n// '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n```\n\n----------------------------------------\n\nTITLE: Configuring Clients for OP Stack Interactions in TypeScript\nDESCRIPTION: Shows how to set up wallet and public clients for L1 and L2 interactions, including the necessary imports and client configurations for OP Stack operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildDepositTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL1.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Adding Paymaster Context to getPaymasterData Request\nDESCRIPTION: Example showing how to include paymaster-specific context fields when retrieving paymaster data. This parameter allows passing additional information required by specific paymaster implementations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  context: { \n    policyId: 'abc123', \n  }, \n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Ping Function in Fallback Transport\nDESCRIPTION: This snippet shows how to customize the ping function used for ranking in fallback transports.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  rank: {\n    ping: ({ transport }) => transport.request({ method: 'eth_blockNumber' })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying EntryPoint Address in getPaymasterStubData in TypeScript\nDESCRIPTION: Example showing how to specify the entryPointAddress parameter when calling getPaymasterStubData. This parameter indicates which EntryPoint contract to target for the User Operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  chainId: 1, \n  entryPointAddress: '0x0000000071727De22E5E9d8BAf0edAc6f37da032', \n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing ABI Items in Viem\nDESCRIPTION: Demonstrates how to use viem's parseAbiItem function to parse an individual ABI function signature, equivalent to ethers.js Fragment.from method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiItem } from 'viem'\n\nconst abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint)')\n```\n\n----------------------------------------\n\nTITLE: Decoding Function Results in Viem\nDESCRIPTION: Demonstrates how to use viem's decodeFunctionResult function to decode function return values, equivalent to ethers.js Interface.decodeFunctionResult method with a different parameter structure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionResult, parseEther } from 'viem'\nimport { abi } from './abi'\n\nconst result = decodeFunctionResult({\n  abi,\n  functionName: 'balanceOf',\n  data: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client for Ethereum Mainnet in TypeScript\nDESCRIPTION: Shows how to create a public client for the Ethereum mainnet using viem library. This client is used in the watchBlockNumber example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: getFeeHistory with Block Tag\nDESCRIPTION: Example showing getFeeHistory usage with a block tag parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFeeHistory.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst feeHistory = await publicClient.getFeeHistory({\n  blockCount: 4,\n  blockTag: 'safe',\n  rewardPercentiles: [25, 75]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Address Directly for JSON-RPC Accounts in viem\nDESCRIPTION: Example demonstrating how to pass an address directly to the account option instead of using the removed getAccount function for JSON-RPC accounts. This simplifies the API for basic account usage.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst address = '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n\nconst client = createWalletClient({\n  account: getAccount(address), // [!code --]\n  account: address, // [!code ++]\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: BytesToNumber Function Usage\nDESCRIPTION: Shows conversion of byte arrays to numbers using bytesToNumber.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bytesToNumber } from 'viem'\n\nbytesToNumber(new Uint8Array([1, 164]))\n// 420\n\nbytesToNumber(\n  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 164]), \n  { size: 32 }\n)\n// 420\n```\n\n----------------------------------------\n\nTITLE: Using portalAddress Parameter in depositTransaction (TypeScript)\nDESCRIPTION: Example demonstrating how to specify a custom Optimism Portal contract address when making an L1 to L2 deposit. When providing a portalAddress, the targetChain parameter becomes optional.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.depositTransaction({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  portalAddress: '0xbEb5Fc579115071764c7423A4f12eDde41f106Ed' // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Calls with Validation Mode in TypeScript using viem\nDESCRIPTION: This example demonstrates how to enable validation mode when simulating calls with the viem client. It sets the validation option to true.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { results } = await client.simulateCalls({\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n  calls: [ \n    { \n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n      value: parseEther('2'),\n    },  \n  ], \n  validation: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Bytes Containing ABI-encoded Data\nDESCRIPTION: Example showing how to decode a bytes value that contains an ABI-encoded uint256 value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst values = decodeAbiParameters(\n  [\n    { name: \"response\", type: \"bytes\" },\n  ],\n  '0x' +\n  '0000000000000000000000000000000000000000000000000000000000000020' + // offset pointer\n  '0000000000000000000000000000000000000000000000000000000000000020' + // length\n  '0000000000000000000000000000000000000000000000000000000000000001',  // data\n)\n// 0x0000000000000000000000000000000000000000000000000000000000000001\n```\n\n----------------------------------------\n\nTITLE: Specifying Contract Address Parameter for ZKsync Multi-signature Smart Account\nDESCRIPTION: Example showing how to specify the contract address parameter when creating a ZKsync multi-signature Smart Account. The address represents the deployed Account's Contract implementation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toMultisigSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toMultisigSmartAccount({\n  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', // [!code focus]\n  privateKeys: ['0x...', '0x...']\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Args Type Definition\nDESCRIPTION: Type definition for contract function arguments using named properties.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/faq.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Args = {\n  sender: `0x${string}`;\n  recipient: `0x${string}`;\n  amount: bigint;\n}\n```\n\n----------------------------------------\n\nTITLE: Contract ABI Definition\nDESCRIPTION: ABI definition for the contract including the mint function specification.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/estimateContractGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [{ name: \"\", type: \"uint32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON-RPC Account for zkSync\nDESCRIPTION: Shows how to configure a wallet client with a JSON-RPC account retrieved from an EIP-712 provider like MetaMask.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { publicActionsL2 } from 'viem/zksync'\n\n// Retrieve Account from an EIP-712 Provider.\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Setting Verification Gas Limit in User Operation\nDESCRIPTION: Demonstrates setting the verificationGasLimit parameter when signing a user operation. This parameter defines the amount of gas allocated for the verification step of the operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await account.signUserOperation({\n  callData: '0xdeadbeef',\n  callGasLimit: 141653n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 15000000000n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  paymaster: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  paymasterData: '0xdeadbeef',\n  paymasterPostOpGasLimit: 69420n,\n  paymasterVerificationGasLimit: 69420n,\n  preVerificationGas: 53438n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  verificationGasLimit: 259350n,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Name for the Bundler Client\nDESCRIPTION: Demonstrates how to provide a custom name for the Bundler Client. This is an optional display name which defaults to \"Bundler Client\" if not specified.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\n\nconst client = createBundlerClient({\n  name: 'Foo Bundler Client', // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with Constructor Arguments in TypeScript\nDESCRIPTION: Shows how to deploy a contract that requires constructor arguments. The args parameter is passed to match the constructor input signature.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deployContract } from 'viem'\nimport { wagmiAbi } from './abi'\nimport { account, walletClient } from './config'\n\nconst hash = await walletClient.deployContract({\n  abi,\n  account,\n  args: [69420],\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Interfaces with Ethers.js\nDESCRIPTION: Creating an interface from human-readable function signatures using Ethers.js. This example initializes an Interface instance with various function signatures and formats it to JSON.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\n\nconst interface = new Interface([\n  'constructor(string symbol, string name)',\n  'function transferFrom(address from, address to, uint amount)',\n  'function transferFrom(address from, address to, uint amount, bool x)',\n  'function mint(uint amount) payable',\n  'function balanceOf(address owner) view returns (uint)'\n])\nconst json = interface.format(utils.FormatTypes.json)\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Credential Creation with Exclusion List\nDESCRIPTION: Demonstrates how to create a WebAuthn credential while excluding specific credential IDs.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/createWebAuthnCredential.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst credential = await createWebAuthnCredential({\n  excludeCredentialIds: ['abc', 'def'],\n  name: 'Example',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-Verification Gas for Bundler Payment\nDESCRIPTION: Demonstrates setting the preVerificationGas parameter when signing a user operation. This parameter specifies extra gas allocated to pay the Bundler for their services.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await account.signUserOperation({\n  callData: '0xdeadbeef',\n  callGasLimit: 141653n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 15000000000n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  paymaster: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  paymasterData: '0xdeadbeef',\n  paymasterPostOpGasLimit: 69420n,\n  paymasterVerificationGasLimit: 69420n,\n  preVerificationGas: 53438n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  verificationGasLimit: 259350n,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem with JSON-RPC Account for ZKSync\nDESCRIPTION: Configuration for viem wallet client with a hoisted JSON-RPC account retrieved from an EIP-1193 provider, used for ZKSync interactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/zksync'\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\n// Retrieve Account from an EIP-1193  Provider.\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n```\n\n----------------------------------------\n\nTITLE: Test Client Configuration Setup\nDESCRIPTION: Shows how to create and configure a test client using Viem with Foundry chain and Anvil mode. Sets up HTTP transport for the client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockGasLimit.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Filter using viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the uninstallFilter function from the viem library to destroy a previously created filter. It shows the creation of a pending transaction filter and its subsequent uninstallation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/uninstallFilter.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst filter = await publicClient.createPendingTransactionFilter()\nconst uninstalled = await publicClient.uninstallFilter({ filter })\n// true\n```\n\n----------------------------------------\n\nTITLE: ENS Text Record Retrieval with Block Tag\nDESCRIPTION: Example showing how to retrieve an ENS text record using a specific block tag.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ensText = await publicClient.getEnsText({\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n  blockTag: 'safe',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Verification Gas Limit for User Operation in TypeScript\nDESCRIPTION: Shows how to set the verificationGasLimit, which specifies the amount of gas to allocate for the verification step of the user operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  verificationGasLimit: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Paymaster Client in viem\nDESCRIPTION: Example of creating a paymaster client using viem's createPaymasterClient function with an HTTP transport pointing to a Pimlico RPC endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { createPaymasterClient } from 'viem/account-abstraction'\n\nexport const paymasterClient = createPaymasterClient({ \n  transport: http('https://public.pimlico.io/v2/11155111/rpc'), \n}) \n```\n\n----------------------------------------\n\nTITLE: Using Experimental SendCalls Action\nDESCRIPTION: Shows implementation of the experimental sendCalls action for executing multiple calls in a single transaction, including value transfers and data calls.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom, parseEther } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental'\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions())\n\nconst id = await client.sendCalls({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1'),\n    },\n    {\n      data: '0xdeadbeef'\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring State Override in User Operation with TypeScript\nDESCRIPTION: This example shows how to include state overrides when preparing a user operation. It demonstrates setting a custom balance and modifying specific storage slots for an address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperation = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  stateOverride: [ // [!code focus]\n    { // [!code focus]\n      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', // [!code focus]\n      balance: parseEther('1'), // [!code focus]\n      stateDiff: [ // [!code focus]\n        { // [!code focus]\n          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0', // [!code focus]\n          value: '0x00000000000000000000000000000000000000000000000000000000000001a4', // [!code focus]\n        }, // [!code focus]\n      ], // [!code focus]\n    } // [!code focus]\n  ], // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using size function to calculate byte size in TypeScript\nDESCRIPTION: Demonstrates how to use the 'size' function to calculate the byte size of hex strings and Uint8Array. The function returns the size as a number, representing the number of bytes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/size.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { size } from 'viem'\n\nsize('0xa4') // 1\nsize('0xa4e12a45') // 4\nsize(new Uint8Array([1, 122, 51, 123])) // 4\n```\n\n----------------------------------------\n\nTITLE: Adding Status Sepolia Chain\nDESCRIPTION: Added support for the Status Sepolia chain.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const statusSepolia = { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating a Viem Public Client Configuration\nDESCRIPTION: Example of creating a public client configuration using Viem's createPublicClient function with HTTP transport on the Ethereum mainnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toLightSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { mainnet } from 'viem/chains'\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Trusted Setup Contents\nDESCRIPTION: Example showing how to directly import trusted setup contents from viem/trusted-setups entrypoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/setupKzg.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport mainnetTrustedSetup from 'viem/trusted-setups/mainnet.json'\nimport minimalTrustedSetup from 'viem/trusted-setups/minimal.json'\n```\n\n----------------------------------------\n\nTITLE: BytesToString Function Usage\nDESCRIPTION: Demonstrates converting byte arrays to strings using bytesToString.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bytesToString } from 'viem'\n\nbytesToString(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n)\n// 'Hello world'\n\nbytesToString(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), \n  { size: 32 }\n)\n// 'Hello world'\n```\n\n----------------------------------------\n\nTITLE: Setting Max Reconnection Attempts for IPC Transport in TypeScript\nDESCRIPTION: This example shows how to set the maximum number of reconnection attempts for the IPC Transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', {\n  reconnect: {\n    attempts: 10, // [!code focus]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Paymaster Client from viem\nDESCRIPTION: How to import the createPaymasterClient function from the viem/account-abstraction module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPaymasterClient } from 'viem/account-abstraction'\n```\n\n----------------------------------------\n\nTITLE: Using waitForNextGame in TypeScript with viem\nDESCRIPTION: Example of using the waitForNextGame function to wait for the next dispute game on an OP Stack chain. It requires a configured L1 public client with extended OP Stack actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextGame.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst l2BlockNumber = await publicClientL2.getBlockNumber()\nconst game = await publicClientL1.waitForNextGame({\n  l2BlockNumber,\n  targetChain: publicClientL2.chain,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Client for ZKSync L2 Actions\nDESCRIPTION: Sets up a public client configured for the ZKSync network and extends it with the publicActionsL2 extension to access L2-specific methods.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchDetails.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Function in Solidity\nDESCRIPTION: Example of a contract function definition with named parameters for transferFrom method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/faq.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferFrom(address sender, address recipient, uint256 amount) returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Configuring ZKSync Client with viem\nDESCRIPTION: Configuration for creating a public client for ZKSync network that includes the publicActionsL2 extension. This setup is necessary for accessing ZKSync-specific methods like getL1BatchBlockRange.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchBlockRange.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: parseAbi Parameters Example\nDESCRIPTION: Shows the parameter usage for parseAbi function with signatures parameter that accepts an array of human-readable ABI strings.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbi.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\n\nconst abi = parseAbi([\n  'function balanceOf(address owner) view returns (uint256)',\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\n])\n```\n\n----------------------------------------\n\nTITLE: Setting nonce for User Operation in TypeScript\nDESCRIPTION: Illustrates how to set the nonce for the User Operation when calling getPaymasterData. This parameter is required and of type bigint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n, // [!code focus]\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Transaction Formatter Configuration\nDESCRIPTION: Shows how to customize transaction formatting with custom fields and exclusions using defineTransaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineTransaction, defineChain, hexToBigInt } from 'viem'\n\ntype RpcTransactionOverrides = {\n  mint: `0x${string}`\n}\ntype TransactionOverrides = {\n  mint: bigint\n}\n\nconst example = defineChain({\n  /* ... */\n  formatters: {\n    transaction: defineTransaction({\n      exclude: ['gasPrice'],\n      format(args: RpcTransactionOverrides): TransactionOverrides {\n        return {\n          mint: hexToBigInt(args.mint)\n        }\n      },\n    }),\n  },\n})\n\nconst transaction = await client.getTransaction({ hash: '0x...' })\n//    ^? { ..., gasPrice: never, mint: bigint, ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Paymaster Data Function for Bundler Client\nDESCRIPTION: Shows how to implement a custom getPaymasterData function for handling paymaster properties of User Operations. This function retrieves the necessary paymaster data for sending User Operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundlerClient = createBundlerClient({\n  chain: mainnet,\n  paymaster: { // [!code focus]\n    async getPaymasterData(userOperation) { // [!code focus]\n      // Retrieve paymaster properties for the User Operation. // [!code focus]\n      return { // [!code focus]\n        paymaster: '0x...', // [!code focus]\n        paymasterData: '0x...', // [!code focus]\n        paymasterVerificationGasLimit: 69420n, // [!code focus]\n        paymasterPostOpGasLimit: 69420n, // [!code focus]\n      } // [!code focus]\n    } // [!code focus]\n  } // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Sender Address in User Operation\nDESCRIPTION: Shows how to set the sender parameter when signing a user operation. The sender parameter specifies the account address that is making the operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await account.signUserOperation({\n  callData: '0xdeadbeef',\n  callGasLimit: 141653n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 15000000000n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  paymaster: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  paymasterData: '0xdeadbeef',\n  paymasterPostOpGasLimit: 69420n,\n  paymasterVerificationGasLimit: 69420n,\n  preVerificationGas: 53438n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  verificationGasLimit: 259350n,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating prepareRequest Import and Usage in TypeScript\nDESCRIPTION: Shows the renaming of prepareRequest to prepareTransactionRequest and its new import path from 'viem/actions'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  prepareTransactionRequest,\n} from 'viem/actions'\n```\n\n----------------------------------------\n\nTITLE: Importing keccak256 from viem\nDESCRIPTION: Shows how to import the keccak256 function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/keccak256.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { keccak256 } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem with Local Account for ZKSync\nDESCRIPTION: Configuration for viem wallet client with a hoisted local account created from a private key, used for ZKSync interactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { publicActionsL2, walletActionsL1 } from 'viem/zksync'\n\nexport const zksyncClient = createPublicClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL2())\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Owner Account\nDESCRIPTION: Creating an owner account from a private key using Viem's privateKeyToAccount utility\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toNexusSmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Initializing Trust Smart Account\nDESCRIPTION: Example showing how to create a Trust Smart Account instance using the toTrustSmartAccount function from permissionless.js.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toTrustSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toTrustSmartAccount } from 'permissionless/accounts'\nimport { client } from './client.js'\nimport { owner } from './owner.js'\n\nconst account = await toTrustSmartAccount({\n  client,\n  owner: owner,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing walletActionsL1 Extension for OP Stack in TypeScript\nDESCRIPTION: This snippet shows how to import the 'walletActionsL1' extension, which provides a suite of Wallet Actions for Layer 1 chains interacting with Layer 2 (OP Stack) chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletActionsL1 } from 'viem/op-stack'\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting with Local Private Key for OP Stack Transactions\nDESCRIPTION: Demonstrates how to hoist a local account (private key) at the client level to simplify deposit transaction calls without repeatedly passing the account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Installing isHex Function from viem Library in TypeScript\nDESCRIPTION: Shows how to import the isHex function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isHex.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isHex } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Writing to Contracts with Ethers.js\nDESCRIPTION: Example of writing data to a smart contract using Ethers.js. This connects to the Ethereum provider through window.ethereum, gets a signer, and calls the mint function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Contract, providers } from 'ethers'\nimport { wagmiContractConfig } from './abi'\n\nconst provider = new providers.Web3Provider(window.ethereum)\n\nconst [address] = await provider.listAccounts()\nconst signer = provider.getSigner(address)\n\nconst { abi, address } = wagmiContractConfig\nconst contract = new Contract(address, abi, signer)\nconst hash = await contract.mint()\n```\n\n----------------------------------------\n\nTITLE: Creating a Kernel Smart Account with ECDSA Verification\nDESCRIPTION: Example of implementing a Kernel Smart Account using the toEcdsaKernelSmartAccount function from permissionless.js with a client and owner.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toEcdsaKernelSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toEcdsaKernelSmartAccount } from 'permissionless/accounts'\nimport { client } from './client.js'\nimport { owner } from './owner.js'\n\nconst account = await toEcdsaKernelSmartAccount({\n  client,\n  owners: [owner],\n  version: '0.3.1',\n})\n```\n\n----------------------------------------\n\nTITLE: Using trim to remove leading zero bytes\nDESCRIPTION: Demonstrates how to use the 'trim' function to remove leading zero bytes from a hex value and a byte array.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/trim.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { trim } from 'viem'\n\ntrim('0x00000000000000000000000000000000000000000000000000000001a4e12a45')\n// 0x01a4e12a45\n\ntrim(new Uint8Array([0, 0, 0, 0, 0, 0, 1, 122, 51, 123]))\n// Uint8Array [1,122,51,123]\n```\n\n----------------------------------------\n\nTITLE: Using normalize function to normalize ENS name in TypeScript\nDESCRIPTION: Demonstrates the usage of the normalize function to normalize an ENS name. The function takes an ENS name as input and returns the normalized version.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/utilities/normalize.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalize } from 'viem/ens'\n\nnormalize('wagmi-d𝝣v.eth') // [!code focus:2]\n// 'wagmi-dξv.eth'\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity Event with Indexed and Non-indexed Arguments\nDESCRIPTION: This snippet demonstrates the definition of a Solidity event named 'Transfer' with three indexed arguments and one non-indexed argument. It shows how to structure an event with different parameter types and indexing.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/glossary/terms.md#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(\n  bool indexed foo, \n  uint256 baz, \n  string indexed bar, \n  boolean indexed barry\n)\n```\n\n----------------------------------------\n\nTITLE: Parameter example for parseEip712Transaction\nDESCRIPTION: Shows an example of the tx parameter required by the parseEip712Transaction function. The tx parameter is a Hex string representing the serialized EIP712 transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/parseEip712Transaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst serializedTransaction =\n    '0x71f87f8080808094a61464658afeaf65cccaafd3a512b69a83b77618830f42408001a073a20167b8d23b610b058c05368174495adf7da3a4ed4a57eb6dbdeb1fafc24aa02f87530d663a0d061f69bb564d2c6fb46ae5ae776bbd4bd2a2a4478b9cd1b42a82010e9436615cf349d7f6344891b1e7ca7c72883f5dc04982c350c080c0'\nconst transaction = parseEip712Transaction(serializedTransaction)\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Client\nDESCRIPTION: Setting up a Viem public client configuration for mainnet with HTTP transport\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toNexusSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Test Client Setup Configuration in TypeScript\nDESCRIPTION: Configuration setup for creating a test client using viem library. It initializes a test client with Foundry chain configuration and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/stopImpersonatingAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport with Reconnection Settings\nDESCRIPTION: Various examples of configuring reconnection behavior for WebSocket transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', {\n  reconnect: false,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', {\n  reconnect: {\n    attempts: 10,\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://1.rpc.thirdweb.com/...', {\n  reconnect: {\n    delay: 1_000,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using hexToBytes Function in TypeScript\nDESCRIPTION: Shows how to use the hexToBytes function to decode a hex value to a byte array.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hexToBytes } from 'viem'\n\nhexToBytes('0x48656c6c6f20576f726c6421')\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n\nhexToBytes(\n  '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000',\n  { size: 32 }\n)\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n```\n\n----------------------------------------\n\nTITLE: Migrating from WebSocketProvider to webSocket transport in viem\nDESCRIPTION: Demonstrates replacing Ethers' WebSocketProvider with viem's webSocket transport function for WebSocket connections.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\n\nconst provider = new providers.WebSocketProvider('wss://eth-mainnet.g.alchemy.com/v2/<apiKey>') // [!code hl]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, webSocket } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code hl]\n  chain: mainnet, // [!code hl]\n  transport: webSocket('wss://eth-mainnet.g.alchemy.com/v2/<apiKey>') // [!code hl]\n}) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Using emitOnBegin Option with watchBlockNumber in TypeScript\nDESCRIPTION: Shows how to use the emitOnBegin option when calling watchBlockNumber. This option determines whether to emit the latest block number to the callback when the subscription opens.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = publicClient.watchBlockNumber(\n  { \n    emitOnBegin: true,\n    onBlockNumber: blockNumber => console.log(blockNumber),\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing toHex Function from Viem\nDESCRIPTION: Shows how to import the toHex function from the Viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toHex } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Specifying L1 Batch Number Parameter\nDESCRIPTION: Example highlighting the 'number' parameter required for the getL1BatchDetails function, which specifies which L1 batch to retrieve details for.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchDetails.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst batchDetails = await client.getL1BatchDetails({\n  number: 1  // [!code focus]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Fee Per Gas in Client Execute Method\nDESCRIPTION: Example of setting the maxFeePerGas parameter for a viem client execute call. This configures the total maximum fee per gas unit in wei that the transaction will pay.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ]\n    },\n    {\n      calls: [\n        {\n          data: '0xdeadbeef',\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        },\n      ],\n    },\n  ],\n  maxFeePerGas: parseGwei('20'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: State Override Configuration\nDESCRIPTION: Shows how to use state override functionality to modify blockchain state temporarily during gas estimation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await bundlerClient.estimateUserOperationGas({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  stateOverride: [\n    {\n      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n      balance: parseEther('1'),\n      stateDiff: [\n        {\n          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0',\n          value: '0x00000000000000000000000000000000000000000000000000000000000001a4',\n        },\n      ],\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using parseEip712Transaction to parse a serialized transaction\nDESCRIPTION: Demonstrates how to use the parseEip712Transaction function to parse a serialized EIP712 transaction. The function takes a hex string as input and returns a ZksyncTransactionSerializableEIP712 object.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/parseEip712Transaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEip712Transaction } from 'viem/zksync'\n\nconst serializedTransaction =\n    '0x71f87f8080808094a61464658afeaf65cccaafd3a512b69a83b77618830f42408001a073a20167b8d23b610b058c05368174495adf7da3a4ed4a57eb6dbdeb1fafc24aa02f87530d663a0d061f69bb564d2c6fb46ae5ae776bbd4bd2a2a4478b9cd1b42a82010e9436615cf349d7f6344891b1e7ca7c72883f5dc04982c350c080c0'\nconst transaction = parseEip712Transaction(serializedTransaction)\n```\n\n----------------------------------------\n\nTITLE: FromBytes with Options\nDESCRIPTION: Example of using fromBytes with size option for fixed-length byte arrays.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfromBytes(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), \n  {\n    size: 32,\n    to: 'string'\n  }\n)\n// 'Hello world'\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Client in TypeScript\nDESCRIPTION: Shows how to create a wallet client using viem's createWalletClient function with mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/verifyAuthorization.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client for viem in TypeScript\nDESCRIPTION: This code snippet shows how to create a publicClient using viem library. It sets up a client for the Ethereum mainnet using HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using getApprovalBasedPaymasterInput Function\nDESCRIPTION: Demonstrates how to use the getApprovalBasedPaymasterInput function with sample parameters including innerInput, minAllowance, and token address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getApprovalBasedPaymasterInput.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getApprovalBasedPaymasterInput } from 'viem/zksync'\n\nconst data = getApprovalBasedPaymasterInput({\n  innerInput: '0x',\n  minAllowance: 1n,\n  token: \"0x65C899B5fb8Eb9ae4da51D67E1fc417c7CB7e964\",\n})\n```\n\n----------------------------------------\n\nTITLE: Storage Access with Block Number Specification\nDESCRIPTION: Example of accessing storage with a specific block number parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getStorageAt.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst bytecode = await publicClient.getStorageAt({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  slot: toHex(0),\n  blockNumber: 15121123n\n})\n```\n\n----------------------------------------\n\nTITLE: Using bytecode parameter with CREATE2\nDESCRIPTION: Shows how to specify the contract bytecode for CREATE2 deployments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetContractAddress({\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',\n  opcode: 'CREATE2',\n  salt: toBytes('wagmi'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using serializeSignature to convert a structured signature to hex in TypeScript\nDESCRIPTION: Demonstrates how to use the serializeSignature function to convert a structured signature (with r, s, and yParity components) into a hex-formatted string. The function takes a Signature object as input and returns a Hex string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeSignature.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeSignature } from 'viem'\n\nserializeSignature({\n  r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n  s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n  yParity: 1\n})\n// \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport for Paymaster Client\nDESCRIPTION: Setting up the required transport parameter for a Paymaster Client. The transport defines how the client communicates with the Paymaster service.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPaymasterClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://public.pimlico.io/v2/11155111/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting nonce Parameter in User Operation\nDESCRIPTION: Shows the usage of the nonce parameter in User Operations. The nonce is a bigint value that represents the transaction sequence number for the sender's account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Events in Filter/Log Actions in viem\nDESCRIPTION: Example of using the new multiple events support in filter and log actions like getLogs. This feature allows specifying multiple event signatures in a single call.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from \"viem\";\nimport { publicClient } from \"./client\";\n\nconst logs = publicClient.getLogs({\n  events: parseAbi([\n    \"event Approval(address indexed owner, address indexed sender, uint256 value)\",\n    \"event Transfer(address indexed from, address indexed to, uint256 value)\",\n  ]),\n});\n```\n\n----------------------------------------\n\nTITLE: Viem Public Client Configuration\nDESCRIPTION: Configuration setup for creating a Viem public client instance using mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/error-handling.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Client configuration for viem's experimental actions (TypeScript)\nDESCRIPTION: Sets up a wallet client with the mainnet chain and a custom transport using the window.ethereum provider. The client is extended with experimental EIP-5792 actions that enable support for call batches.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/waitForCallsStatus.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window'\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions())\n\nexport const [account] = await walletClient.getAddresses()\n```\n\n----------------------------------------\n\nTITLE: ZKsync Smart Account Address Parameter Example\nDESCRIPTION: Shows how to specify the contract address parameter when creating a ZKsync Smart Account. The address parameter represents the deployed Account's Contract implementation address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSinglesigSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toSinglesigSmartAccount({\n  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', \n  privateKey: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Size Parameter with pad Function\nDESCRIPTION: Demonstrates how to specify a custom size (in bytes) for the padding operation instead of using the default 32 bytes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/pad.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npad('0xa4e12a45', {\n  size: 16\n})\n// 0x000000000000000000000000a4e12a45\n```\n\n----------------------------------------\n\nTITLE: Setting up a Viem Public Client\nDESCRIPTION: Configuration for creating a public client with viem, using the mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toEcdsaKernelSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { mainnet } from 'viem/chains'\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Block Transaction Data with viem in TypeScript\nDESCRIPTION: Example of retrieving transaction data from a block using the getRawBlockTransaction function. This code imports a configured client and calls the function with a block number parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getRawBlockTransactions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\n\nconst rawTx = await client.getRawBlockTransaction({\n  number: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Ranking in Fallback Transport\nDESCRIPTION: This snippet shows how to disable automatic ranking for fallback transports.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  rank: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing hashMessage from viem\nDESCRIPTION: Shows how to import the hashMessage function from the viem library\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashMessage } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Specifying start offset when slicing data\nDESCRIPTION: Demonstrates specifying the start byte offset when slicing hex or byte array data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nslice(\n  '0x0123456789', \n  1 // [!code focus]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring viem PublicClient and Factory for Counterfactual EIP-712 Domain Reading\nDESCRIPTION: This snippet shows the configuration for reading EIP-712 domain of a counterfactual contract. It sets up the publicClient and defines the factory object with its address and ABI.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getEip712Domain.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http, parseAbi } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const factory = {\n  address: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n  abi: parseAbi(['function createAccount(address owner, uint256 salt)']),\n} as const\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Setup\nDESCRIPTION: Configuration setup for creating a public client with mainnet connection and extending it with L1 public actions. Includes both JSON-RPC and Local account setup options.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1Allowance.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/zksync'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(publicActionsL1())\n\n// JSON-RPC Account\nexport const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Solidity Function Returning Bytes Data\nDESCRIPTION: The Solidity function that returns the bytes data used in the bytes decoding example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Example {\n  function simpleBytes() public pure returns (bytes memory) {\n    bytes memory value = abi.encode(1);\n    return abi.encode(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BytesToBigInt Function Usage\nDESCRIPTION: Demonstrates converting byte arrays to BigInt values using bytesToBigInt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bytesToBigInt } from 'viem'\n\nbytesToBigInt(\n  new Uint8Array([12, 92, 243, 146, 17, 135, 111, 181, 229, 136, 67, 39, 250, 86, 252, 11, 117])\n)\n// 4206942069420694206942069420694206942069n\n\nbytesToBigInt(\n  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 92, 243, 146, 17, 135, 111, 181, 229, 136, 67, 39, 250, 86, 252, 11, 117]),\n  { size: 32 }\n)\n// 4206942069420694206942069420694206942069n\n```\n\n----------------------------------------\n\nTITLE: Basic KZG Setup Implementation\nDESCRIPTION: Example showing how to set up KZG interface using c-kzg library and mainnet trusted setup path.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/setupKzg.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nconst kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n```\n\n----------------------------------------\n\nTITLE: Including Signature in User Operation with TypeScript\nDESCRIPTION: This snippet illustrates how to include a pre-signed signature when preparing a user operation. The signature is provided as a hexadecimal string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperation = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  signature: '0x...', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing Standard Transaction in Viem\nDESCRIPTION: Demonstrates how to use the parseTransaction function to parse a standard serialized transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/parseTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseTransaction } from 'viem'\n\nconst transaction = parseTransaction('0x02ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Client for Ethereum Mainnet\nDESCRIPTION: Example of how to create a public client using viem, configured for the Ethereum mainnet. This client is used in the Thirdweb Smart Account implementation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toThirdwebSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { mainnet } from 'viem/chains'\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Building Viem from Source\nDESCRIPTION: Step-by-step commands to clone, build, and link Viem from the source repository. This approach is useful for contributing to Viem or testing very recent changes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/installation.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone wevm/viem\ncd viem\npnpm install\npnpm build\npnpm link --global\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Credential Creation with Relying Party Configuration\nDESCRIPTION: Shows how to create a WebAuthn credential with specific relying party (RP) information.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/createWebAuthnCredential.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n  rp: {\n    id: 'example.com',\n    name: 'Example',\n  },\n})\n\nconst account = toWebAuthnAccount({\n  credential,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Coinbase Smart Account with viem\nDESCRIPTION: This snippet demonstrates how to create a Coinbase Smart Account using the toCoinbaseSmartAccount function from viem. It requires a client and owner(s) to be provided.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toCoinbaseSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toCoinbaseSmartAccount } from 'viem/account-abstraction'\nimport { client } from './client.js'\nimport { owner } from './owner.js'\n\nconst account = await toCoinbaseSmartAccount({\n  client,\n  owners: [owner],\n})\n```\n\n----------------------------------------\n\nTITLE: Using getL2TransactionHash with Transaction Receipt\nDESCRIPTION: Shows how to extract TransactionDeposited logs from a receipt and compute the L2 transaction hash using the getL2TransactionHash function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getL2TransactionHash.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractTransactionDepositedLogs, getL2TransactionHash } from 'viem'\n\nconst receipt = await client.getTransactionReceipt({\n  hash: '0xa08acae48f12243bccd7153c88d892673d5578cce4ee9988c0332e8bba47436b',\n})\n\nconst [log] = extractTransactionDepositedLogs(receipt)\n\nconst l2Hash = getL2TransactionHash({ log })\n```\n\n----------------------------------------\n\nTITLE: Reset with Block Number Parameter\nDESCRIPTION: Example of resetting a fork to a specific block number using the blockNumber parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/reset.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.reset({\n  blockNumber: 69420n,\n  jsonRpcUrl: 'https://1.rpc.thirdweb.com'\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Hex Data with Smart Account\nDESCRIPTION: Example of signing a message using its raw data representation instead of the UTF-8 representation. This approach allows signing arbitrary binary data by providing a hexadecimal string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signMessage.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await account.signMessage({\n  message: { raw: '0x68656c6c6f20776f726c64' },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing toRlp function from viem in TypeScript\nDESCRIPTION: Shows how to import the toRlp function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toRlp.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toRlp } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI for L1 Fee Estimation\nDESCRIPTION: Example showing the contract ABI definition required for the estimateContractL1Fee function. Includes a mint function signature that will be used for the fee estimation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Fee.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [{ name: \"\", type: \"uint32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ZKsync Chain\nDESCRIPTION: Demonstrates how to define a custom chain using ZKsync's chain configuration, including formatters and serializers. Uses the defineChain utility from Viem with chainConfig from the ZKsync module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/chains.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from 'viem'\nimport { chainConfig } from 'viem/zksync'\n\nexport const zkStackExample = defineChain({\n  ...chainConfig,\n  name: 'ZKsync Example',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Requesting Wallet to Show Call Batch Status Using Viem in TypeScript\nDESCRIPTION: Demonstrates how to use the showCallsStatus method from EIP-5792 actions to request a wallet to display information about a previously sent call batch. The function takes an id parameter that identifies the specific call batch to display.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/showCallsStatus.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n \nawait walletClient.showCallsStatus({\n  id: '0x1234567890abcdef',\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Call Integration\nDESCRIPTION: Demonstrates how to make contract calls using ABI and function specifications.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { bundlerClient, publicClient } from './config'\nimport { wagmiAbi } from './abi'\n\nconst hash = await bundlerClient.sendUserOperation({\n  calls: [{\n    abi: wagmiAbi,\n    functionName: 'mint',\n    to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Using generateSiweNonce to Create a Random EIP-4361 Nonce\nDESCRIPTION: Demonstrates how to use the generateSiweNonce function to create a random nonce compliant with the EIP-4361 standard for Sign-In with Ethereum.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/generateSiweNonce.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateSiweNonce } from 'viem/siwe'\n\nconst nonce = generateSiweNonce()\n```\n\n----------------------------------------\n\nTITLE: Minting Value on L2 with Deposit Transaction\nDESCRIPTION: Shows how to mint (deposit) ETH on the L2 using the mint parameter, which is debited from the caller's L1 balance and credited on L2.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    mint: parseEther('1') // [!code focus]\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Block Gas Limit Example\nDESCRIPTION: Demonstrates how to set a block's gas limit using the testClient.setBlockGasLimit method. Uses bigint value to specify the gas limit.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockGasLimit.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setBlockGasLimit({\n  gasLimit: 420_000n\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Account Address for getProof in TypeScript\nDESCRIPTION: This snippet shows how to specify the account address when calling the getProof function. The address parameter is of type bigint and represents the account for which to retrieve the proof.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getProof.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst proof = await publicClient.getProof({\n  address: '0x4200000000000000000000000000000000000016', // [!code focus]\n  storageKeys: [\n    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n  ],\n  blockNumber: 42069n\n})\n```\n\n----------------------------------------\n\nTITLE: Importing privateKeyToAccount in TypeScript\nDESCRIPTION: Imports the privateKeyToAccount function from the viem/accounts module, which is used to create Private Key Accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/privateKeyToAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n```\n\n----------------------------------------\n\nTITLE: Importing parseUnits from viem\nDESCRIPTION: Shows how to import the parseUnits function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseUnits.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseUnits } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Slicing a hex string with specific parameters\nDESCRIPTION: Shows how to slice a hex string with a specific start offset, extracting a section of the data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nslice(\n  '0x0123456789', // [!code focus]\n  1,\n  4\n)\n```\n\n----------------------------------------\n\nTITLE: Using bytesToHex Function\nDESCRIPTION: Demonstrates the usage of the bytesToHex shortcut function for encoding byte arrays to hex values, with and without size options.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bytesToHex } from 'viem'\n\nbytesToHex(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]),\n)\n// \"0x48656c6c6f20576f726c6421\"\n\nbytesToHex(\n  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]),\n  { size: 32 }\n)\n// \"0x48656c6c6f20576f726c64210000000000000000000000000000000000000000\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Viem Public Client in TypeScript\nDESCRIPTION: This snippet shows how to set up a public client using Viem, configuring it with the Ethereum mainnet chain and HTTP transport. This client can be used for various Ethereum interactions, including creating filters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createPendingTransactionFilter.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Config for Deploy Factory Example in TypeScript\nDESCRIPTION: Configuration setup for the deployless call example using a deploy factory. This includes creating a public client and setting the owner address for the Smart Account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const owner = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing fromBlobs Function from viem in TypeScript\nDESCRIPTION: Basic import statement for the fromBlobs function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBlobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromBlobs } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Name for IPC Transport in TypeScript\nDESCRIPTION: This example shows how to set a custom name for the IPC Transport when creating it.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', { \n  name: 'Reth IPC',  // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using getGame to Retrieve a Dispute Game in TypeScript\nDESCRIPTION: Example demonstrating how to use the getGame action to retrieve a valid dispute game on an OP Stack chain. The code shows how to pass the required L2 block number and target chain parameters to get game information.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getGame.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains'\nimport { account, publicClientL1 } from './config'\n\nconst game = await publicClientL1.getGame({\n  l2BlockNumber: 69420n,\n  targetChain: optimism,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Account Owner\nDESCRIPTION: Example of creating an account owner from a private key using viem's privateKeyToAccount function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toTrustSmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n \nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Importing ENS Label Hash Functions in TypeScript\nDESCRIPTION: Shows how to import the labelhash and normalize functions from the viem/ens package.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/utilities/labelhash.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { labelhash, normalize } from 'viem/ens'\n```\n\n----------------------------------------\n\nTITLE: Configuring Methods for IPC Transport in TypeScript\nDESCRIPTION: This snippet shows how to include specific methods when creating an IPC Transport. It allows you to specify which RPC methods to include or exclude.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', {\n  methods: {\n    include: ['eth_sendTransaction', 'eth_signTypedData_v4'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Count\nDESCRIPTION: Shows how to configure the retry count for failed requests in the transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom(window.ethereum!, {\n  retryCount: 5,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for IPC Transport in TypeScript\nDESCRIPTION: This example shows how to set the timeout for async IPC requests in the IPC Transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', {\n  timeout: 60_000, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Gas Limit in TypeScript\nDESCRIPTION: Demonstrates how to set a gas limit when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait walletClient.writeContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  gas: 69420n,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getWithdrawalHashStorageSlot from viem\nDESCRIPTION: Shows how to import the getWithdrawalHashStorageSlot function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawalHashStorageSlot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getWithdrawalHashStorageSlot } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Storage Access with Block Tag Specification\nDESCRIPTION: Example of accessing storage using a block tag parameter instead of block number.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getStorageAt.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst bytecode = await publicClient.getStorageAt({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  slot: toHex(0),\n  blockTag: 'safe'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client for zkSync EIP712 Transactions\nDESCRIPTION: Sets up a wallet client configured for zkSync network with EIP712 transaction support. Demonstrates both JSON-RPC and local private key account setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { zksync } from 'viem/chains'\nimport { eip712Actions } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  chain: zksync,\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Adding required chain parameter to wallet client\nDESCRIPTION: Demonstrates how to add the now-required chain parameter to wallet clients for transaction operations, either by hoisting the chain at the client level or passing it directly to actions.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\nimport { createWalletClient, custom, getAccount } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const walletClient = createWalletClient({\n+ chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\nconst account = getAccount('0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266')\n\nconst hash = await walletClient.sendTransaction({\n  account,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n```\n\n----------------------------------------\n\nTITLE: Importing recoverAuthorizationAddress in TypeScript\nDESCRIPTION: This snippet shows how to import the recoverAuthorizationAddress function from the viem/utils module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/recoverAuthorizationAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { recoverAuthorizationAddress } from 'viem/utils'\n```\n\n----------------------------------------\n\nTITLE: Paymaster Data Configuration\nDESCRIPTION: Example of using paymasterData parameter with a direct paymaster address for gas estimation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await bundlerClient.estimateUserOperationGas({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n  paymasterData: '0xdeadbeef',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Viem Test Client for Foundry in TypeScript\nDESCRIPTION: This code sets up a test client using Viem library for interacting with the Foundry blockchain. It creates a client with specific chain, mode, and transport configurations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/dropTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Creating Owner Account from Private Key\nDESCRIPTION: This snippet shows how to create an owner account from a private key using viem's privateKeyToAccount function. The private key should be replaced with an actual key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toCoinbaseSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n \nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Client Configuration for Fee Estimation\nDESCRIPTION: Configuration setup for creating a public client with ZKSync chain and extending it with L2 actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/estimateFee.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Using isHex Function to Check Hex Values in TypeScript\nDESCRIPTION: Demonstrates usage of the isHex function to check various values for hex format. It shows examples of both valid and invalid hex values.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isHex.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isHex } from 'viem'\n\nisHex('0x1a4')\n// true\n\nisHex('0x1a4z')\nisHex('foo')\n// false\n```\n\n----------------------------------------\n\nTITLE: Using AccessList Parameter in Call Action\nDESCRIPTION: Example of specifying the accessList parameter when making a call. This parameter provides a list of addresses and storage keys that will be accessed during execution.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  accessList: [ // [!code focus:6]\n    {\n      address: '0x1',\n      storageKeys: ['0x1'],\n    },\n  ],\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getL2TransactionHashes Function in TypeScript\nDESCRIPTION: This snippet shows how to import the getL2TransactionHashes function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getL2TransactionHashes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getL2TransactionHashes } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing formatGwei Function from Viem\nDESCRIPTION: Shows how to import the formatGwei function from the Viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatGwei.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatGwei } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing createSiweMessage from viem/siwe\nDESCRIPTION: Shows how to import the createSiweMessage function from the viem/siwe package.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/createSiweMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSiweMessage } from 'viem/siwe'\n```\n\n----------------------------------------\n\nTITLE: Specifying end offset when slicing data\nDESCRIPTION: Demonstrates specifying the end byte offset when slicing hex or byte array data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nslice(\n  '0x0123456789', \n  1,\n  4 // [!code focus]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Paymaster Context for a Bundler Client\nDESCRIPTION: Demonstrates how to provide paymaster-specific context when creating a Bundler Client. This context can contain additional information needed by the paymaster service.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymasterClient = createPaymasterClient({\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n\nconst bundlerClient = createBundlerClient({\n  chain: mainnet,\n  paymaster: paymasterClient,\n  paymasterContext: { // [!code focus]\n    policyId: 'abc123' // [!code focus]\n  }, // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Logs Parameter in getWithdrawals Function\nDESCRIPTION: Shows how to explicitly pass the logs parameter to the getWithdrawals function. The logs parameter is an array of L2 logs from the transaction receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawals.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst withdrawals = getWithdrawals({ \n  logs: receipt.logs\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Client with Viem in TypeScript\nDESCRIPTION: This snippet shows how to create a test client using the createTestClient function from viem. It sets up the client with the Foundry chain, Anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockBaseFeePerGas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Basic toBytes Usage Examples - TypeScript\nDESCRIPTION: Demonstrates converting different data types to byte arrays using toBytes function\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBytes } from 'viem'\n\ntoBytes('Hello world')\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n\ntoBytes('0x48656c6c6f20576f726c6421')\n// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n\ntoBytes(420)\n// Uint8Array([1, 164])\n\ntoBytes(true)\n// Uint8Array([1])\n```\n\n----------------------------------------\n\nTITLE: Migrating from getAccount to ethersWalletToAccount for Ethers Wallet\nDESCRIPTION: Shows how to migrate from the deprecated getAccount function to ethersWalletToAccount for adapting Ethers wallets to work with viem.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n- import { getAccount } from 'viem/ethers'\n+ import { ethersWalletToAccount } from 'viem/ethers'\nimport { Wallet } from 'ethers'\n\n- const account = getAccount(new Wallet('0x...'))\n+ const account = ethersWalletToAccount(new Wallet('0x...'))\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Owner Account from Private Key\nDESCRIPTION: Example showing how to create an owner account using a private key with Viem's privateKeyToAccount function. This owner is required as part of the owners array for the toSafeSmartAccount function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSafeSmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n \nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Importing wrapTypedDataSignature from viem\nDESCRIPTION: How to import the wrapTypedDataSignature function from viem's experimental ERC-7739 module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wrapTypedDataSignature } from 'viem/experimental/erc7739'\n```\n\n----------------------------------------\n\nTITLE: Installing Viem Canary (Unreleased) Version\nDESCRIPTION: Commands for installing the canary version of Viem which tracks the main branch. This allows testing of latest features before official release.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/installation.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add viem@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install viem@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add viem@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add viem@canary\n```\n\n----------------------------------------\n\nTITLE: Importing hashTypedData Function\nDESCRIPTION: Shows how to import the hashTypedData function from the viem/experimental/erc7739 package.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/hashTypedData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashTypedData } from 'viem/experimental/erc7739'\n```\n\n----------------------------------------\n\nTITLE: Contract Function Overloads in Solidity\nDESCRIPTION: Example of function overloading in Solidity contracts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/faq.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction safeTransferFrom(address, address, uint256) {}\nfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes data) {}\n```\n\n----------------------------------------\n\nTITLE: Local Account Configuration\nDESCRIPTION: Demonstrates wallet client configuration with a local account using a private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/signTransaction.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { eip712WalletActions } from 'viem/zksync'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n```\n\n----------------------------------------\n\nTITLE: Using fromBlobs with blobs Parameter in TypeScript\nDESCRIPTION: Example focusing on the blobs parameter which provides the Viem-shaped blobs to be transformed.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBlobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromBlobs } from 'viem'\n\nconst data = fromBlobs({ \n  blobs: ['0x...'] // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Optional opData in ERC-7821 Batch Execution\nDESCRIPTION: Example showing how to include optional operation data (opData) when executing batches, which passes additional hex data to the execution context of a specific batch.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ],\n      opData: '0xdeadbeef',\n    },\n    {\n      calls: [\n        {\n          data: '0xdeadbeef',\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from ethers Wallet to privateKeyToAccount\nDESCRIPTION: Demonstrates how to replace the ethers Wallet adapter with viem's native privateKeyToAccount implementation for local accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n- import { Wallet } from 'ethers'\n- import { getAccount } from 'viem/ethers'\n+ import { privateKeyToAccount } from 'viem/accounts'\n\nconst privateKey = '0x...'\n- const account = getAccount(new Wallet(privateKey))\n+ const account = privateKeyToAccount(privateKey)\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing parseAbiParameter from viem\nDESCRIPTION: Shows how to import the parseAbiParameter function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameter.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiParameter } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using withdrawalProof in proveWithdrawal Function in TypeScript\nDESCRIPTION: Example of using the withdrawalProof parameter in the proveWithdrawal function. The withdrawalProof provides proof of the L2 withdrawal and is typically derived from the buildProveWithdrawal Action.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.proveWithdrawal({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  l2OutputIndex: 4529n,\n  gas: 420_000n, \n  outputRootProof: { /* ... */ },\n  withdrawalProof: [ /* ... */ ], // [!code focus]\n  withdrawal: { /* ... */ },\n  targetChain: optimism,\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Setup\nDESCRIPTION: Configuration setup for wallet client with L2 actions and account handling\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/initiateWithdrawal.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { optimism } from 'viem/chains'\nimport { walletActionsL2 } from 'viem/op-stack'\n\nexport const walletClientL2 = createWalletClient({\n  chain: optimism,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL2())\n\n// JSON-RPC Account\nexport const [account] = await walletClientL2.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Public Client Configuration\nDESCRIPTION: Setup of the viem public client with mainnet configuration and HTTP transport\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsResolver.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration for Contract Events\nDESCRIPTION: Configuration setup for the viem public client using mainnet and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Using isBytes to check different value types\nDESCRIPTION: Demonstrates how to use the isBytes function to check whether values are byte arrays. Shows examples with both a Uint8Array (returns true) and a regular array (returns false).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isBytes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isBytes } from 'viem'\n\nisBytes(new Uint8Array([1, 69, 420]))\n// true\n\nisBytes([1, 69, 420])\n// false\n```\n\n----------------------------------------\n\nTITLE: Parsing Celo Transactions\nDESCRIPTION: Shows how to parse RLP-encoded Celo transactions using the parseTransaction utility, supporting CIP-64, EIP-1559, EIP-2930, and Legacy transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/celo.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseTransaction } from 'viem/celo'\n\nconst transaction = parseTransaction('0x7cf84682a4ec80847735940084773594008094765de816845861e75a25fca122bb6898b8b1282a808094f39fd6e51aad88f6f4ce6ab8827279cfffb92266880de0b6b3a764000080c0')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Client with Foundry in TypeScript\nDESCRIPTION: Creates a test client instance configured for the Foundry chain using Anvil mode and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setAutomine.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Importing parseSiweMessage from viem/siwe in TypeScript\nDESCRIPTION: Shows how to import the parseSiweMessage function from the viem/siwe library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/parseSiweMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseSiweMessage } from 'viem/siwe'\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Hash Parameter for isWithdrawalFinalized in viem\nDESCRIPTION: Example showing how to specify the hash parameter representing the L2 transaction where the withdrawal was initiated when checking its finalization status.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.isWithdrawalFinalized({\n  client: zksyncClient,\n  hash: '0x…',  // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Account Configuration\nDESCRIPTION: Shows how to configure a wallet client with a JSON-RPC account setup.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/signTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { eip712WalletActions } from 'viem/zksync'\n\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n```\n\n----------------------------------------\n\nTITLE: Setting Domain Parameter for getSourceHash\nDESCRIPTION: Shows how to set the domain parameter which specifies the type of deposit transaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sourceHash = getSourceHash({\n  domain: 'userDeposit', // [!code focus]\n  l1BlockHash:\n    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',\n  l1LogIndex: 196,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Public Client for Ethereum Mainnet in TypeScript\nDESCRIPTION: This code snippet shows how to create a public client for interacting with the Ethereum mainnet using the viem library. It sets up the client with the mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting maxPriorityFeePerGas Parameter in User Operation\nDESCRIPTION: Shows how to set the maximum priority fee per gas for User Operation execution. This parameter of type bigint determines the priority fee to be paid to validators.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Paymaster Verification Gas Limit in TypeScript\nDESCRIPTION: Demonstrates how to set the paymasterVerificationGasLimit, which specifies the amount of gas to allocate for the Paymaster validation code.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n  paymasterData: '0xdeadbeef',\n  paymasterVerificationGasLimit: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Key for the Bundler Client\nDESCRIPTION: Shows how to specify a custom key for the Bundler Client. This is an optional identifier for the client, which defaults to \"bundler\" if not specified.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\n\nconst client = createBundlerClient({\n  key: 'foo', // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Importing formatUnits from viem\nDESCRIPTION: Shows how to import the formatUnits function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatUnits.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatUnits } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Mode for Event Log Parsing in viem\nDESCRIPTION: Demonstrates how to use the strict parameter to allow partial decoding of nonconforming logs. When set to false, parseEventLogs will attempt to decode logs that don't perfectly match the expected format.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst topics = parseEventLogs({\n  abi: wagmiAbi,\n  eventName: 'Transfer',\n  logs: [{\n    blockNumber: 69420n,\n    data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n    logIndex: 1,\n    topics: [\n      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', \n      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', \n      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'\n    ]\n    // ...\n  }],\n  strict: false // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Address Index in Derivation Path\nDESCRIPTION: Modify the address index in the derivation path (m/44'/60'/0'/0/${addressIndex}) when creating a mnemonic account to generate different addresses.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mnemonicToAccount } from 'viem/accounts'\n// ---cut---\nconst account = mnemonicToAccount(\n  'legal winner thank year wave sausage worth useful legal winner thank yellow',\n  {\n    accountIndex: 1,\n    addressIndex: 6 // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing getGeneralPaymasterInput from viem/zksync in TypeScript\nDESCRIPTION: Shows how to import the getGeneralPaymasterInput function from the viem/zksync library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getGeneralPaymasterInput.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGeneralPaymasterInput } from 'viem/zksync'\n```\n\n----------------------------------------\n\nTITLE: Displaying StackBlitz Link for ENS Examples in Markdown\nDESCRIPTION: This code snippet provides a markdown-formatted link to open the ENS examples from the viem project in StackBlitz. It uses an SVG image as a button for a visually appealing link.\nSOURCE: https://github.com/wevm/viem/blob/main/examples/ens/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/ens)\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Transport in Viem\nDESCRIPTION: Basic import statement for the HTTP transport module from Viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Initializing Solady Smart Account in TypeScript\nDESCRIPTION: Basic example of creating a Solady smart account using toSoladySmartAccount function with required client and owner parameters\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSoladySmartAccount } from 'viem/account-abstraction'\nimport { client, owner } from './config.js'\n\nconst account = await toSoladySmartAccount({\n  client,\n  owner,\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Setup\nDESCRIPTION: Configuration setup for the public client using viem with mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchPendingTransactions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing toFunctionSelector from viem\nDESCRIPTION: Importing the toFunctionSelector utility from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionSelector.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toFunctionSelector } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Setting accountIndex in hdKeyToAccount\nDESCRIPTION: Example showing how to specify the accountIndex option when creating an HD Account, which affects the account index used in the derivation path (m/44'/60'/${accountIndex}'/0/0).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { hdKeyToAccount } from 'viem/accounts'\n// ---cut---\nconst hdKey = HDKey.fromMasterSeed(...)\n\nconst account = hdKeyToAccount(\n  hdKey,\n  {\n    accountIndex: 1 // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using parseGwei to convert gwei to wei\nDESCRIPTION: Demonstrates converting a gwei string value ('420') to its corresponding wei amount as a bigint. The function performs the conversion by adding the appropriate number of zeros.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseGwei.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseGwei } from 'viem'\n\nparseGwei('420')\n// 420000000000n\n```\n\n----------------------------------------\n\nTITLE: Return Type Structure\nDESCRIPTION: Shows the structure of the return object from opaqueDataToDepositData function, including mint, value, gas, isCreation, and data fields.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/fromOpaqueData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  mint: bigint\n  value: bigint\n  gas: bigint\n  isCreation: boolean\n  data: Hex\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing encodeFunctionResult Behavior\nDESCRIPTION: Fixed an issue with the encodeFunctionResult function.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction encodeFunctionResult(abi, functionName, values) {\n  // Fixed implementation\n}\n```\n\n----------------------------------------\n\nTITLE: getL2TransactionHash Parameter Example\nDESCRIPTION: Detailed example showing the structure of the log parameter required by getL2TransactionHash, including all necessary fields and their formats.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getL2TransactionHash.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst l2Hash = getL2TransactionHash({ \n  log: {\n    args: {\n      from: '0x1a1E021A302C237453D3D45c7B82B19cEEB7E2e6',\n      opaqueData: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045000000000000520800',\n      to: '0x1a1E021A302C237453D3D45c7B82B19cEEB7E2e6',\n      version: 0n,\n    },\n    blockHash: '0x634c52556471c589f42db9131467e0c9484f5c73049e32d1a74e2a4ce0f91d57',\n    eventName: 'TransactionDeposited',\n    logIndex: 109,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Account Hoisting with buildProveWithdrawal in TypeScript\nDESCRIPTION: Example showing how to simplify buildProveWithdrawal calls by hoisting the account at the client level rather than passing it to each function call. This approach reduces repetition in code.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildProveWithdrawal.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClientL2, walletClientL1 } from './config'\n\nconst args = await publicClientL2.buildProveWithdrawal({\n  output,\n  withdrawal,\n})\n \nconst hash = await walletClientL1.proveWithdrawal(args)\n```\n\n----------------------------------------\n\nTITLE: Signing Typed Data with Verifier Domain\nDESCRIPTION: Example showing how to sign typed data with a verifierDomain parameter. Demonstrates using a domain separator configuration instead of a single verifier address, which includes name, version, chainId and verifying contract details.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signTypedData.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst signature = await walletClient.signTypedData({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  domain: { \n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail', \n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  verifierDomain: {\n    name: 'SoladyAccount',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: User Operation Hash Parameter Usage in TypeScript\nDESCRIPTION: Demonstrates how to use the required hash parameter when calling getUserOperation. The hash must be provided as a hexadecimal string with 0x prefix.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperation.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await publicClient.getUserOperation({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration with Account Hoisting\nDESCRIPTION: Configuration setup for a viem client with account hoisting, which allows the execute function to use the account set at the client level without specifying it in each call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { erc7821Actions } from 'viem/experimental'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const client = createClient({\n  account,\n  chain: mainnet,\n  transport: http(),\n}).extend(erc7821Actions())\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Delay in Fallback Transport\nDESCRIPTION: This snippet shows how to set the base delay between retries in fallback transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  retryDelay: 100,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing permissionless.js package\nDESCRIPTION: Commands for installing the permissionless package using different package managers (pnpm, npm, yarn, bun).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSafeSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add permissionless\n```\n\n----------------------------------------\n\nTITLE: Setting L2 Client Parameter for isWithdrawalFinalized in viem\nDESCRIPTION: Example showing how to specify the L2 client parameter when checking if a withdrawal transaction has been finalized on the L1 network.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.isWithdrawalFinalized({\n  client: zksyncClient, // [!code focus]\n  hash: '0x…',\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Change Index in Derivation Path\nDESCRIPTION: Modify the change index in the derivation path (m/44'/60'/0'/${changeIndex}/0) when creating a mnemonic account for different key derivation purposes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mnemonicToAccount } from 'viem/accounts'\n// ---cut---\nconst account = mnemonicToAccount(\n  'legal winner thank year wave sausage worth useful legal winner thank yellow',\n  {\n    accountIndex: 1,\n    addressIndex: 6,\n    changeIndex: 2 // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Signer Configuration\nDESCRIPTION: Example showing how to use a custom signer type when granting permissions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/grantPermissions.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await walletClient.grantPermissions({\n  expiry: 1716846083638,\n  permissions: [ \n    { \n      type: 'native-token-limit', \n      data: { \n        amount: parseEther('0.5'), \n      }, \n      required: true, \n    }, \n  ], \n  signer: {\n    type: 'key',\n    data: {\n      id: '...'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting for zkSync Deposits\nDESCRIPTION: Demonstrates how to hoist the account on the Wallet Client to avoid passing it to every deposit call. It shows examples for both JSON-RPC and local accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient, zksyncClient } from './config'\nimport { legacyEthAddress } from 'viem/zksync'\n\n// deposit ETH\nconst hash = await walletClient.deposit({\n  client: zksyncClient,\n  token: legacyEthAddress,\n  amount: 7_000_000_000n,\n  to: walletClient.account.address,\n  refundRecipient: walletClient.account.address,\n})\n\n// deposit ERC20\nconst txHash = await walletClient.deposit({\n  client: zksyncClient,\n  token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',\n  amount: 20n,\n  to: walletClient.account.address,\n  approveToken: true,\n  refundRecipient: walletClient.account.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Credential Creation Function Implementation\nDESCRIPTION: Example of using a custom credential creation function for environments without native WebAuthn support.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/createWebAuthnCredential.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as passkey from 'react-native-passkeys'\n\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n  createFn: passkey.create,\n})\n\nconst account = toWebAuthnAccount({\n  credential,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing concat Function from viem Library in TypeScript\nDESCRIPTION: Demonstrates how to import the concat function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/concat.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { concat } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing toBytes Function - TypeScript\nDESCRIPTION: Shows how to import the toBytes function from the viem library\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBytes } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Transport with Keep-Alive in TypeScript\nDESCRIPTION: Example of using the webSocket transport with the new keepAlive property to send keep-alive ping messages.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nwebSocket({\n  // other options\n  keepAlive: true\n})\n```\n\n----------------------------------------\n\nTITLE: Version Updates Markdown Documentation\nDESCRIPTION: Markdown formatted changelog entries describing version updates to the viem library, including patches, minor changes, and bug fixes.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`52c4c001`](https://github.com/wevm/viem/commit/52c4c0016a702bdacfb7de69c3f01d62de9af4db) Thanks [@jxom](https://github.com/jxom)! - Fixed typo in `hexToBigInt` export.\n\n## 1.13.2\n\n### Patch Changes \n\n- [#1265](https://github.com/wevm/viem/pull/1265) [`3fd1e788`](https://github.com/wevm/viem/commit/3fd1e788f2f3a82c943e58fc77a3dc5da1f798cf) Thanks [@mcdee](https://github.com/mcdee)! - Added multicall3 for holesky\n```\n\n----------------------------------------\n\nTITLE: Using getGeneralPaymasterInput Function in TypeScript\nDESCRIPTION: Demonstrates how to use the getGeneralPaymasterInput function with a simple innerInput parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getGeneralPaymasterInput.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGeneralPaymasterInput } from 'viem/zksync'\n\nconst data = getGeneralPaymasterInput({\n  innerInput: '0x',\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZKsync Main Contract Address in TypeScript\nDESCRIPTION: This example shows how to retrieve the address of the Main ZKsync Contract using a properly configured client with ZKsync support.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getMainContractAddress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst address = await client.getMainContractAddress();\n```\n\n----------------------------------------\n\nTITLE: Importing WebSocket Transport in TypeScript\nDESCRIPTION: Basic import statement for the webSocket transport function from viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { webSocket } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Basic Authorization Preparation Example\nDESCRIPTION: Demonstrates basic usage of prepareAuthorization to create an EIP-7702 Authorization object with minimal parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/prepareAuthorization.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './client'\n\nconst authorization = await walletClient.prepareAuthorization({\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing verifyAuthorization Function in TypeScript\nDESCRIPTION: Shows how to import the verifyAuthorization function from the viem/utils module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/verifyAuthorization.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyAuthorization } from 'viem/utils'\n```\n\n----------------------------------------\n\nTITLE: Importing serializeCompactSignature from Viem\nDESCRIPTION: Shows how to import the serializeCompactSignature function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeCompactSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeCompactSignature } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Setting signature for User Operation in TypeScript\nDESCRIPTION: Illustrates how to set the signature for the User Operation when calling getPaymasterData. This parameter is required and of type Hex.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  preVerificationGas: 69420n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c' // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing normalize function from viem/ens in TypeScript\nDESCRIPTION: Shows how to import the normalize function from the viem/ens module. This function is used to normalize ENS names.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/utilities/normalize.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalize } from 'viem/ens'\n```\n\n----------------------------------------\n\nTITLE: Importing getL2TransactionHash Function\nDESCRIPTION: Demonstrates how to import the getL2TransactionHash function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getL2TransactionHash.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getL2TransactionHash } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Wallet Client Configuration Setup\nDESCRIPTION: Configuration setup for the wallet client including chain selection and transport layer setup using window.ethereum.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/sendCalls.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'viem/window'\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions())\n\nexport const [account] = await walletClient.getAddresses()\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Clients with Local Account Hoisting\nDESCRIPTION: Configuration setup showing how to hoist a local account at the wallet client level. This example attaches a private key account to the wallet client during initialization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildProveWithdrawal.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Using Wallet Client with Hoisted Account and Verifier\nDESCRIPTION: Example of signing a message using a wallet client that has the account and verifier hoisted at the client level, eliminating the need to pass them for each signing operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n \nconst signature = await walletClient.signMessage({ \n  message: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting maxFeePerGas Parameter in User Operation\nDESCRIPTION: Demonstrates setting the maximum fee per gas for User Operation execution. The maxFeePerGas parameter is of type bigint and specifies the maximum amount to pay per unit of gas.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Local Account Configuration\nDESCRIPTION: Configuration setup for using a local account with private key in the wallet client.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signMessage.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Delay for IPC Transport in TypeScript\nDESCRIPTION: This snippet demonstrates how to set the base delay between retry attempts for the IPC Transport. The actual delay uses exponential backoff based on this value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', {\n  retryDelay: 100, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Making recovery and verification functions async\nDESCRIPTION: Shows how to update code to handle the change where recoverAddress, recoverMessageAddress, and verifyMessage are now async functions instead of synchronous functions.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\nimport { recoverMessageAddress } from 'viem'\n\n- recoverMessageAddress({ message: 'hello world', signature: '0x...' })\n+ await recoverMessageAddress({ message: 'hello world', signature: '0x...' })\n```\n\n----------------------------------------\n\nTITLE: Using hexToNumber Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the hexToNumber function, a shortcut for decoding hex to a number.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hexToNumber } from 'viem'\n\nhexToNumber('0x1a4')\n// 420\n\nhexToNumber(\n  '0x00000000000000000000000000000000000000000000000000000000000001a4', \n  { size: 32 }\n)\n// 420\n```\n\n----------------------------------------\n\nTITLE: Specifying Contract Creation for L2 Deployment\nDESCRIPTION: Example showing how to mark a transaction as a contract deployment using the isCreation flag, typically used with data parameter containing contract bytecode.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    data: '0x...',\n    gas: 69_420n,\n    isCreation: true // [!code focus]\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Using removeBlockTimestampInterval in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the removeBlockTimestampInterval function from a testClient instance. It removes the previously set block timestamp interval.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/removeBlockTimestampInterval.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.removeBlockTimestampInterval()\n```\n\n----------------------------------------\n\nTITLE: Enabling Transport Ranking in Fallback Transport\nDESCRIPTION: This snippet shows how to enable automated ranking for fallback transports based on latency and stability.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: fallback([ \n    http('https://1.rpc.thirdweb.com/...'), \n    http('https://mainnet.infura.io/v3/...') \n  ], { rank: true }),\n})\n```\n\n----------------------------------------\n\nTITLE: Using the number Parameter in getL1BatchBlockRange\nDESCRIPTION: Example highlighting the number parameter of getL1BatchBlockRange function. The number parameter is of type number and represents the L1 Batch Number to query.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchBlockRange.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst batchBlockRange = await client.getL1BatchBlockRange({\n  number: 1  // [!code focus]\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Messages using ERC-7739 PersonalSign Format in TypeScript\nDESCRIPTION: Examples of how to sign a message using a wallet client with the ERC-7739 format, showing both string and raw hex data input options. This is suitable for smart contracts that implement ERC-7739 standard.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, walletClient } from './config'\n \nconst signature_1 = await walletClient.signMessage({ \n  // Account used for signing.\n  account,\n  message: 'hello world',\n  // Verifying contract address (e.g. ERC-4337 Smart Account).\n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2'\n})\n\nconst signature_2 = await walletClient.signMessage({\n  // Account used for signing.\n  account,\n  // Hex data representation of message.\n  message: { raw: '0x68656c6c6f20776f726c64' },\n  // Verifying contract address (e.g. ERC-4337 Smart Account)\n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Paymaster Client with Custom Key\nDESCRIPTION: How to configure a Paymaster Client with a custom key parameter. The key is an optional identifier for the client with a default value of 'paymaster'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPaymasterClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\n\nconst client = createPaymasterClient({\n  key: 'foo',\n  transport: http('https://public.pimlico.io/v2/11155111/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Importing signatureToCompactSignature from viem\nDESCRIPTION: Shows how to import the signatureToCompactSignature function from the viem library for use in TypeScript applications.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/signatureToCompactSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signatureToCompactSignature } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing ERC-6492 Signature Parser\nDESCRIPTION: Shows how to import the parseErc6492Signature function from viem utils package.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseErc6492Signature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseErc6492Signature } from 'viem/utils'\n```\n\n----------------------------------------\n\nTITLE: Optimizing getTransaction Strategy in JavaScript\nDESCRIPTION: The getTransaction strategy in waitForTransactionReceipt was optimized.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Optimized getTransaction strategy\n```\n\n----------------------------------------\n\nTITLE: Updating getBlockNumber Parameters in TypeScript\nDESCRIPTION: Shows the change from maxAge to cacheTime parameter in the getBlockNumber function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst blockNumber = await client.getBlockNumber({\n  cacheTime: 84_600\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sign Function for ZKsync Smart Account in TypeScript\nDESCRIPTION: This snippet illustrates how to implement a custom sign function for a ZKsync Smart Account. The function should accept an object with a hash property of type Hex and return a Hex value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = toSmartAccount({\n  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', \n  async sign({ hash }) { // [!code focus]\n    // ... // [!code focus]\n  } // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing blobsToProofs Function in TypeScript\nDESCRIPTION: Shows how to import the blobsToProofs function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToProofs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blobsToProofs } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: watchAsset with Decimals Parameter\nDESCRIPTION: Example demonstrating decimals parameter usage for token precision in watchAsset function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst success = await walletClient.watchAsset({\n  type: 'ERC20',\n  options: {\n    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    decimals: 18,\n    symbol: 'WETH',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic WebAuthn Credential Creation and Account Setup\nDESCRIPTION: Demonstrates the basic usage of creating a WebAuthn credential and converting it into a WebAuthn account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/createWebAuthnCredential.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createWebAuthnCredential, \n  toWebAuthnAccount \n} from 'viem/account-abstraction'\n\n// Register a credential (ie. passkey).\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n})\n\n// Create a WebAuthn account from the credential.\nconst account = toWebAuthnAccount({\n  credential,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ENS Name Hashing Functions\nDESCRIPTION: Shows how to import the namehash and normalize functions from the viem/ens package.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/utilities/namehash.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { namehash, normalize } from 'viem/ens'\n```\n\n----------------------------------------\n\nTITLE: Importing getL2HashFromPriorityOp from viem/zksync\nDESCRIPTION: Shows how to import the getL2HashFromPriorityOp function from the viem/zksync library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getL2HashFromPriorityOp } from 'viem/zksync'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Block Number and Index in TypeScript\nDESCRIPTION: This snippet shows how to use the getTransaction function to fetch transaction details using a block number and index. It illustrates the usage of the blockNumber and index parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await publicClient.getTransaction({\n  blockNumber: 69420n,\n  index: 0\n})\n```\n\n----------------------------------------\n\nTITLE: Installing permissionless.js using package managers\nDESCRIPTION: Commands to install the permissionless library using different package managers including pnpm, npm, yarn, and bun.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toThirdwebSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add permissionless\n```\n\n----------------------------------------\n\nTITLE: Exporting Call and Calls Types in TypeScript\nDESCRIPTION: Exported 'Call' and 'Calls' types for TypeScript users.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Call = { ... };\nexport type Calls = Call[];\n```\n\n----------------------------------------\n\nTITLE: Version History Entry 2.7.20\nDESCRIPTION: Changelog entry detailing patch changes including addition of Mint Sepolia chain, Astar zkEVM & testnet chains, and Beam chains.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.7.20\n\n### Patch Changes\n\n- [#1901](https://github.com/wevm/viem/pull/1901) [`094c8b5da0555fde0c9456f58b2a948233b705ee`](https://github.com/wevm/viem/commit/094c8b5da0555fde0c9456f58b2a948233b705ee) Thanks [@YanYuanFE](https://github.com/YanYuanFE)! - Added Mint Sepolia chain.\n\n- [#1892](https://github.com/wevm/viem/pull/1892) [`fc6698322f798dd951b11e5dc1879d27ae7b3fe7`](https://github.com/wevm/viem/commit/fc6698322f798dd951b11e5dc1879d27ae7b3fe7) Thanks [@PierreOssun](https://github.com/PierreOssun)! - Add Astar zkEVM & testnet chains.\n\n- [#1906](https://github.com/wevm/viem/pull/1906) [`a82924d0aaf8a4644d6c620209a3d79d9ab0ac92`](https://github.com/wevm/viem/commit/a82924d0aaf8a4644d6c620209a3d79d9ab0ac92) Thanks [@RobbyUitbeijerse](https://github.com/RobbyUitbeijerse)! - Added Beam chains.\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to StackBlitz Demo\nDESCRIPTION: A markdown snippet containing a link to open the wallet client example in StackBlitz IDE for interactive exploration.\nSOURCE: https://github.com/wevm/viem/blob/main/examples/clients_wallet-client/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/clients_wallet-client)\n```\n\n----------------------------------------\n\nTITLE: Implementing Thirdweb Smart Account in TypeScript\nDESCRIPTION: Example of how to use the toThirdwebSmartAccount function from permissionless.js to create a Thirdweb Smart Account. It requires a client and an owner, which are imported from separate files.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toThirdwebSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toThirdwebSmartAccount } from 'permissionless/accounts'\nimport { client } from './client.js'\nimport { owner } from './owner.js'\n\nconst account = await toThirdwebSmartAccount({\n  client,\n  owner,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic hashAuthorization Usage\nDESCRIPTION: Demonstrates basic usage of hashAuthorization function with required parameters to generate an authorization hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashAuthorization } from 'viem/utils'\n\nhashAuthorization({\n  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  chainId: 1,\n  nonce: 0,\n})\n// 0xd428ed36e6098e46b40a4cb99b83b930b0ca1f054f40b5996589eda33c295663\n```\n\n----------------------------------------\n\nTITLE: Setting sender Parameter in User Operation\nDESCRIPTION: Shows how to set the sender address for a User Operation. The sender parameter is of type Address and specifies the account initiating the operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  preVerificationGas: 69420n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Setup\nDESCRIPTION: Configuration setup for creating a public client instance using Viem with the Ethereum mainnet.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFeeHistory.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing formatEther Function in TypeScript\nDESCRIPTION: Shows how to import the formatEther function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatEther.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatEther } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Version Changes and Updates - Markdown\nDESCRIPTION: Changelog entries documenting updates to the viem library including new features, chain additions, and bug fixes across multiple versions.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`dee7aa693027b5a5324b77c32be64a2f50a1e2ab`](https://github.com/wevm/viem/commit/dee7aa693027b5a5324b77c32be64a2f50a1e2ab) Thanks [@jxom](https://github.com/jxom)! - Fixed issue where `fallback` transports would not adhere to transport method allow/denylists when falling through.\n\n- [#3332](https://github.com/wevm/viem/pull/3332) [`349cdbef6cd0eacde5ee680321652c494124852c`](https://github.com/wevm/viem/commit/349cdbef6cd0eacde5ee680321652c494124852c) Thanks [@cbachmeier](https://github.com/cbachmeier)! - Added Unichain.\n\n## 2.23.0\n\n### Minor Changes\n\n- [#3326](https://github.com/wevm/viem/pull/3326) [`5c06bfa8c66c8e1c8db75d7cb9b51284c4e68bd0`](https://github.com/wevm/viem/commit/5c06bfa8c66c8e1c8db75d7cb9b51284c4e68bd0) Thanks [@jxom](https://github.com/jxom)! - Added `simulateCalls` Action. [Docs](https://viem.sh/docs/actions/public/simulateCalls)\n```\n\n----------------------------------------\n\nTITLE: Setting RPC URL in Viem Test Client\nDESCRIPTION: Example showing how to set a new RPC URL for an existing test client instance. Uses Alchemy's mainnet endpoint as an example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setRpcUrl.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.setRpcUrl('https://eth-mainnet.g.alchemy.com/v2')\n```\n\n----------------------------------------\n\nTITLE: Adding Silicon chains in Markdown\nDESCRIPTION: Added Silicon chains to the project via a pull request.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2750](https://github.com/wevm/viem/pull/2750) [`5c07596`](https://github.com/wevm/viem/commit/5c075965d2695b78bb3cb44cdbe9e27715e184cd) Thanks [@jaybbbb](https://github.com/jaybbbb)! - Added Silicon chains.\n```\n\n----------------------------------------\n\nTITLE: Importing serializeErc6492Signature Function from viem/utils in TypeScript\nDESCRIPTION: Shows how to import the serializeErc6492Signature function from the viem/utils library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeErc6492Signature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeErc6492Signature } from 'viem/utils'\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Client for ZKSync L2 Operations\nDESCRIPTION: This code sets up a viem public client for interacting with the ZKSync L2 network. It imports necessary functions and chains, and extends the client with L2-specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getLogProof.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Configuring Paymaster Post-Op Gas Limit in TypeScript\nDESCRIPTION: Shows how to set the paymasterPostOpGasLimit, which specifies the amount of gas to allocate for the Paymaster post-operation code.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n  paymasterData: '0xdeadbeef',\n  paymasterPostOpGasLimit: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing toWebAuthnAccount in TypeScript\nDESCRIPTION: Shows how to import the toWebAuthnAccount function from the viem/account-abstraction module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toWebAuthnAccount } from 'viem/account-abstraction'\n```\n\n----------------------------------------\n\nTITLE: Importing createWalletClient from viem\nDESCRIPTION: Import statement for the createWalletClient function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Reading from Contracts with Ethers.js\nDESCRIPTION: Code example showing how to read data from a smart contract using Ethers.js. This snippet initializes a contract instance and calls the totalSupply function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider } from 'ethers'\nimport { wagmiContractConfig } from './abi'\n\nconst provider = getDefaultProvider()\n\nconst { abi, address } = wagmiContractConfig\nconst contract = new Contract(address, abi, provider)\nconst supply = await contract.totalSupply()\n```\n\n----------------------------------------\n\nTITLE: Importing default nonceManager from viem\nDESCRIPTION: This snippet shows how to import the default nonceManager instance directly from viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nonceManager } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Installing Viem via Package Managers\nDESCRIPTION: Commands to install Viem using different package managers like npm, pnpm, and bun.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i viem\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i viem\n```\n\n----------------------------------------\n\nTITLE: Importing Test Client in TypeScript\nDESCRIPTION: Basic import statement for the createTestClient function from viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing createBundlerClient from viem/account-abstraction\nDESCRIPTION: Shows how to import the createBundlerClient function from the viem/account-abstraction module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClient } from 'viem/account-abstraction'\n```\n\n----------------------------------------\n\nTITLE: Specifying Transaction Hash Parameter\nDESCRIPTION: Shows how to specify the transaction hash parameter when calling getTransactionDetails. The txHash parameter is required and should be a valid transaction hash string.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getTransactionDetails.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst details = await client.getTransactionDetails({\n  txHash: '0x...'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Error Properties in TypeScript\nDESCRIPTION: Example of using setErrorConfig to globally configure properties on BaseError for libraries built on top of viem.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setErrorConfig } from 'viem'\n\nsetErrorConfig({\n  getDocsUrl({ name }) {\n    return `https://examplelib.com?error=${name}`\n  },\n  version: 'examplelib@1.2.3'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getApprovalBasedPaymasterInput from viem/zksync\nDESCRIPTION: Shows how to import the getApprovalBasedPaymasterInput function from the viem/zksync library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getApprovalBasedPaymasterInput.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getApprovalBasedPaymasterInput } from 'viem/zksync'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Name for Paymaster Client\nDESCRIPTION: Example of configuring a Paymaster Client with a custom name. The name parameter is optional and defaults to 'Paymaster Client'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPaymasterClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\n\nconst client = createPaymasterClient({\n  name: 'Foo Bundler Client',\n  transport: http('https://public.pimlico.io/v2/11155111/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Orderly chain in Markdown\nDESCRIPTION: Added Orderly chain to the project via a pull request.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2752](https://github.com/wevm/viem/pull/2752) [`ba36b3d`](https://github.com/wevm/viem/commit/ba36b3d822aac4c6e9652a5a6e88ee3248c9098a) Thanks [@jeff-0402](https://github.com/jeff-0402)! - Added Orderly chain.\n```\n\n----------------------------------------\n\nTITLE: Signing Typed Data with Verifier Address\nDESCRIPTION: Example showing how to sign typed data with a verifier address parameter. Uses the walletClient to create a signature with custom domain, types, and message along with a verifier contract address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signTypedData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst signature = await walletClient.signTypedData({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  domain: { \n    name: 'Ether Mail',\n    version: '1',\n    chainId: 1,\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n  },\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail', \n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Account Parameter in estimateDepositTransactionGas\nDESCRIPTION: Example showing the account parameter usage in the estimateDepositTransactionGas function, which accepts either a JSON-RPC Account or Local Account address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Using hexToBool Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the hexToBool function for decoding hex to a boolean value.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hexToBool } from 'viem'\n\nhexToBool('0x1')\n// true\n\nhexToBool(\n  '0x00000000000000000000000000000000000000000000000000000000000001',\n  { size: 32 }\n)\n// true\n```\n\n----------------------------------------\n\nTITLE: Markdown StackBlitz Integration Link\nDESCRIPTION: A markdown link that opens the example code in StackBlitz editor, allowing users to interact with the code example directly in the browser.\nSOURCE: https://github.com/wevm/viem/blob/main/examples/_template/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/PATH/TO/EXAMPLE/DIR)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Token L1 Address in viem with TypeScript\nDESCRIPTION: Example showing how to retrieve the L1 address of the base token using the getBaseTokenL1Address function from viem's public actions for L2 chains.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBaseTokenL1Address.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst address = await client.getBaseTokenL1Address();\n```\n\n----------------------------------------\n\nTITLE: Adding shouldThrow Option to Fallback Transport\nDESCRIPTION: Added a 'shouldThrow' option to the fallback transport.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst transport = fallback([\n  http(),\n  ws()\n], { shouldThrow: true })\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID for getPaymasterData\nDESCRIPTION: Example demonstrating how to specify the target chain ID when retrieving paymaster data. This parameter identifies which blockchain network to target for the user operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  chainId: 1, \n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing compactSignatureToSignature from viem in TypeScript\nDESCRIPTION: Shows how to import the compactSignatureToSignature function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/compactSignatureToSignature.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compactSignatureToSignature } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Number Cache in TypeScript\nDESCRIPTION: Shows how to set a custom cache time when fetching the block number. The cacheTime parameter controls how long the block number remains cached in memory.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockNumber.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst block = await publicClient.getBlockNumber({\n  cacheTime: 4_000\n})\n```\n\n----------------------------------------\n\nTITLE: Using sidecarsToVersionedHashes with Custom Version in TypeScript\nDESCRIPTION: Shows how to use the sidecarsToVersionedHashes function with a custom version number, which is used to tag the hashes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sidecarsToVersionedHashes.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobSidecars, sidecarsToVersionedHashes } from 'viem'\nimport { kzg } from './kzg'\n\nconst sidecars = toBlobSidecars({ data: '0x...', kzg })\n\nconst versionedHashes = sidecarsToVersionedHashes({ \n  sidecars,\n  version: 69,\n})\n```\n\n----------------------------------------\n\nTITLE: Including a Signature with serializeTransaction\nDESCRIPTION: Shows how to include an optional signature when serializing a transaction. The signature contains r, s, and yParity values and is ignored for deposit transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/serializeTransaction.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst serialized = serializeTransaction({\n  chainId: 1,\n  gas: 21001n,\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  nonce: 69,\n  to: '0x1234512345123451234512345123451234512345',\n  value: parseEther('0.01'),\n}, { \n  r: '0x123451234512345123451234512345123451234512345123451234512345',\n  s: '0x123451234512345123451234512345123451234512345123451234512345',\n  yParity: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Using signature parameter with recoverPublicKey in TypeScript\nDESCRIPTION: This code shows how to use the signature parameter with the recoverPublicKey function. The signature parameter can be a hexadecimal string, ByteArray, or Signature object representing the cryptographic signature of the hash.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverPublicKey.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst publicKey = await recoverPublicKey({ \n  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c' // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing parseAbiParameters from viem in TypeScript\nDESCRIPTION: Shows how to import the parseAbiParameters function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameters.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbiParameters } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing parseEip712Transaction from viem/zksync\nDESCRIPTION: Shows how to import the parseEip712Transaction function from the viem/zksync module.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/parseEip712Transaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEip712Transaction } from 'viem/zksync'\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes for encodeAbi & decodeAbi Function Updates\nDESCRIPTION: Changes to function names and argument structure for ABI encoding/decoding functions. Renamed encodeAbi/decodeAbi to encodeAbiParameters/decodeAbiParameters and modified from named arguments to inline arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n- encodeAbi,\n- decodeAbi,\n+ encodeAbiParameters,\n+ decodeAbiParameters,\n} from 'viem'\n\n-const result = encodeAbi({ params, values })\n+const result = encodeAbiParameters(params, values)\n\n-const result = decodeAbi({ params, data })\n+const result = decodeAbiParameters(params, data)\n```\n\n----------------------------------------\n\nTITLE: Configuring IPC Transport with Path in TypeScript\nDESCRIPTION: This snippet shows how to create an IPC Transport by specifying the IPC path it should connect to.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc')\n```\n\n----------------------------------------\n\nTITLE: Version History Entry 2.7.19\nDESCRIPTION: Changelog entry noting fix for Celo's transaction type detection issue with zero gas fees.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.7.19\n\n### Patch Changes\n\n- [`367eef3aa1879172df46cfd803419747d81086ff`](https://github.com/wevm/viem/commit/367eef3aa1879172df46cfd803419747d81086ff) Thanks [@jxom](https://github.com/jxom)! - Fixed issue where zero gas fees would bypass Celo's transaction type detection.\n```\n\n----------------------------------------\n\nTITLE: Getting Time to Prove an L2 Withdrawal Transaction in TypeScript\nDESCRIPTION: Example of retrieving the time until an L2 withdrawal transaction can be proved on L1. The function returns the interval between L2 outputs, seconds until the transaction can be proved, and the estimated timestamp of when it can be proved.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToProve.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst receipt = await publicClientL2.getTransactionReceipt({\n  hash: '0x7b5cedccfaf9abe6ce3d07982f57bcb9176313b019ff0fc602a0b70342fe3147'\n})\n\nconst {\n  interval,\n  seconds,\n  timestamp\n} = await publicClientL1.getTimeToProve({\n  receipt,\n  targetChain: publicClientL2.chain,\n})\n```\n\n----------------------------------------\n\nTITLE: Using waitForNextL2Output with Target Chain Parameter in TypeScript\nDESCRIPTION: Example demonstrating how to specify the target chain parameter when using waitForNextL2Output. This parameter indicates which L2 chain to use.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await publicClientL1.waitForNextL2Output({\n  l2BlockNumber,\n  targetChain: optimism,\n})\n```\n\n----------------------------------------\n\nTITLE: BytesToBool Function Usage\nDESCRIPTION: Shows how to convert byte arrays to boolean values using bytesToBool.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bytesToBool } from 'viem'\n\nbytesToBool(new Uint8Array([1]))\n// true\n\nbytesToBool(\n  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),\n  { size: 32 }\n) \n// true\n```\n\n----------------------------------------\n\nTITLE: Decoding Error Results in Viem\nDESCRIPTION: Demonstrates how to use viem's decodeErrorResult function to decode error data returned from a failed transaction, equivalent to ethers.js Interface.decodeErrorResult method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeErrorResult, parseEther } from 'viem'\nimport { abi } from './abi'\n\nconst result = decodeErrorResult({\n  abi,\n  data: '0xf7c3865a0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba720000000000000000000000000000000000000000000000000de0b6b3a7640000'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing ripemd160 Function\nDESCRIPTION: Import statement for the ripemd160 function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/ripemd160.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ripemd160 } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Renaming Log-related Types in TypeScript\nDESCRIPTION: Demonstrates the renaming of OnLogFn and OnLogParameter types to WatchEventOnLogsFn and WatchEventOnLogsParameter respectively.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  WatchEventOnLogsFn,\n  WatchEventOnLogsParameter,\n} from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Adding Optional callGasLimit Parameter to getPaymasterStubData in TypeScript\nDESCRIPTION: Example showing how to include the optional callGasLimit parameter when calling getPaymasterStubData. This parameter specifies the amount of gas to allocate for the main execution call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n, \n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing commitmentToVersionedHash from viem\nDESCRIPTION: Import statement for the commitmentToVersionedHash function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentToVersionedHash.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { commitmentToVersionedHash } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Configuring Paymaster Post-Op Gas Limit in User Operation with TypeScript\nDESCRIPTION: This example demonstrates how to set the paymaster post-operation gas limit when preparing a user operation. It includes specifying the paymaster address, data, and the post-op gas limit.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperation = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n  paymasterData: '0xdeadbeef',\n  paymasterPostOpGasLimit: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Credential Creation with Timeout\nDESCRIPTION: Example of creating a WebAuthn credential with a specified timeout duration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/createWebAuthnCredential.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst credential = await createWebAuthnCredential({\n  name: 'Example',\n  timeout: 1000,\n})\n\nconst account = toWebAuthnAccount({\n  credential,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Juneo Mainnet Chain\nDESCRIPTION: Added support for the Juneo Mainnet chain.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const juneoMainnet = { ... }\n```\n\n----------------------------------------\n\nTITLE: Installing viem Package\nDESCRIPTION: Different package manager commands for installing the viem library using npm, pnpm, or bun.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/getting-started.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i viem\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i viem\n```\n\n----------------------------------------\n\nTITLE: Adding Edu Chain to Supported Chains\nDESCRIPTION: Added Edu Chain to the list of supported chains.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const eduChain = { ... }\n```\n\n----------------------------------------\n\nTITLE: Setting Signature for User Operation in TypeScript\nDESCRIPTION: Demonstrates how to set a custom signature for the User Operation. This is useful when the signature is generated externally or needs to be specified manually.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await bundlerClient.sendUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  signature: '0x...', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Count with Block Number - TypeScript\nDESCRIPTION: Example demonstrating how to get the transaction count at a specific block number.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionCount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionCount = await publicClient.getTransactionCount({\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  blockNumber: 69420n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ZKsync Era Client with Viem in TypeScript\nDESCRIPTION: This code sets up a public client for interacting with the ZKsync Era network. It uses the 'viem' library to create a client with the ZKsync chain configuration and extends it with public L2 actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getDefaultBridgeAddress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { zksync } from 'viem/chains'\nimport { publicActionsL2 } from 'viem/zksync'\n\nexport const client = createPublicClient({\n  chain: zksync,\n  transport: http(),\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegation Contract in Solidity\nDESCRIPTION: This Solidity contract defines a simple 'Delegation' contract with two functions: 'initialize' and 'ping'. Both functions emit a 'Log' event with a message.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.20;\n\ncontract Delegation {\n  event Log(string message);\n\n  function initialize() external payable {\n    emit Log('Hello, world!');\n  }\n\n  function ping() external pure {\n    emit Log('Pong!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Ranking in Fallback Transport\nDESCRIPTION: This snippet shows how to set the timeout for sampling transports in fallback transport ranking.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  rank: {\n    timeout: 500\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining latestRoundData Function\nDESCRIPTION: Two different implementations of latestRoundData function showing return type variations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/faq.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction latestRoundData() external view\n  returns (\n    uint80 roundId,\n    int256 answer,\n    uint256 startedAt,\n    uint256 updatedAt,\n    uint80 answeredInRound\n  );\n\nstruct Data {\n  uint80 roundId;\n  uint256 answer;\n  uint256 startedAt;\n  uint256 updatedAt;\n  uint80 answeredInRound\n}\n\nfunction latestRoundData() external view returns (Data data);\n```\n\n----------------------------------------\n\nTITLE: Specifying chainId in getPaymasterStubData Call in TypeScript\nDESCRIPTION: Example demonstrating how to specify the chainId parameter when calling getPaymasterStubData. This parameter indicates which blockchain network to target for the operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterStubData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  chainId: 1, \n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Trusted Setup Paths\nDESCRIPTION: Example showing how to import trusted setup paths from viem/node entrypoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/setupKzg.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  mainnetTrustedSetupPath,\n  minimalTrustedSetupPath,\n} from 'viem/node'\n```\n\n----------------------------------------\n\nTITLE: Using hexToBigInt Function in TypeScript\nDESCRIPTION: Shows how to use the hexToBigInt function to decode a hex value to a bigint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hexToBigInt } from 'viem'\n\nhexToBigInt('0xc5cf39211876fb5e5884327fa56fc0b75')\n// 4206942069420694206942069420694206942069n\n\nhexToBigInt(\n  '0x0000000000000000000000000000000c5cf39211876fb5e5884327fa56fc0b75', \n  { size: 32 }\n)\n// 4206942069420694206942069420694206942069n\n```\n\n----------------------------------------\n\nTITLE: Replacing assertChain with chain: null in viem\nDESCRIPTION: Example showing how to bypass chain checking in transaction actions by using chain: null instead of the removed assertChain parameter. This is not recommended except for testing purposes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait walletClient.sendTransaction({\n  assertChain: false, // [!code --]\n  chain: null, // [!code ++]\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Authorization with Signature Parameter in TypeScript\nDESCRIPTION: Demonstrates how to use the signature parameter in the verifyAuthorization function when verifying a separately signed authorization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/verifyAuthorization.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await walletClient.signAuthorization({\n  authorization: {\n    address: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    chainId: 1,\n    nonce: 0,\n  }\n})\n\nconst valid = await verifyAuthorization({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  authorization: {\n    address: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n    chainId: 1,\n    nonce: 0,\n  },\n  signature,\n})\n```\n\n----------------------------------------\n\nTITLE: Biconomy Bundler Example Badge\nDESCRIPTION: Markdown code for displaying a StackBlitz button that opens the example project in the online IDE.\nSOURCE: https://github.com/wevm/viem/blob/main/examples/account-abstraction_biconomy-bundler/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/account-abstraction_biconomy-bundler)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Transport Name\nDESCRIPTION: Shows how to set a custom name for the transport configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom(\n  window.ethereum!,\n  { \n    name: 'Window Ethereum Provider',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Public Client with L1 Actions for OP Stack\nDESCRIPTION: This configuration snippet shows how to set up a public client for the Ethereum mainnet and extend it with the publicActionsL1 functionality needed for OP Stack interactions, such as retrieving dispute games.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getGames.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZKsync Block Details using viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getBlockDetails function from a configured viem client to fetch additional information about a ZKsync L2 block. It requires a pre-configured client and accepts a block number as a parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBlockDetails.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from './config'\n\nconst blockDetails = await client.getBlockDetails({\n  number: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegation Contract in Solidity\nDESCRIPTION: This Solidity contract defines a simple 'Delegation' contract with 'initialize' and 'ping' functions that emit log events. It's used as an example for EIP-7702 transactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.20;\n\ncontract Delegation {\n  event Log(string message);\n\n  function initialize() external payable {\n    emit Log('Hello, world!');\n  }\n\n  function ping() external pure {\n    emit Log('Pong!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Viem Client with EIP-5792 Actions in TypeScript\nDESCRIPTION: This snippet shows how to import the EIP-5792 actions module and extend a wallet client to support those actions. It creates a wallet client connected to the Ethereum mainnet through a window.ethereum provider, then adds EIP-5792 functionality using the extend method.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/client.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { eip5792Actions } from 'viem/experimental' // [!code focus]\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n}).extend(eip5792Actions()) // [!code focus]\n\nconst id = await walletClient.sendCalls({/* ... */})\n```\n\n----------------------------------------\n\nTITLE: Exporting WaitForTransactionReceiptTimeoutErrorType\nDESCRIPTION: Exported WaitForTransactionReceiptTimeoutErrorType as WaitForTransactionReceiptErrorType.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WaitForTransactionReceiptErrorType = WaitForTransactionReceiptTimeoutErrorType;\n```\n\n----------------------------------------\n\nTITLE: Gas Estimation with Ethers.js\nDESCRIPTION: How to estimate gas for a contract function call using Ethers.js. This initializes a contract and uses the estimateGas method on the contract function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider } from 'ethers'\nimport { wagmiContractConfig } from './abi'\n\nconst provider = getDefaultProvider()\n\nconst { abi, address } = wagmiContractConfig\nconst contract = new Contract(address, abi, provider)\nconst gas = await contract.estimateGas.mint()\n```\n\n----------------------------------------\n\nTITLE: Importing opaqueDataToDepositData from viem\nDESCRIPTION: Shows how to import the opaqueDataToDepositData function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/opaqueDataToDepositData.md#2025-04-14_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { opaqueDataToDepositData } from \"viem\";\n```\n\n----------------------------------------\n\nTITLE: Using waitForNextL2Output with L2 Block Number in TypeScript\nDESCRIPTION: Example of using waitForNextL2Output to wait for the next L2 output after the current block number. It retrieves the current L2 block number and waits for the next output to be submitted to L1.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL1, publicClientL2 } from './config'\n\nconst l2BlockNumber = await publicClientL2.getBlockNumber()\nconst output = await publicClientL1.waitForNextL2Output({\n  l2BlockNumber,\n  targetChain: publicClientL2.chain,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Account Parameter in Call Action\nDESCRIPTION: Example of specifying the account parameter when making a call. The account can be either a JSON-RPC Account or a Local Account with a private key.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await publicClient.call({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting maxPriorityFeePerGas for User Operation in TypeScript\nDESCRIPTION: Shows how to set the maximum priority fee per gas for User Operation execution when calling getPaymasterData. This parameter is optional and of type bigint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n, // [!code focus]\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Clients for L1 and L2 in TypeScript\nDESCRIPTION: This snippet shows how to configure public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains using the viem library. It extends the L1 client with publicActionsL1 for OP Stack specific actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getWithdrawalStatus.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getWithdrawals Function in TypeScript\nDESCRIPTION: Shows how to import the getWithdrawals function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawals.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getWithdrawals } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Installing decodeFunctionData from viem in TypeScript\nDESCRIPTION: Import statement for the decodeFunctionData function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeFunctionData } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting Configuration with JSON-RPC\nDESCRIPTION: Configuration example showing how to hoist an account using JSON-RPC for ethereum provider integration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/sendTransaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { eip712Actions } from 'viem/zksync'\n\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClient = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(eip712WalletActions())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Automine Status in TypeScript using viem\nDESCRIPTION: This snippet demonstrates how to use the getAutomine function from a testClient to check if a node is automatically mining. It requires a properly configured testClient.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getAutomine.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nconst isAutomining = await testClient.getAutomine()\n```\n\n----------------------------------------\n\nTITLE: Encoding Function Data in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.encodeFunctionData to encode function calls with arguments. This creates the data field needed for transaction objects when calling contract functions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst data = iface.encodeFunctionData('transferFrom', [\n  '0x8ba1f109551bD432803012645Ac136ddd64DBA72',\n  '0xaB7C8803962c0f2F5BBBe3FA8bf41cd82AA1923C',\n  parseEther('1.0')\n])\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Transport Key\nDESCRIPTION: Demonstrates how to set a custom key for the transport configuration.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom(\n  window.ethereum!,\n  { \n    key: 'windowProvider',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Option to isHex Function in JavaScript\nDESCRIPTION: A 'strict' option was added to the isHex function and data utilities were optimized.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nisHex(value, { strict: true })\n```\n\n----------------------------------------\n\nTITLE: Structuring a Non-conforming Log in TypeScript\nDESCRIPTION: This snippet illustrates a non-conforming log object in TypeScript that doesn't match the original Solidity event definition. It shows how the data and topics are incorrectly structured, leading to a mismatch in indexed and non-indexed arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/glossary/terms.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst log = {\n  ...\n  data: '0x\n    00...23c346 // ✅ non-indexed argument (baz)\n    00...ae0000 // ❌ indexed argument (bar)\n    00...000001 // ❌ indexed argument (barry)\n  ',\n  topics: [\n    '0xdd...23b3ef', // event signature\n    '0x00...b92266', // ✅ indexed argument (foo)\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Smart Account with permissionless.js\nDESCRIPTION: Example of how to create a Simple Smart Account instance using the toSimpleSmartAccount function from permissionless.js. The function requires a client and owner parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSimpleSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSimpleSmartAccount } from 'permissionless/accounts'\nimport { client } from './client.js'\nimport { owner } from './owner.js'\n\nconst account = await toSimpleSmartAccount({\n  client,\n  owners: [owner],\n})\n```\n\n----------------------------------------\n\nTITLE: Local Account Configuration\nDESCRIPTION: Configuration example showing how to set up a wallet client with a local account using a private key. Demonstrates private key account initialization.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/finalizeWithdrawal.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nexport const walletClientL1 = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Using sidecarsToVersionedHashes with 'to' Parameter in TypeScript\nDESCRIPTION: Demonstrates how to use the sidecarsToVersionedHashes function with the 'to' parameter set to 'bytes', which specifies the output format of the versioned hashes.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sidecarsToVersionedHashes.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobSidecars, sidecarsToVersionedHashes } from 'viem'\nimport { kzg } from './kzg'\n\nconst sidecars = toBlobSidecars({ data: '0x...', kzg })\n\nconst versionedHashes = sidecarsToVersionedHashes({ \n  sidecars,\n  to: 'bytes',\n})\nversionedHashes\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client for Ethereum Mainnet\nDESCRIPTION: Setup code for creating a public client instance connected to Ethereum mainnet using viem.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getStorageAt.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Mining in Viem Test Client\nDESCRIPTION: Example showing how to disable automatic mining of new blocks for transactions using the setAutomine function with false parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setAutomine.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.setAutomine(false)\n```\n\n----------------------------------------\n\nTITLE: Creating WebAuthn (Passkey) Owner Account\nDESCRIPTION: This code demonstrates how to create a WebAuthn credential (passkey) and use it to create a WebAuthn owner account. This provides an alternative to private key-based authentication.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toCoinbaseSmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWebAuthnCredential, toWebAuthnAccount } from 'viem/account-abstraction'\n\n// Register a credential (ie. passkey).\nconst credential = await createWebAuthnCredential({ name: 'Wallet' })\n \n// Create a WebAuthn owner account from the credential.\nexport const owner = toWebAuthnAccount({ credential })\n```\n\n----------------------------------------\n\nTITLE: Setting up KZG in viem\nDESCRIPTION: Example code for setting up the KZG cryptographic functions required for blob operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentToVersionedHash.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\nimport { mainnetTrustedSetupPath } from 'viem/node'\n\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n```\n\n----------------------------------------\n\nTITLE: Setting up TestClient for Viem in TypeScript\nDESCRIPTION: This code sets up a testClient using the createTestClient function from viem. It configures the client with the Foundry chain, Anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/removeBlockTimestampInterval.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Importing toEventHash from viem\nDESCRIPTION: Shows how to import the toEventHash function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventHash.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toEventHash } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundler Client in TypeScript\nDESCRIPTION: Setup for creating a bundler client using the createBundlerClient function from viem/account-abstraction. The client is configured with an HTTP transport pointing to a Pimlico public endpoint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getSupportedEntryPoints.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\nimport { createBundlerClient } from 'viem/account-abstraction'\n\nexport const bundlerClient = createBundlerClient({\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Calls with ERC-7821 Contract in TypeScript\nDESCRIPTION: Example showing how to execute multiple batches of calls on an ERC-7821-compatible contract, including sending ETH and calling contract functions with values and data.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { account, client } from './config'\n \nconst hash = await client.executeBatches({\n  account,\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ]\n    },\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('2')\n        },\n        {\n          data: '0xdeadbeef',\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: ENS Text Record Retrieval with Block Number\nDESCRIPTION: Example demonstrating how to retrieve an ENS text record at a specific block number.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ensText = await publicClient.getEnsText({\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n  blockNumber: 15121123n,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Wallet Client with ERC-7739 Actions\nDESCRIPTION: Configuration for setting up a wallet client with the experimental ERC-7739 actions. Shows how to create a client that works with both JSON-RPC and local accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { erc7739Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  chain: mainnet,\n  transport: http(),\n}).extend(erc7739Actions())\n\nexport const [account] = await walletClient.getAddresses()\n// @log: ↑ JSON-RPC Account\n\n// export const account = privateKeyToAccount(...)\n// @log: ↑ Local Account\n```\n\n----------------------------------------\n\nTITLE: Setting Verification Gas Limit in User Operation with TypeScript\nDESCRIPTION: This snippet demonstrates how to set the verification gas limit when preparing a user operation. This determines the amount of gas allocated for the verification step of the operation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperation = await bundlerClient.prepareUserOperation({\n  account,\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }],\n  verificationGasLimit: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of serializeTransaction for OP Stack\nDESCRIPTION: Demonstrates how to serialize a standard transaction with chainId, gas, fees, nonce, to address, and value parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/serializeTransaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serializeTransaction } from 'viem/op-stack'\n\nconst serialized = serializeTransaction({\n  chainId: 1,\n  gas: 21001n,\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  nonce: 69,\n  to: \"0x1234512345123451234512345123451234512345\",\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using a VerifierDomain for EIP-712 Compatible Signing\nDESCRIPTION: Example demonstrating how to use a verifierDomain instead of a simple verifier address. This provides a domain separator compatible with EIP-712 typed data for more secure contract-verified signatures.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletClient } from './config'\n\nconst signature = await walletClient.signMessage({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: 'hello world',\n  verifierDomain: { \n    name: 'SoladyAccount', \n    version: '1', \n    chainId: 1, \n    verifyingContract: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2' \n  }, \n})\n```\n\n----------------------------------------\n\nTITLE: EIP-1559 Transaction Example\nDESCRIPTION: Shows how to send an EIP-1559 transaction with maxFeePerGas and maxPriorityFeePerGas parameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/sendUnsignedTransaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await testClient.sendUnsignedTransaction({\n  from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Client Parameter for a Bundler Client\nDESCRIPTION: Shows how to create and provide a public client when configuring a Bundler Client. The client parameter connects to an execution RPC and is used by the bundler client for blockchain interactions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClient } from 'viem/account-abstraction'\n\nimport { createPublicClient, http } from 'viem' \nimport { mainnet } from 'viem/chains'\n\nconst client = createPublicClient({ // [!code focus]\n  chain: mainnet, // [!code focus]\n  transport: http() // [!code focus]\n}) // [!code focus]\n\nconst bundlerClient = createBundlerClient({\n  client, // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Lists with ERC-7821 and EIP-7702\nDESCRIPTION: Example demonstrating how to use signed EIP-7702 Authorization lists with ERC-7821 batch execution, allowing for authorization of specific contracts and permissions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst authorization = await client.signAuthorization({ \n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \n}) \n\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  authorizationList: [authorization],\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ]\n    },\n    {\n      calls: [\n        {\n          data: '0xdeadbeef',\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        },\n      ],\n    },\n  ], \n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Client with Transport in TypeScript\nDESCRIPTION: Sets up a basic wallet client with mainnet chain configuration and custom transport using window.ethereum.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Calls with State Overrides in TypeScript using viem\nDESCRIPTION: This snippet demonstrates how to use the stateOverrides option when simulating calls with the viem client. It overrides the balance of a specific address for the simulation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { results } = await client.simulateCalls({\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n  calls: [ \n    { \n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n      value: parseEther('2'),\n    },  \n  ], \n  stateOverrides: [{\n    address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n    balance: parseEther('10000'),\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing parseAbi Function from Viem\nDESCRIPTION: Shows how to import the parseAbi function from the Viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbi.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client with Local Account and Hoisted Verifier\nDESCRIPTION: Configuration for a wallet client using a local account (private key) and a hoisted verifier address. This setup allows for more concise method calls when signing messages.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { erc7739Actions } from 'viem/experimental'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: http()\n}).extend(erc7739Actions({ \n  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2' \n}))\n```\n\n----------------------------------------\n\nTITLE: Creating Test Client for Foundry Chain in TypeScript\nDESCRIPTION: This code snippet shows how to create a test client for the Foundry chain using viem. It sets up the client with the Foundry chain, Anvil mode, and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setCode.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestClient, http } from 'viem'\nimport { foundry } from 'viem/chains'\n\nexport const testClient = createTestClient({\n  chain: foundry,\n  mode: 'anvil',\n  transport: http(), \n})\n```\n\n----------------------------------------\n\nTITLE: Importing isAddressEqual Function from viem in TypeScript\nDESCRIPTION: Shows how to import the isAddressEqual function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddressEqual.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAddressEqual } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Creating an Owner Account from Private Key\nDESCRIPTION: Example of creating an owner account from a private key using viem's privateKeyToAccount function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toEcdsaKernelSmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n \nexport const owner = privateKeyToAccount('0x...')\n```\n\n----------------------------------------\n\nTITLE: Mining with Block Count Parameter\nDESCRIPTION: Example showing how to specify the number of blocks to mine using the blocks parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/mine.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.mine({\n  blocks: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic ENS Avatar Retrieval in TypeScript\nDESCRIPTION: Example showing how to retrieve an ENS avatar using the publicClient with normalized ENS name.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsAvatar.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalize } from 'viem/ens'\nimport { publicClient } from './client'\n \nconst ensText = await publicClient.getEnsAvatar({\n  name: normalize('wevm.eth'),\n})\n// 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n```\n\n----------------------------------------\n\nTITLE: Setting up Viem Public Client\nDESCRIPTION: Creates a public client configuration for the Ethereum mainnet using viem library. Sets up the client with HTTP transport which is required for WebAuthn account operations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Client with Local Account in Viem\nDESCRIPTION: This snippet demonstrates how to create a walletClient using Viem's createWalletClient function with a local account. It uses the privateKeyToAccount function to create an account from a private key and sets up an HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTransactionAddress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const walletClient = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Client and Account in TypeScript\nDESCRIPTION: This snippet shows how to set up a wallet client using viem's createWalletClient function and how to obtain an account. It demonstrates both JSON-RPC and local account creation methods.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const walletClient = createWalletClient({\n  transport: custom(window.ethereum)\n})\n\n// JSON-RPC Account\nexport const [account] = await walletClient.getAddresses()\n// Local Account\nexport const account = privateKeyToAccount(...)\n```\n\n----------------------------------------\n\nTITLE: Mining with Interval Parameter\nDESCRIPTION: Demonstrates how to mine blocks with a custom interval between block creation. The interval parameter sets the time in seconds between mining each block.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/mine.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.mine({\n  blocks: 10,\n  interval: 4\n})\n```\n\n----------------------------------------\n\nTITLE: Gas Limit Parameter Example\nDESCRIPTION: Example showing the gasLimit parameter usage for setting block gas limit. Demonstrates using bigint notation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockGasLimit.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait testClient.setBlockGasLimit({\n  gasLimit: 420_000n\n})\n```\n\n----------------------------------------\n\nTITLE: Required Modern EcmaScript Features Reference\nDESCRIPTION: List of required modern JavaScript features including BigInt, fetch API, Error cause, and TextEncoder encode method with links to MDN documentation.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/compatibility.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt)\n- [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n- Error [`cause`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause)\n- TextEncoder [`encode`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encode)\n```\n\n----------------------------------------\n\nTITLE: Importing fromRlp from viem\nDESCRIPTION: Shows how to import the fromRlp function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromRlp.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromRlp } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI and Address in TypeScript\nDESCRIPTION: This snippet defines the ABI (Application Binary Interface) for a simple contract with 'initialize' and 'ping' functions, along with the contract address.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const abi = [\n  {\n    \"type\": \"function\",\n    \"name\": \"initialize\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"ping\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"pure\"\n  },\n] as const\n\nexport const contractAddress = '0x...'\n```\n\n----------------------------------------\n\nTITLE: Using encodeFunctionData without functionName in TypeScript\nDESCRIPTION: Demonstrates how to use encodeFunctionData when the ABI contains only one item, allowing the omission of the functionName parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem'\n\nconst abiItem = {\n  inputs: [{ name: 'owner', type: 'address' }],\n  name: 'balanceOf',\n  outputs: [{ name: '', type: 'uint256' }],\n  stateMutability: 'view',\n  type: 'function',\n}\n\nconst data = encodeFunctionData({\n  abi: [abiItem],\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\n})\n```\n\n----------------------------------------\n\nTITLE: watchAsset with Type Parameter\nDESCRIPTION: Example highlighting the type parameter specification for token type in watchAsset function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst success = await walletClient.watchAsset({\n  type: 'ERC20',\n  options: {\n    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    decimals: 18,\n    symbol: 'WETH',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Client for viem in TypeScript\nDESCRIPTION: This snippet shows how to create a public client using the viem library. It imports necessary functions and chains, then configures the client with the mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/uninstallFilter.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Account Hoisting for buildInitiateWithdrawal in viem\nDESCRIPTION: Demonstrates how to hoist an account on the Wallet Client to avoid passing it to every buildInitiateWithdrawal call. It includes examples for both JSON-RPC and Local Accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildInitiateWithdrawal.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClientL1, walletClientL2 } from './config'\n\nconst args = await publicClientL1.buildInitiateWithdrawal({\n  mint: parseEther('1')\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n \nconst hash = await walletClientL2.initiateWithdrawal(args)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, walletActionsL2 } from 'viem/op-stack'\n\n// Retrieve Account from an EIP-1193 Provider.\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL2 = createWalletClient({\n  chain: optimism,\n  account,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL2())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1, walletActionsL2 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n\nexport const walletClientL2 = createWalletClient({\n  account: privateKeyToAccount('0x...'),\n  chain: optimism,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Adding Data Parameter to L2 Transaction Request\nDESCRIPTION: Shows how to include contract deployment bytecode or encoded contract method calls in the transaction request using the data parameter.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    data: '0x...', // [!code focus]\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Contract ABI Definition\nDESCRIPTION: Definition of the WAGMI contract ABI containing totalSupply, ownerOf, and mint function specifications.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/multicall.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ name: \"tokenId\", type: \"uint256\" }],\n    name: \"ownerOf\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Public Client\nDESCRIPTION: Configuration setup for creating a public client using viem library with mainnet chain and HTTP transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toTrustSmartAccount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { mainnet } from 'viem/chains'\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI in TypeScript\nDESCRIPTION: This snippet shows the structure of the ABI (Application Binary Interface) for the contract being interacted with. It includes a mint function definition as an example.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Gas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [{ name: \"\", type: \"uint32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Name for Viem Wallet Client\nDESCRIPTION: Illustrates how to set a custom name for the wallet client. The name is a string that can be used to identify the client, with a default value of \"Wallet Client\".\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createWalletClient({\n  name: 'Foo Wallet Client',\n  transport: custom(window.ethereum!)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing validateSiweMessage Function\nDESCRIPTION: Shows how to import the validateSiweMessage function from the viem/siwe package.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/validateSiweMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validateSiweMessage } from 'viem/siwe'\n```\n\n----------------------------------------\n\nTITLE: Configuring viem Public Client for Mainnet\nDESCRIPTION: This code sets up a public client for the Ethereum mainnet using viem. It creates a client with HTTP transport, which is required for interacting with the blockchain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toCoinbaseSmartAccount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createPublicClient } from 'viem'\nimport { mainnet } from 'viem/chains'\n \nexport const client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n```\n\n----------------------------------------\n\nTITLE: Blob Parameter Example\nDESCRIPTION: Shows how to specify the blobs parameter when calling blobsToCommitments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blobsToCommitments, toBlobs } from 'viem'\n\nconst commitments = blobsToCommitments({ \n  blobs: toBlobs({ data: '0x1234' }),\n  kzg, \n})\n```\n\n----------------------------------------\n\nTITLE: Validating Addresses in Ethers\nDESCRIPTION: Shows how to use ethers.js utils.isAddress to check if a string is a valid Ethereum address. This validates the format without checking if the address exists on-chain.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\n\nconst address = utils.isAddress('0x8ba1f109551bd432803012645ac136ddd64dba72')\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client with L1 Actions for OP Stack Interaction\nDESCRIPTION: Setup code that creates and configures a public client for interacting with the Ethereum mainnet, then extends it with OP Stack L1 actions. This configuration is necessary for using the getGame action.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getGame.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, custom, http } from 'viem'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL1 } from 'viem/op-stack'\n\nexport const publicClientL1 = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicActionsL1())\n```\n\n----------------------------------------\n\nTITLE: Initializing viem Public Client Configuration\nDESCRIPTION: Shows how to set up and configure a viem public client with mainnet chain and HTTP transport settings for Ethereum network interaction.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getChainId.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const publicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n})\n```\n\n----------------------------------------\n\nTITLE: Querying ENS Name for Address Using Viem\nDESCRIPTION: Example showing how to query an ENS name for a given Ethereum address using the getEnsName function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClient } from './client'\n\nconst ensName = await publicClient.getEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n})\n// 'wevm.eth'\n```\n\n----------------------------------------\n\nTITLE: Setting up KZG for blobsToProofs in TypeScript\nDESCRIPTION: Shows how to set up the KZG (Kate-Zaverucha-Goldberg) implementation required for the blobsToProofs function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToProofs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cKzg from 'c-kzg'\nimport { setupKzg } from 'viem'\n\nexport const kzg = setupKzg('./trusted-setup.json', cKzg)\n```\n\n----------------------------------------\n\nTITLE: Displaying StackBlitz Link in Markdown\nDESCRIPTION: This markdown snippet shows how to include a button that opens the example in StackBlitz, an online IDE for web development.\nSOURCE: https://github.com/wevm/viem/blob/main/examples/contracts_reading-contracts/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts)\n```\n\n----------------------------------------\n\nTITLE: Markdown Link for StackBlitz Demo\nDESCRIPTION: Markdown code that creates a clickable StackBlitz button linking to an interactive demo of the typed data signing example.\nSOURCE: https://github.com/wevm/viem/blob/main/examples/signing_typed-data/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/signing_typed-data)\n```\n\n----------------------------------------\n\nTITLE: Installing permissionless.js Library\nDESCRIPTION: Commands for installing the permissionless library using different package managers like pnpm, npm, yarn, and bun.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toEcdsaKernelSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add permissionless\n```\n\n----------------------------------------\n\nTITLE: Building a Withdrawal Proof Transaction in TypeScript with viem\nDESCRIPTION: Example showing how to build a transaction that proves a withdrawal from an L2 network. This process involves retrieving a transaction receipt, extracting withdrawal data, getting L2 output data, and building the prove withdrawal arguments.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildProveWithdrawal.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { account, publicClientL2, walletClientL1 } from './config'\n\nconst receipt = await getTransactionReceipt(publicClientL2, {\n  hash: '0xbbdd0957a82a057a76b5f093de251635ac4ddc6e2d0c4aa7fbf82d73e4e11039',\n})\n\nconst [withdrawal] = getWithdrawals(receipt)\nconst output = await walletClientL1.getL2Output({\n  l2BlockNumber: receipt.blockNumber,\n  targetChain: publicClientL2.chain,\n})\n\nconst args = await publicClientL2.buildProveWithdrawal({\n  account,\n  output,\n  withdrawal,\n})\n \nconst hash = await walletClientL1.proveWithdrawal(args)\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem Client with Hoisted Account\nDESCRIPTION: Sets up a Viem client with the account hoisted at the client level so it doesn't need to be passed to individual methods, using ERC-7821 actions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet } from 'viem/chains'\nimport { erc7821Actions } from 'viem/experimental'\n\nexport const account = privateKeyToAccount('0x...')\n\nexport const client = createClient({\n  account,\n  chain: mainnet,\n  transport: http(),\n}).extend(erc7821Actions())\n```\n\n----------------------------------------\n\nTITLE: Authorization List Transaction Request\nDESCRIPTION: Example of preparing a transaction request with EIP-7702 authorization list for signed permissions.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst authorization = await walletClient.signAuthorization({\n  account,\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n})\n\nconst request = await walletClient.prepareTransactionRequest({\n  account,\n  authorizationList: [authorization],\n  data: '0xdeadbeef',\n  to: account.address,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing permissionless.js via Package Managers\nDESCRIPTION: Instructions for installing the permissionless library using different package managers (pnpm, npm, yarn, and bun).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSimpleSmartAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add permissionless\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add permissionless\n```\n\n----------------------------------------\n\nTITLE: Using ethersWalletToAccount for Ethers Integration in viem\nDESCRIPTION: Example showing the replacement of getAccount with ethersWalletToAccount for Ethers Wallet adapter integration. This adapter may be deprecated in future versions as viem now provides native private key and mnemonic implementations.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\nimport { getAccount } from 'viem/ethers' // [!code --]\nimport { ethersWalletToAccount } from 'viem/ethers' // [!code ++]\nimport { Wallet } from 'ethers'\n\nconst account = getAccount(new Wallet('0x...')) // [!code --]\nconst account = ethersWalletToAccount(new Wallet('0x...')) // [!code ++]\n\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconnection for IPC Transport in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the reconnection behavior of the IPC Transport. It shows how to disable reconnection attempts on socket failure.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = ipc('/tmp/reth.ipc', {\n  reconnect: false, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Parameter in Client Execute Method\nDESCRIPTION: Example of specifying the chain parameter in a viem client execute call. This allows executing the batched calls on a specific blockchain network (Optimism in this case).\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { optimism } from 'viem/chains' // [!code focus]\n\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  batches: [\n    {\n      calls: [\n        {\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n          value: parseEther('1')\n        },\n      ]\n    },\n    {\n      calls: [\n        {\n          data: '0xdeadbeef',\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        },\n      ],\n    },\n  ],\n  chain: optimism, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing ABI Parameters in Ethers\nDESCRIPTION: Shows how to use ethers.js utils.ParamType.from to parse an individual parameter type from an ABI definition.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\n\nconst param = utils.ParamType.from('address owner')\n```\n\n----------------------------------------\n\nTITLE: Setting Factory Address for Smart Account\nDESCRIPTION: Example demonstrating how to specify a factory address for the smart account deployment\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = await toSoladySmartAccount({\n  client,\n  factoryAddress: '0xda4b37208c41c4f6d1b101cac61e182fe1da0754',\n  owner,\n})\n```\n\n----------------------------------------\n\nTITLE: toBlobs with Output Format Specification\nDESCRIPTION: Demonstrates using toBlobs function with both data and output format parameters\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobs.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toBlobs } from 'viem'\n\nconst blobs = toBlobs({ \n  data: '0x...',\n  to: 'bytes' \n})\n\nblobs\n```\n\n----------------------------------------\n\nTITLE: ABI Encoding with Viem\nDESCRIPTION: Using Viem to encode ABI parameters. This demonstrates encoding with object parameters and with parsed human-readable parameters using parseAbiParameters.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeAbiParameters, parseAbiParameters } from 'viem'\n\n// Object\nencodeAbiParameters(\n  [{ type: 'uint', name: 'x' }, { type: 'string', name: 'y' }],\n  [1234, 'Hello world']\n)\n\n// Human Readable\nencodeAbiParameters(\n  parseAbiParameters('uint, string'),\n  [1234, 'Hello world']\n)\n```\n\n----------------------------------------\n\nTITLE: Using isHex Function with a Single Value in TypeScript\nDESCRIPTION: Shows how to use the isHex function with a single hex value as an argument.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isHex.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisHex(\n  '0x1a4' // [!code focus]\n)\n// true\n```\n\n----------------------------------------\n\nTITLE: Setting maxFeePerGas in Viem Client Execute\nDESCRIPTION: Demonstrates setting the total fee per gas (inclusive of priority fee) when executing multiple transactions. Uses parseGwei to convert from gwei to wei units.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.execute({\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n  calls: [ \n    { \n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n      value: parseEther('1') \n    }, \n    { \n      data: '0xdeadbeef', \n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n    }, \n  ], \n  maxFeePerGas: parseGwei('20'),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing encodePacked function from viem\nDESCRIPTION: Shows how to import the encodePacked function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodePacked.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodePacked } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bytecode with Block Number\nDESCRIPTION: Example of getting contract bytecode at a specific block number.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getCode.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst bytecode = await publicClient.getCode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  blockNumber: 15121123n,\n})\n```\n\n----------------------------------------\n\nTITLE: Passing chain directly to transaction actions\nDESCRIPTION: Shows an alternative approach to adding the required chain parameter by passing it directly to the transaction action rather than hoisting it on the client.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\nimport { createWalletClient, custom, getAccount } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nexport const walletClient = createWalletClient({\n- chain: mainnet,\n  transport: custom(window.ethereum)\n})\n\nconst account = getAccount('0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266')\n\nconst hash = await walletClient.sendTransaction({\n  account,\n+ chain: mainnet,\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: 1000000000000000000n\n})\n```\n\n----------------------------------------\n\nTITLE: Importing isBytes function from viem\nDESCRIPTION: Shows how to import the isBytes function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isBytes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isBytes } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Account Configuration\nDESCRIPTION: Configuration example showing how to set up a wallet client with a hoisted JSON-RPC account. Demonstrates account retrieval from an EIP-1193 provider.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/finalizeWithdrawal.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, createPublicClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, optimism } from 'viem/chains'\nimport { publicActionsL2, walletActionsL1 } from 'viem/op-stack'\n\nconst [account] = await window.ethereum.request({\n  method: 'eth_requestAccounts'\n})\n\nexport const walletClientL1 = createWalletClient({\n  account,\n  transport: custom(window.ethereum)\n}).extend(walletActionsL1())\n\nexport const publicClientL2 = createPublicClient({\n  chain: optimism,\n  transport: http()\n}).extend(publicActionsL2())\n```\n\n----------------------------------------\n\nTITLE: Updating GuruNetwork RPC URLs\nDESCRIPTION: Updated the RPC URLs for the GuruNetwork chain.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const guruNetwork = {\n  rpcUrls: {\n    default: { http: ['https://rpc.guru'] },\n    public: { http: ['https://rpc.guru'] }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing commitmentsToVersionedHashes from viem in TypeScript\nDESCRIPTION: Shows how to import the commitmentsToVersionedHashes function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { commitmentsToVersionedHashes } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes for Public Client API Updates\nDESCRIPTION: Example showing changes to the public client API, moving from standalone functions to methods on the client instance.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\nimport { createPublicClient, http } from 'viem'\nimport { mainnet } from 'viem/chains'\n-import { getBlockNumber } from 'viem/public'\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n})\n\n- const blockNumber = await getBlockNumber(client)\n+ const blockNumber = await client.getBlockNumber()\n```\n\n----------------------------------------\n\nTITLE: Importing parseEther Function from viem in TypeScript\nDESCRIPTION: This snippet shows how to import the parseEther function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseEther.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Using portalAddress in proveWithdrawal Function in TypeScript\nDESCRIPTION: Example of using the portalAddress parameter in the proveWithdrawal function. The portalAddress specifies the Optimism Portal contract address and makes the targetChain parameter optional.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await client.proveWithdrawal({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  l2OutputIndex: 4529n,\n  outputRootProof: { /* ... */ },\n  portalAddress: '0xbEb5Fc579115071764c7423A4f12eDde41f106Ed' // [!code focus]\n  targetChain: optimism,\n  withdrawalProof: [ /* ... */ ],\n  withdrawal: { /* ... */ },\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from getAccount to direct address for JSON-RPC Accounts\nDESCRIPTION: Demonstrates how to update code after the breaking change that removed the getAccount function, replacing it with using the address directly for JSON-RPC accounts.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst address = '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n\nconst client = createWalletClient({\n- account: getAccount(address),\n+ account: address,\n  chain: mainnet,\n  transport: custom(window.ethereum)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Count in Fallback Transport\nDESCRIPTION: This example demonstrates how to set the maximum number of retry attempts for failed requests in fallback transport.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = fallback([thirdweb, infura], {\n  retryCount: 5,\n})\n```\n\n----------------------------------------\n\nTITLE: Using the blockTag Parameter with getL1TokenBalance in TypeScript\nDESCRIPTION: Example showing how to use the optional blockTag parameter to specify which block should be used for balance checking. The default is 'latest'.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = await publicClient.getL1TokenBalance({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  blockTag: 'latest', // [!code focus]\n  token: '0x5C221E77624690fff6dd741493D735a17716c26B',\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Batching in JavaScript\nDESCRIPTION: Batched websocket initialization was added to improve performance.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Websocket batching initialization\n```\n\n----------------------------------------\n\nTITLE: Importing pad Function from viem Library in TypeScript\nDESCRIPTION: Shows how to import the pad function from the viem library.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/pad.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pad } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Stopping Account Impersonation Example in TypeScript\nDESCRIPTION: Example showing how to stop impersonating an Ethereum account using the test client. The function takes an address parameter to specify which account to stop impersonating.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/stopImpersonatingAccount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testClient } from './client'\n\nawait testClient.stopImpersonatingAccount({\n  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Nonce for L1 Transaction\nDESCRIPTION: Example showing how to specify a custom nonce for the L1 transaction, which is a unique number identifying the transaction in the sequence of transactions from the account.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst gas = await client.estimateDepositTransactionGas({\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  request: {\n    gas: 21_000n,\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', \n    value: parseEther('1')\n  },\n  nonce: 69, // [!code focus]\n  targetChain: base,\n})\n```\n\n----------------------------------------\n\nTITLE: Parameter Usage Example\nDESCRIPTION: Shows how to pass the logs parameter to the extractWithdrawalMessageLogs function.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractWithdrawalMessageLogs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst logs = extractWithdrawalMessageLogs({ \n  logs: receipt.logs\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Access List with Block Tag\nDESCRIPTION: Illustrates using the createAccessList function with a specific block tag.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\n\nconst result = await publicClient.createAccessList({\n  blockTag: 'safe',\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  data: '0xdeadbeef',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Function Call with Max Priority Fee Per Gas in TypeScript\nDESCRIPTION: Shows how to set a maximum priority fee per gas for an EIP-1559 transaction when simulating a contract function call.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await publicClient.simulateContract({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: wagmiAbi,\n  functionName: 'mint',\n  args: [69420],\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom RPC Schema for the Bundler Client\nDESCRIPTION: Demonstrates how to define and use a custom RPC schema with the Bundler Client. This allows for type-safe access to custom RPC methods not included in the default Bundler RPC schema.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClient } from 'viem/account-abstraction'\nimport { http } from 'viem'\n\nimport { rpcSchema } from 'viem'\n\ntype CustomRpcSchema = [{ // [!code focus]\n  Method: 'eth_wagmi', // [!code focus]\n  Parameters: [string] // [!code focus]\n  ReturnType: string // [!code focus]\n}] // [!code focus]\n\nconst client = createBundlerClient({\n  rpcSchema: rpcSchema<CustomRpcSchema>(), // [!code focus]\n  transport: http('https://public.pimlico.io/v2/1/rpc')\n})\n\nconst result = await client.request({ // [!code focus]\n  method: 'eth_wa // [!code focus] \n//               ^|\n\n  params: ['hello'], // [!code focus]\n}) // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Setting Inner Input in getApprovalBasedPaymasterInput\nDESCRIPTION: Shows how to set the innerInput parameter, which is an additional payload that can be sent to the paymaster to implement any logic.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getApprovalBasedPaymasterInput.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = getApprovalBasedPaymasterInput({\n  innerInput: \"0x0005040302010\", // [!code focus]\n  minAllowance: 1n, \n  token: \"0x65C899B5fb8Eb9ae4da51D67E1fc417c7CB7e964\",\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Logs Parameter - TypeScript\nDESCRIPTION: Shows how to pass the logs parameter to the extractTransactionDepositedLogs function. The logs parameter should be an array of Log objects from a transaction receipt.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractTransactionDepositedLogs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst logs = extractTransactionDepositedLogs({ \n  logs: receipt.logs // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting verificationGasLimit for User Operation in TypeScript\nDESCRIPTION: Shows how to set the amount of gas to allocate for the verification step of the User Operation when calling getPaymasterData. This parameter is optional and of type bigint.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paymasterClient } from './config'\n\nconst paymasterArgs = await paymasterClient.getPaymasterData({\n  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',\n  callGasLimit: 69420n,\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\n  maxFeePerGas: 14510554812n,\n  maxPriorityFeePerGas: 2000000000n,\n  nonce: 0n,\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\n  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c',\n  verificationGasLimit: 69420n, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Function Results in Ethers\nDESCRIPTION: Shows how to use ethers.js Interface.decodeFunctionResult to decode function return values. This extracts the output values from a function call result.\nSOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nimport { utils } from 'ethers'\nimport { abi } from './abi'\n\nconst iface = new utils.Interface(abi);\nconst result = iface.decodeFunctionResult('balanceOf', '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000');\n```\n\n----------------------------------------\n\nTITLE: Fixing Deployment Transactions for EIP-7702\nDESCRIPTION: Fixed issues related to deployment transactions for EIP-7702.\nSOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Updated deployment transaction handling for EIP-7702\n```"
  }
]