[
  {
    "owner": "apache",
    "repo": "arrow-site",
    "content": "TITLE: Querying PostgreSQL with ADBC in Python\nDESCRIPTION: Demonstrates how to connect to a PostgreSQL database using ADBC, execute a SQL query, and fetch the results as an Arrow table.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-01-05-introducing-arrow-adbc.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport adbc_driver_postgresql.dbapi\n\nuri = \"postgresql://localhost:5432/postgres?user=postgres&password=password\"\nwith adbc_driver_postgresql.dbapi.connect(uri) as conn:\n    with conn.cursor() as cur:\n        cur.execute(\"SELECT * FROM customer\")\n        table = cur.fetch_arrow_table()\n        # Process the results\n```\n\n----------------------------------------\n\nTITLE: DuckDB and Arrow Analysis in R using dplyr\nDESCRIPTION: Example showing how to analyze NYC Taxi Dataset using dplyr pipelines with DuckDB and Arrow integration in R. Demonstrates filtering, grouping, and aggregation operations.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-12-3-arrow-duckdb.md#2025-04-09_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlibrary(duckdb)\nlibrary(arrow)\nlibrary(dplyr)\n\n# Open dataset using year,month folder partition\nds <- arrow::open_dataset(\"nyc-taxi\", partitioning = c(\"year\", \"month\"))\n\nds %>%\n  # Look only at 2015 on, where the number of passenger is positive, the trip distance is\n  # greater than a quarter mile, and where the fare amount is positive\n  filter(year > 2014 & passenger_count > 0 & trip_distance > 0.25 & fare_amount > 0) %>%\n  # Pass off to DuckDB\n  to_duckdb() %>%\n  group_by(passenger_count) %>%\n  mutate(tip_pct = tip_amount / fare_amount) %>%\n  summarise(\n    fare_amount = mean(fare_amount, na.rm = TRUE),\n    tip_amount = mean(tip_amount, na.rm = TRUE),\n    tip_pct = mean(tip_pct, na.rm = TRUE)\n  ) %>%\n  arrange(passenger_count) %>%\n  collect()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Zero-Copy Data Sharing Between R and Python with Arrow C Data Interface\nDESCRIPTION: This code demonstrates how to use the Arrow C Data Interface to enable zero-copy data sharing between R and Python. It shows creating arrays in PyArrow, manipulating them with R methods, creating arrays in R, and passing them back to PyArrow for concatenation.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2020-05-04-introducing-arrow-c-data-interface.md#2025-04-09_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlibrary(arrow)\nlibrary(reticulate)\nuse_virtualenv(\"arrow\")\npa <- import(\"pyarrow\")\n\n# Create an array in PyArrow\na <- pa$array(c(1, 2, 3))\na\n\n## Array\n## <double>\n## [\n##   1,\n##   2,\n##   3\n## ]\n\n# Apply R methods on the PyArrow-created array:\na[a > 1]\n\n## Array\n## <double>\n## [\n##   2,\n##   3\n## ]\n\n# Create an array in R and pass it to PyArrow\nb <- Array$create(c(5, 6, 7))\na_and_b <- pa$concat_arrays(r_to_py(list(a, b)))\na_and_b\n\n## Array\n## <double>\n## [\n##   1,\n##   2,\n##   3,\n##   5,\n##   6,\n##   7\n## ]\n```\n\n----------------------------------------\n\nTITLE: Using Ray API for Serialization in Python\nDESCRIPTION: This code snippet shows how to use the Ray API to serialize and deserialize Python objects, which internally uses the pyarrow serialization mechanism.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-10-15-fast-python-serialization-with-ray-and-arrow.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = [(1, 2), 'hello', 3, 4, np.array([5.0, 6.0])]\nx_id = ray.put(x)\ndeserialized_x = ray.get(x_id)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Grouped Aggregation with dplyr in Arrow 6.0.0\nDESCRIPTION: This example shows how to perform grouped aggregation on a large dataset using dplyr syntax with Arrow. It filters the NYC Taxi dataset based on passenger count and payment type, groups by passenger count, calculates mean total amount and count per group, then sorts by count in descending order.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-11-05-r-6.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nds <- open_dataset(\"nyc-taxi\", partitioning = c(\"year\", \"month\"))\nds %>%\n  filter(\n    passenger_count > 0,\n    passenger_count < 6,\n    grepl(\"csh\", payment_type, ignore.case = TRUE)\n  ) %>%\n  group_by(passenger_count) %>%\n  summarize(\n    avg = mean(total_amount, na.rm = TRUE),\n    count = n()\n  ) %>%\n  arrange(desc(count)) %>%\n  collect()\n\n#> # A tibble: 5 × 3\n#>   passenger_count   avg     count\n#>             <int> <dbl>     <int>\n#> 1               1  11.1 257738064\n#> 2               2  12.1  58824482\n#> 3               5  11.4  26056438\n#> 4               3  12.0  18852606\n#> 5               4  12.3  10081632\n```\n\n----------------------------------------\n\nTITLE: Creating and Writing Objects in Plasma Store using Python\nDESCRIPTION: This snippet demonstrates how to create an object in the Plasma store, write data to it, and seal it to make it immutable and available to other clients. It uses the pyarrow.plasma library to interact with the Plasma store.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-08-08-plasma-in-memory-object-store.md#2025-04-09_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Create an object.\nobject_id = pyarrow.plasma.ObjectID(20 * b'a')\nobject_size = 1000\nbuffer = memoryview(client.create(object_id, object_size))\n\n# Write to the buffer.\nfor i in range(1000):\n    buffer[i] = 0\n\n# Seal the object making it immutable and available to other clients.\nclient.seal(object_id)\n```\n\n----------------------------------------\n\nTITLE: Performing Joins with Arrow Tables Using dplyr Syntax\nDESCRIPTION: This example demonstrates how to perform a left join operation between two Arrow tables using dplyr syntax. It filters the flights dataset for specific criteria, selects columns of interest, and joins with the airlines table to include the full airline names.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-11-05-r-6.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: r\nCODE:\n```\narrow_table(nycflights13::flights) %>%\n  filter(\n    year == 2013,\n    month == 10,\n    day == 9,\n    origin == \"JFK\",\n    dest == \"LAS\"\n    ) %>%\n  select(dep_time, arr_time, carrier) %>%\n  left_join(\n    arrow_table(nycflights13::airlines)\n   ) %>%\n  collect()\n\n#> # A tibble: 12 × 4\n#>    dep_time arr_time carrier name\n#>       <int>    <int> <chr>   <chr>\n#>  1      637      853 B6      JetBlue Airways\n#>  2      648      912 AA      American Airlines Inc.\n#>  3      812     1029 DL      Delta Air Lines Inc.\n#>  4      945     1206 VX      Virgin America\n#>  5      955     1219 B6      JetBlue Airways\n#>  6     1018     1231 DL      Delta Air Lines Inc.\n#>  7     1120     1338 B6      JetBlue Airways\n#>  8     1451     1705 DL      Delta Air Lines Inc.\n#>  9     1656     1915 AA      American Airlines Inc.\n#> 10     1755     2001 DL      Delta Air Lines Inc.\n#> 11     1827     2049 B6      JetBlue Airways\n#> 12     1917     2126 DL      Delta Air Lines Inc.\n```\n\n----------------------------------------\n\nTITLE: Executing Query and Fetching Results with Arrow Flight SQL in C++\nDESCRIPTION: This code snippet demonstrates how to execute a SQL query using Arrow Flight SQL client, fetch the results, and process them. It includes error handling and shows how to iterate through multiple partitions of the query results.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-02-16-introducing-arrow-flight-sql.md#2025-04-09_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nflight::FlightCallOptions call_options;\n\n// Execute the query, getting a FlightInfo describing how to fetch the results\nstd::cout << \"Executing query: '\" << FLAGS_query << \"'\" << std::endl;\nARROW_ASSIGN_OR_RAISE(std::unique_ptr<flight::FlightInfo> flight_info,\n                      client->Execute(call_options, FLAGS_query));\n\n// Fetch each partition sequentially (though this can be done in parallel)\nfor (const flight::FlightEndpoint& endpoint : flight_info->endpoints()) {\n  // Here we assume each partition is on the same server we originally queried, but this\n  // isn't true in general: the server may split the query results between multiple\n  // other servers, which we would have to connect to.\n\n  // The \"ticket\" in the endpoint is opaque to the client. The server uses it to\n  // identify which part of the query results to return.\n  ARROW_ASSIGN_OR_RAISE(auto stream, client->DoGet(call_options, endpoint.ticket));\n  // Read all results into an Arrow Table, though we can iteratively process record\n  // batches as they arrive as well\n  std::shared_ptr<arrow::Table> table;\n  ARROW_RETURN_NOT_OK(stream->ReadAll(&table));\n  std::cout << \"Read one partition:\" << std::endl;\n  std::cout << table->ToString() << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects from Plasma Store using Python\nDESCRIPTION: This snippet shows how to retrieve an object from the Plasma store using its object ID. The get method blocks until the object has been sealed if it hasn't been sealed yet. It uses the pyarrow.plasma library to interact with the Plasma store.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-08-08-plasma-in-memory-object-store.md#2025-04-09_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Get the object from the store. This blocks until the object has been sealed.\nobject_id = pyarrow.plasma.ObjectID(20 * b'a')\n[buff] = client.get([object_id])\nbuffer = memoryview(buff)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Arrow via pip\nDESCRIPTION: Command to install the Python Apache Arrow package (pyarrow) using pip package manager. Recommends pinning the version for consistency.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install 'pyarrow={{site.data.versions['current'].pinned_number}}'\n```\n\n----------------------------------------\n\nTITLE: DuckDB and Arrow Analysis in Python\nDESCRIPTION: Example showing how to analyze NYC Taxi Dataset using DuckDB's Relational API in Python. Demonstrates dataset loading, filtering, and aggregation operations.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-12-3-arrow-duckdb.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport duckdb\nimport pyarrow as pa\nimport pyarrow.dataset as ds\n\n# Open dataset using year,month folder partition\nnyc = ds.dataset('nyc-taxi/', partitioning=[\"year\", \"month\"])\n\n# We transform the nyc dataset into a DuckDB relation\nnyc = duckdb.arrow(nyc)\n\n# Run same query again\nnyc.filter(\"year > 2014 & passenger_count > 0 & trip_distance > 0.25 & fare_amount > 0\")\n    .aggregate(\"SELECT AVG(fare_amount), AVG(tip_amount), AVG(tip_amount / fare_amount) as tip_pct\",\"passenger_count\").arrow()\n```\n\n----------------------------------------\n\nTITLE: Reading Parquet Files with Arrow in R\nDESCRIPTION: Demonstrates how to read a Parquet file into an R data.frame using the Arrow package. This provides a straightforward way to work with Parquet files without requiring additional software like Apache Spark.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-08-01-r-package-on-cran.md#2025-04-09_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlibrary(arrow)\ndf <- read_parquet(\"path/to/file.parquet\")\n```\n\n----------------------------------------\n\nTITLE: Using float16 and string_view types in Python with nanoarrow\nDESCRIPTION: This Python code demonstrates how to use float16 and string_view types with nanoarrow arrays.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport nanoarrow as na\n\nna.Array([\"abc\", \"def\", None], na.string_view())\n#> nanoarrow.Array<string_view>[3]\n#> 'abc'\n#> 'def'\n#> None\nna.Array([1, 2, 3], na.float16())\n#> nanoarrow.Array<half_float>[3]\n#> 1.0\n#> 2.0\n#> 3.0\n```\n\n----------------------------------------\n\nTITLE: Writing and reading Arrow IPC streams with nanoarrow in Python\nDESCRIPTION: This Python code demonstrates how to write and read Arrow IPC streams using nanoarrow.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport nanoarrow as na\nfrom nanoarrow import ipc\n\nout = io.BytesIO()\nwith ipc.StreamWriter.from_writable(out) as writer:\n    writer.write_stream(ipc.InputStream.example())\n\nout.seek(0)\nna.ArrayStream.from_readable(out).read_all()\n#> nanoarrow.Array<non-nullable struct<some_col: int32>>[3]\n#> {'some_col': 1}\n#> {'some_col': 2}\n#> {'some_col': 3}\n```\n\n----------------------------------------\n\nTITLE: Reading and Printing Elements from an Arrow Array in C using nanoarrow\nDESCRIPTION: This C function shows how to extract and print elements from an Arrow array using nanoarrow. It initializes an array view from a schema, checks if the storage type is int32, and then iterates through the array to print each value.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-03-01-nanoarrow-0.1.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n#include \"nanoarrow.h\"\n\nint print_simple_array(struct ArrowArray* array, struct ArrowSchema* schema) {\n  struct ArrowError error;\n  struct ArrowArrayView array_view;\n  NANOARROW_RETURN_NOT_OK(ArrowArrayViewInitFromSchema(&array_view, schema, &error));\n\n  if (array_view.storage_type != NANOARROW_TYPE_INT32) {\n    printf(\"Array has storage that is not int32\\n\");\n  }\n\n  int result = ArrowArrayViewSetArray(&array_view, array, &error);\n  if (result != NANOARROW_OK) {\n    ArrowArrayViewReset(&array_view);\n    return result;\n  }\n\n  for (int64_t i = 0; i < array->length; i++) {\n    printf(\"%d\\n\", (int)ArrowArrayViewGetIntUnsafe(&array_view, i));\n  }\n\n  ArrowArrayViewReset(&array_view);\n  return NANOARROW_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sorting Functionality in Apache Arrow Rust\nDESCRIPTION: This code snippet demonstrates how to use the sorting functionality in Apache Arrow Rust. It creates an Int32Array, prints it, sorts it, and then prints the sorted array.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-11-02-6.0.0-rs-release.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nextern crate arrow;\n\nuse arrow::array::\n    Int32Array,\n    ArrayRef,\n};\nuse std::sync::Arc;\nuse arrow::compute::sort;\n\nfn main() {\n    \n    let array: ArrayRef = Arc::new(Int32Array::from(vec![5, 4, 23, 1, 20, 2]));\n    println!(\"{:?}\", array);\n    let sorted_array = sort(&array, None).unwrap();\n    println!(\"{:?}\", sorted_array);\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Late Materialization Process in Parquet Column Access\nDESCRIPTION: A text-based diagram showing how late materialization works when applying the predicate 'A > 35 AND B = \"F\"'. The diagram illustrates how only specific rows from Column A that meet the first condition are then used to selectively access values from Column B, demonstrating efficient data access patterns.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-12-26-querying-parquet-with-millisecond-latency.md#2025-04-09_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n  Row Index\n             ┌────────────────────┐            ┌────────────────────┐\n       200   │         30         │            │        \"F\"         │\n             └────────────────────┘            └────────────────────┘\n                      ...                               ...\n             ┌────────────────────┐            ┌────────────────────┐\n       205   │         37         │─ ─ ─ ─ ─ ─▶│        \"F\"         │\n             ├────────────────────┤            ├────────────────────┤\n       206   │         36         │─ ─ ─ ─ ─ ─▶│        \"G\"         │\n             └────────────────────┘            └────────────────────┘\n                      ...                               ...\n             ┌────────────────────┐            ┌────────────────────┐\n       238   │         36         │─ ─ ─ ─ ─ ─▶│        \"F\"         │\n             ├────────────────────┤            ├────────────────────┤\n       239   │         36         │─ ─ ─ ─ ─ ─▶│        \"G\"         │\n             ├────────────────────┤            ├────────────────────┤\n       240   │         40         │─ ─ ─ ─ ─ ─▶│        \"G\"         │\n             └────────────────────┘            └────────────────────┘\n                      ...                               ...\n             ┌────────────────────┐            ┌────────────────────┐\n      244    │         26         │            │        \"D\"         │\n             └────────────────────┘            └────────────────────┘\n\n\n                   Column A                          Column B\n                    Values                            Values\n```\n\n----------------------------------------\n\nTITLE: Running Arrow Flight Performance Benchmark in Shell\nDESCRIPTION: A shell command demonstrating Arrow Flight's performance benchmark showing data transfer speed of approximately 3GB/s for ~12GB of data over localhost without TLS enabled.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-09-30-introducing-arrow-flight.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./arrow-flight-benchmark --records_per_stream 100000000\nBytes read: 12800000000\nNanos: 3900466413\nSpeed: 3129.63 MB/s\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow on Debian/Ubuntu\nDESCRIPTION: Commands to install Apache Arrow C++ and GLib packages on Debian-based Linux distributions. Includes steps for adding repositories and installing various Arrow components.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\nsudo apt install -y -V ca-certificates lsb-release wget\nwget https://repo1.maven.org/maven2/org/apache/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\nsudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\nsudo apt update\nsudo apt install -y -V libarrow-dev # For C++\nsudo apt install -y -V libarrow-glib-dev # For GLib (C)\nsudo apt install -y -V libarrow-dataset-dev # For Apache Arrow Dataset C++\nsudo apt install -y -V libarrow-dataset-glib-dev # For Apache Arrow Dataset GLib (C)\nsudo apt install -y -V libarrow-acero-dev # For Apache Arrow Acero\nsudo apt install -y -V libarrow-flight-dev # For Apache Arrow Flight C++\nsudo apt install -y -V libarrow-flight-glib-dev # For Apache Arrow Flight GLib (C)\nsudo apt install -y -V libarrow-flight-sql-dev # For Apache Arrow Flight SQL C++\nsudo apt install -y -V libarrow-flight-sql-glib-dev # For Apache Arrow Flight SQL GLib (C)\nsudo apt install -y -V libgandiva-dev # For Gandiva C++\nsudo apt install -y -V libgandiva-glib-dev # For Gandiva GLib (C)\nsudo apt install -y -V libparquet-dev # For Apache Parquet C++\nsudo apt install -y -V libparquet-glib-dev # For Apache Parquet GLib (C)\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Column Selection in SQL\nDESCRIPTION: A simple SQL query example demonstrating projection pushdown, where only specific columns (A and B) are selected from a table. This query is used to illustrate how Parquet readers can optimize by only reading the necessary column chunks.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-12-26-querying-parquet-with-millisecond-latency.md#2025-04-09_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT B from table where A > 35\n```\n\n----------------------------------------\n\nTITLE: Visualizing Arrow Encoding for Nested Structures\nDESCRIPTION: Illustrates the hierarchical representation of nested structures in Arrow, showing how ListArrays and StructArrays are composed.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-17-arrow-parquet-encoding-part-3.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐\n                     ┌──────────────────┐\n│ ┌─────┐   ┌─────┐  │ ┌─────┐   ┌─────┐│ │\n  │  1  │   │  0  │  │ │  1  │   │  1  ││\n│ ├─────┤   ├─────┤  │ ├─────┤   ├─────┤│ │\n  │  0  │   │  1  │  │ │  0  │   │ ??  ││\n│ ├─────┤   ├─────┤  │ ├─────┤   ├─────┤│ │\n  │  1  │   │  1  │  │ │  0  │   │ ??  ││\n│ └─────┘   ├─────┤  │ └─────┘   └─────┘│ │\n            │  3  │  │ Validity   Values│\n│ Validity  └─────┘  │                  │ │\n                     │ child[0]         │\n│ \"a\"       Offsets  │ PrimitiveArray   │ │\n  ListArray          └──────────────────┘\n└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘\n\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─\n           ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐ │\n│                    ┌──────────┐ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─\n  ┌─────┐  │ ┌─────┐ │ ┌─────┐  │   ┌─────┐ ┌─────┐ ┌──────────┐ │ │ │\n│ │  0  │    │  1  │ │ │  1  │  │ │ │  0  │ │  0  │ │ ┌─────┐  │\n  ├─────┤  │ ├─────┤ │ ├─────┤  │   ├─────┤ ├─────┤ │ │  3  │  │ │ │ │\n│ │  2  │    │  1  │ │ │  1  │  │ │ │  1  │ │  0  │ │ ├─────┤  │\n  ├─────┤  │ ├─────┤ │ ├─────┤  │   ├─────┤ ├─────┤ │ │  4  │  │ │ │ │\n│ │  3  │    │  1  │ │ │  2  │  │ │ │  0  │ │  2  │ │ └─────┘  │\n  ├─────┤  │ ├─────┤ │ ├─────┤  │   ├─────┤ ├─────┤ │          │ │ │ │\n│ │  4  │    │  0  │ │ │ ??  │  │ │ │ ??  │ │  2  │ │  Values  │\n  └─────┘  │ └─────┘ │ └─────┘  │   └─────┘ ├─────┤ │          │ │ │ │\n│                    │          │ │         │  2  │ │          │\n  Offsets  │ Validity│ Values   │           └─────┘ │          │ │ │ │\n│                    │          │ │Validity         │ child[0] │\n           │         │ \"b1\"     │           Offsets │ Primitive│ │ │ │\n│                    │ Primitive│ │ \"b2\"            │ Array    │\n           │         │ Array    │   ListArray       └──────────┘ │ │ │\n│                    └──────────┘ └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─\n           │ \"element\"                                             │ │\n│            StructArray\n  \"b\"      └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘ │\n│ ListArray\n ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Spark to Pandas Conversion with Apache Arrow in PySpark\nDESCRIPTION: This code snippet shows how to enable Apache Arrow for Spark to Pandas conversion and demonstrates the performance improvement. It creates a Spark DataFrame, converts it to Pandas without Arrow, then enables Arrow and performs the conversion again, showing the significant speed increase.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-07-26-spark-arrow.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWelcome to\n      ____              __\n     / __/__  ___ _____/ /__\n    _\\ \\/ _ \\/ _ `/ __/  '_/\n   /__ / .__/\\_,_/_/ /_/\\_\\   version 2.3.0-SNAPSHOT\n      /_/\n\nUsing Python version 2.7.13 (default, Dec 20 2016 23:09:15)\nSparkSession available as 'spark'.\n\nIn [1]: from pyspark.sql.functions import rand\n   ...: df = spark.range(1 << 22).toDF(\"id\").withColumn(\"x\", rand())\n   ...: df.printSchema()\n   ...: \nroot\n |-- id: long (nullable = false)\n |-- x: double (nullable = false)\n\n\nIn [2]: %time pdf = df.toPandas()\nCPU times: user 17.4 s, sys: 792 ms, total: 18.1 s\nWall time: 20.7 s\n\nIn [3]: spark.conf.set(\"spark.sql.execution.arrow.enabled\", \"true\")\n\nIn [4]: %time pdf = df.toPandas()\nCPU times: user 40 ms, sys: 32 ms, total: 72 ms                                 \nWall time: 737 ms\n\nIn [5]: pdf.describe()\nOut[5]: \n                 id             x\ncount  4.194304e+06  4.194304e+06\nmean   2.097152e+06  4.998996e-01\nstd    1.210791e+06  2.887247e-01\nmin    0.000000e+00  8.291929e-07\n25%    1.048576e+06  2.498116e-01\n50%    2.097152e+06  4.999210e-01\n75%    3.145727e+06  7.498380e-01\nmax    4.194303e+06  9.999996e-01\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow on RHEL/CentOS 8/9\nDESCRIPTION: Commands to install Apache Arrow C++ and GLib packages on RHEL-based Linux distributions version 8 and 9. Includes repository setup and component installation.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install -y epel-release || sudo dnf install -y oracle-epel-release-el$(cut -d: -f5 /etc/system-release-cpe | cut -d. -f1) || sudo dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(cut -d: -f5 /etc/system-release-cpe | cut -d. -f1).noarch.rpm\nsudo dnf install -y https://repo1.maven.org/maven2/org/apache/arrow/almalinux/$(cut -d: -f5 /etc/system-release-cpe | cut -d. -f1)/apache-arrow-release-latest.rpm\nsudo dnf config-manager --set-enabled epel || :\nsudo dnf config-manager --set-enabled powertools || :\nsudo dnf config-manager --set-enabled crb || :\nsudo dnf config-manager --set-enabled ol$(cut -d: -f5 /etc/system-release-cpe | cut -d. -f1)_codeready_builder || :\nsudo dnf config-manager --set-enabled codeready-builder-for-rhel-$(cut -d: -f5 /etc/system-release-cpe | cut -d. -f1)-rhui-rpms || :\nsudo subscription-manager repos --enable codeready-builder-for-rhel-$(cut -d: -f5 /etc/system-release-cpe | cut -d. -f1)-$(arch)-rpms || :\nsudo dnf install -y arrow-devel # For C++\nsudo dnf install -y arrow-glib-devel # For GLib (C)\nsudo dnf install -y arrow-dataset-devel # For Apache Arrow Dataset C++\nsudo dnf install -y arrow-dataset-glib-devel # For Apache Arrow Dataset GLib (C)\nsudo dnf install -y arrow-acero-devel # For Apache Arrow Acero C++\nsudo dnf install -y arrow-flight-devel # For Apache Arrow Flight C++\nsudo dnf install -y arrow-flight-glib-devel # For Apache Arrow Flight GLib (C)\nsudo dnf install -y arrow-flight-sql-devel # For Apache Arrow Flight SQL C++\nsudo dnf install -y arrow-flight-sql-glib-devel # For Apache Arrow Flight SQL GLib (C)\nsudo dnf install -y gandiva-devel # For Apache Gandiva C++\nsudo dnf install -y gandiva-glib-devel # For Apache Gandiva GLib (C)\nsudo dnf install -y parquet-devel # For Apache Parquet C++\nsudo dnf install -y parquet-glib-devel # For Apache Parquet GLib (C)\n```\n\n----------------------------------------\n\nTITLE: Reading Selected Columns from Parquet Files with tidyselect\nDESCRIPTION: Shows how to read only specific columns from a Parquet file using tidyselect helper functions. This optimizes memory usage by loading only the desired columns.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-08-01-r-package-on-cran.md#2025-04-09_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ndf <- read_parquet(\"iris.parquet\", col_select = starts_with(\"Sepal\"))\n```\n\n----------------------------------------\n\nTITLE: Basic DuckDB-Arrow Connection in Python\nDESCRIPTION: Demonstrates connecting to DuckDB and executing a query that produces an Arrow Record Batch Reader for streaming results from a NYC dataset.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-12-3-arrow-duckdb.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncon = duckdb.connect()\n\nquery = con.execute(\"SELECT * FROM nyc_dataset\")\n# DuckDB's queries can now produce a Record Batch Reader\nrecord_batch_reader = query.fetch_record_batch()\n# Which means we can stream the whole query per batch.\n# This retrieves the first batch\nchunk = record_batch_reader.read_next_batch()\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query on CSV Data Using DataFusion in Rust\nDESCRIPTION: This code snippet demonstrates how to use DataFusion to run a SQL query on CSV data. It includes creating an execution context, defining a schema, registering a CSV data source, executing a SQL query, and processing the results.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-02-04-datafusion-donation.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// create execution context\nlet mut ctx = ExecutionContext::new();\n\n// define schema for data source (csv file)\nlet schema = Arc::new(Schema::new(vec![\n    Field::new(\"c1\", DataType::Utf8, false),\n    Field::new(\"c2\", DataType::UInt32, false),\n    Field::new(\"c3\", DataType::Int8, false),\n    Field::new(\"c4\", DataType::Int16, false),\n    Field::new(\"c5\", DataType::Int32, false),\n    Field::new(\"c6\", DataType::Int64, false),\n    Field::new(\"c7\", DataType::UInt8, false),\n    Field::new(\"c8\", DataType::UInt16, false),\n    Field::new(\"c9\", DataType::UInt32, false),\n    Field::new(\"c10\", DataType::UInt64, false),\n    Field::new(\"c11\", DataType::Float32, false),\n    Field::new(\"c12\", DataType::Float64, false),\n    Field::new(\"c13\", DataType::Utf8, false),\n]));\n\n// register csv file with the execution context\nlet csv_datasource =\n    CsvDataSource::new(\"test/data/aggregate_test_100.csv\", schema.clone(), 1024);\nctx.register_datasource(\"aggregate_test_100\", Rc::new(RefCell::new(csv_datasource)));\n\nlet sql = \"SELECT c1, MIN(c12), MAX(c12) FROM aggregate_test_100 WHERE c11 > 0.1 AND c11 < 0.9 GROUP BY c1\";\n\n// execute the query\nlet relation = ctx.sql(&sql).unwrap();\nlet mut results = relation.borrow_mut();\n\n// iterate over the results\nwhile let Some(batch) = results.next().unwrap() {\n    println!(\n        \"RecordBatch has {} rows and {} columns\",\n        batch.num_rows(),\n        batch.num_columns()\n    );\n\n    let c1 = batch\n        .column(0)\n        .as_any()\n        .downcast_ref::<BinaryArray>()\n        .unwrap();\n\n    let min = batch\n        .column(1)\n        .as_any()\n        .downcast_ref::<Float64Array>()\n        .unwrap();\n\n    let max = batch\n        .column(2)\n        .as_any()\n        .downcast_ref::<Float64Array>()\n        .unwrap();\n\n    for i in 0..batch.num_rows() {\n        let c1_value: String = String::from_utf8(c1.value(i).to_vec()).unwrap();\n        println!(\"{}, Min: {}, Max: {}\", c1_value, min.value(i), max.value(i),);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow R Package from CRAN\nDESCRIPTION: Installs the Apache Arrow R package from CRAN using R's package manager.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_13\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(\"arrow\")\n```\n\n----------------------------------------\n\nTITLE: Querying SQLite with ADBC in Python\nDESCRIPTION: Shows how to connect to a SQLite database using ADBC, execute a SQL query, and fetch the results as an Arrow table.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-01-05-introducing-arrow-adbc.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport adbc_driver_sqlite.dbapi\n\nuri = \"file:mydb.sqlite\"\nwith adbc_driver_sqlite.dbapi.connect(uri) as conn:\n    with conn.cursor() as cur:\n        cur.execute(\"SELECT * FROM customer\")\n        table = cur.fetch_arrow_table()\n        # Process the results\n```\n\n----------------------------------------\n\nTITLE: Basic Group Aggregation Implementation in Python\nDESCRIPTION: Simple Python implementation using Pandas and defaultdict to demonstrate the basic concept of group aggregation. While functional, this approach is noted as being slow and memory inefficient.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-05-datafusion_fast_grouping.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom collections import defaultdict\nfrom operator import itemgetter\n\n# read file\nhits = pd.read_parquet('hits.parquet', engine='pyarrow')\n\n# build groups\ncounts = defaultdict(int)\nfor index, row in hits.iterrows():\n    group = (row['UserID'], row['SearchPhrase']);\n    # update the dict entry for the corresponding key\n    counts[group] += 1\n\n# Print the top 10 values\nprint (dict(sorted(counts.items(), key=itemgetter(1), reverse=True)[:10]))\n```\n\n----------------------------------------\n\nTITLE: Querying Arrays in SQL\nDESCRIPTION: Demonstrates accessing array elements and using array functions in a SQL query in DataFusion.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-19-datafusion-34.0.0.md#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT column1, \n       column1[1] AS first_element, \n       array_length(column1) AS len \nFROM my_table;\n```\n\n----------------------------------------\n\nTITLE: Reading IPC Stream from URL using nanoarrow in R\nDESCRIPTION: Demonstrates how to use the new read_nanoarrow() function to read an Arrow IPC stream from a URL and convert it to a tibble. This feature allows easy ingestion of Arrow data into R from various sources.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-05-27-nanoarrow-0.5.0-release.md#2025-04-09_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nlibrary(nanoarrow)\n\nurl <- \"https://github.com/apache/arrow-experiments/raw/main/data/arrow-commits/arrow-commits.arrows\"\n\nread_nanoarrow(url) |>\n  tibble::as_tibble()\n#> # A tibble: 15,487 × 5\n#>    commit                                time                files merge message\n#>    <chr>                                 <dttm>              <int> <lgl> <chr>\n#>  1 49cdb0fe4e98fda19031c864a18e6156c6ed… 2024-03-07 02:00:52     2 FALSE GH-403…\n#>  2 1d966e98e41ce817d1f8c5159c0b9caa4de7… 2024-03-06 21:51:34     1 FALSE GH-403…\n#>  3 96f26a89bd73997f7532643cdb27d04b7097… 2024-03-06 20:29:15     1 FALSE GH-402…\n#>  4 ee1a8c39a55f3543a82fed900dadca791f6e… 2024-03-06 07:46:45     1 FALSE GH-403…\n#>  5 3d467ac7bfae03cf2db09807054c5672e195… 2024-03-05 16:13:32     1 FALSE GH-201…\n#>  6 ef6ea6beed071ed070daf03508f4c14b4072… 2024-03-05 14:53:13    20 FALSE GH-403…\n#>  7 53e0c745ad491af98a5bf18b67541b12d779… 2024-03-05 12:31:38     2 FALSE GH-401…\n#>  8 3ba6d286caad328b8572a3b9228045da8c8d… 2024-03-05 08:15:42     6 FALSE GH-400…\n#>  9 4ce9a5edd2710fb8bf0c642fd0e3863b01c2… 2024-03-05 07:56:25     2 FALSE GH-401…\n#> 10 2445975162905bd8d9a42ffc9cd0daa0e19d… 2024-03-05 01:04:20     1 FALSE GH-403…\n#> # ℹ 15,477 more rows\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from a Database as an Arrow Table using turbodbc in Python\nDESCRIPTION: This code snippet demonstrates how to connect to a database using turbodbc, execute a SQL query, and fetch the results as an Apache Arrow table. It showcases the seamless integration between turbodbc and Arrow for efficient data retrieval.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-06-16-turbodbc-arrow.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from turbodbc import connect\n>>> connection = connect(dsn=\"My columnar database\")\n>>> cursor = connection.cursor()\n>>> cursor.execute(\"SELECT some_integers, some_strings FROM my_table\")\n>>> cursor.fetchallarrow()\npyarrow.Table\nsome_integers: int64\nsome_strings: string\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Pickle vs PyArrow Serialization in Python\nDESCRIPTION: A comprehensive script that benchmarks and visualizes serialization/deserialization performance between pickle and pyarrow libraries. The code tests performance on various data structures including numpy arrays, dictionaries, sets, and string lists. It generates bar plots comparing the performance metrics.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-10-15-fast-python-serialization-with-ray-and-arrow.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\nimport pyarrow\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport timeit\n\n\ndef benchmark_object(obj, number=10):\n    # Time serialization and deserialization for pickle.\n    pickle_serialize = timeit.timeit(\n        lambda: pickle.dumps(obj, protocol=pickle.HIGHEST_PROTOCOL),\n        number=number)\n    serialized_obj = pickle.dumps(obj, pickle.HIGHEST_PROTOCOL)\n    pickle_deserialize = timeit.timeit(lambda: pickle.loads(serialized_obj),\n                                       number=number)\n\n    # Time serialization and deserialization for Ray.\n    ray_serialize = timeit.timeit(\n        lambda: pyarrow.serialize(obj).to_buffer(), number=number)\n    serialized_obj = pyarrow.serialize(obj).to_buffer()\n    ray_deserialize = timeit.timeit(\n        lambda: pyarrow.deserialize(serialized_obj), number=number)\n\n    return [[pickle_serialize, pickle_deserialize],\n            [ray_serialize, ray_deserialize]]\n\n\ndef plot(pickle_times, ray_times, title, i):\n    fig, ax = plt.subplots()\n    fig.set_size_inches(3.8, 2.7)\n\n    bar_width = 0.35\n    index = np.arange(2)\n    opacity = 0.6\n\n    plt.bar(index, pickle_times, bar_width,\n            alpha=opacity, color='r', label='Pickle')\n\n    plt.bar(index + bar_width, ray_times, bar_width,\n            alpha=opacity, color='c', label='Ray')\n\n    plt.title(title, fontweight='bold')\n    plt.ylabel('Time (seconds)', fontsize=10)\n    labels = ['serialization', 'deserialization']\n    plt.xticks(index + bar_width / 2, labels, fontsize=10)\n    plt.legend(fontsize=10, bbox_to_anchor=(1, 1))\n    plt.tight_layout()\n    plt.yticks(fontsize=10)\n    plt.savefig('plot-' + str(i) + '.png', format='png')\n\n\ntest_objects = [\n    [np.random.randn(50000) for i in range(100)],\n    {'weight-' + str(i): np.random.randn(50000) for i in range(100)},\n    {i: set(['string1' + str(i), 'string2' + str(i)]) for i in range(100000)},\n    [str(i) for i in range(200000)]\n]\n\ntitles = [\n    'List of large numpy arrays',\n    'Dictionary of large numpy arrays',\n    'Large dictionary of small sets',\n    'Large list of strings'\n]\n\nfor i in range(len(test_objects)):\n    plot(*benchmark_object(test_objects[i]), titles[i], i)\n```\n\n----------------------------------------\n\nTITLE: Querying Structured Data Types in DataFusion SQL\nDESCRIPTION: Examples showing how to query structured and nested data in Parquet files using DataFusion SQL. The first query demonstrates selecting DELETE records, while the second query shows how to access deeply nested fields within structured data.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-06-24-datafusion-25.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n----------\n-- Explore structured data using SQL\n----------\nSELECT delete FROM 'twitter-sample-head-100000.parquet' WHERE delete IS NOT NULL limit 10;\n+---------------------------------------------------------------------------------------------------------------------------+\n| delete                                                                                                                    |\n+---------------------------------------------------------------------------------------------------------------------------+\n| {status: {id: {$numberLong: 135037425050320896}, id_str: 135037425050320896, user_id: 334902461, user_id_str: 334902461}} |\n| {status: {id: {$numberLong: 134703982051463168}, id_str: 134703982051463168, user_id: 405383453, user_id_str: 405383453}} |\n| {status: {id: {$numberLong: 134773741740765184}, id_str: 134773741740765184, user_id: 64823441, user_id_str: 64823441}}   |\n| {status: {id: {$numberLong: 132543659655704576}, id_str: 132543659655704576, user_id: 45917834, user_id_str: 45917834}}   |\n| {status: {id: {$numberLong: 133786431926697984}, id_str: 133786431926697984, user_id: 67229952, user_id_str: 67229952}}   |\n| {status: {id: {$numberLong: 134619093570560002}, id_str: 134619093570560002, user_id: 182430773, user_id_str: 182430773}} |\n| {status: {id: {$numberLong: 134019857527214080}, id_str: 134019857527214080, user_id: 257396311, user_id_str: 257396311}} |\n| {status: {id: {$numberLong: 133931546469076993}, id_str: 133931546469076993, user_id: 124539548, user_id_str: 124539548}} |\n| {status: {id: {$numberLong: 134397743350296576}, id_str: 134397743350296576, user_id: 139836391, user_id_str: 139836391}} |\n| {status: {id: {$numberLong: 127833661767823360}, id_str: 127833661767823360, user_id: 244442687, user_id_str: 244442687}} |\n+---------------------------------------------------------------------------------------------------------------------------+\n\n----------\n-- Select some deeply nested fields\n----------\nSELECT\n  delete['status']['id']['$numberLong'] as delete_id,\n  delete['status']['user_id'] as delete_user_id\nFROM 'twitter-sample-head-100000.parquet' WHERE delete IS NOT NULL LIMIT 10;\n\n+--------------------+----------------+\n| delete_id          | delete_user_id |\n+--------------------+----------------+\n| 135037425050320896 | 334902461      |\n| 134703982051463168 | 405383453      |\n| 134773741740765184 | 64823441       |\n| 132543659655704576 | 45917834       |\n| 133786431926697984 | 67229952       |\n| 134619093570560002 | 182430773      |\n| 134019857527214080 | 257396311      |\n| 133931546469076993 | 124539548      |\n| 134397743350296576 | 139836391      |\n| 127833661767823360 | 244442687      |\n+--------------------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Parquet Files in R\nDESCRIPTION: Demonstrates writing an R data.frame to a Parquet file using the Arrow package. This allows easy sharing of data with other systems that support the Parquet format.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-08-01-r-package-on-cran.md#2025-04-09_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nwrite_parquet(df, \"path/to/different_file.parquet\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ruby Arrow Compute Function Usage\nDESCRIPTION: Example showing how to use Arrow compute functions in Ruby with both explicit Array/Scalar construction and shortcut syntax for the add function. Demonstrates how compute functions can now accept raw Ruby objects.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-07-20-5.0.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nadd_function = Arrow::Function.find(\"add\")\n# Not shortcut version\naugend = Arrow::Int8Array.new([1, 2, 3])\naddend = Arrow::Int8Scalar.new(5)\nargs = [\n  Arrow::ArrayDatum.new(augend),\n  Arrow::ScalarDatum.new(addend),\n]\nadd_function.execute(args).value.to_a # => [6, 7, 8]\n# Shortcut version\nadd_function.execute([[1, 2, 3], 5]).value.to_a # => [6, 7, 8]\n```\n\n----------------------------------------\n\nTITLE: Reading and Printing Elements from an Arrow Array in C++ using nanoarrow.hpp\nDESCRIPTION: This C++ function demonstrates using the experimental C++ interface to read and print elements from an Arrow array. It uses unique_ptr-like wrappers to manage array view resources, making the code more concise than the equivalent C version.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-03-01-nanoarrow-0.1.0-release.md#2025-04-09_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <stdio.h>\n#include \"nanoarrow.hpp\"\n\nint print_simple_array2(struct ArrowArray* array, struct ArrowSchema* schema) {\n  struct ArrowError error;\n  nanoarrow::UniqueArrayView array_view;\n  NANOARROW_RETURN_NOT_OK(ArrowArrayViewInitFromSchema(array_view.get(), schema, &error));\n  NANOARROW_RETURN_NOT_OK(ArrowArrayViewSetArray(array_view.get(), array, &error));\n  for (int64_t i = 0; i < array->length; i++) {\n    printf(\"%d\\n\", (int)ArrowArrayViewGetIntUnsafe(array_view.get(), i));\n  }\n  return NANOARROW_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Parquet File Physical Layout\nDESCRIPTION: ASCII diagram showing the physical layout of a Parquet file, including Data Pages for each ColumnChunk and the file footer containing metadata. This visualization helps understand how the logical structure is physically stored in the file.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-12-26-querying-parquet-with-millisecond-latency.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃\n┃ Data Page for ColumnChunk 1 (\"A\")             ◀─┃─ ─ ─│\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃     │\n┃ Data Page for ColumnChunk 1 (\"A\")               ┃\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃     │\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃\n┃ Data Page for ColumnChunk 2 (\"B\")               ┃     │\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃     │\n┃ Data Page for ColumnChunk 3 (\"C\")               ┃\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃     │\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃\n┃ Data Page for ColumnChunk 3 (\"C\")               ┃     │\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃     │\n┃ Data Page for ColumnChunk 3 (\"C\")               ┃\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃     │\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃\n┃ Data Page for ColumnChunk 4 (\"A\")             ◀─┃─ ─ ─│─ ┐\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃     │  │\n┃ Data Page for ColumnChunk 5 (\"B\")               ┃\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃     │  │\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃\n┃ Data Page for ColumnChunk 5 (\"B\")               ┃     │  │\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃     │  │\n┃ Data Page for ColumnChunk 5 (\"B\")               ┃\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃     │  │\n┃┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┃\n┃ Data Page for ColumnChunk 6 (\"C\")               ┃     │  │\n┃└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘  ┃\n┃┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ ┃     │  │\n┃┃Footer                                        ┃ ┃\n┃┃ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ ┃ ┃     │  │\n┃┃ ┃File Metadata                             ┃ ┃ ┃\n┃┃ ┃ Schema, etc                              ┃ ┃ ┃     │  │\n┃┃ ┃ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓     ┃ ┃ ┃\n┃┃ ┃ ┃Row Group 1 Metadata              ┃     ┃ ┃ ┃     │  │\n┃┃ ┃ ┃┏━━━━━━━━━━━━━━━━━━━┓             ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┃Column \"A\" Metadata┃ Location of ┃     ┃ ┃ ┃     │  │\n┃┃ ┃ ┃┗━━━━━━━━━━━━━━━━━━━┛ first Data  ┣ ─ ─ ╋ ╋ ╋ ─ ─\n┃┃ ┃ ┃┏━━━━━━━━━━━━━━━━━━━┓ Page, row   ┃     ┃ ┃ ┃        │\n┃┃ ┃ ┃┃Column \"B\" Metadata┃ counts,     ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┗━━━━━━━━━━━━━━━━━━━┛ sizes,      ┃     ┃ ┃ ┃        │\n┃┃ ┃ ┃┏━━━━━━━━━━━━━━━━━━━┓ min/max     ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┃Column \"C\" Metadata┃ values, etc ┃     ┃ ┃ ┃        │\n┃┃ ┃ ┃┗━━━━━━━━━━━━━━━━━━━┛             ┃     ┃ ┃ ┃\n┃┃ ┃ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛     ┃ ┃ ┃        │\n┃┃ ┃ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓     ┃ ┃ ┃\n┃┃ ┃ ┃Row Group 2 Metadata              ┃     ┃ ┃ ┃        │\n┃┃ ┃ ┃┏━━━━━━━━━━━━━━━━━━━┓ Location of ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┃Column \"A\" Metadata┃ first Data  ┃     ┃ ┃ ┃        │\n┃┃ ┃ ┃┗━━━━━━━━━━━━━━━━━━━┛ Page, row   ┣ ─ ─ ╋ ╋ ╋ ─ ─ ─ ─\n┃┃ ┃ ┃┏━━━━━━━━━━━━━━━━━━━┓ counts,     ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┃Column \"B\" Metadata┃ sizes,      ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┗━━━━━━━━━━━━━━━━━━━┛ min/max     ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┏━━━━━━━━━━━━━━━━━━━┓ values, etc ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┃Column \"C\" Metadata┃             ┃     ┃ ┃ ┃\n┃┃ ┃ ┃┗━━━━━━━━━━━━━━━━━━━┛             ┃     ┃ ┃ ┃\n┃┃ ┃ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛     ┃ ┃ ┃\n┃┃ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ ┃ ┃\n┃┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n```\n\n----------------------------------------\n\nTITLE: Arrow Map Type Representation\nDESCRIPTION: This snippet illustrates the internal representation of an Arrow Map<String, Int32> type, showing its structure as a List of Structs with separate arrays for keys and values.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-08-16-0.6.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMap<String, Int32> = List<Struct<keys: String, values: Int32>>\n  is_valid: [true, true]\n  offsets: [0, 3, 4]\n  values: Struct<keys: String, values: Int32>\n    children:\n      - keys: String\n          is_valid: [true, true, true, true]\n          offsets: [0, 1, 3, 5, 9]\n          data: abbccdddd\n      - values: Int32\n          is_valid: [true, true, true, true]\n          data: [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Record-Oriented Data Format in Python\nDESCRIPTION: Example of record-oriented data format using newline-delimited JSON (NDJSON) to store multiple records with varying fields.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-05-arrow-parquet-encoding-part-1.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\"Column1\": 1, \"Column2\": 2}\n{\"Column1\": 3, \"Column2\": 4, \"Column3\": 5}\n{\"Column1\": 5, \"Column2\": 4, \"Column3\": 5}\n```\n\n----------------------------------------\n\nTITLE: Converting R Vectors to Arrow Arrays using nanoarrow R Package\nDESCRIPTION: This R code snippet demonstrates how to use the nanoarrow R package to convert an R integer vector to a nanoarrow array. It shows the installation of the package from GitHub and displays the structure of the resulting Arrow array.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-03-01-nanoarrow-0.1.0-release.md#2025-04-09_snippet_3\n\nLANGUAGE: r\nCODE:\n```\n# install.packages(\"remotes\")\nremotes::install_github(\"apache/arrow-nanoarrow/r\", build = FALSE)\nlibrary(nanoarrow)\n\nas_nanoarrow_array(1:5)\n#> <nanoarrow_array int32[5]>\n#>  $ length    : int 5\n#>  $ null_count: int 0\n#>  $ offset    : int 0\n#>  $ buffers   :List of 2\n#>   ..$ :<nanoarrow_buffer_validity[0 b] at 0x0>\n#>   ..$ :<nanoarrow_buffer_data_int32[20 b] at 0x135d13c28>\n#>  $ dictionary: NULL\n#>  $ children  : list()\n```\n\n----------------------------------------\n\nTITLE: Displaying CArrayView representation in Python\nDESCRIPTION: Python code demonstrating how to use nanoarrow to print a detailed view of an Arrow array's contents, including buffer information.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-29-nanoarrow-0.4.0-release.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nna.c_array_view(pa.array([\"one\", \"two\", \"three\", None]))\n```\n\n----------------------------------------\n\nTITLE: Using DLPack/CUDA support with nanoarrow in Python\nDESCRIPTION: This Python code demonstrates how to use DLPack/CUDA support with nanoarrow, creating and manipulating device arrays.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport nanoarrow as na\nfrom nanoarrow import device\nimport cupy as cp\n\ndevice.c_device_array(cp.array([1, 2, 3]))\n#> <nanoarrow.device.CDeviceArray>\n#> - device_type: CUDA <2>\n#> - device_id: 0\n#> - array: <nanoarrow.c_array.CArray int64>\n#>   - length: 3\n#>   - offset: 0\n#>   - null_count: 0\n#>   - buffers: (0, 133980798058496)\n#>   - dictionary: NULL\n#>   - children[0]:\n\ndarray = device.c_device_array(cp.array([1, 2, 3]))\ncp.from_dlpack(darray.array.view().buffer(1))\n#> array([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Using Arrow GPU (CUDA) Extension Library in C++\nDESCRIPTION: This snippet demonstrates how to use the new Arrow GPU (CUDA) extension library in C++. It shows writing a record batch from CPU memory to GPU device memory and reading it back as a device-side record batch.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-09-19-0.7.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n#include <arrow/api.h>\n#include <arrow/gpu/cuda_api.h>\n\nusing namespace arrow;\n\ngpu::CudaDeviceManager* manager;\nstd::shared_ptr<gpu::CudaContext> context;\n\ngpu::CudaDeviceManager::GetInstance(&manager)\nmanager_->GetContext(kGpuNumber, &context);\n\nstd::shared_ptr<RecordBatch> batch = GetCpuData();\n\nstd::shared_ptr<gpu::CudaBuffer> device_serialized;\ngpu::SerializeRecordBatch(*batch, context_.get(), &device_serialized));\n\nstd::shared_ptr<RecordBatch> device_batch;\ngpu::ReadRecordBatch(batch->schema(), device_serialized,\n                     default_memory_pool(), &device_batch));\n\n// Now run some CUDA kernels on device_batch\n```\n\n----------------------------------------\n\nTITLE: Defining Parquet Schema for Nested Structures in Python\nDESCRIPTION: Demonstrates the Parquet schema representation for the nested JSON structure, including optional and required fields, lists, and groups.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-17-arrow-parquet-encoding-part-3.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessage schema {\n  optional group a (LIST) {\n    repeated group list {\n      optional int32 element;\n    }\n  }\n  required group b (LIST) {\n    repeated group list {\n      optional group element {\n        required int32 b1;\n        optional group b2 (LIST) {\n          repeated group list {\n            required int32 element;\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic nanoarrow Python Usage\nDESCRIPTION: Demonstrates core functionality of nanoarrow Python bindings including schema creation, array manipulation, and stream handling.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-05-27-nanoarrow-0.5.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nanoarrow as na\n\nna.int32()\n#> <Schema> int32\n\nna.Array([1, 2, 3], na.int32())\n#> nanoarrow.Array<int32>[3]\n#> 1\n#> 2\n#> 3\n\nurl = \"https://github.com/apache/arrow-experiments/raw/main/data/arrow-commits/arrow-commits.arrows\"\nna.ArrayStream.from_url(url)\n#> nanoarrow.ArrayStream<non-nullable struct<commit: string, time: timestamp('us', 'UTC'), files: int3...>\n```\n\n----------------------------------------\n\nTITLE: Defining Arrow Schema for Nested Structures in Python\nDESCRIPTION: Shows the Arrow schema representation for the nested JSON structure, including nullable and non-nullable fields, lists, and structs.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-17-arrow-parquet-encoding-part-3.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nField(name: \"a\", nullable: true, datatype: List(\n  Field(name: \"element\", nullable: true, datatype: Int32),\n)\nField(name: \"b\"), nullable: false, datatype: List(\n  Field(name: \"element\", nullable: true, datatype: Struct[\n    Field(name: \"b1\", nullable: false, datatype: Int32),\n    Field(name: \"b2\", nullable: true, datatype: List(\n      Field(name: \"element\", nullable: false, datatype: Int32)\n    ))\n  ])\n))\n```\n\n----------------------------------------\n\nTITLE: Defining Comprehensive Arrow Schema with Annotations in Go\nDESCRIPTION: This code snippet defines a comprehensive Arrow schema for OTLP Traces, using annotations to specify optional fields and initial dictionary encodings. It demonstrates how to create a schema that can handle a wide range of possible data structures while allowing for dynamic optimization.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-06-26-our-journey-at-f5-with-apache-arrow-part-2.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  // Arrow schema for the OTLP Arrow Traces record (without attributes, links, and events).\n  TracesSchema = arrow.NewSchema([]arrow.Field{\n      // Nullabe:true means the field is optional, in this case of 16 bit unsigned integers\n      {Name: constants.ID, Type: arrow.PrimitiveTypes.Uint16, Nullable: true},\n      {Name: constants.Resource, Type: arrow.StructOf([]arrow.Field{\n        {Name: constants.ID, Type: arrow.PrimitiveTypes.Uint16, Nullable: true},\n        // --- Use dictionary with 8 bit integers initially ----\n        {Name: constants.SchemaUrl,Type: arrow.BinaryTypes.String,Metadata: schema.Metadata(schema.Dictionary8), Nullable: true},\n        {Name: constants.DroppedAttributesCount,Type: arrow.PrimitiveTypes.Uint32,Nullable: true},\n      }...), Nullable: true},\n      {Name: constants.Scope, Type: arrow.StructOf([]arrow.Field{\n          {Name: constants.ID, Type: arrow.PrimitiveTypes.Uint16, Metadata: acommon.Metadata(acommon.DeltaEncoding), Nullable: true},\n          // --- Use dictionary with 8 bit integers initially ----\n          {Name: constants.Name, Type: arrow.BinaryTypes.String, Metadata: acommon.Metadata(acommon.Dictionary8), Nullable: true},\n          {Name: constants.Version, Type: arrow.BinaryTypes.String, Metadata: acommon.Metadata(acommon.Dictionary8), Nullable: true},\n          {Name: constants.DroppedAttributesCount, Type: arrow.PrimitiveTypes.Uint32, Nullable: true},\n      }...), Nullable: true},\n      {Name: constants.SchemaUrl, Type: arrow.BinaryTypes.String, Metadata: schema.Metadata(schema.Dictionary8), Nullable: true},\n      {Name: constants.StartTimeUnixNano, Type: arrow.FixedWidthTypes.Timestamp_ns},\n      {Name: constants.DurationTimeUnixNano, Type: arrow.FixedWidthTypes.Duration_ms, Metadata: schema.Metadata(schema.Dictionary8)},\n      {Name: constants.TraceId, Type: &arrow.FixedSizeBinaryType{ByteWidth: 16}},\n      {Name: constants.SpanId, Type: &arrow.FixedSizeBinaryType{ByteWidth: 8}},\n      {Name: constants.TraceState, Type: arrow.BinaryTypes.String, Metadata: schema.Metadata(schema.Dictionary8), Nullable: true},\n      {Name: constants.ParentSpanId, Type: &arrow.FixedSizeBinaryType{ByteWidth: 8}, Nullable: true},\n      {Name: constants.Name, Type: arrow.BinaryTypes.String, Metadata: schema.Metadata(schema.Dictionary8)},\n      {Name: constants.KIND, Type: arrow.PrimitiveTypes.Int32, Metadata: schema.Metadata(schema.Dictionary8), Nullable: true},\n      {Name: constants.DroppedAttributesCount, Type: arrow.PrimitiveTypes.Uint32, Nullable: true},\n      {Name: constants.DroppedEventsCount, Type: arrow.PrimitiveTypes.Uint32, Nullable: true},\n      {Name: constants.DroppedLinksCount, Type: arrow.PrimitiveTypes.Uint32, Nullable: true},\n      {Name: constants.Status, Type: arrow.StructOf([]arrow.Field{\n        {Name: constants.StatusCode, Type: arrow.PrimitiveTypes.Int32, Metadata: schema.Metadata(schema.Dictionary8), Nullable: true},\n        {Name: constants.StatusMessage, Type: arrow.BinaryTypes.String, Metadata: schema.Metadata(schema.Dictionary8), Nullable: true},\n      }...), Nullable: true},\n    }, nil)\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing lexsort_to_indices with Comparator in Python\nDESCRIPTION: Provides a pseudocode implementation of lexsort_to_indices using a comparator function. This demonstrates how multi-column sorting can be implemented using dynamic dispatch and column-by-column comparison.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-11-07-multi-column-sorts-in-arrow-rust-part-1.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Takes a list of columns and returns the lexicographically\n# sorted order as a list of indices\ndef lexsort_to_indices(columns):\n  comparator = build_comparator(columns)\n\n  # Construct a list of integers from 0 to the number of rows\n  # and sort it according to the comparator\n  [0..columns.num_rows()].sort_by(comparator)\n\n# Build a function that given indexes (left_idx, right_idx)\n# returns the comparison of the sort keys at the left\n# and right indices respectively\ndef build_comparator(columns):\n  def comparator(left_idx, right_idx):\n    for column in columns:\n      # call a compare function which performs\n      # dynamic dispatch on type of left and right columns\n      ordering = compare(column, left_idx,right_idx)\n      if ordering != Equal {\n        return ordering\n      }\n    # All values equal\n    Equal\n  # Return comparator function\n  comparator\n\n  # compares the values in a single column at left_idx and right_idx\n  def compare(column, left_idx, right_idx):\n    # Choose comparison based on type of column (\"dynamic dispatch\")\n    if column.type == Int:\n     cmp(column[left_idx].as_int(), column[right_idx].as_int())\n    elif column.type == Float:\n     cmp(column[left_idx].as_float(), column[right_idx].as_float())\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using C++ API for Python Extensions\nDESCRIPTION: Demonstrates how to use the new C++ API to create Python wrapper objects from C++ extension code. This allows other Python libraries with C or C++ extensions to return Python objects wrapping underlying C++ objects.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-05-23-0.4.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"arrow/python/pyarrow.h\"\n\nif (!arrow::py::import_pyarrow()) {\n  // Error\n}\n\nstd::shared_ptr<arrow::RecordBatch> cpp_batch = GetData(...);\nPyObject* py_batch = arrow::py::wrap_batch(cpp_batch);\n```\n\n----------------------------------------\n\nTITLE: Scanning Dataset using Skyhook and Arrow C++\nDESCRIPTION: Example demonstrates how to configure and use SkyhookFileFormat with Apache Arrow to scan datasets stored in Ceph. The code shows setting up Ceph connection, creating a dataset with Hive partitioning, and applying filters to scan data efficiently.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-01-31-skyhook-bringing-computation-to-storage-with-apache-arrow.md#2025-04-09_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements. See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership. The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n#include <arrow/compute/api.h>\n#include <arrow/dataset/api.h>\n#include <arrow/filesystem/api.h>\n#include <arrow/table.h>\n#include <skyhook/client/file_skyhook.h>\n\n#include <cstdlib>\n#include <iostream>\n#include <memory>\n#include <string>\n\nnamespace cp = arrow::compute;\nnamespace ds = arrow::dataset;\nnamespace fs = arrow::fs;\n\n// Demonstrate reading a dataset via Skyhook.\narrow::Status ScanDataset() {\n  // Configure SkyhookFileFormat to connect to our Ceph cluster.\n  std::string ceph_config_path = \"/etc/ceph/ceph.conf\";\n  std::string ceph_data_pool = \"cephfs_data\";\n  std::string ceph_user_name = \"client.admin\";\n  std::string ceph_cluster_name = \"ceph\";\n  std::string ceph_cls_name = \"skyhook\";\n  std::shared_ptr<skyhook::RadosConnCtx> rados_ctx =\n      std::make_shared<skyhook::RadosConnCtx>(ceph_config_path, ceph_data_pool,\n                                              ceph_user_name, ceph_cluster_name,\n                                              ceph_cls_name);\n  ARROW_ASSIGN_OR_RAISE(auto format,\n                        skyhook::SkyhookFileFormat::Make(rados_ctx, \"parquet\"));\n\n  // Create the filesystem.\n  std::string root;\n  ARROW_ASSIGN_OR_RAISE(auto fs, fs::FileSystemFromUri(\"file:///mnt/cephfs/nyc\", &root));\n\n  // Create our dataset.\n  fs::FileSelector selector;\n  selector.base_dir = root;\n  selector.recursive = true;\n\n  ds::FileSystemFactoryOptions options;\n  options.partitioning = std::make_shared<ds::HivePartitioning>(\n      arrow::schema({arrow::field(\"payment_type\", arrow::int32()),\n                     arrow::field(\"VendorID\", arrow::int32())}));\n  ARROW_ASSIGN_OR_RAISE(auto factory,\n                        ds::FileSystemDatasetFactory::Make(fs, std::move(selector),\n                                                           std::move(format), options));\n\n  ds::InspectOptions inspect_options;\n  ds::FinishOptions finish_options;\n  ARROW_ASSIGN_OR_RAISE(auto schema, factory->Inspect(inspect_options));\n  ARROW_ASSIGN_OR_RAISE(auto dataset, factory->Finish(finish_options));\n\n  // Scan the dataset.\n  auto filter = cp::greater(cp::field_ref(\"payment_type\"), cp::literal(2));\n  ARROW_ASSIGN_OR_RAISE(auto scanner_builder, dataset->NewScan());\n  ARROW_RETURN_NOT_OK(scanner_builder->Filter(filter));\n  ARROW_RETURN_NOT_OK(scanner_builder->UseThreads(true));\n  ARROW_ASSIGN_OR_RAISE(auto scanner, scanner_builder->Finish());\n\n  ARROW_ASSIGN_OR_RAISE(auto table, scanner->ToTable());\n\n  std::cout << \"Got \" << table->num_rows() << \" rows\" << std::endl;\n  return arrow::Status::OK();\n}\n\nint main(int, char**) {\n  auto status = ScanDataset();\n  if (!status.ok()) {\n    std::cerr << status.message() << std::endl;\n    return EXIT_FAILURE;\n  }\n  return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Fully Flattened Arrow Schema in Go\nDESCRIPTION: This snippet presents a fully flattened Arrow schema where all nested structures are eliminated. Field names are concatenated to maintain proper scoping, making it compatible with all components of the Arrow ecosystem.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-04-11-our-journey-at-f5-with-apache-arrow-part-1.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nSchema = arrow.NewSchema([]arrow.Field{\n  {Name: \"scope_name\", Type: uint16Dictionary},\n  {Name: \"scope_version\", Type: uint16Dictionary},\n  {Name: \"metrics_name\", Type: uint16Dictionary},\n  {Name: \"metrics_unit\", Type: uint8Dictionary},\n  {Name: \"metrics_timestamp\", Type: arrow.TIMESTAMP},\n  {Name: \"metrics_metric_type\", Type: arrow.UINT8},\n  {Name: \"metrics_data_point_value\", Type: arrow.FLOAT64},\n  {Name: \"metrics_data_point_is_monotonic\", Type: arrow.BOOL},\n}, nil)\n```\n\n----------------------------------------\n\nTITLE: Defining Flight SQL Request Messages in Protobuf\nDESCRIPTION: This snippet lists the various Protobuf message types defined by Flight SQL for different database operations, including metadata requests, queries, and prepared statements.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-02-16-introducing-arrow-flight-sql.md#2025-04-09_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nCommandGetCatalogs: list catalogs in a database.\nCommandGetCrossReference: list foreign key columns that reference a particular other table.\nCommandGetDbSchemas: list schemas in a catalog.\nCommandGetExportedKeys: list foreign keys referencing a table.\nCommandGetImportedKeys: list foreign keys of a table.\nCommandGetPrimaryKeys: list primary keys of a table.\nCommandGetSqlInfo: get information about the database itself and its supported SQL dialect.\nCommandGetTables: list tables in a catalog/schema.\nCommandGetTableTypes: list table types supported (e.g. table, view, system table).\n\nCommandStatementQuery: execute a one-off SQL query.\nCommandStatementUpdate: execute a one-off SQL update query.\n\nActionClosePreparedStatementRequest: close a prepared statement.\nActionCreatePreparedStatementRequest: create a new prepared statement.\nCommandPreparedStatementQuery: execute a prepared statement.\nCommandPreparedStatementUpdate: execute a prepared statement that updates data.\n```\n\n----------------------------------------\n\nTITLE: Incrementally Building a Vector with jemalloc APIs in C\nDESCRIPTION: Shows how to incrementally build a vector using jemalloc's special APIs, which can potentially avoid explicit memory copying and simplify the code. This approach uses mallocx, rallocx, and dallocx functions with alignment specifications.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2018-07-20-jemalloc.md#2025-04-09_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nsize_t size = 128 * 1024;\nvoid* ptr = mallocx(size, MALLOCX_ALIGN(64));\nfor (int i = 0; i < 10; i++) {\n  size *= 2;\n  ptr = rallocx(ptr, size, MALLOCX_ALIGN(64));\n}\ndallocx(ptr, MALLOCX_ALIGN(64));\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Hierarchical Schema in Go with Apache Arrow\nDESCRIPTION: Demonstrates creation of a complex Arrow schema with nested structures, dictionaries and unions. Shows how to represent resource metrics with scopes, metrics and data points using Go Arrow API. Uses dictionary types for string fields and dense unions for metric types.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-04-11-our-journey-at-f5-with-apache-arrow-part-1.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/apache/arrow/go/v11/arrow\"\n\nconst (\n  GaugeMetricCode arrow.UnionTypeCode = 0\n  SumMetricCode   arrow.UnionTypeCode = 1\n)\n\nvar (\n  // uint8Dictionary represent a Dictionary<Uint8, String>\n  uint8Dictionary = &arrow.DictionaryType{\n     IndexType: arrow.PrimitiveTypes.Uint8,\n     ValueType: arrow.BinaryTypes.String,\n  }\n  // uint16Dictionary represent a Dictionary<Uint16, String>\n  uint16Dictionary = &arrow.DictionaryType{\n     IndexType: arrow.PrimitiveTypes.Uint16,\n     ValueType: arrow.BinaryTypes.String,\n  }\n\n  Schema = arrow.NewSchema([]arrow.Field{\n     {Name: \"resource_metrics\", Type: arrow.ListOf(arrow.StructOf([]arrow.Field{\n        {Name: \"scope\", Type: arrow.StructOf([]arrow.Field{\n           // Name and Version are declared as dictionaries (Dictionary<Uint16, String>)).\n           {Name: \"name\", Type: uint16Dictionary},\n           {Name: \"version\", Type: uint16Dictionary},\n        }...))},\n        {Name: \"metrics\", Type: arrow.ListOf(arrow.StructOf([]arrow.Field{\n           {Name: \"name\", Type: uint16Dictionary},\n           {Name: \"unit\", Type: uint8Dictionary},\n           {Name: \"timestamp\", Type: arrow.TIMESTAMP},\n           {Name: \"metric_type\", Type: arrow.UINT8},\n           {Name: \"data_point\", Type: arrow.ListOf(arrow.StructOf([]arrow.Field{\n              {Name: \"metric\", Type: arrow.DenseUnionOf(\n                 []arrow.Field{\n                    {Name: \"gauge\", Type: arrow.StructOf([]arrow.Field{\n                       {Name: \"data_point\", Type: arrow.FLOAT64},\n                    }...))},\n                    {Name: \"sum\", Type: arrow.StructOf([]arrow.Field{\n                       {Name: \"data_point\", Type: arrow.FLOAT64},\n                       {Name: \"is_monotonic\", Type: arrow.BOOL},\n                    }...))},\n                 },\n                 []arrow.UnionTypeCode{GaugeMetricCode, SumMetricCode},\n              )},\n           }...))},\n        }...))},\n     }...))},\n  }, nil)\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dictionary Encoding in Python\nDESCRIPTION: This snippet illustrates how dictionary encoding works in Apache Arrow, showing the original string data and its dictionary-encoded representation with indices and a dictionary.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-07-24-0.5.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndata (string): ['foo', 'bar', 'foo', 'bar']\n\nindices (int8): [0, 1, 0, 1]\ndictionary (string): ['foo', 'bar']\n```\n\n----------------------------------------\n\nTITLE: Dataset Field Expression in Python\nDESCRIPTION: Example of using arithmetic operations in Dataset expressions for scanning data, showing how to perform calculations between fields.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-04-26-4.0.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nds.field('a') / ds.field('b')\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Data Transformation Operations with Arrow\nDESCRIPTION: Microbenchmark comparing performance of data transformation operations between Spark and R with and without Arrow optimization.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-01-25-r-spark-improvements.md#2025-04-09_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nmicrobenchmark::microbenchmark(\n  setup = library(arrow),\n  arrow_on = {\n    sample_n(sparklyr_df, 10^5) %>% spark_apply(~ .x / 2) %>% count()\n  },\n  arrow_off = {\n    if (\"arrow\" %in% .packages()) detach(\"package:arrow\")\n    sample_n(sparklyr_df, 10^5) %>% spark_apply(~ .x / 2) %>% count()\n  },\n  times = 10\n) %T>% print() %>% ggplot2::autoplot()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating lexsort_to_indices Function in Python\nDESCRIPTION: Shows example usage of a lexsort_to_indices function that takes multiple columns as input and returns sorted indices. This demonstrates how multi-column sorting works on sample data.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-11-07-multi-column-sorts-in-arrow-rust-part-1.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n> lexsort_to_indices([\n    [\"MA\", \"MA\", \"CA\", \"WA\", \"WA\", \"CA\", \"MA\"]\n  ])\n\n[2, 5, 0, 1, 6, 3, 4]\n\n> lexsort_to_indices([\n    [\"MA\", \"MA\", \"CA\", \"WA\", \"WA\",   \"CA\", \"MA\"],\n    [10.10, 8.44, 3.25, 6.00, 132.50, 9.33, 1.30]\n  ])\n\n[2, 5, 6, 1, 0, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Using pyarrow for Serialization in Python\nDESCRIPTION: This snippet demonstrates how to use pyarrow directly for serializing and deserializing Python objects, including nested structures and NumPy arrays.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-10-15-fast-python-serialization-with-ray-and-arrow.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx = [(1, 2), 'hello', 3, 4, np.array([5.0, 6.0])]\nserialized_x = pyarrow.serialize(x).to_buffer()\ndeserialized_x = pyarrow.deserialize(serialized_x)\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow via Conda\nDESCRIPTION: Commands to install various Arrow components using conda package manager from conda-forge channel.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nconda install libarrow-all={{site.data.versions['current'].pinned_number}} -c conda-forge\nconda install arrow-c-glib={{site.data.versions['current'].pinned_number}} -c conda-forge\nconda install pyarrow={{site.data.versions['current'].pinned_number}} -c conda-forge\nconda install r-arrow={{site.data.versions['current'].pinned_number}} -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Representing Python Dictionary Data in Arrow Map Type\nDESCRIPTION: This snippet demonstrates how Python dictionary data can be represented in the new Arrow Map<String, Int32> type. It shows the logical structure of the Map type as a List of Structs.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-08-16-0.6.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndata = [{'a': 1, 'bb': 2, 'cc': 3}, {'dddd': 4}]\n```\n\n----------------------------------------\n\nTITLE: DuckDB Streaming Example\nDESCRIPTION: Demonstrates streaming data processing with DuckDB and Arrow using Record Batch Reader for memory-efficient processing of large datasets.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-12-3-arrow-duckdb.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# DuckDB\n# Open dataset using year,month folder partition\nnyc = ds.dataset('nyc-taxi/', partitioning=[\"year\", \"month\"])\n\n# Get database connection\ncon = duckdb.connect()\n\n# Run query that selects part of the data\nquery = con.execute(\"SELECT total_amount, passenger_count,year FROM nyc where total_amount > 100 and year > 2014\")\n\n# Create Record Batch Reader from Query Result.\n# \"fetch_record_batch()\" also accepts an extra parameter related to the desired produced chunk size.\nrecord_batch_reader = query.fetch_record_batch()\n\n# Retrieve all batch chunks\nchunk = record_batch_reader.read_next_batch()\nwhile len(chunk) > 0:\n    chunk = record_batch_reader.read_next_batch()\n```\n\n----------------------------------------\n\nTITLE: Filtering and Summarizing Flight Data with Arrow in R\nDESCRIPTION: Demonstrates data manipulation using Arrow's query engine with dplyr syntax. The code filters flight data, performs group-by operations, and calculates summary statistics.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-11-05-r-6.0.0.md#2025-04-09_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nflights_filtered %>%\n  to_arrow() %>%\n  # now summarise to get mean/min\n  group_by(carrier, origin, dest) %>%\n  summarise(\n    arr_delay_mean = mean(arr_delay),\n    arr_delay_min = min(arr_delay),\n    num_flights = n()\n  ) %>%\n  filter(dest %in% c(\"ORD\", \"MDW\")) %>%\n  arrange(desc(arr_delay_mean)) %>%\n  collect()\n```\n\n----------------------------------------\n\nTITLE: Random String Generation Function\nDESCRIPTION: Function to generate test data with controlled unique value ratios using pandas testing utilities.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-02-05-python-string-memory-0.12.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pandas.util.testing import rands\ndef generate_strings(length, nunique, string_length=10):\n    unique_values = [rands(string_length) for i in range(nunique)]\n    values = unique_values * (length // nunique)\n    return values\n```\n\n----------------------------------------\n\nTITLE: Creating struct Schema in Python\nDESCRIPTION: Python code demonstrating how to create a nanoarrow Schema representing a struct with an int32 field.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-29-nanoarrow-0.4.0-release.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nna.struct({\"col1\": na.int32()})\n```\n\n----------------------------------------\n\nTITLE: Querying Parquet Metadata with DataFusion SQL\nDESCRIPTION: Example SQL query demonstrating the use of the parquet_metadata table function in DataFusion CLI to inspect Parquet file structure. The query selects metadata fields like path_in_schema, row group details, and statistics from a Parquet file with filtering and limiting operations.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-19-datafusion-34.0.0.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n      path_in_schema, row_group_id, row_group_num_rows, stats_min, stats_max, total_compressed_size \nFROM \n      parquet_metadata('hits.parquet')\nWHERE path_in_schema = '\"WatchID\"' \nLIMIT 3;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into External Table in SQL\nDESCRIPTION: Demonstrates creating an external table and inserting data into it using SQL commands in DataFusion.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-19-datafusion-34.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTERNAL TABLE awesome_table(x INT) STORED AS PARQUET LOCATION '/tmp/my_awesome_table';\n\nINSERT INTO awesome_table SELECT x * 10 FROM my_source_table;\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow with Conan\nDESCRIPTION: Example conanfile.txt configuration for installing Apache Arrow C++ using the Conan package manager.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[requires]\narrow/{{site.data.versions['current'].number}}\n```\n\n----------------------------------------\n\nTITLE: Incrementally Building a Vector with Standard POSIX APIs in C\nDESCRIPTION: Demonstrates how to incrementally build a vector using memory expansion with a factor of 2 using standard POSIX APIs. This approach requires explicit memory copying on each expansion.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2018-07-20-jemalloc.md#2025-04-09_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nsize_t size = 128 * 1024;\nvoid* ptr = aligned_alloc(64, size);\nfor (int i = 0; i < 10; i++) {\n  size_t new_size = size * 2;\n  void* ptr2 = aligned_alloc(64, new_size);\n  memcpy(ptr2, ptr, size);\n  free(ptr);\n  ptr = ptr2;\n  size = new_size;\n}\nfree(ptr);\n```\n\n----------------------------------------\n\nTITLE: Accessing Struct Fields in SQL\nDESCRIPTION: Shows how to access fields of a struct column in a SQL query in DataFusion.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-19-datafusion-34.0.0.md#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT column1, column1['c0'] FROM  my_table;\n```\n\n----------------------------------------\n\nTITLE: Example of Dictionary Encoding String Data in Arrow\nDESCRIPTION: Demonstrates how string data is represented in dictionary-encoded form, with a dictionary array containing unique values and an indices array pointing to those values.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-09-03-faster-strings-cpp-parquet.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n['apple', 'orange', 'apple', NULL, 'orange', 'orange']\n```\n\nLANGUAGE: text\nCODE:\n```\ndictionary: ['apple', 'orange']\nindices: [0, 1, 0, NULL, 1, 1]\n```\n\n----------------------------------------\n\nTITLE: Copying Query Results to File in SQL\nDESCRIPTION: Shows how to use the COPY command to write query results to a JSON file in DataFusion.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-19-datafusion-34.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCOPY (SELECT x + 1 FROM my_source_table) TO '/tmp/output.json';\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow with MSYS2 for GCC UCRT x86_64\nDESCRIPTION: Installs Apache Arrow C++ and GLib packages for MSYS2 using pacman package manager with GCC UCRT x86_64 configuration.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npacman -S --noconfirm mingw-w64-ucrt-x86_64-arrow\n```\n\n----------------------------------------\n\nTITLE: Complex Metric Data Model in Protobuf\nDESCRIPTION: This Protobuf schema defines a complex metric data model with recursive attribute definitions. It demonstrates the challenges of representing such models in Arrow schemas, which don't support recursive definitions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-04-11-our-journey-at-f5-with-apache-arrow-part-1.md#2025-04-09_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\n\nmessage Metric {\n message DataPoint {\n   repeated Attribute attributes = 1;\n   oneof value {\n     int64 int_value = 2;\n     double double_value = 3;\n   }\n }\n\n\n enum MetricType {\n   UNSPECIFIED = 0;\n   GAUGE = 1;\n   SUM = 2;\n }\n\n\n message Gauge {\n   DataPoint data_point = 1;\n }\n\n\n message Sum {\n   DataPoint data_point = 1;\n   bool is_monotonic = 2;\n }\n\n\n string name = 1;\n int64 timestamp = 2;\n string unit = 3;\n MetricType type = 4;\n oneof metric {\n   Gauge gauge = 5;\n   Sum sum = 6;\n }\n}\n\n\nmessage Attribute {\n string name = 1;\n AnyValue value = 2;\n}\n\n\n// Recursive definition of AnyValue. AnyValue can be a primitive value, a list\n// of AnyValues, or a list of key-value pairs where the key is a string and\n// the value is an AnyValue.\nmessage AnyValue {\n message ArrayValue {\n   repeated AnyValue values = 1;\n }\n message KeyValueList {\n   message KeyValue {\n     string key = 1;\n     AnyValue value = 2;\n   }\n   repeated KeyValue values = 1;\n }\n\n\n oneof value {\n   int64 int_value = 1;\n   double double_value = 2;\n   string string_value = 3;\n   ArrayValue list_value = 4;\n   KeyValueList kvlist_value = 5;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Document Structure Example\nDESCRIPTION: Example of three JSON documents showing nested data structures with nullable and non-nullable fields\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-08-arrow-parquet-encoding-part-2.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"a\": 1,\n  \"b\": {\n    \"b1\": 1,\n    \"b2\": 3\n   },\n  \"d\": {\n   \"d1\":  1\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"a\": 2,\n  \"b\": {\n    \"b2\": 4\n  },\n  \"c\": {\n    \"c1\": 6\n  },\n  \"d\": {\n    \"d1\": 2,\n    \"d2\": 1\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"b\": {\n    \"b1\": 5,\n    \"b2\": 6\n  },\n  \"c\": {\n    \"c1\": 7\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Integer Array Element-wise in C using nanoarrow\nDESCRIPTION: This C function demonstrates how to create an Arrow array of int32 values using nanoarrow's element-wise building API. It initializes an array with int32 type, appends three integer values (1, 2, 3), and creates a corresponding schema.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-03-01-nanoarrow-0.1.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include \"nanoarrow.h\"\n\nint make_simple_array(struct ArrowArray* array_out, struct ArrowSchema* schema_out) {\n  struct ArrowError error;\n  array_out->release = NULL;\n  schema_out->release = NULL;\n\n  NANOARROW_RETURN_NOT_OK(ArrowArrayInitFromType(array_out, NANOARROW_TYPE_INT32));\n\n  NANOARROW_RETURN_NOT_OK(ArrowArrayStartAppending(array_out));\n  NANOARROW_RETURN_NOT_OK(ArrowArrayAppendInt(array_out, 1));\n  NANOARROW_RETURN_NOT_OK(ArrowArrayAppendInt(array_out, 2));\n  NANOARROW_RETURN_NOT_OK(ArrowArrayAppendInt(array_out, 3));\n  NANOARROW_RETURN_NOT_OK(ArrowArrayFinishBuilding(array_out, &error));\n\n  NANOARROW_RETURN_NOT_OK(ArrowSchemaInitFromType(schema_out, NANOARROW_TYPE_INT32));\n\n  return NANOARROW_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow with MSYS2 for GCC x86_64\nDESCRIPTION: Installs Apache Arrow C++ and GLib packages for MSYS2 using pacman package manager with GCC x86_64 configuration.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npacman -S --noconfirm mingw-w64-x86_64-arrow\n```\n\n----------------------------------------\n\nTITLE: Denormalizing Arrow Schema in Go to Remove List Types\nDESCRIPTION: This snippet demonstrates how to denormalize an Arrow schema by eliminating List types and duplicating data. It uses nested StructOf fields to represent the hierarchy of resource metrics, scopes, and data points.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-04-11-our-journey-at-f5-with-apache-arrow-part-1.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nSchema = arrow.NewSchema([]arrow.Field{\n  {Name: \"resource_metrics\", Type: arrow.StructOf([]arrow.Field{\n     {Name: \"scope\", Type: arrow.StructOf([]arrow.Field{\n        // Name and Version are declared as dictionaries (Dictionary<Uint16, String>)).\n        {Name: \"name\", Type: uint16Dictionary},\n        {Name: \"version\", Type: uint16Dictionary},\n     }...)},\n     {Name: \"metrics\", Type: arrow.StructOf([]arrow.Field{\n        {Name: \"name\", Type: uint16Dictionary},\n        {Name: \"unit\", Type: uint8Dictionary},\n        {Name: \"timestamp\", Type: arrow.TIMESTAMP},\n        {Name: \"metric_type\", Type: arrow.UINT8},\n        {Name: \"data_point\", Type: arrow.StructOf([]arrow.Field{\n           {Name: \"metric\", Type: arrow.DenseUnionOf(\n              []arrow.Field{\n                 {Name: \"gauge\", Type: arrow.StructOf([]arrow.Field{\n                    {Name: \"value\", Type: arrow.FLOAT64},\n                 }...)},\n                 {Name: \"sum\", Type: arrow.StructOf([]arrow.Field{\n                    {Name: \"value\", Type: arrow.FLOAT64},\n                    {Name: \"is_monotonic\", Type: arrow.BOOL},\n                 }...)},\n              },\n              []arrow.UnionTypeCode{GaugeMetricCode, SumMetricCode},\n           )},\n        }...)},\n     }...)},\n  }...)},\n}, nil)\n```\n\n----------------------------------------\n\nTITLE: JSON Document Examples with List Fields in Python\nDESCRIPTION: Examples of JSON documents containing nullable list fields to demonstrate different list scenarios including single element, null, empty, and mixed null/non-null elements.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-08-arrow-parquet-encoding-part-2.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"a\": [1],\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"a\": []\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"a\": [null, 2],\n}\n```\n\n----------------------------------------\n\nTITLE: DuckDB Filter Pushdown Example\nDESCRIPTION: Shows filter pushdown optimization in DuckDB when querying Parquet files through Arrow with multiple filter conditions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-12-3-arrow-duckdb.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# DuckDB\nlineitem = pq.read_table('lineitemsf1.snappy.parquet')\n\n# Get database connection\ncon = duckdb.connect()\n\n# Transforms Query Result from DuckDB to Arrow Table\ncon.execute(\"\"\"SELECT sum(l_extendedprice * l_discount) AS revenue\n        FROM\n            lineitem\n        WHERE\n            l_shipdate >= CAST('1994-01-01' AS date)\n            AND l_shipdate < CAST('1995-01-01' AS date)\n            AND l_discount BETWEEN 0.05\n            AND 0.07\n            AND l_quantity < 24; \"\"\").fetch_arrow_table()\n```\n\n----------------------------------------\n\nTITLE: Timestamp Interval Arithmetic Query in DataFusion SQL\nDESCRIPTION: Demonstrates DataFusion's support for timestamp and interval arithmetic operations, showing how to add a month interval to the current timestamp.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-06-24-datafusion-25.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT now() + '1 month' FROM my_table;\n```\n\n----------------------------------------\n\nTITLE: Flattening Arrow Schema in Go to Remove Union Types\nDESCRIPTION: This snippet shows how to further flatten the Arrow schema by eliminating union types. It merges the union variants into a single structure, simplifying the schema for pipelines that don't support union types.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-04-11-our-journey-at-f5-with-apache-arrow-part-1.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nSchema = arrow.NewSchema([]arrow.Field{\n  {Name: \"resource_metrics\", Type: arrow.StructOf([]arrow.Field{\n     {Name: \"scope\", Type: arrow.StructOf([]arrow.Field{\n        // Name and Version are declared as dictionaries (Dictionary<Uint16, String>)).\n        {Name: \"name\", Type: uint16Dictionary},\n        {Name: \"version\", Type: uint16Dictionary},\n     }...)},\n     {Name: \"metrics\", Type: arrow.StructOf([]arrow.Field{\n        {Name: \"name\", Type: uint16Dictionary},\n        {Name: \"unit\", Type: uint8Dictionary},\n        {Name: \"timestamp\", Type: arrow.TIMESTAMP},\n        {Name: \"metric_type\", Type: arrow.UINT8},\n        {Name: \"data_point\", Type: arrow.StructOf([]arrow.Field{\n           {Name: \"value\", Type: arrow.FLOAT64},\n           {Name: \"is_monotonic\", Type: arrow.BOOL},\n        }...)},\n     }...)},\n  }...)},\n}, nil)\n```\n\n----------------------------------------\n\nTITLE: PyArrow Integration Example\nDESCRIPTION: Demonstrates interoperability between nanoarrow and pyarrow objects using the Arrow PyCapsule interface.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-05-27-nanoarrow-0.5.0-release.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\n\npa.field(na.int32())\n#> pyarrow.Field<: int32>\n\nna.Schema(pa.string())\n#> <Schema> string\n\npa.array(na.Array([4, 5, 6], na.int32()))\n#> <pyarrow.lib.Int32Array object at 0x11b552500>\n#> [\n#>   4,\n#>   5,\n#>   6\n#> ]\n\nna.Array(pa.array([10, 11, 12]))\n#> nanoarrow.Array<int64>[3]\n#> 10\n#> 11\n#> 12\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexicographical Sort Using Byte Array Comparison in Python\nDESCRIPTION: A simplified implementation of lexicographical sorting that converts column data into byte array representations for efficient comparison. This approach eliminates the need for type-specific comparisons and leverages hardware-optimized memory comparisons.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-11-07-multi-column-sorts-in-arrow-rust-part-1.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef lexsort_to_indices(columns):\n  rows = convert_to_rows(columns)\n  [0..columns.num_rows()].sort_by(lambda l, r: cmp(rows[l], rows[r]))\n```\n\n----------------------------------------\n\nTITLE: Global CMake Dependency Configuration\nDESCRIPTION: Global configuration option for Arrow dependency sources in CMake. Sets the default behavior for all dependencies when not specified individually.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2020-07-27-cpp-build-simplification.md#2025-04-09_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nARROW_DEPENDENCY_SOURCE = AUTO\n```\n\n----------------------------------------\n\nTITLE: C++ Range/View Helper Usage\nDESCRIPTION: Demonstrates the new C++ range/view helpers for simplified interaction with nanoarrow streams and arrays.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-05-27-nanoarrow-0.5.0-release.md#2025-04-09_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gtest/gtest.h>\n#include <gmock/gmock-matchers.h>\n#include <nanoarrow/nanoarrow_gtest_util.hpp>\n#include <nanoarrow/nanoarrow.hpp>\n\nnanoarrow::UniqueArrayStream array_stream;\n// ... populate array_stream\nnanoarrow::ViewArrayStream array_stream_view(array_stream.get());\n\nfor (ArrowArray& array : array_stream_view) {\n  EXPECT_THAT(nanoarrow::ViewArrayAs<int32_t>(&array), ElementsAre(1234));\n}\n\nEXPECT_EQ(array_stream_view.count(), 1);\nEXPECT_EQ(array_stream_view.code(), NANOARROW_OK);\nEXPECT_STREQ(array_stream_view.error()->message, \"\");\n```\n\n----------------------------------------\n\nTITLE: Displaying CSchema representation in Python\nDESCRIPTION: Python code demonstrating how to use nanoarrow to print a human-readable representation of a decimal128 Arrow schema.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-29-nanoarrow-0.4.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nanoarrow as na\nimport pyarrow as pa\nna.c_schema(pa.decimal128(10, 3))\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Profiling Function\nDESCRIPTION: Defines a helper function using memory_profiler to track process memory usage.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-02-05-python-string-memory-0.12.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport memory_profiler\ndef mem():\n    return memory_profiler.memory_usage()[0]\n```\n\n----------------------------------------\n\nTITLE: Measuring Python Object Memory Size\nDESCRIPTION: Uses sys.getsizeof to measure the memory footprint of empty bytes and unicode string objects.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-02-05-python-string-memory-0.12.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.getsizeof(val)\nsys.getsizeof(unicode_val)\n```\n\n----------------------------------------\n\nTITLE: CMake Dependency Configuration Options\nDESCRIPTION: Example of CMake dependency source configuration options available in Arrow builds. Options include SYSTEM (external dependencies), BUNDLED (built from source), AUTO (try SYSTEM, fallback to BUNDLED), and package manager specific options CONDA and BREW.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2020-07-27-cpp-build-simplification.md#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n${Library}_SOURCE = SYSTEM|BUNDLED|AUTO|CONDA|BREW\n```\n\n----------------------------------------\n\nTITLE: Displaying CArray representation in Python\nDESCRIPTION: Python code showing how to use nanoarrow to print a human-readable representation of an Arrow array containing strings.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-29-nanoarrow-0.4.0-release.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nna.c_array(pa.array([\"one\", \"two\", \"three\", None]))\n```\n\n----------------------------------------\n\nTITLE: Example Python Object for Arrow Serialization\nDESCRIPTION: This snippet provides an example of a Python object that combines different data types, including a tuple, string, integers, and a NumPy array, to illustrate how it would be represented in Arrow format.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-10-15-fast-python-serialization-with-ray-and-arrow.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[(1, 2), 'hello', 3, 4, np.array([5.0, 6.0])]\n```\n\n----------------------------------------\n\nTITLE: Handling C++ Move Semantics with Result Type\nDESCRIPTION: Example of an issue with move semantics in C++ where a move operation was incorrectly calling a copy constructor as described in ARROW-7225.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.16.0.md#2025-04-09_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n*std::move(Result<T>)\n```\n\n----------------------------------------\n\nTITLE: Configuring NanoArrow with CMake\nDESCRIPTION: Demonstrates how to declare NanoArrow as a dependency and link it to a target using CMake. Shows optional components that can be linked including IPC and device support.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# set(NANOARROW_DEVICE ON)\nfetchcontent_declare(nanoarrow\n                     URL \"https://www.apache.org/dyn/closer.lua?action=download&filename=arrow/nanoarrow-0.6.0/apache-arrow-0.6.0.tar.gz\")\nfetchcontent_makeavailable(nanoarrow)\n\nadd_executable(some_target ...)\ntarget_link_libraries(some_target\n                      PRIVATE\n                      nanoarrow::nanoarrow\n                      # If needed\n                      # nanoarrow::nanoarrow_ipc\n                      # nanoarrow::nanoarrow_device\n                      )\n```\n\n----------------------------------------\n\nTITLE: Creating int32 Schema in Python\nDESCRIPTION: Python code showing how to create a nanoarrow Schema representing an int32 data type.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-29-nanoarrow-0.4.0-release.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nna.int32()\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Data Copy Operations with Arrow\nDESCRIPTION: Microbenchmark comparing data copy performance between R and Spark with and without Arrow optimization.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-01-25-r-spark-improvements.md#2025-04-09_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nmicrobenchmark::microbenchmark(\n  setup = library(arrow),\n  arrow_on = {\n    sparklyr_df <<- copy_to(sc, data, overwrite = T)\n    count(sparklyr_df) %>% collect()\n  },\n  arrow_off = {\n    if (\"arrow\" %in% .packages()) detach(\"package:arrow\")\n    sparklyr_df <<- copy_to(sc, data, overwrite = T)\n    count(sparklyr_df) %>% collect()\n  },\n  times = 10\n) %T>% print() %>% ggplot2::autoplot()\n```\n\n----------------------------------------\n\nTITLE: Special Character Handling in String Literals\nDESCRIPTION: Example of string literals with escaped characters that need proper handling in various contexts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.16.0.md#2025-04-09_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nlibjvm.so\n```\n\n----------------------------------------\n\nTITLE: Parquet Schema Definition for List Column\nDESCRIPTION: Parquet schema definition showing how to define an optional list group containing optional integer elements.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-08-arrow-parquet-encoding-part-2.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessage schema {\n  optional group a (LIST) {\n    repeated group list {\n      optional int32 element;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RecordBatchReader Interface in C++\nDESCRIPTION: Defines an abstract stream reader interface called RecordBatchReader in C++. This interface allows for different implementations of Arrow streams, including the current contiguous streaming format.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-05-23-0.4.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass RecordBatchReader {\n public:\n  virtual std::shared_ptr<Schema> schema() const = 0;\n  virtual Status GetNextRecordBatch(std::shared_ptr<RecordBatch>* batch) = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Spark Connection and Test Data\nDESCRIPTION: Setup code to create a local Spark connection with 6GB memory and generate a test dataframe with 10M random numbers.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-01-25-r-spark-improvements.md#2025-04-09_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(sparklyr)\nlibrary(dplyr)\n\nsc <- spark_connect(master = \"local\", config = list(\"sparklyr.shell.driver-memory\" = \"6g\"))\ndata <- data.frame(y = runif(10^7, 0, 1))\n```\n\n----------------------------------------\n\nTITLE: Visualizing Group Distribution During Aggregation Phases\nDESCRIPTION: ASCII diagram illustrating how group values are distributed across cores during the two phases of aggregation. It shows the transformation from arbitrary group distribution in initial input streams to deterministic partitioning after the repartitioning step.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-05-datafusion_fast_grouping.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n    ┌─────┐    ┌─────┐\n    │  1  │    │  3  │\n    │  2  │    │  4  │   2. After Repartitioning: each\n    └─────┘    └─────┘   group key  appears in exactly\n    ┌─────┐    ┌─────┐   one partition\n    │  1  │    │  3  │\n    │  2  │    │  4  │\n    └─────┘    └─────┘\n\n─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─\n\n    ┌─────┐    ┌─────┐\n    │  2  │    │  2  │\n    │  1  │    │  2  │\n    │  3  │    │  3  │\n    │  4  │    │  1  │\n    └─────┘    └─────┘    1. Input Stream: groups\n      ...        ...      values are spread\n    ┌─────┐    ┌─────┐    arbitrarily over each input\n    │  1  │    │  4  │\n    │  4  │    │  3  │\n    │  1  │    │  1  │\n    │  4  │    │  3  │\n    │  3  │    │  2  │\n    │  2  │    │  2  │\n    │  2  │    └─────┘\n    └─────┘\n\n    Core A      Core B\n```\n\n----------------------------------------\n\nTITLE: Installing PyArrow with Conda\nDESCRIPTION: Command to install the Arrow Python library (PyArrow) on Windows from conda-forge channel.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-05-08-0.3-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconda install pyarrow -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Python Buffer Protocol Integration\nDESCRIPTION: Demonstration of PyArrow's buffer protocol integration showing conversion between Arrow buffers and Python memory views.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-05-08-0.3-release.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nIn [6]: import pyarrow as pa\n\nIn [7]: buf = pa.frombuffer(b'foobarbaz')\n\nIn [8]: buf\nOut[8]: <pyarrow._io.Buffer at 0x7f6c0a84b538>\n\nIn [9]: memoryview(buf)\nOut[9]: <memory at 0x7f6c0a8c5e88>\n\nIn [10]: buf.to_pybytes()\nOut[10]: b'foobarbaz'\n```\n\n----------------------------------------\n\nTITLE: Simplified Dynamic Arrow Schema in Go\nDESCRIPTION: This code snippet demonstrates a simplified Arrow schema that could be dynamically generated based on observed data. It includes only the fields that are actually in use and optimizes dictionary encodings for low-cardinality fields, showcasing the potential memory and performance benefits of the dynamic schema approach.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-06-26-our-journey-at-f5-with-apache-arrow-part-2.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  // Simplified schema definition generated by the Arrow Record encoder based on\n  // the data observed.\n  TracesSchema = arrow.NewSchema([]arrow.Field{\n    {Name: constants.ID, Type: arrow.PrimitiveTypes.Uint16, Nullable: true},\n    {Name: constants.StartTimeUnixNano, Type: arrow.FixedWidthTypes.Timestamp_ns},\n    {Name: constants.TraceId, Type: &arrow.FixedSizeBinaryType{ByteWidth: 16}},\n    {Name: constants.SpanId, Type: &arrow.FixedSizeBinaryType{ByteWidth: 8}},\n    {Name: constants.Name, Type: &arrow.DictionaryType {\n      IndexType: arrow.PrimitiveTypes.Uint8,\n      ValueType: arrow.BinaryTypes.String}},\n    {Name: constants.KIND, Type: &arrow.DictionaryType {\n      IndexType: arrow.PrimitiveTypes.Uint8,\n      ValueType: arrow.PrimitiveTypes.Int32,\n    }, Nullable: true},\n  }, nil)\n)\n```\n\n----------------------------------------\n\nTITLE: Order Preserving Dictionary Mapping Example\nDESCRIPTION: Demonstrates how dictionary values are mapped to byte arrays while preserving sort order. Shows the mapping of string values to corresponding byte representations.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-11-07-multi-column-sorts-in-arrow-rust-part-2.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n┌──────────┐                 ┌─────┐\n│  \"Bar\"   │ ───────────────▶│ 01  │\n└──────────┘                 └─────┘\n┌──────────┐                 ┌─────┬─────┐\n│\"Fabulous\"│ ───────────────▶│ 01  │ 02  │\n└──────────┘                 └─────┴─────┘\n┌──────────┐                 ┌─────┐\n│  \"Soup\"  │ ───────────────▶│ 05  │\n└──────────┘                 └─────┘\n┌──────────┐                 ┌─────┐\n│   \"ZZ\"   │ ───────────────▶│ 07  │\n└──────────┘                 └─────┘\n\n    Example Order Preserving Mapping\n```\n\n----------------------------------------\n\nTITLE: DataFusion 27.0.0 Hash Group Structure ASCII Diagram\nDESCRIPTION: ASCII diagram illustrating the structure of hash grouping in DataFusion 27.0.0, showing the relationship between hash table, group states, and accumulators.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-05-datafusion_fast_grouping.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n                           ┌──────────────────────────────────────┐\n                           │                                      │\n                           │                  ...                 │\n                           │ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ │\n                           │ ┃                                  ┃ │\n    ┌─────────┐            │ ┃ ┌──────────────────────────────┐ ┃ │\n    │         │            │ ┃ │group values: OwnedRow        │ ┃ │\n    │ ┌─────┐ │            │ ┃ └──────────────────────────────┘ ┃ │\n    │ │  5  │ │            │ ┃ ┌──────────────────────────────┐ ┃ │\n    │ ├─────┤ │            │ ┃ │Row accumulator:              │ ┃ │\n    │ │  9  │─┼────┐       │ ┃ │Vec<u8>                       │ ┃ │\n    │ ├─────┤ │    │       │ ┃ └──────────────────────────────┘ ┃ │\n    │ │ ... │ │    │       │ ┃ ┌──────────────────────┐         ┃ │\n    │ ├─────┤ │    │       │ ┃ │┌──────────────┐      │         ┃ │\n    │ │  1  │ │    │       │ ┃ ││Accumulator 1 │      │         ┃ │\n    │ ├─────┤ │    │       │ ┃ │└──────────────┘      │         ┃ │\n    │ │ ... │ │    │       │ ┃ │┌──────────────┐      │         ┃ │\n    │ └─────┘ │    │       │ ┃ ││Accumulator 2 │      │         ┃ │\n    │         │    │       │ ┃ │└──────────────┘      │         ┃ │\n    └─────────┘    │       │ ┃ │ Box<dyn Accumulator> │         ┃ │\n    Hash Table     │       │ ┃ └──────────────────────┘         ┃ │\n                   │       │ ┃ ┌─────────────────────────┐      ┃ │\n                   │       │ ┃ │scratch indices: Vec<u32>│      ┃ │\n                   │       │ ┃ └─────────────────────────┘      ┃ │\n                   │       │ ┃ GroupState                       ┃ │\n                   └─────▶ │ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ │\n                           │                                      │\n  Hash table tracks an     │                 ...                  │\n  index into group_states  │                                      │\n                           └──────────────────────────────────────┘\n                           group_states: Vec<GroupState>\n\n                           There is one GroupState PER GROUP\n```\n\n----------------------------------------\n\nTITLE: Illustrating Timeline of Parquet File Reading and Decoding Process\nDESCRIPTION: This ASCII diagram shows a timeline of fetching metadata and data blocks from multiple remote Parquet files, as well as the decoding process. It illustrates how multiple network requests are outstanding simultaneously to hide individual request latency.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-12-26-querying-parquet-with-millisecond-latency.md#2025-04-09_snippet_7\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n                           begin\n          metadata        read of   end read\n            read  ─ ─ ─ ┐   data    of data          │\n begin    complete         block     block\nread of                 │   │        │               │\nmetadata  ─ ─ ─ ┐                                       At any time, there are\n             │          │   │        │               │     multiple network\n             │  ▼       ▼   ▼        ▼                  requests outstanding to\n  file 1     │ ░░░░░░░░░░   ▒▒▒read▒▒▒   ▒▒▒read▒▒▒  │    hide the individual\n             │ ░░░read░░░   ▒▒▒data▒▒▒   ▒▒▒data▒▒▒        request latency\n             │ ░metadata░                         ▓▓decode▓▓\n             │ ░░░░░░░░░░                         ▓▓▓data▓▓▓\n             │                                       │\n             │\n             │ ░░░░░░░░░░  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒read▒▒▒▒│▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n   file 2    │ ░░░read░░░  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒data▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n             │ ░metadata░                            │              ▓▓▓▓▓decode▓▓▓▓▓▓\n             │ ░░░░░░░░░░                                           ▓▓▓▓▓▓data▓▓▓▓▓▓▓\n             │                                       │\n             │\n             │                                     ░░│░░░░░░░  ▒▒▒read▒▒▒  ▒▒▒▒read▒▒▒▒▒\n   file 3    │                                     ░░░read░░░  ▒▒▒data▒▒▒  ▒▒▒▒data▒▒▒▒▒      ...\n             │                                     ░m│tadata░            ▓▓decode▓▓\n             │                                     ░░░░░░░░░░            ▓▓▓data▓▓▓\n             └───────────────────────────────────────┼──────────────────────────────▶Time\n\n\n                                                     │\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Casting in Python with Apache Arrow\nDESCRIPTION: This snippet shows how to perform type casting in Python using Apache Arrow. It creates a boolean array and casts it to an integer array, showcasing the new type conversion functionality added in this release.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-09-19-0.7.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\n\narr = pa.array([True, False, None, True])\n\narr\n# Output:\n# <pyarrow.lib.BooleanArray object at 0x7ff6fb069b88>\n# [\n#   True,\n#   False,\n#   NA,\n#   True\n# ]\n\narr.cast(pa.int32())\n# Output:\n# <pyarrow.lib.Int32Array object at 0x7ff6fb0383b8>\n# [\n#   1,\n#   0,\n#   NA,\n#   1\n# ]\n```\n\n----------------------------------------\n\nTITLE: Row Format Encoding Example\nDESCRIPTION: Shows how different values including strings and NULL are encoded in the row format, using 0x00 as end-delimiter and specific byte patterns for null/non-null values.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-11-07-multi-column-sorts-in-arrow-rust-part-2.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n                          ┌─────┬─────┬─────┬─────┐\n   \"Fabulous\"             │ 01  │ 01  │ 02  │ 00  │\n                          └─────┴─────┴─────┴─────┘\n\n                          ┌─────┬─────┬─────┐\n   \"ZZ\"                   │ 01  │ 07  │ 00  │\n                          └─────┴─────┴─────┘\n\n                          ┌─────┐\n    NULL                  │ 00  │\n                          └─────┘\n\n     Input                  Row Format\n```\n\n----------------------------------------\n\nTITLE: Illustrating CloudQuery Plugin Architecture with gRPC Communication\nDESCRIPTION: A text diagram showing the high-level architecture of CloudQuery, illustrating how source plugins extract data from APIs and send it to destination plugins via gRPC, demonstrating the decoupled nature of the system.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-05-04-adopting-apache-arrow-at-cloudquery.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAPI ---> [Source Plugin]  ----->    [Destination Plugin]\n                          ----->    [Destination Plugin]\n                           gRPC\n```\n\n----------------------------------------\n\nTITLE: Visualizing Non-Nullable Primitive Column in Arrow\nDESCRIPTION: ASCII representation of how Arrow stores a non-nullable list of 32-bit signed integers contiguously in memory.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-05-arrow-parquet-encoding-part-1.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n┌─────┐\n│  1  │\n├─────┤\n│  2  │\n├─────┤\n│  3  │\n├─────┤\n│  4  │\n└─────┘\nValues\n```\n\n----------------------------------------\n\nTITLE: Using float16 and string_view types in R with nanoarrow\nDESCRIPTION: This R code shows how to use float16 and string_view types with nanoarrow arrays in R.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nlibrary(nanoarrow)\n\nas_nanoarrow_array(c(\"abc\", \"def\", NA), schema = na_string_view()) |>\n  convert_array()\n#> [1] \"abc\" \"def\" NA\nas_nanoarrow_array(c(1, 2, 3), schema = na_half_float()) |>\n  convert_array()\n#> [1] 1 2 3\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB and Arrow\nDESCRIPTION: Installation commands for DuckDB and Arrow in both Python and R environments.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-12-3-arrow-duckdb.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Python Install\npip install duckdb\npip install pyarrow\n```\n\nLANGUAGE: r\nCODE:\n```\n# R Install\ninstall.packages(\"duckdb\")\ninstall.packages(\"arrow\")\n```\n\n----------------------------------------\n\nTITLE: Illustrating Non-Nullable Primitive Column in Parquet\nDESCRIPTION: ASCII representation of how Parquet stores a non-nullable list of integers in encoded form within DataPages.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-05-arrow-parquet-encoding-part-1.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n┌─────┐\n│  1  │\n├─────┤\n|  2  │\n├─────┤\n│  3  │\n├─────┤\n│  4  │\n└─────┘\nValues\n```\n\n----------------------------------------\n\nTITLE: Adding nanoarrow as a CMake dependency with IPC support\nDESCRIPTION: This CMake snippet shows how to add nanoarrow as a dependency with IPC support enabled using FetchContent.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\n\n# If required:\n# set(NANOARROW_IPC ON)\n```\n\n----------------------------------------\n\nTITLE: Parquet Schema Definition\nDESCRIPTION: Parquet schema definition showing message structure with optional and required fields\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-08-arrow-parquet-encoding-part-2.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage schema {\n  optional int32 a;\n  required group b {\n    optional int32 b1;\n    required int32 b2;\n  }\n  optional group c {\n    required int32 c1;\n  }\n  optional group d {\n    required int32 d1;\n    optional int32 d2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Parquet RLE-Bitpacking Encoding\nDESCRIPTION: Shows how Parquet uses run-length encoding (RLE) and bit-packing to compress dictionary indices for further space efficiency.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-09-03-faster-strings-cpp-parquet.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'orange']\n```\n\nLANGUAGE: text\nCODE:\n```\n[rle-run=(6, 0),\n bit-packed-run=[1]]\n```\n\n----------------------------------------\n\nTITLE: Configuring NanoArrow Dependency with Meson\nDESCRIPTION: Demonstrates how to declare NanoArrow as a dependency in a Meson build configuration and link it to an executable target.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnanoarrow_dep = dependency('nanoarrow')\nexample_exec = executable('example_meson_minimal_app',\n                          'src/app.cc',\n                          dependencies: [nanoarrow_dep])\n```\n\n----------------------------------------\n\nTITLE: Arrow ListArray Visual Representation\nDESCRIPTION: ASCII diagram showing the internal representation of a ListArray in Arrow, including validity masks, offsets, and child arrays.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-08-arrow-parquet-encoding-part-2.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─\n                          ┌──────────────────┐ │\n│    ┌─────┐   ┌─────┐    │ ┌─────┐   ┌─────┐│\n     │  1  │   │  0  │    │ │  1  │   │  1  ││ │\n│    ├─────┤   ├─────┤    │ ├─────┤   ├─────┤│\n     │  0  │   │  1  │    │ │  0  │   │ ??  ││ │\n│    ├─────┤   ├─────┤    │ ├─────┤   ├─────┤│\n     │  1  │   │  1  │    │ │  1  │   │  2  ││ │\n│    ├─────┤   ├─────┤    │ └─────┘   └─────┘│\n     │  1  │   │  1  │    │ Validity   Values│ │\n│    └─────┘   ├─────┤    │                  │\n               │  3  │    │ child[0]         │ │\n│    Validity  └─────┘    │ PrimitiveArray   │\n                          │                  │ │\n│              Offsets    └──────────────────┘\n     \"a\"                                       │\n│    ListArray\n ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘\n```\n\n----------------------------------------\n\nTITLE: Parquet Repetition Levels Visual Representation\nDESCRIPTION: ASCII diagram showing how Parquet encodes list data using definition levels, repetition levels, and values.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-08-arrow-parquet-encoding-part-2.md#2025-04-09_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n┌─────────────────────────────────────┐\n│  ┌─────┐      ┌─────┐               │\n│  │  3  │      │  0  │               │\n│  ├─────┤      ├─────┤               │\n│  │  0  │      │  0  │               │\n│  ├─────┤      ├─────┤      ┌─────┐  │\n│  │  1  │      │  0  │      │  1  │  │\n│  ├─────┤      ├─────┤      ├─────┤  │\n│  │  2  │      │  0  │      │  2  │  │\n│  ├─────┤      ├─────┤      └─────┘  │\n│  │  3  │      │  1  │               │\n│  └─────┘      └─────┘               │\n│                                     │\n│ Definition  Repetition      Values  │\n│   Levels      Levels                │\n│  \"a\"                                │\n│                                     │\n└─────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Byte Array and String Encoding\nDESCRIPTION: Demonstrates the variable-length encoding scheme for byte arrays and strings using block-based encoding with continuation tokens and length indicators.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-11-07-multi-column-sorts-in-arrow-rust-part-2.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                      ┌───┬───┬───┬───┬───┬───┐\n \"MEEP\"               │02 │'M'│'E'│'E'│'P'│04 │\n                      └───┴───┴───┴───┴───┴───┘\n\n                      ┌───┐\n \"\"                   │01 |\n                      └───┘\n\n NULL                 ┌───┐\n                      │00 │\n                      └───┘\n\n\"Defenestration\"      ┌───┬───┬───┬───┬───┬───┐\n                      │02 │'D'│'e'│'f'│'e'│FF │\n                      └───┼───┼───┼───┼───┼───┤\n                          │'n'│'e'│'s'│'t'│FF │\n                          ├───┼───┼───┼───┼───┤\n                          │'r'│'a'│'t'│'i'│FF │\n                          ├───┼───┼───┼───┼───┤\n                          │'o'│'n'│00 │00 │02 │\n                          └───┴───┴───┴───┴───┘\n```\n\n----------------------------------------\n\nTITLE: Installing NanoArrow with Meson\nDESCRIPTION: Shows how to install NanoArrow using Meson's wrap system by creating a subprojects directory and installing the package.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmkdir subprojects\nmeson wrap install nanoarrow\n```\n\n----------------------------------------\n\nTITLE: Defining Nested JSON Documents with Lists and Structs in Python\nDESCRIPTION: Demonstrates three JSON documents with complex nested structures including lists of integers, lists of structs, and nullable elements.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-17-arrow-parquet-encoding-part-3.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"a\": [1],\n  \"b\": [\n    {\n      \"b1\": 1\n    },\n    {\n      \"b1\": 1,\n      \"b2\": [\n        3, 4\n      ]\n    }\n  ]\n}\n\n{\n  \"b\": [\n    {\n      \"b1\": 2\n    },\n  ]\n}\n\n{\n  \"a\": [null, null],\n  \"b\": [null]\n}\n```\n\n----------------------------------------\n\nTITLE: ClickBench Group Aggregation Query in SQL\nDESCRIPTION: SQL query demonstrating high cardinality grouping in ClickBench dataset to find top 10 user and search phrase combinations by count.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-05-datafusion_fast_grouping.md#2025-04-09_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"UserID\", \"SearchPhrase\", COUNT(*)\nFROM hits\nGROUP BY \"UserID\", \"SearchPhrase\"\nORDER BY COUNT(*)\nDESC LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: CMake Integration Example\nDESCRIPTION: Shows how to integrate nanoarrow into a CMake project using FetchContent.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-05-27-nanoarrow-0.5.0-release.md#2025-04-09_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\nfetchcontent_declare(nanoarrow\n                     GIT_REPOSITORY https://github.com/apache/arrow-nanoarrow.git\n                     GIT_TAG  apache-arrow-nanoarrow-0.5.0\n                     GIT_SHALLOW TRUE)\nfetchcontent_makeavailable(nanoarrow)\n\nadd_executable(some_target ...)\ntarget_link_libraries(some_target nanoarrow::nanoarrow)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nullable Primitive Column in Arrow\nDESCRIPTION: ASCII representation of how Arrow stores a nullable column using a validity bitmask and a values buffer.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-05-arrow-parquet-encoding-part-1.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n┌─────┐   ┌─────┐\n│  1  │   │  1  │\n├─────┤   ├─────┤\n│  0  │   │ ??  │\n├─────┤   ├─────┤\n│  1  │   │  3  │\n├─────┤   ├─────┤\n│  1  │   │  4  │\n├─────┤   ├─────┤\n│  0  │   │ ??  │\n└─────┘   └─────┘\nValidity   Values\n```\n\n----------------------------------------\n\nTITLE: DataFusion 28.0.0 Hash Group Structure ASCII Diagram\nDESCRIPTION: ASCII diagram showing the improved hash grouping structure in DataFusion 28.0.0, demonstrating the optimized storage of group values and accumulators.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-05-datafusion_fast_grouping.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n┌───────────────────────────────────┐     ┌───────────────────────┐\n│ ┌ ─ ─ ─ ─ ─ ┐  ┌─────────────────┐│     │ ┏━━━━━━━━━━━━━━━━━━━┓ │\n│                │                 ││     │ ┃  ┌──────────────┐ ┃ │\n│ │           │  │ ┌ ─ ─ ┐┌─────┐  ││     │ ┃  │┌───────────┐ │ ┃ │\n│                │    X   │  5  │  ││     │ ┃  ││  value1   │ │ ┃ │\n│ │           │  │ ├ ─ ─ ┤├─────┤  ││     │ ┃  │└───────────┘ │ ┃ │\n│                │    Q   │  9  │──┼┼──┐  │ ┃  │     ...      │ ┃ │\n│ │           │  │ ├ ─ ─ ┤├─────┤  ││  └──┼─╋─▶│              │ ┃ │\n│                │   ...  │ ... │  ││     │ ┃  │┌───────────┐ │ ┃ │\n│ │           │  │ ├ ─ ─ ┤├─────┤  ││     │ ┃  ││  valueN   │ │ ┃ │\n│                │    H   │  1  │  ││     │ ┃  │└───────────┘ │ ┃ │\n│ │           │  │ ├ ─ ─ ┤├─────┤  ││     │ ┃  │values: Vec<T>│ ┃ │\n│     Rows       │   ...  │ ... │  ││     │ ┃  └──────────────┘ ┃ │\n│ │           │  │ └ ─ ─ ┘└─────┘  ││     │ ┃                   ┃ │\n│  ─ ─ ─ ─ ─ ─   │                 ││     │ ┃ GroupsAccumulator ┃ │\n│                └─────────────────┘│     │ ┗━━━━━━━━━━━━━━━━━━━┛ │\n│                  Hash Table       │     │                       │\n│                                   │     │          ...          │\n└───────────────────────────────────┘     └───────────────────────┘\n  GroupState                               Accumulators\n\n\nHash table value stores group_indexes     One  GroupsAccumulator\nand group values.                         per aggregate. Each\n                                          stores the state for\nGroup values are stored either inline     *ALL* groups, typically\nin the hash table or in a single          using a native Vec<T>\nallocation using the arrow Row format\n```\n\n----------------------------------------\n\nTITLE: Installing nanoarrow Python Package\nDESCRIPTION: Commands to install the nanoarrow package using pip or conda package managers.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-05-27-nanoarrow-0.5.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install nanoarrow\nconda install nanoarrow -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Visualizing Two-Phase Repartitioned Grouping Architecture in DataFusion\nDESCRIPTION: ASCII diagram showing the data flow in DataFusion's two-phase hash partitioned grouping. The diagram illustrates how data moves from input streams through partial grouping, hash-based repartitioning, and final grouping stages across multiple processor cores.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-05-datafusion_fast_grouping.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n            ▲                        ▲\n            │                        │\n            │                        │\n            │                        │\n┌───────────────────────┐  ┌───────────────────┐\n│        GroupBy        │  │      GroupBy      │      Step 4\n│        (Final)        │  │      (Final)      │\n└───────────────────────┘  └───────────────────┘\n            ▲                        ▲\n            │                        │\n            └────────────┬───────────┘\n                         │\n                         │\n            ┌─────────────────────────┐\n            │       Repartition       │               Step 3\n            │         HASH(x)         │\n            └─────────────────────────┘\n                         ▲\n                         │\n            ┌────────────┴──────────┐\n            │                       │\n            │                       │\n ┌────────────────────┐  ┌─────────────────────┐\n │      GroupyBy      │  │       GroupBy       │      Step 2\n │     (Partial)      │  │      (Partial)      │\n └────────────────────┘  └─────────────────────┘\n            ▲                       ▲\n         ┌──┘                       └─┐\n         │                            │\n    .─────────.                  .─────────.\n ,─'           '─.            ,─'           '─.\n;      Input      :          ;      Input      :      Step 1\n:    Stream 1     ;          :    Stream 2     ;\n ╲               ╱            ╲               ╱\n  '─.         ,─'              '─.         ,─'\n     `───────'                    `───────'\n```\n\n----------------------------------------\n\nTITLE: Defining NullState Template in Rust for DataFusion Accumulator\nDESCRIPTION: This code snippet defines a NullState template used in DataFusion 28.0.0 to handle variations with/without filtering and nulls in input for group accumulators. It encapsulates common patterns across accumulators.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-05-datafusion_fast_grouping.md#2025-04-09_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nNullState\n```\n\n----------------------------------------\n\nTITLE: Installing nanoarrow Python package\nDESCRIPTION: Command to install the nanoarrow Python package from PyPI using pip.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-29-nanoarrow-0.4.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install nanoarrow\n```\n\n----------------------------------------\n\nTITLE: Initial Pipeline Performance Metrics\nDESCRIPTION: Performance metrics showing throughput for Kafka reading, Arrow record processing, and DuckDB insertion operations running in series.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-03-10-fast-streaming-inserts-in-duckdb-with-adbc.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n2025/01/23 23:39:27 kafka read start with 8 readers\n2025/01/23 23:39:41 read 15728642 kafka records in 14.385530 secs @1093365.498477 messages/sec\n2025/01/23 23:39:41 deserialize []byte to proto, convert to arrow records with 32 goroutines start\n2025/01/23 23:40:04 deserialize to arrow done - 15728642 records in 22.283532 secs @ 705841.509812 messages/sec\n2025/01/23 23:40:04 ADBC IngestCreateAppend start with 32 connections\n2025/01/23 23:40:25 duck ADBC insert 15728642 records in 21.145649535 secs @ 743824.007783 rows/sec\n```\n\n----------------------------------------\n\nTITLE: Raw Data Ingestion Performance Metrics\nDESCRIPTION: Performance metrics for ingesting raw data with nested fields plus normalized data, showing system configuration and throughput statistics.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-03-10-fast-streaming-inserts-in-duckdb-with-adbc.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnum_cpu:                60\nruntime_os:             linux\nkafka_clients:          5\nkafka_queue_cap:        983040\nprocessor_routines:     32\narrow_queue_cap:        4\nduckdb_threshold_mb:    4200\nduckdb_connections:     24\nnormalizer_fields:      10\nstart_time:             2025-02-24T21:06:23Z\nend_time:               2025-02-24T21:11:23Z\nrecords:                123_686_901.00\nnorm_records:           122_212_452.00\ndata_transferred:       146.53 GB\nduration:               4m59.585s\nrecords_per_second:     398_271.90\ntotal_rows_per_second:  806_210.41\ntransfer_rate:          500.86 MB/second\nduckdb_files:           9\nduckdb_files_MB:        38429\nfile_avg_duration:      33.579s\n```\n\n----------------------------------------\n\nTITLE: Generating nanoarrow distribution files with Python\nDESCRIPTION: This Python command generates the nanoarrow distribution files, including various features and outputs.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-07-nanoarrow-0.6.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython ci/scripts/bundle.py \\\n  --source-output-dir=dist \\\n  --include-output-dir=dist \\\n  --header-namespace= \\\n  --with-device \\\n  --with-ipc \\\n  --with-testing \\\n  --with-flatcc\n```\n\n----------------------------------------\n\nTITLE: Normalized Data Only Performance Metrics\nDESCRIPTION: Performance metrics when processing only flat, normalized data, demonstrating improved throughput and system configuration.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-03-10-fast-streaming-inserts-in-duckdb-with-adbc.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nnum_cpu:                60\nruntime_os:             linux\nkafka_clients:          10\nkafka_queue_cap:        1228800\nprocessor_routines:     32\narrow_queue_cap:        4\nduckdb_threshold_mb:    4200\nduckdb_connections:     24\nnormalizer_fields:      10\nstart_time:             2025-02-25T19:04:33Z\nend_time:               2025-02-25T19:09:36Z\nrecords:                231_852_772.00\nnorm_records:           363_247_327.00\ndata_transferred:       285.76 GB\nduration:               5m3.059s\nrecords_per_second:     0.00\ntotal_rows_per_second:  1_198_601.39\ntransfer_rate:          965.54 MB/second\nduckdb_files:           5\nduckdb_files_MB:        20056\nfile_avg_duration:      58.975s\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Demo Table\nDESCRIPTION: Creates a sample table 'demo' with three columns and inserts test data with different string lengths and integer values.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-02-28-data-wants-to-be-free.md#2025-04-09_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE demo (id BIGINT, val TEXT, val2 BIGINT);\nINSERT INTO demo VALUES (1, 'foo', 64), (2, 'a longer string', 128), (3, 'yet another string', 10);\n```\n\n----------------------------------------\n\nTITLE: Checking Arrow Installation and Getting Installation Help\nDESCRIPTION: Function to provide version and platform-specific guidance on installing the Arrow C++ library if the initial installation cannot find the C++ dependencies.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-08-01-r-package-on-cran.md#2025-04-09_snippet_1\n\nLANGUAGE: r\nCODE:\n```\narrow::install_arrow()\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Binary Data Export\nDESCRIPTION: Uses PostgreSQL COPY command to export table data in binary format to a file.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-02-28-data-wants-to-be-free.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCOPY demo TO '/tmp/demo.bin' WITH BINARY;\n```\n\n----------------------------------------\n\nTITLE: Installing the Arrow R Package from CRAN\nDESCRIPTION: Simple R command to install the Apache Arrow package from CRAN. This is the recommended installation method for most users, especially on systems where binary packages are available.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-08-01-r-package-on-cran.md#2025-04-09_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(\"arrow\")\n```\n\n----------------------------------------\n\nTITLE: Generating Production Site Files\nDESCRIPTION: Command to generate production-ready site files for arrow.apache.org in the _site/ directory.\nSOURCE: https://github.com/apache/arrow-site/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nJEKYLL_ENV=production bundle exec rake generate\n```\n\n----------------------------------------\n\nTITLE: Installing Turbodbc with pip or conda\nDESCRIPTION: Commands to install Turbodbc 2.0.0, which now includes Apache Arrow support for reading SQL result sets as Arrow record batches.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-06-14-0.4.1-release.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install turbodbc\n```\n\nLANGUAGE: shell\nCODE:\n```\nconda install turbodbc -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Configuring vcpkg Dependencies in C++\nDESCRIPTION: Example configuration file for managing C++ dependencies using vcpkg package manager, demonstrating the manifest file structure for Arrow C++ library.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-04-26-4.0.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nvcpkg.json\n```\n\n----------------------------------------\n\nTITLE: Running Site with Docker Compose\nDESCRIPTION: Command to build and preview the site using Docker Compose, avoiding the need for local Ruby and Node.js installations.\nSOURCE: https://github.com/apache/arrow-site/blob/main/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Enhancing Grouping and Aggregate Queries in Rust DataFusion\nDESCRIPTION: Various improvements have been implemented for query processing in DataFusion, with a focus on grouping and aggregate queries.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2020-02-11-0.16.0-release.md#2025-04-09_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n// No code snippet provided, but the feature is referenced by ARROW-6689\n```\n\n----------------------------------------\n\nTITLE: Installing Jekyll Dependencies with Ruby\nDESCRIPTION: Commands to install Jekyll and its dependencies using Ruby's package manager. Requires a recent non-EOL version of Ruby to be installed.\nSOURCE: https://github.com/apache/arrow-site/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngem install bundler\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Completing Arrow Reader Integration in Rust Parquet\nDESCRIPTION: The Arrow reader integration for Parquet has been completed, allowing Parquet files to be read directly into Arrow memory structures.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2020-02-11-0.16.0-release.md#2025-04-09_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n// No code snippet provided, but the feature is referenced by ARROW-4059\n```\n\n----------------------------------------\n\nTITLE: Installing DataFusion Python Package with pip\nDESCRIPTION: Commands for installing the Python bindings for DataFusion using pip, which allows users to work with SQL or DataFrame APIs in Python.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-03-21-datafusion-contrib.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install datafusion\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install datafusion\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in String Literals in Python\nDESCRIPTION: Example of special characters in string literals requiring proper escaping in Python code. The issue relates to ARROW-7022 about ExtensionTypes not working with __arrow_array__ in Table.from_pandas.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.16.0.md#2025-04-09_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n__arrow_array__\n```\n\n----------------------------------------\n\nTITLE: Adding DataFusion-ObjectStore-S3 Dependency in Cargo.toml\nDESCRIPTION: Configuration for adding the S3 ObjectStore implementation to a Rust project with DataFusion, which enables querying data stored in S3 or S3-compatible storage.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-03-21-datafusion-contrib.md#2025-04-09_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ndatafusion-objectstore-s3 = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Go Test Command for Benchmarking\nDESCRIPTION: A Go test command that was failing when running benchmarks with specific parameters as described in ARROW-7212.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.16.0.md#2025-04-09_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ngo test -bench=8192 -run=. ./math\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committer Statistics with Git for Apache Arrow Release\nDESCRIPTION: Git command to show the number of patches signed off by each Apache committer between Arrow 18.0.0 and 18.1.0 releases. This groups the results by the signed-off-by trailer in commit messages.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/18.1.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-18.0.0..apache-arrow-18.1.0\n     5\tSutou Kouhei\n     4\tDavid Li\n     3\tBryce Mecum\n     3\tCurt Hagenlocher\n     3\tJacob Wujciak-Jens\n     2\tRaúl Cumplido\n     1\tFelipe Oliveira Carvalho\n```\n\n----------------------------------------\n\nTITLE: ArrowBuffer BitmapBuilder Methods\nDESCRIPTION: New methods added to ArrowBuffer.BitmapBuilder for improved performance in array concatenation operations.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-24-13.0.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nArrowBuffer.BitmapBuilder.Append(ReadOnlySpan<byte> source, int validBits)\nArrowBuffer.BitmapBuilder.AppendRange(bool value, int length)\n```\n\n----------------------------------------\n\nTITLE: Patch Committer Statistics Using Git Shortlog\nDESCRIPTION: Git command output showing commit statistics for Apache committers who merged contributed patches, grouped by the signed-off-by trailer for the period between Arrow 17.0.0 and 18.0.0 releases.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/18.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-17.0.0..apache-arrow-18.0.0\n   137\tSutou Kouhei\n    84\tDavid Li\n    63\tAntoine Pitrou\n    35\tCurt Hagenlocher\n    31\tDane Pitkin\n    31\tRaúl Cumplido\n    21\tJoris Van den Bossche\n    16\tJonathan Keane\n    15\tFelipe Oliveira Carvalho\n    13\tmwish\n    12\tJacob Wujciak-Jens\n    11\tJoel Lubinitsky\n     9\tMatt Topol\n     9\tdependabot[bot]\n     6\tNic Crane\n     5\tBryce Mecum\n     3\tBenjamin Kietzman\n     2\tAlenkaF\n     2\tRok Mihevc\n     1\tWill Ayd\n```\n\n----------------------------------------\n\nTITLE: Setting Arrow Default Memory Pool Environment Variable\nDESCRIPTION: Environment variable setting to configure Arrow's default memory pool to use jemalloc instead of the new default mimalloc.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-28-18.0.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nARROW_DEFAULT_MEMORY_POOL=jemalloc\n```\n\n----------------------------------------\n\nTITLE: Adding DataFusion-BigTable Dependency in Cargo.toml\nDESCRIPTION: Configuration for adding the BigTable integration to a Rust project with DataFusion, which implements Bigtable as a data source and physical executor for DataFusion queries.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-03-21-datafusion-contrib.md#2025-04-09_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ndatafusion-bigtable = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Package Size Statistics Comment\nDESCRIPTION: Comment block containing size statistics for Arrow R package installations across different versions and platforms.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2020-07-27-cpp-build-simplification.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- macOS build 0.17.1:\\n\\nchecking installed package size ... NOTE\\n  installed size is 38.1Mb\\n  sub-directories of 1Mb or more:\\n    R 3.2Mb\\n    libs 34.5Mb\\n\\nautobrew libs on master: 8.9mb\\n\\nmacOS 1.0.0\\nchecking installed package size ... NOTE\\n  installed size is 35.0Mb\\n  sub-directories of 1Mb or more:\\n    R 3.2Mb\\n    libs 31.3Mb\\n\\nwindows 0.17.1:\\nchecking installed package size ... NOTE\\n  installed size is 27.9Mb\\n  sub-directories of 1Mb or more:\\n    R 3.2Mb\\n    libs 24.3Mb\\n\\nwindows libs on 1.0.0:\\nchecking installed package size ... NOTE\\n  installed size is 24.9Mb\\n  sub-directories of 1Mb or more:\\n    R 3.2Mb\\n    libs 21.2Mb\\n\\nubuntu-18.04 libarrow binaries:\\n0.16.0.2 18.84 MB\\n0.17.0 \t  12.81 MB\\n1.0.0      12.45 MB -->\n```\n\n----------------------------------------\n\nTITLE: Git Patch Committer Statistics for Apache Arrow 0.11.0\nDESCRIPTION: Shell command showing git shortlog statistics of patch committers between versions 0.10.0 and 0.11.0, including merged patches from Apache Parquet.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.11.0.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.10.0..apache-arrow-0.11.0\n```\n\n----------------------------------------\n\nTITLE: Build Script Path Reference\nDESCRIPTION: Path reference to the Arrow R package build script that downloads and builds the Arrow C++ library.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2020-07-27-cpp-build-simplification.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/apache/arrow/blob/master/r/inst/build_arrow_static.sh\n```\n\n----------------------------------------\n\nTITLE: Patch Committer Statistics using Git Shortlog\nDESCRIPTION: Git command output showing the number of patches merged by Apache committers between Arrow versions 11.0.0 and 12.0.0, including signed-off-by trailer information.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/12.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-11.0.0..apache-arrow-12.0.0\n   123\tSutou Kouhei\n    77\tWeston Pace\n    71\tMatt Topol\n    50\tJoris Van den Bossche\n    43\tWill Jones\n    35\tDavid Li\n    22\tJacob Wujciak-Jens\n    19\tNic Crane\n    17\tAntoine Pitrou\n    17\tRaúl Cumplido\n    12\tDewey Dunnington\n     5\tAlenka Frim\n     5\tEric Erhardt\n     5\tYibo Cai\n     4\tRok Mihevc\n     3\tLi Jin\n     3\tNeal Richardson\n     2\tDominik Moritz\n     2\tMicah Kornfield\n     1\tMatthew Topol\n     1\tdependabot[bot]\n```\n\n----------------------------------------\n\nTITLE: Git Shortlog Command Output for Patch Committers\nDESCRIPTION: Console output showing git shortlog command that lists Apache committers who merged contributed patches between versions 12.0.1 and 13.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/13.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-12.0.1..apache-arrow-13.0.0\n   155\tSutou Kouhei\n    96\tAntoine Pitrou\n    62\tMatt Topol\n    44\tJoris Van den Bossche\n    44\tNic Crane\n    34\tDavid Li\n    29\tRaúl Cumplido\n    27\tWeston Pace\n    16\tJacob Wujciak-Jens\n    16\tWill Jones\n```\n\n----------------------------------------\n\nTITLE: Styling for ADBC and DuckDB article presentation\nDESCRIPTION: CSS styling definitions for color-coding different parts of the article, including headers, data, length, and padding elements with distinct color schemes.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-03-10-fast-streaming-inserts-in-duckdb-with-adbc.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n.a-header {\n  color: #984EA3;\n  font-weight: bold;\n}\n.a-data {\n  color: #377EB8;\n  font-weight: bold;\n}\n.a-length {\n  color: #FF7F00;\n  font-weight: bold;\n}\n.a-padding {\n  color: #E41A1C;\n  font-weight: bold;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Git Contributor List for ADBC 16 Release\nDESCRIPTION: Git shortlog command showing the list of contributors and their commit counts for the Apache Arrow ADBC version 16 release, excluding dependabot contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-01-21-adbc-16-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-15..apache-arrow-adbc-16\n    23\tDavid Li\n     8\tMatthijs Brobbel\n     4\tdavidhcoe\n     3\tBruce Irschick\n     2\tMatt Topol\n     1\tAlbert LI\n     1\tCocoa\n     1\tCurt Hagenlocher\n     1\tJacob Wujciak-Jens\n     1\tJulian Brandrick\n     1\tqifanzhang-ms\n```\n\n----------------------------------------\n\nTITLE: Installing Required R Packages for Arrow and Spark Integration\nDESCRIPTION: Installation of development versions of arrow and sparklyr packages from GitHub repositories using devtools.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-01-25-r-spark-improvements.md#2025-04-09_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ndevtools::install_github(\"apache/arrow\", subdir = \"r\", ref = \"apache-arrow-0.12.0\")\ndevtools::install_github(\"rstudio/sparklyr\", ref = \"apache-arrow-0.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit Statistics in Markdown\nDESCRIPTION: Shows the raw git commit statistics for contributors to the Apache Arrow Rust 5.0.0 release. This code block is used to display the number of commits and names of contributors in a formatted list.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-07-20-5.0.0-rs-release.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n    28  Jorge Leitao\n    27  Andrew Lamb\n    15  Jiayu Liu\n    12  Ritchie Vink\n    10  Wakahisa\n     8  Raphael Taylor-Davies\n     6  Daniël Heres\n     5  Andy Grove\n     5  Navin\n     5  Jörn Horstmann\n     4  Ádám Lippai\n     4  Dominik Moritz\n     4  Marco Neumann\n     3  Roee Shlomo\n     3  Michael Edwards\n     2  Steven\n     2  Krisztián Szűcs\n     2  Gary Pennington\n     1  Ben Chambers\n     1  Max Meldrum\n     1  Edd Robinson\n     1  Gang Liao\n     1  Chojan Shang\n     1  Boaz\n     1  Wes McKinney\n     1  Yordan Pavlov\n     1  baishen\n     1  hulunbier\n     1  kazuhiko kikuchi\n     1  Dmitry Patsura\n     1  Kornelijus Survila\n     1  Laurent Mazare\n     1  Manish Gill\n     1  Marc van Heerden\n```\n```\n\n----------------------------------------\n\nTITLE: Release Post Front Matter in Markdown\nDESCRIPTION: Jekyll front matter metadata for the Apache Arrow 15.0.1 release announcement blog post, specifying layout, title, date, author and categories.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-03-07-15.0.1-release.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: \"Apache Arrow 15.0.1 Release\"\ndate: \"2024-03-07 00:00:00\"\nauthor: pmc\ncategories: [release]\n---\n```\n\n----------------------------------------\n\nTITLE: Patch Committer Statistics for Apache Arrow 16.0.0\nDESCRIPTION: Console output showing git shortlog statistics of patch committers between versions 15.0.2 and 16.0.0, grouped by signed-off-by trailer.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/16.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-15.0.2..apache-arrow-16.0.0\n   176\tSutou Kouhei\n    97\tAntoine Pitrou\n    58\tJoris Van den Bossche\n    50\tDavid Li\n    32\tMatt Topol\n    27\tCurt Hagenlocher\n    20\tJacob Wujciak-Jens\n    17\tRaúl Cumplido\n    16\tFelipe Oliveira Carvalho\n    14\tAlenkaF\n    13\tmwish\n     9\tBenjamin Kietzman\n     8\tDewey Dunnington\n     6\tNic Crane\n     5\tBryce Mecum\n     5\tJonathan Keane\n     3\tWeston Pace\n     3\tdependabot[bot]\n     2\tKevin Gurney\n     1\tRok Mihevc\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for Apache Arrow 0.13.0\nDESCRIPTION: Git shortlog output showing the number of commits per contributor between versions 0.12.0 and 0.13.0. Lists 81 distinct contributors with their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.13.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.12.0..apache-arrow-0.13.0\n    56\tWes McKinney\n    55\tKouhei Sutou\n    31\tAntoine Pitrou\n    31\tFrançois Saint-Jacques\n    31\tKorn, Uwe\n    30\tKrisztián Szűcs\n    28\tAndy Grove\n    27\tUwe L. Korn\n    21\tMicah Kornfield\n    17\tBenjamin Kietzman\n    17\tKenta Murata\n    17\tPindikura Ravindra\n    15\tptaylor\n    13\tDavid Li\n    12\tPaddy Horan\n    11\tNeville Dipale\n     9\tPhilipp Moritz\n     8\tChao Sun\n     8\tRomain Francois\n     7\tEric Erhardt\n     7\tYosuke Shiro\n     6\tNicolas Trinquier\n     5\tJavier Luraschi\n     4\tAnson Qian\n     4\tBrian Hulette\n     4\tYuhong Guo\n     3\tAnurag Khandelwal\n     3\tBryan Cutler\n     3\tDominik Moritz\n     3\tMike Pigott\n     3\tPearu Peterson\n     3\tSebastien Binet\n     2\tHatem Helal\n     2\tJeroen Ooms\n     2\tOwen Nelson\n     2\tPeter\n     2\tPraveen\n     2\tRenat Valiullin\n     2\tRenjie Liu\n     2\temkornfield\n     2\ttigerchen\n     1\tAlexandre Crayssac\n     1\tAreg Melik-Adamyan\n     1\tBrandon Greenwell\n     1\tBruno P. Kinoshita\n     1\tChristian Thiel\n     1\tChristopher Hutchinson\n     1\tDaniel Bast\n     1\tFelix\n     1\tGene Novark\n     1\tGeorge Sakkis\n     1\tGidon Gershinsky\n     1\tIldar Musin\n     1\tIlya Tocar\n     1\tLaurent Goujon\n     1\tMatthias Vallentin\n     1\tMaxim Novikov\n     1\tMichael Pigott\n     1\tMichael Vilim\n     1\tMike Bostock\n     1\tP. Taylor Goetz\n     1\tPaul Kernfeld\n     1\tPaul Taylor\n     1\tPrashanth Govindarajan\n     1\tRobert Nishihara\n     1\tRoss Smith II\n     1\tRyan Mackenzie White\n     1\tRylan Dmello\n     1\tStephen Toub\n     1\tSteven Fackler\n     1\tSuvayu Ali\n     1\tTanya Schlusser\n     1\tTodd A. Anderson\n     1\tYu Ding\n     1\tYurui Zhou\n     1\talexandreyc\n     1\tdsisnero\n     1\tfjetter\n     1\tpraveenbingo\n     1\tpraveenkrishna\n     1\tyl187661\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for Apache Arrow 0.13.0\nDESCRIPTION: Git shortlog output showing the number of commits per contributor between versions 0.12.0 and 0.13.0. Lists 81 distinct contributors with their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.13.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.12.0..apache-arrow-0.13.0\n    56\tWes McKinney\n    55\tKouhei Sutou\n    31\tAntoine Pitrou\n    31\tFrançois Saint-Jacques\n    31\tKorn, Uwe\n    30\tKrisztián Szűcs\n    28\tAndy Grove\n    27\tUwe L. Korn\n    21\tMicah Kornfield\n    17\tBenjamin Kietzman\n    17\tKenta Murata\n    17\tPindikura Ravindra\n    15\tptaylor\n    13\tDavid Li\n    12\tPaddy Horan\n    11\tNeville Dipale\n     9\tPhilipp Moritz\n     8\tChao Sun\n     8\tRomain Francois\n     7\tEric Erhardt\n     7\tYosuke Shiro\n     6\tNicolas Trinquier\n     5\tJavier Luraschi\n     4\tAnson Qian\n     4\tBrian Hulette\n     4\tYuhong Guo\n     3\tAnurag Khandelwal\n     3\tBryan Cutler\n     3\tDominik Moritz\n     3\tMike Pigott\n     3\tPearu Peterson\n     3\tSebastien Binet\n     2\tHatem Helal\n     2\tJeroen Ooms\n     2\tOwen Nelson\n     2\tPeter\n     2\tPraveen\n     2\tRenat Valiullin\n     2\tRenjie Liu\n     2\temkornfield\n     2\ttigerchen\n     1\tAlexandre Crayssac\n     1\tAreg Melik-Adamyan\n     1\tBrandon Greenwell\n     1\tBruno P. Kinoshita\n     1\tChristian Thiel\n     1\tChristopher Hutchinson\n     1\tDaniel Bast\n     1\tFelix\n     1\tGene Novark\n     1\tGeorge Sakkis\n     1\tGidon Gershinsky\n     1\tIldar Musin\n     1\tIlya Tocar\n     1\tLaurent Goujon\n     1\tMatthias Vallentin\n     1\tMaxim Novikov\n     1\tMichael Pigott\n     1\tMichael Vilim\n     1\tMike Bostock\n     1\tP. Taylor Goetz\n     1\tPaul Kernfeld\n     1\tPaul Taylor\n     1\tPrashanth Govindarajan\n     1\tRobert Nishihara\n     1\tRoss Smith II\n     1\tRyan Mackenzie White\n     1\tRylan Dmello\n     1\tStephen Toub\n     1\tSteven Fackler\n     1\tSuvayu Ali\n     1\tTanya Schlusser\n     1\tTodd A. Anderson\n     1\tYu Ding\n     1\tYurui Zhou\n     1\talexandreyc\n     1\tdsisnero\n     1\tfjetter\n     1\tpraveenbingo\n     1\tpraveenkrishna\n     1\tyl187661\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers for Apache Arrow 12.0.1\nDESCRIPTION: This console command uses git shortlog to display the number of patches merged by Apache committers for the Apache Arrow 12.0.1 release.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/12.0.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-12.0.0..apache-arrow-12.0.1\n     6\tRaúl Cumplido\n     5\tAntoine Pitrou\n     5\tJoris Van den Bossche\n     4\tWeston Pace\n     3\tSutou Kouhei\n     2\tMatt Topol\n     2\tNic Crane\n     1\tAlenka Frim\n     1\tDavid Li\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors for Apache Arrow 12.0.1\nDESCRIPTION: This console command uses git shortlog to display the number of commits and names of contributors for the Apache Arrow 12.0.1 release.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/12.0.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-12.0.0..apache-arrow-12.0.1\n     5\tJoris Van den Bossche\n     5\tRaúl Cumplido\n     5\tWeston Pace\n     4\tSutou Kouhei\n     3\tNic Crane\n     2\tDavid Li\n     2\tMatt Topol\n     2\tmwish\n     1\tFelipe Oliveira Carvalho\n     1\tJacob Wujciak-Jens\n     1\tMatthew Roeschke\n     1\tYevgeny Pats\n```\n\n----------------------------------------\n\nTITLE: Patch Committer Statistics for Apache Arrow 0.13.0\nDESCRIPTION: Git shortlog output showing the number of patches merged by Apache committers between versions 0.12.0 and 0.13.0. Lists patch commit counts for 19 committers.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.13.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.12.0..apache-arrow-0.13.0\n   193\tWes McKinney\n    95\tKrisztián Szűcs\n    66\tUwe L. Korn\n    53\tKouhei Sutou\n    40\tAntoine Pitrou\n    22\tAndy Grove\n    21\tKorn, Uwe\n    11\tPindikura Ravindra\n     9\tYosuke Shiro\n     8\tBrian Hulette\n     7\tChao Sun\n     5\tPhilipp Moritz\n     5\tSebastien Binet\n     4\tBryan Cutler\n     2\tGitHub\n     2\tPaddy Horan\n     2\tRobert Nishihara\n     2\tSidd\n     2\tptaylor\n     1\tMicah Kornfield\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Statistics with Git for Apache Arrow Release\nDESCRIPTION: Git command to show the number of commits per contributor between Apache Arrow 18.0.0 and 18.1.0 releases. This displays a sorted list of 8 distinct contributors with their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/18.1.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-18.0.0..apache-arrow-18.1.0\n     7\tBryce Mecum\n     7\tSutou Kouhei\n     4\tdependabot[bot]\n     2\tAdam Reeve\n     2\tRaúl Cumplido\n     1\t0xderek\n     1\tAnja Kefala\n     1\tJacob Wujciak-Jens\n```\n\n----------------------------------------\n\nTITLE: Patch Committer Statistics for Apache Arrow 15.0.2\nDESCRIPTION: Displays the Apache committers who merged contributed patches between versions 15.0.1 and 15.0.2 using git shortlog command with trailer grouping.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/15.0.2.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-15.0.1..apache-arrow-15.0.2\n     3\tAntoine Pitrou\n     2\tSutou Kouhei\n     1\tFelipe Oliveira Carvalho\n     1\tJonathan Keane\n     1\tJoris Van den Bossche\n```\n\n----------------------------------------\n\nTITLE: Generating Patch Committer Statistics for Apache Arrow 4.0.0\nDESCRIPTION: This console command generates a list of Apache committers who merged contributed patches to the repository for the 4.0.0 release, along with their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/4.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-3.0.0..apache-arrow-4.0.0\n```\n\n----------------------------------------\n\nTITLE: Handling C++ Macro for ASSERT_OK_AND_ASSIGN\nDESCRIPTION: Reference to the ASSERT_OK_AND_ASSIGN macro in C++ which was crashing when failing as described in ARROW-7074.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.16.0.md#2025-04-09_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nASSERT_OK_AND_ASSIGN\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commit Statistics for Apache Arrow 19.0.0 Release\nDESCRIPTION: This console command uses git shortlog to display the number of commits per contributor between Apache Arrow versions 18.1.0 and 19.0.0. It shows that the release includes 330 commits from 67 distinct contributors.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/19.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-18.1.0..apache-arrow-19.0.0\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers with Git Shortlog for Apache Arrow 0.16.0\nDESCRIPTION: A Git shortlog command that displays the number of patches committed by Apache committers between versions 0.15.1 and 0.16.0. The output shows Krisztián Szűcs, Sutou Kouhei, and Wes McKinney as the top patch committers.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.16.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.15.1..apache-arrow-0.16.0\n   133\tKrisztián Szűcs\n   100\tSutou Kouhei\n    91\tWes McKinney\n    85\tAntoine Pitrou\n    70\tNeal Richardson\n    60\tMicah Kornfield\n    34\tBenjamin Kietzman\n    32\tFrançois Saint-Jacques\n    23\tAndy Grove\n    13\tNeville Dipale\n    12\tPraveen\n     8\tDavid Li\n     6\tPaddy Horan\n     6\tYosuke Shiro\n     5\tBryan Cutler\n     5\tEric Erhardt\n     4\tKenta Murata\n     4\tPindikura Ravindra\n     4\tSebastien Binet\n     4\tSidd\n     3\tPhilipp Moritz\n     2\tJoris Van den Bossche\n     2\tUwe L. Korn\n     1\tBrian Hulette\n     1\tChao Sun\n     1\tGitHub\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers for Apache Arrow 16.1.0\nDESCRIPTION: Git shortlog command showing the number of patches merged by Apache committers between versions 16.0.0 and 16.1.0\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/16.1.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-16.0.0..apache-arrow-16.1.0\n     7\tCurt Hagenlocher\n     5\tSutou Kouhei\n     3\tJacob Wujciak-Jens\n     2\tBenjamin Kietzman\n     2\tMatt Topol\n     2\tRaúl Cumplido\n     1\tAntoine Pitrou\n     1\tFelipe Oliveira Carvalho\n     1\tGang Wu\n     1\tJonathan Keane\n     1\tJoris Van den Bossche\n     1\tKevin Gurney\n     1\tWeston Pace\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers for Apache Arrow 0.9.0 Release\nDESCRIPTION: This shell command uses git shortlog to display a list of Apache committers who contributed patches to the repository between versions 0.8.0 and 0.9.0, along with their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.9.0.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.8.0..apache-arrow-0.9.0\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers for Apache Arrow 19.0.0 Release\nDESCRIPTION: This console command uses git shortlog with a custom trailer to display the number of patches merged by Apache committers between versions 18.1.0 and 19.0.0. It shows the distribution of merged patches among the project's committers.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/19.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-18.1.0..apache-arrow-19.0.0\n```\n\n----------------------------------------\n\nTITLE: Contributor Statistics Using Git Shortlog\nDESCRIPTION: Git command output showing commit statistics per contributor, listing 89 distinct contributors with their commit counts for the period between Arrow 17.0.0 and 18.0.0 releases.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/18.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-17.0.0..apache-arrow-18.0.0\n   113\tdependabot[bot]\n    65\tSutou Kouhei\n    41\tRaúl Cumplido\n    35\tAntoine Pitrou\n    21\tVibhatha Lakmal Abeykoon\n    19\tDane Pitkin\n    16\tFelipe Oliveira Carvalho\n    16\tJonathan Keane\n    16\tJoris Van den Bossche\n    16\tRossi Sun\n    16\tmwish\n    13\tJoel Lubinitsky\n     9\tLaurent Goujon\n     7\tLysandros Nikolaou\n     7\tNeal Richardson\n     6\tBryce Mecum\n     6\tDavid Li\n     5\tMatt Topol\n     4\tAdam Reeve\n     4\tCurt Hagenlocher\n     4\tHyunseok Seo\n     4\tOliver Layer\n     4\tabandy\n     3\tDewey Dunnington\n     3\tJin Chengcheng\n     3\tRok Mihevc\n     3\tViggoC\n     2\tAlbert Villanova del Moral\n     2\tAlenka Frim\n     2\tAlkis Evlogimenos\n     2\tBenjamin Kietzman\n     2\tDevin Smith\n     2\tIan Cook\n     2\tJacob Wujciak-Jens\n     2\tThomas Newton\n     2\tXin Hao\n     1\t0x26res\n     1\tAbdulaziz Aloqeely\n     1\tAbhinand-J\n     1\tAlessandro Molina\n     1\tAlex Malins\n     1\tAlexSpace\n     1\tAmir Gonnen\n     1\tAmit Mittal\n     1\tAnja Kefala\n     1\tBenson Muite\n     1\tChungmin Lee\n     1\tCosti Ciudatu\n     1\tCrystal\n     1\tDavid Chapman\n     1\tEtienne Bacher\n     1\tFeiyang472\n     1\tFokko Driesprong\n     1\tGeorge Vanburgh\n     1\tGrant McDermott\n     1\tJames Henderson\n     1\tJoe Marshall\n     1\tKevin Wilson\n     1\tKyle Barron\n     1\tLiang-Chi Hsieh\n     1\tMatthijs Brobbel\n     1\tMax Feinleib\n     1\tMichael Chirico\n     1\tNic Crane\n     1\tNick Crews\n     1\tNozomi Isozaki\n     1\tPANKAJ9768\n     1\tPatrick Aboyoun\n     1\tPaul Taylor\n     1\tPradeep Gollakota\n     1\tRoboSchmied\n     1\tSarah Gilmore\n     1\tSeb. V\n     1\tStephen Coussens\n     1\tSylvain Wallez\n     1\tTai Le Manh\n     1\tTom Scott-Coombes\n     1\tVyas Ramasubramani\n     1\tWilliam Ayd\n     1\tben-freist\n     1\thellishfire\n     1\tlarry98\n     1\tndglover\n     1\tqmmk\n     1\trene-hess\n     1\tshinespiked\n     1\twiedld\n     1\tyihao.dai\n     1\tziglerari\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for Apache Arrow 17.0.0\nDESCRIPTION: Git shortlog output showing the number of commits per contributor between versions 16.1.0 and 17.0.0, revealing 529 commits from 92 distinct contributors.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/17.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-16.1.0..apache-arrow-17.0.0\n    84\tdependabot[bot]\n    47\tSutou Kouhei\n    25\tHyunseok Seo\n    25\tJoris Van den Bossche\n    22\tRaúl Cumplido\n    21\tAdam Reeve\n    21\tVibhatha Lakmal Abeykoon\n    20\tmwish\n    18\tLaurent Goujon\n    15\tFelipe Oliveira Carvalho\n    14\tabandy\n    13\tSarah Gilmore\n    12\tRossi Sun\n    11\tNeal Richardson\n    10\tAlenka Frim\n    10\tAntoine Pitrou\n    10\tBryce Mecum\n```\n\n----------------------------------------\n\nTITLE: Querying Git Contributor Statistics in Console\nDESCRIPTION: Console commands showing git shortlog output to display contributor statistics between Arrow 1.0.0 and 1.0.1 releases, including commit counts per author and committer information.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/1.0.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-1.0.0..apache-arrow-1.0.1\n     9\tKrisztián Szűcs\n     8\tNeal Richardson\n     4\tBenjamin Kietzman\n     3\tAndy Grove\n     3\tAntoine Pitrou\n     3\tUwe L. Korn\n     1\tJorge C. Leitao\n     1\tJoris Van den Bossche\n     1\tMahmut Bulut\n     1\tMatthias\n     1\tMicah Kornfield\n     1\talamb\n     1\tmubai\n     1\toffthewall123\n     1\tptaylor\n```\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-1.0.0..apache-arrow-1.0.1\n    39\tKrisztián Szűcs\n```\n\n----------------------------------------\n\nTITLE: Contributor Statistics using Git Shortlog\nDESCRIPTION: Git command output showing the number of commits per contributor between Arrow versions 11.0.0 and 12.0.0, listing 97 distinct contributors and their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/12.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-11.0.0..apache-arrow-12.0.0\n    62\tSutou Kouhei\n    44\tWeston Pace\n    26\tGang Wu\n    26\tMatt Topol\n    23\tNic Crane\n    23\tmwish\n    22\tJoris Van den Bossche\n    22\tRaúl Cumplido\n    20\tAlenka Frim\n    19\tDavid Li\n    19\tFelipe Oliveira Carvalho\n    15\tWill Jones\n    11\tJin Shang\n    11\trtpsw\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors to Nanoarrow Release\nDESCRIPTION: A console command that uses git to list contributors to the nanoarrow 0.5.0 release, excluding GitHub Actions. This demonstrates the collaborative nature of the project and acknowledges individual contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-05-27-nanoarrow-0.5.0-release.md#2025-04-09_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-nanoarrow-0.5.0.dev..apache-arrow-nanoarrow-0.5.0 | grep -v \"GitHub Actions\"\n  67  Dewey Dunnington\n  3  Dirk Eddelbuettel\n  3  Joris Van den Bossche\n  2  William Ayd\n  1  Alenka Frim\n  1  Benjamin Kietzman\n  1  Max Conradt\n  1  Vyas Ramasubramani\n  1  eitsupi\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors by Commit Count for Apache Arrow 0.14.1\nDESCRIPTION: Git command output showing the 16 distinct contributors to the Apache Arrow 0.14.1 release with their commit counts, executed by running git shortlog between the 0.14.0 and 0.14.1 tags.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.14.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.14.0..apache-arrow-0.14.1\n    15\tSutou Kouhei\n    10\tKrisztián Szűcs\n     5\tAntoine Pitrou\n     5\tWes McKinney\n     2\tDavid Li\n     2\tEric Erhardt\n     2\tJoris Van den Bossche\n     2\tMicah Kornfield\n     2\tYosuke Shiro\n     1\tHatem Helal\n     1\tMarco Neumann\n     1\tMarius Seritan\n     1\tNeal Richardson\n     1\tPhilipp Moritz\n     1\tTP Boudreau\n     1\tUwe L. Korn\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributor Statistics for Apache Arrow 0.17.0\nDESCRIPTION: A console command and its output showing the short log of Git commits between versions 0.16.0 and 0.17.0, sorted by number of commits per contributor. This demonstrates the distribution of contributions across 79 distinct contributors.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.17.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.16.0..apache-arrow-0.17.0\n    80\tAntoine Pitrou\n    78\tKrisztián Szűcs\n    58\tWes McKinney\n    55\tNeal Richardson\n    39\tSutou Kouhei\n    30\tBenjamin Kietzman\n    26\tJoris Van den Bossche\n    20\tAndy Grove\n    13\tliyafan82\n    11\tDavid Li\n    11\tFrançois Saint-Jacques\n     8\tMicah Kornfield\n     8\tProjjal Chanda\n     7\tMax Burke\n     7\tPrudhvi Porandla\n     6\tKenta Murata\n     6\tUwe L. Korn\n     6\tYibo Cai\n     6\ttianchen\n     5\tFrank Du\n     5\tMartin Radev\n     4\tRok\n     3\tPaddy Horan\n     3\tTakashi Hashida\n     3\tYosuke Shiro\n     3\tZhuo Peng\n     2\tBryan Cutler\n     2\tDavid Kegley\n     2\tJacek Pliszka\n     2\tJi Kunshang\n     2\tJorge C. Leitao\n     2\tJörn Horstmann\n     2\tKazuaki Ishizaki\n     2\tMarkus Westerlind\n     2\tMorgan Cassels\n     2\tRyan Murray\n     2\tSam Albers\n     2\tSiyuan\n     2\tStephanie Wang\n     2\tYuqi Gu\n     2\tgawain.bolton\n     1\tAdam Hooper\n     1\tAndreas Zimmerer\n     1\tBryant Biggs\n     1\tChao Sun\n     1\tDan Nugent\n     1\tDominik Durner\n     1\tEyal Farago-Hagag\n     1\tGrant Monroe\n     1\tHatem Helal\n     1\tIsmaël Mejía\n     1\tJohn Muehlhausen\n     1\tKen Suenobu\n     1\tKevin Conaway\n     1\tLi, Jiajia\n     1\tMahmut Bulut\n     1\tMarius van Niekerk\n     1\tMichael Chirico\n     1\tNAITOH Jun\n     1\tNeville Dipale\n     1\tOmega Gamage\n     1\tOnur Satici\n     1\tPalmer Lao\n     1\tPaul Balanca\n     1\tPrudhvi\n     1\tRavindra Wagh\n     1\tRichard Artoul\n     1\tSebastien Binet\n     1\tTP Boudreau\n     1\tTarek Allam\n     1\tTobias Mayer\n     1\tYuan Zhou\n     1\tZherui Cao\n     1\tandy-thomason\n     1\tcaleboverman\n     1\tmubai\n     1\tpsuman\n     1\travindra-wagh\n     1\twenjun.swj\n```\n\n----------------------------------------\n\nTITLE: Generating Git Contributor Statistics for Apache Arrow 15.0.0\nDESCRIPTION: This console command uses git shortlog to generate statistics on the number of commits per contributor between Apache Arrow versions 14.0.2 and 15.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/15.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-14.0.2..apache-arrow-15.0.0\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors for Apache Arrow 0.15.1 Release\nDESCRIPTION: This Git command shows the shortlog of commits between versions 0.15.0 and 0.15.1, listing contributors and their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.15.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.15.0..apache-arrow-0.15.1\n    10\tWes McKinney\n    10\tAntoine Pitrou\n     7\tKrisztián Szűcs\n     2\ttianchen92\n     2\tJoris Van den Bossche\n     2\tSutou Kouhei\n     2\tAnthony Abate\n     1\tUwe L. Korn\n     1\tPrudhvi Porandla\n     1\tYuqi Gu\n     1\tptaylor\n     1\tRick Cobb\n     1\ttianchen\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committers for Apache Arrow 11.0.0\nDESCRIPTION: This command lists the Apache committers who merged contributed patches to the repository between versions 10.0.0 and 11.0.0. The output shows the committers organized by the number of patches they signed off on.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/11.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-10.0.0..apache-arrow-11.0.0\n   148\tSutou Kouhei\n    89\tAntoine Pitrou\n    50\tJoris Van den Bossche\n    36\tDavid Li\n    36\tMatt Topol\n    34\tWeston Pace\n    24\tDewey Dunnington\n    24\tNic Crane\n    16\tJacob Wujciak-Jens\n    13\tWill Jones\n     8\tNeal Richardson\n     6\tRaúl Cumplido\n     6\tYibo Cai\n     4\tAlessandro Molina\n     4\tRok Mihevc\n     3\tDominik Moritz\n     3\tJonathan Keane\n     2\tAlenka Frim\n     1\tMicah Kornfield\n     1\tdependabot[bot]\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for Apache Arrow 0.11.0\nDESCRIPTION: Shell command showing git shortlog statistics of contributors between versions 0.10.0 and 0.11.0, sorted by number of commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.11.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.10.0..apache-arrow-0.11.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Statistics for Ballista 0.9.0 Release\nDESCRIPTION: This code snippet shows a formatted list of contributors and their commit counts for the Ballista 0.9.0 release. It provides insight into the development effort and community involvement in this release.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-28-ballista-0.9.0.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    22  Andy Grove\n    12  yahoNanJing\n     6  Daniël Heres\n     4  Brent Gardner\n     4  dependabot[bot]\n     4  r.4ntix\n     3  Stefan Stanciulescu\n     3  mingmwang\n     2  Ken Suenobu\n     2  Yang Jiang\n     1  Metehan Yıldırım\n     1  Trent Feda\n     1  askoa\n     1  yangzhong\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors for Apache Arrow 0.9.0 Release\nDESCRIPTION: This shell command uses git shortlog to display a list of contributors and their commit counts between Apache Arrow versions 0.8.0 and 0.9.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.9.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.8.0..apache-arrow-0.9.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributor Statistics for ADBC 0.4.0 Release\nDESCRIPTION: This Git command generates a summary of contributions to the ADBC project between versions 0.3.0 and 0.4.0, excluding automated contributions from dependabot. It shows the number of commits per contributor.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-05-15-adbc-0.4.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.3.0..apache-arrow-adbc-0.4.0\n    31\tDavid Li\n    15\tSutou Kouhei\n     9\tDewey Dunnington\n     7\tWilliam Ayd\n     5\tMatt Topol\n     1\tJacob Marble\n     1\tTornike Gurgenidze\n     1\teitsupi\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors Shell Command\nDESCRIPTION: Shell command showing git shortlog to list contributors and their commit counts between versions 0.7.1 and 0.8.0 of Apache Arrow\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.8.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.7.1..apache-arrow-0.8.0\n```\n\n----------------------------------------\n\nTITLE: Generating Contributor List in Shell\nDESCRIPTION: This shell command uses git to generate a sorted list of contributors and their commit counts between Apache Arrow versions 0.9.0 and 0.10.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.10.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.9.0..apache-arrow-0.10.0\n```\n\n----------------------------------------\n\nTITLE: Git Patch Committers Statistics for Apache Arrow 19.0.1\nDESCRIPTION: Displays the number of patches merged by Apache committers between versions 19.0.0 and 19.0.1 using git shortlog with signed-off-by trailer grouping.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/19.0.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-19.0.0..apache-arrow-19.0.1\n     5\tRaúl Cumplido\n     4\tAntoine Pitrou\n     2\tBryce Mecum\n     2\tGang Wu\n     2\tSutou Kouhei\n     1\tJoris Van den Bossche\n     1\tRossi Sun\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors using Git Shell Command\nDESCRIPTION: This shell command uses git shortlog to list contributors and their commit counts between Apache Arrow versions 0.7.0 and 0.7.1. It provides a quick overview of who contributed to this minor release.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.7.1.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.7.0..apache-arrow-0.7.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit Statistics for Apache Arrow 9.0.0 Release\nDESCRIPTION: A console command and its output showing the commit statistics by contributor for the Apache Arrow 9.0.0 release, listing authors and their commit counts sorted by number of contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/9.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-8.0.0..apache-arrow-9.0.0\n    65\tSutou Kouhei\n    56\tRaúl Cumplido\n    26\tDavid Li\n    25\tJacob Wujciak-Jens\n    25\tNeal Richardson\n    23\tWill Jones\n    17\tAlenka Frim\n    16\tDragoș Moldovan-Grünfeld\n    15\tAntoine Pitrou\n    14\tWeston Pace\n    14\tVibhatha Lakmal Abeykoon\n    12\tKrisztián Szűcs\n    10\tRok Mihevc\n     9\tWes McKinney\n     9\tYibo Cai\n     8\tdavid dali susanibar arce\n     7\tMatt Topol\n     6\tAlessandro Molina\n     6\trtpsw\n     6\tTodd Farmer\n     6\tMatthew Topol\n     5\tMatt DePero\n     5\tJoris Van den Bossche\n     5\tSasha Krassovsky\n     4\tJeroen van Straten\n     4\tHongze Zhang\n     4\tMark Wolfe\n     4\tIvan Chau\n     4\tNic Crane\n     4\tLarry White\n     3\tVibhatha Abeykoon\n     3\tSanjiban Sengupta\n     3\tSHIMA Tatsuya\n     3\tVinícius Roque\n     3\tmichalursa\n     3\teitsupi\n     3\tJohnnathan\n     3\tpalak-9202\n     2\tSG011\n     2\tAlvinJ15\n     2\tAnthony Louis\n     2\tDewey Dunnington\n     2\tJabari Booker\n     2\tJohnnathan Almeida\n     2\tKazuaki Ishizaki\n     2\tMuthunagappan Muthuraman\n     2\tPaul Taylor\n     2\tPhillip Cloud\n     2\tSahaj Gupta\n     2\tWilliam Hyun\n     2\tYaron Gvili\n     2\toctalene\n     2\tokadakk\n     1\tMathias Michael\n     1\tJürgen Walter\n     1\tJin Chengcheng\n     1\tMaya Anderson\n     1\tMin-Young Wu\n     1\tokadak\n     1\tJacky Lee\n     1\tJabariBooker\n     1\tNicola Crane\n     1\tzhang chaoming\n     1\tAlexandre de Siqueira\n     1\tPhillip LeBlanc\n     1\tPrzemysław Kowolik\n     1\tRafael Telles\n     1\tIan Cook\n     1\tRishabh Rana\n     1\tRobert Purdom\n     1\tHideaki Hayashi\n     1\tHamish Nicholson\n     1\tEven Rouault\n     1\tpschou\n     1\tSam Albers\n     1\tEric Erhardt\n     1\tElenaHenderson\n     1\tSaul Pwanson\n     1\tSten Larsson\n     1\tEdward Visel\n     1\tThomas Powell\n     1\tTobias Zagorni\n     1\tDominik Moritz\n     1\tDominic Barnes\n     1\tDanielle Navarro\n     1\tChristopher D. Higgins\n     1\tChris Casola\n     1\tAustin Dickey\n     1\tAriana Villegas\n     1\tWilliam Ayd\n     1\tWilliam Butler\n     1\tAlexandre Crayssac\n     1\tWilliamWhispell\n     1\tstczwd\n     1\tAnja Kefala\n     1\tYuqi Gu\n     1\talexandreyc\n     1\talexdesiqueira\n     1\tAndy Teucher\n     1\tAmir Khosroshahi\n     1\temkornfield\n     1\tkarldw\n     1\tlfygh\n     1\tAlvin Chunga\n     1\tnullptr\n     1\tzagto\n     1\tKshiteej K\n     1\tLi Jin\n     1\tLiang-Chi Hsieh\n     1\tLing Jin\n     1\tKonstantin Ilchenko\n     1\tMartin Liu\n     1\tMasato Kato\n     1\tKBambrick1\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributors for Apache Arrow 0.6.0 Release\nDESCRIPTION: Shell command that uses git shortlog to display the number of contributions by author between Apache Arrow versions 0.5.0 and 0.6.0. This shows the 17 contributors who participated in this release cycle.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.6.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.5.0..apache-arrow-0.6.0\n    48  Wes McKinney\n     7  siddharth\n     5  Matt Darwin\n     5  Max Risuhin\n     5  Philipp Moritz\n     4  Kouhei Sutou\n     3  Bryan Cutler\n     2  Emilio Lahr-Vivaz\n     2  Li Jin\n     2  Robert Nishihara\n     1  Antony Mayi\n     1  Marco Neumann\n     1  Stepan Kadlec\n     1  Steven Phillips\n     1  Yeolar\n     1  fjetter\n     1  rendel\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Summary Command Output\nDESCRIPTION: Console output showing git shortlog command results listing contributors and their commit counts between Apache Arrow versions 0.17.0 and 1.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/1.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.17.0..apache-arrow-1.0.0\n   125\tWes McKinney\n    72\tNeal Richardson\n    61\tAntoine Pitrou\n    56\tSutou Kouhei\n    55\tKrisztián Szűcs\n    30\tJoris Van den Bossche\n    24\tBenjamin Kietzman\n    23\tDavid Li\n    21\tKazuaki Ishizaki\n    19\tQingping Hou\n    18\tAndy Grove\n    18\tFrançois Saint-Jacques\n    17\tNeville Dipale\n    16\tYibo Cai\n    16\tliyafan82\n    15\tRyan Murray\n    14\tMicah Kornfield\n    10\tUwe L. Korn\n     9\tPaddy Horan\n     8\tJorge C. Leitao\n     8\tProjjal Chanda\n     7\tFrank Du\n     7\tRomain Francois\n     6\tKenta Murata\n     6\tMaarten A. Breddels\n     6\tMax Burke\n     5\tMahmut Bulut\n     4\tMark Hildreth\n     4\tYuan Zhou\n     3\tAdam Szmigin\n     3\tRaphael Taylor-Davies\n     3\tZhuo Peng\n     3\trdettai\n     2\tBobby Wagner\n     2\tEric Erhardt\n     2\tPrudhvi Porandla\n     2\tR. Tyler Croy\n     2\tSagnik Chakraborty\n     2\tVamsi\n     2\tYordan Pavlov\n     2\tc-jamie\n     2\tdota17\n     2\tmayuropensource\n     2\ttianchen\n     2\ttianchen92\n     1\tAlex Baden\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors using Git Shortlog in Shell\nDESCRIPTION: A shell command that generates a list of contributors to the Apache Arrow project between versions 0.4.1 and 0.5.0, sorted by number of commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.5.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.4.1..apache-arrow-0.5.0\n    42  Wes McKinney\n    22  Uwe L. Korn\n    12  Kouhei Sutou\n     9  Max Risuhin\n     9  Phillip Cloud\n     6  Philipp Moritz\n     5  Steven Phillips\n     3  Julien Le Dem\n     2  Bryan Cutler\n     2  Kengo Seki\n     2  Max Risukhin\n     2  fjetter\n     1  Antony Mayi\n     1  Deepak Majeti\n     1  Fang Zheng\n     1  Hideo Hattori\n     1  Holden Karau\n     1  Itai Incze\n     1  Jeff Knupp\n     1  LynnYuan\n     1  Mark Lavrynenko\n     1  Michael König\n     1  Robert Nishihara\n     1  Sudheesh Katkam\n     1  Zahari\n     1  vkorukanti\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Statistics in Console\nDESCRIPTION: Console output showing the list of contributors to Apache Arrow 6.0.0 release with their commit counts. The release includes 592 commits from 88 distinct contributors.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/6.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n 58 David Li\n 56 Antoine Pitrou\n 46 Neal Richardson\n 42 Sutou Kouhei\n 38 Jonathan Keane\n 34 Krisztián Szűcs\n 27 Matthew Topol\n 26 Nic Crane\n 23 Andrew Lamb\n 22 Joris Van den Bossche\n 21 Weston Pace\n 16 Alessandro Molina\n 15 Yibo Cai\n 10 Eduardo Ponce\n 9 Benson Muite\n 9 Rok\n 9 Micah Kornfield\n 8 liyafan82\n 8 michalursa\n 8 Benjamin Kietzman\n 8 Carlos O'Ryan\n 8 Ben Chambers\n 8 Navin\n 7 Alexander\n 7 Jiayu Liu\n 6 Phillip Cloud\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor List in Shell\nDESCRIPTION: Shell command displaying the git shortlog of contributors between Apache Arrow 0.4.0 and 0.4.1 releases, showing the number of commits per contributor.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.4.1.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.4.0..apache-arrow-0.4.1\n    16  Wes McKinney\n     5  Julien Le Dem\n     4  Kouhei Sutou\n     2  Jacob Scott\n     1  Brian Hulette\n     1  Jeff Knupp\n     1  Jeff Reback\n     1  Max Risuhin\n     1  Phillip Cloud\n     1  Tony Kelman\n     1  Uwe L. Korn\n     1  adeneche\n     1  kimanjun\n     1  rip.nsk\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for ADBC 0.1.0\nDESCRIPTION: Git shortlog command showing contributor statistics for the ADBC 0.1.0 release, excluding dependabot contributions. Shows commit counts per author between specified commit hashes.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-01-12-adbc-0.1.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn fe96ea9186194af06f4a229b6e5a57815f05f6bd..apache-arrow-adbc-0.1.0\n   169\tDavid Li\n    12\tSutou Kouhei\n     5\tMatt Topol\n     2\tDewey Dunnington\n     1\tAsh\n     1\tJudah Rand\n     1\tRaúl Cumplido\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors with Git Shortlog for Apache Arrow 0.16.0\nDESCRIPTION: A Git shortlog command that displays the number of commits per contributor between Apache Arrow versions 0.15.1 and 0.16.0. The output shows 99 distinct contributors with Antoine Pitrou, Sutou Kouhei, and Neal Richardson being the top contributors.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.16.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.15.1..apache-arrow-0.16.0\n    84\tAntoine Pitrou\n    80\tSutou Kouhei\n    50\tNeal Richardson\n    47\tKrisztián Szűcs\n    44\tJoris Van den Bossche\n    41\tWes McKinney\n    32\tFrançois Saint-Jacques\n    30\tliyafan82\n    27\ttianchen\n    26\tBenjamin Kietzman\n    19\tAndy Grove\n    16\tKazuaki Ishizaki\n    14\tKenta Murata\n    13\tNeville Dipale\n    12\tProjjal Chanda\n     9\tgawain.bolton\n     8\tDavid Li\n     6\tPrudhvi Porandla\n     6\tRenjie Liu\n     6\tYibo Cai\n     6\tYosuke Shiro\n     5\tBryan Cutler\n     5\tFokko Driesprong\n     5\tOr Ozeri\n     5\tSebastien Binet\n     5\tUwe L. Korn\n     5\tZhuo Peng\n     4\tGurwinder Singh\n     4\tKyle McCarthy\n     4\tMicah Kornfield\n     3\tAnthony Abate\n     3\tPaddy Horan\n     3\tRok\n     3\tmacx\n     3\ttakashi hashida\n     2\tAdam Lippai\n     2\tDanyang Zhuo\n     2\tGal Lushi\n     2\tJonathan A. Sternberg\n     2\tMartin Grund\n     2\tPindikura Ravindra\n     2\tRohit Gupta\n     2\tRomain Francois\n     2\tStéphane Campinas\n     2\tYuqi Gu\n     2\tczxrrr\n     2\ttianchen92\n     1\tAdam Krebs\n     1\tAlexis Mignon\n     1\tArtem\n     1\tArtem Alekseev\n     1\tBob Skowron\n     1\tBrian Gold\n     1\tBrian Hulette\n     1\tBrian Wignall\n     1\tBruce Mitchener\n     1\tChristopher Hutchinson\n     1\tDavis Silverman\n     1\tDmitry Kalinkin\n     1\tDonatien Criaud\n     1\tEric Erhardt\n     1\tFabian Höring\n     1\tFrançois Garillot\n     1\tGawain Bolton\n     1\tHa Thi Tham\n     1\tHengruo Zhang\n     1\tHiroaki Yutani\n     1\tHongze Zhang\n     1\tJim Apple\n     1\tJohn Muehlhausen\n     1\tJohn Norris\n     1\tKazuma Furuhashi\n     1\tKeith Hughitt\n     1\tKornelijus Survila\n     1\tLi, Jiajia\n     1\tMaarten Ballintijn\n     1\tMaarten Breddels\n     1\tMatteo Figus\n     1\tMatthew Franglen\n     1\tNick Poorman\n     1\tNoel Hustler\n     1\tOnur Satici\n     1\tPasha Stetsenko\n     1\tPeter Hoffmann\n     1\tPhilipp Moritz\n     1\tRick Cobb\n     1\tRong Rong\n     1\tTakashi Hashida\n     1\tTaylor Baldwin\n     1\tWakahisa\n     1\tXavier Lacroze\n     1\tZherui Cao\n     1\tfrancois-blanchard\n     1\tgnguy\n     1\tkarldw\n     1\tlmeyerov\n     1\tluozijun\n     1\tptaylor\n     1\troot\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers in Git Console\nDESCRIPTION: Git command to list Apache committers who merged contributed patches to the repository between versions 0.13.0 and 0.14.0 of Apache Arrow.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.14.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.13.0..apache-arrow-0.14.0\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors for Apache Arrow 0.2.0\nDESCRIPTION: Git shortlog command showing contributor statistics between Apache Arrow versions 0.1.0 and 0.2.0, displaying the number of commits and contributor names.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.2.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.1.0..apache-arrow-0.2.0\n    73  Wes McKinney\n    55  Uwe L. Korn\n    16  Julien Le Dem\n     4  Bryan Cutler\n     4  Nong Li\n     2  Christopher C. Aycock\n     2  Jingyuan Wang\n     2  Kouhei Sutou\n     2  Laurent Goujon\n     2  Leif Walsh\n     1  Emilio Lahr-Vivaz\n     1  Holden Karau\n     1  Li Jin\n     1  Mohamed Zenadi\n     1  Peter Hoffmann\n     1  Steven Phillips\n     1  adeneche\n     1  ahnj\n     1  vkorukanti\n```\n\n----------------------------------------\n\nTITLE: Contributor List for Apache Arrow ADBC 0.7.0\nDESCRIPTION: A git shortlog command showing the contributors to the Apache Arrow ADBC 0.7.0 release, excluding dependabot contributions. It lists 8 distinct contributors and their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-09-23-adbc-0.7.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.6.0..apache-arrow-adbc-0.7.0\n    26\tDavid Li\n     7\tDewey Dunnington\n     7\tWilliam Ayd\n     2\tElenaHenderson\n     1\tMatt Topol\n     1\tSolomon Choe\n     1\tSutou Kouhei\n     1\tdavidhcoe\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers for Apache Arrow 0.14.1\nDESCRIPTION: Git command output showing the Apache committers who merged patches to the repository for the 0.14.1 release, executed using git shortlog between version tags with their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.14.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.14.0..apache-arrow-0.14.1\n    43\tWes McKinney\n     9\tKrisztián Szűcs\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors for Apache Arrow 0.1.0\nDESCRIPTION: Shell command showing git shortlog output to display contributors and their commit counts between version d5aa7c46 and apache-arrow-0.1.0 tag.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.1.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn d5aa7c46..apache-arrow-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committers Using Git in Console\nDESCRIPTION: This snippet shows the output of git shortlog to display the number of patches merged by Apache committers between Arrow 2.0.0 and 3.0.0 releases. It shows which committers were responsible for merging contributed patches to the repository.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/3.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-2.0.0..apache-arrow-3.0.0\n   100\tAndrew Lamb\n    88\tAntoine Pitrou\n    76\tSutou Kouhei\n    70\tJorge C. Leitao\n    69\tNeville Dipale\n    54\tKrisztián Szűcs\n    44\tNeal Richardson\n    40\tAndy Grove\n    26\tBenjamin Kietzman\n    19\tJoris Van den Bossche\n    12\tDavid Li\n     8\tliyafan82\n     7\tUwe L. Korn\n     7\talamb\n     6\tMicah Kornfield\n     5\tPraveen\n     4\tBryan Cutler\n     4\tEric Erhardt\n     2\tGitHub\n     2\tPaddy Horan\n     2\tPindikura Ravindra\n     2\tWes McKinney\n     1\tSebastien Binet\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers for Apache Arrow 0.15.1 Release\nDESCRIPTION: This Git command shows the shortlog of commits between versions 0.15.0 and 0.15.1, listing patch committers and their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.15.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.15.0..apache-arrow-0.15.1\n    41\tKrisztián Szűcs\n```\n\n----------------------------------------\n\nTITLE: Git Contributors List Command\nDESCRIPTION: Git command to show contributor statistics between versions 7.0.0 and 9.0.0 of Apache Arrow Rust, displaying the number of commits per author.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-02-13-rust-9.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit shortlog -sn 7.0.0..9.0.0\n    22  Raphael Taylor-Davies\n    18  Andrew Lamb\n     6  Helgi Kristvin Sigurbjarnarson\n     6  Remzi Yang\n     5  Jörn Horstmann\n     4  Liang-Chi Hsieh\n     3  Jiayu Liu\n     2  dependabot[bot]\n     2  Yijie Shen\n     1  Matthew Turner\n     1  Kun Liu\n     1  Yang\n     1  Edd Robinson\n     1  Patrick More\n```\n\n----------------------------------------\n\nTITLE: Patch Committer Statistics - Apache Arrow 0.12.0\nDESCRIPTION: Git shortlog command showing Apache committers who merged patches between versions 0.11.0 and 0.12.0. Lists 13 committers with their merge counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.12.0.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.11.0..apache-arrow-0.12.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributors for Apache Arrow 0.17.1\nDESCRIPTION: Console command and output showing git shortlog to list contributors and their commit counts between versions 0.17.0 and 0.17.1\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.17.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.17.0..apache-arrow-0.17.1\n     9\tKrisztián Szűcs\n     4\tSutou Kouhei\n     3\tNeal Richardson\n     3\tWes McKinney\n     2\tAntoine Pitrou\n     1\tEric Erhardt\n     1\tJoris Van den Bossche\n     1\tMicah Kornfield\n     1\tPaul Taylor\n     1\tYibo Cai\n     1\tYuan Zhou\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Contributor Statistics for Apache Arrow-rs Repository\nDESCRIPTION: A Git command to display a shortlog of contributors to the arrow-rs repository between versions 9.0.0 and 16.0.0, sorted by number of commits. This demonstrates the community effort behind the project's development.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-06-16-rust-16.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit shortlog -sn 9.0.0..16.0.0\n    47  Liang-Chi Hsieh\n    45  Raphael Taylor-Davies\n    43  Andrew Lamb\n    40  Remzi Yang\n     8  Sergey Glushchenko\n     7  Jörn Horstmann\n     6  Shani Solomon\n     6  dependabot[bot]\n     5  Yang Jiang\n     4  jakevin\n     4  Chao Sun\n     4  Yijie Shen\n     3  kazuhiko kikuchi\n     2  Sumit\n     2  Ismail-Maj\n     2  Kamil Konior\n     2  tfeda\n     2  Matthew Turner\n     1  iyupeng\n     1  ryan-jacobs1\n     1  Alex Qyoun-ae\n     1  tjwilson90\n     1  Andy Grove\n     1  Atef Sawaed\n     1  Daniël Heres\n     1  DuRipeng\n     1  Helgi Kristvin Sigurbjarnarson\n     1  Kun Liu\n     1  Kyle Barron\n     1  Marc Garcia\n     1  Peter C. Jentsch\n     1  Remco Verhoef\n     1  Sven Cattell\n     1  Thomas Peiselt\n     1  Tiphaine Ruy\n     1  Trent Feda\n     1  Wang Fenjin\n     1  Ze'ev Maor\n     1  diana\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committers in Console Output\nDESCRIPTION: A console output showing the list of Apache committers who merged contributed patches to Arrow repositories for the 5.0.0 release, along with the number of patches each committer merged.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/5.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n96  Antoine Pitrou\n69  Sutou Kouhei\n63  David Li\n59  Krisztián Szűcs\n36  Jonathan Keane\n33  Benjamin Kietzman\n33  Neal Richardson\n27  Andrew Lamb\n22  Ian Cook\n22  Praveen\n21  Jorge C. Leitao\n19  Yibo Cai\n16  Dominik Moritz\n16  Joris Van den Bossche\n15  Jiayu Liu\n12  GitHub\n12  Ritchie Vink\n11  Micah Kornfield\n10  Wakahisa\n8  Jorge Leitao\n8  Raphael Taylor-Davies\n6  Daniël Heres\n5  Andy Grove\n5  Jörn Horstmann\n5  liyafan82\n5  Navin\n5  Weston Pace\n4  Ádám Lippai\n4  Marco Neumann\n3  Brian Hulette\n3  Michael Edwards\n3  Roee Shlomo\n2  Eric Erhardt\n2  Gary Pennington\n2  Steven\n2  Uwe L. Korn\n2  Wes McKinney\n1  baishen\n1  Ben Chambers\n1  Boaz\n1  Bryan Cutler\n1  Chojan Shang\n1  Dmitry Patsura\n1  Edd Robinson\n1  Gang Liao\n1  hulunbier\n1  ishizaki\n1  Kazuaki Ishizaki\n1  kazuhiko kikuchi\n1  Kornelijus Survila\n1  Laurent Mazare\n1  Manish Gill\n1  Marc van Heerden\n1  Max Meldrum\n1  Yordan Pavlov\n```\n\n----------------------------------------\n\nTITLE: Patch Committer Statistics - Apache Arrow 8.0.0\nDESCRIPTION: Git shortlog showing Apache committers who merged patches between versions 7.0.0 and 8.0.0, listing committers and their merge counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/8.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-7.0.0..apache-arrow-8.0.0\n   105\tDavid Li\n   102\tAntoine Pitrou\n    84\tSutou Kouhei\n    72\tJonathan Keane\n    47\tKrisztián Szűcs\n    46\tJoris Van den Bossche\n    30\tWeston Pace\n    25\tNic Crane\n    23\tPindikura Ravindra\n    22\tMatthew Topol\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributor Statistics for Apache Arrow 0.3.0\nDESCRIPTION: Shell command using git shortlog to show the number of commits per contributor between Apache Arrow versions 0.2.0 and 0.3.0, sorted by number of contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.3.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.2.0..apache-arrow-0.3.0\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors for DataFusion 7.0.0 Release\nDESCRIPTION: This code snippet shows a Git command to list contributors and their commit counts for the DataFusion 7.0.0 release. It demonstrates how to use Git's shortlog feature to generate a summary of contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-02-28-datafusion-7.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    44  Andrew Lamb\n    24  Kun Liu\n    23  Jiayu Liu\n    17  xudong.w\n    11  Yijie Shen\n     9  Matthew Turner\n     7  Liang-Chi Hsieh\n     5  Lin Ma\n     4  Stephen Carman\n     4  James Katz\n     4  Dmitry Patsura\n     4  QP Hou\n     3  dependabot[bot]\n     3  Remzi Yang\n     3  Yang\n     3  ic4y\n     3  Daniël Heres\n     2  Andy Grove\n     2  Raphael Taylor-Davies\n     2  Jason Tianyi Wang\n     2  Dan Harris\n     2  Sergey Melnychuk\n     1  Nitish Tiwari\n     1  Dom\n     1  Eduard Karacharov\n     1  Javier Goday\n     1  Boaz\n     1  Marko Mikulicic\n     1  Max Burke\n     1  Carol (Nichols || Goulding)\n     1  Phillip Cloud\n     1  Rich\n     1  Toby Hede\n     1  Will Jones\n     1  r.4ntix\n     1  rdettai\n```\n\n----------------------------------------\n\nTITLE: Contributor Git Statistics - Apache Arrow 8.0.0\nDESCRIPTION: Git shortlog showing commit counts per contributor between versions 7.0.0 and 8.0.0, displaying the top contributors and their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/8.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-7.0.0..apache-arrow-8.0.0\n    43\tAntoine Pitrou\n    40\tDavid Li\n    39\tSutou Kouhei\n    36\tAlenka Frim\n    29\tWeston Pace\n    25\tRok\n    22\tDragoș Moldovan-Grünfeld\n    22\tJoris Van den Bossche\n    20\tJonathan Keane\n    20\tKrisztián Szűcs\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers Shell Command\nDESCRIPTION: Shell command showing git shortlog to list Apache committers who committed patches between versions 0.7.0 and 0.8.0\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.8.0.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.7.0..apache-arrow-0.8.0\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics Output\nDESCRIPTION: Git commit statistics showing contributor names and number of commits for the DataFusion 6.0.0 release period.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-11-8-datafusion-6.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    28  Andrew Lamb\n    26  Jiayu Liu\n    13  xudong963\n     9  rdettai\n     9  QP Hou\n     6  Matthew Turner\n     5  Daniël Heres\n     4  Guillaume Balaine\n     3  Francis Du\n     3  Marco Neumann\n     3  Jon Mease\n     3  Nga Tran\n     2  Yijie Shen\n     2  Ruihang Xia\n     2  Liang-Chi Hsieh\n     2  baishen\n     2  Andy Grove\n     2  Jason Tianyi Wang\n     1  Nan Zhu\n     1  Antoine Wendlinger\n     1  Krisztián Szűcs\n     1  Mike Seddon\n     1  Conner Murphy\n     1  Patrick More\n     1  Taehoon Moon\n     1  Tiphaine Ruy\n     1  adsharma\n     1  lichuan6\n```\n\n----------------------------------------\n\nTITLE: Patch Committer Statistics for Apache Arrow 10.0.0\nDESCRIPTION: Shows git shortlog output listing Apache committers who merged contributed patches, grouped by signed-off-by trailer between versions 9.0.0 and 10.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/10.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-9.0.0..apache-arrow-10.0.0\n   126\tSutou Kouhei\n    97\tAntoine Pitrou\n    68\tDavid Li\n    59\tMatt Topol\n    41\tNeal Richardson\n    26\tJoris Van den Bossche\n    25\tWeston Pace\n    21\tNic Crane\n    13\tDewey Dunnington\n    11\tYibo Cai\n    10\tAlenka Frim\n     9\tKrisztián Szűcs\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for Apache Arrow 10.0.0\nDESCRIPTION: Shows git shortlog output listing all contributors and their commit counts between versions 9.0.0 and 10.0.0 of Apache Arrow. Includes 536 commits from 100 distinct contributors.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/10.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-9.0.0..apache-arrow-10.0.0\n    68\tSutou Kouhei\n    52\tMatt Topol\n    32\tDavid Li\n    31\tAntoine Pitrou\n    19\tAlenka Frim\n    19\tJacob Wujciak-Jens\n    19\tWeston Pace\n    18\tMiles Granger\n    18\tNic Crane\n    17\tJin Shang\n    17\tRaúl Cumplido\n    14\tNeal Richardson\n    14\teitsupi\n    12\tWill Jones\n    12\tdavid dali susanibar arce\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributor Statistics for DataFusion\nDESCRIPTION: A shell command and its output that shows the number of commits per contributor to the DataFusion project between versions 9.0.0 and 13.0.0. This provides a comprehensive list of all contributors and their relative activity levels.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-25-datafusion-13.0.0.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n    87\tAndy Grove\n    71\tAndrew Lamb\n    29\tKun Liu\n    29\tKirk Mitchener\n    17\tWei-Ting Kuo\n    14\tYang Jiang\n    12\tRaphael Taylor-Davies\n    11\tBatuhan Taskaya\n    10\tBrent Gardner\n    10\tRemzi Yang\n    10\tcomphead\n    10\txudong.w\n     8\tAssHero\n     7\tRuihang Xia\n     6\tDan Harris\n     6\tDaniël Heres\n     6\tIan Alexander Joiner\n     6\tMike Roberts\n     6\taskoa\n     4\tBaymaxHWY\n     4\tgorkem\n     4\tjakevin\n     3\tGeorge Andronchik\n     3\tSarah Yurick\n     3\tStuart Carnie\n     2\tDalton Modlin\n     2\tDmitry Patsura\n     2\tJasonLi\n     2\tJon Mease\n     2\tMarco Neumann\n     2\tyahoNanJing\n     1\tAdilet Sarsembayev\n     1\tAyush Dattagupta\n     1\tDezhi Wu\n     1\tDhamotharan Sritharan\n     1\tEduard Karacharov\n     1\tFrancis Du\n     1\tHarbour Zheng\n     1\tIsmaël Mejía\n     1\tJack Klamer\n     1\tJeremy Dyer\n     1\tJiayu Liu\n     1\tKamil Konior\n     1\tLiang-Chi Hsieh\n     1\tMartin Grigorov\n     1\tMatthijs Brobbel\n     1\tMehmet Ozan Kabak\n     1\tMetehan Yıldırım\n     1\tMorgan Cassels\n     1\tNitish Tiwari\n     1\tRenjie Liu\n     1\tRito Takeuchi\n     1\tRobert Pack\n     1\tThomas Cameron\n     1\tVrishabh\n     1\tXin Hao\n     1\tYijie Shen\n     1\tbyteink\n     1\tkamille\n     1\tmateuszkj\n     1\tnvartolomei\n     1\tyourenawo\n     1\tÖzgür Akkurt\n```\n\n----------------------------------------\n\nTITLE: Git Patch Committers Summary - Apache Arrow 14.0.1\nDESCRIPTION: Git shortlog showing Apache committers who merged patches between versions 14.0.0 and 14.0.1, grouped by signed-off-by trailer\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/14.0.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-14.0.0..apache-arrow-14.0.1\n     1\tRaúl Cumplido\n     1\tSutou Kouhei\n```\n\n----------------------------------------\n\nTITLE: Listing Git Shortlog for Contributors in Apache Arrow 10.0.1\nDESCRIPTION: This console command uses git shortlog to display a summary of contributors and their commit counts for the Apache Arrow 10.0.1 release.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/10.0.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-10.0.0..apache-arrow-10.0.1\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for PR Count\nDESCRIPTION: Command used to count the number of pull requests between versions 9.0.0 and 13.0.0\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-25-datafusion-13.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --pretty=oneline 9.0.0..13.0.0 . | wc -l\n```\n\n----------------------------------------\n\nTITLE: Git Shortlog for Apache Arrow 0.3.0 Release Contributors\nDESCRIPTION: This bash command displays a summary of contributors and their commit counts between Apache Arrow versions 0.2.0 and 0.3.0, sorted by number of commits. The output shows Wes McKinney with the most contributions, followed by Kouhei Sutou and others.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2017-05-08-0.3-release.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.2.0..apache-arrow-0.3.0\n    119 Wes McKinney\n     55 Kouhei Sutou\n     18 Uwe L. Korn\n     17 Julien Le Dem\n      9 Phillip Cloud\n      6 Bryan Cutler\n      5 Philipp Moritz\n      5 Emilio Lahr-Vivaz\n      4 Max Risuhin\n      4 Johan Mabille\n      4 Jeff Knupp\n      3 Steven Phillips\n      3 Miki Tebeka\n      2 Leif Walsh\n      2 Jeff Reback\n      2 Brian Hulette\n      1 Tsuyoshi Ozawa\n      1 rvernica\n      1 Nong Li\n      1 Julien Lafaye\n      1 Itai Incze\n      1 Holden Karau\n      1 Deepak Majeti\n```\n\n----------------------------------------\n\nTITLE: Rendering Committers Table in HTML and Liquid\nDESCRIPTION: This snippet creates an HTML table listing the committers of the Apache Arrow project. It uses Liquid templating to sort the data and filter for committers specifically.\nSOURCE: https://github.com/apache/arrow-site/blob/main/committers.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"table table-striped\"><thead>\n<tr>\n<th>Name</th>\n<th>Affiliation</th>\n</tr>\n</thead><tbody>\n  {% assign sorted_committers = site.data.committers | sort: \"name\" %}\n  {% for person in sorted_committers %}\n    {% if person.role == \"Committer\" %}\n  <tr>\n    <td><a href=\"https://people.apache.org/phonebook.html?uid={{ person.alias }}\">{{ person.name }}</a></td>\n    <td>{{ person.affiliation }}</td>\n  </tr>\n    {% endif %}\n  {% endfor %}\n</tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Git Shortlog Command Output for Contributors\nDESCRIPTION: Console output showing git shortlog command that lists all contributors and their commit counts between Apache Arrow versions 12.0.1 and 13.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/13.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-12.0.1..apache-arrow-13.0.0\n    83\tSutou Kouhei\n    47\tRaúl Cumplido\n    35\tNic Crane\n    26\tJoris Van den Bossche\n    25\tmwish\n    24\tWeston Pace\n    20\tsgilmore10\n    19\tFelipe Oliveira Carvalho\n    17\tAntoine Pitrou\n    16\tAlenka Frim\n    15\tMatt Topol\n    15\trtpsw\n```\n\n----------------------------------------\n\nTITLE: Git Shortlog Command for Contributor Count\nDESCRIPTION: Command used to count the number of unique contributors between versions 9.0.0 and 13.0.0\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2022-10-25-datafusion-13.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit shortlog -sn 9.0.0..13.0.0 . | wc -l\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/apache/arrow-site/blob/main/LICENSE.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Shortlog of Contributors for Apache Arrow 14.0.2\nDESCRIPTION: Shows the output of git shortlog command that lists contributors and their commit counts between Apache Arrow 14.0.1 and 14.0.2 releases. The output reveals 11 distinct contributors with Jacob Wujciak-Jens having the most commits (6).\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/14.0.2.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-14.0.1..apache-arrow-14.0.2\n     6\tJacob Wujciak-Jens\n     5\tDewey Dunnington\n     5\tRaúl Cumplido\n     5\tSutou Kouhei\n     2\tAntoine Pitrou\n     2\tJonathan Keane\n     2\tJoris Van den Bossche\n     2\tmwish\n     1\tEero Lihavainen\n     1\tNic Crane\n     1\tPeter Andreas Entschev\n```\n\n----------------------------------------\n\nTITLE: Git Contributors List Command\nDESCRIPTION: Command used to generate a list of contributors for the Apache Arrow Go v18.0.0 release, excluding dependabot contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-10-23-arrow-go-18.0.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn 8b7fde9..v18.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow with MSYS2 for Clang aarch64\nDESCRIPTION: Installs Apache Arrow C++ and GLib packages for MSYS2 using pacman package manager with Clang aarch64 configuration.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npacman -S --noconfirm mingw-w64-clang-aarch64-arrow\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Shortlog of Patch Committers for Apache Arrow 14.0.2\nDESCRIPTION: Shows the output of git shortlog command with the signed-off-by trailer group, listing Apache committers who merged patches between versions 14.0.1 and 14.0.2. Jacob Wujciak-Jens merged the most patches (11).\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/14.0.2.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-14.0.1..apache-arrow-14.0.2\n    11\tJacob Wujciak-Jens\n     4\tSutou Kouhei\n     3\tAntoine Pitrou\n     3\tDewey Dunnington\n     3\tJoris Van den Bossche\n     2\tRaúl Cumplido\n     1\tBenjamin Kietzman\n     1\tNic Crane\n     1\tmwish\n```\n\n----------------------------------------\n\nTITLE: Contributors List from Git Log in Shell\nDESCRIPTION: A git shortlog command that lists contributors to the Apache Arrow ADBC project between versions 16 and 17, excluding dependabot contributions. It shows the number of commits per contributor in descending order.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-03-07-adbc-17-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-16..apache-arrow-adbc-17\n    15\tDavid Li\n     6\tMatthijs Brobbel\n     2\tHélder Gregório\n     2\tMatt Topol\n     2\tMatthias Kuhn\n     2\tSutou Kouhei\n     2\tdavidhcoe\n     1\tCurt Hagenlocher\n     1\tFelipe Oliveira Carvalho\n     1\tFelipe Vianna\n     1\tMarius van Niekerk\n     1\tShuoze Li\n     1\tamangoyal\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow with vcpkg\nDESCRIPTION: Downloads and installs Apache Arrow C++ using the vcpkg dependency manager. Includes steps for cloning repository, bootstrapping, and installing Arrow.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install arrow\n```\n\n----------------------------------------\n\nTITLE: Generating Patch Committer Statistics for Apache Arrow 15.0.0\nDESCRIPTION: This console command uses git shortlog with custom options to generate statistics on the number of patches merged by Apache committers between Arrow versions 14.0.2 and 15.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/15.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-14.0.2..apache-arrow-15.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow via Homebrew\nDESCRIPTION: Commands to install Apache Arrow C++ and GLib packages using Homebrew package manager on macOS.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbrew install apache-arrow\nbrew install apache-arrow-glib\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow with MSYS2 for Clang x86_64\nDESCRIPTION: Installs Apache Arrow C++ and GLib packages for MSYS2 using pacman package manager with Clang x86_64 configuration.\nSOURCE: https://github.com/apache/arrow-site/blob/main/install.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npacman -S --noconfirm mingw-w64-clang-x86_64-arrow\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributor Statistics for Apache Arrow 15.0.1\nDESCRIPTION: A console command using git shortlog to display the number of commits per contributor between Apache Arrow 15.0.0 and 15.0.1 releases, showing 37 commits from 18 distinct contributors.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/15.0.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-15.0.0..apache-arrow-15.0.1\n     5\tAntoine Pitrou\n     4\tAlenka Frim\n     4\tJoris Van den Bossche\n     4\tRaúl Cumplido\n     3\tRossi(Ruoxi) Sun\n     2\tDewey Dunnington\n     2\tRossi Sun\n     2\temkornfield\n     2\tmwish\n     1\tCurt Hagenlocher\n     1\tDavid Li\n     1\tJeremy Aguilon\n     1\tLubo Slivka\n     1\tMatt Topol\n     1\tRok Mihevc\n     1\tSutou Kouhei\n     1\tTom Jarosz\n     1\tZhangHuiGui\n```\n\n----------------------------------------\n\nTITLE: Previewing Apache Arrow Website Locally\nDESCRIPTION: Command to generate and serve the website locally on http://localhost:4000/ using Jekyll and Rake.\nSOURCE: https://github.com/apache/arrow-site/blob/main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec rake\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committers for Apache Arrow 15.0.1\nDESCRIPTION: A console command using git shortlog with trailer grouping to display the Apache committers who merged contributed patches to the repository between versions 15.0.0 and 15.0.1.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/15.0.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-15.0.0..apache-arrow-15.0.1\n    12\tAntoine Pitrou\n     7\tJoris Van den Bossche\n     3\tSutou Kouhei\n     2\tAlenkaF\n     2\tDavid Li\n     2\tDewey Dunnington\n     2\tmwish\n     1\tBenjamin Kietzman\n     1\tCurt Hagenlocher\n     1\tJacob Wujciak-Jens\n     1\tMatt Topol\n```\n\n----------------------------------------\n\nTITLE: Mailing List Code Tags Example in Markdown\nDESCRIPTION: Examples of code tags used in Apache Arrow mailing lists for indicating the specific components being discussed, such as 'user@' and 'dev@' mailing list prefixes.\nSOURCE: https://github.com/apache/arrow-site/blob/main/community.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>user@</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>dev@</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>issues@</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>commits@</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>builds@</code>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<code>github@</code>\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for Apache Arrow 15.0.2\nDESCRIPTION: Shows the number of commits per contributor between versions 15.0.1 and 15.0.2 using git shortlog command.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/15.0.2.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-15.0.1..apache-arrow-15.0.2\n     4\tRaúl Cumplido\n     2\tVyas Ramasubramani\n     1\tAlenka Frim\n     1\tJonathan Keane\n     1\tSten Larsson\n     1\tSutou Kouhei\n     1\tWeston Pace\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Front Matter in Markdown\nDESCRIPTION: This code snippet defines the Jekyll front matter for the page, including layout, title, and permalink. It sets up the basic metadata for the Apache Arrow releases page.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: default\ntitle: Releases\npermalink: /release/index.html\n---\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for Apache Arrow 16.0.0\nDESCRIPTION: Console output showing git shortlog statistics of contributors between versions 15.0.2 and 16.0.0, listing the number of commits per contributor.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/16.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-15.0.2..apache-arrow-16.0.0\n    79\tdependabot[bot]\n    70\tSutou Kouhei\n    41\tAntoine Pitrou\n    31\tJoris Van den Bossche\n    28\tRaúl Cumplido\n    24\tAlenka Frim\n    19\tmwish\n    14\tFelipe Oliveira Carvalho\n    13\tJacob Wujciak-Jens\n    12\tDewey Dunnington\n    11\tDane Pitkin\n    10\tBryce Mecum\n    10\tMatt Topol\n     9\tJonathan Keane\n     9\tZhangHuiGui\n```\n\n----------------------------------------\n\nTITLE: Setting Crawler Permission Rules in robots.txt\nDESCRIPTION: Defines access permissions for web crawlers visiting the Apache Arrow website. The configuration allows all user agents ('*') to access all directories and pages on the site by using the 'Allow: /' directive.\nSOURCE: https://github.com/apache/arrow-site/blob/main/robots.txt#2025-04-09_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-Agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Displaying Apache Arrow Logo in Markdown\nDESCRIPTION: This snippet demonstrates how to embed the Apache Arrow logo image in a Markdown document using HTML img tag. It includes styling to set the maximum width of the image.\nSOURCE: https://github.com/apache/arrow-site/blob/main/powered_by.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"{{ site.baseurl }}/img/arrow-logo_horizontal_black-txt_white-bg.png\" style=\"max-width: 100%;\"/>\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors for Apache Arrow 16.1.0\nDESCRIPTION: Git shortlog command showing the number of commits per contributor between versions 16.0.0 and 16.1.0\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/16.1.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-16.0.0..apache-arrow-16.1.0\n     7\tAdam Reeve\n     7\tRaúl Cumplido\n     6\tSutou Kouhei\n     4\tDominik Moritz\n     3\tRossi Sun\n     1\tAlex Shcherbakov\n     1\tAustin Dickey\n     1\tFelipe Oliveira Carvalho\n     1\tGang Wu\n     1\tHyunseok Seo\n     1\tJacob Wujciak-Jens\n     1\tJonathan Keane\n     1\tKartik Verma\n     1\tKevin Gurney\n     1\tMike Bostock\n     1\tmwish\n```\n\n----------------------------------------\n\nTITLE: Apache License Comment Block\nDESCRIPTION: HTML comment block containing the Apache License 2.0 notice using Jekyll's comment syntax.\nSOURCE: https://github.com/apache/arrow-site/blob/main/visual_identity.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\n{% comment %}\nLicensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to you under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n{% endcomment %}\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committer Statistics for Apache Arrow 2.0.0\nDESCRIPTION: Git shortlog command showing the number of patches merged by Apache committers between Arrow 1.0.0 and 2.0.0 releases. Lists activity of patch committers who merged contributed code.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/2.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-1.0.0..apache-arrow-2.0.0\n   127\tAndy Grove\n    92\tAntoine Pitrou\n    56\tKrisztián Szűcs\n    51\tNeal Richardson\n    44\tSutou Kouhei\n    18\tJoris Van den Bossche\n    18\tMicah Kornfield\n    17\tBenjamin Kietzman\n    17\tWes McKinney\n    16\tNeville Dipale\n    12\tJorge C. Leitao\n    10\tPraveen\n     7\tPaddy Horan\n     4\tDavid Li\n     4\tEric Erhardt\n     4\tSebastien Binet\n     4\tUwe L. Korn\n     4\tliyafan82\n     3\tGitHub\n     1\tBryan Cutler\n     1\tChao Sun\n     1\ttianchen\n```\n\n----------------------------------------\n\nTITLE: Apache License Comment Block\nDESCRIPTION: Jekyll comment block containing the Apache License 2.0 header information for the blog post.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2019-04-02-0.13.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\n{% comment %}\nLicensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to you under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n{% endcomment %}\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Statistics Using Git in Console\nDESCRIPTION: This snippet shows the output of using git shortlog to display the number of commits per contributor between Apache Arrow 2.0.0 and 3.0.0 releases. It demonstrates that the release included 648 commits from 106 distinct contributors.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/3.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-2.0.0..apache-arrow-3.0.0\n    71\tJorge C. Leitao\n    64\tSutou Kouhei\n    48\tAntoine Pitrou\n    48\tHeres, Daniel\n    27\tAndy Grove\n    27\tNeville Dipale\n    24\tJoris Van den Bossche\n    19\tNeal Richardson\n    15\tBenjamin Kietzman\n    14\tCarol (Nichols || Goulding)\n    14\tUwe L. Korn\n    12\tJonathan Keane\n    12\tKrisztián Szűcs\n    11\tAndrew Lamb\n    11\tMike Seddon\n    11\tmqy\n    10\tKazuaki Ishizaki\n    10\tQingping Hou\n     8\tJörn Horstmann\n     8\tYibo Cai\n     8\talamb\n     7\tAndrew Wieteska\n     7\tIan Cook\n     7\tMahmut Bulut\n     6\tDmitry Patsura\n     6\tProjjal Chanda\n     6\tliyafan82\n     6\trdettai\n     5\tDaniel Russo\n     5\tDavid Li\n     5\tFlorian Müller\n     5\tJacob Quinn\n     5\tJames Duong\n     4\tMicah Kornfield\n     4\tWeston Pace\n     3\tJimmy Lu\n     3\tMaarten A. Breddels\n     3\tTerence D. Honles\n     3\tWill Jones\n     2\tBei\n     2\tBenjamin Wilhelm\n     2\tChristian Lundgren\n     2\tDaniël Heres\n     2\tEvan Chan\n     2\tFokko Driesprong\n     2\tFrançois Garillot\n     2\tGreg Bowyer\n     2\tKirill Lykov\n     2\tKyle Porter\n     2\tLyndon Bauto\n     2\tMarkus Westerlind\n     2\tSagnik Chakraborty\n     2\tSean Moran\n     2\tWes McKinney\n     2\tYordan Pavlov\n     2\tjensenrichardson\n     2\twayne\n     2\tÖstman Alexander\n     1\tBruno LE HYARIC\n     1\tChiyang Wan\n     1\tChristoph Schulze\n     1\tDiana Clarke\n     1\tEric Erhardt\n     1\tErik Fonselius\n     1\tFrank Du\n     1\tFrank Smith\n     1\tGidon Gershinsky\n     1\tH-Plus-Time\n     1\tHongze Zhang\n     1\tJake Goulding\n     1\tJeremy\n     1\tJohan Peltenburg\n     1\tJorge Leitao\n     1\tJosiah\n     1\tKopilov Aleksandr\n     1\tMarc Prud'hommeaux\n     1\tMarius van Niekerk\n     1\tMatthew Pollock\n     1\tMatthew Topol\n     1\tMichal\n     1\tMingyu Zhong\n     1\tNick Bruno\n     1\tPaddy Horan\n     1\tPavel Tiunov\n     1\tPrudhvi Porandla\n     1\tRadu Teodorescu\n     1\tRomain Francois\n     1\tRuan Pearce-Authers\n     1\tRuihang Xia\n     1\tSebastian Berg\n     1\tTao He\n     1\tTyrel Rink\n     1\tUlimo\n     1\tVivian Kong\n     1\tWeiyang Zhao\n     1\tZhuo Peng\n     1\tarw2019\n     1\tdavid\n     1\tjonathan.albrecht\n     1\tnaman1996\n     1\trjzamora\n     1\tshawnding(丁晓坤)\n     1\ttching\n     1\ttianchen\n     1\ttifflhl\n     1\txudingyu\n```\n\n----------------------------------------\n\nTITLE: Generating Git Contributor List for Apache Arrow 0.4.0 Release\nDESCRIPTION: Shell command to generate a list of contributors and their commit counts between Apache Arrow versions 0.3.0 and 0.4.0 using git shortlog.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.4.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.3.0..apache-arrow-0.4.0\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers for Apache Arrow 4.0.1\nDESCRIPTION: Git shortlog command output showing the number of patches merged by Apache committers between versions 4.0.0 and 4.0.1.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/4.0.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-4.0.0..apache-arrow-4.0.1\n    17\tKrisztián Szűcs\n     3\tJorge C. Leitao\n     1\tGitHub\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Statistics with Git shortlog for Apache Arrow 14.0.0\nDESCRIPTION: Console command that shows a list of contributors to the Apache Arrow 14.0.0 release, sorted by number of commits, obtained using git shortlog between version 13.0.0 and 14.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/14.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-13.0.0..apache-arrow-14.0.0\n    69\tSutou Kouhei\n    59\tdependabot[bot]\n    52\tsgilmore10\n    34\tNic Crane\n    28\tmwish\n    27\tRaúl Cumplido\n    25\tKevin Gurney\n    19\tAntoine Pitrou\n    19\tDewey Dunnington\n    17\tAlenka Frim\n    16\tDane Pitkin\n    16\tMatt Topol\n    13\tJoris Van den Bossche\n    12\tJin Shang\n    11\tDavid Li\n    11\tFelipe Oliveira Carvalho\n    10\tJames Duong\n     8\tCurt Hagenlocher\n     7\tJacob Wujciak-Jens\n     6\tBenjamin Kietzman\n     6\tWeston Pace\n     5\tFrederic Branczyk\n     5\tdavid dali susanibar arce\n     4\tBen Harkins\n     4\tThor\n     3\tBryce Mecum\n     3\tChris Jordan-Squire\n     3\tDiego Fernández Giraldo\n     3\tFrancis\n     3\tIan Cook\n     3\tJonathan Keane\n     3\tJunming Chen\n     3\tTim Schaub\n     3\th-vetinari\n     3\ttakuya kodama\n     2\tAbe Tomoaki\n     2\tAdam Reeve\n     2\tDominik Moritz\n     2\tElliott Brossard\n     2\tFokko Driesprong\n     2\tGang Wu\n     2\tMark Wolfe\n     2\tMatthias Loibl\n     2\tRok Mihevc\n     2\tThomas Newton\n     2\tTimothy Meehan\n     2\tVibhatha Lakmal Abeykoon\n     2\tWill Jones\n     2\tabandy\n     2\tdavidhcoe\n     2\tjeremyosterhoudt\n     2\tlambda\n     2\t谢天\n     1\t0x26res\n     1\tAlex Shcherbakov\n     1\tAlexander Grueneberg\n     1\tAngela Li\n     1\tAnja Kefala\n     1\tArkadiusz Rudny\n     1\tAshish Bailkeri\n     1\tAustin Dickey\n     1\tBruno Tremblay\n     1\tChelsea Jones\n     1\tChristian Lorentzen\n     1\tDanyaal Khan\n     1\tDavid Greiss\n     1\tDenisTarasyuk\n     1\tDonald Tolley\n     1\tEd Seidl\n     1\tEdward Visel\n     1\tEero Lihavainen\n     1\tErik McKelvey\n     1\tFernando Mayer\n     1\tFrantišek Nečas\n     1\tGeorge Godik\n     1\tHirokazu SUZUKI\n     1\tHyunseok Seo\n     1\tIkko Eltociear Ashimine\n     1\tIvan Chesnov\n     1\tJacek Stania\n     1\tJames Henderson\n     1\tJinpeng\n     1\tJoe Marshall\n     1\tJonathan Swenson\n     1\tJudah Rand\n     1\tJustin Heesemann\n     1\tKarateSnowMachine\n     1\tKevin Liu\n     1\tKuba Martin\n     1\tKyle Barron\n     1\tLaurent Goujon\n     1\tLi Jin\n     1\tMichael Lui\n     1\tMiguel Pragier\n     1\tPaul Taylor\n     1\tRajat Subhra Mukherjee\n     1\tRay Zhang\n     1\tSGZW\n     1\tSam Albers\n     1\tSlobodan Ilic\n     1\tSpencer Nelson\n     1\tSrinivas Lade\n     1\tTero Vuotila\n     1\tThomas Grainger\n     1\tTommy Setiawan\n     1\tVal Gridnev\n     1\tVitalii Tverdokhlib\n     1\tYue\n     1\tandrewchambers\n     1\thrishisd\n     1\tismail simsek\n     1\tpanbingkun\n     1\tpatrick\n     1\tpegasas\n     1\trtpsw\n     1\tyyang52\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Statistics in Console Output\nDESCRIPTION: A console output showing the list of contributors to the Apache Arrow 5.0.0 release with their respective contribution counts. The list is sorted by number of contributions, with David Li having the most at 77 commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/5.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n77  David Li\n43  Krisztián Szűcs\n42  Antoine Pitrou\n35  Dominik Moritz\n33  Nic Crane\n27  Weston Pace\n27  Sutou Kouhei\n27  Andrew Lamb\n23  Jonathan Keane\n21  Joris Van den Bossche\n17  Jorge C. Leitao\n17  Ian Cook\n16  João Pedro\n15  Jiayu Liu\n14  Yibo Cai\n14  Alessandro Molina\n13  Jorge Leitao\n12  Ritchie Vink\n12  Benjamin Kietzman\n10  niranda perera\n10  Wakahisa\n10  Matthew Topol\n9  Anthony Louis\n8  Raphael Taylor-Davies\n8  Nate Clark\n7  Eduardo Ponce\n6  Daniël Heres\n5  Neal Richardson\n5  Navin\n5  Jörn Horstmann\n5  Andy Grove\n4  crystrix\n4  Uwe L. Korn\n4  Romain Francois\n4  Rok\n4  Marco Neumann\n4  Ádám Lippai\n3  liyafan82\n3  frank400\n3  Ying Zhou\n3  Roee Shlomo\n3  Michael Edwards\n3  Matthijs Brobbel\n3  Alenka Frim\n2  Zachary Blackwood\n2  Wes McKinney\n2  Steven\n2  P42\n2  Michal Nowakiewicz\n2  Kazuaki Ishizaki\n2  Karik Isichei\n2  Jeroen Ooms\n2  Gary Pennington\n2  Diana Clarke\n2  Bryan Cutler\n1  sjgupta2\n1  sgilmore\n1  ptaylor\n1  nullptr\n1  kazuhiko kikuchi\n1  hulunbier\n1  baishen\n1  Zimo Zhang\n1  Yordan Pavlov\n1  Will Jones\n1  Steven Burns\n1  Stephen\n1  Shuai Zhang\n1  Ray Bell\n1  Projjal Chanda\n1  Pachamaltese\n1  Nick Bruno\n1  Micah Kornfield\n1  Menno Siekerman\n1  Max Meldrum\n1  Mauricio Vargas\n1  Marc van Heerden\n1  Manish Gill\n1  Maarten A. Breddels\n1  Lorenz Walthert\n1  Linan Qiu\n1  Laurent Mazare\n1  Kornelijus Survila\n1  Kevin Gurney\n1  Joris Peeters\n1  Jinpeng Zhou\n1  Jiangtao Peng\n1  Hideaki Hayashi\n1  Giordon Stark\n1  Gang Liao\n1  GALI PREM SAGAR\n1  Edd Robinson\n1  Dorian Kind\n1  Dmitry Patsura\n1  Chojan Shang\n1  Boaz\n1  Ben Chambers\n1  Alex Baden\n1  Adam Johnson\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committer Statistics in Console\nDESCRIPTION: Console output showing Apache committers who merged contributed patches to the repository, along with their merge counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/6.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n 159 Antoine Pitrou\n 81 Neal Richardson\n 73 Sutou Kouhei\n 73 Andrew Lamb\n 49 Krisztián Szűcs\n 49 Jonathan Keane\n 43 David Li\n 24 Benjamin Kietzman\n 21 Matt Topol\n 18 Joris Van den Bossche\n 17 Micah Kornfield\n 16 Wakahisa\n 13 Weston Pace\n 13 Yibo Cai\n 7 Praveen\n 6 Nic Crane\n 6 Daniël Heres\n 4 Ian Cook\n 3 Phillip Cloud\n 3 Eric Erhardt\n 3 Bryan Cutler\n 3 Dominik Moritz\n 3 QP Hou\n 2 liyafan82\n 2 Chao Sun\n```\n\n----------------------------------------\n\nTITLE: Generating Git Contributor Summary for Apache Arrow 7.0.0\nDESCRIPTION: Console command and output showing git shortlog to list contributors and their commit counts between versions 6.0.0 and 7.0.0\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/7.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-6.0.0..apache-arrow-7.0.0\n    78\tAntoine Pitrou\n    49\tSutou Kouhei\n    44\tKrisztián Szűcs\n    39\tDavid Li\n    35\tNic Crane\n    34\tAlenka Frim\n    28\tCarlos O'Ryan\n    27\tJonathan Keane\n    22\tWeston Pace\n    21\tJoris Van den Bossche\n```\n\n----------------------------------------\n\nTITLE: Generating Git Contributor Statistics for Apache Arrow 4.0.0\nDESCRIPTION: This console command generates a list of contributors and their commit counts for the Apache Arrow 4.0.0 release, compared to the previous 3.0.0 release.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/4.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-3.0.0..apache-arrow-4.0.0\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Committers for Apache Arrow 7.0.0\nDESCRIPTION: Console command and output showing git shortlog to list Apache committers who merged contributed patches between versions 6.0.0 and 7.0.0\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/7.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-6.0.0..apache-arrow-7.0.0\n   149\tAntoine Pitrou\n    85\tKrisztián Szűcs\n    73\tSutou Kouhei\n    68\tJonathan Keane\n    64\tDavid Li\n    52\tNic Crane\n    34\tJoris Van den Bossche\n    24\tPindikura Ravindra\n    21\tWeston Pace\n    14\tGitHub\n    14\tMatthew Topol\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors with Git Shortlog in Shell\nDESCRIPTION: This shell command uses git shortlog to display a list of contributors and their commit counts between Apache Arrow versions 0.6.0 and 0.7.0. It shows the number of commits and the contributor's name.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.7.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.6.0..apache-arrow-0.7.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committers for Apache Arrow 9.0.0 Release\nDESCRIPTION: A console command and its output showing the Apache committers who merged contributed patches to the repository for the 9.0.0 release, sorted by number of patches signed off.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/9.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-8.0.0..apache-arrow-9.0.0\n   126\tSutou Kouhei\n    75\tAntoine Pitrou\n    67\tDavid Li\n    40\tNeal Richardson\n    34\tWeston Pace\n    25\tMatthew Topol\n    24\tKrisztián Szűcs\n    19\tJoris Van den Bossche\n    17\tNic Crane\n    17\tAlessandro Molina\n    16\tYibo Cai\n    15\tPindikura Ravindra\n     9\tWes McKinney\n     7\tJonathan Keane\n     6\tDewey Dunnington\n     5\tAlenka Frim\n     4\tMatt Topol\n     4\tDominik Moritz\n     3\tRok\n     3\tEric Erhardt\n     1\tBenjamin Kietzman\n     1\tIan Cook\n     1\tAndrew Lamb\n     1\tMicah Kornfield\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributor Statistics for Apache Arrow 2.0.0\nDESCRIPTION: Git shortlog command showing the number of commits per contributor between Arrow 1.0.0 and 2.0.0 releases. Lists 81 distinct contributors with their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/2.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-1.0.0..apache-arrow-2.0.0\n    68\tJorge C. Leitao\n    48\tAntoine Pitrou\n    40\tKrisztián Szűcs\n    34\talamb\n    33\tNeal Richardson\n    30\tAndy Grove\n    25\tBenjamin Kietzman\n    25\tJoris Van den Bossche\n    19\tSutou Kouhei\n    13\tUwe L. Korn\n    12\tMicah Kornfield\n    10\tFrank Du\n    10\tJörn Horstmann\n     9\tNeville Dipale\n     9\tRomain Francois\n     9\tarw2019\n     8\tYibo Cai\n     8\tliyafan82\n     7\tSagnik Chakraborty\n     6\tDavid Li\n     5\tKazuaki Ishizaki\n     5\tMahmut Bulut\n     4\tMingyu Zhong\n     4\tfredgan\n     3\tBryan Cutler\n     3\twqc200\n     2\tDaniel Russo\n     2\tDiana Clarke\n     2\tJames Duong\n     2\tKenta Murata\n     2\tPatrick Woody\n     2\tProjjal Chanda\n     2\tnaman1996\n     2\tptaylor\n     2\ttianchen\n     1\tAdam Szmigin\n     1\tAli McMaster\n     1\tAndrew Stevenson\n     1\tBen Kimock\n     1\tBrian Dunlay\n     1\tChristoph Schulze\n     1\tDerek Marsh\n     1\tDominik Moritz\n     1\tEric Erhardt\n     1\tEzra\n     1\tFernando José Herrera Elizalde\n     1\tFredGan\n     1\tHongze Zhang\n     1\tJim Klucar\n     1\tJosiah\n     1\tKyle Strand\n     1\tLaurent Goujon\n     1\tLawrence Chan\n     1\tMark Rushakoff\n     1\tMatt Corley\n     1\tMatthew Topol\n     1\tMatthias\n     1\tMorgan Cassels\n     1\tOfek\n     1\tPatrick Pai\n     1\tPaul\n     1\tPoojaChandak\n     1\tPrashanth Govindarajan\n     1\tPratik raj\n     1\tRevital Sur\n     1\tRuan Pearce-Authers\n     1\tRyan Murray\n     1\tSimon Bertron\n     1\tSteve Suh\n     1\tTanguy Fautre\n     1\tTobias Mayer\n     1\tTroels Nielsen\n     1\tVivian Kong\n     1\tWes McKinney\n     1\tXavier Lange\n     1\tYordan Pavlov\n     1\tkanga333\n     1\tkarldw\n     1\tmubai\n     1\toffthewall123\n     1\tzanmato1984\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors with Git Shortlog Command\nDESCRIPTION: Git command used to list contributors and their commit counts between the 4.0.0 and 5.0.0 releases across the datafusion, datafusion-cli, and datafusion-examples repositories.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-08-18-datafusion-5.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n$ git shortlog -sn 4.0.0..5.0.0 datafusion datafusion-cli datafusion-examples\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contribution Statistics for Apache Arrow 11.0.0\nDESCRIPTION: This command shows a sorted list of contributors to the Apache Arrow project between versions 10.0.0 and 11.0.0, with the number of commits per contributor. The output displays 95 distinct contributors who made 516 commits during this release cycle.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/11.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-10.0.0..apache-arrow-11.0.0\n    83\tSutou Kouhei\n    35\tMatt Topol\n    28\tRaúl Cumplido\n    25\tDewey Dunnington\n    21\tAlenka Frim\n    21\tAntoine Pitrou\n    20\tJacob Wujciak-Jens\n    17\tDavid Li\n    17\tMiles Granger\n    16\tWeston Pace\n    15\tJoris Van den Bossche\n    15\tWill Jones\n    14\tNic Crane\n    10\tNeal Richardson\n    10\tVibhatha Lakmal Abeykoon\n     9\trtpsw\n     8\teitsupi\n     7\tBen Harkins\n     7\tJin Shang\n     6\tAlessandro Molina\n     6\tBryce Mecum\n     6\tFatemah Panahi\n     6\tGang Wu\n     6\tLarry White\n     6\tmwish\n     5\tgf2121\n     4\tDavid Sisson\n     4\tHirokazu SUZUKI\n     4\tLouisClt\n     3\t0x26res\n     3\tRok Mihevc\n     3\th-vetinari\n     2\tAustin Dickey\n     2\tBenson Muite\n     2\tJonathan Keane\n     2\tKshiteej K\n     2\tLibor Ryšavý\n     2\tNikita Eshkeev\n     2\tPercy Camilo Triveño Aucahuasi\n     2\tSasha Krassovsky\n     2\tTodd Farmer\n     2\tYibo Cai\n     2\tbuaazhwb\n     2\tdependabot[bot]\n     2\tlafiona\n     1\t0xflotus\n     1\tAndré Kohn\n     1\tAnja Kefala\n     1\tBenjamin Kietzman\n     1\tDaniel Sullivan\n     1\tDanielle Navarro\n     1\tDean Attali\n     1\tDhulkifli Hussein\n     1\tDominik Moritz\n     1\tDongjoon Hyun\n     1\tDr. Jan-Philip Gehrcke\n     1\tElenaHenderson\n     1\tFelipe Oliveira Carvalho\n     1\tFrederick Jansen\n     1\tHadley Wickham\n     1\tIan Cook\n     1\tJacekPliszka\n     1\tJiaKe\n     1\tJianshen Liu\n     1\tJonas Haag\n     1\tJoost Hoozemans\n     1\tJulien Roncaglia\n     1\tKae S\n     1\tKazuaki Ishizaki\n     1\tKyle Barron\n     1\tLaurent Quérel\n     1\tLionel Henry\n     1\tMark Schreiber\n     1\tMatti Picus\n     1\tNoah Treuhaft\n     1\tPaul Taylor\n     1\tPierre Gramme\n     1\tQuang Hoang\n     1\tSahaj Gupta\n     1\tSanjiban Sengupta\n     1\tSho Nakatani\n     1\tSiddhant Rao\n     1\tTamas Mate\n     1\tTao He\n     1\tThomas Sarlandie\n     1\tTomek Drabas\n     1\tWilliam Ayd\n     1\tY\n     1\tYue\n     1\temkornfield\n     1\tfdzuJ\n     1\tkambhamvivekshankar\n     1\tlukester1975\n     1\tmartin-kokos\n     1\tzagto\n```\n\n----------------------------------------\n\nTITLE: Generating Contributor List with Git Shortlog in Bash\nDESCRIPTION: This command uses git shortlog to generate a list of contributors and their commit counts for the Apache Arrow project between versions 13.0.0 and 16.0.0. It's sorted numerically and includes only changes in the current directory.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-01-19-datafusion-16.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit shortlog -sn 13.0.0..16.0.0 .\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics - Apache Arrow 0.12.0\nDESCRIPTION: Git shortlog command showing number of commits per contributor between versions 0.11.0 and 0.12.0. Lists 77 distinct contributors with their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.12.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn apache-arrow-0.11.0..apache-arrow-0.12.0\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors Between Arrow Versions 16.0.0 and 32.0.0\nDESCRIPTION: Git shortlog command output showing the number of contributions by each contributor to the Apache Arrow project between versions 16.0.0 and 32.0.0. The list is sorted by number of contributions in descending order.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-02-14-rust-32.0.0.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n% git shortlog -sn 16.0.0..32.0.0\n   347  Raphael Taylor-Davies\n   166  Liang-Chi Hsieh\n    94  Andrew Lamb\n    36  Remzi Yang\n    30  Kun Liu\n    21  Yang Jiang\n    20  askoa\n    17  dependabot[bot]\n    15  Vrishabh\n    12  Dan Harris\n    12  Wei-Ting Kuo\n    11  Daniël Heres\n    11  Jörn Horstmann\n     9  Brent Gardner\n     9  Ian Alexander Joiner\n     9  Jiayu Liu\n     9  Martin Grigorov\n     8  Palladium\n     7  Jeffrey\n     7  Marco Neumann\n     6  Robert Pack\n     6  Will Jones\n     4  Andy Grove\n     4  comphead\n     3  Adrián Gallego Castellanos\n     3  Markus Westerlind\n     3  Quentin\n     2  Alex Qyoun-ae\n     2  Dmitry Patsura\n     2  Frank\n     2  Jiacai Liu\n     2  Marc Garcia\n     2  Marko Grujic\n     2  Max Burke\n     2  Your friendly neighborhood geek\n     2  sachin agarwal\n     1  Aarash Heydari\n     1  Adam Gutglick\n     1  Andrey Frolov\n     1  Anthony Poncet\n     1  Artjoms Iskovs\n     1  Ben Kimock\n     1  Brian Phillips\n     1  Carol (Nichols || Goulding)\n     1  Christian Salvati\n     1  Dalton Modlin\n     1  Daniel Martinez Maqueda\n     1  Daniel Poelzleithner\n     1  Davis Silverman\n     1  Dhruv Vats\n     1  Fabio Silva\n     1  GeauxEric\n     1  George Andronchik\n     1  Ismail-Maj\n     1  Ismaël Mejía\n     1  JanKaul\n     1  JasonLi\n     1  Javier Goday\n     1  Jayjeet Chakraborty\n     1  Jean-Charles Campagne\n     1  Jie Han\n     1  John Hughes\n     1  Jon Mease\n     1  Kevin Lim\n     1  Kohei Suzuki\n     1  Konstantin Fastov\n     1  Marius S\n     1  Masato Kato\n     1  Matthijs Brobbel\n     1  Michael Edwards\n     1  Pier-Olivier Thibault\n     1  Remco Verhoef\n     1  Rutvik Patel\n     1  Sean Smith\n     1  Sid\n     1  Stanislav Lukeš\n     1  Steve Vaughan\n     1  Stuart Carnie\n     1  Sumit\n     1  Trent Feda\n     1  Valeriy V. Vorotyntsev\n     1  Wenjun L\n     1  X\n     1  aksharau\n     1  bmmeijers\n     1  chunshao.rcs\n     1  jakevin\n     1  kastolars\n     1  nvartolomei\n     1  xudong.w\n     1  哇呜哇呜呀咦耶\n     1  尹吉峰\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributors for Apache Arrow 6.0.1 Release\nDESCRIPTION: Console output showing the git shortlog command that lists all contributors to the Apache Arrow 6.0.1 release, including their commit counts, sorted by number of contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/6.0.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-6.0.0..apache-arrow-6.0.1\n     7\tSutou Kouhei\n     4\tJoris Van den Bossche\n     3\tAntoine Pitrou\n     3\tDavid Li\n     3\tKrisztián Szűcs\n     3\tWeston Pace\n     2\tNic Crane\n     1\tAttila Lendvai\n     1\tBenson Muite\n     1\tDominik Moritz\n     1\tDragos Moldovan-Grünfeld\n     1\tEduardo Ponce\n     1\tMatthew Topol\n     1\tNeal Richardson\n     1\tTerence Honles\n     1\tmichalursa\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Shortlog of Contributors for ADBC 0.5.0 Release\nDESCRIPTION: Shows a git shortlog command that lists contributors to the ADBC 0.5.0 release, filtering out dependabot automated contributions. The output displays 12 distinct contributors with their respective commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-06-21-adbc-0.5.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.4.0..apache-arrow-adbc-0.5.0\n    36\tDavid Li\n    21\tWilliam Ayd\n     6\tDewey Dunnington\n     4\tMatt Topol\n     3\tKirill Müller\n     2\tSutou Kouhei\n     2\tvipere\n     1\tCurt Hagenlocher\n     1\tDiego Fernández Giraldo\n     1\tMatthijs Brobbel\n     1\tWill Jones\n     1\tdavidhcoe\n```\n\n----------------------------------------\n\nTITLE: Listing Git Contributors for Apache Arrow 4.0.1\nDESCRIPTION: Git shortlog command output showing the number of commits per contributor between versions 4.0.0 and 4.0.1.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/4.0.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-4.0.0..apache-arrow-4.0.1\n     3\tJorge C. Leitao\n     3\tJoris Van den Bossche\n     2\tKrisztián Szűcs\n     2\tIan Cook\n     2\tDavid Li\n     2\tJonathan Keane\n     1\tAntoine Pitrou\n     1\tniranda perera\n     1\tDominik Moritz\n     1\tGALI PREM SAGAR\n     1\tJeroen Ooms\n     1\tMatthew Topol\n     1\tYibo Cai\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Shortlog for ADBC 0.5.1 Contributors\nDESCRIPTION: This Git command displays a short log of contributors to the ADBC 0.5.1 release, excluding dependabot contributions. It shows the number of commits per author between versions 0.5.0 and 0.5.1.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-06-27-adbc-0.5.1-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.5.0..apache-arrow-adbc-0.5.1\n     9\tDavid Li\n     5\tDewey Dunnington\n     4\tMatt Topol\n     3\tWilliam Ayd\n     2\tdavidhcoe\n     1\tCurt Hagenlocher\n     1\tDiego Fernández Giraldo\n     1\tSutou Kouhei\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committer Statistics for Apache Arrow 0.17.0\nDESCRIPTION: A console command and its output showing the short log of Git commits between versions 0.16.0 and 0.17.0, summarized by committer. This shows which Apache committers merged contributed patches to the repository.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/0.17.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.16.0..apache-arrow-0.17.0\n   128\tWes McKinney\n   109\tKrisztián Szűcs\n    86\tAntoine Pitrou\n    61\tNeal Richardson\n    60\tSutou Kouhei\n    33\tBenjamin Kietzman\n    23\tAndy Grove\n    14\tFrançois Saint-Jacques\n    10\tMicah Kornfield\n     7\tPaddy Horan\n     7\tPraveen\n     5\tDavid Li\n     5\tSebastien Binet\n     3\tGitHub\n     3\tJoris Van den Bossche\n     3\tNeville Dipale\n     3\tPindikura Ravindra\n     3\tYosuke Shiro\n     2\tBryan Cutler\n     2\tPhilipp Moritz\n     1\tBrian Hulette\n     1\tChao Sun\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributor Statistics for ADBC 0.6.0 Release\nDESCRIPTION: This Git command generates a short log of contributors and their commit counts for the ADBC 0.6.0 release, excluding dependabot commits. It shows the top contributors and their respective number of commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-08-28-adbc-0.6.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.5.1..apache-arrow-adbc-0.6.0\n    30\tDavid Li\n    15\tWilliam Ayd\n     9\tDewey Dunnington\n     5\tMatt Topol\n     5\tSolomon Choe\n     2\tdavidhcoe\n     1\tAlexandre Crayssac\n     1\tCurt Hagenlocher\n     1\tDiego Fernández Giraldo\n```\n\n----------------------------------------\n\nTITLE: Git Patch Committer Summary Command Output\nDESCRIPTION: Console output showing git shortlog command results listing Apache committers who merged patches between versions 0.17.0 and 1.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/1.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-0.17.0..apache-arrow-1.0.0\n   231\tWes McKinney\n    85\tAntoine Pitrou\n    74\tKrisztián Szűcs\n    68\tNeal Richardson\n    67\tSutou Kouhei\n    44\tFrançois Saint-Jacques\n    35\tAndy Grove\n    34\tNeville Dipale\n    21\tBenjamin Kietzman\n    17\tGitHub\n    17\tMicah Kornfield\n    12\tChao Sun\n    12\tPaddy Horan\n     8\tDavid Li\n     8\tPraveen\n     7\tJoris Van den Bossche\n     5\tBryan Cutler\n     5\tEric Erhardt\n     5\tUwe L. Korn\n     4\tYosuke Shiro\n     3\tJacques Nadeau\n     3\tPindikura Ravindra\n     3\tSebastien Binet\n     2\tliyafan82\n     1\tKenta Murata\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Contributor Summary for nanoarrow 0.3.0 Release\nDESCRIPTION: A console command using git shortlog to display the number of commits per contributor between the previous release and the nanoarrow 0.3.0 release, filtering out GitHub Actions automated commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-10-03-nanoarrow-0.3.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn d4f038ce58655ba6e996cdae165f1b33c3919d51..apache-arrow-nanoarrow-0.3.0 | grep -v \"GitHub Actions\"\n    40  Dewey Dunnington\n     7  William Ayd\n     2  Bryce Mecum\n     1  Dane Pitkin\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committer Statistics for Apache Arrow 14.0.0\nDESCRIPTION: Console command that shows Apache committers who merged contributed patches to the repository between version 13.0.0 and 14.0.0, sorted by the number of patches signed off by each committer.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/14.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-13.0.0..apache-arrow-14.0.0\n   190\tSutou Kouhei\n    81\tAntoine Pitrou\n    70\tKevin Gurney\n    46\tMatt Topol\n    40\tDavid Li\n    35\tNic Crane\n    31\tRaúl Cumplido\n    28\tJoris Van den Bossche\n    19\tJacob Wujciak-Jens\n    14\tDewey Dunnington\n    12\tAlenkaF\n    12\tWeston Pace\n    11\tBenjamin Kietzman\n     4\tGang Wu\n     3\tDominik Moritz\n     2\tEric Erhardt\n     2\tJonathan Keane\n     1\tLi Jin\n     1\tWill Jones\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for ADBC 0.8.0\nDESCRIPTION: Git shortlog command output showing the number of contributions per author between ADBC versions 0.7.0 and 0.8.0, excluding dependabot commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-11-09-adbc-0.8.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.7.0..apache-arrow-adbc-0.8.0\n    27\tDavid Li\n    23\tWilliam Ayd\n    19\tDewey Dunnington\n     4\tMatt Topol\n     4\tSolomon Choe\n     4\tdavidhcoe\n     2\tvleslief-ms\n     1\tAaron Ross\n     1\tFredrik Hoem Grelland\n     1\tJoel Lubinitsky\n     1\tOleMussmann\n     1\tRuoxuan Wang\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit Statistics in Console\nDESCRIPTION: This command uses git shortlog to display a summary of commits, excluding those from dependabot, between two specific Git references.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-09-13-flight-sql-postgresql-0.1.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author=^((?!dependabot\\[bot\\]).*)$ -sn dc7f34e2636732acd0d015a7cd8259334f1acb16...0.1.0\n    59\tSutou Kouhei\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors using Git shortlog\nDESCRIPTION: A Git command to list contributors and their commit counts for the Apache Arrow ADBC project between versions 0.8.0 and 0.9.0, excluding dependabot commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-01-08-adbc-0.9.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.8.0..apache-arrow-adbc-0.9.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch Committers for Apache Arrow 6.0.1 Release\nDESCRIPTION: Console output showing the git shortlog command that lists Apache committers who merged contributed patches to the repository, including their commit counts.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/6.0.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -csn apache-arrow-6.0.0..apache-arrow-6.0.1\n    19\tKrisztián Szűcs\n    15\tSutou Kouhei\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Shortlog for Contributors in Bash\nDESCRIPTION: This Bash command displays a shortlog of contributors to the Apache Arrow ADBC project between versions 0.9.0 and 0.10.0, excluding dependabot contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-02-22-adbc-0.10.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.9.0..apache-arrow-adbc-0.10.0\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics Command\nDESCRIPTION: Git command to generate a summary of contributors and their commit counts between ADBC versions 0.2.0 and 0.3.0, excluding dependabot commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2023-03-21-adbc-0.3.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.2.0..apache-arrow-adbc-0.3.0\n```\n\n----------------------------------------\n\nTITLE: Git Contributors List Command for ADBC Release\nDESCRIPTION: A git command that displays contributors to the ADBC project between version 0.10.0 and 0.11.0, excluding dependabot contributions. The command lists each contributor's name and number of commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-03-31-adbc-0.11.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-0.10.0..apache-arrow-adbc-0.11.0\n    39\tDavid Li\n     3\tMatt Topol\n     2\tDewey Dunnington\n     2\tdavidhcoe\n     1\tAdnan Khan\n     1\tBruce Irschick\n     1\tJoel Lubinitsky\n     1\tJulian Brandrick\n     1\tRuoxuan Wang\n     1\tRyan Syed\n     1\tvleslief-ms\n```\n\n----------------------------------------\n\nTITLE: Generating Git Commit Statistics for Ballista 0.5.0\nDESCRIPTION: This Git command generates a summary of contributors and their commit counts for the Ballista project between versions 4.0.0 and 5.0.0. It focuses on specific directories within the project.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2021-08-18-ballista-0.5.0.md#2025-04-09_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit shortlog -sn 4.0.0..5.0.0 ballista/rust/client ballista/rust/core ballista/rust/executor ballista/rust/scheduler\n```\n\n----------------------------------------\n\nTITLE: Listing Contributors using Git Shortlog in Bash\nDESCRIPTION: A Git command to list contributors and their commit counts for the Apache Arrow ADBC project, excluding dependabot commits. It shows the contributors between versions 12 and 13.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-07-05-adbc-13-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-12..apache-arrow-adbc-13\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Summary - Apache Arrow 14.0.1\nDESCRIPTION: Git shortlog showing the number of commits per contributor between versions 14.0.0 and 14.0.1\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/14.0.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-14.0.0..apache-arrow-14.0.1\n     3\tRaúl Cumplido\n     1\tAlenka Frim\n     1\tAntoine Pitrou\n```\n\n----------------------------------------\n\nTITLE: Git Contributors List Command\nDESCRIPTION: Git command to generate a shortlog of contributors to the ADBC project between versions 13 and 14, excluding dependabot contributions.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-09-05-adbc-14-release.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-13..apache-arrow-adbc-14\n```\n\n----------------------------------------\n\nTITLE: Listing Git Shortlog for Patch Committers in Apache Arrow 10.0.1\nDESCRIPTION: This console command uses git shortlog with a custom trailer to display a summary of Apache committers who merged contributed patches for the 10.0.1 release.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/10.0.1.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-10.0.0..apache-arrow-10.0.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Contributor Statistics for Apache Arrow Go Release\nDESCRIPTION: Shell command using git shortlog to display contributor statistics between v18.0.0 and v18.1.0 releases, showing the number of commits per contributor.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2025-01-13-arrow-go-18.1.0.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git shortlog -sn v18.0.0..v18.1.0\n    24\tMatt Topol\n     2\tSutou Kouhei\n     2\tTodd Treece\n     1\tNick Ripley\n     1\tRaúl Cumplido\n     1\tRuihao Chen\n```\n\n----------------------------------------\n\nTITLE: Git Patch Committer Statistics for Apache Arrow 17.0.0\nDESCRIPTION: Git shortlog output showing patch committers who merged contributed patches, grouped by signed-off-by trailer between versions 16.1.0 and 17.0.0.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/17.0.0.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn --group=trailer:signed-off-by apache-arrow-16.1.0..apache-arrow-17.0.0\n   130\tSutou Kouhei\n    89\tDavid Li\n    39\tCurt Hagenlocher\n    38\tAntoine Pitrou\n    37\tJoris Van den Bossche\n    22\tFelipe Oliveira Carvalho\n    22\tRaúl Cumplido\n    20\tMatt Topol\n    14\tmwish\n    11\tJacob Wujciak-Jens\n    11\tSarah Gilmore\n     8\tAlenkaF\n     6\tBryce Mecum\n     6\tJonathan Keane\n     5\tBenjamin Kietzman\n     5\tGang Wu\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Activity with Git Shortlog in Terminal\nDESCRIPTION: A git shortlog command that displays the number of commits by each contributor (excluding dependabot) between the apache-arrow-adbc-14 and apache-arrow-adbc-15 tags, sorted by number of commits.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_posts/2024-11-13-adbc-15-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git shortlog --perl-regexp --author='^((?!dependabot\\[bot\\]).*)$' -sn apache-arrow-adbc-14..apache-arrow-adbc-15\n    24\tDavid Li\n    15\tDewey Dunnington\n    14\tBruce Irschick\n     5\tCurt Hagenlocher\n     5\tdavidhcoe\n     3\tLaurent Goujon\n     3\tMatthijs Brobbel\n     3\tWilliam Ayd\n     3\teitsupi\n     2\tMatt Topol\n     2\tTornike Gurgenidze\n     2\tqifanzhang-ms\n     1\tSudhir Reddy Emmadi\n```\n\n----------------------------------------\n\nTITLE: Git Contributor Statistics for Apache Arrow 19.0.1\nDESCRIPTION: Shows the number of commits per contributor between versions 19.0.0 and 19.0.1 using git shortlog command.\nSOURCE: https://github.com/apache/arrow-site/blob/main/_release/19.0.1.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git shortlog -sn apache-arrow-19.0.0..apache-arrow-19.0.1\n    11\tBryce Mecum\n     4\tAntoine Pitrou\n     4\tJoris Van den Bossche\n     2\tGang Wu\n     2\tSutou Kouhei\n     1\tDavid Li\n     1\tIan Cook\n     1\tMatt Topol\n     1\tRossi Sun\n```\n\n----------------------------------------\n\nTITLE: Including Apache License Comment in Markdown\nDESCRIPTION: This snippet adds a comment block containing the Apache License 2.0 notice. It's used to ensure proper licensing information is included in the release announcement.\nSOURCE: https://github.com/apache/arrow-site/blob/main/release-announcement-template.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n{% comment %}\nLicensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to you under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n{% endcomment %}\n-->\n```\n\n----------------------------------------\n\nTITLE: Rendering PMC Members Table in HTML and Liquid\nDESCRIPTION: This snippet generates an HTML table listing the Project Management Committee (PMC) members of the Apache Arrow project. It uses Liquid templating to sort and filter the data, displaying the chair separately.\nSOURCE: https://github.com/apache/arrow-site/blob/main/committers.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"table table-striped\"><thead>\n<tr>\n<th>Name</th>\n<th>Affiliation</th>\n</tr>\n</thead><tbody>\n  {% assign sorted_committers = site.data.committers | sort: \"name\" %}\n  {% for person in sorted_committers %}\n    {% if person.role == \"VP\" %}\n  <tr>\n    <td><a href=\"https://people.apache.org/phonebook.html?uid={{ person.alias }}\">{{ person.name }}</a> (Chair)</td>\n    <td>{{ person.affiliation }}</td>\n  </tr>\n    {% endif %}\n  {% endfor %}\n  {% for person in sorted_committers %}\n    {% if person.role == \"PMC\" %}\n  <tr>\n    <td><a href=\"https://people.apache.org/phonebook.html?uid={{ person.alias }}\">{{ person.name }}</a></td>\n    <td>{{ person.affiliation }}</td>\n  </tr>\n    {% endif %}\n  {% endfor %}\n</tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Displaying Logo Image Grid in HTML\nDESCRIPTION: HTML code for creating a responsive two-column grid to display example unofficial logo variations using Bootstrap classes\nSOURCE: https://github.com/apache/arrow-site/blob/main/visual_identity.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container justify-content-evenly center py-3\">\n<div class=\"row\">\n  <div class=\"col-12 col-md-6\"><img src=\"{{ site.baseurl }}/img/offbrand_hex_1.png\" width=\"100%\"></div>\n  <div class=\"col-12 col-md-6\"><img src=\"{{ site.baseurl }}/img/offbrand_hex_2.png\" width=\"100%\"></div>\n</div>\n</div>\n```"
  }
]