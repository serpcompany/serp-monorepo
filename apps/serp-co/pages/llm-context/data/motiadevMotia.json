[
  {
    "owner": "motiadev",
    "repo": "motia",
    "content": "TITLE: Implementing an Email Auto-Reply Agent with OpenAI Integration\nDESCRIPTION: Demonstrates a complete Motia step implementation that processes incoming emails, performs sentiment analysis using OpenAI, and emits an event for sending a response. The example includes event configuration, input validation with Zod, and OpenAI API integration.\nSOURCE: https://github.com/motiadev/motia/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { OpenAI } from 'openai';\nimport { z } from 'zod';\nimport type { EventConfig, StepHandler } from 'motia';\n\nconst openai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport const config: EventConfig = {\n  type: 'event',\n  name: 'Auto-Reply to Support Emails',\n  subscribes: ['email.received'],\n  emits: ['email.send'],\n  flows: ['email-support'],\n  input: z.object({ subject: z.string(), body: z.string(), from: z.string() }),\n};\n\nexport const handler: StepHandler<typeof config> = async (inputData, context) => {\n  const { subject, body, from } = inputData;\n  const { emit, logger } = context;\n\n  const sentimentResponse = await openai.chat.completions.create({\n    model: \"gpt-4o\",\n    messages: [{ role: \"user\", content: `Analyze the sentiment of the following text: ${body}` }],\n  });\n\n  const sentiment = sentimentResponse.choices[0].message.content;\n\n  logger.info('[EmailAutoReply] Sentiment analysis', { sentiment });\n\n  emit({\n    type: 'email.send',\n    data: { from, subject, body, sentiment },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Event Configuration and Handler in Motia Framework with TypeScript\nDESCRIPTION: This snippet demonstrates the complete structure of a Motia event handler, including importing dependencies, defining input schema with Zod, setting up event configuration, and implementing the handler function with logging and event emission capabilities.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/event/template.typescript.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventConfig, StepHandler } from '@motiadev/core'\nimport { z } from 'zod'\n\ntype Input = typeof inputSchema\n\nconst inputSchema = z.object({\n  // Add your schema here\n})\n\nexport const config: EventConfig = {\n  type: 'event',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  subscribes: {{SUBSCRIPTIONS}},\n  emits: {{EMITS}},\n  input: inputSchema,\n  flows: {{FLOWS}}\n}\n\nexport const handler: StepHandler<typeof config> = async (input, { logger, emit }) => {\n  logger.info('Processing {{STEP_NAME}}', input)\n\n  // Add your handler logic here\n  \n  // Example emit\n  // await emit({\n  //   topic: 'event-type',\n  //   data: {}\n  // })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Route and Handler in TypeScript for Motia\nDESCRIPTION: This snippet shows how to configure an API route and implement a handler function in TypeScript for Motia. It includes route configuration, request handling, and event emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiRouteConfig, StepHandler } from 'motia'\nimport { z } from 'zod'\n\nexport const config: ApiRouteConfig = {\n  type: 'api',\n  name: 'Test state api trigger',\n  description: 'test state',\n  path: '/test-state',\n  method: 'POST',\n  emits: ['test-state'],\n  bodySchema: z.object({}),\n  flows: ['test-state'],\n}\n\nexport const handler: StepHandler<typeof config> = async (req, { logger, emit }) => {\n  logger.info('[Test State] Received request', req)\n\n  await emit({\n    topic: 'test-state',\n    data: req.body\n  })\n\n  return {\n    status: 200,\n    body: { message: 'Success' },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route Handler in TypeScript with Motia\nDESCRIPTION: This snippet defines the handler function for the API route using Motia's StepHandler type. It includes logging and placeholders for custom logic.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/api/template.typescript.txt#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const handler: StepHandler<typeof config> = async (req, { logger, emit }) => {\n  logger.info('Processing {{STEP_NAME}}', req)\n\n  // Add your handler logic here\n  \n  return {\n    status: 200,\n    body: { message: 'Success' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Motia Step with Jest in TypeScript\nDESCRIPTION: This snippet demonstrates how to write a test for a Motia step using Jest and the createTestContext function from @motiadev/testing. It shows how to mock the emit function and assert the expected behavior of the step.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/testing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// my-step.step.test.ts\nimport { createTestContext } from '@motiadev/testing'\nimport { handler } from './my-step.step'\n\ndescribe('MyStep', () => {\n  it('should emit an event with the correct data', async () => {\n    const { emit, done } = createTestContext()\n\n    await handler({ name: 'John' }, { emit })\n\n    expect(emit).toHaveBeenCalledWith({\n      type: 'my-event',\n      data: { greeting: 'Hello, John!' },\n    })\n\n    done()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware and API Handler in Python for Motia\nDESCRIPTION: This snippet shows how to implement custom middleware functions and an API handler in Python for Motia. It includes request validation, middleware for request/response modification, error handling, rate limiting, and API route configuration.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Dict, Callable\nfrom motia import ApiMiddleware\nfrom datetime import datetime\nimport time\n\nfrom pydantic import BaseModel\n\n# Define a Pydantic model for request body validation\nclass RequestBody(BaseModel):\n    message: str\n\n# Request modification middleware\nasync def request_modifier_middleware(data: Dict[str, Any], ctx: Any, next_fn: Callable):\n    # Modify the request before passing it to the next middleware\n    data['headers']['x-modified-by'] = 'middleware'\n    data['body']['timestamp'] = int(time.time() * 1000)\n    \n    # Call the next middleware in the chain\n    return await next_fn()\n\n# Response modification middleware\nasync def response_modifier_middleware(data: Dict[str, Any], ctx: Any, next_fn: Callable):\n    # Call the next middleware in the chain\n    response = await next_fn()\n    \n    # Modify the response before returning it\n    response['headers'] = {\n        **response.get('headers', {}),\n        'x-powered-by': 'Motia'\n    }\n    \n    return response\n\n# Error handling middleware\nasync def error_handling_middleware(data: Dict[str, Any], ctx: Any, next_fn: Callable):\n    try:\n        # Call the next middleware in the chain\n        return await next_fn()\n    except Exception as error:\n        ctx.logger.error('Error in handler', {'error': str(error)})\n        return {\n            'status': 500,\n            'body': {'error': 'Internal server error'}\n        }\n\n# Rate limiter middleware with state using a closure\ndef create_rate_limiter_middleware():\n    # Closure to maintain state between requests\n    requests: Dict[str, list] = {}\n    limit = 100\n    window_ms = 60000  # 1 minute\n    \n    async def rate_limiter_middleware(data: Dict[str, Any], ctx: Any, next_fn: Callable):\n        ip = data['headers'].get('x-forwarded-for', ['unknown-ip'])\n        ip_str = ip[0] if isinstance(ip, list) else ip\n        \n        now = int(time.time() * 1000)\n        if ip_str not in requests:\n            requests[ip_str] = []\n        \n        # Remove old requests outside the time window\n        requests[ip_str] = [t for t in requests[ip_str] if now - t < window_ms]\n        \n        if len(requests[ip_str]) >= limit:\n            return {\n                'status': 429,\n                'body': {'error': 'Too many requests, please try again later'}\n            }\n        \n        # Add current request\n        requests[ip_str].append(now)\n        \n        return await next_fn()\n    \n    return rate_limiter_middleware\n\nconfig = {\n    'type': 'api',\n    'name': 'Test state api trigger',\n    'description': 'test state',\n    'path': '/test-state',\n    'method': 'POST',\n    'emits': ['test-state'],\n    'flows': ['test-state'],\n    'bodySchema': RequestBody.model_json_schema(), # We use jsonschema to validate\n    'middleware': [\n        request_modifier_middleware,\n        response_modifier_middleware,\n        error_handling_middleware,\n        create_rate_limiter_middleware()\n    ]\n}\n\nasync def handler(req, context):\n    context.logger.info('[Test State] Received request', {'body': req.body})\n\n    await context.emit({\n        'topic': 'test-state',\n        'data': req.body\n    })\n\n    return {\n        'status': 200,\n        'body': {'message': 'Success'}\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Step Configuration and Handler in JavaScript\nDESCRIPTION: This snippet shows how to define a step's configuration and handler function in JavaScript. It exports a config object with step properties and an async handler function that receives input and context objects.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/defining-steps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  type: 'event',\n  name: 'Minimal Step',\n  subscribes: ['start'],\n  emits: ['done'],\n}\n\nexports.handler = async (input, { emit, traceId, state, logger }) => {\n  await emit({ topic: 'done', data: {} })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging and Authentication Middleware for Motia API Step\nDESCRIPTION: This example demonstrates how to implement logging and authentication middleware for a Motia API Step. It includes the step configuration with middleware, a logging middleware function, an authentication middleware function, and a protected endpoint handler.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiMiddleware } from 'motia'\n\n// Logging middleware\nconst loggingMiddleware: ApiMiddleware = async (req, ctx, next) => {\n  ctx.logger.info('Request received', { path: req.pathParams })\n  const start = Date.now()\n  \n  // Call the next middleware and get its response\n  const response = await next()\n  \n  const duration = Date.now() - start\n  ctx.logger.info('Request completed', { duration, status: response.status })\n  \n  return response\n}\n\n// Authentication middleware\nconst authMiddleware: ApiMiddleware = async (req, ctx, next) => {\n  const authHeader = req.headers.authorization\n  \n  if (!authHeader) {\n    // Return early without calling next()\n    return {\n      status: 401,\n      body: { error: 'Unauthorized' }\n    }\n  }\n  \n  // Continue to the next middleware\n  return next()\n}\n\nexport const config = {\n  type: 'api',\n  name: 'protected-endpoint',\n  path: '/api/protected',\n  method: 'POST',\n  emits: ['USER_ACTION'],\n  middleware: [\n    loggingMiddleware,\n    authMiddleware\n  ]\n}\n\nexport const handler = async (req, ctx) => {\n  // This handler will only be called if all middleware pass\n  return {\n    status: 200,\n    body: { message: 'Protected data accessed successfully' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hierarchical State Namespacing\nDESCRIPTION: Demonstrates proper state organization using dot notation for hierarchical data structure across multiple languages. Shows recommended patterns for organizing booking and payment data.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Good - Organized hierarchically (using traceId scope)\nawait state.set(traceId, 'booking.customer', customerData)\nawait state.set(traceId, 'booking.venue', venueData)\nawait state.set(traceId, 'payment.status', 'pending')\n\n// Avoid - Flat structure (using traceId scope)\nawait state.set(traceId, 'customer', customerData)\nawait state.set(traceId, 'venue', venueData)\nawait state.set(traceId, 'paymentStatus', 'pending')\n```\n\n----------------------------------------\n\nTITLE: Configuring API Route and Handler in JavaScript for Motia\nDESCRIPTION: This snippet demonstrates how to configure an API route and implement a handler function in JavaScript for Motia. It includes route configuration, request handling, and event emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { z } = require('zod')\n\nexports.config = {\n  type: 'api',\n  name: 'Test state api trigger',\n  description: 'test state',\n  path: '/test-state',\n  method: 'POST',\n  emits: ['test-state'],\n  bodySchema: z.object({}),\n  flows: ['test-state'],\n}\n\nexports.handler = async (req, { logger, emit }) => {\n  logger.info('[Test State] Received request', req)\n\n  await emit({\n    topic: 'test-state',\n    data: req.body\n  })\n\n  return {\n    status: 200,\n    body: { message: 'Success' },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic UI Step in JavaScript React\nDESCRIPTION: Demonstrates how to create a basic custom UI Step component using JavaScript and React. It utilizes the EventNode component from Motia Workbench.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/ui-steps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// myStep.step.jsx\n\nimport React from 'react'\nimport { EventNode } from 'motia/workbench'\n\nexport default function MyStep({ data }) {\n  return (\n    <EventNode\n      data={data}\n      variant=\"white\"\n      className=\"py-2 px-4\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Step in TypeScript\nDESCRIPTION: TypeScript implementation of an API endpoint step that accepts requests and emits events. Includes Zod schema validation and error handling.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiRouteConfig, StepHandler } from 'motia';\nimport { z } from 'zod';\n\nconst bodySchema = z.object({ message: z.string() });\n\nexport const config: ApiRouteConfig = {\n  type: 'api',\n  name: 'ApiTrigger',\n  description: 'Triggers workflow via API',\n  path: '/trigger',\n  method: 'POST',\n  emits: ['trigger.received'],\n  bodySchema,\n  flows: ['my-flow']\n};\n\nexport const handler: StepHandler<typeof config> = async (req, { logger, emit }) => {\n  logger.info('API request received', { body: req.body });\n  try {\n    const data = req.body;\n    await emit({ topic: 'trigger.received', data });\n    return { status: 200, body: { message: 'Success' } };\n  } catch (error) {\n    logger.error('API error', { error: error.message });\n    return { status: 500, body: { error: 'Internal error' } };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: State Management in Ruby\nDESCRIPTION: Demonstrates state management implementation in a Ruby step handler using context object and trace_id for scope.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef handler(input, context) # context is the context object\n  trace_id = context.trace_id # Access traceId from context\n\n  # Store state (using traceId as scope)\n  context.state.set(trace_id, 'booking', { \n    customer: input.customer,\n    venue: input.venue\n  })\n\n  # Retrieve state (using traceId as scope)\n  booking = context.state.get(trace_id, 'booking') \n\n  # Delete specific state\n  context.state.delete(trace_id, 'booking') \n\n  # Clear all state (using traceId as scope)\n  context.state.clear(trace_id) \nend\n```\n\n----------------------------------------\n\nTITLE: Defining API Route Configuration with Motia\nDESCRIPTION: Configures an API route with metadata including path, method, validation schema, and virtual subscriptions. Uses Zod for input validation and defines the route's event emission capabilities.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/default/steps/api.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputSchema = z.object({})\n\nexport const config: ApiRouteConfig = {\n  type: 'api',\n  name: 'default flow api trigger',\n  description: 'default template api trigger',\n  path: '/default',\n  virtualSubscribes: ['/default'],\n  method: 'POST',\n  emits: ['test-state'],\n  bodySchema: inputSchema,\n  flows: ['default'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Step in Ruby\nDESCRIPTION: This snippet demonstrates how to set up an Event Step in Ruby using Motia. It shows the configuration structure and handler function for event processing and emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/event.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Config\n  attr_reader :type, :name, :subscribes, :emits, :input, :flows\n\n  def initialize\n    @type = \"event\"\n    @name = \"Call OpenAI\"\n    @subscribes = [\"call-openai\"]\n    @emits = [\"openai-response\"]\n    @input = nil # No schema validation\n    @flows = [\"openai\"]\n  end\nend\n\nconfig = Config.new\n\ndef handler(input, context)\n  context.logger.info(\"Processing input: #{input}\")\n\n  context.emit({\n    topic: \"openai-response\",\n    data: {\n      result: \"Processed: #{input[:message]}\"\n    }\n  })\nend\n```\n\n----------------------------------------\n\nTITLE: Testing a Motia Flow with Jest in TypeScript\nDESCRIPTION: This example illustrates how to test a Motia flow using Jest and the createTestFlow function from @motiadev/testing. It demonstrates creating a test flow with multiple steps and asserting the final output of the flow execution.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/testing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// my-flow.test.ts\nimport { createTestFlow } from '@motiadev/testing'\nimport { handler as stepAHandler } from './step-a.step'\nimport { handler as stepBHandler } from './step-b.step'\n\ndescribe('MyFlow', () => {\n  it('should execute steps in the correct order', async () => {\n    const flow = createTestFlow('my-flow')\n      .step('step-a', stepAHandler)\n      .step('step-b', stepBHandler)\n\n    const result = await flow.execute({ name: 'Alice' })\n\n    expect(result).toEqual({\n      greeting: 'Hello, Alice!',\n      message: 'Welcome to Motia!',\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cron Step in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to create a cron job that runs every hour and emits a 'cron-ticked' event. It defines both the configuration object and the handler function that executes when the scheduled time is reached.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/cron.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CronConfig } from 'motia'\n\nexport const config: CronConfig = {\n  type: 'cron' as const,\n  name: 'PeriodicJob',\n  description: 'Runs every minute and emits a timestamp',\n  cron: '0 * * * *', // run every hour at minute 0\n  emits: ['cron-ticked'],\n  flows: ['cron-example'],\n}\n\nexport const handler: StepHandler<typeof config> = async ({ emit }) => {\n  await emit({\n    topic: 'cron-ticked',\n    data: { message: 'Cron job executed' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: State Management in JavaScript\nDESCRIPTION: Demonstrates state management implementation in a JavaScript step handler using traceId for scope isolation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StepHandler } from 'motia'\n\nexport const handler = async (input, { state, traceId }) => { // Get traceId from context\n  // Store state (using traceId as scope)\n  await state.set(traceId, 'booking', {\n    customer: input.customer,\n    venue: input.venue,\n  });\n\n  // Retrieve state (using traceId as scope)\n  const booking = await state.get(traceId, 'booking');\n\n  // Delete specific state (using traceId as scope)\n  await state.delete(traceId, 'booking');\n\n  // Clear all state for this flow (using traceId as scope)\n  await state.clear(traceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route Handler Function\nDESCRIPTION: Implements the route handler function that processes requests, logs information, and emits events. Returns a response with status code and message.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/default/steps/api.step.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: StepHandler<typeof config> = async (req, { logger, emit }) => {\n  logger.info('processing default flow api step', req)\n\n  await emit({\n    topic: 'test-state',\n    data: {},\n  })\n\n  return {\n    status: 200,\n    body: { message: 'test-state topic emitted' },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Step Configuration and Handler in Ruby\nDESCRIPTION: This snippet demonstrates how to define a step's configuration and handler function in Ruby. It includes a config method returning a hash with step properties and a handler method that receives args and ctx parameters.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/defining-steps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef config\n  {\n    type: 'event',\n    name: 'Minimal Step',\n    subscribes: ['start'],\n    emits: ['done'],\n  }\nend\n\ndef handler(args, ctx)\n  ctx.emit({topic: 'done', data: {}})\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Step in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure an Event Step in TypeScript using Motia. It includes input validation with zod, event subscription, and emission logic.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/event.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventConfig, StepHandler } from 'motia'\nimport { z } from 'zod'\n\nconst inputSchema = z.object({\n  message: z.string()\n})\n\ntype Input = typeof inputSchema\n\nexport const config: EventConfig<Input> = {\n  type: 'event',\n  name: 'stepA',\n  description: 'Hello from Step A',\n  subscribes: ['pms.start'],\n  emits: ['pms.stepA.done'],\n  input: inputSchema,\n  flows: ['parallel-merge'],\n}\n\nexport const handler: StepHandler<typeof config> = async (input, { emit, logger }) => {\n  logger.info('Processing message:', input.message)\n\n  await emit({\n    topic: 'pms.stepA.done',\n    data: {\n      result: `Processed: ${input.message}`\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Step Configuration and Handler in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a step's configuration and handler function in TypeScript. It includes the necessary imports, config object with step properties, and an async handler function that receives input and context objects.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/defining-steps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventConfig, StepHandler } from 'motia'\n\nexport const config: EventConfig = {\n  type: 'event',\n  name: 'Minimal Step',\n  subscribes: ['start'],\n  emits: ['done'],\n}\n\nexport const handler: StepHandler<typeof config> = async (input, { emit, traceId, state, logger }) => {\n  await emit({ topic: 'done', data: {} })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Handler with Logging in Ruby\nDESCRIPTION: This Ruby example shows a Motia handler method that incorporates various logging techniques including basic info logs, contextual logging, error handling with rescue blocks, debug information, and conditional warning logs.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef handler(input, ctx)\n  # Basic logging\n  ctx.logger.info('Starting process')\n\n  # Logging with context\n  ctx.logger.info('Operation completed', {\n    operation_id: input.id,\n    duration: 1500\n  })\n\n  # Error handling\n  begin\n    risky_operation()\n  rescue StandardError => error\n    ctx.logger.error('Operation failed', {\n      error: error.message,\n      stack: error.backtrace.join(\"\\n\")\n    })\n  end\n\n  # Debug logging\n  ctx.logger.debug('Operation details', {\n    raw_input: input.to_h,\n    timestamp: Time.now.to_i\n  })\n\n  # Warning logging\n  if input.amount > 1000\n    ctx.logger.warn('Large operation detected', {\n      amount: input.amount,\n      threshold: 1000\n    })\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: API Route Configuration for Sentiment Analysis\nDESCRIPTION: Sets up an API endpoint that receives text input and triggers sentiment analysis. Uses Zod for request validation and emits an event for OpenAI processing.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/examples/sentiment-analysis.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiRouteConfig, StepHandler } from 'motia'\nimport { z } from 'zod'\n\nexport const config: ApiRouteConfig = {\n  type: 'api',\n  name: 'Analyze Sentiment (API)',\n  path: '/api/analyze-sentiment',\n  method: 'POST',\n  emits: ['openai.analyzeSentimentRequest'],\n  bodySchema: z.object({\n    text: z.string().min(1, 'text is required'),\n  }),\n  flows: ['sentiment-demo'],\n}\n\nexport const handler: StepHandler<typeof config> = async (req, { emit, logger }) => {\n  const { text } = req.body\n\n  logger.info('[AnalyzeSentimentAPI] Received text', { text })\n\n  await emit({\n    topic: 'openai.analyzeSentimentRequest',\n    data: { text },\n  })\n\n  return {\n    status: 200,\n    body: { status: 'Accepted', message: 'Your text is being analyzed' },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cron Step in JavaScript\nDESCRIPTION: This JavaScript example shows how to define a cron job that runs every hour. It includes the configuration object with the cron expression and the handler function that emits an event when triggered.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/cron.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'cron',\n  name: 'PeriodicJob',\n  description: 'Runs every minute and emits a timestamp',\n  cron: '0 * * * *', // run every hour at minute 0\n  emits: ['cron-ticked'],\n  flows: ['cron-example'],\n};\n\nconst handler = async ({ emit }) => {\n  await emit({\n    topic: 'cron-ticked',\n    data: { message: 'Cron job executed' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Handler with Logging in TypeScript\nDESCRIPTION: This TypeScript example demonstrates a Motia step handler with various logging techniques including basic logging, contextual logging, error handling, debugging, and conditional warning logs.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: StepHandler<typeof config> = async (input, { logger }) => {\n  // Basic logging\n  logger.info('Starting process')\n\n  // Logging with context\n  logger.info('Operation completed', {\n    operationId: input.id,\n    duration: 1500\n  })\n\n  // Error handling\n  try {\n    await riskyOperation()\n  } catch (error) {\n    logger.error('Operation failed', {\n      error: error.message,\n      stack: error.stack\n    })\n  }\n\n  // Debug logging\n  logger.debug('Operation details', {\n    rawInput: input,\n    timestamp: Date.now()\n  })\n\n  // Warning logging\n  if (input.amount > 1000) {\n    logger.warn('Large operation detected', {\n      amount: input.amount,\n      threshold: 1000\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Step Handlers with @motiadev/core\nDESCRIPTION: Demonstrates how to create handlers for different types of steps (API, Event, Cron) using the createStepHandlers function from @motiadev/core.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStepHandlers } from '@motiadev/core'\n\nconst stepHandlers = createStepHandlers(lockedData, eventManager, state, config)\n```\n\n----------------------------------------\n\nTITLE: Negative Sentiment Handler\nDESCRIPTION: Handles negative sentiment events from the OpenAI analysis. Provides logging and can be extended for escalation or specialized responses.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/examples/sentiment-analysis.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventConfig, StepHandler } from 'motia'\nimport { z } from 'zod'\n\nconst negativeSchema = z.object({\n  sentiment: z.string(),\n  analysis: z.string().optional(),\n})\n\nexport const config: EventConfig<typeof negativeSchema> = {\n  type: 'event',\n  name: 'Negative Sentiment Responder',\n  subscribes: ['openai.negativeSentiment'],\n  emits: [],\n  input: negativeSchema,\n  flows: ['sentiment-demo'],\n}\n\nexport const handler: StepHandler<typeof config> = async (input, { logger }) => {\n  logger.info('[Negative Responder] The sentiment is negative or unknown.', { analysis: input.analysis })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Safety for State Data\nDESCRIPTION: Shows how to define and use strongly-typed state data structures across different languages, ensuring data consistency and type safety.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomerData {\n  name: string;\n  email: string;\n}\n\ninterface VenueData {\n  id: string;\n  capacity: number;\n}\n\ntype BookingState = {\n  customer: CustomerData;\n  venue: VenueData;\n  status: 'pending' | 'confirmed';\n}\n\nconst booking = await state.get<BookingState>(traceId, 'booking')\n```\n\n----------------------------------------\n\nTITLE: Configuring API Endpoint with Zod Schema in JavaScript\nDESCRIPTION: This snippet defines the configuration for an API endpoint using a custom framework. It includes placeholders for endpoint details and uses Zod for body schema validation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/api/template.javascript.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { z } = require('zod')\n\nexport const config = {\n  type: 'api',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  path: '{{PATH}}',\n  method: '{{METHOD}}',\n  emits: {{EMITS}},\n  flows: {{FLOWS}},\n  bodySchema: z.object({\n    // Add your schema here\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cron Step in Ruby\nDESCRIPTION: This Ruby example demonstrates how to create a cron job using the Motia framework. It defines a configuration method and a handler method that emits an event with a message payload when triggered by the cron schedule.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/cron.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef config\n  {\n    type: 'cron',\n    name: 'PeriodicJob',\n    description: 'Runs every minute and emits a timestamp',\n    cron: '0 * * * *',\n    emits: ['cron-ticked'],\n    flows: ['cron-example'],\n  }\nend\n\ndef handler(context)\n  context.emit({\n    topic: 'cron-ticked',\n    data: { message: 'Cron job executed' },\n  })\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Simulator NOOP Step in TypeScript\nDESCRIPTION: Demonstrates a complete example of a NOOP step that simulates webhook events. It includes both the configuration file and the UI component with a button to trigger the webhook.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// test-webhook.step.ts\nimport { NoopConfig } from 'motia'\n\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'Webhook Simulator',\n  description: 'Simulates incoming webhook events',\n  virtualEmits: ['webhook.received'],\n  virtualSubscribes: [],\n  flows: ['webhook-flow'],\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// test-webhook.step.tsx\nimport React from 'react'\nimport { BaseHandle, Position } from 'motia/workbench'\n\nexport default function WebhookSimulator() {\n  return (\n    <div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\">\n      <div className=\"text-sm font-medium mb-2\">Webhook Simulator</div>\n      <button \n        onClick={() => {\n          fetch('/api/webhook', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ event: 'test' }),\n          })\n        }}\n        className=\"px-3 py-1 bg-blue-600 rounded text-sm\"\n      >\n        Trigger Webhook\n      </button>\n      <BaseHandle type=\"source\" position={Position.Bottom} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Step Configuration and Handler in Python\nDESCRIPTION: This snippet illustrates how to define a step's configuration and handler function in Python. It includes a config dictionary with step properties and an async handler function that receives args and ctx parameters.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/defining-steps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    'type': 'event',\n    'name': 'Minimal Step',\n    'subscribes': ['start'],\n    'emits': ['done'],\n}\n\nasync def handler(args, ctx):\n  await ctx.emit({'topic': 'done', 'data': {}})\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step for Webhook Callbacks in TypeScript\nDESCRIPTION: Illustrates how to configure a NOOP step to represent webhook callbacks from external systems, such as waiting for a Stripe payment confirmation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'Wait for Stripe Webhook',\n  description: 'Waits for payment confirmation',\n  virtualSubscribes: ['payment.initiated'],\n  virtualEmits: ['/api/stripe/webhook'],\n  flows: ['payment'],\n}\n```\n\n----------------------------------------\n\nTITLE: State Structure Example in TypeScript\nDESCRIPTION: Demonstrates the internal representation of state data structure using traceId as scope for different flow executions.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example state structure (internal representation) - using traceId as scope\n{\n  \"motia:state:{traceId-123}\": {  // State for flow execution with traceId 'traceId-123' (scope)\n    \"booking\": {                 // Namespaced key 'booking'\n      \"customer\": { ... },\n      \"venue\": { ... }\n    },\n    \"payment\": {                 // Namespaced key 'payment'\n      \"status\": \"pending\",\n      \"amount\": 100\n    }\n  },\n  \"motia:state:{traceId-456}\": {  // State for another flow execution with traceId 'traceId-456' (different scope)\n    // ... different state data for this flow ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Step in Python\nDESCRIPTION: Python implementation of an API endpoint step with JSON schema validation and error handling. Processes incoming requests and emits events.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    'type': 'api',\n    'name': 'ApiTrigger',\n    'description': 'Triggers workflow via API',\n    'path': '/trigger',\n    'method': 'POST',\n    'emits': ['trigger.received'],\n    'bodySchema': {\n        'type': 'object',\n        'properties': {\n            'message': {'type': 'string'}\n        },\n        'required': ['message']\n    },\n    'flows': ['my-flow']\n}\n\nasync def handler(req, ctx):\n    ctx.logger.info('API request received', {'body': req.body})\n    try:\n        data = req.body\n        await ctx.emit({'topic': 'trigger.received', 'data': data})\n        return {'status': 200, 'body': {'message': 'Success'}}\n    except Exception as error:\n        ctx.logger.error('API error', {'error': str(error)})\n        return {'status': 500, 'body': {'error': 'Internal error'}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom EventNode in TypeScript React\nDESCRIPTION: Shows an advanced implementation of a custom UI Step using the EventNode component in TypeScript React. It includes custom content and additional props.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/ui-steps.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// customStep.step.tsx\n\nimport React from 'react'\nimport { EventNode } from 'motia/workbench'\nimport type { EventNodeProps } from 'motia/workbench'\n\nexport default function CustomStep({ data }: EventNodeProps) {\n  return (\n    <EventNode\n      data={data}\n      variant=\"white\"\n      shape=\"rounded\"\n      className=\"py-2 px-4\"\n    >\n      <div>Custom content</div>\n    </EventNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Handler with Logging in Python\nDESCRIPTION: This Python example demonstrates a Motia handler function that implements different logging patterns including basic info logs, contextual logging, exception handling with error logs, debug information, and conditional warnings.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(input, ctx):\n    # Basic logging\n    ctx.logger.info('Starting process')\n\n    # Logging with context\n    ctx.logger.info('Operation completed', {\n        'operation_id': input.id,\n        'duration': 1500\n    })\n\n    # Error handling\n    try:\n        await risky_operation()\n    except Exception as error:\n        ctx.logger.error('Operation failed', {\n            'error': str(error),\n            'stack': traceback.format_exc()\n        })\n\n    # Debug logging\n    ctx.logger.debug('Operation details', {\n        'raw_input': input.__dict__,\n        'timestamp': time.time()\n    })\n\n    # Warning logging\n    if input.amount > 1000:\n        ctx.logger.warn('Large operation detected', {\n            'amount': input.amount,\n            'threshold': 1000\n        })\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Job Handler Function in JavaScript\nDESCRIPTION: This snippet defines an async handler function for the cron job. It logs the job execution and includes a placeholder for the main cron logic. It also demonstrates how to emit events using the provided emit function.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.javascript.txt#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const handler = async ({ logger, emit }) => {\n  logger.info('Running {{STEP_NAME}} cron job')\n\n  // Add your cron logic here\n  \n  // Example emit\n  // await emit({\n  //   topic: 'event-type',\n  //   data: {}\n  // })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Daily Report Cron Step in Python\nDESCRIPTION: This Python module defines a cron step that generates a daily report at 9 AM. It retrieves sentiment data from state, emits a 'report.generated' event with the data and timestamp, and then clears the state.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# feedback-report.step.py\nconfig = {\n    'type': 'cron',\n    'name': 'FeedbackReporter',\n    'description': 'Reports daily at 9 AM',\n    'cron': '0 9 * * *',\n    'emits': ['report.generated'],\n    'flows': ['feedback-analyzer']\n}\nimport datetime\n\nasync def handler(input, ctx):\n    ctx.logger.info('Generating report')\n    try:\n        sentiment = await ctx.state.get(ctx.trace_id, 'sentiment') or 'unknown'\n        await ctx.emit({'topic': 'report.generated', 'data': {'sentiment': sentiment, 'date': datetime.datetime.now().isoformat()}})\n        await ctx.state.clear(ctx.trace_id)\n        ctx.logger.info('Report completed')\n    except Exception as error:\n        ctx.logger.error('Report failed', {'error': str(error)})\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Handler with Logging in JavaScript\nDESCRIPTION: This JavaScript example shows a Motia step handler with different logging approaches including basic logging, contextual logging, error handling, debugging logs, and conditional warning messages.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const handler = async (input, { logger }) => {\n  // Basic logging\n  logger.info('Starting process')\n\n  // Logging with context\n  logger.info('Operation completed', {\n    operationId: input.id,\n    duration: 1500\n  })\n\n  // Error handling\n  try {\n    await riskyOperation()\n  } catch (error) {\n    logger.error('Operation failed', {\n      error: error.message,\n      stack: error.stack\n    })\n  }\n\n  // Debug logging\n  logger.debug('Operation details', {\n    rawInput: input,\n    timestamp: Date.now()\n  })\n\n  // Warning logging\n  if (input.amount > 1000) {\n    logger.warn('Large operation detected', {\n      amount: input.amount,\n      threshold: 1000\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Step in TypeScript\nDESCRIPTION: TypeScript event processor step that listens for events, processes data using state management, and emits new events. Includes input validation and error handling.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventConfig, StepHandler } from 'motia';\nimport { z } from 'zod';\n\nconst inputSchema = z.object({ message: z.string() });\n\nexport const config: EventConfig<typeof inputSchema> = {\n  type: 'event',\n  name: 'EventProcessor',\n  description: 'Processes event data',\n  subscribes: ['trigger.received'],\n  emits: ['trigger.processed'],\n  input: inputSchema,\n  flows: ['my-flow']\n};\n\nexport const handler: StepHandler<typeof config> = async (input, { logger, emit, state, traceId }) => {\n  logger.info('Processing event', { input });\n  try {\n    await state.set(traceId, 'result', { value: input.message });\n    await emit({ topic: 'trigger.processed', data: { result: `Processed: ${input.message}` } });\n  } catch (error) {\n    logger.error('Event failed', { error: error.message });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom EventNode in JavaScript React\nDESCRIPTION: Demonstrates an advanced implementation of a custom UI Step using the EventNode component in JavaScript React. It includes custom content and additional props.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/ui-steps.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// customStep.step.jsx\n\nimport React from 'react'\nimport { EventNode } from 'motia/workbench'\n\nexport default function CustomStep({ data }) {\n  return (\n    <EventNode\n      data={data}\n      variant=\"white\"\n      shape=\"rounded\"\n      className=\"py-2 px-4\"\n    >\n      <div>Custom content</div>\n    </EventNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Job Settings in JavaScript\nDESCRIPTION: This snippet defines the configuration for a cron job, including its type, name, description, cron expression, and event emission details. The configuration uses placeholders for customization.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.javascript.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const config = {\n  type: 'cron',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  cron: '{{CRON_EXPRESSION}}',\n  emits: {{EMITS}},\n  flows: {{FLOWS}}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Route and Handler in Ruby for Motia\nDESCRIPTION: This snippet demonstrates how to configure an API route and implement a handler function in Ruby for Motia. It includes route configuration, request handling, and event emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/api.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef config\n  {\n    type: 'api',\n    name: 'Test state api trigger',\n    description: 'test state',\n    path: '/test-state',\n    method: 'POST',\n    emits: ['test-state'],\n    flows: ['test-state']\n  }\nend\n\ndef handler(req, ctx)\n  ctx.emit({\n    \"topic\" => \"test-state\",\n    \"data\" => req.body\n  })\n\n  {\n    \"status\" => 200,\n    \"body\" => { \"message\" => \"Success\" }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Step with Flow Association in JavaScript\nDESCRIPTION: This snippet shows how to define a step configuration in JavaScript, including how to associate it with a flow. It demonstrates setting up an event-type step that subscribes to and emits specific events, and belongs to the 'calculator-flow'.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/flows-and-visualization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// addNumbers.step.js\nexports.config = {\n  type: 'event',\n  name: 'AddNumbers',\n  subscribes: ['add-numbers'],\n  emits: ['numbers-added'],\n  flows: ['calculator-flow'] // <-- Flow association\n}\n\n// ... handler definition\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Step in Python\nDESCRIPTION: This example illustrates how to configure an Event Step in Python using Motia. It uses Pydantic for input validation and demonstrates event subscription and emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/event.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\n# Define a Pydantic model for input validation\nclass InputModel(BaseModel):\n    message: str\n\nconfig = {\n    \"type\": \"event\",\n    \"name\": \"Call OpenAI\",\n    \"subscribes\": [\"call-openai\"], \n    \"emits\": [\"openai-response\"],\n    \"input\": InputModel.model_json_schema(), # We use jsonschema to validate\n    \"flows\": [\"openai\"]\n}\n\nasync def handler(input, context):\n    context.logger.info('Processing input:', input)\n\n    await context.emit({\n        \"topic\": \"openai-response\",\n        \"data\": {\n            \"result\": f\"Processed: {input.get('message', '')}\"\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: State Management in TypeScript\nDESCRIPTION: Shows how to implement state management in a TypeScript step handler with typing for booking data and using traceId for scope.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StepHandler } from 'motia'\n\ninterface BookingData {\n  customer: { name: string; email: string };\n  venue: { id: string; name: string };\n}\n\nexport const handler: StepHandler<typeof config> = async (input, { state, traceId }) => { // Get traceId from context\n  // Store state (using traceId as scope)\n  await state.set<BookingData>(traceId, 'booking', {\n    customer: input.customer,\n    venue: input.venue,\n  });\n\n  // Retrieve state (using traceId as scope)\n  const booking = await state.get<BookingData>(traceId, 'booking');\n\n  // Delete specific state (using traceId as scope)\n  await state.delete(traceId, 'booking');\n\n  // Clear all state for this flow (using traceId as scope)\n  await state.clear(traceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Flow Context for Testing Step Handlers\nDESCRIPTION: Demonstrates creating a mock flow context for testing step handlers in isolation. It shows how to create the mock context and assert on emitted events.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/test/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMockFlowContext } from '@motiadev/test';\n\n// Create a mock context for testing a step handler\nconst mockContext = createMockFlowContext();\n\n// Call your step handler with the mock context\nawait myStepHandler(inputData, mockContext);\n\n// Assert on emitted events\nexpect(mockContext.emit).toHaveBeenCalledWith({\n  topic: 'expected.topic',\n  data: expect.any(Object)\n});\n```\n\n----------------------------------------\n\nTITLE: State Management Examples in TypeScript\nDESCRIPTION: This snippet demonstrates state management operations in TypeScript, including setting, getting, deleting, and clearing state data using the context's state methods.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait ctx.state.set(ctx.traceId, 'data', { value: 'test' });\nconst data = await ctx.state.get<{ value: string }>(ctx.traceId, 'data');\nawait ctx.state.delete(ctx.traceId, 'data');\nawait ctx.state.clear(ctx.traceId);\n```\n\n----------------------------------------\n\nTITLE: Implementing State Cleanup Procedures\nDESCRIPTION: Demonstrates proper state cleanup patterns including specific key deletion and full state clearing, with error handling.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: StepHandler<typeof config> = async (input, { state, traceId }) => {\n  try {\n    await processBooking(input)\n    // Clean up specific keys\n    await state.delete(traceId, 'booking.customer')\n    // Or clean everything\n    await state.clear(traceId)\n  } catch (error) {\n    // Handle errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Job Configuration in Motia Framework\nDESCRIPTION: Exports a configuration object that defines a cron job with placeholders for name, description, cron expression, and event emission settings. This configuration object informs the Motia framework about the job's properties and behavior.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.typescript.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n  type: 'cron',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  cron: '{{CRON_EXPRESSION}}',\n  emits: {{EMITS}},\n  flows: {{FLOWS}}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Request Handler in JavaScript\nDESCRIPTION: This snippet provides a template for an asynchronous request handler function. It includes logging and a basic success response structure, with placeholders for custom logic.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/api/template.javascript.txt#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const handler = async (req, { logger, emit }) => {\n  logger.info('Processing {{STEP_NAME}}', req)\n\n  // Add your handler logic here\n  \n  return {\n    status: 200,\n    body: { message: 'Success' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Motia Event Step Properties in JavaScript\nDESCRIPTION: Exports a configuration object that defines the event step's properties including type, name, description, subscribed events, emitted events, input schema, and available flows. The placeholders should be replaced with actual values for the specific step implementation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/event/template.javascript.txt#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  type: 'event',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  subscribes: {{SUBSCRIPTIONS}},\n  emits: {{EMITS}},\n  input: inputSchema,\n  flows: {{FLOWS}}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Application State with @motiadev/core\nDESCRIPTION: Shows how to create and use a state adapter for managing application state, using Redis as an example. Demonstrates setting and getting state values.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStateAdapter } from '@motiadev/core'\n\nconst stateAdapter = createStateAdapter({\n  adapter: 'redis',\n  host: 'localhost',\n  port: 6379\n})\n\n// Use state in your handlers\nawait state.set(traceId, 'key', value)\nconst value = await state.get(traceId, 'key')\n```\n\n----------------------------------------\n\nTITLE: Capturing Events in Motia Workflows\nDESCRIPTION: Shows how to use the tester to capture and assert on events emitted during workflow execution. It demonstrates setting up an event watcher, triggering an action, and checking captured events.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTester } from '@motiadev/test';\n\nconst tester = createTester();\n\n// Set up event capturing\nconst watcher = tester.watchEvents('event.topic');\n\n// Trigger an action that emits events\nawait tester.request()\n  .post('/api/trigger')\n  .send({ action: 'test' });\n\n// Get captured events\nconst events = watcher.getCapturedEvents();\nexpect(events).toHaveLength(1);\nexpect(events[0].data).toEqual({ result: 'success' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Job Handler in Motia Framework with TypeScript\nDESCRIPTION: Defines the handler function for a Motia cron job. The function is typed to match the exported config and receives context with logger and emit function. Contains commented example of event emission and placeholder for custom logic.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.type.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: StepHandler<typeof config> = async ({ logger, emit }) => {\n  logger.info('Running {{STEP_NAME}} cron job')\n\n  // Add your cron logic here\n  \n  // Example emit\n  // await emit({\n  //   topic: 'event-type',\n  //   data: {}\n  // })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Request Handler in Motia Framework\nDESCRIPTION: Defines an asynchronous handler function that processes incoming requests in the Motia framework. The function logs information about the request and returns a success response. It serves as a template where custom logic can be added.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/api/template.python.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(req, context):\n    context.logger.info(\"Processing {{STEP_NAME}}\", req)\n\n    # Add your handler logic here\n    \n    return {\n        \"status\": 200,\n        \"body\": {\"message\": \"Success\"}\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining API Route Configuration in TypeScript with Motia and Zod\nDESCRIPTION: This snippet defines the configuration for an API route using Motia's ApiRouteConfig type. It includes placeholders for route details and uses Zod for body schema validation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/api/template.typescript.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ApiRouteConfig, StepHandler } from '@motiadev/core'\nimport { z } from 'zod'\n\nexport const config: ApiRouteConfig = {\n  type: 'api',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  path: '{{PATH}}',\n  method: '{{METHOD}}',\n  emits: {{EMITS}},\n  flows: {{FLOWS}},\n  bodySchema: z.object({\n    // Add your schema here\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Jobs with @motiadev/core\nDESCRIPTION: Demonstrates how to set up and manage cron jobs using the setupCronHandlers function from @motiadev/core.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupCronHandlers } from '@motiadev/core'\n\nconst cronManager = setupCronHandlers(lockedData, eventManager, state, loggerFactory)\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Server with @motiadev/core\nDESCRIPTION: Demonstrates how to create and manage an HTTP server for handling API requests using the createServer function from @motiadev/core.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from '@motiadev/core'\n\nconst server = await createServer(lockedData, eventManager, stateAdapter, config)\n```\n\n----------------------------------------\n\nTITLE: Performance Monitoring in Motia Step Handler\nDESCRIPTION: Example of a Motia step handler that includes performance monitoring by measuring execution time and memory usage, providing valuable metrics in the operation completion log.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: StepHandler<typeof config> = async (input, { logger }) => {\n  const startTime = performance.now()\n  \n  // Process operation\n  const result = await processOperation(input)\n\n  logger.info('Operation completed', {\n    duration: performance.now() - startTime,\n    memoryUsage: process.memoryUsage().heapUsed\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Change Event\nDESCRIPTION: Defines event configuration including event type, name, subscriptions, and emitted events. Specifies event handler metadata for state change operations.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/python/steps/one.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    \"type\": \"event\",\n    \"name\": \"Set state change\",\n    \"description\": \"set a state change for evaluation\",\n    \"subscribes\": [\"test-state\"], \n    \"emits\": [\"check-state-change\"],\n    \"input\": None,  # No schema validation in Python version\n    \"flows\": [\"default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Job Handler Function in Motia Framework\nDESCRIPTION: Exports an asynchronous handler function that contains the business logic for the cron job. The function receives a FlowContext object with logger and emit capabilities. It includes commented example code showing how to emit events to other parts of the application.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.typescript.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler = async ({ logger, emit }: FlowContext) => {\n  logger.info('Running {{STEP_NAME}} cron job')\n\n  // Add your cron logic here\n  \n  // Example emit\n  // await emit({\n  //   topic: 'event-type',\n  //   data: {}\n  // })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Tester Instance in TypeScript\nDESCRIPTION: Demonstrates how to create a tester instance using createTester() and use it to test API endpoints. It shows making a POST request and asserting on the response.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTester } from '@motiadev/test';\n\n// Create a tester instance\nconst tester = createTester();\n\n// Use the tester to test your workflows\nconst response = await tester.request()\n  .post('/api/endpoint')\n  .send({ data: 'test' });\n\n// Assert on the response\nexpect(response.status).toBe(200);\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Step in JavaScript\nDESCRIPTION: This snippet shows how to set up an Event Step in JavaScript using Motia. It includes input validation with zod and demonstrates event handling and emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/event.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst z = require('zod');\n\nconst inputSchema = z.object({\n  message: z.string()\n});\n\nconst config = {\n  type: 'event',\n  name: 'stepA',\n  description: 'Hello from Step A',\n  subscribes: ['pms.start'],\n  emits: ['pms.stepA.done'],\n  input: inputSchema,\n  flows: ['parallel-merge'],\n};\n\nconst handler = async (input, { emit, logger }) => {\n  logger.info('Processing message:', input.message)\n\n  await emit({\n    topic: 'pms.stepA.done',\n    data: {\n      result: `Processed: ${input.message}`\n    }\n  })\n};\n\nmodule.exports = { config, handler };\n```\n\n----------------------------------------\n\nTITLE: Configuring and Implementing a Motia Event Handler in TypeScript\nDESCRIPTION: This snippet defines a complete Motia event handler that sets a state value and emits an event to verify the state change. It uses Zod for input validation, configures event subscriptions and emissions, and implements the handler logic with state management and event emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/default/steps/one.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventConfig, StepHandler } from 'motia'\nimport { z } from 'zod'\n\ntype Input = typeof inputSchema\n\nconst inputSchema = z.object({})\n\nexport const config: EventConfig<Input> = {\n  type: 'event',\n  name: 'Set state change',\n  description: 'set a state change for evaluation',\n  subscribes: ['test-state'],\n  emits: ['check-state-change'],\n  input: inputSchema,\n  flows: ['default'],\n}\n\nexport const handler: StepHandler<typeof config> = async (input, { traceId, logger, state, emit }) => {\n  logger.info('step one, set a value in state')\n\n  const message = 'welcome to motia!';\n  await state.set<any>(traceId, 'test', message)\n\n  await emit({\n    topic: 'check-state-change',\n    data: {key: 'test', expected: message}\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Change Check Event in Python\nDESCRIPTION: Defines the configuration for a 'Check state change' event, including its type, name, description, subscribed events, and flows. The input schema is set to None, indicating no schema validation for Python.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/python/steps/two.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nconfig = {\n  \"type\": \"event\",\n  \"name\": \"Check state change\",\n  \"description\": \"check state change\",\n  \"subscribes\": [\"check-state-change\"], \n  \"emits\": [],\n  \"input\": None,  # No schema validation for Python\n  \"flows\": [\"default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Node Component in React/TypeScript\nDESCRIPTION: A React functional component that creates an event node with a button trigger. Uses BaseNode from @motiadev/workbench and includes a placeholder click handler. The node is configured as a 'noop' variant with disabled target handle.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/ui/event.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react'\nimport { BaseNode, Button, EventNodeProps } from '@motiadev/workbench'\n\nexport const Node: React.FC<EventNodeProps> = ({ data }) => {\n  const doSomething = () => {\n    window.alert('Replace this with your custom logic')\n  }\n\n\n  return (\n    <BaseNode title=\"{{STEP_NAME}}\" variant=\"noop\" {...data} disableTargetHandle>\n      <Button onClick={doSomething}>Click me</Button>\n    </BaseNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Multiple Steps in a Flow using JavaScript\nDESCRIPTION: This example demonstrates how to create a second step that connects to the previous one within the same flow. It shows a 'ValidateNumbers' step that subscribes to the event emitted by the 'AddNumbers' step, creating a chain in the 'calculator-flow'.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/flows-and-visualization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// validateNumbers.step.js\nexports.config = {\n  type: 'event',\n  name: 'ValidateNumbers',\n  subscribes: ['numbers-added'],\n  emits: ['numbers-validated'],\n  flows: ['calculator-flow'] // <-- Same flow name connects the steps\n}\n\n// ... handler definition\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Step in Python\nDESCRIPTION: Python event processor step that handles incoming events, manages state, and emits processed events. Includes error handling and logging.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    'type': 'event',\n    'name': 'EventProcessor',\n    'description': 'Processes event data',\n    'subscribes': ['trigger.received'],\n    'emits': ['trigger.processed'],\n    'input': {\n        'type': 'object',\n        'properties': {\n            'message': {'type': 'string'}\n        },\n        'required': ['message']\n    },\n    'flows': ['my-flow']\n}\n\nasync def handler(input, ctx):\n    ctx.logger.info('Processing event', {'input': input})\n    try:\n        await ctx.state.set(ctx.trace_id, 'result', {'value': input['message']})\n        await ctx.emit({'topic': 'trigger.processed', 'data': {'result': f\"Processed: {input['message']}\"}})    \n    except Exception as error:\n        ctx.logger.error('Event failed', {'error': str(error)})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cron Step in Python\nDESCRIPTION: This Python implementation of a Cron Step defines a configuration dictionary with the cron schedule and an async handler function. It runs every hour at minute 0 and emits a 'cron-ticked' event when executed.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/cron.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    \"type\": \"cron\",\n    \"name\": \"PeriodicJob\",\n    \"description\": \"Runs every minute and emits a timestamp\",\n    \"cron\": \"0 * * * *\",\n    \"emits\": [\"cron-ticked\"],\n    \"flows\": [\"cron-example\"]\n}\n  \nasync def handler(context):\n    await context.emit({\n        \"topic\": \"cron-ticked\",\n        \"data\": { \"message\": \"Cron job executed\" },\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Analyzer Event Step in TypeScript\nDESCRIPTION: This TypeScript module defines an event step that analyzes sentiment in feedback messages. It subscribes to 'feedback.received' events, determines sentiment based on message content, and emits a 'feedback.analyzed' event with the results.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// feedback-analyzer.step.ts\nimport { EventConfig, StepHandler } from 'motia';\nimport { z } from 'zod';\n\nconst inputSchema = z.object({ message: z.string() });\n\nexport const config: EventConfig<typeof inputSchema> = {\n  type: 'event',\n  name: 'FeedbackAnalyzer',\n  description: 'Analyzes feedback',\n  subscribes: ['feedback.received'],\n  emits: ['feedback.analyzed'],\n  input: inputSchema,\n  flows: ['feedback-analyzer']\n};\n\nexport const handler: StepHandler<typeof config> = async (input, { logger, emit, state, traceId }) => {\n  logger.info('Analyzing', { input });\n  try {\n    const sentiment = input.message.includes('good') ? 'positive' : 'neutral';\n    await state.set(traceId, 'sentiment', sentiment);\n    await emit({ topic: 'feedback.analyzed', data: { sentiment } });\n  } catch (error) {\n    logger.error('Analysis failed', { error: error.message });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling State Change Check Event in Python\nDESCRIPTION: Implements an asynchronous handler function for the 'Check state change' event. It retrieves a value from the state using a key, compares it with an expected value, and logs the result. The function uses context for logging and state access.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/python/steps/two.step.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def handler(input, context):\n  context.logger.info('received check-state-change event', input)\n\n  value = await context.state.get(context.traceId, input.key)\n\n  if value != input.expected:\n    context.logger.error(\"🔴 the provided  value for the state key ${input.key} does not match\", { \"value\": value, \"expected\": input.expected })\n  else:\n    context.logger.info(\"🟢 the provided value matches the state value for key ${input.key} 🏁\")\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step for Human Approvals in TypeScript\nDESCRIPTION: Demonstrates how to set up a NOOP step to represent human-in-the-loop activities, such as a manager review process in an approval workflow.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'Manager Review',\n  description: 'Manager reviews request',\n  virtualSubscribes: ['approval.requested'],\n  virtualEmits: ['/api/approvals/submit'],\n  flows: ['approval'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Step in TypeScript\nDESCRIPTION: TypeScript scheduled task implementation using cron syntax. Executes periodic tasks and emits events with results.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CronConfig, StepHandler } from 'motia';\n\nexport const config: CronConfig = {\n  type: 'cron',\n  name: 'DailyTask',\n  description: 'Runs daily at 9 AM',\n  cron: '0 9 * * *',\n  emits: ['task.ran'],\n  flows: ['my-flow']\n};\n\nexport const handler: StepHandler<typeof config> = async (_, { logger, emit }) => {\n  logger.info('Cron job started');\n  try {\n    await emit({ topic: 'task.ran', data: { timestamp: Date.now() } });\n    logger.info('Cron job completed');\n  } catch (error) {\n    logger.error('Cron job failed', { error: error.message });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step for External System Integration in TypeScript\nDESCRIPTION: Shows how to configure a NOOP step to represent integration with external systems, using a GitHub webhook as an example.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'GitHub Webhook',\n  description: 'Waiting for repository events',\n  virtualSubscribes: ['repository.watched'],\n  virtualEmits: ['/api/github/webhook'],\n  flows: ['repo-automation'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step for Physical Processes in TypeScript\nDESCRIPTION: Demonstrates how to set up a NOOP step to represent physical processes, such as order fulfillment in a warehouse.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'Order Fulfillment',\n  description: 'Warehouse processes order',\n  virtualSubscribes: ['order.placed'],\n  virtualEmits: ['/api/warehouse/status'],\n  flows: ['fulfillment'],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Analyzer Event Step in Ruby\nDESCRIPTION: This Ruby module defines an event step that analyzes sentiment in feedback messages. It subscribes to 'feedback.received' events, determines sentiment based on message content, and emits a 'feedback.analyzed' event with the results.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# feedback-analyzer.step.rb\ndef config\n  {\n    type: 'event',\n    name: 'FeedbackAnalyzer',\n    description: 'Analyzes feedback',\n    subscribes: ['feedback.received'],\n    emits: ['feedback.analyzed'],\n    input: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' }\n      },\n      required: ['message']\n    },\n    flows: ['feedback-analyzer']\n  }\nend\n\ndef handler(input, ctx)\n  ctx.logger.info('Analyzing', { input: input })\n  begin\n    sentiment = input[:message].include?('good') ? 'positive' : 'neutral'\n    ctx.state.set(ctx.trace_id, 'sentiment', sentiment)\n    ctx.emit({ topic: 'feedback.analyzed', data: { sentiment: sentiment } })\n  rescue StandardError => error\n    ctx.logger.error('Analysis failed', { error: error.message })\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step for External System Integration in JavaScript\nDESCRIPTION: Provides the JavaScript version of the NOOP step configuration for external system integration, using the same GitHub webhook example.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'noop',\n  name: 'GitHub Webhook',\n  description: 'Waiting for repository events',\n  virtualSubscribes: ['repository.watched'],\n  virtualEmits: ['/api/github/webhook'],\n  flows: ['repo-automation'],\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Logging for Troubleshooting in Motia\nDESCRIPTION: Example of using debug logs in Motia for detailed troubleshooting by including raw input data, timestamp, and current state information that can be valuable during development.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.debug('Operation details', {\n  rawInput: input,\n  timestamp: Date.now(),\n  state: currentState\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Step in Python\nDESCRIPTION: Python scheduled task implementation using cron syntax. Executes jobs on schedule and emits completion events.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    'type': 'cron',\n    'name': 'DailyTask',\n    'description': 'Runs daily at 9 AM',\n    'cron': '0 9 * * *',\n    'emits': ['task.ran'],\n    'flows': ['my-flow']\n}\n\nasync def handler(input, ctx):\n    ctx.logger.info('Cron job started')\n    try:\n        await ctx.emit({'topic': 'task.ran', 'data': {'timestamp': int(time.time())}})\n        ctx.logger.info('Cron job completed')\n    except Exception as error:\n        ctx.logger.error('Cron job failed', {'error': str(error)})\nimport time\n```\n\n----------------------------------------\n\nTITLE: Testing Event Step in TypeScript\nDESCRIPTION: This snippet demonstrates how to test an event step using Jest and the @motiadev/testing library in TypeScript.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestContext } from '@motiadev/testing';\nimport { handler } from './my-step.step';\n\ndescribe('MyStep', () => {\n  it('emits event', async () => {\n    const { emit, done } = createTestContext();\n    await handler({ key: 'test' }, { emit });\n    expect(emit).toHaveBeenCalledWith({ topic: 'my.event', data: { key: 'test' } });\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAI Integration for Sentiment Analysis\nDESCRIPTION: Implements the OpenAI API integration to analyze text sentiment. Processes the response and emits events based on positive or negative sentiment detection.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/examples/sentiment-analysis.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventConfig, StepHandler } from 'motia'\nimport { z } from 'zod'\nimport { OpenAI } from 'openai'\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })\n\nconst inputSchema = z.object({\n  text: z.string(),\n})\n\nexport const config: EventConfig<typeof inputSchema> = {\n  type: 'event',\n  name: 'OpenAI Sentiment Analyzer',\n  subscribes: ['openai.analyzeSentimentRequest'],\n  emits: ['openai.positiveSentiment', 'openai.negativeSentiment'],\n  input: inputSchema,\n  flows: ['sentiment-demo'],\n}\n\nexport const handler: StepHandler<typeof config> = async (input, { emit, logger }) => {\n  logger.info('[OpenAI Sentiment Analyzer] Prompting OpenAI...', { text: input.text })\n\n  try {\n    const systemPrompt =\n      'You are an assistant that returns only JSON: {\"sentiment\":\"positive|negative\",\"analysis\":\"...\"}'\n    const userPrompt = `Analyze the sentiment of this text: \"${input.text}\". Return JSON with keys \"sentiment\" and \"analysis\".`\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: userPrompt },\n      ],\n    })\n\n    const content = response.choices[0]?.message?.content || ''\n    logger.info('[OpenAI Sentiment Analyzer] Raw response', { content })\n\n    let parsed: { sentiment?: string; analysis?: string } = {}\n    try {\n      parsed = JSON.parse(content.trim())\n    } catch (err) {\n      logger.error('[OpenAI Sentiment Analyzer] Unable to parse JSON', { error: err })\n      return\n    }\n\n    if (parsed.sentiment?.toLowerCase() === 'positive') {\n      await emit({\n        topic: 'openai.positiveSentiment',\n        data: { ...parsed },\n      })\n    } else {\n      await emit({\n        topic: 'openai.negativeSentiment',\n        data: { ...parsed },\n      })\n    }\n  } catch (err: any) {\n    logger.error('[OpenAI Sentiment Analyzer] Error calling OpenAI', { error: err.message })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for Event Input Validation in JavaScript\nDESCRIPTION: Creates a Zod schema object for validating the input data structure for an event step. This schema ensures that incoming event data meets the expected format before processing.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/event/template.javascript.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { z } = require('zod')\n\nconst inputSchema = z.object({\n  // Add your schema here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step for Physical Processes in JavaScript\nDESCRIPTION: Shows the JavaScript equivalent of the NOOP step configuration for representing physical processes, using the same order fulfillment example.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'noop',\n  name: 'Order Fulfillment',\n  description: 'Warehouse processes order',\n  virtualSubscribes: ['order.placed'],\n  virtualEmits: ['/api/warehouse/status'],\n  flows: ['fulfillment'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Motia Event Handler\nDESCRIPTION: Sets up event configuration including type, name, subscriptions, and input schema validation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/default/steps/two.step.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: EventConfig<Input> = {\n  type: 'event',\n  name: 'Check state change',\n  description: 'check state change',\n  subscribes: ['check-state-change'],\n  emits: [],\n  input: inputSchema,\n  flows: ['default'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Handling Cron Job in Ruby\nDESCRIPTION: This snippet defines a cron job that runs daily at 9 AM. It emits a 'task.ran' event with a timestamp upon successful execution and logs the job's start and completion.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef config\n  {\n    type: 'cron',\n    name: 'DailyTask',\n    description: 'Runs daily at 9 AM',\n    cron: '0 9 * * *',\n    emits: ['task.ran'],\n    flows: ['my-flow']\n  }\nend\n\ndef handler(_, ctx)\n  ctx.logger.info('Cron job started')\n  begin\n    ctx.emit({ topic: 'task.ran', data: { timestamp: Time.now.to_i } })\n    ctx.logger.info('Cron job completed')\n  rescue StandardError => error\n    ctx.logger.error('Cron job failed', { error: error.message })\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling API Request in Ruby\nDESCRIPTION: Implements the request handler function. It logs the incoming request, provides a placeholder for custom logic, and returns a success response. The function takes request and context parameters, allowing access to request data and application context.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/api/template.ruby.txt#2025-04-21_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ndef handler(req, context)\n  context.logger.info('Processing {{STEP_NAME}}', req)\n\n  # Add your handler logic here\n  \n  {\n    status: 200,\n    body: { message: 'Success' }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Analyzer Event Step in Python\nDESCRIPTION: This Python module defines an event step that analyzes sentiment in feedback messages. It subscribes to 'feedback.received' events, determines sentiment based on message content, and emits a 'feedback.analyzed' event with the results.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# feedback-analyzer.step.py\nconfig = {\n    'type': 'event',\n    'name': 'FeedbackAnalyzer',\n    'description': 'Analyzes feedback',\n    'subscribes': ['feedback.received'],\n    'emits': ['feedback.analyzed'],\n    'input': {\n        'type': 'object',\n        'properties': {\n            'message': {'type': 'string'}\n        },\n        'required': ['message']\n    },\n    'flows': ['feedback-analyzer']\n}\n\nasync def handler(input, ctx):\n    ctx.logger.info('Analyzing', {'input': input})\n    try:\n        sentiment = 'positive' if 'good' in input['message'] else 'neutral'\n        await ctx.state.set(ctx.trace_id, 'sentiment', sentiment)\n        await ctx.emit({'topic': 'feedback.analyzed', 'data': {'sentiment': sentiment}})\n    except Exception as error:\n        ctx.logger.error('Analysis failed', {'error': str(error)})\n```\n\n----------------------------------------\n\nTITLE: Detailed Error Logging in Motia\nDESCRIPTION: Example showing how to create detailed error logs in Motia by including error message, code, input data, and stack trace, which is valuable for troubleshooting and debugging.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.error('Operation failed', {\n  error: error.message,\n  code: error.code,\n  input: JSON.stringify(input),\n  stack: error.stack\n})\n```\n\n----------------------------------------\n\nTITLE: State Management Examples in Python\nDESCRIPTION: This snippet shows state management operations in Python, including setting, getting, deleting, and clearing state data using the context's state methods.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nawait ctx.state.set(ctx.trace_id, 'data', {'value': 'test'})\ndata = await ctx.state.get(ctx.trace_id, 'data')\nawait ctx.state.delete(ctx.trace_id, 'data')\nawait ctx.state.clear(ctx.trace_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step for Human Approvals in JavaScript\nDESCRIPTION: Provides the JavaScript equivalent of the NOOP step configuration for human approval processes, using the same manager review example.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'noop',\n  name: 'Manager Review',\n  description: 'Manager reviews request',\n  virtualSubscribes: ['approval.requested'],\n  virtualEmits: ['/api/approvals/submit'],\n  flows: ['approval'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Handling API Feedback in Ruby\nDESCRIPTION: This snippet defines an API step for receiving feedback in Ruby. It includes configuration, request processing, and error handling.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ndef config\n  {\n    type: 'api',\n    name: 'FeedbackReceiver',\n    description: 'Receives feedback',\n    path: '/feedback',\n    method: 'POST',\n    emits: ['feedback.received'],\n    bodySchema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' }\n      },\n      required: ['message']\n    },\n    flows: ['feedback-analyzer']\n  }\nend\n\ndef handler(req, ctx)\n  ctx.logger.info('Feedback received', { body: req.body })\n  begin\n    ctx.emit({ topic: 'feedback.received', data: req.body })\n    { status: 200, body: { message: 'Feedback accepted' } }\n  rescue StandardError => error\n    ctx.logger.error('Feedback error', { error: error.message })\n    { status: 500, body: { error: 'Failed' } }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Cron Job Handler Function in Python\nDESCRIPTION: Defines an asynchronous handler function that will be executed when the cron job runs. It includes logging and placeholder comments for implementing custom logic and event emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.python.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(context):\n    context.logger.info(\"Running {{STEP_NAME}} cron job\")\n\n    # Add your cron logic here\n    \n    # Example emit\n    # await context.emit({\n    #     \"topic\": \"event-type\",\n    #     \"data\": {}\n    # })\n```\n\n----------------------------------------\n\nTITLE: Configuring and Handling API Feedback in Python\nDESCRIPTION: This snippet defines an API step for receiving feedback in Python. It includes configuration, request handling, and error management.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    'type': 'api',\n    'name': 'FeedbackReceiver',\n    'description': 'Receives feedback',\n    'path': '/feedback',\n    'method': 'POST',\n    'emits': ['feedback.received'],\n    'bodySchema': {\n        'type': 'object',\n        'properties': {\n            'message': {'type': 'string'}\n        },\n        'required': ['message']\n    },\n    'flows': ['feedback-analyzer']\n}\n\nasync def handler(req, ctx):\n    ctx.logger.info('Feedback received', {'body': req.body})\n    try:\n        await ctx.emit({'topic': 'feedback.received', 'data': req.body})\n        return {'status': 200, 'body': {'message': 'Feedback accepted'}}\n    except Exception as error:\n        ctx.logger.error('Feedback error', {'error': str(error)})\n        return {'status': 500, 'body': {'error': 'Failed'}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Logic in Ruby for Motia Framework\nDESCRIPTION: This method handles the event processing. It logs the input, provides a placeholder for custom logic implementation, and includes an example of how to emit an event. The 'input' parameter contains the event data, and 'context' provides access to framework utilities like logging and event emission.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/event/template.ruby.txt#2025-04-21_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ndef handler(input, context)\n  context.logger.info('Processing {{STEP_NAME}}', input)\n\n  # Add your handler logic here\n  \n  # Example emit\n  # context.emit({\n  #   topic: 'event-type',\n  #   data: {}\n  # })\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Simulator NOOP Step in JavaScript\nDESCRIPTION: Shows the JavaScript equivalent of the webhook simulator NOOP step. It includes both the configuration file and the React component for the UI.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// test-webhook.step.js\nconst config = {\n  type: 'noop',\n  name: 'Webhook Simulator',\n  description: 'Simulates incoming webhook events',\n  virtualEmits: ['webhook.received'],\n  virtualSubscribes: [],\n  flows: ['webhook-flow'],\n}\n\nmodule.exports = { config }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// test-webhook.step.jsx\nimport React from 'react'\nimport { BaseHandle, Position } from 'motia/workbench'\n\nexport default function WebhookSimulator() {\n  return (\n    <div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\">\n      <div className=\"text-sm font-medium mb-2\">Webhook Simulator</div>\n      <button \n        onClick={() => {\n          fetch('/api/webhook', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ event: 'test' }),\n          })\n        }}\n        className=\"px-3 py-1 bg-blue-600 rounded text-sm\"\n      >\n        Trigger Webhook\n      </button>\n      <BaseHandle type=\"source\" position={Position.Bottom} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Job Handler in Ruby\nDESCRIPTION: Defines a handler method that executes the cron job logic, including logging and optional event emission functionality. Includes commented example for emitting events.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.ruby.txt#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef handler(context)\n  context.logger.info('Running {{STEP_NAME}} cron job')\n\n  # Add your cron logic here\n  \n  # Example emit\n  # context.emit({\n  #   topic: 'event-type',\n  #   data: {}\n  # })\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing State Change Verification Handler\nDESCRIPTION: Implements the event handler that compares state values with expected values and logs results.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/default/steps/two.step.txt#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: StepHandler<typeof config> = async (input, { traceId, logger, state }) => {\n  logger.info('received check-state-change event', input)\n\n  const value = await state.get<any>(traceId, input.key)\n\n  if (value !== input.expected) {\n    logger.error(`🔴 the provided  value for the state key ${input.key} does not match`, { value, expected: input.expected })\n  } else {\n    logger.info(`🟢 the provided value matches the state value for key ${input.key} 🏁`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Positive Sentiment Handler\nDESCRIPTION: Handles positive sentiment events from the OpenAI analysis. Provides logging and can be extended for additional actions like Slack notifications.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/examples/sentiment-analysis.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventConfig, StepHandler } from 'motia'\nimport { z } from 'zod'\n\nconst positiveSchema = z.object({\n  sentiment: z.string(),\n  analysis: z.string().optional(),\n})\n\nexport const config: EventConfig<typeof positiveSchema> = {\n  type: 'event',\n  name: 'Positive Sentiment Responder',\n  subscribes: ['openai.positiveSentiment'],\n  emits: [],\n  input: positiveSchema,\n  flows: ['sentiment-demo'],\n}\n\nexport const handler: StepHandler<typeof config> = async (input, { logger }) => {\n  logger.info('[Positive Responder] The sentiment is positive!', { analysis: input.analysis })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling State Change Event\nDESCRIPTION: Asynchronous event handler that sets a test message in state and emits a check event. Takes input and context parameters, logs actions, and uses state management functions.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/python/steps/one.step.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(input, context):\n    context.logger.info('step one, set a value in state')\n\n    message = \"welcome to motia!\"\n    await context.state.set(context.traceId, \"test\", message)\n \n    await context.emit({\n        \"topic\": \"check-state-change\",\n        \"data\": {\"key\": \"test\", \"expected\": message}\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Properties in Ruby for Motia Framework\nDESCRIPTION: This method defines the configuration for an event in the Motia framework. It specifies the event type, name, description, subscriptions, emissions, and flows. The placeholders ({{...}}) are meant to be replaced with actual values.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/event/template.ruby.txt#2025-04-21_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ndef config\n  {\n    type: 'event',\n    name: '{{STEP_NAME}}',\n    description: '{{DESCRIPTION}}',\n    subscribes: {{SUBSCRIPTIONS}},\n    emits: {{EMITS}},\n    flows: {{FLOWS}}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring API Endpoint for Test State\nDESCRIPTION: Defines API endpoint configuration including path, method, event emissions and flows\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/python/steps/api.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n  'type': 'api',\n  'name': 'Test state api trigger',\n  'description': 'test state',\n  'path': '/test-state',\n  'method': 'POST',\n  'emits': ['test-state'],\n  'flows': ['default']\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Examples in Ruby\nDESCRIPTION: This snippet illustrates structured logging in Ruby using different log levels (info, warn, error, debug) with context information.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nctx.logger.info('Processing started', { input: input })\nctx.logger.warn('Large value', { value: 1000 })\nctx.logger.error('Failed', { error: error.message, stack: error.backtrace.join(\"\\n\") })\nctx.logger.debug('Details', { rawInput: input.to_h })\n```\n\n----------------------------------------\n\nTITLE: Implementing Flow Starter Node Component in React/TypeScript\nDESCRIPTION: Creates a React component that renders a workflow starter node using Motia workbench components. The component includes a button that triggers a POST request to '/default' endpoint when clicked.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/python/steps/noop.step.tsx.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BaseNode, Button, NoopNodeProps } from 'motia/workbench'\nimport React from 'react'\n\nexport default function FlowStarter({ data }: NoopNodeProps) {\n  const start = () => {\n    fetch('/default', { method: 'POST' })\n  }\n\n  return (\n    <BaseNode title=\"Start\" variant=\"noop\" disableTargetHandle>\n      <Button onClick={start}>Start Flow</Button>\n    </BaseNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Noop Flow Starter in TypeScript for Motia\nDESCRIPTION: This code snippet defines a configuration object of type NoopConfig for Motia. It sets up a 'noop' type flow starter named 'Flow Starter' that initiates the default flow. The configuration includes virtual emits for the '/default' path and specifies 'default' in the flows array.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/default/steps/noop.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NoopConfig } from 'motia'\n\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'Flow Starter',\n  description: 'Start the default flow',\n  virtualSubscribes: [],\n  virtualEmits: ['/default'],\n  flows: ['default'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step in TypeScript\nDESCRIPTION: This snippet defines a NOOP (No Operation) step configuration in TypeScript. It simulates an external process and defines virtual subscriptions and emissions.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NoopConfig } from 'motia';\n\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'ExternalProcess',\n  description: 'Simulates external action',\n  virtualSubscribes: ['start'],\n  virtualEmits: ['done'],\n  flows: ['my-flow']\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Step Configuration Method in Ruby\nDESCRIPTION: A Ruby method that returns a hash containing step configuration metadata. Uses template placeholders ({{STEP_NAME}}, {{DESCRIPTION}}, etc.) that get replaced with actual values when the configuration is used.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/noop/template.ruby.txt#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef config\n  {\n    type: 'noop',\n    name: '{{STEP_NAME}}',\n    description: '{{DESCRIPTION}}',\n    virtualEmits: {{VIRTUAL_EMITS}},\n    virtualSubscribes: {{VIRTUAL_SUBSCRIBES}},\n    flows: {{FLOWS}}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Daily Report Cron Step in Ruby\nDESCRIPTION: This Ruby module defines a cron step that generates a daily report at 9 AM. It retrieves sentiment data from state, emits a 'report.generated' event with the data and timestamp, and then clears the state.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n# feedback-report.step.rb\ndef config\n  {\n    type: 'cron',\n    name: 'FeedbackReporter',\n    description: 'Reports daily at 9 AM',\n    cron: '0 9 * * *',\n    emits: ['report.generated'],\n    flows: ['feedback-analyzer']\n  }\nend\n\ndef handler(_, ctx)\n  ctx.logger.info('Generating report')\n  begin\n    sentiment = ctx.state.get(ctx.trace_id, 'sentiment') || 'unknown'\n    ctx.emit({ topic: 'report.generated', data: { sentiment: sentiment, date: Time.now.iso8601 } })\n    ctx.state.clear(ctx.trace_id)\n    ctx.logger.info('Report completed')\n  rescue StandardError => error\n    ctx.logger.error('Report failed', { error: error.message })\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node Component in React for Motia Workbench\nDESCRIPTION: This code snippet defines a React functional component called 'Node' that extends the BaseNode component from the Motia Workbench library. It includes a button with a placeholder function and disables the target handle. The component is designed to be used as a custom node in the Motia Workbench application.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/ui/cron.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { BaseNode, Button, CronNodeProps } from '@motiadev/workbench'\n\nexport const Node: React.FC<CronNodeProps> = ({ data }) => {\n  const doSomething = () => {\n    window.alert('Replace this with your custom logic')\n  }\n\n\n  return (\n    <BaseNode title=\"{{STEP_NAME}}\" variant=\"noop\" {...data} disableTargetHandle>\n      <Button onClick={doSomething}>Click me</Button>\n    </BaseNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Motia Flow Configuration\nDESCRIPTION: Exports a NoopConfig object that defines a flow starter component. It configures the component name, description, virtual event handling, and associated flows. The component is set up as a no-operation type that emits 'test-state' events.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/python/steps/noop.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NoopConfig } from 'motia'\n\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'Flow Starter',\n  description: 'Start the default flow',\n  virtualSubscribes: [],\n  virtualEmits: ['test-state'],\n  flows: ['default'],\n}\n```\n\n----------------------------------------\n\nTITLE: State Management in Python\nDESCRIPTION: Shows how to handle state management in a Python step handler using context object and trace_id for scope.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(input, ctx): # ctx is the context object\n    trace_id = ctx.trace_id # Access traceId from context\n\n    # Store state (using traceId as scope)\n    await ctx.state.set(trace_id, 'booking', { \n        'customer': input.customer,\n        'venue': input.venue\n    })\n\n    # Retrieve state (using traceId as scope)\n    booking = await ctx.state.get(trace_id, 'booking') \n\n    # Delete specific state (using traceId as scope)\n    await ctx.state.delete(trace_id, 'booking') \n\n    # Clear all state (using traceId as scope)\n    await ctx.state.clear(trace_id)\n```\n\n----------------------------------------\n\nTITLE: Creating NOOP Step UI Component in TypeScript React\nDESCRIPTION: Illustrates how to create a UI component for a NOOP step using TypeScript and React. It includes custom UI elements and a BaseHandle for connecting to other steps in the Motia Workbench.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// myStep.step.tsx\nimport React from 'react'\nimport { BaseHandle, Position } from 'motia/workbench'\n\nexport default function MyStep() {\n  return (\n    <div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\">\n      <div className=\"text-sm font-medium\">My Step UI</div>\n      {/* Your custom UI elements */}\n      <BaseHandle type=\"source\" position={Position.Bottom} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Job Properties with Template Placeholders\nDESCRIPTION: Defines the configuration object for a cron job with placeholder values that need to be replaced when implementing a specific job. The configuration includes job type, name, description, cron expression, and event emission settings.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.python.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nconfig = {\n    \"type\": \"cron\",\n    \"name\": \"{{STEP_NAME}}\",\n    \"description\": \"{{DESCRIPTION}}\",\n    \"cron\": \"{{CRON_EXPRESSION}}\",\n    \"emits\": {{EMITS}},\n    \"flows\": {{FLOWS}}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Handling API Feedback in TypeScript\nDESCRIPTION: This snippet defines an API step for receiving feedback in TypeScript. It includes configuration, request validation, and error handling.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiRouteConfig, StepHandler } from 'motia';\nimport { z } from 'zod';\n\nconst bodySchema = z.object({ message: z.string() });\n\nexport const config: ApiRouteConfig = {\n  type: 'api',\n  name: 'FeedbackReceiver',\n  description: 'Receives feedback',\n  path: '/feedback',\n  method: 'POST',\n  emits: ['feedback.received'],\n  bodySchema,\n  flows: ['feedback-analyzer']\n};\n\nexport const handler: StepHandler<typeof config> = async (req, { logger, emit }) => {\n  logger.info('Feedback received', { body: req.body });\n  try {\n    await emit({ topic: 'feedback.received', data: req.body });\n    return { status: 200, body: { message: 'Feedback accepted' } };\n  } catch (error) {\n    logger.error('Feedback error', { error: error.message });\n    return { status: 500, body: { error: 'Failed' } };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Configuration Object for Motia Step in JavaScript\nDESCRIPTION: This code exports a configuration object for a Motia project step. It includes placeholders for step name, description, virtual emits and subscribes, and flows. The type is set to 'noop' (no operation).\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/noop/template.javascript.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const config = {\n  type: 'noop',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  virtualEmits: {{VIRTUAL_EMITS}},\n  virtualSubscribes: {{VIRTUAL_SUBSCRIBES}},\n  flows: {{FLOWS}}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Job Settings in Ruby\nDESCRIPTION: Defines a configuration method that returns a hash with cron job settings including type, name, description, cron expression, and event configurations.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.ruby.txt#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef config\n  {\n    type: 'cron',\n    name: '{{STEP_NAME}}',\n    description: '{{DESCRIPTION}}',\n    cron: '{{CRON_EXPRESSION}}',\n    emits: {{EMITS}},\n    flows: {{FLOWS}}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step for Webhook Callbacks in JavaScript\nDESCRIPTION: Shows the JavaScript version of the NOOP step configuration for webhook callbacks, using the same example of waiting for a Stripe payment confirmation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  type: 'noop',\n  name: 'Wait for Stripe Webhook',\n  description: 'Waits for payment confirmation',\n  virtualSubscribes: ['payment.initiated'],\n  virtualEmits: ['/api/stripe/webhook'],\n  flows: ['payment'],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic UI Step in TypeScript React\nDESCRIPTION: Shows how to create a basic custom UI Step component using TypeScript and React. It uses the EventNode component from Motia Workbench.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/ui-steps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// myStep.step.tsx\n\nimport React from 'react'\nimport { EventNode } from 'motia/workbench'\nimport type { EventNodeProps } from 'motia/workbench'\n\nexport default function MyStep({ data }: EventNodeProps) {\n  return (\n    <EventNode\n      data={data}\n      variant=\"white\"\n      className=\"py-2 px-4\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Daily Report Cron Step in TypeScript\nDESCRIPTION: This TypeScript module defines a cron step that generates a daily report at 9 AM. It retrieves sentiment data from state, emits a 'report.generated' event with the data and timestamp, and then clears the state.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// feedback-report.step.ts\nimport { CronConfig, StepHandler } from 'motia';\n\nexport const config: CronConfig = {\n  type: 'cron',\n  name: 'FeedbackReporter',\n  description: 'Reports daily at 9 AM',\n  cron: '0 9 * * *',\n  emits: ['report.generated'],\n  flows: ['feedback-analyzer']\n};\n\nexport const handler: StepHandler<typeof config> = async (_, { logger, emit, state, traceId }) => {\n  logger.info('Generating report');\n  try {\n    const sentiment = await state.get<string>(traceId, 'sentiment') || 'unknown';\n    await emit({ topic: 'report.generated', data: { sentiment, date: new Date().toISOString() } });\n    await state.clear(traceId);\n    logger.info('Report completed');\n  } catch (error) {\n    logger.error('Report failed', { error: error.message });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Types from @motiadev/core\nDESCRIPTION: Demonstrates how to import TypeScript types exported by the @motiadev/core package for use in type-safe development.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  Event, \n  FlowContext, \n  ApiRouteConfig, \n  EventConfig, \n  CronConfig \n} from '@motiadev/core'\n```\n\n----------------------------------------\n\nTITLE: Configuring API Endpoint in Ruby\nDESCRIPTION: Defines the configuration for an API endpoint, including type, name, description, path, method, emits, and flows. Uses placeholder values that are likely replaced during runtime or build process.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/api/template.ruby.txt#2025-04-21_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ndef config\n  {\n    type: 'api',\n    name: '{{STEP_NAME}}',\n    description: '{{DESCRIPTION}}',\n    path: '{{PATH}}',\n    method: '{{METHOD}}',\n    emits: {{EMITS}},\n    flows: {{FLOWS}}\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Logging System in @motiadev/core\nDESCRIPTION: Shows how to use the built-in logging system provided by @motiadev/core, including logging info and error messages.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { globalLogger } from '@motiadev/core'\n\nglobalLogger.info('Application started')\nglobalLogger.error('Something went wrong', { error: err })\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node Component in React for Motia Workbench\nDESCRIPTION: This code defines a React functional component named 'Node' that renders a custom node for the Motia Workbench. It uses the BaseNode component as a wrapper and includes a button with a placeholder click handler. The component is designed to be extensible for custom logic implementation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/ui/noop.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react'\nimport { BaseNode, Button, NoopNodeProps } from '@motiadev/workbench'\n\nexport const Node: React.FC<NoopNodeProps> = ({ data }) => {\n  const doSomething = () => {\n    window.alert('Replace this with your custom logic')\n  }\n\n\n  return (\n    <BaseNode title=\"{{STEP_NAME}}\" variant=\"noop\" {...data} disableTargetHandle>\n      <Button onClick={doSomething}>Click me</Button>\n    </BaseNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom UI for Event Step in TypeScript React\nDESCRIPTION: This snippet creates a custom React component for visualizing an event step in the Motia Workbench, displaying the step's name.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { EventNode } from 'motia/workbench';\nimport type { EventNodeProps } from 'motia/workbench';\n\nexport default function CustomStep({ data }: EventNodeProps) {\n  return (\n    <EventNode data={data} variant=\"white\" className=\"py-2 px-4\">\n      <div>Custom: {data.name}</div>\n    </EventNode>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Function in JavaScript\nDESCRIPTION: Defines an async handler function that processes the event input and can emit new events. It provides logging capability through the logger parameter and event emission through the emit function. Contains commented examples of emitting events.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/event/template.javascript.txt#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const handler = async (input, { logger, emit }) => {\n  logger.info('Processing {{STEP_NAME}}', input)\n\n  // Add your handler logic here\n  \n  // Example emit\n  // await emit({\n  //   topic: 'event-type',\n  //   data: {}\n  // })\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Examples in Python\nDESCRIPTION: This snippet shows structured logging in Python using different log levels (info, warn, error, debug) with context information.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nctx.logger.info('Processing started', {'input': input})\nctx.logger.warn('Large value', {'value': 1000})\nctx.logger.error('Failed', {'error': str(error), 'stack': traceback.format_exc()})\nctx.logger.debug('Details', {'rawInput': input.__dict__})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware Functions in TypeScript\nDESCRIPTION: This snippet demonstrates the creation of various middleware functions in TypeScript for Motia. It includes request modification, response modification, error handling, and rate limiting middleware.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiMiddleware } from 'motia'\n\n// Request modification middleware\nconst requestModifierMiddleware: ApiMiddleware = async (req, ctx, next) => {\n  // Modify the request before passing it to the next middleware\n  req.headers['x-modified-by'] = 'middleware'\n  req.body.timestamp = Date.now()\n  \n  // Call the next middleware in the chain\n  return next()\n}\n\n// Response modification middleware\nconst responseModifierMiddleware: ApiMiddleware = async (req, ctx, next) => {\n  // Call the next middleware in the chain\n  const response = await next()\n  \n  // Modify the response before returning it\n  response.headers = {\n    ...response.headers,\n    'x-powered-by': 'Motia',\n  }\n  \n  return response\n}\n\n// Error handling middleware\nconst errorHandlingMiddleware: ApiMiddleware = async (req, ctx, next) => {\n  try {\n    // Call the next middleware in the chain\n    return await next()\n  } catch (error) {\n    ctx.logger.error('Error in handler', { error })\n    return {\n      status: 500,\n      body: { error: 'Internal server error' }\n    }\n  }\n}\n\n// Rate limiter middleware with state\nconst rateLimiterMiddleware: ApiMiddleware = (() => {\n  // Closure to maintain state between requests\n  const requests: Record<string, number[]> = {}\n  const limit = 100\n  const windowMs = 60000 // 1 minute\n  \n  return async (req, ctx, next) => {\n    const ip = req.headers['x-forwarded-for'] || 'unknown-ip'\n    const ipStr = Array.isArray(ip) ? ip[0] : ip\n    \n    const now = Date.now()\n    if (!requests[ipStr]) {\n      requests[ipStr] = []\n    }\n    \n    // Remove old requests outside the time window\n    requests[ipStr] = requests[ipStr].filter(time => now - time < windowMs)\n    \n    if (requests[ipStr].length >= limit) {\n      return {\n        status: 429,\n        body: { error: 'Too many requests, please try again later' }\n      }\n    }\n    \n    // Add current request\n    requests[ipStr].push(now)\n    \n    return next()\n  }\n})()\n```\n\n----------------------------------------\n\nTITLE: Creating API-specific UI Step in JavaScript React\nDESCRIPTION: Shows how to create a custom UI Step for API-related components using JavaScript and React. It utilizes the ApiNode component from Motia Workbench.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/ui-steps.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// apiStep.step.jsx\n\nimport React from 'react'\nimport { ApiNode } from 'motia/workbench'\n\nexport default function ApiStep({ data }) {\n  return (\n    <ApiNode\n      data={data}\n      className=\"border-blue-500\"\n    >\n      <div>API endpoint: {data.name}</div>\n    </ApiNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Schema with Zod\nDESCRIPTION: Defines a Zod schema for validating event input with required key and optional expected value.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/default/steps/two.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputSchema = z.object({\n  key: z.string(),\n  expected: z.optional(z.unknown()),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom State Adapter\nDESCRIPTION: Example implementation of a custom state adapter showing required methods for state management integration.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StateAdapter } from 'motia'\n\nclass CustomStateAdapter extends StateAdapter {\n  async get<T>(traceId: string, key: string): Promise<T | null> { \n    // Implementation\n    return null\n  }\n\n  async set<T>(traceId: string, key: string, value: T): Promise<void> { \n    // Implementation\n  }\n\n  async delete(traceId: string, key: string): Promise<void> { \n    // Implementation\n  }\n\n  async clear(traceId: string): Promise<void> { \n    // Implementation\n  }\n\n  async cleanup(): Promise<void> {\n    // Implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mock Logger for Testing Logging Functionality\nDESCRIPTION: Shows how to create and use a mock logger for testing logging functionality. It demonstrates creating the mock logger, using it, and asserting on logged messages.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/test/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMockLogger } from '@motiadev/test';\n\n// Create a mock logger\nconst logger = createMockLogger();\n\n// Use the logger in your tests\nlogger.info('Test message');\n\n// Assert on logged messages\nexpect(logger.messages.info).toContain('Test message');\n```\n\n----------------------------------------\n\nTITLE: Testing a Complete Order Flow in Motia\nDESCRIPTION: A comprehensive example demonstrating how to test a complete order flow using the Motia tester. It includes setting up event watchers, triggering API calls, and asserting on both API responses and emitted events.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/test/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTester } from '@motiadev/test';\nimport { expect, test } from 'vitest';\n\ntest('complete order flow works correctly', async () => {\n  const tester = createTester();\n  \n  // Watch for order completion events\n  const orderCompletedWatcher = tester.watchEvents('order.completed');\n  \n  // Trigger the order creation\n  const response = await tester.request()\n    .post('/api/orders')\n    .send({\n      items: [{ id: 'item1', quantity: 2 }],\n      customer: { id: 'cust1', email: 'test@example.com' }\n    });\n  \n  // Verify the API response\n  expect(response.status).toBe(200);\n  expect(response.body).toHaveProperty('orderId');\n  \n  // Wait for all events to be processed\n  await tester.waitForEvents();\n  \n  // Verify the order completed event was emitted\n  const completedEvents = orderCompletedWatcher.getCapturedEvents();\n  expect(completedEvents).toHaveLength(1);\n  expect(completedEvents[0].data).toMatchObject({\n    orderId: expect.any(String),\n    status: 'completed'\n  });\n  \n  // Clean up\n  await tester.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Motia Workflows with CLI Basic Command\nDESCRIPTION: The basic command for deploying Motia workflows using the CLI, requiring an API key and with optional environment and version parameters.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/deployment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmotia deploy --api-key <api-key> --environment <environment> --version <version>\n```\n\n----------------------------------------\n\nTITLE: Motia Core Concepts Table\nDESCRIPTION: Markdown table displaying the four main concepts of Motia workflows and their key functions.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/core-concepts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Concept     | Description                                                                                                                                | Key Function                                                                                                                               |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Steps**   | Self-contained, reusable units of business logic. Steps are the workhorses of Motia, performing specific tasks within a workflow.         | Process data, interact with external systems, perform computations, manage state, and emit events to trigger subsequent actions.        |\n| **Flows**   | Logical containers that group related Steps together. Flows define the context and scope for a specific automation process.                | Organize and visualize workflows, provide a namespace for events, and enable flow-specific logging and state management.                 |\n| **Events**  | Lightweight messages that carry data and signal occurrences within the system. Events are the communication mechanism between Steps.      | Trigger Step execution, carry data between Steps, enable asynchronous and loosely coupled interactions.                               |\n| **Topics**  | Named channels or categories to which Events are published and Steps subscribe. Topics enable event routing and decouple Steps from each other. | Define event types, enable Steps to listen for specific events, and allow for flexible and dynamic workflow orchestration.        |\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step in TypeScript\nDESCRIPTION: Demonstrates how to create a NOOP step configuration file in TypeScript. It defines the step type, name, description, virtual events, and associated flows.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// myStep.step.ts\nimport { NoopConfig } from 'motia'\n\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'My NOOP Step',\n  description: 'Description of what this step simulates',\n  virtualEmits: ['event.one', 'event.two'],\n  virtualSubscribes: [], // Required even if empty\n  flows: ['my-flow'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Adapters\nDESCRIPTION: YAML configuration examples for different storage adapters including memory and Redis options.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nstate:\n  adapter: memory\n\n# Redis configuration\nstate:\n  adapter: redis\n  host: localhost        # Redis server host (e.g., 'localhost' or IP address)\n  port: 6379           # Redis server port (default: 6379)\n  password: optional    # Redis password (if required)\n  ttl: 3600            # Optional: State Time-To-Live in seconds (e.g., 3600 seconds = 1 hour)\n```\n\n----------------------------------------\n\nTITLE: Event Topic Structure\nDESCRIPTION: Example of event topic naming conventions used in the feedback analysis workflow\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/tldr-motia-in-3-minutes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfeedback.in\\nsentiment.out\\nissues.found\n```\n\n----------------------------------------\n\nTITLE: Managing Events with @motiadev/core EventManager\nDESCRIPTION: Shows how to create an event manager, subscribe to events, and emit events using the createEventManager function from @motiadev/core.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEventManager } from '@motiadev/core'\n\nconst eventManager = createEventManager()\n\n// Subscribe to events\neventManager.subscribe({\n  event: 'user.created',\n  handlerName: 'sendWelcomeEmail',\n  filePath: '/path/to/handler.ts',\n  handler: (event) => {\n    // Handle the event\n  }\n})\n\n// Emit events\neventManager.emit({\n  topic: 'user.created',\n  data: { userId: '123' },\n  traceId: 'trace-123',\n  logger: logger\n})\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Feedback Collection\nDESCRIPTION: Example endpoint structure for receiving customer feedback via POST request\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/tldr-motia-in-3-minutes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /feedback\n```\n\n----------------------------------------\n\nTITLE: Configuring NOOP Step in JavaScript\nDESCRIPTION: Shows the JavaScript equivalent of the NOOP step configuration. It defines the same properties as the TypeScript version but uses CommonJS module exports.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myStep.step.js\nconst config = {\n  type: 'noop',\n  name: 'My NOOP Step',\n  description: 'Description of what this step simulates',\n  virtualEmits: ['event.one', 'event.two'],\n  virtualSubscribes: [], // Required even if empty\n  flows: ['my-flow'],\n}\n\nmodule.exports = { config }\n```\n\n----------------------------------------\n\nTITLE: Configuring Noop Step in Motia Framework (TypeScript)\nDESCRIPTION: This code defines a configuration object for a 'noop' step in the Motia framework. It imports the NoopConfig type from @motiadev/core and exports a config object with placeholders for various properties.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/noop/template.typescript.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NoopConfig } from '@motiadev/core'\n\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  virtualEmits: {{VIRTUAL_EMITS}},\n  virtualSubscribes: {{VIRTUAL_SUBSCRIBES}},\n  flows: {{FLOWS}}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Motia Step with cURL\nDESCRIPTION: A cURL command to test a Motia step by sending a POST request to the local development server. This example is for the default template step.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/default \\\n-H \"Content-Type: application/json\" \\\n-d '{}'\n```\n\n----------------------------------------\n\nTITLE: State Management Examples in Ruby\nDESCRIPTION: This snippet illustrates state management operations in Ruby, including setting, getting, deleting, and clearing state data using the context's state methods.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nctx.state.set(ctx.trace_id, 'data', { value: 'test' })\ndata = ctx.state.get(ctx.trace_id, 'data')\nctx.state.delete(ctx.trace_id, 'data')\nctx.state.clear(ctx.trace_id)\n```\n\n----------------------------------------\n\nTITLE: Deploying to Development Environment with Motia CLI\nDESCRIPTION: Example of deploying to the default development environment with an auto-generated version using the Motia CLI.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/deployment.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmotia deploy --api-key your-api-key-here\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Research Status\nDESCRIPTION: JSON structure returned when querying research status, providing information about the progress, completion percentage, and availability of the final report.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Research status retrieved successfully\",\n  \"requestId\": \"unique-trace-id\",\n  \"originalQuery\": \"The research topic or question\",\n  \"status\": \"in-progress\",\n  \"progress\": {\n    \"currentDepth\": 1,\n    \"totalDepth\": 2,\n    \"percentComplete\": 50\n  },\n  \"reportAvailable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Middleware Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for an API middleware function in Motia. It specifies the parameters and return type for middleware functions used in API Steps.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/steps/api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ApiMiddleware = (\n  req: ApiRequest, \n  ctx: FlowContext, \n  next: () => Promise<ApiResponse>\n) => Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Job in Motia Framework with TypeScript\nDESCRIPTION: Defines the configuration object for a Motia cron job. The config includes type, name, description, cron expression, and event relationships. Placeholders ({{STEP_NAME}}, {{DESCRIPTION}}, etc.) need to be replaced with actual values.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/cron/template.type.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: CronConfig = {\n  type: 'cron',\n  name: '{{STEP_NAME}}',\n  description: '{{DESCRIPTION}}',\n  cron: '{{CRON_EXPRESSION}}',\n  emits: {{EMITS}},\n  flows: {{FLOWS}}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Motia Project\nDESCRIPTION: Command to create a new Motia project with options for project name, template selection, and Cursor IDE integration.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia create [options]\n```\n\n----------------------------------------\n\nTITLE: Logging Examples in TypeScript\nDESCRIPTION: This snippet demonstrates structured logging in TypeScript using different log levels (info, warn, error, debug) with context information.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.info('Processing started', { input });\nlogger.warn('Large value', { value: 1000 });\nlogger.error('Failed', { error: error.message, stack: error.stack });\nlogger.debug('Details', { rawInput: input });\n```\n\n----------------------------------------\n\nTITLE: Results API Endpoint Documentation\nDESCRIPTION: HTTP GET endpoint for retrieving processed financial analysis results with example response format.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/finance-agent.mdx#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /finance-result/:traceId\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"Latest information about AAPL and MSFT\",\n  \"timestamp\": \"2023-06-15T12:34:56.789Z\",\n  \"response\": {\n    \"summary\": \"Results for \\\"Latest information about AAPL and MSFT\\\"\",\n    \"webResources\": [...],\n    \"financialData\": [...],\n    \"aiAnalysis\": {...}\n  },\n  \"status\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Configuration template for setting up required environment variables including Trello API credentials, OpenAI API keys, and Slack webhook URL.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/trello-automation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nTRELLO_API_KEY=your_trello_api_key\nTRELLO_TOKEN=your_trello_token\n\nOPENAI_API_KEY=your_openai_api_key\nOPENAI_MODEL=your_openai_model\n\nSLACK_WEBHOOK_URL=your_slack_webhook_url\n\nTRELLO_NEW_TASKS_LIST_ID=your_new_tasks_list_id\nTRELLO_IN_PROGRESS_LIST_ID=your_in_progress_list_id\nTRELLO_NEEDS_REVIEW_LIST_ID=your_needs_review_list_id\nTRELLO_COMPLETED_LIST_ID=your_completed_list_id\n```\n\n----------------------------------------\n\nTITLE: Configuring API Handler in Motia Framework with Python\nDESCRIPTION: Defines the configuration for an API handler in the Motia framework, including type, name, path, method, and other properties. Includes a commented example of how to implement request body validation using Pydantic models.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/api/template.python.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfig = {\n    \"type\": \"api\",\n    \"name\": \"{{STEP_NAME}}\",\n    \"description\": \"{{DESCRIPTION}}\",\n    \"path\": \"{{PATH}}\",\n    \"method\": \"{{METHOD}}\",\n    \"emits\": {{EMITS}},\n    \"flows\": {{FLOWS}},\n    \"bodySchema\": None,  # Replace with Pydantic model for validation\n}\n\n# Example of using Pydantic for request body validation:\n# from pydantic import BaseModel\n# \n# class RequestBody(BaseModel):\n#     message: str\n#     count: int = 0\n# \n# config[\"bodySchema\"] = RequestBody\n```\n\n----------------------------------------\n\nTITLE: Building Motia Project\nDESCRIPTION: Command to build the project by compiling steps, creating zip files, and generating configuration files.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia build\n```\n\n----------------------------------------\n\nTITLE: Structured Logging Example in Motia\nDESCRIPTION: Example demonstrating the preferred structured logging approach in Motia compared to string interpolation, which enables better searchability and parsing of log data.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Good - Structured and searchable\nlogger.info('Payment processed', {\n  paymentId: '123',\n  amount: 100,\n  status: 'success'\n})\n\n// Avoid - Harder to parse and search\nlogger.info(`Payment ${paymentId} processed: amount=${amount}`)\n```\n\n----------------------------------------\n\nTITLE: Triggering Motia Flows Using API\nDESCRIPTION: Command to trigger Motia flows by sending a POST request to an API step endpoint using curl, with a JSON payload in the request body.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/<api-step-path> \\\n-H \"Content-Type: application/json\" \\\n-d '{}'\n```\n\n----------------------------------------\n\nTITLE: Query API Endpoint Documentation\nDESCRIPTION: HTTP POST endpoint for submitting financial queries with example request and response format.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/finance-agent.mdx#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /finance-query\nContent-Type: application/json\n\n{\n  \"query\": \"Latest information about AAPL and MSFT\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Query received and processing started\",\n  \"traceId\": \"abc123def456\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File Structure for UI Steps in TypeScript\nDESCRIPTION: Demonstrates the file structure for creating a custom UI Step using TypeScript. It shows how to place the step definition and visual override files.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/ui-steps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsteps/\n  └── myStep/\n  ├── myStep.step.ts      # Step definition\n  └── myStep.step.tsx     # Visual override\n```\n\n----------------------------------------\n\nTITLE: Defining Motia Step Configuration in JavaScript\nDESCRIPTION: This snippet defines a configuration object for a Motia project step. It uses placeholder values (enclosed in double curly braces) for dynamic content such as step name, description, virtual emits and subscribes, and flows. The 'type' is set to 'noop' (no operation).\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/noop/template.python.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconfig = {\n    \"type\": \"noop\",\n    \"name\": \"{{STEP_NAME}}\",\n    \"description\": \"{{DESCRIPTION}}\",\n    \"virtualEmits\": {{VIRTUAL_EMITS}},\n    \"virtualSubscribes\": {{VIRTUAL_SUBSCRIBES}},\n    \"flows\": {{FLOWS}}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server with options for port, verbose logging, and debug mode.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia dev [options]\n```\n\n----------------------------------------\n\nTITLE: Creating Motia Project with Global CLI\nDESCRIPTION: Command to create a new Motia project using the globally installed Motia CLI. This sets up a new project with the specified name.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmotia create -n <your-project-name>\n```\n\n----------------------------------------\n\nTITLE: Viewing Live Logs in Motia Workbench\nDESCRIPTION: Sample output of the live logs feature in Motia Workbench. Shows how logs are displayed with INFO and DEBUG levels for a payment flow, enabling real-time monitoring of flow execution.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/overview.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] [payment-flow] Payment received: $50.00\n[DEBUG] [payment-flow] Processing payment...\n```\n\n----------------------------------------\n\nTITLE: Defining File Structure for UI Steps in JavaScript\nDESCRIPTION: Illustrates the file structure for creating a custom UI Step using JavaScript. It shows the placement of step definition and visual override files.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/ui-steps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsteps/\n  └── myStep/\n  ├── myStep.step.js      # Step definition\n  └── myStep.step.jsx     # Visual override\n```\n\n----------------------------------------\n\nTITLE: Creating API-specific UI Step in TypeScript React\nDESCRIPTION: Illustrates how to create a custom UI Step for API-related components using TypeScript and React. It uses the ApiNode component from Motia Workbench.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/ui-steps.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// apiStep.step.tsx\n\nimport React from 'react'\nimport { ApiNode } from 'motia/workbench'\nimport type { ApiNodeProps } from 'motia/workbench'\n\nexport default function ApiStep({ data }: ApiNodeProps) {\n  return (\n    <ApiNode\n      data={data}\n      className=\"border-blue-500\"\n    >\n      <div>API endpoint: {data.name}</div>\n    </ApiNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Motia Project Setup\nDESCRIPTION: A series of commands for manually setting up a Motia project. This includes creating a project directory, initializing package.json, and installing core packages.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir <your-project-name> && cd <your-project-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install motia zod\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ts-node typescript -D\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir steps\n```\n\n----------------------------------------\n\nTITLE: Creating Motia Project with npx\nDESCRIPTION: Command to create a new Motia project using npx. This downloads and runs the Motia CLI project creation tool, setting up a basic project structure and installing dependencies.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia@latest create -n <your-project-name>\n```\n\n----------------------------------------\n\nTITLE: Triggering Motia Flows Using CLI\nDESCRIPTION: Command to trigger Motia flows using the command line interface with the 'motia emit' command, specifying a topic and JSON message payload.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia emit --topic <topic> --message '{}'\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration Example\nDESCRIPTION: Example environment variables configuration for the AI Deep Research Agent, including required API keys for OpenAI and Firecrawl, along with optional configuration settings.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\n# Required\nOPENAI_API_KEY=your-openai-api-key-here\nFIRECRAWL_API_KEY=your-firecrawl-api-key-here\n\n# Optional\n# OPENAI_MODEL=gpt-4o\n# FIRECRAWL_BASE_URL=http://your-firecrawl-instance-url\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Workbench Node\nDESCRIPTION: Example of creating a custom node component by extending the BaseNode component with custom styling and content.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/workbench/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseNode, Position } from '@motiadev/workbench'\n\nexport const CustomNode = ({ data, ...props }) => {\n  return (\n    <BaseNode \n      {...props} \n      title=\"Custom Node\" \n      color=\"#8B5CF6\"\n    >\n      <div className=\"p-4\">\n        {data.customContent}\n      </div>\n    </BaseNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom API Node Component with TypeScript and React\nDESCRIPTION: Implements a React functional component that wraps an ApiNode component with additional UI elements including a description display and a Play button. The component accepts ApiNodeProps and includes a placeholder alert function for custom logic implementation.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create-step/templates/ui/api.step.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport { ApiNode, Button, ApiNodeProps } from '@motiadev/workbench'\n\nexport const Node: React.FC<ApiNodeProps> = ({ data }) => {\n  const doSomething = () => {\n    window.alert('Replace this with your custom logic')\n  }\n\n\n  return (\n    <ApiNode data={{ ...data, description: undefined }}>\n      <div className=\"flex flex-row gap-4\">\n        <div className=\"flex flex-col items-center text-sm\">{data.description}</div>\n        <div className=\"flex flex-col items-end text-sm\">\n          <Button onClick={doSomething}>Play</Button>\n        </div>\n      </div>\n    </ApiNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Production Environment with Specific Version\nDESCRIPTION: Example of deploying to the production environment with a specific version number using the Motia CLI.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/deployment.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmotia deploy --environment production --version 1.2.3 --api-key your-api-key-here\n```\n\n----------------------------------------\n\nTITLE: Generating Steps\nDESCRIPTION: Command to generate new steps with interactive prompts and directory path option.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia generate step [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Motia Email Management System\nDESCRIPTION: This snippet provides a template for the .env file, containing necessary configuration variables for Google API, HuggingFace, Discord integration, and auto-responder settings. It includes client IDs, secrets, API tokens, and webhook URLs.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/gmail-automation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shellscript\nCODE:\n```\n# Google API Configuration\nGOOGLE_CLIENT_ID=your_client_id\nGOOGLE_CLIENT_SECRET=your_client_secret\nGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\n\n# HuggingFace Configuration\nHUGGINGFACE_API_TOKEN=your_huggingface_token\n\n# Discord Integration\nDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\n\n# Auto-Responder Configuration\nAUTO_RESPONDER_NAME=Your Name\nAUTO_RESPONDER_EMAIL=your-email@example.com\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NOOP Node Component in TypeScript\nDESCRIPTION: Implements a custom React component for NOOP step visualization with TypeScript. The component includes a styled container with connection handles and configuration for virtual events and flows.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// customNode.step.tsx\nimport React from 'react'\nimport { BaseHandle, EventNodeProps, Position } from 'motia/workbench'\n\nexport default (_: EventNodeProps) => {\n  return (\n    <div className=\"p-3 px-6 flex flex-col max-w-[300px] bg-blue-500 border-white rounded-full text-white border border-solid text-center text-sm\">\n      <div>Custom Processing</div>\n      <BaseHandle type=\"target\" position={Position.Top} />\n      <BaseHandle type=\"source\" position={Position.Bottom} />\n    </div>\n  )\n}\n\n// customNode.step.ts\nexport const config: NoopConfig = {\n  type: 'noop',\n  name: 'Custom Process',\n  virtualEmits: ['/api/process/complete'],\n  virtualSubscribes: ['process.start'],\n  flows: ['custom-flow']\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NOOP Step UI Component in JavaScript React\nDESCRIPTION: Shows the JavaScript version of the NOOP step UI component. It creates the same UI structure as the TypeScript version using React and the Motia Workbench components.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// myStep.step.jsx\nimport React from 'react'\nimport { BaseHandle, Position } from 'motia/workbench'\n\nexport default function MyStep() {\n  return (\n    <div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\">\n      <div className=\"text-sm font-medium\">My Step UI</div>\n      {/* Your custom UI elements */}\n      <BaseHandle type=\"source\" position={Position.Bottom} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Testing an API Step with cURL\nDESCRIPTION: Demonstrates how to test a Motia API endpoint using cURL. This sends a POST request to the default endpoint with an empty JSON payload.\nSOURCE: https://github.com/motiadev/motia/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/default \\\n-H \"Content-Type: application/json\" \\\n-d '{}'\n```\n\n----------------------------------------\n\nTITLE: Listing State\nDESCRIPTION: Command to display the current file state of the application.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia state list\n```\n\n----------------------------------------\n\nTITLE: Debugging State in Redis\nDESCRIPTION: Shows how to inspect state stored in Redis using redis-cli commands for debugging purposes.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# List all state keys (under the motia:state prefix)\nredis-cli KEYS \"motia:state:*\"\n\n# Get specific state for a given traceId and key\nredis-cli GET \"motia:state:{traceId}:booking\"\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with Motia CLI\nDESCRIPTION: Shows how to use the Motia CLI to emit an event for testing event-based steps. This sends a message to the 'test-state' topic.\nSOURCE: https://github.com/motiadev/motia/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia emit --topic test-state --message '{}'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NOOP Node Component in JavaScript\nDESCRIPTION: Implements a custom React component for NOOP step visualization with JavaScript. Provides the same functionality as the TypeScript version but without type definitions.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/noop-steps.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// customNode.step.jsx\nimport React from 'react'\nimport { BaseHandle, EventNodeProps, Position } from 'motia/workbench'\n\nexport default (_: EventNodeProps) => {\n  return (\n    <div className=\"p-3 px-6 flex flex-col max-w-[300px] bg-blue-500 border-white rounded-full text-white border border-solid text-center text-sm\">\n      <div>Custom Processing</div>\n      <BaseHandle type=\"target\" position={Position.Top} />\n      <BaseHandle type=\"source\" position={Position.Bottom} />\n    </div>\n  )\n}\n\n// customNode.step.js\nconst config = {\n  type: 'noop',\n  name: 'Custom Process',\n  virtualEmits: ['/api/process/complete'],\n  virtualSubscribes: ['process.start'],\n  flows: ['custom-flow']\n}\n\nmodule.exports = {config};\n```\n\n----------------------------------------\n\nTITLE: Emitting Motia Events\nDESCRIPTION: Command to emit test events using Motia CLI\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia emit --topic test-state --message '{}'\n```\n\n----------------------------------------\n\nTITLE: API Request Format for Starting Research\nDESCRIPTION: Format specification for the POST request to initiate research, including the content type and JSON body structure with query, breadth, and depth parameters.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPOST /research\nContent-Type: application/json\n\n{\n  \"query\": \"The research topic or question\",\n  \"breadth\": 4,  // Number of search queries to generate (1-10)\n  \"depth\": 2     // Depth of research iterations (1-5)\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Events\nDESCRIPTION: Command to emit events to the Motia server with required topic and message parameters.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia emit [options]\n```\n\n----------------------------------------\n\nTITLE: Implementing FlowStarter Component in React for Motia Workbench\nDESCRIPTION: This code snippet defines a React component called FlowStarter. It renders a BaseNode component from Motia workbench with a Start button. When clicked, it sends a POST request to '/default' to initiate a flow.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/default/steps/noop.step.tsx.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BaseNode, Button, NoopNodeProps } from 'motia/workbench'\nimport React from 'react'\n\nexport default function FlowStarter({ data }: NoopNodeProps) {\n  const start = () => {\n    fetch('/default', { method: 'POST' })\n  }\n\n  return (\n    <BaseNode title=\"Start\" variant=\"noop\" disableTargetHandle>\n      <Button onClick={start}>Start Flow</Button>\n    </BaseNode>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Motia Playground Environment\nDESCRIPTION: Command to start the development environment, which includes the core orchestrator, HTTP server, and visualization UI. This allows testing and refinement of flows built with Motia.js.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: API Request Format for Checking Research Status\nDESCRIPTION: GET request format for checking the status of an ongoing research process, requiring the requestId parameter that was provided when initiating the research.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nGET /research/status?requestId=unique-trace-id\n```\n\n----------------------------------------\n\nTITLE: Debugging State in File Storage\nDESCRIPTION: Shows how to inspect state stored in the File Adapter using the Motia CLI.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/state-management.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# View state file contents\nmotia state list\n```\n\n----------------------------------------\n\nTITLE: Deploying Motia Project\nDESCRIPTION: Command to deploy built steps to the Motia deployment service with options for API key, environment, and version.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia deploy --api-key your-api-key-here --env production --version 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Request Handler for Test State API\nDESCRIPTION: Async handler function that logs requests, emits test state events, and returns a success response\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/src/create/templates/python/steps/api.step.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(req, context):\n  context.logger.info('[Test State] Received request', {'body': req.body})\n\n  await context.emit({\n      'topic': 'test-state',\n      'data': req.body\n  })\n\n  return {\n      'status': 200,\n      'body': {'message': 'Success'}\n  }\n```\n\n----------------------------------------\n\nTITLE: RAG System Query Response\nDESCRIPTION: Example JSON response from the RAG system query API, including the answer and relevant document chunks.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/rag-docling-weaviate-agent.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"Your question about the PDF content\",\n  \"answer\": \"Generated answer based on the PDF content\",\n  \"chunks\": [\n    {\n      \"text\": \"Relevant text chunk from the document\",\n      \"title\": \"Document title\",\n      \"metadata\": {\n        \"source\": \"Document source\",\n        \"page\": 1\n      }\n    }\n    // ... additional chunks up to the specified limit\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for GitHub and OpenAI\nDESCRIPTION: This snippet shows the structure of the .env file, where GitHub token and OpenAI API key should be added for the integration workflow to function.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/github-integration-workflow.mdx#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nGITHUB_TOKEN=your_github_token_here\nOPENAI_API_KEY=your_openai_api_key\n```\n\n----------------------------------------\n\nTITLE: API Request Example for Starting Research\nDESCRIPTION: Example curl command demonstrating how to make a POST request to the research endpoint with parameters for query, depth, and breadth of research.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url http://localhost:3000/research \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"query\": \"Advancements in renewable energy storage\",\n   \"depth\": 1,\n   \"breadth\": 1\n}'\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Research Report\nDESCRIPTION: Comprehensive JSON structure returned when retrieving a completed research report, containing the report title, overview, sections, key takeaways, sources, and metadata about the research process.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Research report retrieved successfully\",\n  \"report\": {\n    \"title\": \"Research Report Title\",\n    \"overview\": \"Executive summary...\",\n    \"sections\": [\n      {\n        \"title\": \"Section Title\",\n        \"content\": \"Section content...\"\n      }\n    ],\n    \"keyTakeaways\": [\n      \"Key takeaway 1\",\n      \"Key takeaway 2\"\n    ],\n    \"sources\": [\n      {\n        \"title\": \"Source Title\",\n        \"url\": \"Source URL\"\n      }\n    ],\n    \"originalQuery\": \"The research topic or question\",\n    \"metadata\": {\n      \"depthUsed\": 2,\n      \"completedAt\": \"2025-03-18T16:45:30Z\"\n    }\n  },\n  \"requestId\": \"unique-trace-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: RAG System Error Response\nDESCRIPTION: Example JSON error response from the RAG system API when query processing fails.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/rag-docling-weaviate-agent.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Failed to process RAG query\",\n  \"message\": \"Error details\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for RAG Agent\nDESCRIPTION: Example of environment variables configuration for the RAG Agent, including API keys for OpenAI and Weaviate.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/rag-docling-weaviate-agent.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Required\nOPENAI_API_KEY=your-openai-api-key-here\nWEAVIATE_API_KEY=your-weaviate-api-key-here\nWEAVIATE_URL=your-weaviate-url-here\n```\n\n----------------------------------------\n\nTITLE: Starting Motia Workbench with pnpm\nDESCRIPTION: Command to start Motia Workbench in development mode using pnpm package manager. This launches the backend services, API endpoints, and web interface with auto-reload functionality.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Motia Development Server Options\nDESCRIPTION: Command options for running Motia development server with available flags for port, logging, and diagram generation\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmotia dev [options]\n\nOptions:\n  -p, --port <port>     The port to run the server on (default: 3000)\n  -v, --verbose         Enable verbose logging\n  -d, --debug          Enable debug logging\n  -m, --mermaid        Enable mermaid diagram generation\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Research Initiation\nDESCRIPTION: JSON structure returned when successfully starting a research request, containing a confirmation message and a unique request identifier for tracking the research process.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Research process started\",\n  \"requestId\": \"unique-trace-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Setup instructions for environment variables including API keys for Alpha Vantage, SerperDev, and OpenAI.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/finance-agent.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\nLANGUAGE: env\nCODE:\n```\nALPHA_VANTAGE_API_KEY=your_alpha_vantage_api_key_here\nSERPER_API_KEY=your_serper_api_key_here\nOPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Motia Workbench Package\nDESCRIPTION: Commands for installing the @motiadev/workbench package using different package managers (npm, yarn, pnpm).\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/workbench/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @motiadev/workbench\n# or\nyarn add @motiadev/workbench\n# or\npnpm add @motiadev/workbench\n```\n\n----------------------------------------\n\nTITLE: Testing Motia Step with CLI\nDESCRIPTION: Commands to test a Motia step by emitting events using the Motia CLI. These examples show how to emit events for both the default template and the add numbers example.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia emit --topic test-state --message '{}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia emit --topic add-numbers --message '{\"a\": 5, \"b\": 3}'\n```\n\n----------------------------------------\n\nTITLE: Adding Dev Script to package.json\nDESCRIPTION: JSON snippet showing how to add a 'dev' script to package.json for running the Motia development server.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"motia dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Motia with Package Managers\nDESCRIPTION: Commands for installing Motia using different Node.js package managers (npm, yarn, pnpm)\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install motia\n# or\nyarn add motia\n# or\npnpm add motia\n```\n\n----------------------------------------\n\nTITLE: Importing Workbench Components\nDESCRIPTION: TypeScript import statement showing the main node components available in the Workbench package for workflow visualization.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/workbench/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  EventNode, \n  ApiNode, \n  NoopNode, \n  BaseNode, \n  BaseHandle \n} from '@motiadev/workbench'\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Various Package Managers\nDESCRIPTION: These commands show how to start the development server using different package managers (pnpm, yarn, npm, and bun). This is a prerequisite for visualizing flows in Motia Workbench.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/flows-and-visualization.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a New Motia Project with CLI\nDESCRIPTION: Creates a new Motia project using the Motia CLI tool. This command sets up a basic project structure with example steps and installs dependencies using pnpm.\nSOURCE: https://github.com/motiadev/motia/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia create -n my-first-agent\n```\n\n----------------------------------------\n\nTITLE: Example Usage Commands for Motia Steps\nDESCRIPTION: These example commands demonstrate how to test the implemented Motia steps. They include an HTTP API test, a manual event trigger, and show the expected log output sequence.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# Test API\ncurl -X POST http://localhost:3000/feedback -H \"Content-Type: application/json\" -d '{\"message\": \"This is good\"}'\n\n# Test Event (manual trigger)\nnpx motia emit --topic feedback.received --message '{\"message\": \"This is good\"}'\n\n# Expected Logs\n[INFO] Feedback received: {\"message\": \"This is good\"}\n[INFO] Analyzing: {\"message\": \"This is good\"}\n[INFO] Generating report (at 9 AM)\n[INFO] Report completed\n```\n\n----------------------------------------\n\nTITLE: Cloning the Motia Monorepo Repository\nDESCRIPTION: Commands for cloning the Motia monorepo repository and navigating to the project directory. This is the first step in the setup process for developers working with the framework.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository_url>\ncd motia-monorepo\n```\n\n----------------------------------------\n\nTITLE: Installing @motiadev/test Package\nDESCRIPTION: Commands for installing the @motiadev/test package using npm, yarn, or pnpm package managers. This package should be installed as a development dependency.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @motiadev/test --save-dev\n# or\nyarn add @motiadev/test --dev\n# or\npnpm add @motiadev/test --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Creating New Motia Project\nDESCRIPTION: Command to create a new Motia project using npx and start the development server. This is the initial setup command for beginning development with Motia.\nSOURCE: https://github.com/motiadev/motia/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia@latest create -n new-project\ncd new-project && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging\nDESCRIPTION: Command to enable debug logging in development mode for detailed output.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia dev --debug\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature Branch for Contribution\nDESCRIPTION: Command for creating a new Git branch when contributing to the project. Following the feature branch naming convention helps organize development work.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/<your-feature-name>\n```\n\n----------------------------------------\n\nTITLE: Running Motia Tests Locally using pnpm\nDESCRIPTION: These bash commands show how to run Motia tests locally using pnpm. The first command runs all tests, while the second command runs tests in watch mode, automatically re-running tests when code changes are detected.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/testing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test --watch\n```\n\n----------------------------------------\n\nTITLE: Starting the Motia Development Server with Yarn\nDESCRIPTION: Command to start the Motia development server using Yarn package manager, which enables monitoring of logs through either the Motia Workbench or directly in the terminal.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Running Motia Development Server\nDESCRIPTION: Commands to start the Motia development server using different package managers. This command runs the 'dev' script defined in package.json.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Motia Development Server\nDESCRIPTION: Command to start the Motia development server which includes the Workbench interface.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/workbench/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia dev\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to Motia\nDESCRIPTION: Commands for committing code changes and pushing them to the remote repository. These are standard Git operations used in the contribution workflow.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Add <your-feature-description>\"\ngit push origin feature/<your-feature-name>\n```\n\n----------------------------------------\n\nTITLE: Project Setup and Installation Commands\nDESCRIPTION: Shell commands for installing dependencies and setting up the environment variables required for the project.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/examples/sentiment-analysis.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm install motia openai\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=\"sk-...\"\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm motia dev\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3000/api/analyze-sentiment \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"text\":\"I absolutely love this new device!\"}'\n```\n\n----------------------------------------\n\nTITLE: Starting Motia Workbench with npm\nDESCRIPTION: Command to start Motia Workbench in development mode using npm package manager. This launches the backend services, API endpoints, and web interface with auto-reload functionality.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/overview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Processing PDFs API Request\nDESCRIPTION: cURL command to make a POST request to the API endpoint for processing PDF documents.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/rag-docling-weaviate-agent.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url http://localhost:3000/api/rag/process-pdfs \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"folderPath\": \"path/to/pdf/folder\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the AI Deep Research Agent Repository\nDESCRIPTION: Commands for cloning the Motia examples repository and navigating to the AI Deep Research Agent directory. This is the first step in setting up the research agent project.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MotiaDev/motia-examples\ncd examples/ai-deep-research-agent\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository for Trello Automation\nDESCRIPTION: Commands to clone the example repository and navigate to the trello-flow directory.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/trello-automation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:MotiaDev/motia-examples.git\ncd examples/trello-flow\n```\n\n----------------------------------------\n\nTITLE: Cloning GitHub Repository for Integration Workflow\nDESCRIPTION: This snippet shows how to clone the repository containing the GitHub integration workflow example and navigate to the correct directory.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/github-integration-workflow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:MotiaDev/motia-examples.git\ncd examples/github-integration-workflow\n```\n\n----------------------------------------\n\nTITLE: Starting the Motia Development Server with Bun\nDESCRIPTION: Command to start the Motia development server using Bun runtime, which enables monitoring of logs through either the Motia Workbench or directly in the terminal.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Motia Workbench with yarn\nDESCRIPTION: Command to start Motia Workbench in development mode using yarn package manager. This launches the backend services, API endpoints, and web interface with auto-reload functionality.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Querying RAG System API Request\nDESCRIPTION: cURL command to make a POST request to the API endpoint for querying the RAG system with a question about PDF content.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/rag-docling-weaviate-agent.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url http://localhost:3000/api/rag/query \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"query\": \"Your question about the PDF content\",\n   \"limit\": 5\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Finance Agent Project\nDESCRIPTION: Commands for cloning the repository and installing project dependencies using pnpm or npm.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/finance-agent.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MotiaDev/motia-examples\ncd examples/finance-agent\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to create a new environment configuration file by copying the example template.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/trello-automation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Running the GitHub Integration Workflow Application\nDESCRIPTION: This command starts the development server for the GitHub integration workflow application using npm.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/github-integration-workflow.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Application\nDESCRIPTION: Commands for starting the development server and making test requests.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/finance-agent.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/finance-query \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"query\": \"Latest information about AAPL and MSFT\"}'\n```\n\n----------------------------------------\n\nTITLE: Testing Motia API Endpoint\nDESCRIPTION: cURL command example to test a Motia API endpoint with POST request\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/default \\\n-H \"Content-Type: application/json\" \\\n-d '{}'\n```\n\n----------------------------------------\n\nTITLE: Getting Motia CLI Help\nDESCRIPTION: Command to access help documentation for Motia CLI commands\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmotia <command> --help\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GitHub Integration Workflow\nDESCRIPTION: This command installs the necessary dependencies for the GitHub integration workflow project using npm.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/github-integration-workflow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server for the Gmail automation system.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/gmail-automation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing RAG Agent Dependencies\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and configuring environment variables for the RAG Agent project.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/rag-docling-weaviate-agent.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MotiaDev/motia-examples\ncd examples/rag-docling-weaviate-agent\n\npnpm install\n# or\nnpm install\n\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: API Request Format for Retrieving Research Report\nDESCRIPTION: GET request format for retrieving the completed research report, requiring the requestId parameter to identify which research results to return.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nGET /research/report?requestId=unique-trace-id\n```\n\n----------------------------------------\n\nTITLE: Starting the AI Deep Research Agent Application\nDESCRIPTION: Command for starting the development server to run the AI Deep Research Agent application. This makes the agent accessible through the Motia Workbench interface.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Testing Discord Webhook\nDESCRIPTION: Curl command to test Discord webhook integration for email summaries.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/gmail-automation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" \\\n-d '{\"content\": \"Testing Gmail Account Manager webhook\"}' \\\nhttps://discord.com/api/webhooks/your-webhook-url\n```\n\n----------------------------------------\n\nTITLE: Copying Motia Configuration Files to Project\nDESCRIPTION: Command to copy the Cursor AI configuration files from the cloned repository to a Motia project directory.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp -r .cursor your-motia-project/\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Commands for creating and configuring the environment variables file with necessary API keys for OpenAI and Firecrawl services.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Starting RAG Agent Development Server\nDESCRIPTION: Command to start the development server for the RAG Agent application.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/rag-docling-weaviate-agent.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, pnpm, or yarn). After running, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Motia Development Server with PNPM\nDESCRIPTION: Command to start the Motia development server using PNPM package manager, which enables monitoring of logs through either the Motia Workbench or directly in the terminal.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements\nDESCRIPTION: Command to install required Python packages from requirements.txt file.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/gmail-automation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Template\nDESCRIPTION: This command creates a new .env file by copying the example template, which will be used to store environment variables for the project.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/github-integration-workflow.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Cloning the Motia Dot-Files Repository\nDESCRIPTION: Command to clone the repository containing Motia framework development configurations and guides.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/motia/dot-files.git\n```\n\n----------------------------------------\n\nTITLE: Starting the Motia Development Server with NPM\nDESCRIPTION: Command to start the Motia development server using NPM package manager, which enables monitoring of logs through either the Motia Workbench or directly in the terminal.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/logging-and-debugging.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Listing Available Templates\nDESCRIPTION: Command to display all available project templates for Motia.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia templates\n```\n\n----------------------------------------\n\nTITLE: Retrieving Project Configuration\nDESCRIPTION: Command to get the generated configuration for the project with option to specify output path.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/concepts/cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia get-config [options]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: Command to install Node.js dependencies for the project using pnpm package manager.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/gmail-automation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to Motia Project Directory\nDESCRIPTION: Changes the current directory to the newly created Motia project folder.\nSOURCE: https://github.com/motiadev/motia/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-first-agent\n```\n\n----------------------------------------\n\nTITLE: Starting Motia Workbench with bun\nDESCRIPTION: Command to start Motia Workbench in development mode using bun package manager. This launches the backend services, API endpoints, and web interface with auto-reload functionality.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/workbench/overview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Motia\nDESCRIPTION: Command to execute the test suite for the Motia framework. Running tests is an important step in the development process to ensure code quality.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Project Clone and Setup\nDESCRIPTION: Commands to clone the repository and enter the project directory.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/gmail-automation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/gmail-flow.git\ncd gmail-flow\n```\n\n----------------------------------------\n\nTITLE: Displaying Motia Monorepo Directory Structure in Markdown\nDESCRIPTION: This snippet shows the repository structure using a tree-like representation in markdown. It illustrates the organization of packages, playground environment, and configuration files that make up the Motia monorepo.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── packages/                   # Core framework and supporting tools\n│   ├── motia/                  # The Motia.js framework\n│   │   ├── src/                # Source code\n│   │   ├── dist/               # Compiled output\n│   │   ├── package.json        # Package metadata\n│   │   └── README.md           # Framework-specific documentation\n│   └── other-packages/         # Placeholder for future packages\n├── playground/                 # Sandbox environment for testing\n│   ├── src/                    # Source code for testing and examples\n│   │   ├── flows/          # Flow implementations\n│   │   ├── traffic/            # Traffic definitions (inbound/outbound)\n│   │   ├── ui/                 # Custom UI components\n│   │   └── index.js            # Playground entry point\n│   ├── .env.example            # Environment variable template\n│   └── README.md               # Playground-specific documentation\n├── pnpm-workspace.yaml         # Monorepo configuration\n├── package.json                # Top-level package metadata\n├── README.md                   # Monorepo overview (this file)\n└── CONTRIBUTING.md             # Guidelines for contributing\n```\n\n----------------------------------------\n\nTITLE: Installing Motia CLI Globally\nDESCRIPTION: Commands to install the Motia CLI globally using different package managers. This allows users to create Motia projects using the global 'motia' command.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g motia\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add motia\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -g motia\n```\n\n----------------------------------------\n\nTITLE: Specifying modulegraph Package Dependency Version\nDESCRIPTION: Specifies the minimum required version of the modulegraph package using greater than or equal to version constraint. The modulegraph package is required at version 0.17.1 or higher.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmodulegraph>=0.17.1\n```\n\n----------------------------------------\n\nTITLE: Installing Motia CLI Globally\nDESCRIPTION: Command to install the Motia command-line interface globally. The CLI provides tools for working with Motia flows and is a prerequisite for development.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g motia\n```\n\n----------------------------------------\n\nTITLE: Starting the Motia Development Server\nDESCRIPTION: Launches the Motia development server using pnpm, which starts the workbench interface and API endpoints for testing.\nSOURCE: https://github.com/motiadev/motia/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: Command to start the Trello automation application in development mode.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/trello-automation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating New Motia Project\nDESCRIPTION: Command to create a new Motia project using the CLI with project name and cursor options\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/snap/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx motia create --name my-motia-project --cursor\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required project dependencies using pnpm package manager.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/trello-automation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing @motiadev/core Package\nDESCRIPTION: Commands for installing the @motiadev/core package using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @motiadev/core\n# or\nyarn add @motiadev/core\n# or\npnpm add @motiadev/core\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM, which is the package manager used for this monorepo. This step is required before running or developing the framework.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the AI Deep Research Agent\nDESCRIPTION: Commands for installing project dependencies using either pnpm or npm package managers. This is required before running the application.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/real-world-use-cases/ai-deep-research-agent.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Commands to copy the example environment variables file and prepare it for configuration. Environment variables are needed for API integrations and other configurations.\nSOURCE: https://github.com/motiadev/motia/blob/main/MONOREPO-README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp playground/.env.example playground/.env\n```\n\n----------------------------------------\n\nTITLE: Minimal Motia Step Example\nDESCRIPTION: A JavaScript example of a minimal Motia step. This step listens for an 'add-numbers' event, adds two numbers, and emits a 'numbers-added' event with the result.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/docs/content/docs/getting-started/quick-start.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  type: 'event', // \"event\", \"api\", or \"cron\"\n  name: 'AddNumbers',\n  subscribes: ['add-numbers'],\n  emits: ['numbers-added'],\n  flows: ['numbers'],\n}\n\nexports.handler = async (input, { emit }) => {\n  const sum = (input.a || 0) + (input.b || 0)\n  await emit({\n    topic: 'numbers-added',\n    data: { result: sum },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UI for NOOP Step in TypeScript React\nDESCRIPTION: This snippet creates a React component for visualizing a NOOP step in the Motia Workbench. It includes handles for input and output connections.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/dot-files/CLAUDE.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { BaseHandle, Position } from 'motia/workbench';\n\nexport default function ExternalProcess() {\n  return (\n    <div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\">\n      <div className=\"text-sm font-medium\">External Process</div>\n      <BaseHandle type=\"target\" position={Position.Top} />\n      <BaseHandle type=\"source\" position={Position.Bottom} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies version requirements for Python packages pydantic and anthropic. Requires pydantic version 2.6.1 or higher and anthropic version 0.31.2 exactly.\nSOURCE: https://github.com/motiadev/motia/blob/main/playground/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npydantic>=2.6.1\nanthropic==0.31.2\n```\n\n----------------------------------------\n\nTITLE: Specifying jsonschema Package Version Requirement\nDESCRIPTION: Defines the minimum required version of the jsonschema package as 4.23.0 using pip's version specifier syntax.\nSOURCE: https://github.com/motiadev/motia/blob/main/packages/core/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\njsonschema>=4.23.0\n```"
  }
]