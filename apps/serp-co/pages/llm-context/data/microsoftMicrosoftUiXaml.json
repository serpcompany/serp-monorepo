[
  {
    "owner": "microsoft",
    "repo": "microsoft-ui-xaml",
    "content": "TITLE: Defining ScrollView Class API in C#\nDESCRIPTION: Complete runtime class definition for ScrollView in Microsoft.UI.Xaml.Controls. This class provides scrolling and zooming functionality with properties for controlling scroll behavior, zoom factors, visibility, and methods for programmatic scrolling/zooming. It also includes events for tracking scroll states and animation progress.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\n[contentproperty(\"Content\")]\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.ScrollView :\n    Microsoft.UI.Xaml.Controls.Control\n{\n    ScrollView();\n\n    Microsoft.UI.Xaml.UIElement Content { get; set; };\n    Microsoft.UI.Xaml.UIElement CurrentAnchor { get; };\n    Microsoft.UI.Composition.CompositionPropertySet ExpressionAnimationSources { get; };\n    Double HorizontalOffset { get; };\n    Double VerticalOffset { get; };\n    Single ZoomFactor { get; };\n    Double ExtentWidth { get; };\n    Double ExtentHeight { get; };\n    Double ViewportWidth{ get; };\n    Double ViewportHeight{ get; };\n    Double ScrollableWidth{ get; };\n    Double ScrollableHeight{ get; };\n    ScrollingInteractionState State { get; };\n    ScrollingScrollBarVisibility HorizontalScrollBarVisibility { get; set; };\n    ScrollingScrollBarVisibility VerticalScrollBarVisibility { get; set; };\n    ScrollingContentOrientation ContentOrientation { get; set; };\n    ScrollingChainMode HorizontalScrollChainMode { get; set; };\n    ScrollingChainMode VerticalScrollChainMode { get; set; };\n    ScrollingRailMode HorizontalScrollRailMode { get; set; };\n    ScrollingRailMode VerticalScrollRailMode { get; set; };\n    ScrollingScrollMode HorizontalScrollMode { get; set; };\n    ScrollingScrollMode VerticalScrollMode { get; set; };\n    Microsoft.UI.Xaml.Visibility ComputedHorizontalScrollBarVisibility{ get; };\n    Microsoft.UI.Xaml.Visibility ComputedVerticalScrollBarVisibility{ get; };\n    ScrollingChainMode ZoomChainMode { get; set; };\n    ScrollingZoomMode ZoomMode { get; set; };\n    ScrollingInputKinds IgnoredInputKinds { get; set; };\n    Double MinZoomFactor { get; set; };\n    Double MaxZoomFactor { get; set; };\n    Double HorizontalAnchorRatio { get; set; };\n    Double VerticalAnchorRatio { get; set; };\n    void RegisterAnchorCandidate(Microsoft.UI.Xaml.UIElement element);\n    void UnregisterAnchorCandidate(Microsoft.UI.Xaml.UIElement element);\n    [method_name(\"ScrollTo\")]\n    Int32 ScrollTo(\n        Double horizontalOffset,\n        Double verticalOffset);\n    [method_name(\"ScrollToWithOptions\")]\n    Int32 ScrollTo(\n        Double horizontalOffset,\n        Double verticalOffset,\n        ScrollingScrollOptions options);\n    [method_name(\"ScrollBy\")]\n    Int32 ScrollBy(\n        Double horizontalOffsetDelta,\n        Double verticalOffsetDelta);\n    [method_name(\"ScrollByWithOptions\")]\n    Int32 ScrollBy(\n        Double horizontalOffsetDelta,\n        Double verticalOffsetDelta,\n        ScrollingScrollOptions options);\n    Int32 AddScrollVelocity(\n        Windows.Foundation.Numerics.Vector2 offsetsVelocity,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> inertiaDecayRate);\n    [method_name(\"ZoomTo\")]\n    Int32 ZoomTo(\n        Single zoomFactor,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint);\n    [method_name(\"ZoomToWithOptions\")]\n    Int32 ZoomTo(\n        Single zoomFactor,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,\n        ScrollingZoomOptions options);\n    [method_name(\"ZoomBy\")]\n    Int32 ZoomBy(\n        Single zoomFactorDelta,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint);\n    [method_name(\"ZoomByWithOptions\")]\n    Int32 ZoomBy(\n        Single zoomFactorDelta,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,\n        ScrollingZoomOptions options);\n    Int32 AddZoomVelocity(\n        Single zoomFactorVelocity,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,\n        Windows.Foundation.IReference<Single> inertiaDecayRate);\n\n    event Windows.Foundation.TypedEventHandler<ScrollView, Object> ExtentChanged;\n    event Windows.Foundation.TypedEventHandler<ScrollView, Object> StateChanged;\n    event Windows.Foundation.TypedEventHandler<ScrollView, Object> ViewChanged;\n    event Windows.Foundation.TypedEventHandler<ScrollView, ScrollingScrollAnimationStartingEventArgs> ScrollAnimationStarting;\n    event Windows.Foundation.TypedEventHandler<ScrollView, ScrollingZoomAnimationStartingEventArgs> ZoomAnimationStarting;\n    event Windows.Foundation.TypedEventHandler<ScrollView, ScrollingScrollCompletedEventArgs> ScrollCompleted;\n    event Windows.Foundation.TypedEventHandler<ScrollView, ScrollingZoomCompletedEventArgs> ZoomCompleted;\n    event Windows.Foundation.TypedEventHandler<ScrollView, ScrollingBringingIntoViewEventArgs> BringingIntoView;\n    event Windows.Foundation.TypedEventHandler<ScrollView, ScrollingAnchorRequestedEventArgs> AnchorRequested;\n\n    static Microsoft.UI.Xaml.DependencyProperty ContentProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty ScrollPresenterProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollBarVisibilityProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalScrollBarVisibilityProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty ContentOrientationProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollChainModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalScrollChainModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollRailModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalScrollRailModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalScrollModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty ComputedHorizontalScrollBarVisibilityProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty ComputedVerticalScrollBarVisibilityProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty ZoomChainModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty ZoomModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty IgnoredInputKindsProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty MinZoomFactorProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty MaxZoomFactorProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalAnchorRatioProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalAnchorRatioProperty { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Incremental Data Loading with ScrollView in XAML and C#\nDESCRIPTION: This example demonstrates how to implement incremental data loading when the user has scrolled off 90% of the content using ScrollView's ViewChanged event.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView ViewChanged=\"ScrollView_ViewChanged\">\n    <mux:ItemsRepeater ItemsSource=\"{x:Bind Albums}\" ItemTemplate=\"{StaticResource MyTemplate}\">\n        <mux:ItemsRepeater.Layout>\n            <mux:UniformGridLayout RowSpacing=\"8\" ColumnSpacing=\"8\"/>\n        </mux:ItemsRepeater.Layout>\n    </mux:ItemsRepeater>\n</mux:ScrollView>\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ScrollView_ViewChanged(ScrollView sender, object args)\n{\n    if (sender.VerticalOffset >= 0.9 * sender.ScrollableHeight && !_isLoadingMoreData)\n    {\n        _isLoadingMoreData = LoadMoreData();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Layout with ItemsRepeater in ScrollView\nDESCRIPTION: Example showing a ScrollView with default vertical orientation containing an ItemsRepeater with UniformGridLayout, enabling vertical scrolling when content exceeds the viewport height.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView Width=\"500\" Height=\"400\">\n    <mux:ItemsRepeater ItemsSource=\"{x:Bind Albums}\" ItemTemplate=\"{StaticResource MyTemplate}\">\n        <mux:ItemsRepeater.Layout>\n            <mux:UniformGridLayout RowSpacing=\"8\" ColumnSpacing=\"8\"/>\n        </mux:ItemsRepeater.Layout>\n    </mux:ItemsRepeater>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Applying Mica Backdrop to Window in XAML\nDESCRIPTION: Demonstrates how to set a Mica backdrop on a Window using XAML. The example shows a Window with a Grid containing a navigation area (transparent background) and a content area (opaque background).\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-backdrop-api.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Window\n    x:Class=\"App3.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" >\n\n    <Window.SystemBackdrop>\n        <MicaBackdrop/>\n    </Window.SystemBackdrop>\n\n    <Grid ColumnDefinitions=\"Auto,*\">\n\n        // This area has a transparent background, so the Mica backdrop will be mostly visible\n        // For example if there are buttons here, the backdrop will show up in\n        // the margins and gaps between the button text\n        <local:NavigationControls/>\n\n        // This area has an opaque background, so the Mica backdrop won't be visible\n        <local:ContentArea Background=\"White\"/>\n\n    </Grid>\n</Window>\n```\n\n----------------------------------------\n\nTITLE: Jumping to Specific Offset in ScrollView and ScrollViewer\nDESCRIPTION: This C# method demonstrates how to immediately jump to a specific offset in a ScrollView or ScrollViewer, useful for scenarios like searching in a word processor.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void JumpToFirstSearchTermOccurrence(string searchTerm)\n{\n    double horizontalOffset, verticalOffset;\n    \n    ComputeOffsetsForSearchTerm(searchTerm, ref horizontalOffset, ref verticalOffset);\n\n    _scrollView.ScrollTo(\n        horizontalOffset: horizontalOffset,\n        verticalOffset: verticalOffset,\n        options: new ScrollingScrollOptions(ScrollingAnimationMode.Disabled));\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void JumpToFirstSearchTermOccurrence(string searchTerm)\n{\n    double horizontalOffset, verticalOffset;\n    \n    ComputeOffsetsForSearchTerm(searchTerm, ref horizontalOffset, ref verticalOffset);\n\n    _scrollViewer.ChangeView(\n        horizontalOffset: horizontalOffset,\n        verticalOffset: verticalOffset,\n        zoomFactor: null,\n        disableAnimation: true);\n}\n```\n\n----------------------------------------\n\nTITLE: ItemsRepeater in ScrollView Example\nDESCRIPTION: Example of wrapping an ItemsRepeater control with a ScrollView to enable scrolling when the collection content becomes too large to fit in the visible area.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView>\n    <mux:ItemsRepeater ItemsSource=\"{x:Bind Items}\" ItemTemplate=\"{StaticResource MyTemplate}\"/>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollPresenter Snap Points with Custom Applicable Range in C#\nDESCRIPTION: This example demonstrates creating and adding ScrollSnapPoint objects with custom applicable ranges to a ScrollPresenter. The custom ranges allow for optional snap points at specific offsets (0, 100, and 200) with different applicable ranges.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_59\n\nLANGUAGE: csharp\nCODE:\n```\nScrollSnapPoint snapPoint1 = new ScrollSnapPoint(\n    snapPointValue: 0, applicableRange: 140, alignment: ScrollSnapPointsAlignment.Near);\n\nScrollSnapPoint snapPoint2 = new ScrollSnapPoint( \n    snapPointValue: 100, applicableRange: 10, alignment: ScrollSnapPointsAlignment.Near);\n\nScrollSnapPoint snapPoint3 = new ScrollSnapPoint(\n    snapPointValue: 200, applicableRange: 40, alignment: ScrollSnapPointsAlignment.Near);\n\n_scrollingPresenter.VerticalSnapPoints.Add(snapPoint1);\n\n_scrollingPresenter.VerticalSnapPoints.Add(snapPoint2);\n\n_scrollingPresenter.VerticalSnapPoints.Add(snapPoint3);\n```\n\n----------------------------------------\n\nTITLE: Horizontal Layout with StackPanel in ScrollView\nDESCRIPTION: Example demonstrating a ScrollView with ContentOrientation set to Horizontal containing a StackPanel with horizontally arranged buttons, enabling horizontal scrolling.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView Width=\"500\" Height=\"400\" ContentOrientation=\"Horizontal\">\n    <StackPanel Orientation=\"Horizontal\">\n        <Button Width=\"300\" Content=\"Button1\"/>\n        <Button Width=\"300\" Content=\"Button2\"/>\n        <Button Width=\"300\" Content=\"Button3\"/>\n        <Button Width=\"300\" Content=\"Button4\"/>\n        <Button Width=\"300\" Content=\"Button5\"/>\n    </StackPanel>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Changing Zoom Factor in ScrollViewer without Animation (C#)\nDESCRIPTION: This snippet demonstrates how to change the zoom factor of a ScrollViewer without animation. It uses a Slider to trigger the zoom factor change and the ChangeView method with disabled animation, adjusting offsets to maintain the center point.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ZoomFactorSlider_ValueChanged(object sender, RangeBaseValueChangedEventArgs e)\n{\n    _scrollViewer.ChangeView(\n        horizontalOffset: (_scrollViewer.HorizontalOffset + _scrollViewer.ViewportWidth / 2) *\n            e.NewValue / _scrollViewer.ZoomFactor - _scrollViewer.ViewportWidth / 2,\n        verticalOffset: (_scrollViewer.VerticalOffset + _scrollViewer.ViewportHeight / 2) *\n            e.NewValue / _scrollViewer.ZoomFactor - _scrollViewer.ViewportHeight / 2,\n        zoomFactor: e.NewValue,\n        disableAnimation: true);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Snap Points in C# for ScrollPresenter\nDESCRIPTION: This example demonstrates how to add two horizontal snap points to a ScrollPresenter. It creates two ScrollSnapPoint objects with specific values and alignments, then adds them to the HorizontalSnapPoints collection.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nScrollSnapPoint snapPoint1 = new ScrollSnapPoint(snapPointValue: 500.0, alignment: ScrollSnapPointsAlignment.Near);\nScrollSnapPoint snapPoint2 = new ScrollSnapPoint(snapPointValue: 1500.0, alignment: ScrollSnapPointsAlignment.Near);\n\nmyScrollPresenter.HorizontalSnapPoints.Add(snapPoint1);\nmyScrollPresenter.HorizontalSnapPoints.Add(snapPoint2);\n```\n\n----------------------------------------\n\nTITLE: Defining New Popup Properties and Events in C#\nDESCRIPTION: Extends the Popup class with new properties and an event to support advanced positioning: PlacementTarget (the reference element for positioning), DesiredPlacement (preferred position), ActualPlacement (final position), and ActualPlacementChanged event.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/Popup-AdditionalLayoutProperties-Spec.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Popup\n{\n    // Existing APIs\n    // ...\n\n    // New APIs\n    FrameworkElement PlacementTarget { get; set; }\n    PopupPlacementMode DesiredPlacement { get; set; }\n    PopupPlacementMode ActualPlacement { get; }\n    \n    public event System.EventHandler<object> ActualPlacementChanged;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Templates for NavigationView Menu Items in XAML\nDESCRIPTION: Example showing how to implement different DataTemplates for main menu items and footer menu items in a NavigationView control. The main menu uses a simple icon and content template while the footer implements a more complex grid-based template for account display.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/FooterMenuItemTemplate-spec.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<muxc:NavigationView x:Name=\"NavView\" SelectionChanged=\"NavView_SelectionChanged\"\n                     MenuItemsSource=\"{x:Bind MainMenuItems}\" FooterMenuItemSource=\"{x:Bind Accounts}\">\n    <muxc:NavigationView.MenuItemTemplate>\n        <DataTemplate x:DataType=\"local:MainMenuItem\">\n            <muxc:NavigationViewItem Icon=\"{x:Bind ItemIcon}\" Content=\"{x:Bind Name}\" MenuItemsSource=\"{x:Bind Children}\"/>\n        </DataTemplate>     \n    </muxc:NavigationView.MenuItemTemplate>\n    <muxc:NavigationView.FooterMenuItemTemplate>\n        <DataTemplate x:DataType=\"local:AccountDataObject\">\n            <Grid>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"45\"/>\n                    <ColumnDefinition Width=\"*\"/>\n                </Grid.ColumnDefinitions>\n                <Image Grid.Column=\"0\" Source=\"{x:Bind ProfilePhoto}\" Height=\"30\" Width=\"30\" HorizontalAlignment=\"Left\"/>\n                <TextBlock Grid.Column=\"1\" Text=\"{x:Bind AccountName}\" HorizontalAlignment=\"Left\" VerticalAlignment=\"Center\"/>\n            </Grid>\n        </DataTemplate>\n    </muxc:NavigationView.FooterMenuItemTemplate>\n</muxc:NavigationView>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SystemBackdrop in C#\nDESCRIPTION: Demonstrates how to create a custom SystemBackdrop class using MicaController. This example shows the implementation of OnTargetConnected and OnTargetDisconnected methods, as well as configuration setup.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-backdrop-api.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MicaSystemBackdrop : SystemBackdrop\n{\n    MicaController _micaController;\n\n    protected override void OnTargetConnected(ICompositionSupportsSystemBackdrop connectedTarget, XamlRoot xamlRoot)\n    {\n        // Calling the base OnTargetConnected initializes the default configuration object \n        // returned by GetDefaultSystemBackdropConfiguration() to reflect environment changes \n        // affecting this SystemBackdrop instance (specified by {connecteedTarget, XamlRoot}).\n        base.OnTargetConnected(connectedTarget, xamlRoot);\n\n        // Although this sample does not support sharing MicaSystemBackdrop instances \n        // (eg Window1.SystemBackdrop = Window2.SystemBackdrop = myMicaSystemBackdrop) \n        // such sharing is possible and is supported by the built-in DestkopAcrylicBackdrop and \n        // MicaBackdrop materials. To implement sharing in a custom material, vectorize the \n        // backing ICompositionController storage to keep a separate instance for each usage \n        // context (eg via map keyed on connectedTarget). Note that SystemBackdrop similarly \n        // vectorizes the associated default configuration objects returned by \n        // GetDefaultSystemBackdropConfiguration(connectedTarget, xamlRoot), ensuring \n        // the configuration reflects each usage context when SystemBacdkrop is shared.\n        if(_micaController != null)\n        {\n            throw new Exception(\"This controller cannot be shared\");\n        }\n\n        SetControllerConfig(connectedTarget, xamlRoot);\n\n        _micaController = new MicaController();\n        _micaController.AddSystemBackdropTarget(connectedTarget);\n    }\n\n    protected override void OnTargetDisconnected(ICompositionSupportsSystemBackdrop disconnectedTarget)\n    {\n        base.OnTargetDisconnected(disconnectedTarget);\n\n        _micaController.RemoveSystemBackdropTarget(disconnectedTarget);\n        _micaController = null;\n    }\n\n    void SetControllerConfig(ICompositionSupportsSystemBackdrop connectedTarget, XamlRoot xamlRoot)\n    {\n        var config = GetDefaultSystemBackdropConfiguration(connectedTarget, xamlRoot);\n        _micaController.SetSystemBackdropConfiguration(config);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CompositionScrollController Class for UI-thread-independent Scrolling in C#\nDESCRIPTION: A complete implementation of the IScrollController interface that supports scrolling via a pannable thumb. The class manages scroll operations, interaction elements, and animations to enable smooth scrolling experiences. It includes properties for orientation, offset values, and methods for handling scroll animations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class CompositionScrollController : Control, IScrollController\n{\n    private const float SmallChangeAdditionalVelocity = 144.0f;\n    private const float SmallChangeInertiaDecayRate = 0.975f;\n\n    private Dictionary<int, double> operations = new Dictionary<int, double>();\n    private FrameworkElement interactionFrameworkElement = null;\n    private UIElement horizontalGrid = null;\n    private UIElement verticalGrid = null;\n    private UIElement horizontalThumb = null;\n    private UIElement verticalThumb = null;\n    private RepeatButton horizontalDecrementRepeatButton = null;\n    private RepeatButton verticalDecrementRepeatButton = null;\n    private RepeatButton horizontalIncrementRepeatButton = null;\n    private RepeatButton verticalIncrementRepeatButton = null;\n    private Visual interactionVisual = null;\n    private CompositionPropertySet expressionAnimationSources = null;\n    private ExpressionAnimation thumbOffsetAnimation = null;\n    private Orientation orientation = Orientation.Vertical;\n    private ScrollingScrollMode scrollMode = ScrollingScrollMode.Disabled;\n    private bool isThumbDragged = false;\n    private double minOffset = 0.0;\n    private double maxOffset = 0.0;\n    private double offset = 0.0;\n    private double offsetTarget = 0.0;\n    private double viewport = 0.0;\n    private double preManipulationThumbOffset = 0.0;\n    private string minOffsetPropertyName;\n    private string maxOffsetPropertyName;\n    private string offsetPropertyName;\n    private string multiplierPropertyName;\n\n    public CompositionScrollController()\n    {\n        this.DefaultStyleKey = typeof(CompositionScrollController);\n        OverriddenOffsetChangeDuration = TimeSpan.MinValue;\n        IsEnabledChanged += CompositionScrollController_IsEnabledChanged;\n        SizeChanged += CompositionScrollController_SizeChanged;\n    }\n\n    protected override void OnApplyTemplate()\n    {\n        UnhookHandlers();\n\n        base.OnApplyTemplate();\n\n        horizontalGrid = GetTemplateChild(\"HorizontalGrid\") as UIElement;\n        verticalGrid = GetTemplateChild(\"VerticalGrid\") as UIElement;\n        horizontalThumb = GetTemplateChild(\"HorizontalThumb\") as UIElement;\n        verticalThumb = GetTemplateChild(\"VerticalThumb\") as UIElement;\n        horizontalDecrementRepeatButton = GetTemplateChild(\"HorizontalDecrementRepeatButton\") as RepeatButton;\n        verticalDecrementRepeatButton = GetTemplateChild(\"VerticalDecrementRepeatButton\") as RepeatButton;\n        horizontalIncrementRepeatButton = GetTemplateChild(\"HorizontalIncrementRepeatButton\") as RepeatButton;\n        verticalIncrementRepeatButton = GetTemplateChild(\"VerticalIncrementRepeatButton\") as RepeatButton;\n\n        UpdateOrientation();\n    }\n\n    public TimeSpan OverriddenOffsetChangeDuration\n    {\n        get;\n        set;\n    }\n\n    public Orientation Orientation\n    {\n        get\n        {\n            return orientation;\n        }\n        set\n        {\n            if (orientation != value)\n            {\n                UnhookHandlers();\n                StopThumbAnimation(orientation);\n                orientation = value;\n                UpdateOrientation();\n            }\n        }\n    }\n\n    public void SetExpressionAnimationSources(\n        CompositionPropertySet propertySet,\n        string minOffsetPropertyName,\n        string maxOffsetPropertyName,\n        string offsetPropertyName,\n        string multiplierPropertyName)\n    {\n        expressionAnimationSources = propertySet;\n        if (expressionAnimationSources != null)\n        {\n            this.minOffsetPropertyName = minOffsetPropertyName.Trim();\n            this.maxOffsetPropertyName = maxOffsetPropertyName.Trim();\n            this.offsetPropertyName = offsetPropertyName.Trim();\n            this.multiplierPropertyName = multiplierPropertyName.Trim();\n\n            UpdateInteractionElementScrollMultiplier();\n\n            if (thumbOffsetAnimation == null)\n            {\n                EnsureThumbAnimation();\n                UpdateThumbExpression();\n                StartThumbAnimation(Orientation);\n            }\n        }\n        else\n        {\n            minOffsetPropertyName =\n            maxOffsetPropertyName =\n            offsetPropertyName =\n            multiplierPropertyName = string.Empty;\n            thumbOffsetAnimation = null;\n            StopThumbAnimation(Orientation);\n        }\n    }\n\n    public void SetScrollMode(ScrollingScrollMode scrollMode)\n    {\n        this.scrollMode = scrollMode;\n        UpdateAreInteractionsAllowed();\n    }\n\n    public void SetValues(double minOffset, double maxOffset, double offset, double viewport)\n    {\n        if (maxOffset < minOffset)\n        {\n            throw new ArgumentOutOfRangeException(\"maxOffset\");\n        }\n\n        if (viewport < 0.0)\n        {\n            throw new ArgumentOutOfRangeException(\"viewport\");\n        }\n\n        offset = Math.Max(minOffset, offset);\n        offset = Math.Min(maxOffset, offset);\n\n        if (operations.Count == 0)\n        {\n            offsetTarget = offset;\n        }\n        else\n        {\n            offsetTarget = Math.Max(minOffset, offsetTarget);\n            offsetTarget = Math.Min(maxOffset, offsetTarget);\n        }\n\n        bool updateInteractionFrameworkElementSize =\n            this.minOffset != minOffset ||\n            this.maxOffset != maxOffset ||\n            this.viewport != viewport;\n\n        this.minOffset = minOffset;\n        this.offset = offset;\n        this.maxOffset = maxOffset;\n        this.viewport = viewport;\n\n        if (updateInteractionFrameworkElementSize && !UpdateInteractionFrameworkElementSize())\n        {\n            UpdateInteractionElementScrollMultiplier();\n        }\n    }\n\n    // Builds a custom Vector3KeyFrameAnimation animation that the ScrollPresenter applies when an animated offset change\n    // is requested by the CompositionScrollController. \n    public CompositionAnimation GetScrollAnimation(\n        int correlationId,\n        Vector2 currentPosition,\n        CompositionAnimation defaultAnimation)\n    {\n        Vector3KeyFrameAnimation stockKeyFrameAnimation = defaultAnimation as Vector3KeyFrameAnimation;\n\n        if (stockKeyFrameAnimation != null)\n        {\n            Vector3KeyFrameAnimation customKeyFrameAnimation = stockKeyFrameAnimation;\n            float positionTarget = (float)operations[correlationId];\n            float otherOrientationPosition = orientation == Orientation.Horizontal ? currentPosition.Y : currentPosition.X;\n\n            customKeyFrameAnimation = stockKeyFrameAnimation.Compositor.CreateVector3KeyFrameAnimation();\n            float deltaPosition = (float)(positionTarget - offset);\n\n            CubicBezierEasingFunction cubicBezierStart = stockKeyFrameAnimation.Compositor.CreateCubicBezierEasingFunction(\n                new Vector2(1.0f, 0.0f),\n                new Vector2(1.0f, 0.0f));\n\n            StepEasingFunction step = stockKeyFrameAnimation.Compositor.CreateStepEasingFunction(1);\n\n            CubicBezierEasingFunction cubicBezierEnd = stockKeyFrameAnimation.Compositor.CreateCubicBezierEasingFunction(\n                new Vector2(0.0f, 1.0f),\n                new Vector2(0.0f, 1.0f));\n\n            if (orientation == Orientation.Horizontal)\n            {\n                customKeyFrameAnimation.InsertKeyFrame(\n                    0.499999f,\n                    new Vector3(positionTarget - 0.9f * deltaPosition, otherOrientationPosition, 0.0f),\n                    cubicBezierStart);\n                customKeyFrameAnimation.InsertKeyFrame(\n                    0.5f,\n                    new Vector3(positionTarget - 0.1f * deltaPosition, otherOrientationPosition, 0.0f),\n                    step);\n                customKeyFrameAnimation.InsertKeyFrame(\n                    1.0f,\n                    new Vector3(positionTarget, otherOrientationPosition, 0.0f),\n                    cubicBezierEnd);\n            }\n            else\n            {\n                customKeyFrameAnimation.InsertKeyFrame(\n                    0.499999f,\n                    new Vector3(otherOrientationPosition, positionTarget - 0.9f * deltaPosition, 0.0f),\n                    cubicBezierStart);\n                customKeyFrameAnimation.InsertKeyFrame(\n                    0.5f,\n                    new Vector3(otherOrientationPosition, positionTarget - 0.1f * deltaPosition, 0.0f),\n                    step);\n                customKeyFrameAnimation.InsertKeyFrame(\n                    1.0f,\n                    new Vector3(otherOrientationPosition, positionTarget, 0.0f),\n                    cubicBezierEnd);\n            }\n            customKeyFrameAnimation.Duration = stockKeyFrameAnimation.Duration;\n\n            if (OverriddenOffsetChangeDuration != TimeSpan.MinValue)\n            {\n                customKeyFrameAnimation.Duration = OverriddenOffsetChangeDuration;\n            }\n\n            return customKeyFrameAnimation;\n        }\n\n        return null;\n    }\n\n    public void NotifyScrollCompleted(int correlationId)\n    {\n        if (operations.ContainsKey(correlationId))\n        {\n            operations.Remove(correlationId);\n        }\n    }\n\n    public bool AreInteractionsAllowed\n    {\n        get;\n        private set;\n    }\n\n    public bool IsInteracting\n    {\n        get;\n        private set;\n    }\n\n    public bool IsInteractionElementRailEnabled\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public UIElement InteractionElement\n    {\n        get\n        {\n            return (IsEnabled && interactionFrameworkElement != null && interactionFrameworkElement.Parent != null) ? interactionFrameworkElement.Parent as UIElement : null;\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard-Triggered Zoom Animation in ScrollView\nDESCRIPTION: Handles Ctrl+Home and Ctrl+End keystrokes to animate ScrollView zoom factor to minimum and maximum values respectively.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnKeyUp(KeyRoutedEventArgs e)\n{\n    base.OnKeyUp(e);\n\n    if (!CoreWindow.GetForCurrentThread().GetKeyState(VirtualKey.Control).HasFlag(CoreVirtualKeyStates.Down))\n    {\n        return;\n    }\n\n    if (e.Key == VirtualKey.Home)\n    {\n        _scrollView.ZoomTo(\n            zoomFactor: _scrollView.MinZoomFactor,\n            centerPoint: null);\n    }\n    else if (e.Key == VirtualKey.End)\n    {\n        _scrollView.ZoomTo(\n            zoomFactor: _scrollView.MaxZoomFactor,\n            centerPoint: null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Zoom Snap Points in C# for ScrollPresenter\nDESCRIPTION: This example demonstrates how to add two zoom snap points to a ScrollPresenter. It creates two ZoomSnapPoint objects with specific values, then adds them to the ZoomSnapPoints collection.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nZoomSnapPoint snapPoint1 = new ZoomSnapPoint(snapPointValue: 2.5);\nZoomSnapPoint snapPoint2 = new ZoomSnapPoint(snapPointValue: 5.0);\n\nmyScrollPresenter.ZoomSnapPoints.Add(snapPoint1);\nmyScrollPresenter.ZoomSnapPoints.Add(snapPoint2);\n```\n\n----------------------------------------\n\nTITLE: Implementing TitleBar with WinUI Controls Integration in XAML\nDESCRIPTION: Demonstrates how to integrate common WinUI controls (AutoSuggestBox, PersonPicture, AppBarButton) with the TitleBar using the Content and ContentAfter properties. This example shows how to enhance the titlebar with search functionality and user profile.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<TitleBar \n    x:Name=\"ControlsTitleBar\" \n    Title=\"ControlsTitleBar\" \n    Subtitle=\"Preview\" \n    Background=\"Transparent\" \n    IsBackButtonVisible=\"True\"\n    IsPaneToggleButtonVisible=\"True\">\n    <TitleBar.IconSource>\n        <SymbolIconSource Symbol=\"Home\"/>\n    </TitleBar.IconSource>\n    <TitleBar.Content>\n        <AutoSuggestBox PlaceholderText=\"Search\" QueryIcon=\"Find\" />\n    <TitleBar.Content>\n    <TitleBar.ContentAfter>\n        <StackPanel Orientation=\"Horizontal\">\n            <AppBarButton Icon=\"More\" Label=\"MoreSymbolIcon\" />\n            <PersonPicture DisplayName=\"Jane Doe\" />\n        </StackPanel>\n    </TitleBar.ContentAfter>\n</TitleBar>\n```\n\n----------------------------------------\n\nTITLE: Changing Zoom Factor in ScrollView without Animation (C#)\nDESCRIPTION: This snippet shows how to change the zoom factor of a ScrollView without animation. It uses a Slider to trigger the zoom factor change and the ZoomTo method with disabled animation.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ZoomFactorSlider_ValueChanged(object sender, RangeBaseValueChangedEventArgs e)\n{\n    _scrollView.ZoomTo(\n        zoomFactor: e.NewValue,\n        centerPoint: null, // Use the viewport center as the zoom center point.\n        options: new ScrollingZoomOptions(ScrollingAnimationMode.Disabled));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AppWindow Functionality in WinUI 3 (After)\nDESCRIPTION: This code snippet shows how to access AppWindow functionality using the new Window.AppWindow API in WinUI 3. It simplifies the process by providing direct access to the AppWindow object.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/appwindow-spec.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\n// This is needed to get any Window from inside a Xaml control \nvar xamlWindow = WindowHelper.GetWindowForElement(this); // api to get window object from UIElement (not a real api)  \n   \n\n//calling function foo directly\nxamlWindow.AppWindow.foo();\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer-Based Animation Optimization in C#\nDESCRIPTION: Example that demonstrates how to optimize animation resource usage by setting AnimationOptimization to Latency on pointer enter (to preload animations) and Resources on pointer exit (to conserve resources). This optimizes the animation for immediate playback when clicked while minimizing resource usage when not needed.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/AnimatedVisualPlayer Spec.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nprivate void Player_PointerEntered(object sender, PointerRoutedEventArgs e)\n{\n    myanimatedvisualplayer.AnimationOptimization = AnimationOptimization.Latency;\n}\nasync private void Player_PointerExited(object sender, PointerRoutedEventArgs e)\n{              \n    myanimatedvisualplayer.AnimationOptimization = AnimationOptimization.Resources;\n}\n\nasync private void Player_OnClick(object sender, PointerRoutedEventArgs e)\n{              \n    myanimatedvisualplayer.PlayAsync(0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TitleBar with NavigationView L-Pattern in XAML\nDESCRIPTION: Shows how to integrate TitleBar with NavigationView in an L-Pattern layout, including resource customization for NavigationView borders and corner radius. This implementation demonstrates a common app layout pattern with navigation and titlebar.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"*\" />\n    </Grid.RowDefinitions>\n    <TitleBar \n        x:Name=\"NavViewTitleBar\" \n        Title=\"NavView TitleBar\"\n        Background=\"Transparent\" \n        IsBackButtonVisible=\"True\"\n        IsBackButtonEnabled=\"{x:Bind NavFrame.CanGoBack}\"\n        BackRequested=\"NavViewTitleBar_BackRequested\"\n        PaneToggleRequested=\"NavViewTitleBar_PaneToggleRequested\">\n        <TitleBar.IconSource>\n            <SymbolIconSource Symbol=\"Home\"/>\n        </TitleBar.IconSource>\n    </TitleBar>\n\n    <NavigationView\n        x:Name=\"NavView\"\n        Grid.Column=\"1\">\n\n        <!-- TitleBar with NavigationView L-Pattern Overwriting resources -->\n        <NavigationView.Resources>\n            <!-- This is the border between NavView and NavView Content -->\n            <Thickness x:Key=\"NavigationViewContentGridBorderThickness\">1,1,0,0</Thickness>\n            <!-- This is the rounded corner on the Top left of the L Pattern -->\n            <CornerRadius x:Key=\"NavigationViewContentGridCornerRadius\">8,0,0,0</CornerRadius>\n        </NavigationView.Resources>\n\n        <Frame x:Name=\"NavFrame\" />\n\n        <NavigationView.MenuItems>\n            ...\n        </NavigationView.Menuitems>\n    </NavigationView>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Jumping Horizontal Offset on Arrow Key Press in ScrollViewer (C#)\nDESCRIPTION: This snippet demonstrates how to jump the horizontal offset of a ScrollViewer by specific values when processing Left and Right Arrow keystrokes. It uses the ChangeView method with disabled animation for a FlipView-like experience.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnKeyUp(KeyRoutedEventArgs e)\n{\n    base.OnKeyUp(e);\n    if (e.Key == VirtualKey.Left)\n    {\n        _scrollViewer.ChangeView(\n            horizontalOffset: _scrollViewer.HorizontalOffset - _previousGroup.Width),\n            verticalOffset: null,\n            zoomFactor: null,\n            disableAnimation: true);\n    }\n    else if (e.Key == VirtualKey.Right)\n    {\n        _scrollViewer.ChangeView(\n            horizontalOffset: _scrollViewer.HorizontalOffset + _currentGroup.Width),\n            verticalOffset: null,\n            zoomFactor: null,\n            disableAnimation: true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Animation for ScrollView Zoom\nDESCRIPTION: Implements custom zoom animations triggered by slider value changes and handles zoom animation events.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ZoomFactorSlider_ValueChanged(object sender, RangeBaseValueChangedEventArgs e)\n{\n    float zoomFactorDelta = GetZoomFactorDelta(e.NewValue);\n    _scrollView.ZoomBy(\n        zoomFactorDelta,\n        centerPoint: null);\n}\n\nprivate void ScrollView_ZoomAnimationStarting(ScrollView scrollView, ScrollingZoomAnimationStartingEventArgs e)\n{\n    CompositionAnimation animation = GetCustomZoomAnimation(\n        e.StartZoomFactor,\n        e.EndZoomFactor,\n        e.CenterPoint);\n        e.Animation = animation;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MicaBackdrop with Custom MicaKind in XAML\nDESCRIPTION: Shows how to apply a MicaBackdrop to a Window in XAML, specifying a custom MicaKind property.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-backdrop-api.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Window x:Class=\"MyApp.MainWindow\">\n\n    <Window.SystemBackdrop>\n        <MicaBackdrop MicaKind=\"BaseAlt\"/>\n    </Window.SystemBackdrop>\n\n</Window>\n```\n\n----------------------------------------\n\nTITLE: Velocity-Based Scrolling with Joystick in ScrollView (C#)\nDESCRIPTION: This snippet demonstrates how to implement velocity-based scrolling in a ScrollView using a joystick-like input. It adjusts the ScrollView's velocity based on the joystick's position, updating at regular intervals.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void MainPage()\n{\n    _requestScrollTimer.Interval = new TimeSpan(0, 0, 0, 1); // 1 second interval\n}\n\nprivate void Joystick_PositionChanged(Joystick joystick, object args)\n{\n    if (joystick.HorizontalValue != 0.0 || joystick.VerticalValue != 0.0)\n    {\n        if (!_requestScrollTimer.IsEnabled)\n        {\n            // Adjust `ScrollView`'s velocity at most once a second as long as joystick isn't centered.\n            AdjustScrollViewVelocity();\n            _requestScrollTimer.Start();\n        }\n    }\n    else if (_requestScrollTimer.IsEnabled)\n    {\n        _requestScrollTimer.Stop();\n    }\n}\n\nprivate void RequestScrollTimer_Tick(object sender, object e)\n{\n    AdjustScrollViewVelocity();\n}\n\nprivate void AdjustScrollViewVelocity()\n{\n    _scrollView.AddScrollVelocity(\n        offsetsVelocity: new Vector2(80*_joystick.HorizontalValue, 80*_joystick.VerticalValue),\n        inertiaDecayRate: new Vector2(0.975, 0.975));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Limits in ScrollView\nDESCRIPTION: Controls the minimum and maximum zoom levels using MinZoomFactor and MaxZoomFactor properties in ScrollView. This example restricts zooming between 1.0x (original size) and 2.0x magnification, affecting both user interactions and programmatic zoom.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView Width=\"500\" Height=\"400\" ContentOrientation=\"Both\"\n    ZoomMode=\"Enabled\" \n    MinZoomFactor=\"1.0\" MaxZoomFactor=\"2.0\">\n    <Image Source=\"Assets/LargeParisMap.png\"/>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic InfoBadge Types in XAML\nDESCRIPTION: Examples of creating dot, numeric, and icon-based InfoBadges using XAML markup\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<InfoBadge />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<InfoBadge x:Name=\"emailInfoBadge\" Value=\"{x:Bind numUnreadMail}\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<InfoBadge x:Name=\"SyncStatusInfoBadge\">\n    <InfoBadge.IconSource>\n        <SymbolIcon Symbol=\"Sync\"/>\n    </InfoBadge.IconSource>\n</InfoBadge>\n```\n\n----------------------------------------\n\nTITLE: Using ScrollPresenter in a Custom Scrolling Component\nDESCRIPTION: Example of implementing a custom scrolling control using ScrollPresenter as a building block, alongside custom UI widgets for translation and scale control instead of standard scrollbars.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<UserControl\n    x:Class=\"AcmeApp.MyScroller\"\n    xmlns=http://schemas.microsoft.com/winfx/2006/xaml/presentation\n    xmlns:muxp=\"using:Microsoft.UI.Xaml.Controls.Primitives\">\n    <Grid>\n        <muxp:ScrollPresenter x:Name=\"scrollPresenter\"/>\n        <acme:ScrollController x:Name=\"scrollController\" HorizontalAlignment=\"Right\"/>\n        <acme:ZoomController x:Name=\"zoomController\" HorizontalAlignment=\"Right\" VerticalAlignment=\"Top\"/>\n    </Grid>\n</UserControl>\n```\n\n----------------------------------------\n\nTITLE: Implementing SetExpressionAnimationSources in IScrollController for Composition-based Scrolling\nDESCRIPTION: This method is invoked by the ScrollPresenter to provide a CompositionPropertySet with four properties for scroll control. The controller reads minimum, maximum, and current offset values, and writes a multiplier value to control relative movement between the interaction element and content.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_14\n\nLANGUAGE: cs\nCODE:\n```\nvoid SetExpressionAnimationSources(\n    Microsoft.UI.Composition.CompositionPropertySet propertySet, \n    String minOffsetPropertyName, \n    String maxOffsetPropertyName, \n    String offsetPropertyName, \n    String multiplierPropertyName)\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Limits in ScrollViewer\nDESCRIPTION: The equivalent ScrollViewer implementation for controlling minimum and maximum zoom levels. Sets MinZoomFactor to 1.0 and MaxZoomFactor to 2.0, limiting the zoom range for both user interactions and programmatic controls.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<ScrollViewer Width=\"500\" Height=\"400\" HorizontalScrollBarVisibility=\"Auto\"\n    ZoomMode=\"Enabled\" MinZoomFactor=\"1.0\" MaxZoomFactor=\"2.0\">\n    <Image Source=\"Assets/LargeParisMap.png\"/>\n</ScrollViewer>\n```\n\n----------------------------------------\n\nTITLE: Configuring TitleBar in C# Code-Behind\nDESCRIPTION: Shows how to configure the TitleBar in C# code-behind, including setting the UI element as the titlebar and enabling content extension into the titlebar area. This is required to replace the system titlebar with the WinUI TitleBar.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic MainWindow()\n{\n    this.InitializeComponent();\n\n    // C# code to set AppTitleBar UIElement as Titlebar\n    Window window = this; \n    window.ExtendsContentIntoTitleBar = true;  // Hides the default system titlebar.\n    window.SetTitleBar(this.DefaultTitleBar); // Replace system titlebar with the WinUI Titlebar.\n    \n    // Note: If not title bar is specified, the default system titlebar will be rendered, regardles of the ExtendsContentIntoTitleBar property.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Irregular Snap Points in C# for ScrollPresenter\nDESCRIPTION: This snippet demonstrates how to add vertical snap points to a ScrollPresenter. It creates three ScrollSnapPoint objects with different values and alignments, then adds them to the VerticalSnapPoints collection.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nScrollSnapPoint snapPoint1 = new ScrollSnapPoint(\n    snapPointValue: 305, alignment: ScrollSnapPointsAlignment.Center);\n\nScrollSnapPoint snapPoint2 = new ScrollSnapPoint( \n    snapPointValue: 505, alignment: ScrollSnapPointsAlignment.Center);\n\nScrollSnapPoint snapPoint3 = new ScrollSnapPoint(\n    snapPointValue: 725, alignment: ScrollSnapPointsAlignment.Center);\n\nmyScrollPresenter.VerticalSnapPoints.Add(snapPoint1);\nmyScrollPresenter.VerticalSnapPoints.Add(snapPoint2);\nmyScrollPresenter.VerticalSnapPoints.Add(snapPoint3);\n```\n\n----------------------------------------\n\nTITLE: Setting Repeated Zoom Snap Points in C# for ScrollPresenter\nDESCRIPTION: This code creates a RepeatedZoomSnapPoint object and adds it to the ZoomSnapPoints collection of a ScrollPresenter. It sets up snap points at intervals of 0.1 from 0 to the maximum zoom factor.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nRepeatedZoomSnapPoint snapPoint = \n    new RepeatedZoomSnapPoint(\n        offset: 0,\n        interval: 0.1,\n        start: 0,\n        end: myScrollPresenter.MaxZoomFactor);\nmyScrollPresenter.ZoomSnapPoints.Add(snapPoint);\n```\n\n----------------------------------------\n\nTITLE: Adding Vertical Snap Points in C# for ScrollPresenter\nDESCRIPTION: This code shows how to add two vertical snap points to a ScrollPresenter. It creates two ScrollSnapPoint objects with specific values and alignments, then adds them to the VerticalSnapPoints collection.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nScrollSnapPoint snapPoint1 = new ScrollSnapPoint(snapPointValue: 500.0, alignment: ScrollSnapPointsAlignment.Near);\nScrollSnapPoint snapPoint2 = new ScrollSnapPoint(snapPointValue: 1500.0, alignment: ScrollSnapPointsAlignment.Near);\n\nmyScrollPresenter.VerticalSnapPoints.Add(snapPoint1);\nmyScrollPresenter.VerticalSnapPoints.Add(snapPoint2);\n```\n\n----------------------------------------\n\nTITLE: Centering Snap Points in a ScrollView Viewport for Flip-View Control\nDESCRIPTION: This example shows how to center snap points in the viewport of a ScrollView control, which is useful for creating flip-view style interfaces. The HorizontalSnapPointsAlignment property is set to Center to position snap points at the center of the viewport.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_67\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView HorizontalSnapPointsAlignment=\"Center\"\n    HorizontalSnapPointsType=\"Mandatory\"\n    ContentOrientation=\"Horizontal\"\n    Width=\"500\" Height=\"400\">\n    <StackPanel Orientation=\"Horizontal\">\n        <Button Width=\"300\" Content=\"Button1\"/>\n        <Button Width=\"300\" Content=\"Button2\"/>\n        <Button Width=\"300\" Content=\"Button3\"/>\n        <Button Width=\"300\" Content=\"Button4\"/>\n        <Button Width=\"300\" Content=\"Button5\"/>\n    </StackPanel>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: NavigationView with Incrementing InfoBadge\nDESCRIPTION: Implementation of a NavigationView with an InfoBadge that displays and increments unread message count\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<NavigationView>\n    <NavigationView.MenuItems>\n        <NavigationViewItem Content=\"Home\" Icon=\"Home\"/>\n        <NavigationViewItem Content=\"Account\" Icon=\"Contact\"/>\n        <NavigationViewItem x:Name=\"InboxPage\" Content=\"Inbox\" Icon=\"Mail\">\n            <NavigationViewItem.InfoBadge>\n                    <InfoBadge x:Name=\"bg1\" Value=\"{x:Bind numUnreadMail}\"/>\n            </NavigationViewItem.InfoBadge>\n        </NavigationViewItem>\n    </NavigationView.MenuItems> \n    <Frame x:Name=\"contentFrame\" />\n</NavigationView>\n```\n\n----------------------------------------\n\nTITLE: Basic TextBlock in ScrollView Example\nDESCRIPTION: Example showing how to wrap a TextBlock with text wrapping in a ScrollView to enable vertical scrolling when content exceeds the viewport.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Page xmlns=<http://schemas.microsoft.com/winfx/2006/xaml/presentation>\n      xmlns:mux=\"using:Microsoft.UI.Xaml.Controls\">\n    <mux:ScrollView>\n        <TextBlock Text=\"{x:Bind AllTheText}\" TextWrapping=\"Wrap\" />\n    </mux:ScrollView>\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Disabling Horizontal Scroll Chaining in XAML\nDESCRIPTION: This snippet demonstrates how to disable horizontal scroll chaining for a ScrollView or ScrollViewer containing an ItemsRepeater with horizontal layout. It prevents page changes when scrolling reaches the end of the horizontal list.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView HorizontalScrollChainMode=\"Never\">\n    <mux:ItemsRepeater ItemsSource=\"{x:Bind Items}\">\n        <mux:ItemsRepeater.Layout>\n            <mux:StackLayout Orientation=\"Horizontal\"/>\n        </mux:ItemsRepeater.Layout>\n        <DataTemplate x:DataType=\"x:String\">\n            <Button Content=\"{x:Bind}\"/>\n        </DataTemplate>\n    </mux:ItemsRepeater>\n</mux:ScrollView>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ScrollViewer IsHorizontalScrollChainingEnabled=\"False\">\n    <mux:ItemsRepeater ItemsSource=\"{x:Bind Items}\">\n        <mux:ItemsRepeater.Layout>\n            <mux:StackLayout Orientation=\"Horizontal\"/>\n        </mux:ItemsRepeater.Layout>\n        <DataTemplate x:DataType=\"x:String\">\n            <Button Content=\"{x:Bind}\"/>\n        </DataTemplate>\n    </mux:ItemsRepeater>\n</ScrollViewer>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewChangeResult for Scroll and Zoom Completion Events in C#\nDESCRIPTION: Code snippet showing the ViewChangeResult enum and its usage in ScrollingScrollCompletedEventArgs and ScrollingZoomCompletedEventArgs to provide scroll and zoom completion reasons. The enum provides Completed, Interrupted, and Ignored states to indicate the result of view change operations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_79\n\nLANGUAGE: csharp\nCODE:\n```\nenum Microsoft.UI.Xaml.Controls.ViewChangeResult\n{\n    Completed = 0, /*default result*/\n    Interrupted = 1, /*used when a request is interrupted by user input or new programmatic request*/\n    Ignored = 2,     /*used when request is made during user input*/\n};\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs\n{\n    ScrollingScrollCompletedEventArgs(Int32 correlationId);\n    Int32 CorrelationId { get; };\n    ViewChangeResult Result { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs\n{\n    ScrollingZoomCompletedEventArgs(Int32 correlationId);\n    Int32 CorrelationId { get; };\n    ViewChangeResult Result { get; };\n}\n\ninterface IScrollController\n{\n    void NotifyScrollCompleted(Int32 correlationId, ViewChangeResult result);\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Anchor Requests in ScrollView XAML\nDESCRIPTION: Details the AnchorRequested event of ScrollView, which is raised when the control is about to select an anchor element. Explains how to modify the anchor candidates collection or force the use of a specific anchor element.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_57\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.AnchorRequested event\n\nRaised when the `ScrollView` is about to select an anchor element. \n\nIt exposes a ScrollingAnchorRequestedEventArgs.AnchorCandidates collection which is initialized with \nthe elements that are registered as anchor candidates. That initial collection of candidates is \npopulated with the `ScrollPresenter` children with the UIElement.CanBeScrollAnchor property set to \nTrue, and with elements explicitly registered with the ScrollView.RegisterAnchorCandidate method.\nThe event handler can modify that collection to adjust the list of candidates for this anchor request. \nAfter it is executed, the `ScrollView` uses its HorizontalAnchorRatio and VerticalAnchorRatio properties \nto select an anchor among the final AnchorCandidates collection.\n\nAlternatively the AnchorRequested event handler can set the ScrollingAnchorRequestedEventArgs.Anchor \nproperty, initialized to null, to force the use of a particular element as the anchor. In that case \nthe AnchorCandidates collection is ignored and the `ScrollView`'s selection process is skipped entirely.\n```\n\n----------------------------------------\n\nTITLE: Hiding Scroll Bars in ScrollView\nDESCRIPTION: Sets both horizontal and vertical scroll bar visibility to Hidden in ScrollView, preventing scrolling via scroll bars while still allowing other scrolling methods. This example demonstrates how to configure the ScrollView when scroll bars are not desired.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView Width=\"500\" Height=\"400\"\n    ContentOrientation=\"Both\"\n    HorizontalScrollBarVisibility=\"Hidden\"\n    VerticalScrollBarVisibility=\"Hidden\">\n    <Image Source=\"Assets/LargeParisMap.png\"/>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bounce Mode in ScrollView and ScrollPresenter in C#\nDESCRIPTION: Code snippet showing the BounceMode enum and its implementation in ScrollView and ScrollPresenter to enable or disable inertia bouncing. The enum offers Enabled and Disabled options with Enabled being the default value.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_77\n\nLANGUAGE: csharp\nCODE:\n```\nenum Microsoft.UI.Xaml.Controls.BounceMode\n{\n    Enabled = 0,\n    Disabled = 1,\n};\n\nunsealed runtimeclass ScrollView : ...\n{\n    // Default Value: Enabled\n    Microsoft.UI.Xaml.Controls.BounceMode BounceMode { get; set; };\n}\n\nunsealed runtimeclass ScrollPresenter : ...\n{\n    // Default Value: Enabled\n    Microsoft.UI.Xaml.Controls.BounceMode BounceMode { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: InfoBadge API Definition in MIDL3\nDESCRIPTION: This MIDL3 code defines the API for the InfoBadge class, including its properties and dependency properties.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\n[MUX_PUBLIC]\n[webhosthidden]\nunsealed runtimeclass InfoBadge : Windows.UI.Xaml.Controls.Control\n{\n    InfoBadge();\n\n    Microsoft.UI.Xaml.Controls.IconSource Icon { get; set; }\n    int Value { get; set; }\n    Boolean IsOpen { get; set; }\n\n    static Windows.UI.Xaml.DependencyProperty IconProperty { get; };\n    static Windows.UI.Xaml.DependencyProperty ValueProperty { get; };\n    static Windows.UI.Xaml.DependencyProperty IsOpenProperty { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Velocity-Based Zoom Animation\nDESCRIPTION: Controls ScrollView zoom velocity using a joystick input with timer-based updates.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void MainPage()\n{\n    _requestScrollTimer.Interval = new TimeSpan(0, 0, 0, 1); // 1 second interval\n}\n\nprivate void VerticalJoystick_PositionChanged(VerticalJoystick verticalJoystick, object args)\n{\n    if (verticalJoystick.Value != 0.0)\n    {\n        if (!_requestZoomTimer.IsEnabled)\n        {\n            // Adjust `ScrollView`'s velocity at most once a second as long as joystick isn't centered.\n            AdjustScrollViewZoomFactor();\n            _requestZoomTimer.Start();\n        }\n    }\n    else if (_requestZoomTimer.IsEnabled)\n    {\n        _requestZoomTimer.Stop();\n    }\n}\n\nprivate void RequestZoomTimer_Tick(object sender, object e)\n{\n    AdjustScrollViewZoomFactor();\n}\n\nprivate void AdjustScrollViewZoomFactor()\n{\n    _scrollView.AddZoomVelocity(\n    zoomFactorVelocity: 12 * _verticalJoystick.Value,\n    inertiaDecayRate: 0.975);\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Anchor Candidates Collection in ScrollView\nDESCRIPTION: Code showing how to populate the AnchorCandidates collection in a ScrollView_AnchorRequested event handler. This adds all children from a StackPanel to be considered as potential scroll anchors.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ScrollView_AnchorRequested(ScrollView scrollView, ScrollingAnchorRequestedEventArgs e)\n{\n    foreach (UIElement child in _stackPanel.Children)\n    {\n        e.AnchorCandidates.Add(child);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Railing in XAML\nDESCRIPTION: This snippet demonstrates how to disable scroll railing for both horizontal and vertical directions in a ScrollView or ScrollViewer. It allows the user to pan freely in all directions simultaneously.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView HorizontalScrollRailMode=\"Disabled\" VerticalScrollRailMode=\"Disabled\"\n    ContentOrientation=\"Both\">\n    <SwapChainPanel x:Name=\"swapChainPanelMap\" Width=\"40000\" Height=\"40000\">\n        ...\n    </SwapChainPanel>\n</mux:ScrollView>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ScrollViewer IsHorizontalRailEnabled=\"False\" IsVerticalRailEnabled=\"False\"\n    HorizontalScrollBarVisibility=\"Auto\">\n    <SwapChainPanel x:Name=\"swapChainPanelMap\" Width=\"40000\" Height=\"40000\">\n        ...\n    </SwapChainPanel>\n</ScrollViewer>\n```\n\n----------------------------------------\n\nTITLE: PopupPlacementMode Enum Definition in C#\nDESCRIPTION: Defines the PopupPlacementMode enumeration with values for different positioning options relative to a target element, aligning with the existing FlyoutPlacementMode enum (except for Full).\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/Popup-AdditionalLayoutProperties-Spec.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nenum PopupPlacementMode\n{\n    Auto,\n    Top,\n    Bottom,\n    Left,\n    Right,\n    TopEdgeAlignedLeft,\n    TopEdgeAlignedRight,\n    BottomEdgeAlignedLeft,\n    BottomEdgeAlignedRight,\n    LeftEdgeAlignedTop,\n    LeftEdgeAlignedBottom,\n    RightEdgeAlignedTop,\n    RightEdgeAlignedBottom\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Opacity Animation Based on Vertical Scroll Position in ScrollView\nDESCRIPTION: Example showing how to create an expression animation that changes an element's opacity based on the vertical scroll position using the ScrollView's ExpressionAnimationSources property.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nExpressionAnimation _headerOpacityExpression = null;\nprivate void SetupHeaderOpacityAnimation()\n{\n    _headerOpacityExpression = _compositor.CreateExpressionAnimation(\n        \"1 - (svAP.Position.Y - svAP.MinPosition.Y) / (svAP.MaxPosition.Y - svAP.MinPosition.Y)\");\n\n    _headerOpacityExpression.SetReferenceParameter(\"svAP\", _scrollView.ExpressionAnimationSources);\n    _headerVisual.StartAnimation(\"Opacity\", _headerOpacityExpression);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal-Only Scrolling in ScrollView\nDESCRIPTION: Configures a ScrollView to allow only horizontal scrolling by setting HorizontalScrollMode to Enabled and VerticalScrollMode to Disabled. Even when content is taller than the viewport, users cannot scroll vertically.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView x:Name=\"ScrollView\"\n    HorizontalScrollMode=\"Enabled\" VerticalScrollMode=\"Disabled\"\n    ContentOrientation=\"Both\">\n    <Grid ...>\n        ...\n    </Grid>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarView ResourceDictionary in XAML\nDESCRIPTION: This snippet defines a ResourceDictionary for a CalendarView, including theme dictionaries for Default, HighContrast, and Light themes. It sets various brushes, colors, and styles for different elements and states of the calendar.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_21\n\nLANGUAGE: XML\nCODE:\n```\n<ResourceDictionary \n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n    <ResourceDictionary.ThemeDictionaries>\n        <ResourceDictionary x:Key=\"Default\">\n            <StaticResource x:Key=\"CalendarViewFocusVisualPrimaryBrush\" ResourceKey=\"FocusStrokeColorOuterBrush\" />\n            <StaticResource x:Key=\"CalendarViewFocusVisualSecondaryBrush\" ResourceKey=\"FocusStrokeColorInnerBrush\" />\n            <StaticResource x:Key=\"CalendarViewFocusBorderBrush\" ResourceKey=\"AccentFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewBlackoutStrikethroughBrush\" ResourceKey=\"ControlStrongStrokeColorDefaultBrush\" />\n            <StaticResource x:Key=\"CalendarViewSelectedHoverBorderBrush\" ResourceKey=\"AccentFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewSelectedPressedBorderBrush\" ResourceKey=\"SubtleFillColorTertiaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewSelectedDisabledBorderBrush\" ResourceKey=\"AccentFillColorDisabledBrush\" />\n            <StaticResource x:Key=\"CalendarViewSelectedBorderBrush\" ResourceKey=\"AccentFillColorDefaultBrush\" />\n            <StaticResource x:Key=\"CalendarViewHoverBorderBrush\" ResourceKey=\"SubtleFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewPressedBorderBrush\" ResourceKey=\"SubtleFillColorTertiaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewTodaySelectedInnerBorderBrush\" ResourceKey=\"TextOnAccentFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewTodayForeground\" ResourceKey=\"TextOnAccentFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewDisabledForeground\" ResourceKey=\"TextFillColorDisabledBrush\" />\n            <StaticResource x:Key=\"CalendarViewBlackoutForeground\" ResourceKey=\"TextFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewSelectedForeground\" ResourceKey=\"AccentTextFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewSelectedHoverForeground\" ResourceKey=\"AccentTextFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewSelectedPressedForeground\" ResourceKey=\"AccentTextFillColorTertiaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewSelectedDisabledForeground\" ResourceKey=\"AccentTextFillColorDisabledBrush\" />\n            <StaticResource x:Key=\"CalendarViewPressedForeground\" ResourceKey=\"TextFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewOutOfScopeForeground\" ResourceKey=\"TextFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewOutOfScopeHoverForeground\" ResourceKey=\"TextFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewOutOfScopePressedForeground\" ResourceKey=\"TextFillColorTertiaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewCalendarItemBackground\" ResourceKey=\"SubtleFillColorTransparentBrush\" />\n            <StaticResource x:Key=\"CalendarViewCalendarItemHoverBackground\" ResourceKey=\"SubtleFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewCalendarItemPressedBackground\" ResourceKey=\"SubtleFillColorTertiaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewCalendarItemDisabledBackground\" ResourceKey=\"SubtleFillColorTransparentBrush\" />\n            <StaticResource x:Key=\"CalendarViewCalendarItemBorderBrush\" ResourceKey=\"SubtleFillColorTransparentBrush\" />\n            <StaticResource x:Key=\"CalendarViewCalendarItemForeground\" ResourceKey=\"TextFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewTodayBackground\" ResourceKey=\"AccentFillColorDefaultBrush\" />\n            <StaticResource x:Key=\"CalendarViewTodayBlackoutBackground\" ResourceKey=\"AccentFillColorTertiaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewTodayBlackoutForeground\" ResourceKey=\"TextOnAccentFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewTodayHoverBackground\" ResourceKey=\"AccentFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewTodayPressedBackground\" ResourceKey=\"AccentFillColorTertiaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewTodayDisabledBackground\" ResourceKey=\"AccentFillColorDisabledBrush\" />\n            <StaticResource x:Key=\"CalendarViewBlackoutBackground\" ResourceKey=\"SubtleFillColorTransparentBrush\" />\n            <StaticResource x:Key=\"CalendarViewOutOfScopeBackground\" ResourceKey=\"SubtleFillColorTransparentBrush\" />\n            <StaticResource x:Key=\"CalendarViewForeground\" ResourceKey=\"TextFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewBackground\" ResourceKey=\"ControlFillColorInputActiveBrush\" />\n            <StaticResource x:Key=\"CalendarViewBorderBrush\" ResourceKey=\"ControlStrokeColorDefaultBrush\" />\n            <StaticResource x:Key=\"CalendarViewWeekDayForegroundDisabled\" ResourceKey=\"TextFillColorDisabledBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonBackground\" ResourceKey=\"SubtleFillColorTransparentBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonBackgroundPointerOver\" ResourceKey=\"SubtleFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonBackgroundPressed\" ResourceKey=\"SubtleFillColorTertiaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonForeground\" ResourceKey=\"ControlStrongFillColorDefaultBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonForegroundPointerOver\" ResourceKey=\"ControlStrongFillColorDefaultBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonForegroundPressed\" ResourceKey=\"ControlStrongFillColorDefaultBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonForegroundDisabled\" ResourceKey=\"ControlStrongFillColorDisabledBrush\" />\n            <StaticResource x:Key=\"CalendarViewHeaderNavigationButtonForegroundPointerOver\" ResourceKey=\"TextFillColorPrimaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewHeaderNavigationButtonForegroundPressed\" ResourceKey=\"TextFillColorSecondaryBrush\" />\n            <StaticResource x:Key=\"CalendarViewHeaderNavigationButtonForegroundDisabled\" ResourceKey=\"TextFillColorDisabledBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonBorderBrushPointerOver\" ResourceKey=\"SubtleFillColorTransparentBrush\" />\n            <StaticResource x:Key=\"CalendarViewNavigationButtonBorderBrush\" ResourceKey=\"SubtleFillColorTransparentBrush\" />\n        </ResourceDictionary>\n        <ResourceDictionary x:Key=\"HighContrast\">\n            ...\n        </ResourceDictionary>\n        <ResourceDictionary x:Key=\"Light\">\n            ...\n        </ResourceDictionary>\n    </ResourceDictionary.ThemeDictionaries>\n\n    <x:Boolean x:Key=\"CalendarViewBaseItemRoundedChromeEnabled\">True</x:Boolean>\n    <Thickness x:Key=\"CalendarViewDayItemMargin\">0,6,0,0</Thickness>\n    <Thickness x:Key=\"CalendarViewMonthYearItemMargin\">0,6,0,0</Thickness>\n    <Thickness x:Key=\"CalendarViewFirstOfMonthLabelMargin\">0,1,0,0</Thickness>\n    <Thickness x:Key=\"CalendarViewFirstOfYearDecadeLabelMargin\">0,2,0,0</Thickness>\n\n    <Style x:Key=\"CalendarViewDefaultStyle\" TargetType=\"CalendarView\">\n        <Setter Property=\"BlackoutStrikethroughBrush\" Value=\"{ThemeResource CalendarViewBlackoutStrikethroughBrush}\" /> *\n        <Setter Property=\"SelectedHoverBorderBrush\" Value=\"{ThemeResource CalendarViewSelectedHoverBorderBrush}\" />\n        <Setter Property=\"SelectedPressedBorderBrush\" Value=\"{ThemeResource CalendarViewSelectedPressedBorderBrush}\" />\n        <Setter Property=\"SelectedDisabledBorderBrush\" Value=\"{ThemeResource CalendarViewSelectedDisabledBorderBrush}\" /> *\n        <Setter Property=\"SelectedBorderBrush\" Value=\"{ThemeResource CalendarViewSelectedBorderBrush}\" />\n        <Setter Property=\"HoverBorderBrush\" Value=\"{ThemeResource CalendarViewHoverBorderBrush}\" />\n        <Setter Property=\"PressedBorderBrush\" Value=\"{ThemeResource CalendarViewPressedBorderBrush}\" />\n        <Setter Property=\"CalendarItemBorderBrush\" Value=\"{ThemeResource  CalendarViewCalendarItemBorderBrush}\" />\n        <Setter Property=\"TodaySelectedInnerBorderBrush\" Value=\"{ThemeResource  CalendarViewTodaySelectedInnerBorderBrush}\" /> *\n        <Setter Property=\"TodayForeground\" Value=\"{ThemeResource CalendarViewTodayForeground}\" />\n        <Setter Property=\"DisabledForeground\" Value=\"{ThemeResource CalendarViewDisabledForeground}\" /> *\n        <Setter Property=\"BlackoutForeground\" Value=\"{ThemeResource CalendarViewBlackoutForeground}\" />\n        <Setter Property=\"SelectedForeground\" Value=\"{ThemeResource CalendarViewSelectedForeground}\" />\n        <Setter Property=\"SelectedHoverForeground\" Value=\"{ThemeResource CalendarViewSelectedHoverForeground}\" /> *\n        <Setter Property=\"SelectedPressedForeground\" Value=\"{ThemeResource CalendarViewSelectedPressedForeground}\" /> *\n        <Setter Property=\"SelectedDisabledForeground\" Value=\"{ThemeResource CalendarViewSelectedDisabledForeground}\" /> *\n        <Setter Property=\"PressedForeground\" Value=\"{ThemeResource CalendarViewPressedForeground}\" />\n        <Setter Property=\"OutOfScopeForeground\" Value=\"{ThemeResource CalendarViewOutOfScopeForeground}\" />\n        <Setter Property=\"OutOfScopeHoverForeground\" Value=\"{ThemeResource CalendarViewOutOfScopeHoverForeground}\" /> *\n        <Setter Property=\"OutOfScopePressedForeground\" Value=\"{ThemeResource CalendarViewOutOfScopePressedForeground}\" /> *\n        <Setter Property=\"CalendarItemForeground\" Value=\"{ThemeResource CalendarViewCalendarItemForeground}\" />\n        <Setter Property=\"TodayBackground\" Value=\"{ThemeResource CalendarViewTodayBackground}\" /> *\n        <Setter Property=\"TodayBlackoutBackground\" Value=\"{ThemeResource CalendarViewTodayBlackoutBackground}\" /> *\n        <Setter Property=\"TodayBlackoutForeground\" Value=\"{ThemeResource CalendarViewTodayBlackoutForeground}\" /> *\n    </Style>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Algorithm for OnStateGroup1PropertyChanged with Multiple State Groups\nDESCRIPTION: A detailed algorithm that specifies the order of checks to perform when StateGroup1 property changes. The algorithm searches for transition markers in various permutations of state groups and determines whether to use transitions, reverse animations, or hard cuts to specific positions.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/AnimatedIcon/Docs/MultiStateSegmentLookupProposal.md#2025-04-16_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nOnStateGroup1PropertyChanged\n1. Check for `[PrevStateGroup1][StateGroup2][StateGroup3]To[NewStateGroup1][StateGroup2][StateGroup3]Start` and `[PrevStateGroup1][StateGroup2][StateGroup3]To[NewStateGroup1][StateGroup2][StateGroup3]End`. If either is found return<sup>1</sup>.\n2. Check for `[PrevStateGroup1][StateGroup3][StateGroup2]To[NewStateGroup1][StateGroup3][StateGroup2]Start` and `[PrevStateGroup1][StateGroup3][StateGroup2]To[NewStateGroup1][StateGroup3][StateGroup2]End`. If either is found return<sup>1</sup>.\n3. Check for `[StateGroup2][PrevStateGroup1][StateGroup3]To[StateGroup2][NewStateGroup1][StateGroup3]Start` and `[StateGroup2][PrevStateGroup1][StateGroup3]To[StateGroup2][NewStateGroup1][StateGroup3]End`. If either is found return<sup>1</sup>.\n4. Check for `[StateGroup2][StateGroup3][PrevStateGroup1]To[StateGroup2][StateGroup3][NewStateGroup1]Start` and `[StateGroup2][StateGroup3][PrevStateGroup1]To[StateGroup2][StateGroup3][NewStateGroup1]End`. If either is found return<sup>1</sup>.\n5. Check for `[StateGroup3][PrevStateGroup1][StateGroup2]To[StateGroup3][NewStateGroup1][StateGroup2]Start` and `[StateGroup3][PrevStateGroup1][StateGroup2]To[StateGroup3][NewStateGroup1][StateGroup2]End`. If either is found return<sup>1</sup>.\n6. Check for `[StateGroup3][StateGroup2][PrevStateGroup1]To[StateGroup3][StateGroup2][NewStateGroup1]Start` and `[StateGroup3][StateGroup2][PrevStateGroup1]To[StateGroup3][StateGroup2][NewStateGroup1]End`. If either is found return<sup>1</sup>.\n7. Check for `[NewStateGroup1][StateGroup2][StateGroup3]To[PrevStateGroup1][StateGroup2][StateGroup3]Start` and `[NewStateGroup1][StateGroup2][StateGroup3]To[PrevStateGroup1][StateGroup2][StateGroup3]End`. If *both* are found return the segment in reverse.\n8. Check for `[NewStateGroup1][StateGroup3][StateGroup2]To[PrevStateGroup1][StateGroup3][StateGroup2]Start` and `[NewStateGroup1][StateGroup3][StateGroup2]To[PrevStateGroup1][StateGroup3][StateGroup2]End`. If *both* are found return the segment in reverse.\n9. Check for `[StateGroup2][NewStateGroup1][StateGroup3]To[StateGroup2][PrevStateGroup1][StateGroup3]Start` and `[StateGroup2][NewStateGroup1][StateGroup3]To[StateGroup2][PrevStateGroup1][StateGroup3]End`. If *both* are found return the segment in reverse.\n10. Check for `[StateGroup2][StateGroup3][NewStateGroup1]To[StateGroup2][StateGroup3][PrevStateGroup1]Start` and `[StateGroup2][StateGroup3][NewStateGroup1]To[StateGroup2][StateGroup3][PrevStateGroup1]End`. If *both* are found return the segment in reverse.\n11. Check for `[StateGroup3][NewStateGroup1][StateGroup2]To[StateGroup3][PrevStateGroup1][StateGroup2]Start` and `[StateGroup3][NewStateGroup1][StateGroup2]To[StateGroup3][PrevStateGroup1][StateGroup2]End`. If *both* are found return the segment in reverse.\n12. Check for `[StateGroup3][StateGroup2][NewStateGroup1]To[StateGroup3][StateGroup2][PrevStateGroup1]Start` and `[StateGroup3][StateGroup2][NewStateGroup1]To[StateGroup3][StateGroup2][PrevStateGroup1]End`. If *both* are found return the segment in reverse.\n13. Check for `[PrevStateGroup1][StateGroup2]To[NewStateGroup1][StateGroup2]Start` and `[PrevStateGroup1][StateGroup2]To[NewStateGroup1][StateGroup2]End`. If either is found return<sup>1</sup>.\n14. Check for `[StateGroup2][PrevStateGroup1]To[StateGroup2][NewStateGroup1]Start` and `[StateGroup2][PrevStateGroup1]To[StateGroup2][NewStateGroup1]End`. If either is found return<sup>1</sup>.\n15. Check for `[PrevStateGroup1][StateGroup3]To[NewStateGroup1][StateGroup3]Start` and `[PrevStateGroup1][StateGroup3]To[NewStateGroup1][StateGroup3]End`. If either is found return<sup>1</sup>.\n16. Check for `[StateGroup3][PrevStateGroup1]To[StateGroup3][NewStateGroup1]Start` and `[StateGroup3][PrevStateGroup1]To[StateGroup3][NewStateGroup1]End`. If either is found return<sup>1</sup>.\n17. Check for `[NewStateGroup1][StateGroup2]To[PrevStateGroup1][StateGroup2]Start` and `[NewStateGroup1][StateGroup2]To[PrevStateGroup1][StateGroup2]End`. If *both* are found return the segment in reverse.\n18. Check for `[StateGroup2][NewStateGroup1]To[StateGroup2][PrevStateGroup1]Start` and `[StateGroup2][NewStateGroup1]To[StateGroup2][PrevStateGroup1]End`. If *both* are found return the segment in reverse.\n19. Check for `[NewStateGroup1][StateGroup3]To[PrevStateGroup1][StateGroup3]Start` and `[NewStateGroup1][StateGroup3]To[PrevStateGroup1][StateGroup3]End`. If *both* are found return the segment in reverse.\n20. Check for `[StateGroup3][NewStateGroup1]To[StateGroup3][PrevStateGroup1]Start` and `[StateGroup3][NewStateGroup1]To[StateGroup3][PrevStateGroup1]End`. If *both* are found return the segment in reverse.\n21. Check for `[PrevStateGroup1]To[NewStateGroup1]Start` and `[PrevStateGroup1]To[NewStateGroup1]End`. If either is found return<sup>1</sup>.\n22. Check for `[NewStateGroup1]To[PrevStateGroup1]Start` and `[NewStateGroup1]To[PrevStateGroup1]End`. If *both* are found return the segment in reverse.\n23. Check for `[NewStateGroup1][StateGroup2][StateGroup3]`. If it is found return a hard cut to that position.\n24. Check for `[NewStateGroup1][StateGroup3][StateGroup2]`. If it is found return a hard cut to that position.\n25. Check for `[StateGroup2][NewStateGroup1][StateGroup3]`. If it is found return a hard cut to that position.\n26. Check for `[StateGroup2][StateGroup3][NewStateGroup1]`. If it is found return a hard cut to that position.\n27. Check for `[StateGroup3][NewStateGroup1][StateGroup2]`. If it is found return a hard cut to that position.\n28. Check for `[StateGroup3][StateGroup2][NewStateGroup1]`. If it is found return a hard cut to that position.\n29. Check for `[NewStateGroup1][StateGroup2]`. If it is found return a hard cut to that position.\n30. Check for `[StateGroup2][NewStateGroup1]`. If it is found return a hard cut to that position.\n31. Check for `[NewStateGroup1][StateGroup3]`. If it is found return a hard cut to that position.\n32. Check for `[StateGroup3][NewStateGroup1]`. If it is found return a hard cut to that position.\n33. Check for `[NewStateGroup1]`. If it is found return a hard cut to that position.\n34. Return a hard cut to position 0.0.\n```\n\n----------------------------------------\n\nTITLE: Setting Dimension Values in IScrollController\nDESCRIPTION: This method provides dimension information to the scroll controller including minimum and maximum offsets, current offset, and viewport size. The controller can use these values to adjust UI elements like scrollbar thumbs.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\nvoid SetValues(Double minOffset, Double maxOffset, Double offset, Double viewport)\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Repeated Snap Points in ScrollPresenter\nDESCRIPTION: C# code that demonstrates how to create horizontal repeated snap points for a ScrollPresenter. The example creates snap points at specific intervals with a Near alignment, defining the attraction zones where scrolling will snap to specific positions.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nRepeatedScrollSnapPoint snapPoint = \n    new RepeatedScrollSnapPoint(\n        offset: 50,\n        interval: 60,\n        start: 10,\n        end: 270,\n        alignment: ScrollSnapPointsAlignment.Near);\nmyScrollPresenter.HorizontalSnapPoints.Add(snapPoint);\n```\n\n----------------------------------------\n\nTITLE: Decreasing Zoom Factor in C#\nDESCRIPTION: This C# method decreases the content's zoom factor by a specified percentage. It demonstrates the difference in implementation between ScrollView and ScrollViewer.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void DecreaseZoomFactor(float percent)\n{\n    _scrollView.ZoomBy(\n        zoomFactorDelta: -_scrollView.ZoomFactor * percent,\n        centerPoint: null);\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void DecreaseZoomFactor(float percent)\n{\n    double newHorizontalOffset = (_scrollViewer.HorizontalOffset + _scrollViewer.ViewportWidth / 2.0) * (1.0 - percent) - _scrollViewer.ViewportWidth / 2.0;\n    double newVerticalOffset = (_scrollViewer.VerticalOffset + _scrollViewer.ViewportHeight / 2.0) * (1.0 - percent) - _scrollViewer.ViewportHeight / 2.0;\n    _scrollViewer.ChangeView(\n        newHorizontalOffset, newVerticalOffset, (1.0 - percent) * _scrollViewer.ZoomFactor);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IScrollController.AddScrollVelocityRequested Event in C#\nDESCRIPTION: Declaration of the AddScrollVelocityRequested event in the IScrollController interface. This event allows the scroll controller to request scrolling by adding velocity to the ScrollPresenter content.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nevent Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerAddScrollVelocityRequestedEventArgs> AddScrollVelocityRequested\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Repeated Snap Points for StackPanel Children\nDESCRIPTION: C# code example showing how to create vertical repeated snap points for a ScrollPresenter containing a StackPanel with identically sized children. The snap points are configured to align the top edge of each child with the top edge of the viewport.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nRepeatedScrollSnapPoint snapPoint = \n    new RepeatedScrollSnapPoint(\n        offset: 0,\n        interval: 200,\n        start: 0,\n        end: myScrollPresenter.Content.ActualSize.Y,\n        alignment: ScrollSnapPointsAlignment.Near);\nmyScrollPresenter.VerticalSnapPoints.Add(snapPoint);\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Controller Properties and Event Handlers in C#\nDESCRIPTION: Implementation of properties and events for a scroll controller interface with methods for handling scrolling operations and user interactions.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\n    public Orientation InteractionElementScrollOrientation\n    {\n        get\n        {\n            return Orientation;\n        }\n    }\n\n    private float InteractionElementScrollMultiplier\n    {\n        get\n        {\n            if (interactionFrameworkElement != null)\n            {\n                interactionFrameworkElement.UpdateLayout();\n\n                double parentDimension = 0.0;\n                double interactionFrameworkElementDim = Orientation == Orientation.Horizontal ? interactionFrameworkElement.ActualWidth : interactionFrameworkElement.ActualHeight;\n                FrameworkElement parent = interactionFrameworkElement.Parent as FrameworkElement;\n                if (parent != null)\n                {\n                    parentDimension = Orientation == Orientation.Horizontal ? parent.ActualWidth : parent.ActualHeight;\n                }\n                if (parentDimension != interactionFrameworkElementDim)\n                {\n                    return (float)((maxOffset - minOffset) / (interactionFrameworkElementDim - parentDimension));\n                }\n            }\n\n            return 0.0f;\n        }\n    }\n\n    public event TypedEventHandler<IScrollController, ScrollControllerInteractionRequestedEventArgs> InteractionRequested;\n    public event TypedEventHandler<IScrollController, ScrollControllerScrollToRequestedEventArgs> ScrollToRequested;\n    public event TypedEventHandler<IScrollController, ScrollControllerScrollByRequestedEventArgs> ScrollByRequested;\n    public event TypedEventHandler<IScrollController, ScrollControllerAddScrollVelocityRequestedEventArgs> AddScrollVelocityRequested;\n    public event TypedEventHandler<IScrollController, Object> InteractionInfoChanged;\n```\n\n----------------------------------------\n\nTITLE: NavigationView API Definition with InfoBadge in C#\nDESCRIPTION: This C# code defines the API for the NavigationView class, including the OverflowButtonInfoBadge property and OverflowItems collection.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\n[MUX_PUBLIC]\n[webhosthidden]\n[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME(\"OnPropertyChanged\")]\nunsealed runtimeclass NavigationView : Windows.UI.Xaml.Controls.ContentControl\n{\n    NavigationView();\n\n    // Existing members have been excluded\n\n    Microsoft.UI.Xaml.Controls.InfoBadge OverflowButtonInfoBadge { get; set; }\n    System.Collections.ObjectModel.ObservableCollection<System.Object> OverflowItems { get; }\n    \n    static Windows.UI.Xaml.DependencyProperty OverflowButtonInfoBadgeProperty { get; }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IScrollController.InteractionRequested Event in C#\nDESCRIPTION: Declaration of the InteractionRequested event in the IScrollController interface. This event is raised when the user attempts to initiate a UI-thread-independent pan with touch or pen using the InteractionElement.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nevent Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerInteractionRequestedEventArgs> InteractionRequested\n```\n\n----------------------------------------\n\nTITLE: Setting Irregular Zoom Snap Points in C# for ScrollPresenter\nDESCRIPTION: This snippet demonstrates how to add multiple irregular zoom snap points to a ScrollPresenter. It uses a loop to create and add ZoomSnapPoint objects with values doubling from 0.15 to 9.6.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nfor (double snapPointValue = 0.15; snapPointValue < 10.0; snapPointValue *= 2.0)\n{\n    myScrollPresenter.ZoomSnapPoints.Add(new ZoomSnapPoint(snapPointValue));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Thumb Expression for Scrolling Animation in C#\nDESCRIPTION: Updates the expression used for the thumb offset animation, which determines the visual position of the scrollbar thumb based on the current offset, min, and max values.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UpdateThumbExpression()\n{\n    if (thumbOffsetAnimation != null)\n    {\n        thumbOffsetAnimation.Expression =\n            \"min(sources.\" + maxOffsetPropertyName + \",max(sources.\" + minOffsetPropertyName + \",sources.\" + offsetPropertyName + \"))/(-sources.\" + multiplierPropertyName + \")\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IScrollController.InteractionInfoChanged Event in C#\nDESCRIPTION: Declaration of the InteractionInfoChanged event in the IScrollController interface. This event is raised after any property changes related to interaction state, including AreInteractionsAllowed, IsInteracting, and others.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nevent Windows.Foundation.TypedEventHandler<IScrollController, Object> InteractionInfoChanged\n```\n\n----------------------------------------\n\nTITLE: Registering Application.ResourceManagerRequested Event Handler in C#\nDESCRIPTION: Demonstrates how to register an event handler for the ResourceManagerRequested event in the App constructor to provide a custom IResourceManager implementation during application startup.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/custom-iresourcemanager-spec.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic event TypedEventHandler<Application, ResourceManagerRequestedEventArgs> ResourceManagerRequested\n```\n\n----------------------------------------\n\nTITLE: Custom Animation Curve for ScrollView Offset Change (C#)\nDESCRIPTION: This snippet shows how to apply a custom animation curve when changing the ScrollView's vertical offset. It uses a Slider to trigger the offset change and customizes the animation duration in the ScrollAnimationStarting event handler.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nprivate HashSet<int> _scrollsWithCustomDuration = new HashSet<int>();\n\nprivate void VerticalOffsetSlider_ValueChanged(object sender, RangeBaseValueChangedEventArgs e)\n{\n    double verticalOffsetDelta = GetOffsetDelta(e.NewValue);\n    int correlationId = _scrollView.ScrollBy(0.0, verticalOffsetDelta);\n    _scrollsWithCustomDuration.Add(correlationId);\n}\n\nprivate void ScrollView_ScrollAnimationStarting(ScrollView scrollView, ScrollingScrollAnimationStartingEventArgs e)\n{\n    if (_scrollsWithCustomDuration.Contains(e.CorrelationId))\n    {\n        TimeSpan animationDuration = GetAnimationCustomDuration(e.StartPosition, e.EndPosition);\n        (e.Animation as Vector3KeyFrameAnimation).Duration = animationDuration;\n        _scrollsWithCustomDuration.Remove(e.CorrelationId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationView with Auto-hiding InfoBadge\nDESCRIPTION: Implementation of a NavigationView where InfoBadge automatically hides upon navigation\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<NavigationView x:Name=\"nvSample\">\n    <NavigationView.MenuItems>\n        <NavigationViewItem Content=\"Home\" Icon=\"Home\" Tag=\"Home\" >\n            <NavigationViewItem.InfoBadge>\n                    <InfoBadge />\n            </NavigationViewItem.InfoBadge>\n            </NavigationViewItem>\n        <NavigationViewItem  Content=\"Account\" Icon=\"Contact\" Tag=\"Contact\" />\n        <NavigationViewItem Content=\"Inbox\" Icon=\"Mail\" Tag=\"Mail\" />\n    <NavigationView.MenuItems>\n    <Frame x:Name=\"contentFrame\" />\n</NavigationView>\n```\n\n----------------------------------------\n\nTITLE: Defining MonochromaticOverlayPresenter API in C#\nDESCRIPTION: This code snippet provides the detailed API definition for the MonochromaticOverlayPresenter class, including its properties and dependency properties.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/DateTimePicker-Visual-Updates-Spec.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Microsoft.UI.Xaml.Controls.Primitives\n{\n\n[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME(\"OnPropertyChanged\")]\nunsealed runtimeclass MonochromaticOverlayPresenter : Windows.UI.Xaml.Controls.FrameworkElement\n{\n    MonochromaticOverlayPresenter();\n\n    Windows.UI.Xaml.UIElement SourceElement { get; set; };\n    Windows.UI.Color ReplacementColor { get; set; };\n\n    static Windows.UI.Xaml.DependencyProperty SourceElementProperty{ get; };\n    static Windows.UI.Xaml.DependencyProperty ReplacementColorProperty{ get; };\n}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Zoom Chaining in XAML\nDESCRIPTION: This example shows how to disable zoom chaining for a ScrollView or ScrollViewer. It prevents zooming out of the outer control when the inner control reaches its maximum zoom level.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView ZoomMode=\"Enabled\" ZoomChainMode=\"Never\">\n    <mux:ItemsRepeater ItemsSource=\"{x:Bind Items}\">\n        <mux:ItemsRepeater.Layout>\n            <mux:StackLayout/>\n        </mux:ItemsRepeater.Layout>\n        <DataTemplate x:DataType=\"x:String\">\n            <Button Content=\"{x:Bind}\"/>\n        </DataTemplate>\n    </mux:ItemsRepeater>\n</mux:ScrollView>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ScrollViewer ZoomMode=\"Enabled\" IsZoomChainingEnabled=\"False\">\n    <mux:ItemsRepeater ItemsSource=\"{x:Bind Items}\">\n        <mux:ItemsRepeater.Layout>\n            <mux:StackLayout/>\n        </mux:ItemsRepeater.Layout>\n        <DataTemplate x:DataType=\"x:String\">\n            <Button Content=\"{x:Bind}\"/>\n        </DataTemplate>\n    </mux:ItemsRepeater>\n</ScrollViewer>\n```\n\n----------------------------------------\n\nTITLE: ScrollView Content Property Usage in XAML\nDESCRIPTION: Demonstrates how to use the ScrollView.Content property in XAML, showing that it is the content property for ScrollView and can be specified implicitly.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_47\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView>\n    <TextBlock Text='{x:Bind AllTheText}'/>\n</mux:ScrollView>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView>\n    <mux:ScrollView.Content>\n        <TextBlock Text='{x:Bind AllTheText}'/>\n    </mux:ScrollView.Content>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Velocity to ScrollView in XAML\nDESCRIPTION: Explains the AddScrollVelocity method of ScrollView, which asynchronously adds scrolling velocity. Details the default inertia decay rate and how to customize it for individual scroll operations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_54\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.AddScrollVelocity method\n\nAsynchronously adds scrolling velocity. The State property transitions to the ScrollingInteractionState.Inertia \nvalue during the resulting inertial scroll. Because it does not consume any CompositionAnimation, the \nScrollAnimationStarting event is not raised.\n\nBy default the `ScrollView` control uses an inertia decay rate of (0.95, 0.95) for inertial scrolling operations. \nThat default decay rate can be overwritten by providing a non-null inertiaDecayRate parameter to the \nAddScrollVelocity method.\nThat custom decay rate is then applied during the duration of that scroll operation alone. If the inertial scroll \nis interrupted with a touch gesture or with a new AddScrollVelocity call, the application of that custom decay \nrate is cancelled. \n\nInertia decay rates affect the inertial velocity decrease (decay). Values must be between 0.0 and 1.0. \nThe closer the value is to 1.0, the faster the deceleration. A value of 0.0 represents no decay and results \nin a constant velocity scroll.\n```\n\n----------------------------------------\n\nTITLE: Updating Framework Element Size Based on Orientation in C#\nDESCRIPTION: Calculates and updates the size of the interaction framework element based on orientation, viewport, and offset values. Returns true if the size was changed, triggering a scroll multiplier update.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nprivate bool UpdateInteractionFrameworkElementSize()\n{\n    if (interactionFrameworkElement != null)\n    {\n        double parentWidth = 0.0;\n        double parentHeight = 0.0;\n        FrameworkElement parent = interactionFrameworkElement.Parent as FrameworkElement;\n\n        if (parent != null)\n        {\n            parentWidth = parent.ActualWidth;\n            parentHeight = parent.ActualHeight;\n        }\n\n        if (orientation == Orientation.Horizontal)\n        {\n            double newWidth;\n            if (viewport == 0.0)\n            {\n                newWidth = 40.0;\n            }\n            else\n            {\n                newWidth = Math.Max(Math.Min(40.0, parentWidth), viewport / (maxOffset - minOffset + viewport) * parentWidth);\n            }\n            if (newWidth != interactionFrameworkElement.Width)\n            {\n                interactionFrameworkElement.Width = newWidth;\n                var ignored = Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Low, UpdateInteractionElementScrollMultiplier);\n                return true;\n            }\n        }\n        else\n        {\n            double newHeight;\n            if (viewport == 0.0)\n            {\n                newHeight = 40.0;\n            }\n            else\n            {\n                newHeight = Math.Max(Math.Min(40.0, parentHeight), viewport / (maxOffset - minOffset + viewport) * parentHeight);\n            }\n            if (newHeight != interactionFrameworkElement.Height)\n            {\n                interactionFrameworkElement.Height = newHeight;\n                var ignored = Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Low, UpdateInteractionElementScrollMultiplier);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Anchor Ratios for ScrollView in XAML\nDESCRIPTION: Details the HorizontalAnchorRatio and VerticalAnchorRatio properties of ScrollView, which control the ratio within the viewport where the anchor element is selected. Explains special values and their effects on anchoring behavior.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_53\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.HorizontalAnchorRatio (and VerticalAnchorRatio) property\n\nGets or sets ratio within the viewport where the anchor element is selected. Defaults to zero.\n\nWhen the HorizontalAnchorRatio is NaN, no horizontal anchoring is performed. Horizontal anchoring is \nperformed when the property value is between 0 and 1.\nWhen it is 0.5, the middle of the anchor element is anchored to the middle of the viewport. That is the \ndistance between the middle of the anchor and the middle of the viewport is kept constant.\nIf the ScrollingAnchorRequestedEventArgs.Anchor property is set in the AnchorRequested event handler, \nit is picked as the anchor. Otherwise the `ScrollView` selects an anchor from the \nScrollingAnchorRequestedEventArgs.AnchorCandidates collection which may have been altered in the event \nhandler.\nFor example when HorizontalAnchorRatio is 0.5, the selected anchor is the anchor candidate the closest \nto the middle of the viewport.\n\n0 and 1 have special meanings for the HorizontalAnchorRatio property. A value of 0 forces the HorizontalOffset \nto remain at 0 if it is already 0. Thus the left edge of the `ScrollView` content sticks to the left edge \nof the viewport.\nA value of 1 forces the HorizontalOffset to match the ScrollableWidth value if it is already equal to \nScrollableWidth. Thus the right edge of the `ScrollView` content sticks to the right edge of the viewport.\nWhen HorizontalAnchorRatio has one of those two special values, the AnchorRequested event is not raised \nas no anchor is at play.\n```\n\n----------------------------------------\n\nTITLE: Styled InfoBadge Implementation\nDESCRIPTION: Example of applying a preset style to an InfoBadge using ThemeResource\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<InfoBadge x:Name=\"InfoBadge1\" Style=\"{ThemeResource AttentionIconInfoBadgeStyle}\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrolling Operations in C#\nDESCRIPTION: Methods for performing scroll operations like ScrollTo, ScrollBy, and AddScrollVelocity that delegate to event-raising methods. Each method returns a correlation ID for tracking the operation.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\n    public int ScrollTo(double offset, ScrollingAnimationMode animationMode)\n    {\n        return RaiseScrollToRequested(offset, animationMode);\n    }\n\n    public int ScrollBy(double offsetDelta, ScrollingAnimationMode animationMode)\n    {\n        return RaiseScrollByRequested(offsetDelta, animationMode);\n    }\n\n    public int AddScrollVelocity(float offsetVelocity, float? inertiaDecayRate)\n    {\n        return RaiseAddScrollVelocityRequested(offsetVelocity, inertiaDecayRate);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Method Argument Classes in C#\nDESCRIPTION: Defines ScrollingScrollOptions and ScrollingZoomOptions classes used as arguments for scrolling and zooming methods, allowing customization of animation and snap points behavior.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_60\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.ScrollingScrollOptions\n{\n    ScrollingScrollOptions(ScrollingAnimationMode animationMode);\n    ScrollingScrollOptions(ScrollingAnimationMode animationMode, ScrollingSnapPointsMode snapPointsMode);\n \n    ScrollingAnimationMode AnimationMode { get; set; };\n    ScrollingSnapPointsMode SnapPointsMode { get; set; };\n}\n\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.ScrollingZoomOptions\n{\n    ScrollingZoomOptions(ScrollingAnimationMode animationMode);\n    ScrollingZoomOptions(ScrollingAnimationMode animationMode, ScrollingSnapPointsMode snapPointsMode);\n\n    ScrollingAnimationMode AnimationMode { get; set; };\n    ScrollingSnapPointsMode SnapPointsMode { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: TitleBar Class Definition in C#\nDESCRIPTION: C# class definition for the TitleBar control, showing that it inherits from Control. This is the core class definition for the control.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TitleBar : Control\n```\n\n----------------------------------------\n\nTITLE: Implementing CanContentRenderOutsideBounds Property in ScrollView and ScrollPresenter\nDESCRIPTION: Code snippet defining the CanContentRenderOutsideBounds property for both ScrollView and ScrollPresenter classes. This property allows the control to render content outside its bounds when set to True, replicating functionality from the original ScrollViewer.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_63\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass ScrollView : ...\n{\n    // Default Value: False\n    Boolean CanContentRenderOutsideBounds { get; set; };\n}\n\nunsealed runtimeclass ScrollPresenter : ...\n{\n    // Default Value: False\n    Boolean CanContentRenderOutsideBounds { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Rounded Chrome for CalendarView in XAML\nDESCRIPTION: This XML snippet shows how to enable the rounded chrome feature for CalendarView control by setting the CalendarViewBaseItemRoundedChromeEnabled boolean resource to True in the application resources.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n    <x:Boolean x:Key=\"CalendarViewBaseItemRoundedChromeEnabled\">True</x:Boolean>\n```\n\n----------------------------------------\n\nTITLE: Listing Control Template Parts for NavigationView in XAML\nDESCRIPTION: This snippet lists the essential control template parts used in both display modes of NavigationView. It includes items like RootGrid, PaneToggleButtonGrid, and NavigationViewBackButton, along with their purposes in the code-behind.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/NavigationView/docs/rendering.md#2025-04-16_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n* `RootGrid`: Template root, used for keyboard navigation\n* `PaneToggleButtonGrid`: Not used\n* `TogglePaneTopPadding`: Referenced to adjust padding\n* `ButtonHolderGrid`: Not used\n* `NavigationViewBackButton`: Allows the BackRequested event\n* `NavigationViewBackButtonToolTip`: Localization of back button ToolTip\n* `NavigationViewCloseButton`: Close button functionality\n* `NavigationViewCloseButtonToolTip`: Localization of close button ToolTip\n* `TogglePaneButton`: Used for close/open pane functionality\n* `PaneTitleTextBlock`: Pane title binding and rendering\n* `PaneTitleHolder`: Holds pane title presenter\n* `PaneTitlePresenter`: Renders pane title\n```\n\n----------------------------------------\n\nTITLE: Implementing IsDeferredScrollingEnabled Property in ScrollView\nDESCRIPTION: Code snippet defining the IsDeferredScrollingEnabled property for the ScrollView class. When set to True, this property defers visual scrolling updates during scrollbar interaction, matching behavior from the original ScrollViewer.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_64\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass ScrollView : ...\n{\n    // Default Value: False\n    Boolean IsDeferredScrollingEnabled { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollView Scroll Modes in XAML\nDESCRIPTION: Explains the HorizontalScrollMode and VerticalScrollMode properties of ScrollView, which control the ability to scroll through user input. These properties can be set to Enabled or Disabled, affecting touch, pen, mouse wheel, and scroll bar interactions.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_48\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.HorizontalScrollMode (and VerticalScrollMode) property\nGets or sets the ability to scroll horizontally/vertically through user input. Defaults to Enabled.\n\nWhen set to Disabled, the user will not be able to scroll through user input.\n\nWhen HorizontalScrollMode is set to Enabled, the user will be able to pan horizontally with touch and a pen. \n\nThe user can also scroll horizontally with the mouse wheel and scroll bar as long as the ScrollableWidth \nproperty is strictly positive.\n\nWhen VerticalScrollMode is set to Enabled, the user will be able to pan vertically with touch and a pen. \n\nThe user can also scroll vertically with the mouse wheel and scroll bar as long as the ScrollableHeight \nproperty is strictly positive.\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarView API Details in C#\nDESCRIPTION: Declares the CalendarView class with its contract, interfaces, and new properties introduced in Windows.Foundation.UniversalApiContract version 14.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[contract(Windows.Foundation.UniversalApiContract, 1)]\n[webhosthidden]\n[static_name(\"Windows.UI.Xaml.Controls.ICalendarViewStatics\", 7260f1c4-2f5d-41bd-99bb-4571b20b79a8)]\n[constructor_name(\"Windows.UI.Xaml.Controls.ICalendarViewFactory\", 3d8f82e3-6cc6-423e-8d7c-7014d954ddef)]\n[interface_name(\"Windows.UI.Xaml.Controls.ICalendarView\", cd639203-dfb5-4312-ac07-c0391824607b)]\nunsealed runtimeclass CalendarView\n    : Windows.UI.Xaml.Controls.Control\n{\n    // Existing CalendarView APIs not shown here.\n\n    [contract(Windows.Foundation.UniversalApiContract, 14)]\n    {\n        Windows.UI.Xaml.Thickness DayItemMargin;\n        Windows.UI.Xaml.Thickness MonthYearItemMargin;\n        Windows.UI.Xaml.Thickness FirstOfMonthLabelMargin;\n        Windows.UI.Xaml.Thickness FirstOfYearDecadeLabelMargin;\n\n        Windows.UI.Xaml.CornerRadius CalendarItemCornerRadius;\n\n        Windows.UI.Xaml.Media.Brush DisabledForeground;\n        Windows.UI.Xaml.Media.Brush BlackoutStrikethroughBrush;\n        Windows.UI.Xaml.Media.Brush SelectedDisabledBorderBrush;\n        Windows.UI.Xaml.Media.Brush SelectedDisabledForeground;\n        Windows.UI.Xaml.Media.Brush SelectedHoverForeground;\n        Windows.UI.Xaml.Media.Brush SelectedPressedForeground;\n        Windows.UI.Xaml.Media.Brush CalendarItemHoverBackground;\n        Windows.UI.Xaml.Media.Brush CalendarItemPressedBackground;\n        Windows.UI.Xaml.Media.Brush CalendarItemDisabledBackground;\n        Windows.UI.Xaml.Media.Brush OutOfScopeHoverForeground;\n        Windows.UI.Xaml.Media.Brush OutOfScopePressedForeground;\n        Windows.UI.Xaml.Media.Brush BlackoutBackground;\n        Windows.UI.Xaml.Media.Brush TodayBackground;\n        Windows.UI.Xaml.Media.Brush TodayBlackoutBackground;\n        Windows.UI.Xaml.Media.Brush TodayBlackoutForeground;\n        Windows.UI.Xaml.Media.Brush TodayHoverBackground;\n        Windows.UI.Xaml.Media.Brush TodayPressedBackground;\n        Windows.UI.Xaml.Media.Brush TodayDisabledBackground;\n        Windows.UI.Xaml.Media.Brush TodaySelectedInnerBorderBrush;\n\n        static Windows.UI.Xaml.DependencyProperty DayItemMarginProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty MonthYearItemMarginProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty FirstOfMonthLabelMargin{ get; };\n        static Windows.UI.Xaml.DependencyProperty FirstOfYearDecadeLabelMargin{ get; };\n\n        static Windows.UI.Xaml.DependencyProperty CalendarItemCornerRadiusProperty{ get; };\n\n        static Windows.UI.Xaml.DependencyProperty DisabledForegroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty BlackoutStrikethroughBrushProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty SelectedDisabledBorderBrushProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty SelectedDisabledForegroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty SelectedHoverForegroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty SelectedPressedForegroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty CalendarItemHoverBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty CalendarItemPressedBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty CalendarItemDisabledBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty OutOfScopeHoverForegroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty OutOfScopePressedForegroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty BlackoutBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty TodayBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty TodayBlackoutBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty TodayBlackoutForegroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty TodayHoverBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty TodayPressedBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty TodayDisabledBackgroundProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty TodaySelectedInnerBorderBrushProperty{ get; };\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Rectangle as ScrollView Content\nDESCRIPTION: Example demonstrating how to set a Rectangle as the content of a ScrollView with explicit dimensions, showing only a portion of the larger content in the viewport.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView Width=\"500\" Height=\"400\">\n    <Rectangle Fill=\"Red\" Width=\"1000\" Height=\"800\"/>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Inertia Decay Rate for ScrollView\nDESCRIPTION: This snippet shows how to set the ZoomInertiaDecayRate property on a ScrollView to control how quickly zooming slows down after the user stops pinching. Higher values cause faster deceleration.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_70\n\nLANGUAGE: csharp\nCODE:\n```\nmyScrollView.ZoomInertiaDecayRate = 0.99;\n```\n\n----------------------------------------\n\nTITLE: Animating Vertical Offset on Key Press in ScrollView (C#)\nDESCRIPTION: This snippet shows how to animate the vertical offset of a ScrollView when processing Home and End keystrokes in a custom list control. It preserves the horizontal offset and scrolls to specific positions excluding headers.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnKeyUp(KeyRoutedEventArgs e)\n{\n    base.OnKeyUp(e);\n    if (e.Key == VirtualKey.Home)\n    {\n        _scrollView.ScrollTo(\n            _scrollView.HorizontalOffset,\n            Math.Min(_scrollView.ScrollableHeight, _headerHeight));\n    }\n    else if (e.Key == VirtualKey.End)\n    {\n        _scrollView.ScrollTo(\n            _scrollView.HorizontalOffset,\n            Math.Max(0, _scrollView.ScrollableHeight - _footerHeight));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IRichAnimatedVisualSource and AnimatedIcon Interfaces in IDL\nDESCRIPTION: IDL definition for the AnimatedIcon control and its required source interface IRichAnimatedVisualSource. Specifies the core API structure including methods for creating animated visuals, managing markers, and setting color properties.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/AnimatedIcon/Docs/AnimatedIconDevDesign.md#2025-04-16_snippet_0\n\nLANGUAGE: IDL\nCODE:\n```\n[WUXC_VERSION_PREVIEW]\n[webhosthidden]\ninterface IRichAnimatedVisualSource\n{\n    IAnimatedVisual TryCreateAnimatedVisual(Windows.UI.Composition.Compositor compositor);\n    Windows.Foundation.Collections.IMapView<String, Double> Markers { get; };\n    void SetColorProperty(String propertyName, Windows.UI.Color value);\n};\n\n[WUXC_VERSION_PREVIEW]\n[webhosthidden]\nunsealed runtimeclass AnimatedIcon : Windows.UI.Xaml.Controls.IconElement\n{\n    AnimatedIcon();\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    IRichAnimatedVisualSource Source{ get; set; };\n\n    [MUX_DEFAULT_VALUE(\"Normal\")]\n    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME(\"OnAnimatedIconStatePropertyChanged\")]\n    static Windows.UI.Xaml.DependencyProperty StateProperty{ get; };\n    static void SetState(Windows.UI.Xaml.DependencyObject object, String value);\n    static String GetState(Windows.UI.Xaml.DependencyObject object);\n\n    static Windows.UI.Xaml.DependencyProperty SourceProperty{ get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ZoomSnapPointsType Property to ScrollView Class\nDESCRIPTION: This code defines the ZoomSnapPointsType property for the ScrollView class to enable snap point behavior during zooming operations. It determines how the view snaps to predefined zoom levels.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_71\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass ScrollView : ...\n{\n    // Default Value: None\n    Microsoft.UI.Xaml.Controls.SnapPointsType ZoomSnapPointsType { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Vertical Offset on Key Press in ScrollViewer (C#)\nDESCRIPTION: This snippet demonstrates how to animate the vertical offset of a ScrollViewer when processing Home and End keystrokes in a custom list control. It preserves the horizontal offset and scrolls to specific positions excluding headers.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnKeyUp(KeyRoutedEventArgs e)\n{\n    base.OnKeyUp(e);\n    if (e.Key == VirtualKey.Home)\n    {\n        _scrollViewer.ChangeView(\n            horizontalOffset: null,\n            verticalOffset: _headerHeight,\n            zoomFactor: null);\n    }\n    else if (e.Key == VirtualKey.End)\n    {\n        _scrollViewer.ChangeView(\n            horizontalOffset: null,\n            verticalOffset: _scrollViewer.ScrollableHeight - _footerHeight,\n            zoomFactor: null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal ColorPicker Layout in XAML\nDESCRIPTION: Example showing how to create a ColorPicker with horizontal orientation and alpha channel enabled.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ColorPicker/ColorPicker.Orientation.md#2025-04-16_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<muxc:ColorPicker IsAlphaEnabled=\"True\" Orientation=\"Horizontal\"/>\n```\n\n----------------------------------------\n\nTITLE: Handling ScrollTo Requests in C#\nDESCRIPTION: Raises the ScrollToRequested event with specific offset and options. Tracks correlation IDs to monitor unique scroll requests and increments operation count for new requests that aren't coalesced with pending operations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nprivate bool RaiseScrollToRequested(double offset)\n{\n    if (ScrollToRequested == null)\n    {\n        return false;\n    }\n\n    ScrollingScrollOptions options = new ScrollingScrollOptions(ScrollingAnimationMode.Disabled, ScrollingSnapPointsMode.Ignore);\n    ScrollControllerScrollToRequestedEventArgs scrollToRequestedEventArgs = new ScrollControllerScrollToRequestedEventArgs(offset, options);\n\n    ScrollToRequested(this, scrollToRequestedEventArgs);\n\n    int correlationId = scrollToRequestedEventArgs.CorrelationId;\n\n    // Only increment operationsCount when the returned OffsetsChangeCorrelationId represents a new request that was not coalesced with a pending request. \n    if correlationId != -1 && correlationId != lastOffsetChangeCorrelationIdForScrollTo)\n    {\n        lastOffsetChangeCorrelationIdForScrollTo = correlationId;\n        operationsCount++;\n        return true;\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TitleBar.PaneToggleRequested Event in C#\nDESCRIPTION: Defines an event that occurs whenever the PaneToggleButton is clicked. This event is raised when the internal PaneToggleButton raises a Click event.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\npublic event TypedEventHandler<TitleBar, Object> PaneToggleRequested;\n```\n\n----------------------------------------\n\nTITLE: Creating ScrollSnapPoints with Custom Applicable Ranges\nDESCRIPTION: This example demonstrates how to create and add ScrollSnapPoints with custom applicable ranges to a ScrollPresenter. The applicable range determines when a snap point becomes active during scrolling, allowing for implementation of optional snap points.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_74\n\nLANGUAGE: csharp\nCODE:\n```\nScrollSnapPoint snapPoint1 = new ScrollSnapPoint(\n    snapPointValue: 0, applicableRange: 140, alignment: ScrollSnapPointsAlignment.Near);\n\nScrollSnapPoint snapPoint2 = new ScrollSnapPoint( \n    snapPointValue: 100, applicableRange: 10, alignment: ScrollSnapPointsAlignment.Near);\n\nScrollSnapPoint snapPoint3 = new ScrollSnapPoint(\n    snapPointValue: 200, applicableRange: 40, alignment: ScrollSnapPointsAlignment.Near);\n\n_scrollPresenter.VerticalSnapPoints.Add(snapPoint1);\n\n_scrollPresenter.VerticalSnapPoints.Add(snapPoint2);\n\n_scrollPresenter.VerticalSnapPoints.Add(snapPoint3);\n```\n\n----------------------------------------\n\nTITLE: Extending ScrollPresenter with Virtual Offset and Extent Support in C#\nDESCRIPTION: This proposed API extension adds virtual offsets and extents as Double types to the ScrollPresenter class. This enhancement addresses float rounding issues encountered with large values by allowing the InteractionTracker and DWM to work with smaller float numbers.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_60\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primittives.ScrollPresenter\n    : Microsoft.UI.Xaml.FrameworkElement,\n      Microsoft.UI.Xaml.Controls.IScrollAnchorProvider\n{\n    Double VirtualHorizontalOffset{ get; };\n    Double VirtualVerticalOffset{ get; };\n    Double VirtualExtentWidth{ get; };\n    Double VirtualExtentHeight{ get; };\n\n    void SetVirtualHorizontalValues(Double virtualOffset, Double virtualExtent);\n    void SetVirtualVerticalValues(Double virtualOffset, Double virtualExtent);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarViewBaseItemRoundedChromeEnabled Resource in XML\nDESCRIPTION: Introduces a new boolean resource for controlling rounded chrome in CalendarView base items.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_20\n\nLANGUAGE: XML\nCODE:\n```\n<x:Boolean x:Key=\"CalendarViewBaseItemRoundedChromeEnabled\">False</x:Boolean>\n\n<x:Boolean x:Key=\"HyperlinkUnderlineVisible\">True</x:Boolean>\n<x:Boolean x:Key=\"ListViewBaseItemRoundedChromeEnabled\">False</x:Boolean>\n<x:Boolean x:Key=\"ThemeShadowIsUsingDropShadows\">False</x:Boolean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Inertia Settings in ScrollView and ScrollPresenter in C#\nDESCRIPTION: Code snippet showing the properties available to enable or disable scroll and zoom inertia in ScrollView and ScrollPresenter classes. Both classes include IsScrollInertiaEnabled and IsZoomInertiaEnabled properties with default values of True.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_75\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass ScrollView : ...\n{\n    // Default Value: True\n    Boolean IsScrollInertiaEnabled { get; set; };\n\n    // Default Value: True\n    Boolean IsZoomInertiaEnabled { get; set; };\n}\n\nunsealed runtimeclass ScrollPresenter : ...\n{\n    // Default Value: True\n    Boolean IsScrollInertiaEnabled { get; set; };\n\n    // Default Value: True\n    Boolean IsZoomInertiaEnabled { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delta Zoom in ScrollView\nDESCRIPTION: Handles Ctrl+Plus and Ctrl+Minus keystrokes to implement immediate zoom factor changes without animation.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnKeyUp(KeyRoutedEventArgs e)\n{\n    base.OnKeyUp(e);\n\n    if (!CoreWindow.GetForCurrentThread().GetKeyState(VirtualKey.Control).HasFlag(CoreVirtualKeyStates.Down))\n    {\n        return;\n    }\n\n    if (e.Key == VirtualKey.Subtract || e.Key == VirtualKey.Add)\n    {\n        float zoomFactorDelta = GetKeyboardZoomDelta(e);\n        Vector2 centerPoint = GetKeyboardZoomCenterPoint();\n        _scrollView.ZoomBy(\n            zoomFactorDelta,\n            centerPoint,\n            new ScrollingScrollOptions(ScrollingAnimationMode.Disabled));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Snap Points Classes for Scrolling and Zooming\nDESCRIPTION: Defines base classes and implementations for scroll and zoom snap points, including single and repeated snap points with alignment and interval settings.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase :\n    Microsoft.UI.Xaml.DependencyObject\n{\n}\n\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase\n    : Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase\n{\n    ScrollSnapPointsAlignment Alignment { get; };\n}\n\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint\n    : Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase\n{\n    ScrollSnapPoint(\n        Double snapPointValue,\n        ScrollSnapPointsAlignment alignment);\n\n    Double Value { get; };\n}\n\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint\n    : Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase\n{\n    RepeatedScrollSnapPoint(\n        Double offset,\n        Double interval,\n        Double start,\n        Double end,\n        ScrollSnapPointsAlignment alignment);\n\n    Double Offset { get; };\n    Double Interval { get; };\n    Double Start { get; };\n    Double End { get; };\n}\n\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase\n    : Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase\n{\n}\n\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint\n    : Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase\n{\n    ZoomSnapPoint(\n        Double snapPointValue);\n\n    Double Value { get; };\n}\n\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint\n    : Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase\n{\n    RepeatedZoomSnapPoint(\n        Double offset,\n        Double interval,\n        Double start,\n        Double end);\n\n    Double Offset { get; };\n    Double Interval { get; };\n    Double Start { get; };\n    Double End { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DayItemMargin and Group Labels in CalendarView\nDESCRIPTION: This code configures the DayItemMargin property of a CalendarView and enables group labels. It sets a top margin of 6 pixels to prevent overlap between the group and main labels in month view.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\ncalendarView1.DayItemMargin = new Thickness(0, 6, 0, 0);\n\ncalendarView1.IsGroupLabelVisible = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring CalendarView Style Properties in XAML\nDESCRIPTION: Defines the visual appearance and behavior of a CalendarView control through style setters. These properties configure backgrounds for different states, typography settings, margins, borders, and alignments. Most values reference theme resources to ensure consistent styling across the application.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_22\n\nLANGUAGE: XAML\nCODE:\n```\n<Setter Property=\"TodayHoverBackground\" Value=\"{ThemeResource CalendarViewTodayHoverBackground}\" /> *\n        <Setter Property=\"TodayPressedBackground\" Value=\"{ThemeResource CalendarViewTodayPressedBackground}\" /> *\n        <Setter Property=\"TodayDisabledBackground\" Value=\"{ThemeResource CalendarViewTodayDisabledBackground}\" /> *\n        <Setter Property=\"BlackoutBackground\" Value=\"{ThemeResource CalendarViewBlackoutBackground}\" /> *\n        <Setter Property=\"OutOfScopeBackground\" Value=\"{ThemeResource CalendarViewOutOfScopeBackground}\" />\n        <Setter Property=\"CalendarItemBackground\" Value=\"{ThemeResource CalendarViewCalendarItemBackground}\" />\n        <Setter Property=\"CalendarItemHoverBackground\" Value=\"{ThemeResource CalendarViewCalendarItemHoverBackground}\" /> *\n        <Setter Property=\"CalendarItemPressedBackground\" Value=\"{ThemeResource CalendarViewCalendarItemPressedBackground}\" /> *\n        <Setter Property=\"CalendarItemDisabledBackground\" Value=\"{ThemeResource CalendarViewCalendarItemDisabledBackground}\" /> *\n        <Setter Property=\"Foreground\" Value=\"{ThemeResource CalendarViewForeground}\" />\n        <Setter Property=\"Background\" Value=\"{ThemeResource CalendarViewBackground}\" />\n        <Setter Property=\"BorderBrush\" Value=\"{ThemeResource CalendarViewBorderBrush}\" />\n        <Setter Property=\"DayItemFontFamily\" Value=\"XamlAutoFontFamily\" />\n        <Setter Property=\"DayItemFontSize\" Value=\"{ThemeResource CalendarViewDayItemFontSize}\" />\n        <Setter Property=\"DayItemMargin\" Value=\"{ThemeResource CalendarViewDayItemMargin}\" /> *\n        <Setter Property=\"FirstOfMonthLabelFontFamily\" Value=\"XamlAutoFontFamily\" />\n        <Setter Property=\"FirstOfMonthLabelFontSize\" Value=\"{ThemeResource CalendarViewFirstOfMonthLabelFontSize}\" />\n        <Setter Property=\"FirstOfMonthLabelMargin\" Value=\"{ThemeResource CalendarViewFirstOfMonthLabelMargin}\" /> *\n        <Setter Property=\"MonthYearItemFontFamily\" Value=\"XamlAutoFontFamily\" />\n        <Setter Property=\"MonthYearItemFontSize\" Value=\"{ThemeResource CalendarViewMonthYearItemFontSize}\" />\n        <Setter Property=\"MonthYearItemMargin\" Value=\"{ThemeResource CalendarViewMonthYearItemMargin}\" /> *\n        <Setter Property=\"FirstOfYearDecadeLabelFontFamily\" Value=\"XamlAutoFontFamily\" />\n        <Setter Property=\"FirstOfYearDecadeLabelFontSize\" Value=\"{ThemeResource CalendarViewFirstOfYearDecadeLabelFontSize}\" />\n        <Setter Property=\"FirstOfYearDecadeLabelMargin\" Value=\"{ThemeResource CalendarViewFirstOfYearDecadeLabelMargin}\" /> *\n        <Setter Property=\"CalendarItemBorderThickness\" Value=\"1\" />\n        <Setter Property=\"BorderThickness\" Value=\"1\" />\n        <Setter Property=\"HorizontalAlignment\" Value=\"Left\" />\n        <Setter Property=\"VerticalAlignment\" Value=\"Center\" />\n        <Setter Property=\"HorizontalContentAlignment\" Value=\"Stretch\" />\n        <Setter Property=\"VerticalContentAlignment\" Value=\"Stretch\" />\n        <Setter Property=\"IsTabStop\" Value=\"False\" />\n        <Setter Property=\"UseSystemFocusVisuals\" Value=\"{StaticResource UseSystemFocusVisuals}\" />\n        <Setter Property=\"CornerRadius\" Value=\"{ThemeResource ControlCornerRadius}\" />\n        <Setter Property=\"Template\">\n          ...\n        </Setter>\n```\n\n----------------------------------------\n\nTITLE: Defining XAML Shared Enumerations for Scrolling in C#\nDESCRIPTION: Declaration of shared enumerations used by both ScrollView and ScrollPresenter components, including ScrollingContentOrientation, ScrollingInteractionState, ScrollingScrollMode, and other scroll-related enumerations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nenum ScrollingContentOrientation\n{\n    Vertical = 0,\n    Horizontal = 1,\n    None = 2,\n    Both = 3,\n};\n\nenum ScrollingInteractionState\n{\n    Idle = 0,\n    Interaction = 1,\n    Inertia = 2,\n    Animation = 3,\n};\n\nenum ScrollingScrollMode\n{\n    Enabled = 0,\n    Disabled = 1,\n};\n\nenum ScrollingZoomMode\n{\n    Enabled = 0,\n    Disabled = 1,\n};\n\nenum ScrollingChainMode\n{\n    Auto = 0,\n    Always = 1,\n    Never = 2,\n};\n\nenum ScrollingRailMode\n{\n    Enabled = 0,\n    Disabled = 1,\n};\n\n[flags]\nenum ScrollingInputKinds\n{\n    None = 0x00,\n    Touch = 0x01,\n    Pen = 0x02,\n    MouseWheel = 0x04,\n    Keyboard = 0x08,\n    Gamepad = 0x10,\n    All = 0xFFFFFFFF,\n};\n\nenum ScrollingAnimationMode\n{\n    Disabled = 0,\n    Enabled = 1,\n    Auto = 2,\n};\n\nenum ScrollingSnapPointsMode\n{\n    Default = 0,\n    Ignore = 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard-Triggered Zoom Animation in ScrollViewer\nDESCRIPTION: Legacy ScrollViewer implementation for handling Ctrl+Home and Ctrl+End zoom operations with viewport calculations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnKeyUp(KeyRoutedEventArgs e)\n{\n    base.OnKeyUp(e);\n\n    if (!CoreWindow.GetForCurrentThread().GetKeyState(VirtualKey.Control).HasFlag(CoreVirtualKeyStates.Down))\n    {\n        return;\n    }\n\n    if (e.Key == VirtualKey.Home)\n    {\n        _scrollViewer.ChangeView(\n            (_scrollViewer.HorizontalOffset + _scrollViewer.ViewportWidth / 2) * _scrollViewer.MinZoomFactor / _scrollViewer.ZoomFactor - _scrollViewer.ViewportWidth / 2,\n            (_scrollViewer.VerticalOffset + _scrollViewer.ViewportHeight / 2) * _scrollViewer.MinZoomFactor / _scrollViewer.ZoomFactor - _scrollViewer.ViewportHeight / 2,\n            _scrollViewer.MinZoomFactor);\n    }\n    else if (e.Key == VirtualKey.End)\n    {\n        _scrollViewer.ChangeView(\n            (_scrollViewer.HorizontalOffset + _scrollViewer.ViewportWidth / 2) * _scrollViewer.MaxZoomFactor / _scrollViewer.ZoomFactor - _scrollViewer.ViewportWidth / 2,\n            (_scrollViewer.VerticalOffset + _scrollViewer.ViewportHeight / 2) * _scrollViewer.MaxZoomFactor / _scrollViewer.ZoomFactor - _scrollViewer.ViewportHeight / 2,\n            _scrollViewer.MaxZoomFactor);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Horizontal Scroll Controller in C# for ScrollPresenter\nDESCRIPTION: This snippet shows how to set a custom horizontal scroll controller for a ScrollPresenter. It assigns a TimelineScrubber object to the HorizontalScrollController property.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nmyScrollPresenter.HorizontalScrollController = myTimelineScrubber;\n```\n\n----------------------------------------\n\nTITLE: Calculating Vertical Thumb Offset in C#\nDESCRIPTION: Calculates the vertical position of the thumb within the scrollbar based on the current offset, min/max offset values, and parent container height. Returns 0 if elements are null or offsets are equal.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nprivate double VerticalThumbOffset\n{\n    get\n    {\n        if (interactionFrameworkElement != null)\n        {\n            double parentHeight = 0.0;\n            FrameworkElement parent = interactionFrameworkElement.Parent as FrameworkElement;\n            if (parent != null)\n            {\n                parentHeight = parent.ActualHeight;\n            }\n            if (maxOffset != minOffset)\n            {\n                return (offset - minOffset) / (maxOffset - minOffset) * (parentHeight - interactionFrameworkElement.Height);\n            }\n        }\n\n        return 0.0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Mode in IScrollController\nDESCRIPTION: This method is invoked by the ScrollPresenter to indicate whether scrolling through user input is enabled or disabled. The ScrollPresenter passes the appropriate ScrollingScrollMode value based on its horizontal and vertical scroll mode properties.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\nvoid SetScrollMode(Microsoft.UI.Xaml.Controls.ScrollingScrollMode scrollMode)\n```\n\n----------------------------------------\n\nTITLE: TitleBar Title Property Definition in C#\nDESCRIPTION: C# property definition for the Title property, which sets the main title text displayed in the TitleBar. The title will be collapsed if empty or if the TitleBar is in minimal display mode.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic String Title { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Scroll Option Classes in C#\nDESCRIPTION: Declaration of shared method argument classes used by both ScrollView and ScrollPresenter components: ScrollingScrollOptions and ScrollingZoomOptions. These classes provide configuration options for scrolling and zooming behaviors.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.ScrollingScrollOptions\n{\n    ScrollingScrollOptions(ScrollingAnimationMode animationMode);\n    ScrollingScrollOptions(ScrollingAnimationMode animationMode, ScrollingSnapPointsMode snapPointsMode);\n \n    ScrollingAnimationMode AnimationMode { get; set; };\n    ScrollingSnapPointsMode SnapPointsMode { get; set; };\n}\n\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.ScrollingZoomOptions\n{\n    ScrollingZoomOptions(ScrollingAnimationMode animationMode);\n    ScrollingZoomOptions(ScrollingAnimationMode animationMode, ScrollingSnapPointsMode snapPointsMode);\n\n    ScrollingAnimationMode AnimationMode { get; set; };\n    ScrollingSnapPointsMode SnapPointsMode { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating InfoBadge with Button Control\nDESCRIPTION: Example of positioning an InfoBadge within a Button control's upper right corner using Grid layout\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Button Background=\"LightGray\" Padding=\"0\" Width=\"200\" Height=\"50\" \n  HorizontalContentAlignment=\"Stretch\" VerticalContentAlignment=\"Stretch\">\n    <Button.Content>\n        <Grid HorizontalAlignment=\"Stretch\" VerticalAlignment=\"Stretch\" \n  Width=\"Auto\" Height=\"Auto\">\n            <SymbolIcon Symbol=\"Sync\" HorizontalAlignment=\"Center\"></SymbolIcon>\n            <InfoBadge Background=\"Red\" HorizontalAlignment=\"Right\" \n    VerticalAlignment=\"Top\">\n                <InfoBadge.IconSource>\n                    <FontIcon FontFamily=\"Segoe MDL2 Assets\" Glyph=\"&#F13C;\"/>\n                </InfoBadge.IconSource>\n            </InfoBadge>\n        </Grid>\n    </Button.Content>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining MonochromaticOverlayPresenter Class in C#\nDESCRIPTION: This snippet defines the MonochromaticOverlayPresenter class, which is a FrameworkElement that renders another element at the same position while applying an optional monochromatic colorization effect.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/DateTimePicker-Visual-Updates-Spec.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MonochromaticOverlayPresenter : FrameworkElement\n{\n    public UIElement SourceElement { get; set; }\n    public Color ReplacementColor { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Snap Points in ScrollPresenter\nDESCRIPTION: Code showing potential future implementation of optional snap points in ScrollPresenter by introducing ApplicableRange property to the SnapPointBase class and its derived classes.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass SnapPointBase : Microsoft.UI.Xaml.DependencyObject\n{\n    Double ApplicableRange { get; };\n}\n\nunsealed runtimeclass ScrollSnapPoint\n    : ScrollSnapPointBase\n{\n    ScrollSnapPoint(\n        Double snapPointValue,\n        Double applicableRange,\n        ScrollSnapPointsAlignment alignment);\n\n    ...\n}\n\nunsealed runtimeclass RepeatedScrollSnapPoint\n    : ScrollSnapPointBase\n{\n    RepeatedScrollSnapPoint(\n        Double offset,\n        Double interval,\n        Double start,\n        Double end,\n        Double applicableRange,\n        ScrollSnapPointsAlignment alignment);\n\n    ...\n}\n\nunsealed runtimeclass ZoomSnapPoint\n    : ZoomSnapPointBase\n{\n    ZoomSnapPoint(\n        Double snapPointValue,\n        Double applicableRange);\n\n    ...\n}\n\nunsealed runtimeclass RepeatedZoomSnapPoint\n    : ZoomSnapPointBase\n{\n    RepeatedZoomSnapPoint(\n        Double offset,\n        Double interval,\n        Double start,\n        Double end,\n        Double applicableRange);\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBar.ContentAfter Property in C#\nDESCRIPTION: Gets and sets elements within the TitleBar's ContentAfter column. This property is typically used to populate controls such as PersonPicture and the \"More\" AppBarButton. If set to a non-null value, TitleBar automatically configures its height to TitleBarExpandedHeight.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\npublic UIElement ContentAfter { get; set; }\n```\n\n----------------------------------------\n\nTITLE: TitleBar Content Property Definition in C#\nDESCRIPTION: C# property definition for the Content property, which allows placing UI elements in the main content area of the TitleBar. This can be used to add custom controls like search boxes.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic UIElement Content { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Template with AnimatedIcon Support in XAML\nDESCRIPTION: XAML control template example for a Button that supports AnimatedIcon. The template demonstrates how to use the AnimatedIcon.State attached property in visual states to control icon animations based on button states.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/AnimatedIcon/Docs/AnimatedIconDevDesign.md#2025-04-16_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Button Content=\"Hello Button\" Width=\"200\" Height=\"40\">\n    <Button.Style>\n        <Style TargetType=\"Button\">\n            <Setter Property=\"Template\">\n                <Setter.Value>\n                    <ControlTemplate TargetType=\"Button\">\n                        <Grid>\n                            <VisualStateManager.VisualStateGroups>\n                                <VisualStateGroup x:Name=\"CommonStates\">\n                                    <VisualState x:Name=\"Normal\">\n                                        <VisualState.Setters>\n                                            <Setter Target=\"Icon.(AnimatedIcon.State)\" Value=\"Normal\"/>\n                                        </VisualSTate.Setters>\n                                    </VisualState>\n                                    <VisualState x:Name=\"PointerOver\">\n                                        <VisualState.Setters>\n                                            <Setter Target=\"Icon.(AnimatedIcon.State)\" Value=\"Hover\"/>\n                                        </VisualSTate.Setters>\n                                    </VisualState>\n                                    <VisualState x:Name=\"Pressed\">\n                                        <VisualState.Setters>\n                                            <Setter Target=\"Icon.(AnimatedIcon.State)\" Value=\"Pressed\"/>\n                                        </VisualSTate.Setters>\n                                    </VisualState>\n                                </VisualStateGroup>\n                            </VisualStateManager.VisualStateGroups>\n\n                            <ContentPresenter\n                                x:Name=\"ContentPresenter\"\n                                Background=\"{TemplateBinding Background}\"\n                                BorderBrush=\"{TemplateBinding BorderBrush}\"\n                                BorderThickness=\"{TemplateBinding BorderThickness}\"\n                                Content=\"{TemplateBinding Content}\"\n                                ContentTemplate=\"{TemplateBinding ContentTemplate}\"\n                                ContentTransitions=\"{TemplateBinding ContentTransitions}\"\n                                Padding=\"{TemplateBinding Padding}\"\n                                HorizontalContentAlignment=\"{TemplateBinding HorizontalContentAlignment}\"\n                                VerticalContentAlignment=\"{TemplateBinding VerticalContentAlignment}\"\n                                AutomationProperties.AccessibilityView=\"Raw\" />\n\n                            <Grid x:Name=\"Icon\" HorizontalAlignment=\"Right\" Content=\"{TemplateBinding Icon}/>\n                        </Grid>\n                    </ControlTemplate>\n                </Setter.Value>\n            </Setter>\n        </Style>\n    </Button.Style>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Handling Popup Placement Changes in C#\nDESCRIPTION: Demonstrates event handling for the ActualPlacementChanged event and updating visual states based on whether the popup appears above or below the target element.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/Popup-AdditionalLayoutProperties-Spec.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnApplyTemplate()\n{\n    m_overflowPopup = GetTemplateChild(\"OverflowPopup\");\n    m_overflowPopup.ActualPlacementChanged += OnOverflowPopupActualPlacementChanged;\n}\n\nvoid OnOverflowPopupActualPlacementChanged(object sender, object args)\n{\n    UpdateVisualState(useTransitions: false);\n}\n\nvoid UpdateVisualState(bool useTransitions)\n{\n    if (m_overflowPopup.ActualPlacement == PopupPlacementMode.Top)\n    {\n        VisualStateManager.GoToState(this, \"ExpandedUp\", useTransitions);\n    }\n    else\n    {\n        VisualStateManager.GoToState(this, \"ExpandedDown\", useTransitions);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AppWindow Functionality in WinUI 3 (Before)\nDESCRIPTION: This code snippet demonstrates how to access AppWindow functionality in WinUI 3 before the introduction of the Window.AppWindow API. It requires multiple steps to obtain the AppWindow object.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/appwindow-spec.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\n// This is needed to get any Window from inside a Xaml control \nvar xamlWindow = WindowHelper.GetWindowForElement(this); // api to get window object from UIElement (not a real api)  \n\n// unnecessary boiler plate code \nvar windowId = Win32Interop.GetWindowIdFromWindow(WindowNative.GetWindowHandle(xamlWindow)); \nvar appWindow = AppWindow.GetFromWindowId(windowId); \n\n//calling function foo  (not a real appwindow function)\nappWindow.foo();\n```\n\n----------------------------------------\n\nTITLE: Customizing Scroll Animations in IScrollController\nDESCRIPTION: This method allows the scroll controller to customize the animation used for scrolling operations initiated by ScrollToRequested or ScrollByRequested events. The controller can modify the default animation or provide a completely new composition animation.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_17\n\nLANGUAGE: cs\nCODE:\n```\nCompositionAnimation GetScrollAnimation(\n    Int32 correlationId,\n    Windows.Foundation.Numerics.Vector2 currentPosition,\n    Microsoft.UI.Composition.CompositionAnimation defaultAnimation)\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollByRequested Event in IScrollController\nDESCRIPTION: This event allows the scroll controller to request scrolling by a specific delta amount. The ScrollPresenter processes this event and provides a correlation ID. This is typically used for incremental scrolling operations like button clicks.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_20\n\nLANGUAGE: cs\nCODE:\n```\nWindows.Foundation.TypedEventHandler<IScrollController, ScrollControllerScrollByRequestedEventArgs> ScrollByRequested\n```\n\n----------------------------------------\n\nTITLE: Implementing Default TitleBar in XAML\nDESCRIPTION: Demonstrates the basic implementation of a WinUI TitleBar with a title, subtitle, and icon source using XAML markup. This example shows the minimal required structure for implementing a titlebar within a Window.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Window\n    x:Class=\"App1.MainWindow\"\n    xmlns:local=\"using:App1\"\n    mc:Ignorable=\"d\">\n\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" /> <!-- Title Bar -->\n            <RowDefinition Height=\"*\" /> <!-- App Content -->\n        </Grid.RowDefinitions>\n        <TitleBar x:Name=\"DefaultTitleBar\" Title=\"Default TitleBar\" Subtitle=\"Preview\">\n            <TitleBar.IconSource>\n                <SymbolIconSource Symbol=\"Home\"/>\n            </TitleBar.IconSource>\n        </TitleBar>\n\n        <!-- App content -->\n    </Grid>\n</Window>\n```\n\n----------------------------------------\n\nTITLE: Partially Highlighting TextBlock with MonochromaticOverlayPresenter\nDESCRIPTION: This XAML example shows how to use MonochromaticOverlayPresenter to partially highlight a TextBlock by overlaying a colored rectangle on top of it.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/DateTimePicker-Visual-Updates-Spec.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <StackPanel x:Name=\"Panel\" Orientation=\"Vertical\" HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n            <Grid Margin=\"2,10,0,0\">\n                <TextBlock x:Name=\"Source\" Text=\"This string will be partially highlighted\"/>\n                <MonochromaticOverlayPresenter\n                    ReplacementColor=\"Black\"\n                    SourceElement=\"{x:Bind Source}\"\n                    Width=\"50\"\n                    VerticalAlignment=\"Stretch\"\n                    HorizontalAlignment=\"Center\"\n                    Background=\"LightBlue\"/>\n            </Grid>\n        </StackPanel>\n    </Grid>\n```\n\n----------------------------------------\n\nTITLE: Defining InfoBadge for NavigationViewItem in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a NavigationView with a MenuItemTemplate that includes an InfoBadge for each NavigationViewItem.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<muxc:NavigationView>\n    <muxc:NavigationView.MenuItemTemplate>\n        <DataTemplate x:DataType=\"local:CustomNavObject\">\n            <muxc:NavigationViewItem Content=\"{x:Bind Title}\" Icon=\"{x:Bind ItemIcon}\" \n                                     InfoBadge=\"{x:Bind ItemInfoBadge}\">\n            </muxc:NavigationViewItem>\n        </DataTemplate>\n    </muxc:NavigationView.MenuItemTemplate>\n</muxc:NavigationView>\n```\n\n----------------------------------------\n\nTITLE: Handling TitleBar Navigation Events in C#\nDESCRIPTION: Demonstrates how to handle TitleBar events such as back button requests and pane toggle requests when integrated with NavigationView. This code handles navigation flow and pane visibility toggling.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic MainWindow()\n{\n    this.InitializeComponent();\n\n    Window window = this; \n    window.ExtendsContentIntoTitleBar = true;\n    window.SetTitleBar(this.DefaultTitleBar);\n}\n\nprivate void NavViewTitleBar_BackRequested(TitleBar sender, object args)\n{\n    if (NavFrame.CanGoBack)\n    {\n        NavFrame.GoBack();\n    }\n}\n\nprivate void NavViewTitleBar_PaneToggleRequested(TitleBar sender, object args)\n{\n    NavView.IsPaneOpen = !NavView.IsPaneOpen;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceManagerRequested Event Handler in App Constructor\nDESCRIPTION: Shows how to implement the ResourceManagerRequested event handler in the App constructor to provide a custom IResourceManager implementation to WinUI 3.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/custom-iresourcemanager-spec.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic App()\n{\n   this.InitializeComponent();\n\n   ResourceManagerRequested += (_, e) =>\n   {\n      // CreateResourceManager() is a custom method that returns an instance of\n      // Microsoft.Windows.ApplicationModel.Resources.IResourceManager.\n      IResourceManager resourceManager = CreateResourceManager();\n      e.ResourceManager = resourceManager;\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Details in C#\nDESCRIPTION: This snippet provides the complete API details for the new XAML resource reference tracing functionality, including the DebugSettings and XamlResourceReferenceFailedEventArgs classes.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-resource-references-tracing-spec.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nnamespace Microsoft.UI.Xaml\n{\n  runtimeclass DebugSettings\n  {\n    // existing ...\n\n    Boolean IsXamlResourceReferenceTracingEnabled;\n    event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.DebugSettings,Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs> XamlResourceReferenceFailed;\n  };\n\n  runtimeclass XamlResourceReferenceFailedEventArgs\n  {\n    String Message{ get; };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Scroll Controller State in C#\nDESCRIPTION: Methods for updating the controller state, including interaction permissions and orientation settings. These methods adjust the UI components based on the current orientation and interaction state.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\n    private void UpdateAreInteractionsAllowed()\n    {\n        bool oldAreInteractionsAllowed = AreInteractionsAllowed;\n\n        AreInteractionsAllowed = scrollMode != ScrollingScrollMode.Disabled && IsEnabled;\n\n        if (oldAreInteractionsAllowed != AreInteractionsAllowed)\n        {\n            RaiseInteractionInfoChanged();\n        }\n    }\n\n    private void UpdateOrientation()\n    {\n        if (Orientation == Orientation.Horizontal)\n        {\n            if (horizontalGrid != null)\n                horizontalGrid.Visibility = Visibility.Visible;\n            if (verticalGrid != null)\n                verticalGrid.Visibility = Visibility.Collapsed;\n            interactionFrameworkElement = horizontalThumb as FrameworkElement;\n            if (interactionFrameworkElement != null)\n            {\n                interactionFrameworkElement.ManipulationMode = ManipulationModes.TranslateX;\n            }\n\n            if (horizontalDecrementRepeatButton != null)\n            {\n                horizontalDecrementRepeatButton.Click += DecrementRepeatButton_Click;\n            }\n\n            if (horizontalIncrementRepeatButton != null)\n            {\n                horizontalIncrementRepeatButton.Click += IncrementRepeatButton_Click;\n            }\n        }\n        else\n        {\n            if (verticalGrid != null)\n                verticalGrid.Visibility = Visibility.Visible;\n            if (horizontalGrid != null)\n                horizontalGrid.Visibility = Visibility.Collapsed;\n            interactionFrameworkElement = verticalThumb as FrameworkElement;\n            if (interactionFrameworkElement != null)\n            {\n                interactionFrameworkElement.ManipulationMode = ManipulationModes.TranslateY;\n            }\n\n            if (verticalDecrementRepeatButton != null)\n            {\n                verticalDecrementRepeatButton.Click += DecrementRepeatButton_Click;\n            }\n\n            if (verticalIncrementRepeatButton != null)\n            {\n                verticalIncrementRepeatButton.Click += IncrementRepeatButton_Click;\n            }\n        }\n\n        if (interactionFrameworkElement != null)\n        {\n            interactionVisual = ElementCompositionPreview.GetElementVisual(interactionFrameworkElement);\n            ElementCompositionPreview.SetIsTranslationEnabled(interactionFrameworkElement, true);\n            StartThumbAnimation(Orientation);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Using ScrollPresenter as a Top-Level Element\nDESCRIPTION: Demonstrates how to use ScrollPresenter directly as a top-level element in a page for scrollable content, where a TextBlock is contained within the ScrollPresenter.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Page \n    xmlns=http://schemas.microsoft.com/winfx/2006/xaml/presentation\n    xmlns:muxp=\"using:Microsoft.UI.Xaml.Controls.Primitives\">\n    <muxp:ScrollPresenter Width=\"500\" Height=\"400\" Background=\"Beige\">\n        <TextBlock Text=\"{x:Bind AllTheText}\" TextWrapping=\"Wrap\"/>\n    </muxp:ScrollPresenter>\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Declaring TitleBarAutomationPeer Class in C#\nDESCRIPTION: Exposes TitleBar types to Microsoft UI Automation. The class inherits from Microsoft.UI.Xaml.Automation.Peers and is located in the Microsoft.UI.Xaml.Automation.Peers namespace.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_17\n\nLANGUAGE: cs\nCODE:\n```\npublic class TitleBarAutomationPeer :  Microsoft.UI.Xaml.Automation.Peers...\n```\n\n----------------------------------------\n\nTITLE: Rendering ColorSpectrum using Composition APIs (Windows 1703 and later)\nDESCRIPTION: On Windows version 1703 (RS2) and later, the ColorSpectrum is rendered using Composition APIs. The spectrum images are placed in a loaded image surface, which is then put into a SpectrumBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/ColorPicker/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// Code not provided in the original text, but the process is described as:\n// 1. Place spectrum images in loaded image surface\n// 2. Put image surface into SpectrumBrush\n// 3. Use SpectrumBrush for rendering\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Vertical Scroll Controller in C# for ScrollView\nDESCRIPTION: This code shows how to hide the default vertical ScrollBar in a ScrollView and replace it with a custom TimelineScrubber control. It sets the VerticalScrollController property of the ScrollPresenter to use the custom control.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nmyScrollView.VerticalScrollBarVisibility = ScrollingScrollBarVisibility.Hidden;\n\nScrollPresenter myScrollPresenter = myScrollView.GetValue(ScrollView.ScrollPresenterProperty) as ScrollPresenter;\n\nmyScrollPresenter.VerticalScrollController = myTimelineScrubber;\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBar Class Interface in MIDL3\nDESCRIPTION: The complete interface definition for the TitleBar control in MIDL3 syntax. It includes all properties, events, and dependency properties that the TitleBar control exposes including content areas, navigation controls, and template settings.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_18\n\nLANGUAGE: MIDL3\nCODE:\n```\n[MUX_EXPERIMENTAL]\n[webhosthidden]\nunsealed runtimeclass TitleBar : Microsoft.UI.Xaml.Controls.Control\n{\n    TitleBar();\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    UIElement ContentBefore{ get; set; };\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    String Title{ get; set; };\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    String Subtitle{ get; set; };\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    Microsoft.UI.Xaml.Controls.IconSource IconSource{ get; set; };\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    UIElement Content{ get; set; };\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    UIElement ContentAfter{ get; set; };\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    Boolean IsBackButtonVisible{ get; set; };\n\n    Boolean IsBackButtonEnabled{ get; set; };\n\n    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]\n    Boolean IsPaneToggleButtonVisible{ get; set; };\n\n    TitleBarTemplateSettings TemplateSettings{ get; };\n\n    event Windows.Foundation.TypedEventHandler<TitleBar, Object> BackRequested;\n    event Windows.Foundation.TypedEventHandler<TitleBar, Object> PaneToggleRequested;\n\n    static Microsoft.UI.Xaml.DependencyProperty ContentBeforeProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty TitleProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty SubtitleProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty IconSourceProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty ContentProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty ContentAfterProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty IsBackButtonVisibleProperty{ get; };\n    static Microsoft.UI.Xaml.DependencyProperty IsBackButtonEnabledProperty{ get; };\n\n    static Microsoft.UI.Xaml.DependencyProperty TemplateSettingsProperty{ get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TodayHoverBackground Property in CalendarView (XML)\nDESCRIPTION: Example of setting the TodayHoverBackground property to customize the appearance when hovering over the current date using the AccentFillColorSecondaryBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView TodayHoverBackground='{StaticResource AccentFillColorSecondaryBrush}'/>\n```\n\n----------------------------------------\n\nTITLE: Managing Bring-Into-View Contributions\nDESCRIPTION: Handles the lifecycle of bring-into-view operations including start and completion events.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ScrollView_BringingIntoView(ScrollView scrollView, ScrollingBringingIntoViewEventArgs e)\n{\n    _bringIntoViewCorrelationId = e.CorrelationId;\n    scrollView.IgnoredInputKinds = ScrollingInputKinds.All;\n}\n\nprivate void ScrollView_ScrollCompleted(ScrollView scrollView, ScrollingScrollCompletedEventArgs e)\n{\n    if (_bringIntoViewCorrelationId == e.CorrelationId)\n    {\n        scrollView.IgnoredInputKinds = ScrollingInputKinds.None;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Two-dimensional Unconstrained Layout with Image in ScrollView\nDESCRIPTION: Example showing a ScrollView with ContentOrientation set to Both containing an Image, allowing both horizontal and vertical scrolling when the image exceeds the viewport dimensions.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView Width=\"500\" Height=\"400\" \n    ContentOrientation=\"Both\">\n    <Image Source=\"Assets/LargeEiffelTower.png\"/>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Customizing Inertial Scrolling Decay Based on Environment in ScrollView\nDESCRIPTION: This example demonstrates how to modify the ScrollView's inertial decay rate based on the virtual environment (space, atmosphere, or water) to simulate different types of friction. The decay rate affects how quickly scrolling slows down after the user stops dragging.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_69\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ScrollView_ViewChanged(ScrollView sender, object args)\n{\n    if (myScrollView.State == ScrollingInteractionState.Inertia)\n    {\n        Environment environment = GetEnvironmentFromOffsets(\n        myScrollView.HorizontalOffset,\n        myScrollView.VerticalOffset);\n        switch (environment)\n        {\n            case Environment.Space:\n                myScrollView.ScrollInertiaDecayRate = new Vector2(0.0, 0.0);\n                break;\n            case Environment.Atmosphere:\n                myScrollView.ScrollInertiaDecayRate = new Vector2(0.9, 0.9);\n                break;\n            case Environment.Water:\n                myScrollView.ScrollInertiaDecayRate = new Vector2(0.99, 0.99);\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Window.AppWindow Property\nDESCRIPTION: This code snippet demonstrates how to use the Window.AppWindow property to access AppWindow functionality, such as getting the window size.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/appwindow-spec.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nvar xamlWindow = WindowHelper.GetWindowForElement(this);   \nauto windowSize = xamlWindow.AppWindow.Size;\n```\n\n----------------------------------------\n\nTITLE: Creating Opacity Animation Based on Vertical Scroll Position in ScrollViewer\nDESCRIPTION: Equivalent example for ScrollViewer that shows how to create an expression animation that changes an element's opacity based on the vertical scroll position, requiring more manual parameter updates.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nExpressionAnimation _headerOpacityExpression = null;\nprivate void SetupHeaderOpacityAnimation()\n{\n    CompositionPropertySet scrollingProperties =\n        ElementCompositionPreview.GetScrollViewerManipulationPropertySet(_scrollViewer);\n\n    _headerOpacityExpression = _compositor.CreateExpressionAnimation(\n        \"1 - sp.Translation.Y / scrollableHeight\");\n\n    _headerOpacityExpression.SetReferenceParameter(\n        \"sp\", scrollingProperties);\n\n    _headerOpacityExpression.SetScalarParameter(\n        \"scrollableHeight\", (float)_scrollViewer.ScrollableHeight);\n\n    _headerVisual.StartAnimation(\"Opacity\", headerOpacityExpression);\n}\n\nprivate void ScrollViewer_SizeChanged(object sender, SizeChangedEventArgs e)\n{\n    if (_headerOpacityExpression != null)\n    {\n        _headerOpacityExpression.SetScalarParameter(\n            \"scrollableHeight\", (float)_scrollViewer.ScrollableHeight);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TitleBar ContentBefore Property Definition in C#\nDESCRIPTION: C# property definition for the ContentBefore property, which allows placing UI elements before the main title content. Elements in ContentBefore are left-aligned by default.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic UIElement ContentBefore { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Window.AppWindow API Declaration in MIDL3\nDESCRIPTION: This code snippet shows the MIDL3 declaration for the Window.AppWindow API, defining the AppWindow property in the Microsoft.UI.Xaml.Window class.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/appwindow-spec.md#2025-04-16_snippet_4\n\nLANGUAGE: midl3\nCODE:\n```\nnamespace Microsoft.UI.Xaml\n{\n   unsealed runtimeclass Window\n  {\n      ...\n      Microsoft.UI.Windowing.AppWindow AppWindow{ get; };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollSnapPointsAlignment Enumeration in C#\nDESCRIPTION: Declaration of the ScrollSnapPointsAlignment enumeration used by the ScrollPresenter component, defining alignment options for scroll snap points.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nenum Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment\n{\n    Near = 0,\n    Center = 1,\n    Far = 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Event Argument Classes in C#\nDESCRIPTION: Defines various event argument classes used for scrolling and zooming events, including animation starting, completion, and bringing into view events.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_61\n\nLANGUAGE: csharp\nCODE:\n```\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs\n{\n    Microsoft.UI.Composition.CompositionAnimation Animation { get; set; };\n    Windows.Foundation.Numerics.Vector2 StartPosition { get; };\n    Windows.Foundation.Numerics.Vector2 EndPosition { get; };\n    Int32 CorrelationId { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs\n{\n    Windows.Foundation.Numerics.Vector2 CenterPoint { get; };\n    Single StartZoomFactor { get; };\n    Single EndZoomFactor { get; };\n    Microsoft.UI.Composition.CompositionAnimation Animation { get; set; };\n    Int32 CorrelationId { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs\n{\n    Int32 CorrelationId { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs\n{\n    Int32 CorrelationId { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs\n{\n    ScrollingSnapPointsMode SnapPointsMode { get; set; };\n    Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs RequestEventArgs { get; };\n    Double TargetHorizontalOffset { get; };\n    Double TargetVerticalOffset { get; };\n    Int32 CorrelationId { get; };\n    Boolean Cancel { get; set; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs\n{\n    Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement> AnchorCandidates { get; };\n    Microsoft.UI.Xaml.UIElement AnchorElement { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling UI Interaction Events in C#\nDESCRIPTION: Event handlers for pointer and manipulation interactions with the scrollbar thumb, including pointer press, manipulation starting/delta/completed events that control the dragging behavior of the scrollbar.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\n    private void InteractionFrameworkElement_PointerPressed(object sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e)\n    {\n        switch (e.Pointer.PointerDeviceType)\n        {\n            case Microsoft.UI.Input.PointerDeviceType.Touch:\n            case Microsoft.UI.Input.PointerDeviceType.Pen:\n                RaiseInteractionRequested(e.GetCurrentPoint(null));\n                break;\n            case Microsoft.UI.Input.PointerDeviceType.Mouse:\n                isThumbDragged = true;\n                if (!IsInteracting)\n                {\n                    IsInteracting = true;\n                    RaiseInteractionInfoChanged();\n                }\n                break;\n        }\n    }\n\n    private void InteractionFrameworkElement_ManipulationStarting(object sender, ManipulationStartingRoutedEventArgs e)\n    {\n        if (isThumbDragged)\n        {\n            preManipulationThumbOffset = Orientation == Orientation.Horizontal ? HorizontalThumbOffset : VerticalThumbOffset;\n        }\n    }\n\n    private void InteractionFrameworkElement_ManipulationDelta(object sender, ManipulationDeltaRoutedEventArgs e)\n    {\n        if (isThumbDragged)\n        {\n            double targetThumbOffset = preManipulationThumbOffset + (Orientation == Orientation.Horizontal ? e.Cumulative.Translation.X : e.Cumulative.Translation.Y);\n            double scrollPresenterOffset = ScrollPresenterOffsetFromThumbOffset(targetThumbOffset);\n\n            int offsetChangeCorrelationId = RaiseScrollToRequested(\n                scrollPresenterOffset, ScrollingAnimationMode.Disabled);\n        }\n    }\n\n    private void InteractionFrameworkElement_ManipulationCompleted(object sender, ManipulationCompletedRoutedEventArgs e)\n    {\n        if (isThumbDragged)\n        {\n            isThumbDragged = false;\n            if (IsInteracting)\n            {\n                IsInteracting = false;\n                RaiseInteractionInfoChanged();\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical ColorPicker Layout in XAML\nDESCRIPTION: Example showing how to create a ColorPicker with vertical orientation and alpha channel enabled.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ColorPicker/ColorPicker.Orientation.md#2025-04-16_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<muxc:ColorPicker IsAlphaEnabled=\"True\" Orientation=\"Vertical\"/>\n```\n\n----------------------------------------\n\nTITLE: Jumping Horizontal Offset on Arrow Key Press in ScrollView (C#)\nDESCRIPTION: This snippet shows how to jump the horizontal offset of a ScrollView by specific values when processing Left and Right Arrow keystrokes. It uses the ScrollBy method with disabled animation for a FlipView-like experience.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnKeyUp(KeyRoutedEventArgs e)\n{\n    base.OnKeyUp(e);\n    if (e.Key == VirtualKey.Left)\n    {\n        _scrollView.ScrollBy(\n            horizontalOffsetDelta: -_previousGroup.Width,\n            verticalOffsetDelta: 0.0,\n            new ScrollingScrollOptions(ScrollingAnimationMode.Disabled));\n    }\n    else if (e.Key == VirtualKey.Right)\n    {\n        _scrollView.ScrollBy(\n            horizontalOffsetDelta: _currentGroup.Width,\n            verticalOffsetDelta: 0.0,\n            new ScrollingScrollOptions(ScrollingAnimationMode.Disabled));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SystemBackdrop API Structure in MIDL3\nDESCRIPTION: This snippet defines the API structure for SystemBackdrop and related classes. It includes MicaBackdrop, DesktopAcrylicBackdrop, and SystemBackdrop base class with their methods and properties, as well as integration with Window, Popup, and FlyoutBase classes.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-backdrop-api.md#2025-04-16_snippet_3\n\nLANGUAGE: MIDL3\nCODE:\n```\nnamespace Microsoft.UI.Xaml.Media\n{\n  [contract(Microsoft.UI.Xaml.WinUIContract, 4)]\n  [webhosthidden]\n  unsealed runtimeclass MicaBackdrop : Microsoft.UI.Xaml.Media.SystemBackdrop\n  {\n      MicaBackdrop();\n\n      Microsoft.UI.Composition.SystemBackdrops.MicaKind Kind { get; set; };\n\n      static Microsoft.UI.Xaml.DependencyProperty KindProperty { get; };\n  }\n\n  [contract(Microsoft.UI.Xaml.WinUIContract, 4)]\n  [webhosthidden]\n  unsealed runtimeclass DesktopAcrylicBackdrop : Microsoft.UI.Xaml.Media.SystemBackdrop\n  {\n      DesktopAcrylicBackdrop();\n  }\n\n  [contract(Microsoft.UI.Xaml.WinUIContract, 4)]\n  [webhosthidden]\n  [constructor_name(\"Microsoft.UI.Xaml.Media.ISystemBackdropFactory\")]\n  unsealed runtimeclass SystemBackdrop\n      : Microsoft.UI.Xaml.DependencyObject\n  {\n      [method_name(\"CreateInstance\")] protected SystemBackdrop();\n      \n      overridable void OnTargetConnected(\n        Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop connectedTarget,\n        Microsoft.UI.Xaml.XamlRoot xamlRoot);\n\n      overridable void OnTargetDisconnected(\n        Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop disconnectedTarget);\n\n      Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration GetDefaultSystemBackdropConfiguration(\n        Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop target, \n        Microsoft.UI.Xaml.XamlRoot xamlRoot);\n\n      overridable void OnDefaultSystemBackdropConfigurationChanged(\n        Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop target, \n        Microsoft.UI.Xaml.XamlRoot xamlRoot);\n  };\n}\n\nnamespace Microsoft.UI.Xaml\n{\n  [contract(Microsoft.UI.Xaml.WinUIContract, 1)]\n  [webhosthidden]\n  [contentproperty(\"Content\")]\n  unsealed runtimeclass Window\n  {\n    // ... existing ...\n\n      [contract(Microsoft.UI.Xaml.WinUIContract, 4)]\n      {\n          Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop;\n      }    \n  }\n}\n\nnamespace Microsoft.UI.Xaml.Controls.Primitives\n{\n  [contract(Microsoft.UI.Xaml.WinUIContract, 1)]\n  [webhosthidden]\n  [contentproperty(\"Child\")]\n  runtimeclass Popup\n      : Microsoft.UI.Xaml.FrameworkElement\n  {\n    // ... Existing ...\n\n    [contract(Microsoft.UI.Xaml.WinUIContract, 4)]\n    {\n        Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop;\n        static Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty{ get; };\n    }  \n  }\n\n  [contract(Microsoft.UI.Xaml.WinUIContract, 1)]\n  [webhosthidden]\n  [constructor_name(\"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory\")]\n  unsealed runtimeclass FlyoutBase\n      : Microsoft.UI.Xaml.DependencyObject\n  {\n    // ... existing ...\n\n    [contract(Microsoft.UI.Xaml.WinUIContract, 4)]\n    {\n        Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop;\n        static Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty{ get; };\n    }  \n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Thumb Offset to ScrollPresenter Offset in C#\nDESCRIPTION: Converts a given thumb offset into a corresponding scroll presenter offset by applying a scaling factor based on parent dimensions and scroll range. This is used to translate visual thumb position to content offset.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nprivate double ScrollPresenterOffsetFromThumbOffset(double thumbOffset)\n{\n    double scrollPresenterOffset = 0.0;\n\n    if (interactionFrameworkElement != null)\n    {\n        double parentDimension = 0.0;\n        double interactionFrameworkElementDim = Orientation == Orientation.Horizontal ? interactionFrameworkElement.ActualWidth : interactionFrameworkElement.ActualHeight;\n        FrameworkElement parent = interactionFrameworkElement.Parent as FrameworkElement;\n        if (parent != null)\n        {\n            parentDimension = Orientation == Orientation.Horizontal ? parent.ActualWidth : parent.ActualHeight;\n        }\n        if (parentDimension != interactionFrameworkElementDim)\n        {\n            scrollPresenterOffset = thumbOffset * (maxOffset - minOffset) / (parentDimension - interactionFrameworkElementDim);\n        }\n    }\n\n    return scrollPresenterOffset;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollPresenter Class in C#\nDESCRIPTION: Defines the ScrollPresenter class that inherits from FrameworkElement and implements IScrollAnchorProvider. This class provides comprehensive scrolling and zooming functionality with properties and methods for controlling scroll behavior, zoom factors, and event handling.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n[contentproperty(\"Content\")]\nunsealed runtimeclass Microsoft.UI.Xaml.Controls.Primittives.ScrollPresenter\n    : Microsoft.UI.Xaml.FrameworkElement,\n      Microsoft.UI.Xaml.Controls.IScrollAnchorProvider\n{\n    ScrollPresenter();\n\n    Microsoft.UI.Xaml.Media.Brush Background { get; set; };\n    Microsoft.UI.Xaml.UIElement Content { get; set; };\n    Microsoft.UI.Composition.CompositionPropertySet ExpressionAnimationSources { get; };\n    Double HorizontalOffset { get; };\n    Double VerticalOffset { get; };\n    Single ZoomFactor { get; };\n    Double ExtentWidth { get; };\n    Double ExtentHeight { get; };\n    Double ViewportWidth { get; };\n    Double ViewportHeight { get; };\n    Double ScrollableWidth { get; };\n    Double ScrollableHeight { get; };\n    Microsoft.UI.Xaml.Controls.ScrollingContentOrientation ContentOrientation { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingChainMode HorizontalScrollChainMode { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingChainMode VerticalScrollChainMode { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingRailMode HorizontalScrollRailMode { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingRailMode VerticalScrollRailMode { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingScrollMode HorizontalScrollMode { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingScrollMode VerticalScrollMode { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingChainMode ZoomChainMode { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingZoomMode ZoomMode { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingInputKinds IgnoredInputKinds { get; set; };\n    Double MinZoomFactor { get; set; };\n    Double MaxZoomFactor { get; set; };\n    Microsoft.UI.Xaml.Controls.ScrollingInteractionState State { get; };\n    IScrollController HorizontalScrollController { get; set; };\n    IScrollController VerticalScrollController { get; set; };\n    Double HorizontalAnchorRatio { get; set; };\n    Double VerticalAnchorRatio { get; set; };\n    Windows.Foundation.Collections.IVector<ScrollSnapPointBase> HorizontalSnapPoints { get; };\n    Windows.Foundation.Collections.IVector<ScrollSnapPointBase> VerticalSnapPoints { get; };\n    Windows.Foundation.Collections.IVector<ZoomSnapPointBase> ZoomSnapPoints { get; };\n    [method_name(\"ScrollTo\")]\n    Int32 ScrollTo(\n        Double horizontalOffset,\n        Double verticalOffset);\n    [method_name(\"ScrollToWithOptions\")]\n    Int32 ScrollTo(\n        Double horizontalOffset,\n        Double verticalOffset,\n        Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options);\n    [method_name(\"ScrollBy\")]\n    Int32 ScrollBy(\n        Double horizontalOffsetDelta,\n        Double verticalOffsetDelta);\n    [method_name(\"ScrollByWithOptions\")]\n    Int32 ScrollBy(\n        Double horizontalOffsetDelta,\n        Double verticalOffsetDelta,\n        Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options);\n    Int32 AddScrollVelocity(\n        Windows.Foundation.Numerics.Vector2 offsetsVelocity,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> inertiaDecayRate);\n    [method_name(\"ZoomTo\")]\n    Int32 ZoomTo(\n        Single zoomFactor,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint);\n    [method_name(\"ZoomToWithOptions\")]\n    Int32 ZoomTo(\n        Single zoomFactor,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,\n        Microsoft.UI.Xaml.Controls.ScrollingZoomOptions options);\n    [method_name(\"ZoomBy\")]\n    Int32 ZoomBy(\n        Single zoomFactorDelta,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint);\n    [method_name(\"ZoomByWithOptions\")]\n    Int32 ZoomBy(\n        Single zoomFactorDelta,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,\n        Microsoft.UI.Xaml.Controls.ScrollingZoomOptions options);\n    Int32 AddZoomVelocity(\n        Single zoomFactorVelocity,\n        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,\n        Windows.Foundation.IReference<Single> inertiaDecayRate);\n\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Object> ExtentChanged;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Object> StateChanged;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Object> ViewChanged;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs> ScrollAnimationStarting;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs> ZoomAnimationStarting;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs> ScrollCompleted;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs> ZoomCompleted;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs> BringingIntoView;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs> AnchorRequested;\n    event Windows.Foundation.TypedEventHandler<ScrollPresenter, MU_XCP_NAMESPACE.ScrollingViewChangeRequestedEventArgs> ViewChangeRequested;\n\n    static Microsoft.UI.Xaml.DependencyProperty BackgroundProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty ContentProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty ContentOrientationProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollChainModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalScrollChainModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollRailModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalScrollRailModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalScrollModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty ZoomChainModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty ZoomModeProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty IgnoredInputKindsProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty MinZoomFactorProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty MaxZoomFactorProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty HorizontalAnchorRatioProperty { get; };\n    static Microsoft.UI.Xaml.DependencyProperty VerticalAnchorRatioProperty { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TodayPressedBackground Property in CalendarView (XML)\nDESCRIPTION: Example of setting the TodayPressedBackground property to customize the appearance when clicking/tapping the current date using the AccentFillColorTertiaryBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView TodayPressedBackground='{StaticResource AccentFillColorTertiaryBrush}'/>\n```\n\n----------------------------------------\n\nTITLE: Window.AppWindow Property Declaration\nDESCRIPTION: This code snippet shows the declaration of the Window.AppWindow property in C#. It returns the AppWindow associated with the Window object.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/appwindow-spec.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic Microsoft.UI.Windowing.AppWindow Window.AppWindow { get; }\n```\n\n----------------------------------------\n\nTITLE: Calculating Horizontal Thumb Offset in C#\nDESCRIPTION: Calculates the horizontal position of the thumb within the scrollbar based on the current offset, min/max offset values, and parent container width. Returns 0 if elements are null or offsets are equal.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nprivate double HorizontalThumbOffset\n{\n    get\n    {\n        if (interactionFrameworkElement != null)\n        {\n            double parentWidth = 0.0;\n            FrameworkElement parent = interactionFrameworkElement.Parent as FrameworkElement;\n            if (parent != null)\n            {\n                parentWidth = parent.ActualWidth;\n            }\n            if (maxOffset != minOffset)\n            {\n                return (offset - minOffset) / (maxOffset - minOffset) * (parentWidth - interactionFrameworkElement.Width);\n            }\n        }\n\n        return 0.0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: IAnimatedVisual2 Interface Definition in C#\nDESCRIPTION: Definition of the IAnimatedVisual2 interface that extends IAnimatedVisual to add methods for controlling animation resource lifecycle. It provides methods to explicitly create and destroy animation objects to optimize performance.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/AnimatedVisualPlayer Spec.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\ninterface IAnimatedVisual2 requires IAnimatedVisual\n{\n    void InstantiateAnimations(Double progressHint);\n    void DestroyAnimations();\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Vertical Scroll Controller in C# for ScrollPresenter\nDESCRIPTION: This code demonstrates how to set a custom vertical scroll controller for a ScrollPresenter. It assigns a TimelineScrubber object to the VerticalScrollController property.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nmyScrollPresenter.VerticalScrollController = myTimelineScrubber;\n```\n\n----------------------------------------\n\nTITLE: Managing Scroll Velocity in C#\nDESCRIPTION: Handles adding scroll velocity with configurable inertia. Calculates velocity based on offset delta, applies minimum velocity thresholds, and tracks correlation IDs to prevent duplicating operations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nprivate bool RaiseAddScrollVelocityRequested(double offsetDelta)\n{\n    if (AddScrollVelocityRequested == null)\n    {\n        return false;\n    }\n\n    // Minimum initial velocity required by InteractionTracker.TryUpdatePositionWithAdditionalVelocity to affect the Position.\n    const double s_minimumVelocity = 30.0;\n\n    // Inertia decay rate for SmallChange / LargeChange animated Value changes.\n    const float s_inertiaDecayRate = 0.9995f;\n\n    // Approximate additional velocity required with decay s_inertiaDecayRate to move offset by one pixel.\n    const double s_velocityNeededPerPixel = 7.6;\n\n    double offsetVelocity = operationsCount == 0 ? s_minimumVelocity : 0.0;\n\n    if (offsetDelta < 0.0)\n    {\n        offsetVelocity *= -1;\n    }\n    offsetVelocity += offsetDelta * s_velocityNeededPerPixel;\n\n    ScrollControllerAddScrollVelocityRequestedEventArgs addScrollVelocityRequestedEventArgs = new ScrollControllerAddScrollVelocityRequestedEventArgs((float)offsetVelocity, s_inertiaDecayRate);\n\n    AddScrollVelocityRequested(this, addScrollVelocityRequestedEventArgs);\n\n    int correlationId = addScrollVelocityRequestedEventArgs.CorrelationId;\n\n    // Only increment operationsCount when the returned OffsetsChangeCorrelationId represents a new request that was not coalesced with a pending request. \n    if (correlationId != -1 && correlationId != lastOffsetChangeCorrelationIdForAddScrollVelocity)\n    {\n        lastOffsetChangeCorrelationIdForAddScrollVelocity = correlationId;\n        operationsCount++;\n        return true;\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CalendarItemHoverBackground Property in CalendarView (XML)\nDESCRIPTION: Example of setting the CalendarItemHoverBackground property to customize the background color when hovering over any non-Today calendar item using SubtleFillColorSecondaryBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView CalendarItemHoverBackground='{StaticResource SubtleFillColorSecondaryBrush}'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Zoom Velocity to ScrollView in XAML\nDESCRIPTION: Explains the AddZoomVelocity method of ScrollView, which asynchronously adds zooming velocity. Details the default inertia decay rate, how to customize it, and the effects of changing the ZoomFactor on other ScrollView properties.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_56\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.AddZoomVelocity method\n\nAsynchronously adds zooming velocity. The State property transitions to the ScrollingInteractionState.Inertia \nvalue during the resulting inertial zoom. Because it does not consume any CompositionAnimation, the \nZoomAnimationStarting event is not raised. \n\nWhen the centerPoint parameter is null, the methods ZoomTo, ZoomBy and AddZoomVelocity use the center \nof the viewport as the zoom center point.\n\nBy default the `ScrollView` control uses an inertia decay rate of 0.95 for inertial zooming operations. \nThat default decay rate can be overwritten by providing a non-null inertiaDecayRate parameter to the \nAddZoomVelocity method.\nThat custom decay rate is then applied during the duration of that zoom operation alone. If the inertial \nzoom is interrupted with a touch gesture or with a new AddZoomVelocity call, the application of that \ncustom decay rate is cancelled. \n\nInertia decay rates affect the inertial velocity decrease (decay). Values must be between 0.0 and 1.0. \nThe closer the value is to 1.0, the faster the deceleration. A value of 0.0 represents no decay and \nresults in a constant velocity zoom.\n\nChanging the ZoomFactor does not affect the `ScrollView`'s ViewportWidth, ViewportHeight, ExtentWidth, \nExtentHeight properties. It does potentially affect the HorizontalOffset, VerticalOffset, ScrollableWidth \nand ScrollableHeight properties.\n\nFor instance, starting with HorizontalOffset=10, VerticalOffset=20, ZoomFactor=1 and changing the \nZoomFactor to 2 with a centerPoint at (0, 0) results in HorizontalOffset=20, VerticalOffset=40.\n\nThe ScrollableWidth being defined as Max(0, ZoomFactor x ExtentWidth - ViewportWidth) is affected by \nthe change too - it is increased.\n\nThe ScrollableHeight being defined as Max(0, ZoomFactor x ExtentHeight - ViewportHeight) is affected \nby the change too - it is increased.\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBar.IsBackButtonVisible Property in C#\nDESCRIPTION: Gets and sets TitleBar's BackButton visibility. The default value is false.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\npublic Boolean IsBackButtonVisible { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Implementing IScrollController with ScrollBar in C#\nDESCRIPTION: A complete implementation of the IScrollController interface that wraps a ScrollBar control. This implementation handles scroll events, value changes, and scroll mode updates while maintaining scroll state and boundaries. The controller does not support UI-thread-independent scrolling since InteractionElement returns null.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScrollBarController : IScrollController\n{\n    private ScrollBar scrollBar = null;\n    private ScrollingScrollMode scrollMode = ScrollingScrollMode.Disabled;\n    private int lastOffsetChangeCorrelationIdForScrollTo = -1;\n    private int lastOffsetChangeCorrelationIdForScrollBy = -1;\n    private int lastOffsetChangeCorrelationIdForAddScrollVelocity = -1;\n    private int operationsCount = 0;\n    private double lastScrollBarValue = 0.0;\n    private double lastOffset = 0.0;\n\n    public event TypedEventHandler<IScrollController, ScrollControllerScrollToRequestedEventArgs> ScrollToRequested;\n    public event TypedEventHandler<IScrollController, ScrollControllerScrollByRequestedEventArgs> ScrollByRequested;\n    public event TypedEventHandler<IScrollController, ScrollControllerAddScrollVelocityRequestedEventArgs> AddScrollVelocityRequested;\n    public event TypedEventHandler<IScrollController, ScrollControllerInteractionRequestedEventArgs> InteractionRequested;\n    public event TypedEventHandler<IScrollController, object> InteractionInfoChanged;\n\n    public ScrollBarController(ScrollBar scrollBar)\n    {\n        this.scrollBar = scrollBar;\n\n        scrollBar.SmallChange = 16.0;\n        scrollBar.Scroll += ScrollBarScroll;\n        scrollBar.RegisterPropertyChangedCallback(Control.IsEnabledProperty, new DependencyPropertyChangedCallback(ScrollBarPropertyChanged));\n    }\n\n    public bool AreInteractionsAllowed\n    {\n        get;\n        private set;\n    }\n\n    public bool IsInteracting\n    {\n        get;\n        private set;\n    }\n\n    public bool IsInteractionElementRailEnabled\n    {\n        get\n        {\n            // Unused because InteractionElement returns null.\n            return false;\n        }\n    }\n\n    public UIElement InteractionElement\n    {\n        get\n        {\n            // This IScrollController implementation has no touch-manipulatable element.\n            return null;\n        }\n    }\n\n    public Orientation InteractionElementScrollOrientation\n    {\n        get\n        {\n            return scrollBar.Orientation;\n        }\n    }\n\n    public void SetExpressionAnimationSources(\n        CompositionPropertySet propertySet,\n        string minOffsetPropertyName,\n        string maxOffsetPropertyName,\n        string offsetPropertyName,\n        string multiplierPropertyName)\n    {\n        // Unused because InteractionElement returns null.\n    }\n\n    public void SetScrollMode(ScrollingScrollMode scrollMode)\n    {\n        this.scrollMode = scrollMode;\n        UpdateAreInteractionsAllowed();\n    }\n\n    public void SetValues(\n        double minOffset,\n        double maxOffset,\n        double offset,\n        double viewport)\n    {\n        if (maxOffset < minOffset)\n        {\n            throw new ArgumentOutOfRangeException(\"maxOffset cannot be smaller than minOffset.\");\n        }\n\n        if (viewport < 0.0)\n        {\n            throw new ArgumentOutOfRangeException(\"viewport cannot be negative.\");\n        }\n\n        offset = Math.Max(minOffset, offset);\n        offset = Math.Min(maxOffset, offset);\n        lastOffset = offset;\n\n        if (minOffset < scrollBar.Minimum)\n        {\n            scrollBar.Minimum = minOffset;\n        }\n\n        if (maxOffset > scrollBar.Maximum)\n        {\n            scrollBar.Maximum = maxOffset;\n        }\n\n        if (minOffset != scrollBar.Minimum)\n        {\n            scrollBar.Minimum = minOffset;\n        }\n\n        if (maxOffset != scrollBar.Maximum)\n        {\n            scrollBar.Maximum = maxOffset;\n        }\n\n        // Default amount to scroll when hitting the SmallIncrement/SmallDecrement buttons: 1/8 of the viewport size.\n        // This amount can be overridden by setting the ScrollBar.SmallChange property to something else than double.NaN.\n        const double s_defaultViewportToSmallChangeRatio = 8.0;\n\n        scrollBar.ViewportSize = viewport;\n        scrollBar.LargeChange = viewport;\n        scrollBar.SmallChange = Math.Max(1.0, viewport / s_defaultViewportToSmallChangeRatio);\n\n        // The ScrollBar Value is only updated when there is no operation in progress.\n        if (operationsCount == 0 || scrollBar.Value < minOffset || scrollBar.Value > maxOffset)\n        {\n            scrollBar.Value = offset;\n            lastScrollBarValue = offset;\n        }\n\n        // Potentially changed ScrollBar.Minimum / ScrollBar.Maximum value(s) may have an effect\n        // on the read-only IScrollController.AreInteractionsAllowed property.\n        UpdateAreInteractionsAllowed();\n    }\n\n    public CompositionAnimation GetScrollAnimation(\n        int correlationId,\n        Vector2 currentPosition,\n        CompositionAnimation defaultAnimation)\n    {\n        return null;\n    }\n\n    public void NotifyScrollCompleted(int correlationId)\n    {\n        operationsCount--;\n\n        if (operationsCount == 0 && scrollBar.Value != lastOffset)\n        {\n            scrollBar.Value = lastOffset;\n            lastScrollBarValue = lastOffset;\n        }\n    }\n\n    private void ScrollBarScroll(object sender, ScrollEventArgs e)\n    {\n        ScrollEventType scrollEventType = e.ScrollEventType;\n\n        if (scrollMode == ScrollingScrollMode.Disabled && scrollEventType != ScrollEventType.ThumbPosition)\n        {\n            // This ScrollBar is not interactive. Restore its previous Value.\n            scrollBar.Value = lastScrollBarValue;\n            return;\n        }\n\n        switch (scrollEventType)\n        {\n            case ScrollEventType.First:\n            case ScrollEventType.Last:\n                {\n                    break;\n                }\n            case ScrollEventType.EndScroll:\n                {\n                    if (IsInteracting)\n                    {\n                        IsInteracting = false;\n                        RaiseInteractionInfoChanged();\n                    }\n                    break;\n                }\n            case ScrollEventType.LargeDecrement:\n            case ScrollEventType.LargeIncrement:\n            case ScrollEventType.SmallDecrement:\n            case ScrollEventType.SmallIncrement:\n            case ScrollEventType.ThumbPosition:\n            case ScrollEventType.ThumbTrack:\n                {\n                    if (scrollEventType == ScrollEventType.ThumbTrack)\n                    {\n                        if (!IsInteracting)\n                        {\n                            IsInteracting = true;\n                            RaiseInteractionInfoChanged();\n                        }\n                    }\n\n                    bool offsetChangeRequested = false;\n\n                    if (scrollEventType == ScrollEventType.ThumbPosition ||\n                        scrollEventType == ScrollEventType.ThumbTrack)\n                    {\n                        offsetChangeRequested = RaiseScrollToRequested(e.NewValue);\n                    }\n                    else\n                    {\n                        double offsetDelta = 0.0;\n\n                        switch (scrollEventType)\n                        {\n                            case ScrollEventType.LargeDecrement:\n                                offsetDelta = -Math.Min(lastScrollBarValue - scrollBar.Minimum, scrollBar.LargeChange);\n                                break;\n                            case ScrollEventType.LargeIncrement:\n                                offsetDelta = Math.Min(scrollBar.Maximum - lastScrollBarValue, scrollBar.LargeChange);\n                                break;\n                            case ScrollEventType.SmallDecrement:\n                                offsetDelta = -Math.Min(lastScrollBarValue - scrollBar.Minimum, scrollBar.SmallChange);\n                                break;\n                            case ScrollEventType.SmallIncrement:\n                                offsetDelta = Math.Min(scrollBar.Maximum - lastScrollBarValue, scrollBar.SmallChange);\n                                break;\n                        }\n\n                        const double s_minMaxEpsilon = 0.001;\n\n                        // When the requested Value is near the Mininum or Maximum, include a little additional velocity\n                        // to ensure the extreme value is reached.\n                        if (e.NewValue - scrollBar.Minimum < s_minMaxEpsilon)\n                        {\n                            offsetDelta -= s_minMaxEpsilon;\n                        }\n                        else if (scrollBar.Maximum - e.NewValue < s_minMaxEpsilon)\n                        {\n                            offsetDelta += s_minMaxEpsilon;\n                        }\n\n                        if (new UISettings().AnimationsEnabled)\n                        {\n                            offsetChangeRequested = RaiseAddScrollVelocityRequested(offsetDelta);\n                        }\n                        else\n                        {\n                            offsetChangeRequested = RaiseScrollByRequested(offsetDelta);\n                        }\n                    }\n\n                    if (!offsetChangeRequested)\n                    {\n                        // This request could not be requested, restore the previous Value.\n                        scrollBar.Value = lastScrollBarValue;\n                    }\n                    break;\n                }\n        }\n\n        lastScrollBarValue = scrollBar.Value;\n    }\n\n    private void ScrollBarPropertyChanged(DependencyObject sender, DependencyProperty e)\n    {\n        if (e == Control.IsEnabledProperty)\n        {\n            // Potentially changed ScrollBar.Minimum / ScrollBar.Maximum value(s) may have an effect\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled CalendarView with Selected Dates in C#\nDESCRIPTION: This snippet demonstrates how to set selected dates and disable a CalendarView control. It adds two specific dates to the SelectedDates collection and then disables the entire control, maintaining the TodayForeground brush for the current date.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\ncalendarView1.SelectedDates.Add(new DateTime(2021, 4, 12));\ncalendarView1.SelectedDates.Add(new DateTime(2021, 4, 20));\n\ncalendarView1.IsEnabled = false;\n```\n\n----------------------------------------\n\nTITLE: Complete API Details Declaration for Custom Resource Manager\nDESCRIPTION: Full namespace and class declarations for the ResourceManagerRequested event and ResourceManagerRequestedEventArgs class in the Microsoft.UI.Xaml namespace.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/custom-iresourcemanager-spec.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nnamespace Microsoft.UI.Xaml\n{\n  runtimeclass Application\n  {\n    // existing ...\n\n    event Windows.Foundation.TypedEventHandler<Application,Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs> \n        ResourceManagerRequested;\n  };\n\n  runtimeclass ResourceManagerRequestedEventArgs\n  {\n    IResourceManager CustomResourceManager;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Thumb Animation Based on Orientation in C#\nDESCRIPTION: Starts the thumb animation for the appropriate axis (X or Y) based on the specified orientation. Uses the previously configured thumbOffsetAnimation to animate the interaction visual.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nprivate void StartThumbAnimation(Orientation orientation)\n{\n    if (interactionVisual != null && thumbOffsetAnimation != null)\n    {\n        if (orientation == Orientation.Horizontal)\n        {\n            interactionVisual.StartAnimation(\"Translation.X\", thumbOffsetAnimation);\n        }\n        else\n        {\n            interactionVisual.StartAnimation(\"Translation.Y\", thumbOffsetAnimation);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IScrollController Interface and Supporting Classes\nDESCRIPTION: Implements the scroll controller interface and related event argument classes for handling scroll interactions, animations, and state management.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\ninterface Microsoft.UI.Xaml.Controls.Primitives.IScrollController\n{\n    Boolean AreInteractionsAllowed { get; };\n    Boolean IsInteracting { get; };\n    Boolean IsInteractionElementRailEnabled { get; };\n    Microsoft.UI.Xaml.UIElement InteractionElement { get; };\n    Microsoft.UI.Xaml.Controls.Orientation InteractionElementScrollOrientation { get; };\n\n    void SetExpressionAnimationSources(\n            Microsoft.UI.Composition.CompositionPropertySet propertySet,\n            String minOffsetPropertyName,\n            String maxOffsetPropertyName,\n            String offsetPropertyName,\n            String multiplierPropertyName);\n    void SetScrollMode(\n            Microsoft.UI.Xaml.Controls.ScrollingScrollMode scrollMode);\n    void SetValues(\n            Double minOffset,\n            Double maxOffset,\n            Double offset,\n            Double viewport);\n    Microsoft.UI.Composition.CompositionAnimation GetScrollAnimation(\n            Int32 correlationId,\n            Windows.Foundation.Numerics.Vector2 currentPosition,\n            Microsoft.UI.Composition.CompositionAnimation defaultAnimation);\n    void NotifyScrollCompleted(\n            Int32 correlationId);\n\n    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerScrollToRequestedEventArgs> ScrollToRequested;\n    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerScrollByRequestedEventArgs> ScrollByRequested;\n    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerAddScrollVelocityRequestedEventArgs> AddScrollVelocityRequested;\n    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerInteractionRequestedEventArgs> InteractionRequested;\n    event Windows.Foundation.TypedEventHandler<IScrollController, Object> InteractionInfoChanged;\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs\n{\n    ScrollControllerScrollToRequestedEventArgs(Double offset, Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options);\n\n    Double Offset { get; };\n    Microsoft.UI.Xaml.Controls.ScrollingScrollOptions Options { get; };\n    Int32 CorrelationId { get; set; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs\n{\n    ScrollControllerScrollByRequestedEventArgs(Double offsetDelta, Microsoft.UI.Xaml.Controls.ScrollingScrollOptions options);\n\n    Double OffsetDelta { get; };\n    Microsoft.UI.Xaml.Controls.ScrollingScrollOptions Options { get; };\n    Int32 CorrelationId { get; set; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs\n{\n    ScrollControllerAddScrollVelocityRequestedEventArgs(Single offsetVelocity, Windows.Foundation.IReference<Single> inertiaDecayRate);\n\n    Single OffsetVelocity { get; };\n    Windows.Foundation.IReference<Single> InertiaDecayRate { get; };\n    Int32 CorrelationId { get; set; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerInteractionRequestedEventArgs\n{\n    ScrollControllerInteractionRequestedEventArgs(Microsoft.UI.Input.PointerPoint pointerPoint);\n\n    Microsoft.UI.Input.PointerPoint PointerPoint { get; };\n    Boolean Handled { get; set; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.Primitives.ScrollingViewChangeRequestedEventArgs\n{\n    Boolean IsAnimating { get; };\n    Double TargetHorizontalOffset { get; };\n    Double TargetVerticalOffset { get; };\n    Single TargetZoomFactor { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Using OpenPaneLength in NavigationView ControlTemplate (XML)\nDESCRIPTION: This snippet demonstrates how the OpenPaneLength property is used in the ControlTemplate for NavigationView to set the SplitView.OpenPaneLength. It binds the OpenPaneLength from the TemplateSettings to the SplitView control.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/NavigationViewTemplateSettings-OpenPaneLength.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ControlTemplate TargetType=\"NavigationView\">\n    <!-- ... -->\n    <SplitView\n        OpenPaneLength=\"{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.OpenPaneWidth}\"\n        Background=\"{TemplateBinding Background}\"\n        BorderBrush=\"{ThemeResource NavigationViewItemSeparatorForeground}\"\n        BorderThickness=\"{ThemeResource NavigationViewBorderThickness}\"\n        CompactPaneLength=\"{TemplateBinding CompactPaneLength}\"\n        DisplayMode=\"Inline\"\n        IsPaneOpen=\"{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}\"\n        IsTabStop=\"False\"\n        PaneBackground=\"{ThemeResource NavigationViewDefaultPaneBackground}\">\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Content Extent Support for ScrollPresenter\nDESCRIPTION: This code proposes APIs for defining virtual content extents in ScrollPresenter, similar to the ScrollView proposal. These properties and methods would enable scrolling beyond the actual content boundaries.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_73\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass ScrollPresenter : ...\n{\n    // Default Value: 0\n    double LeftVirtualExtent { get; };\n\n    // Default Value: 0\n    double RightVirtualExtent { get; };\n\n    // Default Value: 0\n    double TopVirtualExtent { get; };\n\n    // Default Value: 0\n    double BottomVirtualExtent { get; };\n\n    void UpdateHorizontalVirtualExtents(\n        double leftVirtualExtent,\n        double rightVirtualExtent,\n        double horizontalOffset);\n\n    void UpdateVerticalVirtualExtents(\n        double topVirtualExtent,\n        double bottomVirtualExtent,\n        double verticalOffset);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Updating InfoBadge in C#\nDESCRIPTION: This C# code snippet shows how to initialize NavigationViewItems with InfoBadges and update them when a new message is received.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed partial class MainPage : Page\n{\n\n    public MainPage()\n    {\n        this.InitializeComponent();\n\n        \n        // Initialize icons for NavigationView items\n        SymbolIcon HomeIcon = new SymbolIcon(Symbol.Home);\n        SymbolIcon AcctIcon = new SymbolIcon(Symbol.Contact);\n        SymbolIcon MailIcon = new SymbolIcon(Symbol.Mail);\n\n        // Initialize an InfoBadge for the Mail item that is not visible on page load\n        InfoBadge MailBadge = new InfoBadge();\n        MailBadge.Value = 0;\n        MailBadge.IsOpen = false;\n\n        //Populate NavigationView\n        List<CustomNavObject> navItems = new List<CustomNavObject>(){\n            new CustomNavObject(\"Home\", \"home\", HomeIcon),\n            new CustomNavObject(\"Account\", \"acct\", AccountIcon),\n            new CustomNavObject(\"Mail\", \"mail\", MailIcon, MailBadge)\n        };\n    }\n\n    // This function is called when a new message is received.\n    private void OnMessageReceived(string msg)\n    {\n        //Once a new message is received, update the InfoBadge being shown on the Mail navigation item. \n           MailBadge.Value +=1;\n           MailBadge.IsOpen = true;\n    }\n}\n\npublic class CustomNavObject\n{\n    public string Title { get; set; }\n    public string Tag { get; set; }\n    public IconSource ItemIcon { get; set; }\n    public InfoBadge ItemInfoBadge { get; set; }\n\n    public CustomNavObject(string title, string tag, IconSource icon)\n    {\n        Title = title;\n        Tag = tag;\n        ItemIcon =  icon;\n    }\n\n    public CustomNavObject(string title, string tag, IconSource icon, InfoBadge badge)\n    {\n        Title = title;\n        Tag = tag;\n        ItemIcon =  icon;\n        ItemInfoBadge = badge;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Interaction Element Scroll Multiplier in C#\nDESCRIPTION: Updates the scroll multiplier for interaction elements by inserting a scalar value into expression animation sources. This is used to control the scrolling behavior.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UpdateInteractionElementScrollMultiplier()\n{\n    if (expressionAnimationSources != null && !string.IsNullOrWhiteSpace(multiplierPropertyName))\n    {\n        float interactionVisualScrollMultiplier = InteractionElementScrollMultiplier;\n\n        expressionAnimationSources.InsertScalar(multiplierPropertyName, interactionVisualScrollMultiplier);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Zoom in ScrollViewer\nDESCRIPTION: The equivalent ScrollViewer implementation for enabling zoom functionality. Sets ZoomMode to Enabled to allow users to zoom in and out of content through user interactions.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<ScrollViewer Width=\"500\" Height=\"400\" HorizontalScrollBarVisibility=\"Auto\" ZoomMode=\"Enabled\">\n    <Image Source=\"Assets/LargeParisMap.png\"/>\n</ScrollViewer>\n```\n\n----------------------------------------\n\nTITLE: Simple InfoBadge XAML Example\nDESCRIPTION: This XAML snippet shows a simple InfoBadge that displays the number of unread emails.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<InfoBadge x:Name=\"emailInfoBadge\" Value=\"{x:Bind numUnreadMail}\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting CalendarItemPressedBackground Property in CalendarView (XML)\nDESCRIPTION: Example of setting the CalendarItemPressedBackground property to customize the background color when pressing a non-Today calendar item using SubtleFillColorTertiaryBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView CalendarItemPressedBackground='{StaticResource SubtleFillColorTertiaryBrush}'/>\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollToRequested Event in IScrollController\nDESCRIPTION: This event allows the scroll controller to request scrolling to a specific offset. The ScrollPresenter handles this event and provides a correlation ID for tracking the operation. This is useful for scenarios like thumb drag interactions.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_19\n\nLANGUAGE: cs\nCODE:\n```\nevent Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerScrollToRequestedEventArgs> ScrollToRequested\n```\n\n----------------------------------------\n\nTITLE: ScrollViewer Implementation with Viewbox and Binding\nDESCRIPTION: Shows the traditional ScrollViewer approach for viewport content scaling, which requires binding Viewbox's MaxHeight/MaxWidth to the ScrollViewer's ViewportHeight/ViewportWidth properties. This is more complex than the ScrollView's ContentOrientation=\"None\" approach.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<ScrollViewer x:Name=\"outputScrollViewer\" HorizontalScrollBarVisibility=\"Auto\">\n    <Viewbox MaxWidth=\"{x:Bind outputScrollViewer.ViewportWidth, Mode=OneWay}\"  \n             MaxHeight=\"{x:Bind outputScrollViewer.ViewportHeight, Mode=OneWay}\">\n        <Image Source=\"Assets/LargeEiffelTower.png\"/>\n    </Viewbox>\n</ScrollViewer>\n```\n\n----------------------------------------\n\nTITLE: Default ScrollView Control Template in XAML\nDESCRIPTION: The default control template for ScrollView that shows its structure, including a ScrollPresenter, ScrollBars, and supporting UI elements. The template binds ScrollView properties to the inner ScrollPresenter.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<Style TargetType=\"local:ScrollView\">\n    <Setter Property=\"Background\" Value=\"Transparent\"/>\n    <Setter Property=\"IsTabStop\" Value=\"False\"/>\n    <Setter Property=\"UseSystemFocusVisuals\" Value=\"{StaticResource UseSystemFocusVisuals}\"/>\n    <Setter Property=\"ContentOrientation\" Value=\"Vertical\"/>\n    <Setter Property=\"HorizontalScrollMode\" Value=\"Enabled\"/>\n    <Setter Property=\"HorizontalScrollChainMode\" Value=\"Auto\"/>\n    <Setter Property=\"HorizontalScrollRailMode\" Value=\"Enabled\"/>\n    <Setter Property=\"VerticalScrollMode\" Value=\"Enabled\"/>\n    <Setter Property=\"VerticalScrollChainMode\" Value=\"Auto\"/>\n    <Setter Property=\"VerticalScrollRailMode\" Value=\"Enabled\"/>\n    <Setter Property=\"ZoomChainMode\" Value=\"Auto\"/>\n    <Setter Property=\"ZoomMode\" Value=\"Disabled\"/>\n    <Setter Property=\"IgnoredInputKinds\" Value=\"None\"/>\n    <Setter Property=\"MinZoomFactor\" Value=\"0.1\"/>\n    <Setter Property=\"MaxZoomFactor\" Value=\"10.0\"/>\n    <Setter Property=\"HorizontalAnchorRatio\" Value=\"0.0\"/>\n    <Setter Property=\"VerticalAnchorRatio\" Value=\"0.0\"/>\n    <Setter Property=\"Template\">\n    <Setter.Value>\n        <ControlTemplate TargetType=\"local:ScrollView\">\n            <Grid x:Name=\"PART_Root\">\n                <VisualStateManager.VisualStateGroups>\n                    ...\n                </VisualStateManager.VisualStateGroups>\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"*\"/>\n                    <RowDefinition Height=\"Auto\"/>\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"*\"/>\n                    <ColumnDefinition Width=\"Auto\"/>\n                </Grid.ColumnDefinitions>\n                <local:ScrollPresenter x:Name=\"PART_ScrollPresenter\"\n                                Grid.ColumnSpan=\"2\" Grid.RowSpan=\"2\"\n                                Background=\"{TemplateBinding Background}\"\n                                Margin=\"{TemplateBinding Padding}\"\n                                Content=\"{TemplateBinding Content}\"\n                                ContentOrientation=\"{TemplateBinding ContentOrientation}\"\n                                HorizontalScrollMode=\"{TemplateBinding HorizontalScrollMode}\"\n                                VerticalScrollMode=\"{TemplateBinding VerticalScrollMode}\"\n                                HorizontalScrollChainMode=\"{TemplateBinding HorizontalScrollChainMode}\"\n                                HorizontalScrollRailMode=\"{TemplateBinding HorizontalScrollRailMode}\"\n                                VerticalScrollChainMode=\"{TemplateBinding VerticalScrollChainMode}\"\n                                VerticalScrollRailMode=\"{TemplateBinding VerticalScrollRailMode}\"\n                                ZoomMode=\"{TemplateBinding ZoomMode}\"\n                                ZoomChainMode=\"{TemplateBinding ZoomChainMode}\"\n                                IgnoredInputKinds=\"{TemplateBinding IgnoredInputKinds}\"\n                                MinZoomFactor=\"{TemplateBinding MinZoomFactor}\"\n                                MaxZoomFactor=\"{TemplateBinding MaxZoomFactor}\"\n                                HorizontalAnchorRatio=\"{TemplateBinding HorizontalAnchorRatio}\"\n                                VerticalAnchorRatio=\"{TemplateBinding VerticalAnchorRatio}\"/>\n                    <ScrollBar x:Name=\"PART_HorizontalScrollBar\"\n                               Grid.Row=\"1\"\n                               Orientation=\"Horizontal\"\n                               HorizontalAlignment=\"Stretch\"\n                               Visibility=\"{TemplateBinding ComputedHorizontalScrollBarVisibility}\"/>\n                    <ScrollBar x:Name=\"PART_VerticalScrollBar\"\n                               Grid.Column=\"1\"\n                               Orientation=\"Vertical\"\n                               VerticalAlignment=\"Stretch\"\n                               Visibility=\"{TemplateBinding ComputedVerticalScrollBarVisibility}\"/>\n                    <Border x:Name=\"PART_ScrollBarsSeparator\"\n                            Grid.Row=\"1\"\n                            Grid.Column=\"1\"\n                            Opacity=\"0\"\n                            Background=\"{ThemeResource ScrollViewScrollBarsSeparatorBackground}\"/>\n            </Grid>\n        </ControlTemplate>\n        </Setter.Value>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Handling ScrollView State Changes in C#\nDESCRIPTION: This C# snippet shows how to disable a custom ZoomBar control during the user's interactions with the ScrollView using the StateChanged event.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ScrollView_StateChanged(ScrollView scrollView, object args)\n{\n    _zoomBar.IsEnabled = scrollView.State != ScrollingInteractionState.Interaction;\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ScrollViewer_DirectManipulationStarting(object sender, object args)\n{\n    _zoomBar.IsEnabled = false;\n}\n\nprivate void ScrollViewer_DirectManipulationCompleted(object sender, object args)\n{\n    _zoomBar.IsEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationViewItem API Definition with InfoBadge in C#\nDESCRIPTION: This C# code defines the API for the NavigationViewItem class, including the InfoBadge property.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[MUX_PUBLIC]\n[webhosthidden]\nunsealed runtimeclass NavigationViewItem : NavigationViewItemBase\n{\n    NavigationViewItem();\n\n    // Existing members have been excluded\n    \n    Microsoft.UI.Xaml.Controls.InfoBadge InfoBadge { get; set; }\n\n    static Windows.UI.Xaml.DependencyProperty InfoBadgeProperty { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OutOfScopePressedForeground Property in CalendarView (XML)\nDESCRIPTION: Example of setting the OutOfScopePressedForeground property to customize the text color when pressing out-of-scope days using TextFillColorTertiaryBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView IsOutOfScopeEnabled='true' OutOfScopePressedForeground='{StaticResource TextFillColorTertiaryBrush}'/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Zoom in ScrollView\nDESCRIPTION: Enables zooming functionality in ScrollView by setting ZoomMode to Enabled. This allows users to zoom in and out of content like images through user interactions such as pinch gestures or Ctrl+MouseWheel.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView Width=\"500\" Height=\"400\" ContentOrientation=\"Both\" ZoomMode=\"Enabled\">\n    <Image Source=\"Assets/LargeParisMap.png\"/>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Listing Control Template Parts for NavigationView Left Display Mode in XAML\nDESCRIPTION: This snippet enumerates the control template parts specific to the left display mode of NavigationView. It includes elements like RootSplitView, PaneContentGrid, and ItemsContainerRow, along with their roles in layout and functionality.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/NavigationView/docs/rendering.md#2025-04-16_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n* `RootSplitView`: Renders the content and left pane\n* `PaneContentGrid`: Used for layouting of left pane, also needed for the animation\n* `ItemsContainerRow`: Used for sizing of menu items/footer items\n* `ContentPaneTopPadding`: Used for height adjustments\n* `PaneHeaderContentBorderRow`: Referenced for sizing adjustments\n* `PaneHeaderCloseButtonColumn`: Used for CompactPaneLength adjusting of pane close buttons\n* `PaneHeaderToggleButtonColumn`: Used for CompactPaneLength adjusting of pane toggle buttons\n* `PaneHeaderContentBorder`: Manual sizing for pane header\n* `AutoSuggestArea`: Not referenced\n* `PaneAutoSuggestBoxPresenter`: Used to check if there is content in autosuggest area\n* `PaneAutoSuggestButton`: Used to open pane when button gets invoked\n* `PaneCustomContentBorder`: Used for pane header rendering\n* `ItemsContainerGrid`: Used for size calculations of menu and footer items views\n* `MenuItemsScrollViewer`: Used to limit sizing of menu items host\n* `MenuItemsHost`: Used for rendering of the NavigationViewItems\n* `VisualItemsSeparator`: Referenced to dynamically show/hide the separator when needed\n* `FooterContentBorder`: Used for rendering of pane footer\n* `FooterMenuItemsHost`: Renders the footer menu items\n* `ContentGrid`: Shadow handling and focus behavior\n* `ContentTopPadding`: Not referenced\n* `ContentLeftPadding`: Used for padding of the content\n* `HeaderContent`: Not referenced\n```\n\n----------------------------------------\n\nTITLE: ResourceManagerRequestedEventArgs Class Declaration in C#\nDESCRIPTION: Declaration of the ResourceManagerRequestedEventArgs class used to provide event data for the Application.ResourceManagerRequested event.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/custom-iresourcemanager-spec.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic sealed class ResourceManagerRequestedEventArgs\n```\n\n----------------------------------------\n\nTITLE: IAnimatedVisual2.InstantiateAnimations Method in C#\nDESCRIPTION: Method declaration for InstantiateAnimations that creates animation visuals for a specified progress value. This allows animation resources to be created just before they're needed.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/AnimatedVisualPlayer Spec.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nvoid CreateAnimations();\n```\n\n----------------------------------------\n\nTITLE: Using MonochromaticOverlayPresenter in XAML\nDESCRIPTION: This example demonstrates how to use MonochromaticOverlayPresenter to create a highlighted band across scrolling text. It shows how to set the SourceElement, ReplacementColor, and other properties.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/DateTimePicker-Visual-Updates-Spec.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Grid Background=\"White\" Width=\"150\">\n    <ScrollViewer x:Name=\"Source\" Height=\"300\">\n        <TextBlock\n            Foreground=\"Black\"\n            FontSize=\"30\"\n            Text=\"{x:Bind LoremIpsum}\"\n            TextWrapping=\"Wrap\">\n        </TextBlock>\n    </ScrollViewer>\n\n    <MonochromaticOverlayPresenter\n        ReplacementColor=\"Green\"\n        SourceElement=\"{x:Bind Source}\"\n        Height=\"30\"\n        IsHitTestVisible=\"False\"\n        VerticalAlignment=\"Center\"\n        HorizontalAlignment=\"Stretch\"/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Custom Anchor Selection in ScrollView\nDESCRIPTION: Implements custom anchor selection logic for maintaining viewport content position during content changes.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ScrollView_AnchorRequested(ScrollView scrollView, ScrollingAnchorRequestedEventArgs e)\n{\n    e.Anchor = SelectAnchorElement();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Referencing XAML Resources in XML\nDESCRIPTION: This snippet demonstrates how to define a SolidColorBrush resource in a ResourceDictionary and reference it using a StaticResource markup extension.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-resource-references-tracing-spec.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<StackPanel >\n    <StackPanel.Resources>\n        <SolidColorBrush x:Key=\"myBrush\" Color=\"Red\"/>\n    </StackPanel.Resources>\n\n    <Rectangle Fill=\"{StaticResource myBrush}\"/>\n```\n\n----------------------------------------\n\nTITLE: Optimizing ColorSpectrum Rendering with Multiple Bitmaps\nDESCRIPTION: To optimize performance, the ColorSpectrum uses multiple bitmaps blended together using opacity. This avoids regenerating the entire spectrum bitmap when the third dimension (not represented in the 2D spectrum) changes.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/ColorPicker/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// From ColorSpectrum.cpp:\n// As the user perceives it, every time the third dimension not represented in the ColorSpectrum changes,\n// the ColorSpectrum will visually change to accommodate that value. For example, if the ColorSpectrum\n// handles hue and luminosity, and the saturation externally goes from 1.0 to 0.5, then the ColorSpectrum\n// will visually change to look more washed out to represent that third dimension's new value.\n// Internally, however, we don't want to regenerate the ColorSpectrum bitmap every single time this happens,\n// since that's very expensive. In order to make it so that we don't have to, we implement an optimization where,\n// rather than having only one bitmap, we instead have multiple that we blend together using opacity to create\n// the effect that we want. In the case where the third dimension is saturation or luminosity, we only need two:\n// one bitmap at the minimum value of the third dimension, and one bitmap at the maximum. Then we set the second's\n// opacity at whatever the value of the third dimension is - e.g., a saturation of 0.5 implies an opacity of 50%.\n// In the case where the third dimension is hue, we need six: one bitmap corresponding to red, yellow, green, cyan,\n// blue, and purple. We'll then blend between whichever colors our hue exists between - e.g., an orange color would\n// use red and yellow with an opacity of 50%. This optimization does incur slightly more startup time initially\n// since we have to generate multiple bitmaps at once instead of only one, but the running time savings after that\n// are *huge* when we can just set an opacity instead of generating a brand new bitmap.\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Dictionary for Microsoft UI XAML in XAML\nDESCRIPTION: This XAML code configures a ResourceDictionary for the Microsoft UI XAML framework package. It merges a dictionary from the Compact.xaml file, allowing access from both the framework package and NuGet package using a single URI.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/Microsoft.UI.Xaml.FrameworkPackagePRI/README.md#2025-04-16_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n    <ResourceDictionary.MergedDictionaries>\n        <ResourceDictionary Source=\"ms-appx:///Microsoft.UI.Xaml/DensityStyles/Compact.xaml\"/>\n    </ResourceDictionary.MergedDictionaries>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Content Extent Support for ScrollView\nDESCRIPTION: This code proposes APIs for defining virtual content extents in ScrollView, which would allow scrollable areas beyond the actual content bounds. The properties and methods control the size of the virtual area in all four directions.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_72\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass ScrollView : ...\n{\n    // Default Value: 0\n    double LeftVirtualExtent { get; };\n\n    // Default Value: 0\n    double RightVirtualExtent { get; };\n\n    // Default Value: 0\n    double TopVirtualExtent { get; };\n\n    // Default Value: 0\n    double BottomVirtualExtent { get; };\n\n    void UpdateHorizontalVirtualExtents(\n        double leftVirtualExtent,\n        double rightVirtualExtent,\n        double horizontalOffset);\n\n    void UpdateVerticalVirtualExtents(\n        double topVirtualExtent,\n        double bottomVirtualExtent,\n        double verticalOffset);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing XamlResourceReferenceFailed Event in C#\nDESCRIPTION: This code defines the XamlResourceReferenceFailed event on the DebugSettings class. The event is raised when a XAML resource reference cannot be resolved, providing developers with detailed error information.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-resource-references-tracing-spec.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic event TypedEventHandler<DebugSettings,XamlResourceReferenceFailedEventArgs> \nXamlResourceReferenceFailed\n```\n\n----------------------------------------\n\nTITLE: ResourceManagerRequestedEventArgs.CustomResourceManager Property Declaration\nDESCRIPTION: Declaration of the CustomResourceManager property in ResourceManagerRequestedEventArgs class that allows setting a custom IResourceManager implementation.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/custom-iresourcemanager-spec.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic IResourceManager ResourceManager { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Handling Size Changes in Composition Scroll Controller in C#\nDESCRIPTION: Event handler for the SizeChanged event that updates the interaction framework element size when the composition scroll controller's size changes.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nprivate void CompositionScrollController_SizeChanged(object sender, SizeChangedEventArgs e)\n{\n    UpdateInteractionFrameworkElementSize();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ScrollBy Requests in C#\nDESCRIPTION: Raises the ScrollByRequested event with delta offset and options. Tracks correlation IDs to monitor unique scroll requests and increments operation count for new requests that aren't coalesced with pending operations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nprivate bool RaiseScrollByRequested(double offsetDelta)\n{\n    if (ScrollToRequested == null)\n    {\n        return false;\n    }\n\n    ScrollingScrollOptions options = new ScrollingScrollOptions(ScrollingAnimationMode.Disabled, ScrollingSnapPointsMode.Ignore);\n    ScrollControllerScrollByRequestedEventArgs scrollByRequestedEventArgs = new ScrollControllerScrollByRequestedEventArgs(offsetDelta, options);\n\n    ScrollByRequested(this, scrollByRequestedEventArgs);\n\n    int correlationId = scrollByRequestedEventArgs.CorrelationId;\n\n    // Only increment operationsCount when the returned OffsetsChangeCorrelationId represents a new request that was not coalesced with a pending request. \n    if (correlationId != -1 && correlationId != lastOffsetChangeCorrelationIdForScrollBy)\n    {\n        lastOffsetChangeCorrelationIdForScrollBy = correlationId;\n        operationsCount++;\n        return true;\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Control Event Handlers in C#\nDESCRIPTION: Method for unhooking event handlers from scrollbar components to prevent memory leaks and ensure clean disconnection when the control is no longer needed.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\n    private void UnhookHandlers()\n    {\n        if (horizontalDecrementRepeatButton != null)\n        {\n            horizontalDecrementRepeatButton.Click -= DecrementRepeatButton_Click;\n        }\n\n        if (horizontalIncrementRepeatButton != null)\n        {\n            horizontalIncrementRepeatButton.Click -= IncrementRepeatButton_Click;\n        }\n\n        if (verticalDecrementRepeatButton != null)\n        {\n            verticalDecrementRepeatButton.Click -= DecrementRepeatButton_Click;\n        }\n\n        if (verticalIncrementRepeatButton != null)\n        {\n            verticalIncrementRepeatButton.Click -= IncrementRepeatButton_Click;\n        }\n\n        if (interactionFrameworkElement != null)\n        {\n            interactionFrameworkElement.PointerPressed -= InteractionFrameworkElement_PointerPressed;\n            interactionFrameworkElement.ManipulationStarting -= InteractionFrameworkElement_ManipulationStarting;\n            interactionFrameworkElement.ManipulationDelta -= InteractionFrameworkElement_ManipulationDelta;\n            interactionFrameworkElement.ManipulationCompleted -= InteractionFrameworkElement_ManipulationCompleted;\n\n            FrameworkElement parent = interactionFrameworkElement.Parent as FrameworkElement;\n            if (parent != null)\n            {\n                parent.PointerPressed -= Parent_PointerPressed;\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: InfoBadge Navigation Handler\nDESCRIPTION: C# event handler for managing InfoBadge visibility during navigation\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void NavView_ItemInvoked(NavigationView sender,\n                                 NavigationViewItemInvokedEventArgs args)\n{\n    if (args.IsSettingsInvoked == true)\n    {\n        NavView_Navigate(\"settings\", args.RecommendedNavigationTransitionInfo);\n    }\n    else if (args.InvokedItemContainer != null)\n    {\n        NavigationViewItem current = args.InvokedItemContainer as NavigationViewItem;\n        if (current.InfoBadge.IsOpen){\n                current.InfoBadge.IsOpen = false;\n        }\n \n        var navItemTag = args.InvokedItemContainer.Tag.ToString();\n        NavView_Navigate(navItemTag, args.RecommendedNavigationTransitionInfo);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IsXamlResourceReferenceTracingEnabled Property in C#\nDESCRIPTION: This snippet shows the declaration of the IsXamlResourceReferenceTracingEnabled property on the DebugSettings class. It controls whether XAML resource reference tracing is enabled.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-resource-references-tracing-spec.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic bool IsXamlResourceReferenceTracingEnabled { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Updating Scroll Interaction Permissions in C#\nDESCRIPTION: Updates the AreInteractionsAllowed property based on scrollbar state and scroll mode. This determines whether scrolling interactions are currently permitted based on scrollbar enablement, range, and scroll mode.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UpdateAreInteractionsAllowed()\n{\n    bool oldAreInteractionsAllowed = AreInteractionsAllowed;\n\n    AreInteractionsAllowed =\n        scrollBar.IsEnabled &&\n        scrollBar.Maximum > scrollBar.Minimum &&\n        scrollMode != ScrollingScrollMode.Disabled;\n\n    if (oldAreInteractionsAllowed != AreInteractionsAllowed)\n    {\n        RaiseInteractionInfoChanged();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring XamlResourceReferenceFailedEventArgs Class in C#\nDESCRIPTION: This code defines the XamlResourceReferenceFailedEventArgs class, which provides event data for the XamlResourceReferenceFailed event. It includes a Message property containing detailed error information.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/xaml-resource-references-tracing-spec.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic sealed class XamlResourceReferenceFailedEventArgs\n{\n    public string Message { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GSL Commit in Markdown\nDESCRIPTION: Provides a link to the specific commit of the Guidelines Support Library (GSL) from which the headers were copied. This allows for version tracking and future updates.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/external/inc/gsl/ReadMe.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[b74b286d5e333561b0f1ef1abd18de2606624455](https://github.com/Microsoft/GSL/tree/b74b286d5e333561b0f1ef1abd18de2606624455)\n```\n\n----------------------------------------\n\nTITLE: Raising Interaction Changed Event in C#\nDESCRIPTION: Raises the InteractionInfoChanged event when the interaction state of the scroll controller changes.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RaiseInteractionInfoChanged()\n{\n    if (InteractionInfoChanged != null)\n    {\n        InteractionInfoChanged(this, null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Parent Pointer Pressed for Page Scrolling in C#\nDESCRIPTION: Event handler for PointerPressed on the parent element that implements page-by-page scrolling. Calculates whether to scroll forward or backward based on tap position relative to the thumb and initiates a scroll animation to the new target offset.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Parent_PointerPressed(object sender, PointerRoutedEventArgs e)\n{\n    Point pt = e.GetCurrentPoint(sender as UIElement).Position;\n    double relativeOffsetChange = 0.0;\n\n    if (Orientation == Orientation.Horizontal)\n    {\n        if (pt.X < HorizontalThumbOffset)\n        {\n            relativeOffsetChange = -viewport;\n        }\n        else if (pt.X > HorizontalThumbOffset + interactionFrameworkElement.ActualWidth)\n        {\n            relativeOffsetChange = viewport;\n        }\n        else\n        {\n            return;\n        }\n    }\n    else\n    {\n        if (pt.Y < VerticalThumbOffset)\n        {\n            relativeOffsetChange = -viewport;\n        }\n        else if (pt.Y > VerticalThumbOffset + interactionFrameworkElement.ActualHeight)\n        {\n            relativeOffsetChange = viewport;\n        }\n        else\n        {\n            return;\n        }\n    }\n\n    double newOffsetTarget = offsetTarget + relativeOffsetChange;\n    newOffsetTarget = Math.Max(minOffset, newOffsetTarget);\n    newOffsetTarget = Math.Min(maxOffset, newOffsetTarget);\n    offsetTarget = newOffsetTarget;\n\n    int offsetChangeCorrelationId = RaiseScrollToRequested(offsetTarget, ScrollingAnimationMode.Auto);\n    if (offsetChangeCorrelationId != -1 && !operations.ContainsKey(offsetChangeCorrelationId))\n    {\n        operations.Add(offsetChangeCorrelationId, offsetTarget);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Notifying Scroll Completion in IScrollController\nDESCRIPTION: This method is invoked by the ScrollPresenter to inform the scroll controller that a scrolling operation has completed. It provides the correlation ID that was earlier supplied in the corresponding request event.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_18\n\nLANGUAGE: cs\nCODE:\n```\nvoid NotifyScrollCompleted(Int32 correlationId)\n```\n\n----------------------------------------\n\nTITLE: Rendering ColorSpectrum using WritableBitmap (Windows 1607 and earlier)\nDESCRIPTION: On Windows version 1607 (RS1) and earlier, the ColorSpectrum is rendered using a WritableBitmap. The spectrum is generated as an array of bytes, converted to a WritableBitmap, set as the source of an ImageBrush, and finally applied as the background of a spectrum rectangle.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/ColorPicker/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Code not provided in the original text, but the process is described as:\n// 1. Generate spectrum as byte array\n// 2. Convert to WritableBitmap\n// 3. Set as source of ImageBrush\n// 4. Apply ImageBrush as background of spectrum rectangle\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for WinUI3 Migration\nDESCRIPTION: Detailed documentation explaining the process of migrating from WinUI2/UWP to WinUI3, including information about the try-convert tool, background on WinUI frameworks, and the role of Roslyn Analyzers and Code Fixes in the migration process.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/winui3_migration.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Migrating a UWP App To WinUI3\n\n**It is recommended to use the  [try-convert](https://github.com/dotnet/try-convert/tree/feature/winui) tool for the full conversion process.**\n**`try-convert` will automate most of the conversion steps.**\n\n## Background\n\nThe purpose of the [try-convert WinUI3 feature](https://github.com/dotnet/try-convert/tree/feature/winui) is to create a porting solution to allow developers to convert WinUI2 projects to the new WinUI3 format.\n\n- WinUI is a native user experience (UX) framework for both Windows Desktop and UWP applications. WinUI ships as part of the Windows OS. \n[More on WinUI](http://aka.ms/winui), [Docs](https://docs.microsoft.com/en-us/windows/apps/winui)\n- WinUI3 is the next version of WinUI. It runs on the native Windows 10 UI platform and supports both Windows Desktop and UWP apps. WinUI3 ships as a NuGet package.\n[More on WinUI3](https://docs.microsoft.com/en-us/windows/apps/winui/winui3)\n\nConverting an existing WinUI C# App to WinUI3 requires some changes to the C# source code. Most notably namespace changes from Windows.UI.* to Microsoft.UI.*\n\nThis porting assistance is provided in the form of Roslyn Analyzers and Code Fixes. \n- A Code Analyzer provides on the fly code inspections for C# and creates diagnostics. \n- A Code Fix consumes the diagnostics created by the Code Analyzer and modifies the C# file in-line. \n\nSee the [try-convert documentation](https://github.com/dotnet/try-convert/tree/feature/winui) for more information on these code analyzers and how to automoate the process with [try-convert](https://github.com/dotnet/try-convert/blob/feature/winui/WinUIConvert.md).\n```\n\n----------------------------------------\n\nTITLE: Building CustomTasks Solution for Release\nDESCRIPTION: Command to build the CustomTasks.sln solution in Release configuration for Any CPU platform. Includes restore to ensure dependencies are available.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/tools/CustomTasks/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nMSBuild.exe CustomTasks.sln /restore /p:Configuration=Release /p:Platform=\"Any CPU\"\n```\n\n----------------------------------------\n\nTITLE: Listing Control Template Parts for NavigationView Top Display Mode in XAML\nDESCRIPTION: This snippet lists the control template parts specific to the top display mode of NavigationView. It includes elements like TopNavArea, TopNavGrid, and TopNavMenuItemsHost, describing their roles in rendering and functionality.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/NavigationView/docs/rendering.md#2025-04-16_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n* `TopNavArea`: Not referenced\n* `TopNavLeftPadding`: Not referenced\n* `TopNavGrid`: Used for down level support\n* `BackButtonPlaceholderOnTopNav`: Not referenced\n* `PaneHeaderOnTopPane`: Used for rendering of header\n* `PaneTitleOnTopPane`: Used for rendering of pane title\n* `TopNavMenuItemsHost`: Renders the NavigationViewItems in top mode\n* `TopNavOverflowButton`: Opens an overflow menu when there is not enough space to show all items\n* `TopNavMenuItemsOverflowHost`: Renders the items in the overflow flyout\n* `PaneCustomContentOnTopPane`: Renders the custom pane content\n* `TopPaneAutoSuggestArea`: Takes up space for the search box\n* `TopPaneAutoSuggestBoxPresenter`: Renders the AutoSuggestBox\n* `TopFooterMenuItemsHost`: Renders the footer menu items\n* `PaneFooterOnTopPane`: Shows the panefooter\n* `TopNavContentOverlayAreaGrid`: Used for content overlays\n```\n\n----------------------------------------\n\nTITLE: Handling Decrement Button Click for Scrolling in C#\nDESCRIPTION: Event handler for the decrement button click that adds negative scroll velocity, causing the content to scroll in the decrement direction with the specified inertia decay rate.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nprivate void DecrementRepeatButton_Click(object sender, RoutedEventArgs e)\n{\n    int offsetChangeCorrelationId =\n        RaiseAddScrollVelocityRequested(-SmallChangeAdditionalVelocity, SmallChangeInertiaDecayRate);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TodayBlackoutBackground and TodayBlackoutForeground Properties in CalendarView (XML)\nDESCRIPTION: Example showing how to customize the background and foreground colors for blacked out current day using AccentFillColorTertiaryBrush and TextOnAccentFillColorPrimaryBrush respectively.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView TodayBlackoutBackground='{StaticResource AccentFillColorTertiaryBrush}' TodayBlackoutForeground='{StaticResource TextOnAccentFillColorPrimaryBrush}' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Raising Methods in C#\nDESCRIPTION: Private methods that handle raising events for the scroll controller, including interaction changes, scrolling operations, and velocity adjustments. Each method creates appropriate event arguments and returns correlation IDs.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\n    private void RaiseInteractionInfoChanged()\n    {\n        if (InteractionInfoChanged != null)\n        {\n            InteractionInfoChanged(this, null);\n        }\n    }\n\n    private void RaiseInteractionRequested(PointerPoint pointerPoint)\n    {\n        if (InteractionRequested != null)\n        {\n            ScrollControllerInteractionRequestedEventArgs e = new ScrollControllerInteractionRequestedEventArgs(pointerPoint);\n            InteractionRequested(this, e);\n        }\n    }\n\n    private int RaiseScrollToRequested(double offset, ScrollingAnimationMode animationMode)\n    {\n        if (ScrollToRequested != null)\n        {\n            ScrollControllerScrollToRequestedEventArgs e =\n                new ScrollControllerScrollToRequestedEventArgs(\n                    offset,\n                    new ScrollingScrollOptions(animationMode, ScrollingSnapPointsMode.Ignore));\n            ScrollToRequested(this, e);\n            return e.CorrelationId;\n        }\n\n        return -1;\n    }\n\n    private int RaiseScrollByRequested(double offsetDelta, ScrollingAnimationMode animationMode)\n    {\n        if (ScrollByRequested != null)\n        {\n            ScrollControllerScrollByRequestedEventArgs e =\n                new ScrollControllerScrollByRequestedEventArgs(\n                    offsetDelta,\n                    new ScrollingScrollOptions(animationMode, ScrollingSnapPointsMode.Ignore));\n            ScrollByRequested(this, e);\n            return e.CorrelationId;\n        }\n\n        return -1;\n    }\n\n    private int RaiseAddScrollVelocityRequested(float offsetVelocity, float? inertiaDecayRate)\n    {\n        if (AddScrollVelocityRequested != null)\n        {\n            ScrollControllerAddScrollVelocityRequestedEventArgs e =\n                new ScrollControllerAddScrollVelocityRequestedEventArgs(\n                    offsetVelocity,\n                    inertiaDecayRate);\n            AddScrollVelocityRequested(this, e);\n            return e.CorrelationId;\n        }\n\n        return -1;\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating WebView2 Headers from Anaheim\nDESCRIPTION: Commands for copying WebView2 headers from the Anaheim repository to the Xaml WebView2 project when there are changes to WebView2.idl or WebView2_Staging.idl files.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/WebView2/WebView2.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncopy <AnaheimRepo>\\src\\third_party\\win_build_output\\midl\\edge_embedded_browser\\client\\win\\current\\idl_public\\<arch>\\webview2.h <WebView2Repo>\\microsoft-ui-xaml-lift\\webview2\\microsoft-ui-xaml\\dev\\WebView2\\webview2_core.h\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy <AnaheimRepo>\\src\\third_party\\win_build_output\\midl\\edge_embedded_browser\\client\\win\\current\\idl_staging\\<arch>\\webview2staging.h <WebView2Repo>\\microsoft-ui-xaml-lift\\webview2\\microsoft-ui-xaml\\dev\\WebView2\\webview2_core_staging.h\n```\n\n----------------------------------------\n\nTITLE: Handling Increment Button Click for Scrolling in C#\nDESCRIPTION: Event handler for the increment button click that adds positive scroll velocity, causing the content to scroll in the increment direction with the specified inertia decay rate.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nprivate void IncrementRepeatButton_Click(object sender, RoutedEventArgs e)\n{\n    int offsetChangeCorrelationId =\n        RaiseAddScrollVelocityRequested(SmallChangeAdditionalVelocity, SmallChangeInertiaDecayRate);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TodaySelectedInnerBorderBrush Property in CalendarView (XML)\nDESCRIPTION: Example of setting the TodaySelectedInnerBorderBrush property to customize the inner border color for the current date when it is selected using the TextOnAccentFillColorPrimaryBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView TodaySelectedInnerBorderBrush='{StaticResource TextOnAccentFillColorPrimaryBrush}'/>\n```\n\n----------------------------------------\n\nTITLE: PowerShell File Read Error in UpdateReferences Script\nDESCRIPTION: Error message from the PowerShell script when attempting to read a file that doesn't exist. Occurs in the UpdateReferences.ps1 script at line 61.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/tools/CustomTasks/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nException calling \"ReadAllText\" with \"1\" argument(s): \"Could not find file\n'D:\\microsoft-ui-xaml-lift\\MergedWinMD\\MergedWinMD.targets'.\"\nAt D:\\microsoft-ui-xaml-lift\\controls\\tools\\CustomTasks\\NuSpecs\\UpdateReferences.ps1:61 char:5\n+     $fileContents = [System.IO.File]::ReadAllText($filePath)\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n  + FullyQualifiedErrorId : FileNotFoundException\n```\n\n----------------------------------------\n\nTITLE: Creating Thumb Animation for Scrolling in C#\nDESCRIPTION: Ensures the thumb animation is created by initializing the expression animation if it doesn't exist. Requires valid expression animation sources and property names.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nprivate void EnsureThumbAnimation()\n{\n    if (thumbOffsetAnimation == null && expressionAnimationSources != null &&\n        !string.IsNullOrWhiteSpace(multiplierPropertyName) &&\n        !string.IsNullOrWhiteSpace(offsetPropertyName) &&\n        !string.IsNullOrWhiteSpace(minOffsetPropertyName) &&\n        !string.IsNullOrWhiteSpace(maxOffsetPropertyName))\n    {\n        thumbOffsetAnimation = expressionAnimationSources.Compositor.CreateExpressionAnimation();\n        thumbOffsetAnimation.SetReferenceParameter(\"sources\", expressionAnimationSources);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Standard ScrollViewer Usage\nDESCRIPTION: Shows the usage of the traditional ScrollViewer control for comparison, where a TextBlock that wraps horizontally and scrolls vertically is contained within a ScrollViewer.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Page xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n    <ScrollViewer>\n        <TextBlock Text=\"{x:Bind AllTheText}\" TextWrapping=\"Wrap\" />\n    </ScrollViewer>\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Handling Enabled State Changes in Composition Scroll Controller in C#\nDESCRIPTION: Event handler for the IsEnabledChanged event that updates whether interactions are allowed based on the enabled state of the composition scroll controller.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nprivate void CompositionScrollController_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e)\n{\n    UpdateAreInteractionsAllowed();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OutOfScopeHoverForeground Property in CalendarView (XML)\nDESCRIPTION: Example of setting the OutOfScopeHoverForeground property to customize the text color when hovering over out-of-scope days (like days from the next month) using TextFillColorPrimaryBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView IsOutOfScopeEnabled='true' OutOfScopeHoverForeground='{StaticResource TextFillColorPrimaryBrush}'/>\n```\n\n----------------------------------------\n\nTITLE: Displaying ColorPicker Control Hierarchy in C++\nDESCRIPTION: Shows the control hierarchy and namespaces for the ColorPicker and its related components. This structure illustrates the relationships between the main ColorPicker control and its subcomponents.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/ColorPicker/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n ─ ColorPicker             [Microsoft.UI.Xaml.Controls]\n   ├── ColorPickerSlider   [Microsoft.UI.Xaml.Controls.Primitives]\n   └── ColorSpectrum       [Microsoft.UI.Xaml.Controls.Primitives]\n       └── SpectrumBrush   [Microsoft.UI.Xaml.Controls.Primitives]\n```\n\n----------------------------------------\n\nTITLE: Applying Preset InfoBadge Style in XAML\nDESCRIPTION: This snippet demonstrates how to apply a preset InfoBadge style to an InfoBadge control in XAML. It uses the AttentionIconInfoBadgeStyle as an example.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<InfoBadge x:Name=\"InfoBadge1\" Style=\"{ThemeResource AttentionIconInfoBadgeStyle}\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Scrolling Enumerations in C#\nDESCRIPTION: Defines various enumerations related to scrolling behavior, including content orientation, interaction state, scroll modes, and input kinds.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\nenum ScrollingContentOrientation\n{\n    Vertical = 0,\n    Horizontal = 1,\n    None = 2,\n    Both = 3,\n};\n\nenum ScrollingInteractionState\n{\n    Idle = 0,\n    Interaction = 1,\n    Inertia = 2,\n    Animation = 3,\n};\n\nenum ScrollingScrollMode\n{\n    Enabled = 0,\n    Disabled = 1,\n};\n\nenum ScrollingZoomMode\n{\n    Enabled = 0,\n    Disabled = 1,\n};\n\nenum ScrollingChainMode\n{\n    Auto = 0,\n    Always = 1,\n    Never = 2,\n};\n\nenum ScrollingRailMode\n{\n    Enabled = 0,\n    Disabled = 1,\n};\n\n[flags]\nenum ScrollingInputKinds\n{\n    None = 0x00,\n    Touch = 0x01,\n    Pen = 0x02,\n    MouseWheel = 0x04,\n    Keyboard = 0x08,\n    Gamepad = 0x10,\n    All = 0xFFFFFFFF,\n};\n\nenum ScrollingAnimationMode\n{\n    Disabled = 0,\n    Enabled = 1,\n    Auto = 2,\n};\n\nenum ScrollingSnapPointsMode\n{\n    Default = 0,\n    Ignore = 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Chain Modes for ScrollView in XAML\nDESCRIPTION: Explains the HorizontalScrollChainMode and VerticalScrollChainMode properties of ScrollView, which control the ability to chain scrolling to outer ScrollViewer or ScrollPresenter components. Includes a table of possible values and their meanings.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_50\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.HorizontalScrollChainMode (and VerticalScrollChainMode) property\n\nGets or sets the ability to chain horizontal scrolling to an outer `ScrollViewer` or `ScrollPresenter`. \nDefaults to Auto.\n\nThe outer component that picks up the scrolling through chaining can be either DirectManipulation-driven \n(example: `ScrollViewer`) or InteractionTracker-driven (example: `ScrollPresenter`).\n\n| **Value** | **Meaning**                                                               |\n|-----------|---------------------------------------------------------------------------|\n| Auto      | The `ScrollView` chains to the closest horizontally scrollable outer component if any. |\n| Always    | Even when no horizontally scrollable outer component is present, the `ScrollView` acts as if chaining occurred. |\n| Never     | Even when a horizontally scrollable outer component is present, it is ignored and no chaining occurs. |\n```\n\n----------------------------------------\n\nTITLE: Defining Snap Point Enumerations and Classes for ScrollView\nDESCRIPTION: This code defines the enum types and classes needed for implementing different types of snap points in ScrollView. It includes SnapPointsType, SnapPointApplicableRangeType, and base classes for zoom snap points.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\nenum Microsoft.UI.Xaml.Controls.SnapPointsType\n{\n    None = 0,\n    Optional = 1,\n    Mandatory = 2,\n    OptionalSingle = 3,\n    MandatorySingle = 4,\n};\n\nenum Microsoft.UI.Xaml.Controls.Primitives.SnapPointApplicableRangeType\n{\n    Optional = 0,\n    Mandatory = 1,\n};\n\nunsealed runtimeclass SnapPointBase : Microsoft.UI.Xaml.DependencyObject\n{\n    Double ApplicableRange{ get; };\n    SnapPointApplicableRangeType ApplicableRangeType{ get; };\n}\n\nunsealed runtimeclass ZoomSnapPoint: ZoomSnapPointBase\n{\n    ZoomSnapPoint(Double snapPointValue, Double applicableRange);\n}\n\nunsealed runtimeclass RepeatedZoomSnapPoint : ZoomSnapPointBase\n{\n    RepeatedZoomSnapPoint(\n        Double offset,\n        Double interval,\n        Double start,\n        Double end,\n        Double applicableRange);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Event Arguments for ScrollView and ScrollPresenter\nDESCRIPTION: Defines runtime classes for handling scroll and zoom animation events, completion events, and view requests. Includes properties for animation control, position tracking, and correlation IDs.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs\n{\n    Microsoft.UI.Composition.CompositionAnimation Animation { get; set; };\n    Windows.Foundation.Numerics.Vector2 StartPosition { get; };\n    Windows.Foundation.Numerics.Vector2 EndPosition { get; };\n    Int32 CorrelationId { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs\n{\n    Windows.Foundation.Numerics.Vector2 CenterPoint { get; };\n    Single StartZoomFactor { get; };\n    Single EndZoomFactor { get; };\n    Microsoft.UI.Composition.CompositionAnimation Animation { get; set; };\n    Int32 CorrelationId { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs\n{\n    Int32 CorrelationId { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs\n{\n    Int32 CorrelationId { get; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs\n{\n    ScrollingSnapPointsMode SnapPointsMode { get; set; };\n    Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs RequestEventArgs { get; };\n    Double TargetHorizontalOffset { get; };\n    Double TargetVerticalOffset { get; };\n    Int32 CorrelationId { get; };\n    Boolean Cancel { get; set; };\n}\n\nruntimeclass Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs\n{\n    Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement> AnchorCandidates { get; };\n    Microsoft.UI.Xaml.UIElement AnchorElement { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarView.TodayBlackoutForeground Property in C#\nDESCRIPTION: Gets or sets a brush that provides the foreground of the calendar item for the current date while it's blacked out. It is also used for its strikethrough line.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic Windows.UI.Xaml.Media.Brush TodayBlackoutForeground { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Accessing Scrollable Dimensions in ScrollView XAML\nDESCRIPTION: Details the ScrollableWidth and ScrollableHeight properties of ScrollView, which provide the horizontal and vertical lengths of content that can be scrolled. Explains how these values are calculated and their behavior during overpanning.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_55\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.ScrollableWidth (and ScrollableHeight) property\n\nGets the horizontal length of the content that can be scrolled. Defaults to 0.\n\nThe ScrollableWidth property returns the value Max(0, ZoomFactor x ExtentWidth - ViewportWidth).\n\nThe ScrollableHeight property returns the value Max(0, ZoomFactor x ExtentHeight - ViewportHeight).\n\nWhen overpanning horizontally at the left edge, HorizontalOffset returns a negative value.\n\nWhen overpanning horizontally at the right edge, HorizontalOffset returns a value larger than ScrollableWidth.\n\nThe same comments apply to the vertical dimension.\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom Chain Mode for ScrollView in XAML\nDESCRIPTION: Details the ZoomChainMode property of ScrollView, which controls the ability to chain zooming to outer ScrollViewer or ScrollPresenter components. Includes a table of possible values and their meanings.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_51\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.ZoomChainMode property\n\nGets or sets the ability to chain zooming to an outer `ScrollViewer` or `ScrollPresenter`. \nDefaults to Auto.\n\nThe outer component that picks up the zooming through chaining can be either DirectManipulation-driven \n(example: `ScrollViewer`) or InteractionTracker-driven (example: `ScrollPresenter`).\n\n| **Value** | **Meaning**                                                               |\n|-----------|---------------------------------------------------------------------------|\n| Auto      | The `ScrollView` chains to the closest zoomable outer component if any. |\n| Always    | Even when no zoomable outer component is present, the `ScrollView` acts as if chaining occurred. |\n| Never     | Even when a zoomable outer component is present, it is ignored and no chaining occurs. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Overpan Mode in ScrollView and ScrollPresenter in C#\nDESCRIPTION: Code snippet showing the OverpanMode enum and its usage in ScrollView and ScrollPresenter to control overpanning behavior. The enum provides Auto, Enabled, and Disabled options with Enabled being the default value.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_76\n\nLANGUAGE: csharp\nCODE:\n```\nenum Microsoft.UI.Xaml.Controls.OverpanMode\n{\n    // Overpan is possible when the content is larger than the viewport,\n    // or ZoomMode is Enabled.\n    Auto = 0,\n\n    // Overpan is always possible\n    Enabled = 1,\n\n    // Overpan is never possible\n    Disabled = 2\n};\n\nunsealed runtimeclass ScrollView : ...\n{\n    // Default Value: Enabled\n    Microsoft.UI.Xaml.Controls.OverpanMode OverpanMode { get; set; };\n}\n\nunsealed runtimeclass ScrollPresenter : ...\n{\n    // Default Value: Enabled\n    Microsoft.UI.Xaml.Controls.OverpanMode OverpanMode { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TitleBar.BackRequested Event in C#\nDESCRIPTION: Defines an event that occurs whenever the BackButton is clicked. This event is raised when the internal BackButton raises a Click event.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\npublic event TypedEventHandler<TitleBar, Object> BackRequested;\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarView.TodayHoverBackground Property in C#\nDESCRIPTION: Gets or sets a brush that provides the background of the calendar item for the current date while the pointer is over it.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic Windows.UI.Xaml.Media.Brush TodayHoverBackground { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Reduction for Input View Occlusions in C#\nDESCRIPTION: Code snippet showing the ReduceViewportForCoreInputViewOcclusions property for ScrollView and ScrollPresenter. This property controls whether the viewport should be reduced when core input views (like the software keyboard) are shown, with a default value of False.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_78\n\nLANGUAGE: csharp\nCODE:\n```\nunsealed runtimeclass ScrollView : ...\n{\n    // Default Value: False\n    Boolean ReduceViewportForCoreInputViewOcclusions { get; set; };\n}\n\nunsealed runtimeclass ScrollPresenter : ...\n{\n    // Default Value: False\n    Boolean ReduceViewportForCoreInputViewOcclusions { get; set; };\n}\n```\n\n----------------------------------------\n\nTITLE: TitleBar Subtitle Property Definition in C#\nDESCRIPTION: C# property definition for the Subtitle property, which sets secondary text (like version information) displayed in the TitleBar. The subtitle will be collapsed if empty or if in minimal display mode.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic String Subtitle { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarView.TodayPressedBackground Property in C#\nDESCRIPTION: Gets or sets a brush that provides the background of the calendar item for the current date while it's pressed.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic Windows.UI.Xaml.Media.Brush TodayPressedBackground { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Photo Viewer Constrained to Viewport with ScrollView\nDESCRIPTION: Creates a photo viewer that scales to fill the viewport while preserving aspect ratio. ContentOrientation is set to None to constrain content within the ScrollView, and the Image's Stretch is set to Uniform for proper scaling. ZoomMode is enabled to allow user zoom and scroll.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView ContentOrientation=\"None\" ZoomMode=\"Enabled\">\n    <Image Stretch=\"Uniform\" Source=\"Assets/LargeEiffelTower.png\"/>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Input Kinds for ScrollView in XAML\nDESCRIPTION: Details the IgnoredInputKinds property of ScrollView, which allows specifying types of user input that the control should not respond to. This affects both scrolling and zooming capabilities for each input kind.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_49\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.IgnoredInputKinds property\nGets or sets the kinds of user input the control does not respond to. Defaults to None.\n\nEach input kind affects both scrolling and zooming capabilities. For instance, if the Pen flag is included, \nthe user can no longer scroll nor zoom using the pen.\n```\n\n----------------------------------------\n\nTITLE: XAML Example of Popup with Placement Properties\nDESCRIPTION: Sample XAML demonstrating how to use the placement properties in a CommandBarFlyoutCommandBar template, setting the PlacementTarget and DesiredPlacement properties to position a popup relative to another element.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/Popup-AdditionalLayoutProperties-Spec.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Part of the CommandBarFlyoutCommandBar's default template -->\n<Popup\n    x:Name=\"OverflowPopup\"\n    PlacementTarget=\"{Binding ElementName=PrimaryItemsRoot}\"\n    DesiredPlacement=\"Bottom\">\n</Popup>\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarView.TodayDisabledBackground Property in C#\nDESCRIPTION: Gets or sets a brush that provides the background of the calendar item for the current date while it's disabled.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic Windows.UI.Xaml.Media.Brush TodayDisabledBackground { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Disabling Pen Input in ScrollView for Drawing Applications\nDESCRIPTION: Configures a ScrollView to ignore pen input by setting IgnoredInputKinds to Pen. This allows pen input to be used for drawing or selection in canvas-based applications while still enabling scrolling via other input methods like touch and mouse wheel.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView Width=\"500\" Height=\"400\" ContentOrientation=\"Both\" IgnoredInputKinds=\"Pen\">\n    <SwapChainPanel Width=\"4000\" Height=\"4000\">\n        ...\n    </SwapChainPanel>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Complete API Definition in C# Namespace\nDESCRIPTION: Detailed API definition in the Windows.UI.Xaml.Controls.Primitives namespace, including the PopupPlacementMode enum and the IPopup2 interface with its properties, event, and dependency properties.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/Popup-AdditionalLayoutProperties-Spec.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Windows.UI.Xaml.Controls.Primitives\n{\n    [webhosthidden]\n    enum PopupPlacementMode\n    {\n        Auto,\n        Top,\n        Bottom,\n        Left,\n        Right,\n        TopEdgeAlignedLeft,\n        TopEdgeAlignedRight,\n        BottomEdgeAlignedLeft,\n        BottomEdgeAlignedRight,\n        LeftEdgeAlignedTop,\n        LeftEdgeAlignedBottom,\n        RightEdgeAlignedTop,\n        RightEdgeAlignedBottom\n    };\n\n    [webhosthidden]\n    interface IPopup2\n    {\n        Windows.UI.Xaml.FrameworkElement PlacementTarget;\n        Windows.UI.Xaml.Controls.Primitives.PopupPlacementMode DesiredPlacement;\n        Windows.UI.Xaml.Controls.Primitives.PopupPlacementMode ActualPlacement { get; };\n        \n        event Windows.Foundation.EventHandler<Object> ActualPlacementChanged;\n        \n        static Windows.UI.Xaml.DependencyProperty PlacementTargetProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty DesiredPlacementProperty{ get; };\n        static Windows.UI.Xaml.DependencyProperty ActualPlacementProperty{ get; };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarView.TodaySelectedInnerBorderBrush Property in C#\nDESCRIPTION: Gets or sets a brush that provides the border of the calendar item for the current date while it's selected.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic Windows.UI.Xaml.Media.Brush TodaySelectedInnerBorderBrush { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical StackPanel with Mandatory Snap Points in ScrollView\nDESCRIPTION: This example shows how to create a vertical StackPanel with mandatory snap points in a ScrollView control. Each button will snap to the viewport edge when scrolling ends.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_65\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView VerticalSnapPointsType=\"Mandatory\" Width=\"500\" Height=\"400\">\n    <StackPanel>\n        <Button Height=\"300\" Content=\"Button1\"/>\n        <Button Height =\"300\" Content=\"Button2\"/>\n        <Button Height =\"300\" Content=\"Button3\"/>\n        <Button Height =\"300\" Content=\"Button4\"/>\n        <Button Height =\"300\" Content=\"Button5\"/>\n    </StackPanel>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal StackPanel with Mandatory Snap Points in ScrollView\nDESCRIPTION: This example demonstrates how to create a horizontal StackPanel with mandatory snap points in a ScrollView control. The ContentOrientation property is set to Horizontal to enable proper horizontal scrolling.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_66\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView HorizontalSnapPointsType=\"Mandatory\" ContentOrientation=\"Horizontal\" Width=\"500\" Height=\"400\">\n    <StackPanel Orientation=\"Horizontal\">\n        <Button Width=\"300\" Content=\"Button1\"/>\n        <Button Width=\"300\" Content=\"Button2\"/>\n        <Button Width=\"300\" Content=\"Button3\"/>\n        <Button Width=\"300\" Content=\"Button4\"/>\n        <Button Width=\"300\" Content=\"Button5\"/>\n    </StackPanel>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Element Anchoring in XAML\nDESCRIPTION: This example shows how to set up element anchoring in a ScrollView. It keeps the element in the middle of the viewport anchored vertically when the source collection is modified.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView VerticalAnchorRatio=\"0.5\">\n    <mux:ItemsRepeater ItemsSource=\"{x:Bind Items}\">\n        <mux:ItemsRepeater.Layout>\n            <mux:StackLayout Orientation=\"Vertical\"/>\n        </mux:ItemsRepeater.Layout>\n        <DataTemplate x:DataType=\"x:String\">\n            <Button Content=\"{x:Bind}\"/>\n        </DataTemplate>\n    </mux:ItemsRepeater>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Disabling MouseWheel Input in ScrollView\nDESCRIPTION: Disables MouseWheel input for a ScrollView by setting IgnoredInputKinds to MouseWheel. This allows custom handling of mouse wheel events while still enabling scrolling via other input methods like touch and pen.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView ContentOrientation=\"Both\" IgnoredInputKinds=\"MouseWheel\">\n    <SwapChainPanel Width=\"40000\" Height=\"40000\">\n        ...\n    </SwapChainPanel>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBarTemplateSettings Class in MIDL3\nDESCRIPTION: The interface definition for TitleBarTemplateSettings class which provides access to template-related properties for the TitleBar control, specifically the IconElement property.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_19\n\nLANGUAGE: MIDL3\nCODE:\n```\n[MUX_EXPERIMENTAL]\n[webhosthidden]\nunsealed runtimeclass TitleBarTemplateSettings : Microsoft.UI.Xaml.DependencyObject\n{\n    TitleBarTemplateSettings();\n\n    Microsoft.UI.Xaml.Controls.IconElement IconElement;\n\n    static Microsoft.UI.Xaml.DependencyProperty IconElementProperty{ get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarView.TodayBlackoutBackground Property in C#\nDESCRIPTION: Gets or sets a brush that provides the background of the calendar item for the current date while it's blacked out.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic Windows.UI.Xaml.Media.Brush TodayBlackoutBackground { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Window TitleBar Integration Example in XAML\nDESCRIPTION: An example of the proposed syntax for integrating a TitleBar within a Window in XAML. This is noted as out of scope for the current WinUI TitleBar implementation but represents an ideal future implementation that would simplify the configuration process.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titleBar-dev-spec.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Window>\n    <Window.TitleBar>\n         <TitleBar />\n    </Window.TitleBar>\n</Window>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical-Only Scrolling in ScrollView\nDESCRIPTION: Configures a ScrollView to allow only vertical scrolling by setting HorizontalScrollMode to Disabled and VerticalScrollMode to Enabled. Even when content is wider than the viewport, users cannot scroll horizontally.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView x:Name=\"ScrollView\"\n    HorizontalScrollMode=\"Disabled\" VerticalScrollMode=\"Enabled\"\n    ContentOrientation=\"Both\">\n    <Grid ...>\n        ...\n    </Grid>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Using Viewbox with ScrollView for Scalable Content\nDESCRIPTION: Demonstrates using Viewbox with ScrollView to scale any XAML content to fit the viewport. The content is scaled to fit within the viewport initially, but users can zoom in and scroll through it.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<mux:ScrollView ContentOrientation=\"None\" ZoomMode=\"Enabled\">\n    <Viewbox>\n        ...\n    </Viewbox>\n</mux:ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBarAutomationPeer Class in MIDL3\nDESCRIPTION: The interface definition for TitleBarAutomationPeer class which provides accessibility support for the TitleBar control by extending FrameworkElementAutomationPeer.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_20\n\nLANGUAGE: MIDL3\nCODE:\n```\n[MUX_EXPERIMENTAL]\n[webhosthidden]\nunsealed runtimeclass TitleBarAutomationPeer : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer\n{\n    TitleBarAutomationPeer(MEU_XC_NAMESPACE.TitleBar owner);\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Thumb Animation in C#\nDESCRIPTION: Stops the currently running thumb animation for the specified orientation. This halts the translation animation on the X or Y axis of the interaction visual.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollPresenter.md#2025-04-16_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nprivate void StopThumbAnimation(Orientation orientation)\n{\n    if (interactionVisual != null)\n    {\n        if (orientation == Orientation.Horizontal)\n        {\n            interactionVisual.StopAnimation(\"Translation.X\");\n        }\n        else\n        {\n            interactionVisual.StopAnimation(\"Translation.Y\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Foreground Property for AnimatedIcon\nDESCRIPTION: Specification for the inherited Foreground property from IconElement, which only accepts SolidColorBrush and is a no-op otherwise.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/AnimatedIcon/Docs/AnimatedIconDevDesign.md#2025-04-16_snippet_1\n\nLANGUAGE: IDL\nCODE:\n```\nBrush Foreground {get;set;} // only accepts solidcolorbrush, no-op otherwise Inherited from IconElement.\n```\n\n----------------------------------------\n\nTITLE: ColorPicker Orientation API Definition in MIDL3\nDESCRIPTION: API definition for the ColorPicker class showing the addition of the Orientation property. Defines the control's orientation setting within the Microsoft.UI.Xaml.Controls namespace.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ColorPicker/ColorPicker.Orientation.md#2025-04-16_snippet_2\n\nLANGUAGE: midl3\nCODE:\n```\nnamespace Microsoft.UI.Xaml.Controls\n{\n  [webhosthidden]\n  unsealed runtimeclass ColorPicker\n  {\n      // Existing ...\n\n      // Gets or sets the Orientation of the ColorPicker\n      Windows.UI.Xaml.Controls.Orientation Orientation;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Anaheim Components with Ninja\nDESCRIPTION: Commands for building Anaheim (Edge) browser components using the ninja build system. This includes options for building Chrome, WebView2, and the installer components together or separately.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/WebView2/WebView2.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nautoninja chrome embedded_browser_webview installer mini_installer\n```\n\nLANGUAGE: shell\nCODE:\n```\nautoninja chrome\n```\n\nLANGUAGE: shell\nCODE:\n```\nautoninja embedded_browser_webview\n```\n\nLANGUAGE: shell\nCODE:\n```\nautoninja installer mini_installer\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Anchor in ScrollView XAML\nDESCRIPTION: Explains the CurrentAnchor property of ScrollView, which provides access to the most recently chosen UIElement for scroll anchoring after a layout pass.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_52\n\nLANGUAGE: markdown\nCODE:\n```\n### ScrollView.CurrentAnchor property\n\nGets the most recently chosen UIElement for scroll anchoring after a layout pass, or null.\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBar.IsPaneToggleButtonVisible Property in C#\nDESCRIPTION: Gets and sets TitleBar's PaneToggleButton visibility. The default value is false. This toggle button is only used with NavigationView when it's in Minimal DisplayMode.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_14\n\nLANGUAGE: cs\nCODE:\n```\npublic Boolean IsPaneToggleButtonVisible { get; set; }\n```\n\n----------------------------------------\n\nTITLE: InfoBadge Message Counter Implementation\nDESCRIPTION: C# code for incrementing the InfoBadge count when new messages arrive\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/InfoBadge/InfoBadge-spec.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nint numUnreadMail; \n\npublic void onNewMessageArrival(object sender, RoutedEventArgs msg){\n\n    numUnreadMail += 1;\n\n    /* Simply updating the numUnreadMail variable will cause the \n    InfoBadge to increment if it's currently visible.  */\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Scroll Bars in ScrollViewer\nDESCRIPTION: The equivalent ScrollViewer implementation for hiding both horizontal and vertical scroll bars. This prevents scrolling via scroll bars while still permitting other scrolling methods.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<ScrollViewer Width=\"500\" Height=\"400\"\n    HorizontalScrollBarVisibility=\"Hidden\"\n    VerticalScrollBarVisibility=\"Hidden\">\n    <Image Source=\"Assets/LargeParisMap.png\"/>\n</ScrollViewer>\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBar.IsBackButtonEnabled Property in C#\nDESCRIPTION: Gets and sets BackButton's IsEnabled property. The default value is true. This property is typically bound to an accompanying NavFrame's CanGoBack property using XAML binding.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\npublic Boolean IsBackButtonEnabled { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Enabling PowerShell Script Execution\nDESCRIPTION: PowerShell command to enable running unsigned scripts by setting the execution policy to Unrestricted, which is required before running the crash analysis script.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/debugging_crashes.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy Unrestricted\n```\n\n----------------------------------------\n\nTITLE: Setting Margins for Year View with Group Labels in CalendarView\nDESCRIPTION: This snippet configures the MonthYearItemMargin and FirstOfYearDecadeLabelMargin properties along with enabling group labels. It sets appropriate margins to ensure proper spacing between labels in a year view.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\ncalendarView1.MonthYearItemMargin = new Thickness(0, 6, 0, 0);\ncalendarView1.FirstOfYearDecadeLabelMargin = new Thickness(0, 2, 0, 0);\n\ncalendarView1.IsGroupLabelVisible = true;\n```\n\n----------------------------------------\n\nTITLE: Defining OpenPaneLength in NavigationViewTemplateSettings (C# MIDL3)\nDESCRIPTION: This code snippet defines the OpenPaneLength property in the NavigationViewTemplateSettings class using MIDL3 syntax. It specifies the property as a read-only Double with a default value of 320.0 and includes the corresponding DependencyProperty.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/NavigationViewTemplateSettings-OpenPaneLength.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\n[webhosthidden]\nunsealed runtimeclass NavigationViewTemplateSettings : Windows.UI.Xaml.DependencyObject\n{\n    // ...\n\n    [MUX_DEFAULT_VALUE(\"320.0\")]\n    Double OpenPaneLength{ get; };\n\n    static Windows.UI.Xaml.DependencyProperty OpenPaneLengthProperty{ get; };\n}\n```\n\n----------------------------------------\n\nTITLE: TitleBar IconSource Property Definition in C#\nDESCRIPTION: C# property definition for the IconSource property, which sets the icon displayed in the TitleBar. This property uses the IconSource type for flexible icon rendering.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/TitleBar/titlebar-functional-spec.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic IconSource IconSource { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Setting TodayBackground Property in CalendarView (XML)\nDESCRIPTION: Example of setting the TodayBackground property to customize the current day's rendering in month, year and decade views using the AccentFillColorDefaultBrush.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/CalendarView/CalendarViewSpec1.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<CalendarView TodayBackground='{StaticResource AccentFillColorDefaultBrush}'/>\n```\n\n----------------------------------------\n\nTITLE: NavigationView API Definition in MIDL3\nDESCRIPTION: MIDL3 format API definition for the NavigationView footer menu item template properties. Defines the FooterMenuItemTemplate and FooterMenuItemTemplateSelector properties along with their dependency property declarations.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/FooterMenuItemTemplate-spec.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[MUX_PREVIEW]\n    {\n        Windows.UI.Xaml.DataTemplate FooterMenuItemTemplate { get; set; };\n        Windows.UI.Xaml.Controls.DataTemplateSelector FooterMenuItemTemplateSelector { get; set; };\n        \n        static Windows.UI.Xaml.DependencyProperty FooterMenuItemTemplateProperty { get; };\n        static Windows.UI.Xaml.DependencyProperty FooterMenuItemTemplateSelectorProperty { get; };\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Bring-Into-View Behavior for Sticky Headers\nDESCRIPTION: Implements custom bring-into-view behavior for ScrollView to handle sticky headers.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ScrollView_BringingIntoView(ScrollView scrollView, ScrollingBringingIntoViewEventArgs e)\n{\n    // Adjust the BringIntoViewRequestedEventArgs instance stored in e.RequestEventArgs based on the provided target vertical offset.\n    AdjustOffsetForStickyHeader(e.RequestEventArgs, e.TargetVerticalOffset);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollView Specific Enumeration in C#\nDESCRIPTION: Defines the ScrollingScrollBarVisibility enumeration for the ScrollView control, specifying options for scroll bar visibility.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/ScrollingControls/ScrollView.md#2025-04-16_snippet_59\n\nLANGUAGE: csharp\nCODE:\n```\nenum Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility\n{\n    Auto = 0,\n    Visible = 1,\n    Hidden = 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Building NuGet Package from Specification\nDESCRIPTION: Command to create a NuGet package from the MUXCustomBuildTasks.nuspec file and output it to the current directory.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/tools/CustomTasks/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nnuget pack MUXCustomBuildTasks.nuspec -OutputDirectory .\n```\n\n----------------------------------------\n\nTITLE: AnimatedVisualPlayer API Extension for Animation Optimization in C#\nDESCRIPTION: API definition showing the addition of the AnimationOptimization property to the AnimatedVisualPlayer class to control animation caching behavior. The AnimationsCacheMode enum provides options for 'Always' or 'None' to control when animations are cached.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/AnimatedVisualPlayer Spec.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nnamespace Microsoft.UI.Xaml.Controls\n{\n  unsealed runtimeclass AnimatedVisualPlayer \n  {\n      // Existing ...\n\n    //Sets the caching behavior of the AnimatedVisualPlayer\n    AnimationOptimization AnimationOptimization;\n  }\n\n  public enum AnimationsCacheMode\n  {\n      Always = 0,\n      None\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Edge WebView2 Runtime\nDESCRIPTION: Command for installing the built Microsoft Edge WebView2 Runtime at the system level using the mini installer.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/WebView2/WebView2.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmini_installer.exe --msedgewebview --system-level\n```\n\n----------------------------------------\n\nTITLE: IAnimatedVisual2.DestroyAnimations Method in C#\nDESCRIPTION: Method declaration for DestroyAnimations that discards animation visuals to free up resources. This helps reduce resource usage when animations are not actively playing.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/AnimatedVisualPlayer Spec.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nvoid DestroyAnimations();\n```\n\n----------------------------------------\n\nTITLE: Implementing IRawElementProvider Methods in CUIAWrapper (C++)\nDESCRIPTION: This code snippet shows the method signatures for various IRawElementProvider interfaces implemented by CUIAWrapper. These methods are crucial for providing accessibility information and interactions for UI elements.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/WebView2/WebView2-Accessibility.md#2025-04-16_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// IRawElementProviderSimple methods\nHRESULT get_ProviderOptions(_Out_ ProviderOptions * pRetVal);\nHRESULT GetPatternProvider(_In_ PATTERNID patternId, _Out_ IUnknown ** pRetVal);\nHRESULT GetPropertyValue(_In_ PROPERTYID propertyId, _Out_ VARIANT * pRetVal);\nHRESULT get_HostRawElementProvider(_Out_ IRawElementProviderSimple ** pRetVal);\n\n// IRawElementProviderSimple2 methods\nHRESULT ShowContextMenu();\n\n// IRawElementProviderFragment methods\nHRESULT get_BoundingRectangle(_Out_ UiaRect * pRetVal);\nHRESULT get_FragmentRoot(_Out_ IRawElementProviderFragmentRoot** pRetVal);\nHRESULT GetEmbeddedFragmentRoots(_Out_ SAFEARRAY **pRetVal);\nHRESULT GetRuntimeId(_Out_ SAFEARRAY ** pRetVal);\nHRESULT Navigate(NavigateDirection direction, _Out_ IRawElementProviderFragment ** pRetVal);\nHRESULT SetFocus();\n\n// IRawElementProviderVisualRelative methods \nGetVisualRelativeBoundingRectangle(_Out_ UiaVisualRelativeRectangle* visualRelativeRect);\nGetVisualRelativeCenterPoint(_Out_ UiaVisualRelativePoint* visualRelativePoint);\nGetVisualRelativeClickablePoint(_Out_ UiaVisualRelativePoint* visualRelativePoint);\n\n// IRawElementProviderAdviseEvents methods \nHRESULT AdviseEventAdded(_In_ EVENTID eventId, _Out_ SAFEARRAY *propertyIDs);\nHRESULT AdviseEventRemoved(_In_ EVENTID eventId, _Out_ SAFEARRAY *propertyIDs);\n```\n\n----------------------------------------\n\nTITLE: IAnimatedVisualSource3 Interface Definition in C#\nDESCRIPTION: Definition of the IAnimatedVisualSource3 interface that extends IAnimatedVisualSource to create IAnimatedVisual2 instances. It adds control over whether animations should be instantiated immediately during creation.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/specs/AnimatedVisualPlayer Spec.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\ninterface IAnimatedVisualSource3\n{\n    IAnimatedVisual2 TryCreateAnimatedVisual(\n        Windows.UI.Composition.Compositor compositor,\n        out Object diagnostics,\n        Boolean instantiateAnimations,);\n};\n```\n\n----------------------------------------\n\nTITLE: XAML Error Message Templates\nDESCRIPTION: A collection of string templates used for generating error messages related to XAML parsing, property validation, namespace resolution, and object construction. These messages are used throughout the Microsoft UI XAML implementation to provide detailed error feedback.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/src/XamlCompiler/BuildTasks/System.Xaml/Resources/ExceptionStringTable_temp.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNotAmbientProperty='{0}'.'{1}' is not an ambient property.\nNotAmbientType='{0}' is not an ambient type.\nNoSuchConstructor=No constructor with '{0}' arguments for '{1}'.\nUnresolvedForwardReferences=Unresolved reference '{0}'.\nCantAssignRootInstance=Cannot assign root instance of type '{0}' to type '{1}'.\n```\n\n----------------------------------------\n\nTITLE: WinUI Feature Process Documentation in Markdown\nDESCRIPTION: Detailed markdown documentation describing the process flow for contributing new features to WinUI, including issue creation, API review, implementation, and release stages.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/feature_proposal_process.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# New Feature or API Process\n\nWe welcome community contributions and input to the WinUI Library, including feature ideas and code contributions. \n\nThis document outlines the process for how you can propose or contribute new features. \n\n### You need to follow this process for:\n\n* Code changes that add, remove, or alter public API \n* Features that add or alter the user experience (e.g. new visual designs)\n* Changing any core functionality documented on docs.microsoft.com\n\n### You don't need to follow this process for:\n\n* Fixing bugs\n* Submitting PRs that don't alter major functionality or public API  \n(e.g. internal performance improvements) \n\n## Process summary\n\n![Image of process summary](feature_proposal_process_summary.png)\n\n## Process details\n\n0. Please search the [issue tracker](https://github.com/microsoft/microsoft-ui-xaml/issues) for a similar idea first: there may already be an issue you can contribute to.\n\n1. **Create Issue**  \nAll code changes must be tied to an Issue. \nTo propose a new feature or API please start by filing a new issue in the [issue tracker](https://github.com/microsoft/microsoft-ui-xaml/issues) using the [Feature Proposal template](https://github.com/Microsoft/microsoft-ui-xaml/issues/new?template=feature_proposal.md).  \nInclude as much detail as you have. It's fine if it's not a complete design: just a summary and rationale is a good starting point.\n\n2. **Wait for Team Owner**  \nWe will assign a WinUI team owner to your issue. The WinUI team regularly triages all incoming issues.  \n\n3. **Discussion**  \nWe'll keep the issue open for community discussion until the team owner decides it's ready or should be closed.  \nNote that if an issue isn't a high priority or has many open questions then it might stay open for a long time.\n\n4. **Owner Review**  \nThe WinUI team will review the proposal and either approve or close the issue based on whether it broadly aligns with the [WinUI roadmap](roadmap.md) and [contribution guidelines](../CONTRIBUTING.md).\n\n5. **API Review**  \nIf the feature adds new APIs then we'll start an API review in the [WinUI API review repo](https://github.com/microsoft/microsoft-ui-xaml-specs). All new public APIs must be reviewed before merging.  \n\n6. **Implementation**  \nA feature can be implemented by you, the WinUI team, or other community members.  \nCode contributions are greatly appreciated: feel free to work on any reviewed feature you proposed, or choose one in the backlog and send us a PR. Please let us know in the issue comments if you are actively working on implementing a feature so we can ensure it's assigned to you.   \nOur contribution guidelines can be found [here](../CONTRIBUTING.md).\n\n7. **Merge**  \nOnce a feature is complete and tested according to the [contribution guidelines](../CONTRIBUTING.md) you can send us a PR to merge it to main.  \n\n8. **Documentation and sample updates**  \nWe will update the [documentation on docs.microsoft.com](https://docs.microsoft.com/windows/uwp) and if applicable add a sample to the [Xaml Controls Gallery](https://github.com/Microsoft/Xaml-Controls-Gallery) app.  \nFeel free to also contribute to docs and samples!  \nOnce the docs and samples are updated we'll close the issue.\n\n9. **Binaries**  \nWe periodically produce signed prerelease binaries from the main branch which are published to [NuGet](https://www.nuget.org/profiles/winui): see the [Roadmap](roadmap.md) for info on build frequency.   \nAfter the feature has been sufficiently validated as part of a prerelease package we will include it in the next stable binary release on NuGet.\n```\n\n----------------------------------------\n\nTITLE: Building Solution with MSBuild Command Line and Collecting Binlogs\nDESCRIPTION: Command to build a solution in x86 release configuration while generating a binary log file for debugging. The /bl switch enables binary logging which creates a detailed record of the build process.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/debugging_buildfailures.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nmsbuild /p:Platform=x86 /p:Configuration=Release /bl\n```\n\n----------------------------------------\n\nTITLE: Formatting Git Commit Messages for WinUI Contributions\nDESCRIPTION: Example showing the proper format for git commit messages when contributing to the WinUI project. It demonstrates the 50-character summary line, detailed explanation with 72-character line wrapping, and proper issue reference format.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/contribution_workflow.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nSummarize change in 50 characters or less\n\nProvide more detail after the first line. Leave one blank line below the \nsummary and wrap all lines at 72 characters or less.\n\nIf the change fixes an issue, leave another blank line after the final \nparagraph and indicate which issue is fixed in the specific format below.\n\nFix #42\n```\n```\n\n----------------------------------------\n\nTITLE: Creating App Packages with MSBuild and Collecting Binlogs\nDESCRIPTION: Command to simulate app package creation with x86 platform targeting while generating binary logs. This includes parameters for creating uploadable packages for the Universal Application Platform (UAP).\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/debugging_buildfailures.md#2025-04-16_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nmsbuild /p:AppxBundlePlatforms=x86 /p:Platform=x86 /p:Configuration=Release /p:BuildAppxUploadPackageForUap=true /bl\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Error Reporting Registry Keys for Crash Dumps\nDESCRIPTION: PowerShell commands to configure Windows to save full crash dumps to C:\\dumps by setting appropriate registry keys in the Windows Error Reporting LocalDumps section.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/debugging_crashes.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" /v DumpFolder /d \"C:\\dumps\"\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" /v DumpType /t REG_DWORD /d 2\n```\n\n----------------------------------------\n\nTITLE: Running Automated Crash Analysis Script\nDESCRIPTION: PowerShell command to execute the analyze-crash.ps1 script, which automates crash dump collection and analysis for a specific application, targeting the microsoft/microsoft-ui-xaml repository.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/debugging_crashes.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\temp\\analyze-crash.ps1 -ExeName MyApp -Repo microsoft/microsoft-ui-xaml\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleSwitch Visual State Groups in XAML\nDESCRIPTION: Example XAML code showing a ToggleSwitch control template with two orthogonal visual state groups: CommonStates (Normal, PointerOver, Pressed, Disabled) and ToggleStates (Dragging, Off, On). This demonstrates the challenge of handling multiple state groups in Animated Icons.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/AnimatedIcon/Docs/MultiStateSegmentLookupProposal.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ControlTemplate TargetType=\"ToggleSwitch\">\n    <VisualStateGroup Name=\"CommonStates\">\n        <VisualState Name=\"Normal\" />\n        <VisualState Name=\"PointerOver\"/>\n        <VisualState Name=\"Pressed\"/>\n        <VisualState Name=\"Disabled\"/>\n    </VisualStateGroup>\n    <VisualStateGroup Name=\"ToggleStates\">\n        <VisualState Name=\"Dragging\" />\n        <VisualState Name=\"Off\" />\n        <VisualState Name=\"On\"/>\n    </VisualStateGroup>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Building WebView2 Controls in WinUI 3.0 with MSBuild\nDESCRIPTION: Commands for building WebView2 controls using MSBuild in the WinUI repository. This includes options for both incremental and clean builds of the MUXControls solution.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/WebView2/WebView2.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmsbuild <repo>\\controls\\MUXControls.sln\n```\n\nLANGUAGE: shell\nCODE:\n```\nmsbuild <repo>\\controls\\MUXControls.sln /t:Rebuild\n```\n\n----------------------------------------\n\nTITLE: Updating EBWebView Binaries Manually\nDESCRIPTION: Commands for manually updating EBWebView binaries by copying files from the Anaheim build output to the Edge installation directory. This is useful when you already have Edge Beta installed and just want to update specific components.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/WebView2/WebView2.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncopy <AnaheimRepo>\\src\\out\\release_x86\\EBWebView\\x86\\EmbeddedBrowserWebView.dll <EdgeInstallDir>\\EBWebView\\x86\\embeddedbrowserwebview.dll\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy <AnaheimRepo>\\src\\out\\release_x86\\msedge.dll <EdgeInstallDir>\\msedge.dll\n```\n\n----------------------------------------\n\nTITLE: WebView2 Version Information Header Structure in C++\nDESCRIPTION: Example of the Edge embedded browser version info header file structure that defines product version constants. This shows how version numbers are defined in the Edge WebView2 codebase.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/dev/WebView2/WebView2-update.md#2025-04-16_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n  #ifndef EDGE_EMBEDDED_BROWSER_CLIENT_WIN_EMBEDDED_BROWSER_VERSION_INFO_VALUES_H_\n  #define EDGE_EMBEDDED_BROWSER_CLIENT_WIN_EMBEDDED_BROWSER_VERSION_INFO_VALUES_H_\n    \n  #define PRODUCT_VERSION L\"@MAJOR@.@MINOR@.@BUILD@.@PATCH@\"\n  #define MAJOR_NUMBER @MAJOR@\n  #define MINOR_NUMBER @MINOR@\n  #define BUILD_NUMBER @BUILD@\n  #define PATCH_NUMBER @PATCH@\n    \n  #endif  // EDGE_EMBEDDED_BROWSER_CLIENT_WIN_EMBEDDED_BROWSER_VERSION_INFO_VALUES_H_\n```\n\n----------------------------------------\n\nTITLE: Microsoft Security Documentation Template\nDESCRIPTION: Standard security documentation template used across Microsoft repositories to outline security vulnerability reporting procedures and guidelines.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/SECURITY.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.5 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```\n\n----------------------------------------\n\nTITLE: Publishing NuGet Package with Authentication\nDESCRIPTION: Command to publish the NuGet package to the WinUI.Dependencies feed using the AzureDevOps API key. Shows the expected output including success messages.\nSOURCE: https://github.com/microsoft/microsoft-ui-xaml/blob/main/src/controls/tools/CustomTasks/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nnuget push D:\\microsoft-ui-xaml-lift\\controls\\tools\\CustomTasks\\NuSpecs\\MUXCustomBuildTasks.1.0.81-winui3.nupkg -Source WinUI.Dependencies -apikey AzureDevOps\n```"
  }
]