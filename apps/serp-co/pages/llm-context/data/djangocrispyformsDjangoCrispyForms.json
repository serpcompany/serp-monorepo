[
  {
    "owner": "django-crispy-forms",
    "repo": "django-crispy-forms",
    "content": "TITLE: Initializing FormHelper with Form Instance in Django\nDESCRIPTION: Example showing how to attach a FormHelper instance to a Django form in the form's __init__ method. This allows crispy-forms to build a default layout using form.fields automatically.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/form_helper.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom crispy_forms.helper import FormHelper\n\nclass ExampleForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper(self)\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Form Validation in Django with Crispy Forms\nDESCRIPTION: A server-side view that validates a form and returns JSON containing either success status or re-rendered form HTML with errors. Uses render_crispy_form utility to generate form HTML with CSRF protection.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template.context_processors import csrf\nfrom crispy_forms.utils import render_crispy_form\n\n@json_view\ndef save_example_form(request):\n    form = ExampleForm(request.POST or None)\n    if form.is_valid():\n        # You could actually save through AJAX and return a success code here\n        form.save()\n        return {'success': True}\n\n\n    ctx = {}\n    ctx.update(csrf(request))\n    form_html = render_crispy_form(form, context=ctx)\n    return {'success': False, 'form_html': form_html}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Horizontal Forms in Crispy Forms\nDESCRIPTION: Sets up a FormHelper to create Bootstrap 3 horizontal forms with responsive column widths. This approach simplifies the creation of horizontal forms by setting form_class, label_class, and field_class attributes.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhelper.form_class = 'form-horizontal'\nhelper.label_class = 'col-lg-2'\nhelper.field_class = 'col-lg-8'\nhelper.layout = Layout(\n    'email',\n    'password',\n    'remember_me',\n    StrictButton('Sign in', css_class='btn-default'),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Crispy Forms Error Handling in Django\nDESCRIPTION: Sets the CRISPY_FAIL_SILENTLY setting to control whether crispy-forms raises exceptions or fails silently. When set to False, it will raise exceptions instead of logging errors, which is useful during development.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nCRISPY_FAIL_SILENTLY = not DEBUG\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Classes in Crispy Forms with CRISPY_CLASS_CONVERTERS\nDESCRIPTION: Configures how Django's default field classes are converted in crispy-forms. This is useful when integrating with custom CSS frameworks or when specific class substitutions are needed.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nCRISPY_CLASS_CONVERTERS = {'textinput': \"textinput inputtext\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Inline Forms in Crispy Forms\nDESCRIPTION: Sets up a FormHelper to create Bootstrap 3 inline forms. Requires setting the form_class to 'form-inline' and using a special inline_field.html template for proper rendering.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nhelper.form_class = 'form-inline'\nhelper.field_template = 'bootstrap3/layout/inline_field.html'\nhelper.layout = Layout(\n    'email',\n    'password',\n    'remember_me',\n    StrictButton('Sign in', css_class='btn-default'),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Layout with HTML and Context-Aware Fields in Django Crispy Forms\nDESCRIPTION: Illustrates a more complex Layout using Fieldset with context-aware legend and an HTML layout object for custom messaging. Shows how to nest layout objects.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLayout(\n    Fieldset(\n        'Tell us your favorite stuff {{ username }}',\n        'like_website',\n        'favorite_number',\n        'favorite_color',\n        'favorite_food',\n        HTML(\"\"\"\n            <p>We use notes to get better, <strong>please help us {{ username }}</strong></p>\n        \"\"\"),\n        'notes'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Layout with Fieldset in Django Crispy Forms\nDESCRIPTION: Shows how to create a FormHelper with a Layout containing a Fieldset and Submit button. The Fieldset wraps form fields and the Submit button is styled with Bootstrap classes.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Layout, Fieldset, Submit\n\nclass ExampleForm(forms.Form):\n    [...]\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            Fieldset(\n                'first arg is the legend of the fieldset',\n                'like_website',\n                'favorite_number',\n                'favorite_color',\n                'favorite_food',\n                'notes'\n            ),\n            Submit('submit', 'Submit', css_class='button white'),\n        )\n```\n\n----------------------------------------\n\nTITLE: Preparing Formset and Helper in a View\nDESCRIPTION: View function code showing how to instantiate a formset and helper and pass them to a template for rendering.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nformset = ExampleFormSet()\nhelper = ExampleFormSetHelper()\nreturn render(request, 'template.html', {'formset': formset, 'helper': helper})\n```\n\n----------------------------------------\n\nTITLE: Configuring FormHelper Attributes in Django\nDESCRIPTION: This snippet shows how to set up basic FormHelper attributes like form_id, form_class, form_method, and form_action, as well as adding a submit button.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Submit\n\nclass ExampleForm(forms.Form):\n    [...]\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_id = 'id-exampleForm'\n        self.helper.form_class = 'blueForms'\n        self.helper.form_method = 'post'\n        self.helper.form_action = 'submit_survey'\n\n        self.helper.add_input(Submit('submit', 'Submit'))\n```\n\n----------------------------------------\n\nTITLE: AJAX Form Handling with jQuery and Crispy Forms\nDESCRIPTION: Client-side JavaScript using jQuery to submit a form via AJAX and handle the response from the server. It replaces the form HTML with the returned form HTML when validation errors occur.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar example_form = '#example-form';\n\n$.ajax({\n    url: \"{% url 'save_example_form' %}\",\n    type: \"POST\",\n    data: $(example_form).serialize(),\n    success: function(data) {\n        if (!(data['success'])) {\n            // Here we replace the form, for the\n            $(example_form).replaceWith(data['form_html']);\n        }\n        else {\n            // Here you can show the user a success message or do whatever you need\n            $(example_form).find('.success-message').show();\n        }\n    },\n    error: function () {\n        $(example_form).find('.error-message').show()\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Form with {% crispy %} Tag in Django Template\nDESCRIPTION: This snippet demonstrates how to render a form using the {% crispy %} template tag in a Django template.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n{% load crispy_forms_tags %}\n{% crispy example_form example_form.helper %}\n```\n\n----------------------------------------\n\nTITLE: Creating a FormHelper for Formsets\nDESCRIPTION: Python class that extends FormHelper to customize the rendering of a formset, including setting form method and defining a field layout.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleFormSetHelper(FormHelper):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.form_method = 'post'\n        self.layout = Layout(\n            'favorite_color',\n            'favorite_food',\n        )\n        self.render_required_fields = True\n```\n\n----------------------------------------\n\nTITLE: FormHelper with Dynamic Formset Context\nDESCRIPTION: Example of a FormHelper that uses the injected forloop context to customize layout based on the current form position in the formset.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleFormSetHelper(FormHelper): \n    def __init__(self, *args, **kwargs): \n        super(FormHelper, self).__init__(*args, **kwargs)\n        self.form_method = 'post'\n        self.layout = Layout(\n            HTML('{% if forloop.first %} Only display text on the first iteration... {% endif %}'),\n            Fieldset('Item: {{forloop.counter}}', 'field'),\n            'favorite_color', \n            'favorite_food',\n        )\n        self.add_input(Submit('submit', 'Save'))\n```\n\n----------------------------------------\n\nTITLE: Filtering Layout Objects by Type in Django Crispy Forms\nDESCRIPTION: Shows how to use the filter method to select and modify layout objects based on their type, with options for controlling search depth.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/dynamic_layouts.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nform.helper.filter(basestring).wrap(Field, css_class=\"hello\")\nform.helper.filter(Div).wrap(Field, css_class=\"hello\")\nform.helper.filter(basestring, Div).wrap(Div, css_class=\"hello\")\nform.helper.filter(basestring, max_level=2).wrap(Field, css_class=\"hello\")\nform.helper.filter(basestring, greedy=True).wrap(Div, css_class=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Using crispy tag in Django templates\nDESCRIPTION: Shows how to use the {% crispy %} template tag provided by django-crispy-forms for rendering Django forms with more control.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: Django Template\nCODE:\n```\n{% crispy form %}\n```\n\n----------------------------------------\n\nTITLE: Extending Common Layout in Django Crispy Forms\nDESCRIPTION: Shows how to combine a pre-defined common layout with additional form fields using Django Crispy Forms Layout class. The code extends a base layout by adding professional interests and job description fields within a Div container.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nhelper.layout = Layout(\n    common_layout,\n    Div(\n        'professional_interests',\n        'job_description',\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Formset with formset_factory\nDESCRIPTION: Code demonstrating how to create a formset using Django's formset_factory function with an existing ExampleForm class.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms.models import formset_factory\n\nExampleFormSet = formset_factory(ExampleForm, extra=3)\nformset = ExampleFormSet()\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Forms with Helpers in Django Template\nDESCRIPTION: This snippet demonstrates how to render multiple forms with their respective helpers using the {% crispy %} tag without duplicating <form> tags.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<form action=\"{% url 'submit_survey' %}\" class=\"my-class\" method=\"post\">\n    {% crispy first_form %}\n    {% crispy second_form %}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendering Formset with Helper in Template\nDESCRIPTION: Template code showing how to use the {% crispy %} tag with both a formset and its helper explicitly specified.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% crispy formset helper %}\n```\n\n----------------------------------------\n\nTITLE: Form Action URL Configuration in Django Views\nDESCRIPTION: Example demonstrating how to set dynamic form action URLs in Django views using reverse() with args or kwargs for the FormHelper.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/form_helper.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import reverse\nform.helper.form_action = reverse('url_name', args=[event.id])\nform.helper.form_action = reverse('url_name', kwargs={'book_id': book.id})\n```\n\n----------------------------------------\n\nTITLE: Selecting All First-Level Layout Objects in Django Crispy Forms\nDESCRIPTION: Demonstrates the use of the all() method to select and modify all top-level layout objects.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/dynamic_layouts.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nform.helper.all().wrap(Field, css_class=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance-Level FormHelper in Django\nDESCRIPTION: This snippet demonstrates how to create an instance-level FormHelper in the form's __init__ method.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom crispy_forms.helper import FormHelper\n\nclass ExampleForm(forms.Form):\n    [...]\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Table Template for Formsets\nDESCRIPTION: Code showing how to configure a FormHelper to use a table-based template for rendering formsets instead of the default div-based layout.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhelper.template = 'bootstrap/table_inline_formset.html'\n```\n\n----------------------------------------\n\nTITLE: Creating Prepended and Appended Text Fields in Django Forms\nDESCRIPTION: Example of using PrependedAppendedText layout object to create a form field with both prepended and appended text elements.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPrependedAppendedText('field_name', '$', '.00')\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of Formset with Different Layouts\nDESCRIPTION: Template code demonstrating how to manually render a formset's forms with individual layouts by looping through the forms and using the crispy filter.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{{ formset.management_form|crispy }}\n{% for form in formset %}\n    {% crispy form %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating Accordion Interface in Django Forms\nDESCRIPTION: Implementation of accordion interface using Accordion and AccordionGroup layout objects.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nAccordion(\n    AccordionGroup('First Group',\n        'radio_buttons'\n    ),\n    AccordionGroup('Second Group',\n        Field('field_name_3', css_class=\"extra\")\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Forms Using Crispy Filter in Django Templates\nDESCRIPTION: Example of how to use the crispy filter to render a form or formset in Django templates. The filter requires loading the crispy_forms_tags template library before applying the |crispy filter to form variables.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/filters.rst#2025-04-22_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% load crispy_forms_tags %}\n\n<form method=\"post\" class=\"my-class\">\n    {{ my_formset|crispy }}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Interface in Django Forms\nDESCRIPTION: Implementation of tabbed interface using TabHolder and Tab layout objects.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nTabHolder(\n    Tab('First Tab',\n        'field_name_1',\n        Div('field_name_2')\n    ),\n    Tab('Second Tab',\n        Field('field_name_3', css_class=\"extra\")\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Attributes of Layout Objects in Django Crispy Forms\nDESCRIPTION: Shows how to use update_attributes to modify properties of selected layout objects.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/dynamic_layouts.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nform.helper[0:3].update_attributes(css_class=\"hello\")\nform.helper['field_2'].update_attributes(css_class=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Using InlineField for Bootstrap Inline Forms with Attributes\nDESCRIPTION: Shows how to use the InlineField layout element instead of Field when additional attributes need to be set on fields in a Bootstrap inline form.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom crispy_forms.bootstrap import InlineField\n\nhelper.layout = Layout(\n    InlineField('email', readonly=True),\n    'password',\n    [...]\n)\n```\n\n----------------------------------------\n\nTITLE: Using MultiField in Django Crispy Forms Layout\nDESCRIPTION: Demonstrates an alternative layout using MultiField, which wraps fields in a div and displays errors in a list. Shows nesting of Div within MultiField.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLayout(\n    MultiField(\n        'Tell us your favorite stuff {{ username }}',\n        Div(\n            'like_website',\n            'favorite_number',\n            css_id = 'special-fields'\n        ),\n        'favorite_color',\n        'favorite_food',\n        'notes'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Fields in Django Crispy Forms Layouts\nDESCRIPTION: Shows how to use the wrap method to enclose selected fields in a specified layout object type with additional parameters.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/dynamic_layouts.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nform.helper[1:3].wrap(Field, css_class=\"hello\")\n\n# Wrapping with Fieldset\nform.helper[1:3].wrap(Fieldset, \"legend of the fieldset\", css_class=\"fieldsets\")\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Form in Django\nDESCRIPTION: This snippet shows the definition of an ExampleForm class with various form fields to gather user information.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ExampleForm(forms.Form):\n    like_website = forms.TypedChoiceField(\n        label = \"Do you like this website?\",\n        choices = ((1, \"Yes\"), (0, \"No\")),\n        coerce = lambda x: bool(int(x)),\n        widget = forms.RadioSelect,\n        initial = '1',\n        required = True,\n    )\n\n    favorite_food = forms.CharField(\n        label = \"What is your favorite food?\",\n        max_length = 80,\n        required = True,\n    )\n\n    favorite_color = forms.CharField(\n        label = \"What is your favorite color?\",\n        max_length = 80,\n        required = True,\n    )\n\n    favorite_number = forms.IntegerField(\n        label = \"Favorite number\",\n        required = False,\n    )\n\n    notes = forms.CharField(\n        label = \"Additional notes or feedback\",\n        required = False,\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Buttons in Django Forms\nDESCRIPTION: Examples of using StrictButton layout object to create HTML button elements with custom styling.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nStrictButton(\"Button's content\", name=\"go\", value=\"go\", css_class=\"extra\")\nStrictButton('Success', css_class=\"btn-success\")\n```\n\n----------------------------------------\n\nTITLE: Adding Submit Button to FormHelper\nDESCRIPTION: Code showing how to add a submit button to a formset using the helper's add_input method.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nhelper.add_input(Submit(\"submit\", \"Save\"))\n```\n\n----------------------------------------\n\nTITLE: Original Label Rendering in Django Crispy Forms Template\nDESCRIPTION: This code snippet shows the original implementation of label rendering in the field.html template of Django Crispy Forms. It includes conditional rendering based on field type and form settings.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/form_helper.rst#2025-04-22_snippet_4\n\nLANGUAGE: django-template\nCODE:\n```\n{% if field.label and not field|is_checkbox and form_show_labels %}\n    <label for=\"{{ field.id_for_label }}\" class=\"control-label {% if field.field.required %}requiredField{% endif %}\">\n        {{ field.label }}{% if field.field.required %}<span class=\"asteriskField\">*</span>{% endif %}\n    </label>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Modified Label Rendering for Uppercase Option in Django Crispy Forms\nDESCRIPTION: This snippet demonstrates how to modify the label rendering in the field.html template to support uppercase labels. It uses the 'labels_uppercase' variable to conditionally apply the uppercase filter.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/form_helper.rst#2025-04-22_snippet_5\n\nLANGUAGE: django-template\nCODE:\n```\n{% if not labels_uppercase %}{{ field.label }}{% else %}{{ field.label|upper }}{% endif %}{% if field.field.required %}\n```\n\n----------------------------------------\n\nTITLE: Creating Uneditable Fields in Django Forms\nDESCRIPTION: Example of using UneditableField layout object to create disabled form fields.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nUneditableField('text_input', css_class='form-control-lg')\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Radio Buttons in Django Forms\nDESCRIPTION: Implementation of inline radio buttons for ChoiceField using the InlineRadios layout object.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nInlineRadios('field_name')\n```\n\n----------------------------------------\n\nTITLE: Setting Helper Attribute for Uppercase Labels in Django Crispy Forms\nDESCRIPTION: This snippet shows how to set a helper attribute 'labels_uppercase' to True in Django Crispy Forms. This attribute will be used to control label capitalization in form rendering.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/form_helper.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhelper.labels_uppercase = True\n```\n\n----------------------------------------\n\nTITLE: Creating Input Fields with Buttons in Django Forms\nDESCRIPTION: Example of using FieldWithButtons layout object to create an input field connected with buttons.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nFieldWithButtons('field_name', StrictButton(\"Go!\"), input_size=\"input-group-sm\")\n```\n\n----------------------------------------\n\nTITLE: Using crispy filter in Django templates\nDESCRIPTION: Demonstrates the usage of the |crispy filter provided by django-crispy-forms for rendering Django forms.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{{ form|crispy }}\n```\n\n----------------------------------------\n\nTITLE: Selecting Layout Objects with Slices in Django Crispy Forms\nDESCRIPTION: Demonstrates how to select parts of a layout using Python-style slicing syntax on the FormHelper instance.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/dynamic_layouts.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nform.helper[1:3]\nform.helper[2]\nform.helper[:-1]\n\n# Accessing nested elements\nform.helper[0][0]\n```\n\n----------------------------------------\n\nTITLE: Importing FormHelper in Django\nDESCRIPTION: This snippet shows how to import the FormHelper class from crispy_forms.helper.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom crispy_forms.helper import FormHelper\n```\n\n----------------------------------------\n\nTITLE: Wrapping Multiple Fields Together in Django Crispy Forms\nDESCRIPTION: Demonstrates the use of wrap_together to enclose multiple selected fields within a single layout object.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/dynamic_layouts.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nform.helper[0:3].wrap_together(Field, css_class=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: FormHelper URL Configuration Pattern\nDESCRIPTION: URL configuration pattern example showing how to define a named URL in Django URLconf that can be referenced by FormHelper's form_action attribute.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/form_helper.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurl(r'^show/profile/$', 'show_my_profile_view', name='show_my_profile')\n```\n\n----------------------------------------\n\nTITLE: Basic Formset Rendering with crispy Tag\nDESCRIPTION: Simple template code showing how to render a formset using the {% crispy %} template tag without any custom helpers.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% crispy formset %}\n```\n\n----------------------------------------\n\nTITLE: Installing django-crispy-forms as editable package\nDESCRIPTION: Command to install django-crispy-forms as an editable package, allowing for updates via git pull.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e git+git://github.com/django-crispy-forms/django-crispy-forms.git@main#egg=django-crispy-forms\n```\n\n----------------------------------------\n\nTITLE: Manipulating FormHelper in a Django View\nDESCRIPTION: This snippet shows how to change a FormHelper property (form_action) in a view based on a GET parameter.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_forms.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n@login_required()\ndef inbox(request, template_name):\n    example_form = ExampleForm()\n    redirect_url = request.GET.get('next')\n\n    # Form handling logic\n    [...]\n\n    if redirect_url is not None:\n        example_form.helper.form_action = reverse('submit_survey') + '?next=' + redirectUrl\n\n    return render_to_response(template_name, {'example_form': example_form}, context_instance=RequestContext(request))\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies from Multiple Requirements Files\nDESCRIPTION: References three separate requirements files that specify development, linting, and testing dependencies for the Django Crispy Forms project. Uses pip's requirements file syntax to import other requirement files.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-r requirements/dev.txt\n-r requirements/lint.txt\n-r requirements/testing.txt\n```\n\n----------------------------------------\n\nTITLE: Filtering by Widget Type in Django Crispy Forms\nDESCRIPTION: Demonstrates how to select and modify fields based on their widget type using filter_by_widget and exclude_by_widget methods.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/dynamic_layouts.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nform.helper.filter_by_widget(forms.PasswordInput).wrap(Field, css_class=\"hero\")\nform.helper.exclude_by_widget(forms.PasswordInput).wrap(Field, css_class=\"hero\")\n```\n\n----------------------------------------\n\nTITLE: Manipulating Layouts Directly in Django Crispy Forms\nDESCRIPTION: Shows various list-like operations that can be performed directly on layout objects to modify their structure.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/dynamic_layouts.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlayout[0][3][1] = Div('field_1')\nlayout.append(HTML(\"<p>whatever</p>\"))\nlayout[0].append(HTML(\"<p>whatever</p>\"))\nlayout.extend([\n    HTML(\"<p>whatever</p>\"),\n    Div('add_field_on_the_go')\n])\nlayout[0][2].extend([\n    HTML(\"<p>whatever</p>\"),\n    Div('add_field_on_the_go')\n])\nlayout.pop(1)\nlayout[1].pop(1)\nlayout.insert(1, HTML(\"<p>whatever</p>\"))\nlayout[1].insert(1, HTML(\"<p>whatever</p>\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Checkboxes in Django Forms\nDESCRIPTION: Implementation of inline checkboxes for MultipleChoiceField using the InlineCheckboxes layout object.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nInlineCheckboxes('field_name')\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Dialogs in Django Forms\nDESCRIPTION: Example of using Alert layout object to create alert dialog markup.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nAlert(content=\"<strong>Warning!</strong> Best check yo self, you're not looking too good.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Dialogs in Django Forms\nDESCRIPTION: Implementation of modal dialog using Modal layout object with customizable attributes.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nLayout(\n    Modal(\n        Field('email', placeholder=\"Email\", wrapper_class=\"mb-0\"),\n        Button(\n            \"submit\",\n            \"Send Reset Email\",\n            id=\"email_reset\",\n            css_class=\"btn-primary mt-3\",\n            onClick=\"someJavasciptFunction()\",\n        ),\n        css_id=\"my_modal_id\",\n        title=\"This is my modal\",\n        title_class=\"w-100 text-center\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Setting default template pack for django-crispy-forms\nDESCRIPTION: Configuration snippet showing how to set the default template pack using the CRISPY_TEMPLATE_PACK setting in Django's settings.py file.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/install.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCRISPY_TEMPLATE_PACK = 'uni_form'\n```\n\n----------------------------------------\n\nTITLE: Adding crispy_forms to Django INSTALLED_APPS\nDESCRIPTION: Configuration snippet showing how to add crispy_forms to the INSTALLED_APPS setting in Django's settings.py file.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...\n    'crispy_forms',\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CRISPY_CLASS_CONVERTERS in Django Settings (Python)\nDESCRIPTION: Example of restoring previous behavior for Uni-Form specific classes by adding CRISPY_CLASS_CONVERTERS to the Django settings file. This defines class conversions for text input, file input, and password input fields.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconverters = {\n  \"textinput\": \"textinput textInput\",\n  \"fileinput\": \"fileinput fileUpload\",\n  \"passwordinput\": \"textinput textInput\",\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Wrapper with form_tag=False\nDESCRIPTION: HTML template code showing how to manually wrap a formset when the FormHelper has form_tag set to False.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/crispy_tag_formsets.rst#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"{% url 'save_formset' %}\" method=\"POST\">\n    {% crispy formset helper %}\n    <div class=\"form-actions\">\n        <input type=\"submit\" name=\"submit\" value=\"Save\" class=\"btn btn-primary\" id=\"submit-save\">\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendering Crispy Form in Django Template\nDESCRIPTION: Demonstrates how to render a crispy form in a Django template using the crispy_forms_tags template library.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/layouts.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load crispy_forms_tags %}\n{% crispy example_form %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Django Template Tag in HTML\nDESCRIPTION: Shows the usage of the csrf_token template tag in a Django form. This tag is crucial for security, protecting against Cross-Site Request Forgery attacks.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/concepts.rst#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% csrf_token %}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Template Pack Directory Structure\nDESCRIPTION: Shows the complete directory structure of a Bootstrap v2 template pack for Django Crispy Forms, including all required and optional templates.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/template_packs.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── accordion-group.html\n├── accordion.html\n├── betterform.html\n├── display_form.html\n├── errors.html\n├── errors_formset.html\n├── field.html\n├── layout\n│   ├── alert.html\n│   ├── baseinput.html\n│   ├── button.html\n│   ├── checkboxselectmultiple.html\n│   ├── checkboxselectmultiple_inline.html\n│   ├── div.html\n│   ├── field_errors.html\n│   ├── field_errors_block.html\n│   ├── field_with_buttons.html\n│   ├── fieldset.html\n│   ├── formactions.html\n│   ├── help_text.html\n│   ├── help_text_and_errors.html\n│   ├── multifield.html\n│   ├── prepended_appended_text.html\n│   ├── radioselect.html\n│   ├── radioselect_inline.html\n│   ├── tab-link.html\n│   ├── tab.html\n│   └── uneditable_input.html\n├── table_inline_formset.html\n├── uni_form.html\n├── uni_formset.html\n├── whole_uni_form.html\n└── whole_uni_formset.html\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for Bootstrap Module in Django Crispy Forms\nDESCRIPTION: This snippet uses Python's Sphinx documentation generator to automatically document all members of the crispy_forms.bootstrap module. It includes all classes, functions, and variables defined in the module.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/api_bootstrap.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: crispy_forms.bootstrap\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for Django Crispy Forms Helper Module\nDESCRIPTION: This reStructuredText directive automatically generates documentation for all members of the 'helper' module in Django Crispy Forms. It includes a section title and a reference label for linking purposes.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/api_helpers.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _`helpers api`:\n\n===================================\nAPI helpers\n===================================\n\n\n.. automodule:: helper\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation with automodule in reStructuredText\nDESCRIPTION: This snippet uses the automodule directive to automatically generate documentation for the layout module in Django Crispy Forms. It includes all members of the module in the documentation.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/api_layout.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: layout\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic HTML Form Structure\nDESCRIPTION: Demonstrates the basic structure of an HTML form using opening and closing form tags. This is presented as an example of repetitive code that Django Crispy Forms aims to reduce.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/concepts.rst#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<form></form>\n```\n\n----------------------------------------\n\nTITLE: Installing django-crispy-forms with pip\nDESCRIPTION: Command to install the latest stable version of django-crispy-forms using pip.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-crispy-forms\n```\n\n----------------------------------------\n\nTITLE: Installing development version of django-crispy-forms\nDESCRIPTION: Command to install the development version directly from GitHub repository.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install git+git://github.com/django-crispy-forms/django-crispy-forms.git@main#egg=django-crispy-forms\n```\n\n----------------------------------------\n\nTITLE: Updating LayoutObject Rendering Method (Python)\nDESCRIPTION: Example of updating the render() method call for LayoutObjects due to the removal of the form_style parameter in django-crispy-forms 2.x. This change affects custom LayoutObjects implementations.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# django-crispy-forms 1.x\nhtml = my_layout_object.render(form, form_style, context)\n# django-crispy-forms 2.x\nhtml = my_layout_object.render(form, context)\n```\n\n----------------------------------------\n\nTITLE: Defining Testing Dependencies and Template Packs for Django Crispy Forms\nDESCRIPTION: Lists the required packages for testing Django Crispy Forms, including coverage with TOML support, pytest with related plugins, and external template packs from GitHub repositories.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/requirements/testing.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncoverage[toml]\npytest\npytest-cov\npytest-django\ngit+https://github.com/django-crispy-forms/crispy-bootstrap4\ngit+https://github.com/django-crispy-forms/crispy-bootstrap3\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies for Django-Crispy-Forms\nDESCRIPTION: Lists the required packages for building the documentation for django-crispy-forms. This includes Django as the base framework, Sphinx 5 or higher for documentation generation, sphinx_rtd_theme 1.2.2 or higher for styling, and numpydoc for NumPy-style docstring processing.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDjango\nSphinx>=5\nsphinx_rtd_theme>=1.2.2\nnumpydoc\n```\n\n----------------------------------------\n\nTITLE: Listing Development Dependencies for Django Crispy Forms\nDESCRIPTION: A simple list of Python packages required for development of Django Crispy Forms. Includes pre-commit for Git hooks, twine for package publishing, and wheel for building distributions.\nSOURCE: https://github.com/django-crispy-forms/django-crispy-forms/blob/main/requirements/dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npre-commit\ntwine\nwheel\n```"
  }
]