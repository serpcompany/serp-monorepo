[
  {
    "owner": "mark3labs",
    "repo": "mcp-go",
    "content": "TITLE: Main Code Generation Driver (main.go)\nDESCRIPTION: This Go program orchestrates the code generation process, invoking the templates and processing input data from 'data.go'. It runs 'go generate', executes the templates with provided data, and formats the generated code using 'goimports' to ensure clean, import-optimized output. It integral to automating the reproduction of server-related code artifacts.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/server/internal/gen/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n/* Content of main.go */\n```\n\n----------------------------------------\n\nTITLE: Defining an HTTP Request Tool in Go\nDESCRIPTION: This snippet defines an HTTP request tool that allows making external API calls with specified HTTP methods (GET, POST, PUT, DELETE). It validates required parameters for method and URL (URL must match HTTP/S pattern) and optionally accepts a request body. The handler constructs and executes the HTTP request, handles errors in request creation, execution, and response reading, and returns a textual result including response status code and body. Key dependencies include the MCP framework, Go's net/http package, and io utilities.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nhttpTool := mcp.NewTool(\"http_request\",\n    mcp.WithDescription(\"Make HTTP requests to external APIs\"),\n    mcp.WithString(\"method\",\n        mcp.Required(),\n        mcp.Description(\"HTTP method to use\"),\n        mcp.Enum(\"GET\", \"POST\", \"PUT\", \"DELETE\"),\n    ),\n    mcp.WithString(\"url\",\n        mcp.Required(),\n        mcp.Description(\"URL to send the request to\"),\n        mcp.Pattern(\"^https?://.*\"),\n    ),\n    mcp.WithString(\"body\",\n        mcp.Description(\"Request body (for POST/PUT)\"),\n    ),\n)\n\ns.AddTool(httpTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {\n    method := request.Params.Arguments[\"method\"].(string)\n    url := request.Params.Arguments[\"url\"].(string)\n    body := \"\"\n    if b, ok := request.Params.Arguments[\"body\"].(string); ok {\n        body = b\n    }\n\n    // Create and send request\n    var req *http.Request\n    var err error\n    if body != \"\" {\n        req, err = http.NewRequest(method, url, strings.NewReader(body))\n    } else {\n        req, err = http.NewRequest(method, url, nil)\n    }\n    if err != nil {\n        return mcp.NewToolResultErrorFromErr(\"unable to create request\", err), nil\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return mcp.NewToolResultErrorFromErr(\"unable to execute request\", err), nil\n    }\n    defer resp.Body.Close()\n\n    // Return response\n    respBody, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return mcp.NewToolResultErrorFromErr(\"unable to read request response\", err), nil\n    }\n\n    return mcp.NewToolResultText(fmt.Sprintf(\"Status: %d\\nBody: %s\", resp.StatusCode, string(respBody))), nil\n})\n```\n\n----------------------------------------\n\nTITLE: Creating MCP Server with Calculator Tool (Go)\nDESCRIPTION: Creates an MCP server with enhanced features like resource capabilities, logging, and recovery. Defines a \"calculate\" tool accepting 'operation' (enum: add, subtract, multiply, divide), 'x' (number), and 'y' (number) parameters. The handler performs the specified arithmetic operation based on the input parameters and returns the result as text, handling division by zero. Requires the `mcp` and `server` packages.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"errors\"\n    \"fmt\"\n\n    \"github.com/mark3labs/mcp-go/mcp\"\n    \"github.com/mark3labs/mcp-go/server\"\n)\n\nfunc main() {\n    // Create a new MCP server\n    s := server.NewMCPServer(\n        \"Calculator Demo\",\n        \"1.0.0\",\n        server.WithResourceCapabilities(true, true),\n        server.WithLogging(),\n        server.WithRecovery(),\n    )\n\n    // Add a calculator tool\n    calculatorTool := mcp.NewTool(\"calculate\",\n        mcp.WithDescription(\"Perform basic arithmetic operations\"),\n        mcp.WithString(\"operation\",\n            mcp.Required(),\n            mcp.Description(\"The operation to perform (add, subtract, multiply, divide)\"),\n            mcp.Enum(\"add\", \"subtract\", \"multiply\", \"divide\"),\n        ),\n        mcp.WithNumber(\"x\",\n            mcp.Required(),\n            mcp.Description(\"First number\"),\n        ),\n        mcp.WithNumber(\"y\",\n            mcp.Required(),\n            mcp.Description(\"Second number\"),\n        ),\n    )\n\n    // Add the calculator handler\n    s.AddTool(calculatorTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {\n        op := request.Params.Arguments[\"operation\"].(string)\n        x := request.Params.Arguments[\"x\"].(float64)\n        y := request.Params.Arguments[\"y\"].(float64)\n\n        var result float64\n        switch op {\n        case \"add\":\n            result = x + y\n        case \"subtract\":\n            result = x - y\n        case \"multiply\":\n            result = x * y\n        case \"divide\":\n            if y == 0 {\n                return mcp.NewToolResultError(\"cannot divide by zero\"), nil\n            }\n            result = x / y\n        }\n\n        return mcp.NewToolResultText(fmt.Sprintf(\"%.2f\", result)), nil\n    })\n\n    // Start the server\n    if err := server.ServeStdio(s); err != nil {\n        fmt.Printf(\"Server error: %v\\n\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Calculation Tool in Go\nDESCRIPTION: This snippet implements a simple arithmetic calculator tool using the MCP framework. It defines the tool with required string and number parameters specifying the operation ('add', 'subtract', 'multiply', 'divide') and operands. The handler performs the specified operation, handles division-by-zero errors gracefully, and returns the result formatted as a number. Dependencies include the MCP Go SDK and standard Go context package.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncalculatorTool := mcp.NewTool(\"calculate\",\n    mcp.WithDescription(\"Perform basic arithmetic calculations\"),\n    mcp.WithString(\"operation\",\n        mcp.Required(),\n        mcp.Description(\"The arithmetic operation to perform\"),\n        mcp.Enum(\"add\", \"subtract\", \"multiply\", \"divide\"),\n    ),\n    mcp.WithNumber(\"x\",\n        mcp.Required(),\n        mcp.Description(\"First number\"),\n    ),\n    mcp.WithNumber(\"y\",\n        mcp.Required(),\n        mcp.Description(\"Second number\"),\n    ),\n)\n\ns.AddTool(calculatorTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {\n    op := request.Params.Arguments[\"operation\"].(string)\n    x := request.Params.Arguments[\"x\"].(float64)\n    y := request.Params.Arguments[\"y\"].(float64)\n\n    var result float64\n    switch op {\n    case \"add\":\n        result = x + y\n    case \"subtract\":\n        result = x - y\n    case \"multiply\":\n        result = x * y\n    case \"divide\":\n        if y == 0 {\n            return mcp.NewToolResultError(\"cannot divide by zero\"), nil\n        }\n        result = x / y\n    }\n    \n    return mcp.FormatNumberResult(result), nil\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a SQL Query Builder Prompt with Embedded Resource in Go\nDESCRIPTION: This prompt assists with SQL query construction by requiring the user to specify a database table name. It returns a prompt including system instructions to act as a SQL expert and an embedded resource linking to the JSON schema of the specified table. The prompt validates the required 'table' argument and returns an error if it is missing. This implementation facilitates context-aware query generation using schema metadata.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Database query builder prompt\ns.AddPrompt(mcp.NewPrompt(\"query_builder\",\n    mcp.WithPromptDescription(\"SQL query builder assistance\"),\n    mcp.WithArgument(\"table\",\n        mcp.ArgumentDescription(\"Name of the table to query\"),\n        mcp.RequiredArgument(),\n    ),\n), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {\n    tableName := request.Params.Arguments[\"table\"]\n    if tableName == \"\" {\n        return nil, fmt.Errorf(\"table name is required\")\n    }\n    \n    return mcp.NewGetPromptResult(\n        \"SQL query builder assistance\",\n        []mcp.PromptMessage{\n            mcp.NewPromptMessage(\n                mcp.RoleSystem,\n                mcp.NewTextContent(\"You are a SQL expert. Help construct efficient and safe queries.\"),\n            ),\n            mcp.NewPromptMessage(\n                mcp.RoleAssistant,\n                mcp.NewEmbeddedResource(mcp.ResourceContents{\n                    URI: fmt.Sprintf(\"db://schema/%s\", tableName),\n                    MIMEType: \"application/json\",\n                }),\n            ),\n        },\n    ), nil\n})\n```\n\n----------------------------------------\n\nTITLE: Template for Request Handler Generation (request_handler.go.tmpl)\nDESCRIPTION: This template defines the structure for generating the request handler code, primarily producing a switch statement that dispatches requests. It leverages the input data structure and generates Go code that organizes request handling logic based on input parameters. Dependencies include the associated data struct. The output is a segment of Go code used in server request processing.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/server/internal/gen/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n/* Content of request_handler.go.tmpl */\n```\n\n----------------------------------------\n\nTITLE: Adding a Code Review Prompt with Embedded Resource in Go\nDESCRIPTION: This prompt supports code review tasks by accepting a required pull request number argument. It returns system-level instructions and an embedded resource containing the diff of the specified pull request. The prompt uses MCP constructs for prompt messages and embedded resources, enabling the LLM to review code changes contextually. It validates input presence, returning an error if the required argument is missing.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Code review prompt with embedded resource\ns.AddPrompt(mcp.NewPrompt(\"code_review\",\n    mcp.WithPromptDescription(\"Code review assistance\"),\n    mcp.WithArgument(\"pr_number\",\n        mcp.ArgumentDescription(\"Pull request number to review\"),\n        mcp.RequiredArgument(),\n    ),\n), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {\n    prNumber := request.Params.Arguments[\"pr_number\"]\n    if prNumber == \"\" {\n        return nil, fmt.Errorf(\"pr_number is required\")\n    }\n    \n    return mcp.NewGetPromptResult(\n        \"Code review assistance\",\n        []mcp.PromptMessage{\n            mcp.NewPromptMessage(\n                mcp.RoleSystem,\n                mcp.NewTextContent(\"You are a helpful code reviewer. Review the changes and provide constructive feedback.\"),\n            ),\n            mcp.NewPromptMessage(\n                mcp.RoleAssistant,\n                mcp.NewEmbeddedResource(mcp.ResourceContents{\n                    URI: fmt.Sprintf(\"git://pulls/%s/diff\", prNumber),\n                    MIMEType: \"text/x-diff\",\n                }),\n            ),\n        },\n    ), nil\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MCP Server with Tool (Go)\nDESCRIPTION: Initializes an MCP server instance. Defines and adds a simple \"hello_world\" tool that takes a string \"name\" parameter. The `helloHandler` function retrieves the name from the request arguments and returns a \"Hello, [name]!\" text result. Starts the server on standard I/O. Requires the `mcp` and `server` packages.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"errors\"\n    \"fmt\"\n\n    \"github.com/mark3labs/mcp-go/mcp\"\n    \"github.com/mark3labs/mcp-go/server\"\n)\n\nfunc main() {\n    // Create MCP server\n    s := server.NewMCPServer(\n        \"Demo 🚀\",\n        \"1.0.0\",\n    )\n\n    // Add tool\n    tool := mcp.NewTool(\"hello_world\",\n        mcp.WithDescription(\"Say hello to someone\"),\n        mcp.WithString(\"name\",\n            mcp.Required(),\n            mcp.Description(\"Name of the person to greet\"),\n        ),\n    )\n\n    // Add tool handler\n    s.AddTool(tool, helloHandler)\n\n    // Start the stdio server\n    if err := server.ServeStdio(s); err != nil {\n        fmt.Printf(\"Server error: %v\\n\", err)\n    }\n}\n\nfunc helloHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {\n    name, ok := request.Params.Arguments[\"name\"].(string)\n    if !ok {\n        return nil, errors.New(\"name must be a string\")\n    }\n\n    return mcp.NewToolResultText(fmt.Sprintf(\"Hello, %s!\", name)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Input Data Struct for Code Templates (data.go)\nDESCRIPTION: This file defines a Go struct that holds input parameters for the code generation templates. It encapsulates the necessary data to produce request handlers and hook definitions, ensuring that the generated code reflects the specified configuration. The struct facilitates flexible and maintainable code generation.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/server/internal/gen/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n/* Content of data.go */\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Greeting Prompt in Go\nDESCRIPTION: This prompt template provides a friendly greeting message using the MCP framework. It declares a single optional argument 'name' and returns a prompt with an assistant role message greeting the specified name or defaults to 'friend'. Dependencies include MCP prompt constructs and Go context. The prompt facilitates reusable conversational patterns for greeting users.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Simple greeting prompt\ns.AddPrompt(mcp.NewPrompt(\"greeting\",\n    mcp.WithPromptDescription(\"A friendly greeting prompt\"),\n    mcp.WithArgument(\"name\",\n        mcp.ArgumentDescription(\"Name of the person to greet\"),\n    ),\n), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {\n    name := request.Params.Arguments[\"name\"]\n    if name == \"\" {\n        name = \"friend\"\n    }\n    \n    return mcp.NewGetPromptResult(\n        \"A friendly greeting\",\n        []mcp.PromptMessage{\n            mcp.NewPromptMessage(\n                mcp.RoleAssistant,\n                mcp.NewTextContent(fmt.Sprintf(\"Hello, %s! How can I help you today?\", name)),\n            ),\n        },\n    ), nil\n})\n```\n\n----------------------------------------\n\nTITLE: Template for Hook Functions (hooks.go.tmpl)\nDESCRIPTION: This template generates code defining hook function types and methods on the Hook struct, enabling customizable hooks within the application. It depends on a data struct containing hook specifications. The generated code forms part of the server's extensibility points for request processing or event handling.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/server/internal/gen/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n/* Content of hooks.go.tmpl */\n```\n\n----------------------------------------\n\nTITLE: Exposing Dynamic Resource Template (Go)\nDESCRIPTION: Defines a dynamic resource using a URI template containing a placeholder `{id}`. It adds a handler function intended to extract the `id` from the request URI, use it to fetch data (e.g., from a database or API), and return the data as resource content. Requires the `mcp` package and potentially external data access logic.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n// Dynamic resource example - user profiles by ID\ntemplate := mcp.NewResourceTemplate(\n    \"users://{id}/profile\",\n    \"User Profile\",\n    mcp.WithTemplateDescription(\"Returns user profile information\"),\n    mcp.WithTemplateMIMEType(\"application/json\"),\n)\n\n// Add template with its handler\ns.AddResourceTemplate(template, func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.ResourceContents, error) {\n    // Extract ID from the URI using regex matching\n    // The server automatically matches URIs to templates\n    userID := extractIDFromURI(request.Params.URI)\n    \n    profile, err := getUserProfile(userID)  // Your DB/API call here\n    if err != nil {\n        return nil, err\n    }\n    \n    return []mcp.ResourceContents{\n        mcp.TextResourceContents{\n            URI:      request.Params.URI,\n            MIMEType: \"application/json\",\n            Text:     profile,\n        },\n    }, nil\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Static Resource (Go)\nDESCRIPTION: Defines a static resource with a fixed URI, description, and MIME type. It adds a handler function that reads the content of a local file (`README.md`), packages it into `mcp.ResourceContents`, and returns it to the client. Requires the `mcp` package and file system access (`os`).\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// Static resource example - exposing a README file\nresource := mcp.NewResource(\n    \"docs://readme\",\n    \"Project README\",\n    mcp.WithResourceDescription(\"The project's README file\"), \n    mcp.WithMIMEType(\"text/markdown\"),\n)\n\n// Add resource with its handler\ns.AddResource(resource, func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.ResourceContents, error) {\n    content, err := os.ReadFile(\"README.md\")\n    if err != nil {\n        return nil, err\n    }\n    \n    return []mcp.ResourceContents{\n        mcp.TextResourceContents{\n            URI:      \"docs://readme\",\n            MIMEType: \"text/markdown\",\n            Text:     string(content),\n        },\n    }, nil\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic MCP Server (Go)\nDESCRIPTION: Creates a minimal MCP server instance with a name and version. It then starts the server using the standard input/output stream, which is a common way for MCP clients to interact with a server process. Requires the `mcp/server` package.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Create a basic server\ns := server.NewMCPServer(\n    \"My Server\",  // Server name\n    \"1.0.0\",     // Version\n)\n\n// Start the server using stdio\nif err := server.ServeStdio(s); err != nil {\n    log.Fatalf(\"Server error: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Go Library (Bash)\nDESCRIPTION: Uses the `go get` command to download and install the latest version of the `github.com/mark3labs/mcp-go` library into the user's Go path. This makes the package available for use in Go projects. Requires a working Go environment.\nSOURCE: https://github.com/mark3labs/mcp-go/blob/main/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/mark3labs/mcp-go\n```"
  }
]