[
  {
    "owner": "node-oauth",
    "repo": "node-oauth2-server",
    "content": "TITLE: Implementing OAuth2 Server Authentication in Node.js\nDESCRIPTION: This snippet demonstrates how to initialize and use the OAuth2 server for request authentication. It shows importing the required classes, creating an OAuth2 server instance with a model, creating request and response objects, and authenticating a request with a Bearer token.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst OAuth2Server = require('@node-oauth/oauth2-server');\nconst Request = OAuth2Server.Request;\nconst Response = OAuth2Server.Response;\n\nconst oauth = new OAuth2Server({\n  model: require('./model')\n});\n\nlet request = new Request({\n  method: 'GET',\n  query: {},\n  headers: {Authorization: 'Bearer foobar'}\n});\n\nlet response = new Response({\n  headers: {}\n});\n\noauth.authenticate(request, response)\n  .then((token) => {\n    // The request was successfully authenticated.\n  })\n  .catch((err) => {\n    // The request failed authentication.\n  });\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth2 Tokens\nDESCRIPTION: Demonstrates how to generate OAuth2 tokens using the token method. This handles various grant types and returns access tokens when requests are valid and authorized.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/docs/getting-started.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\noauth.token(request, response)\n  .then((token) => {\n    // The resource owner granted the access request.\n  })\n  .catch((err) => {\n    // The request was invalid or not authorized.\n  });\n```\n\n----------------------------------------\n\nTITLE: Authorizing OAuth2 Requests with Error Handling\nDESCRIPTION: Shows how to authorize a request using the OAuth2 server's authorize method. Includes specific error handling for access denied scenarios versus other error conditions.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/docs/getting-started.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst AccessDeniedError = require('@node-oauth/oauth2-server/lib/errors/access-denied-error');\n\noauth.authorize(request, response)\n  .then((code) => {\n    // The resource owner granted the access request.\n  })\n  .catch((err) => {\n    if (err instanceof AccessDeniedError) {\n      // The resource owner denied the access request.\n    } else {\n      // Access was not granted due to some other error condition.\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Authenticating Requests with OAuth2 Server\nDESCRIPTION: Demonstrates how to authenticate a request using the OAuth2 server's authenticate method. This validates access tokens and handles authentication errors with promises.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/docs/getting-started.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\noauth.authenticate(request, response)\n  .then((token) => {\n    // The request was successfully authenticated.\n  })\n  .catch((err) => {\n    // The request failed authentication.\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing saveToken OAuth2 Function\nDESCRIPTION: Function to save access and refresh tokens with associated client and user data. Required for all grant types.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction saveToken(token, client, user) {\n  // imaginary DB queries\n  let fns = [\n    db.saveAccessToken({\n      access_token: token.accessToken,\n      expires_at: token.accessTokenExpiresAt,\n      scope: token.scope,\n      client_id: client.id,\n      user_id: user.id\n    }),\n    db.saveRefreshToken({\n      refresh_token: token.refreshToken,\n      expires_at: token.refreshTokenExpiresAt,\n      scope: token.scope,\n      client_id: client.id,\n      user_id: user.id\n    })\n  ];\n  return Promise.all(fns);\n    .spread(function(accessToken, refreshToken) {\n      return {\n        accessToken: accessToken.access_token,\n        accessTokenExpiresAt: accessToken.expires_at,\n        refreshToken: refreshToken.refresh_token,\n        refreshTokenExpiresAt: refreshToken.expires_at,\n        scope: accessToken.scope,\n        client: {id: accessToken.client_id},\n\n```\n\n----------------------------------------\n\nTITLE: Implementing an Authentication Handler with OAuth2Server\nDESCRIPTION: Demonstrates how to create an Express middleware function that authenticates requests using OAuth2Server. It creates a new Request and Response object and handles the authentication result.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst oauth = new OAuth2Server({model: ...});\n\nfunction authenticateHandler(options) {\n  return function(req, res, next) {\n    let request = new Request(req);\n    let response = new Response(res);\n    return oauth.authenticate(request, response, options)\n      .then(function(token) {\n        res.locals.oauth = {token: token};\n        next();\n      })\n      .catch(function(err) {\n        // handle error condition\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Grant Type by Extending AbstractGrantType in Node OAuth2 Server\nDESCRIPTION: This example demonstrates how to create a custom OAuth2 grant type by extending the AbstractGrantType class. It implements the required handle and saveToken methods, along with a custom getUserBySomething method for user validation based on external identity providers.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/misc/extension-grants.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst OAuth2Server = require('@node-oauth/oauth2-server');\nconst AbstractGrantType = OAuth2Server.AbstractGrantType;\nconst InvalidArgumentError = OAuth2Server.InvalidArgumentError;\nconst InvalidRequestError = OAuth2Server.InvalidRequestError;\n\nclass MyCustomGrantType extends AbstractGrantType {\n    constructor(opts) {\n        super(opts);\n    }\n\n    async handle(request, client) {\n        if (!request) throw new InvalidArgumentError('Missing `request`');\n        if (!client) throw new InvalidArgumentError('Missing `client`');\n\n        let scope = this.getScope(request);\n        let user = await this.getUserBySomething(request);\n\n        return this.saveToken(user, client, scope);\n    }\n\n    async saveToken(user, client, scope) {\n        this.validateScope(user, client, scope);\n\n        let token = {\n            accessToken: await this.generateAccessToken(client, user, scope),\n            accessTokenExpiresAt: this.getAccessTokenExpiresAt(),\n            refreshToken: await this.generateRefreshToken(client, user, scope),\n            refreshTokenExpiresAt: this.getRefreshTokenExpiresAt(),\n            scope: scope\n        };\n\n        return this.model.saveToken(token, client, user);\n    }\n\n    async getUserBySomething(request) {\n        //Get user's data by corresponding data (FB User ID, Google, etc.), etc.\n    }\n}\n\nmodule.exports = MyCustomGrantType;\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Token Handler in Express.js\nDESCRIPTION: This snippet demonstrates how to implement the OAuth2 token handler in an Express.js application. It creates a middleware function that processes token requests and handles responses.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst oauth = new OAuth2Server({model: ...});\n\nfunction tokenHandler(options) {\n  return function(req, res, next) {\n    let request = new Request(req);\n    let response = new Response(res);\n    return oauth.token(request, response, options)\n      .then(function(code) {\n        res.locals.oauth = {token: token};\n        next();\n      })\n      .catch(function(err) {\n        // handle error condition\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Authorization Handler with OAuth2Server\nDESCRIPTION: Shows how to create an Express middleware function that handles authorization requests. It creates Request and Response objects and processes the authorization result.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst oauth = new OAuth2Server({model: ...});\n\nfunction authorizeHandler(options) {\n  return function(req, res, next) {\n    let request = new Request(req);\n    let response = new Response(res);\n    return oauth.authorize(request, response, options)\n      .then(function(code) {\n        res.locals.oauth = {code: code};\n        next();\n      })\n      .catch(function(err) {\n        // handle error condition\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing saveAuthorizationCode Function for OAuth2 Authorization Code Grant in JavaScript\nDESCRIPTION: This function is required for the 'authorization_code' grant type and saves an authorization code to the database. It accepts code details, client, and user objects, and returns a structured authorization code object with specific required properties.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction saveAuthorizationCode(code, client, user) {\n  // imaginary DB queries\n  let authCode = {\n    authorization_code: code.authorizationCode,\n    expires_at: code.expiresAt,\n    redirect_uri: code.redirectUri,\n    scope: code.scope,\n    client_id: client.id,\n    user_id: user.id\n  };\n  return db.saveAuthorizationCode(authCode)\n    .then(function(authorizationCode) {\n      return {\n        authorizationCode: authorizationCode.authorization_code,\n        expiresAt: authorizationCode.expires_at,\n        redirectUri: authorizationCode.redirect_uri,\n        scope: authorizationCode.scope,\n        client: {id: authorizationCode.client_id},\n        user: {id: authorizationCode.user_id}\n      };\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Server with Model Configuration\nDESCRIPTION: Creates a new OAuth2Server instance by requiring the module and configuring it with a model. The model defines how the OAuth server interacts with your data store.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/docs/getting-started.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst OAuth2Server = require('@node-oauth/oauth2-server');\n\nconst oauth = new OAuth2Server({\n  model: require('./model')\n});\n```\n\n----------------------------------------\n\nTITLE: Handling PKCE Token Request in node-oauth2-server\nDESCRIPTION: This snippet demonstrates how to set up a token endpoint that supports PKCE in node-oauth2-server. It shows how to create a new OAuth2Server instance and handle the token request, including the code_verifier parameter.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/misc/pkce.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new OAuth2Server({ model })\n\n// ...authorizeEndpoint\n\n// this could be added to express or other middleware\nconst tokenEndpoint = function (req, res, next) {\n  const request = new Request(req)\n  request.body.code_verifier // the non-hashed code verifier\n  server.token(request, response, options)\n        .then(function (code) {\n          // add code to response, code should contain\n        })\n        .catch(function (err) {\n          // handle error condition\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling PKCE Authorization Request in node-oauth2-server\nDESCRIPTION: This snippet shows how to set up an authorization endpoint that supports PKCE in node-oauth2-server. It demonstrates how to create a new OAuth2Server instance and handle the authorization request, including PKCE parameters.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/misc/pkce.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new OAuth2Server({ model })\n\n// this could be added to express or other middleware\nconst authorizeEndpoint = function (req, res, next) {\n  const request = new Request(req)\n  req.query.code_challenge        // the codeChallenge value\n  req.query.code_challenge_method // 'S256'\n\n  server.authorize(request, response, options)\n    .then(function (code) {\n      // add code to response, code should not contain\n      // code_challenge or code_challenge_method\n    })\n    .catch(function (err) {\n      // handle error condition\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Adapter Functions for OAuth2Server\nDESCRIPTION: Guidelines for overriding key functions in OAuth2Server adapters. This includes creating Request and Response objects, calling original functions, and copying fields back to framework-specific objects.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/docs/adapters.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Pseudo-code for adapter implementation\nclass CustomAdapter extends OAuth2Server {\n  authenticate() {\n    // Create Request and Response objects\n    // Call original authenticate()\n    // Copy Response fields to framework-specific object\n  }\n\n  authorize() {\n    // Create Request and Response objects\n    // Call original authorize()\n    // Copy Response fields to framework-specific object\n  }\n\n  token() {\n    // Create Request and Response objects\n    // Call original token()\n    // Copy Response fields to framework-specific object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getAccessToken Function for OAuth2 Server (JavaScript)\nDESCRIPTION: Example implementation of the getAccessToken function, which retrieves an existing access token. It demonstrates querying a database for the token, associated client, and user information.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getAccessToken(accessToken) {\n  // imaginary DB queries\n  return db.queryAccessToken({access_token: accessToken})\n    .then(function(token) {\n      return Promise.all([\n        token,\n        db.queryClient({id: token.client_id}),\n        db.queryUser({id: token.user_id})\n      ]);\n    })\n    .spread(function(token, client, user) {\n      return {\n        accessToken: token.access_token,\n      };\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getClient OAuth2 Function\nDESCRIPTION: Function to retrieve client details from database using clientId and optional clientSecret. Returns client object with id, redirectUris and grants.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getClient(clientId, clientSecret) {\n  // imaginary DB query\n  let params = {client_id: clientId};\n  if (clientSecret) {\n    params.client_secret = clientSecret;\n  }\n  return db.queryClient(params)\n    .then(function(client) {\n      return {\n        id: client.id,\n        redirectUris: client.redirect_uris,\n        grants: client.grants\n      };\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing revokeToken Function for OAuth2 Refresh Token Grant in JavaScript\nDESCRIPTION: This function is required for the 'refresh_token' grant type and revokes a refresh token. It takes a token object containing refresh token details and returns a boolean indicating whether the revocation was successful.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction revokeToken(token) {\n  // imaginary DB queries\n  return db.deleteRefreshToken({refresh_token: token.refreshToken})\n    .then(function(refreshToken) {\n      return !!refreshToken;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing validateScope Function (Rejecting Invalid Scopes) for OAuth2\nDESCRIPTION: This function validates requested scopes against a list of valid scopes and rejects the request if any scope is invalid. It is used during authorization_code, client_credentials, and password grants.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// list of valid scopes\nconst VALID_SCOPES = ['read', 'write'];\n\nfunction validateScope(user, client, scope) {\n  if (!scope.every(s => VALID_SCOPES.indexOf(s) >= 0)) {\n    return false;\n  }\n  return scope;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PKCE Code Challenge in JavaScript\nDESCRIPTION: This snippet demonstrates how to generate a code_verifier, code_challenge, and code_challenge_method for a PKCE authorization request. It uses crypto functions to create secure random values and perform hashing.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/misc/pkce.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst base64URLEncode = str => str.toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '')\n\n// This is the code_verifier, which is INITIALLY KEPT SECRET on the client\n// and which is later passed as request param to the token endpoint.\n// DO NOT SEND this with the authorization request!\nconst codeVerifier = base64URLEncode(crypto.randomBytes(32))\n\n// This is the hashed version of the verifier, which is sent to the authorization endpoint.\n// This is named t(code_verifier) in the above workflow\n// Send this with the authorization request!\nconst codeChallenge = base64URLEncode(crypto.createHash('sha256').update(codeVerifier).digest())\n\n// This is the name of the code challenge method\n// This is named t_m in the above workflow\n// Send this with the authorization request!\nconst codeChallengeMethod = 'S256'\n\n// add these to the request that is fired from the client\n```\n\n----------------------------------------\n\nTITLE: Implementing validateRedirectUri Function for OAuth2 Redirect URI Validation\nDESCRIPTION: This function validates if a redirect URI is allowed for a specific client by checking if it's included in the client's registered redirect URIs. It helps prevent redirect URI-based attacks.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction validateRedirectUri(redirectUri, client) {\n  return client.redirectUris.includes(redirectUri);\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Instantiation of OAuth2Server with Options\nDESCRIPTION: Shows how to create an OAuth2Server instance with additional configuration options like allowing bearer tokens in query string and setting access token lifetime.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst oauth = new OAuth2Server({\n  model: require('./model'),\n  allowBearerTokensInQueryString: true,\n  accessTokenLifetime: 4 * 60 * 60\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getUser OAuth2 Function\nDESCRIPTION: Function to authenticate and retrieve user using username and password credentials. Required for password grant type.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getUser(username, password) {\n  // imaginary DB query\n  return db.queryUser({username: username, password: password});\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getUserFromClient OAuth2 Function\nDESCRIPTION: Function to retrieve user associated with a client. Required for client_credentials grant type.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getUserFromClient(client) {\n  // imaginary DB query\n  return db.queryUser({id: client.user_id});\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Express Request to OAuth Request\nDESCRIPTION: Demonstrates how to convert an Express request object to a Request instance in a middleware function.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/request.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(req, res, next) {\n  let request = new Request(req);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing revokeAuthorizationCode Function for OAuth2 Authorization Code Revocation\nDESCRIPTION: This function revokes an authorization code by deleting it from the database. It returns true if the revocation was successful or false if the authorization code could not be found.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction revokeAuthorizationCode(code) {\n  // imaginary DB queries\n  return db.deleteAuthorizationCode({authorization_code: code.authorizationCode})\n    .then(function(authorizationCode) {\n      return !!authorizationCode;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing verifyScope Function for OAuth2 Access Token Validation\nDESCRIPTION: This function verifies if an access token was authorized for requested scopes during request authentication. It checks if each requested scope is included in the token's authorized scopes.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction verifyScope(token, requestedScopes) {\n  if (!token.scope) {\n    return false;\n  }\n  let authorizedScopes = token.scope;\n  return requestedScopes.every(s => authorizedScopes.includes(s));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Request and Response Objects for OAuth2 Server\nDESCRIPTION: Imports and initializes the Request and Response helper classes from the OAuth2 Server module. These classes provide a standardized interface for handling HTTP requests and responses.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/docs/getting-started.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Request = OAuth2Server.Request;\nconst Response = OAuth2Server.Response;\n\nlet request = new Request({/*...*/});\nlet response = new Response({/*...*/});\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Server Model with Various Return Types (JavaScript)\nDESCRIPTION: Demonstrates different ways to implement model functions using promises, sync values, generators, and async/await syntax. This shows the flexibility in how model methods can be implemented.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst model = {\n  // We support returning promises.\n  getAccessToken: function() {\n    return new Promise('works!');\n  },\n\n  // Or sync-style values\n  getAuthorizationCode: function() {\n    return 'works!'\n  },\n\n  // Or, using generators.\n  getClient: function*() {\n    yield somethingAsync();\n    return 'works!';\n  },\n\n  // Or, async/wait (using Babel).\n  getUser: async function() {\n    await somethingAsync();\n    return 'works!';\n  }\n};\n\nconst OAuth2Server = require('@node-oauth/oauth2-server');\nlet oauth = new OAuth2Server({model: model});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Model Functions in Node OAuth2\nDESCRIPTION: Example showing how to update model functions to use async/await or return Promises instead of callbacks in version 5.x. Model functions must be either asynchronous or return Promises for database operations.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/misc/migrating-to-v5.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getUser() {\n  // Async implementation\n  const user = await database.findUser();\n  return user;\n}\n\n// Or using Promises\nfunction getClient() {\n  return database.findClient()\n    .then(client => {\n      return client;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Session-Based Authenticate Handler Implementation\nDESCRIPTION: Demonstrates a simple session-based authenticate handler that gets the user from the request session.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet authenticateHandler = {\n  handle: function(request, response) {\n    return request.session.user;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Express Response to OAuth2 Response Object\nDESCRIPTION: Shows how to convert an Express response object to a Response instance by passing it as an option to the constructor within a middleware function.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/response.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(req, res, next) {\n  let response = new Response(res);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Token Handler Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure options for the OAuth2 token handler, specifically disabling client secret requirement for password grant type.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet options = {\n  // ...\n  // Allow token requests using the password grant to not include a client_secret.\n  requireClientAuthentication: {password: false}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Grant Types for OAuth2 Server in JavaScript\nDESCRIPTION: This snippet shows how to set up extended grant types for the OAuth2 server, mapping a custom URI to a handler type.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet options = {\n  // ...\n  extendedGrantTypes: {\n    'urn:foo:bar:baz': MyGrantType\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Refresh Token in OAuth2 Server (JavaScript)\nDESCRIPTION: This function retrieves an existing refresh token from the database. It queries the refresh token, associated client, and user information, then formats and returns the data as required by the OAuth2 server.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getRefreshToken(refreshToken) {\n  // imaginary DB queries\n  return db.queryRefreshToken({refresh_token: refreshToken})\n    .then(function(token) {\n      return Promise.all([\n        token,\n        db.queryClient({id: token.client_id}),\n        db.queryUser({id: token.user_id})\n      ]);\n    })\n    .spread(function(token, client, user) {\n      return {\n        refreshToken: token.refresh_token,\n        refreshTokenExpiresAt: token.expires_at,\n        scope: token.scope,\n        client: client, // with 'id' property\n        user: user\n      };\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing validateScope Function (Accepting Partial Scopes) for OAuth2\nDESCRIPTION: This alternative implementation of validateScope filters out invalid scopes and returns only valid ones, allowing for partial acceptance of requested scopes.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// list of valid scopes\nconst VALID_SCOPES = ['read', 'write'];\n\nfunction validateScope(user, client, scope) {\n  return scope.filter(s => VALID_SCOPES.indexOf(s) >= 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authorization Code in OAuth2 Server (JavaScript)\nDESCRIPTION: This function retrieves an existing authorization code from the database. It queries the authorization code, associated client, and user information, then formats and returns the data as required by the OAuth2 server.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/model/spec.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getAuthorizationCode(authorizationCode) {\n  // imaginary DB queries\n  return db.queryAuthorizationCode({authorization_code: authorizationCode})\n    .then(function(code) {\n      return Promise.all([\n        code,\n        db.queryClient({id: code.client_id}),\n        db.queryUser({id: code.user_id})\n      ]);\n    })\n    .spread(function(code, client, user) {\n      return {\n        authorizationCode: code.authorization_code,\n        expiresAt: code.expires_at,\n        redirectUri: code.redirect_uri,\n        scope: code.scope,\n        client: client, // with 'id' property\n        user: user\n      };\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom OAuthError Instance in JavaScript\nDESCRIPTION: Shows how to create an OAuthError instance with a custom message and name. The error will have the specified message and name, while retaining the default code of 500.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/oauth-error.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new OAuthError('test', {name: 'test_error'});\n// err.message === 'test'\n// err.code === 500\n// err.name === 'test_error'\n```\n\n----------------------------------------\n\nTITLE: Implementing an Authenticate Handler Object\nDESCRIPTION: Shows how to implement an authenticate handler object that can be used with the authorize method. The handler needs to implement a handle function that returns the authenticated user.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet authenticateHandler = {\n  handle: function(request, response) {\n    return /* get authenticated user */;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping an Existing Exception with OAuthError in JavaScript\nDESCRIPTION: Shows how to wrap an existing exception with OAuthError. The message from the original error is automatically copied to the new OAuthError instance.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/oauth-error.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst anotherError = new Error('test');\nconst err = new OAuthError(e);\n// err.message === 'test'\n// err.code === 500\n// err.name === 'OAuthError'\n// err.inner === anotherError\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of InvalidClientError\nDESCRIPTION: Demonstrates how to create a new instance of InvalidClientError with default values and shows the resulting error properties.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-client-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new InvalidClientError();\n// err.message === 'Bad Request'\n// err.code === 400\n// err.name === 'invalid_client'\n```\n\n----------------------------------------\n\nTITLE: Instantiating InvalidScopeError\nDESCRIPTION: Demonstrates how to create a new instance of InvalidScopeError with default values. The error will have a 400 status code, 'Bad Request' message, and 'invalid_scope' as the error name.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-scope-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new InvalidScopeError();\n// err.message === 'Bad Request'\n// err.code === 400\n// err.name === 'invalid_scope'\n```\n\n----------------------------------------\n\nTITLE: Basic Instantiation of OAuth2Server\nDESCRIPTION: Demonstrates how to create a basic OAuth2Server instance with a model.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst oauth = new OAuth2Server({\n  model: require('./model')\n});\n```\n\n----------------------------------------\n\nTITLE: Creating UnsupportedGrantTypeError Instance\nDESCRIPTION: Demonstrates instantiating an UnsupportedGrantTypeError object and shows the default property values. The error includes a 400 status code and 'unsupported_grant_type' name by default.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/unsupported-grant-type-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new UnsupportedGrantTypeError();\n// err.message === 'Bad Request'\n// err.code === 400\n// err.name === 'unsupported_grant_type'\n```\n\n----------------------------------------\n\nTITLE: Creating an instance of UnsupportedResponseTypeError in JavaScript\nDESCRIPTION: Demonstrates how to create a new instance of the UnsupportedResponseTypeError class. This error is typically used with a 400 status code and the name 'unsupported_response_type'.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/unsupported-response-type-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new UnsupportedResponseTypeError();\n// err.message === 'Bad Request'\n// err.code === 400\n// err.name === 'unsupported_response_type'\n```\n\n----------------------------------------\n\nTITLE: Converting Scope Format for OAuth2 Server\nDESCRIPTION: Example demonstrating the new required format for scope parameters, which must now be an Array of strings instead of space-separated strings used in previous versions.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/misc/migrating-to-v5.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Old format (pre-5.0.0)\nconst scope = \"read write admin\"\n\n// New format (5.0.0+)\nconst scope = [\"read\", \"write\", \"admin\"]\n```\n\n----------------------------------------\n\nTITLE: Creating an InvalidGrantError Instance\nDESCRIPTION: Demonstrates how to instantiate an InvalidGrantError object with default values, showing the resulting property values in comments.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-grant-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new InvalidGrantError();\n// err.message === 'Bad Request'\n// err.code === 400\n// err.name === 'invalid_grant'\n```\n\n----------------------------------------\n\nTITLE: Instantiating InvalidTokenError - Node OAuth2\nDESCRIPTION: Example demonstrating how to create a new instance of InvalidTokenError with default values. Shows the default properties set on the error instance.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-token-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new InvalidTokenError();\n// err.message === 'Unauthorized'\n// err.code === 401\n// err.name === 'invalid_token'\n```\n\n----------------------------------------\n\nTITLE: Instantiating UnauthorizedRequestError\nDESCRIPTION: Demonstrates creating a new instance of UnauthorizedRequestError with default values. Shows the resulting error object properties including message, code, and name.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/unauthorized-request-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new UnauthorizedRequestError();\n// err.message === 'Unauthorized'\n// err.code === 401\n// err.name === 'unauthorized_request'\n```\n\n----------------------------------------\n\nTITLE: Instantiating InvalidRequestError Example\nDESCRIPTION: Demonstrates creating a new InvalidRequestError instance and shows the default values for message, code, and name properties.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-request-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new InvalidRequestError();\n// err.message === 'Bad Request'\n// err.code === 400\n// err.name === 'invalid_request'\n```\n\n----------------------------------------\n\nTITLE: Instantiating InvalidArgumentError in JavaScript\nDESCRIPTION: Demonstrates creating a new instance of InvalidArgumentError and the default properties it has.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-argument-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new InvalidArgumentError();\n// err.message === 'Internal Server Error'\n// err.code === 500\n// err.name === 'invalid_argument'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic OAuthError Instance in JavaScript\nDESCRIPTION: Demonstrates creating a basic OAuthError instance with default properties. The error will have a message of 'Internal Server Error', a code of 500, and a name of 'OAuthError'.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/oauth-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new OAuthError();\n// err.message === 'Internal Server Error'\n// err.code === 500\n// err.name === 'OAuthError'\n```\n\n----------------------------------------\n\nTITLE: Creating a ServerError Instance\nDESCRIPTION: Demonstrates instantiating a ServerError object with default values. The resulting error has a default message, code 503, and name 'server_error'.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/server-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new ServerError();\n// err.message === 'Service Unavailable Error'\n// err.code === 503\n// err.name === 'server_error'\n```\n\n----------------------------------------\n\nTITLE: Installing OAuth2 Server via npm\nDESCRIPTION: Command to install the @node-oauth/oauth2-server package using npm. This is the first step required to integrate OAuth2 functionality into a Node.js application.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/docs/getting-started.rst#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @node-oauth/oauth2-server\n```\n\n----------------------------------------\n\nTITLE: Installing OAuth2 Server Package with npm\nDESCRIPTION: Command to install the @node-oauth/oauth2-server package via npm. This is the main step required to add the OAuth2 server functionality to a Node.js project.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @node-oauth/oauth2-server\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Development Environment for node-oauth2-server\nDESCRIPTION: Commands for cloning the repository, checking out the development branch, and installing dependencies to set up the local development environment.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:node-oauth/node-oauth2-server.git\n$ cd node-oauth2-server\n$ git checkout development # important! do not work on master!\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests Before Committing Code Changes\nDESCRIPTION: Commands for running tests and test coverage checks before committing changes to ensure quality control.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test:coverage\n```\n\n----------------------------------------\n\nTITLE: Running Development Scripts for Testing and Documentation\nDESCRIPTION: Commands for running tests, generating test coverage reports, and building API documentation during development.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test           # runs the tests once\n$ npm run test:coverage  # runs the tests including coverage\n$ npm run docs           # generates the API docs\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature or Fix Branch for Development\nDESCRIPTION: Command for creating a new git branch to work on features or fixes, following the project's branching strategy.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature-xyz # or fix-xyz\n```\n\n----------------------------------------\n\nTITLE: Creating an AccessDeniedError Instance in JavaScript\nDESCRIPTION: Demonstrates how to instantiate a new AccessDeniedError object and displays its default property values. The example shows that by default, the error has a 'Bad Request' message, 400 status code, and 'access_denied' name.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/access-denied-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new AccessDeniedError();\n// err.message === 'Bad Request'\n// err.code === 400\n// err.name === 'access_denied'\n```\n\n----------------------------------------\n\nTITLE: Creating an OAuthError with Additional Properties in JavaScript\nDESCRIPTION: Demonstrates how to create an OAuthError with additional custom properties. All properties specified in the second argument are copied to the error object.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/oauth-error.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new OAuthError('test', {foo: 'bar', baz: 1234});\n// err.message === 'test'\n// err.code === 500\n// err.name === 'OAuthError'\n// err.foo === 'bar'\n// err.baz === 1234\n```\n\n----------------------------------------\n\nTITLE: Importing InsufficientScopeError in Node.js\nDESCRIPTION: Shows how to import the InsufficientScopeError class from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/insufficient-scope-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst InsufficientScopeError = require('@node-oauth/oauth2-server/lib/errors/insufficient-scope-error');\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidScopeError Class\nDESCRIPTION: Shows how to import the InvalidScopeError class from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-scope-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst InvalidScopeError = require('@node-oauth/oauth2-server/lib/errors/invalid-scope-error');\n```\n\n----------------------------------------\n\nTITLE: Importing UnsupportedResponseTypeError in JavaScript\nDESCRIPTION: Shows how to import the UnsupportedResponseTypeError class from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/unsupported-response-type-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst UnsupportedResponseTypeError = require('@node-oauth/oauth2-server/lib/errors/unsupported-response-type-error');\n```\n\n----------------------------------------\n\nTITLE: Importing UnauthorizedRequestError in Node.js\nDESCRIPTION: Shows how to import the UnauthorizedRequestError class from the oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/unauthorized-request-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst UnauthorizedRequestError = require('@node-oauth/oauth2-server/lib/errors/unauthorized-request-error');\n```\n\n----------------------------------------\n\nTITLE: Creating an OAuthError with Custom Status Code in JavaScript\nDESCRIPTION: Illustrates creating an OAuthError with a custom HTTP status code. The error will have the default message for the specified code (404 in this case) and the default name.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/oauth-error.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new OAuthError(undefined, {code: 404});\n// err.message === 'Not Found'\n// err.code === 404\n// err.name === 'OAuthError'\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidRequestError Class in Node.js\nDESCRIPTION: Shows how to import the InvalidRequestError class from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-request-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst InvalidRequestError = require('@node-oauth/oauth2-server/lib/errors/invalid-request-error');\n```\n\n----------------------------------------\n\nTITLE: Importing the InvalidClientError Class from node-oauth2-server\nDESCRIPTION: Shows how to import the InvalidClientError class from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-client-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst InvalidClientError = require('@node-oauth/oauth2-server/lib/errors/invalid-client-error');\n```\n\n----------------------------------------\n\nTITLE: Creating a new UnauthorizedClientError instance\nDESCRIPTION: Demonstrates how to instantiate a new UnauthorizedClientError object. The error will have default properties with a 400 status code and 'unauthorized_client' error name.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/unauthorized-client-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new UnauthorizedClientError();\n// err.message === 'Bad Request'\n// err.code === 400\n// err.name === 'unauthorized_client'\n```\n\n----------------------------------------\n\nTITLE: Importing UnsupportedGrantTypeError in Node.js\nDESCRIPTION: Shows how to import the UnsupportedGrantTypeError class from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/unsupported-grant-type-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst UnsupportedGrantTypeError = require('@node-oauth/oauth2-server/lib/errors/unsupported-grant-type-error');\n```\n\n----------------------------------------\n\nTITLE: Instantiating InsufficientScopeError Example\nDESCRIPTION: Demonstrates creating a new instance of InsufficientScopeError and shows the default values for message, code, and name properties.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/insufficient-scope-error.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new InsufficientScopeError();\n// err.message === 'Forbidden'\n// err.code === 403\n// err.name === 'insufficient_scope'\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Documentation Dependencies with Exact Versions\nDESCRIPTION: This requirements file defines the exact versions of Sphinx and related packages needed for building documentation. It includes Sphinx core, the ReadTheDocs theme, and a search extension to ensure a stable documentation build environment.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Defining the exact version will make sure things don't break\nsphinx==5.3.0\nsphinx_rtd_theme==1.1.1\nreadthedocs-sphinx-search==0.3.2\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth2Server in Node.js\nDESCRIPTION: Shows how to require the OAuth2Server module from the @node-oauth/oauth2-server package.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/oauth2-server.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst OAuth2Server = require('@node-oauth/oauth2-server');\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This code snippet creates a table in Markdown format to show which versions of the project are currently supported with security updates. It uses emoji to indicate support status.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/SECURITY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported                                        |\n|---------|--------------------------------------------------|\n| 5.x.x   | :white_check_mark:                               |\n| 4.x.x   | :white_check_mark: but only high severity issues |\n| 3.x.x   | :x:                                              |\n| < 3     | :x:                                              |\n```\n\n----------------------------------------\n\nTITLE: Importing Request Class from Node OAuth2 Server\nDESCRIPTION: Shows how to import the Request class from the @node-oauth/oauth2-server package.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/request.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Request = require('@node-oauth/oauth2-server').Request;\n```\n\n----------------------------------------\n\nTITLE: Importing the Response Object in Node.js OAuth2 Server\nDESCRIPTION: Demonstrates how to import the Response object from the @node-oauth/oauth2-server package.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/response.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Response = require('@node-oauth/oauth2-server').Response;\n```\n\n----------------------------------------\n\nTITLE: Importing OAuthError in JavaScript\nDESCRIPTION: Shows how to import the OAuthError class from the @node-oauth/oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/oauth-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst OAuthError = require('@node-oauth/oauth2-server/lib/errors/oauth-error');\n```\n\n----------------------------------------\n\nTITLE: Importing AccessDeniedError in JavaScript\nDESCRIPTION: Shows how to require the AccessDeniedError module from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/access-denied-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst AccessDeniedError = require('@node-oauth/oauth2-server/lib/errors/access-denied-error');\n```\n\n----------------------------------------\n\nTITLE: Importing UnauthorizedClientError from OAuth2 Server\nDESCRIPTION: Shows how to import the UnauthorizedClientError class from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/unauthorized-client-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst UnauthorizedClientError = require('@node-oauth/oauth2-server/lib/errors/unauthorized-client-error');\n```\n\n----------------------------------------\n\nTITLE: Requiring InvalidGrantError in Node.js\nDESCRIPTION: Shows how to import the InvalidGrantError module from the @node-oauth/oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-grant-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst InvalidGrantError = require('@node-oauth/oauth2-server/lib/errors/invalid-grant-error');\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidTokenError - Node OAuth2\nDESCRIPTION: Shows how to import the InvalidTokenError class from the node-oauth2-server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-token-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst InvalidTokenError = require('@node-oauth/oauth2-server/lib/errors/invalid-token-error');\n```\n\n----------------------------------------\n\nTITLE: Importing ServerError in Node.js\nDESCRIPTION: Shows how to import the ServerError class from the Node OAuth2 Server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/server-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ServerError = require('@node-oauth/oauth2-server/lib/errors/server-error');\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidArgumentError in JavaScript\nDESCRIPTION: Shows how to import the InvalidArgumentError class from the OAuth2 server library.\nSOURCE: https://github.com/node-oauth/node-oauth2-server/blob/master/docs/api/errors/invalid-argument-error.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst InvalidArgumentError = require('@node-oauth/oauth2-server/lib/errors/invalid-argument-error');\n```"
  }
]