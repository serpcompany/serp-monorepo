[
  {
    "owner": "penpot",
    "repo": "penpot",
    "content": "TITLE: Defining a Basic Composable Button Component in Clojure\nDESCRIPTION: Demonstrates the definition of a simple primary button component (`primary-button*`) using `mf/defc`. It accepts `children` via props and renders them inside a standard HTML button element, showcasing the basic pattern for enabling composability in React components using Clojure/Rumext.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc primary-button*\n  {::mf/props :obj}\n  [{:keys [children] :rest props}]\n  [:> \"button\" props children])\n```\n\n----------------------------------------\n\nTITLE: Using the Heading Component with a Typography ID in ClojureScript\nDESCRIPTION: This ClojureScript code shows how to render a heading using the imported `heading*` component. It passes a map containing the desired typography style, referenced via the imported alias (`t/title-large`), and the text content \"Welcome to Penpot\". This illustrates the recommended way to apply styles using predefined typography IDs.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/typography/heading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clj\nCODE:\n```\n[:> heading* {:typography t/title-large} \"Welcome to Penpot\"]\n```\n\n----------------------------------------\n\nTITLE: Generating and Configuring Penpot Secret Key\nDESCRIPTION: Generates a secure secret key for Penpot and configures it in the backend. This key is used for deriving other keys for subsystems.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npython3 -c \"import secrets; print(secrets.token_urlsafe(64))\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Backend\nPENPOT_SECRET_KEY: my-super-secure-key\n```\n\n----------------------------------------\n\nTITLE: Plugin Manifest Configuration\nDESCRIPTION: JSON configuration file that defines plugin metadata and permissions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Plugin name\",\n  \"description\": \"Plugin description\",\n  \"code\": \"/plugin.js\",\n  \"icon\": \"/icon.png\",\n  \"permissions\": [\n    \"content:read\",\n    \"content:write\",\n    \"library:read\",\n    \"library:write\",\n    \"user:read\",\n    \"comment:read\",\n    \"comment:write\",\n    \"allow:downloads\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Plugin Manifest Schema - JSON\nDESCRIPTION: This code snippet defines the structure of the manifest.json file required for a Penpot plugin. The file provides metadata including plugin name, description, JavaScript entry point, icon path, and a list of permissions that dictate plugin capabilities. All fields must be filled appropriately; incorrect or incomplete manifests may cause installation failures. Expected input is a valid JSON object; output is used by Penpot to register and authorize plugins. No external dependencies are required, but the referenced code file ('plugin.js'), icon, and listed permissions must be accessible at runtime.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"Your plugin name\\\",\\n  \\\"description\\\": \\\"Your plugin description\\\",\\n  \\\"code\\\": \\\"plugin.js\\\",\\n  \\\"icon\\\": \\\"Your icon\\\",\\n  \\\"permissions\\\": [\\n    \\\"content:read\\\",\\n    \\\"content:write\\\",\\n    \\\"library:read\\\",\\n    \\\"library:write\\\",\\n    \\\"user:read\\\",\\n    \\\"comment:read\\\",\\n    \\\"comment:write\\\",\\n    \\\"allow:downloads\\\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Permission Identifiers for Penpot Plugins - JavaScript\nDESCRIPTION: These snippets show string constants that represent different permissions in Penpot's plugin system, such as content, user, library, comment access, and downloading. They specify keys assigned to various scopes (read or write) and are typically used in plugin manifests or API requests to declare or verify a plugin's access capabilities. No dependencies are required other than usage within Penpot plugin manifests or configuration flows.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontent:read\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontent:write\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nuser:read\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlibrary:read\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlibrary:write\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomment:read\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomment:write\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nallow:downloads\n```\n\n----------------------------------------\n\nTITLE: Managing Colors and Typography in Penpot Library with JavaScript\nDESCRIPTION: This snippet shows how to programmatically add a color or a typography asset to the user\\'s local design library in a Penpot plugin by using the respective methods. The code must be executed in a plugin with the necessary library permissions set in the manifest.json file. No additional dependencies are required except for the Penpot plugin environment. The calls do not take parameters, and assets are added to the local library for reuse in designs. Replace createColor() with createTypography() as needed.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/examples-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// just replace\\npenpot.library.local.createColor();\\n\\n// for\\npenpot.library.local.createTypography();\n```\n\n----------------------------------------\n\nTITLE: Importing Heading Component and Typography IDs in ClojureScript\nDESCRIPTION: This ClojureScript snippet demonstrates how to import the necessary namespaces for using the Heading component. It requires the main typography namespace aliased as `t` and the specific `heading*` component from its namespace. This setup is prerequisite for using predefined typography IDs.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/typography/heading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clj\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.typography :as t]\n   [app.main.ui.ds.foundations.typography.heading :refer [heading*]]))\n```\n\n----------------------------------------\n\nTITLE: Setting the Public URI for Penpot Services in Bash\nDESCRIPTION: This snippet demonstrates how to configure the public URI where users will access the Penpot application. The `PENPOT_PUBLIC_URI` environment variable must be set consistently for the backend, frontend, and exporter services, pointing to the correct public domain (e.g., `https://penpot.mycompany.com`). If using the official docker-compose.yml, setting it once at the top level might suffice.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Backend\nPENPOT_PUBLIC_URI: https://penpot.mycompany.com\n\n# Frontend\nPENPOT_PUBLIC_URI: https://penpot.mycompany.com\n\n# Exporter\nPENPOT_PUBLIC_URI: https://penpot.mycompany.com\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab OAuth Authentication in Bash\nDESCRIPTION: This snippet outlines the configuration for enabling user authentication via GitLab OAuth. Add the `enable-login-with-gitlab` flag to `PENPOT_FLAGS`. Configure the backend environment variables: `PENPOT_GITLAB_BASE_URI` (defaults to https://gitlab.com if not set), `PENPOT_GITLAB_CLIENT_ID`, and `PENPOT_GITLAB_CLIENT_SECRET` with your GitLab application details.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] enable-login-with-gitlab\n\n# Backend only\nPENPOT_GITLAB_BASE_URI: https://gitlab.com\nPENPOT_GITLAB_CLIENT_ID: <client-id>\nPENPOT_GITLAB_CLIENT_SECRET: <client-secret>\n```\n\n----------------------------------------\n\nTITLE: Augmenting Delegated Props with spread-props in Rumext\nDESCRIPTION: Example showing how to modify delegated props before passing them through to child components using spread-props, which applies Rumext's standard transformations.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_23\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc button*\n  {::mf/props :obj}\n  [{:keys [children class] :rest props}]\n  (let [class (dm/str class \" \" (stl/css :button))\n        props (mf/spread-props props {:class class})]\n    [:> \"button\" props children]))\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Shapes with Penpot API in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a rectangle using the Penpot plugin API, as well as how to create other basic shapes like ellipses, paths, and boards by calling the appropriate methods. No external dependencies are required beyond the Penpot plugin runtime API. Each function performs a specific type of object creation and expects to be called within the correct Penpot plugin context. No parameters are needed, and the created shapes are added to the design board. Intended for plugin authors to programmatically add visual elements.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/examples-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// just replace\\npenpot.createRectangle();\\n\\n// for one of these other options:\\npenpot.createEllipse();\\npenpot.createPath();\\npenpot.createBoard();\n```\n\n----------------------------------------\n\nTITLE: Configuring Penpot Frontend Connection Settings\nDESCRIPTION: Sets up the connection between Penpot frontend and the backend and exporter services.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# Frontend\nPENPOT_BACKEND_URI: http://your-penpot-backend:6060\nPENPOT_EXPORTER_URI: http://your-penpot-exporter:6061\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Accepting an Icon Component via Props in Clojure\nDESCRIPTION: Shows a button component (`button*`) definition that accepts an `icon` prop. This prop is expected to be a fully instantiated component, giving the caller full control over the icon's type, styling, and event handling. The received `icon` component is rendered alongside `children`.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc button*\n  {::mf/props :obj}\n  [{:keys [icon children] :rest props}]\n  [:> \"button\" props\n     icon\n     children])\n```\n\n----------------------------------------\n\nTITLE: Requiring Typography and Text Namespaces in ClojureScript\nDESCRIPTION: This snippet shows how to define a namespace (`app.main.ui.foo`) and require the necessary dependencies for using typography IDs and the text component. It aliases the main typography namespace (`app.main.ui.ds.foundations.typography`) as `t` and refers the `text*` function from `app.main.ui.ds.foundations.typography.text` specifically.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/typography/text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.typography :as t]\n   [app.main.ui.ds.foundations.typography.text :refer [text*]]))\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic OpenID Connect (OIDC) Authentication in Bash (Since v1.5.0)\nDESCRIPTION: This snippet describes the configuration for integrating with a generic OIDC provider (often used for SSO), available since Penpot v1.5.0. Enable it with the `enable-login-with-oidc` flag. Essential backend variables include `PENPOT_OIDC_CLIENT_ID`, `PENPOT_OIDC_BASE_URI` (for auto-discovery), and `PENPOT_OIDC_CLIENT_SECRET`. Optional variables allow overriding auto-discovered URIs (`PENPOT_OIDC_AUTH_URI`, `PENPOT_OIDC_TOKEN_URI`, `PENPOT_OIDC_USER_URI`) and configuring role-based access control (`PENPOT_OIDC_ROLES`, `PENPOT_OIDC_ROLES_ATTR`).\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] enable-login-with-oidc\n\n# Backend\nPENPOT_OIDC_CLIENT_ID: <client-id>\n\n# Mainly used for auto discovery the openid endpoints\nPENPOT_OIDC_BASE_URI: <uri>\nPENPOT_OIDC_CLIENT_SECRET: <client-id>\n\n# Optional backend variables, used mainly if you want override; they are\n# autodiscovered using the standard openid-connect mechanism.\nPENPOT_OIDC_AUTH_URI: <uri>\nPENPOT_OIDC_TOKEN_URI: <uri>\nPENPOT_OIDC_USER_URI: <uri>\n\n# Optional list of roles that users are required to have. If no role\n# is provided, roles checking  disabled.\nPENPOT_OIDC_ROLES: \"role1 role2\"\n\n# Attribute to use for lookup roles on the user object. Optional, if\n# not provided, the roles checking will be disabled.\nPENPOT_OIDC_ROLES_ATTR:\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Authentication in Bash\nDESCRIPTION: This snippet shows how to set up user authentication using GitHub OAuth. Include the `enable-login-with-github` flag in the `PENPOT_FLAGS` list. Provide the `PENPOT_GITHUB_CLIENT_ID` and `PENPOT_GITHUB_CLIENT_SECRET` environment variables for the backend, obtained from your GitHub OAuth application settings.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] enable-login-with-github\n\n# Backend only\nPENPOT_GITHUB_CLIENT_ID: <client-id>\nPENPOT_GITHUB_CLIENT_SECRET: <client-secret>\n```\n\n----------------------------------------\n\nTITLE: Using JS Object for Props in Rumext Components\nDESCRIPTION: Recommended pattern for defining components with JavaScript objects as props to improve performance by avoiding runtime conversions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_24\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc icon*\n  {::mf/props :obj}\n  [props]\n  ;; ...\n  )\n```\n\n----------------------------------------\n\nTITLE: Corrected Button Definition (Owning Icon/Label) in Clojure\nDESCRIPTION: Shows the recommended approach for the button component. It accepts an `icon` prop (likely an ID or data), takes ownership of instantiating the `icon*` component, and wraps the `children` (label text) in a `span` with a specific CSS class. This allows the component to reliably style its internal elements.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc button*\n  {::mf/props :obj}\n  [{:keys [icon children class] :rest props}]\n  (let [props (mf/spread-props props {:class (stl/css :button)})]\n    [:> \"button\" props\n     (when icon [:> icon* {:icon-id icon :size \"m\"}])\n     [:span {:class (stl/css :label-wrapper)} children]]))\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Swatch in ClojureScript\nDESCRIPTION: Example of creating an accessible interactive swatch component with required aria-label and click handler for color picker functionality.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/utilities/swatch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> swatch* {:on-click launch-colorpicker :aria-label \"Lorem ipsum\"}]\n```\n\n----------------------------------------\n\nTITLE: Running Media References Migration Script in Docker Container for Penpot\nDESCRIPTION: A bash command to execute a script that corrects incorrect media asset references in existing Penpot files. The script addresses an internal bug fixed in version 2.4.3 that caused incorrect handling of media assets. The max-jobs parameter can be adjusted for parallelization based on available cores.\nSOURCE: https://github.com/penpot/penpot/blob/develop/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti <container-name-or-id> ./run.sh app.migrations.media-refs '{:max-jobs 1}'\n```\n\n----------------------------------------\n\nTITLE: Serving Plugin URLs and Manifest Paths for Penpot Plugins - JavaScript\nDESCRIPTION: These location strings illustrate how the plugin is served locally for testing with Penpot, including placeholder URLs for server, manifest, and script files. The snippets are used to guide developers in specifying correct URLs for plugin asset testing and installation. Dependencies may include a local server such as live-server, Vite, or Webpack dev server. The 'XXXX' placeholder is intended to be replaced with the actual port number assigned during serving.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttps:\\/\\/penpot.app/\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttp:\\/\\/localhost:XXXX\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttp:\\/\\/localhost:XXXX/manifest.json\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttp:\\/\\/localhost:XXXX/plugin.js\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttp:\\/\\/localhost:XXXX/folder/manifest.json\n```\n\n----------------------------------------\n\nTITLE: Handling Custom CSS Classes in a Clojure Component\nDESCRIPTION: Demonstrates how a component (`button*`) should accept an optional `class` prop (equivalent to `className` in JSX) to allow external styling or layout adjustments. It merges the provided `class` with the component's own CSS module class (`(stl/css :primary-button)`) before applying it to the root element.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc button*\n  {::mf/props :obj}\n  [{:keys [children class] :rest props}]\n  (let [class (dm/str class \" \" (stl/css :primary-button))\n    props (mf/spread-props props {:class class})]\n    [:> \"button\" props children]))\n```\n\n----------------------------------------\n\nTITLE: Component Resolution and Deletion Functions\nDESCRIPTION: Functions for handling component operations including resolving components from libraries and deletion with recovery options.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: clojure\nCODE:\n```\n(defn resolve-component\n  \"Retrieve the referenced component, from the local file or from a library\"\n  [shape file libraries & {:keys [include-deleted?] :or {include-deleted? False}}]\n  (if (= (:component-file shape) (:id file))\n        (ctkl/get-component (:data file) (:component-id shape) include-deleted?)\n        (get-component libraries\n                      (:component-file shape)\n                      (:component-id shape)\n                      :include-deleted? include-deleted?)))\n\n(defn delete-component\n\"Mark a component as deleted and store the main instance shapes inside it, to\nbe able to be recovered later.\"\n[file-data component-id skip-undelete? Main-instance]\n(let [components-v2 (dm/get-in file-data [:options :components-v2])]\n  (if (or (not components-v2) skip-undelete?)\n        (ctkl/delete-component file-data component-id)\n        (let [set-main-instance ;; If there is a saved main-instance, restore it.\n               #(if main-instance\n                  (assoc-in % [:objects (:main-instance-id %)] main-instance)\n                  %)]\n        (-> file-data\n           (ctkl/update-component component-id load-component-objects)\n           (ctkl/update-component component-id set-main-instance)\n           (ctkl/mark-component-deleted component-id)))))\n```\n\n----------------------------------------\n\nTITLE: Creating Test Files and Shapes with Sample Helpers - Clojure\nDESCRIPTION: Shows a comprehensive example using Penpot's test helper namespaces for constructing test files, pages, and shapes, assigning uuids via labels, and validating properties. Requires the project test helper namespaces: `app.common.test-helpers.files`, `app.common.test-helpers.ids-map`, and `app.common.test-helpers.shapes`. Parameters include various labels and attributes to define the structure of test objects, making it easier to assemble complex scenarios for testing.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_14\n\nLANGUAGE: Clojure\nCODE:\n```\n(ns common-tests.sample-helpers-test\n  (:require\n   [app.common.test-helpers.files :as thf]\n   [app.common.test-helpers.ids-map :as thi]\n   [app.common.test-helpers.shapes :as ths]\n   [clojure.test :as t]))\n\n(t/deftest test-create-file\n  (let [;; Create a file with one page\n        f1 (thf/sample-file :file1)\n\n        ;; Same but define the label of the page, to retrieve it later\n        f2 (thf/sample-file :file2 :page-label :page1)\n\n        ;; Set the :name attribute of the created file\n        f3 (thf/sample-file :file3 :name \"testing file\")\n\n        ;; Create an isolated page\n        p2 (thf/sample-page :page2 :name \"testing page\")\n\n        ;; Create a second page and add to the file\n        f4 (-> (thf/sample-file :file4 :page-label :page3)\n               (thf/add-sample-page :page4 :name \"other testing page\"))\n\n        ;; Create an isolated shape\n        p2 (thf/sample-shape :shape1 :type :rect :name \"testing shape\")\n\n        ;; Add a couple of shapes to a previous file, in different pages\n        f5 (-> f4\n               (ths/add-sample-shape :shape2)\n               (thf/switch-to-page :page4)\n               (ths/add-sample-shape :shape3 :name \"other testing shape\"\n                                     :width 100))\n\n        ;; Retrieve created shapes\n        s1 (ths/get-shape f4 :shape1)\n        s2 (ths/get-shape f5 :shape2 :page-label :page3)\n        s3 (ths/get-shape f5 :shape3)]\n\n    ;; Check some values\n    (t/is (= (:name f1) \"Test file\"))\n    (t/is (= (:name f3) \"testing file\"))\n    (t/is (= (:id f2) (thi/id :file2)))\n    (t/is (= (:id (thf/current-page f2)) (thi/id :page1)))\n    (t/is (= (:id s1) (thi/id :shape1)))\n    (t/is (= (:name s1) \"Rectangle\"))\n    (t/is (= (:name s3) \"testing shape\"))\n    (t/is (= (:width s3) 100))\n    (t/is (= (:width (:selrect s3)) 100))))\n```\n\n----------------------------------------\n\nTITLE: Using HTML Anchor Tag for Links\nDESCRIPTION: Guideline snippet emphasizing the use of the semantic HTML `<a>` tag for navigational links, file downloads, or mailto links, leveraging browser-native behavior and accessibility.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a>\n```\n\n----------------------------------------\n\nTITLE: Defining Functions Outside Component Body\nDESCRIPTION: Best practice for defining functions outside of components to prevent new function creation on each render cycle.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_28\n\nLANGUAGE: clojure\nCODE:\n```\n(defn- login []\n ;; ...\n )\n\n(mf/defc login-button\n  {::mf/props :obj}\n  []\n  [:button {:on-click login} \"Login\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Service via Flag and Environment Variables in Bash\nDESCRIPTION: This snippet demonstrates how flags and environment variables work together. The `enable-smtp` flag within `PENPOT_FLAGS` activates SMTP email functionality. Subsequently, `PENPOT_SMTP_HOST` and `PENPOT_SMTP_PORT` environment variables configure the connection details for the specific SMTP service used by the backend.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This flag enables the use of SMTP email\nPENPOT_FLAGS: enable-smtp\n\n# These environment variables configure the specific SMPT service\n# Backend\nPENPOT_SMTP_HOST: <host>\nPENPOT_SMTP_PORT: 587\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Login via Flag and Environment Variables in Bash\nDESCRIPTION: This snippet shows how to enable Google login. The `enable-login-with-google` flag is added to the `PENPOT_FLAGS` list. Specific backend credentials, `PENPOT_GOOGLE_CLIENT_ID` and `PENPOT_GOOGLE_CLIENT_SECRET`, are then set as environment variables to authenticate with Google's services.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: enable-login-with-google\n\n# Backend\nPENPOT_GOOGLE_CLIENT_ID: <client-id>\nPENPOT_GOOGLE_CLIENT_SECRET: <client-secret>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Storage Backend for Penpot\nDESCRIPTION: Sets up AWS S3 storage backend for Penpot assets, including AWS credentials, region, and bucket configuration.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# Backend\nAWS_ACCESS_KEY_ID: <you-access-key-id-here>\nAWS_SECRET_ACCESS_KEY: <your-secret-access-key-here>\nPENPOT_ASSETS_STORAGE_BACKEND: assets-s3\nPENPOT_STORAGE_ASSETS_S3_REGION: <aws-region>\nPENPOT_STORAGE_ASSETS_S3_BUCKET: <bucket-name>\n\n# Optional if you want to use it with non AWS, S3 compatible service:\nPENPOT_STORAGE_ASSETS_S3_ENDPOINT: <endpoint-uri>\n```\n\n----------------------------------------\n\nTITLE: Executing Tests in REPL Using run-tests - Clojure\nDESCRIPTION: Presents usages of the `run-tests` helper available in REPL to run all tests, tests in a namespace, a specific test, or all matching a regex. Requires the helper to be loaded automatically via `backend/dev/user.clj` or `common/dev/user.clj`. Parameters: the function optionally takes a namespace symbol, a fully qualified test symbol, or a regex; refreshes test environment before execution.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_13\n\nLANGUAGE: Clojure\nCODE:\n```\n;; To run all tests\n(run-tests)\n\n;; To run all tests in one namespace\n(run-tests 'some.namespace)\n\n;; To run a single test\n(run-tests 'some.namespace/some-test)\n\n;; To run all tests in one or several namespaces,\n;; selected by a regular expression\n(run-tests #\"^backend-tests.rpc.*\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OIDC Name/Email Attributes in Bash (Since v1.12.0)\nDESCRIPTION: Available since Penpot v1.12.0, this snippet demonstrates how to specify which attributes from the OIDC userinfo object should be used for the user's name and email. Use `PENPOT_OIDC_NAME_ATTR` and `PENPOT_OIDC_EMAIL_ATTR` to override the default lookup keys ('name' and 'email' respectively).\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Attribute to use for lookup the name on the user object. Optional,\n# if not perovided, the `name` prop will be used.\nPENPOT_OIDC_NAME_ATTR:\n\n# Attribute to use for lookup the email on the user object. Optional,\n# if not perovided, the `email` prop will be used.\nPENPOT_OIDC_EMAIL_ATTR:\n```\n\n----------------------------------------\n\nTITLE: Creating a Combobox with Icons in Clojure\nDESCRIPTION: This snippet shows how to create a combobox component with options that include icons. Each option can have a label, ID, and an optional icon reference from the imported icon namespace.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/controls/combobox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> combobox*\n    {:options [{ :label \"Code\"\n                 :id \"option-code\"\n                 :icon i/fill-content }\n               { :label \"Design\"\n                 :id \"option-design\"\n                 :icon i/pentool }\n               { :label \"Menu\"\n                 :id \"option-menu\" }\n               ]}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Compilation in Clojure/ClojureScript\nDESCRIPTION: Demonstrates the use of #? reader conditional to handle environment-specific code between Clojure (JVM) and ClojureScript (JS). This example checks if an object is an ordered set using platform-specific instance checks.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/common.md#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(defn ordered-set?\n  [o]\n  #?(:cljs (instance? lks/LinkedSet o)\n     :clj (instance? LinkedSet o)))\n```\n\n----------------------------------------\n\nTITLE: Changes Object Schema Definition\nDESCRIPTION: Schema definition for change tracking objects that handle undo/redo operations and file modifications.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n(sm/define! ::changes\n  [:map {:title \"changes\"}\n   [:redo-changes vector?]\n   [:undo-changes seq?]\n   [:origin {:optional true} any?]\n   [:save-undo? {:optional true} boolean?]\n   [:stack-undo? {:optional true} boolean?]\n   [:undo-group {:optional true} any?]])\n\n(defmethod process-change :add-component\n  [file-data params]\n  (ctkl/add-component file-data params))\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Yarn\nDESCRIPTION: Commands to run end-to-end tests in headless mode with optional parallel workers\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:e2e\n\n# run in parallel with 4 workers\nyarn test:e2e --workers 4\n```\n\n----------------------------------------\n\nTITLE: Page Model UML Diagram\nDESCRIPTION: PlantUML diagram showing the inheritance structure between Container, Page, Component, and Shape entities, including shape tree relationships.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-model/index.md#2025-04-22_snippet_2\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml PageModel\n\nhide members\n\nclass Container\nclass Page\nclass Component\nclass Shape\n\nContainer <|-left- Page\nContainer <|-right- Component\n\nContainer *--> \"*\" Shape : objects\n(Container, Shape) .. ShapeTree\n\nShape <-- Shape : parent\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Settings for Penpot Backend\nDESCRIPTION: Sets up SMTP configuration for Penpot backend, including host, port, credentials, and TLS settings. Also includes an option to log emails to console instead of using SMTP.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] enable-smtp\n\n# Backend\nPENPOT_SMTP_HOST: <host>\nPENPOT_SMTP_PORT: 587\nPENPOT_SMTP_USERNAME: <username>\nPENPOT_SMTP_PASSWORD: <password>\nPENPOT_SMTP_TLS: true\n```\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] enable-log-emails\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Labels to Icons in Clojure\nDESCRIPTION: Example of enhancing icon accessibility by adding an aria-label attribute to the icon component, using a translation function for internationalization.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/assets/icon.mdx#2025-04-22_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n[:> i/icon* {:icon-id i/add :aria-label (tr \"foo.bar\")}]\n```\n\n----------------------------------------\n\nTITLE: Usage Example for Corrected Button in Clojure\nDESCRIPTION: Demonstrates how to use the corrected `button*` component. Instead of passing a full icon component, the user passes data (`:icon \"foo\"`) for the icon and the label text as children. The component itself handles the instantiation and styling.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: clojure\nCODE:\n```\n;; later in code\n[:> button* {:icon \"foo\"} \"Lorem ipsum\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Primary Icon Button in Clojure\nDESCRIPTION: This snippet shows how to create a primary icon button using the icon-button* component in Clojure.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/buttons/buttons.mdx#2025-04-22_snippet_3\n\nLANGUAGE: clojure\nCODE:\n```\n[:> icon-button* {:variant \"primary\"\n                  :icon i/effects}]\n```\n\n----------------------------------------\n\nTITLE: Starting a REPL for Penpot Backend - Bash\nDESCRIPTION: Command to start a backend REPL session, enabling interactive test running and development. Requires execute permission on `scripts/repl` and a properly set up backend environment. No input parameters.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\n~/penpot/backend$ scripts/repl\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Text Content using Playwright in JavaScript\nDESCRIPTION: Uses Playwright's `page.getByText` method to find elements based on their visible text content. Suitable for non-interactive elements or elements without a specific role or label.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\npage.getByText\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication in Bash\nDESCRIPTION: This snippet shows an example configuration for enabling LDAP authentication in Penpot. First, add the `enable-login-with-ldap` flag to `PENPOT_FLAGS`. Then, configure the backend environment variables (`PENPOT_LDAP_*`) with your LDAP server details, including host, port, SSL/TLS settings, base DN, bind credentials, user query filter, and attribute mappings for username, email, full name, and photo.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] enable-login-with-ldap\n\n# Backend\nPENPOT_LDAP_HOST: ldap\nPENPOT_LDAP_PORT: 10389\nPENPOT_LDAP_SSL: false\nPENPOT_LDAP_STARTTLS: false\nPENPOT_LDAP_BASE_DN: ou=people,dc=planetexpress,dc=com\nPENPOT_LDAP_BIND_DN: cn=admin,dc=planetexpress,dc=com\nPENPOT_LDAP_BIND_PASSWORD: GoodNewsEveryone\nPENPOT_LDAP_USER_QUERY: (&(|(uid=:username)(mail=:username))(memberOf=cn=penpot,ou=groups,dc=my-domain,dc=com))\nPENPOT_LDAP_ATTRS_USERNAME: uid\nPENPOT_LDAP_ATTRS_EMAIL: mail\nPENPOT_LDAP_ATTRS_FULLNAME: cn\nPENPOT_LDAP_ATTRS_PHOTO: jpegPhoto\n```\n\n----------------------------------------\n\nTITLE: Identifying the Penpot Plugin Types NPM Package\nDESCRIPTION: This snippet identifies the npm package `@penpot/plugin-types`, which contains the necessary TypeScript type definitions for the Penpot Plugin API. Including this package allows TypeScript to provide autocompletion and type checking when working with the Penpot API.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n@penpot/plugin-types\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component with Icons\nDESCRIPTION: Shows how to create a Select component with a combination of options containing icons and plain text. Each option can have a label, id and optional icon property.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/controls/select.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> select*       \n    {:options [{ :label \"Code\"\n                 :id \"option-code\"\n                 :icon i/fill-content }\n               { :label \"Design\"\n                 :id \"option-design\"\n                 :icon i/pentool }\n               { :label \"Menu\"\n                 :id \"option-menu\" } \n               ]}]\n```\n\n----------------------------------------\n\nTITLE: Bypassing Kaocha Output Capture - Bash\nDESCRIPTION: Shows how to run Kaocha tests with output capture disabled so all standard output appears in the console, which helps troubleshoot failing tests. Requires Kaocha CLI. Accepts `--no-capture-output` as a parameter.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nclojure -M:dev:test --no-capture-output\n```\n\n----------------------------------------\n\nTITLE: Configuring Penpot Autosave Feature\nDESCRIPTION: Sets up automatic version saving for Penpot, including frequency and timeout settings.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: enable-auto-file-snapshot               # Enable automatic version saving\n\n# Backend\nPENPOT_AUTO_FILE_SNAPSHOT_EVERY: 5             # How many save operations trigger the auto-save-version?\nPENPOT_AUTO_FILE_SNAPSHOT_TIIMEOUT: \"1h\"       # How often is an automatic save forced even if the `every` trigger is not met?\n```\n\n----------------------------------------\n\nTITLE: C4 Architecture Diagram Definition in PlantUML\nDESCRIPTION: PlantUML diagram showing the C4 model architecture of Penpot, including frontend, backend components, and their relationships. Defines system boundaries, containers, databases, and relationships between components using the C4-PlantUML notation.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/index.md#2025-04-22_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml C4_Elements\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons\n!include DEVICONS/react.puml\n!include DEVICONS/java.puml\n!include DEVICONS/clojure.puml\n!include DEVICONS/postgresql.puml\n!include DEVICONS/redis.puml\n!include DEVICONS/chrome.puml\n\nHIDE_STEREOTYPE()\n\nPerson(user, \"User\")\nSystem_Boundary(frontend, \"Frontend\") {\n    Container(frontend_app, \"Frontend app\", \"React / ClojureScript\", \"\", \"react\")\n    Container(worker, \"Worker\", \"Web worker\")\n}\n\nSystem_Boundary(backend, \"Backend\") {\n    Container(backend_app, \"Backend app\", \"Clojure / JVM\", \"\", \"clojure\")\n    ContainerDb(db, \"Database\", \"PostgreSQL\", \"\", \"postgresql\")\n    ContainerDb(redis, \"Broker\", \"Redis\", \"\", \"redis\")\n    Container(exporter, \"Exporter\", \"ClojureScript / nodejs\", \"\", \"clojure\")\n    Container(browser, \"Headless browser\", \"Chrome\", \"\", \"chrome\")\n}\n\nRel(user, frontend_app, \"Uses\", \"HTTPS\")\nBiRel_L(frontend_app, worker, \"Works with\")\nBiRel(frontend_app, backend_app, \"Open\", \"websocket\")\nRel(frontend_app, backend_app, \"Uses\", \"RPC API\")\nRel(backend_app, db, \"Uses\", \"SQL\")\nRel(redis, backend_app, \"Subscribes\", \"pub/sub\")\nRel(backend_app, redis, \"Notifies\", \"pub/sub\")\nRel(frontend_app, exporter, \"Uses\", \"HTTPS\")\nRel(exporter, browser, \"Uses\", \"puppeteer\")\nRel(browser, frontend_app, \"Uses\", \"HTTPS\")\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Storage Backend for Penpot\nDESCRIPTION: Sets up the default file system storage backend for Penpot assets.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# Backend\nPENPOT_ASSETS_STORAGE_BACKEND: assets-fs\nPENPOT_STORAGE_ASSETS_FS_DIRECTORY: /opt/data/assets\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Initialization - TypeScript\nDESCRIPTION: Basic plugin initialization code that opens the plugin UI with specified dimensions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npenpot.ui.open(\"Plugin name\", \"\", {\n  width: 500,\n  height: 600,\n});\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Plugin Build\nDESCRIPTION: Vite configuration for building and serving the plugin file.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n[...]\n  build: {\n    rollupOptions: {\n      input: {\n        plugin: \"src/plugin.ts\",\n        index: \"./index.html\",\n      },\n      output: {\n        entryFileNames: \"[name].js\",\n      },\n    },\n  },\n  preview: {\n    port: XXXX,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Colors with CSS Classes in Clojure\nDESCRIPTION: Example of applying a CSS class to an icon component to customize its color. The icon component uses the 'add' icon with a custom toolbar-icon class.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/assets/icon.mdx#2025-04-22_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n[:> i/icon* {:icon-id i/add :class (stl/css :toolbar-icon)}]\n```\n\n----------------------------------------\n\nTITLE: Running All Kaocha Tests via CLI - Bash\nDESCRIPTION: This CLI command, using Clojure's CLI and Kaocha runner, executes the entire test suite for the project, outputting a summary of test and assertion counts. Requires Kaocha and Leiningen/CLI setup. Takes no parameters; output is printed to the shell.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nclojure -M:dev:test\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Plugin Types\nDESCRIPTION: Configuration for TypeScript to include Penpot plugin type definitions in tsconfig.json.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    [...],\n    \"typeRoots\": [\"./node_modules/@types\", \"./node_modules/@penpot\"],\n    \"types\": [\"plugin-types\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Namespace in Clojure\nDESCRIPTION: This snippet shows how to import the icon namespace in a Clojure file for use with button components.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/buttons/buttons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.assets.icon :as i]))\n```\n\n----------------------------------------\n\nTITLE: Using ARIA Hidden Attribute for Decorative Elements\nDESCRIPTION: Accessibility guideline snippet advising the use of `aria-hidden=\"true\"` for purely decorative images or icons that do not convey essential information, preventing them from being announced by assistive technologies.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\naria-hidden=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Shape Model UML Diagram\nDESCRIPTION: PlantUML diagram depicting Shape entity attributes and relationships including Selrect, Transform, Constraints, Interactions, and visual properties.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-model/index.md#2025-04-22_snippet_3\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml ShapeModel\n\nhide members\n\nclass Shape\nclass Selrect\nclass Transform\nclass Constraints\nclass Interactions\nclass Fill\nclass Stroke\nclass Shadow\nclass Blur\nclass Font\nclass Content\nclass Exports\n\nShape o--> Selrect\nShape o--> Transform\nShape o--> Constraints\nShape o--> Interactions\nShape o--> Fill\nShape o--> Stroke\nShape o--> Shadow\nShape o--> Blur\nShape o--> Font\nShape o--> Content\nShape o--> Exports\n\nShape <-- Shape : parent\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Penpot Self-hosting Guide\nDESCRIPTION: Structured markdown documentation explaining different self-hosting options for Penpot, including deployment through Elestio, Docker, and Kubernetes platforms. Includes links to external resources and recommendations.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 1. Self-hosting Guide\n---\n\n# Self-hosting Guide\n\nThis guide explains how to get your own Penpot instance, running on a machine you control,\nto test it, use it by you or your team, or even customize and extend it any way you like.\n\nIf you need more context you can look at the <a\nhref=\"https://community.penpot.app/t/self-hosting-penpot-i/2336\" target=\"_blank\">post\nabout self-hosting</a> in Penpot community.\n\n**There is absolutely no difference between <a\nhref=\"https://design.penpot.app\">our SaaS offer</a> for Penpot and your\nself-hosted Penpot platform!**\n\nThere are three main options for creating a Penpot instance:\n\n1. Using the platform of our partner <a href=\"https://elest.io/open-source/penpot\" target=\"_blank\">Elestio</a>.\n2. Using <a href=\"https://docker.com\" target=\"_blank\">Docker</a> tool.\n3. Using <a href=\"https://kubernetes.io/\" target=\"_blank\">Kubernetes</a>.\n\n<p class=\"advice\">\nThe recommended way is to use Elestio, since it's simpler, fully automatic and still greatly flexible.\nUse Docker if you already know the tool, if need full control of the process or have extra requirements\nand do not want to depend on any external provider, or need to do any special customization.\n</p>\n\nOr you can try <a href=\"#unofficial-self-host-options\">other options</a>,\noffered by Penpot community.\n```\n\n----------------------------------------\n\nTITLE: Using Playwright's 'expect' Function for Assertions in JavaScript\nDESCRIPTION: Introduces Playwright's built-in `expect` function, which is used to create assertions within integration tests to verify application state and behavior.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nexpect\n```\n\n----------------------------------------\n\nTITLE: Using ARIA Label Attribute\nDESCRIPTION: Accessibility guideline snippet recommending the use of `aria-label` (or similar attributes like `alt`) for non-decorative icon buttons that lack visible text labels, ensuring screen readers can announce their purpose.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\naria-label\n```\n\n----------------------------------------\n\nTITLE: Avoiding '.not' Negation in Playwright Assertions (JavaScript)\nDESCRIPTION: Refers to the `.not` modifier used in Playwright's `expect` assertions for negation. The documentation advises against its use in favor of positive assertions for better readability.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_31\n\nLANGUAGE: js\nCODE:\n```\n.not\n```\n\n----------------------------------------\n\nTITLE: Authentication File Structure\nDESCRIPTION: Lists the main files involved in Penpot's authentication implementation across backend and frontend\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/subsystems/authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbackend/src/app/rpc/mutations/profile.clj\nbackend/src/app/rpc/mutations/ldap.clj\nbackend/src/app/rpc/mutations/verify-token.clj\nbackend/src/app/http/oauth.clj\nbackend/src/app/http/session.clj\nfrontend/src/app/main/ui/auth/verify-token.cljs\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Instantiating an Icon Based on Prop Data in Clojure\nDESCRIPTION: Presents an alternative `button*` definition where the component takes ownership of the icon. It accepts an `icon` prop representing data (e.g., an icon ID), validates it, and conditionally instantiates a specific internal icon component (`icon*`) with controlled properties (like `:size`). This approach limits customization but ensures consistency.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc button*\n  {::mf/props :obj}\n  [{:keys [icon children] :rest props}]\n  (assert (or (nil? icon) (contains? valid-icon-list icon) \"expected valid icon id\"))\n  [:> \"button\" props\n    (when icon [:> icon* {:icon-id icon :size \"m\"}])\n    children])\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Switcher Component with Props in Clojure\nDESCRIPTION: This Clojure code demonstrates how to implement a tab switcher component with the required props, including tabs configuration, default selection, and event handling.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_44\n\nLANGUAGE: clojure\nCODE:\n```\n(let [tabs\n        #js [#js {:label (tr \"inspect.tabs.info\")\n                  :id \"info\"\n                  :content info-content}\n\n             #js {:label (tr \"inspect.tabs.code\")\n                  :data-testid \"code\"\n                  :id \"code\"\n                  :content code-content}]]\n\n  [:> tab-switcher* {:tabs tabs\n                     :default-selected \"info\"\n                     :on-change-tab handle-change-tab\n                     :class (stl/css :viewer-tab-switcher)}])\n```\n\n----------------------------------------\n\nTITLE: Storybook Component Story for Button in JSX\nDESCRIPTION: This JSX code defines a Storybook story for a Button component. It includes default props, various stories for different button states and variants, and control configurations for interactive documentation.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  title: \"Buttons/Button\",\n  component: Components.Button,\n  // These are the props of the component, and we set here default values for\n  // all stories.\n  args: {\n    children: \"Lorem ipsum\",\n    disabled: false,\n    variant: undefined,\n  },\n  // ...\n  render: ({ ...args }) => <Button {...args} />,\n};\n\nexport const Default = {};\n\n// An important prop: `icon`\nexport const WithIcon = {\n  args: {\n    icon: \"effects\",\n  },\n};\n\n// A variant\nexport const Primary = {\n  args: {\n    variant: \"primary\",\n  },\n};\n\n// Another variant\nexport const Secondary = {\n  args: {\n    variant: \"secondary\",\n  },\n};\n\n// More variants here…\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Assets in Clojure for Input Component\nDESCRIPTION: This snippet shows how to import the icon namespace required for using icons with the input* component. Icons are referenced from the app.main.ds.foundations.assets.icon namespace.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/controls/input.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.assets.icon :as i]))\n```\n\n----------------------------------------\n\nTITLE: Using HTML Button Tag for Actions\nDESCRIPTION: Guideline snippet advocating the use of the semantic HTML `<button>` tag for elements that trigger actions, such as form submissions, modal closures, or tool selections, ensuring proper accessibility and browser handling.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<button>\n```\n\n----------------------------------------\n\nTITLE: Locating a Button by Role and Name using Playwright in JavaScript\nDESCRIPTION: Demonstrates using `page.getByRole` to locate a button element specifically identified by its role ('button') and accessible name ('Login'). This targets the submit button in the example HTML form.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\npage.getByRole(\"button\", { name: \"Login\" });\n```\n\n----------------------------------------\n\nTITLE: Delegating Props with JSX Spread Syntax in React\nDESCRIPTION: Example of how to forward props using JSX spread syntax in React components. This demonstrates the pattern of extracting specific props while passing the remaining ones to child elements.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nconst Button => ({children, ...other}) {\n  return <button {...other}>{children}</button>\n};\n```\n\n----------------------------------------\n\nTITLE: Component Instantiation Logic\nDESCRIPTION: Business logic implementation for creating new component instances with position and frame handling.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: clojure\nCODE:\n```\n(defn generate-instantiate-component\n\"Generate changes to create a new instance from a component.\"\n[changes objects file-id component-id position page libraries old-id parent-id\n  frame-id {:keys [force-frame?] :or {force-frame? False}}]\n (let [component        (ctf/get-component libraries file-id component-id)\n        parent          (when parent-id (get objects parent-id))\n        library         (get libraries file-id)\n        components-v2 (dm/get-in library [:data :options :components-v2])\n        [new-shape new-shapes]º\n        (ctn/make-component-instance page\n                                        Component\n                                        (:data library)\n                                        Position\n                                        Components-v2\n                                        (cond-> {}\n                                   force-frame? (assoc :force-frame-id frame-id)))\n        changes (cond-> (pcb/add-object changes first-shape {:ignore-touched true})\n                 (some? old-id) (pcb/amend-last-change #(assoc % :old-id old-id)))\n        changes (reduce #(pcb/add-object %1 %2 {:ignore-touched true})\n                       changes\n                       (rest new-shapes))]\n[new-shape changes]))\n```\n\n----------------------------------------\n\nTITLE: Importing and Using New Design System Component in Clojure\nDESCRIPTION: This Clojure code snippet demonstrates how to import and use a new design system component, specifically a tab switcher, in a Penpot file.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_42\n\nLANGUAGE: clojure\nCODE:\n```\n[app.main.ui.ds.tab-switcher :refer [tab-switcher*]]\n...\n\n[:> tab-switcher* {}]\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Label to Icon Button in Clojure\nDESCRIPTION: This snippet shows how to add an aria-label to an icon button for accessibility purposes in Clojure.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/buttons/buttons.mdx#2025-04-22_snippet_5\n\nLANGUAGE: clojure\nCODE:\n```\n[:> icon-button* {:icon i/effects :aria-label \"Lorem ipsum\"}]\n```\n\n----------------------------------------\n\nTITLE: Using HTML Tabindex Attribute\nDESCRIPTION: Guideline snippet highlighting the importance of keyboard focusability and mentioning the `tabindex` attribute as a means to control the focus order.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\ntabindex\n```\n\n----------------------------------------\n\nTITLE: Locating Inputs by Placeholder using Playwright in JavaScript\nDESCRIPTION: Uses Playwright's `page.getByPlaceholder` method to find input elements based on their placeholder attribute value. Useful when a label is missing or the placeholder is more descriptive.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\npage.getByPlaceholder\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Component Variants with SCSS\nDESCRIPTION: This SCSS code demonstrates how to implement variants for a Toast component using CSS custom properties. It shows the base styles and variant-specific overrides for different toast types.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_37\n\nLANGUAGE: scss\nCODE:\n```\n.toast {\n  // common styles for all toasts\n  // ...\n\n  --toast-bg-color: var(--color-background-primary);\n  --toast-icon-color: var(--color-foreground-secondary);\n  // ... more variables here\n\n  background-color: var(--toast-bg-color);\n}\n\n.toast-icon {\n  color: var(--toast-bg-color);\n}\n\n.toast-info {\n  --toast-bg-color: var(--color-background-info);\n  --toast-icon-color: var(--color-accent-info);\n  // ... override more variables here\n}\n\n.toast-error {\n  --toast-bg-color: var(--color-background-error);\n  --toast-icon-color: var(--color-accent-error);\n  // ... override more variables here\n}\n\n// ... more variants here\n```\n\n----------------------------------------\n\nTITLE: Creating Components with Sample Helpers - Clojure\nDESCRIPTION: Displays how to create and associate a component with shapes and a file in project tests via the helpers for components. Requires helper namespaces: `app.common.test-helpers.components`, `app.common.test-helpers.files`, and `app.common.test-helpers.shapes`. Main parameters are component and shape labels and types; operations include creating shapes, assigning parents, and converting them into a component.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_15\n\nLANGUAGE: Clojure\nCODE:\n```\n(ns app.common-tests.sample-components-test\n  (:require\n   [app.common.test-helpers.components :as thc]\n   [app.common.test-helpers.files :as thf]\n   [app.common.test-helpers.shapes :as ths]))\n\n(t/deftest test-create-component\n  (let [;; Create a file with one component\n        f1 (-> (thf/sample-file :file1)\n               (ths/add-sample-shape :frame1 :type :frame)\n               (ths/add-sample-shape :rect1 :type :rect\n                                     :parent-label :frame1)\n               (thc/make-component :component1 :frame1))]))\n```\n\n----------------------------------------\n\nTITLE: Using data-* Attributes Instead of Partial Functions\nDESCRIPTION: Performance optimization technique that uses data attributes to pass parameters to event handlers instead of creating partial functions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_30\n\nLANGUAGE: clojure\nCODE:\n```\n(defn- set-margin [value event]\n  (let [side -> (dom/get-current-target event)\n                (dom/get-data \"side\")\n                (keyword)]\n    ;; ...\n)\n\n(defc margins []\n  [:*\n    [:> numeric-input* {:data-side \"left\" :on-change set-margin}]\n    [:> numeric-input* {:data-side \"right\" :on-change set-margin}]\n    [:> numeric-input* {:data-side \"top\" :on-change set-margin}]\n    [:> numeric-input* {:data-side \"bottom\" :on-change set-margin}]])\n```\n\n----------------------------------------\n\nTITLE: Using a Composable Button with Nested Children in Clojure\nDESCRIPTION: Illustrates how to use the previously defined composable button component (`button*`). It shows nesting multiple elements, including another custom component (`money-amount`), within the button using the hiccup-style syntax, leveraging the `children` prop.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> button* {}\n  [:*\n   \"Subscribe for \"\n   [:& money-amount {:currency \"EUR\" amount: 3000}]]]\n```\n\n----------------------------------------\n\nTITLE: Using Icon with Button Component in Clojure\nDESCRIPTION: This code demonstrates how to use an icon with a button component in Clojure.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/buttons/buttons.mdx#2025-04-22_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n[:> button* {:icon i/effects} \"Lorem ipsum\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Penpot Database Settings\nDESCRIPTION: Sets up essential database configuration for Penpot, including username, password, and URI for PostgreSQL database.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Backend\nPENPOT_DATABASE_USERNAME: penpot\nPENPOT_DATABASE_PASSWORD: penpot\nPENPOT_DATABASE_URI: postgresql://127.0.0.1/penpot\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Postgres\nPOSTGRES_DATABASE: penpot\nPOSTGRES_USER: penpot\nPOSTGRES_PASSWORD: penpot\n```\n\n----------------------------------------\n\nTITLE: Serializing Gradient Stops in Uint8Array\nDESCRIPTION: Describes the 5-byte structure within a `Uint8Array` for serializing gradient stops. It defines the offset, length, data type (`u8`), and field for RGBA color components and the Stop Offset. The Stop Offset is an integer ranging from 0 to 100.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nGradient stops are serialized in a `Uint8Array`, each stop taking **5 bytes**.\n\n| Offset | Length (bytes) | Data Type | Field       |\n| ------ | -------------- | --------- | ----------- |\n| 0      | 1              | `u8`      | Red         |\n| 1      | 1              | `u8`      | Green       |\n| 2      | 1              | `u8`      | Blue        |\n| 3      | 1              | `u8`      | Alpha       |\n| 4      | 1              | `u8`      | Stop Offset |\n\n**Red**, **Green**, **Blue** and **Alpha** are the RGBA components of the stop.\n\n**Stop offset** is the offset, being integer values ranging from `0` to `100` (both inclusive).\n```\n\n----------------------------------------\n\nTITLE: Storybook Control Configuration for Button Component\nDESCRIPTION: This JSX code configures the controls for a Button component in Storybook. It defines options for icon selection, disabled state toggle, and variant selection, enhancing the interactive documentation.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\nconst { icons } = Components.meta;\n\nexport default {\n  // ...\n  argTypes: {\n    // Use the `icons` array for possible values for the `icon` prop, and\n    // display them in a dropdown select\n    icon: {\n      options: icons,\n      control: { type: \"select\" },\n    },\n    // Use a toggle for the `disabled` flag prop\n    disabled: { control: \"boolean\" },\n    // Show these values in a dropdown for the `variant` prop.\n    variant: {\n      options: [\"primary\", \"secondary\", \"ghost\", \"destructive\"],\n      control: { type: \"select\" },\n    },\n  },\n  parameters: {\n    // Always hide the `children` controls.\n    controls: { exclude: [\"children\"] },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Clojure Namespaces in REPL\nDESCRIPTION: Example showing how to require and use functions from Penpot namespaces in the REPL environment\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/backend.md#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(require '[app.some.namespace :as some])\n(some/your-function arg1 arg2)\n```\n\n----------------------------------------\n\nTITLE: Complete Login Test Example\nDESCRIPTION: Full example of a test using Page Object Model with setup and assertions\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest(\"User submits a wrong formatted email\", async ({ page }) => {\n  const loginPage = new LoginPage(page);\n  await loginPage.setupLoginSuccess();\n\n  await loginPage.fillEmailAndPasswordInputs(\"foo\", \"lorenIpsum\");\n\n  await expect(loginPage.errorLoginMessage).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Shape Attributes Schema in Clojure\nDESCRIPTION: Demonstrates schema definition for shape attributes including fill properties and basic shape properties using spec definitions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n(sm/define! ::fill\n  [:map {:title \"Fill\"}\n   [:fill-color {:optional true} ::ctc/rgb-color]\n   [:fill-opacity {:optional true} ::sm/safe-number]\n   ...)\n\n(sm/define! ::shape-attrs\n  [:map {:title \"ShapeAttrs\"}\n   [:name {:optional true} :string]\n   [:selrect {:optional true} ::grc/rect]\n   [:points {:optional true} ::points]\n   [:blocked {:optional true} :boolean]\n   [:fills {:optional true}\n    [:vector {:gen/max 2} ::fill]]\n   ...)\n```\n\n----------------------------------------\n\nTITLE: Proper Props Destructuring in Rumext Components\nDESCRIPTION: Best practice for destructuring props in component parameters to improve readability and performance by avoiding repeated property access.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_32\n\nLANGUAGE: clojure\nCODE:\n```\n(defc icon\n  {::mf/props :obj}\n  [{:keys [size img] :as props}\n  [:svg {:width size\n         :height size\n         :class (stl/css-case icon true\n                              icon-large (> size 16))}\n    [:use {:href img}]])\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Active Directory via OIDC in Bash\nDESCRIPTION: This snippet provides the specific configuration for integrating Penpot with Azure Active Directory using the OIDC protocol. Set the `PENPOT_OIDC_CLIENT_ID` for both backend and frontend. For the backend, configure `PENPOT_OIDC_BASE_URI` pointing to your Azure AD tenant's v2.0 endpoint and `PENPOT_OIDC_CLIENT_SECRET` with your application's client secret.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Backend & Frontend\nPENPOT_OIDC_CLIENT_ID: <client-id>\n\n# Backend\nPENPOT_OIDC_BASE_URI: https://login.microsoftonline.com/<tenant-id>/v2.0/\nPENPOT_OIDC_CLIENT_SECRET: <client-secret>\n```\n\n----------------------------------------\n\nTITLE: Frontend Configuration in JavaScript\nDESCRIPTION: Example of setting frontend configuration variables in js/config.js file.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(js/config.js)\nvar penpotPublicURI = \"https://penpot.example.com\";\n\n(config)\npublic-uri \"https://penpot.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Tests Using Yarn Scripts - Bash\nDESCRIPTION: Shows how to run frontend tests in watch and one-off modes using yarn scripts, since Kaocha is not compatible with the frontend. Requires an existing `package.json` with appropriate test scripts and a configured `shadow-cljs` environment. No additional parameters required; commands run all or watch frontend tests and output results to stdout.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nyarn run test\nyarn run test:watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth Authentication in Bash\nDESCRIPTION: This snippet details the configuration required to enable user authentication via Google OAuth. Add the `enable-login-with-google` flag to `PENPOT_FLAGS`. Then, set the `PENPOT_GOOGLE_CLIENT_ID` and `PENPOT_GOOGLE_CLIENT_SECRET` environment variables for the backend with the credentials obtained from Google Cloud Platform.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] enable-login-with-google\n\n# Backend only:\nPENPOT_GOOGLE_CLIENT_ID: <client-id>\nPENPOT_GOOGLE_CLIENT_SECRET: <client-secret>\n```\n\n----------------------------------------\n\nTITLE: Team Model UML Diagram\nDESCRIPTION: PlantUML diagram showing relationships between Profile, Team, Project, File, StorageObject, CommentThread, Comment, and ShareLink entities.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-model/index.md#2025-04-22_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml TeamModel\n\nhide members\n\nclass Profile\nclass Team\nclass Project\nclass File\nclass StorageObject\nclass CommentThread\nclass Comment\nclass ShareLink\n\nProfile \"*\" -right- \"*\" Team\nTeam *--> \"*\" Project\nProfile \"*\" -- \"*\" Project\nProject *--> \"*\" File\nProfile \"*\" -- \"*\" File\nFile \"*\" <-- \"*\" File : libraries\nFile *--> \"*\" StorageObject : media_objects\nFile *--> \"*\" CommentThread : comment_threads\nCommentThread *--> \"*\" Comment\nFile *--> \"*\" ShareLink : share_links\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Using Named Functions as Event Handlers\nDESCRIPTION: Best practice for defining event handlers as named functions outside the component, preventing recreation of functions on each render.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_26\n\nLANGUAGE: clojure\nCODE:\n```\n(defn- login []\n ;; ...\n )\n\n(mf/defc login-button\n  {::mf/props :obj}\n  []\n  [:button {:on-click login} \"Login\"])\n\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Role using Playwright in JavaScript\nDESCRIPTION: Uses Playwright's `page.getByRole` method to find DOM elements based on their accessibility role. This is the highest priority locator, simulating how users with assistive technologies interact with the page.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\npage.getByRole\n```\n\n----------------------------------------\n\nTITLE: Event Listener Registration - New Implementation\nDESCRIPTION: Demonstrates the new approach for event listener management using returned ID values for listener removal.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/beta-changelog.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = penpot.on('pagechange', myListener);\npenpot.off(id);\n```\n\n----------------------------------------\n\nTITLE: Enabling OIDC Registration in Bash (Since v2.1.2)\nDESCRIPTION: Added in Penpot v2.1.2, this flag (`enable-oidc-registration`) allows users to register directly via OIDC without needing a prior account created through another method (like email/password). Add this flag to the `PENPOT_FLAGS` list to enable this behavior.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] enable-oidc-registration\n```\n\n----------------------------------------\n\nTITLE: Importing Token Status Icons Namespace in Clojure\nDESCRIPTION: Shows how to import the token status icon component and its namespace into a Clojure file. This allows access to icon IDs and the main component.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/utilities/token/token_status.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.utilities.token.token-status :refer [token-status-icon*] :as ts]))\n```\n\n----------------------------------------\n\nTITLE: Deploying to Surge Platform\nDESCRIPTION: Example of deploying a plugin to Surge, showing the deployment process and output including domain configuration and upload status.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/deployment.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsurge\n\n# Your plugin build folder\nproject: /home/user/example-plugin/dist/\n\n# your domain, surge offers a free .surge.sh domain and free ssl\ndomain: https://example-plugin-penpot.surge.sh\n\nupload: [====================] 100% eta: 0.0s (10 files, 305761 bytes)\nCDN: [====================] 100%\nencryption: *.surge.sh, surge.sh (346 days)\nIP: XXX.XXX.XXX.XXX\n\nSuccess! - Published to example-plugin-penpot.surge.sh\n```\n\n----------------------------------------\n\nTITLE: Problematic Button Definition (Not Owning Children) in Clojure\nDESCRIPTION: Shows an example of what to avoid: a `button*` component that accepts children but doesn't instantiate any specific internal elements like icons or spans. This makes it difficult for the component to reliably style its internal structure, as the structure is determined externally.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc button*\n  {::mf/props :obj}\n  [{:keys [children] :rest props}]\n  (let  [props (mf/spread-props props {:class (stl/css :primary-button)})]\n    ;; note that we are NOT instantiating a <svg> here.\n    [:> \"button\" props children]))\n```\n\n----------------------------------------\n\nTITLE: Plugin Message Handling - JavaScript\nDESCRIPTION: Event listener setup for handling messages between Penpot and the plugin.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", (event) => {\n  // Handle the incoming message\n  console.log(event.data);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparent.postMessage(responseMessage, targetOrigin);\n```\n\n----------------------------------------\n\nTITLE: Custom Penpot Installation with Parameters\nDESCRIPTION: Example of installing Penpot with custom configuration parameters for PostgreSQL, Redis, and persistence settings\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/kubernetes.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-release \\\n  --set global.postgresqlEnabled=true \\\n  --set global.redisEnabled=true \\\n  --set persistence.assets.enabled=true \\\n  penpot/penpot\n```\n\n----------------------------------------\n\nTITLE: Creating Action Icon Button in Clojure\nDESCRIPTION: This code demonstrates how to create an action variant of the icon-button* component in Clojure.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/buttons/buttons.mdx#2025-04-22_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n[:> icon-button* {:variant \"action\"\n                  :icon i/effects}]\n```\n\n----------------------------------------\n\nTITLE: Using Icons with Input Component in Clojure\nDESCRIPTION: This code demonstrates how to use an icon with the input* component by passing it as a prop. The example uses the 'effects' icon from the imported icon namespace.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/controls/input.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> input* {:icon i/effects}]\n```\n\n----------------------------------------\n\nTITLE: Backend File Structure - Directory Layout\nDESCRIPTION: Directory structure layout showing the main components of the backend application including CLI, HTTP, migrations, RPC, setup and utility modules.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/backend.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  ▾ backend/src/app/\n    ▸ cli/\n    ▸ http/\n    ▸ migrations/\n    ▸ rpc/\n    ▸ setup/\n    ▸ srepl/\n    ▸ util/\n    ▸ tasks/\n      main.clj\n      config.clj\n      http.clj\n      metrics.clj\n      migrations.clj\n      notifications.clj\n      rpc.clj\n      setup.clj\n      srepl.clj\n      worker.clj\n      ...\n```\n\n----------------------------------------\n\nTITLE: Page Object Model with Common Actions\nDESCRIPTION: Implementation of common form actions in a Page Object Model\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass LoginPage {\n  // ...\n  async fillEmailAndPasswordInputs(email, password) {\n    await this.emailInput.fill(email);\n    await this.passwordInput.fill(password);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Props Schema for Tab Switcher Component in Clojure\nDESCRIPTION: This Clojure code defines the props schema for a tab switcher component, specifying required and optional properties with their types.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_43\n\nLANGUAGE: clojure\nCODE:\n```\n(def ^:private schema:tab-switcher\n  [:map\n   [:class {:optional true} :string]\n   [:action-button-position {:optional true}\n    [:enum \"start\" \"end\"]]\n   [:default-selected {:optional true} :string]\n   [:tabs [:vector {:min 1} schema:tab]]])\n\n\n(mf/defc tab-switcher*\n  {::mf/props :obj\n   ::mf/schema schema:tab-switcher}...)\n```\n\n----------------------------------------\n\nTITLE: Testing Compositions and Dumping File Contents - Clojure\nDESCRIPTION: Illustrates how to use composition helpers for typical test structures and display file contents with label references instead of IDs. Requires helper namespaces: `app.common.test-helpers.compositions`, `app.common.test-helpers.files`, and a function like `ctf/dump-file` (assumed to be present). Accepts component and node labels as parameters, and outputs a debug-friendly structure of the test file scenario.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_16\n\nLANGUAGE: Clojure\nCODE:\n```\n(ns app.common-tests.sample-compositions-test\n  (:require\n   [app.common.test-helpers.compositions :as tho]\n   [app.common.test-helpers.files :as thf]))\n\n(t/deftest test-create-composition\n  (let [f1 (-> (thf/sample-file :file1)\n               (tho/add-simple-component-with-copy :component1\n                                                   :main-root\n                                                   :main-child\n                                                   :copy-root))]\n  (ctf/dump-file f1 :show-refs? true)))\n\n;; {:main-root} [:name Frame1] # [Component :component1]\n;;   :main-child [:name Rect1]\n;;\n;; :copy-root [:name Frame1]   #--> [Component :component1] :main-root\n;;   <no-label> [:name Rect1]  ---> :main-child\n```\n\n----------------------------------------\n\nTITLE: Storing State Values for Efficient Access\nDESCRIPTION: Performance optimization technique for storing dereferenced state values to avoid multiple deref operations during rendering.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_34\n\nLANGUAGE: clojure\nCODE:\n```\n(defc accordion\n  {::mf/props :obj}\n  [{:keys [^boolean default-open title children] :as props}\n\n  (let [\n    open* (mf/use-state default-open)\n    open? (deref open*)]\n    [:details {:open open?}\n      [:summary title]\n      children]))\n```\n\n----------------------------------------\n\nTITLE: Assertions in Clojure\nDESCRIPTION: Examples of different assertion types available in Penpot's codebase.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n(assert (number? 3) \"optional message\")\n\n(require '[clojure.spec.alpha :as s]\n         '[app.common.spec :as us])\n\n(s/def ::number number?)\n\n(us/assert ::number 3)\n\n(require '[app.common.spec :as us])\n\n(us/verify ::number 3)\n```\n\n----------------------------------------\n\nTITLE: Automatic File Snapshotting Bash Configuration\nDESCRIPTION: This snippet provides the configuration for enabling automatic file snapshotting in the Penpot project using environment variables. Dependencies include the Penpot application with the `enable-auto-file-snapshot` flag enabled. The main parameters include the snapshot frequency, timeout since last modification, and total number of snapshots to retain. Expected inputs are the number of update operations and time since last modification, with outputs being the maintenance of file snapshots.\nSOURCE: https://github.com/penpot/penpot/blob/develop/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Take snapshots every 10 update operations\nPENPOT_AUTO_FILE_SNAPSHOT_EVERY=10\n\n# Take a snapshot if it has been more than 3 hours since the file was last modified\nPENPOT_AUTO_FILE_SNAPSHOT_TIMEOUT=3h\n\n# The total number of snapshots to keep\nPENPOT_AUTO_FILE_SNAPSHOT_TOTAL=10\n```\n\n----------------------------------------\n\nTITLE: Frontend Directory Structure\nDESCRIPTION: Shows the basic directory structure of the frontend application, including main app code, utilities, and worker components.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  ▾ frontend/src/app/\n    ▸ main/\n    ▸ util/\n    ▸ worker/\n      main.cljs\n      worker.cljs\n```\n\n----------------------------------------\n\nTITLE: Helper Functions for Shape Manipulation\nDESCRIPTION: Implementation of helper functions for creating and manipulating shape objects with validation checks.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n(defn setup-shape\n \"A function that initializes the geometric data of the shape. The props must\n contain at least :x :y :width :height.\"\n [{:keys [type] :as props}]\n ...)\n\n(defn has-direction?\n[interaction]\n  (#{:slide :push} (-> interaction :animation :animation-type)))\n\n(defn set-direction\n[interaction direction]\n  (dm/assert!\n   \"expected valid interaction map\"\n   (check-interaction! interaction))\n  (dm/assert!\n   \"expected valid direction\"\n   (contains? direction-types direction))\n  (dm/assert!\n   \"expected compatible interaction map\"\n   (has-direction? interaction))\n  (update interaction :animation assoc :direction direction))\n```\n\n----------------------------------------\n\nTITLE: Toast Story Implementations\nDESCRIPTION: Renders different toast notification variants including default, info, warning, error, and success levels using Storybook Canvas.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/notifications/notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={ToastStories.Default} />\n\n<Canvas of={ToastStories.Info} />\n\n<Canvas of={ToastStories.Warning} />\n\n<Canvas of={ToastStories.Error} />\n\n<Canvas of={ToastStories.Success} />\n```\n\n----------------------------------------\n\nTITLE: Using Token Status Icon Component in Clojure\nDESCRIPTION: Demonstrates how to use the token status icon component with specific icon IDs and CSS styling. The example shows implementation of a partial token status icon.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/utilities/token/token_status.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> token-status-icon*\n        {:icon-id ts/token-status-partial\n         :class (stl/css :token-pill-icon)}]\n```\n\n----------------------------------------\n\nTITLE: System Logging in Clojure\nDESCRIPTION: Example of using the logging utility in Clojure code with debug level and key-value pairs.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.data.workspace.libraries-helpers\n  (:require [app.common.logging :as log]))\n\n(log/set-level! :warn)\n\n...\n\n(defn generate-detach-instance\n  [changes container shape-id]\n  (log/debug :msg \"Detach instance\"\n             :shape-id shape-id\n             :container (:id container))\n  ...)\n```\n\n----------------------------------------\n\nTITLE: Serializing Justify Content Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for the justify-content CSS-like property (Start, End, Center, Space between, Space around, Space evenly, Stretch). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field         |\n| ----- | ------------- |\n| 0     | Start         |\n| 1     | End           |\n| 2     | Center        |\n| 3     | Space between |\n| 4     | Space around  |\n| 5     | Space evenly  |\n| 6     | Stretch       |\n| \\_    | error         |\n```\n\n----------------------------------------\n\nTITLE: Storage Backend Configuration Options in Clojure\nDESCRIPTION: Configuration keywords for different storage backend options in Penpot - filesystem, S3-compatible storage, and database storage.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/subsystems/assets-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n:assets-fs\n:assets-s3\n:assets-db\n```\n\n----------------------------------------\n\nTITLE: Setting Up Penpot Demo Environment\nDESCRIPTION: Configures Penpot for a demo environment, including options to disable registration, enable demo users, and display demo warnings.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: disable-registration enable-demo-users enable-demo-warning\n```\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: disable-email-verification enable-demo-warning\n```\n\n----------------------------------------\n\nTITLE: NGINX Proxy Configuration\nDESCRIPTION: Example NGINX configuration for proxying Penpot traffic with SSL support\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/docker.md#2025-04-22_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 80;\n  server_name penpot.mycompany.com;\n  return 301 https://$host$request_uri;\n}\n\nserver {\n  listen 443 ssl;\n  server_name penpot.mycompany.com;\n\n  client_max_body_size 31457280;\n\n  access_log /path/to/penpot.access.log;\n  error_log /path/to/penpot.error.log;\n\n  ssl_certificate /path/to/fullchain;\n  ssl_certificate_key /path/to/privkey;\n\n  location /ws/notifications {\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_pass http://localhost:9001/ws/notifications;\n  }\n\n  location / {\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_redirect off;\n    proxy_pass http://localhost:9001/;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Manual Loop Unrolling for Static UI Elements\nDESCRIPTION: Performance optimization technique of manually declaring static UI elements instead of iterating over arrays, which can improve render performance.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_36\n\nLANGUAGE: clojure\nCODE:\n```\n(defc shape-toolbar []\n  [:*\n    [:> tool-button {:tool \"rect\"}]\n    [:> tool-button {:tool \"circle\"}]\n    [:> tool-button {:tool \"text\"}]])\n```\n\n----------------------------------------\n\nTITLE: Using Icon IDs in Clojure\nDESCRIPTION: Example of using predefined icon IDs from the imported namespace to create an icon component with the pin icon.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/assets/icon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> i/icon* {:icon-id i/pin}]\n```\n\n----------------------------------------\n\nTITLE: Backend Architecture - PlantUML Diagram\nDESCRIPTION: PlantUML diagram showing the high-level architecture of the backend system, including frontend app, backend app, database, and Redis broker connections.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/backend.md#2025-04-22_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml BackendGeneral\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons\n!include DEVICONS/react.puml\n!include DEVICONS/java.puml\n!include DEVICONS/clojure.puml\n!include DEVICONS/postgresql.puml\n!include DEVICONS/redis.puml\n!include DEVICONS/chrome.puml\n\nHIDE_STEREOTYPE()\n\nContainer(frontend_app, \"Frontend app\", \"React / ClojureScript\", \"\", \"react\")\n\nSystem_Boundary(backend, \"Backend\") {\n    Container(backend_app, \"Backend app\", \"Clojure / JVM\", \"\", \"clojure\")\n    ContainerDb(db, \"Database\", \"PostgreSQL\", \"\", \"postgresql\")\n    ContainerDb(redis, \"Broker\", \"Redis\", \"\", \"redis\")\n}\n\nBiRel(frontend_app, backend_app, \"Open\", \"websocket\")\nRel(frontend_app, backend_app, \"Uses\", \"RPC API\")\nRel(backend_app, db, \"Uses\", \"SQL\")\nRel(redis, backend_app, \"Subscribes\", \"pub/sub\")\nRel(backend_app, redis, \"Notifies\", \"pub/sub\")\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info Source in Bash (Since v1.19.0)\nDESCRIPTION: Introduced in Penpot v1.19.0, this setting allows specifying whether to retrieve user information from the OIDC token (`token`) or the userinfo endpoint (`userinfo`). Setting `PENPOT_OIDC_USER_INFO_SOURCE` can reduce latency and improve compatibility with providers exposing claims differently. If unset (default), Penpot tries the token first, then the userinfo endpoint.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Set the default USER INFO source. Can be `token` or `userinfo`. By default\n# is unset (both will be tried, starting with token).\n\nPENPOT_OIDC_USER_INFO_SOURCE:\n```\n\n----------------------------------------\n\nTITLE: Low Specificity SCSS Example (Do)\nDESCRIPTION: Presents the preferred SCSS pattern using lower specificity. By keeping selectors separate and avoiding unnecessary nesting (`.btn`, `.icon`), the styles become more maintainable and easier to override when needed.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n.btn {\n  // ...\n}\n\n.icon {\n  fill: var(--icon-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Backend REPL for Penpot Backend - Bash\nDESCRIPTION: This snippet launches the backend REPL environment by invoking a script located at './scripts/repl'. It provides interactive access to backend services and helper functions ((start), (stop), (restart)). The script must have execute permissions and is intended for use within the backend tmux window; this process is essential for developer debugging and advanced backend control, especially after manual service restarts.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/devenv.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/repl\n```\n\n----------------------------------------\n\nTITLE: Pre-Creating Partial Functions Outside Components\nDESCRIPTION: Alternative approach for using partial by pre-creating and storing the resulting functions outside component definitions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_31\n\nLANGUAGE: clojure\nCODE:\n```\n(defn- set-padding [sides value]\n  ;; ...\n  )\n\n(def set-block-padding (partial set-padding :block))\n(def set-inline-padding (partial set-padding :inline))\n\n(defc paddings []\n  [:*\n    [:> numeric-input* {:on-change set-block-padding}]\n    [:> numeric-input* {:on-change set-inline-padding}]])\n```\n\n----------------------------------------\n\nTITLE: Avoiding Anonymous Functions as Event Handlers\nDESCRIPTION: Anti-pattern showing the creation of anonymous functions within components that leads to performance issues by creating new functions on each render.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_25\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc login-button {::mf/props obj} []\n  [:button {:on-click (fn []\n    ;; emit event to login, etc.\n    )}\n   \"Login\"])\n```\n\n----------------------------------------\n\nTITLE: PlantUML Architecture Diagram\nDESCRIPTION: C4 architecture diagram showing the relationships between Frontend app, Exporter service, and Headless browser components\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/exporter.md#2025-04-22_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml Exporter\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons\n!include DEVICONS/react.puml\n!include DEVICONS/clojure.puml\n!include DEVICONS/chrome.puml\n\nHIDE_STEREOTYPE()\n\nContainer(frontend_app, \"Frontend app\", \"React / ClojureScript\", \"\", \"react\")\n\nSystem_Boundary(backend, \"Backend\") {\n    Container(exporter, \"Exporter\", \"ClojureScript / nodejs\", \"\", \"clojure\")\n    Container(browser, \"Headless browser\", \"Chrome\", \"\", \"chrome\")\n}\n\nRel_D(frontend_app, exporter, \"Uses\", \"HTTPS\")\nRel_R(exporter, browser, \"Uses\", \"puppeteer\")\nRel_U(browser, frontend_app, \"Uses\", \"HTTPS\")\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Surge CLI\nDESCRIPTION: Commands for installing Surge CLI globally and logging in or creating a new account for deployment.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global surge\nsurge login\n# or\nsurge signup\n```\n\n----------------------------------------\n\nTITLE: High Specificity SCSS Example (Avoid)\nDESCRIPTION: Provides an SCSS example demonstrating unnecessarily high specificity caused by nesting selectors (`.btn .icon`). This pattern should generally be avoided as it makes styles harder to override and maintain.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n.btn {\n  // ...\n  .icon {\n    fill: var(--icon-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Kaocha in Bash\nDESCRIPTION: Commands for running unit tests using the Kaocha test runner.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# To run all tests once\nclojure -M:dev:test\n\n# To run all tests and keep watching for changes\nclojure -M:dev:test --watch\n\n# To run a single tests module\nclojure -M:dev:test --focus common-tests.logic.comp-sync-test\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Callback URL Format in HTML\nDESCRIPTION: This snippet shows the generic format for the callback URL required by third-party OAuth providers when configuring authentication with Penpot. Replace `<your_domain>` with the public domain of your Penpot instance and `<oauth_provider>` with the specific provider (e.g., google, gitlab, github).\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nhttps://<your_domain>/api/auth/oauth/<oauth_provider>/callback\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Icon-Only Tabs in Clojure\nDESCRIPTION: Shows how to implement tab switcher with icon-only tabs using aria-labels for accessibility.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/layout/tab_switcher.mdx#2025-04-22_snippet_3\n\nLANGUAGE: clojure\nCODE:\n```\n[:> tab_switcher*       \n    {:tabs [{ :aria-label \"Code\"\n              :id \"tab-code\"\n              :icon i/fill-content\n              :content [:p Lorem Ipsum ]}\n            { :aria-label \"Design\"\n              :id \"tab-design\"\n              :icon i/pentool\n              :content [:p Dolor sit amet ]}\n            { :aria-label \"Menu\"\n              :id \"tab-menu\"\n              :icon i/mask\n              :content [:p Consectetur adipiscing elit ]} \n            ]}]\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin Styles - CSS Import\nDESCRIPTION: CSS import statement to include Penpot plugin styles in your global CSS file.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@penpot/plugin-styles/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing Swatch Stories in JavaScript\nDESCRIPTION: Import statements for Storybook documentation of Swatch component, including Canvas and Meta components from @storybook/blocks and story imports.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/utilities/swatch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Canvas, Meta } from \"@storybook/blocks\";\nimport * as SwatchStories from \"./swatch.stories\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OIDC Scopes in Bash (Since v1.6.0)\nDESCRIPTION: Introduced in Penpot v1.6.0, this snippet shows how to specify custom OIDC scopes using the `PENPOT_OIDC_SCOPES` environment variable. This overrides the default scopes ('openid profile'). Use with caution, ensuring the chosen scopes provide at least the 'name' and 'email' attributes required by Penpot.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# This settings allow overwrite the required scopes, use with caution\n# because Penpot requres at least `name` and `email` attrs found on the\n# user info. Optional, defaults to `openid profile`.\nPENPOT_OIDC_SCOPES: \"scope1 scope2\"\n```\n\n----------------------------------------\n\nTITLE: Running Fixtures via Command Line\nDESCRIPTION: Command to execute fixtures as a standalone script using Clojure CLI\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/backend.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nclojure -Adev -X:fn-fixtures\n```\n\n----------------------------------------\n\nTITLE: Locating Form Fields by Label using Playwright in JavaScript\nDESCRIPTION: Uses Playwright's `page.getByLabel` method to locate form input elements associated with a specific label text. Recommended for interacting with form fields.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\npage.getByLabel\n```\n\n----------------------------------------\n\nTITLE: Corrected SCSS with Lower Specificity (Do)\nDESCRIPTION: Shows the preferred SCSS styling approach corresponding to the corrected button component. Separate, non-nested class selectors (`.button`, `.icon`) are used, promoting lower specificity and making styles easier to manage and override. The component applies these classes to the elements it owns.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n.button {\n  // ...\n}\n\n.icon {\n  fill: var(--icon-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page Object Model in Tests\nDESCRIPTION: Example showing how to use a Page Object Model in a test case\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest(\"Sample test\", async ({ page }) => {\n  const loginPage = new loginPage(page);\n  // ...\n  await expect(loginPage.loginButton).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component Icons\nDESCRIPTION: Demonstrates importing the icon namespace required for using icons in Select options.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/controls/select.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.assets.icon :as i]))\n```\n\n----------------------------------------\n\nTITLE: Skipping and Marking Tests in Kaocha - Clojure\nDESCRIPTION: Demonstrates how to use metadata in Clojure with Kaocha to skip or mark tests as pending. `^:kaocha/skip` skips the test entirely, often used for slow or non-working tests, while `^:kaocha/pending` skips the test but warns during the test run. No external dependencies beyond `clojure.test` and Kaocha are required. No parameters are involved; the functionality is invoked via test metadata.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_6\n\nLANGUAGE: Clojure\nCODE:\n```\n;; To skip a test, for example when is not working or too slow\n(deftest ^:kaocha/skip bad-test\n  (is (= 2 1)))\n\n;; To skip it but warn you during test run, so you don't forget it\n(deftest ^:kaocha/pending bad-test\n  (is (= 2 1)))\n```\n\n----------------------------------------\n\nTITLE: WebSocket Message Handling\nDESCRIPTION: Example of WebSocket message handling and presence notification testing\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/playwright/ui/pages/WorkspacePage.js\nexport class WorkspacePage extends BaseWebSocketPage {\n  // ...\n\n  async goToWorkspace() {\n    // ...\n    this.#ws = await this.waitForNotificationsWebSocket();\n    await this.#ws.mockOpen();\n    // ...\n  }\n\n  async sendPresenceMessage(fixture) {\n    await this.#ws.mockMessage(JSON.stringify(fixture));\n  }\n\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/playwright/ui/specs/workspace.spec.js\ntest(\"User receives presence notifications updates in the workspace\", async ({\n  page,\n}) => {\n  const workspacePage = new WorkspacePage(page);\n  // ...\n\n  await workspacePage.goToWorkspace();\n  await workspacePage.sendPresenceMessage(presenceFixture);\n\n  await expect(\n    page.getByTestId(\"active-users-list\").getByAltText(\"Princesa Leia\")\n  ).toHaveCount(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Delegating Props in Rumext with :rest Parameter\nDESCRIPTION: Implementation of prop forwarding in Rumext using the :rest keyword in destructuring. This allows passing through unspecified props to child components.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_22\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc button*\n  {::mf/props :obj}\n  [{:keys [children] :rest other}]\n  [:> \"button\" other children])\n```\n\n----------------------------------------\n\nTITLE: Using HTML Alt Attribute\nDESCRIPTION: Accessibility guideline snippet suggesting the `alt` attribute (or similar like `aria-label`) as a way to provide text alternatives for images or icons, particularly when they convey meaning.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\nalt\n```\n\n----------------------------------------\n\nTITLE: Login Page Object Model Definition\nDESCRIPTION: Example implementation of a Page Object Model for login functionality with element locators\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass LoginPage {\n  constructor(page) {\n    super(page);\n    this.loginButton = page.getByRole(\"button\", { name: \"Login\" });\n    this.passwordInput = page.getByLabel(\"Password\");\n    this.emailInput = page.getByLabel(\"Email\");\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Module in Clojure for Combobox Component\nDESCRIPTION: This snippet demonstrates how to import the icon namespace required for using icons in combobox options. The namespace provides icon IDs that can be used within combobox components.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/controls/combobox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.assets.icon :as i]))\n```\n\n----------------------------------------\n\nTITLE: Extracting Database Schema\nDESCRIPTION: Command to dump the PostgreSQL database schema using pg_dump\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/backend.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npg_dump -h postgres -s  > schema.sql\n```\n\n----------------------------------------\n\nTITLE: Storage Object Properties in Clojure\nDESCRIPTION: Key properties of the StorageObject record used to track metadata for stored objects in the storage_object table.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/subsystems/assets-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n:id\n:backend\n:created-at\n:deleted-at\n:expired-at\n:touched-at\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose Configuration\nDESCRIPTION: Commands to download the docker-compose.yaml file from Penpot's repository using wget or curl\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o docker-compose.yaml https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Manifest URL\nDESCRIPTION: This code snippet shows the correct format for the URL used to install a plugin in Penpot. It demonstrates how to structure the URL to point to the plugin's manifest.json file.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps:\\/\\/yourdomain.com/assets/manifest.json\n```\n\n----------------------------------------\n\nTITLE: Considering Native HTML Select Element\nDESCRIPTION: Guideline snippet suggesting the use of native HTML elements like `<select>` when possible for accessibility, but acknowledging that custom implementations might be needed for styling.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<select>\n```\n\n----------------------------------------\n\nTITLE: Rendering an SVG Asset in a ClojureScript Component\nDESCRIPTION: Demonstrates how to use the imported SVG assets with the raw-svg* component. This example shows rendering the logo asset using the predefined asset ID from the svg namespace.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/assets/raw_svg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> svg/raw-svg* {:asset svg/logo}]\n```\n\n----------------------------------------\n\nTITLE: Extracting Colors from an Image using ImageMagick\nDESCRIPTION: This snippet extracts a list of unique colors from a PNG image using ImageMagick. Useful for identifying the colors present in an image for further processing. It requires ImageMagick to be installed.\nSOURCE: https://github.com/penpot/penpot/blob/develop/tracebitmap.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconvert download.png +dither -colors 10 -unique-colors txt:\n```\n\n----------------------------------------\n\nTITLE: Example OAuth Callback URL for GitLab in HTML\nDESCRIPTION: This snippet provides a concrete example of the OAuth callback URL specifically for integrating with GitLab. Replace `<your_domain>` with the actual public domain where your Penpot instance is accessible.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nhttps://<your_domain>/api/auth/oauth/gitlab/callback\n```\n\n----------------------------------------\n\nTITLE: Bypassing Kaocha Output Programmatically - Clojure\nDESCRIPTION: Demonstrates the use of `kaocha.plugin.capture-output/bypass` to selectively display output inside a test, instead of relying on global CLI flags. Requires Kaocha and the `kaocha.plugin.capture-output` plugin in the classpath. The test prints a message, then asserts equality; useful when only some output needs to be uncaptured.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_11\n\nLANGUAGE: Clojure\nCODE:\n```\n(ns sample-test\n  (:require [clojure.test :refer :all]\n            [kaocha.plugin.capture-output :as capture]))\n\n(deftest stdout-pass-test\n  (capture/bypass\n    (println \"This message should be displayed\"))\n  (is (= :same :same)))\n```\n\n----------------------------------------\n\nTITLE: Running Tests in UI Mode\nDESCRIPTION: Command to launch Playwright's UI mode for running tests in Chromium browser\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly Renderer\nDESCRIPTION: Shell commands to build the WebAssembly renderer project and copy output files to the frontend. Must be run within the Penpot Development Environment using tmux.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd penpot/render-wasm\n./build\n```\n\n----------------------------------------\n\nTITLE: Rendering InputWithValues Component in ClojureScript\nDESCRIPTION: This snippet demonstrates how to use the input-with-values* component in ClojureScript. It shows the basic structure and required properties for rendering the component.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/controls/input_with_values.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n[:> input-with-values*\n  {:name name\n  :values values\n  :on-blur on-blur}]\n```\n\n----------------------------------------\n\nTITLE: Problematic Nested SCSS Selector (Avoid)\nDESCRIPTION: Illustrates an SCSS styling pattern to avoid. It uses a nested selector (`svg`) within the `.button` class to style an element (`svg`) that is not directly instantiated or controlled by the corresponding `button*` component. This leaks styles and creates coupling.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n.button {\n  // ...\n  svg {\n    fill: var(--icon-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating an Input by Label using Playwright in JavaScript\nDESCRIPTION: Demonstrates using `page.getByLabel` to locate the input element associated with the label text 'Password' in the example HTML form.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_26\n\nLANGUAGE: js\nCODE:\n```\npage.getByLabel(\"Password\");\n```\n\n----------------------------------------\n\nTITLE: Referencing the 'getByLabel' Playwright Locator in JavaScript\nDESCRIPTION: Refers to the `getByLabel` locator method in Playwright, highlighted as the preferred way to select form input elements.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_25\n\nLANGUAGE: js\nCODE:\n```\ngetByLabel\n```\n\n----------------------------------------\n\nTITLE: Building Plugin Project with NPM\nDESCRIPTION: Command to build the plugin project using npm, generating deployment-ready files in the dist directory.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Build Command for Penpot Text Editor\nDESCRIPTION: Command to build and update the text editor within Penpot, specifying the source path.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/text-editor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPENPOT_SOURCE_PATH=/path/to/penpot/repository yarn build:update\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for Tab Switcher in Clojure\nDESCRIPTION: Demonstrates how to import the required icon namespace for use in tab switcher component.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/layout/tab_switcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.assets.icon :as i]))\n```\n\n----------------------------------------\n\nTITLE: Usage Example for Problematic Button in Clojure\nDESCRIPTION: This snippet shows how the problematic `button*` (which doesn't instantiate its own icon) might be used. The caller passes an `icon` component directly as a child. This couples the caller's code tightly with the button's internal styling assumptions (shown in the problematic SCSS example).\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: clojure\nCODE:\n```\n;; later in code\n[:> button* {}\n  [:> icon {:id \"foo\"}]\n  \"Lorem ipsum\"]\n```\n\n----------------------------------------\n\nTITLE: Referencing the 'getByText' Playwright Locator in JavaScript\nDESCRIPTION: Refers to the `getByText` locator method in Playwright, used for finding elements based on their text content when other locators like `getByRole` or `getByLabel` are not applicable.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_27\n\nLANGUAGE: js\nCODE:\n```\ngetByText\n```\n\n----------------------------------------\n\nTITLE: Serializing Align Self Layout Property (Layout Context) as u8 Values\nDESCRIPTION: Defines `u8` values for the align-self CSS-like property within a general layout context (Start, End, Center, Stretch). Any value not explicitly listed indicates an error state. This table appears within the general 'Layout' section.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field   |\n| ----- | ------- |\n| 0     | Start   |\n| 1     | End     |\n| 2     | Center  |\n| 3     | Stretch |\n| \\_    | error   |\n```\n\n----------------------------------------\n\nTITLE: Upgrading Penpot Installation\nDESCRIPTION: Command to upgrade an existing Penpot installation with new configuration values\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/kubernetes.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-release -f values.yaml penpot/penpot\n```\n\n----------------------------------------\n\nTITLE: Compiling Frontend for Visual Regression Tests in Bash\nDESCRIPTION: This Bash command compiles the frontend in release mode for faster execution of visual regression tests using Shadow CLJS.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nclojure -M:dev:shadow-cljs release main\n```\n\n----------------------------------------\n\nTITLE: Styling Icons with SCSS\nDESCRIPTION: SCSS example showing how to define custom colors for icons through CSS classes, using CSS variables for consistent theming.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/assets/icon.mdx#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n.toolbar-icon {\n  color: var(--component-toolbar-icon-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Components in Penpot Plugins\nDESCRIPTION: This code snippet demonstrates the method signature for creating components in Penpot plugins. It shows how to use the createComponent function to create a new component from an array of shapes.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateComponent(shapes: Shape[]): LibraryComponent;\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status for Penpot\nDESCRIPTION: Shows how to list all Penpot containers and verify they are running properly. This command lists the state of all containers defined in the docker-compose file with the project name 'penpot'.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p penpot -f docker-compose.yaml ps\n```\n\n----------------------------------------\n\nTITLE: Plugin Build Scripts - Package.json\nDESCRIPTION: NPM scripts configuration for building and serving the plugin.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"vite build --watch & vite preview\",\n    \"build\": \"tsc && vite build\",\n    [...]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node Environment Dependencies for Penpot Docs\nDESCRIPTION: Sets up the Node.js environment and installs required dependencies using nvm and yarn. Includes steps for Node version management and package installation.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# only if necessary\nnvm install\nnvm use\n# only if necessary\ncorepack enable\n\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Referencing the 'data-testid' HTML Attribute\nDESCRIPTION: Refers to the 'data-testid' attribute, a custom attribute added specifically for identifying elements during testing. It is targeted using Playwright's `getByTestId`.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\ndata-testid\n```\n\n----------------------------------------\n\nTITLE: Kaocha Failure Output Example - Bash\nDESCRIPTION: Provides a sample output from a failing Kaocha test, showing how standard output and test failures are presented. Not executable Bash, but used here for illustration. Used to guide developers' expectations for Kaocha's error reporting interface.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nFAIL in sample-test/stdout-fail-test (sample_test.clj:10)\nExpected:\n  :same\nActual:\n  -:same +:not-same\n\\u256d\\u2500\\u2500\\u2500\\u2500\\u2500 Test output \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256e\n\\u2502 Can you see this?\n\\u2570\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2570\n2 tests, 2 assertions, 1 failures.\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers for Static Hosting\nDESCRIPTION: Header configuration to enable Cross-Origin Resource Sharing (CORS) for plugin deployment. This allows the plugin to be accessed from any domain.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/*\n  Access-Control-Allow-Origin: *\n```\n\n----------------------------------------\n\nTITLE: Locating an Element by Text Content using Playwright in JavaScript\nDESCRIPTION: Demonstrates using `page.getByText` to locate an element (likely a paragraph) containing the specific text 'Penpot is the free open-' from the example HTML.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_28\n\nLANGUAGE: js\nCODE:\n```\npage.getByText(\"Penpot is the free open-\");\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format Template\nDESCRIPTION: Template showing the required structure for commit messages, including type, subject, body, and footer sections\nSOURCE: https://github.com/penpot/penpot/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<type> <subject>\n\n[body]\n\n[footer]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Basic markdown structure defining the developer guide documentation with internal navigation links.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 3. Developer Guide\n---\n\n# Developer Guide\n\nThis section is intended for people wanting to mess with the code or the inners\nof Penpot application.\n\nThe [Architecture][1] and [Data model][2] sections provide a bird's eye view of\nthe whole system, to better understand how is structured.\n\nThe [Dev Env][3] section explains how to setup the development enviroment that\nwe (the core team) use internally.\n\nAnd the rest of sections are a list categorized of probably not deeply\nrelated HOWTO articles about dev-centric subjects.\n\n[1]: /technical-guide/developer/architecture/\n[2]: /technical-guide/developer/data-model/\n[3]: /technical-guide/developer/devenv/\n```\n\n----------------------------------------\n\nTITLE: Avoiding Partial Function Creation Inside Components\nDESCRIPTION: Anti-pattern showing use of partial inside component rendering, which creates new function instances on each render.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_29\n\nLANGUAGE: clojure\nCODE:\n```\n(defn- set-margin [side value]\n  ;; ...\n  )\n\n(mf/defc margins []\n  [:*\n    [:> numeric-input* {:on-change (partial set-margin :left)}]\n    [:> numeric-input* {:on-change (partial set-margin :right)}] ])\n```\n\n----------------------------------------\n\nTITLE: File Model UML Diagram\nDESCRIPTION: PlantUML diagram illustrating the structure of File data, including relationships with Pages, Components, Colors, MediaItems, and Typography entities.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-model/index.md#2025-04-22_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml FileModel\n\nhide members\n\nclass File\nclass Page\nclass Component\nclass Color\nclass MediaItem\nclass Typography\n\nFile *--> \"*\" Page : pages\n(File, Page) .. PagesList\n\nFile *--> \"*\" Component : components\n(File, Component) .. ComponentsList\n\nFile *--> \"*\" Color : colors\n(File, Color) .. ColorsList\n\nFile *--> \"*\" MediaItem : colors\n(File, MediaItem) .. MediaItemsList\n\nFile *--> \"*\" Typography : colors\n(File, Typography) .. TypographiesList\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: WebSocket Testing Setup\nDESCRIPTION: Implementation of WebSocket testing setup with initialization\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/playwright/ui/pages/WorkspacePage.js\nexport class WorkspacePage extends BaseWebSocketPage {\n  static async init(page) {\n    await BaseWebSocketPage.init(page);\n    // ...\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/playwright/ui/specs/workspace.spec.js\ntest.beforeEach(async ({ page }) => {\n  await WorkspacePage.init(page);\n});\n```\n\n----------------------------------------\n\nTITLE: Representing HTML Input Tag in JavaScript Context\nDESCRIPTION: Represents the HTML `<input>` tag within the context of selecting form elements using Playwright locators like `getByLabel`.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n\\<input>\n```\n\n----------------------------------------\n\nTITLE: Viewing All Penpot Container Logs\nDESCRIPTION: Shows how to stream logs from all Penpot containers at once. The -f flag ensures logs are followed in real-time, which is useful for monitoring ongoing issues.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p penpot -f docker-compose.yaml logs -f\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Bash\nDESCRIPTION: Example showing the correspondence between environment variables and configuration in Penpot's backend and exporter.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(env)\nPENPOT_ASSETS_STORAGE_BACKEND=assets-s3\n\n(config)\nassets-storage-backend :assets-s3\n```\n\n----------------------------------------\n\nTITLE: File Path Reference\nDESCRIPTION: Code snippet showing the path reference to Penpot's frontend app code in the main repository.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/frontend.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfrontend/src/app\n```\n\n----------------------------------------\n\nTITLE: API Mocking Implementation\nDESCRIPTION: Example of mocking API calls using BasePage extension\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport class FooPage extends BasePage {\n  setupNetworkResponses() {\n    this.mockRPC(\"lorem/ipsum\", \"json-file-with-fake-response.json\");\n\n    // Regexes are supported too\n    this.mockRPC(\n      /a\\-regex$/\n      \"json-file-with-fake-response.json\"\n    );\n\n    // ...You can also pass custom status code and override other options\n    this.mockRPC(\"something/not/found\", \"json-file-with-fake-response.json\", {\n      status: 404,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Penpot Text Content Structure Diagram\nDESCRIPTION: Mermaid flowchart showing how Penpot stores text content hierarchically.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/text-editor/README.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n  root((root)) --> paragraph-set((paragraph-set))\n  paragraph-set --> paragraph((paragraph))\n  paragraph --> text((text))\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview\nDESCRIPTION: Shows the organization of code into abstract data types within the common directory structure.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/data-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n▾ common/\n  ▾ src/app/common/\n    ▾ types/\n        file.cljc\n        page.cljc\n        shape.cljc\n        color.cljc\n        component.cljc\n        ...\n```\n\n----------------------------------------\n\nTITLE: Representing HTML Image Tag in JavaScript Context\nDESCRIPTION: Represents the HTML `<img>` tag, an element type that typically uses the `alt` attribute and can be located using `page.byAltText`.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n\\<img>\n```\n\n----------------------------------------\n\nTITLE: Common Directory Structure Layout\nDESCRIPTION: Shows the directory structure of the common code module including geom, pages, path, and types directories that contain shared functionality.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/common.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  ▾ common/src/app/common/\n    ▸ geom/\n    ▸ pages/\n    ▸ path/\n    ▸ types/\n      ...\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes Across Versions\nDESCRIPTION: Comprehensive list of resolved issues and bug fixes in Penpot\nSOURCE: https://github.com/penpot/penpot/blob/develop/CHANGES.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Fixed viewer scroll problems\n- Fixed hide html options on handoff\n- Fixed share prototypes overlay and stroke\n- Fixed border radius on boolean operations\n- Fixed inconsistent rectangle representation\n- Fixed recent fonts info\n- Fixed clipped elements affecting boards and centering\n```\n\n----------------------------------------\n\nTITLE: Creating CORS File for Surge Deployment\nDESCRIPTION: Command to create a CORS file that allows access from all domains when deploying to Surge.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho '*' > public/CORS\n```\n\n----------------------------------------\n\nTITLE: Text Editor Node Structure Diagram\nDESCRIPTION: Mermaid flowchart showing the node structure of text elements in the editor.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/text-editor/README.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n  root((root)) --> paragraph((paragraph))\n  paragraph --> inline_1((inline))\n  paragraph --> inline_2((inline))\n  inline_1 --> text_1[Hello, ]\n  inline_2 --> text_2[World!]\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Penpot Backend and Exporter\nDESCRIPTION: Sets up Redis configuration for Penpot backend and exporter, primarily used for websocket notifications coordination.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Backend\nPENPOT_REDIS_URI: redis://localhost/0\n\n# Exporter\nPENPOT_REDIS_URI: redis://localhost/0\n```\n\n----------------------------------------\n\nTITLE: Sending Test Email via REPL\nDESCRIPTION: Example demonstrating how to send a test email using the srepl namespace functions\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/backend.md#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n(require '[app.srepl.main :as srepl])\n(srepl/send-test-email! system \"test@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Logs for Specific Docker Container\nDESCRIPTION: Shows how to check logs from a specific container by its name. This approach uses the docker logs command directly rather than docker-compose, which can be useful for containers with specific naming patterns.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f penpot-penpot-postgres-1\n```\n\n----------------------------------------\n\nTITLE: Example HTML Form for Playwright Locator Demonstration\nDESCRIPTION: An example HTML form structure containing labels, inputs (with placeholders), a paragraph, and a button. This structure is used to demonstrate the application of various Playwright locator strategies discussed in the document.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <p>Penpot is the free open-...</p>\n  <label for=\"email\">\n    Email\n    <input placeholder=\"Email\" name=\"email\" type=\"email\" id=\"email\" value=\"\" />\n  </label>\n\n  <label for=\"password\">\n    Password\n    <input\n      placeholder=\"Password\"\n      name=\"password\"\n      type=\"password\"\n      id=\"password\"\n      value=\"\"\n    />\n  </label>\n  <button type=\"submit\">Login</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Checking visual test differences using diff in Bash\nDESCRIPTION: Command reference for reviewing visual test differences after project changes. When visual tests fail, diff files are generated that show the differences between expected and actual output.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ndiff\n```\n\n----------------------------------------\n\nTITLE: HTML Structure Example for Text Editor\nDESCRIPTION: Example HTML structure showing the root, paragraph, and inline elements that make up the text editor's content hierarchy.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/text-editor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-itype=\"root\">\n  <div data-itype=\"paragraph\">\n    <span data-itype=\"inline\">Hello, </span>\n    <span data-itype=\"inline\" style=\"font-weight: bold\">World!</span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Opening a ClojureScript REPL for Frontend Development - Bash\nDESCRIPTION: This command opens a ClojureScript Read-Eval-Print Loop (REPL) connected to the frontend 'main' build using shadow-cljs. It requires 'npx' and 'shadow-cljs' installed in the container environment and should be run in a split tmux window for interactivity. This allows developers to evaluate code live, improving frontend debugging and experimentation. Typically used alongside an active watch/build process.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/devenv.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadow-cljs cljs-repl main\n```\n\n----------------------------------------\n\nTITLE: Enable LDAP Login Configuration\nDESCRIPTION: Frontend configuration flag to enable LDAP authentication in development environment\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/subsystems/authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar penpotFlags = \"enable-login-with-ldap\";\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of Penpot Exporter\nDESCRIPTION: Shows the file and directory structure of the Penpot exporter application, located under exporter/src/app/\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/exporter.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  ▾ exporter/src/app/\n    ▸ http/\n    ▸ renderer/\n    ▸ util/\n      core.cljs\n      http.cljs\n      browser.cljs\n      config.cljs\n```\n\n----------------------------------------\n\nTITLE: Example of Using '.not' in Playwright Assertions (JavaScript)\nDESCRIPTION: Provides an example `expect(false).not.toBeTruthy()` assertion to illustrate the use of the `.not` modifier. The surrounding text advises against this pattern for improved readability.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nexpect(false).not.toBeTruthy()\n```\n\n----------------------------------------\n\nTITLE: Avoiding Function Definition with let Inside Components\nDESCRIPTION: Anti-pattern showing function definition inside component body with let, which creates new function instances on each render.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_27\n\nLANGUAGE: clojure\nCODE:\n```\n(mf/defc login-button\n  {::mf/props :obj}\n  []\n  (let [click-handler (fn []\n                       ;; ...\n                       )]\n    [:button {:on-click click-handler} \"Login\"]))\n```\n\n----------------------------------------\n\nTITLE: New Features Overview\nDESCRIPTION: Lists major new features and improvements added to Penpot\nSOURCE: https://github.com/penpot/penpot/blob/develop/CHANGES.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Cosmetic changes in viewer mode\n- Nested and rotated boards support\n- View mode improvements\n- Enhanced share link options\n- Signin/Signup from shared link\n- Binary format import/export support\n- Comments positioning\n- Group-level selection behavior\n- Configurable media upload size\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Penpot API using Personal Access Token\nDESCRIPTION: This command demonstrates how to make an API request to the Penpot backend using a personal access token for authentication. It retrieves the user's profile information via the get-profile command endpoint.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/integration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Token <replace-this-with-token>\" https://design.penpot.app/api/rpc/command/get-profile\n```\n\n----------------------------------------\n\nTITLE: Asset URL Patterns for Object Retrieval\nDESCRIPTION: URL patterns for accessing stored assets through Penpot's asset endpoints.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/subsystems/assets-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/assets/by-id/<uuid>\n/assets/by-file-media-id/<uuid>\n/assets/by-file-media-id/<uuid>/thumbnail\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Test ID using Playwright in JavaScript\nDESCRIPTION: Uses Playwright's `page.getByTestId` method to find elements based on their `data-testid` attribute. This is the least preferred locator, used when other methods are not feasible.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\npage.getByTestId\n```\n\n----------------------------------------\n\nTITLE: Rendering Feedback Message Template in Liquid\nDESCRIPTION: A template that conditionally displays feedback information based on whether a profile exists. If a profile is present, it shows the full name, email and ID. Otherwise, it displays just the email address. The template also includes a subject line and content section.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/feedback/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% if profile %}\nFeedback profile: {{profile.fullname}} <{{profile.email}}> / {{profile.id}}\n{% else %}\nFeedback from: {{email}}\n{% endif %}\n\nSubject: {{subject}}\n\n{{content}}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Iteration Over Static Arrays\nDESCRIPTION: Anti-pattern showing iterating over static arrays to create UI elements, which can be less efficient than direct declaration.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_35\n\nLANGUAGE: clojure\nCODE:\n```\n(defc shape-toolbar []\n  (let tools [\"rect\" \"circle\" \"text\"]\n    (for tool tools [:> tool-button {:tool tool}])))\n```\n\n----------------------------------------\n\nTITLE: Disabling Dashboard Templates Section Configuration Flag\nDESCRIPTION: Introduced in version 1.19.0, this configuration flag, `disable-dashboard-templates-section`, provides the ability to hide or disable the templates section within the Penpot dashboard. This might be used to simplify the user interface or enforce specific organizational workflows.\nSOURCE: https://github.com/penpot/penpot/blob/develop/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndisable-dashboard-templates-section\n```\n\n----------------------------------------\n\nTITLE: Starting Penpot Development Environment Containers - Bash\nDESCRIPTION: This pair of commands pulls the latest Penpot dev environment container images and runs the environment with tmux attached. The 'manage.sh pull-devenv' script ensures the latest Docker images are present, while 'manage.sh run-devenv' launches all required services and initializes the tmux session. The scripts depend on Docker, docker-compose V2, and having the project repository cloned. These operations are necessary for standing up all containers and services for local development.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/devenv.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./manage.sh pull-devenv\n./manage.sh run-devenv\n```\n\n----------------------------------------\n\nTITLE: File Extension Reference\nDESCRIPTION: Code snippet showing Penpot's file extension reference used in import/export operations.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/frontend.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.penpot\n```\n\n----------------------------------------\n\nTITLE: Using 'getByTestId' as a Last Resort Locator in Playwright JavaScript\nDESCRIPTION: Refers to the `getByTestId` Playwright locator, emphasizing its use as a final option when more user-centric locators (`getByRole`, `getByLabel`, `getByText`, etc.) cannot be applied.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_29\n\nLANGUAGE: js\nCODE:\n```\ngetByTestId\n```\n\n----------------------------------------\n\nTITLE: Database Deletion Field Reference\nDESCRIPTION: Reference to the deleted_at field used in the database for soft deletion functionality\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/backend.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndeleted_at\n```\n\n----------------------------------------\n\nTITLE: Referencing the HTML 'title' Attribute\nDESCRIPTION: Refers to the standard HTML 'title' attribute, often used for tooltips, which can be targeted using Playwright's `byTitle` locator.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\ntitle\n```\n\n----------------------------------------\n\nTITLE: Penpot Comment Notification Template\nDESCRIPTION: Template structure for email notifications when users are mentioned in comment threads. Uses variable interpolation with double curly braces for dynamic content insertion including user names, comment content, and relevant URLs.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/comment-thread/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: template\nCODE:\n```\nHello {{name|abbreviate:25}}!\n\n{{ source-user }} has created a comment in a thread you've been mentioned at \"{{ comment-reference }}\".\n\n--\n\n{{ comment-content }}\n\n--\n\n{{ comment-url }}\n\nThe Penpot team.\n```\n\n----------------------------------------\n\nTITLE: Configuring Registration Domain Whitelists/Blacklists in Bash\nDESCRIPTION: This snippet demonstrates how to restrict user registration to specific email domains using environment variables for the backend. `PENPOT_REGISTRATION_DOMAIN_WHITELIST` accepts a comma-separated list. Alternatively, `PENPOT_EMAIL_DOMAIN_WHITELIST` and `PENPOT_EMAIL_DOMAIN_BLACKLIST` can point to files containing one domain per line. Since v2.1, whitelisting requires the `enable-email-whitelist` flag unless `PENPOT_REGISTRATION_DOMAIN_WHITELIST` is set.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Backend\n# comma separated list of domains\nPENPOT_REGISTRATION_DOMAIN_WHITELIST:\n\n# Backend\n# or a file with a domain per line\nPENPOT_EMAIL_DOMAIN_WHITELIST: path/to/whitelist.txt\nPENPOT_EMAIL_DOMAIN_BLACKLIST: path/to/blacklist.txt\n```\n\n----------------------------------------\n\nTITLE: Backend Source Code Path\nDESCRIPTION: File system path reference to the backend application source code location\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/architecture/backend.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nbackend/src/app\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes List for Environment Variables\nDESCRIPTION: Documents the removal and replacement of deprecated environment variables and configuration changes in Penpot\nSOURCE: https://github.com/penpot/penpot/blob/develop/CHANGES.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- PENPOT_LOGIN_WITH_LDAP replaced with enable-login-with-ldap flag\n- PENPOT_LDAP_ATTRS_PHOTO removed (unused)\n- Social login flags required: enable-login-with-google, enable-login-with-github, enable-login-with-gitlab, enable-login-with-oidc\n- PENPOT_REGISTRATION_ENABLED replaced with <enable|disable>-registration flag\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Statement\nDESCRIPTION: Legal text of the Developer's Certificate of Origin 1.1 that contributors must agree to when submitting code\nSOURCE: https://github.com/penpot/penpot/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Serializing Align Items Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for the align-items CSS-like property (Start, End, Center, Stretch). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field   |\n| ----- | ------- |\n| 0     | Start   |\n| 1     | End     |\n| 2     | Center  |\n| 3     | Stretch |\n| \\_    | error   |\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Invitation Email Template with Handlebars\nDESCRIPTION: A Handlebars template that generates a team invitation email. Uses filters like 'abbreviate' to limit text length and includes a verification link with a token.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/invite-to-team/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\nHello!\n\n{{invited-by|abbreviate:25}} has invited you to join the team \"{{ team|abbreviate:25 }}\".\n\nAccept invitation using this link:\n\n{{ public-uri }}/#/auth/verify-token?token={{token}}\n\nEnjoy!\nThe Penpot team.\n```\n\n----------------------------------------\n\nTITLE: Disabling User Registration in Penpot using Bash Flag\nDESCRIPTION: This snippet shows how to completely disable the user registration process in Penpot. This is achieved by adding the `disable-registration` flag to the `PENPOT_FLAGS` list. This configuration is typically recommended only for demo instances.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: [...] disable-registration\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Styles - NPM Command\nDESCRIPTION: Command to install the @penpot/plugin-styles package which contains UI styles for Penpot plugins.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @penpot/plugin-styles\n```\n\n----------------------------------------\n\nTITLE: Disabling Google Fonts Provider Configuration Flag\nDESCRIPTION: This configuration flag, `disable-google-fonts-provider`, allows administrators to prevent the Penpot application from using the Google Fonts provider. This is useful for privacy (avoiding user IP exposure to Google) or in environments with restricted internet access, as mentioned in version 1.19.0 features.\nSOURCE: https://github.com/penpot/penpot/blob/develop/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndisable-google-fonts-provider\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Sets up the Storybook documentation page metadata with title configuration.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/notifications/notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Notifications/Docs\" />\n```\n\n----------------------------------------\n\nTITLE: Serializing Sizing Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for sizing behavior layout property (Fill, Fix, Auto). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field |\n| ----- | ----- |\n| 0     | Fill  |\n| 1     | Fix   |\n| 2     | Auto  |\n| \\_    | error |\n```\n\n----------------------------------------\n\nTITLE: Penpot Email Verification Template\nDESCRIPTION: Email template that includes variable interpolation for user name and verification token. Uses custom template syntax with filters like abbreviate for name truncation.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/register/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: template\nCODE:\n```\nHello {{name|abbreviate:25}}!\n\nThanks for signing up for your Penpot account! Please verify your email using the\nlink below and get started building mockups and prototypes today!\n\n{{ public-uri }}/#/auth/verify-token?token={{token}}\n\nEnjoy!\nThe Penpot team.\n```\n\n----------------------------------------\n\nTITLE: Importing Button Stories in JSX\nDESCRIPTION: This code imports the necessary components and stories for button documentation in Storybook.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/buttons/buttons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\nimport * as ButtonStories from \"./button.stories\";\nimport * as IconButtonStories from \"./icon_button.stories\";\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands for Penpot Text Editor\nDESCRIPTION: Commands for running the development environment, unit tests, and test coverage for the Penpot text editor.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/text-editor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run test\nyarn run coverage\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run test:ui\n```\n\n----------------------------------------\n\nTITLE: Adding Penpot Helm Repository\nDESCRIPTION: Command to add the Penpot Helm repository to your Helm configuration\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/kubernetes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add penpot http://helm.penpot.app\n```\n\n----------------------------------------\n\nTITLE: Example User-Centric Test Name in JavaScript\nDESCRIPTION: Provides 'User logs in successfully' as an example of a well-named test, following the user-centric approach recommended in the guidelines.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_33\n\nLANGUAGE: js\nCODE:\n```\n\"User logs in successfully\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Anonymous Telemetries in Penpot using Bash Flag\nDESCRIPTION: This snippet shows how to enable the sending of anonymous telemetries from a self-hosted Penpot instance. This is done by adding the `enable-telemetries` flag to the `PENPOT_FLAGS` configuration.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_FLAGS: enable-telemetries\n```\n\n----------------------------------------\n\nTITLE: View-Only Access URL Template\nDESCRIPTION: URL template structure for generating view-only access links to Penpot files. Includes parameters for file ID, page ID, and sharing settings.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/request-file-access-yourpenpot-view/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ public-uri }}/#/view?file-id={{file-id}}&page-id={{page-id}}&section=interactions&index=0&share=true\n```\n\n----------------------------------------\n\nTITLE: Managing Dev Environment Lifecycle with manage.sh Subcommands - Bash\nDESCRIPTION: This block showcases several manage.sh subcommands for container and environment lifecycle control: building the local development image, starting or stopping containers, attaching tmux sessions, and cleaning up all Docker resources. These scripts abstract away underlying Docker Compose commands, making it easier to manage the Penpot development stack. Each subcommand is described by comment; prerequisites include existing Docker system setup and having 'manage.sh' script permissions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/devenv.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./manage.sh build-devenv-local # builds the local devenv docker image (called by run-devenv automatically when needed)\n./manage.sh start-devenv       # starts background running containers\n./manage.sh run-devenv         # enters to new tmux session inside of one of the running containers\n./manage.sh stop-devenv        # stops background running containers\n./manage.sh drop-devenv        # removes all the containers, volumes and networks used by the devenv\n```\n\n----------------------------------------\n\nTITLE: Example Test Name Using Action Verbs in JavaScript\nDESCRIPTION: Provides 'Adds a new file to the project' as an example of a test name starting with an action verb, adhering to the naming conventions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_35\n\nLANGUAGE: js\nCODE:\n```\n\"Adds a new file to the project\"\n```\n\n----------------------------------------\n\nTITLE: Basic Penpot Chart Installation\nDESCRIPTION: Command to install the Penpot chart with a release name\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/kubernetes.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-release penpot/penpot\n```\n\n----------------------------------------\n\nTITLE: Rendering Home Link with Nunjucks URL Filter\nDESCRIPTION: Nunjucks template syntax for generating a home page link using the URL filter.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/404.md#2025-04-22_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n{{ '/' | url }}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Typography Stories\nDESCRIPTION: Initial imports for Storybook documentation components and typography-related stories\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/typography/typography.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas, Meta } from \"@storybook/blocks\";\nimport Components from \"@target/components\";\nimport * as TextStories from \"../typography/text.stories\";\n```\n\n----------------------------------------\n\nTITLE: Inefficient Repeated Props Access Pattern\nDESCRIPTION: Anti-pattern showing repeated access to props properties, which can impact performance in frequently rendered components.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_33\n\nLANGUAGE: clojure\nCODE:\n```\n(defc icon\n  {::mf/props :obj}\n  [props]\n  [:svg {:width (unchecked-get props \"size\")\n         :height (unchecked-get props \"size\")\n         :class (stl/css-case icon true\n                              icon-large (> (unchecked-get props \"size\") 16))}\n    [:use {:href (unchecked-get props \"img\")}]])\n```\n\n----------------------------------------\n\nTITLE: Configuring inotify Watches for Docker Performance - Bash\nDESCRIPTION: This snippet increases the number of inotify watches to improve file change detection performance in the development environment, which is especially useful when using Docker containers on Linux hosts. It appends a new value for 'fs.inotify.max_user_watches' to '/etc/sysctl.conf' and reloads sysctl settings, requiring sudo privileges. This ensures file watchers inside Docker containers can monitor a large number of files, reducing missed changes in larger projects.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/devenv.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n```\n\n----------------------------------------\n\nTITLE: Serializing Grid Track Type Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for grid track types layout property (Percent, Flex, Auto, Fixed). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field   |\n| ----- | ------- |\n| 0     | Percent |\n| 1     | Flex    |\n| 2     | Auto    |\n| 3     | Fixed   |\n| \\_    | error   |\n```\n\n----------------------------------------\n\nTITLE: Installing Penpot with Values File\nDESCRIPTION: Command to install Penpot using a custom values YAML configuration file\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/kubernetes.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-release -f values.yaml penpot/penpot\n```\n\n----------------------------------------\n\nTITLE: Example Less Descriptive Test Name in JavaScript\nDESCRIPTION: Provides 'Test login' as an example of a less desirable test name, contrasting it with the preferred user-centric and descriptive naming style.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_34\n\nLANGUAGE: js\nCODE:\n```\n\"Test login\"\n```\n\n----------------------------------------\n\nTITLE: Rendering User and File Information in Penpot Email Template (HTML)\nDESCRIPTION: This snippet demonstrates how to dynamically insert user and file information into the email template using Penpot's template syntax. It includes placeholders for the requester's name, email, file name, and team name.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/request-file-access/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{requested-by|abbreviate:25}} ({{requested-by-email}}) has requested access to the file named \"{{file-name|abbreviate:25}}\".\n\nTo provide this access, you have the following options:\n\n- Give Access to the \"{{team-name|abbreviate:25}}\" Team:\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components\nDESCRIPTION: Imports required components from Storybook blocks and toast stories for documentation purposes.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/notifications/notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\nimport * as ToastStories from \"./toast.stories\";\n```\n\n----------------------------------------\n\nTITLE: Starting Penpot with Docker Compose\nDESCRIPTION: Commands to start Penpot using Docker Compose, including version specification\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/docker.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p penpot -f docker-compose.yaml up -d\n```\n\nLANGUAGE: bash\nCODE:\n```\nPENPOT_VERSION=2.4.3 docker compose -p penpot -f docker-compose.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Serializing Align Content Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for the align-content CSS-like property (Start, End, Center, Space between, Space around, Space evenly, Stretch). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field         |\n| ----- | ------------- |\n| 0     | Start         |\n| 1     | End           |\n| 2     | Center        |\n| 3     | Space between |\n| 4     | Space around  |\n| 5     | Space evenly  |\n| 6     | Stretch       |\n| \\_    | error         |\n```\n\n----------------------------------------\n\nTITLE: Database Migration Filename Examples\nDESCRIPTION: Examples of SQL migration file naming convention\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/backend.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n0025-del-generic-tokens-table\n0026-mod-profile-table-add-is-active-field\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Types - NPM Command\nDESCRIPTION: Command to install the @penpot/plugin-types package which provides TypeScript typings for the Penpot Plugin API.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @penpot/plugin-types\n```\n\n----------------------------------------\n\nTITLE: Referencing the 'alt' Attribute in JavaScript Context\nDESCRIPTION: Refers to the 'alt' attribute, commonly used with image elements, which can be targeted using Playwright's `byAltText` locator.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nalt\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Alt Text using Playwright in JavaScript\nDESCRIPTION: Uses Playwright's `page.byAltText` method to find elements (like images) based on their `alt` attribute. This is a lower priority semantic query.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\npage.byAltText\n```\n\n----------------------------------------\n\nTITLE: Serializing Boolean Operations as u8 Values\nDESCRIPTION: Defines the `u8` values for boolean operations (`bool-type`) used in Penpot (Union, Difference, Intersection, Exclusion). Any value not explicitly listed defaults to representing a Union operation.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field        |\n| ----- | ------------ |\n| 0     | Union        |\n| 1     | Difference   |\n| 2     | Intersection |\n| 3     | Exclusion    |\n| \\_    | Union        |\n```\n\n----------------------------------------\n\nTITLE: Email Template with Placeholders for Penpot Comment Notifications\nDESCRIPTION: HTML email template that uses double curly brace syntax to insert dynamic content. The template displays the recipient's name (with an abbreviation filter), the user who made the comment, the comment reference, the comment content itself, and a URL to view the comment in context.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/comment-notification/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nHello {{name|abbreviate:25}}!\n\n{{ source-user }} has commented at \"{{ comment-reference }}\".\n\n--\n\n{{ comment-content }}\n\n--\n\n{{ comment-url }}\n\nThe Penpot team.\n```\n\n----------------------------------------\n\nTITLE: Serializing Align Self Layout Property (Auto Context) as u8 Values\nDESCRIPTION: Defines `u8` values for the align-self CSS-like property, including an 'Auto' option (Auto, Start, End, Center, Stretch). Any value not explicitly listed indicates an error state. This appears to be a distinct context for align-self compared to the previous table.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field   |\n| ----- | ------- |\n| 0     | Auto    |\n| 1     | Start   |\n| 2     | End     |\n| 3     | Center  |\n| 4     | Stretch |\n| \\_    | error   |\n```\n\n----------------------------------------\n\nTITLE: Representing HTML Area Tag in JavaScript Context\nDESCRIPTION: Represents the HTML `<area>` tag, another element type that can use the `alt` attribute and be located using `page.byAltText`.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n\\<area>\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile via CLI\nDESCRIPTION: Command to create a new user profile using the manage.py script\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/docker.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti penpot-penpot-backend-1 python3 manage.py create-profile\n```\n\n----------------------------------------\n\nTITLE: Serializing Stroke Caps as u8 Values\nDESCRIPTION: Defines the `u8` values used to represent different stroke cap styles (Line, Triangle, Rectangle, Circle, Diamond, Round, Square). Any value not explicitly listed defaults to representing no cap style (None).\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field     |\n| ----- | --------- |\n| 1     | Line      |\n| 2     | Triangle  |\n| 3     | Rectangle |\n| 4     | Circle    |\n| 5     | Diamond   |\n| 6     | Round     |\n| 7     | Square    |\n| \\_    | None      |\n```\n\n----------------------------------------\n\nTITLE: Generating Team Access Link in Penpot Email Template (HTML)\nDESCRIPTION: This snippet shows how to create a dynamic link for granting team access in the Penpot email template. It uses template variables to include the public URI, team ID, and the requester's email address.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/request-file-access/en.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{ public-uri }}/#/dashboard/members?team-id{{team-id}}&invite-email={{requested-by-email|urlescape}}\n```\n\n----------------------------------------\n\nTITLE: Caddy Server Configuration\nDESCRIPTION: Example Caddy server configuration for proxying Penpot traffic\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/docker.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npenpot.mycompany.com {\n        reverse_proxy :9001\n        tls /path/to/fullchain.pem /path/to/privkey.pem\n        log {\n            output file /path/to/penpot.log\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Justify Self Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for the justify-self CSS-like property (Auto, Start, End, Center, Stretch). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field   |\n| ----- | ------- |\n| 0     | Auto    |\n| 1     | Start   |\n| 2     | End     |\n| 3     | Center  |\n| 4     | Stretch |\n| \\_    | error   |\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests for Design System in Bash\nDESCRIPTION: This Bash command runs Playwright tests for the design system project with a UI interface for visual inspection and debugging.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui --project=ds\n```\n\n----------------------------------------\n\nTITLE: Serializing Font Style as u8 Values\nDESCRIPTION: Defines the `u8` values used to represent font styles (Normal, Italic). Any value not explicitly listed defaults to representing the Normal style.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n| Value | Variant |\n| ----- | ------- |\n| 0     | Normal  |\n| 1     | Italic  |\n| \\_    | Normal  |\n```\n\n----------------------------------------\n\nTITLE: Running Code Linter\nDESCRIPTION: Command to run clj-kondo linter on the source code\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/backend.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd penpot/backend;\nclj-kondo --lint src\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Switcher Padding with SCSS\nDESCRIPTION: Defines custom padding variables for the tab navigation component using SCSS variables.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/layout/tab_switcher.mdx#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.parent {\n    --tabs-nav-padding-inline-start: value;\n    --tabs-nav-padding-inline-end: value;\n    --tabs-nav-padding-block-start: value;\n    --tabs-nav-padding-block-end: value;\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Wrap Type Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for wrap behavior layout property (Wrap, No Wrap). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field   |\n| ----- | ------- |\n| 0     | Wrap    |\n| 1     | No Wrap |\n| \\_    | error   |\n```\n\n----------------------------------------\n\nTITLE: Installing Create Palette Plugin in Penpot\nDESCRIPTION: This code snippet shows the URL to use for installing the Create Palette plugin in Penpot. It demonstrates how to reference a plugin's manifest file for installation.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhttps:\\/\\/create-palette-penpot-plugin.pages.dev/assets/manifest.json\n```\n\n----------------------------------------\n\nTITLE: Serializing Path Segments in Uint8Array\nDESCRIPTION: Details the 28-byte structure within a `Uint8Array` for serializing individual path segments. It specifies the offset, length, data type (`u16`, `f32`), and field (Command, Flags, control points c1_x/y, c2_x/y, end point x/y) for each segment. Command values (1-4) map to specific path operations. Flags are currently unused.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPaths are made of segments of **28 bytes** each. The layout (assuming positions in a `Uint8Array`) is the following:\n\n| Offset | Length (bytes) | Data Type | Field   |\n| ------ | -------------- | --------- | ------- |\n| 0      | 2              | `u16`     | Command |\n| 2      | 2              | `u16`     | Flags   |\n| 4      | 4              | `f32`     | `c1_x`  |\n| 8      | 4              | `f32`     | `c1_y`  |\n| 12     | 4              | `f32`     | `c2_x`  |\n| 16     | 4              | `f32`     | `c2_y`  |\n| 20     | 4              | `f32`     | `x`     |\n| 24     | 4              | `f32`     | `y`     |\n\n**Command** can be one of these values:\n\n- `:move-to`: `1`\n- `:line-to`: `2`\n- `:curve-to`: `3`\n- `:close-path`: `4`\n\n**Flags** is not being used at the moment.\n```\n\n----------------------------------------\n\nTITLE: Backend Logging Output Format in Bash\nDESCRIPTION: Example of the logging output format in backend logs file.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/common.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[<date time>] : <level> <namespace> - <key1=val1> <key2=val2> ...\n\n[2022-04-27 06:59:08.820] T app.rpc - action=\"register\", name=\"update-file\"\n```\n\n----------------------------------------\n\nTITLE: Serializing Justify Items Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for the justify-items CSS-like property (Start, End, Center, Stretch). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field   |\n| ----- | ------- |\n| 0     | Start   |\n| 1     | End     |\n| 2     | Center  |\n| 3     | Stretch |\n| \\_    | error   |\n```\n\n----------------------------------------\n\nTITLE: Serializing Shadow Styles as u8 Values\nDESCRIPTION: Defines the `u8` values for shadow styles (Drop Shadow, Inner Shadow). Any value not explicitly listed defaults to representing a Drop Shadow.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field        |\n| ----- | ------------ |\n| 0     | Drop Shadow  |\n| 1     | Inner Shadow |\n| \\_    | Drop Shadow  |\n```\n\n----------------------------------------\n\nTITLE: Updating Penpot\nDESCRIPTION: Commands for updating Penpot to the latest version\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/docker.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.yaml pull\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti <container-name-or-id> ./run.sh app.migrations.v2\n```\n\n----------------------------------------\n\nTITLE: Formatting User Mention Notification in Handlebars Template\nDESCRIPTION: A Handlebars/Mustache-style email template that formats a notification when a user is mentioned in a comment. The template includes the recipient's name (abbreviated to 25 characters), the user who mentioned them, the comment reference, content, and URL.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/comment-mention/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: Handlebars\nCODE:\n```\nHello {{name|abbreviate:25}}!\n\n{{ source-user }} has mentioned you on a comment at \"{{ comment-reference }}\".\n\n--\n\n{{ comment-content }}\n\n--\n\n{{ comment-url }}\n\nThe Penpot team.\n```\n\n----------------------------------------\n\nTITLE: Serializing Blur Types as u8 Values\nDESCRIPTION: Specifies the `u8` mapping for blur types. Currently, only Layer (1) is defined. Any value not explicitly listed defaults to representing no blur type (None).\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field |\n| ----- | ----- |\n| 1     | Layer |\n| \\_    | None  |\n```\n\n----------------------------------------\n\nTITLE: Penpot Password Reset Email Template with Variable Interpolation\nDESCRIPTION: This template displays a password reset email with variable interpolation. It includes the user's abbreviated name, a reset link with the application's public URI and a security token, and standard email footer content from the Penpot team.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/password-recovery/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nHello {{name|abbreviate:25}}!\n\nWe received a request to reset your password. Click the link below to choose a\nnew one:\n\n{{ public-uri }}/#/auth/recovery?token={{token}}\n\nIf you received this email by mistake, you can safely ignore it. Your password\nwon't be changed.\n\nEnjoy!\nThe Penpot team.\n```\n\n----------------------------------------\n\nTITLE: Serializing Flex Direction Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for the flex-direction CSS-like property (Row, RowReverse, Column, ColumnReverse). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field         |\n| ----- | ------------- |\n| 0     | Row           |\n| 1     | RowReverse    |\n| 2     | Column        |\n| 3     | ColumnReverse |\n| \\_    | error         |\n```\n\n----------------------------------------\n\nTITLE: Stopping Penpot\nDESCRIPTION: Command to stop running Penpot containers\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/getting-started/docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p penpot -f docker-compose.yaml down\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Change Confirmation Template in HTML\nDESCRIPTION: This snippet represents an HTML-based email template for confirming an email change request in Penpot. It uses placeholders for dynamic content such as the user's name, new email address, and a verification token.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/change-email/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nHello {{name|abbreviate:25}}!\n\nWe received a request to change your current email to {{ pending-email }}.\n\nClick to the link below to confirm the change:\n\n{{ public-uri }}/#/auth/verify-token?token={{token}}\n\nIf you received this email by mistake, please consider changing your password\nfor security reasons.\n\nEnjoy!\nThe Penpot team.\n```\n\n----------------------------------------\n\nTITLE: Serializing Grid Direction Layout Property as u8 Values\nDESCRIPTION: Defines `u8` values for grid direction layout property (Row, Column). Any value not explicitly listed indicates an error state.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field         |\n| ----- | ------------- |\n| 0     | Row           |\n| 1     | Column        |\n| \\_    | error         |\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Namespace in Clojure\nDESCRIPTION: Example of importing the icon namespace in a Clojure file to access predefined icon IDs, which is the recommended approach rather than typing icon IDs manually.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/assets/icon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.assets.icon :as i]))\n```\n\n----------------------------------------\n\nTITLE: Serializing Stroke Styles as u8 Values\nDESCRIPTION: Specifies the `u8` mapping for stroke styles (Dotted, Dashed, Mixed). Any value not explicitly listed defaults to representing a Solid stroke.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field  |\n| ----- | ------ |\n| 1     | Dotted |\n| 2     | Dashed |\n| 3     | Mixed  |\n| \\_    | Solid  |\n```\n\n----------------------------------------\n\nTITLE: Viewing Logs for Specific Penpot Service\nDESCRIPTION: Shows how to view logs for just the frontend service. This is useful when there's too much information from all services and you need to focus on a specific component.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p penpot -f docker-compose.yaml logs penpot-frontend -f\n```\n\n----------------------------------------\n\nTITLE: Generating Color Mask Files using ppmcolormask\nDESCRIPTION: This snippet creates mask files for specific colors from a PPM image using Netpbm’s ppmcolormask. These masks are used for further processing to isolate colors. It requires Netpbm to be installed.\nSOURCE: https://github.com/penpot/penpot/blob/develop/tracebitmap.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nppmcolormask \"#184d47\" download.ppm > download-mask1.pbm\nppmcolormask \"#66462C\" download.ppm > download-mask2.pbm\n```\n\n----------------------------------------\n\nTITLE: Template Variables for User and File Information\nDESCRIPTION: Template variables used to display user and file information in the sharing request email. Includes abbreviation filters for name length control.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/request-file-access-yourpenpot-view/en.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{requested-by|abbreviate:25}}\n```\n\nLANGUAGE: html\nCODE:\n```\n{{requested-by-email}}\n```\n\nLANGUAGE: html\nCODE:\n```\n{{file-name|abbreviate:25}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Switcher with Icons in Clojure\nDESCRIPTION: Shows how to create a tab switcher with icons and labels, including content for each tab.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/layout/tab_switcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> tab_switcher*       \n    {:tabs [{ :label \"Code\"\n              :id \"tab-code\"\n              :icon i/fill-content\n              :content [:p Lorem Ipsum ]}\n            { :label \"Design\"\n              :id \"tab-design\"\n              :icon i/pentool\n              :content [:p Dolor sit amet ]}\n            { :label \"Menu\"\n              :id \"tab-menu\"\n              :icon i/mask\n              :content [:p Consectetur adipiscing elit ]} \n            ]}]\n```\n\n----------------------------------------\n\nTITLE: Serializing Vertical Constraints as u8 Values\nDESCRIPTION: Specifies the `u8` mapping for vertical layout constraints (Top, Bottom, TopBottom, Center, Scale). Any value not explicitly listed defaults to representing no constraint (None).\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field     |\n| ----- | --------- |\n| 0     | Top       |\n| 1     | Bottom    |\n| 2     | TopBottom |\n| 3     | Center    |\n| 4     | Scale     |\n| \\_    | None      |\n```\n\n----------------------------------------\n\nTITLE: Locating Elements by Title Attribute using Playwright in JavaScript\nDESCRIPTION: Uses Playwright's `page.byTitle` method to find elements based on their `title` attribute value. This is a lower priority semantic query.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\npage.byTitle\n```\n\n----------------------------------------\n\nTITLE: Tracing Bitmap to SVG using Potrace\nDESCRIPTION: The snippet converts a PBM mask file to SVG format using Potrace, resulting in vector graphics for specific colors. It requires Potrace to be installed.\nSOURCE: https://github.com/penpot/penpot/blob/develop/tracebitmap.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npotrace --flat -b svg download-mask1.pbm -o download1.svg\npotrace --flat -b svg download-mask2.pbm -o download2.svg\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Page Frontmatter in 11ty\nDESCRIPTION: YAML frontmatter configuration for a 404 error page, specifying the layout, permalink and collection exclusion.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/404.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: layouts/home.njk\npermalink: 404.html\neleventyExcludeFromCollections: true\n---\n```\n\n----------------------------------------\n\nTITLE: Applying Typography ID to Text Component in ClojureScript\nDESCRIPTION: This snippet demonstrates using the `text*` component to render text. It applies a predefined typography style (`t/title-large`) using the alias `t` defined in the required namespace and specifies that the text element should be rendered as a paragraph (`<p>`) tag using the `:as` keyword argument. This is presented as the recommended way to use typography IDs.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/typography/text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n[:> text* {:typography t/title-large :as \"p\"} \"Welcome to Penpot\"]\n```\n\n----------------------------------------\n\nTITLE: Creating View-Only Link in Penpot Email Template (HTML)\nDESCRIPTION: This snippet demonstrates how to generate a view-only link for file access in the Penpot email template. It includes template variables for the public URI, file ID, page ID, and sharing options.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/request-file-access/en.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{ public-uri }}/#/view?file-id={{file-id}}&page-id={{page-id}}&section=interactions&index=0&share=true\n```\n\n----------------------------------------\n\nTITLE: Converting PNG to PPM using ImageMagick\nDESCRIPTION: The snippet converts a PNG image to PPM format, necessary for further color processing. It requires ImageMagick to be installed.\nSOURCE: https://github.com/penpot/penpot/blob/develop/tracebitmap.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconvert download.png download.ppm\n```\n\n----------------------------------------\n\nTITLE: Nunjucks Comment Block with Documentation Links\nDESCRIPTION: Comment block containing references to documentation for implementing 404 pages on GitHub Pages and Netlify platforms.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/404.md#2025-04-22_snippet_2\n\nLANGUAGE: nunjucks\nCODE:\n```\n{% comment %}\nRead more: https://www.11ty.dev/docs/quicktips/not-found/\n\nThis will work for both GitHub pages and Netlify:\n\n* https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/\n* https://www.netlify.com/docs/redirects/#custom-404\n{% endcomment %}\n```\n\n----------------------------------------\n\nTITLE: Installing Penpot Plugin Types via NPM\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@penpot/plugin-types` package into the current project. This package is essential for TypeScript development with the Penpot Plugin API as it provides the required type definitions.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnpm install @penpot/plugin-types\n```\n\n----------------------------------------\n\nTITLE: Event Listener Registration - Previous Implementation\nDESCRIPTION: Shows the deprecated method of registering and removing event listeners using direct callback reference.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/beta-changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npenpot.on('pagechange', myListener); // Register an event listener\npenpot.off('pagechange', myListener); // Remove previously registered listener\n```\n\n----------------------------------------\n\nTITLE: Network Request Mocking in POM\nDESCRIPTION: Example of mocking network requests within a Page Object Model\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/frontend.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass LoginPage {\n  // ...\n  async setupLoginSuccess() {\n    await this.mockRPC(\n      \"login-with-password\",\n      \"logged-in-user/login-with-password-success.json\"\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Example\nDESCRIPTION: Example showing the required format for signing off on commits using the -s parameter with git commit\nSOURCE: https://github.com/penpot/penpot/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nSigned-off-by: Andrey Antukh <niwi@niwi.nz>\n```\n\n----------------------------------------\n\nTITLE: Shell Script Variable Declarations\nDESCRIPTION: A comprehensive list of shell script variables including positional parameters ($0-$9), alphabetical variables ($A-$Z, $w-$z), and the process ID variable ($$). These variables are commonly used in shell scripting for parameter handling and script operations.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/externs/main.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$w\n$x\n$y\n$z\n$A\n$B\n$C\n$D\n$E\n$F\n$G\n$H\n$I\n$J\n$K\n$L\n$M\n$N\n$O\n$P\n$Q\n$R\n$S\n$T\n$U\n$V\n$W\n$X\n$Y\n$Z\n$$\n$0\n$1\n$2\n$3\n$4\n$5\n$6\n$7\n$8\n$9\n```\n\n----------------------------------------\n\nTITLE: Reporting Security Vulnerabilities in Penpot\nDESCRIPTION: This snippet provides the email address for reporting security vulnerabilities in the Penpot project. Users are instructed to send their reports to the specified support email.\nSOURCE: https://github.com/penpot/penpot/blob/develop/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nPlease report security issues to `support@penpot.app`\n```\n\n----------------------------------------\n\nTITLE: Running the Exporter NodeJS Bundle - Bash\nDESCRIPTION: This command executes the NodeJS bundle generated for the Penpot exporter inside the appropriate tmux session slice. It expects that the build process (typically using shadow-cljs) has produced 'target/app.js'. Running this command starts the exporter logic on the server side, which is not launched automatically with the rest of the environment. Node.js must be available in the environment.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/devenv.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode target/app.js\n```\n\n----------------------------------------\n\nTITLE: Template Variables for User Access Request Email\nDESCRIPTION: Template markup used to display user information and file details in an access request email. Includes variables for requester name, email, filename, and file sharing URL parameters.\nSOURCE: https://github.com/penpot/penpot/blob/develop/backend/resources/app/email/request-file-access-yourpenpot/en.txt#2025-04-22_snippet_0\n\nLANGUAGE: template\nCODE:\n```\n{{requested-by|abbreviate:25}} ({{requested-by-email}})\n```\n\nLANGUAGE: template\nCODE:\n```\n{{file-name|abbreviate:25}}\n```\n\nLANGUAGE: template\nCODE:\n```\n{{ public-uri }}/#/view?file-id={{file-id}}&page-id={{page-id}}&section=interactions&index=0&share=true\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Plugin Manager Access in Penpot - JavaScript\nDESCRIPTION: This snippet specifies the keyboard combination (Ctrl + Alt + P) for opening the Plugin Manager modal in Penpot, enabling quick manual installation of locally served plugins. There are no technical dependencies; this is used to document user interaction for plugin management workflows.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/plugins/create-a-plugin.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nCtrl + Alt + P\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Assets in ClojureScript Namespace\nDESCRIPTION: Shows how to import the SVG assets module into a ClojureScript namespace for use in a component. This is the first step for accessing the predefined SVG assets.\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/src/app/main/ui/ds/foundations/assets/raw_svg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(ns app.main.ui.foo\n  (:require\n   [app.main.ui.ds.foundations.assets.raw-svg :as svg]))\n```\n\n----------------------------------------\n\nTITLE: Starting Penpot Documentation Development Server\nDESCRIPTION: Launches the local development server for the Penpot documentation website using yarn.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Serializing Shape Types as u8 Values\nDESCRIPTION: Defines the `u8` values used to represent different shape types (Frame, Group, Bool, Rect, Path, Text, Circle, SvgRaw, Image) during serialization. Any value not explicitly listed defaults to representing a Rect.\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field  |\n| ----- | ------ |\n| 0     | Frame  |\n| 1     | Group  |\n| 2     | Bool   |\n| 3     | Rect   |\n| 4     | Path   |\n| 5     | Text   |\n| 6     | Circle |\n| 7     | SvgRaw |\n| 8     | Image  |\n| \\_    | Rect   |\n```\n\n----------------------------------------\n\nTITLE: Serializing Horizontal Constraints as u8 Values\nDESCRIPTION: Specifies the `u8` mapping for horizontal layout constraints (Left, Right, LeftRight, Center, Scale). Any value not explicitly listed defaults to representing no constraint (None).\nSOURCE: https://github.com/penpot/penpot/blob/develop/render-wasm/docs/serialization.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| Value | Field     |\n| ----- | --------- |\n| 0     | Left      |\n| 1     | Right     |\n| 2     | LeftRight |\n| 3     | Center    |\n| 4     | Scale     |\n| \\_    | None      |\n```\n\n----------------------------------------\n\nTITLE: Using Mailto Protocol with Anchor Tag\nDESCRIPTION: Specific example mentioned within the guideline for using `<a>` tags: employing the `mailto:` protocol to trigger email clients.\nSOURCE: https://github.com/penpot/penpot/blob/develop/docs/technical-guide/developer/ui.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\nmailto:\n```\n\n----------------------------------------\n\nTITLE: Shell Variable Reference Patterns\nDESCRIPTION: Common shell script variable reference patterns showing single letter variables (a-z, A-Z), numbers (0-9), and special characters ($).\nSOURCE: https://github.com/penpot/penpot/blob/develop/frontend/externs/worker.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$w\n$x\n$y\n$z\n$A\n$B\n$C\n$D\n$E\n$F\n$G\n$H\n$I\n$J\n$K\n$L\n$M\n$N\n$O\n$P\n$Q\n$R\n$S\n$T\n$U\n$V\n$W\n$X\n$Y\n$Z\n$$\n$0\n$1\n$2\n$3\n$4\n$5\n$6\n$7\n$8\n$9\n```"
  }
]