[
  {
    "owner": "open-telemetry",
    "repo": "opentelemetry-python",
    "content": "TITLE: Installing OpenTelemetry Semantic Conventions Package\nDESCRIPTION: Command to install the opentelemetry-semantic-conventions package using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/opentelemetry-semantic-conventions/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-semantic-conventions\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry API and SDK via pip\nDESCRIPTION: Commands to install the core OpenTelemetry Python packages from PyPI using pip. The API package provides abstract classes while the SDK package provides the reference implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/README.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-api\npip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Protobuf over gRPC Exporter for Python\nDESCRIPTION: Command to install the OpenTelemetry exporter library for Protobuf over gRPC using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-otlp-proto-grpc/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-otlp-proto-grpc\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Protobuf over HTTP Exporter in Python\nDESCRIPTION: Command to install the opentelemetry-exporter-otlp-proto-http package via pip. This package allows exporting telemetry data to the OpenTelemetry Collector using the OpenTelemetry Protocol with Protobuf over HTTP.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-otlp-proto-http/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-otlp-proto-http\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Collector Exporters via pip\nDESCRIPTION: Command to install the OpenTelemetry Collector Exporters package using pip package manager. This package includes both OTLP Proto gRPC and OTLP Proto HTTP exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-otlp/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Zipkin Exporter in Python\nDESCRIPTION: Command to install the OpenTelemetry Zipkin Exporter package using pip. This will install all supported exporter formats including JSON and Proto-HTTP variants.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-zipkin/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-zipkin\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Prometheus Exporter via pip\nDESCRIPTION: Command to install the OpenTelemetry Prometheus exporter package using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-prometheus/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-prometheus\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry OpenCensus Exporter via pip\nDESCRIPTION: Command to install the OpenTelemetry OpenCensus exporter Python package using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-opencensus/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-opencensus\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTracing Shim for OpenTelemetry using pip\nDESCRIPTION: This command installs the OpenTracing Shim for OpenTelemetry using pip. It allows users to integrate OpenTracing with OpenTelemetry in Python projects.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-opentracing-shim\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Protobuf Encoding Package with pip\nDESCRIPTION: Command to install the OpenTelemetry Protobuf Encoding library using pip package manager. This library serves as a common dependency for OTLP exporters that use Protobuf encoding.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-otlp-proto-common/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-otlp-proto-common\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Propagators\nDESCRIPTION: Command to install individual OpenTelemetry propagator packages, where {propagator} should be replaced with the specific propagator name.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/README.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-propagator-{propagator}\n```\n\n----------------------------------------\n\nTITLE: Installing Development Versions with Editable Install\nDESCRIPTION: Commands to install development versions of OpenTelemetry packages using pip's editable install feature. This is useful for contributors working with a local repository clone.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/README.md#2025-04-07_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -e ./opentelemetry-api -e ./opentelemetry-sdk -e ./opentelemetry-semantic-conventions\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python Dependencies\nDESCRIPTION: Commands to install the required OpenTelemetry Python packages including the API and SDK via pip.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/basic_tracer/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install opentelemetry-api\npip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Send Method with OpenTelemetry Span Context Injection\nDESCRIPTION: Implementation of a client's send method that creates a new active span, sets it as an RPC client span, and injects the span context into a message using TEXT_MAP format before sending it to a queue.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_client_server/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef send(self):\n    with self.tracer.start_active_span(\"send\") as scope:\n        scope.span.set_tag(tags.SPAN_KIND, tags.SPAN_KIND_RPC_CLIENT)\n\n        message = {}\n        self.tracer.inject(scope.span.context,\n                   opentracing.Format.TEXT_MAP,\n                   message)\n        self.queue.put(message)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python Packages\nDESCRIPTION: Commands to install the required OpenTelemetry packages for the context propagation examples. These include the API and SDK packages which are necessary for tracing functionality.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/basic_context/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install opentelemetry-api\npip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry and OpenCensus Exporter Packages\nDESCRIPTION: This code snippet shows how to install the required Python packages for using OpenTelemetry with the OpenCensus Exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-exporter-tracer/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install opentelemetry-api\npip install opentelemetry-sdk\npip install opentelemetry-exporter-opencensus\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Django Instrumentation Dependencies\nDESCRIPTION: Commands to install the required packages for OpenTelemetry Django instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install opentelemetry-sdk\n$ pip install opentelemetry-instrumentation-django\n$ pip install requests\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for OpenCensus Shim Example\nDESCRIPTION: This command installs the required Python packages for the OpenCensus shim example using pip and a requirements.txt file.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-shim/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Python Packages for OpenCensus Shim Example\nDESCRIPTION: This command installs the required Python packages individually for the OpenCensus shim example, including OpenTelemetry, OpenCensus, and Flask dependencies.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-shim/README.rst#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install \\\n    opentelemetry-api \\\n    opentelemetry-sdk \\\n    opentelemetry-exporter-otlp \\\n    opentelemetry-opencensus-shim \\\n    opentelemetry-instrumentation-sqlite3 \\\n    opencensus \\\n    opencensus-ext-flask \\\n    Flask\n```\n\n----------------------------------------\n\nTITLE: Managing Active Spans in Asynchronous Tasks with OpenTelemetry Python\nDESCRIPTION: This code snippet demonstrates how to create, activate, and manage spans in an asynchronous task using OpenTelemetry Python. It shows the creation of a main task span, activation of a previously created span, and creation of a subtask span. The example utilizes the tracer and scope manager for span operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_active_span_replacement/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Create a new Span for this task\nwith self.tracer.start_active_span(\"task\"):\n\n    with self.tracer.scope_manager.activate(span, True):\n           # Simulate work strictly related to the initial Span\n           pass\n\n    # Use the task span as parent of a new subtask\n    with self.tracer.start_active_span(\"subtask\"):\n           pass\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python Dependencies\nDESCRIPTION: Installs required dependencies for the OpenTelemetry Python project using pip package manager from the requirements.txt file.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/fork-process-model/flask-gunicorn/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install -rrequirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application with uWSGI Server\nDESCRIPTION: Command to start the Flask application using uWSGI server on port 8000. The command specifies the application file, callable object, and enables threading with a master process.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/fork-process-model/flask-uwsgi/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nuwsgi --http :8000 --wsgi-file app.py --callable application --master --enable-threads\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Python Application with Gunicorn\nDESCRIPTION: Launches the Python application using Gunicorn web server with configuration specified in gunicorn.conf.py.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/fork-process-model/flask-gunicorn/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngunicorn app -c gunicorn.conf.py\n```\n\n----------------------------------------\n\nTITLE: Implementing uWSGI postfork Decorator for OpenTelemetry Tracing\nDESCRIPTION: This snippet shows how to use the uWSGI postfork decorator to initialize OpenTelemetry tracing after forking. It sets up a TracerProvider with a custom resource, creates a BatchSpanProcessor with an OTLPSpanExporter, and configures the global tracer provider.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/fork-process-model/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom uwsgidecorators import postfork\n\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\n\n@postfork\ndef init_tracing():\n    resource = Resource.create(attributes={\n        \"service.name\": \"api-service\"\n    })\n\n    trace.set_tracer_provider(TracerProvider(resource=resource))\n    span_processor = BatchSpanProcessor(\n        OTLPSpanExporter(endpoint=\"http://localhost:4317\")\n    )\n    trace.get_tracer_provider().add_span_processor(span_processor)\n```\n\n----------------------------------------\n\nTITLE: Running Django App with OpenTelemetry Instrumentation\nDESCRIPTION: Command to run the Django application with the --noreload flag to prevent Django from running main twice.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py runserver --noreload\n```\n\n----------------------------------------\n\nTITLE: Running Django with Auto Instrumentation\nDESCRIPTION: Command to run Django with the auto instrumentation agent, which requires no code changes in the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nopentelemetry-instrument python manage.py runserver --noreload\n```\n\n----------------------------------------\n\nTITLE: Running Django with uWSGI and OpenTelemetry Auto Instrumentation\nDESCRIPTION: Command to run the Django application with uWSGI server using OpenTelemetry auto instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nopentelemetry-instrument uwsgi --http :8000 --module instrumentation_example.wsgi\n```\n\n----------------------------------------\n\nTITLE: Running the Client for Django App\nDESCRIPTION: Commands to activate the virtual environment and run the client with a parameter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource django_auto_instrumentation/bin/activate\npython client.py hello\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application with OpenCensus Shim\nDESCRIPTION: This command starts the Flask application that demonstrates the OpenCensus shim functionality. It runs the app on all network interfaces (0.0.0.0).\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-shim/README.rst#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nflask --app app run -h 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request to Flask Application\nDESCRIPTION: This command sends an HTTP GET request to the Flask application running on the local machine, triggering the instrumented code path.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-shim/README.rst#2025-04-07_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:5000\n```\n\n----------------------------------------\n\nTITLE: Propagating Spans in Asyncio Tasks with OpenTelemetry Python\nDESCRIPTION: This snippet shows how Spans are automatically propagated in asyncio tasks. The parent task starts an active Span, and the child task can start its own Span without explicitly receiving or activating the parent Span.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_subtask_span_propagation/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def parent_task(self, message):  # noqa\n    with self.tracer.start_active_span(\"parent\"):\n        res = await self.child_task(message)\n\n    return res\n\nasync def child_task(self, message):\n    # No need to pass/activate the parent Span, as it stays in the context.\n    with self.tracer.start_active_span(\"child\"):\n        return \"%s::response\" % message\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector and Jaeger with Docker Compose\nDESCRIPTION: This snippet demonstrates how to set up and run the OpenTelemetry collector and Jaeger using Docker Compose. It assumes the Docker Compose configuration is located in a 'docker' subdirectory.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-exporter-tracer/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install docker-compose\ncd docker\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Executing the OpenCensus Exporter Example Script\nDESCRIPTION: This command runs the Python script 'collector.py' which contains the OpenCensus Exporter example code for exporting traces to the OpenTelemetry collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-exporter-tracer/README.rst#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython collector.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Callbacks with Threading in OpenTelemetry Python\nDESCRIPTION: Shows how to manually activate a span across nested callback functions using threading. Each nested task explicitly activates the parent span using a context manager to ensure proper tracing context.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_nested_callbacks/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef submit(self):\n    span = self.tracer.scope_manager.active.span\n\n    def task1():\n        with self.tracer.scope_manager.activate(span, False):\n            span.set_tag(\"key1\", \"1\")\n\n            def task2():\n                with self.tracer.scope_manager.activate(span, False):\n                    span.set_tag(\"key2\", \"2\")\n                    ...\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Example\nDESCRIPTION: Command to execute an OpenTelemetry example Python script, where the output will be displayed in the console.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/basic_tracer/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython <example_name>.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Context Examples\nDESCRIPTION: Command to run any of the context propagation examples. Replace <example_name> with one of: implicit_context, child_context, or async_context to run the specific example.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/basic_context/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython <example_name>.py\n```\n\n----------------------------------------\n\nTITLE: Executing Python Example for OpenTelemetry Metrics\nDESCRIPTION: This command runs a Python script that presumably generates metrics to be collected by the OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/instruments/README.rst#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ python example.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector Docker Container\nDESCRIPTION: Docker command to run the OpenTelemetry Collector with mounted configuration file and exposed ports.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/logs/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n    -p 4317:4317 \\\n    -v $(pwd)/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml \\\n    otel/opentelemetry-collector-contrib:latest\n```\n\n----------------------------------------\n\nTITLE: Setting up a Virtual Environment for Django OpenTelemetry Instrumentation\nDESCRIPTION: Commands to create and activate a virtual environment for Django auto-instrumentation example.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir django_auto_instrumentation\n$ virtualenv django_auto_instrumentation\n$ source django_auto_instrumentation/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Django Environment Variable\nDESCRIPTION: Command to set the Django settings module environment variable required for running the app.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DJANGO_SETTINGS_MODULE=instrumentation_example.settings\n```\n\n----------------------------------------\n\nTITLE: Installing uWSGI for Django and OpenTelemetry Integration\nDESCRIPTION: Command to install uWSGI in the virtual environment for serving the Django application.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install uwsgi\n```\n\n----------------------------------------\n\nTITLE: Starting Jaeger Container for OpenTelemetry Tracing\nDESCRIPTION: This command starts a Jaeger all-in-one container for collecting and visualizing OpenTelemetry traces. It exposes ports for OTLP (4317, 4318) and the Jaeger UI (16686).\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-shim/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm \\\n    -p 4317:4317 \\\n    -p 4318:4318 \\\n    -p 16686:16686 \\\n    jaegertracing/all-in-one:latest \\\n    --log-level=debug\n```\n\n----------------------------------------\n\nTITLE: Using GlobalErrorHandler Context Manager\nDESCRIPTION: Example of using GlobalErrorHandler as a context manager to handle specific exceptions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/error_handler/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith GlobalErrorHandler():\n    {1: 2}[2]\n```\n\n----------------------------------------\n\nTITLE: Installing Tox for Python Development\nDESCRIPTION: Command to install tox, a tool used to automate testing against multiple Python versions and other development tasks in the OpenTelemetry Python project.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install tox\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable to Specify Contrib Repo Commit\nDESCRIPTION: Command that demonstrates how to set an environment variable to install packages from a specific git commit hash in the OpenTelemetry Python Contrib Repository when running tox.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nCONTRIB_REPO_SHA=dde62cebffe519c35875af6d06fae053b3be65ec tox\n```\n\n----------------------------------------\n\nTITLE: Implementing RequestHandler with Span in OpenTelemetry Python\nDESCRIPTION: This code snippet demonstrates the before_request method of a RequestHandler implementation. It starts a new Span for each request, optionally ignoring the active Span and using a passed SpanContext as the parent.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_common_request_handler/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef before_request(self, request, request_context):\n\n    # If we should ignore the active Span, use any passed SpanContext\n    # as the parent. Else, use the active one.\n    span = self.tracer.start_span(\"send\",\n                                  child_of=self.context,\n                                  ignore_active_span=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-Commit Hooks for Development\nDESCRIPTION: Commands to set up pre-commit hooks that will automatically run ruff linter and formatter before each commit, ensuring code quality standards are maintained.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npip install pre-commit -c dev-requirements.txt\n```\n\nLANGUAGE: console\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with uv\nDESCRIPTION: Command to create and set up a virtual environment in the .venv directory using uv, installing all necessary dependencies for local development.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Callbacks with Asyncio in OpenTelemetry Python\nDESCRIPTION: Demonstrates asynchronous nested callbacks using asyncio where the Context automatically propagates the active span. Creates separate tasks for each nested callback while maintaining span context.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_nested_callbacks/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def task1():\n    span.set_tag(\"key1\", \"1\")\n\n    async def task2():\n        span.set_tag(\"key2\", \"2\")\n\n        async def task3():\n            span.set_tag(\"key3\", \"3\")\n            span.finish()\n\n        self.loop.create_task(task3())\n\n    self.loop.create_task(task2())\n\nself.loop.create_task(task1())\n```\n\n----------------------------------------\n\nTITLE: Installing Tox for Testing\nDESCRIPTION: Command to install tox, which is used for running tests across multiple Python environments.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npip install tox\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox\nDESCRIPTION: Command to run the test suite using tox, which validates your changes across all supported Python versions and environments.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector in YAML\nDESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector with OTLP receiver, debug exporter, and batch processor for metrics pipeline.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/instruments/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# otel-collector-config.yaml\nreceivers:\n    otlp:\n        protocols:\n            grpc:\n                endpoint: 0.0.0.0:4317\n\nexporters:\n    debug:\n\nprocessors:\n    batch:\n\nservice:\n    pipelines:\n        metrics:\n            receivers: [otlp]\n            exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch\nDESCRIPTION: Git command to create and checkout a new branch for your feature or fix.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ngit checkout -b feature\n```\n\n----------------------------------------\n\nTITLE: Staging Changes for Commit\nDESCRIPTION: Git command to stage all changes in the current directory for the next commit.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Propagating Spans in Threading Tasks with OpenTelemetry Python\nDESCRIPTION: This snippet demonstrates how to manually propagate and activate Spans in threading tasks. The parent task starts an active Span and passes it to the child task, which then activates it before starting its own Span.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_subtask_span_propagation/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef parent_task(self, message):\n    with self.tracer.start_active_span(\"parent\") as scope:\n        f = self.executor.submit(self.child_task, message, scope.span)\n        res = f.result()\n\n    return res\n\ndef child_task(self, message, span):\n    with self.tracer.scope_manager.activate(span, False):\n        with self.tracer.start_active_span(\"child\"):\n            return \"%s::response\" % message\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes\nDESCRIPTION: Git commands to commit your changes and push them to your fork, preparing for pull request submission.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ngit commit\ngit push fork feature\n```\n\n----------------------------------------\n\nTITLE: Adding Fork as Remote Origin\nDESCRIPTION: Command to add your GitHub fork as a remote origin to push changes for pull requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ngit remote add fork https://github.com/YOUR_GITHUB_USERNAME/opentelemetry-python.git\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Collected OpenTelemetry Metrics\nDESCRIPTION: This snippet shows the expected output format of metrics collected by the OpenTelemetry Collector, including counter, updown_counter, and histogram metrics with their respective attributes and values.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/instruments/README.rst#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nScopeMetrics #0\nScopeMetrics SchemaURL:\nInstrumentationScope getting-started 0.1.2\nMetric #0\nDescriptor:\n     -> Name: counter\n     -> Description:\n     -> Unit:\n     -> DataType: Sum\n     -> IsMonotonic: true\n     -> AggregationTemporality: Cumulative\nNumberDataPoints #0\nStartTimestamp: 2024-08-09 11:21:42.145179 +0000 UTC\nTimestamp: 2024-08-09 11:21:42.145325 +0000 UTC\nValue: 1\nMetric #1\nDescriptor:\n     -> Name: updown_counter\n     -> Description:\n     -> Unit:\n     -> DataType: Sum\n     -> IsMonotonic: false\n     -> AggregationTemporality: Cumulative\nNumberDataPoints #0\nStartTimestamp: 2024-08-09 11:21:42.145202 +0000 UTC\nTimestamp: 2024-08-09 11:21:42.145325 +0000 UTC\nValue: -4\nMetric #2\nDescriptor:\n     -> Name: histogram\n     -> Description:\n     -> Unit:\n     -> DataType: Histogram\n     -> AggregationTemporality: Cumulative\nHistogramDataPoints #0\nStartTimestamp: 2024-08-09 11:21:42.145221 +0000 UTC\nTimestamp: 2024-08-09 11:21:42.145325 +0000 UTC\nCount: 1\n```\n\n----------------------------------------\n\nTITLE: Moving Git Stable Tag Commands\nDESCRIPTION: Shell commands for updating the stable git tag after a release. These commands remove the existing stable tag locally and remotely, then create and push a new stable tag.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/RELEASING.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -d stable\ngit tag stable\ngit push --delete origin stable\ngit push origin tag stable\n```\n\n----------------------------------------\n\nTITLE: PyPI Manual Publishing Commands\nDESCRIPTION: Commands for manually publishing packages to PyPI when automated publish action fails. Includes building distributions and uploading to PyPI using twine.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/RELEASING.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build.sh\ntwine upload --skip-existing --verbose dist/*\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Server Communication with OpenTelemetry Spans in Python\nDESCRIPTION: This snippet demonstrates a pattern for tracking request-response operations with OpenTelemetry spans. It shows a method that processes a message and triggers a listener's response handler, and another method that creates a span when sending a message, attaches it to a ResponseListener, and submits the task for execution.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_listener_per_request/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef _task(self, message, listener):\n    res = \"%s::response\" % message\n    listener.on_response(res)\n    return res\n\ndef send_sync(self, message):\n    span = self.tracer.start_span(\"send\")\n    span.set_tag(tags.SPAN_KIND, tags.SPAN_KIND_RPC_CLIENT)\n\n    listener = ResponseListener(span)\n    return self.executor.submit(self._task, message, listener).result()\n```\n\n----------------------------------------\n\nTITLE: Implementing Gunicorn post_fork Hook for OpenTelemetry Tracing\nDESCRIPTION: This snippet demonstrates how to set up OpenTelemetry tracing using a Gunicorn post_fork hook. It creates a TracerProvider with a custom resource, adds a BatchSpanProcessor with an OTLPSpanExporter, and sets the global tracer provider.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/fork-process-model/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\n\ndef post_fork(server, worker):\n    server.log.info(\"Worker spawned (pid: %s)\", worker.pid)\n\n    resource = Resource.create(attributes={\n        \"service.name\": \"api-service\"\n    })\n\n    trace.set_tracer_provider(TracerProvider(resource=resource))\n    span_processor = BatchSpanProcessor(\n        OTLPSpanExporter(endpoint=\"http://localhost:4317\")\n    )\n    trace.get_tracer_provider().add_span_processor(span_processor)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for OpenTelemetry Project\nDESCRIPTION: This snippet lists the required Python packages and their specific versions for an OpenTelemetry project. It includes web framework dependencies, OpenTelemetry SDK and instrumentation packages, and other utility libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/fork-process-model/flask-uwsgi/requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nclick==8.1.7\nFlask==2.3.3\ngoogleapis-common-protos==1.52.0\ngrpcio==1.56.2\nitsdangerous==2.1.2\nJinja2==3.1.6\nMarkupSafe==2.1.3\nopentelemetry-api==1.20.0\nopentelemetry-exporter-otlp==1.20.0\nopentelemetry-instrumentation==0.41b0\nopentelemetry-instrumentation-flask==0.41b0\nopentelemetry-instrumentation-wsgi==0.41b0\nopentelemetry-sdk==1.20.0\nprotobuf==3.20.3\nsix==1.15.0\nthrift==0.13.0\nuWSGI==2.0.22\nWerkzeug==3.0.6\nwrapt==1.16.0\n```\n\n----------------------------------------\n\nTITLE: Submitting Asynchronous Subtasks with Parent Span in OpenTelemetry Python\nDESCRIPTION: This function submits multiple asynchronous subtasks to an executor, passing a parent Span with an independent lifetime. Each subtask activates the parent Span without finishing it, then creates its own active Span for the duration of the task.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_late_span_finish/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Fire away a few subtasks, passing a parent Span whose lifetime\n# is not tied at all to the children.\ndef submit_subtasks(self, parent_span):\n    def task(name, interval):\n        with self.tracer.scope_manager.activate(parent_span, False):\n            with self.tracer.start_active_span(name):\n                time.sleep(interval)\n\n    self.executor.submit(task, \"task1\", 0.1)\n    self.executor.submit(task, \"task2\", 0.3)\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies for OpenTelemetry Flask Application\nDESCRIPTION: A comprehensive requirements.txt file listing all required Python packages and their specific versions. The file includes web framework (Flask), OpenTelemetry libraries for instrumentation and exporting telemetry data, HTTP servers (gunicorn and uWSGI), and various supporting libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/fork-process-model/flask-gunicorn/requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nclick==8.1.7\nFlask==2.3.3\ngoogleapis-common-protos==1.52.0\ngrpcio==1.56.2\ngunicorn==22.0.0\nitsdangerous==2.1.2\nJinja2==3.1.5\nMarkupSafe==2.1.3\nopentelemetry-api==1.20.0\nopentelemetry-exporter-otlp==1.20.0\nopentelemetry-instrumentation==0.41b0\nopentelemetry-instrumentation-flask==0.41b0\nopentelemetry-instrumentation-wsgi==0.41b0\nopentelemetry-sdk==1.20.0\nprotobuf==3.20.3\nsix==1.15.0\nthrift==0.13.0\nuWSGI==2.0.22\nWerkzeug==3.0.6\nwrapt==1.16.0\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenTelemetry Python Prometheus Exporter Dependencies\nDESCRIPTION: Defines the required dependencies for the OpenTelemetry Python Prometheus exporter. It specifies the exact version of the exporter package and a compatible version range for the protobuf library.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/prometheus-grafana/requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nopentelemetry-exporter-prometheus==1.12.0rc1\nprotobuf~=3.18.1\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for OpenTelemetry\nDESCRIPTION: This requirements file lists Python packages needed for an OpenTelemetry implementation, including the core API and SDK packages along with supporting libraries. Each package is pinned to specific versions for compatibility and stability.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/views/requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDeprecated==1.2.13\nopentelemetry-api==1.12.0\nopentelemetry-sdk==1.12.0\nopentelemetry-semantic-conventions==0.33b0\ntyping_extensions==4.3.0\nwrapt==1.14.1\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Python Package Dependencies\nDESCRIPTION: List of required Python packages for implementing OpenTelemetry with Flask and SQLite3 instrumentation. Includes core OpenTelemetry packages, exporters, instrumentation libraries, and OpenCensus compatibility components.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opencensus-shim/requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nopentelemetry-api\nopentelemetry-sdk\nopentelemetry-exporter-otlp\nopentelemetry-opencensus-shim\nopentelemetry-instrumentation-sqlite3\nopencensus\nopencensus-ext-flask\nFlask\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handler\nDESCRIPTION: Example implementation of a custom error handler class that handles ZeroDivisionError exceptions.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/error_handler/README.rst#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.sdk.error_handler import ErrorHandler\nfrom logging import getLogger\n\nlogger = getLogger(__name__)\n\n\nclass ErrorHandler0(ErrorHandler, ZeroDivisionError):\n\n    def handle(self, error: Exception, *args, **kwargs):\n\n        logger.exception(\"ErrorHandler0 handling a ZeroDivisionError\")\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Comprehensive list of Python package dependencies with pinned versions for development tools, testing frameworks, documentation generators, and utility libraries. Includes conditional dependencies based on Python version for pre-commit.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/dev-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npylint==3.3.4\nhttpretty==1.1.4\npyright==1.1.396\nmypy==1.9.0\nsphinx==7.1.2\nsphinx-rtd-theme==2.0.0rc4\nsphinx-autodoc-typehints==1.25.2\npytest==7.4.4\npytest-cov==4.1.0\nreadme-renderer==42.0\nmarkupsafe==2.1.3\nbleach==4.1.0 # This dependency was updated to a breaking version.\ncodespell==2.1.0\nrequests==2.32.3\nruamel.yaml==0.17.21\nasgiref==3.7.2\npsutil==5.9.6\nGitPython==3.1.41\npre-commit==3.7.0; python_version >= '3.9'\npre-commit==3.5.0; python_version < '3.9'\nruff==0.6.9\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for OpenTelemetry Project\nDESCRIPTION: This snippet lists the external Python package dependencies with their specific versions, as well as local package references for various OpenTelemetry components. It includes core dependencies like 'asgiref' and 'pytest', along with local references to OpenTelemetry API, SDK, exporters, and utilities.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-otlp/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e tests/opentelemetry-test-utils\n-e exporter/opentelemetry-exporter-otlp-proto-common\n-e exporter/opentelemetry-exporter-otlp-proto-grpc\n-e exporter/opentelemetry-exporter-otlp-proto-http\n-e opentelemetry-proto\n-e opentelemetry-sdk\n-e opentelemetry-semantic-conventions\n-e exporter/opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector YAML\nDESCRIPTION: YAML configuration file for setting up OpenTelemetry Collector with OTLP receiver and debug exporter. Defines pipelines for both logs and traces with batch processing.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/logs/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# otel-collector-config.yaml\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nexporters:\n  debug:\n    verbosity: detailed\n\nprocessors:\n  batch:\n\nservice:\n    pipelines:\n        logs:\n            receivers: [otlp]\n            processors: [batch]\n            exporters: [debug]\n        traces:\n            receivers: [otlp]\n            processors: [batch]\n            exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Python Requirements Configuration\nDESCRIPTION: Defines the exact versions of Python packages required for the OpenTelemetry Python project. Includes both external dependencies from PyPI and local development dependencies (-e flag for editable installs).\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-otlp-proto-common/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\nprotobuf==5.26.1\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e opentelemetry-sdk\n-e opentelemetry-semantic-conventions\n-e tests/opentelemetry-test-utils\n-e opentelemetry-proto\n-e exporter/opentelemetry-exporter-otlp-proto-common\n```\n\n----------------------------------------\n\nTITLE: Python Requirements List\nDESCRIPTION: Defines external and local package dependencies with their version constraints for the OpenTelemetry Python project. Includes both PyPI packages with fixed versions and local development references (-e flag) to OpenTelemetry components.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-otlp-proto-grpc/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\ngoogleapis-common-protos==1.63.2\ngrpcio==1.66.2\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\nprotobuf==5.26.1\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e tests/opentelemetry-test-utils\n-e exporter/opentelemetry-exporter-otlp-proto-common\n-e opentelemetry-proto\n-e opentelemetry-sdk\n-e opentelemetry-semantic-conventions\n-e exporter/opentelemetry-exporter-otlp-proto-grpc\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements\nDESCRIPTION: Specifies external package dependencies and their versions along with local OpenTelemetry package references. Includes core dependencies like protobuf and requests, testing packages like pytest, and local development references to OpenTelemetry components.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-zipkin-proto-http/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\ncertifi==2024.7.4\ncharset-normalizer==3.3.2\nDeprecated==1.2.14\nidna==3.7\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\nprotobuf==3.20.3\npy-cpuinfo==9.0.0\npytest==7.4.4\nrequests==2.32.3\ntomli==2.0.1\ntyping_extensions==4.10.0\nurllib3==2.2.2\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e exporter/opentelemetry-exporter-zipkin-json\n-e opentelemetry-sdk\n-e tests/opentelemetry-test-utils\n-e opentelemetry-semantic-conventions\n-e exporter/opentelemetry-exporter-zipkin-proto-http\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Python Requirements Configuration\nDESCRIPTION: Requirements file defining package dependencies with pinned versions for the OpenTelemetry Python project. Includes core dependencies like asgiref and prometheus_client, along with local development packages installed in editable mode (-e flag).\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-prometheus/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\nprometheus_client==0.20.0\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e opentelemetry-sdk\n-e tests/opentelemetry-test-utils\n-e opentelemetry-semantic-conventions\n-e exporter/opentelemetry-exporter-prometheus\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Callbacks with Threading in OpenTelemetry Python\nDESCRIPTION: This snippet demonstrates how to implement multiple callbacks using threading in OpenTelemetry Python. It creates a parent span and manages child spans for each callback, using a thread-safe counter to track pending callbacks and finish the parent span when all are complete.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_multiple_callbacks/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef task(self, interval, parent_span):\n    logger.info(\"Starting task\")\n\n    try:\n        scope = self.tracer.scope_manager.activate(parent_span, False)\n        with self.tracer.start_active_span(\"task\"):\n            time.sleep(interval)\n    finally:\n        scope.close()\n        if parent_span._ref_count.decr() == 0:\n            parent_span.finish()\n```\n\n----------------------------------------\n\nTITLE: Specifying pytest-benchmark Package Version for Testing\nDESCRIPTION: Declares a dependency on pytest-benchmark version 4.0.0, which is a pytest plugin for benchmarking code. This package enables performance testing and measuring execution time of code blocks within the OpenTelemetry Python project's test suite.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-otlp-proto-grpc/benchmark-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest-benchmark==4.0.0\n```\n\n----------------------------------------\n\nTITLE: LogRecord JSON Indentation Parameter\nDESCRIPTION: Code reference showing the addition of an indent parameter to LogRecord.to_json() method to control JSON formatting\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CHANGELOG.md#2025-04-07_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nLogRecord.to_json(indent=size)\n```\n\n----------------------------------------\n\nTITLE: Status Code Setting with Optional Description\nDESCRIPTION: Code reference showing the ability to set status with StatusCode and optional description\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CHANGELOG.md#2025-04-07_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nset_status(StatusCode, description=optional_description)\n```\n\n----------------------------------------\n\nTITLE: Metric Export Force Flush\nDESCRIPTION: Example of forcing metric export using the force_flush() method\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CHANGELOG.md#2025-04-07_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmetric_exporter.force_flush()\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector with Docker\nDESCRIPTION: This shell command runs the OpenTelemetry Collector in a Docker container, mapping the configuration file and exposing the necessary port.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/instruments/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n    -p 4317:4317 \\\n    -v $(pwd)/otel-collector-config.yaml:/etc/otel/config.yaml \\\n    otel/opentelemetry-collector-contrib:latest\n```\n\n----------------------------------------\n\nTITLE: Adding urllib to opentelemetry-bootstrap target list\nDESCRIPTION: This change adds urllib to the list of targets for the opentelemetry-bootstrap command.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CHANGELOG.md#2025-04-07_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, but this likely involves modifying a configuration file or Python script to include urllib in the bootstrap target list.\n```\n\n----------------------------------------\n\nTITLE: Setting multiple Span attributes in one call\nDESCRIPTION: Adds a new method Span.set_attributes() to set multiple attribute values with a single function call.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CHANGELOG.md#2025-04-07_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nspan.set_attributes({\"key1\": \"value1\", \"key2\": \"value2\"})\n```\n\n----------------------------------------\n\nTITLE: Updating OTLP exporter to use tuple for headers\nDESCRIPTION: Changes the OTLP exporter to pass headers as a tuple in metadata instead of a string, which was incorrect.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CHANGELOG.md#2025-04-07_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Before\nheaders = \"key1=value1,key2=value2\"\n\n# After\nheaders = ((\"key1\", \"value1\"), (\"key2\", \"value2\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Gzip compression support to exporter\nDESCRIPTION: Implements Gzip compression support for the OpenTelemetry exporter to reduce data transfer size.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CHANGELOG.md#2025-04-07_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# No specific code provided, but usage might look like:\nexporter = OTLPSpanExporter(compression=\"gzip\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python API via pip\nDESCRIPTION: Command to install the OpenTelemetry Python API package using pip package manager. This installs the core API components needed for instrumentation without any specific implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/opentelemetry-api/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-api\n```\n\n----------------------------------------\n\nTITLE: Implementing pickle support for SpanContext\nDESCRIPTION: Adds pickle serialization support to the SpanContext class for easier data persistence and transfer.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CHANGELOG.md#2025-04-07_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport pickle\n\nspan_context = SpanContext(...)\npickled_context = pickle.dumps(span_context)\nunpickled_context = pickle.loads(pickled_context)\n```\n\n----------------------------------------\n\nTITLE: Writing Python Benchmark Tests for OpenTelemetry\nDESCRIPTION: Example of how to write a benchmark test using pytest-benchmark. The test measures the performance of creating and ending a span with attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_simple_start_span(benchmark):\n    def benchmark_start_as_current_span(span_name, attribute_num):\n        span = tracer.start_span(\n            span_name,\n            attributes={\"count\": attribute_num},\n        )\n        span.end()\n\n    benchmark(benchmark_start_as_current_span, \"benchmarkedSpan\", 42)\n```\n\n----------------------------------------\n\nTITLE: Catching Warning Messages in Python Tests\nDESCRIPTION: Example showing how to catch expected warning messages in test cases to keep console output clean during test execution.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    def test_case(self):\n        with self.assertWarns(DeprecationWarning):\n            some_function_that_will_raise_a_deprecation_warning()\n```\n\n----------------------------------------\n\nTITLE: Catching Log Messages in Python Tests\nDESCRIPTION: Example showing how to catch expected log messages in test cases to keep console output clean. This uses assertLogs to validate warnings are properly logged.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom logging import WARNING\n\n...\n\n    def test_case(self):\n        with self.assertLogs(level=WARNING):\n            some_function_that_will_log_a_warning_message()\n```\n\n----------------------------------------\n\nTITLE: Sample OpenTelemetry Span Output from Django Instrumentation\nDESCRIPTION: Example JSON output showing a span automatically generated by the OpenTelemetry Django Instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/django/README.rst#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"home_page_view\",\n    \"context\": {\n        \"trace_id\": \"0xed88755c56d95d05a506f5f70e7849b9\",\n        \"span_id\": \"0x0a94c7a60e0650d5\",\n        \"trace_state\": \"{}\"\n    },\n    \"kind\": \"SpanKind.SERVER\",\n    \"parent_id\": \"0x3096ef92e621c22d\",\n    \"start_time\": \"2020-04-26T01:49:57.205833Z\",\n    \"end_time\": \"2020-04-26T01:49:57.206214Z\",\n    \"status\": {\n        \"status_code\": \"OK\"\n    },\n    \"attributes\": {\n        \"http.request.method\": \"GET\",\n        \"server.address\": \"localhost\",\n        \"url.scheme\": \"http\",\n        \"server.port\": 8000,\n        \"url.full\": \"http://localhost:8000/?param=hello\",\n        \"server.socket.address\": \"127.0.0.1\",\n        \"network.protocol.version\": \"1.1\",\n        \"http.response.status_code\": 200\n    },\n    \"events\": [],\n    \"links\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Sample OpenTelemetry Log Output\nDESCRIPTION: Example of formatted log output from the OpenTelemetry Collector showing resource attributes, instrumentation library details, and multiple log records with various severity levels and trace context.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/logs/README.rst#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nResource SchemaURL: \nResource labels:\n    -> telemetry.sdk.language: STRING(python)\n    -> telemetry.sdk.name: STRING(opentelemetry)\n    -> telemetry.sdk.version: STRING(1.8.0)\n    -> service.name: STRING(shoppingcart)\n    -> service.instance.id: STRING(instance-12)\nInstrumentationLibraryLogs #0\nInstrumentationLibraryMetrics SchemaURL: \nInstrumentationLibrary __main__ 0.1\nLogRecord #0\nTimestamp: 2022-01-13 20:37:03.998733056 +0000 UTC\nSeverity: WARNING\nShortName: \nBody: Jail zesty vixen who grabbed pay from quack.\nTrace ID: \nSpan ID: \nFlags: 0\nLogRecord #1\nTimestamp: 2022-01-13 20:37:04.082757888 +0000 UTC\nSeverity: ERROR\nShortName: \nBody: The five boxing wizards jump quickly.\nTrace ID: \nSpan ID: \nFlags: 0\nLogRecord #2\nTimestamp: 2022-01-13 20:37:04.082979072 +0000 UTC\nSeverity: ERROR\nShortName: \nBody: Hyderabad, we have a major problem.\nTrace ID: 63491217958f126f727622e41d4460f3\nSpan ID: d90c57d6e1ca4f6c\nFlags: 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Callbacks with Asyncio in OpenTelemetry Python\nDESCRIPTION: This snippet shows how to implement multiple callbacks using asyncio in OpenTelemetry Python. It creates a parent span and manages child spans for each asynchronous task, using asyncio.gather to wait for all tasks to complete before finishing the parent span.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/test_multiple_callbacks/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def task(self, interval, parent_span):\n    logger.info(\"Starting task\")\n\n    with self.tracer.start_active_span(\"task\"):\n        await asyncio.sleep(interval)\n\n# Invoke and yield over the corotuines.\nwith self.tracer.start_active_span(\"parent\"):\ntasks = self.submit_callbacks()\nawait asyncio.gather(*tasks)\n```\n\n----------------------------------------\n\nTITLE: Documenting OpenTelemetry Logs Severity Module in reStructuredText\nDESCRIPTION: ReStructuredText documentation header and automodule directive for generating documentation from the OpenTelemetry Python logging severity module.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/api/_logs.severity.rst#2025-04-07_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nopentelemetry._logs.severity\n============================\n\n.. automodule:: opentelemetry._logs.severity\n```\n\n----------------------------------------\n\nTITLE: Defining Subpackages in OpenTelemetry Python Baggage Package\nDESCRIPTION: This RST code snippet defines the subpackages of the opentelemetry.baggage package using a toctree directive. It includes the baggage.propagation subpackage.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/api/baggage.rst#2025-04-07_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   baggage.propagation\n```\n\n----------------------------------------\n\nTITLE: Documenting OpenTelemetry Python Baggage Module Contents\nDESCRIPTION: This RST code snippet uses the automodule directive to automatically generate documentation for the opentelemetry.baggage module contents.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/api/baggage.rst#2025-04-07_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: opentelemetry.baggage\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Python Metrics Example\nDESCRIPTION: This command executes a specific metrics example. Replace <example_name> with the name of the desired example file (e.g., change_aggregation.py, change_name.py, etc.). The output will be displayed in the console.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/views/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython <example_name>.py\n```\n\n----------------------------------------\n\nTITLE: Importing OpenTelemetry Context Module with Sphinx in ReStructuredText\nDESCRIPTION: Sphinx documentation directive that imports and documents the OpenTelemetry context module. The directive specifies that all members should be included in the documentation, along with undocumented members and inheritance information.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/api/context.context.rst#2025-04-07_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: opentelemetry.context.context\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents in reStructuredText\nDESCRIPTION: A reStructuredText table of contents directive that organizes the OpenTelemetry Python API documentation into logical sections. Each entry represents a separate documentation file covering a specific component of the OpenTelemetry API.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/api/index.rst#2025-04-07_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    _logs\n    baggage\n    context\n    propagate\n    propagators\n    trace\n    metrics\n    environment_variables\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for OpenTelemetry Python Exporters\nDESCRIPTION: This reStructuredText snippet configures a Sphinx toctree for OpenTelemetry Python exporter documentation. It sets the maximum depth to 1 and uses a glob pattern to include all files in the current directory.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/exporter/index.rst#2025-04-07_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :glob:\n\n    **\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for OpenCensus Exporter Module\nDESCRIPTION: Sphinx directive that generates API documentation for the OpenCensus exporter module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/exporter/opencensus/opencensus.rst#2025-04-07_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: opentelemetry.exporter.opencensus\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenTelemetry Python Metrics Examples\nDESCRIPTION: This command installs the required dependencies for running the OpenTelemetry Python metrics examples. It uses pip to install packages listed in the requirements.txt file.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/views/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Documenting OpenTelemetry Zipkin Exporters with reStructuredText\nDESCRIPTION: This reStructuredText code defines documentation directives for OpenTelemetry's Zipkin exporters. It uses Sphinx's automodule directive to generate API documentation from module docstrings for the base module, JSON exporter, and Protocol Buffers HTTP exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/exporter/zipkin/zipkin.rst#2025-04-07_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: opentelemetry.exporter.zipkin\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: opentelemetry.exporter.zipkin.json\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: opentelemetry.exporter.zipkin.proto.http\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for OpenTelemetry Python Examples\nDESCRIPTION: This ReStructuredText snippet sets up the documentation framework for OpenTelemetry Python examples. It uses the :orphan: directive to indicate this page is not included in the navigation, and creates a table of contents that includes all files in subdirectories via the glob pattern.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/index.rst#2025-04-07_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:orphan:\n\nExamples\n========\n\n.. toctree::\n    :maxdepth: 1\n    :glob:\n\n    **\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry and Error Handlers\nDESCRIPTION: Shell commands for setting up a virtual environment and installing OpenTelemetry SDK along with custom error handlers.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/error_handler/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir global_error_handler\n$ virtualenv global_error_handler\n$ source global_error_handler/bin/activate\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install opentelemetry-sdk\n$ git clone https://github.com/open-telemetry/opentelemetry-python.git\n$ pip install -e opentelemetry-python/docs/examples/error_handler/error_handler_0\n$ pip install -e opentelemetry-python/docs/examples/error_handler/error_handler_1\n```\n\n----------------------------------------\n\nTITLE: Documenting OpenTelemetry SDK Logs Package in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the opentelemetry.sdk._logs package. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/_logs.rst#2025-04-07_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: opentelemetry.sdk._logs\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for OpenTelemetry Error Handler\nDESCRIPTION: RST directive for automatically generating documentation from the OpenTelemetry SDK error handler module. Includes configuration to show all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/error_handler.rst#2025-04-07_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: opentelemetry.sdk.error_handler\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Starting Jaeger Container\nDESCRIPTION: Docker command to start Jaeger all-in-one container with exposed ports for tracing and UI access\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/opentracing/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm \\\n    -p 4317:4317 \\\n    -p 4318:4318 \\\n    -p 16686:16686 \\\n    jaegertracing/all-in-one:latest \\\n    --log-level=debug\n```\n\n----------------------------------------\n\nTITLE: Importing OpenTelemetry SDK Metrics Export Module in reStructuredText\nDESCRIPTION: A reStructuredText directive that imports and documents the opentelemetry.sdk.metrics.export module. The directive includes all members, undocumented members, and shows inheritance relationships for comprehensive API documentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/metrics.export.rst#2025-04-07_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: opentelemetry.sdk.metrics.export\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining OpenTelemetry SDK Metrics Package Structure in reStructuredText\nDESCRIPTION: This reStructuredText snippet defines the documentation structure for the OpenTelemetry SDK metrics package. It includes a title, submodules section with a table of contents for the export and view submodules, and an automodule directive to automatically generate documentation for the package.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/metrics.rst#2025-04-07_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nopentelemetry.sdk.metrics package\n==================================\n\nSubmodules\n----------\n\n.. toctree::\n\n   metrics.export\n   metrics.view\n\n.. automodule:: opentelemetry.sdk.metrics\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for OpenTelemetry SDK Resources in reStructuredText\nDESCRIPTION: This snippet uses Sphinx autodoc directives to automatically generate API documentation for the opentelemetry.sdk.resources package. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/resources.rst#2025-04-07_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: opentelemetry.sdk.resources\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting OpenTelemetry ID Generator Module in reStructuredText\nDESCRIPTION: Sphinx documentation directive that generates API documentation for the OpenTelemetry SDK trace ID generator module. Includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/trace.id_generator.rst#2025-04-07_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: opentelemetry.sdk.trace.id_generator\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Zipkin Protobuf Exporter\nDESCRIPTION: Command to install the OpenTelemetry Zipkin Protobuf exporter package using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-zipkin-proto-http/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-zipkin-proto-http\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry SDK Trace Module Import Declaration\nDESCRIPTION: ReStructuredText declaration for the OpenTelemetry SDK trace module documentation, specifying the module to be documented with member visibility settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/trace.rst#2025-04-07_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: opentelemetry.sdk.trace\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry SDK Trace Submodules Declaration\nDESCRIPTION: ReStructuredText toctree directive listing the trace-related submodules included in the documentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/trace.rst#2025-04-07_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   trace.export\n   trace.id_generator\n   trace.sampling\n   util.instrumentation\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Zipkin JSON Exporter in Python\nDESCRIPTION: This command installs the OpenTelemetry Zipkin JSON Exporter library using pip. It allows users to add the exporter functionality to their Python projects for sending tracing data to Zipkin.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-zipkin-json/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-exporter-zipkin-json\n```\n\n----------------------------------------\n\nTITLE: Module Documentation Header in reStructuredText\nDESCRIPTION: Documentation header using reStructuredText format to define the module documentation section for OpenTelemetry SDK instrumentation utilities.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/util.instrumentation.rst#2025-04-07_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nopentelemetry.sdk.util.instrumentation\n==========================================\n\n.. automodule:: opentelemetry.sdk.util.instrumentation\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Shims Documentation in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents for shims documentation. It uses the 'toctree' directive to include all files in the current directory, with a maximum depth of 1 level.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/shim/index.rst#2025-04-07_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :glob:\n\n    **\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Proto Package with pip\nDESCRIPTION: Command to install the opentelemetry-proto package using pip. This will download and install the Python package containing generated code for OpenTelemetry protobuf data model.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/opentelemetry-proto/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-proto\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python SDK with pip\nDESCRIPTION: Command to install the OpenTelemetry Python SDK package using pip package manager. This is the primary installation method for adding the SDK to a Python project.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/opentelemetry-sdk/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenTelemetry Python SDK Examples\nDESCRIPTION: This command installs the required dependencies for running the MetricReader configuration examples. It uses pip to install packages listed in the requirements.txt file.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/reader/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Python Example\nDESCRIPTION: Command to execute the Python example script that generates telemetry data.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/logs/README.rst#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ python example.py\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Jaeger Propagator with pip\nDESCRIPTION: Command to install the OpenTelemetry Jaeger Propagator library using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/propagator/opentelemetry-propagator-jaeger/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-propagator-jaeger\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry B3 Propagator Package\nDESCRIPTION: Command to install the OpenTelemetry B3 propagator package using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/propagator/opentelemetry-propagator-b3/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-propagator-b3\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Shim for OpenTelemetry with pip\nDESCRIPTION: Command to install the OpenCensus Shim package using pip. This package enables compatibility between OpenCensus and OpenTelemetry frameworks.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opencensus-shim/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-opencensus-shim\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenTelemetry Python Repository\nDESCRIPTION: Commands to clone the OpenTelemetry Python repository and set up the local development environment for contribution.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/CONTRIBUTING.md#2025-04-07_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-python.git\ncd opentelemetry-python\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenTelemetry Python Package Dependencies\nDESCRIPTION: Defines the core OpenTelemetry Python package dependencies including the API, SDK, and OTLP exporter. Uses the compatible release operator (~=) to specify version 1.25 and allow patch version updates.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/instruments/requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nopentelemetry-api~=1.25\nopentelemetry-sdk~=1.25\nopentelemetry-exporter-otlp~=1.25\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python Dependencies\nDESCRIPTION: Package requirements specifying exact versions of OpenTelemetry Python and its dependencies. Includes the core API (1.15.0), SDK (1.15.0), semantic conventions (0.36b0), and supporting libraries like typing_extensions and wrapt.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/metrics/reader/requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nDeprecated==1.2.13\nopentelemetry-api==1.15.0\nopentelemetry-sdk==1.15.0\nopentelemetry-semantic-conventions==0.36b0\ntyping_extensions==4.3.0\nwrapt==1.14.1\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handler Entry Point\nDESCRIPTION: Setup configuration for registering the custom error handler using entry points.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/examples/error_handler/README.rst#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[options.entry_points]\nopentelemetry_error_handler =\n    error_handler_0 = error_handler_0:ErrorHandler0\n```\n\n----------------------------------------\n\nTITLE: Building and Testing OpenTelemetry-OpenTracing Bridge with Tox\nDESCRIPTION: Command to build and test the OpenTelemetry-OpenTracing Bridge using Tox with Python 3.11. This runs the test suite for the opentracing shim.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/README.rst#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntox -e py311-test-opentracing-shim\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with Pytest for OpenTelemetry-OpenTracing Bridge\nDESCRIPTION: Command to run a specific test file using pytest directly. This example runs the test_threads.py file in the testbed/test_multiple_callbacks directory with verbose output.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/README.rst#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npy.test -s testbed/test_multiple_callbacks/test_threads.py\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Exporters\nDESCRIPTION: Command to install individual OpenTelemetry exporter packages, where {exporter} should be replaced with the specific exporter name.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/README.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-exporter-{exporter}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Adding New Test Patterns\nDESCRIPTION: Example directory structure for adding a new test pattern to the OpenTelemetry-OpenTracing Bridge testbed. New patterns should be added as directories with the 'test_' prefix and contain separate files for each platform (e.g., threads and asyncio).\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/tests/testbed/README.rst#2025-04-07_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntestbed/\n  test_new_pattern/\n    test_threads.py\n    test_asyncio.py\n```\n\n----------------------------------------\n\nTITLE: Illustrating Version Release Structure for OpenTelemetry Python\nDESCRIPTION: This code snippet demonstrates the versioning structure for different OpenTelemetry Python components, including stable releases and pre-releases with experimental features.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/rationale.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### V1.0.0 Release (tracing, baggage, propagators, context)\n\n- `opentelemetry-api` 1.0.0\n  - Contains APIs for tracing, baggage, propagators, context\n- `opentelemetry-sdk` 1.0.0\n  - Contains SDK components for tracing, baggage, propagators, and context\n\n#### V1.15.0 Release (with metrics)\n\n- `opentelemetry-api` 1.15.0\n  - Contains APIs for tracing, baggage, propagators, context, and metrics\n- `opentelemetry-sdk` 1.15.0\n  - Contains SDK components for tracing, baggage, propagators, context and metrics\n\n##### Contains the following pre-release packages\n\n- `opentelemetry-api` 1.x.yrc1\n  - Contains the experimental public API for logging plus other unstable features. There are no stability guarantees.\n- `opentelemetry-sdk` 1.x.yrc1\n  - Contains the experimental public SDK for logging plus other unstable features. There are no stability guarantees.\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for OpenTelemetry Python\nDESCRIPTION: This snippet lists all the required dependencies for the OpenTelemetry Python project, including third-party packages with version constraints and local OpenTelemetry modules to be installed in development mode.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-zipkin/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e exporter/opentelemetry-exporter-zipkin-json\n-e exporter/opentelemetry-exporter-zipkin-proto-http\n-e opentelemetry-sdk\n-e opentelemetry-semantic-conventions\n-e exporter/opentelemetry-exporter-zipkin\n```\n\n----------------------------------------\n\nTITLE: Specifying gRPC Tools and Protobuf Type Stub Dependencies in Python\nDESCRIPTION: Defines specific package dependency versions for gRPC and protobuf code generation tools. The grpcio-tools version is pinned to 1.63.2 for compatibility with protobuf 5 to avoid RuntimeWarnings, while mypy-protobuf is set to version ~=3.5.0 for generating type stubs.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/gen-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Use caution when bumping this version to ensure compatibility with the currently supported protobuf version.\n# Pinning this to the oldest grpcio version that supports protobuf 5 helps avoid RuntimeWarning messages\n# from the generated protobuf code and ensures continued stability for newer grpcio versions.\ngrpcio-tools==1.63.2\nmypy-protobuf~=3.5.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Requirements\nDESCRIPTION: Lists required Python packages and their versions for the OpenTelemetry Python project. Includes core dependencies like asgiref, pytest, and typing extensions, as well as local package references for OpenTelemetry components.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/opentelemetry-sdk/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nflaky==3.7.0\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\npsutil==5.9.6; sys_platform != 'win32'\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e tests/opentelemetry-test-utils\n-e opentelemetry-api\n-e opentelemetry-semantic-conventions\n-e opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Lists required Python packages and their specific versions for the OpenTelemetry Python project. Includes testing dependencies, HTTP libraries, and local package references for OpenTelemetry components.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-zipkin-json/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\ncertifi==2024.7.4\ncharset-normalizer==3.3.2\nDeprecated==1.2.14\nidna==3.7\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\npy-cpuinfo==9.0.0\npytest==7.4.4\nrequests==2.32.3\ntomli==2.0.1\ntyping_extensions==4.10.0\nurllib3==2.2.2\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e opentelemetry-sdk\n-e opentelemetry-semantic-conventions\n-e tests/opentelemetry-test-utils\n-e exporter/opentelemetry-exporter-zipkin-json\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Python Requirements\nDESCRIPTION: Lists required Python packages and their versions for the OpenTelemetry Python project. Includes testing frameworks (pytest), utility packages, and local development references to OpenTelemetry components.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/shim/opentelemetry-opentracing-shim/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nimportlib-metadata==6.11.0\niniconfig==2.0.0\nopentracing==2.4.0\npackaging==24.0\npluggy==1.5.0\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e opentelemetry-sdk\n-e tests/opentelemetry-test-utils\n-e opentelemetry-semantic-conventions\n-e shim/opentelemetry-opentracing-shim\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for OpenTelemetry\nDESCRIPTION: This snippet lists the required Python packages and their versions for the OpenTelemetry Python project. It includes conditional dependencies based on Python version and local project packages.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/opentelemetry-api/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nimportlib-metadata==8.5.0 ; python_version < \"3.9\"\nimportlib-metadata==8.6.1 ; python_version >= \"3.9\"\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.20.2\n-e opentelemetry-sdk\n-e opentelemetry-semantic-conventions\n-e tests/opentelemetry-test-utils\n-e opentelemetry-api\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for OpenTelemetry\nDESCRIPTION: This snippet enumerates the Python packages and their specific versions required for the OpenTelemetry Python project. It includes both external dependencies and local project packages that need to be installed in editable mode.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/propagator/opentelemetry-propagator-b3/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e opentelemetry-sdk\n-e opentelemetry-semantic-conventions\n-e propagator/opentelemetry-propagator-b3\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Python Dependencies List\nDESCRIPTION: Dependency specifications listing required Python packages with pinned versions for the OpenTelemetry Python project. Includes testing packages like pytest, utility packages like typing_extensions, and local editable installations of opentelemetry-api and opentelemetry-semantic-conventions packages.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/opentelemetry-semantic-conventions/test-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasgiref==3.7.2\nDeprecated==1.2.14\nimportlib-metadata==6.11.0\niniconfig==2.0.0\npackaging==24.0\npluggy==1.5.0\npy-cpuinfo==9.0.0\npytest==7.4.4\ntomli==2.0.1\ntyping_extensions==4.10.0\nwrapt==1.16.0\nzipp==3.19.2\n-e opentelemetry-api\n-e opentelemetry-semantic-conventions\n```\n\n----------------------------------------\n\nTITLE: Specifying pytest-benchmark Dependency for OpenTelemetry Python\nDESCRIPTION: This snippet defines pytest-benchmark version 4.0.0 as a project dependency. The pytest-benchmark plugin enables performance benchmarking capabilities for pytest, allowing OpenTelemetry Python developers to measure and compare execution times for critical code paths.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/opentelemetry-sdk/benchmark-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest-benchmark==4.0.0\n```\n\n----------------------------------------\n\nTITLE: Specifying pytest-benchmark Dependency\nDESCRIPTION: Defines a fixed version requirement for the pytest-benchmark package used for performance testing. The package is pinned to version 4.0.0 for consistency.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/propagator/opentelemetry-propagator-b3/benchmark-requirements.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest-benchmark==4.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for OpenTelemetry SDK Trace Export Module\nDESCRIPTION: Sphinx configuration directives for auto-generating documentation from the OpenTelemetry SDK trace export module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/trace.export.rst#2025-04-07_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: opentelemetry.sdk.trace.export\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for OpenTelemetry SDK\nDESCRIPTION: ReStructuredText markup for configuring automatic documentation generation of the OpenTelemetry SDK environment variables module. Uses automodule directive to include all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/open-telemetry/opentelemetry-python/blob/main/docs/sdk/environment_variables.rst#2025-04-07_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: opentelemetry.sdk.environment_variables\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```"
  }
]