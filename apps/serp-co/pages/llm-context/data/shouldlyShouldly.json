[
  {
    "owner": "shouldly",
    "repo": "shouldly",
    "content": "TITLE: Comparing Traditional Assert with Shouldly in C#\nDESCRIPTION: Demonstrates the difference between traditional assertion syntax and Shouldly's more readable approach. Shows how Shouldly provides more context in error messages by using the code expression itself.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAssert.That(contestant.Points, Is.EqualTo(1337));\n```\n\n----------------------------------------\n\nTITLE: Creating Unit Tests with Shouldly in C#\nDESCRIPTION: Implements a unit test using NUnit and Shouldly to verify the TestWorks method. It demonstrates the use of Shouldly's ShouldBe assertion.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing NUnit.Framework;\nusing Shouldly;\n\npublic class Tests\n{\n    [Test]\n    public void Test1()\n    {\n        Program.TestWorks().ShouldBe(\"Works\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Enumerables for Equality in C#\nDESCRIPTION: Demonstrates how to compare collections of objects using ShouldBe. The comparison is performed on elements, allowing different collection types (like List and Array) to be compared as long as they contain equivalent elements.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/shouldBe.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar apu = new Person { Name = \"Apu\" };\nvar homer = new Person { Name = \"Homer\" };\nvar skinner = new Person { Name = \"Skinner\" };\nvar barney = new Person { Name = \"Barney\" };\nvar theBeSharps = new List<Person> { homer, skinner, barney };\ntheBeSharps.ShouldBe(new[] { apu, homer, skinner, barney });\n```\n\n----------------------------------------\n\nTITLE: Using Standard ShouldSatisfyAllConditions in C#\nDESCRIPTION: Demonstrates how to use ShouldSatisfyAllConditions to validate multiple conditions on an object using lambda expressions. The example shows validation of a Person object's Name property with multiple assertions.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/satisfyAllConditions.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar mrBurns = new Person { Name = null };\nmrBurns.ShouldSatisfyAllConditions(\n                    () => mrBurns.Name.ShouldNotBeNullOrEmpty(),\n                    () => mrBurns.Name.ShouldBe(\"Mr.Burns\"));\n```\n\n----------------------------------------\n\nTITLE: Using Shouldly's ShouldBe Method in C#\nDESCRIPTION: Shows Shouldly's expressive syntax for assertions. The ShouldBe extension method creates more readable code and provides detailed error messages that include the original expression.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncontestant.Points.ShouldBe(1337);\n```\n\n----------------------------------------\n\nTITLE: Comparison of Assert vs Shouldly for IndexOfValue\nDESCRIPTION: Side-by-side comparison showing how Shouldly improves error messages by including the code context in the failure message. Demonstrates the practical advantage of using Shouldly over traditional assertions.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nAssert.That(map.IndexOfValue(\"boo\"), Is.EqualTo(2));\n// -> Expected 2 but was -1\n\nmap.IndexOfValue(\"boo\").ShouldBe(2);\n// -> map.IndexOfValue(\"boo\") should be 2 but was -1\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Classes for Testing Examples in C#\nDESCRIPTION: Defines a set of example classes including an abstract Pet class with Cat and Dog implementations, and a Person class with name and salary properties. These classes serve as test models for demonstrating Shouldly's assertion capabilities.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/exampleClasses.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Simpsons;\n\npublic abstract class Pet\n{\n    public abstract string? Name { get; set; }\n\n    public override string? ToString() => Name;\n}\n\npublic class Cat : Pet\n{\n    public override string? Name { get; set; }\n}\n\npublic class Dog : Pet\n{\n    public override string? Name { get; set; }\n}\n\npublic class Person\n{\n    public Person()\n    {\n    }\n\n    public Person(string name)\n    {\n        Name = name ?? throw new ArgumentNullException(nameof(name));\n    }\n\n    public string? Name { get; set; }\n    public int Salary { get; set; }\n\n    public override string? ToString() => Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Constructor Exceptions with Should.Throw in C#\nDESCRIPTION: Shows how to test that a constructor properly throws an ArgumentNullException. This example verifies exception throwing when instantiating a Person object.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/throw.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nShould.Throw<ArgumentNullException>(() => new Person(\"Homer\"));\n```\n\n----------------------------------------\n\nTITLE: Comparing Index Assertion Examples in C#\nDESCRIPTION: Side-by-side comparison showing how Shouldly's error messages provide more context than traditional assertions when checking index values. Demonstrates the improved debugging experience with Shouldly.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nAssert.That(map.IndexOfValue(\"boo\"), Is.EqualTo(2));    // -> Expected 2 but was -1\nmap.IndexOfValue(\"boo\").ShouldBe(2);                    // -> map.IndexOfValue(\"boo\") should be 2 but was -1\n```\n\n----------------------------------------\n\nTITLE: Installing Shouldly via .NET CLI\nDESCRIPTION: Command for installing Shouldly via the .NET Core command line interface. This adds the Shouldly assertion library to your .NET Core project.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Shouldly\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects with ShouldBe in C#\nDESCRIPTION: Demonstrates how to compare object properties using the ShouldBe extension method. This example attempts to validate a cat's name and shows how Shouldly provides detailed failure messages with character-by-character differences.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/shouldBe.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar theSimpsonsCat = new Cat { Name = \"Santas little helper\" };\ntheSimpsonsCat.Name.ShouldBe(\"Snowball 2\");\n```\n\n----------------------------------------\n\nTITLE: Comparing Numeric Values with Tolerance in C#\nDESCRIPTION: Shows how to compare decimal values with a specified tolerance using ShouldBe. This is useful for floating-point comparisons where exact equality might not be achievable due to precision issues.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/shouldBe.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst decimal pi = (decimal)Math.PI;\npi.ShouldBe(3.24m, 0.01m);\n```\n\n----------------------------------------\n\nTITLE: Using ShouldContain with Predicate in C# for Collection Assertions\nDESCRIPTION: Shows how to use Shouldly's ShouldContain method with a predicate to assert that an element satisfying a specific condition exists in a collection. The example demonstrates a failing assertion when no element meets the specified condition.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/contain.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar moe = new Person { Name = \"Moe\", Salary = 20000 };\nvar barney = new Person { Name = \"Barney\", Salary = 0 };\nvar millionaires = new List<Person> { homer, moe, barney };\nmillionaires.ShouldContain(m => m.Salary > 1000000);\n```\n\n----------------------------------------\n\nTITLE: Testing Execution Timeout with ShouldCompleteIn in C#\nDESCRIPTION: Demonstrates how to use Should.CompleteIn to verify that a code block executes within a specified timeout period. The example shows testing a sleep operation that should fail by exceeding the 0.5 second timeout.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/completeIn.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nShould.CompleteIn(\n                    action: () => { Thread.Sleep(TimeSpan.FromSeconds(15)); },\n                    timeout: TimeSpan.FromSeconds(0.5),\n                    customMessage: \"Some additional context\");\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Presence in Collection using ShouldContain in C#\nDESCRIPTION: Demonstrates how to use Shouldly's ShouldContain method to assert that a specific element is present in a collection. The example shows a failing assertion when trying to check for the presence of an element that is not in the list.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/contain.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar mrBurns = new Person { Name = \"Mr.Burns\", Salary = 3000000 };\nvar kentBrockman = new Person { Name = \"Kent Brockman\", Salary = 3000000 };\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar millionaires = new List<Person> { kentBrockman, homer };\nmillionaires.ShouldContain(mrBurns);\n```\n\n----------------------------------------\n\nTITLE: Asserting True Boolean Values with ShouldBeTrue in C#\nDESCRIPTION: Demonstrates the usage of ShouldBeTrue method to assert that a boolean value is true. If the assertion fails, it throws an exception with a detailed message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/trueFalse.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar myValue = false;\nmyValue.ShouldBeTrue();\n```\n\n----------------------------------------\n\nTITLE: Verifying Dictionary Contains a Key with Shouldly ShouldContainKey Method\nDESCRIPTION: Demonstrates how to use Shouldly's ShouldContainKey extension method to verify that a dictionary contains a specific key. The example shows the method throwing an exception when a key is not found in the dictionary.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/dictionary/containKey.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar websters = new Dictionary<string, string> { { \"Embiggen\", \"To empower or embolden.\" } };\nwebsters.ShouldContainKey(\"Cromulent\");\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with ShouldThrowAction in C#\nDESCRIPTION: Demonstrates using Should.Throw to test if an action properly throws a DivideByZeroException. This example attempts to divide a salary by a denominator that should cause an exception.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/throw.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar denominator = 1;\nShould.Throw<DivideByZeroException>(() =>\n                {\n                    var y = homer.Salary / denominator;\n                });\n```\n\n----------------------------------------\n\nTITLE: Testing Dictionary Key-Value Presence with ShouldContainKeyAndValue\nDESCRIPTION: Demonstrates using Shouldly's ShouldContainKeyAndValue assertion to verify that a dictionary contains a specific key with an expected value. The example shows both the test code and the exception message when the assertion fails.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/dictionary/containKeyAndValue.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar websters = new Dictionary<string, string> { { \"Cromulent\", \"I never heard the word before moving to Springfield.\" } };\nwebsters.ShouldContainKeyAndValue(\"Cromulent\", \"Fine, acceptable.\");\n```\n\nLANGUAGE: text\nCODE:\n```\nwebsters\n    should contain key\n\"Cromulent\"\n    with value\n\"Fine, acceptable.\"\n    but value was\n\"I never heard the word before moving to Springfield.\"\n```\n\n----------------------------------------\n\nTITLE: Testing Value Within Range using ShouldBeInRange\nDESCRIPTION: Demonstrates using ShouldBeInRange to verify if a numeric value falls within a specified range. The example shows checking if a Person's salary falls between 30000 and 40000.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/inRange.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 300000000 };\nhomer.Salary.ShouldBeInRange(30000, 40000);\n```\n\n----------------------------------------\n\nTITLE: Testing Type Assertion with ShouldBeOfType in C#\nDESCRIPTION: Demonstrates the usage of ShouldBeOfType assertion method to verify an object's type. This example shows how the assertion fails when a Cat object is incorrectly asserted to be of type Dog.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/ofType.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar theSimpsonsDog = new Cat { Name = \"Santas little helper\" };\ntheSimpsonsDog.ShouldBeOfType<Dog>();\n```\n\n----------------------------------------\n\nTITLE: Testing Async Exceptions with ShouldThrowAsync in C#\nDESCRIPTION: Shows how to test exceptions in asynchronous code using Should.ThrowAsync. This pattern allows you to verify that an async task throws a specific exception type.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/throw.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask doSomething() => Task.CompletedTask;\nvar exception = await Should.ThrowAsync<DivideByZeroException>(() => doSomething());\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Empty State with ShouldBeEmpty\nDESCRIPTION: Demonstrates how to use Shouldly's ShouldBeEmpty() assertion to verify that a collection is empty. The example shows a failing test case where a list containing one person fails the empty assertion.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/empty.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar homer = new Person { Name = \"Homer\" };\nvar powerPlantOnTheWeekend = new List<Person> { homer };\npowerPlantOnTheWeekend.ShouldBeEmpty();\n```\n\n----------------------------------------\n\nTITLE: Testing ShouldBeNull with Reference Type\nDESCRIPTION: Demonstrates how to use ShouldBeNull to verify that a reference type is null. Shows testing a string reference that should fail the assertion since it contains a value.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/null.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar myRef = \"Hello World\";\nmyRef.ShouldBeNull();\n```\n\n----------------------------------------\n\nTITLE: Shouldly Assertion Example in C#\nDESCRIPTION: Demonstrates Shouldly's cleaner syntax for making assertions. Uses extension methods to create a more readable test statement.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncontestant.Points.ShouldBe(1337);\n```\n\n----------------------------------------\n\nTITLE: Using ShouldContain for String Containment Testing in C#\nDESCRIPTION: This example demonstrates the ShouldContain method to check if a string contains a substring. The assertion fails because \"Homer\" does not contain \"Bart\", resulting in a descriptive exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/contain.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar target = \"Homer\";\ntarget.ShouldContain(\"Bart\");\n```\n\n----------------------------------------\n\nTITLE: String ShouldBe Assertion in C#\nDESCRIPTION: Demonstrates the ShouldBe assertion for string comparison in Shouldly. The example shows how to assert that a string should equal an expected value, including the detailed difference output when the assertion fails.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/shouldBe.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = \"Homer\";\ntarget.ShouldBe(\"Bart\");\n```\n\n----------------------------------------\n\nTITLE: Comparing Lists of Person Objects Using ShouldBe in C#\nDESCRIPTION: This snippet demonstrates the use of ShouldBe to compare two lists of Person objects. It creates a list of The Be Sharps members and compares it to an expected list, which includes an additional person (Apu). The assertion is expected to fail due to this difference.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/shouldBe.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar apu = new Person { Name = \"Apu\" };\nvar homer = new Person { Name = \"Homer\" };\nvar skinner = new Person { Name = \"Skinner\" };\nvar barney = new Person { Name = \"Barney\" };\nvar theBeSharps = new List<Person> { homer, skinner, barney };\ntheBeSharps.ShouldBe(new[] { apu, homer, skinner, barney });\n```\n\n----------------------------------------\n\nTITLE: Comparing DateTime Values with Tolerance in C#\nDESCRIPTION: Demonstrates how to compare DateTime values with a specified time tolerance. This allows for assertions that verify timestamps are within an acceptable range rather than requiring exact matches.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/shouldBe.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar date = new DateTime(2000, 6, 1);\ndate.ShouldBe(new(2000, 6, 1, 1, 0, 1), TimeSpan.FromHours(1));\n```\n\n----------------------------------------\n\nTITLE: Chaining ShouldNotBeNull with Reference Type\nDESCRIPTION: Demonstrates chaining additional assertions after ShouldNotBeNull for reference types. Shows how to access properties of the non-null value for further testing.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/null.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar myRef = (string?)\"1234\";\nmyRef.ShouldNotBeNull().Length.ShouldBe(5);\n```\n\n----------------------------------------\n\nTITLE: Testing Greater Than Comparison using Shouldly\nDESCRIPTION: Demonstrates how to use ShouldBeGreaterThan assertion to verify that a value is greater than the expected amount. This example compares a Person's salary against a threshold value.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/greaterLessThan.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar mrBurns = new Person { Name = \"Mr. Burns\", Salary = 30000 };\nmrBurns.Salary.ShouldBeGreaterThan(300000000);\n```\n\n----------------------------------------\n\nTITLE: Using ShouldBeOneOf Assertion in C#\nDESCRIPTION: This snippet demonstrates the usage of ShouldBeOneOf assertion method. It creates a list of Person objects and checks if a specific Person object is one of the elements in the list. The assertion fails because the tested object is not in the list.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/oneOf.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar apu = new Person { Name = \"Apu\" };\nvar homer = new Person { Name = \"Homer\" };\nvar skinner = new Person { Name = \"Skinner\" };\nvar barney = new Person { Name = \"Barney\" };\nvar theBeSharps = new List<Person> { homer, skinner, barney };\napu.ShouldBeOneOf(theBeSharps.ToArray());\n```\n\n----------------------------------------\n\nTITLE: String ShouldEndWith Assertion Example\nDESCRIPTION: Demonstrates how to validate if a string ends with a specific substring using Shouldly's ShouldEndWith extension method. This example shows a failing test case where 'Homer' does not end with 'Bart'.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/endWith.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar target = \"Homer\";\ntarget.ShouldEndWith(\"Bart\");\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntarget\n    should end with\n\"Bart\"\n    but was\n\"Homer\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Type Assignability with ShouldBeAssignableTo in C#\nDESCRIPTION: This example demonstrates how to use the ShouldBeAssignableTo method to verify if an object can be assigned to a particular type. In this case, it attempts to assert that a Person object can be assigned to the Pet type, which will fail as shown in the exception output.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/assignableTo.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar theSimpsonsDog = new Person { Name = \"Santas little helper\" };\ntheSimpsonsDog.ShouldBeAssignableTo<Pet>();\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with Action Extension Methods in C#\nDESCRIPTION: Demonstrates using the ShouldThrow extension method on Action delegates. This approach allows for cleaner syntax when testing exceptions by applying the assertion directly to an action variable.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/throw.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar denominator = 1;\nvar action = () =>\n                {\n                    var y = homer.Salary / denominator;\n                };\naction.ShouldThrow<DivideByZeroException>();\n```\n\n----------------------------------------\n\nTITLE: String ShouldNotEndWith Assertion Example\nDESCRIPTION: Demonstrates how to validate if a string does not end with a specific substring using Shouldly's ShouldNotEndWith extension method. This example shows a failing test case where 'Homer Simpson' incorrectly ends with 'Simpson'.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/endWith.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar target = \"Homer Simpson\";\ntarget.ShouldNotEndWith(\"Simpson\");\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntarget\n    should not end with\n\"Simpson\"\n    but was\n\"Homer Simpson\"\n```\n\n----------------------------------------\n\nTITLE: Testing Less Than Comparison using Shouldly\nDESCRIPTION: Illustrates the use of ShouldBeLessThan assertion to verify that a value is less than the expected amount. Compares a Person's salary against a maximum threshold.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/greaterLessThan.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 300000000 };\nhomer.Salary.ShouldBeLessThan(30000);\n```\n\n----------------------------------------\n\nTITLE: Testing String Prefix with ShouldNotStartWith\nDESCRIPTION: Demonstrates how to assert that a string does not start with a specific prefix using Shouldly's ShouldNotStartWith method. The example shows a failing test where 'Homer Simpson' is not expected to start with 'Homer'.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/startWith.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar target = \"Homer Simpson\";\ntarget.ShouldNotStartWith(\"Homer\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ShouldBeSubsetOf Assertion in C# with Shouldly\nDESCRIPTION: This snippet demonstrates how to use the ShouldBeSubsetOf assertion in Shouldly. It creates lists of Person objects representing the Simpsons family and attempts to assert that one list is a subset of another, which fails due to an extra element.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/subsetOf.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar lisa = new Person { Name = \"Lisa\" };\nvar bart = new Person { Name = \"Bart\" };\nvar maggie = new Person { Name = \"Maggie\" };\nvar homer = new Person { Name = \"Homer\" };\nvar marge = new Person { Name = \"Marge\" };\nvar ralph = new Person { Name = \"Ralph\" };\nvar simpsonsKids = new List<Person> { bart, lisa, maggie, ralph };\nvar simpsonsFamily = new List<Person> { lisa, bart, maggie, homer, marge };\nsimpsonsKids.ShouldBeSubsetOf(simpsonsFamily);\n```\n\n----------------------------------------\n\nTITLE: Testing ShouldNotBeNull with Nullable Value Type\nDESCRIPTION: Shows how to use ShouldNotBeNull with a nullable value type (int?). Demonstrates assertion failing when testing a null nullable value.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/null.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nint? myRef = null;\nmyRef.ShouldNotBeNull();\n```\n\n----------------------------------------\n\nTITLE: Validating Null Strings with ShouldBeNull in C#\nDESCRIPTION: Demonstrates using Shouldly's ShouldBeNull method to validate that a string should be null. The example shows a failing test with a non-null string and the resulting exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/null.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar target = \"Homer\";\ntarget.ShouldBeNull();\n```\n\n----------------------------------------\n\nTITLE: Testing Func with Should.NotThrow\nDESCRIPTION: Demonstrates using Should.NotThrow with a Func that creates a Person object. Tests null parameter validation that throws ArgumentNullException.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/notThrow.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstring? name = null;\nShould.NotThrow(() => new Person(name!));\n```\n\n----------------------------------------\n\nTITLE: ShouldAllBe Exception Output in Plain Text\nDESCRIPTION: This snippet shows the exception message that is thrown when the ShouldAllBe assertion fails. It details which elements in the collection do not meet the specified condition.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/allBe.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmillionaires\n    should satisfy the condition\n(m.Salary > 1000000)\n    but\n[Homer]\n    do not\n```\n\n----------------------------------------\n\nTITLE: Validating Empty Strings with ShouldBeEmpty in C#\nDESCRIPTION: Demonstrates using Shouldly's ShouldBeEmpty method to validate that a string should be empty. The example shows a failing test with a non-empty string and the resulting exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/null.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar target = \"Homer\";\ntarget.ShouldBeEmpty();\n```\n\n----------------------------------------\n\nTITLE: Verifying Collections with ShouldHaveSingleItem in C#\nDESCRIPTION: This snippet demonstrates how to use Shouldly's ShouldHaveSingleItem() method to verify that a collection contains exactly one item. In this example, the test will fail because the 'simpsonsBabies' list contains two items instead of one.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/have.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar maggie = new Person { Name = \"Maggie\" };\nvar homer = new Person { Name = \"Homer\" };\nvar simpsonsBabies = new List<Person> { homer, maggie };\nsimpsonsBabies.ShouldHaveSingleItem();\n```\n\n----------------------------------------\n\nTITLE: Testing Func using Extension Method\nDESCRIPTION: Shows how to use the ShouldNotThrow extension method on a Func delegate. Tests object creation with null parameter that throws ArgumentNullException.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/notThrow.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstring? name = null;\nvar func = () => new Person(name!);\nfunc.ShouldNotThrow();\n```\n\n----------------------------------------\n\nTITLE: Testing ShouldNotBeNull with Reference Type\nDESCRIPTION: Demonstrates using ShouldNotBeNull to verify that a reference type is not null. Shows assertion failing when testing a null string reference.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/null.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstring? myRef = null;\nmyRef.ShouldNotBeNull();\n```\n\n----------------------------------------\n\nTITLE: Verifying Dictionary Doesn't Contain a Key with Shouldly ShouldNotContainKey Method\nDESCRIPTION: Demonstrates how to use Shouldly's ShouldNotContainKey extension method to verify that a dictionary does not contain a specific key. The example shows the method throwing an exception when a key is found in the dictionary.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/dictionary/containKey.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar websters = new Dictionary<string, string> { { \"Chazzwazzers\", \"What Australians would have called a bull frog.\" } };\nwebsters.ShouldNotContainKey(\"Chazzwazzers\");\n```\n\n----------------------------------------\n\nTITLE: Chaining ShouldNotBeNull with Nullable Value Type\nDESCRIPTION: Shows chaining assertions after ShouldNotBeNull for nullable value types. Demonstrates accessing struct properties after null check.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/null.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nSomeStruct? nullableValue = new SomeStruct { IntProperty = 41 };\nnullableValue.ShouldNotBeNull().IntProperty.ShouldBe(42);\n```\n\n----------------------------------------\n\nTITLE: Testing Dictionary Key-Value Absence with ShouldNotContainKeyAndValue\nDESCRIPTION: Shows how to use Shouldly's ShouldNotContainValueForKey assertion to verify that a dictionary does not contain a specific key-value pair. Includes both the test code and the resulting exception message when the assertion fails.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/dictionary/containKeyAndValue.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar websters = new Dictionary<string, string> { { \"Chazzwazzers\", \"What Australians would have called a bull frog.\" } };\nwebsters.ShouldNotContainValueForKey(\"Chazzwazzers\", \"What Australians would have called a bull frog.\");\n```\n\nLANGUAGE: text\nCODE:\n```\nwebsters\n    should not contain key\n\"Chazzwazzers\"\n    with value\n\"What Australians would have called a bull frog.\"\n    but does\n```\n\n----------------------------------------\n\nTITLE: Asserting Enum Flag Presence with ShouldHaveFlag in C#\nDESCRIPTION: This code snippet demonstrates how to use Shouldly's ShouldHaveFlag method to verify that an enum value contains a specific flag. The example shows attempting to assert that TestEnum.FlagTwo has the TestEnum.FlagOne flag, which will fail and generate a detailed exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/haveFlag.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar actual = TestEnum.FlagTwo;\nvar value = TestEnum.FlagOne;\nactual.ShouldHaveFlag(value);\n```\n\n----------------------------------------\n\nTITLE: Asserting Property Existence in Dynamic Object with Shouldly in C#\nDESCRIPTION: This code snippet demonstrates how to use Shouldly to assert that a dynamic object named 'theFuture' should contain a property called 'RobotTeachers'. The assertion is written in a human-readable format, which is a key feature of the Shouldly framework.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/DynamicShouldExamples.HaveProperty.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nDynamic object \"theFuture\" should contain property \"RobotTeachers\" but does not.\n```\n\n----------------------------------------\n\nTITLE: Asserting Integer Inequality in C# with Shouldly\nDESCRIPTION: Shows how to use ShouldNotBe for comparing integer values. It asserts that a constant integer value should not be equal to 1.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/notBe.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst int one = 1;\none.ShouldNotBe(1);\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with Func Extension Methods in C#\nDESCRIPTION: Demonstrates using the ShouldThrow extension method on Func delegates. This approach provides a clean syntax for testing exceptions by applying the assertion directly to a function variable.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/throw.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar func = () => new Person(\"Homer\");\nfunc.ShouldThrow<ArgumentNullException>();\n```\n\n----------------------------------------\n\nTITLE: Comparing Enumerables of Numeric Values with Tolerance in C#\nDESCRIPTION: Shows how to compare collections of decimal values with a specified tolerance. This is useful when comparing collections of floating-point numbers where exact equality might not be achievable.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/shouldBe.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar firstSet = new[] { 1.23m, 2.34m, 3.45001m };\nvar secondSet = new[] { 1.4301m, 2.34m, 3.45m };\nfirstSet.ShouldBe(secondSet, 0.1m);\n```\n\n----------------------------------------\n\nTITLE: Using ShouldNotContain for Negative String Containment Testing in C#\nDESCRIPTION: This example demonstrates the ShouldNotContain method to verify a string does not contain a specified substring. The assertion fails because \"Homer\" does contain \"Home\", resulting in a descriptive exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/contain.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar target = \"Homer\";\ntarget.ShouldNotContain(\"Home\");\n```\n\n----------------------------------------\n\nTITLE: Comparing Boolean Values with Context Message in C#\nDESCRIPTION: Demonstrates how to compare boolean values using ShouldBe with an additional context message. The context message provides extra information in the exception when the assertion fails.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/shouldBe.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nconst bool myValue = false;\nmyValue.ShouldBe(true, \"Some additional context\");\n```\n\n----------------------------------------\n\nTITLE: Validating Non-Null Strings with ShouldNotBeNull in C#\nDESCRIPTION: Demonstrates using Shouldly's ShouldNotBeNull method to validate that a string should not be null. The example shows a failing test with a null string and the resulting exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/null.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nstring? target = null;\ntarget.ShouldNotBeNull();\n```\n\n----------------------------------------\n\nTITLE: Using ShouldContainWithoutWhitespace for String Containment Testing in C#\nDESCRIPTION: This example shows the ShouldContainWithoutWhitespace method that ignores whitespace when checking string containment. The assertion fails because \"Homer Simpson\" does not contain \"Bart Simpson\" even when whitespace is ignored.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/contain.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar target = \"Homer Simpson\";\ntarget.ShouldContainWithoutWhitespace(\" Bart Simpson \");\n```\n\n----------------------------------------\n\nTITLE: Comparing TimeSpan Values with Tolerance in C#\nDESCRIPTION: Shows how to compare TimeSpan values with a specified tolerance. This allows for assertions that verify time durations are within an acceptable range rather than requiring exact matches.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/shouldBe.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar timeSpan = TimeSpan.FromHours(1);\ntimeSpan.ShouldBe(timeSpan.Add(TimeSpan.FromHours(1.1d)), TimeSpan.FromHours(1));\n```\n\n----------------------------------------\n\nTITLE: Asserting Property Existence in Dynamic Objects with C#\nDESCRIPTION: This snippet demonstrates how to use DynamicShould.HaveProperty to assert the existence of a property in a dynamic object. It creates an ExpandoObject and attempts to verify if it has a property named 'RobotTeachers'.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/dynamicShould.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndynamic theFuture = new ExpandoObject();\nDynamicShould.HaveProperty(theFuture, \"RobotTeachers\");\n```\n\n----------------------------------------\n\nTITLE: Using Generic ShouldSatisfyAllConditions in C#\nDESCRIPTION: Shows the generic version of ShouldSatisfyAllConditions that uses typed parameters for more concise syntax. This approach provides stronger type checking and cleaner lambda expressions.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/satisfyAllConditions.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar mrBurns = new Person { Name = null };\nmrBurns.ShouldSatisfyAllConditions(\n                    p => p.Name.ShouldNotBeNullOrEmpty(),\n                    p => p.Name.ShouldBe(\"Mr.Burns\"));\n```\n\n----------------------------------------\n\nTITLE: Testing Value Outside Range using ShouldNotBeInRange\nDESCRIPTION: Demonstrates using ShouldNotBeInRange to verify if a numeric value falls outside a specified range. The example shows checking if a Person's salary is not between 30000 and 40000.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/inRange.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar mrBurns = new Person { Name = \"Mr. Burns\", Salary = 30000 };\nmrBurns.Salary.ShouldNotBeInRange(30000, 40000);\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Absence in Collection using ShouldNotContain in C#\nDESCRIPTION: Illustrates the use of Shouldly's ShouldNotContain method to assert that a specific element is not present in a collection. The example shows a failing assertion when checking for the absence of an element that is actually in the list.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/contain.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar homerSimpson = new Person { Name = \"Homer\" };\nvar homerGlumplich = new Person { Name = \"Homer\" };\nvar lenny = new Person { Name = \"Lenny\" };\nvar carl = new Person { Name = \"carl\" };\nvar clubOfNoHomers = new List<Person> { homerSimpson, homerGlumplich, lenny, carl };\nclubOfNoHomers.ShouldNotContain(homerSimpson);\n```\n\n----------------------------------------\n\nTITLE: Asserting TimeSpan Inequality with Tolerance in C# using Shouldly\nDESCRIPTION: Shows how to use ShouldNotBe for comparing TimeSpan values with a tolerance. It checks if a TimeSpan is not within 1.5 hours of another TimeSpan.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/notBe.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar timeSpan = TimeSpan.FromHours(1);\ntimeSpan.ShouldNotBe(timeSpan.Add(TimeSpan.FromHours(1.1d)), TimeSpan.FromHours(1.5d));\n```\n\n----------------------------------------\n\nTITLE: Testing Enumerable Collection with ShouldAllBe in C#\nDESCRIPTION: This snippet demonstrates how to use the ShouldAllBe extension method to assert that all elements in a collection meet a specific condition. It creates a list of Person objects and checks if all of them have a salary greater than 1 million.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/allBe.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar mrBurns = new Person { Name = \"Mr.Burns\", Salary = 3000000 };\nvar kentBrockman = new Person { Name = \"Homer\", Salary = 3000000 };\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar millionaires = new List<Person> { mrBurns, kentBrockman, homer };\nmillionaires.ShouldAllBe(m => m.Salary > 1000000);\n```\n\n----------------------------------------\n\nTITLE: Validating Non-Empty Strings with ShouldNotBeEmpty in C#\nDESCRIPTION: Demonstrates using Shouldly's ShouldNotBeEmpty method to validate that a string should not be empty. The example shows a failing test with an empty string and the resulting exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/null.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nvar target = \"\";\ntarget.ShouldNotBeNullOrEmpty();\n```\n\n----------------------------------------\n\nTITLE: Testing Negative Type Assertion with ShouldNotBeOfType in C#\nDESCRIPTION: Demonstrates the usage of ShouldNotBeOfType assertion method to verify an object is not of a specific type. This example shows how the assertion fails when a Cat object is incorrectly asserted to not be of type Cat.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/ofType.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar theSimpsonsDog = new Cat { Name = \"Santas little helper\" };\ntheSimpsonsDog.ShouldNotBeOfType<Cat>();\n```\n\n----------------------------------------\n\nTITLE: Shouldly Error Message Example\nDESCRIPTION: Shows the more detailed and context-rich error message produced by Shouldly when an assertion fails. The message includes the actual code being tested.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncontestant.Points should be 1337 but was 0\n```\n\n----------------------------------------\n\nTITLE: String ShouldNotBe Assertion in C#\nDESCRIPTION: Demonstrates the ShouldNotBe assertion for string inequality in Shouldly. The example shows how to assert that a string should not equal a specific value, including the error message when the assertion fails.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/shouldBe.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = \"Bart\";\ntarget.ShouldNotBe(\"Bart\");\n```\n\n----------------------------------------\n\nTITLE: Testing String Pattern Match with ShouldMatch in C#\nDESCRIPTION: Demonstrates using Shouldly's ShouldMatch extension method to verify if a string matches a given regular expression pattern. This example shows a failing test where 'Homer Simpson' is incorrectly expected to match the pattern 'Bart .*'.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/match.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar target = \"Homer Simpson\";\ntarget.ShouldMatch(\"Bart .*\");\n```\n\n----------------------------------------\n\nTITLE: Testing Greater Than Or Equal To Comparison using Shouldly\nDESCRIPTION: Shows the usage of ShouldBeGreaterThanOrEqualTo assertion to verify that a value is greater than or equal to the expected amount. Tests a Person's salary against a minimum threshold.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/greaterLessThan.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar mrBurns = new Person { Name = \"Mr. Burns\", Salary = 299999999 };\nmrBurns.Salary.ShouldBeGreaterThanOrEqualTo(300000000);\n```\n\n----------------------------------------\n\nTITLE: Testing Object Reference Inequality with ShouldNotBeSameAs in C#\nDESCRIPTION: Shows usage of ShouldNotBeSameAs to verify that two references are not the same object instance. The example demonstrates a failing test where the same Person object is compared with itself.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/sameAs.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar person = new Person { Name = \"Armin Tamzarian\" };\nperson.ShouldNotBeSameAs(person);\n```\n\n----------------------------------------\n\nTITLE: Defining ShouldAssertException in C#\nDESCRIPTION: This code defines a custom exception class ShouldAssertException that inherits from Exception. It includes constructors for different parameter combinations and serialization support.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Runtime.Serialization;\n\nnamespace Shouldly\n{\n    [Serializable]\n    public class ShouldAssertException : Exception\n    {\n        public ShouldAssertException()\n        {\n        }\n\n        public ShouldAssertException(string message)\n            : base(message)\n        {\n        }\n\n        public ShouldAssertException(string message, Exception innerException)\n            : base(message, innerException)\n        {\n        }\n\n        protected ShouldAssertException(SerializationInfo info, StreamingContext context)\n            : base(info, context)\n        {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Action with Should.NotThrow\nDESCRIPTION: Demonstrates using Should.NotThrow to test a division operation that throws a DivideByZeroException. Shows how to verify that a specific action doesn't throw an exception.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/notThrow.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar denominator = 0;\nShould.NotThrow(() =>\n                {\n                    var y = homer.Salary / denominator;\n                });\n```\n\n----------------------------------------\n\nTITLE: Testing Action using Extension Method\nDESCRIPTION: Shows how to use the ShouldNotThrow extension method on an Action delegate. Tests a division operation that results in a DivideByZeroException.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/notThrow.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar denominator = 0;\nvar action = () =>\n                {\n                    var y = homer.Salary / denominator;\n                };\naction.ShouldNotThrow();\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Inequality in C# with Shouldly\nDESCRIPTION: Demonstrates how to use ShouldNotBe for comparing objects. It uses a Cat object to show that the Name property should not match a specific string.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/notBe.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar theSimpsonsCat = new Cat { Name = \"Santas little helper\" };\ntheSimpsonsCat.Name.ShouldNotBe(\"Santas little helper\");\n```\n\n----------------------------------------\n\nTITLE: Using ShouldNotBeOneOf Assertion in C#\nDESCRIPTION: This snippet shows how to use the ShouldNotBeOneOf assertion method. It creates a list of Person objects and checks if a specific Person object is not one of the elements in the list. The assertion fails because the tested object is in the list.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/oneOf.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar apu = new Person { Name = \"Apu\" };\nvar homer = new Person { Name = \"Homer\" };\nvar skinner = new Person { Name = \"Skinner\" };\nvar barney = new Person { Name = \"Barney\" };\nvar wiggum = new Person { Name = \"Wiggum\" };\nvar theBeSharps = new List<Person> { apu, homer, skinner, barney, wiggum };\nwiggum.ShouldNotBeOneOf(theBeSharps.ToArray());\n```\n\n----------------------------------------\n\nTITLE: Asserting Dictionary Key Presence with Shouldly in C#\nDESCRIPTION: This code snippet shows a Shouldly assertion checking if a dictionary named 'websters' contains the key 'Cromulent'. The assertion is expected to fail, as indicated by the 'but does not' comment.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/DictionaryShouldContainKeyExamples.ShouldContainKey.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nwebsters\n    should contain key\n\"Cromulent\"\n    but does not\n```\n\n----------------------------------------\n\nTITLE: Testing ShouldBeNull with Nullable Value Type\nDESCRIPTION: Shows how to use ShouldBeNull with a nullable value type (int?). Demonstrates assertion failing when the nullable contains a value.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/null.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nint? nullableValue = 42;\nnullableValue.ShouldBeNull();\n```\n\n----------------------------------------\n\nTITLE: Comparing Array Contents Test Output\nDESCRIPTION: Test output showing a failed assertion comparing two arrays. The expected array contains 4 elements but the actual array is missing 'Apu'. The difference is highlighted with asterisks.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/EnumerableShouldBeExamples.ShouldBe.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntheBeSharps\n    should be\n[Apu, Homer, Skinner, Barney]\n    but was\n[Homer, Skinner, Barney]\n    difference\n[*Homer*, *Skinner*, *Barney*, *]\n```\n\n----------------------------------------\n\nTITLE: Testing List Uniqueness with Shouldly\nDESCRIPTION: Demonstrates using ShouldBeUnique() to verify that a list contains only unique elements. The example creates a list of Person objects representing Simpson children, with a deliberately duplicated 'Maggie' entry to show the assertion failure.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/unique.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar lisa = new Person { Name = \"Lisa\" };\nvar bart = new Person { Name = \"Bart\" };\nvar maggie = new Person { Name = \"Maggie\" };\nvar simpsonsKids = new List<Person> { bart, lisa, maggie, maggie };\nsimpsonsKids.ShouldBeUnique();\n```\n\nLANGUAGE: text\nCODE:\n```\nsimpsonsKids\n    should be unique but\n[Maggie]\n    was duplicated\n```\n\n----------------------------------------\n\nTITLE: Example Shouldly Assertion Failure: Less Than Or Equal To\nDESCRIPTION: This snippet displays the output format of a failed assertion using the Shouldly testing library, likely in a .NET environment. It indicates that the 'homer.Salary' property, expected to be less than or equal to 30000, contained the value 30001, thus causing the test assertion to fail.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeGreater_LessThanExamples.ShouldBeLessThanOrEqualTo.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhomer.Salary\n    should be less than or equal to\n30000\n    but was\n30001\n```\n\n----------------------------------------\n\nTITLE: Testing List Non-Membership with ShouldNotBeOneOf in C#\nDESCRIPTION: Shows using ShouldNotBeOneOf to verify that a Person object is not present in a collection. The example tests whether 'Wiggum' is not a member of 'theBeSharps' group, which fails since Wiggum is in the list.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/oneOf.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar apu = new Person { Name = \"Apu\" };\nvar homer = new Person { Name = \"Homer\" };\nvar skinner = new Person { Name = \"Skinner\" };\nvar barney = new Person { Name = \"Barney\" };\nvar wiggum = new Person { Name = \"Wiggum\" };\nvar theBeSharps = new List<Person> { apu, homer, skinner, barney, wiggum };\nwiggum.ShouldNotBeOneOf(theBeSharps.ToArray());\n```\n\n----------------------------------------\n\nTITLE: Displaying Shouldly 'In Range' Assertion Failure\nDESCRIPTION: This text block shows a typical failure message generated by the Shouldly assertion library when an `InRange` assertion fails. It clearly indicates the property being tested (`homer.Salary`), the expected range (`30000` to `40000`), and the actual value (`300000000`) that caused the failure.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeInRangeExamples.ShouldBeInRange.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhomer.Salary\n    should be in range\n{ from = 30000, to = 40000 }\n    but was\n300000000\n```\n\n----------------------------------------\n\nTITLE: Testing Task-Returning Func with Should.NotThrow\nDESCRIPTION: Demonstrates using Should.NotThrow with a Func that returns a Task. Tests async operation that throws DivideByZeroException in the task execution.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/notThrow.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar denominator = 0;\nShould.NotThrow(() =>\n                {\n                    var task = Task.Factory.StartNew(\n                        () =>\n                        {\n                            var y = homer.Salary / denominator;\n                        });\n                    return task;\n                });\n```\n\n----------------------------------------\n\nTITLE: Displaying Shouldly Delegate Timeout Failure Message\nDESCRIPTION: This snippet shows an example output message from the Shouldly testing framework. It indicates that a delegate operation was expected to complete within 500 milliseconds (00:00:00.5000000) but failed to do so. It also includes a placeholder for additional context provided during the test assertion.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldCompleteInExamples.ShouldCompleteIn.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```\n\nDelegate\n    should complete in\n00:00:00.5000000\n    but did not\n\nAdditional Info:\n    Some additional context\n```\n```\n\n----------------------------------------\n\nTITLE: Using ShouldNotContain with Predicate in C# for Collection Assertions\nDESCRIPTION: Demonstrates how to use Shouldly's ShouldNotContain method with a predicate to assert that no element satisfying a specific condition exists in a collection. The example shows a failing assertion when an element meets the specified condition.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/contain.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar mrBurns = new Person { Name = \"Mr.Burns\", Salary = 3000000 };\nvar kentBrockman = new Person { Name = \"Homer\", Salary = 3000000 };\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar millionaires = new List<Person> { mrBurns, kentBrockman, homer };\nmillionaires.ShouldNotContain(m => m.Salary < 1000000);\n```\n\n----------------------------------------\n\nTITLE: Example Shouldly 'should not be of type' Failure Message\nDESCRIPTION: This text snippet represents the output generated by the Shouldly testing framework when an assertion fails. Specifically, it shows a scenario where an object instance (`theSimpsonsDog`) was expected *not* to be of a certain type (`Simpsons.Cat`), but the assertion failed. The output includes the actual value (`Santas little helper`) that caused the failure.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeOfTypeExamples.ShouldNotBeOfType.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntheSimpsonsDog\n    should not be of type\nSimpsons.Cat\n    but was\nSantas little helper\n```\n\n----------------------------------------\n\nTITLE: Testing List Membership with ShouldBeOneOf in C#\nDESCRIPTION: Demonstrates using ShouldBeOneOf to verify if a Person object exists within a collection. The example shows how to test whether 'Apu' is a member of 'theBeSharps' group, which is expected to fail since Apu is not in the list.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/oneOf.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar apu = new Person { Name = \"Apu\" };\nvar homer = new Person { Name = \"Homer\" };\nvar skinner = new Person { Name = \"Skinner\" };\nvar barney = new Person { Name = \"Barney\" };\nvar theBeSharps = new List<Person> { homer, skinner, barney };\napu.ShouldBeOneOf(theBeSharps.ToArray());\n```\n\n----------------------------------------\n\nTITLE: Validating String Start with Shouldly Assertion Output - Plaintext\nDESCRIPTION: This snippet shows the human-readable error output when a Shouldly assertion fails in a .NET unit test. The test was checking if a target string started with \"Bart\", but the actual value was \"Homer\". This output is used for debugging and understanding test failures. There are no dependencies as this is sample test output; it requires a test using Shouldly in a .NET environment to generate.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/StringExamples.ShouldStartWith.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntarget\\n    should start with\\n\\\"Bart\\\"\\n    but was\\n\\\"Homer\\\"\n```\n\n----------------------------------------\n\nTITLE: Testing Task Exceptions with Should.Throw in C#\nDESCRIPTION: Shows how to test exceptions in code that returns a Task. This example demonstrates verifying that a Task created with Task.Factory.StartNew properly throws a DivideByZeroException.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/throw.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 30000 };\nvar denominator = 1;\nShould.Throw<DivideByZeroException>(() =>\n                {\n                    var task = Task.Factory.StartNew(\n                        () =>\n                        {\n                            var y = homer.Salary / denominator;\n                        });\n                    return task;\n                });\n```\n\n----------------------------------------\n\nTITLE: Asserting String Ends With Using Shouldly in Plaintext\nDESCRIPTION: This snippet illustrates an assertion failure message generated by Shouldly when verifying if the string 'Homer' ends with 'Bart'. No dependencies are required for rendering this output, but it is typically produced by the Shouldly assertion library in a C# or .NET testing environment. The message includes the test's intention ('should end with'), the expected value ('Bart'), and the actual value ('Homer'), aiding debugging by clearly stating the failure condition.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/StringExamples.ShouldEndWith.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntarget\n    should end with\n\"Bart\"\n    but was\n\"Homer\"\n```\n\n----------------------------------------\n\nTITLE: Validating Null or Empty Strings with ShouldBeNullOrEmpty in C#\nDESCRIPTION: Demonstrates using Shouldly's ShouldBeNullOrEmpty method to validate that a string should be either null or empty. The example shows a failing test with a non-empty string and the resulting exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/null.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar target = \"Homer\";\ntarget.ShouldBeNullOrEmpty();\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings Ignoring Whitespace - Assertion Example - Plaintext\nDESCRIPTION: Demonstrates a format for asserting that a target string contains an expected value when whitespace differences are disregarded. Shows both the assertion and a sample error message indicating the expectation versus actual result, suitable for use in testing frameworks like Shouldly. No dependencies are required, and the snippet acts primarily as documentation or error output for users writing test assertions.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/StringExamples.ShouldContainWithoutWhitespace.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntarget\n    should contain without whitespace\n\" Bart Simpson \"\n    but was actually\n\"Homer Simpson\"\n```\n\n----------------------------------------\n\nTITLE: Validating Non-Empty Strings with ShouldNotBeNullOrEmpty in C#\nDESCRIPTION: Demonstrates using Shouldly's ShouldNotBeNullOrEmpty method to validate that a string should not be null or empty. The example shows a failing test with an empty string and the resulting exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/null.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nvar target = \"\";\ntarget.ShouldNotBeNullOrEmpty();\n```\n\n----------------------------------------\n\nTITLE: TimeSpan Comparison Output\nDESCRIPTION: Test output showing a failed assertion where a TimeSpan of 01:00:00 was expected to be within a range of 02:06:00 but was not. This appears to be from Shouldly's test output formatting.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeExamples.TimeSpanExample.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntimeSpan\n    should be within\n01:00:00\n    of\n02:06:00\n    but was\n01:00:00\n```\n\n----------------------------------------\n\nTITLE: Testing Object Reference Equality with ShouldBeSameAs in C#\nDESCRIPTION: Demonstrates using ShouldBeSameAs to verify that two Person objects are the same instance. The example shows a failing test where two different Person objects with different names are compared.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/sameAs.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar principleSkinner = new Person { Name = \"Armin Tamzarian\" };\nvar seymourSkinner = new Person { Name = \"Seymour Skinner\" };\nprincipleSkinner.ShouldBeSameAs(seymourSkinner);\n```\n\n----------------------------------------\n\nTITLE: Shouldly Assertion Failure Message for Salary Condition Test\nDESCRIPTION: A formatted Shouldly assertion failure message showing that 'millionaires should satisfy the condition (m.Salary > 1000000)' but 'Homer' does not meet this condition. This is an example of Shouldly's human-readable error messages.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/EnumerableShouldAllBeExamples.ShouldAllBe.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmillionaires\n    should satisfy the condition\n(m.Salary > 1000000)\n    but\n[Homer]\n    do not\n```\n\n----------------------------------------\n\nTITLE: Testing Less Than Or Equal To Comparison using Shouldly\nDESCRIPTION: Shows how to use ShouldBeLessThanOrEqualTo assertion to verify that a value is less than or equal to the expected amount. Tests a Person's salary against a maximum threshold.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/greaterLessThan.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar homer = new Person { Name = \"Homer\", Salary = 30001 };\nhomer.Salary.ShouldBeLessThanOrEqualTo(30000);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Shouldly 'ShouldNotHaveFlag' Assertion Failure (Text)\nDESCRIPTION: This snippet shows the output generated by the Shouldly testing framework when an assertion checking for the *absence* of a specific flag on an enum value fails. It clearly states the expected condition (not having `TestEnum.FlagOne`), the actual condition (having `TestEnum.FlagOne`), and the discrepancy. This output helps developers diagnose test failures related to enum flag checks in .NET.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldHaveFlagNotHaveFlagExamples.ShouldNotHaveFlag.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nactual\n    should not have flag\nTestEnum.FlagOne\n    but it had\nTestEnum.FlagOne\n```\n\n----------------------------------------\n\nTITLE: Testing String Pattern Non-Match with ShouldNotMatch in C#\nDESCRIPTION: Demonstrates using Shouldly's ShouldNotMatch extension method to verify if a string does not match a given regular expression pattern. This example shows a failing test where 'Homer Simpson' matches the pattern 'Homer .*' when it shouldn't.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/match.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar target = \"Homer Simpson\";\ntarget.ShouldNotMatch(\"Homer .*\");\n```\n\n----------------------------------------\n\nTITLE: Example Shouldly ShouldMatchApproved Diff Output\nDESCRIPTION: This text output displays a detailed comparison generated by Shouldly's `ShouldMatchApproved` assertion when a mismatch occurs. It shows the expected string (\"Hi Super Nintendo Chalmers\"), the actual string (\"Me fail english? That's unpossible\"), and highlights the differences index by index, including character codes, while ignoring line endings as specified in the test options.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldMatchApprovedExamples.ApprovedFileIsDifferent.exceptionText.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsimpsonsQuote\n    should match approved with options: Ignoring line endings\n\"Hi Super Nintendo Chalmers\"\n    but was\n\"Me fail english? That's unpossible\"\n    difference\nDifference     |  |    |         |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |        \n               | \\|/  \\|/       \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/       \nIndex          | 0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   ...  \nExpected Value | H    i    \\s   S    u    p    e    r    \\s   N    i    n    t    e    n    d    o    \\s   C    h    a    ...  \nActual Value   | M    e    \\s   f    a    i    l    \\s   e    n    g    l    i    s    h    ?    \\s   T    h    a    t    ...  \nExpected Code  | 72   105  32   83   117  112  101  114  32   78   105  110  116  101  110  100  111  32   67   104  97   ...  \nActual Code    | 77   101  32   102  97   105  108  32   101  110  103  108  105  115  104  63   32   84   104  97   116  ...  \n\nDifference     |       |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |   \n               |      \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \nIndex          | ...  13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   \nExpected Value | ...  e    n    d    o    \\s   C    h    a    l    m    e    r    s                                            \nActual Value   | ...  s    h    ?    \\s   T    h    a    t    '    s    \\s   u    n    p    o    s    s    i    b    l    e    \nExpected Code  | ...  101  110  100  111  32   67   104  97   108  109  101  114  115                                          \nActual Code    | ...  115  104  63   32   84   104  97   116  39   115  32   117  110  112  111  115  115  105  98   108  101\n```\n\n----------------------------------------\n\nTITLE: Asserting Enum Flag Absence with ShouldNotHaveFlag in C#\nDESCRIPTION: This code snippet demonstrates how to use Shouldly's ShouldNotHaveFlag method to verify that an enum value does not contain a specific flag. The example shows attempting to assert that TestEnum.FlagOne does not have the TestEnum.FlagOne flag, which will fail and generate a detailed exception message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/haveFlag.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar actual = TestEnum.FlagOne;\nvar value = TestEnum.FlagOne;\nactual.ShouldNotHaveFlag(value);\n```\n\n----------------------------------------\n\nTITLE: Async Task Division Operation Test\nDESCRIPTION: Creates a Task that performs division operation on homer.Salary by denominator variable. The test expects this operation should not throw a DivideByZeroException but it does.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldNotThrowExamples.ShouldNotThrowFuncOfTask.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar task = Task.Factory.StartNew( () => { var y = homer.Salary / denominator; }); return task;\n```\n\n----------------------------------------\n\nTITLE: Asserting DateTime Inequality with Tolerance in C# using Shouldly\nDESCRIPTION: Illustrates how to use ShouldNotBe for comparing DateTime values with a tolerance. It checks if a date is not within 1.5 hours of another specified date.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/notBe.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar date = new DateTime(2000, 6, 1);\ndate.ShouldNotBe(new(2000, 6, 1, 1, 0, 1), TimeSpan.FromHours(1.5));\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Test Assertion Failures in Shouldly\nDESCRIPTION: Shows the formatted error output from Shouldly when multiple test assertions fail. The errors show validation failures for a property named 'Name' that is null when it should be 'Mr.Burns' and also fails a not-null-or-empty check.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldSatisfyAllConditionsExamples.ShouldSatisfyAllConditionsGeneric.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmrBurns\n    should satisfy all the conditions specified, but does not.\nThe following errors were found ...\n--------------- Error 1 ---------------\n    p => p.Name (null)\n        should not be null or empty\n\n--------------- Error 2 ---------------\n    p => p.Name\n        should be\n    \"Mr.Burns\"\n        but was\n    null\n\n-----------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Asserting False Boolean Values with ShouldBeFalse in C#\nDESCRIPTION: Illustrates the use of ShouldBeFalse method to assert that a boolean value is false. If the assertion fails, it throws an exception with a detailed message.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/trueFalse.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar myValue = true;\nmyValue.ShouldBeFalse();\n```\n\n----------------------------------------\n\nTITLE: Configuring Shouldly DiffEngine\nDESCRIPTION: Code to configure the DiffEngine for ShouldMatchApproval functionality. This enables Shouldly to display visual diffs between expected and actual files during approval testing.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nShouldMatchConfiguration.ShouldMatchApprovedDefaults.ConfigureDiffEngine();\n```\n\n----------------------------------------\n\nTITLE: Testing Division by Zero Exception in C#\nDESCRIPTION: Test case expecting a DivideByZeroException when dividing a salary value by zero. Uses Shouldly testing framework's assertion syntax to verify the exception is thrown.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldThrowExamples.ShouldThrowAction.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar y = homer.Salary / denominator;\n```\n\n----------------------------------------\n\nTITLE: Exception Output for Failed ShouldBeSubsetOf Assertion in Shouldly\nDESCRIPTION: This snippet shows the exception text that is produced when the ShouldBeSubsetOf assertion fails. It clearly indicates which elements are outside the expected subset.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/subsetOf.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsimpsonsKids\n    should be subset of\n[Lisa, Bart, Maggie, Homer, Marge]\n    but\n[Ralph]\n    is outside subset\n```\n\n----------------------------------------\n\nTITLE: Creating a C# Task Performing Division Expected to Throw\nDESCRIPTION: This C# code snippet creates and returns a `Task` using `Task.Factory.StartNew`. The lambda expression assigned to the task calculates `homer.Salary / denominator`. The surrounding text indicates this task is expected to throw a `System.DivideByZeroException`, implying `denominator` is expected to be zero in the test context, but it failed to throw the exception.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldThrowExamples.ShouldThrowFuncOfTask.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar task = Task.Factory.StartNew( () => { var y = homer.Salary / denominator; }); return task;\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Non-Empty State with ShouldNotBeEmpty\nDESCRIPTION: Demonstrates how to use Shouldly's ShouldNotBeEmpty() assertion to verify that a collection contains elements. The example shows a failing test case where an empty list fails the non-empty assertion.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/enumerable/empty.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar moesTavernOnTheWeekend = new List<Person>();\nmoesTavernOnTheWeekend.ShouldNotBeEmpty();\n```\n\n----------------------------------------\n\nTITLE: Validating String Prefix Assertion in Unit Test Output - Plaintext\nDESCRIPTION: This snippet represents an assertion failure message generated by a unit test framework, such as Shouldly, when checking that a target string does not start with a specified prefix. No external dependencies are required for interpreting this output, but it assumes the code under test uses Shouldly assertions. The expected prefix is \\\"Homer\\\", but the actual value was \\\"Homer Simpson\\\". This message is used for debugging failed test assertions, with inputs typically being assertion parameters and the output being a descriptive error.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/StringExamples.ShouldNotStartWith.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntarget\n    should not start with\n\"Homer\"\n    but was\n\"Homer Simpson\"\n```\n\n----------------------------------------\n\nTITLE: Testing String Prefix with ShouldStartWith\nDESCRIPTION: Demonstrates how to assert that a string starts with a specific prefix using Shouldly's ShouldStartWith method. The example shows a failing test where 'Homer' is expected to start with 'Bart'.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/string/startWith.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar target = \"Homer\";\ntarget.ShouldStartWith(\"Bart\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Shouldly Test Failures\nDESCRIPTION: Shows how Shouldly formats multiple test failures for an object named 'mrBurns', including null check and value comparison failures. The output includes clear separation between different errors and displays expected versus actual values.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldSatisfyAllConditionsExamples.ShouldSatisfyAllConditions.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmrBurns\n    should satisfy all the conditions specified, but does not.\nThe following errors were found ...\n--------------- Error 1 ---------------\n    mrBurns.Name (null)\n        should not be null or empty\n\n--------------- Error 2 ---------------\n    mrBurns.Name\n        should be\n    \"Mr.Burns\"\n        but was\n    null\n\n-----------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Asserting Long Integer Inequality in C# with Shouldly\nDESCRIPTION: Demonstrates the use of ShouldNotBe for comparing long integer values. It asserts that a constant long value should not be equal to 1.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/notBe.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nconst long aLong = 1L;\naLong.ShouldNotBe(1);\n```\n\n----------------------------------------\n\nTITLE: Defining Overloads for Shouldly String Methods in C#\nDESCRIPTION: These method definitions for the Shouldly framework lack overloads to customize assertion messages, focusing on the comparison and validation of strings. Dependencies include the Shouldly library, and key parameters like 'actual' and 'expected' represent strings to compare. Outputs are implicit assertions or test failures. Limitations include the absence of overloads for custom assertion messages.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/Shouldly.Tests/ConventionTests/ShouldlyConventions.ShouldHaveCustomMessageOverloads.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nShouldBe(this System.String actual, System.String expected, Shouldly.StringCompareShould option)\n```\n\nLANGUAGE: C#\nCODE:\n```\nShouldBe(this System.String actual, System.String expected, Shouldly.StringCompareShould options)\n```\n\nLANGUAGE: C#\nCODE:\n```\nShouldEndWith(this System.String actual, System.String expected)\n```\n\nLANGUAGE: C#\nCODE:\n```\nShouldMatchApproved(this System.String actual)\n```\n\nLANGUAGE: C#\nCODE:\n```\nShouldNotEndWith(this System.String actual, System.String expected)\n```\n\nLANGUAGE: C#\nCODE:\n```\nShouldNotStartWith(this System.String actual, System.String expected)\n```\n\nLANGUAGE: C#\nCODE:\n```\nShouldStartWith(this System.String actual, System.String expected)\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffEngine in Shouldly\nDESCRIPTION: Initial setup code to configure DiffEngine for displaying comparisons of approved and failed files.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/matchApproved.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// In your test setup\nShouldlyConfiguration.ShouldMatchApprovedDefaults.ConfigureDiffEngine();\n```\n\n----------------------------------------\n\nTITLE: ShouldMatchApproved with Different Content\nDESCRIPTION: Example showing how to test for different content using ShouldMatchApproved().\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/matchApproved.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar simpsonsQuote = \"Me fail english? That's unpossible\";\nsimpsonsQuote.ShouldMatchApproved();\n```\n\n----------------------------------------\n\nTITLE: Basic ShouldMatchApproved Test Example\nDESCRIPTION: Simple example showing how to use ShouldMatchApproved() with a string comparison.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/equality/matchApproved.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar simpsonsQuote = \"Hi Super Nintendo Chalmers\";\nsimpsonsQuote.ShouldMatchApproved();\n```\n\n----------------------------------------\n\nTITLE: Defining ShouldCompleteInException in C#\nDESCRIPTION: This code defines a custom exception class ShouldCompleteInException that inherits from ShouldAssertException. It includes a constructor with a message parameter and is marked as Serializable.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/exceptions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Shouldly\n{\n    [Serializable]\n    public class ShouldCompleteInException : ShouldAssertException\n    {\n        public ShouldCompleteInException(string message) : base(message)\n        {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Program Logic in C#\nDESCRIPTION: Defines a static class Program with a TestWorks method that returns a string. This serves as the main program logic to be tested.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n\npublic static class Program\n{\n    public static string TestWorks()\n    {\n        return \"Works\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Exception Assertion in C#\nDESCRIPTION: Example of how to update code to work with the new return type of Shouldly.Should.Throw<TException> method in Shouldly v1.1.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/BREAKING CHANGES.txt#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nShould.Throw<SomeException>(() => throw new OtherException()).Message.ShouldBe(\"Threw other exception\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Collection Difference in Shouldly Output (Text)\nDESCRIPTION: This snippet showcases the textual output from a Shouldly assertion failure when comparing two collections. It details the expected collection (`[Apu, Homer, Skinner, Barney]`), the actual collection found (`[Homer, Skinner, Barney]`), and highlights the difference, indicating that 'Apu' was expected but missing from the actual result.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeExamples.Enumerables.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```\ntheBeSharps\n    should be\n[Apu, Homer, Skinner, Barney]\n    but was\n[Homer, Skinner, Barney]\n    difference\n[*Homer*, *Skinner*, *Barney*, *]\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Method Grouping for Should.Throw in C#\nDESCRIPTION: Example of how to update code to work with the new async overloads of Should.Throw method in Shouldly v2.0.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/BREAKING CHANGES.txt#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nShould.Throw(() => service.DoSomething)\n```\n\n----------------------------------------\n\nTITLE: Testing Numeric Range with Shouldly in C#\nDESCRIPTION: Demonstrates using Shouldly's fluent assertion syntax to verify that a salary value should not fall within a specified range. The test is checking that mrBurns.Salary (30000) should not be between 30000 and 40000, but the assertion fails since the value is within the range.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeInRangeExamples.ShouldNotBeInRange.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmrBurns.Salary\n    should not be in range\n{ from = 30000, to = 40000 }\n    but was\n30000\n```\n\n----------------------------------------\n\nTITLE: Defining Project Structure in C#\nDESCRIPTION: Shows the basic project structure for a C# solution with a program and test directory.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/project-name\n    project-name.sln\n    /program\n        ...\n    /test\n```\n\n----------------------------------------\n\nTITLE: Asserting Exception on Object Initialization with Shouldly in C#\nDESCRIPTION: This snippet asserts that creating a new Person instance with the argument \\\"Homer\\\" should throw a System.ArgumentNullException using the Shouldly testing library. It requires the Shouldly and xUnit (or NUnit/MSTest) frameworks as dependencies. The test verifies that the Person constructor enforces a non-null contract for its parameters, expecting an ArgumentNullException if the contract is violated. Inputs include the person name (here, \\\"Homer\\\"); if the exception is not thrown, the test fails.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldThrowExamples.ShouldThrowFunc.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n`new Person(\\\"Homer\\\")`\n    should throw\nSystem.ArgumentNullException\n    but did not\n```\n\n----------------------------------------\n\nTITLE: Installing Shouldly DiffEngine Package\nDESCRIPTION: Command for installing the Shouldly.DiffEngine package which enables diff displays for the ShouldMatchApproval method. This enhances the visual comparison of expected and actual files.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Shouldly.DiffEngine\n```\n\n----------------------------------------\n\nTITLE: Example Shouldly Failure: `ShouldBeGreaterThanOrEqualTo` Assertion\nDESCRIPTION: This text shows an example failure message generated by the Shouldly testing library in a .NET environment. It indicates that the value of `mrBurns.Salary` (299999999) did not meet the expectation of being greater than or equal to 300000000. This formatted output helps developers quickly understand why a test failed.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeGreater_LessThanExamples.ShouldBeGreaterThanOrEqualTo.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmrBurns.Salary\n    should be greater than or equal to\n300000000\n    but was\n299999999\n```\n\n----------------------------------------\n\nTITLE: Installing Shouldly via NuGet Package Manager\nDESCRIPTION: Instructions for installing Shouldly using the Package Manager Console in Visual Studio. This adds the Shouldly assertion library to your .NET project.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Shouldly\n```\n\n----------------------------------------\n\nTITLE: Checking Null Reference with Shouldly\nDESCRIPTION: Shows a test failure output from Shouldly where a reference variable 'myRef' was expected to be null but contained a string value 'Hello World'. Illustrates Shouldly's human-readable test failure message format.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeNullNotNullExamples.ShouldBeNull.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmyRef\n    should be null but was\n\"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Traditional Assert Error Message Example\nDESCRIPTION: Shows the error message produced by traditional assertion frameworks when the assertion fails. The message is minimal and lacks context.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nExpected 1337 but was 0\n```\n\n----------------------------------------\n\nTITLE: Dividing with Potential Exception Using Shouldly in C#\nDESCRIPTION: This snippet demonstrates a division operation where an exception is expected if the denominator is zero. It is typically used in the context of unit testing with the Shouldly library to verify that an exception (DivideByZeroException) is thrown and contains the expected message. Dependencies include an object 'homer' with a Salary property and a variable 'denominator', both of which must be defined elsewhere; input values should be set up to trigger the test scenario. Outputs include an exception if denominator is zero, useful for validating application robustness to mathematical errors.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldNotThrowExamples.ShouldNotThrowAction.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\n`var y = homer.Salary / denominator;`\n```\n\n----------------------------------------\n\nTITLE: Example Shouldly Failure: Expected No Throw, Got ArgumentNullException\nDESCRIPTION: This snippet illustrates a typical failure message from the Shouldly .NET testing library. It indicates that the code `func()` was asserted to not throw any exception, but it violated this assertion by throwing a `System.ArgumentNullException`. The message includes the exception type and its specific message content, aiding in diagnosing the test failure.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldNotThrowExamples.ShouldNotThrowFuncExtension.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`func()`\n    should not throw but threw\nSystem.ArgumentNullException\n    with message\n\"Value cannot be null. (Parameter 'name')\"\n```\n\n----------------------------------------\n\nTITLE: Collection Membership Test Output\nDESCRIPTION: Shows the output of a failed test assertion checking that 'clubOfNoHomers' should not contain 'Homer', but the actual collection contains multiple instances of 'Homer' along with other members.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/EnumerableShouldNotContainExamples.ShouldNotContain.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nclubOfNoHomers\n    should not contain\nHomer\n    but was actually\n[Homer, Homer, Lenny, carl]\n```\n\n----------------------------------------\n\nTITLE: Example Shouldly Assertion Failure Output (should be same as)\nDESCRIPTION: This text snippet illustrates the output format generated by the Shouldly testing framework when an assertion using `should be same as` fails. It shows the variable or expression being tested (`principleSkinner`), the assertion type (`should be same as`), the expected value (`Seymour Skinner`), and the actual value found (`Armin Tamzarian`).\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeSameAsExamples.ShouldBeSameAs.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nprincipleSkinner\n    should be same as\nSeymour Skinner\n    but was\nArmin Tamzarian\n```\n\n----------------------------------------\n\nTITLE: Asserting Dictionary Key-Value Pair\nDESCRIPTION: Test case verifying that a dictionary named 'websters' should not contain the key 'Chazzwazzers' with the specified value about Australian bull frogs, but the assertion fails because it does contain the pair.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/DictionaryShouldContainKeyAndValueExamples.ShouldNotContainKeyAndValue.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nwebsters\n    should not contain key\n\"Chazzwazzers\"\n    with value\n\"What Australians would have called a bull frog.\"\n    but does\n```\n\n----------------------------------------\n\nTITLE: Reporting Assertion Failure with Shouldly - Plaintext\nDESCRIPTION: Shows the format of an error message generated when a test using Shouldly fails because the checked target is not empty. The message includes the assertion context ('target should be empty but was') and the unexpected actual value ('Homer'). There are no dependencies required, as this is output rather than code to execute.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/StringExamples.ShouldBeEmpty.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntarget\n    should be empty but was\n\"Homer\"\n```\n\n----------------------------------------\n\nTITLE: Example Shouldly Assertion Failure Output (Length Check)\nDESCRIPTION: This snippet displays an example output message from the Shouldly testing library when an assertion fails. It indicates that an object, after being confirmed as non-null (`ShouldNotBeNull()`), was expected to have a `Length` of 5, but its actual `Length` was 4. This output helps diagnose test failures by clearly showing the discrepancy.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeNullNotNullExamples.ShouldNotBeNullWithChaining.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyRef.ShouldNotBeNull().Length\n    should be\n5\n    but was\n4\n```\n\n----------------------------------------\n\nTITLE: Example Shouldly Assertion Failure Output\nDESCRIPTION: This snippet displays a typical output message from the Shouldly assertion library when a test assertion fails. It highlights that a target object or variable was expected to be null, but instead contained the string value \"Homer\". This format helps developers quickly identify the cause of the test failure.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/StringExamples.ShouldBeNull.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntarget\n    should be null but was\n\"Homer\"\n```\n\n----------------------------------------\n\nTITLE: Installing Shouldly via NuGet Package Manager\nDESCRIPTION: Command for installing Shouldly through the NuGet Package Manager Console in Visual Studio. This is the standard way to add Shouldly to .NET Framework projects.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Shouldly\n```\n\n----------------------------------------\n\nTITLE: Displaying Subset Assertion Failure Message\nDESCRIPTION: Shows Shouldly's formatted error message when asserting that one collection should be a subset of another. The message clearly indicates that 'Ralph' is outside the expected subset of Simpson family members.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/EnumerableShouldBeSubsetOfExamples.ShouldBeSubsetOf.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsimpsonsKids\n    should be subset of\n[Lisa, Bart, Maggie, Homer, Marge]\n    but\n[Ralph]\n    is outside subset\n```\n\n----------------------------------------\n\nTITLE: Failed Shouldly Assertion Message\nDESCRIPTION: Shows an error message from Shouldly test framework when checking if a variable called 'moesTavernOnTheWeekend' is not empty, but the assertion failed because the value was empty.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/EnumerableShouldBeEmptyExamples.ShouldNotBeEmpty.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmoesTavernOnTheWeekend\n    should not be empty but was\n```\n\n----------------------------------------\n\nTITLE: Illustrating Shouldly 'ShouldBeOneOf' Assertion Failure (Case Sensitivity)\nDESCRIPTION: This snippet displays the output message from a failed Shouldly `ShouldBeOneOf` assertion. It indicates that the value 'apu' was expected to be present in the collection ['Homer', 'Skinner', 'Barney'], but the actual value found was 'Apu', highlighting a common case-sensitivity issue in comparisons. This output format helps developers quickly diagnose assertion failures in .NET tests using Shouldly.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeOneOfExamples.ShouldBeOneOf.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napu\n    should be one of\n[Homer, Skinner, Barney]\n    but was\nApu\n```\n\n----------------------------------------\n\nTITLE: Asserting Dictionary Key-Value Pair with Shouldly in C#\nDESCRIPTION: This snippet demonstrates how to use Shouldly to assert that a dictionary contains a specific key-value pair. It checks if the dictionary 'websters' contains the key 'Cromulent' with an expected value, and provides a custom error message if the assertion fails.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/DictionaryShouldContainKeyAndValueExamples.ShouldContainKeyAndValue.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nwebsters\n    should contain key\n\"Cromulent\"\n    with value\n\"Fine, acceptable.\"\n    but value was\n\"I never heard the word before moving to Springfield.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Failure Message for Duplicate Values\nDESCRIPTION: Shows the output format of a Shouldly test assertion failure message when checking for unique values in a collection. The message indicates that 'Maggie' was found as a duplicate in the 'simpsonsKids' collection.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/EnumerableShouldBeUniqueExamples.ShouldBeUnique.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsimpsonsKids\n    should be unique but\n[Maggie]\n    was duplicated\n```\n\n----------------------------------------\n\nTITLE: Dictionary Key Non-Existence Check using Shouldly\nDESCRIPTION: A test assertion verifying that a dictionary named 'websters' does not contain the key 'Chazzwazzers'. The assertion appears to have failed since the message indicates the key was found when it shouldn't have been.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/DictionaryShouldContainKeyExamples.ShouldNotContainKey.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nwebsters\n    should not contain key\n\"Chazzwazzers\"\n    but does\n```\n\n----------------------------------------\n\nTITLE: Test Assertion Output Format\nDESCRIPTION: Displays a formatted test failure message showing the actual value (myValue) compared against an expected boolean condition. The output is structured to clearly show what was expected (True) versus what was actually found (False).\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldBeTrueFalseExamples.ShouldBeTrue.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyValue\n    should be\nTrue\n    but was\nFalse\n```\n\n----------------------------------------\n\nTITLE: Displaying Exception Test Failure Message\nDESCRIPTION: Shows the formatted output when a test expects a DivideByZeroException to be thrown by an action but no exception occurs. This represents a test failure message from the Shouldly testing framework.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldThrowExamples.ShouldThrowActionExtension.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`action()`\n    should throw\nSystem.DivideByZeroException\n    but did not\n```\n\n----------------------------------------\n\nTITLE: Shouldly Failed Exception Assertion Output Example\nDESCRIPTION: This text shows the standard output format from a failed Shouldly assertion in a .NET context. It indicates that the code under test (`func()`) was expected to throw `System.ArgumentNullException` but failed to do so.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldThrowExamples.ShouldThrowFuncExtension.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`func()`\n    should throw\nSystem.ArgumentNullException\n    but did not\n```\n\n----------------------------------------\n\nTITLE: Shouldly Error Message for Collection Emptiness Test\nDESCRIPTION: A formatted error message from the Shouldly testing framework showing a failed assertion. The error occurs when checking if 'powerPlantOnTheWeekend' should be empty, but it contains one item ('Homer').\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/EnumerableShouldBeEmptyExamples.ShouldBeEmpty.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npowerPlantOnTheWeekend\n    should be empty but had\n1\n    item and was\n[Homer]\n```\n\n----------------------------------------\n\nTITLE: Approving ShouldMatchApproved Changes using Windows Command Prompt\nDESCRIPTION: This Windows command prompt command copies the received file (`.received.txt`) generated during a Shouldly test to the approved file (`.approved.txt`), effectively approving the new output. The `/Y` flag ensures the overwrite happens without prompting for confirmation. This is typically run when the received output is deemed correct and should become the new baseline.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldMatchApprovedExamples.ApprovedFileIsDifferent.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ncopy /Y \"C:\\PathToCode\\shouldly\\src\\DocumentationExamples\\ShouldMatchApprovedExamples.ApprovedFileIsDifferent.received.txt\" \"C:\\PathToCode\\shouldly\\src\\DocumentationExamples\\ShouldMatchApprovedExamples.ApprovedFileIsDifferent.approved.txt\"\n```\n\n----------------------------------------\n\nTITLE: Validating Target String in Build Script - Pseudocode\nDESCRIPTION: This snippet checks that a 'target' string is provided and not left null or empty, typically within a build or task automation script. It is written in pseudocode to express intent rather than implementation, with no explicit dependencies other than the scripting framework interpreting this code. The key parameter is 'target', and the output would be an error or halt in execution if the validation fails; otherwise, the script proceeds. Limitations include lack of detail on how errors are reported or handled.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/StringExamples.ShouldNotBeNullOrEmpty.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\ntarget (\"\")\n    should not be null or empty\n```\n\n----------------------------------------\n\nTITLE: Asserting Collection Contains Element with Salary Condition using Shouldly\nDESCRIPTION: A test assertion verifying that a collection named 'millionaires' contains at least one element with a salary greater than 1 million. The assertion has failed, indicating no such element exists in the collection.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/EnumerableShouldContainExamples.ShouldContain_Predicate.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmillionaires\n    should contain an element satisfying the condition\n(m.Salary > 1000000)\n    but does not\n```\n\n----------------------------------------\n\nTITLE: Updating Type Casting for ShouldBeGreaterThan and ShouldBeLessThan in C#\nDESCRIPTION: Example of how to update code to work with the new IComparable<T> constraint on ShouldBeGreaterThan and ShouldBeLessThan methods in Shouldly v2.0.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/BREAKING CHANGES.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n((float)1).ShouldBeLessThan(3f)\n```\n\n----------------------------------------\n\nTITLE: Approving Shouldly Test Output using Windows Batch `copy` Command\nDESCRIPTION: This Windows Batch command utilizes `copy /Y` to approve the results of a Shouldly `ShouldMatchApproved` test when the approved file is missing. It copies the generated `.received.txt` file (actual output) to the corresponding `.approved.txt` file (expected baseline), establishing the current output as the standard for future test runs. The `/Y` flag suppresses confirmation prompts for overwriting.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/DocumentationExamples/CodeExamples/ShouldMatchApprovedExamples.ApprovedFileDoesNotExist.exceptionText.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\ncopy /Y \"C:\\PathToCode\\shouldly\\src\\DocumentationExamples\\ShouldMatchApprovedExamples.ApprovedFileDoesNotExist.received.txt\" \"C:\\PathToCode\\shouldly\\src\\DocumentationExamples\\ShouldMatchApprovedExamples.ApprovedFileDoesNotExist.approved.txt\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Exception Throw in Shouldly Test (Failed Assertion)\nDESCRIPTION: This text describes a failed assertion from a test using the Shouldly framework. The test intended to verify that executing the `doSomething()` task would result in a `System.DivideByZeroException`. However, the output indicates that the expected exception was not thrown, leading to test failure.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/src/Shouldly.Tests/ShouldThrowAsync/FuncOfTaskScenarioAsync.ShouldThrowAsync.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTask `doSomething()`\n    should throw\nSystem.DivideByZeroException\n    but did not\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid ShouldNotBeNull Usage in C#\nDESCRIPTION: This code snippet shows an example of invalid usage of ShouldNotBeNull on a non-nullable type, which was allowed in previous versions but will not compile in version 4 due to the added class constraint.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/upgrade/3to4.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconst long value = 1;\n\nvalue.ShouldNotBeNull();\n```\n\n----------------------------------------\n\nTITLE: Traditional Assert Example in C#\nDESCRIPTION: Shows the traditional NUnit assertion syntax for comparison with Shouldly. This demonstrates the more verbose approach that produces less detailed error messages.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAssert.That(contestant.Points, Is.EqualTo(1337));\n```\n\n----------------------------------------\n\nTITLE: ShouldCompleteIn Exception Output Format\nDESCRIPTION: Shows the formatted exception message that gets thrown when the ShouldCompleteIn assertion fails. The message includes the timeout duration and any additional context provided.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/documentation/completeIn.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\nDelegate\n    should complete in\n00:00:00.5000000\n    but did not\n\nAdditional Info:\n    Some additional context\n```\n\n----------------------------------------\n\nTITLE: Installing Shouldly via .NET CLI\nDESCRIPTION: Command for installing Shouldly using the .NET Core command line interface. This is the preferred method for adding Shouldly to .NET Core projects.\nSOURCE: https://github.com/shouldly/shouldly/blob/master/documentation/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Shouldly\n```"
  }
]