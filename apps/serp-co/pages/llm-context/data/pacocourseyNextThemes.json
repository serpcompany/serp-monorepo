[
  {
    "owner": "pacocoursey",
    "repo": "next-themes",
    "content": "TITLE: Using the useTheme Hook for Theme Switching\nDESCRIPTION: React component example showing how to use the useTheme hook to access the current theme and provide UI for changing themes.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from 'next-themes'\n\nconst ThemeChanger = () => {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <div>\n      The current theme is: {theme}\n      <button onClick={() => setTheme('light')}>Light Mode</button>\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook for Theme Management\nDESCRIPTION: Example of how to use the useTheme hook to access and change the current theme in a React component.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from 'next-themes'\n\nconst ThemeChanger = () => {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <div>\n      The current theme is: {theme}\n      <button onClick={() => setTheme('light')}>Light Mode</button>\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider in pages/ directory\nDESCRIPTION: Implementation of the ThemeProvider component in a Next.js custom App to enable theme support in the pages/ directory structure.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport { ThemeProvider } from 'next-themes'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ThemeProvider>\n      <Component {...pageProps} />\n    </ThemeProvider>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider in app/ directory\nDESCRIPTION: Implementation of the ThemeProvider component in a Next.js app/ directory layout with suppressHydrationWarning to prevent hydration errors.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// app/layout.jsx\nimport { ThemeProvider } from 'next-themes'\n\nexport default function Layout({ children }) {\n  return (\n    <html suppressHydrationWarning>\n      <head />\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode with ThemeProvider in pages/_app.js\nDESCRIPTION: Integration of ThemeProvider from next-themes into a Next.js custom App file to enable dark mode support.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport { ThemeProvider } from 'next-themes'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ThemeProvider>\n      <Component {...pageProps} />\n    </ThemeProvider>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode with ThemeProvider in app/layout.jsx\nDESCRIPTION: Integration of ThemeProvider from next-themes into a Next.js 13 app directory layout file to enable dark mode support.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// app/layout.jsx\nimport { ThemeProvider } from 'next-themes'\n\nexport default function Layout({ children }) {\n  return (\n    <html suppressHydrationWarning>\n      <head />\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Theming with data-theme Attribute\nDESCRIPTION: CSS implementation that defines theme variables for light and dark modes using the data-theme attribute that next-themes controls.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  /* Your default theme */\n  --background: white;\n  --foreground: black;\n}\n\n[data-theme='dark'] {\n  --background: black;\n  --foreground: white;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for Theme Styling\nDESCRIPTION: Example CSS demonstrating how to style an app based on the data-theme attribute set by next-themes.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  /* Your default theme */\n  --background: white;\n  --foreground: black;\n}\n\n[data-theme='dark'] {\n  --background: black;\n  --foreground: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Themes Support\nDESCRIPTION: Examples of configuring ThemeProvider to support multiple custom themes beyond just light and dark modes.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemeProvider themes={['pink', 'red', 'blue']}>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemeProvider themes={['pink', 'red', 'blue', 'light', 'dark']}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Themes Support\nDESCRIPTION: Examples of configuring ThemeProvider to support multiple custom themes beyond just light and dark modes\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemeProvider themes={['pink', 'red', 'blue']}>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemeProvider themes={['pink', 'red', 'blue', 'light', 'dark']}>\n```\n\n----------------------------------------\n\nTITLE: Safe Theme Implementation with Hydration\nDESCRIPTION: Example showing how to properly handle theme switching while avoiding hydration mismatches using useState and useEffect.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\nimport { useTheme } from 'next-themes'\n\nconst ThemeSwitch = () => {\n  const [mounted, setMounted] = useState(false)\n  const { theme, setTheme } = useTheme()\n\n  // useEffect only runs on the client, so now we can safely show the UI\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if (!mounted) {\n    return null\n  }\n\n  return (\n    <select value={theme} onChange={e => setTheme(e.target.value)}>\n      <option value=\"system\">System</option>\n      <option value=\"dark\">Dark</option>\n      <option value=\"light\">Light</option>\n    </select>\n  )\n}\n\nexport default ThemeSwitch\n```\n\n----------------------------------------\n\nTITLE: Safe Theme Switch Implementation\nDESCRIPTION: Correct implementation of theme switching that avoids hydration mismatch\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\nimport { useTheme } from 'next-themes'\n\nconst ThemeSwitch = () => {\n  const [mounted, setMounted] = useState(false)\n  const { theme, setTheme } = useTheme()\n\n  // useEffect only runs on the client, so now we can safely show the UI\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if (!mounted) {\n    return null\n  }\n\n  return (\n    <select value={theme} onChange={e => setTheme(e.target.value)}>\n      <option value=\"system\">System</option>\n      <option value=\"dark\">Dark</option>\n      <option value=\"light\">Light</option>\n    </select>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Applying Forced Theme in _app.js\nDESCRIPTION: Example of how to configure the ThemeProvider in _app.js to respect forced themes set on individual page components.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ThemeProvider forcedTheme={Component.theme || null}>\n      <Component {...pageProps} />\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Theme Toggle UI When Theme is Forced\nDESCRIPTION: Code example showing how to disable theme switching UI elements when a forced theme is active on the current page.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst { forcedTheme } = useTheme()\n\n// Theme is forced, we shouldn't allow user to change the theme\nconst disabled = !!forcedTheme\n```\n\n----------------------------------------\n\nTITLE: Disabling Theme Change UI for Forced Themes\nDESCRIPTION: Example of how to disable theme switching UI when a theme is forced on a page.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst { forcedTheme } = useTheme()\n\n// Theme is forced, we shouldn't allow user to change the theme\nconst disabled = !!forcedTheme\n```\n\n----------------------------------------\n\nTITLE: Forcing a Page to Use a Specific Theme\nDESCRIPTION: Example of setting a static theme property on a page component to force that page to always use a specific theme, regardless of user preference.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// pages/awesome-page.js\n\nconst Page = () => { ... }\nPage.theme = 'dark'\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Forcing a Theme on a Next.js Page\nDESCRIPTION: Demonstrates how to force a specific theme on a Next.js page component and handle it in _app.js.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// pages/awesome-page.js\n\nconst Page = () => { ... }\nPage.theme = 'dark'\nexport default Page\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ThemeProvider forcedTheme={Component.theme || null}>\n      <Component {...pageProps} />\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Components Integration\nDESCRIPTION: Example of integrating next-themes with Styled Components in a Next.js _app.js file.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport { createGlobalStyle } from 'styled-components'\nimport { ThemeProvider } from 'next-themes'\n\n// Your themeing variables\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    --fg: #000;\n    --bg: #fff;\n  }\n\n  [data-theme=\"dark\"] {\n    --fg: #fff;\n    --bg: #000;\n  }\n`\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <GlobalStyle />\n      <ThemeProvider>\n        <Component {...pageProps} />\n      </ThemeProvider>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Components Integration\nDESCRIPTION: Example of integrating next-themes with Styled Components in a Next.js _app.js file\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport { createGlobalStyle } from 'styled-components'\nimport { ThemeProvider } from 'next-themes'\n\n// Your themeing variables\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    --fg: #000;\n    --bg: #fff;\n  }\n\n  [data-theme=\"dark\"] {\n    --fg: #fff;\n    --bg: #000;\n  }\n`\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <GlobalStyle />\n      <ThemeProvider>\n        <Component {...pageProps} />\n      </ThemeProvider>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ThemeProvider with Cloudflare Rocket Loader\nDESCRIPTION: Implementation example showing how to configure ThemeProvider to work with Cloudflare Rocket Loader by adding data-cfasync attribute.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemeProvider scriptProps={{ 'data-cfasync': 'false' }}>\n```\n\n----------------------------------------\n\nTITLE: Configuring ThemeProvider with Cloudflare Rocket Loader\nDESCRIPTION: Example showing how to configure ThemeProvider to work with Cloudflare Rocket Loader by adding data-cfasync attribute\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemeProvider scriptProps={{ 'data-cfasync': 'false' }}>\n```\n\n----------------------------------------\n\nTITLE: Client-Side Theme Switch Loading\nDESCRIPTION: Example of lazy loading theme switch component using next/dynamic\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport dynamic from 'next/dynamic'\n\nconst ThemeSwitch = dynamic(() => import('./ThemeSwitch'), { ssr: false })\n\nconst ThemePage = () => {\n  return (\n    <div>\n      <ThemeSwitch />\n    </div>\n  )\n}\n\nexport default ThemePage\n```\n\n----------------------------------------\n\nTITLE: CSS Theme Implementation Without Variables\nDESCRIPTION: Example of implementing themes using direct CSS values without CSS variables.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nhtml,\nbody {\n  color: #000;\n  background: #fff;\n}\n\n[data-theme='dark'],\n[data-theme='dark'] body {\n  color: #fff;\n  background: #000;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Theme Implementation\nDESCRIPTION: Example of implementing themes using direct CSS values without CSS variables\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_11\n\nLANGUAGE: css\nCODE:\n```\nhtml,\nbody {\n  color: #000;\n  background: #fff;\n}\n\n[data-theme='dark'],\n[data-theme='dark'] body {\n  color: #fff;\n  background: #000;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Custom App Structure\nDESCRIPTION: A minimal example of a Next.js custom App component structure before adding theme support.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Custom App Setup\nDESCRIPTION: A simple implementation of a custom _app.js file in Next.js, which is required to use next-themes.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js app/ directory Layout Structure\nDESCRIPTION: A minimal example of a Next.js app/ directory layout component structure before adding theme support.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// app/layout.jsx\nexport default function Layout({ children }) {\n  return (\n    <html>\n      <head />\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js 13 app/layout.jsx Setup\nDESCRIPTION: A simple implementation of a layout.jsx file in Next.js 13 app directory structure.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// app/layout.jsx\nexport default function Layout({ children }) {\n  return (\n    <html>\n      <head />\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing next-themes with npm or yarn\nDESCRIPTION: Command line instructions for installing the next-themes package using either npm or yarn package managers.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install next-themes\n# or\n$ yarn add next-themes\n```\n\n----------------------------------------\n\nTITLE: Installing next-themes via npm or yarn\nDESCRIPTION: Command-line instructions for installing the next-themes package using either npm or yarn package managers.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install next-themes\n# or\n$ yarn add next-themes\n```\n\n----------------------------------------\n\nTITLE: Unsafe Theme Switch Implementation\nDESCRIPTION: Example showing incorrect implementation that causes hydration mismatch\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/next-themes/README.md#2025-04-11_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from 'next-themes'\n\n// Do NOT use this! It will throw a hydration mismatch error.\nconst ThemeSwitch = () => {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <select value={theme} onChange={e => setTheme(e.target.value)}>\n      <option value=\"system\">System</option>\n      <option value=\"dark\">Dark</option>\n      <option value=\"light\">Light</option>\n    </select>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Next-Themes Example\nDESCRIPTION: Documentation header explaining the purpose of the example project for integrating next-themes with Next.js app directory.\nSOURCE: https://github.com/pacocoursey/next-themes/blob/main/examples/with-app-dir/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# with-app-dir example\n\n> An example on how to use `next-themes` with `next.js` app directory.\n```"
  }
]