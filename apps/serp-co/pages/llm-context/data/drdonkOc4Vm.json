[
  {
    "owner": "drdonk",
    "repo": "oc4vm",
    "content": "TITLE: Running QEMU macOS VM with OC4VM\nDESCRIPTION: Bash command to run a macOS virtual machine using QEMU with OC4VM. It demonstrates the usage of the qemu-macos script with various parameters for configuring the VM.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqemu-macos [-a {hvf | kvm | tcg}] [-m <memory-size>] [-d <macos-image>] [-n <number-cores>][-o <opencore-image>] [-r <recovery-image>] [-s] [-v password]\n```\n\n----------------------------------------\n\nTITLE: Using amdcpu Tool for AMD Core Configuration in OC4VM\nDESCRIPTION: The amdcpu utility modifies AMD cores patch settings in config.plist. It requires the number of cores as an argument, with valid values being 1, 2, 4, 8, 16, 24, 32, or 64. The VM's core count must match this setting to avoid kernel panics.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/tools.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: amdcpu <cores>\nValid values: 1, 2, 4, 8, 16, 24, 32, 64\n```\n\n----------------------------------------\n\nTITLE: Configuring System Integrity Protection with siputil in OC4VM\nDESCRIPTION: The siputil tool modifies macOS kernel csrconfig SIP settings in config.plist. It can clear, disable, enable, or display the current SIP configuration. Changes require a system restart to take effect.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/tools.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOC4VM siputil\n-------------\n\nusage: siputil <options> <command>\nModify the System Integrity Protection configuration stored in the OpenCore config.plist.\nAll configuration changes apply to the entire machine.\n\nAvailable options:\n-h/--help       Show this help\n-f/--file       Override the default config.plist location\n-d/--debug      Show some additonal debugging information\n\nAvailable commands:\n\n    clear\n        Clear the existing configuration.\n    disable\n        Disable the protection on the machine.\n    enable\n        Enable the protection on the machine.\n    status\n        Display the current configuration.\n```\n\n----------------------------------------\n\nTITLE: Configuring Mac mini 2018 VMware Spoofing\nDESCRIPTION: VMware VMX configuration to spoof a Mac mini 2018 system identity including board ID, MLB, ROM, hardware model and serial number settings.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/notes.md#2025-04-20_snippet_0\n\nLANGUAGE: vmx\nCODE:\n```\n# Mac mini 2018\nboard-id = \"Mac-7BA5B2DFE22DDD8C\"\nboard-id.reflectHost = \"FALSE\"\nefi.nvram.var.MLB = \"C07801609GUKXPGJA\"\nefi.nvram.var.MLB.reflectHost = \"FALSE\"\nefi.nvram.var.ROM = \"EFA3707116CA\"\nefi.nvram.var.ROM.reflectHost = \"FALSE\"\nhw.model = \"Macmini8,1\"\nhw.model.reflectHost = \"FALSE\"\nserialNumber = \"C07W20B5JYVX\"\nserialNumber.reflectHost = \"FALSE\"\nsmbios.reflectHost = \"TRUE\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Building OC4VM\nDESCRIPTION: Bash commands to install the required software dependencies for building OC4VM using Homebrew package manager on macOS.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install qemu\nbrew install p7zip\nbrew install go\n```\n\n----------------------------------------\n\nTITLE: Core Count Patch Examples for AMD CPUs\nDESCRIPTION: Demonstration of how to modify the Replace value in core count patches based on CPU cores and macOS version. Values need to be adjusted according to the physical core count of the CPU.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/software/AMD/README.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nB8 06 0000 0000 / BA 06 0000 0000 / BA 06 0000 0090 / BA 06 0000 00\n```\n\n----------------------------------------\n\nTITLE: Managing Boot Arguments with bootargs Tool in OC4VM\nDESCRIPTION: The bootargs utility modifies macOS kernel boot-args in config.plist. It can get or set boot arguments. Changes require a system restart to take effect and override NVRAM values.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/tools.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOC4VM bootargs\n--------------\nUsage: bootargs [options] [value]\nOptions:\n    -get            Print boot-args variable\n    -set value      Set the boot-args variable\n    -h              Print this help message\n```\n\n----------------------------------------\n\nTITLE: Toggling VMHide with vmhide Tool in OC4VM\nDESCRIPTION: The vmhide tool toggles VMHide.kext on and off to mask the VMM bit in the guest macOS. It can enable or disable VMHide, with changes requiring a system restart to take effect.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/tools.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nOC4VM vmhide\n------------\nUsage: vmhide [options]\nOptions:\n    -on            Enable VMHide\n    -off           Disable VMHide\n    -h             Print this help message\n```\n\n----------------------------------------\n\nTITLE: Core Count Hexadecimal Values\nDESCRIPTION: Mapping of physical CPU core counts to their hexadecimal representation for use in kernel patches. Used to modify the Replace value in the core count patches.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/software/AMD/README.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n4 Core   = 04\n6 Core   = 06\n8 Core   = 08\n12 Core  = 0C\n16 Core  = 10\n24 Core  = 18\n32 Core  = 20\n```\n\n----------------------------------------\n\nTITLE: Building OC4VM\nDESCRIPTION: Bash command to build OC4VM by running the make.sh script in the cloned repository.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/readme.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./make.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning OC4VM Repository\nDESCRIPTION: Git command to clone the OC4VM repository from GitHub to the local machine.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/DrDonk/OC4VM.git\n```\n\n----------------------------------------\n\nTITLE: Base64 Binary Encoding Commands\nDESCRIPTION: Shell commands for encoding and decoding base64 binary values, used for debugging and configuration purposes.\nSOURCE: https://github.com/drdonk/oc4vm/blob/main/notes.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nprint 0xBA00000000 | xxd -r | base64\nprint AAAf/w== | base64 -D | xxd\n```"
  }
]