[
  {
    "owner": "logaretm",
    "repo": "vee-validate",
    "content": "TITLE: Complete Vue Component with Email Validation and Error Display\nDESCRIPTION: This snippet demonstrates a full Vue component implementing email validation using vee-validate. It includes the template with Form, Field, and ErrorMessage components, and the script section with component registration and validation logic.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <Form @submit=\"onSubmit\">\n      <Field name=\"email\" type=\"email\" :rules=\"validateEmail\" />\n      <ErrorMessage name=\"email\" />\n\n      <button>Sign up</button>\n    </Form>\n  </div>\n</template>\n\n<script>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\n\nexport default {\n  components: {\n    Form,\n    Field,\n    ErrorMessage,\n  },\n  methods: {\n    onSubmit(values) {\n      console.log(values, null, 2);\n    },\n    validateEmail(value) {\n      // if the field is empty\n      if (!value) {\n        return 'This field is required';\n      }\n\n      // if the field is not a valid email\n      const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n      if (!regex.test(value)) {\n        return 'This field must be a valid email';\n      }\n\n      // All is good\n      return true;\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using vee-validate with Vue.js Composition API\nDESCRIPTION: Example of creating a form using vee-validate's Composition API. It demonstrates form setup, field definition, validation, and submission handling.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/vee-validate/README.md#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useForm } from 'vee-validate';\n\n// Validation, or use `yup` or `zod`\nfunction required(value) {\n  return value ? true : 'This field is required';\n}\n\n// Create the form\nconst { defineField, handleSubmit, errors } = useForm({\n  validationSchema: {\n    field: required,\n  },\n});\n\n// Define fields\nconst [field, fieldProps] = defineField('field');\n\n// Submit handler\nconst onSubmit = handleSubmit(values => {\n  // Submit to API\n  console.log(values);\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    <input v-model=\"field\" v-bind=\"fieldProps\" />\n    <span>{{ errors.field }}</span>\n\n    <button>Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useFieldArray in Vue with VeeValidate\nDESCRIPTION: A complete example showing how to use the useFieldArray composable to manage a dynamic list of URL links with add and remove functionality.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <form @submit=\"onSubmit\" novalidate>\n    <div v-for=\"(field, idx) in fields\" :key=\"field.key\">\n      <Field :name=\"`links[${idx}].url`\" type=\"url\" />\n\n      <button type=\"button\" @click=\"remove(idx)\">Remove</button>\n    </div>\n\n    <button type=\"button\" @click=\"push({ url: '' })\">Add</button>\n\n    <button>Submit</button>\n  </form>\n</template>\n\n<script setup>\nimport { Field, useForm, useFieldArray } from 'vee-validate';\n\nconst { handleSubmit } = useForm({\n  initialValues: {\n    links: [{ id: 1, url: 'https://github.com/logaretm' }],\n  },\n});\n\nconst { remove, push, fields } = useFieldArray('links');\nconst onSubmit = handleSubmit(values => {\n  console.log(JSON.stringify(values, null, 2));\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Yup Schema in Vue\nDESCRIPTION: Complete example of form validation using yup schema in a Vue component\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"submit\" :validation-schema=\"schema\">\n    <Field name=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" type=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().required().email(),\n  password: yup.string().required().min(8),\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: VeeValidate Form Implementation using Component API\nDESCRIPTION: Example demonstrating form validation using VeeValidate's declarative components approach with Field and Form components.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/README.md#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Field, Form } from 'vee-validate';\n\n// Validation, or use `yup` or `zod`\nfunction required(value) {\n  return value ? true : 'This field is required';\n}\n\n// Submit handler\nfunction onSubmit(values) {\n  // Submit to API\n  console.log(values);\n}\n</script>\n\n<template>\n  <Form v-slot=\"{ errors }\" @submit=\"onSubmit\">\n    <Field name=\"field\" :rules=\"required\" />\n\n    <span>{{ errors.field }}</span>\n\n    <button>Submit</button>\n  </Form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Zod Schema Validation\nDESCRIPTION: Example showing how to use Zod schema with VeeValidate's useForm hook for type-safe form validation. Demonstrates required and optional field validation with TypeScript integration.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/zod/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'zod';\nimport { toTypedSchema } from '@vee-validate/zod';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().min(1, 'required'),\n      password: string().min(1, 'required'),\n      name: string().optional(),\n    })\n  ),\n});\n\n// ❌ Type error, which means `values` is type-safe\nvalues.email.endsWith('@gmail.com');\n\nhandleSubmit(submitted => {\n  // No errors, because email is required!\n  submitted.email.endsWith('@gmail.com');\n\n  // ❌ Type error, because `name` is not required so it could be undefined\n  // Means that your fields are now type safe!\n  submitted.name.length;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Schema with Yup in VeeValidate\nDESCRIPTION: Demonstrates how to use the @vee-validate/yup package to create type-safe form validation that properly handles both input and output types.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'yup';\nimport { toTypedSchema } from '@vee-validate/yup';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().required(),\n      password: string().required(),\n      name: string(),\n    }),\n  ),\n});\n\n// ❌ Type error, which means `values` is type-safe\nvalues.email.endsWith('@gmail.com');\n\nhandleSubmit(submitted => {\n  // No errors, because email is required!\n  submitted.email.endsWith('@gmail.com');\n\n  // ❌ Type error, because `name` is not required so it could be undefined\n  // Means that your fields are now type safe!\n  submitted.name.length;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Setting Form Errors Manually in vee-validate\nDESCRIPTION: Demonstrates how to set form errors manually using setFieldError and setErrors functions. This is useful for handling validation errors returned from a server API.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { handleSubmit, setFieldError, setErrors } = useForm();\n\nconst onSubmit = handleSubmit(async values => {\n  // Send data to the API\n  const response = await client.post('/users/', values);\n\n  // all good\n  if (!response.errors) {\n    return;\n  }\n\n  // set single field error\n  if (response.errors.email) {\n    setFieldError('email', response.errors.email);\n  }\n\n  // set multiple errors, assuming the keys are the names of the fields\n  // and the key's value is the error message\n  setErrors(response.errors);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing VeeValidate using Package Managers\nDESCRIPTION: Instructions for installing vee-validate using yarn, npm, or pnpm package managers. This is recommended for modern workflows with bundlers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/overview.mdx#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add vee-validate\n# or\nnpm i vee-validate --save\n# or\npnpm add vee-validate\n```\n\n----------------------------------------\n\nTITLE: Conditional Submit Button with Form Dirty Flag\nDESCRIPTION: Complete Vue component example that disables a submit button until form values have changed. It uses the form's meta.dirty flag and initialValues prop to track changes.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form v-slot=\"{ meta }\" :initial-values=\"initialValues\">\n    <Field name=\"email\" />\n\n    <button :disabled=\"!meta.dirty\">Submit</button>\n  </Form>\n</template>\n\n<script>\nimport { Field, Form } from 'vee-validate';\n\nexport default {\n  components: {\n    Field,\n    Form,\n  },\n  data() {\n    return {\n      initialValues: { email: '' },\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submissions with handleSubmit in Vue.js\nDESCRIPTION: Shows how to use the handleSubmit function from useForm to create a submission handler that validates fields before calling the submission callback.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { handleSubmit } = useForm({\n  validationSchema: yup.object({\n    email: yup.string().email().required(),\n    password: yup.string().min(6).required(),\n  }),\n});\n\nconst onSubmit = handleSubmit(values => {\n  alert(JSON.stringify(values, null, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Field Validation with vee-validate and Yup in Vue.js\nDESCRIPTION: This snippet demonstrates how to set up a form with nested field validation using vee-validate and Yup in a Vue.js component. It includes validation for nested object properties and array elements, showing how to reference these fields in both the template and the validation schema.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form v-slot=\"{ errors }\" :validation-schema=\"schema\" @submit=\"onSubmit\">\n    <Field name=\"user.name\" />\n    <span>{{ errors['user.name'] }}</span>\n    <Field name=\"user.addresses[0]\" />\n    <span>{{ errors['user.addresses[0]'] }}</span>\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  user: yup.object({\n    name: yup.string().required(),\n    addresses: yup.array().of(yup.string().required()),\n  }),\n});\n\nfunction onSubmit(values: any) {\n  fn(values);\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Type Generics with useForm in TypeScript\nDESCRIPTION: Example of providing a generic type to useForm to get type information for form fields and their values. This enables TypeScript to provide better autocompletion and type checking.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\n\ninterface LoginForm {\n  email: string;\n  password: string;\n}\n\n// in your setup\nconst { errors } = useForm<LoginForm>();\n```\n\n----------------------------------------\n\nTITLE: Form-level Validation with Zod Schema Using Composition API\nDESCRIPTION: Example of using zod.object with toTypedSchema for form validation in a Vue component using the useForm and useField composition API functions.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/zod-schema-validation.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <form @submit=\"onSubmit\">\n    <input name=\"email\" v-model=\"email\" type=\"email\" />\n    <span>{{ errors.email }}</span>\n\n    <input name=\"password\" v-model=\"password\" type=\"password\" />\n    <span>{{ errors.password }}</span>\n\n    <button>Submit</button>\n  </form>\n</template>\n\n<script setup>\nimport { useField, useForm } from 'vee-validate';\nimport { toTypedSchema } from '@vee-validate/zod';\nimport * as zod from 'zod';\n\nconst validationSchema = toTypedSchema(\n  zod.object({\n    email: zod.string().min(1, { message: 'This is required' }).email({ message: 'Must be a valid email' }),\n    password: zod.string().min(1, { message: 'This is required' }).min(8, { message: 'Too short' }),\n  })\n);\n\nconst { handleSubmit, errors } = useForm({\n  validationSchema,\n});\n\nconst { value: email } = useField('email');\nconst { value: password } = useField('password');\n\nconst onSubmit = handleSubmit(values => {\n  alert(JSON.stringify(values, null, 2));\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Integrating VeeValidate Form Components\nDESCRIPTION: Replacing native form elements with VeeValidate's Form and Field components to enable validation functionality.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <Form @submit=\"onSubmit\">\n      <Field name=\"email\" type=\"email\" />\n\n      <button>Sign up for newsletter</button>\n    </Form>\n  </div>\n</template>\n\n<script>\nimport { Form, Field } from 'vee-validate';\n\nexport default {\n  components: {\n    Form,\n    Field,\n  },\n  methods: {\n    onSubmit() {\n      console.log('Submitting :(');\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Field Component Usage in Vue\nDESCRIPTION: Basic example of using the Field component to render a simple text input with validation support. This shows the component import and template usage.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Field name=\"field\" type=\"text\" />\n</template>\n\n<script setup>\nimport { Field } from 'vee-validate';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Integrating Yup Schema with vee-validate in TypeScript\nDESCRIPTION: Demonstrates how to use Yup schema with vee-validate's useForm hook. It shows the usage of toTypedSchema for type inference.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { toTypedSchema } from '@vee-validate/yup';\nimport * as yup from 'yup';\n\n// Creates a typed schema for vee-validate\nconst schema = toTypedSchema(\n  yup.object({\n    email: yup.string().required().email(),\n  }),\n);\n\nconst { errors, values } = useForm({\n  validationSchema: schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Yup Schema with Vue Composition API\nDESCRIPTION: This approach uses Vue 3's setup function to define the Yup schema, which avoids making it reactive by default. This eliminates the deep reactive conversion overhead for large form schemas.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/best-practices.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  setup() {\n    // Non-reactive because it was not explicitly defined with `reactive` or `ref`\n    const schema = yup.object({\n      email: yup.string().required().email(),\n      password: yup.string().required().min(8),\n    });\n\n    return {\n      schema,\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Form Values in Vue with vee-validate\nDESCRIPTION: Shows how to set initial values for form fields using the initialValues prop. Includes validation schema setup and form field configuration.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form :validation-schema=\"schema\" :initial-values=\"formValues\">\n    <Field name=\"email\" type=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" type=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button type=\"Submit\">Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().required().email(),\n  password: yup.string().required().min(8),\n});\n\n// Initial values\nconst formValues = {\n  email: 'example@example.com',\n  password: 'P@$$w0Rd',\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useField with Yup Validator in Vue 3\nDESCRIPTION: Shows how to use useField with Yup for email validation in a Vue 3 setup script.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useField } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst { value, errorMessage } = useField('email', yup.string().email().required());\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Validation Rules\nDESCRIPTION: Implementation of required and email validation rules using defineRule function\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule } from 'vee-validate';\n\ndefineRule('required', value => {\n  if (!value || !value.length) {\n    return 'This field is required';\n  }\n\n  return true;\n});\n\ndefineRule('email', value => {\n  // Field is empty, should pass\n  if (!value || !value.length) {\n    return true;\n  }\n\n  // Check if email\n  if (!/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}/.test(value)) {\n    return 'This field must be a valid email';\n  }\n\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Yup Schema with VeeValidate\nDESCRIPTION: Demonstrates how to use a Yup schema with vee-validate's useForm hook. It shows type-safe form values and submitted values using the toTypedSchema function.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/yup/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'yup';\nimport { toTypedSchema } from '@vee-validate/yup';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().required(),\n      password: string().required(),\n      name: string(),\n    })\n  ),\n});\n\n// ❌ Type error, which means `values` is type-safe\nvalues.email.endsWith('@gmail.com');\n\nhandleSubmit(submitted => {\n  // No errors, because email is required!\n  submitted.email.endsWith('@gmail.com');\n\n  // ❌ Type error, because `name` is not required so it could be undefined\n  // Means that your fields are now type safe!\n  submitted.name.length;\n});\n```\n\n----------------------------------------\n\nTITLE: Using defineField for Form Field Binding in VeeValidate\nDESCRIPTION: The defineField function returns a model and props/attributes pair that works with both native HTML elements and Vue components. It provides a modern approach to field binding in VeeValidate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_34\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <input v-model=\"email\" v-bind=\"emailProps\" />\n  <span>{{ errors.email }}</span>\n\n  <input v-model=\"password\" v-bind=\"passwordProps\" type=\"password\" />\n  <span>{{ errors.password }}</span>\n</template>\n\n<script setup>\nimport { useForm } from 'vee-validate';\n\nconst { errors, defineField } = useForm();\n\nconst [email, emailProps] = defineField('email');\nconst [password, passwordProps] = defineField('password');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Repeatable Fields with FieldArray in Vue\nDESCRIPTION: Demonstrates how to use the FieldArray component to create dynamic, repeatable form fields. The example shows URL inputs that can be added or removed dynamically with proper form value handling.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\" :initial-values=\"initialValues\">\n    <FieldArray name=\"links\" v-slot=\"{ fields, push, remove }\">\n      <div v-for=\"(entry, idx) in fields\" :key=\"entry.key\">\n        <Field :name=\"`links[${idx}]`\" type=\"url\" />\n\n        <button type=\"button\" @click=\"remove(idx)\">Remove</button>\n      </div>\n\n      <button type=\"button\" @click=\"push('')\">Add</button>\n    </FieldArray>\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nconst initialValues = {\n  links: ['https://github.com/logaretm'],\n};\n\nfunction onSubmit(values) {\n  alert(JSON.stringify(values, null, 2));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Form Schema Validation Example\nDESCRIPTION: Complete example of form-level validation using validation schema\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"submit\" :validation-schema=\"schema\" v-slot=\"{ errors }\">\n    <Field name=\"email\" />\n    <span>{{ errors.email }}</span>\n\n    <Field name=\"password\" type=\"password\" />\n    <span>{{ errors.password }}</span>\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field } from 'vee-validate';\n\nconst schema = {\n  email: 'required|email',\n  password: 'required|minLength:8',\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Reactive Form Schema with Yup\nDESCRIPTION: Implementation of a reactive form schema using Vue's computed properties and yup\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as yup from 'yup';\n\nexport default {\n  data: () => ({\n    min: 6,\n  }),\n  computed: {\n    schema() {\n      return yup.object({\n        password: yup.string().min(this.min),\n      });\n    },\n  },\n};\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"submit\" :validation-schema=\"schema\">\n    <Field name=\"password\" type=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nexport default {\n  components: {\n    Form,\n    Field,\n    ErrorMessage,\n  },\n  data: () => ({\n    min: 6,\n  }),\n  computed: {\n    schema() {\n      return yup.object({\n        password: yup.string().min(this.min),\n      });\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Various Validation Rule Formats with useField\nDESCRIPTION: Showcases different ways to define validation rules with useField, including string syntax, object syntax, function syntax, and Yup schema.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Globally defined rules with `defineRule`, Laravel-like syntax\nuseField('password', 'required|min:8');\n\n// Globally defined rules object\nuseField('password', { required: true, min: 8 });\n\n// Simple validation function\nuseField('password', value => {\n  if (!value) {\n    return 'password is required';\n  }\n\n  if (value.length < 8) {\n    return 'password must be at least 8 characters long';\n  }\n\n  return true;\n});\n\n// Yup validation\nuseField('password', yup.string().required().min(8));\n```\n\n----------------------------------------\n\nTITLE: Using useValidateForm to manually trigger form validation\nDESCRIPTION: Returns a function that validates the entire form and returns a FormValidationResult object.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useValidateForm } from 'vee-validate';\n\nconst validate = useValidateForm();\n\nawait validate();\n```\n\n----------------------------------------\n\nTITLE: Optimizing Yup Imports for Tree-Shaking\nDESCRIPTION: This approach selectively imports only the needed Yup validators, allowing bundlers to tree-shake unused code and reduce the final bundle size. This leads to faster load times and better performance.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/best-practices.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { object, string } from 'yup';\n\nconst schema = object({\n  email: string().email(),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Schema with Zod in VeeValidate\nDESCRIPTION: Shows how to use the @vee-validate/zod package to create type-safe form validation that properly handles both input and output types using Zod schemas.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'zod';\nimport { toTypedSchema } from '@vee-validate/zod';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().min(1, 'required'),\n      password: string().min(1, 'required'),\n      name: string().optional(),\n    }),\n  ),\n});\n\n// ❌ Type error, which means `values` is type-safe\nvalues.email.endsWith('@gmail.com');\n\nhandleSubmit(submitted => {\n  // No errors, because email is required!\n  submitted.email.endsWith('@gmail.com');\n\n  // ❌ Type error, because `name` is not required so it could be undefined\n  // Means that your fields are now type safe!\n  submitted.name.length;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using vee-validate with Vue.js Declarative Components\nDESCRIPTION: Example of creating a form using vee-validate's Declarative Components. It shows how to use Field and Form components for validation and form submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/vee-validate/README.md#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Field, Form } from 'vee-validate';\n\n// Validation, or use `yup` or `zod`\nfunction required(value) {\n  return value ? true : 'This field is required';\n}\n\n// Submit handler\nfunction onSubmit(values) {\n  // Submit to API\n  console.log(values);\n}\n</script>\n\n<template>\n  <Form v-slot=\"{ errors }\" @submit=\"onSubmit\">\n    <Field name=\"field\" :rules=\"required\" />\n\n    <span>{{ errors.field }}</span>\n\n    <button>Submit</button>\n  </Form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Form with Slot Props Access\nDESCRIPTION: Demonstrates accessing form state through slot props to display current values.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form v-slot=\"{ values }\">\n  <Field name=\"name\" />\n  <Field name=\"email\" type=\"email\" />\n  <Field name=\"password\" type=\"password\" />\n\n  <!-- prints current form values -->\n  <pre>\n    {{ values }}\n  </pre>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Configuring defineField with Dynamic Options in VeeValidate\nDESCRIPTION: The defineField function can also accept a function that returns the configuration object, allowing for dynamic configuration based on the field state. This enables creating reactive validation behaviors.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst [field, props] = defineField('field', state => {\n  return {\n    // A getter that computes and adds any additional props to the component\n    props: {\n      // This is just an example, by default this is an empty object\n      'aria-invalid': state.errors.length > 0 ? 'true' : 'false',\n    },\n    // Validates when `blur` event is emitted from the element/component\n    validateOnBlur: true,\n    // Validates when `change` event is emitted from the element/component\n    validateOnChange: true,\n    // Validates when `input` event is emitted from the element/component\n    validateOnInput: false,\n    // Validates when the returned model value changes\n    validateOnModelUpdate: true,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Field Labels with Zod Validator in VeeValidate\nDESCRIPTION: Example showing how to provide custom error messages with Zod validation schema by passing custom message objects to each validator. This compensates for Zod's lack of a built-in label method.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = z.object({\n  email_addr: z.string().email({ message: 'Email Address be a valid email address' });\n  acc_password: z.string().min(5, { message: 'Password be at least 5 characters long' });\n});\n```\n\n----------------------------------------\n\nTITLE: Using FieldArray Component in Vue Template\nDESCRIPTION: Demonstrates how to use the FieldArray component within a Form to manage an array of link fields. It shows how to add, remove, and render array items using the component's slot props.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field-array.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\" :initial-values=\"initialValues\">\n    <FieldArray name=\"links\" v-slot=\"{ fields, push, remove }\">\n      <div v-for=\"(field, idx) in fields\" :key=\"field.key\">\n        <Field :name=\"`links[${idx}].url`\" type=\"url\" />\n\n        <button type=\"button\" @click=\"remove(idx)\">Remove</button>\n      </div>\n\n      <button type=\"button\" @click=\"push({ id: Date.now(), name: '', url: '' })\">Add</button>\n    </FieldArray>\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\n// you can set initial values for those array fields\nconst initialValues = {\n  links: [{ id: 1, url: 'https://github.com/logaretm' }],\n};\n\nfunction onSubmit(values) {\n  alert(JSON.stringify(values, null, 2));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Localization with @vee-validate/i18n\nDESCRIPTION: Example of importing and configuring the localize function from @vee-validate/i18n to generate English error messages for the required rule.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule, configure } from 'vee-validate';\nimport { required } from '@vee-validate/rules';\nimport { localize } from '@vee-validate/i18n';\n\n// Define the rule globally\ndefineRule('required', required);\n\nconfigure({\n  // Generates an English message locale generator\n  generateMessage: localize('en', {\n    messages: {\n      required: 'This field is required',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Native Form Submission with VeeValidate\nDESCRIPTION: Example of using VeeValidate with native HTML form submission that causes page reload. The form will only be submitted if all fields are valid.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form method=\"post\" action=\"/api/users\" :validation-schema=\"schema\" />\n  <Field name=\"email\" />\n  <Field name=\"name\" type=\"email\" />\n  <Field name=\"password\" type=\"password\" />\n\n  <button>Submit</button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Creating Form Submit Handlers\nDESCRIPTION: Demonstrates how to create a submit event handler using handleSubmit, which validates the form before executing the callback function.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <form @submit=\"onSubmit\"></form>\n</template>\n\n<script setup>\nimport { useForm } from 'vee-validate';\n\nconst { handleSubmit } = useForm();\n\n// use `onSubmit` as an event handler for your forms\nconst onSubmit = handleSubmit(values => {\n  // pretty print the values object\n  alert(JSON.stringify(values, null, 2));\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ErrorMessage Component in Vue\nDESCRIPTION: Demonstrates the basic implementation of the ErrorMessage component together with Form and Field components. The example shows how to validate an email field and display error messages.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/error-message.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <Field name=\"email\" type=\"email\" :rules=\"validateEmail\" />\n    <ErrorMessage name=\"email\" />\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst validateEmail = yup.string().required().email();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Resetting Form with Custom State in vee-validate\nDESCRIPTION: Demonstrates how to reset a form to its initial state or to a custom state using the resetForm function. This allows setting custom errors, touched states, and values.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { resetForm } = useForm();\n\n// Rests the form\nresetForm();\n\n//\nresetForm({\n  touched: {\n    email: false,\n  },\n  errors: {\n    email: 'custom error',\n  },\n  values: {\n    email: 'newvalue@email.com',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Form Errors in Vue\nDESCRIPTION: Vue component example showing how to set initial form errors using the initialErrors prop, which is useful for server-side validation or prefilling error messages.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form :initial-errors=\"initialErrors\">\n    <Field name=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nconst initialErrors = {\n  email: 'This email is already taken',\n  password: 'The password is too short',\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Zod Default Values in VeeValidate Forms\nDESCRIPTION: Shows how to define default values directly in the Zod schema that will be used as initial values and for missing fields during submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'zod';\nimport { toTypedSchema } from '@vee-validate/zod';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().default('something@email.com'),\n      password: string().default(''),\n    }),\n  ),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Field Component Validation Configuration\nDESCRIPTION: Example of configuring validation triggers on individual Field components\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Turns off validation events -->\n<Field name=\"email\" :validateOnBlur=\"false\" :validateOnChange=\"false\" :validateOnInput=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Correct v-model Usage with Complex Field Components\nDESCRIPTION: Examples demonstrating the correct and incorrect ways to use v-model with complex Field components using scoped slots. The v-model should be placed on the Field component, not on the inner input.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- DONT: ⛔️  v-model on input tag -->\n<Field type=\"text\" name=\"name\" v-slot=\"{ field }\">\n  <!-- Conflict between v-model and `v-bind=field` -->\n  <input v-bind=\"field\" v-model=\"name\">\n</Field>\n\n<!-- DO: ✅  v-model on field tag -->\n<Field v-model=\"name\" type=\"text\" name=\"name\" v-slot=\"{ field }\">\n  <input v-bind=\"field\">\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Using resetForm to Update Form Values in VeeValidate\nDESCRIPTION: The resetForm function updates the form's current values which become the new initial values for future resets. This example shows how to reset form values after submitting data to an API.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst { resetForm } = useForm();\n\n// ...\nfunction onSubmit(values) {\n  // send values to the API\n  // ...\n\n  // Reset the form values\n  resetForm({\n    values: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using FormActions to Set Errors in vee-validate\nDESCRIPTION: Shows how to set form errors using the FormActions object passed as the second argument to the handleSubmit callback. This provides a convenient way to manipulate form state after submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst onSubmit = handleSubmit(async (values, actions) => {\n  // Send data to the API\n  const response = await client.post('/users/', values);\n  // ...\n\n  // set single field error\n  if (response.errors.email) {\n    actions.setFieldError('email', response.errors.email);\n  }\n\n  // set multiple errors, assuming the keys are the names of the fields\n  // and the values is the error message\n  actions.setErrors(response.errors);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a custom input component with useField\nDESCRIPTION: Example of a simple InputText component created using the useField composition function. This shows the declarative approach to creating field components with vee-validate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <input v-model=\"value\" />\n  {{ errorMessage }}\n</template>\n\n<script setup>\nimport { useField } from 'vee-validate';\n\nconst props = defineProps({\n  name: String,\n});\n\n// The `name` is returned in a function because we want to make sure it stays reactive\n// If the name changes you want `useField` to be able to pick it up\nconst { value, errorMessage } = useField(() => props.name);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Yup Schema Definition\nDESCRIPTION: Example of creating a validation schema using yup\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = yup.object({\n  email: yup.string().required().email(),\n  name: yup.string().required(),\n  password: yup.string().required().min(8),\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Typed Form Fields in useForm\nDESCRIPTION: Demonstration of TypeScript type checking and autocompletion for form fields when using useForm. Shows how TypeScript prevents errors by enforcing field names and value types.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\n\ninterface LoginForm {\n  email: string;\n  password: string;\n}\n\n// in your setup\nconst { errors, setErrors, setFieldValue } = useForm<LoginForm>();\n\nerrors.value; // typed as { email?: string; password?: string }\n\nsetErrors({\n  email: 'This field is invalid', // auto-complete for `email` and `password`\n});\n\nsetFieldValue('email', 'example@gmail.com'); // auto-complete for the field name and its value type\n```\n\n----------------------------------------\n\nTITLE: Using Yup Default Values in VeeValidate Forms\nDESCRIPTION: Shows how to define default values directly in the Yup schema that will be used as initial values and for missing fields during submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'yup';\nimport { toTypedSchema } from '@vee-validate/yup';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().required().default('something@email.com'),\n      password: string().required().default(''),\n      name: string().default(''),\n    }),\n  ),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Inferring Field Types from Initial Values in useForm\nDESCRIPTION: Example of providing initial values to useForm to automatically infer field types. This approach allows the function to derive types from the initialValues object.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\n\nconst { errors, setErrors, setFieldValue } = useForm({\n  initialValues: {\n    email: '',\n    password: '',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Schema with Valibot in VeeValidate\nDESCRIPTION: Shows how to use the @vee-validate/valibot package to create type-safe form validation that properly handles both input and output types using Valibot schemas.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport * as v from 'valibot';\nimport { toTypedSchema } from '@vee-validate/valibot';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    v.object({\n      name: v.pipe(v.string()),\n      email: v.pipe(v.string() v.nonEmpty('required')),\n      password: v.pipe(v.string(), v.minLength(6, 'Must be at least 6 characters')),\n    }),\n  ),\n});\n\n// ❌ Type error, which means `values` is type-safe\nvalues.email.endsWith('@gmail.com');\n\nhandleSubmit(submitted => {\n  // No errors, because email is required!\n  submitted.email.endsWith('@gmail.com');\n\n  // ❌ Type error, because `name` is not required so it could be undefined\n  // Means that your fields are now type safe!\n  submitted.name.length;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using handleReset for Form Reset Events in VeeValidate\nDESCRIPTION: The handleReset function clears error messages, resets meta state for all fields, and reverts values to their initial state. It can be used as a handler for native form reset events or called directly in code.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_30\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <form @reset=\"handleReset\">\n    <!-- ... -->\n  </form>\n</template>\n\n<script setup>\nimport { useForm } from 'vee-validate';\n\nconst { handleReset } = useForm();\n\n// you can use it in your code\nhandleReset();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useSubmitForm to handle form submission with validation\nDESCRIPTION: Returns a function that validates the form and executes a callback if valid. The callback receives form values and an actions object for manipulating the form.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSubmitForm } from 'vee-validate';\n\nconst submitForm = useSubmitForm((values, actions) => {\n  // Send data to your api ...\n  alert(JSON.stringify(values, null, 2));\n\n  // You can perform any of the form actions using the actions object\n  // set a single field value\n  actions.setFieldValue('field', 'hello');\n  // set multiple fields values\n  actions.setValues({ email: 'value', password: 'hi' });\n  // set a single field error\n  actions.setFieldError('field', 'this field is bad');\n  // set multiple fields errors\n  actions.setErrors({ email: 'bad email', password: 'bad password' });\n  // reset the form\n  actions.resetForm();\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Form After Submit Using Vue Component\nDESCRIPTION: Example Vue component that demonstrates how to reset a form after submission using the resetForm function provided in the FormActions object from the onSubmit event handler.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\" :validation-schema=\"schema\">\n    <!-- fields ... -->\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  // ...\n});\n\nfunction onSubmit(values, { resetForm }) {\n  console.log(values); // send data to API\n  // reset the form and the field values to their initial values\n  resetForm();\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Placeholder Interpolation in Error Messages\nDESCRIPTION: Example showing how to create error messages with placeholders that get interpolated with field names and rule parameters, supporting dynamic message generation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule, configure } from 'vee-validate';\nimport { between } from '@vee-validate/rules';\nimport { localize } from '@vee-validate/i18n';\n\n// Define the rule globally\ndefineRule('between', between);\n\nconfigure({\n  // Generates an English message locale generator\n  generateMessage: localize('en', {\n    messages: {\n      between: 'The {field} value must be between 0:{min} and 1:{max}',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Nested Objects with vee-validate in Vue\nDESCRIPTION: Demonstrates how to create form fields that map to nested object properties using dot notation in the field name prop. This allows form values to be automatically structured as nested objects upon submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\">\n    <Field name=\"links.twitter\" type=\"url\" />\n    <Field name=\"links.github\" type=\"url\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nfunction onSubmit(values) {\n  alert(JSON.stringify(values, null, 2));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using withControlled Handler in vee-validate\nDESCRIPTION: Shows how to use the handleSubmit.withControlled method to create submission handlers that only include controlled values. This provides a more concise way to filter out uncontrolled form values.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit.withControlled(async values => {\n  // Send only controlled values to the API\n  const response = await client.post('/users/', values);\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced DynamicForm Component with Attribute Binding\nDESCRIPTION: This snippet shows how to enhance the DynamicForm component to support passing additional attributes to form fields using object destructuring and v-bind.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/dynamic-form-generator.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <div\n      v-for=\"{ as, name, label, ...attrs } in schema.fields\"\n      :key=\"name\"\n    >\n      <label :for=\"name\">{{ label }}</label>\n      <Field :as=\"as\" :id=\"name\" :name=\"name\" v-bind=\"attrs\" />\n    </div>\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script>\nimport { Form, Field } from 'vee-validate';\n\nexport default {\n  name: 'DynamicForm',\n  components: {\n    Form,\n    Field,\n  },\n  props: {\n    schema: {\n      type: Object,\n      required: true,\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with useField in Vue 3\nDESCRIPTION: Demonstrates TypeScript integration with useField, including type safety for field values and reset operations.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { value, resetField } = useField<string>('email', yup.string().email());\n\nvalue.value = 1; // ⛔️  Error\nvalue.value = 'test@example.com'; // ✅\n\nresetField({\n  value: 1, // ⛔️  Error\n});\nresetField({\n  value: 'test@example.com', // ✅\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Errors in useForm\nDESCRIPTION: Example of providing initial error messages for form fields. Useful for server-side validation when working with non-hydrated SSR applications like Laravel.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ... } = useForm({\n  initialErrors: {\n    email: 'This email is invalid',\n    password: 'Password too short',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: FormActions Interface Definition for vee-validate\nDESCRIPTION: Defines the TypeScript interface for the FormActions object provided as the second argument to submission handlers. Contains methods for manipulating form state after submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FormActions {\n  setFieldValue: (field: T, value: any) => void;\n  setFieldError: (field: string, message: string | undefined) => void;\n  setErrors: (fields: Partial<Record<string, string | undefined>>) => void;\n  setValues: (fields: Partial<Record<T, any>>) => void;\n  setFieldTouched: (field: string, isTouched: boolean) => void;\n  setTouched: (fields: Partial<Record<string, boolean>>) => void;\n  resetForm: (state?: Partial<FormState>) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: FormState Interface Structure in VeeValidate\nDESCRIPTION: The interface definition for FormState in VeeValidate, representing the complete state of a form including errors, touched status, values, and submission count.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormState {\n  // any error messages\n  errors: Record<string, string>;\n  // touched meta flags\n  touched: Record<string, boolean>;\n  // Form Values\n  values: Record<string, any>;\n  // The form submit attempts count\n  submitCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamicForm Component with Error Message Display in Vue.js\nDESCRIPTION: This snippet demonstrates the implementation of a DynamicForm component that renders form fields dynamically based on a schema. It includes the ErrorMessage component from vee-validate to display validation errors for each field.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/dynamic-form-generator.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <div\n      v-for=\"{ as, name, label, children, ...attrs } in schema.fields\"\n      :key=\"name\"\n    >\n      <label :for=\"name\">{{ label }}</label>\n      <Field :as=\"as\" :id=\"name\" :name=\"name\" v-bind=\"attrs\">\n        <template v-if=\"children && children.length\">\n          <component v-for=\"({ tag, text, ...childAttrs }, idx) in children\"\n            :key=\"idx\"\n            :is=\"tag\"\n            v-bind=\"childAttrs\"\n          >\n            {{ text }}\n          </component>\n        </template>\n      </Field>\n      <ErrorMessage :name=\"name\" />\n    </div>\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\n\nexport default {\n  name: 'DynamicForm',\n  components: {\n    Form,\n    Field,\n    ErrorMessage\n  },\n  props: {\n    schema: {\n      type: Object,\n      required: true,\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Example of errorBag Object Structure\nDESCRIPTION: Illustrates the structure of the errorBag object, showing how it maintains both single and multiple error messages for different fields.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  email: [\"this field is required\", \"this field must be a valid email\"],\n  password: \"too short\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Errors in Form Submit Callback\nDESCRIPTION: Vue component that demonstrates how to set form errors during the submit process using the FormActions object provided in the submit callback, which is useful for handling API validation errors.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\">\n    <Field name=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nfunction onSubmit(values, actions) {\n  // Submit the values...\n\n  // set single field error\n  actions.setFieldError('email', 'this email is already taken');\n\n  // set multiple errors\n  actions.setErrors({\n    email: 'this field is already taken',\n    password: 'someone already has this password',\n  });\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Field Errors\nDESCRIPTION: Shows how to set error messages for multiple fields simultaneously using the setErrors method.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setErrors } = useForm();\n\nsetErrors({\n  email: 'this email is already taken',\n  password: 'someone already has this password 🤪',\n  firstName: undefined, // clears errors and marks the field as valid\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimum Length Validation in VeeValidate\nDESCRIPTION: Ensures field value length is not less than the specified minimum length parameter.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_26\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"min:3\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ min: 3 }\" />\n```\n\n----------------------------------------\n\nTITLE: Using Nested Arrays with vee-validate in Vue\nDESCRIPTION: Demonstrates how to create form fields that map to array items using bracket notation in the field name prop. This allows form values to be automatically structured as arrays upon submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\">\n    <Field name=\"links[0]\" type=\"url\" />\n    <Field name=\"links[1]\" type=\"url\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nfunction onSubmit(values) {\n  alert(JSON.stringify(values, null, 2));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom v-model Prop Names with useField in Vue.js\nDESCRIPTION: Example showing how to implement custom v-model prop names (like v-model:text) with useField by passing the model name directly to the syncVModel option. This emits update events with the specified prop name.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps({\n  text: String,\n});\n\nconst { value, errorMessage } = useField('fieldName', undefined, {\n  syncVModel: 'text',\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useField in Vue 3\nDESCRIPTION: Demonstrates the basic usage of useField to create a validated input field with error message display.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <input v-model=\"value\" />\n    <span>{{ errorMessage }}</span>\n  </div>\n</template>\n\n<script setup>\nimport { useField } from 'vee-validate';\n\n// a simple `name` field with basic required validator\nconst { value, errorMessage } = useField('name', inputValue => !!inputValue);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining FieldMeta Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the metadata object structure that provides information about a field's validation state, including flags for touched, dirty, valid, validated, and pending states.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FieldMeta {\n  touched: boolean; // if the field has been blurred (via handleBlur)\n  dirty: boolean; // if the field has been manipulated (via handleChange)\n  valid: boolean; // if the field doesn't have any errors\n  validated: boolean; // if the field has been validated\n  pending: boolean; // if validation is in progress\n  initialValue?: any; // the field's initial value\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Form Values in Vue.js\nDESCRIPTION: Shows how to manually set form field values using setFieldValue and setValues functions returned by useForm.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setFieldValue, setValues } = useForm();\n\n// Sets a value of a specific field in the form values\nsetFieldValue('fieldName', 'value');\n\n// Merges the given object with the current form values\nsetValues({\n  fieldName: 'value',\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Errors with useForm\nDESCRIPTION: Demonstrates how to access the errors object from the useForm composable, which maps field names to their first error message.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errors } = useForm();\n\nerrors.value; // access the errors value\n```\n\n----------------------------------------\n\nTITLE: Configuring defineField with Static Options in VeeValidate\nDESCRIPTION: The defineField function accepts a configuration object as its second parameter to customize field validation behavior. This example shows how to configure various validation triggers and add custom props.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst [field, props] = defineField('field', {\n  // A getter that computes and adds any additional props to the component\n  // It receives the current field state as an argument\n  props(state) {\n    // This is just an example, by default this is an empty object\n    return {\n      'aria-invalid': state.errors.length > 0 ? 'true' : 'false',\n    };\n  },\n  // A label for the field, only used with global validation rules\n  label: 'a label',\n  // Validates when `blur` event is emitted from the element/component\n  validateOnBlur: true,\n  // Validates when `change` event is emitted from the element/component\n  validateOnChange: true,\n  // Validates when `input` event is emitted from the element/component\n  validateOnInput: false,\n  // Validates when the returned model value changes\n  validateOnModelUpdate: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Path Destruction with keep-values in Vue\nDESCRIPTION: Demonstrates how to maintain field values when fields are unmounted, useful for multi-step or tabbed forms. Shows both form-level and field-level control over value persistence.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- All fields values will be kept -->\n  <Form keep-values v-slot=\"{ values }\">\n    <!-- This field value will be kept -->\n    <Field v-if=\"showFields\" name=\"email\" />\n\n    <!-- This field value will be removed -->\n    <Field v-if=\"showFields\" name=\"name\" :keep-value=\"false\" />\n\n    <button @click=\"showFields = !showFields\" type=\"button\">Show/Hide fields</button>\n    <button>Submit</button>\n\n    <pre>{{ values }}</pre>\n  </Form>\n</template>\n\n<script>\nexport default {\n  data: () => ({\n    showFields: true,\n  }),\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Locales in VeeValidate\nDESCRIPTION: Example showing how to configure VeeValidate with multiple locales (English and Arabic) using the localize function.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/i18n/README.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule, configure } from 'vee-validate';\nimport { required } from '@vee-validate/rules';\nimport { localize } from '@vee-validate/i18n';\n\n// Define the rule globally\ndefineRule('required', required);\n\nconfigure({\n  generateMessage: localize({\n    en: {\n      messages: {\n        required: 'This field is required',\n      },\n    },\n    ar: {\n      messages: {\n        required: 'هذا الحقل مطلوب',\n      },\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Metadata with useField in VeeValidate\nDESCRIPTION: Code demonstrating how to access field metadata properties that provide information about the field's state, including validity, touched status, and whether validation is pending.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { meta } = useField('fieldName');\n\nmeta.dirty;\nmeta.pending;\nmeta.touched;\nmeta.valid;\nmeta.initialValue;\n```\n\n----------------------------------------\n\nTITLE: Using validate Function with Field Values\nDESCRIPTION: Example of how to use the validate function to trigger field validation programmatically and access the validation results through the returned promise.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { validate } = useField('field', value => !!value);\n\n// trigger validation\nawait validate();\n```\n\n----------------------------------------\n\nTITLE: Implementing Valibot transforms with vee-validate form fields\nDESCRIPTION: Example demonstrating how to define transform functions in a Valibot schema to cast field values before submission. Transforms apply when setting initial values and during form submission, but do not change input/output types.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport * as v from 'valibot';\nimport { toTypedSchema } from '@vee-validate/valibot';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      age: v.pipe(\n        v.unknown(),\n        v.transform(v => Number(v)),\n      ),\n    }),\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Values\nDESCRIPTION: Shows how to access the current form values object from the useForm composable.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { values } = useForm();\n\nvalues; // { email: 'something@gmail.com', .... }\n```\n\n----------------------------------------\n\nTITLE: Defining Form Validation Schema with Yup\nDESCRIPTION: Shows how to create a validation schema using Yup and integrate it with useForm for email validation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().required().email(),\n});\n\nconst { defineField } = useForm({\n  validationSchema: schema,\n});\n\nconst [email, emailAttrs] = defineField('email');\n```\n\n----------------------------------------\n\nTITLE: Custom Field Labels with Yup Validator in VeeValidate\nDESCRIPTION: Code showing how to set custom field labels when using Yup validation schema to improve error message readability. This is achieved by calling label() after defining field validations.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = Yup.object({\n  email_addr: Yup.string().email().required().label('Email Address'),\n  acc_password: Yup.string().min(5).required().label('Your Password'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating the DynamicForm Component with vee-validate\nDESCRIPTION: This snippet shows the implementation of the DynamicForm component using vee-validate's Form and Field components to render form fields based on a schema.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/dynamic-form-generator.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <div\n      v-for=\"field in schema.fields\" :key=\"field.name\">\n      <label :for=\"field.name\">{{ field.label }}</label>\n      <Field :as=\"field.as\" :id=\"field.name\" :name=\"field.name\" />\n    </div>\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script>\nimport { Form, Field } from 'vee-validate';\n\nexport default {\n  name: 'DynamicForm',\n  components: {\n    Form,\n    Field,\n  },\n  props: {\n    schema: {\n      type: Object,\n      required: true,\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Meta Information\nDESCRIPTION: Shows how to access aggregated meta information about the form state, including touched, dirty, valid and pending flags.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormMeta {\n  touched: boolean; // if at least one field is touched (was blurred)\n  dirty: boolean; // if at least one field is dirty (manipulated)\n  valid: boolean; // if the form doesn't have any error messages\n  pending: boolean; // if at least one field is pending validation\n  initialValues?: Record<string, any>; // a map of the form's initial values\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { meta } = useForm();\n\nmeta.value; // { valid: false, invalid: true, dirty: true, .... }\n```\n\n----------------------------------------\n\nTITLE: Implementing max validation rule in Vue template\nDESCRIPTION: Demonstrates the use of 'max' rule to ensure a field's length does not exceed a specified maximum.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_23\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"max:10\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ max: 10 }\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing All Field Error Messages with errorBag\nDESCRIPTION: Shows how to use the errorBag property to access all error messages for each field, not just the first one.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errorBag } = useForm();\n\nerrorBag.value.email; // email field errors\n```\n\n----------------------------------------\n\nTITLE: Tracking Form Submission Progress in Vue.js\nDESCRIPTION: Shows how to use the isSubmitting ref from useForm to track and display the form submission progress.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isSubmitting } = useForm();\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Fields with useField in VeeValidate\nDESCRIPTION: Code example showing how to configure useField for checkbox inputs by specifying the input type and checked value. This handles the complex logic of checkbox state management automatically.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst { handleChange, checked } = useField('myCheckbox', undefined, {\n  type: 'checkbox',\n  checkedValue: 'opt1',\n});\n```\n\n----------------------------------------\n\nTITLE: Form Validation Without Submission in VeeValidate\nDESCRIPTION: Demonstrates how to validate a form without submitting it using the validate function from the Form component's slot props.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form v-slot=\"{ validate }\" :validation-schema=\"schema\">\n  <Field name=\"email\" type=\"email\" />\n  <ErrorMessage name=\"email\" />\n\n  <Field name=\"password\" type=\"password\" />\n  <ErrorMessage name=\"password\" />\n\n  <button type=\"button\" @click=\"validate\">Submit</button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Applying Validation Rules to Form Fields\nDESCRIPTION: Connecting the custom validation function to the Field component using the rules prop to enable email validation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <Form @submit=\"onSubmit\">\n      <Field name=\"email\" type=\"email\" :rules=\"validateEmail\" />\n\n      <button>Sign up</button>\n    </Form>\n  </div>\n</template>\n\n<script>\nimport { Form, Field } from 'vee-validate';\n\nexport default {\n  components: {\n    Form,\n    Field,\n  },\n  methods: {\n    onSubmit(values) {\n      console.log(JSON.stringify(values, null, 2));\n    },\n    validateEmail(value) {\n      // if the field is empty\n      if (!value) {\n        return 'This field is required';\n      }\n\n      // if the field is not a valid email\n      const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n      if (!regex.test(value)) {\n        return 'This field must be a valid email';\n      }\n\n      // All is good\n      return true;\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Field-Level Validation with Custom Rules in Vue\nDESCRIPTION: Implementation of basic field validation using VeeValidate's Field component with a custom validation function\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <Field name=\"field\" :rules=\"isRequired\" />\n    <ErrorMessage name=\"field\" />\n  </Form>\n</template>\n\n<script setup>\nimport { Field, Form, ErrorMessage } from 'vee-validate';\n\nfunction isRequired(value) {\n  if (value && value.trim()) {\n    return true;\n  }\n\n  return 'This is required';\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Select with Field Component\nDESCRIPTION: Example demonstrating how to handle multiple select elements with the Field component, including proper initialization of selected values using the exposed value prop.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<Field v-slot=\"{ value }\" name=\"drink\" as=\"select\" multiple>\n  <option value=\"\" disabled>Select a drink</option>\n  <option v-for=\"drink in drinks\" :key=\"drink\" :value=\"drink\" :selected=\"value && value.includes(drink)\">{{ drink }}</option>\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Implementing max_value validation rule in Vue template\nDESCRIPTION: Shows how to use the 'max_value' rule to validate that a numeric field does not exceed a specified maximum value.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_24\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"max_value:10\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ max_value: 10 }\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Field Validation in VeeValidate\nDESCRIPTION: Ensures field has a non-empty value. Empty values include empty strings, undefined, null, false, and empty arrays.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_31\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"required\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ required: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Using resetField Function Safely in Vue Template\nDESCRIPTION: Example showing the safe and unsafe ways to use the resetField function in a Vue template. The function should be invoked rather than passed directly as an event handler.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- ⛔️ Unsafe -->\n<button @click=\"resetField\">Reset</button>\n\n<!-- ✅  Safe -->\n<button @click=\"resetField()\">Reset</button>\n```\n\n----------------------------------------\n\nTITLE: Integrating Valibot Schema with vee-validate in TypeScript\nDESCRIPTION: Demonstrates how to use Valibot schema with vee-validate's useForm hook. It shows the usage of toTypedSchema for type inference and pipe for combining validators.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport * as v from 'valibot';\nimport { toTypedSchema } from '@vee-validate/valibot';\n\n// Creates a typed schema for vee-validate\nconst schema = toTypedSchema(\n  v.object({\n    email: v.pipe(v.string(), v.email('Invalid email'), v.nonEmpty('required')),\n  }),\n);\n\nconst { errors, values } = useForm({\n  validationSchema: schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Using handleChange for controlled field value updates\nDESCRIPTION: Example showing different ways to use the handleChange function to update field values with or without triggering validation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { handleChange } = useField('someField');\n\n// validates by default\nhandleChange('new value');\n// validates\nhandleChange('new value', true);\n// Doesn't validate\nhandleChange('new value', false);\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Usage in Vue\nDESCRIPTION: Shows basic usage of Form component with a nested Field component for password input.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form>\n  <Field name=\"password\" type=\"password\" />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Defining Async Validation Page Structure in Astro\nDESCRIPTION: This code snippet defines the layout and metadata for an Astro page about async validation in vee-validate. It specifies the layout, title, description, and order of the page in the documentation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/async-validation.mdx#2025-04-13_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\nlayout: ../../layouts/PageLayout.astro\ntitle: Async Validation\ndescription: Using async validation with vee-validate\norder: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Field Validation with Yup in Vue\nDESCRIPTION: Example showing how to validate a password field using yup validation schema\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <Field name=\"password\" type=\"password\" :rules=\"passwordRules\" />\n    <ErrorMessage name=\"password\" />\n  </Form>\n</template>\n\n<script setup>\nimport { Field, Form, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst passwordRules = yup.string().required().min(8);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using resetField with Custom Value in Vue Template\nDESCRIPTION: Example showing how to use the resetField function to update a field's value to something other than its initial value by passing a state object.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"resetField({ value: 'new value' })\">Reset</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Regex Validation in VeeValidate\nDESCRIPTION: Validates field value against a specified regular expression pattern. Object format recommended to avoid parsing conflicts.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_30\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format: NOT RECOMMENDED -->\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ regex: /^[0-9]+$/ }\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing MIME Type Validation in VeeValidate\nDESCRIPTION: Validates that uploaded files match specified MIME types. Supports wildcard patterns using '*' for flexible file type matching.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_25\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"mimes:image/jpeg\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ mimes: ['image/jpeg'] }\" />\n```\n\n----------------------------------------\n\nTITLE: Using the prepend Method from useFieldArray\nDESCRIPTION: Example showing how to use the prepend method to add an item to the beginning of the array managed by useFieldArray.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get prepend function from composable in component setup\nconst { prepend } = useFieldArray('links');\n\n// call prepend function within custom function\nconst myPrependFunction = () => {\n  // adds a new item to the array\n  prepend({ url: '' });\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Zod Schema with vee-validate in TypeScript\nDESCRIPTION: Shows how to use Zod schema with vee-validate's useForm hook. It demonstrates the usage of toTypedSchema for type inference.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { toTypedSchema } from '@vee-validate/zod';\nimport { z } from 'zod';\n\n// Creates a typed schema for vee-validate\nconst schema = toTypedSchema(\n  z.object({\n    email: z.string().nonempty().email(),\n  }),\n);\n\nconst { errors, values } = useForm({\n  validationSchema: schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Zod Schema with Preprocessing\nDESCRIPTION: Shows how to use Zod preprocessors to transform field values before validation and submission, including type casting from string to number.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/zod/README.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, number, preprocess } from 'zod';\nimport { toTypedSchema } from '@vee-validate/zod';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      age: preprocess(val => Number(val), number()),\n    })\n  ),\n});\n\n// typed as `unknown` since the source value can be anything\nvalues.age;\n\nhandleSubmit(submitted => {\n  // will be typed as number because zod made sure it is!\n  values.age;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing v-model Support with useField in Vue.js\nDESCRIPTION: Code demonstrating how to enable v-model integration with useField by setting the syncVModel option to true. This simplifies the component implementation by automatically handling the update:modelValue event.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps({\n  modelValue: String,\n});\n\nconst emit = defineEmits(['update:modelValue']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst props = defineProps({\n  modelValue: String,\n});\n\nconst { value, errorMessage } = useField('fieldName', undefined, {\n  syncVModel: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using the push Method from useFieldArray\nDESCRIPTION: Example demonstrating how to use the push method to add an item to the end of the array managed by useFieldArray.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get push function from composable in component setup\nconst { push } = useFieldArray('links');\n\n// call push function within custom function\nconst myPushFunction = () => {\n  // adds a new item to the array\n  push({ url: '' });\n};\n```\n\n----------------------------------------\n\nTITLE: Form-Level Validation with Custom Schema in Vue\nDESCRIPTION: Implementation of form-level validation using a custom validation schema object\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"submit\" :validation-schema=\"simpleSchema\">\n    <Field name=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" type=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\n\nconst simpleSchema = {\n  email(value) {\n    // validate email value...\n  },\n  name(value) {\n    // validate name value...\n  },\n  // If you defined global rules you can also use them\n  password: 'required|min:8',\n  // ...\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the insert Method from useFieldArray\nDESCRIPTION: Example showing how to use the insert method to add an item at a specific position in the array managed by useFieldArray.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get insert function from composable in component setup\nconst { insert } = useFieldArray('links');\n\n// call insert function within custom function\nconst myInsertFunction = () => {\n  // inserts a new item to the array at the second index\n  insert(1, { url: '' });\n};\n```\n\n----------------------------------------\n\nTITLE: Using the move Method from useFieldArray\nDESCRIPTION: Example demonstrating how to use the move method to relocate an item from one index to another within the array managed by useFieldArray.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get move function from composable in component setup\nconst { move } = useFieldArray('links');\n\n// call move function within custom function\nconst myMoveFunction = () => {\n  // move array item to a different position\n  move(2, 1);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining All Available Rules Globally in JavaScript\nDESCRIPTION: Example of how to import and define all available validation rules from @vee-validate/rules globally using the defineRule function from vee-validate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/rules/README.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule } from 'vee-validate';\nimport * as rules from '@vee-validate/rules';\n\nObject.keys(rules).forEach(rule => {\n  defineRule(rule, rules[rule]);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Rules in JavaScript\nDESCRIPTION: Example of how to import and define individual validation rules from @vee-validate/rules using the defineRule function from vee-validate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/rules/README.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule } from 'vee-validate';\nimport { required, email, min } from '@vee-validate/rules';\n\ndefineRule('required', required);\ndefineRule('email', email);\ndefineRule('min', min);\n```\n\n----------------------------------------\n\nTITLE: Resetting Form with Custom Values in VeeValidate\nDESCRIPTION: Example of using the resetForm function to reset a form with custom values in VeeValidate. This changes both the current and initial value of the specified field.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form v-slot=\"{ resetForm }\">\n  ...\n\n  <button @click=\"resetForm({ values: { email: 'example@example.com' } })\" type=\"button\">Reset</button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox with Custom Checked/Unchecked Values\nDESCRIPTION: Demonstrates how to configure a checkbox with custom values for checked and unchecked states using useField. This approach allows for boolean or any custom values to be used when the checkbox is toggled.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/custom-checkboxes.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { checked, handleChange } = useField('toa', undefined, {\n  // Will make the checkbox set its value to true/false if it was checked or not\n  type: 'checkbox',\n  checkedValue: true,\n  uncheckedValue: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using useResetForm to reset the form state\nDESCRIPTION: Returns a function that can be called to reset the form to its initial state, clearing values, errors, and meta states.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useResetForm } from 'vee-validate';\n\nconst resetForm = useResetForm();\n\nresetForm(); // resets the form\n```\n\n----------------------------------------\n\nTITLE: Configuring validateOnValueUpdate behavior in useField\nDESCRIPTION: Example showing how to disable automatic validation when the field value changes by setting the validateOnValueUpdate option to false.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { value } = useField('fieldName', yup.string().required(), {\n  validateOnValueUpdate: false,\n});\n\n// validation WILL NOT trigger\nvalue.value = 'something';\n```\n\n----------------------------------------\n\nTITLE: Cross-Field Validation Implementation\nDESCRIPTION: Implementation of a confirmation validation rule that compares field values\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule } from 'vee-validate';\n\ndefineRule('confirmed', (value, [target], ctx) => {\n  if (value === ctx.form[target]) {\n    return true;\n  }\n\n  return 'Passwords must match';\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VeeValidate Field with Additional Options in Vue\nDESCRIPTION: This snippet demonstrates how to use the useField composable from VeeValidate with additional configuration options. It shows a simple input field for a 'company' name with custom label and initial value settings.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <input v-model=\"value\" />\n    <span>{{ errorMessage }}</span>\n  </div>\n</template>\n\n<script setup>\nimport { useField } from 'vee-validate';\n\n// a simple `company` field with some options passed into it\nconst { value, errorMessage } = useField('company', ..., {\n  label: 'Your company',\n  initialValue: ''\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Yup Transforms for Field Type Conversion in VeeValidate\nDESCRIPTION: Demonstrates how to use Yup transforms to convert field values, such as parsing string input as numbers before validation and submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, number } from 'yup';\nimport { toTypedSchema } from '@vee-validate/yup';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      age: number()\n        .transform(val => Number(val))\n        .required(),\n    }),\n  ),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Slot with ErrorMessage\nDESCRIPTION: Demonstrates using the default scoped slot of ErrorMessage to create more flexible error message markup. The slot provides access to the error message string.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/error-message.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<ErrorMessage name=\"email\" v-slot=\"{ message }\">\n  <p>Error:</p>\n  <p>{{ message }}</p>\n</ErrorMessage>\n```\n\n----------------------------------------\n\nTITLE: Using useFormErrors to get all form error messages in Vue\nDESCRIPTION: Returns a computed ref to an object containing all error messages in the form, with field names as keys. Fields without errors are not included in the object.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFormErrors } from 'vee-validate';\n\nconst errors = useFormErrors();\n\nmessage.value; // {}\n```\n\n----------------------------------------\n\nTITLE: Using Yup Default Values\nDESCRIPTION: Shows how to define default values in a Yup schema that will be used as initial form values and for missing fields in submitted data.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/yup/README.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'yup';\nimport { toTypedSchema } from '@vee-validate/yup';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().required().default('something@email.com'),\n      password: string().required().default(''),\n      name: string().default(''),\n    })\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useIsFormValid to check if the entire form is valid\nDESCRIPTION: Returns a computed ref containing a boolean indicating whether the entire form is valid (no fields have error messages).\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFormValid } from 'vee-validate';\n\nconst isValid = useIsFormValid();\n\nisValid.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Validation in VeeValidate\nDESCRIPTION: Validates field value is a valid URL. Supports optional pattern parameter for specific URL format requirements.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_33\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" type=\"url\" rules=\"url\" />\n\n<!-- object format -->\n<Field name=\"field\" type=\"text\" :rules=\"{ url: 'https://.*' }\" />\n```\n\n----------------------------------------\n\nTITLE: Type Error Examples with useForm\nDESCRIPTION: Examples of TypeScript errors when attempting to use undefined fields or incorrect value types with useForm. Shows how TypeScript prevents common form handling mistakes.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetFieldValue('age', 5); // ⛔️ TypeScript error\nsetFieldValue('email', 5); // ⛔️ TypeScript error\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Validation Function\nDESCRIPTION: Creating a custom validation function for email fields that checks for required input and valid email format.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <Form @submit=\"onSubmit\">\n      <Field name=\"email\" type=\"email\" />\n\n      <button>Sign up</button>\n    </Form>\n  </div>\n</template>\n\n<script>\nimport { Form, Field } from 'vee-validate';\n\nexport default {\n  components: {\n    Form,\n    Field,\n  },\n  methods: {\n    onSubmit(values) {\n      console.log(JSON.stringify(values, null, 2));\n    },\n    validateEmail(value) {\n      // if the field is empty\n      if (!value) {\n        return 'This field is required';\n      }\n\n      // if the field is not a valid email\n      const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n      if (!regex.test(value)) {\n        return 'This field must be a valid email';\n      }\n\n      // All is good\n      return true;\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Manual Form Submission with handleSubmit in VeeValidate\nDESCRIPTION: Demonstrates how to manually handle form submissions using the handleSubmit slot prop, which prevents native submission and executes a callback with form values if valid.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VeeForm v-slot=\"{ handleSubmit }\" :validation-schema=\"schema\" as=\"div\">\n    <form @submit=\"handleSubmit($event, onSubmit)\">\n      <Field name=\"email\" type=\"email\" />\n      <ErrorMessage name=\"email\" />\n\n      <Field name=\"password\" type=\"password\" />\n      <ErrorMessage name=\"password\" />\n\n      <button>Submit</button>\n    </form>\n  </VeeForm>\n</template>\n\n<script setup>\nimport { Form as VeeForm, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().required().email(),\n  password: yup.string().required().min(8),\n});\n\nfunction onSubmit(values) {\n  // Submit values to API...\n  alert(JSON.stringify(values, null, 2));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Field Error Messages\nDESCRIPTION: Demonstrates how to set error messages for specific fields, including how to clear errors by setting undefined or empty string.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setFieldError } = useForm();\n\nsetFieldError('email', 'this email is already taken');\n\n// Mark field as valid\nsetFieldError('email', undefined);\n```\n\n----------------------------------------\n\nTITLE: Handling Change Events in VeeValidate\nDESCRIPTION: The 'onChange' property is an event handler for the change event. It updates the field value and triggers validation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfield.onChange: (e: Event | unknown) => void\n```\n\n----------------------------------------\n\nTITLE: Accessing All Field Errors with useField in Vue.js\nDESCRIPTION: Example demonstrating how to access all error messages for a field using the errors ref. This returns an array of error messages when multiple validation rules fail.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errors, value } = useField('fieldName', yup.string().required());\n\n// contains an array of error messages, otherwise empty array\nerrors.value;\n```\n\n----------------------------------------\n\nTITLE: Handling File Inputs with Field Component\nDESCRIPTION: Example showing the correct way to handle file inputs by manually binding change and blur handlers instead of using the field object. This is necessary because file inputs don't work with standard two-way binding.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<Field name=\"file\" v-slot=\"{ handleChange, handleBlur }\">\n  <input type=\"file\" @change=\"handleChange\" @blur=\"handleBlur\" />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Combining Valid Flag with Touched for Accurate Form Status\nDESCRIPTION: Example showing how to combine form.meta.valid with meta.touched to create an accurate form validation indicator that only shows when the user has interacted with the form.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form v-slot=\"{ meta, errors }\">\n  <Field name=\"email\" type=\"email\" :rules=\"validateEmail\" />\n  <span v-if=\"errors.email\">⛔️ {{ errors.email }}</span>\n  <span v-if=\"meta.valid && meta.touched\">✅ Form is valid</span>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Object Fields in vee-validate\nDESCRIPTION: Example showing how to define form fields with nested object paths using dot notation\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/nested-objects-and-arrays.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineInputBinds } = useForm();\n\nconst twitterLink = defineInputBinds('links.twitter');\nconst githubLink = defineInputBinds('links.github');\n```\n\n----------------------------------------\n\nTITLE: Native Form Submission with submitForm in VeeValidate\nDESCRIPTION: Shows how to handle native form submissions using the submitForm slot prop, which prevents submission until all fields are valid.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VeeForm v-slot=\"{ submitForm }\" :validation-schema=\"schema\" as=\"div\">\n    <form @submit=\"submitForm\" method=\"post\" action=\"/api/users/\">\n      <Field name=\"email\" type=\"email\" />\n      <ErrorMessage name=\"email\" />\n\n      <Field name=\"password\" type=\"password\" />\n      <ErrorMessage name=\"password\" />\n\n      <button>Submit</button>\n    </form>\n  </VeeForm>\n</template>\n\n<script setup>\nimport { Form as VeeForm, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().required().email(),\n  password: yup.string().required().min(8),\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing digits validation rule in Vue template\nDESCRIPTION: Demonstrates the use of 'digits' rule to ensure a field is numeric and has a specific number of digits.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"digits:3\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ digits: 3 }\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Errors Manually Using Scoped Slot Props\nDESCRIPTION: Vue template example showing how to set form errors manually using the Form component's scoped slot props, which provides setFieldError and setErrors functions.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<Form v-slot=\"{ setFieldError, setErrors }\">\n  <Field name=\"email\"  />\n  <ErrorMessage name=\"email\" />\n\n  <Field name=\"password\"  />\n  <ErrorMessage name=\"password\" />\n\n  <button type=\"button\" @click=\"setFieldError('email', 'nope')\">Set Single Error</button>\n  <button type=\"button\" @click=\"setErrors({ email: 'nope', password: 'wrong' })\">\n    Set Multiple Errors\n  </button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Setting a Field Value\nDESCRIPTION: Demonstrates how to set a single field's value, which will trigger validation for that field.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setFieldValue } = useForm();\n\nsetFieldValue('email', 'example@gmail.com');\n```\n\n----------------------------------------\n\nTITLE: Implementing confirmed validation rule in Vue template\nDESCRIPTION: Shows how to use the 'confirmed' rule to ensure a field matches a confirmation field. This rule requires a Form component or useForm() in the parent hierarchy.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form>\n  <Field name=\"password\" type=\"password\" />\n\n  <Field name=\"confirmation\" type=\"password\" rules=\"confirmed:@password\" />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Error Messages with useField in Vue.js\nDESCRIPTION: Code showing how to display error messages using the errorMessage ref returned by useField. This provides access to the first validation error message for a field.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errorMessage, value } = useField('fieldName', yup.string().required());\n\n// contains the error message if available\nerrorMessage.value;\n```\n\n----------------------------------------\n\nTITLE: Using the update Method from useFieldArray\nDESCRIPTION: Example demonstrating how to use the update method to change the value of an item at a specific index in the array managed by useFieldArray.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get update function from composable in component setup\nconst { update } = useFieldArray('links');\n\n// call update function within custom function\nconst myUpdateFunction = () => {\n  // updates the 2nd item value\n  update(1, { url: '' });\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex Fields Using Scoped Slots\nDESCRIPTION: Example of using v-slot to render complex form fields with additional markup. The field object contains all necessary attributes and listeners for validation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<Field name=\"password\" v-slot=\"{ field }\">\n  <input v-bind=\"field\" type=\"password\">\n  <p>Hint: Enter a secure password you can remember</p>\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Implementing image validation rule in Vue template\nDESCRIPTION: Shows how to use the 'image' rule to ensure a file input contains an image file.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"image\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ image: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Validating All Form Fields\nDESCRIPTION: Demonstrates how to validate all fields in the form and get the validation results using the validate method.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst { validate } = useForm();\n\nconst { valid, errors } = await validate();\n```\n\n----------------------------------------\n\nTITLE: Updating VeeValidate Global Configuration in JavaScript\nDESCRIPTION: Example of using the configure function to modify global settings in vee-validate. This snippet demonstrates how to disable the bails option which controls whether validation stops at the first error or continues to completion.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/configuration.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'vee-validate';\n\nconfigure({\n  bails: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Errors Object in VeeValidate\nDESCRIPTION: Example of the errors object structure in VeeValidate's Form component. This object maps field names to their first error message, with only invalid fields being included.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  email: \"this field must be a valid email\",\n  password: \"too short\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFieldError without specifying a field name in Vue\nDESCRIPTION: Automatically looks for the first parent component that used useField and retrieves its error message as a computed ref.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFieldError } from 'vee-validate';\n\n// Will look for the first parent that used `useField`\nconst message = useFieldError();\nmessage.value;\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Values with useForm in Vue.js\nDESCRIPTION: Shows how to access form values using the values object returned by useForm, emphasizing that it should not be directly mutated.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { values } = useForm();\n\n// ❌ Do not do that!\nvalues.email = '';\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Users Array with FieldArray in Vue\nDESCRIPTION: Example of using FieldArray to iterate over a users array, demonstrating how to reference nested field paths in the template.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<Form>\n  <FieldArray name=\"users\" v-slot=\"{ fields }\">\n    <div v-for=\"(entry, idx) in fields\" :key=\"entry.key\">\n      <Field :name=\"`users[${idx}].name`\" />\n    </div>\n  </FieldArray>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Form Values in Vue.js\nDESCRIPTION: Demonstrates how to set initial values for form fields using the initialValues option in useForm.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineInputBinds } = useForm({\n  initialValues: {\n    email: 'test@example.com',\n    password: 'p@$$w0rd',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Field Arrays in vee-validate\nDESCRIPTION: Example of setting up repeatable form fields using useFieldArray\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/nested-objects-and-arrays.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, useFieldArray } from 'vee-validate';\n\nuseForm();\n\nconst { remove, push, fields } = useFieldArray('users');\n```\n\n----------------------------------------\n\nTITLE: Using Field with Custom Checkbox Components in vee-validate\nDESCRIPTION: This snippet shows how to use the Field component with a custom checkbox component. It demonstrates the proper way to set required props when using the 'as' property.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/checkboxes-and-radio.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<Field as=\"my-checkbox\" name=\"terms\" type=\"checkbox\" :value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: FormActions Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface that defines the FormActions object which provides methods for manipulating form state, including setting values, errors, touch state, and resetting the form.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FormActions {\n  setFieldValue: (field: T, value: any) => void;\n  setFieldError: (field: string, message: string | undefined) => void;\n  setErrors: (fields: Partial<Record<string, string | undefined>>) => void;\n  setValues: (fields: Partial<Record<T, any>>) => void;\n  setFieldTouched: (field: string, isTouched: boolean) => void;\n  setTouched: (fields: Partial<Record<string, boolean>>) => void;\n  resetForm: (state?: Partial<FormState>) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Locale in VeeValidate\nDESCRIPTION: Example showing how to configure VeeValidate with a single English locale using the localize function. Demonstrates basic message configuration for the required rule.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/i18n/README.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule, configure } from 'vee-validate';\nimport { required } from '@vee-validate/rules';\nimport { localize } from '@vee-validate/i18n';\n\n// Define the rule globally\ndefineRule('required', required);\n\nconfigure({\n  // Generates an English message locale generator\n  generateMessage: localize('en', {\n    messages: {\n      required: 'This field is required',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Error Message Existence (JavaScript)\nDESCRIPTION: Shows how to test for the presence of an error message without relying on its exact content, which is more robust against message changes.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/testing.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅\nexpect(errorElement.textContent).toBeTruthy();\n```\n\n----------------------------------------\n\nTITLE: Handling Blur Events in VeeValidate\nDESCRIPTION: The 'onBlur' property is an event handler for the blur event. It updates meta information and triggers validation by default.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfield.onBlur: (e: Event | unknown) => void\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Metadata with useForm in Vue.js\nDESCRIPTION: Demonstrates how to access form metadata such as dirty, pending, touched, and valid states using the useForm composable in vee-validate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { meta } = useForm();\n\nmeta.value.dirty;\nmeta.value.pending;\nmeta.value.touched;\nmeta.value.valid;\nmeta.value.initialValues;\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Array Fields in vee-validate\nDESCRIPTION: Example demonstrating how to define form fields with array index notation\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/nested-objects-and-arrays.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineInputBinds } = useForm();\n\nconst twitterLink = defineInputBinds('links[0]');\nconst githubLink = defineInputBinds('links[1]');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Form Context with Vue Composition API\nDESCRIPTION: Demonstrates how to create a basic form context using the useForm composition function to track form values.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useForm } from 'vee-validate';\n\n// Creates a form context\n// This component now acts as a form\n// Usually you will destruct the form context to get what you need\nconst { values } = useForm();\n</script>\n\n<template>\n  <pre>{{ values }}</pre>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Renderless Form Implementation\nDESCRIPTION: Shows how to create a renderless form by using empty string as 'as' prop with manual form handling.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form as=\"\" v-slot=\"{ values, submitForm }\">\n  <h2>Sign up form</h2>\n  <form @submit=\"submitForm\">\n    <Field name=\"name\" />\n    <Field name=\"email\" type=\"email\" />\n    <Field name=\"password\" type=\"password\" />\n\n    <!-- prints current form values -->\n    <pre>\n      {{ values }}\n    </pre>\n  </form>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Field Values\nDESCRIPTION: Shows how to set values for multiple form fields at once using the setValues method.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setValues } = useForm();\n\nsetValues({\n  email: 'example@gmail.com',\n  password: 'p@a$$W0rD',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing integer validation rule in Vue template\nDESCRIPTION: Demonstrates the use of 'integer' rule to validate that a field contains a valid integer value. Does not accept exponential notation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_19\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"integer\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ integer: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Adding @vee-validate/nuxt to Nuxt Configuration\nDESCRIPTION: Basic configuration example showing how to add the vee-validate module to the modules array in nuxt.config.ts.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/nuxt.mdx#2025-04-13_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    //...\n    '@vee-validate/nuxt',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing between validation rule in Vue template\nDESCRIPTION: Demonstrates the usage of 'between' rule in various formats. This rule ensures the field has a numeric value bounded by a minimum and maximum value.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"between:1,10\" />\n\n<!-- object format with shorthand array -->\n<Field name=\"field\" :rules=\"{ between: [1, 10] }\" />\n\n<!-- object format with named arguments -->\n<Field name=\"field\" :rules=\"{ between: { min: 1, max: 10 } }\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing is_not validation rule in Vue template\nDESCRIPTION: Demonstrates the use of 'is_not' rule to ensure a field does not match a specific value, using strict equality.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_21\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"is_not:world\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ is_not: 'world' }\" />\n```\n\n----------------------------------------\n\nTITLE: Form Submission with Validation Schema in VeeValidate\nDESCRIPTION: Shows how to handle form submissions with validation using YUP schema. The form values are automatically passed to the submission handler when the form is valid.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\" :validation-schema=\"schema\">\n    <Field name=\"email\" type=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" type=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().required().email(),\n  password: yup.string().required().min(8),\n});\n\nfunction onSubmit(values) {\n  // Submit values to API...\n  alert(JSON.stringify(values, null, 2));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Deeply Nested Domains with FieldArray in Vue\nDESCRIPTION: Example of using FieldArray to iterate over domains inside a settings.dns object, showing how to reference deeply nested paths.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<Form>\n  <FieldArray name=\"settings.dns.domains\" v-slot=\"{ fields }\">\n    <div v-for=\"(entry, idx) in fields\" :key=\"entry.key\">\n      <Field :name=\"`settings.dns.domains[${idx}]`\" />\n    </div>\n  </FieldArray>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Select Field with 'as' prop\nDESCRIPTION: Example showing how to render a select dropdown using the Field component with the 'as' prop to specify the HTML element type.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<Field name=\"field\" as=\"select\">\n  <option>Coffee</option>\n  <option>Tea</option>\n  <option>Coke</option>\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Using v-model with Simple Field Components\nDESCRIPTION: Example showing the correct way to use v-model with simple Field components for two-way data binding.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- ✅  Simple Field -->\n<Field type=\"text\" name=\"name\" v-model=\"name\" />\n```\n\n----------------------------------------\n\nTITLE: FormState Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the FormState object which contains the complete state of a form including error messages, dirty flags, touched flags, and current values.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormState {\n  // any error messages\n  errors: Record<string, string>;\n  // dirty meta flags\n  dirty: Record<string, boolean>;\n  // touched meta flags\n  touched: Record<string, boolean>;\n  // Form Values\n  values: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: FieldEntry Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for the FieldEntry object which wraps each array item in the fields property, including properties for value, key, and position indicators.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FieldEntry<TValue = unknown> {\n  // The actual value of the item as readonly, this is what exists in the form values\n  value: TValue;\n  // a value you can use as a key for iteration, automatically generated\n  key: string | number;\n  // true if this is the first array item\n  isFirst: boolean;\n  // true if this is the last array item\n  isLast: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VeeValidate with Zod Integration\nDESCRIPTION: Commands to install vee-validate, zod, and the @vee-validate/zod integration package using different package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/zod-schema-validation.mdx#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add vee-validate zod @vee-validate/zod\n\n# or with NPM\nnpm install vee-validate zod @vee-validate/zod\n\n# or with Pnpm\npnpm add vee-validate zod @vee-validate/zod\n```\n\n----------------------------------------\n\nTITLE: Implementing alpha validation rule in Vue template\nDESCRIPTION: Demonstrates how to use the 'alpha' validation rule in both string and object formats. This rule ensures the field only contains alphabetic characters.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"alpha\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ alpha: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Form Reset Handling in Vue with vee-validate\nDESCRIPTION: Demonstrates how to implement form reset functionality using vee-validate. Shows both automatic and manual reset handling approaches.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form :validation-schema=\"schema\">\n    <Field name=\"email\" type=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" type=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button type=\"Submit\">Submit</button>\n    <button type=\"reset\">Reset</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().required().email(),\n  password: yup.string().required().min(8),\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nested FieldArray Components for Complex Data in Vue\nDESCRIPTION: Demonstrates how to nest FieldArray components to handle multi-dimensional data structures like users with nested links arrays.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<Form>\n  <FieldArray name=\"users\" v-slot=\"{ fields: users }\">\n    <div v-for=\"(userEntry, userIdx) in users\">\n      <FieldArray :name=\"`users[${userIdx}].links`\" v-slot=\"{ fields: links }\">\n        <div v-for=\"(entry, idx) in fields\" :key=\"entry.key\">\n          <Field :name=\"`users[${userIdx}].links[${idx}]`\" />\n        </div>\n      </FieldArray>\n    </div>\n  </FieldArray>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Values in useForm\nDESCRIPTION: Example of providing initial values for form fields when using useForm. This sets the default values for each field when the form is created.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ... } = useForm({\n  initialValues: {\n    email: 'example@gmail.com',\n    password: 'p@$$w0rd',\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Form Using Template Refs in Vue\nDESCRIPTION: Vue component example demonstrating how to access and reset a form using template refs, providing an alternative approach to the callback method.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form ref=\"form\" @submit=\"onSubmit\" :validation-schema=\"schema\">\n    <!-- fields ... -->\n\n    <button type=\"Submit\">Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  // ...\n});\n\nfunction onSubmit(values) {\n  console.log(values); // send data to API\n\n  // reset the form\n  this.$refs.form.resetForm();\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form ErrorBag Object in VeeValidate\nDESCRIPTION: Example of the errorBag object structure in VeeValidate's Form component. This object maps field names to all their error messages, showing how multiple validation errors are stored.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  email: [\"this field is required\", \"this field must be a valid email\"],\n  password: \"too short\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Reactive Composable Implementation\nDESCRIPTION: Shows the correct way to implement VeeValidate composables using Vue's reactive utility.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/caveats.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { reactive } from 'vue';\nimport { useField, useForm, useFieldArray } from 'vee-validate';\n\nconst form = reactive(useForm());\nconst field = reactive(useField('field'));\nconst fieldArray = reactive(useFieldArray('users'));\n</script>\n\n<template>\n  <!-- ❌  Still Doesn't work because it is a writeable computed ref -->\n  <input v-model=\"field.value\" />\n\n  <!-- ✅  Works if unwrapped manually -->\n  <input v-model=\"field.value.value\" />\n\n  <!-- ✅  Works -->\n  <pre>{{ form.meta.valid }}</pre>\n\n  <!-- ✅  Works -->\n  <div v-for=\"item in fieldArray.fields\"></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using defineInputBinds for HTML Inputs in VeeValidate\nDESCRIPTION: The defineInputBinds function creates a bindable object for a specified field, designed for native HTML input elements. It must be called in the setup function and is deprecated in favor of defineField.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_32\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <input v-bind=\"email\" />\n  <span>{{ errors.email }}</span>\n\n  <input v-bind=\"password\" type=\"password\" />\n  <span>{{ errors.password }}</span>\n</template>\n\n<script setup>\nimport { useForm } from 'vee-validate';\n\nconst { errors, defineInputBinds } = useForm();\n\nconst email = defineInputBinds('email');\nconst password = defineInputBinds('password');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing VeeValidate with Package Managers\nDESCRIPTION: Commands to install VeeValidate in a Vue.js project using either yarn or npm package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add vee-validate\n\n# or\n\nnpm install vee-validate --save\n```\n\n----------------------------------------\n\nTITLE: Localizing Field Names with @vee-validate/i18n\nDESCRIPTION: Example showing how to localize field names by adding a names property to locale dictionaries, allowing for translated field names in error messages.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'vee-validate';\nimport { localize } from '@vee-validate/i18n';\n\nconfigure({\n  generateMessage: localize({\n    en: {\n      names: {\n        age: 'Age',\n      },\n    },\n    ar: {\n      age: 'السن',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Touched State in useForm\nDESCRIPTION: Example of providing initial touched state for form fields. This allows setting which fields should be considered as interacted with when the form is created.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ... } = useForm({\n  initialTouched: {\n    email: true, // touched\n    password: false, // non-touched\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: DynamicForm Component with Support for Nested Child Elements\nDESCRIPTION: This enhanced version of the DynamicForm component adds support for rendering child elements like options in a select input using dynamic components.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/dynamic-form-generator.mdx#2025-04-13_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <div\n      v-for=\"{ as, name, label, children, ...attrs } in schema.fields\"\n      :key=\"name\"\n    >\n      <label :for=\"name\">{{ label }}</label>\n      <Field :as=\"as\" :id=\"name\" :name=\"name\" v-bind=\"attrs\">\n        <template v-if=\"children && children.length\">\n          <component v-for=\"({ tag, text, ...childAttrs }, idx) in children\"\n            :key=\"idx\"\n            :is=\"tag\"\n            v-bind=\"childAttrs\"\n          >\n            {{ text }}\n          </component>\n        </template>\n      </Field>\n    </div>\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script>\nimport { Form, Field } from 'vee-validate';\n\nexport default {\n  name: 'DynamicForm',\n  components: {\n    Form,\n    Field,\n  },\n  props: {\n    schema: {\n      type: Object,\n      required: true,\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating adaptive validation triggers with event handlers\nDESCRIPTION: Example of implementing advanced validation behavior that switches between lazy and aggressive validation modes based on field validity.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errorMessage, value, handleChange } = useField(() => props.name, undefined, {\n  validateOnValueUpdate: false,\n});\n\nconst validationListeners = {\n  blur: evt => handleBlur(evt, true),\n  change: handleChange,\n  input: evt => handleChange(evt, !!errorMessage.value),\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering ErrorMessage Component in Vue.js\nDESCRIPTION: This snippet shows how to import the ErrorMessage component from vee-validate and register it in a Vue component. It also imports Field and Form components for form handling.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Field, Form, ErrorMessage } from 'vee-validate';\n\nexport default {\n  components: {\n    Field,\n    Form,\n    ErrorMessage,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using useFieldError to get a field's error message in Vue\nDESCRIPTION: Retrieves a computed ref containing a field's error message or undefined if no errors exist. Can be used with a specific field name or automatically pick up the field from a parent component.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFieldError } from 'vee-validate';\n\nconst message = useFieldError('fieldName');\n\nmessage.value; // string or `undefined`\n```\n\n----------------------------------------\n\nTITLE: Optimizing Yup Schema with markRaw in Vue Options API\nDESCRIPTION: This approach uses Vue 3's markRaw function to explicitly prevent the Yup schema from becoming reactive when used with the Options API. This avoids the deep reactive conversion overhead for large schemas.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/best-practices.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { markRaw } from 'vue';\n\n{\n  data() {\n    // Non-reactive because it was explicitly defined with `markRaw`\n    const schema = markRaw(yup.object({\n      email: yup.string().required().email(),\n      password: yup.string().required().min(8),\n    }));\n\n    return {\n      schema,\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing undefined casts in VeeValidate\nDESCRIPTION: Implements a fallback for undefined casts to resolve an issue reported in GitHub issue #4186.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/vee-validate/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmake sure to have a fallback for undefined casts\n```\n\n----------------------------------------\n\nTITLE: Customizing Interpolation Prefix and Suffix\nDESCRIPTION: Example showing how to customize the prefix and suffix characters used for placeholder interpolation in error messages, changing from the default curly braces to a custom format.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule, configure } from 'vee-validate';\nimport { between } from '@vee-validate/rules';\nimport { localize } from '@vee-validate/i18n';\n\n// Define the rule globally\ndefineRule('between', between);\n\nconfigure({\n  // Generates an English message locale generator\n  generateMessage: localize(\n    'en',\n    {\n      messages: {\n        // use double `{{` and `}}` i18next-like curly braces for the interpolated values, instead of the default `{` and `}`\n        between: `The {{field}} field must be between 0:{{min}} and 1:{{max}}`,\n      },\n    },\n    {\n      prefix: '{{',\n      suffix: '}}',\n    },\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Array Structure Result in JavaScript\nDESCRIPTION: Shows the resulting JavaScript object structure when submitting a form with fields using array index notation. The values are automatically organized into an array.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"links\": [\n    \"https://twitter.com/logaretm\",\n    \"https://github.com/logaretm\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIsFieldValid to check if a field has no validation errors\nDESCRIPTION: Returns a computed ref containing a boolean indicating whether the specified field is valid (has no error messages).\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFieldValid } from 'vee-validate';\n\nconst isValid = useIsFieldValid('fieldName');\n\nisValid.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Using useFormValues to access all form field values\nDESCRIPTION: Returns a computed ref containing an object with all form field values, with field names as keys.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFormValues } from 'vee-validate';\n\nconst values = useFormValues();\n\nvalues.value;\n```\n\n----------------------------------------\n\nTITLE: Accessing Controlled Values in vee-validate\nDESCRIPTION: Demonstrates how to access only controlled values from useForm result and submit them to an API endpoint. Controlled values are those that have a form input controlling them.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { handleSubmit, controlledValues } = useForm();\n\nconst onSubmit = handleSubmit(async () => {\n  // Send only controlled values to the API\n  const response = await client.post('/users/', controlledValues.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VeeValidate Validation Triggers\nDESCRIPTION: Configuration options for controlling when validation is triggered using the configure helper function\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'vee-validate';\n\n// Default values\nconfigure({\n  validateOnBlur: true, // controls if `blur` events should trigger validation with `handleChange` handler\n  validateOnChange: true, // controls if `change` events should trigger validation with `handleChange` handler\n  validateOnInput: false, // controls if `input` events should trigger validation with `handleChange` handler\n  validateOnModelUpdate: true, // controls if `update:modelValue` events should trigger validation with `handleChange` handler\n});\n```\n\n----------------------------------------\n\nTITLE: Submitting Only Controlled Fields\nDESCRIPTION: Shows how to use handleSubmit.withControlled to only submit fields that are controlled by useField or useFieldModel.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <form @submit=\"onSubmit\"></form>\n</template>\n\n<script setup>\nimport { useForm } from 'vee-validate';\n\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit.withControlled(values => {\n  // Send only controlled values to the API\n  // Only fields declared with `useField` or `useFieldModel` will be printed\n  alert(JSON.stringify(values, null, 2));\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Form Structure\nDESCRIPTION: Setting up the initial form structure with an email input field and submit button.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <form novalidate>\n      <input type=\"email\" name=\"email\" />\n\n      <button>Sign up for newsletter</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Package Changelog Entry in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, dependency updates, and bug fixes for @vee-validate/valibot package\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/valibot/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @vee-validate/valibot\n\n## 4.15.0\n\n### Minor Changes\n\n- db26a74: chore: bump schema dependencies and move them to peer deps closes #4951\n\n### Patch Changes\n\n- f92455a: chore: upgrade valibot to beta.7\n- Updated dependencies [30281f5]\n- Updated dependencies [ec121b1]\n  - vee-validate@4.15.0\n```\n\n----------------------------------------\n\nTITLE: Zod Schema with Default Values\nDESCRIPTION: Demonstrates how to set default values in Zod schema that will be used as initial form values and fallback values for missing fields during submission.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/zod/README.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'zod';\nimport { toTypedSchema } from '@vee-validate/zod';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().default('something@email.com'),\n      password: string().default(''),\n    })\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Using the swap Method from useFieldArray\nDESCRIPTION: Example demonstrating how to use the swap method to exchange the positions of two items in the array managed by useFieldArray.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get swap function from composable in component setup\nconst { swap } = useFieldArray('links');\n\n// call swap function within custom function\nconst mySwapFunction = () => {\n  // Swaps the 4th item with the 5th\n  swap(3, 4);\n};\n```\n\n----------------------------------------\n\nTITLE: Validating a Specific Field\nDESCRIPTION: Shows how to validate a single specific field and get its validation results using the validateField method.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst { validateField } = useForm();\n\nconst { valid, errors } = await validateField('email');\n```\n\n----------------------------------------\n\nTITLE: Field Array Path Examples in vee-validate\nDESCRIPTION: Examples of different path notations for field arrays in nested structures\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/nested-objects-and-arrays.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { remove, push, fields } = useFieldArray('users');\n\nconst { remove, push, fields } = useFieldArray('settings.dns.domains');\n```\n\n----------------------------------------\n\nTITLE: Importing VeeValidate Rules Package\nDESCRIPTION: Example of importing and configuring all rules from @vee-validate/rules package\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule } from 'vee-validate';\nimport { all } from '@vee-validate/rules';\n\nObject.entries(all).forEach(([name, rule]) => {\n  defineRule(name, rule);\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Component Props with State\nDESCRIPTION: Example of mapping field state to component props for custom error handling.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { defineField } = useForm({\n  // ...\n});\n\nconst [email, emailProps] = defineField('email', { props: state => ({ error: state.errors[0] }) });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Name in VeeValidate\nDESCRIPTION: The 'name' property of the field object contains the name of the field.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfield.name: string\n```\n\n----------------------------------------\n\nTITLE: Field Metadata Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of field metadata in VeeValidate\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FieldMeta {\n  dirty: boolean;\n  pending: boolean;\n  touched: boolean;\n  valid: boolean;\n  initialValue: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Field Names in v-for Loop\nDESCRIPTION: Example of dynamic field name generation in a v-for loop context.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/caveats.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<CustomTextField\n  v-for=\"(user, idx) in users\"\n  :key=\"user.id\"\n  :name=\"`users[${idx}].name`\"\n></CustomTextField>\n```\n\n----------------------------------------\n\nTITLE: Using the replace Method from useFieldArray\nDESCRIPTION: Example showing how to use the replace method to completely replace the entire array managed by useFieldArray with a new set of items.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get replace function from composable in component setup\nconst { replace } = useFieldArray('links');\n\n// call replace function within custom function\nconst myReplaceFunction = () => {\n  // replace the entire array with these items\n  replace([{ url: 'https://google.com' }, { url: 'https://vuejs.org' }]);\n};\n```\n\n----------------------------------------\n\nTITLE: Using useIsSubmitting to track form submission state\nDESCRIPTION: Returns a computed ref containing a boolean indicating whether the form is currently being submitted.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsSubmitting } from 'vee-validate';\n\nconst isSubmitting = useIsSubmitting();\n\nisSubmitting.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Avoiding Nesting in vee-validate with Vue\nDESCRIPTION: Shows how to prevent automatic nesting of fields by wrapping field names in square brackets. This maintains dot notation in names without creating nested object structures.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\">\n    <Field name=\"[links.twitter]\" type=\"url\" />\n    <Field name=\"[links.github]\" type=\"url\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nfunction onSubmit(values) {\n  alert(JSON.stringify(values, null, 2));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Field Touch State in VeeValidate\nDESCRIPTION: Example showing how to update a field's touched state using the handleBlur function returned by useField. This is useful for triggering validation on blur events.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { meta, handleBlur } = useField('fieldName');\n\n// updates meta.touched = true\nhandleBlur();\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimum Value Validation in VeeValidate\nDESCRIPTION: Validates that numeric field values are not less than the specified minimum value.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_27\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"min_value:5\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ min_value: 5 }\" />\n```\n\n----------------------------------------\n\nTITLE: Importing LiveExample Component in Vue\nDESCRIPTION: This snippet imports a LiveExample component from the components directory. The component is used to demonstrate cross-field validation in a live, interactive manner.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/cross-field-validation.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport LiveExample from '@/components/LiveExample.vue';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Component with 'as' prop\nDESCRIPTION: Example showing how to render globally defined custom components using the Field component's 'as' prop.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<Field name=\"field\" as=\"my-text-field\" />\n```\n\n----------------------------------------\n\nTITLE: Importing All Yup Validators (Non-Optimized Approach)\nDESCRIPTION: This snippet shows the common but less efficient approach of importing all Yup validators. This approach increases bundle size by including unused validators.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/best-practices.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().email(),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using the remove Method from useFieldArray\nDESCRIPTION: Example showing how to use the remove method to delete an item at a specific index from the array managed by useFieldArray.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get remove function from composable in component setup\nconst { remove } = useFieldArray('links');\n\n// call remove function within custom function\nconst myRemoveFunction = () => {\n  // removes the second item from the array\n  remove(1);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Errors in vee-validate Forms\nDESCRIPTION: Shows how to pre-fill form errors using the initialErrors option in useForm. This is useful for server-side rendering where errors might be available before client-side validation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nuseForm({\n  initialErrors: {\n    email: 'This email is already taken',\n    password: 'The password is too short',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VeeValidate Nuxt Module with Inline Options\nDESCRIPTION: Advanced configuration of the @vee-validate/nuxt module using inline array syntax. This allows customization of auto imports and component names to avoid conflicts with other libraries.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/nuxt/README.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    //...\n    [\n      '@vee-validate/nuxt',\n      {\n        // disable or enable auto imports\n        autoImports: true,\n        // Use different names for components\n        componentNames: {\n          Form: 'VeeForm',\n          Field: 'VeeField',\n          FieldArray: 'VeeFieldArray',\n          ErrorMessage: 'VeeErrorMessage',\n        },\n      },\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Checkbox Component with vee-validate\nDESCRIPTION: Creates a custom checkbox component using vee-validate's useField composable. This implementation handles both individual checkboxes and checkbox groups by specifying the input type as 'checkbox' and providing a checkedValue from props. The component manages the checked state and change handlers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/custom-checkboxes.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useField } from 'vee-validate';\n\nexport default {\n  props: {\n    // The group's value\n    modelValue: {\n      type: null,\n    },\n    // Field's own value\n    value: {\n      type: null,\n    },\n    name: {\n      type: String,\n    },\n    rules: {\n      type: String,\n      default: undefined,\n    },\n  },\n  setup(props) {\n    // We pass a function to make sure the name stays reactive\n    const { checked, handleChange } = useField(() => props.name, props.rules, {\n      // 👇 These are important\n      type: 'checkbox',\n      checkedValue: props.value,\n    });\n\n    // select/unselect the input\n    handleChange(props.value);\n\n    return {\n      checked, // readonly\n      handleChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Native Form Submission\nDESCRIPTION: Demonstrates using submitForm to enable native HTML form submission that respects form action and method attributes after validation passes.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_26\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <form @submit=\"submitForm\" action=\"/api/login\" method=\"post\">\n    <!-- ... -->\n  </form>\n</template>\n\n<script setup>\nimport { useForm } from 'vee-validate';\n\nconst { submitForm } = useForm();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Live Example Component\nDESCRIPTION: Import statement for a Vue component that provides live examples of the form wizard implementations\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/multistep-form-wizard.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LiveExample from '@/components/LiveExample.vue';\n```\n\n----------------------------------------\n\nTITLE: Implementing is validation rule in Vue template\nDESCRIPTION: Shows how to use the 'is' rule to ensure a field matches a specific value using strict equality.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_20\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"is:hello\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ is: 'hello' }\" />\n```\n\n----------------------------------------\n\nTITLE: Field Metadata TypeScript Interface in VeeValidate\nDESCRIPTION: TypeScript interface definition for the field metadata object returned by useField, showing the available properties and their types for better type checking and IntelliSense support.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FieldMeta {\n  dirty: boolean;\n  pending: boolean;\n  touched: boolean;\n  valid: boolean;\n  initialValue: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Field's Touched State\nDESCRIPTION: Demonstrates how to manually set a field's touched meta flag using the setFieldTouched method.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setFieldTouched } = useForm();\n\nsetFieldTouched('email', true);\n```\n\n----------------------------------------\n\nTITLE: Using useIsFormDirty to check if any form values have changed\nDESCRIPTION: Returns a computed ref containing a boolean indicating whether any field values in the form have changed from their initial values.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFormDirty } from 'vee-validate';\n\nconst isDirty = useIsFormDirty();\n\nisDirty.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Exposing errorBag to Form slot props in VeeValidate\nDESCRIPTION: Adds the errorBag object to the slot props of the <Form> component, allowing access to form errors within the slot.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/vee-validate/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexpose errorBag to <Form /> slot props\n```\n\n----------------------------------------\n\nTITLE: Checking Form Submission Status\nDESCRIPTION: Shows how to check if a form is currently submitting using the isSubmitting ref property.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isSubmitting } = useForm();\n\nisSubmitting.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Fixing Undefined Casts\nDESCRIPTION: Implements a fallback for undefined casts to resolve issue #4186.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmake sure to have a fallback for undefined casts\n```\n\n----------------------------------------\n\nTITLE: Commit Reference for Field Value Fix\nDESCRIPTION: A commit hash referencing a fix to avoid unsetting field value when switched with another, addressing issue #3166.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CHANGELOG.md#2025-04-13_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nf5a79fe3b15f7437acf183c162e69178fd4fa7ec\n```\n\n----------------------------------------\n\nTITLE: Using the fields Property from useFieldArray\nDESCRIPTION: Example showing how to access the fields property from the useFieldArray composable, which provides a read-only version of the array items.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// call composable in component setup to get readable version of links array\nconst { fields } = useFieldArray('links');\n```\n\n----------------------------------------\n\nTITLE: Using resetForm with Force Option in VeeValidate\nDESCRIPTION: By default, resetForm merges previous initial values with new ones, only overwriting the provided fields. Using the force option will overwrite all fields instead of just merging the provided ones.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst { values, resetForm } = useForm({\n  initialValues: { fname: '123', lname: '456' },\n});\n\n// values: { fname: '123', lname: '456' }\nresetForm({ values: { fname: 'test' } });\n\n// values: { fname: 'test' }\nresetForm({ values: { fname: 'test' } }, { force: true });\n```\n\n----------------------------------------\n\nTITLE: Using useIsFormTouched to check if any form fields have been interacted with\nDESCRIPTION: Returns a computed ref containing a boolean indicating whether the user has interacted with any field in the form.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFormTouched } from 'vee-validate';\n\nconst isTouched = useIsFormTouched();\n\nisTouched.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Messages for Specific Fields\nDESCRIPTION: Example showing how to override specific rule messages for particular fields by updating the locale dictionary with field-specific error messages.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { localize } from '@vee-validate/i18n';\n\nlocalize('en', {\n  fields: {\n    password: {\n      required: 'Hey! Password cannot be empty',\n    },\n  },\n});\n\n// Or update multiple languages\nlocalize({\n  en: {\n    fields: {\n      password: {\n        required: 'Hey! Password cannot be empty',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Meta Properties in Vue Templates\nDESCRIPTION: Basic example showing how to access and display form metadata in a template using the Form component's scoped slot props.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form v-slot=\"{ meta }\">\n  <!-- Some fields -->\n  <pre>{{ meta }}</pre>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm\nDESCRIPTION: Command to install all required project dependencies using pnpm package manager.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CONTRIBUTING.md#2025-04-13_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Using validation listeners with v-on directive\nDESCRIPTION: Example of applying multiple validation event listeners to an input element using Vue's v-on directive with an object of handlers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<input :value=\"value\" v-on=\"validationListeners\" type=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Development Server\nDESCRIPTION: Command to start the local development server for the documentation site.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CONTRIBUTING.md#2025-04-13_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Field Names with useField\nDESCRIPTION: Demonstrates the correct way to pass field names to useField using a function to maintain reactivity with props.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/caveats.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useField } from 'vee-validate';\n\nexport default {\n  props: {\n    name: String,\n  },\n  setup(props) {\n    const { value, errorMessage } = useField(() => props.name);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using useFieldValue without specifying a field name in Vue\nDESCRIPTION: Automatically looks for the first parent component that used useField and retrieves its current value as a computed ref.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFieldValue } from 'vee-validate';\n\n// Will look for the first parent that used `useField`\nconst currentValue = useFieldValue();\n```\n\n----------------------------------------\n\nTITLE: Using useIsFieldValid without specifying a field name in Vue\nDESCRIPTION: Automatically looks for the first parent component that used useField and retrieves its valid state as a computed ref boolean.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFieldValid } from 'vee-validate';\n\n// Will look for the first parent that used `useField`\nconst isValid = useIsFieldValid();\n```\n\n----------------------------------------\n\nTITLE: Implementing One-Of Validation in VeeValidate\nDESCRIPTION: Validates that field value matches one of the specified values using double equals comparison.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_29\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"one_of:1,2,3\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ one_of: [1, 2, 3] }\" />\n```\n\n----------------------------------------\n\nTITLE: Form-Level Error Display\nDESCRIPTION: Example of displaying validation errors at the form level using Form component slots\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<Form v-slot=\"{ errors }\">\n  <template v-if=\"Object.keys(errors).length\">\n    <p>Please correct the following errors</p>\n    <ul>\n      <li v-for=\"(message, field) in errors\" :key=\"field\">\n        {{ message }}\n      </li>\n    </ul>\n  </template>\n\n  <Field name=\"name\" :rules=\"rules\" />\n  <Field name=\"email\" :rules=\"rules\" />\n  <Field name=\"password\" :rules=\"rules\" />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: FormState Interface Definition\nDESCRIPTION: Shows the TypeScript interface for the FormState object that can be used with resetForm to set specific form state properties.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ntype TouchedFlags = { [k: string]: boolean };\n\ninterface FormState {\n  // any error messages\n  errors: Record<string, string>;\n  // touched meta flags\n  touched: TouchedFlags;\n  // Form Values\n  values: Record<string, any>;\n  // The form submit attempts count\n  submitCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Validators in Vue Template\nDESCRIPTION: Example of using defined validation rules in Field components\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<Field name=\"name\" rules=\"required\" />\n\n<Field name=\"email\" rules=\"required|email\" />\n```\n\n----------------------------------------\n\nTITLE: Configurable minLength Validation Rule\nDESCRIPTION: Implementation of a minLength validation rule that accepts a length parameter\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule } from 'vee-validate';\n\ndefineRule('minLength', (value, [limit]) => {\n  // The field is empty so it should pass\n  if (!value || !value.length) {\n    return true;\n  }\n\n  if (value.length < limit) {\n    return `This field must be at least ${limit} characters`;\n  }\n\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating field bindings with useForm and defineField\nDESCRIPTION: Example of the imperative approach using useForm and defineField to create multiple field bindings for a form with 5 fields. This approach requires more boilerplate code.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineField } = useForm();\n\nconst email = defineField('email');\nconst firstName = defineField('firstName');\nconst lastName = defineField('lastName');\nconst password = defineField('password');\nconst passwordConfirm = defineField('passwordConfirm');\n```\n\n----------------------------------------\n\nTITLE: Version 4.14.7 Changelog Entry\nDESCRIPTION: Changelog entry documenting patch changes related to uncontrolled field information display in devtools.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.14.7\n\n### Patch Changes\n\n- be994b4: fix: show uncontrolled field info in devtools closes #4914\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Form Submissions in Vue.js\nDESCRIPTION: Demonstrates how to handle both successful and failed form submissions using the handleSubmit function with success and error callbacks.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { handleSubmit } = useForm();\n\nfunction onSuccess(values) {\n  alert(JSON.stringify(values, null, 2));\n}\n\nfunction onInvalidSubmit({ values, errors, results }) {\n  console.log(values); // current form values\n  console.log(errors); // a map of field names and their first error message\n  console.log(results); // a detailed map of field names and their validation results\n}\n\nconst onSubmit = handleSubmit(onSuccess, onInvalidSubmit);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for useFieldArray\nDESCRIPTION: The complete TypeScript interface definition for the useFieldArray function, including FieldEntry and FieldArrayContext interfaces with their respective properties and methods.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-field-array.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FieldEntry<TValue = unknown> {\n  value: Ref<TValue>;\n  key: string | number;\n  isFirst: boolean;\n  isLast: boolean;\n}\n\ninterface FieldArrayContext<TValue = unknown> {\n  fields: Ref<FieldEntry<TValue>[]>;\n  remove(idx: number): void;\n  replace(newArray: TValue[]): void;\n  update(idx: number, value: TValue): void;\n  push(value: TValue): void;\n  swap(indexA: number, indexB: number): void;\n  insert(idx: number, value: TValue): void;\n  prepend(value: TValue): void;\n  move(oldIdx: number, newIdx: number): void;\n}\n\nfunction useFieldArray: (arrayPath: string): FieldArrayContext;\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Validation in VeeValidate\nDESCRIPTION: Ensures field value contains only numeric characters.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_28\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"numeric\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ numeric: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing File Size Validation in VeeValidate\nDESCRIPTION: Validates that uploaded file size does not exceed specified size in kilobytes.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_32\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" type=\"file\" rules=\"size:250\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ size: 250 }\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Large Numbers Example\nDESCRIPTION: Demonstrates the difference between unformatted and formatted large numbers using thousand separators for better readability.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/value-formatting.mdx#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# hard to read\n10000000\n\n# Much easier\n10,000,000\n```\n\n----------------------------------------\n\nTITLE: Installing @vee-validate/yup Package\nDESCRIPTION: Commands to install the @vee-validate/yup package using npm, yarn, or pnpm.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/yup/README.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# npm\nnpm install @vee-validate/yup\n# yarn\nyarn add @vee-validate/yup\n# pnpm\npnpm add @vee-validate/yup\n```\n\n----------------------------------------\n\nTITLE: Using useValidateField to manually trigger field validation\nDESCRIPTION: Returns a function that validates a specific field and returns a validation result containing any errors. If the errors field is empty, the field is valid.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useValidateField } from 'vee-validate';\n\nconst validate = useValidateField('fieldName');\n\nawait validate();\n```\n\n----------------------------------------\n\nTITLE: Defining Yup Schema in Vue Data (Standard Approach)\nDESCRIPTION: This snippet shows the common approach of defining Yup schemas in Vue's data option. This approach can cause unnecessary reactivity overhead as Vue recursively converts all objects in data to reactive objects.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/best-practices.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data() {\n    const schema = yup.object({\n      email: yup.string().required().email(),\n      password: yup.string().required().min(8),\n    });\n\n    return {\n      schema,\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing email validation rule in Vue template\nDESCRIPTION: Demonstrates how to use the 'email' rule to validate that a field contains a valid email address.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"email\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ email: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing alpha_spaces validation rule in Vue template\nDESCRIPTION: Shows how to use the 'alpha_spaces' rule in string and object formats. This rule allows the field to contain alphabetic characters or spaces.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"alpha_spaces\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ alpha_spaces: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Tracking Form Submission Count in Vue.js\nDESCRIPTION: Demonstrates how to use the submitCount ref from useForm to track the number of form submission attempts.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { submitCount } = useForm();\n```\n\n----------------------------------------\n\nTITLE: Version 4.15.0 Changelog Entry\nDESCRIPTION: Changelog entry documenting patch changes related to devtools dependency loading and SSR support.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.15.0\n\n### Patch Changes\n\n- 30281f5: fix: lazy load the devtools dep to force it out of production bundle\n- ec121b1: fix: skip loading devtools if in SSR\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Field Errors Based on User Interaction in Vue\nDESCRIPTION: This example demonstrates how to properly display error messages only after a field has been touched by the user, creating a less aggressive user experience. It uses the useField composable from vee-validate to track field state.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/best-practices.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <input name=\"fieldName\" v-model=\"value\" />\n    <span v-if=\"errorMessage && meta.touched\">\n      {{ errorMessage }}\n    </span>\n  </div>\n</template>\n\n<script setup>\nimport { useField } from 'vee-validate';\n\nconst { errorMessage, meta, value } = useField('fieldName');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationgenerateMessage Type Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the message generator function, showing the structure of the FieldContext object and ValidationgenerateMessage type used for error message generation.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FieldContext {\n  field: string; // The field's name or label (see next section)\n  value: any; // the field's current value\n  form: Record<string, any>; // other values in the form\n  rule: {\n    name: string; //the rule name\n    params?: any[]; // any params sent to it\n  };\n}\n\ntype ValidationgenerateMessage = (ctx: FieldContext) => string;\n```\n\n----------------------------------------\n\nTITLE: Implementing alpha_dash validation rule in Vue template\nDESCRIPTION: Shows the usage of the 'alpha_dash' rule in string and object formats. This rule allows alphabetic characters, numbers, dashes, or underscores in the field.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"alpha_dash\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ alpha_dash: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering ErrorMessage with Custom Element\nDESCRIPTION: Shows how to use the 'as' prop to control the root element that will render the error message. By default, it renders as a span if not specified.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/error-message.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<ErrorMessage name=\"email\" as=\"p\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Form Validation Status\nDESCRIPTION: Demonstrates how to check if a form is currently validating using the isValidating ref property.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isValidating } = useForm();\n\nisValidating.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Form Submissions in Vue with vee-validate\nDESCRIPTION: Demonstrates how to handle invalid form submissions using the onInvalidSubmit event. Shows implementation of form validation with yup schema and handling of validation errors.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\" :validation-schema=\"schema\" @invalid-submit=\"onInvalidSubmit\">\n    <Field name=\"email\" type=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" type=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().required().email(),\n  password: yup.string().required().min(8),\n});\n\nfunction onSubmit(values) {\n  // Submit values to API...\n  alert(JSON.stringify(values, null, 2));\n}\n\nfunction onInvalidSubmit({ values, errors, results }) {\n  console.log(values); // current form values\n  console.log(errors); // a map of field names and their first error message\n  console.log(results); // a detailed map of field names and their validation results\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: VeeValidate Form Implementation using Composition API\nDESCRIPTION: Example showing how to create a form using VeeValidate's composition API with useForm and defineField hooks. Includes validation logic and form submission handling.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/README.md#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useForm } from 'vee-validate';\n\n// Validation, or use `yup` or `zod`\nfunction required(value) {\n  return value ? true : 'This field is required';\n}\n\n// Create the form\nconst { defineField, handleSubmit, errors } = useForm({\n  validationSchema: {\n    field: required,\n  },\n});\n\n// Define fields\nconst [field, fieldProps] = defineField('field');\n\n// Submit handler\nconst onSubmit = handleSubmit(values => {\n  // Submit to API\n  console.log(values);\n});\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    <input v-model=\"field\" v-bind=\"fieldProps\" />\n    <span>{{ errors.field }}</span>\n\n    <button>Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useFieldModel for Two-Way Binding in VeeValidate\nDESCRIPTION: The useFieldModel function creates bindable two-way model values for specified fields. It accepts either a single field path or multiple fields via an array. This function is deprecated in favor of defineField.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_31\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <input name=\"email\" v-model=\"email\" />\n  <span>{{ errors.email }}</span>\n\n  <input name=\"password\" v-model=\"password\" type=\"password\" />\n  <span>{{ errors.password }}</span>\n</template>\n\n<script setup>\nimport { useForm } from 'vee-validate';\n\nconst { errors, useFieldModel } = useForm();\n\nconst email = useFieldModel('email');\nconst password = useFieldModel('password');\n\n// or multiple models at once\nconst [email, password] = useFieldModel(['email', 'password']);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing alpha_num validation rule in Vue template\nDESCRIPTION: Demonstrates the use of 'alpha_num' rule in string and object formats. This rule allows the field to contain only alphabetic characters or numbers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"alpha_num\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ alpha_num: true }\" />\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Error Message Content (JavaScript)\nDESCRIPTION: Shows how to test exact error message content by referencing messages from a centralized dictionary file.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/testing.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport messages from 'strings/validation.js';\n\n// ✅\nexpect(errorElement.textContent).toBe(messages.required);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Fields' Touched State\nDESCRIPTION: Shows how to set the touched meta flag for multiple fields simultaneously using the setTouched method.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setTouched } = useForm();\n\nsetTouched({\n  email: true,\n  password: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Predefined Locale Files from @vee-validate/i18n\nDESCRIPTION: Example showing how to import and use predefined locale JSON files from the @vee-validate/i18n package for English and Arabic locales.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'vee-validate';\nimport { localize } from '@vee-validate/i18n';\nimport en from '@vee-validate/i18n/dist/locale/en.json';\nimport ar from '@vee-validate/i18n/dist/locale/ar.json';\n\nconfigure({\n  generateMessage: localize({\n    en,\n    ar,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Message Generator in JavaScript\nDESCRIPTION: Example of using the configure function to set up a custom message generator that returns a simple error message based on the field context.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'vee-validate';\n\nconfigure({\n  generateMessage: context => {\n    return `The field ${context.field} is invalid`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Changing VeeValidate Locale\nDESCRIPTION: Example showing how to change the active locale using the setLocale function.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/i18n/README.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLocale } from '@vee-validate/i18n';\n\nsetLocale('ar');\n```\n\n----------------------------------------\n\nTITLE: Implementing ext validation rule in Vue template\nDESCRIPTION: Demonstrates the use of 'ext' rule to validate file extensions for file inputs.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"ext:jpg,png\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ ext: ['jpg', 'png'] }\" />\n```\n\n----------------------------------------\n\nTITLE: Using useIsFieldTouched to check if a field has been interacted with\nDESCRIPTION: Returns a computed ref containing a boolean indicating whether the user has interacted with the specified field.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFieldTouched } from 'vee-validate';\n\nconst isTouched = useIsFieldTouched('fieldName');\n\nisTouched.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Custom Form Component Rendering\nDESCRIPTION: Demonstrates rendering Form with a custom v-form component using the 'as' prop.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form as=\"v-form\">\n  <Field name=\"password\" type=\"password\" />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Defining Form Schema with Yup Validation Rules in Vue.js\nDESCRIPTION: This snippet shows how to create a form schema with Yup validation rules for each field. It defines rules for name, email, and password fields using Yup's validation methods.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/dynamic-form-generator.mdx#2025-04-13_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <DynamicForm :schema=\"formSchema\" />\n</template>\n\n<script>\nimport DynamicForm from '@/components/DynamicForm.vue';\nimport * as Yup from 'yup';\n\nexport default {\n  components: {\n    DynamicForm,\n  },\n  data: () => {\n    const formSchema = {\n      fields: [\n        {\n          label: 'Your Name',\n          name: 'name',\n          as: 'input',\n          rules: Yup.string().required(),\n        },\n        {\n          label: 'Your Email',\n          name: 'email',\n          as: 'input',\n          rules: Yup.string().email().required(),\n        },\n        {\n          label: 'Your Password',\n          name: 'password',\n          as: 'input',\n          type: 'password',\n          rules: Yup.string().min(6).required(),\n        },\n      ],\n    };\n\n    return {\n      formSchema,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useValidateField without specifying a field name in Vue\nDESCRIPTION: Automatically looks for the first parent component that used useField and returns a function that validates that field.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useValidateField } from 'vee-validate';\n\n// Will look for the first parent that used `useField`\nconst validate = useValidateField();\n```\n\n----------------------------------------\n\nTITLE: Using useSubmitCount to track form submission attempts\nDESCRIPTION: Returns a computed ref containing the number of times the form has been submitted.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSubmitCount } from 'vee-validate';\n\nconst count = useSubmitCount();\n\ncount.value;\n```\n\n----------------------------------------\n\nTITLE: Implementing not_one_of validation rule in Vue template\nDESCRIPTION: Shows how to use the 'not_one_of' rule to ensure a field's value is not in a specified list. Uses double equals for checks.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"not_one_of:1,3\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ not_one_of: [1, 3] }\" />\n```\n\n----------------------------------------\n\nTITLE: FormMeta Interface Structure in VeeValidate\nDESCRIPTION: The interface definition for FormMeta in VeeValidate, containing aggregated meta information and flags reflecting the state of all fields within a form.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormMeta {\n  touched: boolean; // if at least one field is touched (was blurred)\n  dirty: boolean; // if at least one field is dirty (manipulated)\n  valid: boolean; // if all fields are valid\n  pending: boolean; // if at least one field is pending validation\n  initialValues?: Record<string, any>; // a map of the form's initial values\n}\n```\n\n----------------------------------------\n\nTITLE: Using Yup Transforms\nDESCRIPTION: Demonstrates how to use Yup transforms to cast field values before submission. Note that this doesn't change input or output types.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/yup/README.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, number } from 'yup';\nimport { toTypedSchema } from '@vee-validate/yup';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      age: number()\n        .transform(val => Number(val))\n        .required(),\n    })\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Form Actions in Submit Handlers\nDESCRIPTION: Shows how to use the form actions object provided in the submit handler to perform various operations like setting values or errors.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst { handleSubmit } = useForm();\n\nconst onSubmit = handleSubmit((values, actions) => {\n  // Send data to API\n  alert(JSON.stringify(values, null, 2));\n\n  // the form object contains useful methods\n  // set a single field value\n  actions.setFieldValue('field', 'hello');\n  // set multiple fields values\n  actions.setValues({ email: 'value', password: 'hi' });\n  // set a single field error\n  actions.setFieldError('field', 'this field is bad');\n  // set multiple fields errors\n  actions.setErrors({ email: 'bad email', password: 'bad password' });\n  // reset the form\n  actions.resetForm();\n});\n```\n\n----------------------------------------\n\nTITLE: Using useFieldValue to access a field's current value\nDESCRIPTION: Returns a computed ref containing the current value of a specified field. Can be used with a specific field name or automatically pick up the field from a parent component.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFieldValue } from 'vee-validate';\n\nconst currentValue = useFieldValue('fieldName');\n\ncurrentValue.value;\n```\n\n----------------------------------------\n\nTITLE: Implementing dimensions validation rule in Vue template\nDESCRIPTION: Shows how to use the 'dimensions' rule to validate image dimensions for file inputs.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" type=\"file\" rules=\"dimensions:120,120\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ dimensions: [120, 120] }\" />\n\n<!-- object format with named arguments -->\n<Field name=\"field\" :rules=\"{ dimensions: { width: 120, height: 120 } }\" />\n```\n\n----------------------------------------\n\nTITLE: Using the Field Label Prop in Vue Template\nDESCRIPTION: Example showing how to use the label prop on the Field component to display better field names in error messages instead of using the field name directly.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form>\n  <Field name=\"_bad_field_name\" label=\"nice name\" rules=\"required|email\" />\n  <ErrorMessage name=\"_bad_field_name\" />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Setting Errors Using Template Refs\nDESCRIPTION: Vue component showing how to set form errors using template refs to access the Form component instance methods, which is an alternative approach when other methods aren't suitable.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form @submit=\"onSubmit\" ref=\"myForm\">\n    <Field name=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nfunction onSubmit(values) {\n  // Submit the values...\n\n  // if API returns errors\n  this.$refs.myForm.setFieldError('email', 'this email is already taken');\n  this.$refs.myForm.setErrors({\n    email: 'this field is already taken',\n    password: 'someone already has this password',\n  });\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mocking Form and Field Contexts (JavaScript)\nDESCRIPTION: Demonstrates how to mock FormContext and FieldContext objects for unit testing components that rely on these contexts.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/testing.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { provide } from 'vue';\nimport { FormContextKey, FieldContextKey } from 'vee-validate';\n\nprovide(FormContextKey, MockedForm);\nprovide(FieldContextKey, MockedField);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Locales in vee-validate\nDESCRIPTION: Example showing how to set up multiple language locales (English and Arabic) for validation error messages using the localize function.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule, configure } from 'vee-validate';\nimport { required } from '@vee-validate/rules';\nimport { localize } from '@vee-validate/i18n';\n\n// Define the rule globally\ndefineRule('required', required);\n\nconfigure({\n  generateMessage: localize({\n    en: {\n      messages: {\n        required: 'This field is required',\n      },\n    },\n    ar: {\n      messages: {\n        required: 'هذا الحقل مطلوب',\n      },\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Values in VeeValidate\nDESCRIPTION: Demonstrates how to access form values using the values scoped slot prop on the Form component without needing v-model.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form v-slot=\"{ values }\">\n    <Field name=\"email\" type=\"email\" />\n    <Field name=\"password\" type=\"password\" />\n\n    <!-- print form values -->\n    <pre>{{ values }}</pre>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field } from 'vee-validate';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing defineRule from VeeValidate\nDESCRIPTION: Basic import statement for the defineRule function from vee-validate package\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRule } from 'vee-validate';\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handling with Field Component\nDESCRIPTION: Examples of binding custom event handlers for validation using Field component slots\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Listen to all events, this is the default behavior -->\n<Field v-slot=\"{ field }\">\n  <input v-bind=\"field\" />\n</Field>\n\n<!-- Only validate when the change event is dispatched -->\n<Field v-slot=\"{ field, handleChange }\">\n  <input @change=\"handleChange\" :value=\"field.value\" />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Using Zod Preprocess for Type Conversion in VeeValidate\nDESCRIPTION: Demonstrates how to use Zod's preprocess function to convert field values, properly typing both input and output values in the form.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, number, preprocess } from 'zod';\nimport { toTypedSchema } from '@vee-validate/zod';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      age: preprocess(val => Number(val), number()),\n    }),\n  ),\n});\n\n// typed as `unknown` since the source value can be anything\nvalues.age;\n\nhandleSubmit(submitted => {\n  // will be typed as number because zod made sure it is!\n  values.age;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Reactive Field Name Solutions\nDESCRIPTION: Multiple approaches to maintain field name reactivity using Vue.js reactive utilities.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/caveats.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toRef, toRefs, computed } from 'vue';\n\n// ✅ using a function that returns the name\nconst { value, errorMessage } = useField(() => props.name);\n\n// ✅ using `toRef`\nconst { value, errorMessage } = useField(toRef(props, 'name'));\n\n// ✅ using `toRefs`\nconst { name } = toRefs(props);\nconst { value, errorMessage } = useField(name);\n\n// ✅ using `computed`\nconst name = computed(() => props.name);\nconst { value, errorMessage } = useField(name);\n```\n\n----------------------------------------\n\nTITLE: Changing Locale Dynamically with setLocale\nDESCRIPTION: Example showing how to change the active locale anywhere in your application using the setLocale function from @vee-validate/i18n.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLocale } from '@vee-validate/i18n';\n\nsetLocale('ar');\n```\n\n----------------------------------------\n\nTITLE: Field-level Validation with Zod Schema Using Composition API\nDESCRIPTION: Example of using toTypedSchema with the useField composition API function for field-level validation in a Vue component.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/zod-schema-validation.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <input name=\"email\" v-model=\"value\" type=\"email\" />\n  <span>{{ errorMessage }}</span>\n</template>\n\n<script setup>\nimport { useField } from 'vee-validate';\nimport { toTypedSchema } from '@vee-validate/zod';\nimport * as zod from 'zod';\n\nconst fieldSchema = toTypedSchema(\n  zod.string().min(1, { message: 'Field is required' }).email({ message: 'Must be a valid email' })\n);\nconst { value, errorMessage } = useField('email', fieldSchema);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing @vee-validate/valibot Package with Multiple Package Managers\nDESCRIPTION: Commands to install the @vee-validate/valibot package using npm, pnpm, and yarn package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# with npm\nnpm i @vee-validate/valibot\n# with pnpm\npnpm add @vee-validate/valibot\n# with yarn\nyarn add @vee-validate/valibot\n```\n\n----------------------------------------\n\nTITLE: Using Interface to Type Form Values in VeeValidate\nDESCRIPTION: Shows how to use TypeScript interfaces to add type safety to form values, but highlights the limitation where required fields are still marked as optional.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyForm {\n  email?: string | null;\n  password?: string | null;\n}\n\nconst { values, handleSubmit } = useForm<MyForm>({\n  validationSchema: object({\n    email: string().required(),\n    password: string().required(),\n    name: string(),\n  }),\n});\n\n// ❌ Type error, which means `values` is type-safe\nvalues.email.endsWith('@gmail.com');\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Valibot default values with vee-validate forms\nDESCRIPTION: Example showing how to define and utilize default values in a Valibot schema with vee-validate. The form will automatically use the schema defaults for initial values and when submitted values are missing fields.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport * as v from 'valibot';\nimport { toTypedSchema } from '@vee-validate/valibot';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    v.object({\n      email: v.optional(v.pipe(string(), v.nonEmpty('required')), 'something@email.com'),\n      password: v.optional(v.pipe(v.string(), v.nonEmpty('required')), ''),\n      name: v.optional(v.string(), ''),\n    }),\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing length validation rule in Vue template\nDESCRIPTION: Shows how to use the 'length' rule to validate that a field has an exact number of items. Works for iterables like strings and arrays.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/global-validators.mdx#2025-04-13_snippet_22\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- string format -->\n<Field name=\"field\" rules=\"length:5\" />\n\n<!-- object format -->\n<Field name=\"field\" :rules=\"{ length: 5 }\" />\n```\n\n----------------------------------------\n\nTITLE: Using Pre-built Locale Files in VeeValidate\nDESCRIPTION: Example demonstrating how to import and use pre-built locale files from the @vee-validate/i18n package.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/i18n/README.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'vee-validate';\nimport { localize } from '@vee-validate/i18n';\nimport en from '@vee-validate/i18n/dist/locale/en.json';\nimport ar from '@vee-validate/i18n/dist/locale/ar.json';\n\nconfigure({\n  generateMessage: localize({\n    en,\n    ar,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining FieldArrayEntry Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for FieldArrayEntry, which is used to represent each item in the fields array provided by the FieldArray component's slot.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field-array.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FieldEntry<TValue = unknown> {\n  // The actual value of the item, this is what exists in the form values\n  value: TValue;\n  // a value you can use as a key for iteration, automatically generated.\n  key: string | number;\n  // true if this is the first array item\n  isFirst: boolean;\n  // true if this is the last array item\n  isLast: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Including VeeValidate via CDN\nDESCRIPTION: Instructions for including vee-validate via a script tag using a CDN. This approach injects a VeeValidate global object that provides access to the library's components and functions.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/overview.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/vee-validate\"></script>\n```\n\n----------------------------------------\n\nTITLE: Field-level Validation with Zod Schema in Vue Components\nDESCRIPTION: Example of using toTypedSchema to convert a Zod schema for field-level validation in a Vue component using the Field component approach.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/zod-schema-validation.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <Field name=\"email\" type=\"email\" :rules=\"fieldSchema\" />\n    <ErrorMessage name=\"email\" />\n  </Form>\n</template>\n\n<script setup>\nimport { Field, Form, ErrorMessage } from 'vee-validate';\nimport { toTypedSchema } from '@vee-validate/zod';\nimport * as zod from 'zod';\n\nconst fieldSchema = toTypedSchema(zod.string().nonempty('Field is required').email('Must be a valid email'));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Submit with Inaccurate Types in VeeValidate\nDESCRIPTION: Illustrates the limitation of using TypeScript interfaces where submitted values still need to be checked for existence even when marked as required in the validation schema.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhandleSubmit(values => {\n  // Must be checked, this means submmited values are inaccurate\n  if (values.email) {\n    values.email.endsWith('@gmail.com');\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Form Component Import Configuration\nDESCRIPTION: Shows how to properly import and rename the Form component to avoid HTML conflicts.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Using named imports\nimport { Form as ValidationForm } from 'vee-validate';\n\nconst component = {\n  components: {\n    // If you have VeeValidate globally via a CDN script\n    ValidationForm: VeeValidate.Form,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Form Name for DevTools Integration\nDESCRIPTION: Example of providing a name for the form to be displayed in the Vue DevTools. Makes it easier to identify specific forms when debugging.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ... } = useForm({\n  name: 'LoginForm', // Defaults to \"Form\"\n});\n```\n\n----------------------------------------\n\nTITLE: Form-level Validation with Zod Object Schema in Vue Components\nDESCRIPTION: Example of using zod.object with toTypedSchema for validating an entire form in a Vue component using the Form component approach.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/zod-schema-validation.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form :validation-schema=\"validationSchema\" @submit=\"onSubmit\">\n    <Field name=\"email\" type=\"email\" />\n    <ErrorMessage name=\"email\" />\n\n    <Field name=\"password\" type=\"password\" />\n    <ErrorMessage name=\"password\" />\n\n    <button>Submit</button>\n  </Form>\n</template>\n\n<script setup>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\nimport { toTypedSchema } from '@vee-validate/zod';\nimport * as zod from 'zod';\n\nconst validationSchema = toTypedSchema(\n  zod.object({\n    email: zod.string().min(1, { message: 'This is required' }).email({ message: 'Must be a valid email' }),\n    password: zod.string().min(1, { message: 'This is required' }).min(8, { message: 'Too short' }),\n  })\n);\n\nfunction onSubmit(values) {\n  alert(JSON.stringify(values, null, 2));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing VeeValidate with Package Managers\nDESCRIPTION: Commands for installing vee-validate library using either yarn or npm package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/README.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install with yarn\nyarn add vee-validate\n\n# Install with npm\nnpm install vee-validate --save\n```\n\n----------------------------------------\n\nTITLE: Using Joi Default Values with vee-validate\nDESCRIPTION: This snippet illustrates how to define default values in a Joi schema and use them with vee-validate's useForm hook. The default values are used for initial form values and missing fields in submissions.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/joi/README.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'joi';\nimport { toTypedSchema } from '@vee-validate/joi';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object({\n      email: string().default('something@email.com'),\n      password: string().default(''),\n    }),\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding VeeValidate Module to Nuxt Configuration\nDESCRIPTION: Basic configuration to add the @vee-validate/nuxt module to your Nuxt project by modifying the nuxt.config.ts file. This enables the module functionality in your Nuxt application.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/nuxt/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    //...\n    '@vee-validate/nuxt',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Form Setup with Untyped Schema in VeeValidate\nDESCRIPTION: Demonstrates the basic form setup with Yup validation schema, showing that values are not properly typed, which can lead to runtime errors.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/typed-schema.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'yup';\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: object({\n    email: string().required(),\n    password: string().required(),\n    name: string(),\n  }),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Handling Input Events in VeeValidate\nDESCRIPTION: The 'onInput' property is an event handler for the input event. It updates the field value and some meta information.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfield.onInput: (e: Event | unknown) => void\n```\n\n----------------------------------------\n\nTITLE: Using useIsValidating to track form validation progress\nDESCRIPTION: Returns a computed ref containing a boolean indicating whether the form is currently being validated.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsValidating } from 'vee-validate';\n\nconst isValidating = useIsValidating();\n\nisValidating.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Installing vee-validate with package managers\nDESCRIPTION: Commands to install vee-validate using yarn or npm package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/vee-validate/README.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install with yarn\nyarn add vee-validate\n\n# Install with npm\nnpm install vee-validate --save\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Values in Submit Handler\nDESCRIPTION: Modifying the onSubmit method to receive and log form values captured by VeeValidate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  components: {\n    Form,\n    Field,\n  },\n  methods: {\n    onSubmit(values) {\n      console.log(values);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring VeeValidate Nuxt Module with Config Key\nDESCRIPTION: Alternative configuration approach for the @vee-validate/nuxt module using the veeValidate config key. This method provides the same customization options as the array syntax but with cleaner configuration.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/nuxt/README.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    //...\n    '@vee-validate/nuxt',\n  ],\n  veeValidate: {\n    // disable or enable auto imports\n    autoImports: true,\n    // Use different names for components\n    componentNames: {\n      Form: 'VeeForm',\n      Field: 'VeeField',\n      FieldArray: 'VeeFieldArray',\n      ErrorMessage: 'VeeErrorMessage',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring @vee-validate/nuxt with Array Syntax\nDESCRIPTION: Advanced configuration example using array syntax to specify module options like autoImports and custom component names in nuxt.config.ts.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/nuxt.mdx#2025-04-13_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    //...\n    [\n      '@vee-validate/nuxt',\n      {\n        // disable or enable auto imports\n        autoImports: true,\n        // Use different names for components\n        componentNames: {\n          Form: 'VeeForm',\n          Field: 'VeeField',\n          FieldArray: 'VeeFieldArray',\n          ErrorMessage: 'VeeErrorMessage',\n        },\n      },\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using useIsFieldDirty to check if a field's value has changed\nDESCRIPTION: Returns a computed ref containing a boolean indicating whether the field's value has changed from its initial value.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFieldDirty } from 'vee-validate';\n\nconst isDirty = useIsFieldDirty();\n\nisDirty.value; // true or false\n```\n\n----------------------------------------\n\nTITLE: Flat Object Structure Result in JavaScript\nDESCRIPTION: Shows the resulting JavaScript object structure when submitting a form with fields using the square bracket notation to avoid nesting. The values remain at the top level with the full path as the key.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"links.twitter\": \"https://twitter.com/logaretm\",\n  \"links.github\": \"https://github.com/logaretm\"\n}\n```\n\n----------------------------------------\n\nTITLE: VeeValidate Changelog Entry\nDESCRIPTION: Changelog entry documenting bug fixes and feature additions for VeeValidate v4.4.6 and earlier releases. Includes commits fixing field error cleanup, validation handling, and API improvements.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CHANGELOG.md#2025-04-13_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- add standalone prop for fields ([#3379](https://github.com/logaretm/vee-validate/issues/3379)) ([3689437](https://github.com/logaretm/vee-validate/commit/36894378aa3636eeb4fb54aa747319e21c6eb5cd))\n- expose FieldContext type closes [#3398](https://github.com/logaretm/vee-validate/issues/3398) ([a6e4c0a](https://github.com/logaretm/vee-validate/commit/a6e4c0ac580d4145c72118ac535bfa082c771068))\n- expose form and field injection keys ([6034e66](https://github.com/logaretm/vee-validate/commit/6034e66836e0566e17f36744da19088aca33fbad))\n```\n\n----------------------------------------\n\nTITLE: Adding Form Submission Handler\nDESCRIPTION: Implementing a submit event handler to prevent default form submission behavior using Vue's event modifiers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <form novalidate @submit.prevent=\"onSubmit\">\n      <input type=\"email\" name=\"email\" />\n\n      <button>Sign up for newsletter</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    onSubmit() {\n      console.log('Submitted');\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Field Slot Props with Checkbox Components in vee-validate\nDESCRIPTION: This example demonstrates how to use Field slot props with custom checkbox components. The code shows the proper way to provide type and value props to both the Field node and the input element.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/checkboxes-and-radio.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<Field v-slot=\"{ field }\" name=\"terms\" type=\"checkbox\" :value=\"true\" :unchecked-value=\"false\">\n  <label>\n    <input type=\"checkbox\" name=\"terms\" v-bind=\"field\" :value=\"true\" />\n    I agree\n  </label>\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Configuring @vee-validate/nuxt with Config Key\nDESCRIPTION: Alternative configuration approach using the veeValidate config key in nuxt.config.ts to set module options.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/nuxt.mdx#2025-04-13_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    //...\n    '@vee-validate/nuxt',\n  ],\n  veeValidate: {\n    // disable or enable auto imports\n    autoImports: true,\n    // Use different names for components\n    componentNames: {\n      Form: 'VeeForm',\n      Field: 'VeeField',\n      FieldArray: 'VeeFieldArray',\n      ErrorMessage: 'VeeErrorMessage',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure\nDESCRIPTION: Page layout and structure definition using markdown and Astro frontmatter, including title, description and ordering information.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/ui-libraries.mdx#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: ../../layouts/PageLayout.astro\ntitle: Popular UI Libraries\ndescription: Validating popular Vue.js UI libraries with examples\norder: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Loading Locale from CDN in Browser Environment\nDESCRIPTION: Example showing how to load locale files directly from a CDN in a browser environment using script tags and the loadLocaleFromURL function.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path/to/vee-validate.js\"></script>\n<script src=\"path/to/@vee-validate/rules.js\"></script>\n<script src=\"path/to/@vee-validate/i18n.js\"></script>\n\n<script>\n  // Install all rules\n  Object.keys(VeeValidateRules).forEach(rule => {\n    VeeValidate.defineRule(rule, VeeValidateRules[rule]);\n  });\n\n  // Downloads and merges the locale from URL\n  VeeValidateI18n.loadLocaleFromURL('https://unpkg.com/@vee-validate/i18n@4.0.2/dist/locale/ar.json');\n\n  // Activate the locale\n  VeeValidate.configure({\n    generateMessage: VeeValidateI18n.localize('ar'),\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Commit Reference for Typing Improvement\nDESCRIPTION: A commit hash referencing an improvement to typing for field yup schema.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CHANGELOG.md#2025-04-13_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nc59f1f01526b160a1081f276d732523ad9ab5ba2\n```\n\n----------------------------------------\n\nTITLE: Advanced Form Schema with Select Element Support\nDESCRIPTION: This code snippet shows how to extend the form schema to include a select element with options defined in a children array.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/dynamic-form-generator.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <DynamicForm :schema=\"formSchema\" />\n</template>\n\n<script>\nimport DynamicForm from '@/components/DynamicForm.vue';\n\nexport default {\n  components: {\n    DynamicForm,\n  },\n  data: () => {\n    const formSchema = {\n      fields: [\n        // ...\n        {\n          label: 'Favorite Drink',\n          name: 'drink',\n          as: 'select',\n          children: [\n            {\n              tag: 'option',\n              value: '',\n              text: '',\n            },\n            {\n              tag: 'option',\n              value: 'coffee',\n              text: 'Coffeee',\n            },\n            {\n              tag: 'option',\n              value: 'tea',\n              text: 'Tea',\n            },\n            {\n              tag: 'option',\n              value: 'coke',\n              text: 'Coke',\n            },\n          ],\n        },\n      ],\n    };\n\n    return {\n      formSchema,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Value in VeeValidate\nDESCRIPTION: The 'value' property of the field object contains the current value of the field. It can be bound to the 'value' prop of inputs for synchronization, but should not be used with v-model to prevent input freezing.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/field.mdx#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfield.value: any\n```\n\n----------------------------------------\n\nTITLE: FormState Interface Definition for vee-validate\nDESCRIPTION: Defines the TypeScript interface for the FormState object used with resetForm to customize the form reset behavior. Includes fields for errors, touched states, and form values.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/handling-forms.mdx#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormState {\n  // any error messages\n  errors: Record<string, string>;\n  // touched meta flags\n  touched: Record<string, boolean>;\n  // Form Values\n  values: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIsFieldDirty without specifying a field name in Vue\nDESCRIPTION: Automatically looks for the first parent component that used useField and retrieves its dirty state as a computed ref boolean.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFieldDirty } from 'vee-validate';\n\n// Will look for the first parent that used `useField`\nconst isDirty = useIsFieldDirty();\n```\n\n----------------------------------------\n\nTITLE: Rendering LiveExample Component for Async Validation\nDESCRIPTION: This code renders the LiveExample component with specific props to demonstrate async validation. The component is set to be client-visible and has a unique ID for the async validation example.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/async-validation.mdx#2025-04-13_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<LiveExample client:visible id=\"vee-validate-v4-async-validation\" />\n```\n\n----------------------------------------\n\nTITLE: Avoiding Field Nesting in vee-validate\nDESCRIPTION: Example showing how to prevent automatic nesting by wrapping field names in square brackets\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/nested-objects-and-arrays.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineInputBinds } = useForm();\n\nconst twitter = defineInputBinds('[links.twitter]');\nconst github = defineInputBinds('[links.github]');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Dynamic Form Component in Vue.js\nDESCRIPTION: This code snippet shows the usage pattern for a DynamicForm component that accepts a form schema object to render form fields dynamically.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/dynamic-form-generator.mdx#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <DynamicForm :schema=\"formSchema\" />\n</template>\n\n<script>\nimport DynamicForm from '@/components/DynamicForm.vue';\n\nexport default {\n  components: {\n    DynamicForm,\n  },\n  data: () => {\n    const formSchema = {\n      fields: [\n        {\n          label: 'Your Name',\n          name: 'name',\n          as: 'input',\n        },\n        {\n          label: 'Your Email',\n          name: 'email',\n          as: 'input',\n        },\n        {\n          label: 'Your Password',\n          name: 'password',\n          as: 'input',\n        },\n      ],\n    };\n\n    return {\n      formSchema,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nested Object Structure Result in JavaScript\nDESCRIPTION: Shows the resulting JavaScript object structure when submitting a form with fields using dot notation. The values are automatically nested according to the path specified in field names.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/nested-objects-and-arrays.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"links\": {\n    \"twitter\": \"https://twitter.com/logaretm\",\n    \"github\": \"https://github.com/logaretm\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Field Name Implementation\nDESCRIPTION: Shows the incorrect way of passing field names directly from props, which breaks reactivity.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/caveats.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useField } from 'vee-validate';\n\nexport default {\n  props: {\n    name: String,\n  },\n  setup(props) {\n    // ❌ Don't do this in custom input components\n    const { value, errorMessage } = useField(props.name);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Product Grid using HTML and Tailwind CSS\nDESCRIPTION: This code snippet creates a responsive grid layout to display Creative-Tim products that use VeeValidate. It uses Tailwind CSS classes for styling and includes product images and titles.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/resources.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-8 grid grid-cols-2 gap-x-4 gap-y-4\">\n<a class=\"block dark:bg-black bg-gray-100 p-4 rounded-lg overflow-hidden\" href=\"https://www.creative-tim.com/product/vue-argon-dashboard-pro?ref=vee-validate\" target=\"_blank\" rel=\"noopener\">\n  <div class=\"relative w-full h-64\">\n    <img src=\"https://s3.amazonaws.com/creativetim_bucket/products/159/original/opt_adp_vue_thumbnail.jpg?1557130295\" class=\"w-full h-full inset-0 absolute object-contain\" />\n  </div>\n  <p class=\"text-lg font-bold text-center mt-4\">Vue Argon Dashboard Pro</p>\n</a>\n\n<a\n  class=\"block dark:bg-black bg-gray-100 p-4 rounded-lg overflow-hidden\"\n  href=\"https://www.creative-tim.com/product/vue-white-dashboard-pro?ref=vee-validate\"\n  target=\"_blank\"\n  rel=\"noopener\"\n>\n  <div class=\"relative w-full h-64\">\n    <img\n      src=\"https://s3.amazonaws.com/creativetim_bucket/products/261/original/opt_wdp_vue_thumbnail.jpg?1576152737\"\n      class=\"w-full h-full inset-0 absolute object-contain\"\n    />\n  </div>\n  <p class=\"text-lg font-bold text-center mt-4\">Vue White Dashboard Pro</p>\n</a>\n\n<a\n  class=\"block dark:bg-black bg-gray-100 p-4 rounded-lg overflow-hidden\"\n  href=\"https://www.creative-tim.com/product/vue-light-bootstrap-dashboard-pro?ref=vee-validate\"\n  target=\"_blank\"\n  rel=\"noopener\"\n>\n  <div class=\"relative w-full h-64\">\n    <img\n      src=\"https://s3.amazonaws.com/creativetim_bucket/products/69/original/opt_lbdp_vue_thumbnail.jpg?1534959576\"\n      class=\"w-full h-full inset-0 absolute object-contain\"\n    />\n  </div>\n  <p class=\"text-lg font-bold text-center mt-4\">Vue Light Bootstrap Dashboard PRO</p>\n</a>\n\n<a\n  class=\"block dark:bg-black bg-gray-100 p-4 rounded-lg overflow-hidden\"\n  href=\"https://www.creative-tim.com/product/vue-black-dashboard-pro?ref=vee-validate\"\n  target=\"_blank\"\n  rel=\"noopener\"\n>\n  <div class=\"relative w-full h-64\">\n    <img\n      src=\"https://s3.amazonaws.com/creativetim_bucket/products/135/original/opt_bdp_vue_thumbnail_%285%29.jpg?1571054798\"\n      class=\"w-full h-full inset-0 absolute object-contain\"\n    />\n  </div>\n  <p class=\"text-lg font-bold text-center mt-4\">Vue Black Dashboard Pro</p>\n</a>\n\n  <a class=\"block dark:bg-black bg-gray-100 p-4 rounded-lg overflow-hidden\" href=\"https://www.creative-tim.com/product/vue-now-ui-dashboard-pro?ref=vee-validate\" target=\"_blank\" rel=\"noopener\">\n    <div class=\"relative w-full h-64\">\n      <img src=\"https://s3.amazonaws.com/creativetim_bucket/products/79/original/opt_nudp_vue_thumbnail.jpg?1534959600\" class=\"w-full h-full inset-0 absolute object-contain\" />\n    </div>\n    <p class=\"text-lg font-bold text-center mt-4\">Vue Now UI Dashboard PRO</p>\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initial Vue Component Setup\nDESCRIPTION: Basic Vue component structure for starting the tutorial with an empty template.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div id=\"app\"></div>\n</template>\n\n<script>\nexport default {};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering LiveExample Component for Cross-Field Validation\nDESCRIPTION: This code renders the LiveExample component with specific props to demonstrate cross-field validation. The 'client:visible' attribute suggests lazy loading for performance optimization.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/cross-field-validation.mdx#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<LiveExample client:visible id=\"vee-validate-v4-cross-field-validation\" />\n```\n\n----------------------------------------\n\nTITLE: Combining as Prop with Scoped Slot\nDESCRIPTION: Shows how to combine both the 'as' prop and scoped slot to render a root node with custom child elements for complex error message displays.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/error-message.mdx#2025-04-13_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<ErrorMessage as=\"div\" name=\"email\" v-slot=\"{ message }\">\n  <p>Error:</p>\n  <p>{{ message }}</p>\n</ErrorMessage>\n```\n\n----------------------------------------\n\nTITLE: Using Joi Schema with vee-validate\nDESCRIPTION: This example demonstrates how to use a Joi schema with vee-validate's useForm hook. It shows type-safe form validation and handling of required and optional fields.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/joi/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from 'vee-validate';\nimport { object, string } from 'joi';\nimport { toTypedSchema } from '@vee-validate/joi';\n\ninterface FormData {\n  email: string;\n  password: string;\n  name?: string;\n}\n\nconst { values, handleSubmit } = useForm({\n  validationSchema: toTypedSchema(\n    object<FormData>({\n      email: string().min(1).required().message('required'),\n      password: string().min(1).message('required'),\n      name: string().optional(),\n    }),\n  ),\n});\n\n// ❌ Type error, which means `values` is type-safe\nvalues.email.endsWith('@gmail.com');\n\nhandleSubmit(submitted => {\n  // No errors, because email is required!\n  submitted.email.endsWith('@gmail.com');\n\n  // ❌ Type error, because `name` is not required so it could be undefined\n  // Means that your fields are now type safe!\n  submitted.name.length;\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Composable Usage Example\nDESCRIPTION: Demonstrates incorrect usage of VeeValidate composables without proper destructuring.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/caveats.mdx#2025-04-13_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useField, useForm, useFieldArray } from 'vee-validate';\n\nexport default {\n  setup() {\n    const form = useForm();\n    const field = useField('field');\n    const fieldArray = useFieldArray('users');\n\n    return {\n      form,\n      field,\n      fieldArray,\n    };\n  },\n};\n</script>\n\n<template>\n  <!-- ❌ Doesn't work -->\n  <input v-model=\"field.value\" />\n\n  <!-- ❌ Doesn't work -->\n  <pre>{{ form.meta.valid }}</pre>\n\n  <!-- ❌ Doesn't work -->\n  <div v-for=\"item in fieldArray.fields\"></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Type Attributes to Form Fields\nDESCRIPTION: This snippet shows how to update the form schema to include a type attribute for the password field to render it correctly.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/dynamic-form-generator.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <DynamicForm :schema=\"formSchema\" />\n</template>\n\n<script>\nimport DynamicForm from '@/components/DynamicForm.vue';\n\nexport default {\n  components: {\n    DynamicForm,\n  },\n  data: () => {\n    const formSchema = {\n      fields: [\n        {\n          label: 'Your Name',\n          name: 'name',\n          as: 'input',\n        },\n        {\n          label: 'Your Email',\n          name: 'email',\n          as: 'input',\n        },\n        {\n          label: 'Your Password',\n          name: 'password',\n          as: 'input',\n          type: 'password'\n        },\n      ],\n    };\n\n    return {\n      formSchema,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vue CLI\nDESCRIPTION: Commands for installing Vue CLI and creating a new Vue 3 project for the VeeValidate tutorial.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/tutorials/basics.mdx#2025-04-13_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @vue/cli@next\n```\n\nLANGUAGE: sh\nCODE:\n```\nvue create vee-validate-tutorial\n```\n\n----------------------------------------\n\nTITLE: Cloning the Vee-Validate Repository\nDESCRIPTION: Command to clone the Vee-Validate repository to your local machine.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CONTRIBUTING.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/logaretm/vee-validate.git\n```\n\n----------------------------------------\n\nTITLE: Using resetForm with Custom Initial Values in JavaScript\nDESCRIPTION: JavaScript example showing how to use resetForm with custom initial values, which is useful when form data is loaded asynchronously or needs specific reset values.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/handling-forms.mdx#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nresetForm({\n  values: {\n    email: 'example@example.com',\n    password: '',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using defineComponentBinds for Vue Components in VeeValidate\nDESCRIPTION: The defineComponentBinds function creates a bindable object for a specified field, designed for Vue components. It must be called in the setup function and is deprecated in favor of defineField.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/use-form.mdx#2025-04-13_snippet_33\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <MyTextInput v-bind=\"email\" />\n  <span>{{ errors.email }}</span>\n\n  <MyTextInput v-bind=\"password\" type=\"password\" />\n  <span>{{ errors.password }}</span>\n</template>\n\n<script setup>\nimport { useForm } from 'vee-validate';\nimport MyTextInput from '@/components/MyTextInput.vue';\n\nconst { errors, defineComponentBinds } = useForm();\n\nconst email = defineComponentBinds('email');\nconst password = defineComponentBinds('password');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useIsFieldTouched without specifying a field name in Vue\nDESCRIPTION: Automatically looks for the first parent component that used useField and retrieves its touched state as a computed ref boolean.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/composition-helpers.mdx#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIsFieldTouched } from 'vee-validate';\n\n// Will look for the first parent that used `useField`\nconst isTouched = useIsFieldTouched();\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.15.0\nDESCRIPTION: Recent version update with dependency changes from vee-validate core package\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/nuxt/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.15.0\n\n### Patch Changes\n\n- Updated dependencies [30281f5]\n- Updated dependencies [ec121b1]\n  - vee-validate@4.15.0\n```\n\n----------------------------------------\n\nTITLE: Handling Async Validation in Tests (JavaScript)\nDESCRIPTION: Demonstrates how to properly test async validation in vee-validate by using flush-promises and wait-for-expect to ensure validation has completed before assertions.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/testing.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport flushPromises from 'flush-promises';\nimport waitForExpect from 'wait-for-expect';\n\ntest('it validates', async () => {\n  // assuming you have a mounting helper\n  mount(SomeComponent);\n  const input = document.querySelector('input');\n  input.value = '';\n  input.dispatchEvent(new Event('change'));\n\n  // wait for the promises to fulfill\n  await flushPromises();\n  await waitForExpect(() => {\n    // ✅ Now passes\n    expect(document.querySelector('span').textContent).toBe('Field is required');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Dependency Updates in Markdown\nDESCRIPTION: This snippet shows the changelog format for vee-validate-docs, listing patch changes and updated dependencies with their respective version numbers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# vee-validate-docs\n\n## null\n\n### Patch Changes\n\n- Updated dependencies [5cba0aa]\n- Updated dependencies [30281f5]\n- Updated dependencies [ec121b1]\n- Updated dependencies [db26a74]\n- Updated dependencies [f92455a]\n  - @vee-validate/yup@4.15.0\n  - vee-validate@4.15.0\n  - @vee-validate/valibot@4.15.0\n  - @vee-validate/zod@4.15.0\n\n## null\n\n### Patch Changes\n\n- Updated dependencies [be994b4]\n  - vee-validate@4.14.7\n  - @vee-validate/valibot@4.14.7\n  - @vee-validate/yup@4.14.7\n  - @vee-validate/zod@4.14.7\n```\n\n----------------------------------------\n\nTITLE: Installing @vee-validate/rules Package\nDESCRIPTION: Commands to install the @vee-validate/rules package using yarn or npm package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/rules/README.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @vee-validate/rules\n\n# or with npm\nnpm install @vee-validate/rules\n```\n\n----------------------------------------\n\nTITLE: Installing @vee-validate/i18n Package\nDESCRIPTION: Command line instructions for installing the @vee-validate/i18n package using either yarn or npm package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/i18n.mdx#2025-04-13_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @vee-validate/i18n\n\n# or with npm\nnpm install @vee-validate/i18n\n```\n\n----------------------------------------\n\nTITLE: Installing @vee-validate/zod Package with Multiple Package Managers\nDESCRIPTION: Commands to install the @vee-validate/zod package using npm, pnpm, and yarn package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# with npm\nnpm i @vee-validate/zod\n# with pnpm\npnpm add @vee-validate/zod\n# with yarn\nyarn add @vee-validate/zod\n```\n\n----------------------------------------\n\nTITLE: Testing Partial Error Message Content (JavaScript)\nDESCRIPTION: Demonstrates testing error messages by checking for partial content, which is more flexible than exact matching.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/testing.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ use `toContain` or similar matching assertions\nexpect(errorElement.textContent).toContain('required');\n```\n\n----------------------------------------\n\nTITLE: Version 4.14.5 Changelog Entry\nDESCRIPTION: Changelog entry documenting patch changes related to mjs module loading in Nuxt.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.14.5\n\n### Patch Changes\n\n- e9f8c88: fix: force loading the mjs module when using nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing Zod validation integration\nDESCRIPTION: Installation commands for adding @vee-validate/zod dependency to enable Zod schema validation with vee-validate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# with npm\nnpm i @vee-validate/zod\n# with pnpm\npnpm add @vee-validate/zod\n# with yarn\nyarn add @vee-validate/zod\n```\n\n----------------------------------------\n\nTITLE: Installing @vee-validate/yup Package with Yarn\nDESCRIPTION: Command to install the @vee-validate/yup package using Yarn package manager.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/getting-started.mdx#2025-04-13_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @vee-validate/yup\n```\n\n----------------------------------------\n\nTITLE: Installing Valibot validation integration\nDESCRIPTION: Installation commands for adding @vee-validate/valibot dependency to enable Valibot schema validation with vee-validate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/composition-api/custom-inputs.mdx#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# with npm\nnpm i @vee-validate/valibot\n# with pnpm\npnpm add @vee-validate/valibot\n# with yarn\nyarn add @vee-validate/valibot\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for running tests and checking test coverage.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CONTRIBUTING.md#2025-04-13_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm cover\n```\n\n----------------------------------------\n\nTITLE: Installing @vee-validate/nuxt Module\nDESCRIPTION: Commands for installing the vee-validate Nuxt module using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/integrations/nuxt.mdx#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# npm\nnpm i @vee-validate/nuxt\n\n# pnpm\npnpm add @vee-validate/nuxt\n\n# yarn\nyarn add @vee-validate/nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing VeeValidate Nuxt Module with Package Managers\nDESCRIPTION: Commands to install the @vee-validate/nuxt module using npm, pnpm, or yarn package managers. This is the first step to integrate vee-validate with your Nuxt project.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/nuxt/README.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# npm\nnpm i @vee-validate/nuxt\n\n# pnpm\npnpm add @vee-validate/nuxt\n\n# yarn\nyarn add @vee-validate/nuxt\n```\n\n----------------------------------------\n\nTITLE: Importing LiveExample Component in Vue\nDESCRIPTION: This code imports a LiveExample component from the components directory. The component is likely used to demonstrate live examples of async validation in vee-validate.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/async-validation.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LiveExample from '@/components/LiveExample.vue';\n```\n\n----------------------------------------\n\nTITLE: Installing VeeValidate i18n Package\nDESCRIPTION: Commands to install the @vee-validate/i18n package using either yarn or npm package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/i18n/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @vee-validate/i18n\n\n# or with npm\nnpm install @vee-validate/i18n\n```\n\n----------------------------------------\n\nTITLE: Building Project Bundles\nDESCRIPTION: Commands to build all project bundles or specific packages within the monorepo.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CONTRIBUTING.md#2025-04-13_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm build vee-validate\npnpm build rules\npnpm build zod\n# etc...\n```\n\n----------------------------------------\n\nTITLE: Defining Astro Page Layout and Metadata\nDESCRIPTION: Astro page configuration with frontmatter metadata defining the layout, title, description and order for a multi-step form wizard documentation page\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/multistep-form-wizard.mdx#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: ../../layouts/PageLayout.astro\ntitle: Multi-step Form Wizard\ndescription: a multi-step form wizard\norder: 7\n---\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import\nDESCRIPTION: Import statement for the LiveExample Vue component used throughout the page for interactive examples.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/examples/ui-libraries.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LiveExample from '@/components/LiveExample.vue';\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Implementation for Module Dependencies\nDESCRIPTION: Fix implementation forcing vee-validate out of optimized dependencies and updating nuxt module configuration\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/nuxt/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.14.6\n\n### Patch Changes\n\n- 41d82fd: fix: force vee-validate out of optimized deps\n  - vee-validate@4.14.6\n```\n\n----------------------------------------\n\nTITLE: Module Type Switch and MJS Loading Fix\nDESCRIPTION: Updates including module dependency upgrades and fixes for MJS module loading in Nuxt\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/nuxt/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.14.5\n\n### Patch Changes\n\n- 141ad3e: chore: upgrade nuxt module dependencies and switch default to module type\n- e9f8c88: fix: force loading the mjs module when using nuxt\n- Updated dependencies [e9f8c88]\n  - vee-validate@4.14.5\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: A structured changelog using markdown format to document version updates, dependency changes, and patch releases for the vee-validate package. Includes minor and patch version changes with associated commit references.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/joi/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\n## 4.15.0\n\n### Patch Changes\n\n- Updated dependencies [30281f5]\n- Updated dependencies [ec121b1]\n  - vee-validate@4.15.0\n\n## 4.14.7\n\n### Patch Changes\n\n- Updated dependencies [be994b4]\n  - vee-validate@4.14.7\n\n## 4.14.6\n\n### Patch Changes\n\n- vee-validate@4.14.6\n\n## 4.14.5\n\n### Patch Changes\n\n- e9f8c88: fix: force loading the mjs module when using nuxt\n- Updated dependencies [e9f8c88]\n  - vee-validate@4.14.5\n```\n\n----------------------------------------\n\nTITLE: Installing @vee-validate/joi Package\nDESCRIPTION: This snippet shows how to install the @vee-validate/joi package using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/joi/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install @vee-validate/joi\n# yarn\nyarn add @vee-validate/joi\n# pnpm\npnpm add @vee-validate/joi\n```\n\n----------------------------------------\n\nTITLE: Complex Form Markup Structure\nDESCRIPTION: Shows how to create a more complex form structure using div wrapper and nested form element.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/api/form.mdx#2025-04-13_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<Form as=\"div\">\n  <h2>Sign up form</h2>\n  <form>\n    <Field name=\"name\" />\n    <Field name=\"email\" type=\"email\" />\n    <Field name=\"password\" type=\"password\" />\n  </form>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages with Field and Form Components\nDESCRIPTION: Examples showing different ways to display validation error messages using Field and Form components\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/docs/src/pages/guide/components/validation.mdx#2025-04-13_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<Field name=\"field\" :rules=\"rules\" v-slot=\"{ field, errors, errorMessage }\">\n  <input v-bind=\"field\" type=\"text\" />\n  <span>{{ errors[0] }}</span>\n  <!-- Or -->\n  <span>{{ errorMessage }}</span>\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Exposing ErrorBag in Form Slot Props\nDESCRIPTION: Exposes the errorBag to the <Form /> component's slot props, allowing access to form errors.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexpose errorBag to <Form /> slot props\n```\n\n----------------------------------------\n\nTITLE: Installing VeeValidate Zod Package\nDESCRIPTION: Commands to install @vee-validate/zod package using different package managers.\nSOURCE: https://github.com/logaretm/vee-validate/blob/main/packages/zod/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install @vee-validate/zod\n# yarn\nyarn add @vee-validate/zod\n# pnpm\npnpm add @vee-validate/zod\n```"
  }
]