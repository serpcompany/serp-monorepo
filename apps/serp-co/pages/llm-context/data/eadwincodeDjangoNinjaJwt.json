[
  {
    "owner": "eadwincode",
    "repo": "django-ninja-jwt",
    "content": "TITLE: Implementing Asynchronous JWT Authentication in Django Ninja\nDESCRIPTION: Example of using AsyncJWTAuth for asynchronous route authentication. This approach requires that the endpoint function is defined as asynchronous using the 'async' keyword, and is only available for Django version > 3.0.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/auth_integration.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, route\nfrom ninja_jwt.authentication import AsyncJWTAuth\n\n@api_controller\nclass MyController:\n    @route.get('/some-endpoint', auth=AsyncJWTAuth())\n    async def some_endpoint(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JWT Authentication Implementation with Django Ninja\nDESCRIPTION: Example of implementing a custom authentication class by inheriting from JWTBaseAuthentication. This example creates an API key header authentication that uses JWT for verification instead of the default bearer token approach.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/auth_integration.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.security import APIKeyHeader\nfrom ninja_jwt.authentication import JWTBaseAuthentication\nfrom ninja import router\n\nclass ApiKey(APIKeyHeader, JWTBaseAuthentication):\n    param_name = \"X-API-Key\"\n\n    def authenticate(self, request, key):\n        return self.jwt_authenticate(request, token=key)\n\n\nheader_key = ApiKey()\nrouter = router('')\n\n@router.get(\"/headerkey\", auth=header_key)\ndef apikey(request):\n    return f\"Token = {request.auth}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Ninja JWT Settings in settings.py\nDESCRIPTION: Comprehensive configuration example for Django Ninja JWT showing all available settings with their default values. This includes token lifetimes, authentication algorithms, token rotation options, and schema configurations.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/settings.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Django project settings.py\n\nfrom datetime import timedelta\nfrom django.conf import settings\n...\n\nNINJA_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': False,\n    'UPDATE_LAST_LOGIN': False,\n\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': settings.SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,\n    'ISSUER': None,\n    'JWK_URL': None,\n    'LEEWAY': 0,\n\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'USER_AUTHENTICATION_RULE': 'ninja_jwt.authentication.default_user_authentication_rule',\n\n    'AUTH_TOKEN_CLASSES': ('ninja_jwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'TOKEN_USER_CLASS': 'ninja_jwt.models.TokenUser',\n\n    'JTI_CLAIM': 'jti',\n\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n    \n    # For Controller Schemas\n    # FOR OBTAIN PAIR\n    'TOKEN_OBTAIN_PAIR_INPUT_SCHEMA': \"ninja_jwt.schema.TokenObtainPairInputSchema\",\n    'TOKEN_OBTAIN_PAIR_REFRESH_INPUT_SCHEMA': \"ninja_jwt.schema.TokenRefreshInputSchema\",\n    # FOR SLIDING TOKEN\n    'TOKEN_OBTAIN_SLIDING_INPUT_SCHEMA': \"ninja_jwt.schema.TokenObtainSlidingInputSchema\",\n    'TOKEN_OBTAIN_SLIDING_REFRESH_INPUT_SCHEMA':\"ninja_jwt.schema.TokenRefreshSlidingInputSchema\",\n    \n    'TOKEN_BLACKLIST_INPUT_SCHEMA': \"ninja_jwt.schema.TokenBlacklistInputSchema\",\n    'TOKEN_VERIFY_INPUT_SCHEMA': \"ninja_jwt.schema.TokenVerifyInputSchema\",\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Token Claims with Schema Swapping in Python\nDESCRIPTION: This snippet demonstrates how to customize token claims using schema swapping in NINJA_JWT settings. It includes a custom input schema that inherits from TokenObtainInputSchemaBase and defines custom token generation logic.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/customizing_token_claims.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# project/schema.py\nfrom typing import Type, Dict\nfrom ninja_jwt.schema import TokenObtainInputSchemaBase\nfrom ninja import Schema\nfrom ninja_jwt.tokens import RefreshToken\n\nclass UserSchema(Schema):\n    first_name: str\n    email: str\n\n\nclass MyTokenObtainPairOutSchema(Schema):\n    refresh: str\n    access: str\n    user: UserSchema\n\n\nclass MyTokenObtainPairInputSchema(TokenObtainInputSchemaBase):\n    @classmethod\n    def get_response_schema(cls) -> Type[Schema]:\n        return MyTokenObtainPairOutSchema\n\n    @classmethod\n    def get_token(cls, user) -> Dict:\n        values = {}\n        refresh = RefreshToken.for_user(user)\n        values[\"refresh\"] = str(refresh)\n        values[\"access\"] = str(refresh.access_token)\n        values.update(user=UserSchema.from_orm(user)) # this will be needed when creating output schema\n        return values\n```\n\nLANGUAGE: python\nCODE:\n```\n# project/settings.py\n\nNINJA_JWT = {\n    'TOKEN_OBTAIN_PAIR_INPUT_SCHEMA': 'project.schema.MyTokenObtainPairInputSchema',\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# project/settings.py\n\nNINJA_JWT = {\n    # FOR OBTAIN PAIR\n    'TOKEN_OBTAIN_PAIR_INPUT_SCHEMA': \"project.schema.MyTokenObtainPairInputSchema\",\n    'TOKEN_OBTAIN_PAIR_REFRESH_INPUT_SCHEMA': \"for.obtain_pair.refresh_input.schema\",\n    # FOR SLIDING TOKEN\n    'TOKEN_OBTAIN_SLIDING_INPUT_SCHEMA':  \"for.obtain_sliding.input.schema\",\n    'TOKEN_OBTAIN_SLIDING_REFRESH_INPUT_SCHEMA': \"for.obtain_pair.refresh_input.schema\",\n\n    'TOKEN_BLACKLIST_INPUT_SCHEMA':  \"for.blacklist_input.schema\",\n    'TOKEN_VERIFY_INPUT_SCHEMA':  \"for.verify_input.schema\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication in Function-Based Routes with Django Ninja\nDESCRIPTION: Example of using JWTAuth() to protect endpoints in a function-based router. This approach applies JWT authentication to a route defined with the router decorator pattern.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/auth_integration.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import router\nfrom ninja_jwt.authentication import JWTAuth\n\nrouter = router('')\n\n@router.get('/some-endpoint', auth=JWTAuth())\ndef some_endpoint(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication in Class-Based Routes with Django Ninja\nDESCRIPTION: Example of using JWTAuth() to protect endpoints in a class-based API controller. The JWTAuth authentication handler is applied to a specific route and allows access to authenticated users.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/auth_integration.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, route\nfrom ninja_jwt.authentication import JWTAuth\n\n@api_controller\nclass MyController:\n    @route.get('/some-endpoint', auth=JWTAuth())\n    def some_endpoint(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Tokens Manually for Users in Django Ninja JWT\nDESCRIPTION: This function creates and returns refresh and access tokens for a specified user. It utilizes the RefreshToken class from ninja_jwt.tokens to generate a refresh token and its associated access token, then returns both in serialized string format.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/creating_tokens_manually.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_jwt.tokens import RefreshToken\n\ndef get_tokens_for_user(user):\n    refresh = RefreshToken.for_user(user)\n\n    return {\n        'refresh': str(refresh),\n        'access': str(refresh.access_token),\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Token Claims with Subclassed Controller in Python\nDESCRIPTION: This snippet shows how to create custom token claims by subclassing TokenObtainPairController and its corresponding schema. It includes custom input and output schemas, and a controller that uses these schemas.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/customizing_token_claims.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_jwt.schema import TokenObtainPairInputSchema\nfrom ninja_jwt.controller import TokenObtainPairController\nfrom ninja_extra import api_controller, route\nfrom ninja import Schema\n\n\nclass UserSchema(Schema):\n    first_name: str\n    email: str\n\n\nclass MyTokenObtainPairOutSchema(Schema):\n    refresh: str\n    access: str\n    user: UserSchema\n\n\nclass MyTokenObtainPairSchema(TokenObtainPairInputSchema):\n    def to_response_schema(self):\n        out_dict = self.get_response_schema_init_kwargs()\n        out_dict.update(user=UserSchema.from_orm(self._user))\n        return MyTokenObtainPairOutSchema(**out_dict)\n\n\n@api_controller('/token', tags=['Auth'])\nclass MyTokenObtainPairController(TokenObtainPairController):\n    @route.post(\n        \"/pair\", response=MyTokenObtainPairOutSchema, url_name=\"token_obtain_pair\"\n    )\n    def obtain_token(self, user_token: MyTokenObtainPairSchema):\n        return user_token.to_response_schema()\n```\n\n----------------------------------------\n\nTITLE: Using Django Ninja Router for JWT Authentication in Python\nDESCRIPTION: This snippet demonstrates how to use Django Ninja Router for JWT authentication. It shows how to import and register the necessary routers with a NinjaAPI instance.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/customizing_token_claims.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_jwt.routers.blacklist import blacklist_router\nfrom ninja_jwt.routers.obtain import obtain_pair_router, sliding_router\nfrom ninja_jwt.routers.verify import verify_router\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\n\napi = NinjaAPI()\napi.add_router('/token', tags=['Auth'], router=obtain_pair_router)\n...\n```\n\n----------------------------------------\n\nTITLE: Custom JWT Controller Implementation\nDESCRIPTION: Example of creating a custom JWT controller by inheriting from TokenObtainPairController to customize token generation behavior\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/getting_started.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller\nfrom ninja_jwt.controller import TokenObtainPairController\n\n@api_controller('token', tags=['Auth'])\nclass MyCustomController(TokenObtainPairController):\n    \"\"\"obtain_token and refresh_token only\"\"\"\n...\napi.register_controllers(MyCustomController)\n```\n\n----------------------------------------\n\nTITLE: Registering JWT Controller in Django-Ninja API\nDESCRIPTION: Configuration code to register the NinjaJWTDefaultController with a Django-Ninja API instance.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_jwt.controller import NinjaJWTDefaultController\nfrom ninja_extra import NinjaExtraAPI\n\napi = NinjaExtraAPI()\napi.register_controllers(NinjaJWTDefaultController)\n```\n\n----------------------------------------\n\nTITLE: Registering NinjaJWTSlidingController with a Django Ninja API in Python\nDESCRIPTION: Code example showing how to register the NinjaJWTSlidingController with a NinjaExtraAPI instance to enable sliding token authentication in a Django Ninja JWT project.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/token_types.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_jwt.controller import NinjaJWTSlidingController\nfrom ninja_extra import NinjaExtraAPI\n\napi = NinjaExtraAPI()\napi.register_controllers(NinjaJWTSlidingController)\n```\n\n----------------------------------------\n\nTITLE: Programmatically Blacklisting a JWT Token in Django Ninja JWT\nDESCRIPTION: This code demonstrates how to blacklist a JWT token programmatically using the Ninja JWT package. It creates a RefreshToken instance from a base64-encoded token string and calls the blacklist method, which adds the token to the blacklist database.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/blacklist_app.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_jwt.tokens import RefreshToken\n\ntoken = RefreshToken(base64_encoded_token_string)\ntoken.blacklist()\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT Token Controller\nDESCRIPTION: Example of creating a custom token controller by inheriting from TokenObtainPairController.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller\nfrom ninja_jwt.controller import TokenObtainPairController\n\n@api_controller('token', tags=['Auth'])\nclass MyCustomController(TokenObtainPairController):\n    \"\"\"obtain_token and refresh_token only\"\"\"\n    ...\napi.register_controllers(MyCustomController)\n```\n\n----------------------------------------\n\nTITLE: Registering JWT Controller with Django-Ninja API\nDESCRIPTION: Shows how to register the NinjaJWTDefaultController with a Django-Ninja API instance to enable JWT authentication routes\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/getting_started.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_jwt.controller import NinjaJWTDefaultController\nfrom ninja_extra import NinjaExtraAPI\n\napi = NinjaExtraAPI()\napi.register_controllers(NinjaJWTDefaultController)\n```\n\n----------------------------------------\n\nTITLE: Obtaining JWT Token Pair\nDESCRIPTION: cURL command example to obtain an access and refresh token pair by authenticating with username and password.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"davidattenborough\", \"password\": \"boatymcboatface\"}' \\\n  http://localhost:8000/api/token/pair\n```\n\n----------------------------------------\n\nTITLE: Using JWT Access Token\nDESCRIPTION: Example of using a JWT access token to authenticate a protected API endpoint request.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNDU2LCJqdGkiOiJmZDJmOWQ1ZTFhN2M0MmU4OTQ5MzVlMzYyYmNhOGJjYSJ9.NHlztMGER7UADHZJlxNG0WSi22a2KaYSfd1S-AuT7lU\" \\\n  http://localhost:8000/api/some-protected-view/\n```\n\n----------------------------------------\n\nTITLE: JWT Token Refresh Request Example\nDESCRIPTION: Example curl command showing how to obtain a new access token using a refresh token\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/getting_started.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImNvbGRfc3R1ZmYiOiLimIMiLCJleHAiOjIzNDU2NywianRpIjoiZGUxMmY0ZTY3MDY4NDI3ODg5ZjE1YWMyNzcwZGEwNTEifQ.aEoAYkSJjoWH1boshQAaTkf8G3yn0kapko6HFRt7Rh4\"}' \\\n  http://localhost:8000/api/token/refresh/\n```\n\n----------------------------------------\n\nTITLE: Protected API Request with JWT\nDESCRIPTION: Example curl command showing how to authenticate a protected API endpoint using a JWT Bearer token\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/getting_started.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNDU2LCJqdGkiOiJmZDJmOWQ1ZTFhN2M0MmU4OTQ5MzVlMzYyYmNhOGJjYSJ9.NHlztMGER7UADHZJlxNG0WSi22a2KaYSfd1S-AuT7lU\" \\\n  http://localhost:8000/api/some-protected-view/\n```\n\n----------------------------------------\n\nTITLE: Refreshing JWT Access Token\nDESCRIPTION: cURL command example to obtain a new access token using a refresh token.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImNvbGRfc3R1ZmYiOiLimIMiLCJleHAiOjIzNDU2NywianRpIjoiZGUxMmY0ZTY3MDY4NDI3ODg5ZjE1YWMyNzcwZGEwNTEifQ.aEoAYkSJjoWH1boshQAaTkf8G3yn0kapko6HFRt7Rh4\"}' \\\n  http://localhost:8000/api/token/refresh\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation Request Example\nDESCRIPTION: Example curl command demonstrating how to obtain JWT access and refresh tokens by authenticating with username and password\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/getting_started.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"davidattenborough\", \"password\": \"boatymcboatface\"}' \\\n  http://localhost:8000/api/token/pair\n```\n\n----------------------------------------\n\nTITLE: Handling API Exceptions in Django Ninja JWT in Python\nDESCRIPTION: This snippet shows how to handle API exceptions when using Django Ninja JWT without NinjaExtra. It defines a custom exception handler and registers it with the NinjaAPI instance.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/customizing_token_claims.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\nfrom ninja_extra import exceptions\n\napi = NinjaAPI()\napi.add_router('', tags=['Auth'], router=router)\n\ndef api_exception_handler(request, exc):\n    headers = {}\n\n    if isinstance(exc.detail, (list, dict)):\n        data = exc.detail\n    else:\n        data = {\"detail\": exc.detail}\n\n    response = api.create_response(request, data, status=exc.status_code)\n    for k, v in headers.items():\n        response.setdefault(k, v)\n\n    return response\n\napi.exception_handler(exceptions.APIException)(api_exception_handler)\n```\n\n----------------------------------------\n\nTITLE: Django Settings Configuration for JWT\nDESCRIPTION: Django settings configuration to enable JWT localization support by adding ninja_jwt to INSTALLED_APPS\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/getting_started.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'ninja_jwt',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for JWT\nDESCRIPTION: Django settings configuration to enable translations and localizations for ninja_jwt.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'ninja_jwt',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Ninja JWT Blacklist App in Django Settings\nDESCRIPTION: This code shows how to add the Ninja JWT token blacklist app to the INSTALLED_APPS in a Django project's settings.py file. Including this app enables token tracking and blacklisting functionality for refresh and sliding tokens.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/blacklist_app.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Django project settings.py\n\n...\n\nINSTALLED_APPS = (\n    ...\n    'ninja_jwt.token_blacklist',\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for Django Ninja JWT\nDESCRIPTION: List of Python package dependencies with specific version requirements for the Django Ninja JWT project. Includes core dependencies like cryptography and python-jose, along with testing frameworks like pytest and code quality tools like ruff.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/requirements-tests.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nclick==8.1.8\ncryptography\ndjango-stubs\nfreezegun\nninja-schema>=0.14.1\npytest\npytest-asyncio==0.24.0\npytest-cov\npytest-django\npython-jose==3.3.0\nruff ==0.11.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Dependencies for django-ninja-jwt Project\nDESCRIPTION: This requirements file specifies the development dependencies needed for the django-ninja-jwt project. It installs the current package in editable mode, includes documentation and testing dependencies from separate requirement files, and adds pre-commit hooks for code quality checks.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n-r requirements-docs.txt\n-r requirements-tests.txt\n\npre-commit\n```\n\n----------------------------------------\n\nTITLE: Listing Documentation Dependencies for Django Ninja JWT\nDESCRIPTION: This snippet lists all the required Python packages for building documentation for the Django Ninja JWT project. It includes MkDocs and related plugins for generating documentation from markdown files, with specific version constraints.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/requirements-docs.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmarkdown-include\nmdx-include >=1.4.1,<2.0.0\nmkdocs >=1.1.2,<2.0.0\nmkdocs-markdownextradata-plugin >=0.1.7,<0.3.0\nmkdocs-material\nmkdocstrings\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Django Ninja JWT in Shell\nDESCRIPTION: Executes the test suite for the Django Ninja JWT project using a Makefile command.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/development_and_contributing.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$(venv) make test\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage for Django Ninja JWT in Shell\nDESCRIPTION: Runs the test suite with code coverage analysis for the Django Ninja JWT project using a Makefile command.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/development_and_contributing.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$(venv) make test-cov\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies and Pre-commit Hooks in Shell\nDESCRIPTION: Uses a Makefile to install development libraries and set up pre-commit hooks for code linting and style checking.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/development_and_contributing.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$(venv) make install\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja JWT Package\nDESCRIPTION: Command to install the django-ninja-jwt package using pip package manager.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install django-ninja-jwt\n```\n\n----------------------------------------\n\nTITLE: Installing Flit Package Manager in Shell\nDESCRIPTION: Installs the Flit package manager within the virtual environment. Flit is used for building and publishing Python packages.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/docs/development_and_contributing.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$(venv) pip install flit\n```\n\n----------------------------------------\n\nTITLE: RST Image with Link Configuration\nDESCRIPTION: ReStructuredText markup for displaying the Jazzband logo with a hyperlink and alt text.\nSOURCE: https://github.com/eadwincode/django-ninja-jwt/blob/master/CONTRIBUTING.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: https://jazzband.co/static/img/jazzband.svg\n   :target: https://jazzband.co/\n   :alt: Jazzband\n```"
  }
]